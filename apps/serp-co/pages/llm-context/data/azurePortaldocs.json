[
  {
    "owner": "azure",
    "repo": "portaldocs",
    "content": "TITLE: Creating a New Azure Portal Extension\nDESCRIPTION: Command to create a new Azure Portal extension using the Azure Portal CLI, specifying the extension name and output directory.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nap new -n Microsoft_Azure_YourExtension -o ./targetdirectory\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Compute.SizeSelector Control in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.Compute.SizeSelector control for virtual machine size selection. It includes recommended sizes, constraints for availability zones, disk type filtering options, OS platform configuration, and image reference details for proper VM costing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.SizeSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Enclosing comment\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Compute.SizeSelector\",\n    \"label\": \"Size\",\n    \"toolTip\": \"\",\n    \"recommendedSizes\": [\n      \"Standard_D1\",\n      \"Standard_D2\",\n      \"Standard_D3\"\n    ],\n    \"constraints\": {\n      \"allowedSizes\": [],\n      \"excludedSizes\": [],\n      \"numAvailabilityZonesRequired\": 3,\n      \"zone\": \"3\"\n    },\n    \"options\": {\n      \"hideDiskTypeFilter\": false\n    },\n    \"osPlatform\": \"Windows\",\n    \"imageReference\": {\n      \"publisher\": \"MicrosoftWindowsServer\",\n      \"offer\": \"WindowsServer\",\n      \"sku\": \"2012-R2-Datacenter\"\n    },\n    \"count\": 2,\n    \"visible\": true\n  }\n// Enclosing comment\n```\n\n----------------------------------------\n\nTITLE: Fetching Providers and Populating DropDown in Form Step - JSON\nDESCRIPTION: This configuration demonstrates a multi-element form step that uses an ARM API Control to fetch provider data and binds the response to a DropDown list. The providersApi element retrieves ExpressRoute service provider information using a GET request tied to the subscription, and providerDropDown presents the provider names to the user for selection. Constraints ensure a valid provider is chosen, with required fields and mapping of API output to UI options. Prerequisites include the Microsoft.Common.ResourceScope and correct API endpoint permissions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"steps\": [\n    {\n        \"name\": \"basics\",\n        \"label\": \"Basics\",\n        \"elements\": [\n            {\n                \"name\": \"resourceScope\",\n                \"type\": \"Microsoft.Common.ResourceScope\"\n            },\n            {\n                \"name\": \"providersApi\",\n                \"type\": \"Microsoft.Solutions.ArmApiControl\",\n                \"request\": {\n                    \"method\": \"GET\",\n                    \"path\": \"[concat(steps('basics').resourceScope.subscription.id, '/providers/Microsoft.Network/expressRouteServiceProviders?api-version=2019-02-01')]\"\n                }\n            },\n            {\n                \"name\": \"providerDropDown\",\n                \"type\": \"Microsoft.Common.DropDown\",\n                \"label\": \"Provider\",\n                \"placeholder\": \"Select a provider\",\n                \"toolTip\": \"The ISP that will be providing the express route connection\",\n                \"constraints\": {\n                    \"allowedValues\": \"[map(steps('basics').providersApi.value, (item) => parse(concat('{\\\"label\\\":\\\"', item.name, '\\\",\\\"value\\\":\\\"', item.name, '\\\"}')))]\",\n                    \"required\": true\n                },\n                \"visible\": true\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Sequential Pageable Grid ViewModel in TypeScript\nDESCRIPTION: This TypeScript code shows how to create and configure a ViewModel for an Azure Portal grid that implements the 'load more' pattern. It creates a `_sequentialDataNavigator` using the `createNavigator` method of a `QueryCache` (configured for continuation tokens). This navigator is then passed to the grid's `Pageable` extension options with the type set to `Sequential`. The `onInputsSet` method demonstrates how to trigger data loading based on input parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-virtualizedgriddata.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract,\n            initialState: any,\n            dataContext: ControlsArea.DataContext) {\n\n    // create the data navigator from the data context (above)\n    this._sequentialDataNavigator = dataContext.productDataByContinuationToken.productsCache.createNavigator(container);\n\n    // Define the extensions you wish to enable.\n    var extensions = MsPortalFx.ViewModels.Controls.Lists.Grid.Extensions.Pageable;\n\n    // Define the options required to have the extensions behave properly.\n    var pageableExtensionOptions = {\n        pageable: {\n            type: MsPortalFx.ViewModels.Controls.Lists.Grid.PageableType.Sequential,\n            dataNavigator: this._sequentialDataNavigator\n        }\n    };\n\n    // Initialize the grid view model.\n    this.sequentialPageableGridViewModel = new MsPortalFx.ViewModels.Controls.Lists.Grid\n        .ViewModel<SamplesExtension.DataModels.Product, ProductSelectionItem>(\n            null, extensions, pageableExtensionOptions);\n\n    // Set up which columns to show.  If you do not specify a formatter, we just call toString on\n    // the item.\n    var basicColumns: MsPortalFx.ViewModels.Controls.Lists.Grid.Column[] = [\n        {\n            itemKey: \"id\",\n            name: ko.observable(ClientResources.gridProductIdHeader)\n        },\n        {\n            itemKey: \"description\",\n            name: ko.observable(ClientResources.gridProductDescriptionHeader)\n        },\n    ];\n    this.sequentialPageableGridViewModel.showHeader = true;\n\n    this.sequentialPageableGridViewModel.columns =\n        ko.observableArray<MsPortalFx.ViewModels.Controls.Lists.Grid.Column>(basicColumns);\n\n    this.sequentialPageableGridViewModel.summary =\n        ko.observable(ClientResources.basicGridSummary);\n\n    this.sequentialPageableGridViewModel.noRowsMessage =\n        ko.observable(ClientResources.nobodyInDatabase);\n}\n\n\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._sequentialDataNavigator.setQuery({ categoryId: inputs.categoryId });\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a TypeScript Client Notification Linked Directly to a Blade\nDESCRIPTION: Shows how to publish a client-side notification that links directly to a specific blade within an Azure Portal extension using TypeScript. It specifies the target extension, blade name, and input parameters for the blade. Clicking the notification navigates the user to the configured blade with the provided inputs. This uses the `MsPortalFx.Hubs.Notifications.ClientNotification.publish` method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nMsPortalFx.Hubs.Notifications.ClientNotification.publish({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Information,\n    linkedBlade: {\n        extension: \"ExtensionName\",\n        detailBlade: \"BladeName\",\n        detailBladeInputs: {\n            bladeInputProperty1: \"bladeInput1\"\n        }\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Level Resource Creation Form in JSON\nDESCRIPTION: This snippet shows a Form configuration for creating a top-level resource. It includes a resourceScope control, tags step, and deployment configuration. The form uses a custom resource name constraint and references the resourceScope outputs in the deployment section.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"steps\": [\n        {\n          \"name\": \"step1\",\n          \"label\": \"Basics\",\n          \"description\": \"Add a description of your service here to quickly introduce your service to customers. Also add a Learn More link that links to documentation or Azure's marketing site for your resource type. [Learn more](https://azure.microsoft.com/)\",\n          \"elements\": [\n            {\n              \"type\": \"Microsoft.Common.ResourceScope\",\n              \"name\": \"resourceScope\",\n              \"resourceName\": {\n                \"label\": \"Engine name\",\n                \"constraints\": {\n                  \"validations\": [\n                    {\n                      \"regex\": \"^[A-Za-z0-9]{0,6}$\",\n                      \"message\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n                    }\n                  ]\n                },\n                \"toolTip\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n              }\n            }\n          ]\n        },\n        {\n          \"name\": \"tags\",\n          \"label\": \"Tags\",\n          \"elements\": [\n            {\n              \"name\": \"tagsByResource\",\n              \"type\": \"Microsoft.Common.TagsByResource\",\n              \"resources\": [\n                \"Providers.Test/statefulIbizaEngines\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"resourceGroupId\": \"[steps('step1').resourceScope.resourceGroup.id]\",\n        \"parameters\": {\n          \"name\": \"[steps('step1').resourceScope.resourceName]\",\n          \"location\": \"centralus\"\n        },\n        \"template\":\n        {\n          \"file\": \"../../UiDef/DxExtensionResource/DeploymentTemplate.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Button with Validation in TypeScript\nDESCRIPTION: Sets up a create button with validation and deployment logic for Azure Portal. Handles form validation, ARM template deployment, error handling, and telemetry logging. Includes safeguards against premature blade closure and secure handling of sensitive deployment parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-create.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { instanceId } = MsPortalFx.Base.Diagnostics.Telemetry.Context.getBladeContext();\nconst onCreateButtonClick = () => {\n    // Review & Create\n    if (this.tabs.activeTabIndex() < this.tabs.tabs().length - 1) {\n        // Go to the last tab.\n        return this.tabs.activeTabIndex(this.tabs.tabs().length - 1);\n    }\n\n    // Create\n    createButton.disabled(true);\n    // All form and Arm validations have passed, deploy the template.\n    //docs#deployTemplate\n    return provisioning.deployTemplate(this._supplyTemplateDeploymentOptions())\n        //docs#deployTemplate\n        .then((val) => {\n            // IMPORTANT: If you decide to log your TemplateDeploymentResults, particularly the parameters\n            // property, make sure you do *NOT* log any secure strings or secure objects (e.g. passwords).\n            // This is a security compliance issue.\n            FxBase.Diagnostics.Telemetry.trace({\n                source: \"CreateEngineSample\",\n                action: \"TemplateDeploymentResult\",\n                data: {\n                    correlationId: val.correlationId,\n                    subscriptionId: val.subscriptionId,\n                    bladeInstanceId: instanceId,\n                },\n            });\n            // The provisioner will handle closing the blade. Do not close it manually, especially before confirmation that your deployment has been provisioned.\n            // Closing the blade explicitly/manually can cause provisioning to fail to be initiated.\n        })\n        .catch(err => {\n            // This should only occur if there was a network issue when trying to call ARM, since validation has already succeeded.\n            // However, you should handle any sort of errors (connection, server errors etc.) should they arrise and display them to the customer.\n            showError(MsPortalFx.getLogFriendlyMessage(err), () => {\n                // Display the arm errors blade with results from arm\n                void container.openContextPane(this.context.provisioning.getArmErrorsBladeReference({\n                    errors: err,\n                    subscriptionId: this._subscription().subscriptionId,\n                    troubleshootingLinks: [TemplateBlade.DoesProvisioning.TroubleshootingLinks.CommonDeploymentErrors, TemplateBlade.DoesProvisioning.TroubleshootingLinks.CreateArmTemplateDocs],\n                }));\n            });\n            createButton.disabled(false);\n        });\n};\n\n// Set up the create button.\nconst createButton = this.createButton = FxButton.create(container, {\n    text: ClientResources.reviewAndCreate,\n    onClick: onCreateButtonClick,\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Token Exchange in C#\nDESCRIPTION: C# implementation for exchanging portal authorization tokens for downstream service access tokens using AAD authentication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n    // Get the token passed to the controller\n    var portalAuthorizationHeader = PortalRequestContext.Current.GetCorrelationData<AuthorizationCorrelationProvider>();\n    if (portalAuthorizationHeader == null) {\n        // This should never happen, the auth module should have returned 401 if there wasn't a valid header present\n        throw new HttpException(401, \"Unauthorized\");\n    }\n\n    // Exchange it for the token that should pass to downstream services\n    var exchangedAuthorizationHeader = GetExchangedToken(portalAuthorizationHeader, intuneClientId, intuneClientCert, \"https://graph.windows.net/\");\n\n    // Call downstream service with exchanged header\n    var headers = new NameValueCollection();\n    headers.Add(\"Authorization\", exchangedAuthorizationHeader);\n    webApiClient.GetAsync(uri, \"MyOperation\", headers);\n\n    // Helper method to exchange tokens\n    string GetExchangedToken(string portalAuthorizationHeader, string clientId, X509Certificate2 clientCertificate, string resource) {\n\n        // proof that the intune extension is making the token request\n        var clientAssertion = new ClientAssertionCertificate(clientId, clientCertificate);\n\n        // proof that the request originated from the portal and is on behalf of a valid user\n        var accessToken = GetAccessTokenFromAuthorizationHeader(portalAuthorizationHeader);\n        var userAssertion = new UserAssertion(accessToken, \"urn:ietf:params:oauth:grant-type:jwt-bearer\");\n\n        // the actual token exchange\n        var exchangedToken = authContext.AcquireToken(resource, clientAssertion, userAssertion);\n\n        return exchangedToken.GetAuthorizationHeader();\n    }\n\n    string GetAccessTokenFromAuthorizationHeader(string authorizationHeader) {\n        // The header will be in the form \"Bearer ey��MZ\"\n        // The access token in the last part of the header\n        var separator = new char[] { ' ' };\n        var accessToken = authorizationHeader.Split(separator, StringSplitOptions.RemoveEmptyEntries).LastOrDefault();\n\n        return accessToken;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring View in Azure Portal Declarative Resource Overview\nDESCRIPTION: JSON configuration for adding a Monitoring view to display resource-specific charts and metrics. Metrics are derived from Azure Monitor and can be configured with different aggregation types.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Monitoring\",\n    \"charts\": [\n        {\n            \"title\": \"CPU (average)\",\n            \"metrics\": [\n                {\n                    \"id\": \"Percentage CPU\",\n                    \"aggregationType\": \"Avg\",\n                    \"resourceMetadata\": {\n                        \"id\": \"[parameters('id')]\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ReactView with Redux in TypeScript\nDESCRIPTION: This snippet demonstrates setting up a simple ReactView component with Redux integration. It includes the store creation, component definition, and necessary decorators for Azure Portal ReactView implementation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport * as Redux from \"redux\";\nimport * as ReactView from \"@microsoft/azureportal-reactview/ReactView\";\nimport { versionId } from \"@microsoft/azureportal-reactview/major-version/1\";\n\ninterface StoreState {\n    text: string;\n}\n\nconst initialState: StoreState = { text: \"Default\" };\n\nexport const store = Redux.createStore((state: StoreState = initialState, action: Redux.AnyAction) => {\n    switch (action.type) {\n        case \"SetText\":\n            return { ...state, text: action.text };\n        case \"ResetState\":\n            return { ...initialState };\n        default:\n            return state;\n    }\n});\n\ninterface ExampleProps {\n  text: string;\n}\n\n@ReactView.Decorator<{}, {}, StoreState>({\n    store,\n    viewReady: (state) => !!state.text,\n    versionId,\n})\n@ReactView.ReactReduxConnect.Decorator<StoreState>(state => ({ text: state.text }))\nexport class Example extends React.Component<ExampleProps, {}> {\n    public render() {\n        return (\n          <div>\n            <p>{this.props.text}</p>\n          </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ParameterProvider Logic in TypeScript ViewModel\nDESCRIPTION: This TypeScript code shows the implementation of a ViewModel for a Part designated as a ParameterProvider. It initializes `MsPortalFx.ViewModels.ParameterProvider` with two generic types (TResult for data exchanged with the collector, TEditScope for the form's data model) and mandatory mapping callbacks: `mapIncomingDataForEditScope` (transforms collector data to form data, handling defaults) and `mapOutgoingDataForCollector` (transforms form data back to collector data). Dependencies include MsPortalFx framework classes and potentially Knockout (`ko`). The ViewModel uses dependency injection (`@Di.Class`) and manages form elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Di.Class(\"viewModel\")\nexport class ParameterProviderFormPartViewModel\nextends MsPortalFx.ViewModels.Forms.Form.ViewModel<ServerConfig>\nimplements ParameterProviderForm.Contract {\n\n/**\n * View model for the provider. This is referenced in the corresponding .pdl file.\n */\npublic parameterProvider: MsPortalFx.ViewModels.ParameterProvider<ServerConfig, ProviderModels.ServerFormData>;\n\npublic serverIdentifierTextBox: ObsoleteTextBoxViewModel;\n\npublic fixedStorageSlider: ObsoleteSliderViewModel;\n\n/**\n * Constructs an instance of ParameterProviderFormPartViewModel.\n */\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract, _mock: AjaxMock) {\n    super(container);\n\n    this.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<ServerConfig, ProviderModels.ServerFormData>(container, {\n        mapIncomingDataForEditScope: (incoming: ServerConfig): ProviderModels.ServerFormData => {\n            // Collectors are not required to supply complete initial data, so\n            // providers must always fill in anything that is missing with defaults.\n            incoming = incoming || <ServerConfig>{};\n            incoming.serverName = incoming.serverName || ko.observable(\"\");\n            incoming.diskSpaceBytes = incoming.diskSpaceBytes || ko.observable(defaultDiskSpace);\n\n            return {\n                serverIdentifier: incoming.serverName,\n                fixedStorageGigabytes: ko.observable(incoming.diskSpaceBytes() / bytesPerGigabyte),\n            };\n        },\n\n        mapOutgoingDataForCollector: (outgoing: ProviderModels.ServerFormData): ServerConfig => {\n            return {\n                serverName: outgoing.serverIdentifier,\n                diskSpaceBytes: ko.observable(outgoing.fixedStorageGigabytes() * bytesPerGigabyte),\n            };\n        },\n    });\n\n    // Use the form to edit the edit scope set up by the provider\n    this.editScope = this.parameterProvider.editScope;\n    this.serverIdentifierTextBox = new ObsoleteTextBox.ViewModel(container, this, \"serverIdentifier\");\n    this.fixedStorageSlider = new ObsoleteSlider.ViewModel(container, this, \"fixedStorageGigabytes\", { min: ko.observable(50), max: ko.observable(1000), showStepMarkers: ko.observable(false) });\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Batch Loading Data from ARM\nDESCRIPTION: Demonstrates how to batch multiple ARM requests into a single call for improved performance.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst loadDataFromARM = batch<Resource>({\n    type: \"GET\",\n    uri: parameters.resourceId,\n    setTelemetryHeader: \"DataLoadForTemplateBlade\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AssetType with Supported Kinds in PDL – XML\nDESCRIPTION: This XML snippet demonstrates how to define supported kinds for a resource type within an AssetType element in the Portal Definition Language (PDL). Each <Kind> element declares a resource kind by name, enabling the Azure Portal to override default presentation and behavior based on kind values. Only the 'Name' attribute is required, while additional behaviors can be specified elsewhere. This schema is required when custom asset kinds are needed for advanced portal customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType ...>\\n  ...\\n  <ResourceType ...>\\n    <Kind Name=\\\"kind1\\\" />\\n    <Kind Name=\\\"kind2\\\" />\\n    <Kind Name=\\\"kind3\\\" />\\n  </ResourceType>\\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AJAX Request with QueryCache in TypeScript\nDESCRIPTION: Example showing how to override the default QueryCache behavior using supplyData to customize AJAX requests and post-process response data. Demonstrates GET request implementation with custom headers and response filtering.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic websitesQuery = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.WebsiteModel, any>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(Shared.websitesControllerUri),\n\n    // Overriding the supplyData function and supplying our own logic used to perform an ajax\n    // request.\n    supplyData: (method, uri, headers, data) => {\n        // Using MsPortalFx.Base.Net.ajax to perform our custom ajax request\n        return MsPortalFx.Base.Net.ajax({\n            uri: uri,\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\"\n        }).then((response: any) => {\n            // Post processing the response data of the ajax request.\n            if (Array.isArray(response) && response.length > 5) {\n                return response.slice(5);\n            }\n            else {\n                return response;\n            }\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Example: Requesting ARM Template Deployment in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use the `MsPortalFx.Azure.ResourceManager.deployTemplate` API to initiate an ARM template deployment using the default 'RequestDeploymentOnly' mode. It shows how to construct the `TemplateDeploymentOptions` object with necessary details like subscription, resource group, template location (using `templateLinkUri`), and parameters. The code includes handling the promise returned by the API to process the result (containing the correlation ID if successful) or handle errors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the template deployment options.\nvar deploymentOptions: MsPortalFx.Azure.ResourceManager.TemplateDeploymentOptions = {\n    subscriptionId: \"1e215951-cf63-4cd9-b5c5-748a1f97e984\",\n    deploymentName: \"Samples.Engine\",\n    resourceGroupName: \"armDeploymentTestRG\",\n    resourceGroupLocation: \"centralus\",\n    resourceProviders: [ \"EngineRP\" ],\n    templateLinkUri: \"http://uri-of-arm-template\"\n    // Or -> templateJson: \"json\",\n    parameters: {\n        name: \"engine-test-1\",\n        displacement: \"disp-1\",\n        model: \"engine-v1\"\n    },\n    // Defaults to -> suppressDefaultNotifications: false,\n    // Defaults to -> deploymentMode: MsPortalFx.Azure.ResourceManager.TemplateDeploymentMode.RequestDeploymentOnly\n};\n\n// Deploy the template.\nMsPortalFx.Azure.ResourceManager.deployTemplate(options)\n    .then((result: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // ARM accepted the deployment request.\n        // Store the correlation id if you want to poll for deployment updates afterwards.\n        // Do something with the result.\n    }, (error: any) => {\n        // Something went wrong!\n    });\n```\n\n----------------------------------------\n\nTITLE: Constructing Printer Resource Menu Configuration with Error Handling in TypeScript\nDESCRIPTION: Defines an asynchronous function `getPrinterMenu` that constructs the resource menu configuration (`FxAssets.ResourceMenuConfig`) for a specific printer resource instance identified by `resourceId`. It includes a static 'Overview' menu item and sets up observables (`handledError`, `fail`) for robust error handling, resolving the promise immediately while loading resource details asynchronously to avoid blocking the UI. It leverages a `DataContext` for data access and uses a helper function `handleResourceMenuFailures` for common error scenarios. The function adheres to the guideline of *not* rejecting the promise on failure, instead signaling errors via the observables.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPrinterMenu(resourceId: string, dataContext: DataContext): Promise<FxAssets.ResourceMenuConfig> {\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // EXAMPLE : Providing static menu items for a kind of resource.\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // Build the menu items.\n   const overviewItem: FxAssets.MenuItem = {\n       id: \"overview\", // menu item IDs must be unique, must not be localized, should not contain spaces and should be lowercase\n       displayText: MenuStrings.overview,\n       enabled: ko.observable(true),\n       keywords: MenuKeywords.overview.split(\" \"),\n       icon: Images.printer,\n       supplyBladeReference: () => {\n           return BladeReferences.forBlade(\"PrinterBlade\").createReference({ parameters: { id: resourceId }});\n       },\n   };\n   // Build the resource menu config.\n   const handledError = ko.observable<MsPortalFx.ViewModels.ErrorOptions>();\n   const fail = ko.observable<string>();\n   const menuConfig: FxAssets.ResourceMenuConfig = {\n       overview: overviewItem,\n       options: {\n           enableRbac: true,\n           enableTags: true,\n       },\n       groups: [],\n       handledError,\n       fail,\n   };\n\n   // Load the resource and update the menu items in the background.\n   // In the case of this asset type, the ResourceProvidedBy for the resource menu is marked as\n   // \"NoResource\". In this case, the AJAX call to retrieve the printer resource from ARM should\n   // not be part of the menu config. In this case, the menu config should be returned as\n   // quickly as possible with as many options completed as possible without the resource (such\n   // as the overview menu item) and then the menu will be updated with the printer resource\n   // when loaded. Therefore, the getResource() call is not being included in the returned\n   // promise below to avoid blocking the UX. The UX can reveal the overview blade and partial\n   // menu and when the printer is loaded and the menu is updated, the blade will adapt.\n   dataContext.printerData.getResource(resourceId, \"resource menu\").then((_ /*printerData*/) => {\n       // In production code, this code would make changes to the menu (add items, etc).\n   }).catch((error) => {\n       // IMPORTANT: Handle the late-failure errors using the common helper.\n       if (!handleResourceMenuFailures(error, handledError, ClientResources.AssetTypeNames.Printer.lowerSingular, resourceId)) {\n           fail((error && error.message) || JSON.stringify(error));\n       }\n   });\n\n   return Promise.resolve(menuConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: Using cachedAjax() for Optimized Data Retrieval in TypeScript\nDESCRIPTION: Example showing how to override the supplyData function in a QueryCache to use cachedAjax() instead of ajax(). This approach reduces network bandwidth and client-side processing by implementing change detection via a SHA256 hash.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AjaxCachedResult<T> {\n    cachedAjax?: boolean;\n    data?: T;\n    modified?: boolean;\n    textStatus?: string;\n    jqXHR?: JQueryXHR<T>;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\npublic websitesQuery = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.WebsiteModel, any>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(Shared.websitesControllerUri),\n\n    // Overriding the supplyData function and supplying our own logic used to perform an ajax\n    // request.\n    supplyData: (method, uri, headers, data) => {\n        // Using MsPortalFx.Base.Net.cachedAjax to perform our custom ajax request\n        return MsPortalFx.Base.Net.cachedAjax({\n            uri: uri,\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\"\n        }).then((response: MsPortalFx.Base.Net.AjaxCachedResult<any>) => {\n            // Post processing the response data of the ajax request.\n            if (response.modified && Array.isArray(response.data) && response.data.length > 5) {\n                return response.data = response.data.slice(5);\n            }\n            return response;\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying ARM Template and Awaiting Completion in TypeScript\nDESCRIPTION: This snippet demonstrates how to deploy an Azure Resource Manager template and wait for its completion. It uses the DeployAndAwaitCompletion mode, which triggers a single progress callback when ARM accepts the deployment request, and resolves the promise when the deployment is complete.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the template deployment options.\nvar deploymentOptions: MsPortalFx.Azure.ResourceManager.TemplateDeploymentOptions = {\n    // Same options as in sample #1, except:\n    deploymentMode: MsPortalFx.Azure.ResourceManager.TemplateDeploymentMode.DeployAndAwaitCompletion\n};\n\n// Deploy the template.\nMsPortalFx.Azure.ResourceManager.deployTemplate(options)\n    .progress((progress: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // Will be called only once, when ARM accepts the deployment request.\n        // Store the correlation id if you have UI that reflects the progress and the user abandons the session.\n    }).then((result: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // Deployment is complete.\n    }, (error: any) => {\n        // Something went wrong!\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Portal Overview View Schema in JSON\nDESCRIPTION: Complete schema definition for creating an Overview blade view in Azure Portal. Includes essential components like commands, properties, features, and resource definitions. The schema supports customizable titles, summaries, feature cards with icons, and action links.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-OverviewViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Overview\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [\n      {\n        \"kind\": \"MoveCommand\",\n        \"id\": \"moveCommand\",\n        \"displayName\": {\n          \"property\": \"move\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Move\"\n      },\n      {\n        \"kind\": \"DeleteCommand\",\n        \"id\": \"deleteCommand\",\n        \"displayName\": {\n          \"property\": \"delete\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Delete\",\n        \"confirmation\": {\n          \"title\": {\n            \"property\": \"deleteResourceTitle\"\n          },\n          \"message\": {\n            \"property\": \"deleteResourceMessage\"\n          }\n        },\n        \"definition\": {\n          \"apiVersion\": \"2014-04-01\"\n        }\n      }\n    ],\n    \"properties\": {\n      \"title\": \"title\",\n      \"summary\": {\n        \"title\": {\n          \"property\": \"tab1Title\"\n        },\n        \"description\": \"By default, all resources added to profiles within the same network security perimeter will be able to communicate with each other, but not with the internet or resources outside the perimeter.\",\n        \"learnMore\": {\n          \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n          \"ariaLabel\": \"Learn more about Azure Portal\"\n        }\n      },\n      \"features\": [\n        {\n          \"title\": {\n            \"property\": \"tab1feature1Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature1Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/engine.svg\"\n          },\n          \"action\": [\n            {\n              \"menu\": \"tags\",\n              \"displayName\": {\n                \"property\": \"tab1feature1actionDisplayName\"\n              }\n            }\n          ]\n        },\n        {\n          \"title\": {\n            \"property\": \"tab1feature2Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature2Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/engine.svg\"\n          },\n          \"action\": {\n            \"blade\": {\n              \"name\": \"FormBladeArmRequest_Dx\"\n            },\n            \"displayName\": {\n              \"property\": \"tab1feature2actionDisplayName\"\n            }\n          }\n        },\n        {\n          \"title\": {\n            \"property\": \"tab1feature3Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature3Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/msi.svg\"\n          },\n          \"action\": {\n            \"url\": \"https://www.azure.com\",\n            \"displayName\": {\n              \"property\": \"tab1feature3actionDisplayName\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Linking in Azure Portal\nDESCRIPTION: Demonstrates various URL formats for deep linking to blades, marketplace items, Azure resources, and portal assets in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/{directory}#blade/{extension}/{blade}\n\nhttps://portal.azure.com/{directory}#blade/{extension}/{blade}/{param1name}/{param1Val}/{param2name}/{param2Val}\n\nhttps://portal.azure.com/{directory}#create/{packageid}\n\nhttps://portal.azure.com/{directory}#create/{packageid}/preview\n\nhttps://portal.azure.com/{directory}#resource{resourceid}\n\nhttps://portal.azure.com/{directory}#asset/{extension}/{assettype}/{assetid}\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Implementation in Azure Portal Extension Controller\nDESCRIPTION: Server-side code that exchanges the received portal token for a token targeting another resource. This implementation uses MSAL.Net to perform the token exchange using the On-Behalf-Of flow, allowing the extension to call downstream services with the proper authorization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n    // Get the token passed to the controller\n    var portalAuthorizationHeader = PortalRequestContext.Current.GetCorrelationData<AuthorizationCorrelationProvider>();\n    if (portalAuthorizationHeader == null)\n    {\n        // This should never happen, the auth module should have returned 401 if there wasn't a valid header present\n        throw new HttpException(401, \"Unauthorized\");\n    }\n\n    // Exchange it for the token that should pass to downstream services\n    var exchangedAuthorizationHeader = GetExchangedToken(portalAuthorizationHeader, intuneClientId, intuneClientCert, \"https://graph.windows.net/\");\n\n    // Call downstream service with exchanged header\n    var headers = new NameValueCollection();\n    headers.Add(\"Authorization\", exchangedAuthorizationHeader);\n    webApiClient.GetAsync(uri, \"MyOperation\", headers);\n\n    // Helper method to exchange tokens\n    async Task<string> GetExchangedToken(string portalAuthorizationHeader, string clientId, X509Certificate2 clientCertificate, string resource)\n    {\n        var scopes = new string[] { resource + \"./default\" };    // This is the MSAL.Net requirement to request tokens for the default scope for a given resource.\n        var confidentialClientApp = ConfidentialClientApplicationBuilder\n                .Create(clientId)\n                .WithCertificate(clientCertificate)\n                .WithAuthority(this.aadAuthority.ToString())    // This value can be obtained from the config value using Microsoft.Portal.Security.AzureActiveDirectory.IAadAuthenticationConfiguration.Authority.\n                .Build();\n\n        // Proof that the request originated from the portal and is on behalf of a valid user\n        var accessToken = GetAccessTokenFromAuthorizationHeader(portalAuthorizationHeader);\n        var userAssertion = new UserAssertion(accessToken, \"urn:ietf:params:oauth:grant-type:jwt-bearer\");\n\n        // The actual token exchange\n        var exchangedToken = await extensionApp.AcquireTokenOnBehalfOf(scopes, userAssertion)\n            .WithSendX5C(true)      // This is required to use SN+I for certificate validation.\n            .ExecuteAsync()\n            .ConfigureAwait(false);\n\n        return exchangedToken.CreateAuthorizationHeader();\n    }\n\n    string GetAccessTokenFromAuthorizationHeader(string authorizationHeader)\n    {\n        // The header will be in the form \"Bearer ey��MZ\"\n        // The access token in the last part of the header\n        var separator = new char[] { ' ' };\n        var accessToken = authorizationHeader.Split(separator, StringSplitOptions.RemoveEmptyEntries).LastOrDefault();\n\n        return accessToken;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Top-Level Resource Creation in Azure Portal Form\nDESCRIPTION: This snippet shows how to implement a Form view for creating a top-level resource in Azure Portal. It includes resource scope control, custom steps, and deployment configuration for resource creation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"steps\": [\n        {\n          \"name\": \"step1\",\n          \"label\": \"Basics\",\n          \"description\": \"Add a description of your service here to quickly introduce your service to customers. Also add a Learn More link that links to documentation or Azure's marketing site for your resource type. [Learn more](https://azure.microsoft.com/)\",\n          \"elements\": [\n            {\n              \"type\": \"Microsoft.Common.ResourceScope\",\n              \"name\": \"resourceScope\",\n              \"resourceName\": {\n                \"label\": \"Engine name\",\n                \"constraints\": {\n                  \"validations\": [\n                    {\n                      \"regex\": \"^[A-Za-z0-9]{0,6}$\",\n                      \"message\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n                    }\n                  ]\n                },\n                \"toolTip\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n              }\n            }\n          ]\n        },\n        {\n          \"name\": \"tags\",\n          \"label\": \"Tags\",\n          \"elements\": [\n            {\n              \"name\": \"tagsByResource\",\n              \"type\": \"Microsoft.Common.TagsByResource\",\n              \"resources\": [\n                \"Providers.Test/statefulIbizaEngines\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"resourceGroupId\": \"[steps('step1').resourceScope.resourceGroup.id]\",\n        \"parameters\": {\n          \"name\": \"[steps('step1').resourceScope.resourceName]\",\n          \"location\": \"centralus\"\n        },\n        \"template\":\n        {\n          \"file\": \"../../UiDef/DxExtensionResource/DeploymentTemplate.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing New Azure Portal Declarative Extension\nDESCRIPTION: Commands to create and start a new declarative extension project using the Azure Portal Developer CLI. This includes creating necessary directories, initializing the extension, and starting the development server.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-declarative.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd c:\\ && mkdir dev && cd dev\nap new -d -n Microsoft_Azure_FirstExtension -o ./FirstExtension\ncd ./FirstExtension/src/default/extension\nap start\n```\n\n----------------------------------------\n\nTITLE: Adding OpenBladeCommand to Commands - Azure Portal SDK - JSON\nDESCRIPTION: This snippet configures the commands section of a declarative Azure Portal blade to include a command that launches the previously defined Form blade for executing ARM requests. The command specifies display name lookup, icon, id, command kind, and the referenced Form blade name. Parameters (such as resource id) are dynamically injected. Dependencies include the Form blade definition and correct integration into the blade's command array. No user input is needed at runtime beyond those passed in parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n      {\n        \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n        \"id\": \"formarmrequestCommand\",\n        \"kind\": \"OpenBladeCommand\",\n        \"displayName\": {\n          \"property\": \"formArmRequest\"\n        },\n        \"blade\": {\n          \"name\": \"FormBladeArmRequest_Dx\",\n          \"inContextPane\": true,\n          \"parameters\": {\n            \"id\": \"[parameters('id')]\"\n          }\n        }\n      },\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Portal Area DataContext Class\nDESCRIPTION: Example of a DataContext class definition showing typical members like QueryCache, EntityCache and EditScopeCache for managing website data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Context for data samples.\n*/\n@Di.Class()\nexport class DataContext {\n   /**\n    * This QueryCache will hold all the website data we get from the website controller.\n    */\n   public websitesQuery: QueryCache<WebsiteModel, WebsiteQueryParams>;\n\n   /**\n    * Provides a cache that will enable retrieving a single website.\n    */\n   public websiteEntities: EntityCache<WebsiteModel, number>;\n\n   /**\n    * Provides a cache for persisting edits against a website.\n    */\n   public editScopeCache: EditScopeCache<WebsiteModel, number>;\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Provisioning Logic using Provisioning Utility (TypeScript)\nDESCRIPTION: This snippet demonstrates custom provisioning in the Azure portal extension using the deployCustom method. It constructs a provisioningPromise for asynchronous creation of a resource (robot), uses a delayed promise to simulate operation time, closes the blade, and defines supplyPartReference to return a blade reference for pinning a part after creation. Dependencies include Q for promise delays, model.robotData API, and the provisioning utility. Inputs: model context and a newRobot object; Outputs: result of robot creation and part reference logic for the UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst provisioningPromise = provisioning.deployCustom({\n    provisioningPromise: model.robotData.createRobot(newRobot).then(() => {\n        // Close blade, notification will update when creation is complete\n        container.closeCurrentBlade();\n        // Adding some extra wait time to make the operation seem longer.\n        return Q.delay(delay).then(() => newRobot);\n    }),\n    supplyPartReference: (provisionedRobot) => {\n        return new PartReference(\"RobotPart\", { id: provisionedRobot.name() }, { extensionName: \"SamplesExtension\" });\n    },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with Redux Store Integration\nDESCRIPTION: Demonstrates how to create a React view that utilizes the Redux store and actions defined in the contract. Includes store initialization, reducer implementation, and component decoration with ReactView utilities.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// React\\Views\\Example.ReactView.tsx\nimport * as React from \"react\";\nimport * as Redux from \"redux\";\nimport * as ReactView from \"@microsoft/azureportal-reactview/ReactView\";\nimport { versionId } from \"@microsoft/azureportal-reactview/major-version/1\";\nimport { StoreState, MyExtensionAction } from \"../Contracts/Example.Contract\";\n\nconst initialState: StoreState = { text: \"Default\" };\n\nexport const store = Redux.createStore((state: StoreState = initialState, action: MyExtensionAction) => {\n    switch (action.type) {\n        case \"SetText\":\n            return { ...state, text: action.text };\n        case \"ResetState\":\n            return { ...initialState };\n        default:\n            return state;\n    }\n});\n\n@ReactView.Decorator<{}, {}, StoreState>({\n    store,\n    viewReady: (state) => !!state.text,\n    versionId,\n})\n@ReactView.ReactReduxConnect.Decorator<StoreState>(state => ({ text: state.text }))\nexport class Example extends React.Component<{}, {}> {\n    public render() {\n        return (\n          <div>\n            <p>{this.props.text}</p>\n          </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Observable with Rate Limiting in JavaScript\nDESCRIPTION: Example of adding rate limiting to a Knockout observable to throttle UI updates. This can help improve performance by reducing the frequency of updates for rapidly changing values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n.extend({ rateLimit: 250 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Common.DropDown Control in JSON\nDESCRIPTION: This snippet demonstrates how to configure a Microsoft.Common.DropDown control with multiple options like multiselect, filter, and item descriptions. The example includes constraints with allowed values and supports features like select all, filtering with placeholder text, and multiline item descriptions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DropDown.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Common.DropDown\",\n    \"label\": \"Example drop down\",\n    \"placeholder\": \"\",\n    \"defaultValue\": [\"Value two\"],\n    \"toolTip\": \"\",\n    \"multiselect\": true,\n    \"selectAll\": true,\n    \"filter\": true,\n    \"filterPlaceholder\": \"Filter items ...\",\n    \"multiLine\": true,\n    \"defaultDescription\": \"A value for selection\",\n    \"constraints\": {\n        \"allowedValues\": [\n            {\n                \"label\": \"Value one\",\n                \"description\": \"The value to select for option 1.\",\n                \"value\": \"one\"\n            },\n            {\n                \"label\": \"Value two\",\n                \"description\": \"The value to select for option 2.\",\n                \"value\": \"two\"\n            }\n        ],\n        \"required\": true\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Progress Dialog Text and Percentage (TypeScript)\nDESCRIPTION: Demonstrates how to dynamically update the text and completion percentage of an already displayed 'ProgressBox' instance in TypeScript. By calling methods like 'text()' and 'completionPercentage()' on the stored 'progressBox' object, the command can provide real-time feedback to the user about the status of a long-running operation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nprogressBox.text(\"Still working ...\");\nprogressBox.completionPercentage(20);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Dashboard View Schema\nDESCRIPTION: Complete JSON schema for configuring a Dashboard view with multiple tiles including resource graphs, markdown content, metrics visualization, and resource information. The configuration includes parameters for time range and granularity control, and supports multiple pages of dashboard content.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"../Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Dashboard\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"subIdVM\",\n        \"type\": \"key\"\n      },\n      {\n        \"name\": \"subIdKV\",\n        \"type\": \"key\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Dx Sample Dashboard\",\n      \"pages\": [\n        {\n          \"title\": \"Page 1\",\n          \"tiles\": [\n            {\n              \"data\": {\n                  \"kind\": \"arg\",\n                  \"query\": \"summarize ResourceCount=count() by type | order by ResourceCount | extend ['Resource count']=ResourceCount, ['Resource type']=type | project ['Resource type'], ['Resource count'] | take 10\"\n              },\n              \"visualization\": {\n                  \"type\": \"pie\"\n              },\n              \"title\": \"Top 10 resource counts by type\",\n              \"subtitle\": \"Azure Resource Graph\",\n              \"type\": \"QueryTile\",\n              \"layout\": {\n                  \"x\": 0,\n                  \"y\": 0,\n                  \"width\": 11,\n                  \"height\": 5\n              }\n            },\n            {\n              \"data\": {\n                \"source\": \"uri\",\n                \"uri\": \"https://raw.githubusercontent.com/microsoft/vscode/main/README.md\"\n              },\n              \"title\": \"Microsoft Github\",\n              \"subtitle\": \"VS Code read me\",\n              \"type\": \"MarkdownTile\",\n              \"layout\": {\n                \"x\": 11,\n                \"y\": 0,\n                \"width\": 10,\n                \"height\": 5\n              }\n            },\n            {\n              \"data\": {\n                  \"kind\": \"app-insights\",\n                  \"metrics\": [\n                      {\n                        \"namespace\": \"microsoft.compute/virtualmachines\",\n                        \"name\": \"Disk Read Bytes\",\n                        \"aggregationType\": \"avg\",\n                        \"resourceMetadata\": {\n                          \"id\": \"[parameters('subIdVM')]\"\n                        }\n                      }\n                  ],\n                  \"usedParameters\": [\n                    \"startTime\",\n                    \"endTime\",\n                    \"timeGranularity\"\n                  ]\n              },\n              \"visualization\": {\n                \"type\": \"line\"\n              },\n              \"title\": \"VM Average Disk Read Bytes\",\n              \"subtitle\": \"Monitoring metrics\",\n              \"type\": \"QueryTile\",\n              \"layout\": {\n                \"x\": 0,\n                \"y\": 5,\n                \"width\": 11,\n                \"height\": 4\n              }\n            },\n            {\n              \"data\": {\n                \"resourceId\": \"[parameters('subIdKV')]\"\n              },\n              \"type\": \"ResourceTile\",\n              \"layout\": {\n                \"x\": 11,\n                \"y\": 5,\n                \"width\": 6,\n                \"height\": 4\n              }\n            }\n          ]\n        },\n        {\n          \"title\": \"Page 2\",\n          \"tiles\": []\n        }\n      ],\n      \"parameters\": [\n        {\n          \"title\": \"Time range\",\n          \"kind\": \"timeRange\",\n          \"parameterNames\": [\n            \"startTime\",\n            \"endTime\"\n          ],\n          \"defaultValues\": [\n            \"lastMonth\"\n          ],\n          \"showOnPages\": [\n            \"0\"\n          ]\n        },\n        {\n          \"title\": \"Time granularity\",\n          \"kind\": \"timeGranularity\",\n          \"parameterNames\": [\n            \"timeGranularity\",\n            \"\"\n          ],\n          \"defaultValues\": [\n            \"1Day\"\n          ],\n          \"showOnPages\": [\n            \"0\"\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowseViewType as Full-Screen Blade in Azure Portal\nDESCRIPTION: This snippet demonstrates how to configure a DataBrowseViewType as a full-screen blade opened from a resource menu. It includes the complete schema with properties for data, columns, commands, and other view settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"DataBrowse\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [\n      {\n        \"kind\": \"MoveCommand\",\n        \"id\": \"moveCommand\",\n        \"displayName\": {\n          \"property\": \"move\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Move\"\n      },\n      {\n        \"kind\": \"DeleteCommand\",\n        \"id\": \"deleteCommand\",\n        \"displayName\": {\n          \"property\": \"delete\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Delete\",\n        \"confirmation\": {\n          \"title\": {\n            \"property\": \"deleteResourceTitle\"\n          },\n          \"message\": {\n            \"property\": \"deleteResourceMessage\"\n          }\n        },\n        \"definition\": {\n          \"apiVersion\": \"2014-04-01\"\n        }\n      }\n    ],\n    \"properties\": {\n      \"title\": \"DataBrowse\",\n      \"description\": \"By default, all resources added to profiles within the same network security perimeter will be able to communicate with each other, but not with the internet or resources outside the perimeter.\",\n      \"ariaLabel\": \"testing\",\n      \"data\": [\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"succeeded\",\n          \"menu\": \"tags\",\n          \"urlText\": \"Azure portal\",\n          \"urlAction\": {\n            \"url\": \"https://azure.microsoft.com/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"aks-agentpool\"\n            },\n            \"title\": \"aks-agentpool\"\n          },\n          \"diskSize\": 100,\n          \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n        },\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"warning\",\n          \"menu\": \"metrics\",\n          \"urlText\": \"Microsoft\",\n          \"urlAction\": {\n            \"url\": \"https://www.microsoft.com/en-us/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"AzureMobileTest-vnet\"\n            },\n            \"title\": \"AzureMobileTest-vnet\"\n          },\n          \"diskSize\": 10000,\n          \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n        },\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"failed\",\n          \"menu\": \"locks\",\n          \"urlText\": \"Github\",\n          \"urlAction\": {\n            \"url\": \"https://github.com/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"Test-disk\"\n            },\n            \"title\": \"Test-disk\"\n          },\n          \"diskSize\": 1500,\n          \"price\": 1500,\n          \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n        }\n      ],\n      \"columns\": [\n        {\n          \"displayName\": \"Name\",\n          \"name\": \"name\",\n          \"action\": {\n            \"resourceId\": \"[$item.id]\"\n          }\n        },\n        {\n          \"displayName\": \"Menu\",\n          \"name\": \"menu\",\n          \"action\": {\n            \"menu\": \"[$item.menu]\"\n          }\n        },\n        {\n          \"displayName\": \"Url\",\n          \"name\": \"urlText\",\n          \"action\": {\n            \"url\": \"[$item.urlAction.url]\"\n          }\n        },\n        {\n          \"displayName\": \"Blade\",\n          \"name\": \"name\",\n          \"action\": {\n            \"blade\": {\n              \"name\": \"ObjectJsonViewBlade\",\n              \"extension\": \"Microsoft_Azure_CreateUIDef\",\n              \"parameters\": \"[$item.parameters]\",\n              \"inContextPane\": true\n            }\n          }\n        },\n        {\n          \"displayName\": \"Status\",\n          \"name\": \"status\",\n          \"valueMapping\": [\n            {\n              \"value\": \"Succeeded\",\n              \"displayName\": \"Succeeded\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n            },\n            {\n              \"value\": \"Warning\",\n              \"displayName\": \"Warning\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n            },\n            {\n              \"value\": \"Failed\",\n              \"displayName\": \"Failed\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n            }\n          ]\n        },\n        {\n          \"displayName\": \"Disk size\",\n          \"name\": \"diskSize\",\n          \"format\": \"Number\",\n          \"sourceUnits\": \"Gigabytes\",\n          \"maximumFractionDigits\": 2\n        },\n        {\n          \"displayName\": \"Creation time\",\n          \"name\": \"creationTime\",\n          \"format\": \"Date\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blade Rebinding with Rebindable.Decorator in TypeScript\nDESCRIPTION: Demonstrates the usage of @TemplateBlade.Rebindable.Decorator() for handling blade rebinding scenarios. This decorator requires implementing a 'rebind' method to update the blade's UI when new context parameters are passed from a parent blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Rebindable.Decorator()\n```\n\n----------------------------------------\n\nTITLE: Defining and Handling Resource Menu Configuration with Error Handling - TypeScript\nDESCRIPTION: This TypeScript snippet implements a function to construct a resource menu configuration for a printer resource type in an Azure portal extension. It sets up error observables ('handledError' and 'fail') instead of rejecting the promise, ensuring proper error UX. Dependencies include Knockout (ko), MsPortalFx, ClientResources, and shared resource helper functions. Key parameters are the resourceId (string) and a dataContext for resource and menu setup. The menu is returned immediately with observables for error handling; resources are loaded asynchronously. Upon error, the provided helper attaches error information appropriately. Inputs: resourceId, dataContext; Output: Promise<FxAssets.ResourceMenuConfig>. Do not reject promises directly as per robust UX requirements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPrinterMenu(resourceId: string, dataContext: DataContext): Promise<FxAssets.ResourceMenuConfig> {\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // EXAMPLE : Providing static menu items for a kind of resource.\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // Build the menu items.\n   const overviewItem: FxAssets.MenuItem = {\n       id: \"overview\", // menu item IDs must be unique, must not be localized, should not contain spaces and should be lowercase\n       displayText: MenuStrings.overview,\n       enabled: ko.observable(true),\n       keywords: MenuKeywords.overview.split(\" \"),\n       icon: Images.printer,\n       supplyBladeReference: () => {\n           return BladeReferences.forBlade(\"PrinterBlade\").createReference({ parameters: { id: resourceId }});\n       },\n   };\n   // Build the resource menu config.\n   const handledError = ko.observable<MsPortalFx.ViewModels.ErrorOptions>();\n   const fail = ko.observable<string>();\n   const menuConfig: FxAssets.ResourceMenuConfig = {\n       overview: overviewItem,\n       options: {\n           enableRbac: true,\n           enableTags: true,\n       },\n       groups: [],\n       handledError,\n       fail,\n   };\n\n   // Load the resource and update the menu items in the background.\n   // In the case of this asset type, the ResourceProvidedBy for the resource menu is marked as\n   // \"NoResource\". In this case, the AJAX call to retrieve the printer resource from ARM should\n   // not be part of the menu config. In this case, the menu config should be returned as\n   // quickly as possible with as many options completed as possible without the resource (such\n   // as the overview menu item) and then the menu will be updated with the printer resource\n   // when loaded. Therefore, the getResource() call is not being included in the returned\n   // promise below to avoid blocking the UX. The UX can reveal the overview blade and partial\n   // menu and when the printer is loaded and the menu is updated, the blade will adapt.\n   dataContext.printerData.getResource(resourceId, \"resource menu\").then((_ /*printerData*/) => {\n       // In production code, this code would make changes to the menu (add items, etc).\n   }).catch((error) => {\n       // IMPORTANT: Handle the late-failure errors using the common helper.\n       if (!handleResourceMenuFailures(error, handledError, ClientResources.AssetTypeNames.Printer.lowerSingular, resourceId)) {\n           fail((error && error.message) || JSON.stringify(error));\n       }\n   });\n\n   return Promise.resolve(menuConfig);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Azure Subscriptions - TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously retrieve the currently selected subscriptions using the MsPortalFx.Azure.getSelectedSubscriptions() method. It returns a promise resolving to an array of Subscription objects. No additional dependencies are required beyond the Azure portal extension SDK. The method outputs a list of the user's currently selected subscriptions, which can be processed in the callback. It assumes you have access to the MsPortalFx.Azure namespace.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-subscriptions.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nMsPortalFx.Azure.getSelectedSubscriptions().then((subs: Subscription[]) => {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the Azure Portal Samples Extension\nDESCRIPTION: Commands to clone the Azure Portal Samples Extension repository, optionally specify a particular SDK version, and run the extension for testing. This allows developers to see working examples of portal components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-samples.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://msazure.visualstudio.com/DefaultCollection/One/_git/AzureUX-SamplesExtension\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 5.0.302.19601\n```\n\nLANGUAGE: bash\nCODE:\n```\nap start\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Manifest Schema\nDESCRIPTION: JSON schema for the Manifest.json file, which contains metadata for the gallery item including name, publisher, version, descriptions, icons, and product details.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://gallery.azure.com/schemas/2014-09-01/manifest.json#\",\n    \"name\": \"string\", // [A-Za-z0-9]+ (offer + plan namespace)\n    \"publisher\": \"string\", // [A-Za-z0-9]+ (publisher namespace)\n    \"version\": \"string\", // SemVer v2 Format - see https://semver.org/\n    \"displayName\": \"string\", // max of 256 characters (plan name)\n    \"publisherDisplayName\": \"string\", // max of 256 characters (publisher name)\n    \"publisherLegalName\": \"string\", // max of 256 characters -->\n    \"summary\": \"string\", // max of 100 characters -->\n    \"longSummary\": \"string\", // required, max of 256 characters\n    \"description\": \"string\", // max of 2000 characters. Can contain HTML\n    \"properties\": [\n        /* optional. max of 10 properties\n           displayName: max of 64 characters\n           value: max of 64 characters */\n        { \"displayName\": \"string\", \"value\": \"string\" }\n    ],\n    \"uiDefinition\": {\n        \"path\": \"string\" // required, path to file\n    },\n    \"artifacts\": [\n        // you probably want an artifact, because this is where the link to your ARM deployment template goes!\n        /* name: max of 256 characters, [A-Za-z0-9\\-_]+\n           type: Fragment, Template\n           path: path to artifact\n           isDefault: true|false */\n        { \"name\": \"string\", \"type\": \"string\", \"path\": \"string\", \"isDefault\": true } // max of 128 characters\n    ],\n    \"icons\": {\n        // see: https://auxdocs.azurewebsites.net/en-us/documentation/articles/gallery-items\n        \"small\": \"string\", // path to image file\n        \"medium\": \"string\", // medium images must be 90x90 pixels if bitmaps...\n        \"large\": \"string\", // 40x40\n        \"wide\": \"string\", // 255x115\n        \"hero\": \"string\"\n    },\n    \"links\": [\n        /* optional, but highly recommended, max of 10 links\n           displayName: max of 64 characters\n           uri: uri */\n        { \"displayName\": \"string\", \"uri\": \"string\" }\n    ],\n    \"products\": [\n        // optional - you don't need it in a simple gallery item\n        {\n            \"displayName\": \"string\", // max of 256 characters\n            \"publisherDisplayName\": \"string\", // max of 256 characters\n            \"legalTerms\": \"string\", // max can contain HTML\n            \"privacyPolicy\": \"string\", // max can contain HTML\n            \"pricingDetailsUri\": \"string\", // uri, optional\n            // optional, if null means $0 cost (like \"bring your own license\")\n            \"offerDetails\": {\n                \"publisherId\": \"string\", // max of 256 characters\n                \"offerId\": \"string\", // max of 256 characters\n                \"plans\": [\n                    {\n                        \"planId\": \"string\", // max of 256 characters\n                        \"displayName\": \"string\", // max of 256 characters full display name, includes os, version, etc.\n                        \"summary\": \"string\", // max of 100 characters\n                        \"description\": \"string\", // max of 2000 characters. Can contain HTML\n                    }\n                ]\n            }\n        }\n    ],\n    \"screenshots\": [ \"string\" ],\n     \"keywords\": [ // When searching, you could use keywords to make your product more discoverable\n        \"Keyword1\",\n        \"Keyword2\"\n    ],\n    \"categories\": [ \"string\" ],\n    \"filters\": [\n        // type: Country/Region, Subscription, Resources, HideKey, OfferType, OfferCategory\n        { \"type\": \"string\", \"value\": \"string\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View with Transforms\nDESCRIPTION: Example configuration for a DataBrowse view that displays transformed OS disk data. Uses JMESPath transforms to extract specific properties from storage profile and formats them into a custom structure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-databrowseViewType-data.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"testing\",\n    \"data\": {\n        \"transforms\": \"[concat('[', '@.{caching:caching, createOption: createOption, name: name, osType:osType, managedDisk:managedDisk.to_string(@)}', ']')]\",\n        \"input\": \"[resources().properties.storageProfile.osDisk]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RPC Endpoint with MsPortalFx.Services.Rpc - TypeScript\nDESCRIPTION: Defines and registers an RPC callback named \\\"StringUpperCaseCallback\\\" in an Azure Portal extension EntryPoint. This TypeScript snippet uses MsPortalFx.Services.Rpc.registerCallback to expose a method to other extensions, accepting a string argument and returning its uppercase equivalent. Prerequisite: MsPortalFx.Services.Rpc library must be loaded; the extension must be running and support callback registration. The method expects a single string input and produces a transformed string output; only one argument is accepted, and further input validation/constraint logic may be needed for production systems.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-rpc.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n * Registers the RPC callbacks supported by this extension.\n */\nprivate registerCallbacks(): void {\n    MsPortalFx.Services.Rpc.registerCallback(\"StringUpperCaseCallback\",\n    \tfunction (input: string): string {\n        \treturn input.toUpperCase();\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Request in Azure Portal Resource View\nDESCRIPTION: Demonstrates how to make a GET request to fetch storage account information in an Azure Portal Resource Overview. Shows configuration for GetStarted view type with resource parameters and basic tab display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Top-Level Resource Creation with Form in Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to create a top-level resource using a Form with deployment action in Azure Portal. It includes resource scope control, form steps, and deployment configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"steps\": [\n        {\n          \"name\": \"step1\",\n          \"label\": \"Basics\",\n          \"description\": \"Add a description of your service here to quickly introduce your service to customers. Also add a Learn More link that links to documentation or Azure's marketing site for your resource type. [Learn more](https://azure.microsoft.com/)\",\n          \"elements\": [\n            {\n              \"type\": \"Microsoft.Common.ResourceScope\",\n              \"name\": \"resourceScope\",\n              \"resourceName\": {\n                \"label\": \"Engine name\",\n                \"constraints\": {\n                  \"validations\": [\n                    {\n                      \"regex\": \"^[A-Za-z0-9]{0,6}$\",\n                      \"message\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n                    }\n                  ]\n                },\n                \"toolTip\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n              }\n            }\n          ]\n        },\n        {\n          \"name\": \"tags\",\n          \"label\": \"Tags\",\n          \"elements\": [\n            {\n              \"name\": \"tagsByResource\",\n              \"type\": \"Microsoft.Common.TagsByResource\",\n              \"resources\": [\n                \"Providers.Test/statefulIbizaEngines\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"resourceGroupId\": \"[steps('step1').resourceScope.resourceGroup.id]\",\n        \"parameters\": {\n          \"name\": \"[steps('step1').resourceScope.resourceName]\",\n          \"location\": \"centralus\"\n        },\n        \"template\":\n        {\n          \"file\": \"../../UiDef/DxExtensionResource/DeploymentTemplate.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Blade in Azure Portal UI Extension\nDESCRIPTION: Demonstrates how to programmatically open a new blade using the FX TypeScript API with type-safe blade references and parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-architecture.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic onClick() {\n    const { container, parameters } = this.context;\n\n    container.openBlade(BladeReferences.forBlade(\"WebsiteDetailsBlade\").createReference({\n        parameters: { resourceId: parameters.resourceId },\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Template Blade with TypeScript Decorators\nDESCRIPTION: Complete example of a TypeScript class defining a simple Template Blade. It uses `@TemplateBlade.Decorator` to specify the inline HTML template and `@TemplateBlade.ForContextPane.Decorator` to configure its appearance as a context pane. It includes standard properties like `title`, `subtitle`, the required `context` property for shell interaction, and an `onInitialize` lifecycle method. This approach avoids the need for a separate PDL file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\n\n//docs#DecoratorReference\n@TemplateBlade.Decorator({\nhtmlTemplate: \"\" +\n    \"<div class='msportalfx-padding'>\" +\n    \"  <div>This is a Template Blade.</div>\" +\n    \"</div>\",\n})\n@TemplateBlade.ForContextPane.Decorator({\nwidth: TemplateBlade.ForContextPane.Width.Small,\n})\n//docs#DecoratorReference\nexport class SimpleTemplateBlade {\npublic title = ClientResources.simpleTemplateBlade;\npublic subtitle: string;\n\n//docs#Context\npublic context: TemplateBlade.Context<void>;\n//docs#Context\n\npublic async onInitialize() {\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Portal End-to-End Test Implementation - TypeScript\nDESCRIPTION: Example test implementation demonstrating how to write an end-to-end test for the Azure Portal using the @microsoft/azureportal-test framework. Includes setup, test scenario, and cleanup logic.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as testFx from \"@microsoft/azureportal-test\";\nimport * as nconf from \"nconf\";\n\ndescribe(\"Resource Group Tests\", function () {\n    this.timeout(0);\n    this.retries(0);\n\n    beforeEach(() => {\n        nconf.argv()\n            .env()\n            .file(\"config.json\");\n\n        (<any>nconf)[testFx.Utils.NConfWindowsCredentialManager.ProviderName] = testFx.Utils.NConfWindowsCredentialManager;\n        nconf.use(testFx.Utils.NConfWindowsCredentialManager.ProviderName);\n\n        const portalUrl = nconf.get(\"PORTAL_URL\");\n        if (!!portalUrl) {\n            testFx.portal.portalContext.portalUrl = portalUrl;\n        }\n\n        testFx.portal.portalContext.signInEmail = nconf.get(\"LOGIN_NAME\");\n        testFx.portal.portalContext.signInPassword = nconf.get(`aux/OneCloud.TestInfra/TestLogins/${testFx.portal.portalContext.signInEmail}`);\n    });\n\n    it(\"Can open create resource group blade\", async () => {\n        const createResourceGroupURI = \"create/Microsoft.ResourceGroup\";\n\n        const createBlade = await testFx.portal.openBlade(\n            createResourceGroupURI,\n            testFx.PortalFxResources.hubsExtension.resourceGroups.createTitle\n        );\n\n        const createBladeDisplayed = await createBlade.isDisplayed();\n        assert(createBladeDisplayed, \"Create blade was not visible after loading the portal!\");\n    });\n\n    afterEach(async function () {\n        console.log(\"Running cleanup\");\n        try {\n            if (this.currentTest.state === \"failed\") {\n                await testFx.portal.takeScreenshot(this.currentTest.title);\n            }\n        } catch (e) { }\n        try {\n            await testFx.portal.quit();\n        }\n        catch (e) { }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Unwrapping Observables in Mapping Function\nDESCRIPTION: Example of an anti-pattern where observables are unwrapped directly in a mapping function. This causes the mapping function to be re-run whenever observables change, creating entirely new objects and potentially losing selection state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar projectedItems = this._view.items.map<RobotDetails>({\n    mapping: (robot: SamplesExtension.DataModels.Robot) => {\n        return <RobotDetails>{\n            name: robot.name,\n\n            // DO NOT DO THIS!  USE A COMPUTED INSTEAD!\n            computedName: \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        };\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring RESX Resources for Localization in .NET Projects (XML)\nDESCRIPTION: This XML configuration snippet shows how to embed a RESX file in a .NET project for localization. The <EmbeddedResource> entry is placed in the csproj file, registering the resource generator and linking output, with additional properties for bundle and designer support. This setup is essential for generating auto-typed resource accessors in TypeScript and C# during the build.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<EmbeddedResource Include=\\\"Client\\\\ClientResources.resx\\\">\\n  <Generator>PublicResXFileCodeGenerator</Generator>\\n  <LastGenOutput>ClientResources.Designer.cs</LastGenOutput>\\n  <BundleId>SamplesExtension</BundleId>\\n  <SubType>Designer</SubType>\\n</EmbeddedResource>\\n\n```\n\n----------------------------------------\n\nTITLE: Making ARM Calls from Server using WebApiClient in C#\nDESCRIPTION: Example of using WebApiClient class to make authenticated calls to Azure Resource Manager (ARM) from extension server. The client automatically attaches the required ARM token to requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    Uri arm = new Uri(\"https://management.azure.com/...\");  // arm endpoint\n    using (var client = new Microsoft.Portal.Framework.ClientProxy.WebApiClient())\n    {\n        // ConfigureAwait(false) is recommended to not forcibly resume on the same thread it started on\n        // var data = await client.GetAsync<...>(arm).ConfigureAwait(false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Requesting ARM Template Deployment with Separate Polling in TypeScript\nDESCRIPTION: This snippet illustrates how to request an Azure Resource Manager template deployment and then separately poll for updates and operations. It first deploys the template and then uses the pollForDeployment method to continuously check for updates, allowing for more granular control over the monitoring process.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the template deployment options.\nvar deploymentOptions: MsPortalFx.Azure.ResourceManager.TemplateDeploymentOptions = {\n    // Same options as in sample #1.\n};\n\n// Deploy the template.\nMsPortalFx.Azure.ResourceManager.deployTemplate(options)\n    .then((deploymentResult: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // ARM accepted the deployment request.\n        // Store the correlation id if you have UI that reflects the progress for the case when the user abandons the session.\n\n        // Prepare polling options.\n        var pollingOptions: MsPortalFx.Azure.ResourceManager.TemplateDeploymentPollingOption = {\n            // Use the same info from the original deployment.\n            subscriptionId: deploymentOptions.subscriptionId,\n            deploymentName: deploymentOptions.deploymentName,\n            resourceGroupName: deploymentOptions.resourceGroupName,\n            // Use the correlation id returned.\n            correlationId: deploymentResult.correlationId,\n            // Optional:\n            getAllOperations: true\n        };\n\n        // Poll for updates.\n        MsPortalFx.Azure.ResourceManager.pollForDeployment(pollingOptions)\n            .progress((progress: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n                // Continuously reports progress (and operations) while the deployment is in progress.\n            }).then((pollingResult: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n                // Deployment is complete.\n            }, (error: any) => {\n                // Something went wrong!\n            });\n    }, (error: any) => {\n        // Something went wrong!\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET web.config for Azure Portal Authentication (XML)\nDESCRIPTION: Provides XML configuration settings for `web.config` to manage authorization and Azure Active Directory (AAD) authentication for an Azure Portal extension. It denies anonymous access by default, explicitly allows access to static content (`Content`, `Scripts`) and the main extension page (`Index`), and configures AAD details like authority URL, tenant ID, allowed token audiences, and token validation parameters. Requires ASP.NET and referencing `Microsoft.Portal.AadCore.dll` and `System.IdentityModel.Tokens.Jwt.dll`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- deny anonymous users -->\n<system.web>\n    <authorization>\n      <deny users=\"?\" />\n    </authorization>\n</system.web>\n\n<!-- allow the home page which serves the extension source -->\n<!-- TODO: This loads your extension from ~/Index; change path to fit your needs -->\n<location path=\"Index\">\n  <system.web>\n    <authorization>\n      <allow users=\"*\" />\n    </authorization>\n  </system.web>\n</location>\n\n<!-- allow images and scripts -->\n<location path=\"Content\">\n  <system.web>\n    <authorization>\n      <allow users=\"*\" />\n    </authorization>\n  </system.web>\n</location>\n<location path=\"Scripts\">\n  <system.web>\n    <authorization>\n      <allow users=\"*\" />\n    </authorization>\n  </system.web>\n</location>\n\n<configuration>\n  <appSettings>\n    <!-- For test, use authority=\"https://login.windows-ppe.net/\" -->\n    <!-- For PROD, use authority=\"https://login.windows.net/\" -->\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.Authority\"\n         value=\"https://login.windows-ppe.net/\" />\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.TenantId\"\n         value=\"common\" />\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.AllowedAudiences\"\n         value=\"['https://management.core.windows.net/']\" />\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.MinValidationCertUpdateInterval\"\n         value=\"PT05M\" />\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.MaxValidationCertUpdateInterval\"\n         value=\"PT24H\" />\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.ForwardDecryptedAuthorizationTokens\"\n         value=\"false\" />\n  </appSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing PrinterViewModel Class for Azure Portal\nDESCRIPTION: A TypeScript class that implements printer resource management functionality including browse configuration, supplemental data handling, and resource menu configuration. Includes support for columns, status badges, and resource menu handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Di.Class(\"viewModel\")\nexport class PrinterViewModel\n   implements Definition.Contract {\n\n   public supplementalDataStream = ko.observableArray<FxAssets.SupplementalData>([]);\n\n   private _dataContext: DataContext;\n   private _updateMap: StringMap<{ columns: string[] }>;\n\n   constructor(container: FxContainerContract, dataContext: DataContext) {\n       this._dataContext = dataContext;\n       this._updateMap = Object.create(null);\n       const updateId = dataContext.printerData.registerUpdate<{ columns: string[] }>(this._updateMap, (resourceId, data) => {\n           return this.getSupplementalData([resourceId], data.columns).then(MsPortalFx.noop);\n       });\n       container.registerForDispose(() => {\n           dataContext.printerData.unregisterUpdate(updateId);\n       });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Child Resource Asset for Creation in JSON\nDESCRIPTION: This snippet shows how to define a child resource asset with a create action. It demonstrates the use of the {resourceId} special parameter to reference the parent resource ID in the create blade. This configuration is used to open the child resource creation blade in a create flow.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../Definitions/dx.schema.json\",\n    \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n    \"proxyAssetType\": {\n        \"name\": \"MyDxChildResource\",\n        \"resourceType\": {\n        \"name\": \"Microsoft.OperationalInsights/Workspaces/savedSearches\",\n        \"apiVersion\": \"2020-03-01-preview\"\n    },\n    \"displayNames\": {\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Dashboard\", \n    \"create\": {\n        \"blade\": {\n        \"name\": \"SavedSearchCreate_Dx\",\n        \"parameters\": {\n        \"id\": \"{resourceId}\"\n        }\n    }\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FormViewType Structure in JSON\nDESCRIPTION: This snippet demonstrates the basic structure of a FormViewType definition, including essential properties like kind, export, contextPaneWidth, and properties. It shows how to set up a form view with tabs, deployment options, and other customizable features.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Form\",\n  \"export\": true,\n  \"contextPaneWidth\": \"<option>\",\n  \"parameters\": {},\n  \"resources\": {},\n  \"dataSources\": {},\n  \"messages\": {},\n  \"commands\": {},\n  \"properties\": {\n    \"isWizard\": false,\n    \"title\": \"Form Title\",\n    \"steps\": [],\n    \"deployment\": {}\n  },\n  \"outputs\": {},\n  \"fx.feature\": \"<feature>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Collector ViewModel for Select Member Blade in TypeScript\nDESCRIPTION: Defines TypeScript interfaces (`SelectMemberInputs`, `SelectMemberConfig`) for data exchange and implements an example ViewModel class (`TestSelectMemberV3CommandViewModel`) acting as a 'collector' for the Select Member Blade. This collector uses the ParameterCollection Framework v3.0 to configure the blade (single/multi-select, invite enabled, search criteria), optionally provide pre-selected member IDs, and receive the selected members upon blade closure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This interface is used to define the inputs from the collector.\nexport interface SelectMemberInputs {\n    memberIds: KnockoutObservable<string>;\n}\n\n// This interface is used to define the config from the collector.\nexport interface SelectMemberConfig {\n    isSingleSelect: boolean;\n    isInviteEnabled: boolean;\n    searchCriteria: string[];\n}\n\n/**\n * This is an example of a command which calls into the select member blade\n */\nexport class TestSelectMemberV3CommandViewModel extends MsPortalFx.ViewModels.OpenBladeCommand implements VMD.Contract {\n\n  // collector\n  public selectMemberCollector: MsPortalFx.ViewModels.ParameterCollector<SelectMemberInputs>;\n\n  // inputs\n  private _memberIds = ko.observable(\"\");\n\n  // configuration values\n  private _isSingleSelect = ko.observable(true);\n  private _isInviteEnabled = ko.observable(true);\n  private _searchCriteria = ko.observableArray<string>([]);\n\n  // blade parameter values (these are passed via the blade params, not via the PCv3 framework.)\n  public title = \"Choose Members\";\n  public subtitle = \"Select Member Blade\";\n\n  constructor(_container: MsPortalFx.ViewModels.CommandContainerContract, initialState: any, dataContext: SharedArea.DataContext) {\n      super(_container);\n      this.icon(MsPortalFx.Base.Images.Polychromatic.Key());\n\n      this.selectMemberCollector = new MsPortalFx.ViewModels.ParameterCollector<SelectMemberInputs>(_container, {\n          supplyInitialData: () => {\n              return <SelectMemberInputs> {\n                  // this is where you would pass in an array of pre-selected members, if you desire.\n                  memberIds: ko.observable(\"\")\n              };\n          },\n          receiveResult: (result: SelectMemberInputs) => {\n              // this is what will happen when the user finishes selecting members and the blade closes.\n              this._performActionOnMembers(result.memberIds());\n          },\n          supplyProviderConfig: () => {\n              return <SelectMemberConfig> {\n                  isSingleSelect: this._isSingleSelect(),\n                  isInviteEnabled: this._isInviteEnabled(),\n                  searchCriteria: this._searchCriteria()\n              };\n          }\n      });\n  }\n\n  // normally, you would perform some action on the returned members here. In this example, just dump the payload into the log.\n  private _performActionOnMembers(membersAsJson: string) {\n      log.verbose(membersAsJson);\n  }\n\n  public onInputsSet(inputs: VMD.InputsContract): Promise<any> {\n      // these inputs are coming from another part\n      this._isSingleSelect(inputs.isSingleSelect);\n      this._isInviteEnabled(inputs.isInviteEnabled);\n\n      // remove all elements of the array\n      this._searchCriteria = ko.observableArray<string>([\"IncludeAllUsers\", \"IncludeOnlySecurityGroups\", \"ExcludeMSAUsers\"]);\n\n      return Promise.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard View in Azure Portal\nDESCRIPTION: Complete example of Dashboard view configuration including multiple tiles (Query, Markdown, Monitoring metrics, Resource), pages, and time range parameters. Shows implementation of ARG queries, markdown content, metrics visualization, and resource tiles with layout specifications.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-DashboardViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"../Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Dashboard\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"subIdVM\",\n        \"type\": \"key\"\n      },\n      {\n        \"name\": \"subIdKV\",\n        \"type\": \"key\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Dx Sample Dashboard\",\n      \"pages\": [\n        {\n          \"title\": \"Page 1\",\n          \"tiles\": [\n            {\n              \"data\": {\n                  \"kind\": \"arg\",\n                  \"query\": \"summarize ResourceCount=count() by type | order by ResourceCount | extend ['Resource count']=ResourceCount, ['Resource type']=type | project ['Resource type'], ['Resource count'] | take 10\"\n              },\n              \"visualization\": {\n                  \"type\": \"pie\"\n              },\n              \"title\": \"Top 10 resource counts by type\",\n              \"subtitle\": \"Azure Resource Graph\",\n              \"type\": \"QueryTile\",\n              \"layout\": {\n                  \"x\": 0,\n                  \"y\": 0,\n                  \"width\": 11,\n                  \"height\": 5\n              }\n            },\n            {\n              \"data\": {\n                \"source\": \"uri\",\n                \"uri\": \"https://raw.githubusercontent.com/microsoft/vscode/main/README.md\"\n              },\n              \"title\": \"Microsoft Github\",\n              \"subtitle\": \"VS Code read me\",\n              \"type\": \"MarkdownTile\",\n              \"layout\": {\n                \"x\": 11,\n                \"y\": 0,\n                \"width\": 10,\n                \"height\": 5\n              }\n            },\n            {\n              \"data\": {\n                  \"kind\": \"app-insights\",\n                  \"metrics\": [\n                      {\n                        \"namespace\": \"microsoft.compute/virtualmachines\",\n                        \"name\": \"Disk Read Bytes\",\n                        \"aggregationType\": \"avg\",\n                        \"resourceMetadata\": {\n                          \"id\": \"[parameters('subIdVM')]\"\n                        }\n                      }\n                  ],\n                  \"usedParameters\": [\n                    \"startTime\",\n                    \"endTime\",\n                    \"timeGranularity\"\n                  ]\n              },\n              \"visualization\": {\n                \"type\": \"line\"\n              },\n              \"title\": \"VM Average Disk Read Bytes\",\n              \"subtitle\": \"Monitoring metrics\",\n              \"type\": \"QueryTile\",\n              \"layout\": {\n                \"x\": 0,\n                \"y\": 5,\n                \"width\": 11,\n                \"height\": 4\n              }\n            },\n            {\n              \"data\": {\n                \"resourceId\": \"[parameters('subIdKV')]\"\n              },\n              \"type\": \"ResourceTile\",\n              \"layout\": {\n                \"x\": 11,\n                \"y\": 5,\n                \"width\": 6,\n                \"height\": 4\n              }\n            }\n          ]\n        },\n        {\n          \"title\": \"Page 2\",\n          \"tiles\": []\n        }\n      ],\n      \"parameters\": [\n        {\n          \"title\": \"Time range\",\n          \"kind\": \"timeRange\",\n          \"parameterNames\": [\n            \"startTime\",\n            \"endTime\"\n          ],\n          \"defaultValues\": [\n            \"lastMonth\"\n          ],\n          \"showOnPages\": [\n            \"0\"\n          ]\n        },\n        {\n          \"title\": \"Time granularity\",\n          \"kind\": \"timeGranularity\",\n          \"parameterNames\": [\n            \"timeGranularity\",\n            \"\"\n          ],\n          \"defaultValues\": [\n            \"1Day\"\n          ],\n          \"showOnPages\": [\n            \"0\"\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ResourceScope Control with Constraints and Validation - Azure Portal - JSON\nDESCRIPTION: This snippet provides an advanced configuration of the ResourceScope control with detailed customizations for Azure portal templates. It introduces an 'instanceDetailsLabel', custom subscription and resource group validations, permission requirements, resource provider restrictions, naming rules via regex, and location constraints including allowed regions. This setup ensures granular input validation and permission enforcement, making it ideal for production templates that require tight access control and naming standards.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceScope.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"resourceScope\\\",\\n  \\\"type\\\": \\\"Microsoft.Common.ResourceScope\\\",\\n  \\\"instanceDetailsLabel\\\": \\\"Cloud Service Details\\\",\\n  \\\"subscription\\\": {\\n     \\\"constraints\\\": {\\n        \\\"validations\\\": [\\n           {\\n             \\\"isValid\\\": \\\"[equals(1,1)]\\\",\\n             \\\"message\\\": \\\"invalid subscription selection\\\"\\n           },\\n           {\\n             \\\"permission\\\": \\\"Microsoft.Network/applicationGateways/read\\\",\\n             \\\"message\\\": \\\"User does not have permission on this Subscription\\\"\\n           }\\n        ]\\n      },\\n      \\\"resourceProviders\\\": [\\n         \\\"Microsoft.Compute\\\"\\n      ]\\n  },\\n  \\\"resourceGroup\\\": {\\n     \\\"constraints\\\": {\\n        \\\"validations\\\": [\\n           {\\n              \\\"isValid\\\": \\\"[equals(1,1)]\\\",\\n              \\\"message\\\": \\\"invalid resource group selection\\\"\\n           }\\n        ]\\n     },\\n     \\\"allowExisting\\\": true\\n  },\\n  \\\"resourceName\\\": {\\n     \\\"label\\\": \\\"Name\\\",\\n     \\\"toolTip\\\": \\\"Use only allowed characters\\\",\\n     \\\"constraints\\\": {\\n        \\\"validations\\\": [\\n           {\\n              \\\"isValid\\\": \\\"[equals(1,1)]\\\",\\n              \\\"message\\\": \\\"invalid resource group selection\\\"\\n           },\\n           {\\n              \\\"regex\\\": \\\"^[a-z0-9A-Z]{1,30}$\\\",\\n              \\\"validationMessage\\\": \\\"invalid resource name\\\"\\n           }\\n        ]\\n     }\\n  },\\n  \\\"location\\\": {\\n     \\\"label\\\": \\\"Name\\\",\\n     \\\"toolTip\\\": \\\"Use only allowed characters\\\",\\n     \\\"resourceTypes\\\": [\\n        \\\"Microsoft.Compute/virtualMachines\\\"\\n     ],\\n     \\\"allowedValues\\\": [\\n        \\\"eastus\\\",\\n        \\\"westus2\\\"\\n     ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Errors and Warnings in React for Azure Portal\nDESCRIPTION: This snippet illustrates how to log errors and warnings using the Az.log method in React components for the Azure Portal. It includes parameters for timestamp, level, area, message, and optional fields like code and additional arguments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Az from \"@microsoft/azureportal-reactview/Az\";\nAz.log([{\n    timestamp: number;\n    level: LogEntryLevel; // Az.LogEntryLevel.Error | Az.LogEntryLevel.Warning\n    area: string;\n    entryType?: string;\n    message: LogMessage;\n    code?: number;\n    args?: ReadonlyArray<any>;\n}])\n```\n\n----------------------------------------\n\nTITLE: Creating an EditScopeCache in DataContext\nDESCRIPTION: Example of creating an EditScopeCache in a data context. It defines how to supply existing data for the edit scope based on an item ID.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-working-with-edit-scopes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.editScopeCache = MsPortalFx.Data.EditScopeCache.create<DataModels.WebsiteModel, number>({\n    entityTypeName: DataModels.WebsiteModelType,\n    supplyExistingData: (websiteId: number) => {\n        var deferred = $.Deferred<JQueryDeferredV<DataModels.WebsiteModel>>();\n\n        this.initializationPromise.then(() => {\n            var website = this.getWebsite(websiteId);\n            if (website) {\n                deferred.resolve(website);\n            } else {\n                deferred.reject();\n            }\n        });\n        return deferred;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Asset-Linked Notification in Azure Portal\nDESCRIPTION: Demonstrates how to publish a notification that links to a specific asset using the Fx/Notification module. The notification includes a title, description, status, and a link to an asset.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\npublishNotification({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: CompletedStatus.Information,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring QueryCache for Data Querying - MsPortalFx - TypeScript\nDESCRIPTION: This snippet defines a strongly-typed query interface and initializes a QueryCache for WebsiteModel entities using MsPortalFx in TypeScript. It specifies metadata types, an API endpoint, and polling configuration to periodically retrieve and cache website data. Dependencies include MsPortalFx.Data, MsPortalFx.Base.Resources, and the DataModels namespace, with WebsiteQuery supplying parameters for filtering results.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-configuringdatacache.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebsiteQuery {\n    runningStatus: boolean;\n}\n\npublic websitesQuery = new MsPortalFx.Data.QueryCache<DataModels.WebsiteModel, WebsiteQuery>({\n    entityTypeName: DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites?runningStatus={0}\"),\n    poll: true\n});\n```\n\n----------------------------------------\n\nTITLE: Making Basic Authenticated AJAX Call to ARM\nDESCRIPTION: Demonstrates how to make an authenticated AJAX call to ARM using the Fx/Ajax module with proper authorization header setup.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst controllerUri = new UriBuilder(FxBase.Resources.getAppRelativeUri(\"/api/LoadData\"));\ncontrollerUri.query.setParameters({\n    resourceId: parameters.resourceId,\n    apiVersion: \"2018-01-01\",\n});\n\nconst loadDataFromServer = ajax<ResourceEvent>({\n    setAuthorizationHeader: true,\n    type: \"GET\",\n    uri: controllerUri.toString(),\n});\n```\n\n----------------------------------------\n\nTITLE: Binding TextBox ViewModel using EditScopeAccessor (Lambda) in TypeScript\nDESCRIPTION: Demonstrates the preferred method for binding an `ObsoleteTextBox.ViewModel` to an `EditScope`. It uses `createEditScopeAccessor` with a compile-time verified lambda expression `(data) => { return data.state; }` to specify the binding path to the `state` property within the EditScope's data model. This approach enhances maintainability and type safety.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n\nthis.textBoxSimpleAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>((data) => { return data.state; }),\n    textBoxSimpleAccessorOptions);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring FormViewType Properties for ARM Template Deployment\nDESCRIPTION: This example shows how to configure the properties section of a FormViewType for deploying an ARM template. It includes settings for wizard mode, title, steps, and deployment details.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"isWizard\": false,\n    \"title\": \"Deploy ARM Template\",\n    \"steps\": [],\n    \"deployment\": {\n      \"resourceScope\": {},\n      \"kind\": \"template\",\n      \"parameters\": {},\n      \"template\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blade onInputsSet with Data Fetch\nDESCRIPTION: Example of implementing the onInputsSet method for a blade, showing data fetching and UI updates based on server response. Demonstrates populating textbox values and conditional UI element creation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreturn this._view.fetch(inputs.id).then(() => {\n    const person = this._view.data;\n\n    // populate name textbox value\n    this.nameTextBox.value(person.name());\n\n    // if smartphone has a value create a control to display it\n    // otherwise leave it empty\n    const smartPhone = person.smartPhone();\n    if (smartPhone) {\n        const textBox = TextBox.create(this._container, {\n            readOnly: true,\n            label: \"Smart phone\",\n            value: smartPhone,\n        });\n        this.smartPhone(textBox);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Template Deployment Options for ARM Provisioning (TypeScript)\nDESCRIPTION: This snippet returns a deployment options object for ARM provisioning in the portal extension. It gathers runtime values such as marketplace item IDs, JSON-serialized post provisioning content, resource and deployment info, and allows for conditional part pinning based on feature flags. Dependencies include helpers like getTemplateJson and feature flag checks. Inputs: internal variables like marketplaceItem, resource names, parameters. Outputs: A populated options object for use in provisioning calls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n    marketplaceItemId: MsPortalFx.isFeatureEnabled(\"prodtest\") ? prodMarketplaceItemId : testMarketplaceItemId,\n    provisioningHash: JSON.stringify(postCreateContent),\n    subscriptionId: subscriptionId,\n    resourceGroupName: resourceGroupName,\n    resourceGroupLocation: resourceGroupLocation,\n    parameters: parameters,\n    deploymentName: `${marketplaceItem ? marketplaceItem.deploymentName : \"NoMarketplaceEngine\"}-${(new Date()).toISOString().replace(/\\D/g, \"\")}`,\n    resourceProviders: [resourceProvider],\n    resourceId: resourceIdFormattedString,\n    templateJson: getTemplateJson(),\n    // You can override the gallery item's dashboard part when pinning.\n    // Here we're doing it based on a feature flag.\n    supplyPartReference: isFeatureEnabled(\"noPinEngine\") && (() => {\n        return PartReferences.forPart(\"NotificationsPinnedPart\").createReference({ parameters: {} });\n    }),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Command for Azure Portal View\nDESCRIPTION: This JSON snippet demonstrates how to configure a Delete Command for an Azure Portal view. It includes properties for display name, icon, confirmation dialog, and dependent resources. The command is set up to delete a resource with additional confirmation for associated dependent resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewDeleteCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DeleteCommand\",\n    \"id\": \"deleteCommand\",\n    \"displayName\": {\n        \"property\": \"delete\"\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Delete\",\n    \"confirmation\": {\n        \"title\": {\n        \"property\": \"deleteResourceTitle\"\n        },\n        \"message\": {\n        \"property\": \"deleteResourceMessage\"\n        },\n        \"dependentResources\": [\n            {\n                \"apiVersion\": \"2021-02-01-preview\",\n                \"resourceType\": \"Microsoft.Network/networkSecurityPerimeters/profiles/accessRules\",\n                \"icon\": {\n                    \"file\": \"../../Content/SVG/PerimeterAccessRules.svg\"\n                }\n            }\n        ]\n    },\n    \"definition\": {\n        \"apiVersion\": \"2014-04-01\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Number, Currency, and Significant Digit Formatting (TypeScript)\nDESCRIPTION: This snippet illustrates advanced formatting with the MsPortalFx Globalization.NumberFormat.create(options) function in TypeScript. By passing an options object, developers can format as currency (e.g., EUR or JPY) and control aspects like significant digits. The main dependency is MsPortalFx/Globalization. Key parameters include style (e.g., 'currency'), currency code, and significant digit constraints; outputs are locale-tailored formatted strings. Limitation: Currency formatting requires a valid ISO 4217 currency code.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalization.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar number = 123456.789;\n\n// request a currency format\\uFFFD// User locale is 'de-DE'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'EUR' }).format(number));\n// → 123.456,79 €\n// the Japanese yen doesn't use a minor unit\\uFFFD// User locale is 'ja-JP'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'JPY' }).format(number));\n// → \\u00A5123,457\n// limit to three significant digits\\uFFFD// User locale is 'en-IN'\nconsole.log(Globalization.NumberFormat.create({ maximumSignificantDigits: 3 }).format(number));\n// → 1,23,000\n\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with NotificationManager in TypeScript (v2)\nDESCRIPTION: Example of creating and raising notifications using NotificationManager.create() in TypeScript for Azure Portal v2.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar myNotification = ExtensionDefinition.NotificationDefinitions.MyNotification;\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = new MsPortalFx.UI.NotificationManager.create(myNotification.name);\nnotification.raise(myNotification.starting, assetId, formatArgs);\n// execute server-side operation and get server event correlation id\nnotification.updateCorrelationId(correlationId);\nnotification.raise(myNotification.succeeded, assetId, formatArgs);\n```\n\n----------------------------------------\n\nTITLE: Implementing ProvidedByResourceMenu Configuration\nDESCRIPTION: Implementation of getMenuConfig using the ProvidedByResourceMenu option with blade references and resource information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\npublic getMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInformation): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                {\n                    id: \"overview_group\",\n                    displayText: ClientResources.ResourceMenuGroup.overview,\n                    items: [\n                        {\n                            id: \"overview\",\n                            displayText: ClientResources.ResourceMenu.overview,\n                            enabled: ko.observable(true),\n                            keywords: \"overview\",\n                            icon: Images.MyResourceIcon,\n                            supplyBladeReference: () => {\n                                return BladeReferences.forBlade(\"MyResourceOverviewBlade\").createReference({\n                                    parameters: { id: resourceInfo.resourceId },\n                                });\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Telemetry in Knockout for Azure Portal\nDESCRIPTION: This code shows how to log telemetry events using the MsPortalFx.Base.Diagnostics.Telemetry.trace method in Knockout components for the Azure Portal. It includes parameters for source, action, and optional fields like duration and additional data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Base.Diagnostics.Telemetry.trace({\n    source: string;\n    action: string;\n    actionModifier?: string;\n    data?: any;\n    assetType?: string;\n    duration?: number;\n    name?: string;\n    serviceTreeId?: string;\n    lowPriority?: boolean;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Form View Structure for Azure Portal\nDESCRIPTION: This snippet demonstrates the overall structure of a Form view in Azure Portal, including data sources, resources, commands, and form steps. It showcases how to use various controls and link them to data sources or resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative path to dx.schema.json>\",\n    \"view\": {\n        \"kind\": \"Form\",\n\t\t\"dataSources\": [\n\t\t\t{\n\t\t\t\"kind\": \"graph\",\n\t\t\t\"name\": \"graph\",\n\t\t\t\"path\": \"v1.0/me?$select=displayName,id,mail\"\n\t\t\t}\n\t\t],\n\t\t\"resources\": [\n            {\n                \"id\": \"/subscriptions/7b216101-32eb-4063-aaa3-78a58a87ffb1/resourceGroups/testRG1/providers/Microsoft.Compute/virtualMachines/test1VM\",\n                \"apiVersion\": \"2017-03-30\"\n            }\n        ],\n\t\t\"commands\": [\n\t\t\t{\n\t\t\t\t\"kind\": \"RefreshCommand\",\n\t\t\t\t\"id\": \"refreshCommandId\",\n\t\t\t\t\"displayName\": \"refreshCommand\",\n\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.Refresh\"\n\t\t\t}\n\t\t],\n        \"properties\": {\n            \"title\": \"Test Form View\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"textBoxUsingDataSource\",\n\t\t\t\t\t\t\t\"type\": \"Microsoft.Common.TextBox\",\n\t\t\t\t\t\t\t\"label\": \"text box with DataSource\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"defaultValue\": \"[dataSources('graph').displayName]\",\n\t\t\t\t\t\t\t\"toolTip\": \"Use only allowed characters\",\n\t\t\t\t\t\t\t\"constraints\": {\n\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n\t\t\t\t\t\t\t\t\"validationMessage\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"visible\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"textBoxUsingResource\",\n\t\t\t\t\t\t\t\"type\": \"Microsoft.Common.TextBox\",\n\t\t\t\t\t\t\t\"label\": \"text box with Resource\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"defaultValue\": \"[resources().name]\",\n\t\t\t\t\t\t\t\"toolTip\": \"Use only allowed characters\",\n\t\t\t\t\t\t\t\"constraints\": {\n\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n\t\t\t\t\t\t\t\t\"validationMessage\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"visible\": true\n\t\t\t\t\t\t}\n                    ]\n                },\n                {\n                    \"name\": \"tags\",\n                    \"label\": \"Tags\",\n                    \"elements\": [\n                        {\n                            \"name\": \"tagsByResource\",\n                            \"type\": \"Microsoft.Common.TagsByResource\",\n                            \"resources\": [\n                                \"Microsoft.Storage/storageAccounts\",\n                                \"Microsoft.Compute/virtualMachines\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"deployment\": {\n                \"parameters\": {\n                    \"tagsByResource\": \"[steps('tags').tagsByResource]\"\n                },\n                \"kind\": \"ResourceGroup\",\n                \"location\": \"[steps('basics').resourceScope.location.name]\",\n                \"resourceGroupId\": \"[steps('basics').resourceScope.resourceGroup.id]\",\n                \"template\": {\n                    \"file\": \"<ARM deployment template relative path>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TemplateBlade in TypeScript\nDESCRIPTION: Demonstrates creating a basic TemplateBlade with decorators, HTML template, and core functionality. Includes context handling, initialization, and basic blade properties like title and subtitle.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-template.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\n\n@TemplateBlade.Decorator({\nhtmlTemplate: \"\" +\n    \"<div class='msportalfx-padding'>\" +\n    \"  <div>This is a Template Blade.</div>\" +\n    \"</div>\",\n})\n@TemplateBlade.ForContextPane.Decorator({\nwidth: TemplateBlade.ForContextPane.Width.Small,\n})\nexport class SimpleTemplateBlade {\npublic title = ClientResources.simpleTemplateBlade;\npublic subtitle: string;\n\npublic context: TemplateBlade.Context<void>;\n\npublic async onInitialize() {\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSH Key-Pair Generation in Azure Portal DX Form Template\nDESCRIPTION: This JSON code demonstrates how to implement the Microsoft.Compute.CredentialsCombo control for SSH key-pair generation in an Azure Portal DX Form. The example shows a complete form with two steps: 'basics' and 'sshKeys'. The SSH public key parameter is mapped to the ARM template for deployment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Linux-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative-path-to-Dx-Schema>\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"title\": \"Sample Form for SSH Key-Pair Generation\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"sshKeys\",\n                    \"label\": \"SSH Keys\",\n                    \"elements\": [\n                        {\n                            \"name\": \"credentialsCombo\",\n                            \"type\": \"Microsoft.Compute.CredentialsCombo\",\n                            \"label\": {\n                                \"password\": \"Password\",\n                                \"confirmPassword\": \"Confirm password\",\n                                \"sshPublicKey\": \"Ssh public key\",\n                                \"authenticationType\": \"Authentication Type\"\n                            },\n                            \"toolTip\": {\n                                \"password\": \"\"\n                            },\n                            \"constraints\": {\n                                \"required\": true,\n                                \"customPasswordRegex\": \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{12,}$\",\n                                \"customValidationMessage\": \"The password must be alphanumeric, contain at least 12 characters, and have at least 1 letter and 1 number.\"\n                            },\n                            \"options\": {\n                                \"hideConfirmation\": false,\n                                \"hidePassword\": true\n                            },\n                            \"osPlatform\": \"Linux\",\n                            \"visible\": true\n                        }\n                    ]\n                }\n            ],\n            \"deployment\": {\n                \"parameters\": {\n                    \"sshPublicKey\": \"[steps('sshKeys').credentialsCombo.sshPublicKey]\"\n                },\n                \"template\": {\n                    \"file\": \"<path-to-ARM-Template>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextBox contract type for an engine name property\nDESCRIPTION: Declaration of the engine name property using the TextBox.Contract type. This replaces the traditional EditScope-backed TextBox control with the editscopeless version.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* The view model for the form element for the engine name.\n**/\npublic engineName: TextBox.Contract;\n```\n\n----------------------------------------\n\nTITLE: Handling Filter Changes and Refetching QueryCache Data in TypeScript\nDESCRIPTION: Sets up a subscription to the `value` property of a control (likely an `OptionGroup` represented by `this.runningStatus`). When the selected value changes (`newValue`), it triggers a sequence: puts the associated grid into a loading state (`this.grid.loading(true)`), initiates a new data fetch on the `QueryCache` view (`this._websitesQueryView.fetch`) using the `newValue` as a filter parameter, and finally removes the grid's loading state once the fetch completes using `.finally()`. This implements dynamic filtering based on user selection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.runningStatus.value.subscribe(this._lifetime, (newValue) => {\n    this.grid.loading(true);\n    this._websitesQueryView.fetch({ runningStatus: newValue })\n        .finally(() => {\n            this.grid.loading(false);\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Required Validation to a TextBox in Azure Portal Forms API\nDESCRIPTION: This snippet demonstrates how to add a required field validation to a TextBox control in the Azure Portal Forms API. It creates a TextBox with validation options that displays an error message when the field is empty. The validation is applied through the validations observableArray property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-field-validation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar nameTextboxOptions  = <MsPortalFx.ViewModels.Forms.TextBox.Options>{\n      label: ko.observable(ClientResources.required),\n      validations: ko.observableArray([\n          new MsPortalFx.ViewModels.RequiredValidation(ClientResources.pleaseEnterSomeText)\n      ])\n  };\n  this.nameTextbox  = new MsPortalFx.ViewModels.Forms.TextBox.ViewModel(\n      this._container, this, \"requiredFieldValue\", nameTextboxOptions );\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Components for Virtual Machines in TypeScript\nDESCRIPTION: This snippet demonstrates how to create policy components for virtual machines using TypeScript. It defines a reducer map for subscription, resource group, and location, and includes a custom request function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-adding-policy-validation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { PolicyContext: VMPolicyContext, PolicyField: VMPolicyField } = createPolicyComponents({\n// The keys of the reducer map are the field names\nreducerMap: {\n    subscription: {\n        order: 0,\n        buildResourceDetails: (resourceDetails, val: string) => {\n            // scope is required\n            resourceDetails.scope = `/subscriptions/${val}`;\n            return resourceDetails;\n        },\n    },\n    resourceGroup: {\n        order: 1,\n        buildResourceDetails: (resourceDetails, val: { isNew: boolean; resourceGroup: string }) => {\n            const requestScope = resourceDetails.scope;\n            //add the resource group to the subscription to set the scope to the resource group\n            resourceDetails.scope = val.resourceGroup;\n            // record the scope if the resource group hasn't been created yet or set to undefined\n            // so that policyRequest.scope is defaulted to resourceDetails.scope\n            // make sure to set request scope in both cases.\n            return val?.isNew ? { requestScope, resourceDetails } : { requestScope: resourceDetails.scope, resourceDetails };\n        },\n    },\n    location: {\n        buildResourceDetails: (resourceDetails, locationId: string) => {\n            const location = ArmId.parse(locationId).resourceName;\n            resourceDetails.resourceContent = {\n                // type is required\n                // In production this would be a virtual machine type, but in dogfood we're using a test resource type\n                type: \"Providers.Test/statefulIbizaEngines\",\n                location,\n            };\n            // api version of the resource is required\n            resourceDetails.apiVersion = \"2014-04-01\";\n            return resourceDetails;\n        },\n        pendingValuesGenerator: (value: string) => {\n            return [{\n                // The potential field to be set by the string values e.g. resourceDetails.resourceContent.location = \"location\"\n                field: \"location\",\n                // Return values for each potential value to be placed in the resource Content\n                // This is run in a computed, so when fetchedValues is updated, this list will also be updated\n                // And trigger a policy check.\n                values: () => [value, ...Redux.store.getState().fetchedLocations.map(val => val.id)],\n                // This will map your value to a string for placement in the field\n                // of the resource. In this instance resourceDetails.resourceContent.location = {1} where loc = subscriptions/{0}/locations/{1}\n                valueToField: (loc: string) => ArmId.parse(loc).resourceName,\n            }];\n        },\n    },\n},\ncustomizeRequest: (policyRequest) => {\n    // Perform any final customizations to the policy request as necessary\n    // This is Optional.\n    return policyRequest;\n},\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing ResourceScope Control Outputs in JSON\nDESCRIPTION: This snippet demonstrates how to access various outputs from the ResourceScope control within a Form view. It includes examples for accessing resource group, subscription, management group, location, and resource name information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceScope.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"location\": {\n        \"label\": \"New resource group location\",\n        \"visible\": \"[equals('New', steps('basics').resourceScope.resourceGroup.modeName)]\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Command to Open a Blade with Output Parameters in PDL (XML)\nDESCRIPTION: Defines a command in PDL (`\\Client\\Commands\\OpenBladeCommand\\OpenBladeCommand.pdl`) that opens 'OutputParameterChildBlade'. The 'BladeAction' includes a 'BladeOutput' element. This configures the command to receive data back from the blade: the value provided by the blade's output parameter named 'outputNumber' ('Parameter=\"outputNumber\"') will be bound to the 'currentNumber' property ('Target=\"currentNumber\"') within the command's view model or data context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<Command Kind=\"Blade\"\n         Name=\"OpenBladeCommandWithOutput\"\n         Text=\"{Resource openBladeCommandOutput, Module=ClientResources}\"\n         ViewModel=\"{ViewModel Name=OpenBladeCommandWithOutput, Module=./OpenBladeCommand/ViewModels/OpenBladeCommandViewModels}\">\n  <BladeAction Blade=\"OutputParameterChildBlade\">\n    <BladeOutput Target=\"currentNumber\"\n                 Parameter=\"outputNumber\" />\n  </BladeAction>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Portal Area DataContext\nDESCRIPTION: Demonstrates how to initialize a DataContext for an Area in the extension's Program.ts entry point using dependency injection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.viewModelFactories.V1$$MasterDetail().setDataContextFactory<typeof MasterDetailV1>(\n    \"./V1/MasterDetail/MasterDetailArea\",\n    (contextModule) => new contextModule.DataContext());\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Storage.StorageAccountSelector Control in JSON\nDESCRIPTION: Example configuration for the Microsoft.Storage.StorageAccountSelector control that allows users to create a new storage account or select an existing one. The control supports properties for setting default values, defining allowed/excluded storage types, and toggling visibility of existing accounts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.StorageAccountSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Enclosing comment\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Storage.StorageAccountSelector\",\n    \"label\": \"Storage account\",\n    \"toolTip\": \"\",\n    \"defaultValue\": {\n      \"name\": \"storageaccount01\",\n      \"type\": \"Premium_LRS\"\n    },\n    \"constraints\": {\n      \"allowedTypes\": [],\n      \"excludedTypes\": []\n    },\n    \"options\": {\n      \"hideExisting\": false\n    },\n    \"visible\": true\n  }\n  // Enclosing comment\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription Dropdown for ARM Resources\nDESCRIPTION: Implementation of a subscription dropdown control with validation, resource provider registration, and optional gallery item filtering. Used in resource provisioning forms.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscriptionDropDown = FxSubscriptionDropDown.create(container, {\n    initialSubscriptionId: provisioning.initialValues.subscriptionIds,\n    infoBalloonContent: ClientResources.infoBalloonContent,\n    validations: [\n        ...(subPolicyValidation ? [subPolicyValidation] : []),\n        new Validations.Required(ClientResources.selectSubscription),\n    ],\n    // Providing a list of resource providers (NOT the resource types) makes sure that when\n    // the deployment starts, the selected subscription has the necessary permissions to\n    // register with the resource providers (if not already registered).\n    // Example: Providers.Test, Microsoft.Compute, etc.\n    resourceProviders: [resourceProvider],\n    // Optional -> You can pass the gallery item to the subscriptions drop down, and the\n    // the subscriptions will be filtered to the ones that can be used to create this\n    // gallery item.\n    filterByGalleryItem: this._marketplaceItem,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Settings via MsPortalFx Globalization API in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to access the current user's display language and format culture using the MsPortalFx/Globalization module. Both displayLanguage and formatCulture are exposed directly as properties, requiring the module to be imported. The result provides the current language context for formatting or display decisions throughout your extension. Dependencies: The MsPortalFx/Globalization npm or build module must be accessible to your project. Inputs: None. Outputs: Values of displayLanguage and formatCulture, corresponding to user preferences. Limitations: Only returns the locale settings as computed by the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar displayLanguage = Globalization.displayLanguage;\nvar formatCulture = Globalization.formatCulture;\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Aliases in Azure Portal PDL (XML)\nDESCRIPTION: Defines named permission aliases within an AssetType using PDL (Portal Definition Language, XML-based). This allows referencing complex Azure resource actions (like 'Microsoft.Robotics/robots/read') with simpler names ('read', 'restart') within the extension's definitions, improving readability and maintainability. These definitions are typically placed within the `<AssetType.Permissions>` section of an asset definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"Robot\">\n  <AssetType.Permissions>\n    <PermissionDefinition Name=\"read\"         Action=\"Microsoft.Robotics/robots/read\" />\n    <PermissionDefinition Name=\"restart\"      Action=\"Microsoft.Robotics/robots/restart/action\" />\n    <PermissionDefinition Name=\"readChildren\" Action=\"Microsoft.Robotics/robots/children/read\" />\n  </AssetType.Permissions>\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientTraceUri in C# CustomApplicationContext\nDESCRIPTION: Shows how to update the CustomApplicationContext.cs class to include a ClientTraceUri property, which affects the fx.environment.clientTraceUri property at runtime.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override AppRelativePath ClientTraceUri\n{\n    get\n    {\n        return this.configuration.ClientTraceUri;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Localized Strings in Client Resources (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates importing a generated module for localized strings (ClientResources) and referencing a string resource with static typing for UI display. It requires the build process to generate the typings from RESX, and ensures at compile time that string keys exist, helping to maintain localization consistency.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as ClientResources from \\\"ClientResources\\\";\n\n...\n\nthis.subtitle(ClientResources.hubsLensTitle);\n```\n\n----------------------------------------\n\nTITLE: Creating EditScopeCache with AJAX Operations in TypeScript\nDESCRIPTION: Demonstrates creation of EditScopeCache with AJAX-based data fetching and saving operations. Includes implementation of supplyExistingData for GET requests and saveEditScopeChanges for POST requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst editScopeCache = EditScopeCache.createNew<WebsiteModel, number>({\n    supplyExistingData: (websiteId) => {\n        return FxBaseNet.ajax<any>({\n            uri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/\" + websiteId),\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\",\n        }).then((data) => {\n            return {\n                id: data.id,\n                name: data.name,\n                running: data.running,\n            };\n        });\n    },\n    saveEditScopeChanges: (websiteId, editScope) => {\n        const website = editScope.root;\n        const serializableWebsite = ko.toJSON(website);\n\n        this._saving(true);\n        return FxBaseNet.ajaxExtended({\n            uri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/\" + websiteId),\n            type: \"POST\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\",\n            data: serializableWebsite,\n        }).then(() => {\n            return {\n                action: Data.AcceptEditScopeChangesAction.AcceptClientChanges,\n            };\n        }).finally(() => {\n            this._saving(false);\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating XPath Locator Queries for Playwright\nDESCRIPTION: Example of replacing XPath prefix syntax for compatibility with Playwright. The .// prefix is replaced with a method call to maintain functionality across both automation systems.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst listViewGallery = testFx.portal.element(testFx.Locators.By.xpath(`${testFx.Locators.By.currentNodeXPathPrefix()}div[contains(@class, 'fxc-listView-gallery')]`));\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Menu Configuration Interfaces in TypeScript\nDESCRIPTION: Defines the strongly-typed structures, options, and extension points for resource menu composition in Azure Portal through a TypeScript module declaration. Interfaces detail contract methods (such as getMenuConfig), configuration objects, group extension, and feature toggles, including detailed JSDoc annotations for each property. Dependencies include FxMenuBlade, various resource types, and TypeScript type support. Primary parameters are for menu structure, resource identity, and group extensions. Expected input for key contracts is resource information, returning promises for menu configuration. Intended for developers extending or integrating Azure Portal menus.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as FxMenuBlade from \"Fx/Composition/MenuBlade\";\n\ndeclare module MsPortalFx.Assets {\n    /**\n     * The resource information for the resource menu.\n     */\n    interface ResourceInformation {\n        /**\n         * The resource ID.\n         */\n        resourceId: string;\n        /**\n         * The resource or resource group.\n         */\n        resource: FxSubscription | FxHubsAzure.ResourceGroup | FxHubsAzure.Resource;\n        /**\n         * The resource's subscription information (only valid for non-tenant resources).\n         */\n        subscription?: FxSubscription;\n    }\n\n    /**\n     * The options of the resource menu config.\n     */\n    interface ResourceMenuOptions {\n        /**\n         * Enables the settings for roles and users.\n         */\n        enableRbac?: boolean;\n        /**\n         * Enables the settings for help request support.\n         */\n        enableSupportHelpRequest?: boolean;\n        /**\n         * Enables the settings for troubleshoot support.\n         */\n        enableSupportTroubleshoot?: boolean;\n        /**\n         * Enables the settings for troubleshootv2 support.\n         */\n        enableSupportTroubleshootV2?: boolean;\n        /**\n         * Enables the settings for resource health support.\n         */\n        enableSupportResourceHealth?: boolean;\n        /**\n         * Enables the settings for the event logs.\n         */\n        enableSupportEventLogs?: boolean;\n        /**\n         * Enables the setting for tags.\n         */\n        enableTags?: boolean;\n    }\n\n    /**\n     * Defines a group extension in the menu.\n     * This is used to extend the built-in groups with additional items.\n     *\n     * NOTE: The referenceId must be one of the constants for group IDs in this file.\n     *       Using a different ID will result in a load rejection.\n     */\n    interface MenuGroupExtension {\n        /**\n         * Gets the ID for the built-in group.\n         */\n        referenceId: string;\n        /**\n         * The menu items in the group.\n         */\n        items: MenuItem[];\n    }\n\n    /**\n     * The menu group instance type (either a menu group or a menu group extension).\n     */\n    type MenuGroupInstance = MenuGroup | MenuGroupExtension;\n\n    /**\n     * The resource menu configuration.\n     */\n    interface ResourceMenuConfig {\n       /**\n         * The resource menu item (overview item).\n         */\n        overview: MenuItem;\n        /**\n         * The menu item groups.\n         */\n        groups: MenuGroupInstance[];\n        /**\n         * The ID of the default menu item.\n         * If this is not provided, the overview item will be the default item.\n         */\n        defaultItemId?: string;\n        /**\n         * Optional set of resource menu options.\n         */\n        options?: ResourceMenuOptions;\n    }\n\n    /**\n     * The contract for the asset type's resource menu config.\n     */\n    interface ResourceMenuConfigContract {\n        /**\n         * Gets the resource menu configuration.\n         *\n         * @param resourceInfo The resource ID and resource|resource group for the menus.\n         * @return A promise which will be resolved with the resource menu configuration.\n         */\n        getMenuConfig(resourceInfo: ResourceInformation): Promise<ResourceMenuConfig>;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: EditScope Promise Handling\nDESCRIPTION: Example showing the proper way to handle saveEditScopeChanges Promise rejection. The code should reject the Promise on failure rather than resolving with DiscardClientChanges to prevent data loss.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsaveEditScopeChanges\n```\n\n----------------------------------------\n\nTITLE: Defining Declarative Resource Overview Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for a Declarative Resource Overview blade in the Azure Portal using the 'GetStarted' kind. It specifies parameters like the resource ID, fetches resource details using an ARM GET request via the 'resources' section, and includes placeholders for 'essentials', 'messages', 'commands', and 'properties' (which contains tab definitions). String resources are referenced via 'stringSource' pointing to a .resjson file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"messages\": [],\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MenuCommand for Azure Command Bar (JSON)\nDESCRIPTION: Defines a MenuCommand object grouping multiple command elements, such as Refresh and Delete, for the Azure portal command bar. Dependencies include supported command kinds like RefreshCommand and DeleteCommand within its 'commands' array. Each nested command requires properties like 'id', 'displayName', and 'icon', and DeleteCommands support additional confirmation and API version definition. Inputs include the array of child commands; the output is a rendered dropdown menu in the portal. Limitation: child commands must be supported types and must have unique IDs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"MenuCommand\",\n        \"id\": \"menuCommand\",\n        \"displayName\": \"Menu\",\n        \"icon\": \"MsPortalFx.Base.Images.AllServices\",\n        \"commands\": [\n          {\n            \"kind\": \"RefreshCommand\",\n            \"id\": \"refreshCommandId2\",\n            \"displayName\": \"refresh\",\n            \"icon\": \"MsPortalFx.Base.Images.Refresh\"\n          },\n          {\n            \"kind\": \"DeleteCommand\",\n            \"id\": \"deleteCommand2\",\n            \"displayName\": \"delete\",\n            \"icon\": \"MsPortalFx.Base.Images.Delete\",\n            \"confirmation\": {\n              \"title\": \"deleteResourceTitle\",\n              \"message\": \"deleteResourceMessage\"\n            },\n            \"definition\": {\n              \"apiVersion\": \"2014-04-01\"\n            }\n          }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating DataViews from Cache Objects in Azure Portal\nDESCRIPTION: Example demonstrating how to create a QueryView from a QueryCache. The DataView presents cache data to the view model and provides reference counting with automatic lifetime management.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websitesQueryView = dataContext.masterDetailBrowseSample.websitesQuery.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Input Structures for Parameter Collection (Portalfx, TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a parameter collection input structure in TypeScript, including input parameters, their metadata, and provider configuration options. It shows the required dictionary patterns for parameter sets and metadata, and illustrates how to set initial values, UI hints, and validation constraints. Dependencies include Knockout (for data models) and adherence to the structure expected by Portalfx parameter collection providers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninputs = {\n    inputParameters: {\n        parameterSetA: {\n            parameter1: \"Initial value\",\n            parameter2: \"\",\n            // More parameters...\n        },\n        // More parameter sets...\n    },\n    inputMetadata: {\n        parameterSetA: {\n            parameter1: {\n                displayName: \"Display Name\",\n                defaultValue: \"Default Value\",\n                description: \"Description for parameter\",\n                tooltip: \"Enter the value...\",\n                uiHint: \"text\",\n                constraints: {\n                    required: true,\n                    hidden: false,\n                    length: {\n                        min: 10,\n                        max: 256\n                    }\n                    // More constraints..\n                }\n            },\n            // More parameter metadata...\n        },\n        // More parameter metadata sets...\n    }\n    options: {\n        providerAOptionSet: {\n            someFlag: true,\n            someValue: \"value\",\n            someArray: [\"A\", \"B\", \"C\"]\n        }\n        // More option sets...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Template Blade in TypeScript\nDESCRIPTION: Demonstrates the creation of a basic Template Blade with HTML template, decorators, and core functionality. Shows implementation of title, subtitle, and context properties along with initialization method. Includes essential imports and blade configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-templateblade.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\n\n@TemplateBlade.Decorator({\nhtmlTemplate: \"\" +\n    \"<div class='msportalfx-padding'>\" +\n    \"  <div>This is a Template Blade.</div>\" +\n    \"</div>\",\n})\n@TemplateBlade.ForContextPane.Decorator({\nwidth: TemplateBlade.ForContextPane.Width.Small,\n})\nexport class SimpleTemplateBlade {\npublic title = ClientResources.simpleTemplateBlade;\npublic subtitle: string;\n\npublic context: TemplateBlade.Context<void>;\n\npublic async onInitialize() {\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Getting Started View in Azure Portal Declarative Resource Overview\nDESCRIPTION: This JSON snippet defines the structure for a Getting Started view in the Azure Portal. It includes a main title, description, and features with their respective titles, descriptions, icons, and actions. The configuration allows for customizable properties and different types of actions such as menu items, blades, and external URLs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/GetStartedTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"GetStarted\",\n    \"title\": {\n        \"property\": \"tab1Title\"\n    },\n    \"description\": {\n        \"property\": \"tab1Description\"\n    },\n    \"learnMore\": {\n        \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n        \"ariaLabel\": \"Learn more about Azure Portal\"\n    },\n    \"features\": [\n        {\n            \"title\": {\n                \"property\": \"tab1feature1Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature1Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"menu\": \"tags\",\n                \"displayName\": {\n                    \"property\": \"tab1feature1actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature2Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature2Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                },\n                \"displayName\": {\n                    \"property\": \"tab1feature2actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature3Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature3Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/msi.svg\"\n            },\n            \"action\": {\n                \"url\": \"https://www.azure.com\",\n                \"displayName\": {\n                    \"property\": \"tab1feature3actionDisplayName\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryCache for Load More (Continuation Token) in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring `MsPortalFx.Data.QueryCache` for the 'load more' data virtualization model. It defines a `navigation` object with a `loadByContinuationToken` function to fetch data using continuation tokens and a `processServerResponse` function to extract product data, total count, and the next continuation token from the server response. This cache is intended to be used with a `DataNavigator`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-virtualizedgriddata.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis.productsCache = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.Product, ProductQueryParams>({\n    entityTypeName: SamplesExtension.DataModels.ProductType,\n    sourceUri: MsPortalFx.Data.uriFormatter(ProductData.QueryString),\n    navigation: {\n        loadByContinuationToken: (\n            suppliedQueryView: MsPortalFx.Data.QueryView<SamplesExtension.DataModels.Product, ProductQueryParams>,\n            query: ProductQueryParams,\n            reset: boolean,\n            filter: string): Promise<any> => {\n\n            var token = reset ? \"\" :\n                (suppliedQueryView.metadata() ?\n                suppliedQueryView.metadata().continuationToken :\n                \"\");\n\n            return suppliedQueryView.fetch({ token: token, categoryId: query.categoryId });\n        }\n    },\n    processServerResponse: (response: any) => {\n        return <MsPortalFx.Data.DataCacheProcessedResponse>{\n            data: response.products,\n            navigationMetadata: {\n                totalItemCount: response.totalCount,\n                continuationToken: response.continuationToken\n            }\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Robot and Applying Changes to QueryCache with TypeScript\nDESCRIPTION: This code demonstrates creating a robot via a POST request and then using applyChanges to update the client-side cache without additional server calls. It adds the new robot to the dataset directly, improving performance by avoiding unnecessary AJAX requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npublic createRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot,\n        type: \"POST\",\n        contentType: \"application/json\",\n        data: ko.toJSON(robot),\n    }).then(() => {\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.robotsQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we created a robot in the ca, so we will reflect this change on the client side.\n            dataSet.addItems(0, [robot]);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Parameter Provider Blade in TypeScript\nDESCRIPTION: Illustrates the code typically placed within an event handler (like `onClick`) to programmatically open a Parameter Provider blade. It calls the `openBlade` method on the container object (`this._container`), passing the previously configured blade reference (`providerReference`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n    public onClick() {\n        this._container.openBlade(providerReference);\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with a QueryView in onInputsSet Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch data in the onInputsSet lifecycle method of a Blade or Part view model. It uses a QueryView to fetch websites filtered by a running status parameter from the blade's inputs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change\n */\npublic onInputsSet(): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: this.runningStatus.value() });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring EntityCache for Website Models in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and configure an EntityCache instance for website models. It specifies the entity type name, source URI, and uses a findCachedEntity configuration to locate existing entities in a query cache based on ID matching.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websiteEntities = new MsPortalFx.Data.EntityCache<WebsiteModel, number>({\n    entityTypeName: WebsiteModelMetadata.name,\n    sourceUri: MsPortalFx.Data.uriFormatter(DataShared.websiteByIdUri, true),\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Declarative Resource Overview Schema in JSON\nDESCRIPTION: This snippet shows the basic schema for a Declarative Resource Overview blade using the GetStarted kind. It includes sections for parameters, resources, essentials, commands, and properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-getstartedViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Notifications with Notifications v4 API (publishNotification) in TypeScript\nDESCRIPTION: Illustrates the recommended way to publish a static notification using the `publishNotification` function from the `Fx/Notification` module in Notifications v4. This replaces the old `Notification` class and PDL definition. It accepts an object with properties like `description`, `status`, and `linkTo`. The function returns an object containing a notification `id` for tracking.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\nvar notification = publishNotification({\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    status: CompletedStatus.Information,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n// notification will contain an \"id\" property, which can be used tracking, debugging, etc..\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Data Browse View Column Properties Schema in Markdown\nDESCRIPTION: Markdown table defining the properties schema for data browse view columns, including required fields like displayName and name, along with optional properties such as valueMapping, action, format, and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-databrowseViewType-columns.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|displayName|True|\n|name|True|\n|valueMapping|False|\n|action|False|\n|maximumFractionDigits|False|\n|format|False|\n|sourceUnits|False|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenBladeCommand for Azure Portal Navigation\nDESCRIPTION: Examples of OpenBladeCommand implementation for Azure Portal blade navigation. Shows configuration for both full blade and context pane navigation with parameters. Includes property settings for icons, display names, and blade references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewOpenBladeCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n    \"id\": \"formarmrequestCommand\",\n    \"kind\": \"OpenBladeCommand\",\n    \"displayName\": {\n        \"property\": \"formArmRequest\"\n    },\n    \"blade\": {\n        \"name\": \"FormBladeArmRequest_Dx\",\n        \"parameters\": {\n        \"id\": \"[parameters('id')]\"\n        }\n    }\n},\n{\n    \"icon\": \"MsPortalFx.Base.Images.Book\",\n    \"id\": \"formreadonlyCommand\",\n    \"kind\": \"OpenBladeCommand\",\n    \"displayName\": {\n        \"property\": \"formReadonly\"\n    },\n    \"blade\": {\n        \"name\": \"FormBladeReadonly_Dx\",\n        \"parameters\": {\n        \"id\": \"[parameters('id')]\"\n        },\n        \"inContextPane\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Portal Overview View Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for an Overview view in the Azure Portal. It includes parameters, resources, essentials, commands, and properties sections. The properties section contains title, summary, and features definitions, which are crucial for creating a detailed Overview view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-overviewViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Overview\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [\n      {\n        \"kind\": \"MoveCommand\",\n        \"id\": \"moveCommand\",\n        \"displayName\": {\n          \"property\": \"move\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Move\"\n      },\n      {\n        \"kind\": \"DeleteCommand\",\n        \"id\": \"deleteCommand\",\n        \"displayName\": {\n          \"property\": \"delete\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Delete\",\n        \"confirmation\": {\n          \"title\": {\n            \"property\": \"deleteResourceTitle\"\n          },\n          \"message\": {\n            \"property\": \"deleteResourceMessage\"\n          }\n        },\n        \"definition\": {\n          \"apiVersion\": \"2014-04-01\"\n        }\n      }\n    ],\n    \"properties\": {\n      \"title\": \"title\",\n      \"summary\": {\n        \"title\": {\n          \"property\": \"tab1Title\"\n        },\n        \"description\": \"By default, all resources added to profiles within the same network security perimeter will be able to communicate with each other, but not with the internet or resources outside the perimeter.\",\n        \"learnMore\": {\n          \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n          \"ariaLabel\": \"Learn more about Azure Portal\"\n        }\n      },\n      \"features\": [\n        {\n          \"title\": {\n            \"property\": \"tab1feature1Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature1Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/engine.svg\"\n          },\n          \"action\": [\n            {\n              \"menu\": \"tags\",\n              \"displayName\": {\n                \"property\": \"tab1feature1actionDisplayName\"\n              }\n            }\n          ]\n        },\n        {\n          \"title\": {\n            \"property\": \"tab1feature2Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature2Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/engine.svg\"\n          },\n          \"action\": {\n            \"blade\": {\n              \"name\": \"FormBladeArmRequest_Dx\"\n            },\n            \"displayName\": {\n              \"property\": \"tab1feature2actionDisplayName\"\n            }\n          }\n        },\n        {\n          \"title\": {\n            \"property\": \"tab1feature3Title\"\n          },\n          \"description\": {\n            \"property\": \"tab1feature3Description\"\n          },\n          \"learnMore\": {\n            \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n            \"ariaLabel\": \"Learn more about Azure Portal\"\n          },\n          \"icon\": {\n            \"file\": \"../../Content/svg/msi.svg\"\n          },\n          \"action\": {\n            \"url\": \"https://www.azure.com\",\n            \"displayName\": {\n              \"property\": \"tab1feature3actionDisplayName\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReactModel for Azure Portal Extension in TypeScript\nDESCRIPTION: This code snippet shows how to create a ReactModel class that interacts with the Redux store. It demonstrates accessing the store and logging its state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Redux from \"redux\";\n\ninterface StoreState {\n  text: string;\n}\n\nexport = class ExampleModel extends MsPortalFx.Models.React<StoreState, Redux.AnyAction> {\n  constructor(options: MsPortalFx.Models.Options<StoreState, Redux.AnyAction>) {\n    super(options);\n\n    options.asyncStore.then((store) => {\n      console.log(store.getState());\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Client-Side Log Entries with MsPortalFx API - TypeScript\nDESCRIPTION: This snippet shows how to write an error log entry from a client-side Azure Portal extension using the 'MsPortalFx.Base.Diagnostics.Log.writeEntry' API in TypeScript. Developers specify the log level, area, message, and any additional parameters (optionally). Dependencies include MsPortalFx's client API libraries. The input for the method includes the log entry level, a string for the application area, the log message, and any number of extra parameters. Output is a batched log entry sent to the browser console and, if configured, forwarded to the server.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-logging-from-typescript.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Base.Diagnostics.Log.writeEntry(\n    MsPortalFx.Base.Diagnostics.LogEntryLevel.Error,\n    \"Area of your application\",\n    \"The message you would like to log\",\n    \"Extra parameter 1\",\n    \"Extra parameter 2\");\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Browse View with Icons and Links in Azure Portal\nDESCRIPTION: This example demonstrates a Data Browse view with advanced features such as status icons, menu actions, and various link types including resource, menu, URL, and blade links.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"kind\": \"DataBrowse\",\n\t\"displayName\": \"Data browse\",\n\t\"ariaLabel\": \"testing\",\n\t\"data\": [\n\t\t{\n\t\t\t\"name\": \"resourceName1\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Succeeded\",\n\t\t\t\"menu\": \"tags\",\n\t\t\t\"urlText\": \"Azure portal\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://azure.microsoft.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName1\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName2\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Warning\",\n\t\t\t\"menu\": \"properties\",\n\t\t\t\"urlText\": \"Microsoft\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://www.microsoft.com/en-us/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName2\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName3\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Failed\",\n\t\t\t\"menu\": \"locks\",\n\t\t\t\"urlText\": \"Github\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://github.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName3\"\n\t\t\t}\n\t\t}\n\t],\n\t\"columns\": [\n\t\t{\n\t\t\t\"displayName\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"resourceId\": \"[$item.id]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Status\",\n\t\t\t\"name\": \"status\",\n\t\t\t\"valueMapping\": [\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Succeeded\",\n\t\t\t\t\t\"displayName\": \"Succeeded\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Warning\",\n\t\t\t\t\t\"displayName\": \"Warning\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Failed\",\n\t\t\t\t\t\"displayName\": \"Failed\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Menu\",\n\t\t\t\"name\": \"menu\",\n\t\t\t\"action\": {\n\t\t\t\t\"menu\": \"[$item.menu]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Url\",\n\t\t\t\"name\": \"urlText\",\n\t\t\t\"action\": {\n\t\t\t\t\"url\": \"[$item.urlAction.url]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Blade\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"blade\": {\n\t\t\t\t\t\"name\": \"A blade name\",\n\t\t\t\t\t\"extension\": \"An extension name\",\n\t\t\t\t\t\"parameters\": \"[$item.parameters]\",\n\t\t\t\t\t\"inContextPane\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EditableGrid Control Configuration in JSON\nDESCRIPTION: Configuration example for creating an editable grid with name, gender, and contact preference columns. Includes validation rules, constraints, and formatting options. The grid supports TextBox, OptionsGroup and DropDown elements with configurable width and validation rules.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.EditableGrid.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"people\",\n    \"type\": \"Microsoft.Common.EditableGrid\",\n    \"ariaLabel\": \"Enter information per person\",\n    \"label\": \"People\",\n    \"constraints\": {\n      \"width\": \"Full\",\n      \"rows\": {\n        \"count\": {\n          \"min\": 1,\n          \"max\": 10\n        }\n      },\n      \"columns\": [\n        {\n          \"id\": \"colName\",\n          \"header\": \"Name\",\n          \"width\": \"1fr\",\n          \"element\": {\n            \"type\": \"Microsoft.Common.TextBox\",\n            \"placeholder\": \"Full name\",\n            \"constraints\": {\n              \"required\": true,\n              \"validations\": [\n                {\n                  \"isValid\": \"[startsWith(last(take(steps('grid').people, $rowIndex)).colName, 'contoso')]\",\n                  \"message\": \"Must start with 'contoso'.\"\n                },\n                {\n                  \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n                  \"message\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"id\": \"colGender\",\n          \"header\": \"Gender\",\n          \"width\": \"1fr\",\n          \"element\": {\n            \"name\": \"dropDown1\",\n            \"type\": \"Microsoft.Common.DropDown\",\n            \"placeholder\": \"Select a gender...\",\n            \"constraints\": {\n              \"allowedValues\": [\n                {\n                  \"label\": \"Female\",\n                  \"value\": \"female\"\n                },\n                {\n                  \"label\": \"Male\",\n                  \"value\": \"male\"\n                },\n                {\n                  \"label\": \"Other\",\n                  \"value\": \"other\"\n                }\n              ],\n              \"required\": true\n            }\n          }\n        },\n        {\n          \"id\": \"colContactPreference\",\n          \"header\": \"Contact preference\",\n          \"width\": \"1fr\",\n          \"element\": {\n            \"type\": \"Microsoft.Common.OptionsGroup\",\n            \"constraints\": {\n              \"allowedValues\": [\n                {\n                  \"label\": \"Email\",\n                  \"value\": \"email\"\n                },\n                {\n                  \"label\": \"Text\",\n                  \"value\": \"text\"\n                }\n              ],\n              \"required\": true\n            }\n          }\n        }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in React Blades\nDESCRIPTION: Examples of logging errors in React-based blades using the Az.log method. These snippets demonstrate logging basic errors, caught errors, and errors with additional context in React components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Az from \"./Az\";\nAz.log([{\n    timestamp: Date.now(),\n    level: Az.LogEntryLevel.Error,\n    area: \"<BladeName>.ReactView\",\n    message: new Error(\"Something bad happened\"),\n}]));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Az from \"./Az\";\ntry {\n    doSomething();\n} catch (err) {\n    Az.log([{\n        timestamp: Date.now(),\n        level: Az.LogEntryLevel.Error,\n        area: \"<BladeName>.ReactView\",\n        message: err, // You can log the error object as the message and it will be serialized into debug info for telemetry and alerts\n    }]));\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Az from \"./Az\";\ntry {\n    doSomething();\n} catch (err) {\n    Az.log([{\n        timestamp: Date.now(),\n        level: Az.LogEntryLevel.Error,\n        area: \"<BladeName>.ReactView\",\n        message: \"doSomething did something bad\", // provide specific context information with a string message\n        args: [err] // Add the original error object to the args array and it will be serialized into its debug info for telemetry and alerts\n    }]));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Version and Description via csproj Properties (PDL Versioning)\nDESCRIPTION: Demonstrates setting the `ExtensionVersion` and `ExtensionDescription` MSBuild properties within a `.csproj` file using XML. These properties allow the extension's version and a descriptive string (potentially including the build configuration) to be stamped directly into the Portal Definition Language (PDL) at build time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-versioning.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <ExtensionVersion>1.0.0.0</ExtensionVersion>\n  <ExtensionDescription>This extension build configuration is $(Configuration)</ExtensionDescription>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.Grid with Edit and Add Functionality in JSON\nDESCRIPTION: This example demonstrates a Grid control with both add and edit capabilities using blade references. It includes custom column types, validations, and default values. The grid manages 'Foo' resources with name, region, state, and note properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Grid.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Grid\",\n    \"name\": \"fooGrid\",\n    \"label\": {\n        \"summary\": \"Attached Foo's\",\n        \"addition\": \"Add Foo\",\n        \"delete\": \"Delete\",\n        \"ariaLabel\": \"Grid for providing Foo information\"\n    },\n    \"addBlade\": {\n        \"name\": \"FormWithOutputs_Dx\",\n        \"extension\": \"tsextension\",\n        \"parameters\": {\n            \"title\": \"Add Foo\"\n        },\n        \"outputItem\": \"output\",\n        \"inContextPane\": true\n    },\n    \"editBlade\": {\n        \"name\": \"FormWithOutputs_Dx\",\n        \"extension\": \"tsextension\",\n        \"parameters\": {\n            \"name\": \"[$item.name]\",\n            \"region\": \"[$item.region]\",\n            \"title\": \"Edit Foo\"\n        },\n        \"outputItem\": \"output\",\n        \"inContextPane\": true\n    },\n    \"defaultValue\": [\n        {\n            \"name\": \"resource1\",\n            \"region\": \"East US\",\n            \"state\": \"on\",\n            \"note\": \"Lorem ipsum\"\n        }\n    ],\n    \"constraints\": {\n        \"width\": \"Full\",\n        \"canEditRows\": true,\n        \"validations\": [\n            {\n                \"isValid\": \"[lessOrEquals(length(filter(steps('grid').fooGrid, (element) => equals(element.state, 'on'))), 2)]\",\n                \"message\": \"A maximum of 2 Foo's may be set to 'On'\"\n            }\n        ],\n        \"rows\": {\n            \"count\": {\n                \"min\": 1,\n                \"max\": 10\n            }\n        },\n        \"columns\": [\n            {\n                \"id\": \"name\",\n                \"header\": \"Name\",\n                \"width\": \"1fr\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.name]\"\n            },\n            {\n                \"id\": \"region\",\n                \"header\": \"Region\",\n                \"width\": \"1fr\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.region]\"\n            },\n            {\n                \"id\": \"state\",\n                \"header\": \"State\",\n                \"width\": \"1fr\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.OptionsGroup\",\n                    \"defaultValue\": \"On\",\n                    \"constraints\": {\n                        \"allowedValues\": [\n                            {\n                                \"label\": \"On\",\n                                \"value\": \"on\"\n                            },\n                            {\n                                \"label\": \"Off\",\n                                \"value\": \"off\"\n                            }\n                        ],\n                        \"required\": true\n                    }\n                }\n            },\n            {\n                \"id\": \"note\",\n                \"header\": \"Note\",\n                \"width\": \"2fr\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.TextBox\",\n                    \"placeholder\": \"Jot something down\",\n                    \"constraints\": {\n                        \"required\": true,\n                        \"validations\": [\n                            {\n                                \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n                                \"message\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n                            },\n                            {\n                                \"isValid\": \"[or(contains($item.note, 'e'), contains($item.note, 'E'))]\",\n                                \"message\": \"Use the letter 'e' in your note, please.\"\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure Portal Grid for AAD User Selection (JSON)\nDESCRIPTION: This JSON defines a `Microsoft.Common.Grid` control named `aadGrid` for selecting AAD users and assigning them a Ledger Role within the Azure Portal UI. It integrates with the standard AAD Object Picker (`ObjectPickerBlade`) for adding users, disables direct row editing, pulls default user information from a `graph` data source, defines columns for display name, email, and a dropdown for role selection (Reader, Contributor, Administrator), enforces row count limits (1-3), and validates that at least one user has the Administrator role using Azure Portal functions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Grid.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Grid\",\n    \"name\": \"aadGrid\",\n    \"label\": {\n        \"addition\": \"Add AAD-Based User\",\n        \"delete\": \"Delete\",\n        \"summary\": \"AAD-Based User(s)\"\n    },\n    \"defaultValue\": [\n        {\n            \"id\": \"[dataSources('graph').id]\",\n            \"ledgerRoleName\": \"Administrator\",\n            \"displayName\": \"[dataSources('graph').displayName]\",\n            \"mail\": \"[dataSources('graph').mail]\"\n        }\n    ],\n    \"addBlade\": {\n        \"extension\": \"Microsoft_AAD_IAM\",\n        \"name\": \"ObjectPickerBlade\",\n        \"parameters\": {\n            \"title\": \"addAadLabel\",\n            \"disabledObjectIds\": \"[map(steps('security').aadGrid,(element)=>element.id)]\",\n            \"queries\": 1\n        },\n        \"outputItem\": \"selectedObjects\",\n        \"inContextPane\": true\n    },\n    \"constraints\": {\n        \"width\": \"Full\",\n        \"canEditRows\": false,\n        \"columns\": [\n            {\n                \"id\": \"displayName\",\n                \"header\": \"Name\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.displayName]\"\n            },\n            {\n                \"id\": \"mail\",\n                \"header\": \"Email\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.mail]\"\n            },\n            {\n                \"id\": \"ledgerRoleName\",\n                \"header\": \"Ledger Role\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.DropDown\",\n                    \"constraints\": {\n                        \"allowedValues\": [\n                            {\n                                \"label\": \"readerLabel\",\n                                \"value\": \"Reader\"\n                            },\n                            {\n                                \"label\": \"contributorLabel\",\n                                \"value\": \"Contributor\"\n                            },\n                            {\n                                \"label\": \"administratorLabel\",\n                                \"value\": \"Administrator\"\n                            }\n                        ],\n                        \"required\": true\n                    }\n                }\n            }\n        ],\n        \"rows\": {\n            \"count\": {\n                \"min\": 1,\n                \"max\": 3\n            }\n        },\n        \"validations\": [\n            {\n                \"isValid\": \"[contains(map(steps('security').aadGrid,(element)=>element.ledgerRoleName),'Administrator')]\",\n                \"message\": \"Must include at least one AAD-based user with the role of Administrator.\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DataContext with QueryCache and EntityCache in TypeScript\nDESCRIPTION: Defines a DataContext class that holds and manages shared data caches in an Azure portal extension Area. Dependencies include the DI framework (for @Di.Class decorator) and the QueryCache, EntityCache, and EditScopeCache generics, parameterized by WebsiteModel and associated identifiers. Key parameters expose caches for: an entire website collection (websitesQuery), single website retrieval (websiteEntities), and transient website edits (editScopeCache). The DataContext is designed to be injected into related ViewModels; expected usage is for blades to share consistent, up-to-date resource representations via these caches.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Context for data samples.\n*/\n@Di.Class()\nexport class DataContext {\n   /**\n    * This QueryCache will hold all the website data we get from the website controller.\n    */\n   public websitesQuery: QueryCache<WebsiteModel, WebsiteQueryParams>;\n\n   /**\n    * Provides a cache that will enable retrieving a single website.\n    */\n   public websiteEntities: EntityCache<WebsiteModel, number>;\n\n   /**\n    * Provides a cache for persisting edits against a website.\n    */\n   public editScopeCache: EditScopeCache<WebsiteModel, number>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Type Metadata for Entity Array Modeling - Azure Portal FX - TypeScript\nDESCRIPTION: Defines metadata for a wrapper type to enable modeling of strings as entity arrays, required for editable grids that must operate on observable object arrays instead of primitive arrays. Requires MsPortalFx's metadata API and Knockout for observable binding. The StringWrapperType metadata is marked as entityType, and the corresponding interface is exported for use in type-safe code. No inputs or outputs, but this setup is a prerequisite for data transformation in later steps.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst wrapperTypeMetadataName = \"ParameterProviderWithEditableStringsBladeViewModel_StringWrapperType\";\nMsPortalFx.Data.Metadata.setTypeMetadata(wrapperTypeMetadataName, {\nname: wrapperTypeMetadataName,\nproperties: {\n    value: null,\n},\nentityType: true,\n});\n\nexport interface StringWrapperType {\nvalue: KnockoutObservable<string>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Server Data and Refreshing QueryCache in Azure Portal\nDESCRIPTION: Example of a DataContext method that updates a robot entity on the server and then refreshes the QueryCache to ensure client-side data remains consistent with server data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\npublic updateRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot + robot.name(),\n        type: \"PUT\",\n        contentType: \"application/json\",\n        data: ko.toJSON(robot),\n    }).then(() => {\n        // This will refresh the set of data that is available in the underlying data cache.\n        this.robotsQuery.refreshAll();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Command Group in a Custom Part PDL (XML)\nDESCRIPTION: This PDL snippet demonstrates referencing a `CommandGroup` ('CarCommands') within a `CustomPart` definition ('DeleteCommandDetailsPart') using the `<CommandGroupReference>` element. This allows the same set of commands defined in the group to be used in the context menu of the part.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<CustomPart Name=\"DeleteCommandDetailsPart\"\n            ViewModel=\"DeleteCommandDetailsPartViewModel\"\n            Template=\"{Html Source='Templates\\Car.html'}\">\n  <CustomPart.Properties>\n    <Property Name=\"id\" Source=\"{BladeParameter Name=id}\" />\n  </CustomPart.Properties>\n  <CommandGroupReference Name=\"CarCommands\" />\n</CustomPart>\n```\n\n----------------------------------------\n\nTITLE: Opening a Menu Blade with Custom Parameters in TypeScript\nDESCRIPTION: This example shows how to open a menu blade and pass customized parameters to the content blade, including creating references for both the control blade and the menu blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resourceId = \"/subscriptions/sub123/resourcegroups/servertest/providers/Microsoft.test/virtualservers/web1\";\n\nconst controlBladeReference = BladeReferences.forBlade(\"VirtualServerControlBlade\").createReference({ parameters: { id: resourceId, showNotification: \"true\" } });\n\nconst menuBladeReference = BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"control\", controlBladeReference).createReference({ parameters: { id: resourceId } });\n\nvoid this._container.openBlade(menuBladeReference);\n```\n\n----------------------------------------\n\nTITLE: Converting Primitive Arrays to Entity Arrays for Editable Grid Consumption - Azure Portal FX - TypeScript\nDESCRIPTION: Illustrates transforming a string array into an observable entity array suitable for editable grids, wiring up correct type metadata and ensuring bidirectional mapping between the UI and data backend. Relies on MsPortalFx, Knockout, and prior type metadata definitions; uses mapIncomingDataForEditScope to wrap primitive strings and mapOutgoingDataForCollector to unwrap them while preserving edit tracking through getEntityArrayWithEdits. Inputs are string arrays, output is an editable, entity-array structure for grids; conversion ensures full compatibility and change detection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<string[], KnockoutObservableArray<StringWrapperType>>(container, {\n    editScopeMetadataType: wrapperTypeMetadataName,\n    mapIncomingDataForEditScope: (incoming) => {\n        // Editable grid only accepts an array of editable entities (that is, objects and not strings).\n        const wrappedStrings = incoming.map((str) => {\n            return {\n                value: ko.observable(str),\n            };\n        });\n        return ko.observableArray(wrappedStrings);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        const entityArrayWithEdits = editScope.getEntityArrayWithEdits<StringWrapperType>(outgoing);\n\n        // Unwrap each string to produce the expected string array.\n        return entityArrayWithEdits.arrayWithEdits.map((wrapper) => {\n            return wrapper.value();\n        });\n    },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTimeFormat with Options in TypeScript\nDESCRIPTION: Shows how to customize date and time formatting using options in DateTimeFormat.create(). Examples include adding weekday to date display, using UTC timezone, configuring time precision, and using 24-hour format.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// request a weekday along with a long date // User locale is 'de-DE'\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Donnerstag, 20. Dezember 2012\"\n\n// an application may want to use UTC and make that visible // User locale is 'en-US' options.timeZone = 'UTC';\noptions.timeZoneName = 'short';\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Thursday, December 20, 2012, GMT\"\n\n// sometimes you want to be more precise // User locale is 'en-AU'\noptions = {\nhour: 'numeric', minute: 'numeric', second: 'numeric',\ntimeZoneName: 'short'\n};\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"2:00:00 pm AEDT\"\n\n// sometimes even the US needs 24-hour time // User locale is 'en-US'\noptions = {\nyear: 'numeric', month: 'numeric', day: 'numeric',\nhour: 'numeric', minute: 'numeric', second: 'numeric',\nhour12: false\n};\nconsole.log(date.toLocaleString(options));\n// → \"12/19/2012, 19:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Reacting to Selected Subscription Changes - ResourceManagement - TypeScript\nDESCRIPTION: This sample shows how to register a callback to react to changes in the selected subscriptions using ResourceManagement.onSelectedSubscriptionsChange. It requires importing the Fx/ResourceManagement module and expects a container context object. The callback is called with an updated Subscription[] whenever the selection changes. This enables your code to automatically update in response to user actions. The function is asynchronous and should be awaited.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-subscriptions.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as ResourceManagement from \"Fx/ResourceManagement\";\n\nawait ResourceManagement.onSelectedSubscriptionsChange(container, (selectedSubscriptions: Subscription[]) => {\n    // performRequiredAction(selectedSubscriptions);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions from TypeScript\nDESCRIPTION: This snippet demonstrates how to check permissions using the hasPermission() API in TypeScript.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Extension.hasPermission(\n    resourceUri,\n    [ExtensionDefinition.Assets.Robot.Permissions.read]\n).then((hasAccess) => {\n    if (!hasAccess) { container.unauthorized(); return; }\n    /* do awesome stuff */\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Button Label in Form Blade - Azure Portal SDK - JSON\nDESCRIPTION: This snippet demonstrates how, from SDK 7.4.0.5 onward, to customize the primary button label for a Form blade executing an ARM request using the \"primaryButtonLabel\" property. This is done inside the \"properties\" object for enhanced UX. If omitted, the default label is \"Submit\". No external dependencies beyond correct SDK version. Only string labels are supported. Use within Form blade definitions and customize as syntactically shown.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n    \"primaryButtonLabel\": \"Execute ARM request\",\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Token Response Format from Azure Portal\nDESCRIPTION: Example of a token response from the Portal DelegationToken endpoint. Contains the auth header, authorization header, expiration time, refresh token and error fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\":{\n        \"authHeader\":\"Bearer eyJ0...\",\n        \"authorizationHeader\":\"Bearer ...\",\n        \"expiresInMs\":3299000,\n        \"refreshToken\":\"MIIF...\",\n        \"error\":null,\n        \"errorMessage\":null\n    },\n    \"portalAuthorization\":\"MIIF...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Providers with ARM API Control and Binding to DropDown - JSON\nDESCRIPTION: This snippet configures an ARM API Control that calls a Microsoft API to fetch ExpressRoute service providers, binding the results to a DropDown UI component using the allowedValues constraint. Requires Azure Portal custom UI integration and Microsoft.Solutions.ArmApiControl/DropDown schemas. The providersApi fetches provider objects and the providerDropDown displays their names, allowing user selection; the allowedValues parameter maps provider names into DropDown options. Inputs are subscription context and API response, with outputs rendered in the DropDown. Only available when used in appropriate Azure portal extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"providersApi\",\n    \"type\": \"Microsoft.Solutions.ArmApiControl\",\n    \"request\": {\n        \"method\": \"GET\",\n        \"path\": \"[concat(subscription().id, '/providers/Microsoft.Network/expressRouteServiceProviders?api-version=2019-02-01')]\"\n    }\n},\n{\n    \"name\": \"providerDropDown\",\n    \"type\": \"Microsoft.Common.DropDown\",\n    \"label\": \"Provider\",\n    \"toolTip\": \"The provider that offers the express route connection.\",\n    \"constraints\": {\n        \"allowedValues\": \"[map(steps('settings').providersApi.value, (item) => parse(concat('{\\\"label\\\":\\\"', item.name, '\\\",\\\"value\\\":\\\"', item.name, '\\\"}')))]\",\n        \"required\": true\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Selector in Azure ARM Template - JSON\nDESCRIPTION: This JSON snippet defines a Microsoft.Common.SubscriptionSelector element for ARM templates, which allows users to select an Azure subscription during deployment. It restricts selectable resource providers to Microsoft.BotService and Microsoft.KeyVault. This should be included in the parameters or resources section of an ARM template, and requires that the deployment be supported by these resource providers. Key parameters include type (specifying SubscriptionSelector), name, and resourceProviders (an array of supported providers). The input is a JSON object and no output is returned; it is used as part of the template processing pipeline.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.SubscriptionSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.SubscriptionSelector\",\n    \"name\": \"subscription\",\n    \"resourceProviders\": [\n        \"Microsoft.BotService\",\n        \"Microsoft.KeyVault\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers According to Locale Using MsPortalFx Globalization API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to format numbers according to the user's current locale using MsPortalFx/Globalization's NumberFormat API. The example shows importing the API, creating a NumberFormat object, and formatting a sample number for a German locale (de-DE), resulting in language- and culture-specific delimiters. Dependencies: MsPortalFx/Globalization module. Inputs: Any number to format. Outputs: Locale-formatted string representation. Limitations: The user's locale must be set appropriately; only numbers are handled directly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar number = 123456.789;\n\n// User locale is 'de-DE'\n// German uses comma as decimal separator and period for thousands\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 123.456,789\n```\n\n----------------------------------------\n\nTITLE: Applying Edits to an Entity Array via ParameterCollector - Azure Portal FX - TypeScript\nDESCRIPTION: Shows how to use a ParameterCollector for receiving and supplying data to an entity array with an EditScope, simplifying edit application and serialization in editable grids. Depends on MsPortalFx, Knockout, and configured editScope; uses getEntityArrayWithEdits to collect entity states and applyArrayAsEdits to sync incoming data with internal arrays. Key callbacks are supplyInitialData for grid initialization and receiveResult for updating the store. Accepts arrays of ServerConfig and ensures edits (create/update/delete) are correctly reconciled.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.itemsCollector = new MsPortalFx.ViewModels.ParameterCollector<ServerConfig[]>(container, {\n    selectable: this.itemsSelector.selectable,\n    supplyInitialData: () => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to develop an array with all created/updated/deleted items\n        // in this entity array.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(editScope.root.serverConfigs).arrayWithEdits;\n    },\n    receiveResult: (result: ServerConfig[]) => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'applyArrayWithEdits' to examine the array returned from the Provider Blade\n        // and apply any differences to our EditScope entity array in terms of created/updated/deleted entities.\n        editScope.applyArrayAsEdits(result, editScope.root.serverConfigs);\n    },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Logging Telemetry in Azure Portal Extension\nDESCRIPTION: This TypeScript code demonstrates how to log telemetry events to the ExtTelemetry table using the MsPortalFx.Base.Diagnostics.Telemetry.trace method in an Azure Portal extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nMsPortalFx.Base.Diagnostics.Telemetry.trace({\n    extension: \"Microsoft_Azure_NewExtension\",\n    source: \"Links\",\n    action: \"LinkClicked\",\n    name: \"Recommended\",\n    data: {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft.Network.VirtualNetworkCombo Options in Markdown\nDESCRIPTION: This snippet defines the properties available for configuring the Microsoft.Network.VirtualNetworkCombo control. It includes the 'hideExisting' option to control the visibility of existing Virtual Networks and an 'fx.feature' property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-options.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|hideExisting|False|If set to **true** then only create new Virtual Network is available for the control.  Default is **false**.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryCache for Paged (Skip/Take) Data in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates setting up `MsPortalFx.Data.QueryCache` for the paged (skip/take) data virtualization model. It defines the source URI using `uriFormatter` with placeholders for skip and take. The `navigation` object contains a `loadBySkipTake` function that fetches data using skip and take parameters, and `processServerResponse` extracts the data and navigation metadata (total count) from the API response.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-virtualizedgriddata.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvar QueryString = MsPortalFx.Base.Resources\n    .getAppRelativeUri(\"/api/Product/GetPageResult?skip={skip}&take={take}\");\n\nvar productsCache = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.Product, ProductPageableQueryParams>({\n\n    entityTypeName: SamplesExtension.DataModels.ProductType,\n    sourceUri: MsPortalFx.Data.uriFormatter(ProductPageableData.QueryString),\n    navigation: {\n        loadBySkipTake: (\n            suppliedQueryView: MsPortalFx.Data.QueryView<SamplesExtension.DataModels.Product, ProductPageableQueryParams>,\n            query: ProductPageableQueryParams,\n            skip: number,\n            take: number,\n            filter: string): Promise<any> => {\n\n                return suppliedQueryView.fetch({ skip: skip.toString(), take: take.toString(), categoryId: query.categoryId });\n        }\n    },\n    processServerResponse: (response: any) => {\n        return <MsPortalFx.Data.DataCacheProcessedResponse>{\n            data: response.products,\n            navigationMetadata: {\n                totalItemCount: response.totalCount,\n                continuationToken: response.continuationToken\n            }\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering an RPC Callback in Azure Portal Extension EntryPoint - TypeScript\nDESCRIPTION: This TypeScript snippet registers an RPC callback named 'StringUpperCaseCallback' using MsPortalFx.Services.Rpc. The callback function receives a string input and returns the uppercase version. This enables other extensions to programmatically invoke this transformation using the callback name. Dependencies include MsPortalFx.Services.Rpc, and the output is a new uppercase string. The method should be registered as part of the extension's initialization routine.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n * Registers the RPC callbacks supported by this extension.\n */\nprivate registerCallbacks(): void {\n    MsPortalFx.Services.Rpc.registerCallback(\"StringUpperCaseCallback\",\n    \tfunction (input: string): string {\n        \treturn input.toUpperCase();\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated AJAX Calls with MsPortalFx.Base.Net.ajax in TypeScript\nDESCRIPTION: Shows a basic example of making an authenticated AJAX GET request using `MsPortalFx.Base.Net.ajax()`. This helper function automatically includes the necessary JWT token in the request headers for calls to backend APIs (like ARM) requiring authentication. It simplifies making authenticated requests compared to raw jQuery AJAX.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nvar promise = MsPortalFx.Base.Net.ajax({\n    uri: \"/api/websites/list\",\n    type: \"GET\",\n    dataType: \"json\",\n    cache: false,\n    contentType: \"application/json\",\n    data: JSON.stringify({ param: \"value\" })\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Collector Role in TypeScript for Azure Portal\nDESCRIPTION: This code snippet demonstrates a sample implementation of the Parameter Collector role in TypeScript for the Azure Portal. It includes methods for creating input parameters, validating output parameters, and saving output parameters from providers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sample parameter collection \"collector\" role.\n */\nexport class MyCollector\n    implements MsPortalFx.ViewModels.ParameterCollectionV2.Roles.ParameterCollector<CollectorDataModel> {\n    /**\n     * Create the inputs that will be sent to a given provider when launched.\n     *\n     * @param dataModel The editable copy of the editScope data model.\n     * @param providerId The id of the provider.\n     * @param inputMetadata The input parameters metadata received from the collector.\n     * @param options The parameter collection options received from the collector.\n     * @return The input parameters for the provider.\n     */\n    public createInputParameters(\n        dataModel: CollectorDataModel, // Typed to the data model tied to your UI element.\n        providerId: string,\n        inputMetadata: MsPortalFx.ViewModels.ParameterCollectionV2.InputMetadata,\n        options: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionOptions)\n        : MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionInput {\n        // Create the input parameters required by the provider.\n        var inputs = new MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionInput();\n\n        switch (providerId) {\n            case \"aProvider\":\n                // Create an instance of the provider's data model, populate it using your own\n                // data model then convert it into parameters.\n                var providerDataModel = new ProviderDataModel();\n                providerDataModel.providerParams.paramP(dataModel.collectorParams.paramC());\n\n                inputs.inputParameters =\n                    MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.modelToParameters(providerDataModel);\n                // Define metadata if needed:   inputs.inputMetadata = ...\n                // Define options if needed:    inputs.options = ...\n                break;\n\n            // More providers...\n            default:\n                break;\n        }\n\n        return inputs;\n    }\n\n    /**\n     * (Optional) Validates the output parameters received from the provider. Do not reject the\n     * promise. In case of failure, resolve with the errors. In case of success, resolve with an\n     * empty array, or simply return null.\n     *\n     * @param dataModel The editable copy of the editScope data model.\n     * @param providerId The id of the provider sending back the output parameters.\n     * @param outputs The outputs received from the provider.\n     * @return A promise resolved with an array of validation errors, if any.\n     */\n    public validateOutputParameters(\n        dataModel: CollectorDataModel, // Typed to the data model tied to your UI element.\n        providerId: string,\n        outputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters)\n        : Promise<MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionError[]> {=\n        switch (providerId) {\n            case \"aProvider\":\n                // Create an instance of the provider's data model from the output parameters\n                // sent back from the provider, then validate those outputs.\n                var providerDataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<ProviderDataModel>(outputParameters);\n\n                if (providerDataModel.providerParams.paramP() !== \"someValue\") {\n                    var errors: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionError[] = [],\n                    deferred =\n                            Q.defer<MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionError[]>();\n\n                    errors.push({\n                        errorMessage: \"Value for paramP cannot be equal to 'someValue'.\",\n                        parameterName: \"paramP\"\n                    });\n\n                    // Resolve with the errors. Do not reject.\n                    deferred.resolve(errors);\n\n                    return deferred.promise;\n                }\n                break;\n\n            // More providers...\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    /**\n     * Saves the output parameters received from the provider.\n     *\n     * @param dataModel The editable copy of the editScope data model.\n     * @param providerId The id of the provider sending back the output parameters.\n     * @param outputs The outputs received from the provider.\n     */\n    public saveOutputParameters(\n        dataModel: CollectorDataModel, // Typed to the data model tied to your UI element.\n        providerId: string,\n        outputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters): void {\n        // Save the outputs sent back by the provider.\n        switch (providerId) {\n            case \"aProvider\":\n                // Create an instance of the provider's data model from the output parameters\n                // sent back from the provider, then save them to your own data model.\n                var providerDataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<ProviderDataModel>(outputParameters);\n\n                dataModel.collectorParams.paramC(providerDataModel.providerParams.paramP());\n                break;\n\n            // More providers...\n            default:\n                break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Request for ARM in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Batch API to make a GET request to ARM. It imports the Batch module from 'Fx/Ajax' and uses the batch() function to make the request.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-ajax-batch.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Batch from \"Fx/Ajax\";\n\n// In the supplyData method\nreturn Batch.batch({\n    uri: \"https://management.azure.com/subscriptions/test/resourcegroups?api-version=2014-04-01-preview\",\n    type: \"GET\",\n    // Add other properties as appropriate\n}).then((batchResponse) => {\n    return batchResponse.content;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Dynamic Fxclick Links in TypeScript\nDESCRIPTION: Sets up various types of clickable links with click tracking functionality. This includes callback functions, blade references, resource links, and clickable URLs. Each implementation includes click tracking and event handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis._onBladeLinkFxclickLink = {\n    bladeReference: BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference(),\n    onLinkOpened: incrementDynamicFxclickClickCount(this.dynamicFxclickClickCount),\n};\n\nthis._onResourceLinkFxclickLink = {\n    resourceId:  \"/subscriptions/sub123/resourceGroups/accounts/providers/Microsoft.test/accounts/Peter\",\n    onLinkOpened: incrementDynamicFxclickClickCount(this.dynamicFxclickClickCount),\n};\n\nthis._onClickableLinkFxclickLink = new ClickableLink(\n    \"http://www.bing.com/\",\n    \"_new\",\n    \"\",\n    incrementDynamicFxclickClickCount(this.dynamicFxclickClickCount),\n);\n\n// showcasing the callback case by default\nthis.dynamicFxclick = ko.observable(this._onCallbackFxclickClick);\nthis.dynamicFxclickText = ko.observable(Resources.dynamicFxclickCallbackText);\n```\n\n----------------------------------------\n\nTITLE: Syncing Edited Arrays with applyArrayAsEdits in ParameterCollector - TypeScript\nDESCRIPTION: This code configures a ParameterCollector to supply initial data and process received array results for tracking edits in an EditScope. On receiving new results, it calls 'applyArrayAsEdits' to update the entity array, so all create, update, and delete operations are tracked. Dependencies include MsPortalFx.ViewModels.ParameterCollector and Knockout. Suitable for complex form grids where edit reconciliation is necessary.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.itemsCollector = new MsPortalFx.ViewModels.ParameterCollector<ServerConfig[]>(container, {\n    selectable: this.itemsSelector.selectable,\n    supplyInitialData: () => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to develop an array with all created/updated/deleted items\n        // in this entity array.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(editScope.root.serverConfigs).arrayWithEdits;\n    },\n    receiveResult: (result: ServerConfig[]) => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'applyArrayWithEdits' to examine the array returned from the Provider Blade\n        // and apply any differences to our EditScope entity array in terms of created/updated/deleted entities.\n        editScope.applyArrayAsEdits(result, editScope.root.serverConfigs);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form ARM Request in Azure Portal\nDESCRIPTION: Sample implementation of a Form blade that executes an ARM request. Demonstrates how to configure parameters, resources, and ARM request properties including method, path, and body. The form takes a resource ID as input and performs a POST action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formArmRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Form blade: please fill in values\",\n      \"steps\": [\n      ],\n      \"armRequest\": {\n        \"path\": \"[concat(resources().id, '/actionName?api-version=2014-04-01')]\",\n        \"method\": \"POST\",\n        \"body\": \"[parse(concat('{\\\"location\\\":', string(resources().location), '}'))]\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View as Full-Screen Blade in Azure Portal\nDESCRIPTION: This JSON configuration defines a DataBrowse view as a full-screen blade opened from a resource menu. It includes parameters, resources, essentials, commands, and properties such as title, description, data, and columns. The configuration allows for customization of displayed data and column actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"DataBrowse\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [\n      {\n        \"kind\": \"MoveCommand\",\n        \"id\": \"moveCommand\",\n        \"displayName\": {\n          \"property\": \"move\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Move\"\n      },\n      {\n        \"kind\": \"DeleteCommand\",\n        \"id\": \"deleteCommand\",\n        \"displayName\": {\n          \"property\": \"delete\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Delete\",\n        \"confirmation\": {\n          \"title\": {\n            \"property\": \"deleteResourceTitle\"\n          },\n          \"message\": {\n            \"property\": \"deleteResourceMessage\"\n          }\n        },\n        \"definition\": {\n          \"apiVersion\": \"2014-04-01\"\n        }\n      }\n    ],\n    \"properties\": {\n      \"title\": \"DataBrowse\",\n      \"description\": \"By default, all resources added to profiles within the same network security perimeter will be able to communicate with each other, but not with the internet or resources outside the perimeter.\",\n      \"ariaLabel\": \"testing\",\n      \"data\": [\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"succeeded\",\n          \"menu\": \"tags\",\n          \"urlText\": \"Azure portal\",\n          \"urlAction\": {\n            \"url\": \"https://azure.microsoft.com/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"aks-agentpool\"\n            },\n            \"title\": \"aks-agentpool\"\n          },\n          \"diskSize\": 100,\n          \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n        },\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"warning\",\n          \"menu\": \"metrics\",\n          \"urlText\": \"Microsoft\",\n          \"urlAction\": {\n            \"url\": \"https://www.microsoft.com/en-us/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"AzureMobileTest-vnet\"\n            },\n            \"title\": \"AzureMobileTest-vnet\"\n          },\n          \"diskSize\": 10000,\n          \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n        },\n        {\n          \"name\": \"\",\n          \"id\": \"\",\n          \"status\": \"failed\",\n          \"menu\": \"locks\",\n          \"urlText\": \"Github\",\n          \"urlAction\": {\n            \"url\": \"https://github.com/\"\n          },\n          \"parameters\": {\n            \"obj\": {\n              \"name\": \"Test-disk\"\n            },\n            \"title\": \"Test-disk\"\n          },\n          \"diskSize\": 1500,\n          \"price\": 1500,\n          \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n        }\n      ],\n      \"columns\": [\n        {\n          \"displayName\": \"Name\",\n          \"name\": \"name\",\n          \"action\": {\n            \"resourceId\": \"[$item.id]\"\n          }\n        },\n        {\n          \"displayName\": \"Menu\",\n          \"name\": \"menu\",\n          \"action\": {\n            \"menu\": \"[$item.menu]\"\n          }\n        },\n        {\n          \"displayName\": \"Url\",\n          \"name\": \"urlText\",\n          \"action\": {\n            \"url\": \"[$item.urlAction.url]\"\n          }\n        },\n        {\n          \"displayName\": \"Blade\",\n          \"name\": \"name\",\n          \"action\": {\n            \"blade\": {\n              \"name\": \"ObjectJsonViewBlade\",\n              \"extension\": \"Microsoft_Azure_CreateUIDef\",\n              \"parameters\": \"[$item.parameters]\",\n              \"inContextPane\": true\n            }\n          }\n        },\n        {\n          \"displayName\": \"Status\",\n          \"name\": \"status\",\n          \"valueMapping\": [\n            {\n              \"value\": \"Succeeded\",\n              \"displayName\": \"Succeeded\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n            },\n            {\n              \"value\": \"Warning\",\n              \"displayName\": \"Warning\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n            },\n            {\n              \"value\": \"Failed\",\n              \"displayName\": \"Failed\",\n              \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n            }\n          ]\n        },\n        {\n          \"displayName\": \"Disk size\",\n          \"name\": \"diskSize\",\n          \"format\": \"Number\",\n          \"sourceUnits\": \"Gigabytes\",\n          \"maximumFractionDigits\": 2\n        },\n        {\n          \"displayName\": \"Creation time\",\n          \"name\": \"creationTime\",\n          \"format\": \"Date\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Default Locales using MsPortalFx/Globalization in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of `Globalization.DateTimeFormat.create().format()` to format a UTC date according to different user locales (en-US, en-GB, ko-KR, ar-EG, ja-JP). It shows how the output format changes based on the locale's conventions for date representation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n// US English uses month-day-year order\n// User locale is 'en-US'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"12/19/2012\"\n// British English uses day-month-year order\n// User locale is 'en-GB'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"20/12/2012\"\n// Korean uses year-month-day order\n// User locale is 'ko-KR'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"2012. 12. 20.\"\n// Arabic in most Arabic speaking countries/regions uses real Arabic digits\n// User locale is 'ar-EG'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"٢٠‏/١٢‏/٢٠١٢\"\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\n// User locale is 'ja-JP-u-ca-japanese' using the Japanese calendar\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"24/12/20\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing User Claims Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for accessing user claims and information through the Portal's security API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nMsPortalFx.Base.Security.getUserInfo() : Promise<MsPortalFx.Base.Security.UserInfo>\n\ninterface UserInfo {\n    email: string;          // Guest accounts not homed in the current directory will have a UPN and not a valid email address\n    isOrgId: boolean;       // Boolean indicating if the user is logged in using an OrgId account\n    objectId: string;       // The object id of the logged in user. Note that the object id will be different per tenant\n    givenName: string;      // Name may be empty if not provided in the token\n    surname: string;        // Name may be empty if not provided in the token\n    directoryId: string;    // The tenant/directory id that the user is logged into\n    directoryName: string;  // Directory name may be empty if calling Graph fails\n    domainName: string;     // Directory domain may be empty if calling Graph fails\n    uniqueDirectoryName: string; // The unique directory name which shows both the display and domain name\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced ReactView with Redux and Async Actions\nDESCRIPTION: This code demonstrates an advanced ReactView setup with Redux, including additional state properties and actions for triggering asynchronous operations. It shows how to connect component props to Redux actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface StoreState {\n    text: string;\n    fetchServiceText: boolean;\n}\n\nconst initialState: StoreState = {\n  text: \"Default\",\n  fetchServiceText: false,\n};\n\nexport const store = Redux.createStore((state: StoreState = initialState, action: Redux.AnyAction) => {\n  switch (action.type) {\n    case \"SetText\":\n      return { ...state, text: action.text };\n    case \"ResetState\":\n      return { ...initialState };\n    case \"SetFetchServiceText\":\n      return { ...state, fetchServiceText: action.fetchServiceText };\n    default:\n      return state;\n  }\n});\n\nconst setFetchServiceText = (fetchServiceText: boolean) => ({\n    type: \"SetFetchServiceText\",\n    fetchServiceText,\n});\n\ninterface ExampleProps {\n  text: string;\n  setFetchServiceText: typeof setFetchServiceText;\n}\n\n@ReactView.Decorator<{}, {}, StoreState>({\n    store,\n    viewReady: (state) => !!state.text,\n    versionId,\n})\n@ReactView.ReactReduxConnect.Decorator<StoreState>(\n  state => ({ text: state.text }),\n  { setFetchServiceText },\n)\nexport class Example extends React.Component<ExampleProps, {}> {\n  componentDidMount() {\n    this.props.setFetchServiceText(true);\n  }\n\n  public render() {\n    return (\n      <div>\n        <p>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced AutogenForm View with Parameters and Resources in JSON\nDESCRIPTION: This snippet demonstrates a more advanced configuration for an AutogenForm view. It includes parameters, resources, and additional deployment properties such as primaryResourceId and templateParametersDefaultValueOverrides.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/AutogenFormViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"AutogenForm\",\n    \"parameters\": [\n        {\n            \"name\": \"parentId\",\n            \"type\": \"key\"\n        }\n    ],\n    \"resources\": [\n        {\n            \"id\": \"[parameters('parentId')]\",\n            \"apiVersion\": \"0000-00-00\"\n        }\n    ],\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"primaryResourceId\": \"[resources().id]\",\n        \"templateParametersDefaultValueOverrides\": {\n          \"profileName\": \"[resourceId(resources().id).name]\"\n        },\n        \"template\": {\n          \"file\": \"{ARM template file path}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up FormViewType for ARM API Call\nDESCRIPTION: This snippet illustrates how to configure a FormViewType to perform an ARM API call. It includes properties for customizing the form steps and defining the ARM request details.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"isWizard\": false,\n    \"title\": \"Perform ARM Call\",\n    \"primaryButtonLabel\": \"Execute\",\n    \"steps\": [],\n    \"armRequest\": {\n      \"method\": \"PUT\",\n      \"path\": \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MyProvider/myResources/{resourceName}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Child Resource Asset for Azure Portal\nDESCRIPTION: This snippet demonstrates how to define a child resource asset in Azure Portal, including its resource type, display names, icon, and create action. It shows how to reference the parent resource ID in the create action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../Definitions/dx.schema.json\",\n    \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n    \"proxyAssetType\": {\n        \"name\": \"MyDxChildResource\",\n        \"resourceType\": {\n        \"name\": \"Microsoft.OperationalInsights/Workspaces/savedSearches\",\n        \"apiVersion\": \"2020-03-01-preview\"\n    },\n    \"displayNames\": {\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Dashboard\", \n    \"create\": {\n        \"blade\": {\n        \"name\": \"SavedSearchCreate_Dx\",\n        \"parameters\": {\n        \"id\": \"{resourceId}\"\n        }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sample Spec Data Structure (TypeScript/JSON)\nDESCRIPTION: This snippet shows an example structure for a single specification item used by the Spec Picker. It includes properties like `id`, `colorScheme`, `title`, `specCode`, arrays for `promotedFeatures` and detailed `features`, and a `cost` object containing currency and display format information. This structure populates the `_specData` observable.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"id\": \"Standard_D15_v2\",\n    \"colorScheme\": \"mediumBlue\", //available colors: \"mediumBlue\", \"yellowGreen\", \"darkOrchid\", \"orange\"\"\n    \"title\": \"Standard\",\n    \"specCode\": \"D15_v2\",\n    \"promotedFeatures\": [\n        {\n            \"id\": \"cores\",\n            \"value\": \"20\",\n            \"unitDescription\": \"Cores\",\n        },\n        {\n            \"id\": \"ram\",\n            \"value\": \"140\",\n            \"unitDescription\": \"GB\",\n        },\n    ],\n    \"features\": [\n        {\n            \"id\": \"disks\",\n            \"displayValue\": \"40\",\n        },\n        {\n            \"id\": \"iops\",\n            \"displayValue\": \"40x500\",\n        },\n        {\n            \"id\": \"ssdCache\",\n            \"displayValue\": \"1000 GB\",\n        },\n        {\n            \"id\": \"loadBalancing\",\n            \"displayValue\": \"\",\n        },\n        {\n            \"id\": \"autoScale\",\n            \"displayValue\": \"\",\n        },\n    ],\n    \"cost\": {\n        \"currencyCode\": \"USD\",\n        \"caption\": \"{0}/Month (Estimated)\",\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Blade with Decorators in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a menu blade using the @MenuBlade decorator. It sets up menu groups and items, each linking to different template blades. The code also shows how to initialize the viewModel and handle the onInitialize lifecycle method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport { BladeReferences } from \"Fx/Composition\";\nimport * as MenuBlade from \"Fx/Composition/MenuBlade\";\n\n@MenuBlade.Decorator()\nexport class TemplateBladesBlade {\n    public title = ClientResources.templateBladesBladeTitle;\n    public subtitle = ClientResources.samples;\n\n    public context: MenuBlade.Context<void>;\n\n    public viewModel: MenuBlade.ViewModel2;\n\n    public async onInitialize() {\n        const { container } = this.context;\n\n        this.viewModel = MenuBlade.ViewModel2.create(container, {\n            groups: [\n                {\n                    id: \"default\",\n                    displayText: ClientResources.templateBladeSamples,\n                    items: [\n                        {\n                            id: \"simpleTemplateBlade\",\n                            displayText: ClientResources.simpleTemplateBlade,\n                            icon: null,\n                            supplyBladeReference: () => {\n                                return BladeReferences.forBlade(\"SimpleTemplateBlade\").createReference();\n                            },\n                        },\n                        // ... more menu items ...\n                    ],\n                },\n            ],\n            overview: {\n                id: \"overview\",\n                displayText: ClientResources.templateBladeOverviewBlade,\n                icon: null,\n                supplyBladeReference: () => {\n                    return BladeReferences.forBlade(\"TemplateBladeOverviewBlade\").createReference();\n                },\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Child Policy Factories for Multi-resource Validation in TypeScript\nDESCRIPTION: Sets up child policy factories to enable policy validation across multiple resources being created. This approach allows maintaining previous resource detail reducers from subscription and resource group dropdowns across different resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Locations is our first control which will be validated with a pending field. This means it can become invalid\n// or valid depending on other values in the resource. In this sample we're doing a multi resource create\n// so more than one policy check could invalidate this location. With this in mind, we'll need to create a child\n// factory for each resource we're creating (if they have any different properties) before creating field validations with pending\n// fields. This allows us to maintain the previous resource detail reducers from the subscription and resource group dropdowns.\n// Optionally, you can not copy over the buildResourceDetails, and recreate the policy reducers from the beginning.\n// eslint-disable-next-line deprecation/deprecation\nconst secondaryEnginePolicyFactory = primaryEnginePolicyFactory?.createChildFactory({ copyBuildResourceDetails: true });\n// eslint-disable-next-line deprecation/deprecation\nconst backupEnginePolicyFactory = primaryEnginePolicyFactory?.createChildFactory({ copyBuildResourceDetails: true });\n\nconst fetchedValues = ko.observableArray<FxLocationDropDown.Location>();\n// eslint-disable-next-line deprecation/deprecation\nconst createLocationFieldValidation = (factory: PolicyValidationFactory) => {\n    // This factory can also take multiple potential values.\n    // This is useful only for values within the resourceContent as only\n    // they can have pending fields\n    // eslint-disable-next-line deprecation/deprecation\n    return factory?.createFieldValidation<FxLocationDropDown.Location>({\n        pendingValues: {\n            // The potential field to be set by the string values e.g. resourceDetails.resourceContent.location = \"location\"\n            field: \"location\",\n            // Return values for each potential value to be placed in the resource Content\n            // This is run in a computed, so when fetchedValues is updated, this list will also be updated\n            // And trigger a policy check.\n            values: () => fetchedValues(),\n            // This will map your value to a string for placement in the field\n            // of the resource. In this instance resourceDetails.resourceContent.location = loc.name\n            valueToField: (loc) => loc.name,\n        },\n        buildResourceDetails: (resourceDetails, val) => {\n            resourceDetails.resourceContent = {\n                // type is required\n                type: resourceType,\n                location: val?.name,\n            };\n            // api version of the resource is required\n            resourceDetails.apiVersion = \"2014-04-01\";\n            return resourceDetails;\n        },\n    });\n};\nconst locationPolicyValidations = primaryEnginePolicyFactory ? [primaryEnginePolicyFactory, secondaryEnginePolicyFactory, backupEnginePolicyFactory].map(createLocationFieldValidation) : [];\n```\n\n----------------------------------------\n\nTITLE: Publishing a TypeScript Client Notification Linked to an Asset\nDESCRIPTION: Demonstrates how to publish a simple, one-time client-side notification in an Azure Portal extension using TypeScript. The notification is linked to a specific asset, identified by its extension name, asset type, and asset ID. Clicking this notification will open the associated asset's blade. This uses the `MsPortalFx.Hubs.Notifications.ClientNotification.publish` method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nMsPortalFx.Hubs.Notifications.ClientNotification.publish({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Information,\n    asset: {\n        extensionName: ExtensionDefinition.definitionName,\n        assetType: ExtensionDefinition.AssetTypes.MyAsset.name,\n        assetId: assetId\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Skip/Take Pageable Grid ViewModel in TypeScript\nDESCRIPTION: This TypeScript example demonstrates creating a ViewModel for an Azure Portal grid implementing the classic paged (skip/take) pattern. It instantiates a `_pageableDataNavigator` from a `QueryCache` configured for skip/take fetching. This navigator is then used with the grid's `Pageable` extension, setting the type to `Pageable` and specifying `itemsPerPage`. The `onInputsSet` function handles triggering the initial data query.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-virtualizedgriddata.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract,\n            initialState: any,\n            dataContext: ControlsArea.DataContext) {\n\n    this._pageableDataNavigator = dataContext.productDataBySkipTake.productsCache.createNavigator(container);\n\n    // Define the extensions you wish to enable.\n    var extensions = MsPortalFx.ViewModels.Controls.Lists.Grid.Extensions.Pageable;\n\n    // Define the options required to have the extensions behave properly.\n    var pageableExtensionOptions = {\n        pageable: {\n            type: MsPortalFx.ViewModels.Controls.Lists.Grid.PageableType.Pageable,\n            dataNavigator: this._pageableDataNavigator,\n            itemsPerPage: ko.observable(20)\n        }\n    };\n\n    // Initialize the grid view model.\n    this.pagingPageableGridViewModel = new MsPortalFx.ViewModels.Controls.Lists.Grid\n        .ViewModel<SamplesExtension.DataModels.Product, ProductSelectionItem>(\n            null, extensions, pageableExtensionOptions);\n\n    // Set up which columns to show.  If you do not specify a formatter, we just call toString on\n    // the item.\n    var basicColumns: MsPortalFx.ViewModels.Controls.Lists.Grid.Column[] = [\n        {\n            itemKey: \"id\",\n            name: ko.observable(ClientResources.gridProductIdHeader)\n        },\n        {\n            itemKey: \"description\",\n            name: ko.observable(ClientResources.gridProductDescriptionHeader)\n        },\n    ];\n\n    this.pagingPageableGridViewModel.showHeader = true;\n\n    this.pagingPageableGridViewModel.columns =\n        ko.observableArray<MsPortalFx.ViewModels.Controls.Lists.Grid.Column>(basicColumns);\n\n    this.pagingPageableGridViewModel.summary =\n        ko.observable(ClientResources.basicGridSummary);\n\n    this.pagingPageableGridViewModel.noRowsMessage =\n        ko.observable(ClientResources.nobodyInDatabase);\n}\n\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._pageableDataNavigator.setQuery({ categoryId: inputs.categoryId });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Blade in TypeScript\nDESCRIPTION: Demonstrates creation of a website details blade using TypeScript decorators and HTML templates. The code shows how to define a blade class with initialization logic and template binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-architecture.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Decorator({\n    htmlTemplate: \"./WebsiteDetails.html\"\n})\nexport class WebsiteDetailsTemplateBlade {\n    public title = \"Website details\";\n    public subtitle: string;\n\n    public context: TemplateBlade.Context<void, WebsitesArea.DataContext>;\n\n    public onInitialize() {\n        return this._loadWebsiteDetails();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Item and Menu Group Interfaces for Azure Portal in TypeScript\nDESCRIPTION: Provides TypeScript interface declarations for menu items and menu groups within the Azure Portal Blade composition context. The code details shared attributes (such as id and displayText), menu item icon styling, enablement toggling, and the use of generics to allow selectable navigation via BladeReference types. Dependencies referenced include Knockout observables and FxComposition utility types. The principal expected input is menu structure definition with optional keywords and dynamic enablement, producing type-safe models for runtime configuration and extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"Fx/Composition/MenuBlade\" {\n    /**\n     * Attributes common to all items and groups in the menu.\n     */\n    interface MenuItemBase {\n        /**\n         * Gets the ID for the item.\n         */\n        id: string;\n        /**\n         * The display text for the item.\n         */\n        displayText: string;\n        /**\n         * A space-delimited list of keywords associated to the item.\n         */\n        keywords?: string | string[];\n    }\n\n    /**\n     * Defines an item in a group of the menu.\n     */\n    interface MenuItem extends MenuItemBase, FxComposition.Selectable2Options<FxComposition.BladeReference<any>> {\n        /**\n         * The icon associated to the menu item.\n         */\n        icon: FxBase.Image;\n        /**\n         * A value indicating whether or not the item is enabled.\n         */\n        enabled?: KnockoutObservableBase<boolean>;\n    }\n\n    /**\n     * Defines a group in the menu.\n     */\n    interface MenuGroup extends MenuItemBase {\n        /**\n         * The menu items in the group.\n         */\n        items: MenuItem[];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Microsoft.Solutions.BladeInvokeControl with Microsoft.Common.Selector in Azure Portal\nDESCRIPTION: Example of implementing BladeInvokeControl together with Common.Selector to allow users to open a disk size configuration blade. The control transforms data using JMES path queries and manages the open blade status based on selection changes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.BladeInvokeControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Solutions.BladeInvokeControl\",\n    \"name\": \"diskSize\",\n    \"transforms\": {\n        \"sku\": \"{\\\"diskSizeGB\\\": join(' ',[`Disk Size:`, @.to_string(diskSizeGB), `GiB`]), \\\"subText\\\": join(', ', [@.to_string(iops), join(' ', [@.to_string(throughput), `throughput`]), @.to_string(sku)])}\"\n    },\n    \"openBladeStatus\": \"[steps('step1').vmDisk.changing]\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 8\n    },\n    \"bladeReference\": {\n        \"name\": \"ChangeDiskSizeBlade\",\n        \"extension\": \"Microsoft_Azure_Compute\",\n        \"parameters\": {\n        \"location\": \"eastus\",\n        \"subscription\": \"[steps('step1').resourceScope.subscription.subscriptionId]\",\n        \"isUltraSsdEnabled\": false,\n        \"minimumDiskSize\": 1,\n        \"maximumDiskSize\": 30000,\n        \"diskConfiguration\": {\n            \"sku\": \"Premium_LRS\",\n            \"diskSizeGB\": 4,\n            \"iops\": 400,\n            \"throughput\": 4\n        }\n        },\n        \"inFullScreen\": false\n   }\n}\n\n{\n    \"type\": \"Microsoft.Common.Selector\",\n    \"name\": \"vmDisk\",\n    \"label\": \"Virtual Machine disk size\",\n    \"valueMapping\": [\n        {\n        \"value\": \"4\",\n        \"displayName\": \"4 GiB\"\n        },\n        {\n        \"value\": \"8\",\n        \"displayName\": \"8 GiB\"\n        },\n        {\n        \"value\": \"512\",\n        \"displayName\": \"512 GiB\"\n        }\n    ],\n    \"keyPath\": \"diskSizeGB\",\n    \"descriptionKeyPath\": \"subText\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 4,\n        \"subText\": 250\n    },\n    \"value\": \"[steps('step1').diskSize.transformed.sku]\",\n    \"visible\": \"[contains(resources().name, 'e')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Client Errors in Kusto\nDESCRIPTION: SQL query to retrieve recent extension client errors from the ExtEvents table in Kusto, filtering for error level events and excluding test traffic.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nExtEvents\n| where PreciseTimeStamp > ago(1h)\n    and eventLevel == 2 // indicates error (as oppossed to warning)\n    and not(IsTestTraffic(userTypeHint, requestUri)) // not test traffic\n| project PreciseTimeStamp, extension, area, code, message, error = parse_json(json)[0].error, json = parse_json(json)\n| take 10\n```\n\n----------------------------------------\n\nTITLE: Defining Static Properties for Essentials Panel - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to declare and push multiple static properties (open blade, text, link) into the Essentials panel using the Azure portal client APIs. Each property type uses appropriate constructors and associates its loading state with observables from the parent data context. Dependencies include Knockout.js and portal client frameworks. Key parameters are property labels, value observables, and loading flags; inputs are the resource model and resource state, and outputs are bound UI property cards in the panel. The structure supports both synchronous and asynchronous data sources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet engineView = this._engineView;\\nlet properties: MsPortalFx.ViewModels.Parts.Properties.Property[] = [];\\n\\n// Open blade property\\nproperties.push(new MsPortalFx.ViewModels.Parts.Properties.OpenBladeProperty({\\n    label: ClientResources.engineNamePropertyLabel,\\n    displayValue: ko.computed(lifetime, () => {\\n        return engineView.item() && engineView.item().name();\\n    }),\\n    bladeSelection: this._bladeSelection,\\n    isLoading: engineView.loading  // A loading indicator is shown while the Engine data is loading.\\n}));\\n\\n// Text property\\nproperties.push(new MsPortalFx.ViewModels.Parts.Properties.TextProperty({\\n    label: ClientResources.engineModelPropertyLabel,\\n    value: ko.computed(lifetime, () => {\\n        return engineView.item() && engineView.item().model();\\n    }),\\n    isLoading: engineView.loading  // A loading indicator is shown while the Engine data is loading.\\n}));\\n\\n// Link property\\nproperties.push(new MsPortalFx.ViewModels.Parts.Properties.LinkProperty({\\n    label: ClientResources.sponsorLinkPropertyLabel,\\n    value: ko.observable(ClientResources.microsoftUri),\\n    displayValue: ko.observable(ClientResources.microsoft),\\n    isLoading: ko.observable(false)  // The displayed value is a static string (not loaded asynchronously).\\n}));\\n\\nreturn <MsPortalFx.ViewModels.Parts.ResourceSummary.Options2>{\\n    getQuickStartSelection: getQuickStartSelection,\\n    getSettingsSelection: getAllSettingsSelection,\\n    getKeysSelection: getKeysSelection,\\n    collapsed: false,\\n    status: ...,\\n    staticProperties: properties\\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Blade Performance and Usage with Kusto\nDESCRIPTION: This Kusto query assesses the performance and usage for a specific Azure Portal blade over the past 14 days. It queries the `ClientTelemetry` table for completed `BladeFullReady` actions associated with the specified blade name, summarizing daily load counts, distinct users, and load duration percentiles (50th, 80th, 95th). The `name` filter needs to be updated with the target blade's full path.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where action == \"BladeFullReady\"\n| where actionModifier == \"complete\"\n| where name == \"Extension/HubsExtension/Blade/Resources\"\n| summarize Loads = count(), Users = dcount(userId, 4), percentiles(duration, 50, 80, 95) by bin(PreciseTimeStamp, 1d)\n```\n\n----------------------------------------\n\nTITLE: Applying Color Palette to Built-in SVG Icon in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to apply a predefined color palette to a built-in PortalFX icon (Delete icon). It passes an options object `{palette: MsPortalFx.Base.ImagePalette.Blue}` to the `MsPortalFx.Base.Images.Delete()` function call, changing the icon's default color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as CustomSvgImages from \"./SvgDefinitions.js\";\n...\nexport class DeleteCommandViewModel implements MsPortalFx.ViewModels.CommandContract {\n    public icon = ko.observable<MsPortalFx.Base.Image>();\n\n    constructor(dataContext: WebsitesDataContext) {\n        this.icon(MsPortalFx.Base.Images.Delete({palette: MsPortalFx.Base.ImagePalette.Blue}));\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Portal-FrameBlade Communication in JavaScript\nDESCRIPTION: Implements a message event listener that validates the origin of messages for security, verifies the message signature, and handles different message types including frametitle, framecontent, and getAuthTokenResponse. This ensures secure communication between the portal and the iframe.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", function(evt) {\n    // It is critical that we only allow trusted messages through. Any domain can send a\n    // message event and manipulate the html.\n    if (evt.origin.toLowerCase() !== trustedParentOrigin) {\n        return;\n    }\n\n    let msg = evt.data;\n\n    // Check that the signature of the message matches that of frame parts.\n    if (!msg || msg.signature !== frameSignature) {\n        return;\n    }\n\n    // Handle different message kinds.\n    if (msg.kind === \"frametitle\") {\n        makeViewPresentableToUser(msg);\n    } else if (msg.kind === \"framecontent\") {\n        document.getElementsByClassName(\"fxs-frame-content\")[0].innerText = msg.data;\n    } else if (msg.kind === \"getAuthTokenResponse\") {\n        document.getElementsByClassName(\"fxs-frame-token\")[0].innerText = \"Token: \" + msg.data;\n    } else {\n        console.warn(sessionId, \"Message not recognized.\", msg);\n    }\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Using saveEditScopeChanges Promise Pattern\nDESCRIPTION: Exemplifies how to handle the saveEditScopeChanges callback pattern when pushing EditScope edits to a server/backend. The callback returns a Promise that resolves when the save operation completes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsaveEditScopeChanges\n```\n\n----------------------------------------\n\nTITLE: Fetching Website Data in onInputsSet Method in TypeScript\nDESCRIPTION: This code demonstrates how to fetch website data when the blade's inputs change. It uses the _websiteEntityView to fetch data based on the currentItemId input.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change.\n */\npublic onInputsSet(inputs: Def.BrowseDetailViewModel.InputsContract): Promise<any> {\n    return this._websiteEntityView.fetch(inputs.currentItemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Automation Options Blade in TypeScript\nDESCRIPTION: Code to open the automation options blade reference from the provisioning context. This allows users to access template deployment options alongside the create button.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openBlade(provisioning.getAutomationBladeReference(this._supplyTemplateDeploymentOptions())\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen CapabilitiesViewType in Azure Portal\nDESCRIPTION: JSON configuration for implementing a full screen Capabilities view accessible from a resource menu. Includes setup for multiple capabilities like Backup, Disaster Recovery, Insights, and Security with status indicators and actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Capabilities\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Capabilities Example\",\n      \"capabilities\": [\n        {\n          \"title\": \"Backup\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n          \"description\": \"Simple and reliable server backup to the cloud\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[contains(resources().name, 'test')]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"true\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"false\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Disaster recovery\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n          \"description\": \"Replicate your virtual machine to another Azure region\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[not(contains(resources().name, 'test'))]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"true\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"false\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Insights\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n          \"description\": \"Enable logs and detailed monitoring capabilities\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[resources().properties.test]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"present\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"notPresent\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              },\n              {\n                \"value\": \"null\",\n                \"displayName\": \"Error\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n              },\n              {\n                \"value\": \"undefined\",\n                \"displayName\": \"Error\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Security\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n          \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n          \"action\": {\n            \"menu\": \"tags\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EntityCache for Single Website in TypeScript\nDESCRIPTION: Initializes an `EntityCache` instance named `websiteEntities` to manage individual `WebsiteModel` objects identified by a number ID. It uses `FxData.uriFormatter` to create the `sourceUri` for fetching a specific website by ID. It also configures `findCachedEntity` to attempt retrieving the entity from the `websitesQuery` (QueryCache) first, based on a matching ID, before fetching from the server, thus optimizing data retrieval and ensuring data consistency across views.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websiteEntities = new EntityCache<WebsiteModel, number>({\n    entityTypeName: WebsiteModelMetadata.name,\n\n    // uriFormatter() is a function that helps you fill in the parameters passed by the fetch()\n    // call into the URI used to query the backend. In this case websites are identified by a number\n    // which uriFormatter() will fill into the id spot of this URI. Again this particular endpoint\n    // requires the sessionId parameter as well but yours probably doesn't.\n    sourceUri: FxData.uriFormatter(MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/{id}\"), true),\n\n    // this property is how the EntityCache looks up a website from the QueryCache. This way we share the same\n    // data object across multiple views and make sure updates are reflected across all blades at the same time\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a TagsByResource Control in Azure Portal\nDESCRIPTION: Example of how to specify a TagsByResource control in the Azure Portal UI. This shows the basic structure with resource types that can be tagged.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"element1\",\n\"type\": \"Microsoft.Common.TagsByResource\",\n\"resources\": [\n  \"Microsoft.Storage/storageAccounts\",\n  \"Microsoft.Compute/virtualMachines\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy-Aware Subscription Dropdown Validation\nDESCRIPTION: This snippet demonstrates how to create a policy validation for a subscription dropdown that checks if the resource being created violates organization policies. It builds resource details and sets the validation scope at the subscription level.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a validation to place in the subscription dropdown\n// Policy checks will not be run until all required values are set\n// eslint-disable-next-line deprecation/deprecation\nconst subPolicyValidation = primaryEnginePolicyFactory?.createFieldValidation<FxSubscriptionDropDown.Subscription>({\n    // The buildResourceDetails functions passed in to this `policyFactory` instance with the `createFieldValidation`\n    // are run sequentially in order of creation to build the policy request\n    // Each function will receive the output of the previous buildResourceDetails function the latest validating value of their control\n    buildResourceDetails: (resourceDetails, val) => {\n        const subscription = val?.subscriptionId;\n        // scope is required\n        resourceDetails.scope = subscription && ArmId.stringify({ subscription, kind: ArmId.Kind.Subscription }, ArmId.Kind.Subscription);\n        return resourceDetails;\n    },\n}).validation;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom SVG in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to import a generated SVG definition (`SampleSvg`) and use it within the code. It assigns the custom SVG to an 'icon' property using `MsPortalFx.Base.Images.CustomImageWithOptions()`, passing the imported SVG module and potentially custom options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport * as SampleSvg from \"./../_generated/sample.svg\";\n...\nthis.icon(MsPortalFx.Base.Images.CustomImageWithOptions(SampleSvg, customImageOptions));\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Extensions in a Web Worker via URL Flags\nDESCRIPTION: This URL pattern illustrates how to configure specific Azure Portal extensions to load within a separate web worker thread for potentially improved performance. It requires the `feature.webworker` flag set to `true` and a list of extensions (`<extensionName1>`, `<extensionName2>`, etc.) associated with a specific web worker ID (`<webWorkerId>`). This functionality depends on the target extensions explicitly supporting web workers via the `supportsWebWorkers: \"true\"` setting in their `extensions.json` file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_8\n\nLANGUAGE: uri\nCODE:\n```\nhttps://portal.azure.com?extName=<webWorkerId>,<extensionName1>=true,<extensionName2>=true, <extensionName3>=true,feature.webworker=<value>\n```\n\n----------------------------------------\n\nTITLE: Initializing FrameBlade Component and Communicating Readiness - JavaScript\nDESCRIPTION: This snippet manages the initialization process of a FrameBlade component in an Azure Portal extension. It listens for incoming postMessages, updates UI elements based on messages (such as authentication tokens), reveals the view once initialized, and communicates state (e.g., 'ready', 'initializationcomplete') to the parent frame. Dependencies include the global Q promise library and a postMessageToParent function. It expects specific message contracts (e.g., 'revealcontent', 'getAuthToken') and updates DOM elements by class name. The process is asynchronous and assumes existence of relevant HTML elements and inter-frame communication protocols.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ---------------------------------------------------------------------------------------------\n// -------------------------------- Code to reveal view to user --------------------------------\n// ---------------------------------------------------------------------------------------------\n\nfunction makeViewPresentableToUser(msg) {\n    document.getElementsByClassName(\"fxs-frame-header\")[0].innerText = msg.data;\n    document.head.getElementsByTagName(\"title\")[0].innerText = msg.data;\n\n    // Post message 'revealcontent' to the parent to indicate that the part is now in a state to\n    // dismiss the opaque spinner and reveal content.\n    postMessageToParent(\"revealcontent\");\n\n    completeInitialization();\n}\n\n// ---------------------------------------------------------------------------------------------\n// ------------------------------ Code to complete initialization ------------------------------\n// ---------------------------------------------------------------------------------------------\n\nfunction completeInitialization() {\n    // Mimic an async operation that takes 2 seconds.\n    Q.delay(2000).then(() => {\n        // Post message the 'initializationcomplete' to the parent to indicate that the part is\n        // now ready for user interaction.\n        postMessageToParent(\"initializationcomplete\");\n    });\n}\n\n// Send a post message indicate that the frame is ready to start initialization.\npostMessageToParent(\"ready\");\n\n// This is an example of posting the 'getAuthToken' event to Portal.\npostMessageToParent(\"getAuthToken\");\n```\n\n----------------------------------------\n\nTITLE: Using Projected Array with Grid in TypeScript\nDESCRIPTION: Example of creating a projected array using mapInto() to transform robot data for display in a grid. The projection creates a RobotDetails object with a computed name property based on model and manufacturer.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis._view = dataContext.robotData.robotsQuery.createView(container);\n\n// As items are added or removed from the underlying items array,\n// individual changed items will be re-evaluated to create the computed\n// value in the resulting observable array.\nconst projectedItems = this._view.items.mapInto<RobotDetails>(container, (_ /* itemLifetime */, robot) => {\n    return <RobotDetails>{\n        name: robot.name,\n        computedName: ko.pureComputed(() => {\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n\nthis.grid = new Grid.ViewModel<RobotDetails, string>(\n    container,\n    projectedItems,\n    Grid.Extensions.SelectableRow);\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Load Performance in Kusto\nDESCRIPTION: This Kusto query retrieves extension loading performance data from the 'Framework' database for the last hour. It uses the 'ExtensionPerformance' function and returns details like extension name, load counts, 50th/80th/95th percentile load times ('ExtensionLoad' action), hosting service load counts, and whether the extension predominantly uses the hosting service.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: Kusto\nCODE:\n```\ndatabase('Framework').ExtensionPerformance(ago(1h), now())\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandBar in ViewModel\nDESCRIPTION: This JavaScript code demonstrates how to instantiate and configure the CommandBar in the ViewModel. It includes setting up a button with a label and icon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport Def = ExtensionDefinition.ViewModels.Resource.MyTemplateBladeViewModel;\n\nexport class MyTemplateBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    public id: KnockoutObservable<string>;\n    public infoBox: MsPortalFx.ViewModels.Controls.InfoBox.BaseViewModel;\n\n    // toolbar view-model\n    public commandBar: MsPortalFx.ViewModels.Toolbars.ToolbarContract;\n\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: any) {\n        super();\n        this.title(\"InfoBox\");\n        this.subtitle(\"InfoBox Playground\");\n\n        this.infoBox = new MsPortalFx.ViewModels.Controls.InfoBox.LinkViewModel(container, {\n            text: ko.observable<string>('Go to the Azure Portal'),\n            image: ko.observable(MsPortalFx.Base.Images.Info()),\n            clickableLink: ko.observable(MsPortalFx.ViewModels.Part.createClickableLinkViewModel(ko.observable<string>('https://portal.azure.com'))\n        });\n\n        // initialize the toolbar\n        var button = new Toolbars.OpenLinkButton(\"https://azure.com\");\n        button.label(\"azure.com\");\n        button.icon(MsPortalFx.Base.Images.Hyperlink());\n        this.commandBar = new Toolbars.Toolbar(container);\n        this.commandBar.setItems( [ button ] );\n    }\n\n    public onInputsSet(inputs: Def.InputsContract): Promise<any> {\n        return Promise.resolve();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Refresh Command for Azure Portal View Models\nDESCRIPTION: Example of a command implementation in a Blade/Part view model that allows users to manually trigger a refresh of an EntityView. The command is enabled only when the view is not already loading data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nclass RefreshCommand implements MsPortalFx.ViewModels.Commands.Command<void> {\n    private _websiteView: MsPortalFx.Data.EntityView<Website>;\n\n    public canExecute: KnockoutObservableBase<boolean>;\n\n    constructor(websiteView: MsPortalFx.Data.EntityView<Website>) {\n        this.canExecute = ko.computed(() => {\n            return !websiteView.loading();\n        });\n\n        this._websiteView = websiteView;\n    }\n\n    public execute(): Promise<any> {\n        return this._websiteView.refresh();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Claims from HttpContext in C#\nDESCRIPTION: Demonstrates how to access user identity information within an ASP.NET application integrated with the Azure Portal. It involves casting the `HttpContext.User.Identity` to `IPortalIdentity` and `IAadIdentity` interfaces (from `Microsoft.Portal.Framework` and `Microsoft.WindowsAzure.Management.AadAuthentication` namespaces respectively) to retrieve common claims like EmailAddress, TenantId, ObjectId, PrincipalId, and IsOrgId. Requires referencing `Microsoft.Portal.AadCore.dll`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n// use IPortalIdentity for email and tenant id\n// NOTE: Do not rely on IPortalIdentity.FirstName and LastName properties; they aren't consistenty populated\nvar portalUser = HttpContext.User.Identity as Microsoft.Portal.Framework.IPortalIdentity;\n// portalUser.EmailAddress;\n// portalUser.TenantId;\n\n// use IAadIdentity (implements IPortalIdentity) for user id\n// and to determine if the user is an MSA or AAD account\nvar aadUser = portalUser as Microsoft.WindowsAzure.Management.AadAuthentication.IAadIdentity;\nif (aadUser != null)\n{\n    // aadUser.ObjectId;\n    // aadUser.PrincipalId;\n    // aadUser.IsOrgId\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form ViewModel with Edit Scope in TypeScript\nDESCRIPTION: This snippet shows how to create a Form.ViewModel and assign it an edit scope reference for data binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-construction.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis._form = new Form.ViewModel<WebsiteModel>(this._ltm);\nthis._form.editScope = this._editScopeView.editScope;\n```\n\n----------------------------------------\n\nTITLE: Menu Blade Methods in TypeScript\nDESCRIPTION: This code block shows the available methods for opening blades within a menu context, including switching menu items and opening blades synchronously and asynchronously.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* This method causes the menu blade to navigate to a different item\n*\n* @param id Identifier of the item to navigate too\n*/\nswitchItem(id: string): void;\n\n/**\n* Opens a child Blade in place.\n*\n* @param bladeToOpen A BladeReference describing the Blade to be opened.\n*/\nopenBlade(bladeToOpen: BladeReference): Promise<boolean>;\n\n/**\n* Opens a child Blade asynchronously in place. While the Blade to be shown is being determined (via 'bladeReferencePromise') a loading\n* indicator will be displayed on the new child Blade.\n*\n* @param promiseToDetermineBladeToOpen A Promise that will be resolved with a BladeReference describing the Blade to be opened.\n*/\nopenBladeAsync(promiseToDetermineBladeToOpen: Promise<BladeReference>): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Adding Provisioning Decorator to Blade Class in Azure Portal Extension (TypeScript)\nDESCRIPTION: This TypeScript snippet applies the provisioning decorator to a Blade class within a portal extension using the TemplateBlade.DoesProvisioning.Decorator, which enables provisioning capabilities on the blade. The optional supportsPostProvisioning parameter allows for post-provisioning customization. Dependency: The decorator comes from the TemplateBlade framework. Use it by applying to a class definition; its primary effect is at runtime to bind provisioning data and behaviors to the context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.DoesProvisioning.Decorator({ supportsPostProvisioning: true })\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Editable Azure Portal Grid with Validation (JSON)\nDESCRIPTION: This JSON snippet configures a `Microsoft.Common.Grid` control named `fooGrid` for managing arbitrary items (\"Foo's\") within the Azure Portal UI. It supports adding and editing rows using a specified blade (`FormWithOutputs_Dx` from `tsextension`), defines columns with different input types (readonly text, options group, text box), sets default values, enforces row count limits (1-10), and includes custom validation logic based on item state and note content using Azure Portal functions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Grid.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Grid\",\n    \"name\": \"fooGrid\",\n    \"label\": {\n        \"summary\": \"Attached Foo's\",\n        \"addition\": \"Add Foo\",\n        \"delete\": \"Delete\",\n        \"ariaLabel\": \"Grid for providing Foo information\"\n    },\n    \"addBlade\": {\n        \"name\": \"FormWithOutputs_Dx\",\n        \"extension\": \"tsextension\",\n        \"parameters\": {\n            \"title\": \"Add Foo\"\n        },\n        \"outputItem\": \"output\",\n        \"inContextPane\": true\n    },\n    \"editBlade\": {\n        \"name\": \"FormWithOutputs_Dx\",\n        \"extension\": \"tsextension\",\n        \"parameters\": {\n            \"name\": \"[$item.name]\",\n            \"region\": \"[$item.region]\",\n            \"title\": \"Edit Foo\"\n        },\n        \"outputItem\": \"output\",\n        \"inContextPane\": true\n    },\n    \"defaultValue\": [\n        {\n            \"name\": \"resource1\",\n            \"region\": \"East US\",\n            \"state\": \"on\",\n            \"note\": \"Lorem ipsum\"\n        }\n    ],\n    \"constraints\": {\n        \"width\": \"Full\",\n        \"canEditRows\": true,\n        \"validations\": [\n            {\n                \"isValid\": \"[lessOrEquals(length(filter(steps('grid').fooGrid, (element) => equals(element.state, 'on'))), 2)]\",\n                \"message\": \"A maximum of 2 Foo's may be set to 'On'\"\n            }\n        ],\n        \"rows\": {\n            \"count\": {\n                \"min\": 1,\n                \"max\": 10\n            }\n        },\n        \"columns\": [\n            {\n                \"id\": \"name\",\n                \"header\": \"Name\",\n                \"width\": \"1fr\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.name]\"\n            },\n            {\n                \"id\": \"region\",\n                \"header\": \"Region\",\n                \"width\": \"1fr\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.region]\"\n            },\n            {\n                \"id\": \"state\",\n                \"header\": \"State\",\n                \"width\": \"1fr\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.OptionsGroup\",\n                    \"defaultValue\": \"On\",\n                    \"constraints\": {\n                        \"allowedValues\": [\n                            {\n                                \"label\": \"On\",\n                                \"value\": \"on\"\n                            },\n                            {\n                                \"label\": \"Off\",\n                                \"value\": \"off\"\n                            }\n                        ],\n                        \"required\": true\n                    }\n                }\n            },\n            {\n                \"id\": \"note\",\n                \"header\": \"Note\",\n                \"width\": \"2fr\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.TextBox\",\n                    \"placeholder\": \"Jot something down\",\n                    \"constraints\": {\n                        \"required\": true,\n                        \"validations\": [\n                            {\n                                \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n                                \"message\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n                            },\n                            {\n                                \"isValid\": \"[or(contains($item.note, 'e'), contains($item.note, 'E'))]\",\n                                \"message\": \"Use the letter 'e' in your note, please.\"\n                            }\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceScope Control with All Customizations in JSON\nDESCRIPTION: An advanced implementation of the Microsoft.Common.ResourceScope control with all possible customizations. This snippet demonstrates how to configure subscription constraints, resource group settings, resource name validations, and location restrictions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceScope.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"resourceScope\",\n  \"type\": \"Microsoft.Common.ResourceScope\",\n  \"instanceDetailsLabel\": \"Cloud Service Details\",\n  \"subscription\": {\n     \"constraints\": {\n        \"validations\": [\n           {\n             \"isValid\": \"[equals(1,1)]\",\n             \"message\": \"invalid subscription selection\"\n           },\n           {\n             \"permission\": \"Microsoft.Network/applicationGateways/read\",\n             \"message\": \"User does not have permission on this Subscription\"\n           }\n        ]\n      },\n      \"resourceProviders\": [\n         \"Microsoft.Compute\"\n      ]\n  },\n  \"resourceGroup\": {\n     \"constraints\": {\n        \"validations\": [\n           {\n              \"isValid\": \"[equals(1,1)]\",\n              \"message\": \"invalid resource group selection\"\n           }\n        ]\n     },\n     \"allowExisting\": true\n  },\n  \"resourceName\": {\n     \"label\": \"Name\",\n     \"toolTip\": \"Use only allowed characters\",\n     \"constraints\": {\n        \"validations\": [\n           {\n              \"isValid\": \"[equals(1,1)]\",\n              \"message\": \"invalid resource group selection\"\n           },\n           {\n              \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n              \"validationMessage\": \"invalid resource name\"\n           }\n        ]\n     }\n  },\n  \"location\": {\n     \"label\": \"Name\",\n     \"toolTip\": \"Use only allowed characters\",\n     \"resourceTypes\": [\n        \"Microsoft.Compute/virtualMachines\"\n     ],\n     \"allowedValues\": [\n        \"eastus\",\n        \"westus2\"\n     ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TextBox with Multiple Validation Constraints (JSON)\nDESCRIPTION: This JSON snippet configures a `Microsoft.Common.TextBox` named `nameInstance` for an Azure Create UI Definition. It sets a default value, tooltip, and enforces multiple validation constraints: one using regex (`^[a-z0-9A-Z]{1,30}$`) for alphanumeric characters (1-30 length), and another using the `startsWith` function (referencing `steps('resourceConfig').nameInstance`) to ensure the input begins with 'contoso'. The control is marked as visible.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBox.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"nameInstance\",\n  \"type\": \"Microsoft.Common.TextBox\",\n  \"label\": \"Name\",\n  \"defaultValue\": \"contoso123\",\n  \"toolTip\": \"Use only allowed characters\",\n  \"placeholder\": \"\",\n  \"multiLine\": false,\n  \"constraints\": {\n    \"required\": true,\n    \"validations\": [\n      {\n        \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n        \"message\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n      },\n      {\n        \"isValid\": \"[startsWith(steps('resourceConfig').nameInstance, 'contoso')]\",\n        \"message\": \"Must start with 'contoso'.\"\n      }\n    ]\n  },\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse Component in JSON for Azure Portal\nDESCRIPTION: This JSON snippet defines a DataBrowse component configuration for the Azure Portal. It specifies the kind, display name, aria label, and data transformations for browsing OS disk properties from Azure resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-databrowseViewType-data-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"testing\",\n    \"data\": {\n        \"transforms\": \"[concat('[', '@.{caching:caching, createOption: createOption, name: name, osType:osType, managedDisk:managedDisk.to_string(@)}', ']')]\",\n        \"input\": \"[resources().properties.storageProfile.osDisk]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EditScopeCache for Data Management in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an EditScopeCache object with supplyExistingData and saveEditScopeChanges functions for handling data loading and saving via ajax calls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-construction.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst editScopeCache = EditScopeCache.createNew<WebsiteModel, number>({\n    supplyExistingData: (websiteId) => {\n        return FxBaseNet.ajax<any>({\n            uri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/\" + websiteId), // this particular endpoint requires sessionId to be in query string\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\",\n        }).then((data) => {\n            // after you get the data from the ajax query you can do whatever transforms\n            // you want in it to turn it into the model type you've defined\n            return {\n                id: data.id,\n                name: data.name,\n                running: data.running,\n            };\n        });\n    },\n    saveEditScopeChanges: (websiteId, editScope) => {\n        // get the website from the edit scope\n        const website = editScope.root;\n\n        // if you need to do conversion on the data before posting to server you can do that\n        // all we need to do here is turn the knockout object into json\n        const serializableWebsite = ko.toJSON(website);\n\n        this._saving(true);\n        return FxBaseNet.ajaxExtended({\n            uri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/\" + websiteId),\n            type: \"POST\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\",\n            data: serializableWebsite,\n        }).then(() => {\n            // Instruct the EditScope to accept the user-authored, client-side changes as the new state of the\n            // EditScope after the 'saveChanges' has completed successfully.\n            // ('AcceptClientChanges' is the default behavior.  This promise could also be resolved with 'null' or 'undefined'.)\n            return {\n                action: Data.AcceptEditScopeChangesAction.AcceptClientChanges,\n            };\n        }).finally(() => {\n            this._saving(false);\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Grid ViewModel with QueryCache View Items in TypeScript\nDESCRIPTION: Shows the instantiation of an Azure Portal Grid ViewModel (`Grid.ViewModel`). The key aspect is passing the observable `items` array from a `QueryCache` view (`this._websitesQueryView.items`) as the `items` parameter to the grid's constructor. This establishes a data binding, ensuring the grid automatically updates when the underlying cache data changes after a `fetch` operation. Dependencies include the `Grid.ViewModel` class, a lifetime manager (`this._lifetime`), and the `QueryCache` view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.grid = new Grid.ViewModel<WebsiteModel, number>(this._lifetime, this._websitesQueryView.items, extensions, extensionsOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment onSubmit for Custom Blade Sequence in Azure Portal\nDESCRIPTION: This JSON snippet shows how to configure the deployment.onSubmit property to open a sequence of custom blades as context blades when the user clicks 'submit' to start deployment. It includes conditions, input, output, and transforms for updating deployment parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"deployment\": {\n    \"kind\": \"ResourceGroup\",\n    \"resourceGroupId\": \"[steps('basics').resourceGroup.value.resourceId]\",\n    \"location\": \"[if(equals('New', steps('basics').resourceGroup.modeName), steps('basics').location.name, steps('basics').resourceGroup.value.location)]\",\n    \"onSubmit\": [\n        {\n            \"condition\": \"[equals(length(parameters('msAppId')), 0)]\",\n            \"blade\": {\n                \"name\": \"ConvergedAppRegisterBlade\",\n                \"inContextPane\": true,\n                \"parameters\": {\n                    \"name\": \"[steps('basics').resourceName]\",\n                    \"hideButton\": true\n                },\n                \"outputItem\": \"app\",\n                \"transforms\": {\n                    \"parameters\": \"{msAppId:appId,msAppPassword:appPassword}\"\n                }\n            }\n        }\n    ],\n    \"parameters\": {\n        \"botId\": \"[steps('basics').resourceName]\",\n        \"sku\": \"[steps('basics').botSku]\",\n        \"msAppId\": \"[coalesce(steps('basics').existingApp.botAppId, '')]\",\n        \"msAppPassword\": \"[coalesce(steps('basics').existingApp.botAppPassword, '')]\"\n    },\n    \"template\": {\n        \"file\": \"./createWithComposer.json\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Failed Creates Excluding Marketplace Initiations\nDESCRIPTION: This query fetches failed create operations for a specific extension and blade, excluding those initiated via the Marketplace.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_5\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate=ago(8d),\n    endDate=ago(1d),\n    match_Extention=\"WebsitesExtension\",\n    match_Blade=\"AppServiceWebAppCreateV3Blade\",\n    exclude_NonMarketplace=false\n)\n```\n\n----------------------------------------\n\nTITLE: Defining API Request with Transform in Azure Portal JSON\nDESCRIPTION: This snippet shows how to define an API request with a transform using JMESPath expression. It transforms the response into a format suitable for dropdown controls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-function-transforms.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"path\": \"[steps('botAppId').lookupApp.computeLookupUrl]\",\n        \"transforms\": {\n            \"list\": \"value|[*].{label:displayName, value:appId, description:appId}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch API Interface Definition in TypeScript\nDESCRIPTION: This snippet defines the Batch API interface, including the batch() function signature, BatchSettings interface, RequestOptions enum, and BatchResponseItem interface. It details the available options and limitations of the Batch API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-ajax-batch.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calls the API by batching multiple requests together.\n * Use this API if you have a single AJAX request but there is potential for batching this\n * with other requests.\n *\n * There are a few limitations when using this:\n *   - All requests must have absolute URIs\n *   - The max number of requests in a batch call is 20\n *   - Supports tenant level operations (/subscriptions, /resources, /locations, /providers, /tenants)\n *   - Allowed methods are - GET, POST, DELETE, HEAD without a request body\n *\n * @param settings The settings to use to call batch.\n * @return A promise for the batch call.\n */\nexport function batch<T>(settings: BatchSettings, serverAuthority?: string): Promise<BatchResponseItem<T>>\n\n/**\n * The request options.\n */\nexport const enum RequestOptions {\n    /**\n     * Default behavior.\n     *    - Defaults to foreground request\n     *    - Calls are batched to ARM every 100 ms\n     *    - Any ServerTimeout (503) failures for foreground GET requests\n     *      are automatically retried by calling the API directly wihtout batch\n     *    - Responses are not cached\n     */\n    None = 0,\n\n    /**\n     * Make the batch call on the next tick.\n     * DebounceNextTick takes precedence over Debounce100Ms.\n     */\n    DebounceNextTick = 1,\n\n    /**\n     * Include the request in a batch call that is made after a 100ms delay.\n     * Debounce100Ms takes precedence over DebounceOneMinute\n     */\n    Debounce100ms = 2, // DebounceNextTick << 1,\n\n    /**\n     * Sets this request to run in the background.\n     * Background requests are batched every 60 seconds.\n     */\n    DebounceOneMinute = 4, // Debounce100ms << 1,\n\n    /**\n     * Forces a retry for any failure returned (statusCode >= 400) regardless of the HTTP method.\n     */\n    RetryForce = 8, // DebounceOneMinute << 1,\n\n    /**\n     * Skips the default retry.\n     * SkipRetry takes precedence over ForceRetry if both are set.\n     */\n    RetrySkip = 16, // RetryForce << 1,\n\n    /**\n     * Caches the response for GET requests for 10 seconds.\n     */\n    ResponseCacheEnabled = 32, // RetrySkip << 1,\n\n    /**\n     * Skips caching the response for GET requests.\n     */\n    ResponseCacheSkip = 64, // ResponseCacheEnabled << 1,\n}\n\n/**\n * The settings for the batch call.\n */\nexport interface BatchSettings {\n    /**\n     * The request options.\n     */\n    options?: RequestOptions;\n\n    /**\n     * The telemetry header to set.\n     */\n    setTelemetryHeader?: string;\n\n    /**\n     * The http method to use. Defaults to GET.\n     */\n    type?: string;\n\n    /**\n     * The URI to call.\n     */\n    uri: string;\n}\n\nexport interface BatchResponseItem<T> {\n    /**\n    * The response content. Can be success or failure.\n    */\n    content: T;\n\n    /**\n    * The response headers.\n    */\n    headers: StringMap<string>;\n\n    /**\n    * The response status code.\n    */\n    httpStatusCode: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Getting Started Tab in Azure Portal\nDESCRIPTION: JSON configuration for implementing a Getting Started tab with multiple features including title, description, learn more links, and interactive cards. The snippet demonstrates how to set up menu actions, blade navigation, and external URL links with associated icons and display properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-GetStartedTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"GetStarted\",\n    \"title\": {\n        \"property\": \"tab1Title\"\n    },\n    \"description\": {\n        \"property\": \"tab1Description\"\n    },\n    \"learnMore\": {\n        \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n        \"ariaLabel\": \"Learn more about Azure Portal\"\n    },\n    \"features\": [\n        {\n            \"title\": {\n                \"property\": \"tab1feature1Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature1Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"menu\": \"tags\",\n                \"displayName\": {\n                    \"property\": \"tab1feature1actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature2Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature2Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                },\n                \"displayName\": {\n                    \"property\": \"tab1feature2actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature3Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature3Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/msi.svg\"\n            },\n            \"action\": {\n                \"url\": \"https://www.azure.com\",\n                \"displayName\": {\n                    \"property\": \"tab1feature3actionDisplayName\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blade Parameters and Properties in PDL\nDESCRIPTION: Demonstrates how to define blade parameters and properties in PDL markup, showing parameter declaration and property binding from blade parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"RobotBlade\" ViewModel=\"RobotBladeViewModel\">\n  <Blade.Parameters>\n    <Parameter Name=\"id\" Type=\"Key\"/>\n  </Blade.Parameters>\n\n  <Blade.Properties>\n    <Property Name=\"name\" Source=\"{BladeParameter Name=id}\"/>\n  </Blade.Properties>\n  ...\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Accessing Graph API in Azure Portal Extension\nDESCRIPTION: Demonstrates how to make authenticated calls to Graph API from an Azure Portal extension using ajax and token authorization. Includes examples of direct token retrieval, ajax calls with authorization headers, and file download implementations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ajax, getEndpoints } from \"Fx/Ajax\";\n\nMsPortalFx.Base.Security.getAuthorizationToken({ resourceName: \"graph\" });\n\najax({\n    setAuthorizationHeader: { resourceName: \"graph\" },\n    uri: getEndpoints().graph + \"/endpoint\",\n});\n\nnew MsPortalFx.ViewModels.Controls.FileDownload.ViewModel(\n    container,\n    {\n        context: ko.observable(new FileDownload.Context({\n            ...\n            addDefaultAuthorizationToken: {\n                resourceName: \"graph\",\n            },\n            ...\n        })),\n    });\n\nnew MsPortalFx.ViewModels.FileDownloadCommand({\n    authorizationOptions: {\n        resourceName: \"graph\",\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ArmCommand for Resource Actions in Azure Portal\nDESCRIPTION: This snippet demonstrates how to implement ArmCommand for various resource actions like schema retrieval, start, and restart in Azure Portal. It includes examples of command definitions with different icons, confirmation dialogs, and conditional disabling based on resource state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewArmCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"command1\",\n    \"displayName\": \"schemaCommand\",\n    \"icon\": \"MsPortalFx.Base.Images.Delete\",\n    \"confirmation\": {\n        \"title\": \"schemaConfirmationTitle\",\n        \"message\": \"schemaConfirmationMessage\"\n    },\n    \"definition\": {\n        \"httpMethod\": \"post\",\n        \"uri\": \"{resourceid}/schema?api-version=2020-03-01-preview\"\n    },\n\"disabled\": false\n},\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"startButtonID\",\n    \"displayName\": \"start\",\n    \"icon\": \"MsPortalFx.Base.Images.Start\",\n    \"disabled\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n    \"definition\": {\n    \"httpMethod\": \"post\",\n    \"uri\": \"{resourceid}/start?api-version=2020-12-01\"\n    }\n},\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"restartButtonID\",\n    \"displayName\": \"restart\",\n    \"icon\": \"MsPortalFx.Base.Images.Redo\",\n    \"disabled\": \"[contains(resources('vmInstanceView').properties.instanceView.statuses.1.code, '/deallocated')]\",\n    \"definition\": {\n    \"httpMethod\": \"post\",\n    \"uri\": \"{resourceid}/restart?api-version=2020-12-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource Filter for Subscription-aware Blades - TypeScript\nDESCRIPTION: This snippet illustrates instantiating the ResourceFilter.ViewModel for a blade's viewmodel in the Azure portal, enabling UI filtering across subscriptions. It configures the filter's behavior using Knockout.js observables, such as toggling text filtering, subscription filtering, summaries, and specifying a custom search placeholder. Dependencies include MsPortalFx.Azure.ResourceFilter.ViewModel, Knockout observables, and a container context. Inputs are the container and configuration; output is a ResourceFilter instance bound to the blade UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-subscriptions.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n  this.resourceFilter = new MsPortalFx.Azure.ResourceFilter.ViewModel(this._container, {\n        actionHandler: this.gridViewModel,\n        showTextFilter: ko_observable(true),\n        showSubscriptionFilter: ko_observable(true),\n        showSubscriptionSummary: ko_observable(false),\n        showTenantLevelSubscriptionSummary: ko_observable(false),\n        textFilterPlaceholder: ko_observable<string>(\"Search here\")\n  });\n```\n\n----------------------------------------\n\nTITLE: Publishing and Updating Pending Notifications with Notifications v4 API in TypeScript\nDESCRIPTION: Demonstrates how to create an updatable notification using `publishPendingNotification` from `Fx/Notification`. This is useful for long-running operations. The function takes initial properties like `title`, `description`, `percentComplete`, and `linkTo`. The returned object provides `update` and `complete` methods to modify the notification's state (e.g., `percentComplete`, `status`) after initial publication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { CompletedStatus, publishPendingNotification } from \"Fx/Notification\";\nvar notification = publishPendingNotification({\n    title: clientStrings.myEventLabel,\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    percentComplete: percentComplete,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n\n// To update the notification, use the \"update\" method available on the returned notification object. \"title\", \"description\", \"percentComplete\", and \"linkTo\" can all be updated here.\nnotification.update({\n        percentComplete: percentComplete,\n});\n\n// To update the notification for the last time, use the \"complete\" method available on the returned notification object, where you can define your choice of status. \"title\", \"description\", \"percentComplete\", and \"linkTo\" can all be updated here.\nnotification.update({\n        status: CompletedStatus.Success,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming REST API Response with JMESPath Expression - JSON\nDESCRIPTION: This snippet applies a JMESPath transformation to the response of a GET request, shaping the data into an array with label, value, and description properties for use in portal controls. The list transform uses a JMESPath expression to restructure an incoming JSON array, mapping displayName and appId fields to the control's required format. Requires understanding of JMESPath syntax and appropriate REST endpoint configuration. The input is a REST API result, outputting a customized structure for further processing or display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"GET\",\n        \"path\": \"[steps('botAppId').lookupApp.computeLookupUrl]\",\n        \"transforms\": {\n            \"list\": \"value|[*].{label:displayName, value:appId, description:appId}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryCache for Website Data in TypeScript\nDESCRIPTION: This snippet shows how to create and configure a QueryCache instance for querying website data. It sets up the cache with a source URI, entity type, and polling options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebsiteQuery {\n    runningStatus: boolean;\n}\n\npublic websitesQuery = new MsPortalFx.Data.QueryCache<DataModels.WebsiteModel, WebsiteQuery>({\n    entityTypeName: DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites?runningStatus={0}\"),\n    poll: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.ServicePrincipalSelector Control in Azure Portal Solutions\nDESCRIPTION: A sample configuration for the Microsoft.Common.ServicePrincipalSelector control which allows users to select existing service principals or create new applications in Azure. The snippet demonstrates proper configuration including labels, tooltips, and constraints for password validation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"servicePrincipal\",\n  \"type\": \"Microsoft.Common.ServicePrincipalSelector\",\n  \"label\": {\n    \"password\": \"Password\",\n    \"certificateThumbprint\": \"Certificate thumbprint\",\n    \"authenticationType\": \"Authentication Type\",\n    \"sectionHeader\": \"Service Principal\"\n  },\n  \"toolTip\": {\n    \"password\": \"Password for the service principal.\",\n    \"certificateThumbprint\": \"Certificate thumbprint for the certificate associated with the service principal.\",\n    \"authenticationType\": \"Choose authentication type for the service principal.\"\n  },\n  \"defaultValue\": {\n    \"principalId\": \"<default guid>\",\n    \"name\": \"(New) default application\"\n  },\n  \"constraints\": {\n    \"required\": true,\n    \"regex\": \"^[a-zA-Z0-9]{8,}$\",\n    \"validationMessage\": \"Password must be at least 8 characters long and contain only alphanumeric characters.\"\n  },\n  \"options\": {\n    \"hideCertificate\": false\n  },\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Resource Menu Blade with Custom Notification in TypeScript\nDESCRIPTION: Shows how to open a resource menu blade with a custom notification. Creates references for a custom control blade with notification parameter and passes it to the menu blade reference.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onResourceMenuButtonWithNotificationClick() {\n    //bladeReference#resourceMenuBladeWithOverride\n    const resourceId = \"/subscriptions/sub123/resourcegroups/servertest/providers/Microsoft.test/virtualservers/web1\";\n\n    // create a reference with the custom notification we want to pass to the control blade\n    const controlBladeReference = BladeReferences.forBlade(\"VirtualServerControlBlade\").createReference({ parameters: { id: resourceId, showNotification: \"true\" } });\n\n    // create a reference for the resource menu blade with our custom control blade reference\n    const menuBladeReference = BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"control\", controlBladeReference).createReference({ parameters: { id: resourceId } });\n\n    // when the resource menu blade is opened -\n    // 1. the 'control' menu item will be selected\n    // 2. the 'VirtualServerControlBlade' will be opened as the menu blade content\n    void this._container.openBlade(menuBladeReference);\n    //bladeReference#resourceMenuBladeWithOverride\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handlers in TypeScript View Model\nDESCRIPTION: This TypeScript class demonstrates different ways to implement click handlers in a view model, including function declarations, arrow functions, and constructor-based functions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-this.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Example view model for a custom part\n */\nexport class ExampleCustomPartViewModel {\n    /**\n     * Constructs an instance of the custom part view model.\n     */\n    constructor(container: MsPortalFx.ViewModels.PartContainerContract, initialState: any, dataContext: PartsArea.DataContext) {\n        let that = this;\n        this.buttonClickHandler4 = function() {\n            this.clicked(this.clicked() + 1);\n            that.totalClicked(that.totalClicked() + 1);\n        };\n    }\n\n    public myButtons = ko.observableArray([\n        {\n            displayName: ko.observable(\"First button\"),\n            clicked: ko.observable(0)\n        },\n        {\n            displayName: ko.observable(\"Second button\"),\n            clicked: ko.observable(0)\n        }\n    ]);\n\n    public totalClicked = ko.observable(0);\n\n    public buttonClickHandler = function () {\n        this.clicked(this.clicked() + 1);\n    };\n\n    public buttonClickHandler2() {\n        this.clicked(this.clicked() + 1);\n    };\n\n    public buttonClickHandler3 = () => {\n        this.totalClicked(this.totalClicked() + 1);\n    };\n    \n    public buttonClickHandler4: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Data Refresh Implementation\nDESCRIPTION: Example of implementing explicit data refresh after updating server data through an AJAX call.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic updateRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot + robot.name(),\n        type: \"PUT\",\n        contentType: \"application/json\",\n        data: ko.toJSON(robot),\n    }).then(() => {\n        // This will refresh the set of data that is available in the underlying data cache.\n        this.robotsQuery.refreshAll();\n    });\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selector for Element Selection\nDESCRIPTION: Demonstrates using CSS selectors instead of XPath for more reliable element selection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\ngrid.FindElements(By.CssSelector(\"[aria-selected=true]\"))\n```\n\n----------------------------------------\n\nTITLE: Validating Migrated View Models in TypeScript\nDESCRIPTION: This TypeScript code snippet can be added to Program.ts to validate the correct migration of V1 view models. It uses the DependencyInjection module to create a container and validate each view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-dependency-injection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.require(\"Fx/DependencyInjection\")\n    .then((di: any) => {\n        const container: any = di.createContainer(\"viewModel\");\n        (function (array: any[]) {\n            array.forEach(a => {\n                if (a.module) {\n                    MsPortalFx.require(a.module)\n                        .then((m: any) => {\n                            console.log(\"Loading view model: \" + a.module + \" \" + a.export);\n                            const exportedType = m[a.export];\n                            if (exportedType.ViewModelAdapter) {\n                                // Can't validate V2 view models\n                            }\n                            else {\n                                container._validate(new (<any>window).Map(), exportedType, true);\n                            }\n                        });\n                }\n            });\n        })([/* insert view model json from build log here */ ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking RPC Callback with MsPortalFx.Services.Rpc - TypeScript\nDESCRIPTION: Demonstrates calling a registered RPC callback from an Azure Portal extension using MsPortalFx.Services.Rpc.invokeCallback. The function invokes the \\\"StringUpperCaseCallback\\\" on a specified extension, passing a time string argument, and handles the asynchronous response or error. Dependencies include the MsPortalFx.Services.Rpc library, relevant extension and resource identifiers, and UI reset logic. Required parameters are the target extension's name, callback name, and argument value; the output is a callback result or error string, processed for the UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-rpc.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Invokes an RPC callback.\n */\npublic invokeCallback() {\n    var extensionId = ExtensionDefinition.definitionName,\n        callbackName = \"StringUpperCaseCallback\",\n        arg = (new Date()).toTimeString();\n\n    // Reset UI\n    this.result(ClientResources.rpcResultPending);\n\n    // Make the RPC call.\n    // Note: For convenience, this source/destination extensions are the same\n    // for this example. In practice, that will not be so, but the syntax/behavior\n    // is otherwise the same.\n    MsPortalFx.Services.Rpc.invokeCallback<string>(extensionId, callbackName, arg)\n    \t.then(\n        (result) => {\n            this.result(result);\n        },\n        (rpcError) => {\n            this.result(ClientResources.rpcResultErrorFormatString.format(\n            \t\trpcError.error.toString(),\n            \t\trpcError.isClientError\n            \t)\n           \t);\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Using subscribe() for Data Projection\nDESCRIPTION: Example of an anti-pattern where subscribe() is used instead of map() for data projection. This approach creates entirely new arrays and objects on every change and doesn't react to changes in the source observables.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// DO NOT DO THIS!\nthis._view.items.subscribe((items) => {\n    var mappedItems: MappedPerson[] = [];\n    for (var i = 0; i < items.length; i++) {\n        // create a new mapped person for every item\n        mappedItems.push({\n            name: items[i].name,\n            model: robot.model()\n        });\n    }\n\n    this.selectableGridViewModel.items(mappedItems);\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Blade-Linked Notification in Azure Portal\nDESCRIPTION: Shows how to publish a notification that links directly to a blade using BladeReference. Includes configuration for the target blade with custom parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BladeReference } from \"Fx/Composition\";\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\npublishNotification({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: CompletedStatus.Information,\n    linkTo: new BladeReference({\n        extension: \"extensionName\",\n        blade: \"BladeName\",\n        parameters: {\n            bladeInputProperty1: \"bladeInput1\"\n        }\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing EventHandlers for RPC Registrations in TypeScript\nDESCRIPTION: This snippet shows how to create an EventHandlers class to register RPC callbacks in the new fast extension load contract. It uses dependency injection and RPC event handler decorators.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-fast-extension-load.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Di from \"Fx/DependencyInjection\";\n\nimport Rpc = MsPortalFx.Services.Rpc;\n\n@Di.Class()\n@Rpc.EventHandler.Decorator(\"rpc\")\nexport class EventHandlers {\n    public registerEndPoints(): void {\n        // Add RPC registrations here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate and Converting to Base64 in PowerShell\nDESCRIPTION: This PowerShell snippet imports a certificate from a file, extracts its raw data, and converts it to a Base64 string for use in Azure AD authentication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$cer = New-Object System.Security.Cryptography.X509Certificates.X509Certificate\n$cer.Import(\"C:\\temp\\ServicePrincipalCertPublicKey.cer\")\n$binCert = $cer.GetRawCertData()\n$credValue = [System.Convert]::ToBase64String($binCert);\n```\n\n----------------------------------------\n\nTITLE: Opening InProductFeedbackBlade in Azure Portal - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to open the InProductFeedbackBlade within an Azure portal context pane for collecting feature-based survey responses. It shows how to provide the required parameters (bladeName, extensionName, cesQuestion, cvaQuestion, featureName, surveyId), and handle blade closure events via the onClosed callback (e.g., resetting the status bar when the child blade closes). Dependencies include the Azure portal container object, BladeReferences API, and access to the survey question client strings. Inputs include feature- and survey-specific identifiers and localized question text. The output is a feedback blade UI rendered in the portal; constraints include the need to match exact parameter names and types.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-inproduct-feedback.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bladeName = \"Your_Blade\";\nconst extensionName = \"Your_Extension\";\n\ncontainer.openContextPane(BladeReferences.forBlade(\"InProductFeedbackBlade\").createReference({\n    parameters: {\n        bladeName,\n        cesQuestion: inProductFeedbackClientStrings.cesQuestion,\n        cvaQuestion: inProductFeedbackClientStrings.cvaQuestion,\n        extensionName,\n        featureName: \"Your_FeatureName\",\n        surveyId: \"FeatureName+Date\",\n    },\n    onClosed: (reason: BladeClosedReason) => {\n        if (reason === BladeClosedReason.ChildClosedSelf) {\n            container.statusBar(null);\n        }\n    },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Localized Resources in TypeScript\nDESCRIPTION: This TypeScript example illustrates statically importing a generated resources module to access localized strings in a type-safe way. Importing 'ClientResources' allows referencing string keys as properties, providing compile-time checks. Prerequisites: RESX resources processed as per build steps. Inputs: Resource module (ClientResources). Outputs: Localized string lookups. Limitation: Requires correct resource generation; key errors become compile-time failures.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as ClientResources from \\\"ClientResources\\\";\n\n...\n\nthis.subtitle(ClientResources.hubsLensTitle);\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.PasswordBox Control in JSON\nDESCRIPTION: A complete example showing how to implement a password input control with validation. This implementation requires the password to be at least 8 characters long and contain only letters and numbers. The control includes both the initial password field and a confirmation field.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.PasswordBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"element1\",\n\"type\": \"Microsoft.Common.PasswordBox\",\n\"label\": {\n  \"password\": \"Password\",\n  \"confirmPassword\": \"Confirm password\"\n},\n\"toolTip\": \"\",\n\"constraints\": {\n  \"required\": true,\n  \"regex\": \"^[a-zA-Z0-9]{8,}$\",\n  \"validationMessage\": \"Password must be at least 8 characters long, contain only numbers and letters\"\n},\n\"options\": {\n  \"hideConfirmation\": false\n},\n\"visible\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating DataView from QueryCache in TypeScript\nDESCRIPTION: Demonstrates how to create a DataView using the createView method from a QueryCache. The container parameter acts as a lifetime object to manage view display state and performance optimization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-dataviews.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websitesQueryView = dataContext.masterDetailBrowseSample.websitesQuery.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Using Built-in SVG Icon in TypeScript Command ViewModel\nDESCRIPTION: This TypeScript snippet demonstrates how to assign a built-in PortalFX SVG icon (Delete icon) to the 'icon' property of a command view model. It uses a Knockout observable (`ko.observable`) to hold the icon definition obtained from `MsPortalFx.Base.Images.Delete()`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class DeleteCommandViewModel implements MsPortalFx.ViewModels.CommandContract {\n    public icon = ko.observable<MsPortalFx.Base.Image>();\n\n    constructor(dataContext: WebsitesDataContext) {\n        this.icon(MsPortalFx.Base.Images.Delete());\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Modern One-Time Notification Implementation in TypeScript\nDESCRIPTION: Demonstrates the new way of creating notifications using publishNotification function with simplified syntax and improved asset linking.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\nvar notification = publishNotification({\n    title: clientStrings.myEventLabel,\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    status: CompletedStatus.Error,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Blade ViewModel in TypeScript for Azure Portal\nDESCRIPTION: This code demonstrates how to define a menu blade ViewModel to open two different items. It includes an overview item, grouped menu items, and tab items. The code also shows how to set up blade references for each menu item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@MenuBlade.Decorator()\nexport class SampleMenuBlade {\npublic title = BladeClientResources.menuBladeTitle;\npublic subtitle = ClientResources.samples;\n\npublic context: MenuBlade.Context<void>;\n\npublic viewModel: MenuBlade.ViewModel2;\n\npublic async onInitialize() {\n    const { container } = this.context;\n\n    this.viewModel = MenuBlade.ViewModel2.create(container, {\n        groups: [\n            {\n                id: \"default\",\n                displayText: BladeClientResources.menuBladeSamples,\n                items: [\n                    {\n                        id: \"controlsMenuBladeContentAreaBlade\",\n                        displayText: BladeClientResources.controlsMenuBladeContentAreaBladeTitle,\n                        icon: null,\n                        supplyBladeReference: () => {\n                            return BladeReferences.forBlade(\"ControlsMenuBladeContentAreaBlade\").createReference();\n                        },\n                    },\n                    {\n                        id: \"tabMenu\",\n                        displayText: BladeClientResources.tabMenuBladeTitle,\n                        icon: null,\n                        tabItems: [\n                            {\n                                id: \"tabMenu0\",\n                                displayText: BladeClientResources.tabMenuBlade0Title,\n                                supplyBladeReference: () => {\n                                    return BladeReferences.forBlade(\"TabContentAreaBlade0\").createReference();\n                                },\n                            },\n                            {\n                                id: \"tabMenu1\",\n                                displayText: BladeClientResources.tabMenuBlade1Title,\n                                supplyBladeReference: () => {\n                                    return BladeReferences.forBlade(\"TabContentAreaBlade1\").createReference();\n                                },\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n        overview: {\n            id: \"overview\",\n            displayText: BladeClientResources.overviewBladeTitle,\n            icon: null,\n            supplyBladeReference: () => {\n                return BladeReferences.forBlade(\"MenuBladeOverviewBlade\").createReference();\n            },\n        },\n    });\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Parameter Provider Blade Reference in TypeScript\nDESCRIPTION: Demonstrates creating a blade reference for a Parameter Provider ('ControlBlade') using `BladeReferences`. It configures the reference to pass parameters (`id`), provide initial data via `supplyInitialData`, and handle the returned result using `receiveResult`. This setup facilitates the data exchange between the Collector and Provider blades.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\nreturn BladeReferences.forBlade(\"ControlBlade\").createReference({\n    parameters: {\n        id: resourceInfo.resourceId,\n    },\n    supplyInitialData: () => {\n        return retrieveContainerConfig(resourceInfo.resourceId);\n    },\n    receiveResult: (result: ContainerConfig) => {\n        storeContainerConfig(resourceInfo.resourceId, result);\n    },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Source Output in Property Bindings (JSON)\nDESCRIPTION: This JSON snippet shows how to reference the output of a defined data source using a binding expression in the 'name' property. The binding syntax '[dataSources('graph').displayName]' retrieves the 'displayName' from the data source named 'graph', allowing dynamic population of property fields with fetched data. This approach requires that the referenced data source is properly defined and populated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \\\"[dataSources('graph').displayName]\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Blade View Model Properties in TypeScript\nDESCRIPTION: Core property definitions for a blade view model including textbox controls, observables, and button contracts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Textbox control containing the user's name.\n */\npublic nameTextBox: TextBox.Contract;\n\n/**\n * Observable containing either a numeric textbox or a textbox.\n */\npublic smartPhone: KnockoutObservable<any>;\n\n/**\n * OK button for submitting updated user data back to server.\n */\npublic okButton: Button.Contract;\n\n/**\n * EntityView containing the person being edited\n */\nprivate _view: MsPortalFx.Data.EntityView<Person, any>;\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Properties to Essentials Panel in TypeScript\nDESCRIPTION: Demonstrates how to add dynamic properties to an Essentials panel after resource data has loaded. The code fetches resource data, then creates either a link or text property based on the engine displacement value, and adds it to the panel using setDynamicProperties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: Def.InputsContract, settings: Def.SettingsContract): Promise<any> {\n\n    return super.onInputsSet(inputs, settings).then(() => {\n        return this._engineView.fetch(inputs.resourceId).then(() => {\n\n            // Show some dynamic, purely data-driven properties based on the loaded Engine.\n            let engine = this._engineView.item();\n            this._updateDynamicProperties(engine);\n        });\n    });\n}\n\nprivate _updateDynamicProperties(engine: SamplesExtension.DataModels.Engine): void {\n    // Create properties based on some aspect of the loaded Engine.\n    let useLinkProperty = engine.displacement().indexOf(\"600\") >= 0;\n    let dynamicProperty: MsPortalFx.ViewModels.Parts.Properties.Property;\n    if (useLinkProperty) {\n        dynamicProperty = new MsPortalFx.ViewModels.Parts.Properties.LinkProperty({\n            label: ClientResources.engineDisplacementPropertyLabel,\n            value: ko.observable(ClientResources.microsoftUri),\n            displayValue: engine.displacement\n        });\n    } else {\n        dynamicProperty = new MsPortalFx.ViewModels.Parts.Properties.TextProperty({\n            label: ClientResources.engineDisplacementPropertyLabel,\n            value: engine.displacement\n        });\n    }\n\n    this.setDynamicProperties([ dynamicProperty ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Blade ARM Request - Azure Portal SDK - JSON\nDESCRIPTION: This snippet defines a Form blade for the Azure Portal SDK that executes an ARM request (such as a POST operation) against a specified resource. It utilizes declarative JSON to specify input parameters (like resource id), sets the API version, constructs the request path dynamically using expressions, and passes a composable request body. Dependencies include adherence to dx.schema.json and proper integration within an Azure Portal extension. Inputs include the resource id and other context, while outputs are handled by the portal's ARM request plumbing. Requires SDK 6.724.0.5 or later for PATCH method support.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Form blade: please fill in values\",\n      \"steps\": [\n      ],\n      \"armRequest\": {\n        \"path\": \"[concat(resources().id, '/actionName?api-version=2014-04-01')]\",\n        \"method\": \"POST\",\n        \"body\": \"[parse(concat('{\\\"location\\\":', string(resources().location), '}'))]\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Save and Discard Commands in TypeScript\nDESCRIPTION: This snippet shows how to create save and discard command buttons with appropriate enable/disable logic based on the edit scope's state and saving status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-construction.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// set up save command\nconst saveCommand = new Toolbars.CommandButton(); // eslint-disable-line deprecation/deprecation\nsaveCommand.label(ClientResources.saveText);\nsaveCommand.icon(FxBase.Images.Save());\nsaveCommand.command = {\n    canExecute: ko.pureComputed(() => {\n        // user can save when edit scope is dirty and we're not in the middle of a save operation\n        const editScope = this._editScopeView.editScope();\n        const editScopeDirty = editScope ? editScope.dirty() : false;\n        return !this._saving() && editScopeDirty;\n    }),\n    execute: (): Promise<any> => {\n        return this._editScopeView.editScope().saveChanges();\n    },\n};\n\n// set up discard command\nconst discardCommand = new Toolbars.CommandButton(); // eslint-disable-line deprecation/deprecation\ndiscardCommand.label(ClientResources.discardText);\ndiscardCommand.icon(MsPortalFx.Base.Images.Delete());\ndiscardCommand.command = {\n    canExecute: ko.pureComputed(() => {\n        // user can save when edit scope is dirty and we're not in the middle of a save operation\n        const editScope = this._editScopeView.editScope();\n        const editScopeDirty = editScope ? editScope.dirty() : false;\n        return !this._saving() && editScopeDirty;\n    }),\n    execute: (): Promise<any> => {\n        this._editScopeView.editScope().revertAll();\n        return null;\n    },\n};\n\nthis.commandBar = new Toolbars.Toolbar(this._ltm); // eslint-disable-line deprecation/deprecation\nthis.commandBar.setItems([saveCommand, discardCommand]);\n```\n\n----------------------------------------\n\nTITLE: Revealing Content Early in ViewModel Constructor - Azure Portal BarChartPart (TypeScript)\nDESCRIPTION: Shows the usage of container.revealContent() inside a Part view model constructor to reveal UI content (like chart axes) before any data is loaded. Dependencies: MsPortalFx.ViewModels.PartContainerContract, Chart control view model, TypeScript. Inputs: Constructor arguments include the container, initial state, and data context. Outputs: Displays part content immediately except for data-driven visuals. Limitation: Only suitable when initial content is meaningful before data-fetching completes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parts-revealContent.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BarChartPartViewModel implements Def.BarChartPartViewModel.Contract {\n\n    public barChartVM: MsPortalFx.ViewModels.Controls.Visualization.Chart.Contract<string, number>;\n\n    constructor(container: MsPortalFx.ViewModels.PartContainerContract, initialState: any, dataContext: ControlsArea.DataContext) {\n        // Initialize the chart view model.\n        this.barChartVM = new MsPortalFx.ViewModels.Controls.Visualization.Chart.ViewModel<string, number>(container);\n\n        // Configure the chart view model (incomplete as shown).\n        this.barChartVM.yAxis.showGridLines(true);\n\n\t\tcontainer.revealContent();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Progress Dialog in a Command ViewModel (TypeScript)\nDESCRIPTION: Shows how to initiate a progress dialog from the 'execute' method of a command view model using 'MsPortalFx.ViewModels.ProgressBox', suitable for long-running operations. The 'ProgressBox' is created with an initial title ('Stopping') and descriptive text ('Stopping the site ...'), and then passed to the 'this.dialog()' method to display the progress indicator to the user.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\npublic execute(): void {\n    var progressBox = new MsPortalFx.ViewModels.ProgressBox(\n        \"Stopping\",\n        \"Stopping the site ...\");\n    this.dialog(progressBox);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Essentials Section with Dynamic String Property (JSON)\nDESCRIPTION: Defines essentials configuration to show custom, potentially dynamic, string content as a property in the Azure resource overview essentials section. Dependencies include access to the 'resources()' function to resolve the property at runtime. Key parameter: 'properties', an array where each element has a 'displayName' and a dynamic or static 'value'. Outputs the resolved name at display time. Limitation: Only properties included in the array will appear and must fit in limited essentials UI space.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"propertydisplayname\",\n            \"value\": \"[resources().name]\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Supplying Template Deployment Options for ARM Provisioning (TypeScript)\nDESCRIPTION: This snippet defines the function signature for implementing deployment options for provisioning ARM resources using the TemplateBlade framework. It specifies a method returning either DeployTemplateOptions or DeploySubscriptionLevelTemplateOptions. The function is expected to supply properties like template parameters, resource details, and deployment options. Inputs are none; outputs are objects conforming to TemplateBlade.DoesProvisioning.*Options interfaces.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _supplyTemplateDeploymentOptions(): TemplateBlade.DoesProvisioning.DeployTemplateOptions\n    | TemplateBlade.DoesProvisioning.DeploySubscriptionLevelTemplateOptions {\n    \n\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen Recommendations Blade in Azure Portal\nDESCRIPTION: JSON schema for creating a full-screen Recommendations view blade that can be accessed from a resource menu. Defines the basic structure including schema reference, string resources, and view properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Recommendations\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Recommendations Example\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Innermost Error Distribution in Azure Portal Create Flow\nDESCRIPTION: This complex query performs deep error analysis by examining nested error structures in the Azure Portal create flow data. It joins with extension lookup data, extracts multiple levels of error codes, and determines the innermost error code to provide detailed error distribution by extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nlet today = floor(now(),1d);\nlet sat = today - dayofweek(today) - 8d;\nlet fri =  sat + 6d;\nClientTelemetry\n| where PreciseTimeStamp >= sat and PreciseTimeStamp < fri+1d\n| where Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\"\n| join kind = inner (ExtensionLookup | project Extension, ExtensionName) on Extension\n| where Data !contains \"We could not find a credit card on file for your azure subscription.\"\n| extend datajson = parsejson(Data)\n| extend provisioningStatus = tostring(datajson.provisioningStatus), isCustomProvisioning = tostring(datajson.isCustomProvisioning), oldCreateApi = tostring(datajson.oldCreateApi), launchingContext = extract('\"launchingContext\"\\\\s?:\\\\s?{([^}]+)', 1, Data)\n| where isnotempty(launchingContext) and isempty(extract(\"^(\\\"telemetryId\\\":\\\"[^\\\"]*\\\")$\", 1, launchingContext)) and oldCreateApi != \"true\" and isCustomProvisioning != \"true\" and provisioningStatus != \"DeploymentCanceled\"\n| extend code1 = tostring(datajson.details.code), statusCode = tostring(datajson.details.deploymentStatusCode), details = datajson.details.properties.error.details[0]\n| extend message= tostring(details.message), code2 = tostring(details.code)\n| extend messagejson = parsejson(message)\n| extend code3 = tostring(messagejson.code), code4 = tostring(messagejson.error.code), code5= tostring(messagejson.error.details[0].code)\n| extend errorCode1 = iff(code5 == \"\", code4, code5)\n| extend errorCode2 = iff(errorCode1 == \"\", code3, errorCode1)\n| extend errorCode3 = iff(errorCode2 == \"\", code2, errorCode2)\n| extend errorCode4 = iff(errorCode3 == \"\", code1, errorCode3)\n| extend errorCode5 = iff(errorCode4 == \"\", statusCode, errorCode4)\n| summarize [\"ErrorCount\"] = count() by [\"Extension\"] = ExtensionName, errorCode5\n| order by ErrorCount desc\n```\n\n----------------------------------------\n\nTITLE: Opening Resource Menu Blade for Specific Resource in TypeScript\nDESCRIPTION: Demonstrates how to open the resource menu blade for a specific resource ID. This example opens the \"control\" menu item in the resource menu for a virtual server resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onResourceMenuButtonClick() {\n    //bladeReference#resourceMenuBlade\n    // open the \"control\" menu item in the resource menu for a specific resource\n    const resourceId = \"/subscriptions/sub123/resourcegroups/servertest/providers/Microsoft.test/virtualservers/web1\";\n    void this._container.openBlade(BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"control\").createReference({ parameters: { id: resourceId } }));\n    //bladeReference#resourceMenuBlade\n}\n```\n\n----------------------------------------\n\nTITLE: Complex API Request with Transform in Azure Portal JSON\nDESCRIPTION: This snippet shows a more complex API request example with a condition, specific path parameters, and a transform. It demonstrates how JMESPath expressions can simplify data transformation compared to lambda functions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-function-transforms.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\n    \"condition\": \"[greater(length(parameters('name')), 0)]\",\n    \"request\": {\n        \"method\": \"GET\",\n        \"path\": \"/beta/myorganization/applications?filter=startsWith(displayName, 'a')&select=displayName,appId\",\n        \"transforms\": {\n            \"list\": \"value|[*].{label:displayName, value:appId, description:appId}\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Opening Blade with Parameters in Azure Portal\nDESCRIPTION: Shows how to invoke a blade with parameters using TypeScript. Demonstrates passing both required key parameters and optional parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeParameters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openBlade(BladeReferences.forBlade(\"TestForm_Dx\").createReference({\n            parameters: {\n                keyParameter: \"default value for textBox\",\n                optionalParameter: \"some value\"\n            }\n        }))\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Globalization.DateTimeFormat in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the MsPortalFx Globalization API and use DateTimeFormat.create().format to produce locale-aware date strings for different world regions and calendars. It highlights default formatting for US, UK, Korea, Arabic, and Japanese locales by directly invoking the format method. The main dependency is the MsPortalFx/Globalization module, and inputs are Date objects and implicit user locale settings. Output is locale-formatted date strings, with coverage of edge cases such as Arabic script and Japanese calendar. No explicit configuration is required for these base usages, but the user's locale determines output format.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalization.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n// US English uses month-day-year order\n// User locale is 'en-US'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"12/19/2012\"\n// British English uses day-month-year order\n// User locale is 'en-GB'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"20/12/2012\"\n// Korean uses year-month-day order\n// User locale is 'ko-KR'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"2012. 12. 20.\"\n// Arabic in most Arabic speaking countries/regions uses real Arabic digits\n// User locale is 'ar-EG'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"٢٠١٢‏/١٢‏/٢٠١٢\"\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\n// User locale is 'ja-JP-u-ca-japanese' using the Japanese calendar\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"24/12/20\"\n```\n\n----------------------------------------\n\nTITLE: Defining Graph API Control with Property Mappings and Dropdown for Azure Portal UI (JSON)\nDESCRIPTION: Defines two Azure portal UI controls similar to the first example, but with enhanced transformation. The `callGraph2` control (`Microsoft.Solutions.GraphApiControl`) performs the same Graph API query but includes `propertyMappings` within its `transforms`. These mappings specifically override the `label` (displayName) and `description` (appId) for certain returned values (e.g., mapping the value 'astf4' to the display label 'Test astf4'). The `userName2` control (`Microsoft.Common.DropDown`) is then populated using the transformed and mapped list from `callGraph2`, providing customized display text in the dropdown.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"name\": \"callGraph2\",\n        \"type\": \"Microsoft.Solutions.GraphApiControl\",\n        \"request\": {\n            \"method\": \"GET\",\n            \"path\": \"/beta/myorganization/applications?filter=startsWith(displayName, 'a')&select=displayName,appId\",\n            \"transforms\": {\n                \"list\": {\n                    \"jmesPath\": \"value|[*].{label:displayName, value:appId, description:appId}\",\n                    \"propertyMappings\": [\n                        {\n                            \"property\": \"label\",\n                            \"valueMapping\": [\n                                {\n                                    \"value\": \"astf4\",\n                                    \"displayName\": \"Test astf4\"\n                                },\n                                {\n                                    \"value\": \"adelete1\",\n                                    \"displayName\": \"Test adelete1\"\n                                }\n                            ]\n                        },\n                        {\n                            \"property\": \"description\",\n                            \"valueMapping\": [\n                                {\n                                    \"value\": \"512628f9-3682-4a1d-a7a8-f5931f9c575f\",\n                                    \"displayName\": \"Test 512628f9-3682-4a1d-a7a8-f5931f9c575f\"\n                                },\n                                {\n                                    \"value\": \"0d30f29a-9785-466d-8273-f07699ef7bfc\",\n                                    \"displayName\": \"Test 0d30f29a-9785-466d-8273-f07699ef7bfc\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        }\n    },\n{\n    \"name\": \"userName2\",\n    \"type\": \"Microsoft.Common.DropDown\",\n    \"label\": \"User info 2\",\n    \"multiLine\": true,\n    \"constraints\": {\n        \"required\": true,\n        \"allowedValues\": \"[coalesce(steps('controls').callGraph2.transformed.list, parse('[]'))]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceGroupSelector Control in JSON\nDESCRIPTION: A basic implementation of the Microsoft.Common.ResourceGroupSelector control that allows both creating new and using existing resource groups. The control references the subscription ID from the basics step.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceGroupSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\":\"Microsoft.Common.ResourceGroupSelector\",\n    \"name\": \"resourceGroup\",\n    \"allowedMode\": \"Both\",\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').subscription.subscriptionId]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Picker Inputs/Outputs Interfaces in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces (`KeyPickerInputsOutputs`, `Key`, `KeyAttributes`) for data exchange with the Key picker blade. These interfaces structure the data for the selected or created key, including the key object itself (`Key`) and the vault ID. The `Key` interface contains the base key identifier (kid), attributes, and tags. `KeyAttributes` provide details like the full versioned key identifier, enabled status, validity dates (nbf, exp), and creation/update timestamps. Uses Knockout observables.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyPickerInputsOutputs {\n    key: KnockoutObservable<Key>; // The key that was picked, or created.\n    vaultId: KnockoutObservable<string>; // The vault id of the vault to pick from. This can be supplied here or in config. If it is supplied here it is an updateable input.\n}\n\nexport interface Key {\n    kid: KnockoutObservable<string>; // base key identifier of the base key, i.e. https://myvault.vault.azure.net/keys/mykey\n    attributes: KnockoutObservable<KeyAttributes>; // Key attributes of the selected key\n    tags: KnockoutObservable<StringMap<KnockoutObservable<string>>>; // any tags associated with the key\n}\n\nexport interface KeyAttributes {\n    kid: KnockoutObservable<string>; // Full key identifier of the current key version, i.e. https://myvault.vault.azure.net/keys/mykey/1d7c8dd8-f795-439c-9ebf-9510af7ec445\n    enabled: KnockoutObservable<boolean>;\n    nbf: KnockoutObservable<number>;\n    exp: KnockoutObservable<number>;\n    created: KnockoutObservable<number>;\n    updated: KnockoutObservable<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal View Messages with Conditional Visibility\nDESCRIPTION: JSON configuration for defining multiple status messages with different visibility conditions based on VM state. Demonstrates message prioritization, various message types (error, success, info), and different action types (resourceId, blade, URL). Only the first message with visible:true will be displayed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeMessages-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": [\n      {\n        \"kind\": \"error\",\n        \"message\": \"vm is deallocated\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/deallocated')]\",\n        \"action\": {\n          \"resourceId\": \"/subscriptions/415b6834-1801-4f6e-a285-f646ec13fe34/resourceGroups/AzureMobileTest/providers/Microsoft.Network/virtualNetworks/AzureMobileTest-vnet\"\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running1\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   },\n                   \"inContextPane\": true\n                 }\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running2\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   }\n                 }\n        }\n      },\n      {\n        \"kind\": \"info\",\n        \"message\": \"Welcome to our extension! please take a look at our tutorial\",\n        \"action\": {\n          \"url\": \"https://ms.portal.azure.com/\"\n        }\n      }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining ManagementGroupSelector Output Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the object returned by the `ManagementGroupSelector` control. It specifies two string properties: `displayName` for the user-friendly name and `managementGroupId` for the unique identifier of the selected management group.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ManagementGroupSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    displayName: string;\n    managementGroupId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HomeController for Azure Portal Extensions\nDESCRIPTION: Sample implementation of a HomeController that inherits from ExtensionControllerBase. This controller is exported through MEF with NonShared creation policy and requires an ExtensionDefinition to be injected through its constructor.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-migrate-existing-to-extensioncontrollerbase.md#2025-04-23_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Export]\n[PartCreationPolicy(CreationPolicy.NonShared)]\npublic class HomeController : ExtensionControllerBase\n{\n    /// <summary>\n    /// Initializes a new instance of the HomeController class.\n    /// </summary>\n    [ImportingConstructor]\n    public HomeController(ExtensionDefinition definition)\n        : base(definition)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Collector in TypeScript for Azure Portal\nDESCRIPTION: This TypeScript code defines a CollectorButtonViewModel class that implements a Parameter Collector. It includes the serverConfigCollector property and demonstrates how to initialize it with callbacks for supplying initial data and receiving results.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Di from \"Fx/DependencyInjection\";\nimport * as ClientResources from \"ClientResources\";\nimport { ServerConfig } from \"DataModels/ServerConfig\";\n\nimport AjaxMock from \"../../../../Mock/AjaxMock\";\n\n/**\n * Parameter collector command view model class. The 'serverConfigCollector' property is referenced\n * in PDL and deals with sending initial data to the provider blade when it opens, and receiving\n * back a result from the provider blade when it closes.\n */\n@Di.Class(\"viewModel\")\nexport class CollectorButtonViewModel extends MsPortalFx.ViewModels.ButtonPart {\n    /**\n     * View model for the collector. This is referenced in the corresponding .pdl file. Note\n     * that the TResult generic type must match the TResult generic type used on the parameter\n     * provider model, so that the two models may exchange data of that type.\n     */\n    public serverConfigCollector: MsPortalFx.ViewModels.ParameterCollector<ServerConfig>;\n\n    /**\n     * Constructs the view model.\n     *\n     * @param container The container into which the part is being placed.\n     */\n    constructor(container: MsPortalFx.ViewModels.PartContainerContract, _mock: AjaxMock) {\n        super();\n        this.title(ClientResources.openProviderBlade);\n\n        this.serverConfigCollector = new MsPortalFx.ViewModels.ParameterCollector<ServerConfig>(container, {\n            supplyInitialData: () => {\n                return {\n                    diskSpaceBytes: ko.observable(108 * 1024 * 1024 * 1024),\n                    serverName: ko.observable(ClientResources.parameterProviderDefaultServerName),\n                };\n            },\n            receiveResult: (result: ServerConfig) => {\n                // A realistic parameter collector command would commence some operation on\n                // receiving data. For this sample we have nothing particular to commence,\n                // so we just show a notification to demonstrate that data was received.\n                MsPortalFx.Hubs.Notifications.ClientNotification.publish({\n                    title: ClientResources.parameterCollectorReceivedResultNotificationTitle,\n                    description: ClientResources.parameterCollectorReceivedResultNotificationMessage.format(ko.toJS(result)),\n                    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Success,\n                });\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceInfo Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the ResourceInfo interface, which represents the information passed to the getExtensionAndMenuConfig method for loading the resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceInfo {\n    resourceId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Client Telemetry for a Custom Portal Instance in KQL\nDESCRIPTION: This Kusto Query Language (KQL) snippet demonstrates how to filter the `ClientTelemetry` table to retrieve telemetry data specifically for a custom Portal as a Service instance within the last 24 hours. It filters records where the `PreciseTimeStamp` is within the last day and the `requestUri` starts with the custom domain URL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-portal-as-a-service.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nClientTelemetry\n| where PreciseTimeStamp > ago(1d)\n| where requestUri startswith \"https://your-domain.portal.azure.com\"\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Store State from ReactModel in TypeScript\nDESCRIPTION: This snippet illustrates how to dispatch actions to update the Redux store state from within a ReactModel. It shows a simple action dispatch example.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst setTextAction = {\n  type: \"SetText\",\n  text: \"New text\"\n};\nstore.dispatch(setTextAction);\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated AJAX Call to Graph API\nDESCRIPTION: Shows how to make an authenticated call to Microsoft Graph API using a specific resource token.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst graphUri = new UriBuilder(getEndpoints().graph);\ngraphUri.setRelativePath(parameters.objectId);\ngraphUri.query.setParameter(\"api-version\", \"1.6\");\n\nconst loadDataFromGraph = ajax<UserDetails>({\n    setAuthorizationHeader: {\n        resourceName: \"graph\",\n    },\n    type: \"GET\",\n    uri: graphUri.toString(),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AjaxCachedResult Interface in TypeScript\nDESCRIPTION: Defines the `AjaxCachedResult<T>` interface used to wrap responses from `MsPortalFx.Base.Net.cachedAjax()`. It includes properties to indicate if the response came from `cachedAjax`, whether the data was modified (`modified`), the actual data (`data`), status text (`textStatus`), and the underlying jQuery XHR object (`jqXHR`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport interface AjaxCachedResult<T> {\n    cachedAjax?: boolean;\n    data?: T;\n    modified?: boolean;\n    textStatus?: string;\n    jqXHR?: JQueryXHR<T>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Triggering Authorization Token Fetch for a Resource - MsPortalFx SDK - TypeScript\nDESCRIPTION: Shows how to request a resource-specific authorization token programmatically within a portal extension using MsPortalFx SDK. Initiates a fetch to '/api/DelegationToken' using the Base.Security.getAuthorizationToken function with the desired resourceName. Input includes the resource name; output is an authorization token received asynchronously. Requires MsPortalFx.Base.Security context and browser developer tools for manual invocation/testing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Base.Security.getAuthorizationToken({\\n    resourceName: \"microsoft.graph\",\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Display in Azure Portal Views (JSON)\nDESCRIPTION: This snippet demonstrates how to configure multiple messages with different visibility conditions and actions in Azure Portal views. It includes examples of error, success, and info messages with various action types such as resourceId, blade, and URL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeMessages.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": [\n      {\n        \"kind\": \"error\",\n        \"message\": \"vm is deallocated\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/deallocated')]\",\n        \"action\": {\n          \"resourceId\": \"/subscriptions/415b6834-1801-4f6e-a285-f646ec13fe34/resourceGroups/AzureMobileTest/providers/Microsoft.Network/virtualNetworks/AzureMobileTest-vnet\"\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running1\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   },\n                   \"inContextPane\": true\n                 }\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running2\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   }\n                 }\n        }\n      },\n      {\n        \"kind\": \"info\",\n        \"message\": \"Welcome to our extension! please take a look at our tutorial\",\n        \"action\": {\n          \"url\": \"https://ms.portal.azure.com/\"\n        }\n      }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Browse View with Transforms and Inputs in Azure Portal\nDESCRIPTION: This snippet demonstrates how to use transforms and inputs in a Data Browse view to process and display complex data structures, specifically for OS disk information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"testing\",\n    \"data\": {\n        \"transforms\": \"[concat('[', '@.{caching:caching, createOption: createOption, name: name, osType:osType, managedDisk:managedDisk.to_string(@)}', ']')]\",\n        \"input\": \"[resources().properties.storageProfile.osDisk]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping QueryCache Robots to RobotDetails (Correct Implementation using PureComputed in Knockout, TypeScript)\nDESCRIPTION: Projects each Robot item to a RobotDetails object using map(), directly passing existing observables for properties (name, status) and constructing a computed observable (ko.pureComputed) for the modelAndMfg property. This ensures stable references for unchanged items and minimal reruns of the mapping function. The computed observable efficiently recomputes when dependencies (model, manufacturer) change, maintaining UI state without unnecessary array item replacement. Dependencies: Knockout.js with ko.pureComputed, same interfaces and context properties as above. Returns: projectedItems array of RobotDetails, each property wired to underlying observables for seamless UI updates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.map<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: robot.name,\n        status: robot.status,\n        modelAndMfg: ko.pureComputed(() => {\n            this._logComputedRecalculating(projectionId, robot);\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using Context Menus for Commands in Azure Portal Tests\nDESCRIPTION: This snippet shows how to work with context menus in the Azure Portal using Selenium's Actions class. It demonstrates finding a grid row, performing a context click, locating a specific menu item, and handling the resulting confirmation dialog.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar portal = this.NavigateToPortal();\n\nstring contactName = \"Jane Doe\";\nstring subscriptionName = \"Portal Subscription 2\";\n\nthis.ProvisionContact(contactName, subscriptionName, portal);\n\nportal.StartBoard.FindSinglePartByTitle(\"Contacts\").Click();\nvar blade = portal.FindSingleBladeByTitle(\"Contacts List\");\nvar grid = webDriver.WaitUntil(() => blade.FindElement<Grid>(), \"Could not find the grid.\");\nGridRow row = webDriver.WaitUntil(() => grid.FindRow(contactName), \"Could not find the contact row.\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nActions actions = new Actions(webDriver);\nactions.ContextClick(row);\nactions.Perform();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nContextMenuItem menuItem = webDriver.WaitUntil(() => webDriver.FindElement<ContextMenu>(),\n                                            \"Could not find the context menu.\")\n                                    .FindContextMenuItemByText(\"Delete\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nmenuItem.Click();\n\nportal.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\n\nwebDriver.WaitUntil(() => !portal.HasMessageBox, \"There is still a message box in the Portal.\");\n\nportal.StartBoard.FindSinglePartByTitle(\"Deleted\");\n```\n\n----------------------------------------\n\nTITLE: Default Stage Definition for Azure Portal Extension Deployment\nDESCRIPTION: The default stage definition provided by the hosting service that maps each stage to specific Azure regions. It includes five stages with a predefined sequence, rolling out from testing regions to all Azure regions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stage1\": [\n        \"centraluseuap\"\n    ],\n    \"stage2\": [\n        \"westcentralus\"\n    ],\n    \"stage3\": [\n        \"southcentralus\"\n    ],\n    \"stage4\": [\n        \"westus\"\n    ],\n    \"stage5\": [\n        \"*\"\n    ],\n    \"$sequence\": [\n        \"stage1\",\n        \"stage2\",\n        \"stage3\",\n        \"stage4\",\n        \"stage5\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ARM Request Form Blade in Azure Portal (JSON)\nDESCRIPTION: This snippet demonstrates how to create a Form blade that executes an ARM request. It specifies the resource ID, API version, and constructs the request path and body using Form inputs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-armRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Form blade: please fill in values\",\n      \"steps\": [\n      ],\n      \"armRequest\": {\n        \"path\": \"[concat(resources().id, '/actionName?api-version=2014-04-01')]\",\n        \"method\": \"POST\",\n        \"body\": \"[parse(concat('{\\\"location\\\":', string(resources().location), '}'))]\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryCache with Navigation for Pageable Grid\nDESCRIPTION: This snippet shows how to set up a QueryCache with a navigation element to support skip-take behavior for a pageable grid. It includes URI formatting, response processing, and the loadBySkipTake function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nvar QueryString = MsPortalFx.Base.Resources\n    .getAppRelativeUri(\"/api/Product/GetPageResult?skip={skip}&take={take}\");\n\nvar productsCache = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.Product, ProductPageableQueryParams>({\n\n    entityTypeName: SamplesExtension.DataModels.ProductType,\n    sourceUri: MsPortalFx.Data.uriFormatter(ProductPageableData.QueryString),\n    navigation: {\n        loadBySkipTake: (\n            suppliedQueryView: MsPortalFx.Data.QueryView<SamplesExtension.DataModels.Product, ProductPageableQueryParams>,\n            query: ProductPageableQueryParams,\n            skip: number,\n            take: number,\n            filter: string): Promise<any> => {\n\n                return suppliedQueryView.fetch({ skip: skip.toString(), take: take.toString(), categoryId: query.categoryId });\n        }\n    },\n    processServerResponse: (response: any) => {\n        return <MsPortalFx.Data.DataCacheProcessedResponse>{\n            data: response.products,\n            navigationMetadata: {\n                totalItemCount: response.totalCount,\n                continuationToken: response.continuationToken\n            }\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking an RPC Callback from an Azure Portal Extension - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates calling an RPC callback named 'StringUpperCaseCallback' using MsPortalFx.Services.Rpc.invokeCallback. The example constructs the call with the extensionId, callback name, and an argument (current time as string), handles UI state updates, and processes both results and errors asynchronously. It depends on proper registration of the callback and accessibility of MsPortalFx.Services.Rpc, and outputs the response through the UI-bound property. This pattern is typical for cross-extension method invocations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invokes an RPC callback.\n */\npublic invokeCallback() {\n    var extensionId = ExtensionDefinition.definitionName,\n        callbackName = \"StringUpperCaseCallback\",\n        arg = (new Date()).toTimeString();\n\n    // Reset UI\n    this.result(ClientResources.rpcResultPending);\n\n    // Make the RPC call.\n    // Note: For convenience, this source/destination extensions are the same\n    // for this example. In practice, that will not be so, but the syntax/behavior\n    // is otherwise the same.\n    MsPortalFx.Services.Rpc.invokeCallback<string>(extensionId, callbackName, arg)\n    \t.then(\n        (result) => {\n            this.result(result);\n        },\n        (rpcError) => {\n            this.result(ClientResources.rpcResultErrorFormatString.format(\n            \t\t\trpcError.error.toString(),\n            \t\t\trpcError.isClientError\n            \t)\n            );\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Modified KnockoutJS Subscribe Implementation with LifetimeManager\nDESCRIPTION: Demonstrates how KnockoutJS subscribe method was modified to integrate with LifetimeManager for automatic disposal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-lifetime.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis._customerNameSubscription = customerName.subscribe(lifetime, () => { … });\n\t\n…\n\t\n// KnockoutJS impl\nfunction subscribe(lifetime: LifetimeManager, callback: (newValue) => void): Subscription {\n    subscriptions.push(callback);\n    lifetime.registerForDispose({\n        dispose: () => { subscriptions.remove(callback); }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetMenuSelectionCommand Commands Kind Enum Values in Azure Portal\nDESCRIPTION: Enumerates the permitted values for the AssetMenuSelectionCommand.commands.kind property. The enum includes three command types: OpenBladeSelectionCommand for opening blades, ArmSelectionCommand for ARM-related operations, and DeleteSelectionCommand for deletion operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetMenuSelectionCommand-commands-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- OpenBladeSelectionCommand\n- ArmSelectionCommand\n- DeleteSelectionCommand\n```\n\n----------------------------------------\n\nTITLE: Client-Side Token Request in TypeScript\nDESCRIPTION: AJAX request configuration to obtain a self-targeted token that can be exchanged later for accessing other resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n    MsPortalFx.Base.Net2.ajax({\n        uri: \"MyController/MyAction\",\n        setAuthorizationHeader: { resourceName: \"self\" }\n    }).then((myData) => {\n        // do work with data\n    });\n```\n\n----------------------------------------\n\nTITLE: Invoking ARM Template Deployment via MsPortalFx SDK in TypeScript\nDESCRIPTION: This snippet shows the basic syntax for calling the `deployTemplate` function from the `MsPortalFx.Azure.ResourceManager` namespace. It requires an `options` object containing deployment details like subscription ID, resource group information, template source (link or inline JSON), parameters, and optional deployment mode/notification settings. The function returns a promise that resolves or rejects based on the deployment mode and ARM's response.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Azure.ResourceManager.deployTemplate(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic TemplateBlade ViewModel in Azure Portal (TypeScript)\nDESCRIPTION: This TypeScript code defines the ViewModel backing a TemplateBlade using Knockout observables for two properties: 'text' and 'url'. The ViewModel extends from MsPortalFx.ViewModels.Blade, sets the blade title/subtitle, and provides an overridable onInputsSet lifecycle method. It requires dependencies on MsPortalFx, Knockout, and is intended for use as referenced in the PDL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyTemplateBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    public text: KnockoutObservable<string>;\n    public url: KnockoutObservable<string>;\n\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: any) {\n        super();\n        this.title(\"InfoBox\");\n        this.subtitle(\"InfoBox Playground\");\n\n        this.text = ko.observable<string>(\"Go to the Azure Portal\");\n        this.url = ko.observable<string>(\"https://portal.azure.com\");\n    }\n\n    public onInputsSet(inputs: any): Promise<any> {\n        return Promise.resolve();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Resource Menu Configuration\nDESCRIPTION: Example implementation of getResourceMenuConfig method returning a menu configuration with default overview item and support options enabled.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                ...\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Template using Provisioning Utility in Azure Portal Extension (TypeScript)\nDESCRIPTION: This snippet invokes the deployTemplate method on a provisioning utility, passing deployment options for ARM-based resource provisioning. The function expects deployment options from _supplyTemplateDeploymentOptions and triggers the ARM deployment workflow. Prerequisites: provisioning context, and a properly implemented _supplyTemplateDeploymentOptions method. Input: deployment options object; Output: result of the deployment (usually a Promise or observable of the provisioning result).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreturn provisioning.deployTemplate(this._supplyTemplateDeploymentOptions())\n    \n\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group Dropdown for ARM Deployments\nDESCRIPTION: Implementation of a resource group dropdown with validation, permission checks, and mode selection options. This control allows users to select existing resource groups or create new ones.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst resourceGroupDropDown = FxResourceGroupDropDown.create(container, {\n    initialResourceGroupName: provisioning.initialValues.resourceGroupNames,\n    infoBalloonContent: ClientResources.infoBalloonContent,\n    label: ko.observable<string>(ClientResources.resourceGroup),\n    subscriptionId: this._subscription,\n    validations: [\n        new Validations.Required(ClientResources.selectResourceGroup),\n        new FxAzure.RequiredPermissionsValidator(requiredPermissionsCallback),\n        ...(rgPolicyValidation ? [rgPolicyValidation] : []),\n    ],\n    // Optional -> RBAC permission checks on the resource group. Here, we're making sure the\n    // user can create an engine under the selected resource group, but you can add any actions\n    // necessary to have permissions for on the resource group.\n    requiredPermissions: {\n        actions: actions,\n        // Optional -> You can supply a custom error message. The message will be formatted\n        // with the list of actions (so you can have {0} in your message and it will be replaced\n        // with the array of actions).\n        message: ClientResources.enginePermissionCheckCustomValidationMessage.format(actions.toString()),\n    },\n    // Optional -> Will determine which mode is selectable by the user. It defaults to Both.\n    allowedMode: allowedMode, // Alternatively Mode.UseExisting or Mode.CreateNew\n    createNewPlaceholder: ClientResources.createNew,\n    // This will shift the dropdown to the right and add a connector implying a parent/child relationship with the subscription.\n    nested: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Vault Managed Storage and SAS Token using PowerShell\nDESCRIPTION: Provides PowerShell commands to add an Azure Storage Account as a managed account within Azure Key Vault and then configure a SAS definition for generating account SAS tokens. This requires the Azure PowerShell module, an existing Key Vault, and a Storage Account. Key parameters include vault name, storage account details, SAS template URI, and validity period.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$regenerationPeriod = [System.Timespan]::FromDays(365)\n\nAdd-AzureKeyVaultManagedStorageAccount -VaultName $keyVaultName -AccountName $storageAccountName -AccountResourceId $storageAccount.Id -ActiveKeyName $storageAccountKey -RegenerationPeriod $regenerationPeriod\n\n$sctx = New-AzureStorageContext -StorageAccountName $storageAccountName -Protocol Https -StorageAccountKey $storageAccountKey\n\n$start = [System.DateTime]::Now.AddDays(-1)\n\n$end = [System.DateTime]::Now.AddMonths(1)\n\n$at = \"sv=2018-03-28&ss=b&srt=sco&sp=rwl&se=2020-05-05T00:00:00Z&spr=https\"\n\n$validityPeriod = [System.Timespan]::FromDays(10)\n\nSet-AzureKeyVaultManagedStorageSasDefinition -AccountName $storageAccountName -VaultName $keyVaultName -Name \"Ev2DeploymentSas\" -TemplateUri $at -SasType 'account' -ValidityPeriod $validityPeriod\n```\n\n----------------------------------------\n\nTITLE: Defining an Asset Type for ARM Resources in Azure Portal\nDESCRIPTION: JSON definition for an asset that opens a browse view for ARM resources. This configuration specifies the asset's display names, icon, and the ARM resource type it represents. When the browse type is set to 'ResourceType', clicking this asset will show a list of all resources of the specified ARM resource type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n  \"assetType\": {\n    \"name\": \"ExtensionResource\",\n    \"keywords\":\"keywords\",\n    \"displayNames\": {\n      \"singular\": \"singular\",\n      \"plural\": \"plural\",\n      \"lowerSingular\": \"lowerSingular\",\n      \"lowerPlural\": \"lowerPlural\"\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Logos.MicrosoftSquares\",\n    \"browse\": {\n      \"type\": \"ResourceType\",\n      \"query\"\n    },\n    \"resourceType\": {\n      \"name\": \"Providers.Test/statefulIbizaEngines\",\n      \"apiVersion\": \"2014-04-01\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Common.FileUpload Control (JSON)\nDESCRIPTION: Demonstrates how to configure the Microsoft.Common.FileUpload control with various options including constraints, upload mode, and file type restrictions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"element1\",\n\"type\": \"Microsoft.Common.FileUpload\",\n\"label\": \"Some file upload\",\n\"toolTip\": \"\",\n\"constraints\": {\n    \"required\": true,\n    \"accept\": \".doc,.docx,.xml,application/msword\"\n},\n\"options\": {\n    \"multiple\": false,\n    \"uploadMode\": \"file\",\n    \"openMode\": \"text\",\n    \"encoding\": \"UTF-8\"\n},\n\"extendExpirationDate\": false,\n\"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Blade ViewModel in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a Menu Blade ViewModel with multiple menu items, groups, and an overview section. It shows the structure for creating menu items that open different blades and how to set up tab items within a menu item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-menublade.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@MenuBlade.Decorator()\nexport class SampleMenuBlade {\n    public title = BladeClientResources.menuBladeTitle;\n    public subtitle = ClientResources.samples;\n\n    public context: MenuBlade.Context<void>;\n\n    public viewModel: MenuBlade.ViewModel2;\n\n    public async onInitialize() {\n        const { container } = this.context;\n\n        this.viewModel = MenuBlade.ViewModel2.create(container, {\n            groups: [\n                {\n                    id: \"default\",\n                    displayText: BladeClientResources.menuBladeSamples,\n                    items: [\n                        {\n                            id: \"controlsMenuBladeContentAreaBlade\",\n                            displayText: BladeClientResources.controlsMenuBladeContentAreaBladeTitle,\n                            icon: null,\n                            supplyBladeReference: () => {\n                                return BladeReferences.forBlade(\"ControlsMenuBladeContentAreaBlade\").createReference();\n                            },\n                        },\n                        {\n                            id: \"tabMenu\",\n                            displayText: BladeClientResources.tabMenuBladeTitle,\n                            icon: null,\n                            tabItems: [\n                                {\n                                    id: \"tabMenu0\",\n                                    displayText: BladeClientResources.tabMenuBlade0Title,\n                                    supplyBladeReference: () => {\n                                        return BladeReferences.forBlade(\"TabContentAreaBlade0\").createReference();\n                                    },\n                                },\n                                {\n                                    id: \"tabMenu1\",\n                                    displayText: BladeClientResources.tabMenuBlade1Title,\n                                    supplyBladeReference: () => {\n                                        return BladeReferences.forBlade(\"TabContentAreaBlade1\").createReference();\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                },\n            ],\n            overview: {\n                id: \"overview\",\n                displayText: BladeClientResources.overviewBladeTitle,\n                icon: null,\n                supplyBladeReference: () => {\n                    return BladeReferences.forBlade(\"MenuBladeOverviewBlade\").createReference();\n                },\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DataContext for an Area in Azure Portal Extensions (TypeScript)\nDESCRIPTION: Demonstrates how to register a DataContext factory for a specific Area in Program.ts during extension initialization. It uses setDataContextFactory on a named Area ViewModel factory to specify the module path and provide a factory function for constructing a new DataContext. This ensures all view models within the Area are constructed with the correct DataContext instance, supporting dependency injection and data sharing across blades. The module path string and contextModule.DataContext are required parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n        this.viewModelFactories.V1$$MasterDetail().setDataContextFactory<typeof MasterDetailV1>(\n            \"./V1/MasterDetail/MasterDetailArea\",\n            (contextModule) => new contextModule.DataContext());\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberFormat with Options in TypeScript\nDESCRIPTION: Shows how to use the options parameter in NumberFormat.create() to customize number formatting. Examples include currency formatting with Euro and Japanese Yen, and limiting significant digits for numerical display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar number = 123456.789;\n\n// request a currency format\n// User locale is 'de-DE'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'EUR' }).format(number));\n// → 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\n// User locale is 'ja-JP'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'JPY' }).format(number));\n// → ￥123,457\n\n// limit to three significant digits\n// User locale is 'en-IN'\nconsole.log(Globalization.NumberFormat.create({ maximumSignificantDigits: 3 }).format(number));\n// → 1,23,000\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Absence\nDESCRIPTION: Shows how to verify that an element does not exist using FindElements and LINQ.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nwebDriver.WaitUntil(() => portal.StartBoard.FindElements<Part>()\n                                            .Count(p => p.PartTitle.Equals(\"John Doe\")) == 0,\n                        \"Expected to not find a part with title 'John Doe' in the StartBoard\");\n```\n\n----------------------------------------\n\nTITLE: Complete App Services ARG Query\nDESCRIPTION: Comprehensive KQL query that replicates the full App Services browse experience with pricing tier, status, and app type transformations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_4\n\nLANGUAGE: kql\nCODE:\n```\nwhere type =~ 'microsoft.web/sites'\n| extend appServicePlan = extract('serverfarms/([^/]+)', 1, tostring(properties.serverFarmId))\n| extend appServicePlanId = properties.serverFarmId\n| extend state = tolower(properties.state)\n| extend sku = tolower(properties.sku)\n| extend pricingTier = case(\nsku == 'free',\n'Free',\nsku == 'shared',\n'Shared',\nsku == 'dynamic',\n'Dynamic',\nsku == 'isolated',\n'Isolated',\nsku == 'premiumv2',\n'PremiumV2',\nsku == 'premium',\n'Premium',\n'Standard')\n| extend status = case(\nstate == 'stopped',\n'Stopped',\nstate == 'running',\n'Running',\n'Other')\n| extend appType = case(\nkind contains 'botapp',\n'Bot Service',\nkind contains 'api',\n'Api App',\nkind contains 'functionapp',\n'Function App',\n'Web App')\n| project name,resourceGroup,kind,location,id,type,subscriptionId,tags\n, appServicePlanId, pricingTier, status, appType\n```\n\n----------------------------------------\n\nTITLE: Binding Form Fields Using String-Typed Path in TypeScript\nDESCRIPTION: Example of the discouraged approach using a string-typed path to bind a TextBox form field to an EditScope observable. This method lacks compile-time verification.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.textBoxViewModel = new ObsoleteTextBox.ViewModel(container, this, \"name\", textBoxOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Structure Interfaces\nDESCRIPTION: TypeScript interfaces defining the structure of menu groups, items and common base properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MenuGroup extends MenuItemBase {\n    items: MenuItem[];\n}\n\ninterface MenuItem extends MenuItemBase, FxComposition.Selectable2Options<FxComposition.BladeReference<any>> {\n    icon: FxBase.Image;\n    enabled?: KnockoutObservableBase<boolean>;\n}\n\ninterface MenuItemBase {\n    id: string;\n    displayText: string;\n    keywords?: string | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid with Selectable Rows in TypeScript\nDESCRIPTION: Sets up a data grid with selectable rows and click handling. Configures grid with Single selection mode and defines columns to display SSN ID and name from Person objects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _initializeGridSample(container: BladeContainer, dataContext: DataContext) {\n    this._view = dataContext.personData.peopleQuery.createView(container);\n\n    const selectionOptions: Grid.SelectableRowExtensionOptions<Person, Person> = {\n        selectableRow: {\n            selectionMode: Grid.RowSelectionMode.Single,\n        },\n        onRowClicked: this.onRowClick.bind(this),\n    };\n\n    this.grid = new Grid.ViewModel<Person, Person>(container, this._view.items, Grid.Extensions.SelectableRow, selectionOptions);\n    this.grid.columns([\n        {\n            itemKey: \"ssnId\",\n        },\n        {\n            itemKey: \"name\",\n        }]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an OpenMarketplaceCommand in JSON\nDESCRIPTION: This JSON object defines an instance of `OpenMarketplaceCommand`. It specifies the command's unique identifier (`id`), display name (`displayName`), icon, the target Azure Marketplace item (`marketplaceItemId`), and its enabled/disabled state (`disabled`). This command is used within the Azure Portal to navigate directly to the specified Marketplace item (Microsoft.WindowsServer2016Datacenter-ARM).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewOpenMarketplaceCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"OpenMarketplaceCommand\",\n    \"id\": \"OpenMarketplaceId1\",\n    \"displayName\": \"openMarketplace\",\n    \"icon\": \"MsPortalFx.Base.Images.Save\",\n    \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n    \"disabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorials Tab View in Azure Portal\nDESCRIPTION: JSON configuration for implementing a Tutorials tab view in Azure Portal. This snippet demonstrates how to set up training tiles, video groups, and useful links sections with customizable display names, content, and actions. The configuration should be added to the properties 'properties.tabs' section in the Declarative Resource Overview schema.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-TutorialsTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Tutorials\",\n    \"tilesGroup\": {\n        \"displayName\": {\n            \"property\": \"freeTrainingsFromMicrosoft\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tile1Title\"\n                },\n                \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n                \"subtitle\": {\n                    \"property\": \"tile1Subtitle\"\n                },\n                \"description\": {\n                    \"property\": \"tile1Description\"\n                },\n                \"action\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"displayName\": {\n                        \"property\": \"start\"\n                    }\n                }\n            }\n        ]\n    },\n    \"videosGroup\": {\n        \"displayName\": {\n            \"property\": \"tab2videosTitle\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tab2feature1Title\"\n                },\n                \"description\": {\n                    \"property\": \"tab2feature1Description\"\n                },\n                \"learnMore\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"ariaLabel\": \"Learn more about Azure\"\n                },\n                \"video\": {\n                    \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n                }\n            }\n        ]\n    },\n    \"linksGroup\": {\n        \"displayName\": \"Useful links\",\n        \"items\": [\n            {\n                \"title\": \"Concepts\",\n                \"action\": [\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Azure Managed applications overview\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Service Catalog applications\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Managed applications in Azure Marketplace\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DataView for Website Entities in TypeScript\nDESCRIPTION: This snippet shows how to create a DataView for loading and refreshing website entity data in a Blade or Part view model constructor.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websiteEntityView = dataContext.websiteEntities.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Sending Theme Information to FrameBlade in TypeScript\nDESCRIPTION: Demonstrates how to pass the selected UI theme to a FrameBlade using the postMessage method. This allows extensions to implement theme support where the user can select a theme that is then applied in the iframe UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Get theme class and pass it to App Blade\nMsPortalFx.Services.getSettings().then(settings => {\n    const theme = settings[\"fxs-theme\"];\n    theme.subscribe(container, theme =>\n        this.postMessage(new FxAppBlade.Message(\"theme\", theme.name))\n    ).callback(theme());\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ParameterProvider with EditScope Entity Arrays - TypeScript\nDESCRIPTION: This code defines a ParameterProvider that maps incoming data to a Knockout observable array and uses EditScope's 'getEntityArrayWithEdits' to output an array reflecting user-edited, created, or deleted items. Requires MsPortalFx.ViewModels.ParameterProvider and Knockout observables. Inputs are arrays of ServerConfig, outputs are observable arrays updated for edit tracking. Intended for use in editable grid scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<ServerConfig[], KnockoutObservableArray<ServerConfig>>(container, {\n    editScopeMetadataType: ServerConfigMetadata.name,\n    mapIncomingDataForEditScope: (incoming) => {\n        return ko.observableArray(incoming);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(outgoing).arrayWithEdits;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BladeReferences for Parameter Collection in TypeScript\nDESCRIPTION: Imports the necessary `BladeReferences` object from the `Fx/Composition` module. This is the first step required by a Parameter Collector to create references for Parameter Provider blades.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { BladeReferences } from \"Fx/Composition\";\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Table in Markdown\nDESCRIPTION: Table defining performance goals and measurement approaches for different areas of the Azure Portal including extensions, blades, network requests and parts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Area               | Goal                       | Telemetry Action   | How is it measured? |\n| ------------------ | -------------------------- | ------------------ | ------------------- |\n| Extension          | < 2 secs @ 95th percentile | ExtensionLoad      | The time it takes for your extension's home page to be loaded and initial scripts, the `initialize` call to complete within your Extension definition file  |\n| Blade - MsPortalFx | < 4 secs @ 95th percentile | BladeFullReady     | The time it takes for the blade's `onInitialize` or `onInputsSet` to resolve and all the parts on the blade to become ready |\n| Blade - ReactView  | > 90  @ 5th percentile     | BladeLighthouse    | Using standard performance insights, see below for the full details. |\n| Network requests   | < 1 secs @ 95th percentile | ClientAjax (table) | The time it takes for the client to complete the request. This is only measure for interactive requests. |\n| Part               | < 4 secs @ 95th percentile | PartReady          | Time it takes for the part to be rendered and then the part's OnInputsSet to resolve |\n```\n\n----------------------------------------\n\nTITLE: Creating MergedKind with Multiple Kinds for Browse View – XML\nDESCRIPTION: This XML sample demonstrates how to merge several resource kinds into a single browse view using the <MergedKind> element. Each <Kind> inside <MergedKind> defines its own display attributes such as icons and blades. The merged kind itself is not a real resource kind and is used purely for organizational and browsing purposes; it is not emitted as a kind in the manifest. This is used to present multiple related kinds as one UI entity in the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\\\"Watch\\\">\\n    <ResourceType ResourceTypeName=\\\"Microsoft.Test/watches\\\"\\n                  ApiVersion=\\\"2017-04-01\\\">\\n      <!--\\n        The 'garmin-merged' kind has two merged kinds, 'garmin' and 'garmin2'. The 'garmin-merged' kind is not a real\\n        kind and is not emitted to the manifest as a kind, it is organizational only.\\n      -->\\n      <MergedKind Name=\\\"garmin-merged\\\">\\n        <Kind Name=\\\"garmin\\\"\\n              CompositeDisplayName=\\\"{Resource AssetTypeNames.Watch.Garmin, Module=ClientResources}\\\"\\n              Icon=\\\"{Svg File=../../Svg/Watches/garmin.svg}\\\"\\n              BladeName=\\\"GarminWatchBlade\\\"\\n              PartName=\\\"GarminWatchTile\\\" />\\n        <Kind Name=\\\"garmin2\\\"\\n              CompositeDisplayName=\\\"{Resource AssetTypeNames.Watch.Garmin2, Module=ClientResources}\\\"\\n              Icon=\\\"{Svg File=../../Svg/Watches/garmin2.svg}\\\"\\n              BladeName=\\\"Garmin2WatchBlade\\\"\\n              PartName=\\\"Garmin2WatchTile\\\" />\\n      </MergedKind>\\n    </ResourceType>\\n  </AssetType>\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated AJAX Calls in Azure Portal Extensions\nDESCRIPTION: Example of using MsPortalFx.Base.Net.ajax() for making authenticated calls to backend services. This approach allows passing JWT tokens for end-to-end authentication from client to ARM APIs via server proxies.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nvar promise = MsPortalFx.Base.Net.ajax({\n    uri: \"/api/websites/list\",\n    type: \"GET\",\n    dataType: \"json\",\n    cache: false,\n    contentType: \"application/json\",\n    data: JSON.stringify({ param: \"value\" })\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Date/Time Formatting with Options using MsPortalFx/Globalization in TypeScript\nDESCRIPTION: This example illustrates how to customize date and time formatting using the `options` object passed to `Globalization.DateTimeFormat.create()`. It shows how to specify components like weekday, year, month, day, time zone, time zone name, hour, minute, second, and whether to use 12-hour time. It also includes an example using the standard `toLocaleString` method with similar options for comparison.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)); \n\n// request a weekday along with a long date // User locale is 'de-DE'\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Donnerstag, 20. Dezember 2012\"\n// an application may want to use UTC and make that visible // User locale is 'en-US' options.timeZone = 'UTC';\noptions.timeZoneName = 'short';\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Thursday, December 20, 2012, GMT\"\n// sometimes you want to be more precise // User locale is 'en-AU'\noptions = {\nhour: 'numeric', minute: 'numeric', second: 'numeric',\ntimeZoneName: 'short'\n};\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"2:00:00 pm AEDT\"\n// sometimes even the US needs 24-hour time // User locale is 'en-US'\noptions = {\nyear: 'numeric', month: 'numeric', day: 'numeric',\nhour: 'numeric', minute: 'numeric', second: 'numeric',\nhour12: false\n};\nconsole.log(date.toLocaleString(options));\n// → \"12/19/2012, 19:00:00\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining View Command Kinds Enum in Azure Portal\nDESCRIPTION: This enum defines the permitted values for view command kinds in the Azure Portal. It includes various command types such as opening blades, marketplace commands, menu commands, and resource management actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-viewCommandKinds-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- OpenBladeCommand\n- OpenMarketplaceCommand\n- MenuCommand\n- ArmCommand\n- DeleteCommand\n- MoveCommand\n- RefreshCommand\n```\n\n----------------------------------------\n\nTITLE: Setting Playwright as Default Automation in config.json\nDESCRIPTION: Configuration option to make Playwright the default automation tool instead of Selenium WebDriver. This setting applies globally to all tests run using this configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"browserAutomation\": \"playwright\"\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Portal Menu and Marketplace Commands - JSON\nDESCRIPTION: This snippet demonstrates how to configure composite menu commands for Azure Portal using a JSON structure. It creates a MenuCommand with two sub-commands: one to open a context blade (OpenBladeCommand) and another to launch a marketplace item (OpenMarketplaceCommand). Parameters such as display names, icons, blade details, and marketplace item IDs are specified. Dependencies include the Azure Portal extension or framework supporting these command kinds, and the input structure expects each command to define required visual and behavioral attributes. Outputs are UI menu actions within the portal, and the structure assumes referenced resources (e.g., images/blades) are valid and available.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewOpenMarketplaceCommandWithContent.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        },\n        {\n            \"kind\": \"OpenMarketplaceCommand\",\n            \"id\": \"OpenMarketplaceCommandId1\",\n            \"displayName\": \"openMarketplace\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"content\": \"content:Second line description\",\n            \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n            \"disabled\": false\n        }\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Exporting an IPersistentContentCache Implementation with Dependency Injection in C#\nDESCRIPTION: Implements a persistent content cache for Azure Portal extensions by deriving from BlobStorageBackedPersistentContentCache and exporting via MEF. Uses injected settings for the blob storage connection string, ensuring script and static asset availability across extension upgrades. Requires a compatible storage account, proper namespace, and dependencies on Microsoft.Portal.Framework components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-persistent-caching-of-scripts.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\\nusing System.ComponentModel.Composition;\\nusing Microsoft.Portal.Framework;\\n\\nnamespace <your.extension.namespace>\\n{\\n    /// <summary>\\n    /// The configuration for hubs content caching.\\n    /// </summary>\\n    [Export(typeof(HubsBlobStorageBackedContentCacheSettings))]\\n    internal class HubsBlobStorageBackedContentCacheSettings : ConfigurationSettings\\n    {\\n        /// <summary>\\n        /// Gets the hubs content cache storage connection string.\\n        /// </summary>\\n        [ConfigurationSetting(DefaultValue = \"\")]\\n        public SecureConfigurationConnectionString StorageConnectionString\\n        {\\n            get;\\n            private set;\\n        }\\n    }\\n\\n    /// <summary>\\n    /// Stores content in blob storage as block blobs.\\n    /// Used to ensure that cached content is available to clients\\n    /// even when the extension server code is newer/older than the content requested.\\n    /// </summary>\\n    [Export(typeof(IPersistentContentCache))]\\n    internal class HubsBlobStorageBackedContentCache : BlobStorageBackedPersistentContentCache\\n    {\\n        /// <summary>\\n        /// /// Creates an instance of the cache.\\n        /// </summary>\\n        /// <param name=\"applicationContext\"> Application context which has environment settings.</param>\\n        /// <param name=\"settings\"> The content cache settings to use.</param>\\n        /// <param name=\"tracer\"> The tracer to use for any logging.</param>\\n        [ImportingConstructor]\\n        public HubsBlobStorageBackedContentCache(\\n            ApplicationContext applicationContext,\\n            HubsBlobStorageBackedContentCacheSettings settings,\\n            ICommonTracer tracer)\\n            :base(settings.StorageConnectionString.ToString(), \"HubsExtensionContentCache\", applicationContext, tracer)\\n        {\\n        }\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Telemetry Header for Network Requests in KnockoutJS Blades\nDESCRIPTION: Example of how to properly name network requests in KnockoutJS Blades by using the setTelemetryHeader option with the batch API to identify data load operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// <docsBatchLoadData>\nconst loadDataFromARM = batch<Resource>({\n    type: \"GET\",\n    uri: parameters.resourceId,\n    setTelemetryHeader: \"DataLoadForTemplateBlade\",\n});\n// </docsBatchLoadData>\n```\n\n----------------------------------------\n\nTITLE: Chaining map() and filter() Operations in TypeScript\nDESCRIPTION: Example of chaining filter() and map() operations to transform data. First filters people data to only include Lumia 520 owners, then maps the filtered data to include only the name and ssnId properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Wire up the contents of the grid to the data view.\nthis._view = dataContext.personData.peopleQuery.createView(container);\nvar projectedItems = this._view.items\n    .filter((person: SamplesExtension.DataModels.Person) => {\n        return person.smartPhone() === \"Lumia 520\";\n    })\n    .map((person: SamplesExtension.DataModels.Person) => {\n        return <MappedPerson>{\n            name: person.name,\n            ssnId: person.ssnId\n        };\n    });\n\nvar personItems = ko.observableArray<MappedPerson>([]);\ncontainer.registerForDispose(projectedItems.subscribe(personItems));\n```\n\n----------------------------------------\n\nTITLE: Logging Telemetry in React for Azure Portal\nDESCRIPTION: This snippet demonstrates how to log telemetry events using the Az.Trace method in React components for the Azure Portal. It includes parameters for timestamp, source, action, and optional fields like duration and additional data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Az from \"@microsoft/azureportal-reactview/Az\";\nAz.Trace([{\n    timestamp: number;\n    source: string;\n    action: string;\n    actionModifier?: string;\n    duration?: number;\n    name?: string;\n    data?: any;\n}]);\n```\n\n----------------------------------------\n\nTITLE: Configuring VirtualNetworkCombo Control in Azure Portal\nDESCRIPTION: Example configuration for a VirtualNetworkCombo control that enables users to create or select a virtual network with two subnets. Includes network constraints, subnet configurations, and visibility settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Network.VirtualNetworkCombo\",\n    \"label\": {\n      \"virtualNetwork\": \"Virtual network\",\n      \"subnets\": \"Subnets\"\n    },\n    \"toolTip\": {\n      \"virtualNetwork\": \"\",\n      \"subnets\": \"\"\n    },\n    \"defaultValue\": {\n      \"name\": \"vnet01\",\n      \"addressPrefixSize\": \"/16\"\n    },\n    \"constraints\": {\n      \"minAddressPrefixSize\": \"/16\"\n    },\n    \"options\": {\n      \"hideExisting\": false\n    },\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"resourceGroupName\": \"[steps('basics').resourceScope.resourceGroup.name]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"subnets\": {\n      \"subnet1\": {\n        \"label\": \"First subnet\",\n        \"defaultValue\": {\n          \"name\": \"subnet-1\",\n          \"addressPrefixSize\": \"/24\"\n        },\n        \"constraints\": {\n          \"minAddressPrefixSize\": \"/24\",\n          \"minAddressCount\": 12,\n          \"requireContiguousAddresses\": true\n        }\n      },\n      \"subnet2\": {\n        \"label\": \"Second subnet\",\n        \"defaultValue\": {\n          \"name\": \"subnet-2\",\n          \"addressPrefixSize\": \"/26\"\n        },\n        \"constraints\": {\n          \"minAddressPrefixSize\": \"/26\",\n          \"minAddressCount\": 8,\n          \"requireContiguousAddresses\": true\n        }\n      }\n    },\n    \"visible\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing EntityCache with findCachedEntity in TypeScript\nDESCRIPTION: Demonstrates initializing an `MsPortalFx.Data.EntityCache` for `WebsiteModel`. It configures the `findCachedEntity` option to look up existing entities in a related `QueryCache` (`this.websitesQuery`) based on an ID match, thus avoiding redundant data fetching when navigating from a list to details view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nthis.websiteEntities = new MsPortalFx.Data.EntityCache<SamplesExtension.DataModels.WebsiteModel, number>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(DataShared.websiteByIdUri),\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        }\n    }\n});\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Common Command Properties in Azure Portal\nDESCRIPTION: This snippet outlines the structure and properties of command objects used in the Azure Portal. It specifies required fields like id, displayName, and icon, as well as optional fields like ariaLabel, tooltip, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-commandBase.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|id|True|Id of the command\n|displayName|True|Display name of the command\n|ariaLabel|False|label of the command used for screen reader users.\n|tooltip|False|tooltip of the command\n|icon|True|Icon to display with the command\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Opening Child Blades with Different Link Types in TypeScript\nDESCRIPTION: Demonstrates various methods to open child blades using different link types. Shows implementations for basic click handlers, BladeLink, ResourceLink, and dynamic link references with callback monitoring of access method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.onOpenChildBladeLinkClick = () => {\n    void this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n};\n\nthis.onOpenChildBladeLinkClickWithBladeLink = {\n    bladeReference: BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference(),\n};\n\nthis.onOpenChildBladeLinkClickWithDynamicBladeLink = {\n    bladeReference: this.dynamicBladeRef,\n    onLinkOpened: (keypress) => {\n        this.bladeLinkClickCount(this.bladeLinkClickCount() + 1);\n\n        if (keypress) {\n            console.log(\"The BladeLink has been accessed by 'Enter' key\");\n        } else {\n            console.log(\"The BladeLink has been accessed by left-Click\");\n        }\n    },\n};\n\nthis.onOpenChildBladeLinkClickWithResourceLink = {\n    resourceId: \"/subscriptions/sub123/resourceGroups/accounts/providers/Microsoft.test/accounts/Peter\",\n};\n\nthis.onOpenChildBladeLinkClickWithDynamicResourceLink = {\n    resourceId: this.dynamicResourceId,\n    onLinkOpened: (keypress) => {\n        this.resourceLinkClickCount(this.resourceLinkClickCount() + 1);\n\n        if (keypress) {\n            console.log(\"The ResourceLink has been accessed by 'Enter' key\");\n        } else {\n            console.log(\"The ResourceLink has been accessed by left-Click\");\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing User Claims from Azure Portal Extension Client\nDESCRIPTION: Client-side code for retrieving common user claims using the getUserInfo API. This method returns user information including email, name, and directory details. Note that secondary claims may not always be available and implementations should not make hard dependencies on these claims.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nMsPortalFx.Base.Security.getUserInfo() : Promise<MsPortalFx.Base.Security.UserInfo>\n\ninterface UserInfo {\n    email: string;          // Guest accounts not homed in the current directory will have a UPN and not a valid email address\n    givenName: string;      // Name may be empty if not provided in the token\n    surname: string;        // Name may be empty if not provided in the token\n    directoryId: string;\n    directoryName: string;  // Directory name may be empty if calling Graph fails\n    domainName: string;     // Directory domain may be empty if calling Graph fails\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Information View in Azure Portal\nDESCRIPTION: This example shows how to set up an Information view with multiple action types including URL links, blade openings, and menu actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Information\",\n    \"displayName\": \"Information\",\n    \"features\": [\n        {\n            \"title\": \"Declarative Resources\",\n            \"action\": [\n                {\n                    \"displayName\": \"Declarative Developer guide\",\n                    \"url\": \"https://aka.ms/portalfx/declarative\"\n                },\n                {\n                    \"displayName\": \"Declarative Form Sandbox\",\n                    \"url\": \"https://aka.ms/form/sandbox\"\n                },\n                {\n                    \"displayName\": \"Open Active Directory\",\n                    \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                    }\n                },\n                {\n                    \"displayName\": \"Open Tags\",\n                    \"menu\": \"tags\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing and Handling Theme Selection Events in FrameBlade - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to obtain the current theme from portal settings and transmit the theme information to an App Blade via a postMessage. It leverages MsPortalFx.Services.getSettings() to retrieve theme settings, subscribes to changes, and posts the current theme name to the FrameBlade. Dependencies are MsPortalFx.Services (for settings retrieval) and an asynchronous message-posting interface (FxAppBlade.Message). Expects the UI to handle the received 'theme' message and update styles accordingly, as well as required configuration of the theme observable.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Get theme class and pass it to App Blade\nMsPortalFx.Services.getSettings().then(settings => {\n    const theme = settings[\"fxs-theme\"];\n    theme.subscribe(container, theme =>\n        this.postMessage(new FxAppBlade.Message(\"theme\", theme.name))\n    ).callback(theme());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Menu Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for resource menu configuration, including menu groups, default item ID, and optional menu options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceMenuConfig {\n    groups: FxMenuBlade.MenuGroup[];\n    defaultItemId: string;\n    options?: ResourceMenuOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Menu in Azure Portal\nDESCRIPTION: Example configuration for a resource menu in Azure Portal's asset type definition. Shows how to set up menu groups, items, and options including support for conditional show/hide/replace menu items based on portal flags, extension flags, and AFEC flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n  \"assetType\": {\n    \"name\": \"DxExtensionResource\",\n    \"keywords\":\"keywords\",\n    \"displayNames\": {\n      \"singular\": \"singular\",\n      \"plural\": \"plural\",\n      \"lowerSingular\": \"lowerSingular\",\n      \"lowerPlural\": \"lowerPlural\"\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Logos.MicrosoftSquares\",\n    \"browse\": {\n      \"type\": \"ResourceType\"\n    },\n    \"menu\": {\n      \"overview\": {\n        \"displayName\": \"dxResourceDisplayName\",\n        \"icon\": \"MsPortalFx.Base.Images.Logos.MicrosoftSquares\",\n        \"id\": \"dxresourceid\",\n        \"blade\": {\n          \"name\": \"ResourceOverviewWithEssentials_Dx\",\n          \"parameters\": {\n            \"id\": \"{resourceId}\"\n          }\n        }\n      },\n      \"groups\": [\n        {\n          \"displayName\": {\n            \"property\": \"learnMoreDisplayName\"\n          },\n          \"id\": \"learnmore\",\n          \"items\": [\n            {\n              \"id\": \"pleaseread\",\n              \"displayName\": {\n                \"property\": \"pleasereadDisplayName\"\n              },\n              \"blade\": {\n                \"name\": \"MarkdownView_Dx\"\n              },\n              \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\"\n            },\n            {\n              \"id\": \"pleaseread2\",\n              \"displayName\": {\n                \"property\": \"pleaseread2DisplayName\"\n              },\n              \"blade\": {\n                \"name\": \"GetStartedView_Dx\"\n              },\n              \"icon\": \"MsPortalFx.Base.Images.ArrowUp\"\n            }\n          ]\n        }\n      ],\n      \"options\": {\n        \"enableMetrics\": true,\n        \"enableRbac\": true,\n        \"enableProperties\": true\n      }\n    },\n    \"resourceType\": {\n      \"name\": \"Providers.Test/statefulIbizaEngines\",\n      \"apiVersion\": \"2014-04-01\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Storage Account Keys POST Request\nDESCRIPTION: Shows how to make a direct POST request to list storage account keys using a full resource ID. Includes condition check and demonstrates how to display the number of keys in the view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      },\n      {       \n         \"name\": \"testPOSTList\",\n         \"method\": \"POST\",    \n         \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/Microsoft.Storage/storageAccounts/e2eteststorageaccount/listKeys\",     \n         \"apiVersion\": \"2021-09-01\",    \n         \"condition\": \"[not(empty(resources('storageAccount').id))]\"     \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST listcount\",\n              \"value\": \"[resources('testPOSTList').keys.length]\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArmCommand Objects for Azure Portal Resources\nDESCRIPTION: Examples of ArmCommand configurations for executing operations on Azure resources. Demonstrates schema command, VM start, and restart operations with conditional enabling based on resource state. Each command specifies an ID, display name, icon, and the ARM API endpoint to call.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewArmCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"command1\",\n    \"displayName\": \"schemaCommand\",\n    \"icon\": \"MsPortalFx.Base.Images.Delete\",\n    \"confirmation\": {\n        \"title\": \"schemaConfirmationTitle\",\n        \"message\": \"schemaConfirmationMessage\"\n    },\n    \"definition\": {\n        \"httpMethod\": \"post\",\n        \"uri\": \"{resourceid}/schema?api-version=2020-03-01-preview\"\n    },\n\"disabled\": false\n},\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"startButtonID\",\n    \"displayName\": \"start\",\n    \"icon\": \"MsPortalFx.Base.Images.Start\",\n    \"disabled\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n    \"definition\": {\n    \"httpMethod\": \"post\",\n    \"uri\": \"{resourceid}/start?api-version=2020-12-01\"\n    }\n},\n{\n    \"kind\": \"ArmCommand\",\n    \"id\": \"restartButtonID\",\n    \"displayName\": \"restart\",\n    \"icon\": \"MsPortalFx.Base.Images.Redo\",\n    \"disabled\": \"[contains(resources('vmInstanceView').properties.instanceView.statuses.1.code, '/deallocated')]\",\n    \"definition\": {\n    \"httpMethod\": \"post\",\n    \"uri\": \"{resourceid}/restart?api-version=2020-12-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full-Screen Capabilities View in Azure Portal JSON\nDESCRIPTION: This JSON schema defines a full-screen Capabilities view that can be opened from a resource menu. It includes various capability items such as Backup, Disaster recovery, Insights, and Security, each with their own status, actions, and icons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Capabilities\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Capabilities Example\",\n      \"capabilities\": [\n        {\n          \"title\": \"Backup\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n          \"description\": \"Simple and reliable server backup to the cloud\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[contains(resources().name, 'test')]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"true\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"false\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Disaster recovery\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n          \"description\": \"Replicate your virtual machine to another Azure region\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[not(contains(resources().name, 'test'))]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"true\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"false\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Insights\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n          \"description\": \"Enable logs and detailed monitoring capabilities\",\n          \"action\": {\n            \"menu\": \"tags\"\n          },\n          \"status\": {\n            \"value\": \"[resources().properties.test]\",\n            \"valueMapping\": [\n              {\n                \"value\": \"present\",\n                \"displayName\": \"Configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n              },\n              {\n                \"value\": \"notPresent\",\n                \"displayName\": \"Not configured\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                \"action\": {\n                  \"blade\": {\n                    \"name\": \"\",\n                    \"extension\": \"\",\n                    \"parameters\": {},\n                    \"inContextPane\": true\n                  }\n                }\n              },\n              {\n                \"value\": \"null\",\n                \"displayName\": \"Error\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n              },\n              {\n                \"value\": \"undefined\",\n                \"displayName\": \"Error\",\n                \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n              }\n            ]\n          }\n        },\n        {\n          \"title\": \"Security\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n          \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n          \"action\": {\n            \"menu\": \"tags\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in onInputsSet Method in TypeScript\nDESCRIPTION: This code demonstrates how to fetch data when a Blade's inputs change by calling the fetch method on a DataView instance.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change\n */\npublic onInputsSet(): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: this.runningStatus.value() });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.ManagedIdentity.IdentitySelector in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.ManagedIdentity.IdentitySelector control in a JSON deployment template. It includes options for setting the label, tooltip, default values, and visibility options for system and user-assigned identities.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.ManagedIdentity.IdentitySelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"identity\",\n    \"type\": \"Microsoft.ManagedIdentity.IdentitySelector\",\n    \"label\": \"Managed Identity Configuration\",\n    \"toolTip\": {\n      \"systemAssignedIdentity\": \"Enable system assigned identity to grant the resource access to other existing resources.\",\n      \"userAssignedIdentity\": \"Add user assigned identities to grant the resource access to other existing resources.\"\n    },\n    \"defaultValue\": {\n      \"systemAssignedIdentity\": \"Off\"\n    },\n    \"options\": {\n      \"hideSystemAssignedIdentity\": false,\n      \"hideUserAssignedIdentity\": false\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Entity Metadata for Editable Grid - TypeScript\nDESCRIPTION: This snippet shows how to define and register type metadata for an entity array, specifically for a string wrapper used in editable grids. The metadata flags the type as an entity for EditScope edit-tracking compatibility. Prerequisite: MsPortalFx.Data.Metadata.setTypeMetadata. Inputs are type names and property descriptions; outputs are registered metadata for grid binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst wrapperTypeMetadataName = \"ParameterProviderWithEditableStringsBladeViewModel_StringWrapperType\";\nMsPortalFx.Data.Metadata.setTypeMetadata(wrapperTypeMetadataName, {\nname: wrapperTypeMetadataName,\nproperties: {\n    value: null,\n},\nentityType: true,\n});\n\nexport interface StringWrapperType {\nvalue: KnockoutObservable<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Command Implementation\nDESCRIPTION: Implementation of a refresh command for Blade/Part view models that handles user-initiated refresh actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass RefreshCommand implements MsPortalFx.ViewModels.Commands.Command<void> {\n    private _websiteView: MsPortalFx.Data.EntityView<Website>;\n\n    public canExecute: KnockoutObservableBase<boolean>;\n\n    constructor(websiteView: MsPortalFx.Data.EntityView<Website>) {\n        this.canExecute = ko.computed(() => {\n            return !websiteView.loading();\n        });\n\n        this._websiteView = websiteView;\n    }\n\n    public execute(): Promise<any> {\n        return this._websiteView.refresh();\n    }\n```\n\n----------------------------------------\n\nTITLE: Form Step Properties Schema Definition\nDESCRIPTION: Defines the schema for form step configuration without resource scope, including required properties like name, label, and elements, as well as optional properties like description and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formSteps-formStepWithoutResourceScope.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the step/tab instance\n|label|True|Display name of the step/tab\n|description|False|Description of the step/tab\n|elements|True|List of form controls to be rendered in the the step. See [formControlsWithoutResourceScope](dx-view-formViewType-formControlsWithoutResourceScope.md).\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Creating a FrameBlade TypeScript Class with Decorator\nDESCRIPTION: TypeScript class that registers a FrameBlade with an extension using the @FrameBlade decorator. This class handles initialization, message passing with the iframe, and blade operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* View model for a FrameBlade.\n*/\n@FrameBlade.Decorator({\n   reflowReady: true,\n})\nexport class SampleFrameBlade {\n   public title = ClientResources.sampleFrameBladeTitle;\n   public subtitle: string;  // This FrameBlade doesn't make use of a subtitle.\n   public context: FrameBlade.Context<void>;\n\n   constructor(\n       private readonly _container: FrameBlade.Container\n   ) {\n   }\n\n   /*\n    * View model for the frame blade.\n    */\n   public viewModel: FrameBlade.ViewModelV2Contract;\n\n   public async onInitialize() {\n       const viewModel = this.viewModel = FrameBlade.createViewModel(this._container, {\n           src: MsPortalFx.Base.Resources.getContentUri(\"/Content/SamplesExtension/framebladepage.html\"),\n           onReceiveMessage: (message: FramePage.Message) => {\n               switch (message.messageType) {\n                   // This is an example of how to listen for messages from your iframe.\n                   case FramePage.MessageType.OpenBlade:\n                       // In this sample, opening a sample child blade.\n                       this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n                       break;\n                   default:\n                       break;\n               }\n           },\n       });\n\n       // This is an example of how to post a message back to your iframe.\n       // Send initialization information to iframe.\n       MsPortalFx.Base.Security.getAuthorizationToken().then((token) => {\n           // Post initialization info from FrameControl to your iframe.\n           viewModel.postMessage({ messageType: FramePage.MessageType.InitInfo, value: { authToken: token.header, resourceId: \"testResourceId\" } });\n       });\n\n       \n```\n\n----------------------------------------\n\nTITLE: Opening Create Blades with Marketplace or Direct Reference in Azure Portal (TypeScript)\nDESCRIPTION: These snippets demonstrate how to use the BladeReferences API in a TypeScript-based Azure portal extension to construct links that open blades for resource creation, either via a Marketplace package or directly. The first snippet builds a Marketplace-backed reference, while the second targets a non-Marketplace custom blade. Required dependencies are the Azure portal extension APIs and appropriate reference data (e.g., marketplaceId, parameters). Blade reference objects are configured with parameters and provisioning flags; their expected input is the configuration object, output is a BladeLink which can be used to trigger blade navigation. Limitations: Only works within Azure portal extension scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic engineBladeLink: BladeLink = {\n    bladeReference: BladeReferences.forMarketplace().createReference({\n        marketplaceId: \"Microsoft.EngineNoPdlV1\",\n        parameters: createEngineBladeParameters,\n    }),\n};\npublic noMarketplaceEngineBladeLink: BladeLink = {\n    bladeReference: BladeReferences.forBlade(\"CreateNoMarketplaceArmEngineBlade\").createReference({\n        doesProvisioning: true,\n        parameters: createEngineBladeParameters,\n    }),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Binding Form Fields Using EditScopeAccessor in TypeScript\nDESCRIPTION: This snippet demonstrates how to bind form fields to EditScope data using the EditScopeAccessor method. It shows both simple binding and advanced binding with data transformation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.textBoxSimpleAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>((data) => { return data.state; }),\n    textBoxSimpleAccessorOptions);\n\nthis.textBoxReadWriteAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>(<MsPortalFx.ViewModels.Forms.EditScopeAccessors.Options<FormIntegratedFormData.FormIntegratedFormData, string>>{\n        readFromEditScope: (data: FormIntegratedFormData.FormIntegratedFormData): string => {\n            return data.state2().toUpperCase();\n        },\n        writeToEditScope: (data: FormIntegratedFormData.FormIntegratedFormData, newValue: string): void => {\n            data.state2(newValue);\n        },\n    }),\n    textBoxReadWriteAccessorOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing DataContext Class with Caches\nDESCRIPTION: Defines a DataContext class that holds QueryCache and EntityCache for managing website data across multiple blades. It includes caches for website queries, single website entities, and edit scope management.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Context for data samples.\n*/\n@Di.Class()\nexport class DataContext {\n   /**\n    * This QueryCache will hold all the website data we get from the website controller.\n    */\n   public websitesQuery: QueryCache<WebsiteModel, WebsiteQueryParams>;\n\n   /**\n    * Provides a cache that will enable retrieving a single website.\n    */\n   public websiteEntities: EntityCache<WebsiteModel, number>;\n\n   /**\n    * Provides a cache for persisting edits against a website.\n    */\n   public editScopeCache: EditScopeCache<WebsiteModel, number>;\n```\n\n----------------------------------------\n\nTITLE: Handling ARM Request Errors in Azure Portal using TypeScript\nDESCRIPTION: This code snippet demonstrates handling specific HTTP status codes (NotFound, Gone, Forbidden, Unauthorized, InternalServerError, ServiceUnavailable, and 0) potentially returned from an Azure Resource Manager (ARM) request. It extracts the status code and message from the error object, formats user-friendly messages using `ResourceMenuNotice` templates and `MsPortalFx` utilities (like `encodeHtml`, `replaceAll`), and calls a `handledError` function with structured error details. It depends on `MsPortalFx`, an `HttpStatusCode` enum, an `armResponseExtractor` function, `ResourceMenuNotice` constants, and a `handledError` function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresourceId = MsPortalFx.encodeHtml(resourceId || \"\");\nconst statusCode = error && (<any>error).httpStatusCode;\nif (statusCode && [HttpStatusCode.NotFound, HttpStatusCode.Gone].includes(statusCode)) {\n    const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n    handledError({\n        message: ResourceMenuNotice.notFoundHeader.format(assetTypeName),\n        code: statusCode,\n        details: MsPortalFx.replaceAll(ResourceMenuNotice.notFoundDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n    });\n    return true;\n}\n\nif (statusCode && [HttpStatusCode.Forbidden, HttpStatusCode.Unauthorized].includes(statusCode)) {\n    const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n    handledError({\n        message: ResourceMenuNotice.unauthorizedHeader.format(assetTypeName),\n        code: statusCode,\n        details: MsPortalFx.replaceAll(ResourceMenuNotice.unauthorizedDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n    });\n    return true;\n}\n\nif (statusCode && [0, HttpStatusCode.InternalServerError, HttpStatusCode.ServiceUnavailable].includes(statusCode)) {\n    const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n    handledError({\n        message: ResourceMenuNotice.unavailableHeader.format(assetTypeName),\n        code: statusCode,\n        details: MsPortalFx.replaceAll(ResourceMenuNotice.unavailableDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n    });\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Observable Array Mutation Example\nDESCRIPTION: Shows the recommended approach for mutating observable arrays to optimize performance.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet tempArray = [];\nfor (i = 0; i < 100; i++) {\n    tempArray.push(i);\n}\nlet numbers = ko.observable(tempArray);\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Picker Blade ViewModel (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the `RobotSpecPickerV3BladeViewModel` class, which serves as the view model for the Spec Picker blade. It extends `MsPortalFx.ViewModels.Blade` and sets the blade's title and subtitle in its constructor using resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* The view model that drives the Virtual Machines specific spec picker blade.\n*/\n@Di.Class(\"viewModel\")\nexport class RobotSpecPickerV3BladeViewModel extends MsPortalFx.ViewModels.Blade {\n   /**\n    * Creates the view model for the spec picker blade.\n    */\n   constructor() {\n       super();\n       this.title(ClientResources.vmSpecPickerBladeTitle);\n       this.subtitle(ClientResources.vmSpecPickerBladeSubtitle);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Extension from a Mapped Domain in Azure Portal\nDESCRIPTION: Example demonstrating how to register an extension that's running on a domain mapped via the hosts file. This registration is temporary and only valid for the current browser session.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sideloading.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalImpl.Extension.registerTestExtension({ name:  \"<extensionName>\", uri: \"https://some.hosts.mapped.domain\"}, true);\n```\n\n----------------------------------------\n\nTITLE: Adding Move Resource Toolbar Command via MoveResourceButton - TypeScript\nDESCRIPTION: This snippet provides the modern and recommended approach for enabling resource moves from a resource blade toolbar in Azure portal extensions by using MoveResourceButton. It illustrates proper instantiation of the toolbar button and inserting it into the toolbar. Requires the Fx/Controls/Toolbar/MoveResourceToolbarButton module and a valid container context. Inputs include the specified resourceId format, expected output is an updated toolbar with the move command enabled for users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemove.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MoveResorceButton = require(\"Fx/Controls/Toolbar/MoveResourceToolbarButton\");\n\nconst moveResourceButton = new MoveResorceButton.ViewModel(container, \n{ \n    resourceId: \"subscriptions/{subId}/resourcegroups/{resourceGroupId}/providers/{providerId}/{resourcetype}/{resourceName}\"\n});\nconst toolBar = new Toolbars.Toolbar(container);\ntoolBar.setItems([moveResourceButton]);\n```\n\n----------------------------------------\n\nTITLE: Binding Blade Parameters to Command Properties in PDL (XML)\nDESCRIPTION: This PDL snippet highlights the use of `<CommandBindings>` within a `<CommandGroupReference>` on a Blade ('ContactHomeBlade'). It demonstrates how to bind a `BladeParameter` ('id') to a specific property ('id') of commands ('BlockContact', 'DeleteContact') within the referenced group ('ContactCommands'), facilitating data transfer to the command's view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"ContactHomeBlade\"\n       ViewModel=\"ContactHomeBladeViewModel\">\n\n  <Blade.Parameters>\n    <Parameter Name=\"id\" Type=\"Key\" />\n  </Blade.Parameters>\n\n  <CommandGroupReference Name=\"ContactCommands\">\n    <CommandBindings Command=\"BlockContact\">\n      <Binding Property=\"id\" Source=\"{BladeParameter id}\" />\n    </CommandBindings>\n    <CommandBindings Command=\"DeleteContact\">\n      <Binding Property=\"id\" Source=\"{BladeParameter id}\" />\n    </CommandBindings>\n  </CommandGroupReference>\n  ...\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: RobotDetails Interface for UI Binding\nDESCRIPTION: Interface definition for the reshaped data that will be bound to the grid UI, combining properties from the original Robot model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Details for the shaped data that is bound to the grid.\n*/\nexport interface RobotDetails {\n   name: KnockoutObservableBase<string>;\n   status: KnockoutObservableBase<string>;\n   modelAndMfg: KnockoutObservableBase<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Named Extension Example for Azure Portal\nDESCRIPTION: Example showing how to register an extension named Microsoft_Azure_Demo running on a specific machine. This registration persists across multiple sessions for the current user.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sideloading.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalImpl.Extension.registerTestExtension({ name: \"Microsoft_Azure_Demo\", uri: \"https://somemachinename\" });\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Options using Globalization.DateTimeFormat in TypeScript\nDESCRIPTION: This snippet expands on Globalization.DateTimeFormat usage by introducing options objects to customize date formatting output, request additional date fields, and specify time zones. It demonstrates how to include weekday and long date formats (e.g., for German), use UTC time display, format with precision (time down to seconds), and switch between 12-hour and 24-hour clocks. Key dependencies are the MsPortalFx/Globalization module and a JavaScript-compatible runtime. Inputs are Date objects and options dictionaries specifying display attributes; outputs are localized, formatted date and time strings per the option and locale combinations. Limitations include reliance on supported locales, and the effect of option configuration may vary between locales.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalization.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\u000b\n\n// request a weekday along with a long date\u000b// User locale is 'de-DE'\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Donnerstag, 20. Dezember 2012\"\n// an application may want to use UTC and make that visible\u000b// User locale is 'en-US'\u000boptions.timeZone = 'UTC';\noptions.timeZoneName = 'short';\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"Thursday, December 20, 2012, GMT\"\n// sometimes you want to be more precise\u000b// User locale is 'en-AU'\noptions = {\nhour: 'numeric', minute: 'numeric', second: 'numeric',\ntimeZoneName: 'short'\n};\nconsole.log(Globalization.DateTimeFormat.create(options).format(date));\n// → \"2:00:00 pm AEDT\"\n// sometimes even the US needs 24-hour time\u000b// User locale is 'en-US'\noptions = {\nyear: 'numeric', month: 'numeric', day: 'numeric',\nhour: 'numeric', minute: 'numeric', second: 'numeric',\nhour12: false\n};\nconsole.log(date.toLocaleString(options));\n// → \"12/19/2012, 19:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Opening Blade on Grid Row Click in TypeScript\nDESCRIPTION: Handles row clicks in a data grid by opening a specific blade with parameters from the clicked item. This method passes the SSN ID from the selected person record to the PersonBlade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onRowClick(item: Person) {\n    void this._container.openBlade(BladeReferences.forBlade(\"PersonBlade\").createReference({\n        parameters: { ssnId: item.ssnId() },\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Flighting for ReactView Blade Redirects using TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to enable flighting for a Blade redirect defined for a ReactView. By adding the `useFlighting: true` property to the `@ReactView.ReplacesOldBlade.Decorator`, the redirect's activation becomes controlled by an experiment configured in the ExP platform. The feature variable name must follow the pattern 'RedirectBlade-{sourceExtensionName}-{sourceBladeName}'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ReactView.ReplacesOldBlade.Decorator({\n\treplacedBlade:  \"LegacyBlade\",\n\textension:  \t\"LegacyExtension\",\n\tuseFlighting:  \ttrue,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining OpenBlade Commands for Azure Portal - JSON\nDESCRIPTION: This JSON snippet defines two OpenBladeCommand objects for the Azure portal, allowing navigation to blades named FormBladeArmRequest_Dx and FormBladeReadonly_Dx. It specifies command icons, ids, and display names, as well as the blade to open and the required parameter (resource id). The second command also sets an inContextPane flag to true, indicating the blade opens as a context pane. Dependencies include the Azure portal framework and the use of portal blade navigation and resource id parameterization. Inputs: command configuration JSON; Outputs: portal navigational commands.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewOpenBladeCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n    \"id\": \"formarmrequestCommand\",\n    \"kind\": \"OpenBladeCommand\",\n    \"displayName\": {\n        \"property\": \"formArmRequest\"\n    },\n    \"blade\": {\n        \"name\": \"FormBladeArmRequest_Dx\",\n        \"parameters\": {\n        \"id\": \"[parameters('id')]\"\n        }\n    }\n},\n{\n    \"icon\": \"MsPortalFx.Base.Images.Book\",\n    \"id\": \"formreadonlyCommand\",\n    \"kind\": \"OpenBladeCommand\",\n    \"displayName\": {\n        \"property\": \"formReadonly\"\n    },\n    \"blade\": {\n        \"name\": \"FormBladeReadonly_Dx\",\n        \"parameters\": {\n        \"id\": \"[parameters('id')]\"\n        },\n        \"inContextPane\": true\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Public IP Address Form Element - Azure Portal - JSON\nDESCRIPTION: This snippet provides a JSON schema for a UI form element to select or input a public IP address within an Azure portal experience. Dependencies include the Azure portal's resource provisioning workflow and support for the specified properties ('Microsoft.Network.PublicIpAddressCombo', labels, tooltips, etc.). Key parameters include property names for the public IP address and domain name label, default values, required constraints, resource scoping expressions, UI display flags, and the zone configuration. The expected input is a well-formed JSON object and the output is its use as a configuration object for rendering the resource selection field. It is limited to form-based, Azure-specific contexts where property bindings and constraints are respected by the front-end implementation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Network.PublicIpAddressCombo.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Network.PublicIpAddressCombo\",\n    \"label\": {\n      \"publicIpAddress\": \"Public IP address\",\n      \"domainNameLabel\": \"Domain name label\"\n    },\n    \"toolTip\": {\n      \"publicIpAddress\": \"\",\n      \"domainNameLabel\": \"\"\n    },\n    \"defaultValue\": {\n      \"publicIpAddressName\": \"ip01\",\n      \"domainNameLabel\": \"mydomain\"\n    },\n    \"constraints\": {\n      \"required\": {\n        \"domainNameLabel\": true\n      }\n    },\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"resourceGroupName\": \"[steps('basics').resourceScope.resourceGroup.name]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"options\": {\n      \"hideNone\": false,\n      \"hideDomainNameLabel\": false,\n      \"hideExisting\": false,\n      \"zone\": 3\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Engine and Refreshing Cache Data with TypeScript\nDESCRIPTION: This code shows how to update an engine model either using the framework portal or a local controller, followed by refreshing the relevant cache data. It demonstrates conditional handling of cache refresh based on the API being used.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npublic updateEngine(engine: EngineModel): Promise<void> {\n   let promise: Promise<any>;\n   if (useFrameworkPortal) {\n       // Using framework portal (NOTE: this is not allowed against ARM).\n       // NOTE: do NOT use invoke API since it doesn't handle CORS.\n       promise = FxBaseNet.ajaxExtended<any>({\n           headers: { accept: applicationJson },\n           isBackgroundTask: false,\n           setAuthorizationHeader: true,\n           setTelemetryHeader: \"Update\" + entityType,\n           type: \"PATCH\",\n           uri: EngineData._apiRoot + \"&api-version=\" + entityVersion,\n           data: ko.toJSON(convertToResource(engine)),\n           contentType: applicationJson,\n           useFxArmEndpoint: true,\n       });\n   } else {\n       // Using local controller.\n       promise = FxBaseNet.ajax({\n           type: \"PATCH\",\n           uri: EngineData._apiRoot + \"?id=\" + engine.id(),\n           data: ko.toJSON(convertToArmResource(engine)),\n           contentType: applicationJson,\n       });\n   }\n\n   return promise.then(() => {\n       if (useFrameworkPortal) {\n           // This will refresh the set of data that is available in the underlying data cache.\n           EngineData._debouncer.execute([this._getEngineId(engine)]);\n       } else {\n           // This will refresh the set of data that is available in the underlying data cache.\n           // The {} params let the cache know to re-fetch any data that matches these parameters.\n           // In the case of this contrived scenario, we always fetch all data.  In the future we\n           // will add a way to refresh all (or selective) caches for a given type.  The second param\n           // manages lifetime, which is not needed in this case.\n           this.enginesQuery.refresh({}, null);\n       }\n   });\n    }\n```\n\n----------------------------------------\n\nTITLE: Requesting an Edit Scope in PDL\nDESCRIPTION: Example of how to request a new edit scope in a PDL blade definition. The blade contains parameters for the current item ID, a new edit scope, and a form validation output parameter.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-working-with-edit-scopes.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Display detail blade with an edit scope. Blade consists of a form and commands.-->\n<Blade Name=\"DetailBlade\"\n       ViewModel=\"DetailBladeViewModel\">\n    <Blade.Parameters>\n        <Parameter Name=\"currentItemId\" Type=\"Key\" />\n        <Parameter Type=\"NewEditScope\" />\n        <Parameter Name=\"formValid\" Type=\"Output\" />\n    </Blade.Parameters>\n\n    <Lens Title=\"SamplesExtension.Resources.Strings.masterDetailEditDetailTitle\">\n        <CustomPart Name=\"DetailPart\"\n                    ViewModel=\"DetailPartViewModel\"\n                    Template=\"{Html Source=&#039;Templates\\\\WebsitesDetail.html&#039;}\"\n                    InitialSize=\"HeroWideFitHeight\">\n        <CustomPart.Properties>\n            <!-- Generated by the shell. -->\n            <Property Name=\"editScopeId\"\n                      Source=\"{BladeParameter editScopeId}\" />\n            <!-- Output parameter indicating whether the form is valid. -->\n            <Property Name=\"valid\"\n                      Source=\"{BladeParameter formValid}\"\n                      Direction=\"Output\" />\n            <!-- Master passes an id of object that will be used to seed the edit scope. -->\n            <Property Name=\"currentItemId\"\n                      Source=\"{BladeParameter currentItemId}\" />\n        </CustomPart.Properties>\n      </CustomPart>\n    </Lens>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Telemetry for Abandoned Create Flow Tab Interactions using Kusto\nDESCRIPTION: This Kusto (CSL) query analyzes abandoned Azure resource creation flows by joining create flow telemetry (`CreateFlowsEnriched`) with client interaction telemetry (`ClientTelemetry`). It filters for a specific extension and blade (`WebsitesExtension`, `AppServiceWebAppCreateV3Blade`), selects flows marked as 'Abandoned' within a defined time range (past 2 days, excluding the most recent day due to potential data delay), extracts a common `bladeInstanceId` from both data sources, and joins them. Finally, it aggregates the count of times each tab (identified by index) was opened within these abandoned flows and calculates the percentage of flows that reached the fourth tab.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_11\n\nLANGUAGE: csl\nCODE:\n```\ndatabase(\"AzPtlCosmos\").CreateFlowsEnriched\n| where PreciseTimeStamp between(startofday(ago(2d)) .. startofday(ago(1d))) // Don't use the most recent day, Create flows have a day of delay\n| where Extension == \"WebsitesExtension\" and Blade == \"AppServiceWebAppCreateV3Blade\" // example extension/blade\n| where ExecutionStatus == \"Abandoned\" // Filter to only abandoned creates\n| project bladeInstanceId=extract(@\"Blade_([A-Za-z0-9]+)\", 1, tostring(todynamic(Context).Blade.bladeInstanceId), typeof(string)) // extract the blade instance id from Context.Blade.bladeInstanceId\n| where isnotempty(bladeInstanceId)\n| join kind=inner(\n    // join with the interaction telemetry you want\n    database(\"AzurePortal\").ClientTelemetry\n    | where PreciseTimeStamp between(startofday(ago(2d)) .. startofday(ago(1d))) // match these dates with above\n    | where source has \"WebsitesExtension\" and source has \"AppServiceWebAppCreateV3Blade\" // example extension/blade\n    | where action == \"TabOpened\"\n    | extend bladeInstanceId=extract(@\"Blade_([A-Za-z0-9]+)\", 1, tostring(todynamic(context).Blade.instanceId)) // extract the blade instance id from context.Blade.instanceId\n    | where isnotempty(bladeInstanceId)\n) on bladeInstanceId\n// at this point you have all the telemetry interactions records you want for each abandoned createflow\n// so you can aggregate the metrics you are looking for\n| extend index=toint(todynamic(data).index)\n| summarize\n    OpenedTab1 = countif(index==1),\n    OpenedTab2 = countif(index==2),\n    OpenedTab3 = countif(index==3),\n    OpenedTab4 = countif(index==4)\nby bladeInstanceId\n| summarize\n    TotalOpenedTab1 = sum(OpenedTab1),\n    TotalOpenedTab2 = sum(OpenedTab2),\n    TotalOpenedTab3 = sum(OpenedTab3),\n    TotalOpenedTab4 = sum(OpenedTab4),\n    TotalOpened = count()\n| extend\n    TotalOpenedTab4_Percent=round(todouble(TotalOpenedTab4)*100/TotalOpened, 2)\n\n```\n\n----------------------------------------\n\nTITLE: Defining ParameterProvider with EditScope and Edit Tracking - Azure Portal FX - TypeScript\nDESCRIPTION: Demonstrates how to set up a ParameterProvider for an editable grid using an EditScope entity array, enabling correct serialization and retrieval of user-created, updated, or deleted items. Requires MsPortalFx, Knockout, and appropriate type metadata for ServerConfig. Key parameters include mapIncomingDataForEditScope for initial mapping and mapOutgoingDataForCollector for result transformation; utilizes getEntityArrayWithEdits to generate an array reflecting all edits for consistent data handling. Inputs and outputs are expected to be arrays of ServerConfig, integrated with observable arrays.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<ServerConfig[], KnockoutObservableArray<ServerConfig>>(container, {\n    editScopeMetadataType: ServerConfigMetadata.name,\n    mapIncomingDataForEditScope: (incoming) => {\n        return ko.observableArray(incoming);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(outgoing).arrayWithEdits;\n    },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Form View with DataSources and Resources in JSON\nDESCRIPTION: This snippet demonstrates a comprehensive Form view configuration including dataSources, resources, commands, and multiple steps with various form elements. It showcases the use of DataSource and Resource references in form elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative path to dx.schema.json>\",\n    \"view\": {\n        \"kind\": \"Form\",\n\t\t\"dataSources\": [\n\t\t\t{\n\t\t\t\"kind\": \"graph\",\n\t\t\t\"name\": \"graph\",\n\t\t\t\"path\": \"v1.0/me?$select=displayName,id,mail\"\n\t\t\t}\n\t\t],\n\t\t\"resources\": [\n            {\n                \"id\": \"/subscriptions/7b216101-32eb-4063-aaa3-78a58a87ffb1/resourceGroups/testRG1/providers/Microsoft.Compute/virtualMachines/test1VM\",\n                \"apiVersion\": \"2017-03-30\"\n            }\n        ],\n\t\t\"commands\": [\n\t\t\t{\n\t\t\t\t\"kind\": \"RefreshCommand\",\n\t\t\t\t\"id\": \"refreshCommandId\",\n\t\t\t\t\"displayName\": \"refreshCommand\",\n\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.Refresh\"\n\t\t\t}\n\t\t],\n        \"properties\": {\n            \"title\": \"Test Form View\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"textBoxUsingDataSource\",\n\t\t\t\t\t\t\t\"type\": \"Microsoft.Common.TextBox\",\n\t\t\t\t\t\t\t\"label\": \"text box with DataSource\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"defaultValue\": \"[dataSources('graph').displayName]\",\n\t\t\t\t\t\t\t\"toolTip\": \"Use only allowed characters\",\n\t\t\t\t\t\t\t\"constraints\": {\n\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n\t\t\t\t\t\t\t\t\"validationMessage\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"visible\": true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"textBoxUsingResource\",\n\t\t\t\t\t\t\t\"type\": \"Microsoft.Common.TextBox\",\n\t\t\t\t\t\t\t\"label\": \"text box with Resource\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"defaultValue\": \"[resources().name]\",\n\t\t\t\t\t\t\t\"toolTip\": \"Use only allowed characters\",\n\t\t\t\t\t\t\t\"constraints\": {\n\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n\t\t\t\t\t\t\t\t\"validationMessage\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"visible\": true\n\t\t\t\t\t\t}\n                    ]\n                },\n                {\n                    \"name\": \"tags\",\n                    \"label\": \"Tags\",\n                    \"elements\": [\n                        {\n                            \"name\": \"tagsByResource\",\n                            \"type\": \"Microsoft.Common.TagsByResource\",\n                            \"resources\": [\n                                \"Microsoft.Storage/storageAccounts\",\n                                \"Microsoft.Compute/virtualMachines\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"deployment\": {\n                \"parameters\": {\n                    \"tagsByResource\": \"[steps('tags').tagsByResource]\"\n                },\n                \"kind\": \"ResourceGroup\",\n                \"location\": \"[steps('basics').resourceScope.location.name]\",\n                \"resourceGroupId\": \"[steps('basics').resourceScope.resourceGroup.id]\",\n                \"template\": {\n                    \"file\": \"<ARM deployment template relative path>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request Implementation in Azure Portal Resource Overview\nDESCRIPTION: Shows how to implement a GET request to fetch storage account information in a GetStarted view. The response values are displayed in the properties.tabs section.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Control Scope Property Definitions\nDESCRIPTION: Defines required and optional properties for form control scoping in Azure Portal. Includes subscription ID, resource group name, location, and optional feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-formControlScope.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|subscriptionId|True|Scoping to this Subscription ID.\n|resourceGroupName|True|Scoping to this Resource Group name.\n|location|True|Scoping to this region.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Extension with Server-Side Resource Access\nDESCRIPTION: This JSON snippet demonstrates how to configure an Azure portal extension with server-side resource access. It includes settings for resource access to various endpoints and services.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-onboarding-old.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Microsoft_Azure_DemoExtension\",\n    \"feedbackEmail\": \"demoextPMDev@microsoft.com\",\n    \"flags\": \"SupportsPrewarming\",\n    \"resourceAccess\": [\n        {\n            \"name\": \"\",\n            \"resource\": \"https://management.core.windows.net/\"\n        },\n        {\n            \"name\": \"self\",\n            \"resource\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        },\n        {\n            \"name\": \"graph\",\n            \"resource\": \"https://graph.windows.net/\",\n            \"oAuthClientId\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        },\n        {\n            \"name\": \"microsoft.graph\",\n            \"resource\": \"https://graph.microsoft.com/\",\n            \"oAuthClientId\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        }\n    ],\n    \"serviceTreeId\": \"abcdbde1-a1b3-41da-be44-e3fa76a3ffc6\",\n    \"icm\": {\n        \"service\": \"Demo IcM Service\",\n        \"team\": \"Azure Demo UX\"\n    },\n    \"hostingServiceName\": \"demoextension\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard Visualization Schema Option 1\nDESCRIPTION: Defines the properties for a dashboard visualization object with configurable chart type and customization options. Includes type property for specifying chart display format, optional visualization options, and feature flag support.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-visualization.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description |\n| ---|:--:|:--:|\n|type|True|The type of chart to use for displaying tile data. See [here](dx-enum-dashboardSchemaVisualization-type.md) for more on chart types.|\n|options|False|Options used to further customize the visualization type. More details soon.|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Handling Input Data in Command ViewModel (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the `BlockContactCommand` view model handling input data passed via PDL bindings. The `onInputsSet` method receives the bound properties (like 'id' from the PDL binding) in the `inputs` object and stores the value (e.g., in the private `_id` knockout observable). The command's `execute` method (not fully shown) can then utilize this data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BlockContactCommand extends MsPortalFx.ViewModels.Command {\n\n    private _id: KnockoutObservable<any> = ko.observable();\n    ...\n\n    /**\n     * Creates a new instance of the command view model.\n     */\n    constructor(container: MsPortalFx.ViewModels.ContainerContract,\n                initialState: any,\n                dataContext: DataContext) {\n        super();\n        ...\n    }\n\n    /**\n     * Invoked when the Commands input properties change.\n     */\n    public onInputsSet(inputs: any): Promise<any> {\n        this._id(inputs.id);\n        return Promise.resolve(); // No need to load anything\n    }\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Navigation for Azure Portal Blades in TypeScript\nDESCRIPTION: Declares the Selectable2Options generic interface used to supply synchronous or asynchronous references that open portal blades in response to user navigation interactions. It supports both callback and promise-based navigation scenarios, returning a blade reference (the generic type). No in-file implementation is provided, only type signatures. Dependencies are TypeScript generics and Promise, with the intended typical input as a supplyBladeReference callback or its async variant. This interface is designed for use with selectable menu components that initiate dynamic navigation within the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"Fx/Composition/Selectable\" {\n    /**\n     * Configuration to pass to the selectable constructor\n     */\n    interface Selectable2Options<TBladeReference> {\n        /**\n         * This callback is invoked by the portal when a new blade is to be opened\n         * in response to a user-invoked navigation.\n         *\n         * @return A blade reference that describes the blade to open.  This value cannot be null or undefined.\n         */\n        supplyBladeReference?: () => TBladeReference;\n        /**\n         * This callback is invoked by the portal when a new blade is to be opened\n         * asychronously in response to a user-invoked navigation.\n         *\n         * @return A promise that returns a blade reference that describes the blade to open.  This value cannot be null or undefined.\n         */\n        supplyBladeReferenceAsync?: () => Promise<TBladeReference>;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AutogenFormViewType for ARM Template Conversion in Azure Portal\nDESCRIPTION: This snippet demonstrates how to define an AutogenFormViewType view for converting an ARM template to a Form view. It includes the basic structure with the required 'kind' and 'properties' sections, specifying the title and deployment template file path.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-AutogenFormViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"AutogenForm\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"template\": {\n          \"file\": \"{ARM template file path}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities View in Azure Portal Resource Overview (JSON)\nDESCRIPTION: This JSON snippet defines the structure for adding a Capabilities view to the Azure Portal's Declarative Resource Overview. It includes multiple capability entries with titles, icons, descriptions, actions, and status mappings. Each capability can have different status values and corresponding display options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/CapabilitiesTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Capabilities\",\n  \"capabilities\": [\n    {\n      \"title\": \"Backup\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n      \"description\": \"Simple and reliable server backup to the cloud\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[contains(resources().name, 'test')]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Disaster recovery\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n      \"description\": \"Replicate your virtual machine to another Azure region\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[not(contains(resources().name, 'test'))]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Insights\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n      \"description\": \"Enable logs and detailed monitoring capabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[resources().properties.test]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"present\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"notPresent\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          },\n          {\n            \"value\": \"null\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          },\n          {\n            \"value\": \"undefined\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Security\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n      \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Blade from a Different Extension in TypeScript\nDESCRIPTION: This example shows how to open a blade from a different extension using the BladeReferences API, including importing the necessary module and creating a blade reference with strongly typed parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BladeReferences } from \"Fx/Composition\"\n\nconst bladeReference = BladeReferences.forExtension(\"HubsExtension\").forBlade(\"LocationPickerV3Blade\").createReference({\n    supplyInitialData: () => { ... }\n    receiveResult: () => { ... }\n});\n```\n\n----------------------------------------\n\nTITLE: Button Text Observable Implementation in TypeScript\nDESCRIPTION: Example of implementing dynamic button text using observables in a blade view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._buttonText = ko.observable(\"OK\");\nthis.smartPhone = new SimpleButton.ViewModel(container, {\n    text: this._buttonText,\n    ...\n});\n\nthis._buttonText(\"New button text\");\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Future Date Validation\nDESCRIPTION: An implementation of DatePicker with validation to ensure the selected date is not earlier than the current date, using the duration and addHours functions for comparison.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime3\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"showValidationMessage\",\n    \"visible\": true,\n    \"constraints\": {\n        \"validations\":\n        [\n            {\n                \"message\": \"selected date can't be earlier than today\",\n                \"isValid\": \"[less(duration(addHours(utcNow(), -24), steps('datePicker').dateTime1), 0)]\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Asset Permissions for a Blade in Azure Portal PDL (XML)\nDESCRIPTION: Demonstrates how to associate required permissions with a Blade in PDL. By referencing the predefined permission aliases ('read', 'readChildren') using `<PermissionReference>`, the portal framework can automatically check if the user has the necessary permissions for the asset associated with the Blade (`AssetType=\"Robot\"`, `AssetIdProperty=\"id\"`) before rendering or enabling interactions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Blade AssetType=\"Robot\" AssetIdProperty=\"id\">\n  <Blade.Permissions>\n    <PermissionReference Permission=\"read\" />\n    <PermissionReference Permission=\"readChildren\" />\n  </Blade.Permissions>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Defining the DataContext Area in PDL (XML)\nDESCRIPTION: Specifies the `Area` attribute within the `<Definition>` tag of a Portal Definition Language (PDL) file. This attribute links the blades defined in this file to the corresponding DataContext (e.g., `V1/MasterDetail`), ensuring that the view models associated with these blades receive the correct data context for accessing data caches.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\"\nArea=\"V1/MasterDetail\">\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Store State and Actions in TypeScript\nDESCRIPTION: Demonstrates how to create a contract file with Redux store state interface and action types using TypeScript. This establishes a type-safe approach with discriminating unions for the reducer's switch statement.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// React\\Contracts\\Example.Contract.d.ts\nimport * as Redux from \"redux\";\n\nexport interface StoreState {\n  text: string;\n}\n\nexport interface SetTextAction extends Redux.AnyAction {\n  type: \"SetText\";\n  text: string;\n}\n\nexport interface ResetAction extends Redux.AnyAction {\n  type: \"ResetState\";\n}\n\nexport type MyExtensionAction = SetTextAction | ResetAction;\n```\n\n----------------------------------------\n\nTITLE: Referencing PDE File in Project Using ExtensionReference - XML\nDESCRIPTION: Demonstrates editing a .csproj file to reference a PDE file as an \\\"ExtensionReference\\\" compile action, which is necessary for another extension to import shared parts, blades, or asset types. This XML snippet must be inserted into the project's .csproj file, replacing or supplementing any existing <Content> reference to the same file. Proper project file structure and the prior existence of the referenced PDE file are required.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-rpc.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<ExtensionReference Include=\"Client\\References\\HubsExtension.pde\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Required TextBox with Regex Validation (JSON)\nDESCRIPTION: This JSON snippet defines a `Microsoft.Common.TextBox` control named `vmName` for capturing an application name in an Azure Create UI Definition. It includes a label, tooltip, and a required constraint with a specific regex pattern (`[a-z][a-z0-9-]{2,5}[a-z0-9]$`) and a custom validation message. The field must be 3-5 characters long, start and end with a lowercase letter, and contain only lowercase letters, numbers, or hyphens.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"vmName\",\n    \"type\": \"Microsoft.Common.TextBox\",\n    \"label\": \"Application name\",\n    \"toolTip\": \"Assign a name to your Azure application\",\n    \"defaultValue\": \"\",\n    \"constraints\": {\n        \"required\": true,\n        \"regex\": \"[a-z][a-z0-9-]{2,5}[a-z0-9]$\",\n        \"validationMessage\": \"Must be 3-5 characters.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Form with Multiple Roles in TypeScript\nDESCRIPTION: Example of a complex form that implements all three roles: parameterProvider, parameterCollector, and provisioner. This setup is used for forms that need to collect data, launch other forms (like pickers), and handle custom provisioning logic.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sample parameter collection form.\n */\nexport class MyComplexFormPartViewModel\n    extends MsPortalFx.ViewModels.ParameterCollectionV2.Form<MyDataModel>\n    implements MsPortalFx.Base.Disposable {\n    /**\n     * Constructs the view model.\n     *\n     * @param container The container into which the part is being placed.\n     * @param initialState Initial state of the view model.\n     * @param dataContext The data context for the part.\n     */\n    constructor(container: MsPortalFx.ViewModels.PartContainerContract, initialState: any, dataContext: DataContext) {\n        // Define the roles that this form will play and pass them to the super's contructor.\n        var roles: MsPortalFx.ViewModels.ParameterCollectionV2.FormRoles<MyDataModel> = {\n            // We're launching a pickers for instance, so we need a collector role.\n            parameterCollector: new MyCollector(),\n            // Form will always be a provider because it collects data from the user.\n            parameterProvider: MyProvider(),\n            // We're doing a Gallery/ARM create for instance, so we need a provisioner role.\n            provisioner: new MyProvisioner()\n        };\n\n        super(container, roles, initialState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Resource Access Configuration in JSON\nDESCRIPTION: JSON configuration example showing how to set up resource access for an extension, including access to both ARM and Graph API endpoints.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Contoso_Extension\",\n    \"uri\": \"//stamp2.extension.contoso.com/Home\",\n    \"uriFormat\": \"//{0}.extension.contoso.com/Home\",\n    \"feedbackEmail\": \"extension.admin@contoso.com\",\n    \"resourceAccess\": [{\n        \"name\": \"\",\n        \"resource\": \"https://management.core.windows.net/\"\n        }, {\n        \"name\": \"graph\",\n        \"resource\": \"https://graph.windows.net\"\n        }]\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Blade Communication Script\nDESCRIPTION: JavaScript implementation for handling communication between the Frame Blade and the Azure Portal, including security validation and message handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    \"use strict\";\n\n    // ---------------------------------------------------------------------------------------------\n    // ------------------------------------- Helper Functions --------------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    // var frameSignature = ...;  Defined by .html page that loaded this script.\n\n    // Capture the client session ID to use to correlate user actions and events within this\n    // client session.\n    let sessionId = location.hash.substr(1);\n\n    let queryMap = (function() {\n        let query = window.location.search.substring(1);\n        let parameterList = query.split(\"&\");\n        let map = {};\n        for (let i = 0; i < parameterList.length; i++) {\n            let pair = parameterList[i].split(\"=\");\n            map[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n        }\n        return map;\n    })();\n\n    function getQueryParameter(name) {\n        return queryMap[name] || \"\";\n    }\n\n    function postMessageToParent(kind) {\n        window.parent.postMessage({\n            signature: frameSignature,\n            kind: kind,\n        }, trustedParentOrigin);\n    }\n\n    // ---------------------------------------------------------------------------------------------\n    // --------------------------------------- Security Code ---------------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    // Get the below trusted origins from configuration to include the origin of the portal in\n    // which the page needs to be iframe'd.\n    let allowedParentFrameAuthorities = [\"localhost:55555\", \"portal.azure.com\"];\n    let trustedParentOrigin = (function () {\n        // Capture the client session ID to use to correlate user actions and events within this client session.\n        let sessionId = location.hash.substr(1);\n        // Parse query string\n        let parentOriginFromQueryString = (new URLSearchParams(window.location.search)).get(\"trustedAuthority\") || \"\";\n        let parentTrustedAuthority = (parentOriginFromQueryString.split(\"//\")[1] || \"\").toLowerCase();\n        let isTrustedOrigin = allowedParentFrameAuthorities.some(function (allowedOrigin) {\n            // Verify that the requested trusted authority is an allowed origin.\n            if (allowedOrigin === parentTrustedAuthority) {\n                return true;\n            }\n            // Verify that the requested trusted authority is a subdomain of an allowed origin.\n            let subdomainSuffix = \".\" + allowedOrigin; // Eg. \".portal.azure.com\"\n            return parentTrustedAuthority.length > subdomainSuffix.length && parentTrustedAuthority.slice(-subdomainSuffix.length) === subdomainSuffix;\n        });\n\n        if (!isTrustedOrigin) {\n            // Allow localhost for testing/development scenarios.\n            if (parentTrustedAuthority.indexOf(\"localhost:\") !== 0) {\n                let errorMessage = \"The origin '\" + parentTrustedAuthority + \"' is not trusted.\";\n                global.console.error(errorMessage + \" Session: \" + sessionId);\n                throw new Error(errorMessage);\n            }\n        }\n\n        return parentOriginFromQueryString;\n    })();\n\n    // ---------------------------------------------------------------------------------------------\n    // -------------------------------- Handshake Code with Portal ---------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    window.addEventListener(\"message\", function(evt) {\n        // It is critical that we only allow trusted messages through. Any domain can send a\n        // message event and manipulate the html.\n        if (evt.origin.toLowerCase() !== trustedParentOrigin) {\n            return;\n        }\n\n        let msg = evt.data;\n\n        // Check that the signature of the message matches that of frame parts.\n        if (!msg || msg.signature !== frameSignature) {\n            return;\n        }\n\n        // Handle different message kinds.\n        if (msg.kind === \"frametitle\") {\n            makeViewPresentableToUser(msg);\n        } else if (msg.kind === \"framecontent\") {\n            document.getElementsByClassName(\"fxs-frame-content\")[0].innerText = msg.data;\n        } else if (msg.kind === \"getAuthTokenResponse\") {\n```\n\n----------------------------------------\n\nTITLE: Manually Starting a Provisioner\nDESCRIPTION: Demonstrates how to manually trigger an asynchronous provisioning operation using the `startProvisioning(...)` method on a Provisioner instance. This is typically done in response to an event, such as within the `receiveResult` callback of a Parameter Collector.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstartProvisioning(..)\n```\n\n----------------------------------------\n\nTITLE: Handling Resource Menu Failures in TypeScript\nDESCRIPTION: This function handles resource menu failures by processing different HTTP status codes and updating an observable with appropriate error messages. It covers scenarios like not found, unauthorized access, and server errors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function handleResourceMenuFailures(\n    error: Error,\n    handledError: KnockoutObservable<MsPortalFx.ViewModels.ErrorOptions>,\n    assetTypeName: string,\n    resourceId: string,\n    armResponseExtractor?: (error: Error) => string,\n) {\n    armResponseExtractor = armResponseExtractor || defaultResponseExtractor;\n    resourceId = MsPortalFx.encodeHtml(resourceId || \"\");\n    const statusCode = error && (<any>error).httpStatusCode;\n    if (statusCode && [HttpStatusCode.NotFound, HttpStatusCode.Gone].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.notFoundHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.notFoundDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n\n    if (statusCode && [HttpStatusCode.Forbidden, HttpStatusCode.Unauthorized].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.unauthorizedHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.unauthorizedDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n\n    if (statusCode && [0, HttpStatusCode.InternalServerError, HttpStatusCode.ServiceUnavailable].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.unavailableHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.unavailableDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties View in Azure Portal Declarative Resource Overview\nDESCRIPTION: JSON configuration for adding a Properties view to showcase resource-specific properties. Supports secret and date formats, sourceUnits, maximumFractionDigits, and action links to URLs, resources, or blades.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Properties\",\n    \"groups\": [\n        {\n            \"displayName\": \"Virtual machine\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"description\": \"This is a virtual machine.\",\n            \"items\": [\n                {\n                  \"displayName\": \"Provisioning State\",\n                  \"value\": \"[resources().properties.provisioningState]\",\n                  \"description\": \"This is provisioning state.\",\n                  \"valueMapping\": [\n                    {\n                      \"value\": \"Succeeded\",\n                      \"displayName\": \"Succeeded\",\n                      \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n                    },\n                    {\n                      \"value\": \"Warning\",\n                      \"displayName\": \"Warning\",\n                      \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n                    },\n                    {\n                      \"value\": \"Failed\",\n                      \"displayName\": \"Failed\",\n                      \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n                    }\n                  ]\n                },\n                {\n                    \"displayName\": \"Computer name\",\n                    \"value\": \"abc\",\n                    \"valueMapping\": [\n                        {\n                            \"value\": \"abc\",\n                            \"displayName\": \"def\"\n                        }\n                    ]\n                },\n                {\n                    \"displayName\": \"Key\",\n                    \"value\": \"[resources().id]\",\n                    \"format\": \"Secret\"\n                },\n                {\n                    \"displayName\": \"Creation time\",\n                    \"value\": \"2021-03-23T21:24:47.7856737Z\",\n                    \"format\": \"Date\"\n                },\n                {\n                    \"displayName\": \"Disk Size\",\n                    \"value\": \"[resources().properties.diskSize]\",\n                    \"sourceUnits\": \"Gigabytes\",\n                    \"maximumFractionDigits\": 2\n                },\n                {\n                    \"displayName\": \"Azure portal\",\n                    \"value\": \"https://azure.microsoft.com/\",\n                    \"action\": {\n                        \"url\": \"https://azure.microsoft.com/\"\n                    }\n                },\n                {\n                    \"displayName\": \"Open a resource\",\n                    \"value\": \"Resource name\",\n                    \"action\": {\n                        \"resourceId\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\"\n                    }\n                },\n                {\n                    \"displayName\": \"Open a blade\",\n                    \"value\": \"Blade name\",\n                    \"action\": {\n                        \"blade\": {\n                            \"name\": \"A blade name\",\n                            \"extension\": \"An extension name\",\n                            \"parameters\": {\n                                \"resId\": \"[resources().id]\"\n                            }\n                        }\n                    }\n                },\n                {\n                    \"displayName\": \"Open a menu\",\n                    \"value\": \"Tags\",\n                    \"action\": {\n                        \"menu\": \"tags\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced TextBox Binding with Custom Read/Write EditScopeAccessor in TypeScript\nDESCRIPTION: Shows an advanced use of `createEditScopeAccessor` for an `ObsoleteTextBox.ViewModel`. It defines custom logic for reading from and writing to the `EditScope` by providing separate `readFromEditScope` and `writeToEditScope` functions. The read function transforms the data (`toUpperCase()`), demonstrating data manipulation during binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n\nthis.textBoxReadWriteAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>(<MsPortalFx.ViewModels.Forms.EditScopeAccessors.Options<FormIntegratedFormData.FormIntegratedFormData, string>>{\n        readFromEditScope: (data: FormIntegratedFormData.FormIntegratedFormData): string => {\n            return data.state2().toUpperCase();\n        },\n        writeToEditScope: (data: FormIntegratedFormData.FormIntegratedFormData, newValue: string): void => {\n            data.state2(newValue);\n        },\n    }),\n    textBoxReadWriteAccessorOptions);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Command to Open a Blade with Input Parameters in PDL (XML)\nDESCRIPTION: Defines a command in PDL (`\\Client\\Commands\\OpenBladeCommand\\OpenBladeCommand.pdl`) that opens 'InputParameterChildBlade'. The 'BladeAction' includes a 'BladeInput' element, which binds a constant string value ('This is my input string') from the command's context ('Source=\"{Constant ...}\"') to the blade's expected input parameter named 'inputString' ('Parameter=\"inputString\"').\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<Command Kind=\"Blade\"\n        Name=\"OpenBladeCommandWithInput\"\n        Text=\"{Resource openBladeCommandInput, Module=ClientResources}\"\n        ViewModel=\"{ViewModel Name=OpenBladeCommandWithInput, Module=./OpenBladeCommand/ViewModels/OpenBladeCommandViewModels}\">\n  <BladeAction Blade=\"InputParameterChildBlade\">\n    <BladeInput Source=\"{Constant 'This is my input string'}\"\n                 Parameter=\"inputString\" />\n  </BladeAction>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityCache for Website Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and configure an EntityCache instance for caching website data. It sets up the cache with a source URI, entity type, and logic for finding cached entities.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websiteEntities = new MsPortalFx.Data.EntityCache<WebsiteModel, number>({\n    entityTypeName: WebsiteModelMetadata.name,\n    sourceUri: MsPortalFx.Data.uriFormatter(DataShared.websiteByIdUri, true),\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced AutogenFormViewType Configuration with Parameters and Resources\nDESCRIPTION: This example shows a more complex AutogenFormViewType configuration. It includes parameters for passing data, resources for retrieving resource details, and advanced deployment options such as primaryResourceId and templateParametersDefaultValueOverrides.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-AutogenFormViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"AutogenForm\",\n    \"parameters\": [\n        {\n            \"name\": \"parentId\",\n            \"type\": \"key\"\n        }\n    ],\n    \"resources\": [\n        {\n            \"id\": \"[parameters('parentId')]\",\n            \"apiVersion\": \"0000-00-00\"\n        }\n    ],\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"primaryResourceId\": \"[resources().id]\",\n        \"templateParametersDefaultValueOverrides\": {\n          \"profileName\": \"[resourceId(resources().id).name]\"\n        },\n        \"template\": {\n          \"file\": \"{ARM template file path}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArmCommand in Azure Portal Command Bar\nDESCRIPTION: This example demonstrates how to configure an ArmCommand in the command bar to make an ARM request with specified method and URI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"ArmCommand\",\n        \"id\": \"armCommand\",\n        \"displayName\": \"Arm Command\",\n        \"icon\": \"MsPortalFx.Base.Images.Go\",\n        \"definition\": {\n            \"httpMethod\": \"post\",\n            \"uri\": \"[concat(resources().id, '?api-version=2014-04-01')]\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview with Recommendations Tab in Azure Portal\nDESCRIPTION: JSON schema for adding a Recommendations view as a tab within a resource overview (GetStarted view). Shows the base structure for the GetStarted view type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to ARM Form Fields in TypeScript\nDESCRIPTION: Demonstrates how to add extra validation to ARM fields by using a custom validator. This example shows validating a location field with a backend call to check if the location is available.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// The locations drop down.\nvar locationCustomValidation = new MsPortalFx.ViewModels.CustomValidation(\n    validationMessage,\n    (value) => {\n        return this._dataContext.validateLocation(value).then((isValid) => {\n            // Resolve with undefined if 'value' is a valid selection and with an error message otherwise.\n            return MsPortalFx.ViewModels.getValidationResult(!isValid && validationMessage || undefined);\n        }, (error) => {\n            // Make sure your custom validation never throws. Catch the error, log the unexpected failure\n            // so you can investigate later, and fail open.\n            logError(...);\n            return MsPortalFx.ViewModels.getValidationResult();\n        });\n    });\nvar locationsDropDownOptions: LocationsDropDown.Options = {\n    ...,\n    validations: ko.observableArray<MsPortalFx.ViewModels.Validation>([\n        new MsPortalFx.ViewModels.RequiredValidation(ClientResources.selectLocation),\n        locationCustomValidation // Add your custom validation here.\n    ])\n    ...\n};\nthis.locationsDropDown = new LocationsDropDown(container, locationsDropDownOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Command Group in PDL (XML)\nDESCRIPTION: This PDL snippet defines a reusable `CommandGroup` named 'ContactCommands' within the 'Scenarios' area. It contains two commands, 'BlockContact' and 'DeleteContact', each linked to a view model and specifying properties (like 'id') sourced from `DataInput`. This allows the command group to be referenced and reused in different contexts like blades or parts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Definition xmlns=\"[http://schemas.microsoft.com/aux/2013/pdl&quot](http://schemas.microsoft.com/aux/2013/pdl&quot)\"\n            Area=\"Scenarios\">\n\n  <!-- Command group associated to Contact assets -->\n  <CommandGroup Name=\"ContactCommands\">\n    <Command Name=\"BlockContact\"\n             Text=\"SamplesExtension.Resources.Strings.blockText\"\n             ViewModel=\"BlockContactCommand\">\n        <Property Name=\"id\" Source=\"{DataInput Property=id}\" />\n    </Command>\n    <Command Name=\"DeleteContact\"\n             Text=\"SamplesExtension.Resources.Strings.deleteCommandTextResourceKey\"\n             ViewModel=\"DeleteContactCommand\">\n        <Property Name=\"id\" Source=\"{DataInput Property=id}\" />\n    </Command>\n  </CommandGroup>\n  ...\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Microsoft.Storage.StorageAccountSelector Control\nDESCRIPTION: Example output returned by the Microsoft.Storage.StorageAccountSelector control when a user has configured a storage account. The output includes the account name, resource group, storage type, and whether it's a new or existing account.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.StorageAccountSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"storageaccount01\",\n    \"resourceGroup\": \"rg01\",\n    \"type\": \"Premium_LRS\",\n    \"newOrExisting\": \"new\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Essentials Section with Icon Support Property (JSON)\nDESCRIPTION: Shows a custom essentials property where the displayed icon changes based on the value of the property, using the 'valueMapping' array. Each array item maps a specific value to a corresponding display name and icon path. Inputs are the property value and valueMapping configuration; output is a dynamic icon and display value in the UI. Limitation: Value matching is based on string comparison and icons must be valid references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"propertydisplayname\",\n            \"value\": \"Succeeded\",\n            \"valueMapping\": [\n                {\n                    \"value\": \"Succeeded\",\n                    \"displayName\": \"Succeeded\",\n                    \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n                },\n                {\n                    \"value\": \"Warning\",\n                    \"displayName\": \"Warning\",\n                    \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n                },\n                {\n                    \"value\": \"Failed\",\n                    \"displayName\": \"Failed\",\n                    \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorials Tab in Azure Declarative Resource Overview (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a 'Tutorials' tab in the Azure Portal's Declarative Resource Overview. It uses the 'kind' property set to 'Tutorials' and defines content through 'tilesGroup', 'videosGroup', and 'linksGroup'. Each group contains an array of 'items' defining individual tiles, videos (with embedded player source), or lists of useful links. Titles, descriptions, icons, and actions (like opening a URL) can be specified for each item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Tutorials\",\n    \"tilesGroup\": {\n        \"displayName\": {\n            \"property\": \"freeTrainingsFromMicrosoft\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tile1Title\"\n                },\n                \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n                \"subtitle\": {\n                    \"property\": \"tile1Subtitle\"\n                },\n                \"description\": {\n                    \"property\": \"tile1Description\"\n                },\n                \"action\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"displayName\": {\n                        \"property\": \"start\"\n                    }\n                }\n            }\n        ]\n    },\n    \"videosGroup\": {\n        \"displayName\": {\n            \"property\": \"tab2videosTitle\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tab2feature1Title\"\n                },\n                \"description\": {\n                    \"property\": \"tab2feature1Description\"\n                },\n                \"learnMore\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"ariaLabel\": \"Learn more about Azure\"\n                },\n                \"video\": {\n                    \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n                }\n            }\n        ]\n    },\n    \"linksGroup\": {\n        \"displayName\": \"Useful links\",\n        \"items\": [\n            {\n                \"title\": \"Concepts\",\n                \"action\": [\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Azure Managed applications overview\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Service Catalog applications\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Managed applications in Azure Marketplace\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically triggering validation for form controls in JavaScript\nDESCRIPTION: Demonstrates how to call triggerValidation with a boolean parameter to ensure focus is moved to the first invalid form control. Used when validation is triggered by a user operation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-forms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntriggerValidation(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Tab in Azure Portal Resource Overview\nDESCRIPTION: This JSON snippet demonstrates how to add and configure the Capabilities tab in the Azure Portal's resource overview. It defines multiple capabilities with titles, icons, descriptions, actions, and status indicators. The configuration includes conditional status displays based on resource properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-CapabilitiesTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Capabilities\",\n  \"capabilities\": [\n    {\n      \"title\": \"Backup\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n      \"description\": \"Simple and reliable server backup to the cloud\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[contains(resources().name, 'test')]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Disaster recovery\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n      \"description\": \"Replicate your virtual machine to another Azure region\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[not(contains(resources().name, 'test'))]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Insights\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n      \"description\": \"Enable logs and detailed monitoring capabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[resources().properties.test]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"present\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"notPresent\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          },\n          {\n            \"value\": \"null\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          },\n          {\n            \"value\": \"undefined\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Security\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n      \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the ViewModel for an Open Blade Command (TypeScript)\nDESCRIPTION: Provides a basic implementation for the view model ('OpenBladeCommandViewModel') used by commands that open blades, as defined in `\\Client\\Commands\\OpenBladeCommand\\ViewModels\\OpenBladeCommandViewModels.ts`. It extends the base class 'MsPortalFx.ViewModels.OpenBladeCommand'. In this simple case, the constructor primarily calls the superclass constructor and sets a command icon. More complex view models might include logic related to enabling/disabling the command or handling blade output parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport class OpenBladeCommandViewModel extends MsPortalFx.ViewModels.OpenBladeCommand {\n    constructor(container: MsPortalFx.ViewModels.CommandContainerContract,\n                initialValue: any,\n                dataContext: DataContext) {\n        super(container);\n        this.icon(MsPortalFx.Base.Images.Link());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Enablement Based on Form Status in TypeScript\nDESCRIPTION: This code snippet demonstrates how to compute the 'enabled' state of a command based on edit scope conditions and form validity. The command becomes enabled only when the edit scope is loaded, dirty, not in saving state, and the form is valid.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-integrating-with-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis._editScopeView = dataContext.masterDetailEditSample.editScopeCache.createView(container);\nthis.enabled = ko.computed((): boolean => {\n    // EditScopeId and currentItemId have to be already acquired, editscope dirty and the form valid to\n    // command be enabled.\n    return !this._editScopeView.loading() &&\n        this._editScopeView.editScope() &&\n        this._editScopeView.editScope().dirty() &&\n        !this._editScopeView.editScope().saving() &&\n        this._formValid();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard View Type Parameters in Markdown\nDESCRIPTION: This snippet outlines the structure for defining parameters in dashboard view types. It specifies required properties such as title, kind, parameterNames, defaultValues, and showOnPages. The 'fx.feature' property is optional.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|The display name of the parameter.\n|kind|True|The kind of the parameter.\n|parameterNames|True|The unique names to serve as placeholders for the parameter values.\n|defaultValues|True|The parameter value(s) that will be selected by default when the parameter is displayed.\n|showOnPages|True|The list of integers that represent the indexes of the pages that the parameter applies to.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Virtual Network Configuration in JSON\nDESCRIPTION: This JSON object outlines the configuration for a new Azure Virtual Network. It includes the VNet name ('vnet01'), target resource group ('ManagedIdentityTest'), primary address prefix ('10.0.0.0/16'), and detailed configurations for two subnets ('subnet-1' and 'subnet-2'), including their names, address prefixes, and start addresses. This structure is typically used for deploying or managing Azure network resources via tools like Azure Resource Manager (ARM) or scripts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Network.VirtualNetworkCombo-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"vnet01\",\n    \"resourceGroup\": \"ManagedIdentityTest\",\n    \"addressPrefixes\": [\n        \"10.0.0.0/16\"\n    ],\n    \"addressPrefix\": \"10.0.0.0/16\",\n    \"newOrExisting\": \"new\",\n    \"subnets\": {\n        \"subnet1\": {\n            \"name\": \"subnet-1\",\n            \"addressPrefix\": \"10.0.0.0/24\",\n            \"startAddress\": \"10.0.0.4\"\n        },\n        \"subnet2\": {\n            \"name\": \"subnet-2\",\n            \"addressPrefix\": \"10.0.1.0/26\",\n            \"startAddress\": \"10.0.1.4\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing External URL Notification in Azure Portal\nDESCRIPTION: Demonstrates publishing a notification that links to an external URL. The notification includes standard properties plus a URI pointing to an external website.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\npublishNotification({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Information,\n    uri: \"https://www.bing.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Browse View with Static Data in Azure Portal\nDESCRIPTION: This snippet demonstrates how to configure a Data Browse view with static array data in the Azure Portal. It includes column definitions for disk size, price, display name, and creation time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": [\n        {\n            \"diskSize\": 100,\n            \"price\": 100,\n            \"displayName\": \"a\",\n            \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 10000,\n            \"price\": 10000,\n            \"displayName\": \"b\",\n            \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 1500,\n            \"price\": 1500,\n            \"displayName\": \"c\",\n            \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n        }\n    ],\n    \"columns\": [\n        {\n            \"displayName\": \"Disk Size\",\n            \"name\": \"diskSize\",\n            \"format\": \"Number\",\n            \"sourceUnits\": \"Gigabytes\",\n            \"maximumFractionDigits\": 2\n        },\n        {\n            \"displayName\": \"Price\",\n            \"name\": \"price\"\n        },\n        {\n            \"displayName\": \"Display Names\",\n            \"name\": \"displayName\"\n        },\n        {\n            \"displayName\": \"Creation time\",\n            \"name\": \"creationTime\",\n            \"format\": \"Date\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improper Promise Returning in Azure Portal Part (TypeScript)\nDESCRIPTION: This TypeScript snippet highlights an anti-pattern when handling loading indicators using Promises in an Azure Portal part's onInputsSet method. It returns an immediate resolved Promise (Q()), causing all loading indicators to be removed before data loading is complete, which can make the UI appear unresponsive or broken. The key parameter is 'inputs', representing the part's input context (e.g., resourceId). This example assumes the use of Q for Promises and a view component with a fetch operation. Developers should ensure the returned Promise includes all asynchronous work to avoid this issue.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-parts.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onInputsSet(inputs: MyPartInputs): Promise {\n    this._view.fetch(inputs.resourceId);\n    \n    // DO NOT DO THIS!  Removes all loading indicators.\n    // Your Part will look broken while the `fetch` above completes.\n    return Q();\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Result Handling Implementation\nDESCRIPTION: Example showing how to handle dialog closure results with different button interactions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openDialog({\n    telemetryName: \"DialogWithTarget\",\n    title: ClientResources.Dialog.ColorPicker.title,\n    content: {\n        htmlTemplate: \"<div data-bind='pcControl: colorDropDown'></div>\",\n        viewModel: dialogViewModel,\n    },\n    buttons: DialogButtons.OKCancel,\n\n    /**\n     * The element or element selector which the dialog will be targeted too\n     */\n    target,\n\n    /**\n     * onClosed is invoked when the dialog closes.   If the user clicks\n     * somewhere else in the portal the cancel button is passed to the onClosed callback.\n     */\n    onClosed: (dialogResult) => {\n        if (dialogResult.button === DialogButton.Ok) {\n            this.colorSelection(dialogViewModel.colorDropDown.value());\n        } else {\n            // user pressed cancel or clicked somewhere else outside of the dialog\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dialog in TypeScript\nDESCRIPTION: Basic dialog implementation showing core dialog options including title, content, buttons and closure handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openDialog({\n    telemetryName: \"SimpleDialog\",\n    title: ClientResources.Dialog.SimpleDialog.title,\n    content: ClientResources.Dialog.SimpleDialog.message,\n    buttons: DialogButtons.OK,\n    onClosed: () => {\n        // this callback is invoked when the dialog is closed\n        // result.button may be inspected to see which button was clicked.\n    },\n    target: evt.target,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Move Option to Properties Blade - TypeScript\nDESCRIPTION: This snippet showcases configuring the Properties blade for a resource to support moving between subscriptions by specifying an edit blade. It declares property options using MsPortalFx APIs and appends them to the blade layout. Dependencies include Azure portal extension SDK modules and required context variables like container and property values. Expects resource and subscription context as input and pushes updated settings into the partProperties array.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemove.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar subscriptionNamePropertyOptions = {\n    label: strings.subscriptionName,\n    value: subscriptionName,\n    editBlade: MsPortalFx.Azure.ResourceManager.getMoveResourceBlade(\n        resourceId,\n        MsPortalFx.Azure.ResourceManager.MoveType.Subscription)\n};\npartProperties.push(new FxPropertiesPart.CopyFieldProperty(this._container, subscriptionPropertyOptions));\n```\n\n----------------------------------------\n\nTITLE: Defining a Blade Action for Property Item (JSON)\nDESCRIPTION: This snippet configures a property item with a 'blade' action, which opens a specified Azure Portal blade extension. The 'action' object includes an embedded 'blade' definition with 'name', 'extension', and optional parameters such as 'resId'. The values may use binding expressions for dynamic resolution. This setup enables deep integration and contextual navigation within Azure Portal blades.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Open a blade\\\",\\n    \\\"value\\\": \\\"Blade name\\\",\\n    \\\"action\\\": {\\n        \\\"blade\\\": {\\n            \\\"name\\\": \\\"A blade name\\\",\\n            \\\"extension\\\": \\\"An extension name\\\",\\n            \\\"parameters\\\": {\\n                \\\"resId\\\": \\\"[resources().id]\\\"\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Form Fields to EditScope Using EditScopeAccessor in TypeScript\nDESCRIPTION: Example of using the preferred EditScopeAccessor approach with a compile-time verified lambda to bind a TextBox form field to an EditScope observable. This approach is more maintainable when property names change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis.textBoxSimpleAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>((data) => { return data.state; }),\n    textBoxSimpleAccessorOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Bar Notifications in Azure Portal Template Blade\nDESCRIPTION: Demonstrates how to create a status bar with notifications at the top of a template blade in the Azure Portal. It includes options for different severities and clickable links.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport { ClickableLink } from \"Fx/Composition\";\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\nimport * as Dropdown from \"Fx/Controls/DropDown\";\n\n@TemplateBlade.Decorator({\n    htmlTemplate: `\n<div class=\"ext-bladewithstatus-root\">\n    <div class=\"ext-statusoptions\" data-bind=\"pcControl: statusBarState\"/>\n</div>`,\n})\nexport class TemplateBladeWithStatusBar {\n    public title = ClientResources.templateBladeWithStatusBar;\n    public subtitle: string;\n\n    // Dropdown that manages the status of the blade and therefore the status bar\n    public statusBarState: Dropdown.Contract<TemplateBlade.ContentState>;\n\n    public context: TemplateBlade.Context<void>;\n\n    public async onInitialize() {\n        const { container } = this.context;\n\n        // Create the Status dropdown\n        this.statusBarState = Dropdown.create<TemplateBlade.ContentState>(container, {\n            label: \"Select the type of the status bar\",\n            subLabel: \"Note: 'None' means there is no Status and therefore no Status Bar\",\n            suppressDirtyBehavior: true,\n            items: [\n                { text: \"None\", value: TemplateBlade.ContentState.None },\n                { text: \"Warning\", value: TemplateBlade.ContentState.Warning },\n                { text: \"Error\", value: TemplateBlade.ContentState.Error },\n                { text: \"Dirty\", value: TemplateBlade.ContentState.Dirty },\n                { text: \"Info\", value: TemplateBlade.ContentState.Info },\n                { text: \"Upsell\", value: TemplateBlade.ContentState.Upsell },\n                { text: \"Complete\", value: TemplateBlade.ContentState.Complete },\n            ],\n            value: TemplateBlade.ContentState.None,\n        });\n\n        // Subscribe to the changes of statusBarState to dictate the Status Bar\n        this.statusBarState.value.subscribe(container, statusBarState => {\n            container.statusBar({\n                text: ClientResources.templateBladeWithStatusBarMessage,\n                state: statusBarState,\n                onClick: new ClickableLink(\"http://www.bing.com\"),\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Azure Portal Feature Flag using TypeScript\nDESCRIPTION: This snippet shows how to check if a specific feature, identified by the string 'resourcemenu', is enabled within the Azure Portal environment. It utilizes the `isFeatureEnabled` method from the `MsPortalFx` framework. This is typically used to conditionally render UI elements or execute different code paths based on feature availability.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.isFeatureEnabled(\"resourcemenu\")\n```\n\n----------------------------------------\n\nTITLE: Mapping Robots to RobotDetails using mapInto() (Correct Implementation with PureComputed in Knockout, TypeScript)\nDESCRIPTION: Uses mapInto() to project QueryCache Robot objects to RobotDetails for the grid, providing stable observable references for name and status and a computed observable via ko.pureComputed for modelAndMfg. Like the correct map() implementation, this mapping leverages pureComputed to update combined properties reactively, and ensures that updated values don't trigger reference replacement in the result array. Dependencies match prior examples, with mapInto() used instead of map(). Output: projectedItems array maintaining correct observable and computed binding for each RobotDetails.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.mapInto<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: robot.name,\n        status: robot.status,\n        modelAndMfg: ko.pureComputed(() => {\n            this._logComputedRecalculating(projectionId, robot);\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Action in Azure Portal\nDESCRIPTION: Defines a clickable URL action that opens in a new browser window. Requires displayName and URL value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Azure portal\",\n    \"value\": \"https://azure.microsoft.com/\",\n    \"action\": {\n        \"url\": \"https://azure.microsoft.com/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cross-Iframe Call Stack in Azure Portal Debugging (JavaScript)\nDESCRIPTION: JavaScript command specific to the Azure Portal framework (MsPortalFx) used within the browser console to retrieve the combined call stack across iframe boundaries. This requires the portal to be loaded with diagnostics enabled (`?trace=diagnostics`) and potentially client optimizations disabled (`clientOptimizations=false`). This command helps trace the origin of actions or data changes initiated from a different iframe but should not be used in production code as it relies on diagnostics mode.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMsPortalFx.Base.Rpc.Internal.messageContext.callStack\n```\n\n----------------------------------------\n\nTITLE: Mapping Legacy PCv1/v2 Collector Callbacks to PCv3\nDESCRIPTION: Illustrates the mapping of legacy PCv1/v2 Parameter Collector methods (`createInputParameters` or `getProviderInputs`, `inputParameters`, `inputMetadata`, `saveOutputParameters` or `onProviderCommit`) to their corresponding PCv3 callbacks (`supplyInitialData`, `supplyProviderConfig`, `receiveResult`). This is relevant when upgrading view models from the old inheritance-based system to the new composition-based system.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncreateInputParameters\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetProviderInputs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyInitialData\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyProviderConfig\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninputParameters\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninputMetadata\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyInitialConfig\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsaveOutputParameters\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonProviderCommit\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveResult\n```\n\n----------------------------------------\n\nTITLE: Initializing WebDriver and Authenticating to Azure Portal in C#\nDESCRIPTION: This snippet demonstrates how to initialize a Selenium WebDriver instance and authenticate to the Azure Portal using credentials and URIs retrieved from a configuration file. It utilizes `WebDriverFactory.Create` to get the driver and `PortalAuthentication.SignInAndSkipPostValidation` to handle the login process. Note that Multi-Factor Authentication (MFA) is not supported; an account without MFA is required. The `query` parameter allows passing specific flags like `feature.canmodifyextensions=true`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Get the specified Portal Uri from the configuration file\nvar portalUri = new Uri(ConfigurationManager.AppSettings[\"PortalUri\"]);\nvar extensionUri = new Uri(ConfigurationManager.AppSettings[\"ExtensionUri\"]);\n\n// Make sure the servers are available\nPortalServer.WaitForServerReady(portalUri);\nExtensionsServer.WaitForServerReady(extensionUri);\n\n// Create a webdriver instance to automate the browser.\nvar webDriver = WebDriverFactory.Create();\n\n// Create a Portal Authentication class to handle login, note that the portalUri parameter is used to validate that login was successful.\nvar portalAuth = new PortalAuthentication(webDriver, portalUri);\n\n//config#sideLoadingExtension\n// Sign into the portal\nportalAuth.SignInAndSkipPostValidation(userName: \"\", /** The account login to use.  Note Multi Factor Authentication (MFA) is not supported, you must use an account that does not require MFA **/\n    password: \"\", /** The account password **/\n    tenantDomainName: string.Empty, /** the tenant to login to, set only if you need to login to a specific tenant **/\n    query: \"feature.canmodifyextensions=true\", /** Query string to use when navigating to the portal.  **/ \n    fragment: \"#\" /** The hash fragment, use this to optionally navigate directly to your resource on sign in. **/);\n```\n\n----------------------------------------\n\nTITLE: Creating an EntityCache View in TypeScript\nDESCRIPTION: Demonstrates creating a view (`_websiteEntityView`) on an `EntityCache` instance (`dataContext.websiteEntities`) within a TypeScript view model, typically for a detail blade. This view is used to fetch and observe data for a single entity based on its ID. Requires a `dataContext` with an `websiteEntities` property (representing the `EntityCache`) and a `container`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websiteEntityView = dataContext.websiteEntities.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Opening the Portal's Resource Menu Blade in TypeScript\nDESCRIPTION: This snippet shows how to open the portal's resource menu blade for a specific resource, selecting the 'overview' menu item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst menuBladeRef = BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"overview\").createReference({ id: \"_ARM_ID_HERE\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Graph Data Source in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet defines a 'dataSources' array for the Azure Portal Properties view, specifying a Resource Graph GET request as a data source. The entry includes the 'kind', 'name', and 'path' properties, where 'path' is a valid Resource Graph query targeting specific user data. This pattern enables binding data from Microsoft Graph into the UI and supports scenarios such as querying profile information. Only 'Applications' and 'Users' queries are supported, and each source should have a unique 'name' for reference.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"dataSources\": [\\n    {\\n        \\\"kind\\\": \\\"graph\\\",\\n        \\\"name\\\": \\\"graph\\\",\\n        \\\"path\\\": \\\"v1.0/me?$select=displayName,id,mail\\\"\\n    }\\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown View with Inline Content in JSON\nDESCRIPTION: This snippet demonstrates how to configure a Markdown view with the content directly specified in the JSON. It includes an optional 'image' parameter, exports the view, and provides an example of Markdown syntax for italic and bold text.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/markdownType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"stringSource\": \"../Resources/MyStrings.resjson\",\n    \"view\": {\n        \"kind\": \"Markdown\",\n        \"parameters\": [\n            {\n                \"name\": \"image\",\n                \"type\": \"optional\"\n            }\n        ],\n        \"export\": true,\n        \"properties\": {\n            \"content\": \"Example markdown text illustrating *italic* and **bold**.\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.SubscriptionSelector Control in JSON\nDESCRIPTION: A sample JSON snippet demonstrating how to implement the Microsoft.Common.SubscriptionSelector control. This control allows users to select a subscription from a list, with optional resource provider validation for Microsoft.BotService and Microsoft.KeyVault.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.SubscriptionSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.SubscriptionSelector\",\n    \"name\": \"subscription\",\n    \"resourceProviders\": [\n        \"Microsoft.BotService\",\n        \"Microsoft.KeyVault\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full-Screen Properties View in Azure Portal (JSON)\nDESCRIPTION: This JSON schema defines the structure for a full-screen Properties view opened from a resource menu. It includes parameters, resources, and property groups with customizable icons and descriptions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Properties\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Properties Example\",\n      \"groups\": [\n        {\n          \"displayName\": \"Virtual machine\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n          \"description\": \"This is a virtual machine.\",\n          \"items\": [\n          ]\n        },\n        {\n          \"displayName\": \"Availability + scaling\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.AvailabilitySet\",\n          \"items\": [\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Virtual Network Combo UI Element (JSON)\nDESCRIPTION: This JSON snippet defines a `Microsoft.Network.VirtualNetworkCombo` element for an Azure Create UI definition. It configures the user interface for creating a virtual network and two subnets, including labels, default values (VNet name 'vnet01', prefix '/16'; Subnet1 name 'subnet-1', prefix '/24'; Subnet2 name 'subnet-2', prefix '/26'), and constraints (minimum address prefix sizes, minimum address counts, contiguous addresses). The scope (subscription, resource group, location) is dynamically set based on the output of a previous step named 'basics'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Network.VirtualNetworkCombo.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Network.VirtualNetworkCombo\",\n    \"label\": {\n      \"virtualNetwork\": \"Virtual network\",\n      \"subnets\": \"Subnets\"\n    },\n    \"toolTip\": {\n      \"virtualNetwork\": \"\",\n      \"subnets\": \"\"\n    },\n    \"defaultValue\": {\n      \"name\": \"vnet01\",\n      \"addressPrefixSize\": \"/16\"\n    },\n    \"constraints\": {\n      \"minAddressPrefixSize\": \"/16\"\n    },\n    \"options\": {\n      \"hideExisting\": false\n    },\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"resourceGroupName\": \"[steps('basics').resourceScope.resourceGroup.name]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"subnets\": {\n      \"subnet1\": {\n        \"label\": \"First subnet\",\n        \"defaultValue\": {\n          \"name\": \"subnet-1\",\n          \"addressPrefixSize\": \"/24\"\n        },\n        \"constraints\": {\n          \"minAddressPrefixSize\": \"/24\",\n          \"minAddressCount\": 12,\n          \"requireContiguousAddresses\": true\n        }\n      },\n      \"subnet2\": {\n        \"label\": \"Second subnet\",\n        \"defaultValue\": {\n          \"name\": \"subnet-2\",\n          \"addressPrefixSize\": \"/26\"\n        },\n        \"constraints\": {\n          \"minAddressPrefixSize\": \"/26\",\n          \"minAddressCount\": 8,\n          \"requireContiguousAddresses\": true\n        }\n      }\n    },\n    \"visible\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Creates for a Specific Session\nDESCRIPTION: This query fetches create operations associated with a particular session ID within the last 15 days.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate=ago(15d),\n    endDate=ago(1d),\n    match_SessionId=\"<sessionId>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Menu Items Using Feature Flags in Azure Portal\nDESCRIPTION: Demonstrates how to conditionally include or remove menu items based on feature flag states. The example shows configuration for overview menu item with a feature flag condition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceMenuItems-conditionalSupport.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"menu\": {\n      \"overview\": {\n        \"id\": \"dxOverviewId\",\n        \"displayName\": \"dxOverviewDisplayName\",\n        \"icon\": \"someIcon\",\n        \"blade\": {\n          \"name\": \"Overview_dx\"\n        },\n        \"fx.feature\": {\n          \"name\": \"foo\",\n          \"includeWhen\": \"Disabled\",\n        },\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties Tab with Menu Action in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a Properties tab with a menu action. It includes a group with a displayName, icon, and an action that defines a menu item to open when the group name is clicked.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Properties\",\n    \"groups\": [\n        {\n            \"displayName\": \"Virtual machine\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"description\": \"This is a virtual machine.\",\n            \"items\": [\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowseViewType as Tab in Resource Overview\nDESCRIPTION: This snippet shows the basic structure for adding a DataBrowseViewType as a tab in a resource overview (GetStarted view). It includes the schema for the GetStarted view where the DataBrowse tab can be added in the 'tabs' section.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AJAX Request with supplyData in TypeScript\nDESCRIPTION: This code demonstrates how to override the default AJAX request in a QueryCache by using the supplyData method. It allows for custom HTTP methods, headers, and data processing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\npublic websitesQuery = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.WebsiteModel, any>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(Shared.websitesControllerUri),\n\n    // Overriding the supplyData function and supplying our own logic used to perform an ajax\n    // request.\n    supplyData: (method, uri, headers, data) => {\n        // Using MsPortalFx.Base.Net.ajax to perform our custom ajax request\n        return MsPortalFx.Base.Net.ajax({\n            uri: uri,\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\"\n        }).then((response: any) => {\n            // Post processing the response data of the ajax request.\n            if (Array.isArray(response) && response.length > 5) {\n                return response.slice(5);\n            }\n            else {\n                return response;\n            }\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced EditScopeAccessor with Custom Read/Write Functions in TypeScript\nDESCRIPTION: Example of an advanced EditScopeAccessor implementation that enables binding multiple EditScope observables to a single form field and performing data transformations for user presentation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.textBoxReadWriteAccessor = new ObsoleteTextBox.ViewModel(\n    container,\n    this,\n    this.createEditScopeAccessor<string>(<MsPortalFx.ViewModels.Forms.EditScopeAccessors.Options<FormIntegratedFormData.FormIntegratedFormData, string>>{\n        readFromEditScope: (data: FormIntegratedFormData.FormIntegratedFormData): string => {\n            return data.state2().toUpperCase();\n        },\n        writeToEditScope: (data: FormIntegratedFormData.FormIntegratedFormData, newValue: string): void => {\n            data.state2(newValue);\n        },\n    }),\n    textBoxReadWriteAccessorOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing getResourceMenuConfig for AssetViewModel in TypeScript\nDESCRIPTION: This snippet demonstrates a basic implementation of the getResourceMenuConfig method in an AssetViewModel. It creates a simple menu with three items and two groups, including an overview item, a custom group with an item, and an item added to a framework group.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BladeReferences } from \"Fx/Composition\");\nimport * as FxMenuBlade from \"MsPortalFx/Composition/MenuBlade\";\nimport * as ClientResources from \"ClientResources\";\n\nimport FxAssets = MsPortalFx.Assets;\n\nconst MenuGroupStrings = ClientResources.ResourceMenuGroup;\nconst MenuStrings = ClientResources.ResourceMenu;\n\n/**\n * The MyResource view model.\n */\nexport class MyResourceViewModel\n    implements ExtensionDefinition.ViewModels.MyResourceViewModel.Contract {\n\n    /**\n     * Initializes a new instance of the desktop view model class.\n     *\n     * @param container Object representing the container in the shell.\n     * @param initialState Bag of properties saved to user settings via viewState.\n     * @param dataContext Long lived data access object passed into all view models in the current area.\n     */\n    constructor(container: FxContainerContract, initialState: any, dataContext: DataContext) {\n    }\n\n    /**\n     * Gets the resource menu configuration.\n     *\n     * @param resourceId The resource ID for the menus.\n     * @return A promise which will be resolved with the resource menu configuration.\n     */\n    public getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n        return Q(<MsPortalFx.Assets.ResourceMenuConfig>{\n            overview: {\n                id: \"overview\",\n                displayText: MenuStrings.overview,\n                keywords: [\"keyword1\",\"keyword2\"],\n                icon: MsPortalFx.Base.Images.Polychromatic.MyResourceImage(),\n                supplyBladeReference: () => {\n                    return BladeReferences.forBlade(\"MyResourceOverviewBlade\").createReference({\n                        parameters: {\n                            id: resourceId\n                    }});\n                }\n            },\n            options: <MsPortalFx.Assets.ResourceMenuOptions>{\n                enableRbac: true,\n                enableTags: true,\n                enableSupportEventLogs: true,\n                enableSupportHelpRequest: true,\n                enableSupportResourceHealth: true,\n                enableSupportTroubleshootv2: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                {\n                    id: \"overview_group\",\n                    displayText: MenuGroupStrings.overview,\n                    items: <FxMenuBlade.MenuItem[]>[\n                        {\n                            id: \"properties\",\n                            displayText: \"Properties\",\n                            keywords: [\"keyword1\",\"keyword2\"],\n                            icon: MsPortalFx.Base.Images.Polychromatic.MyPropertiesImage(),\n                            supplyBladeReference: () => {\n                                return BladeReferences.forBlade(\"MyResourcePropertiesBlade\").createReference({\n                                    parameters: {\n                                        resourceGroup: resourceId\n                                }});\n                            },\n                            enabled: ko.observable(true)\n                        }\n                    ]\n                },\n                {\n                    // There are a number of predefined framework groups items can be added to them using the following pattern\n                    referenceId: FxAssets.SupportGroupId,\n                    items: <FxMenuBlade.MenuItem[]>[\n                        {\n                            id: \"alerts\",\n                            displayText: \"Alerts\",\n                            keywords: [\"keyword1\",\"keyword2\"],\n                            icon: MsPortalFx.Base.Images.Polychromatic.Notification(),\n                            supplyBladeReference: () => {\n                                return new MsPortalFx.Composition.PdlBladeReference<any>(\n                                    \"AlertsListBlade\",\n                                    {\n                                        targetResourceIds: [resourceId],\n                                        options: { enableEvents: false }\n                                    },\n                                    null,\n                                    null,\n                                    InsightsExtensionName\n                                );\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Declarative Resource Overview Schema in Azure Portal\nDESCRIPTION: Base JSON schema for configuring a Declarative Resource Overview blade. Defines resource identification, API version, essentials section, commands, and property views. Uses ARM GET request to retrieve resource details at runtime.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-getstartedViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Blade Properties to Parameters in PDL\nDESCRIPTION: This code shows how to bind a Blade property to a parameter using the Blade.Properties element. It demonstrates passing a blade parameter to the view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-binding-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Blade.Properties>\n  <Property Name=\"idX\" \n               Source=\"{BladeParameter id}\"/>\n</Blade.Properties>\n```\n\n----------------------------------------\n\nTITLE: Defining a Blade Command in PDL (XML)\nDESCRIPTION: This PDL snippet demonstrates how to define a command directly associated with a Blade using the `<Blade.Commands>` element. It specifies the command's display text via a resource key (`SamplesExtension.Resources.Strings.simpleBladeCommandTextResourceKey`) and links it to a TypeScript view model (`SimpleBladeCommandViewModel`) for its behavior.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"SimpleBladeCommandBlade\"\n       ViewModel=\"SimpleBladeCommandBladeViewModel\">\n    <!-- Blade commands -->\n    <Blade.Commands>\n      <Command Text=\"SamplesExtension.Resources.Strings.simpleBladeCommandTextResourceKey\"\n               ViewModel=\"SimpleBladeCommandViewModel\" />\n    </Blade.Commands>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Complete Lifetime Management with Disposal Callbacks in TypeScript\nDESCRIPTION: Enhanced version of the mapping function that properly handles cleanup by registering a disposal callback to remove buttons from the section when their associated items are removed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-lifetime.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet gridItems = this._view.items.mapInto(container, (itemLifetime, item) => {\n    let button = new Button.ViewModel(itemLifetime, { label: pureComputed(() => \"Button for \" + item.name())});\n    this.section.children.push(button);\n    itemLifetime.registerForDispose(() => this.section.children.remove(button));\n    return {\n        name: item.name,\n        status: ko.pureComputed(() => item.running() ? \"Running\" : \"Stop\")\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Data Models for Parameter Collection Inputs (Portalfx, TypeScript)\nDESCRIPTION: This TypeScript code defines a class for a strongly-typed data model used with parameter collection flows, utilizing Knockout.js observables for property values. The data model mirrors the structure of parameter sets and provides type safety, IntelliSense, and easier property access. The snippet requires Knockout.js and Portalfx ViewModels for usage within forms or wizards.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDataModel {\n    public parameterSetA = {\n        parameter1: ko.observable<string>(),\n        parameter2: ko.observable<string>(),\n        // The remaining parameters...\n    },\n    // The remaining parameter sets...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Resource Creation with Form in Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to author a Form that implements child resource creation in Azure Portal. It includes parameter and resource definitions, and shows how to use the resources() function to reference parent resource properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"key\"\n            }\n        ],\n        \"resources\": [\n            {\n                \"id\": \"[parameters('id')]\",\n                \"apiVersion\": \"2020-03-01-preview\"\n            }\n        ],\n        \"steps\": [\n        ],\n        \"deployment\": {\n            \"kind\": \"ResourceGroup\",\n            \"resourceGroupId\": \"[resources().resourceGroupId]\",        \n            \"parameters\": {\n                \"name\": \"[steps('step1').textbox]\",\n                \"location\": \"[resources().location]\",\n                \"omsLogAnalyticsWorkspaceName\": \"[resources().name]\"\n            },\n            \"template\": {\n                \"file\": \"./SavedSearchDeploymentTemplate.json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Filters in DataView\nDESCRIPTION: Shows how to implement data fetching with filter parameters in a DataView. The fetch operation triggers the actual server query with specified filter criteria for running status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-dataviews.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: inputs.filterRunningStatus.value });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextBox Constraints Option 2 in Markdown\nDESCRIPTION: Details the properties for the second option of textBoxConstraints, including required, validations, and fx.feature fields. This option allows for more complex validation rules using an array of conditions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-textBoxConstraints.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|required|False|Value can be a boolean or an expression(string). If true, then the text box must have a value to validate successfully. The default value is false.\n|validations|False|An array where you add conditions for checking the value provided in the text box. See [here](dx-textBoxConstraints-validations.md) for more on constraints.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Request with Body in Azure Portal Resource View\nDESCRIPTION: Shows how to make a POST request with a custom body to query Resource Graph. Includes condition based on storage account existence and demonstrates handling of POST response data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n        \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n        \"apiVersion\": \"2021-09-01\",     \n        \"name\": \"storageAccount\"    \n      },\n      {     \n        \"name\": \"testPOSTARG\",    \n        \"method\": \"POST\",     \n        \"id\": \"/providers/Microsoft.ResourceGraph/resources\",    \n        \"apiVersion\": \"2018-09-01-preview\",    \n        \"body\": {      \n          \"subscriptions\": [    \n              \"2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4\"      \n          ],       \n         \"query\": \"where isnotnull(tags['TagForResourceGraphTest'])\"       \n        },       \n        \"condition\":  \"[not(empty(resources('storageAccount').id))]\"   \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST ARGcount\",\n              \"value\": \"[resources('testPOSTARG').count]\",\n              \"description\": \"Number of storage accounts with tag\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provisioner Role in TypeScript\nDESCRIPTION: Implementation of a Provisioner role that handles resource provisioning logic. It provides two mutually exclusive methods: mapOutputsForProvisioning for default Gallery/ARM provisioning and executeCustomProvisioning for custom provisioning implementations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sample parameter collection \"provisioner\" role.\n */\nexport class MyProvisioner implements MsPortalFx.ViewModels.ParameterCollectionV2.Roles.Provisioner {\n    /**\n     * (Optional) Maps the outputs of the parameter collection flow to what the default provisioning\n     * action expects (i.e. gallery create). Override this method to implement custom mapping of\n     * output parameters if the outputs of the parameter collection flow are different from what the\n     * gallery deployment expects.\n     *\n     * NOTE: You cannot implement both the \"executeCustomProvisioning\" and \"mapOutputsForProvisioning\"\n     * methods. Implement one or the other, but not both.\n     *\n     * @param outputParameters The outputs of the parameter collection flow.\n     * @param options The options used for the provisioning process.\n     * @return The mapped outputs, to what the default provisioning expects.\n     */\n    public mapOutputsForProvisioning(\n        outputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters,\n        options: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionOptions)\n        : Promise<MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters> {\n        var deferred = Q.defer<MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters>(),\n            mappedOutputs: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters,\n            providerDataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<ProviderDataModel>(outputParameters);\n\n        // Fill out any missing properties or the ones required by Gallery/ARM create. Most of\n        // the properties should probably be filled out by now.\n        if (providerDataModel) {\n            var selectedTemplateId = \"armTemplateId\",\n                resourceId = \"someResourceId\",\n                // Stringify the array because parameters can only be strings.\n                resourceProviders = JSON.stringify([\"Resource1\", \"Resource2\"]);\n\n            providerDataModel.galleryParameters.selectedTemplateId(selectedTemplateId);\n            providerDataModel.galleryParameters.primaryResourceId(resourceId);\n            providerDataModel.galleryParameters.resourceProviders(resourceProviders);\n\n            // Convert the filled out data model to parameters before returning them.\n            mappedOutputs = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.modelToParameters(providerDataModel);\n\n            deferred.resolve(mappedOutputs);\n        } else {\n            deferred.reject();\n        }\n\n        return deferred.promise;\n    }\n\n    /**\n     * (Optional) Executes a custom provisioning action. Override this method for custom provisioning.\n     *\n     * NOTE: You cannot implement both the \"mapOutputsForProvisioning\" and \"executeCustomProvisioning\"\n     * methods. Implement one or the other, but not both.\n     *\n     * @param outputParameters The outputs of the parameter collection flow.\n     * @param options The options used for the provisioning process.\n     * @return A promise object that is resolved with any value (operation results) if the provisioning\n     *      succeeds, or rejected if it fails.\n     */\n    public executeCustomProvisioning(\n        outputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters,\n        options: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionOptions)\n        : Promise<any> {\n        var deferred = Q.defer(),\n            providerDataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<ProviderDataModel>(outputParameters);\n\n        if (providerDataModel) {\n            // Do something with the data...\n            var queryParams = [providerDataModel.providerParams.paramP()];\n\n            GlobalDataLayer.queryServer(queryParams).then(\n                (dataFromServer) => { deferred.resolve(dataFromServer); },\n                () => { deferred.reject(); });\n        } else {\n            deferred.reject();\n        }\n\n        return deferred.promise;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM Requests in PropertiesViewType\nDESCRIPTION: Example of how to define ARM (Azure Resource Manager) requests within the PropertiesViewType. It shows how to specify resource IDs and API versions for multiple requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"resources\": [\n    {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n    },\n    {\n        \"name\": \"vmInstanceView\",\n        \"id\": \"[concat(parameters('id'), '?$expand=instanceView')]\",\n        \"apiVersion\": \"2021-03-01\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining DataSources for Graph API Integration\nDESCRIPTION: Demonstrates how to define a dataSource that connects to Microsoft Graph API. The configuration specifies the kind as 'graph', provides a name for reference, and includes the API path with query parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeDataSources.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dataSources\": [\n    {\n    \"kind\": \"graph\",\n    \"name\": \"mygraph\",\n    \"path\": \"v1.0/me?$select=displayName,id,mail\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Website EntityCache\nDESCRIPTION: Shows EntityCache implementation for handling individual website entities. Includes configuration for URI formatting and integration with QueryCache for data consistency.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websiteEntities = new EntityCache<WebsiteModel, number>({\n    entityTypeName: WebsiteModelMetadata.name,\n\n    // uriFormatter() is a function that helps you fill in the parameters passed by the fetch()\n    // call into the URI used to query the backend. In this case websites are identified by a number\n    // which uriFormatter() will fill into the id spot of this URI. Again this particular endpoint\n    // requires the sessionId parameter as well but yours probably doesn't.\n    sourceUri: FxData.uriFormatter(MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites/{id}\"), true),\n\n    // this property is how the EntityCache looks up a website from the QueryCache. This way we share the same\n    // data object across multiple views and make sure updates are reflected across all blades at the same time\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Edit Tracking for a Property using Attributes in C#\nDESCRIPTION: Provides the C# equivalent for opting out of edit tracking. It uses the `[TrackEdits(false)]` attribute on the `AccruedVacationDays` property within the `Employee` class. The class itself must be associated with type metadata, typically indicated by an attribute like `[TypeMetadataModel(typeof(Employee))]`. This instructs the framework to not track changes to this specific property within an `EditScope`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n    [TypeMetadataModel(typeof(Employee))]\n    public class Employee\n    {\n        [TrackEdits(false)]\n        public int AccruedVacationDays { get; set; }\n\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous ARM Command Operation in Azure Portal View\nDESCRIPTION: Example configuration for an asynchronous ARM command operation in a view definition. Demonstrates setting up a POST operation with custom polling header for long-running operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewArmCommand-properties-definition.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definition\":{\n    \"httpMethodType\": \"POST\",\n    \"uri\": \"{resourceid}/myaction?api-version=2018-09-01-preview\",\n    \"asyncOperation\": {\n      \"pollingHeaderOverride\": \"Azure-AsyncOperation\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen Properties View Schema\nDESCRIPTION: JSON schema for implementing a Properties view as a full screen blade accessed from a resource menu. Defines the basic structure including view kind, parameters, resources and property groups.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Properties\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Properties Example\",\n      \"groups\": [\n        {\n          \"displayName\": \"Virtual machine\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n          \"description\": \"This is a virtual machine.\",\n          \"items\": [\n          ]\n        },\n        {\n          \"displayName\": \"Availability + scaling\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.AvailabilitySet\",\n          \"items\": [\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Azure Portal ViewModel with DataContext\nDESCRIPTION: Example of a view model constructor that receives and uses a DataContext reference to create a data view. Shows how view models access shared data through the Area's DataContext singleton.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.ContainerContract, dataContext: MasterDetailArea.DataContext, _mock: AjaxMock) {\n    super();\n\n    this.title(ClientResources.masterDetailEditMasterBladeTitle);\n    this.subtitle(ClientResources.masterDetailEditMasterBladeSubtitle);\n\n    this._view = dataContext.websitesQuery.createView(container);\n\n```\n\n----------------------------------------\n\nTITLE: Using ko.ignoreDependencies() within a Knockout.js Reactor in TypeScript\nDESCRIPTION: This snippet shows how to use `ko.ignoreDependencies()` within a `ko.reactor`. Any observables read inside the `ko.ignoreDependencies` callback (potentially within `_processFoo`) will not become dependencies of the reactor. Only observables read outside this block (`this.foo()` and `this.bar()`) will trigger recalculations. This is one method to explicitly control dependencies.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nlet computed = ko.reactor(lifetime, () => {\n    let foo = this.foo();\n    let bar = this.bar();\n    ko.ignoreDependencies(() => {\n        this._processFoo(foo, bar);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Values for EssentialsItemReference Format\nDESCRIPTION: This enumeration specifies the allowed format types for essentials item references. It includes options for no formatting, string formatting, date formatting, and number formatting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-essentialsItemReference-format.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- NoFormat\n- String\n- Date\n- Number\n```\n\n----------------------------------------\n\nTITLE: Defining the RobotDetails Projection Interface for Grid Display in TypeScript\nDESCRIPTION: Declares the RobotDetails interface to represent data shaped for grid binding. Each property (name, status, modelAndMfg) is a KnockoutObservableBase<string>, supporting UI updates when their values change. This interface is the output for mapping functions projecting Robot data for consumption by grid components, requiring each field to be observable as well.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Details for the shaped data that is bound to the grid.\n*/\nexport interface RobotDetails {\n   name: KnockoutObservableBase<string>;\n   status: KnockoutObservableBase<string>;\n   modelAndMfg: KnockoutObservableBase<string>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Prematurely Removing All Loading Indicators in onInputsSet - Azure Portal Part (TypeScript)\nDESCRIPTION: Warns against returning a resolved or empty promise in onInputsSet before initiating or awaiting completion of all data fetches, causing loading indicators to disappear while data is still being loaded. This anti-pattern can make the Part appear broken or unresponsive to the user. Dependencies: Q (promise lib), _view.fetch(). Inputs: inputs with resourceId. Outputs: No indicator while the fetch is still in progress, leading to poor UX. Limitation: Should be strictly avoided; always return a promise representing all outstanding load operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parts-revealContent.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: MyPartInputs): Promise {\n    this._view.fetch(inputs.resourceId);\n\n    // DO NOT DO THIS!  Removes all loading indicators.\n    // Your Part will look broken while the `fetch` above completes.\n    return Q();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Metadata with PDE File - JSON\nDESCRIPTION: This snippet shows the structure of a typical PDE (.pde) file written in JSON, which declares global extension metadata like extension name, version, schema, asset types, parts, and blades. Dependencies include a build process that emits this metadata according to the Azure extension requirements. The inputs and outputs (e.g., assetTypes, parts, blades) enumerate the resources to be shared between portal extensions. Key parameters such as 'extension', 'version', and resource arrays must be kept in sync for successful extension sharing; the file must remain valid JSON.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-pde.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extension\": \"HubsExtension\",\n  \"version\": \"1.0\",\n  \"sdkVersion\": \"1.0.8889.122 (rd_auxweb_n_f1(tomcox).130919-1440)\",\n  \"schemaVersion\": \"0.9.1.0\",\n  \"assetTypes\": [\n    {\n      \"name\": \"TagsCollection\",\n      \"permissions\": []\n    }\n    ...\n  ],\n  \"parts\": [\n    {\n      \"name\": \"ChangeLogPart\",\n      \"inputs\": []\n    },\n    ...\n  ],\n  \"blades\": [\n    {\n      \"name\": \"TagCollectionBlade\",\n      \"keyParameters\": [],\n      \"inputs\": [],\n      \"outputs\": []\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Client Trace in Azure Portal Extensions\nDESCRIPTION: Illustrates the structure of a typical JSON payload sent to the client trace endpoint, including timestamp, level, area, message, and additional arguments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"timestamp\": 1389849966392,\n        \"level\": 0,\n        \"area\": \"Performance\",\n        \"message\": \"This is an example trace event.\",\n        \"args\": [\n            \"extra arg 1\",\n            12345,\n            \"you can have many of these\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Finding and Clicking Parts on Azure Portal StartBoard (C#)\nDESCRIPTION: This snippet demonstrates how to find a part on the Azure Portal StartBoard using the Portal.StartBoard.FindSinglePartByTitle method and click on it. It requires an instance of the Portal object.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar portal = this.NavigateToPortal();\n\nstring samplesTitle = \"Samples\";\n\nvar samplesPart = portal.StartBoard.FindSinglePartByTitle<ButtonPart>(samplesTitle);\nsamplesPart.Click();\n```\n\n----------------------------------------\n\nTITLE: Checking RDFE/Classic Access in TypeScript\nDESCRIPTION: This snippet shows how to check for RDFE (classic) access before adding UI that requires it.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Extension.hasPermission(resourceUri, [\"rdfe\"]).then((hasAccess) => {\n    if (!hasAccess) { container.unauthorized(); return; }\n    /* do awesome stuff */\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Progress Notification in TypeScript\nDESCRIPTION: Demonstrates how to update a pending notification's progress using the new update method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnotification.update({\n    percentComplete: percentComplete + 10,\n});\nnotification.update({\n    percentComplete: percentComplete + 20,\n});\nnotification.update({\n    percentComplete: percentComplete + 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying ARM Template with Continuous Operation Updates in TypeScript\nDESCRIPTION: This code snippet shows how to deploy an Azure Resource Manager template while receiving continuous updates on all operations. It uses the DeployAndGetAllOperations mode, which provides progress callbacks throughout the deployment process, allowing for real-time monitoring of the deployment status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Prepare the template deployment options.\nvar deploymentOptions: MsPortalFx.Azure.ResourceManager.TemplateDeploymentOptions = {\n    // Same options as in sample #1, except:\n    deploymentMode: MsPortalFx.Azure.ResourceManager.TemplateDeploymentMode.DeployAndGetAllOperations\n};\n\n// Deploy the template.\nMsPortalFx.Azure.ResourceManager.deployTemplate(options)\n    .progress((progress: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // First time will be called when ARM accepts the deployment request.\n        // Store the correlation id if you have UI that reflects the progress for the case when the user abandons the session.\n        // Subsequent calls will continuously reports progress (and operations) while the deployment is in progress.\n    }).then((result: MsPortalFx.Azure.ResourceManager.TemplateDeploymentResult) => {\n        // Deployment is complete.\n    }, (error: any) => {\n        // Something went wrong!\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource ID Picker with Value Subscriptions in TypeScript\nDESCRIPTION: Sets up a picker for resource IDs with value change monitoring. Updates dynamic resource ID based on selected value, handling null and valid resource options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _initializeResouceLinkSample(container: BladeContainer) {\n    this.resourceIdPicker.value.subscribe(container, (value) => {\n        if (Resources.nullResourceIdLabel === value) {\n            this.dynamicResourceId(null);\n        } else if (Resources.validResource === value) {\n            this.dynamicResourceId(\"/subscriptions/sub123/resourceGroups/accounts/providers/Microsoft.test/accounts/Peter\");\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Status Column Query with Icon Implementation\nDESCRIPTION: KQL query demonstrating how to implement status columns with icons in Azure Portal. Shows case statements for different resource states and corresponding icon mappings using StatusBadge icons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_7\n\nLANGUAGE: kql\nCODE:\n```\nwhere type == 'microsoft.web/sites'\n| extend status = case(\n    state == 'stopped', '{{Resource status.stopped, Module=BrowseResources}}',\n    state == 'running', '{{Resource status.running, Module=BrowseResources}}',\n    '{{Resource status.other, Module=BrowseResources}}')\n| extend statusIcon = case(\n    state == 'stopped', {{Icon StatusBadge.Stopped}},\n    state == 'running', {{Icon StatusBadge.Success}},\n    {{Icon StatusBadge.None}})\n| project name,resourceGroup,kind,location,id,type,subscriptionId,tags,status,statusIcon\n```\n\n----------------------------------------\n\nTITLE: Configuring Full-Screen Monitoring View in Azure Portal JSON\nDESCRIPTION: This JSON schema defines a full-screen monitoring view that can be opened from a resource menu. It includes the view kind, parameters, resources, and properties such as title and charts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Monitoring\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Monitoring Example\",\n      \"charts\": [\n       {\n         \"title\": \"CPU (average)\",\n         \"metrics\": [\n           {\n             \"id\": \"Percentage CPU\",\n             \"aggregationType\": \"Avg\",\n             \"resourceMetadata\": {\n               \"id\": \"[parameters('id')]\"\n             }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Common.OptionsGroup Control in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.Common.OptionsGroup control in JSON format. It includes properties for name, type, label, defaultValue, toolTip, infoMessages, constraints, and visibility. The control allows users to select one option from two or more choices.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.OptionsGroup.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"element1\",\n  \"type\": \"Microsoft.Common.OptionsGroup\",\n  \"label\": \"Some options group\",\n  \"defaultValue\": \"Value two\",\n  \"toolTip\": \"\",\n  \"infoMessages\": [\n    {\n      \"style\": \"Info\",\n      \"text\": \"Style = Info\",\n      \"uri\": {\n        \"value\": \"https://microsoft.com\",\n        \"text\": \"Learn more\"\n      },\n      \"visible\": true\n    },\n    {\n      \"style\": \"Warning\",\n      \"text\": \"Style = Warning\",\n      \"uri\": {\n        \"value\": \"https://microsoft.com\",\n        \"text\": \"Learn more\"\n      },\n      \"visible\": true\n    }\n  ],\n  \"constraints\": {\n    \"allowedValues\": [\n      {\n        \"label\": \"Value one\",\n        \"value\": \"one\"\n      },\n      {\n        \"label\": \"Value two\",\n        \"value\": \"two\"\n      }\n    ],\n    \"required\": true\n  },\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Collection Utilities for Data Model Conversion (Portalfx, TypeScript)\nDESCRIPTION: This example demonstrates the use of Portalfx-provided utilities to convert between parameter set collections and strongly-typed data model instances. The 'parametersToModel' function produces a data model from an input parameter set collection, while 'modelToParameters' serializes a data model back into a parameter set collection for submission. Dependencies include MsPortalFx.ViewModels.ParameterCollectionV2.Utilities and the type definitions for the data models.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<MyDataModel>(parameterSetCollection);\nparameterSetCollection = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.modelToParameters<MyDataModel>(dataModel);\n```\n\n----------------------------------------\n\nTITLE: EditScope API Methods\nDESCRIPTION: Core EditScope API methods for managing entity objects including applyArrayAsEdits for diffing arrays, getCreated/addCreated for handling new entities, and markForDelete for non-destructive deletion.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napplyArrayAsEdits\ngetCreated/addCreated\nmarkForDelete\n```\n\n----------------------------------------\n\nTITLE: Creating Policy-Aware Resource Group Dropdown Validation\nDESCRIPTION: This snippet shows how to implement policy validation for a resource group dropdown, handling both existing and new resource groups. It adjusts the policy check request scope based on the resource group selection mode.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// create another policy validation from the factory\n// eslint-disable-next-line deprecation/deprecation\nconst rgPolicyValidation = primaryEnginePolicyFactory?.createFieldValidation<FxResourceGroupDropDown.Value>({\n    // This will be run after the previously run buildResourceDetails\n    buildResourceDetails: (resourceDetails, val) => {\n        const requestScope = resourceDetails.scope;\n        //add the resource group to the subscription to set the scope to the resource group\n        resourceDetails.scope = val?.value?.resourceId;\n        // buildResourceDetails will accept a return value of a different requestScope along side the resource details\n        // In the case that the scope of the policy check request hasn't been created e.g. a new resource group\n        // You'll need to request it at the scope where the new scope is about to be created\n        return val?.mode === FxResourceGroupDropDown.Mode.CreateNew ? { requestScope, resourceDetails } : { requestScope: resourceDetails.scope, resourceDetails };\n    },\n}).validation;\n```\n\n----------------------------------------\n\nTITLE: Implementing Required CheckBox with Custom Validation Message in JSON\nDESCRIPTION: This snippet demonstrates how to configure a CheckBox control with required validation. It defines a checkbox that users must check to acknowledge legal conditions, displaying a custom validation message if not selected.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.CheckBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"legalAccept\",\n    \"type\": \"Microsoft.Common.CheckBox\",\n    \"label\": \"I agree to the terms and conditions.\",\n    \"constraints\": {\n        \"required\": true,\n        \"validationMessage\": \"Please acknowledge the legal conditions.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Network.PublicIpAddressCombo Control in Azure Portal\nDESCRIPTION: Sample JSON configuration for the Microsoft.Network.PublicIpAddressCombo control. This control allows users to select an existing public IP address or create a new one, with options to configure domain name labels. The snippet shows various properties including labels, constraints, scope settings, and visibility options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.PublicIpAddressCombo.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Network.PublicIpAddressCombo\",\n    \"label\": {\n      \"publicIpAddress\": \"Public IP address\",\n      \"domainNameLabel\": \"Domain name label\"\n    },\n    \"toolTip\": {\n      \"publicIpAddress\": \"\",\n      \"domainNameLabel\": \"\"\n    },\n    \"defaultValue\": {\n      \"publicIpAddressName\": \"ip01\",\n      \"domainNameLabel\": \"mydomain\"\n    },\n    \"constraints\": {\n      \"required\": {\n        \"domainNameLabel\": true\n      }\n    },\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"resourceGroupName\": \"[steps('basics').resourceScope.resourceGroup.name]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"options\": {\n      \"hideNone\": false,\n      \"hideDomainNameLabel\": false,\n      \"hideExisting\": false,\n      \"zone\": 3\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command to Reference ARM Request Form Blade\nDESCRIPTION: This JSON snippet defines a command to be added to a parent declarative blade, which opens the ARM request Form blade. The command includes an icon, display name, and parameters to pass to the Form blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n      {\n        \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n        \"id\": \"formarmrequestCommand\",\n        \"kind\": \"OpenBladeCommand\",\n        \"displayName\": {\n          \"property\": \"formArmRequest\"\n        },\n        \"blade\": {\n          \"name\": \"FormBladeArmRequest_Dx\",\n          \"inContextPane\": true,\n          \"parameters\": {\n            \"id\": \"[parameters('id')]\"\n          }\n        }\n      },\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Provider Role in TypeScript\nDESCRIPTION: Implementation of a Parameter Provider role that allows overriding input and output parameters in the parameter collection process. The provider can modify parameters before the edit scope is created and transform output parameters before they are sent to the collector.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sample parameter collection \"collector\" role.\n */\nexport class MyProvider implements MsPortalFx.ViewModels.ParameterCollectionV2.Roles.ParameterProvider {\n\n    /**\n     * (Optional) Overrides the input parameters received from the collector. Use this to override\n     * or initialize any value before the editScope is created. Otherwise, the editScope will be\n     * seeded with the input parameters as they are.\n     *\n     * @param inputParameters The input parameters received from the collector.\n     * @param inputMetadata The input parameters metadata received from the collector.\n     * @param options The parameter collection options received from the collector.\n     * @return A JQuery promise object resolved with the overriden input parameters.\n     */\n    public overrideInputParameters(\n        inputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.InputParameters,\n        inputMetadata: MsPortalFx.ViewModels.ParameterCollectionV2.InputMetadata,\n        options: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionOptions)\n        : Promise<MsPortalFx.ViewModels.ParameterCollectionV2.InputParameters> {\n        var deferred = Q.defer<MsPortalFx.ViewModels.ParameterCollectionV2.InputParameters>();\n\n        // You can either replace, modify or augment the input parameters passed to the provider.\n        // You can also use this place to make the inputs match your data model (if they don't),\n        //     and the only reason why we're not using the data model here in this example.\n        deferred.resolve({\n            newParameterSet: {\n                parameterP: providerDataModel[\"providerParams\"][\"paramP\"].toLowerCase(),\n                parameterQ: providerDataModel[\"providerParams\"][\"paramX\"] + providerDataModel[\"providerParams\"][\"paramY\"],\n                // More parameters..\n            },\n            // More parameter sets..\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * (Optional) Overrides the output parameters sent to the collector at the end of the parameter\n     * collection process. Otherwise, the dataModel (the data in the editScope) will be sent to\n     * the collector as they are.\n     *\n     * @param outputParameters The output parameters to be sent to the collector (extracted from the dataModel).\n     * @param options The parameter collection options received from the collector.\n     * @return A JQuery promise object resolved with the overriden output parameters.\n     */\n    public overrideOutputParameters(\n        outputParameters: MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters,\n        options: MsPortalFx.ViewModels.ParameterCollectionV2.ParameterCollectionOptions)\n        : MsPortalFx.ViewModels.ParameterCollectionV2.OutputParameters{\n        var providerDataModel = MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.parametersToModel<ProviderDataModel>(outputParameters);\n\n        // You can either replace, modify or augment the output parameters passed back to the collector.\n        // You can also transform the structure completely, and you wouldn't use the data model in that\n        // case (not in this sample, but similar to overrideInputParameters above).\n        providerDataModel.providerParams.paramP(\"override value\");\n\n        return MsPortalFx.ViewModels.ParameterCollectionV2.Utilities.modeltoParameters<ProviderDataModel>(providerDataModel);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Portal Notification Button Interface - TypeScript\nDESCRIPTION: This TypeScript interface describes the shape of a notification button in the Iris-Azure Portal notification contract. It supports several button actions, including opening a portal blade, launching an external link, or performing a deep link. Dependencies: Expects consumers to handle button localization, telemetry, and blade extension resolution. Key parameters include label (required), id (optional), and optional openBlade, externalLink, or deepLink objects with action-specific arguments. Input: Object conforming to this interface; Output: Actionable UI button for notification components. Limit: At most one button per notification.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-iris.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NotificationButton {\n    /**\n     * Button label (should be localized).\n     */\n    label: string;\n\n    /**\n     * Optional button id  which will be logged in telemetry (non localized string).\n     */\n    id?: string;\n\n    /**\n     * Arguments for an \\\"openBlade\\\" action (opens a portal blade).\n     */\n    openBlade?: {\n        /**\n         * The blade name.\n         */\n        blade: string;\n\n        /**\n         * The extension name.\n         */\n        extension: string;\n\n        /**\n         * The inputs to the blade. Defaults to an empty object.\n         */\n        parameters?: any;\n\n        /**\n         * Defines whether the blade should be launched in a context pane. Defaults to false.\n         */\n        openInContextPane?: boolean;\n    };\n\n    /**\n     * Arguments for an \\\"externalLink\\\" action (launches an external link). This will open the link with a new tab.\n     */\n    externalLink?: {\n        /**\n         * The URI to launch.\n         */\n        uri: string;\n    };\n\n    /**\n     * Arguments for an \\\"deepLink\\\" action (launches a deep link). This will open the link within the same tab.\n     */\n    deepLink?: {\n        /**\n         * The URI to launch.\n         */\n        uri: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Dependencies for a Knockout.js Reactor in TypeScript\nDESCRIPTION: This snippet illustrates using the explicit dependency overload for `ko.reactor`. By passing an array of observables (`[this.foo, this.bar]`) as the second argument, the reactor is guaranteed to recalculate only when `this.foo` or `this.bar` changes, regardless of other observables accessed within the function body (`_processFoo`). The current values of the specified dependencies are passed as arguments to the callback function. This is often a cleaner way to manage dependencies compared to `ko.ignoreDependencies`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nlet computed = ko.reactor(lifetime, [this.foo, this.bar], (foo, bar) => {\n    this._processFoo(foo, bar);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Blade Action in Azure Portal\nDESCRIPTION: Defines a clickable link that opens an Azure Portal blade with specified parameters and extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a blade\",\n    \"value\": \"Blade name\",\n    \"action\": {\n        \"blade\": {\n            \"name\": \"A blade name\",\n            \"extension\": \"An extension name\",\n            \"parameters\": {\n                \"resId\": \"[resources().id]\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Azure Permissions Programmatically in Azure Portal Extensions (TypeScript)\nDESCRIPTION: Illustrates using the `MsPortalFx.Extension.hasPermission` function in TypeScript for fine-grained permission checks within an Azure Portal extension. It takes a resource URI and an array of required permission actions (referenced via the extension definition) and returns a promise resolving to a boolean indicating access. The example shows how to handle the result, typically calling `container.unauthorized()` if access is denied.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Extension.hasPermission(resourceUri, [ExtensionDefinition.AssetTypes.Robot.Permissions.read])\n    .then((hasAccess) => {\n        if (!hasAccess) { container.unauthorized(); return; }\n        /* do awesome stuff */\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering Test Extensions with MsPortalImpl API in JavaScript\nDESCRIPTION: Commands to register a custom extension for testing using the MsPortalImpl.Extension.registerTestExtension API. This allows developers to load extensions from domains other than localhost. The extension can be registered temporarily for the current session or persistently across sessions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-sideloading.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// use this command if the changes should persist \n//  until the user restores default settings or\n//  executes MsPortalImpl.Extension.unregisterTestExtension(\"<extensionName>\")\nMsPortalImpl.Extension.registerTestExtension({ \nname: \"<extensionName>\", \nuri: \"https://<endpoint>:<portNumber>\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Initiating an Ev2 Test Deployment using PowerShell\nDESCRIPTION: Demonstrates using the `New-AzureServiceRollout` PowerShell cmdlet to initiate a test deployment from a local build output. It requires specifying the path to the ServiceGroupRoot directory, the Rollout Specification JSON file, and setting the `-RolloutInfra` parameter to `Test`. The `-Verbose` and `-WaitToComplete` switches are used for detailed logging and synchronous execution.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-AzureServiceRollout -ServiceGroupRoot E:\\dev\\vso\\AzureUX-PortalFX\\out\\ServiceGroupRoot -RolloutSpec E:\\dev\\vso\\AzureUX-PortalFX\\out\\ServiceGroupRoot\\RolloutSpec.P1D.json -RolloutInfra Test -Verbose -WaitToComplete\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AutogenForm View with ARM Template in JSON\nDESCRIPTION: This snippet shows a basic configuration for an AutogenForm view, including the schema reference, view kind, and deployment properties. It specifies the ARM template file path for conversion to FormBlade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/AutogenFormViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"AutogenForm\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"template\": {\n          \"file\": \"{ARM template file path}\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Lighthouse Performance Scores in Kusto\nDESCRIPTION: This Kusto query fetches Lighthouse performance data from the 'Framework' database for the last hour using the 'LighthousePerformance' function. The third parameter allows filtering by a specific blade/extension identifier (empty string means no filter). It returns the view identifier, overall Lighthouse score, load count, and detailed investigation metrics like FirstContentfulPaint, LargestContentfulPaint, TimeToInteractive, TotalBlockingTime, CumulativeLayoutShift, and a detailed breakdown for prioritization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: Kusto\nCODE:\n```\ndatabase('Framework').LighthousePerformance(ago(1h), now(), \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining VaultPickerConfig Interface in TypeScript\nDESCRIPTION: Defines the configuration interface for the KeyVault picker, including options for filtering vaults and controlling picker behavior.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface VaultPickerConfig {\n    subscriptionId?: string; // if supplied, only vaults from this subscription will be shown. If not, vaults in all. Subscriptions will be shown.\n    resourceGroup?: string; // only valid when subscriptionId is supplied, otherwise behavior is undefined. Name of resourceGroup to show vaults for.\n    location?: string; // if supplied, only vaults in this region/location will be shown\n    showCreateNew?: boolean; // whether the picker should display the create new button.\n    createOnBlade?: boolean; // whether the vault should be created on the blade, or returned to be created later (ex. in a template deployment). This should not be false if you are using the key/secret pickers as well, since the vault needs to be created in order to select keys/secrets.\n    requiredPermissions?: string[]; // **TODO – Not implemented yet** An array of requirements for the ability for this user to select vaults. If the user doesn't have this access the vault will be shown but displayed as disabled. Allowed values are: \"keys\", and \"secrets\" for listing keys, and listing secrets respectively.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Property Groups in PropertiesViewType\nDESCRIPTION: Example of how to define a property group within the PropertiesViewType. It shows how to set the display name, icon, and optional menu action for a group.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk\",\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Discs\",\n    \"action\": {\n        \"menu\": \"disk\"\n    },\n    \"items\": [\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Fxclick Picker in TypeScript\nDESCRIPTION: Sets up a picker for fxclick behavior with value change monitoring. Updates dynamic fxclick based on selected value, currently handling callback option.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _initializeDynamicFxclickLinkSample(container: BladeContainer) {\n    this.fxclickPicker.value.subscribe(container, (value) => {\n        if (Resources.callback === value) {\n            this.dynamicFxclick(this._onCallbackFxclickClick);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Edit Tracking for a Property via Type Metadata in TypeScript\nDESCRIPTION: Shows how to use `MsPortalFx.Data.Metadata.setTypeMetadata` in TypeScript to configure edit tracking behavior for a specific property within a type (`\"Employee\"`). By setting `trackEdits: false` for the `accruedVacationDays` property, `EditScope` will ignore changes made to this property, which is useful for presentation-only fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    MsPortalFx.Data.Metadata.setTypeMetadata(\"Employee\", {\n        properties: {\n            accruedVacationDays: { trackEdits: false },\n            ...\n        },\n        ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Referencing a Command Group in a Blade PDL (XML)\nDESCRIPTION: This PDL snippet shows how a Blade ('ContactHomeBlade') references a predefined `CommandGroup` ('ContactCommands') using `<CommandGroupReference>`. It utilizes `<CommandBindings>` to map blade parameters (e.g., 'id') to specific command properties ('id') within the group, enabling data flow to the command view models.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"ContactHomeBlade\"\n       ViewModel=\"ContactHomeBladeViewModel\">\n\n  <Blade.Parameters>\n    <Parameter Name=\"id\" Type=\"Key\" />\n  </Blade.Parameters>\n\n  <CommandGroupReference Name=\"ContactCommands\">\n    <CommandBindings Command=\"BlockContact\">\n      <Binding Property=\"id\" Source=\"{BladeParameter id}\" />\n    </CommandBindings>\n    <CommandBindings Command=\"DeleteContact\">\n      <Binding Property=\"id\" Source=\"{BladeParameter id}\" />\n    </CommandBindings>\n  </CommandGroupReference>\n  ...\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Configuring uriFormat for Hosting Service - JSON\nDESCRIPTION: This JSON snippet demonstrates updating the extension configuration by specifying the uriFormat for Azure Hosting Service in the production environment. The uriFormat parameter is changed from referencing a self-hosted URL to a hosting service URL template, which allows Azure Portal to route requests dynamically. Dependencies: Follows Azure extension registration format; parameters include extension name, original uri, new uriFormat, and a feedback email for diagnostics or service issues. Inputs include extension-specific names and endpoints; output is the correctly patched configuration applied in the deployment pipeline. Limitation: Only valid URLs and unique extension identifiers should be used.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    name: \"Microsoft_Azure_MyExtension\",\n    uri: \"//selfhost.net/myextension\",\n    uriFormat: \"//myextension.hosting.portal.azure.net/myextension/{0}\",\n    feedbackEmail: \"azureux-myextension@microsoft.com\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data Field in Kusto for Azure Portal Telemetry\nDESCRIPTION: Example of the Data field JSON structure for the 'ProvisioningStarted' Action in Kusto telemetry queries. This shows the format of additional context data captured for specific actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-kusto-databases.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"oldCreateApi\": true,\n\t\"launchingContext\": {\n\t\"galleryItemId\": \"Microsoft.SQLDatabase\",\n\t\"source\": [\n\t\t\"GalleryCreateBlade\"\n\t],\n\t\"menuItemId\": \"recentItems\",\n\t\"itemIndex\": 0\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Type Metadata in TypeScript for EditScope\nDESCRIPTION: Sets type metadata for a GridItem entity with key, option, and value properties. The key property is designated as the entity's ID property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Data.Metadata.setTypeMetadata(\"GridItem\", {\nproperties: {\n    key: null,\n    option: null,\n    value: null,\n},\nentityType: true,\nidProperties: [ \"key\" ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional POST Request for Storage Account Keys\nDESCRIPTION: Demonstrates making a POST request to list storage account keys with a condition based on storage account existence. Shows how to reference and display the response data in tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      },\n      {       \n        \"name\": \"testPOSTCondition\",   \n        \"method\": \"POST\",      \n        \"id\": \"[concat(resources('storageAccount').id,'/listKeys')]\",    \n        \"condition\": \"[not(empty(resources('storageAccount').id))]\",   \n        \"apiVersion\": \"2021-09-01\"   \n       }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST listCondition\",\n              \"value\": \"[resources('testPOSTCondition').keys.length]\",\n              \"description\": \"Number of access keys\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Constraints Validation Options in Markdown\nDESCRIPTION: This snippet outlines two options for defining resource constraints and validations. Option 1 focuses on custom validation expressions, while Option 2 deals with permission-based validations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceConstraints-validations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Option 1\n### An array of items, where each item is of the type:\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|isValid|True|Expression to validate(can contain CreateUIDef functions).\n|message|True|Message to be shown on validation failure.\n|fx.feature|False|\n### Option 2\n### An array of items, where each item is of the type:\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|permission|True|Specify the action for which checks will be performed to see if the user has permissions to perform that action against the subscription/ resource.\n|message|True|Message to be shown on validation failure.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Status Enum for Portal Notifications - TypeScript\nDESCRIPTION: This TypeScript code defines the NotificationStatus enum, representing the possible states an in-portal notification can have (Information, Warning, Error, InProgress, Success). Dependency: No external dependencies, but this enum should be used in conjunction with the wider notification contract. The 'status' field in notification payloads is expected to reference this enum, enabling consistent iconography and logic based on status across the portal notification system. Input: Numeric or enum field representing notification status. Output: Enum for consuming notification components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-iris.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n/**\n * The notification status.\n */\n export enum NotificationStatus {\n    /**\n     * An Information notification\n     */\n    Information = 0,\n\n    /**\n     * A Warning notification\n     */\n    Warning = 1,\n\n    /**\n     * An Error notification\n     */\n    Error = 2,\n\n    /**\n     * An InProgress notification\n     */\n    InProgress = 3,\n\n    /**\n     * A Success notification\n     */\n    Success = 4,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Ajax Error Logging in C# Extension Definition\nDESCRIPTION: Shows how to enable automatic logging of Ajax errors by setting the 'TraceAjaxErrors' property to true in the extension definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool TraceAjaxErrors\n{\n    get\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Blades and Parts within Blades in Azure Portal (C#)\nDESCRIPTION: This code shows how to find blades using Portal.FindSingleBladeByTitle and locate parts within blades using Blade.FindSinglePartByTitle. It demonstrates navigating through the Azure Portal interface programmatically.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar blade = portal.FindSingleBladeByTitle(samplesTitle);\n\nstring sampleName = \"Notifications\";\n\nblade.FindSinglePartByTitle(sampleName).Click();\n\nblade = portal.FindSingleBladeByTitle(sampleName);\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.LocationSelector with Resource Type Filtering and Region Constraints in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.Common.LocationSelector control with specific resource types and allowed locations. It references a subscription ID from a previous ResourceScope control and limits available regions to 'eastus' and 'westus'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.LocationSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Assuming the name of the first step is 'basics'; and the name of ResourceScope control is 'resourceScope' \n{\n    \"type\": \"Microsoft.Common.LocationSelector\",\n    \"name\": \"location\",\n    \"label\": \"Select a region\",\n    \"resourceTypes\": [\n        \"Microsoft.BotService/botServices\",\n        \"Microsoft.KeyVault/vaults\"\n    ],\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\"\n    },\n\t\"allowedValues\": [\"eastus\", \"westus\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for Pickers in TypeScript\nDESCRIPTION: This snippet shows how to add a filter to check access in pickers using TypeScript.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.filters([\n    new MsPortalFx.ViewModels.PickerFilter.ArmRbacFilter((item: PickersData.MyResourcePickerGridViewModel) => {\n        return item.resourceId();\n}, \"Arm.Namespace/resourceType/action\")]);\n```\n\n----------------------------------------\n\nTITLE: Opening a Blade on Button Click in JavaScript\nDESCRIPTION: This example demonstrates how to open a blade when a button is clicked using the Button control and the openBlade method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar button = new Button.create({\n    // … skipping over other button options\n    onClick: () => {\n        container.openBlade(BladeReferences.forBlade(\"SomeBlade\").createReference());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Recommendations Tab Configuration in Azure Portal\nDESCRIPTION: Simple JSON configuration for adding a Recommendations tab to a resource overview. Specifies the view kind as 'Recommendations'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Recommendations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Blade in Azure Portal - URL Pattern - Plaintext\nDESCRIPTION: Demonstrates the URL format needed to directly link to a specific blade in an Azure Portal extension. The pattern includes placeholders for the extension and blade names. No dependencies are required beyond a valid Azure Portal instance. Inputs are extension and blade identifiers; output is direct navigation via the constructed URL. The expected URL must fit the given pattern and use proper substitution for real values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#blade/{extension}/{blade}\n```\n\n----------------------------------------\n\nTITLE: Handling Resource Tags in TypeScript\nDESCRIPTION: Example of constructing parameters object with tag mappings for ARM template deployment. Shows how to handle tags for multiple resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-create.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst parameters = {\n    primaryEngineName: primaryEngineName,\n    secondaryEngineName: this._secondaryEngineName(),\n    backupEngineName: this._backupEngineName(),\n    adminPassword: this._adminPassword(),\n    displacement: this._displacement(),\n    location: location.name,\n    rgName: isFeatureEnabled(\"SubscriptionLevel\") ? resourceGroupName : undefined,\n    primaryEngineTags: this._getTagMapForResource(tagResources[0]),\n    secondaryEnginesTags: this._getTagMapForResource(tagResources[1]),\n};\n```\n\n----------------------------------------\n\nTITLE: Using VM Policy Context in React Component\nDESCRIPTION: This snippet demonstrates how to use the VM Policy Context within a React component to track field states and validate against relevant fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-adding-policy-validation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreturn <Fabric>\n    {/* Make sure to place every field which will modify a policy field within that policy's context */}\n    <VMPolicyContext>\n        <Pivot\n            aria-label=\"navigation\"\n            style={{ marginBottom: \"100px\" }}\n            styles={{ itemContainer: { maxWidth: \"720px\", paddingLeft: \"8px\", paddingTop: \"12px\" } }}\n            selectedKey={String(this.state.selectedPivotKey)}\n            onLinkClick={(item, _event) => {\n                this.setState({ selectedPivotKey: Number(item.props.itemKey) });\n            }}\n        >\n            <PivotItem headerText={pivotItemsNames[0]} itemKey=\"0\">\n                {/* The basics section has most of our policy field controls */}\n                <CreateExperienceBasicsSection\n                    onAuthenticationTypeOptionChange={(option) => this.props.setAuthenticationTypeOption(option)}\n                    onAvailabilityOptionChange={(option) => this.props.setAvailabilityOption(option)}\n                    onKeyPairNameChange={(keyPairName) => this.props.setKeyPairName(keyPairName)}\n                    onKeySourceOptionChange={(option) => { this.props.setKeySourceOption(option); }}\n                    onLocationChange={(locationId, location) => {\n                        this.props.setLocationId(locationId);\n                        this.props.setLocationName(location && location.displayName || \"\");\n                    }}\n                    onCustomizeLocations={(locs: ResourceManagement.Location[]) => {\n                        this.props.setFetchedLocations(locs);\n                        return locs;\n                    }}\n                    onPublicInboundPortsOptionChange={(option) => this.props.setPublicInboundPortsOption(option)}\n                    onResourceGroupChange={(resourceGroupName, resourceGroup, isNew) => {\n                        this.props.setResourceGroupCreateNewMode(isNew);\n                        this.props.setResourceGroupId(resourceGroup && resourceGroup.id || \"\");\n                        this.props.setResourceGroupName(resourceGroupName);\n                    }}\n                    onSelectedInboundPortsOptionChange={(option) => { this.props.setSelectedInboundPortsOption(option); }}\n                    onSubscriptionChange={(subscriptionId, subscription) => {\n                        this.props.setSubscriptionId(subscriptionId);\n                        this.props.setSubscriptionName(subscription && subscription.displayName || \"\");\n                    }}\n                    onSpotInstanceOptionChange={(option) => this.props.setSpotInstanceOption(option)}\n                    onUsernameChange={(username) => this.props.setUsername(username)}\n                    onVirtualMachineImageOptionChange={(option) => this.props.setVmImageOption(option)}\n                    onVirtualMachineNameChange={(vmName) => this.props.setVmName(vmName)}\n                    onVirtualMachineSizeOptionChange={(option) => this.props.setVmSizeOption(option)}\n                    setLocationValidationMessage={(message) => this.props.setLocationValidation(message)}\n                />\n            </PivotItem>\n            <PivotItem headerText={pivotItemsNames[1]} itemKey=\"1\">\n                <CreateExperienceTagsSection\n                    onTaggedResourcesChange={(resources) => this.props.setTaggedResources(resources)}\n                />\n            </PivotItem>\n            <PivotItem headerText={pivotItemsNames[2]} itemKey=\"2\">\n                <CreateExperienceReviewSection />\n            </PivotItem>\n        </Pivot>\n    </VMPolicyContext>\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryCache for Website List in TypeScript\nDESCRIPTION: Initializes a `QueryCache` instance named `websitesQuery` to manage a list of `WebsiteModel` objects. It specifies the entity type name (`WebsiteModelMetadata.name`) and provides a `sourceUri` function that constructs the API endpoint URL based on `WebsiteQueryParams`, potentially filtering by `runningStatus`. This cache is designed to hold multiple items retrieved from a backend API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websitesQuery = new QueryCache<WebsiteModel, WebsiteQueryParams>({\n    entityTypeName: WebsiteModelMetadata.name,\n\n    // when fetch() is called on the cache the params will be passed to this function and it\n    // should return the right URI for getting the data\n    sourceUri: (params: WebsiteQueryParams): string => {\n        let uri = MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites\");\n\n        // if runningStatus is null we should get all websites\n        // if a value was provided we should get only websites with that running status\n        if (params.runningStatus !== null) {\n            uri += \"?$filter=Running eq \" + params.runningStatus;\n        }\n\n        // this particular controller expects a sessionId as well but this is not the common case.\n        // Unless your controller also requires a sessionId this can be omitted\n        return uri;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: ResourceTypeKind Enumeration Values\nDESCRIPTION: Defines the allowed values for the resourceTypeKind enum which controls how resource types and instances are displayed. Options include hiding/showing asset types and instances.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-resourceTypeKind-options.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NoOptions\n- HideAssetType\n- HideInstances\n- ShowAssetType\n- ShowInstances\n```\n\n----------------------------------------\n\nTITLE: Enabling Resource Move in Essentials Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates setting the supportsResourceMove option in the Essentials (resource summary) part of an Azure portal extension. It ensures resource move operations are visible and available through the summary UI. Dependencies include MsPortalFx.ViewModels and relevant selection handler functions. Inputs include settings delegates, status tracking, and static properties, and the expected outcome is an updated summary configuration supporting resource moves.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemove.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar resourceSummaryOptions = <MsPortalFx.ViewModels.Parts.ResourceSummary.Options2>{\n    getQuickStartSelection: getQuickStartSelection,\n    getSettingsSelection: getAllSettingsSelection,\n    getKeysSelection: getKeysSelection,\n    supportsResourceMove: MsPortalFx.Azure.ResourceManager.MoveType.SubscriptionAndResourceGroup,\n    status: {\n        value: statusValue,\n        isLoading: statusIsLoading\n    },\n    staticProperties: properties\n}\n```\n\n----------------------------------------\n\nTITLE: Key Picker Constructor Implementation in TypeScript\nDESCRIPTION: TypeScript code demonstrating the implementation of a key picker parameter collector with configuration and result handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nthis.keyPickerCollector = new MsPortalFx.ViewModels.ParameterCollector<KeyPickerInputsOutputs>(_container, {\n          supplyInitialData: () => {\n              return <KeyPickerInputsOutputs> {\n                  vaultId: this._vaultSelector.value().id;\n                  // this is where you would pass in pre selected key, if desired\n                  key: ko.observable(<Key>{\n                      kid: ko.observable(\"\")\n                  });\n              };\n          },\n          receiveResult: (result: KeyPickerInputsOutputs) => {\n              // this is what will happen when the user finishes selecting a key and the blade closes.\n             this._keyId(result.key().kid());\n          },\n          supplyProviderConfig: () => {\n              return <KeyPickerConfig> {\n                  vaultId: this._vaultSelector.value().id();\n              };\n          }\n      });\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to QueryCache with applyChanges in Azure Portal\nDESCRIPTION: Demonstrates how to create a new robot entity and update the client-side cache without an additional server request by using applyChanges. This optimization avoids redundant AJAX traffic to the server.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\npublic createRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot,\n        type: \"POST\",\n        contentType: \"application/json\",\n        data: ko.toJSON(robot),\n    }).then(() => {\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.robotsQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we created a robot in the ca, so we will reflect this change on the client side.\n            dataSet.addItems(0, [robot]);\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring ParameterProvider for Editable String Arrays using Wrapper Type in TypeScript\nDESCRIPTION: Initializes an `MsPortalFx.ViewModels.ParameterProvider` to handle an array of strings intended for an editable grid. The `mapIncomingDataForEditScope` function wraps each string into a `StringWrapperType` object with an observable `value`, returning an observable array of these wrappers. The `mapOutgoingDataForCollector` function retrieves the edited array using `getEntityArrayWithEdits`, unwraps each `StringWrapperType` object back into a string, and returns the final string array.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<string[], KnockoutObservableArray<StringWrapperType>>(container, {\n    editScopeMetadataType: wrapperTypeMetadataName,\n    mapIncomingDataForEditScope: (incoming) => {\n        // Editable grid only accepts an array of editable entities (that is, objects and not strings).\n        const wrappedStrings = incoming.map((str) => {\n            return {\n                value: ko.observable(str),\n            };\n        });\n        return ko.observableArray(wrappedStrings);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        const entityArrayWithEdits = editScope.getEntityArrayWithEdits<StringWrapperType>(outgoing);\n\n        // Unwrap each string to produce the expected string array.\n        return entityArrayWithEdits.arrayWithEdits.map((wrapper) => {\n            return wrapper.value();\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMarketplaceCommand in Azure Portal Command Bar\nDESCRIPTION: This snippet shows how to set up an OpenMarketplaceCommand in the command bar to open the Create experience for a Marketplace package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"OpenMarketplaceCommand\",\n        \"id\": \"openMarketplaceCommand\",\n        \"displayName\": \"Marketplace Command\",\n        \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Store\",\n        \"marketplaceItemId\": \"Microsoft.DxIbizaEngine\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Resource in Azure Portal Blade\nDESCRIPTION: Shows how to handle cases where a user attempts to access a blade for a non-existent resource using the container.notFound() API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.notFound()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment with onSubmit Sequence in JSON\nDESCRIPTION: This snippet demonstrates a deployment configuration with an onSubmit sequence. It includes a condition for opening a context blade, which can update deployment parameters before sending to ARM. The example shows how to integrate additional steps in the deployment process.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"deployment\": {\n    \"kind\": \"ResourceGroup\",\n    \"resourceGroupId\": \"[steps('basics').resourceGroup.value.resourceId]\",\n    \"location\": \"[if(equals('New', steps('basics').resourceGroup.modeName), steps('basics').location.name, steps('basics').resourceGroup.value.location)]\",\n    \"onSubmit\": [\n        {\n            \"condition\": \"[equals(length(parameters('msAppId')), 0)]\",\n            \"blade\": {\n                \"name\": \"ConvergedAppRegisterBlade\",\n                \"inContextPane\": true,\n                \"parameters\": {\n                    \"name\": \"[steps('basics').resourceName]\",\n                    \"hideButton\": true\n                },\n                \"outputItem\": \"app\",\n                \"transforms\": {\n                    \"parameters\": \"{msAppId:appId,msAppPassword:appPassword}\"\n                }\n            }\n        }\n    ],\n    \"parameters\": {\n        \"botId\": \"[steps('basics').resourceName]\",\n        \"sku\": \"[steps('basics').botSku]\",\n        \"msAppId\": \"[coalesce(steps('basics').existingApp.botAppId, '')]\",\n        \"msAppPassword\": \"[coalesce(steps('basics').existingApp.botAppPassword, '')]\"\n    },\n    \"template\": {\n        \"file\": \"./createWithComposer.json\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Tab in Azure Declarative Resource Overview (JSON)\nDESCRIPTION: This JSON snippet defines the structure for a 'Capabilities' tab within the Azure Portal's Declarative Resource Overview. It specifies an array of 'capabilities', each represented as a card with a title, icon, description, and an associated action (typically linking to a resource menu item). The 'status' property dynamically determines if a capability is configured based on resource properties or expressions, displaying different text, icons, and potentially offering a configuration action (opening a blade) if not configured.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Capabilities\",\n    \"capabilities\": [\n        {\n            \"title\": \"Backup\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n            \"description\": \"Simple and reliable server backup to the cloud\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"status\": {\n                \"value\": \"[contains(resources().name, 'test')]\",\n                \"valueMapping\": [\n                    {\n                        \"value\": \"true\",\n                        \"displayName\": \"Configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n                    },\n                    {\n                        \"value\": \"false\",\n                        \"displayName\": \"Not configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                        \"action\": {\n                            \"blade\": {\n                                \"name\": \"\",\n                                \"extension\": \"\",\n                                \"parameters\": {},\n                                \"inContextPane\": true\n                            }\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            \"title\": \"Disaster recovery\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n            \"description\": \"Replicate your virtual machine to another Azure region\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"status\": {\n                \"value\": \"[not(contains(resources().name, 'test'))]\",\n                \"valueMapping\": [\n                    {\n                        \"value\": \"true\",\n                        \"displayName\": \"Configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n                    },\n                    {\n                        \"value\": \"false\",\n                        \"displayName\": \"Not configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                        \"action\": {\n                            \"blade\": {\n                                \"name\": \"\",\n                                \"extension\": \"\",\n                                \"parameters\": {},\n                                \"inContextPane\": true\n                            }\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            \"title\": \"Insights\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n            \"description\": \"Enable logs and detailed monitoring capabilities\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"status\": {\n                \"value\": \"[resources().properties.test]\",\n                \"valueMapping\": [\n                    {\n                        \"value\": \"present\",\n                        \"displayName\": \"Configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n                    },\n                    {\n                        \"value\": \"notPresent\",\n                        \"displayName\": \"Not configured\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n                        \"action\": {\n                            \"blade\": {\n                                \"name\": \"\",\n                                \"extension\": \"\",\n                                \"parameters\": {},\n                                \"inContextPane\": true\n                            }\n                        }\n                    },\n                    {\n                        \"value\": \"null\",\n                        \"displayName\": \"Error\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n                    },\n                    {\n                        \"value\": \"undefined\",\n                        \"displayName\": \"Error\",\n                        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n                    }\n                ]\n            }\n        },\n        {\n            \"title\": \"Security\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n            \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n            \"action\": {\n                \"menu\": \"tags\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertiesViewType as Tab in Resource Overview\nDESCRIPTION: JSON schema for adding the PropertiesViewType as a tab in a resource overview (GetStarted view). It shows the basic structure of the GetStarted view with placeholders for tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM Requests for Azure Portal Properties\nDESCRIPTION: This snippet demonstrates how to define ARM (Azure Resource Manager) GET requests for retrieving runtime data. It shows the structure for specifying resource IDs and API versions, and how to reference the response in property definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resources\": [\n    {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n    },\n    {\n        \"name\": \"vmInstanceView\",\n        \"id\": \"[concat(parameters('id'), '?$expand=instanceView')]\",\n        \"apiVersion\": \"2021-03-01\"\n    }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk Size\",\n    \"value\": \"[resources().properties.storageProfile.osDisk.diskSizeGB]\",\n    \"sourceUnits\": \"Gigabytes\",\n    \"maximumFractionDigits\": 2\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Visible if VM running\",\n    \"value\": \"[resources('vmInstanceView').properties.instanceView.statuses.1.displayStatus]\",\n    \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Form Controls Configuration\nDESCRIPTION: Sets up form controls including a textbox for website name editing with validation rules and section layout.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst websiteName = new ObsoleteTextBox.ViewModel(\n    this._ltm,\n    this._form,\n    this._form.createEditScopeAccessor(data => data.name),\n    {\n        label: ko.observable(ClientResources.masterDetailEditWebsiteNameLabel),\n        validations: ko.observableArray([\n            new FxViewModels.RequiredValidation(ClientResources.masterDetailEditWebsiteNameRequired),\n        ]),\n        valueUpdateTrigger: (ValueUpdateTrigger as any).Input,\n    });\n\nthis.section = Section.create(this._ltm, {\n    children: ko.observableArray<any>([\n        websiteName,\n    ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMarketplaceCommand in JSON for Azure Portal\nDESCRIPTION: This snippet demonstrates how to configure an OpenMarketplaceCommand for use in Browse Commands or View Commands. It specifies the command's properties including its kind, ID, display name, icon, and the marketplace item to open.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewOpenMarketplaceCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"OpenMarketplaceCommand\",\n    \"id\": \"OpenMarketplaceId1\",\n    \"displayName\": \"openMarketplace\",\n    \"icon\": \"MsPortalFx.Base.Images.Save\",\n    \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n    \"disabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Polling ARM Deployment Status via MsPortalFx SDK in TypeScript\nDESCRIPTION: This snippet demonstrates the syntax for calling the `pollForDeployment` function from the `MsPortalFx.Azure.ResourceManager` namespace. It is used to monitor the status of an existing ARM deployment using its correlation ID. The function takes an `options` object with subscription ID, deployment name, resource group name, correlation ID, and an optional flag to retrieve all operations. It returns a promise that resolves/rejects upon deployment completion/failure and can report progress.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-provisioning-arm.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Azure.ResourceManager.pollForDeployment(options);\n```\n\n----------------------------------------\n\nTITLE: Optimized EntityCache using invokeApi in TypeScript\nDESCRIPTION: This implementation optimizes CORS preflight requests by using the invokeApi option to funnel all requests through a single endpoint, reducing network overhead. It also removes cache:false to avoid generating unique timestamps on requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n    public resourceEntities = new MsPortalFx.Data.EntityCache<DataModels.RootResource, string>({\n        entityTypeName: ExtensionTemplate.DataModels.RootResourceType,\n        sourceUri: MsPortalFx.Data.uriFormatter(endpoint + \"{id}?\" + this._armVersion, false),\n        supplyData: (httpMethod: string, uri: string, headers?: StringMap<any>, data?: any, params?: any) => {\n            return MsPortalFx.Base.Net.ajax({\n                uri: uri,\n                type: httpMethod || \"GET\",\n                dataType: \"json\",\n                traditional: true,\n                headers: headers,\n                contentType: \"application/json\",\n                setAuthorizationHeader: true,\n                invokeApi: \"api/invoke\",\n                data: data\n            })\n        }\n    });    \n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Blade View Model (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates the implementation of a Menu Blade view model. It defines menu groups, items, and their associated blade references. The code showcases various menu item types, including opening blades from different extensions, parameter collector blades, and blades with specific styles.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-menublade.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Di.Class(\"viewModel\")\nexport class SampleMenuBlade extends FxMenuBlade.ViewModel {\nconstructor(container: MsPortalFx.ViewModels.ContainerContract) {\n    super(container);\n    this.title(ClientResources.SampleMenuBlade.title);\n    this.icon(FxImages.Gear());\n\n    const resourceName = \"roturn600\";\n    this.menu.groups([\n        {\n            id: \"enginesgroup\",\n            displayText: ClientResources.AssetTypeNames.Engine.singular,\n            items: [\n                // Menu item that demonstrates opening of a blade from a different extension\n                {\n                    id: \"browserelated\",\n                    displayText: ClientResources.SampleMenuBlade.relatedResources,\n                    icon: null,\n                    supplyBladeReference: () => {\n                        return BladeReferences.forExtension(\"HubsExtension\").forBlade(\"MapResourceGroupBlade\").createReference({\n                            parameters: { id: \"/subscriptions/sub123/resourcegroups/snowtraxpxz\" },\n                        });\n                    },\n                },\n                // Menu item that demonstrates opening of a parameter collector blade for a create scenario\n                {\n                    id: \"createengine\",\n                    displayText: ClientResources.createEngine,\n                    icon: null,\n                    supplyBladeReference: () => {\n                        return BladeReferences.forBlade(\"CreateArmEngineBlade\").createReference({\n                            marketplaceId: \"Microsoft.NoPdlEngineV1\",\n                            parameters:{\n                                createEngineOptions: [\"600cc\",\n                                    \"800cc\",\n                                    \"1000cc\",\n                                    \"1200cc\",\n                                    \"1600cc\"].join(\",\"),\n                                initialData: \"1600cc\",\n                            },\n                            onClosed:()=>{\n                                // Intentionally blank. The launched blade is responsible for the create operation.\n                            },\n                        });\n                    },\n                },\n                // Menu item that demonstrates opening of a parameter collector blade for a create scenario\n                {\n                    id: \"createenginenomkt\",\n                    displayText: ClientResources.createNoMarketplaceEngine,\n                    icon: null,\n                    supplyBladeReference: () => {\n                        return BladeReferences.forBlade(\"CreateNoMarketplaceArmEngineBlade\").createReference({\n                            doesProvisioning: true,\n                            parameters:{\n                                createEngineOptions: [\"600cc\",\n                                    \"800cc\",\n                                    \"1000cc\",\n                                    \"1200cc\",\n                                    \"1600cc\"].join(\",\"),\n                                initialData: \"1600cc\",\n                            },\n                        });\n                    },\n                },\n                // Menu item that demonstrates opting out of full width.\n                {\n                    id: \"fullwidthoptout\",\n                    displayText: ClientResources.SampleMenuBlade.optOut,\n                    icon: null,\n                    supplyBladeReference: () => {\n                        return BladeReferences.forBlade(\"BladeWidthSmallBlade\").createReference({ parameters: { bladeTitle: ClientResources.SampleMenuBlade.optOut }});\n                    },\n                },\n                // Menu item that demonstrates a blade that can have activated width.\n                {\n                    id: \"activationSample\",\n                    displayText: ClientResources.ActivationStyleBlade.title,\n                    icon: null,\n                    supplyBladeReference: () => {\n                        return BladeReferences.forBlade(\"BladeWithActivationStyle\").createReference();\n                    },\n                },\n            ],\n        },\n        {\n            id: \"group2\",\n            displayText: \"Group #2\",\n            items: [\n                {\n                    id: \"unauthorizedblade\",\n                    displayText: ClientResources.bladeUnauthorized,\n                    icon: null,\n                    supplyBladeReference: () => BladeReferences.forBlade(\"UnauthorizedBlade\").createReference(),\n                },\n                {\n                    id: \"bladeWithSummary\",\n                    displayText: resourceName,\n                    icon: null,\n                    supplyBladeReference: () => BladeReferences.forBlade(\"EngineBlade\").createReference({\n                        parameters: {\n                            id: `/subscriptions/sub123/resourcegroups/snowtraxpxz/providers/Providers.Test/statefulIbizaEngines/${resourceName}`,\n                    }}),\n                },\n            ],\n        },\n    ]);\n    this.menu.setOptions({\n        defaultId: \"browserelated\",\n        // You can also specify an overview item over here. That would show up right at\n        // the top of the menu right below the search box. See the SDKMenuBladeViewModel.ts\n        // as an example. This sample intentionally doesn't specify the overview item to\n        // test the case where no overview is specified.\n    });\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditScope for Form Management\nDESCRIPTION: Code snippet showing how to connect a form's edit scope to a parameter provider's edit scope for managing changes in custom create forms.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// The parameter provider takes care of instantiating and initializing an edit scope for you,\n// so all we need to do is point our form's edit scope to the parameter provider's edit scope.\nthis.editScope = this.parameterProvider.editScope;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in Blade's onInputsSet Method in TypeScript\nDESCRIPTION: Implements the `onInputsSet` lifecycle method for an Azure Portal blade. It triggers a data fetch operation on the `_websitesQueryView` using the `fetch` method, passing the current `runningStatus` filter value obtained from `this.runningStatus.value()`. This is typically called when the blade loads or its input parameters change, ensuring the displayed data is up-to-date. The promise returned by `fetch` is returned by `onInputsSet` to handle asynchronous loading.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change\n */\npublic onInputsSet(): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: this.runningStatus.value() });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Abandoned Creates with Failed Pre-validation\nDESCRIPTION: This query retrieves abandoned create operations for a specific extension and blade where pre-validation failed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate=ago(8d),\n    endDate=ago(1d),\n    match_Extention=\"WebsitesExtension\",\n    match_Blade=\"AppServiceWebAppCreateV3Blade\"\n)\n| where ExecutionStatus == \"Abandoned\" and isnotempty(PreValidationLogs) and PreValidationLogs !has \"Succeeded\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Generated Type Metadata in QueryCache (TypeScript)\nDESCRIPTION: Demonstrates importing the auto-generated `Computer` interface and `ComputerMetadata` object from their typical `_generated` path. It then shows using the `ComputerMetadata.name` to configure an `MsPortalFx.Data.QueryCache`, similar to the authored approach but using artifacts generated from C# models.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\n    import { Computer, ComputerMetadata } from \"_generated/SamplesExtension/DataModels/Computer\";\n    ...\n\n    public computersQuery = new MsPortalFx.Data.QueryCache<Computer, any>({\n        entityTypeName: ComputerMetadata.name,\n        sourceUri: () => Util.appendSessionId(ComputerData._apiRoot),\n    });\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Form Blade Parameters in JSON Schema\nDESCRIPTION: This JSON schema defines a Form Blade with key and optional parameters. It demonstrates how to structure the blade's properties, including steps and elements that can use the parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/viewTypeParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"keyParameter\",\n                \"type\": \"key\"\n            },\n            {\n                \"name\": \"optionalParameter\",\n                \"type\": \"optional\"\n            }\n        ],\n        \"properties\": {\n            \"title\": \"FooBar\",\n            \"steps\": [\n               {\n                   \"name\": \"testform\",\n                   \"label\": \"TestForm\",\n                   \"elements\": [\n                       {\n                            \"name\": \"textBox\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Using Parameters function\",\n                            \"defaultValue\": \"[parameters('keyParameter')]\",\n                        }\n                   ]\n               }\n            ],\n            \"deployment\": {\n               ....\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TrackEdits Property in TypeScript\nDESCRIPTION: Example showing how to opt out of tracking user edits for read-only properties in TypeScript by setting the trackEdits metadata property to false.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Data.Metadata.setTypeMetadata(\"Employee\", {\n    properties: {\n        accruedVacationDays: { trackEdits: false },\n        ...\n    },\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ParameterProvider with EditScope for Array Edits in TypeScript (Example 2)\nDESCRIPTION: Initializes an `MsPortalFx.ViewModels.ParameterProvider` for `ServerConfig` arrays. It defines mappings for incoming data (`mapIncomingDataForEditScope`) to create a Knockout observable array and for outgoing data (`mapOutgoingDataForCollector`) using `editScope().getEntityArrayWithEdits` to return an array reflecting all edits (created, updated, deleted items). This example illustrates returning an array that includes created entities and does not include deleted entities, suitable for consumption by a ParameterCollector.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<ServerConfig[], KnockoutObservableArray<ServerConfig>>(container, {\n    editScopeMetadataType: ServerConfigMetadata.name,\n    mapIncomingDataForEditScope: (incoming) => {\n        return ko.observableArray(incoming);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(outgoing).arrayWithEdits;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring DataContext Factory in Program.ts\nDESCRIPTION: Shows how to set up the DataContext factory in Program.ts for initializing the Area when the extension loads. This connects the Area implementation to the Portal framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.viewModelFactories.V1$$MasterDetail().setDataContextFactory<typeof MasterDetailV1>(\n    \"./V1/MasterDetail/MasterDetailArea\",\n    (contextModule) => new contextModule.DataContext());\n```\n\n----------------------------------------\n\nTITLE: Publishing a TypeScript Client Notification Linked to a Deeplink URI\nDESCRIPTION: Illustrates publishing a client-side notification that links to an arbitrary deeplink URI within the Azure Portal using TypeScript. The `uri` property specifies the target location, which can point to various parts of the portal, such as a specific resource group view. Clicking the notification navigates to the specified URI. This uses the `MsPortalFx.Hubs.Notifications.ClientNotification.publish` method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nMsPortalFx.Hubs.Notifications.ClientNotification.publish({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Information,\n    uri: \"#asset/HubsExtension/ResourceGroups/subscriptions/12345689-dg32-4554-9a9a-b6e983273e5f/resourceGroups/Default\"\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Blade Context in TypeScript\nDESCRIPTION: Shows the context property implementation in a Template Blade. The context property is auto-populated by the framework and provides APIs for shell interaction.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-templateblade.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic context: TemplateBlade.Context<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining an Asset Type for Custom Views in Azure Portal\nDESCRIPTION: JSON definition for an asset that opens a custom view instead of a resource list. This configuration is used when an asset doesn't represent an ARM resource but needs to show a custom experience. When browse type is set to 'AssetTypeBlade', clicking this asset will open the specified custom blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n  \"assetType\": {\n    \"name\": \"Hub\",\n    \"keywords\":\"keywords\",\n    \"displayNames\":{\n      \"singular\": \"HubSingular\",\n      \"plural\": \"HubPlural\",\n      \"lowerSingular\": \"HubLowerSingular\",\n      \"lowerPlural\" :\"HubLowerPlural\"\n    },\n    \"icon\": {\n      \"file\": \"../../Content/svg/engine.svg\"\n    },\n    \"browse\": {\n      \"type\": \"AssetTypeBlade\"\n    },\n    \"blade\":{\n      \"name\": \"HubGetStartedView_Dx\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting executeScript for Playwright Compatibility\nDESCRIPTION: Example of adapting script execution for both Selenium and Playwright. Note the removal of 'return' keyword in the Playwright version, which is a key difference between the two frameworks.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: string = await testFx.BrowserAutomation.runAutomation<string>(\n    async (wd) => await wd.executeScript(\"return JSON.stringify(FxImpl.getAssetTypeMappingData());\"),\n    async (pw) => await pw.executeScript(\"JSON.stringify(FxImpl.getAssetTypeMappingData())\")\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Resource Access in Portal JSON\nDESCRIPTION: JSON configuration for setting up resource access for an extension in the Azure Portal, including management endpoint access and self-resource access definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   {\n        \"name\": \"Contoso_Extension\",\n        \"name\": \"Contoso_Extension\",\n        \"uri\": \"//stamp2.extension.contoso.com/Home\",\n        \"uriFormat\": \"//{0}.extension.contoso.com/Home\",\n        \"resourceAccess\": [{\n            \"name\": \"\",\n            \"resource\": \"https://management.core.windows.net/\"\n        }, {\n            \"name\": \"self\",\n            \"resource\": \"1a123abc-1234-1a2b-ab01-01ab01a1a1ab\"\n        }]\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Graph API Authorization Token in TypeScript\nDESCRIPTION: Examples of different methods to obtain and use authorization tokens for Graph API access from client-side code, including ajax calls and file downloads.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Base.Security.getAuthorizationToken({ resourceName: \"graph\" });\n\nMsPortalFx.Base.Net.ajax({\n    setAuthorizationHeader: { resourceName: \"graph\" }\n});\n\nnew MsPortalFx.ViewModels.Controls.FileDownload.ViewModel(\n    container,\n    {\n        context: ko.observable(new FileDownload.Context({\n            ...\n            addDefaultAuthorizationToken: {\n                resourceName: \"graph\"\n            },\n            ...\n        })),\n    });\n\nnew MsPortalFx.ViewModels.FileDownloadCommand({\n    authorizationOptions: {\n        resourceName: \"graph\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitoring Tab Configuration\nDESCRIPTION: Complete example of Monitoring tab configuration within the properties.tabs section, showing how to set up CPU monitoring with average aggregation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-MonitoringTab.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Monitoring\",\n    \"charts\": [\n        {\n            \"title\": \"CPU (average)\",\n            \"metrics\": [\n                {\n                    \"id\": \"Percentage CPU\",\n                    \"aggregationType\": \"Avg\",\n                    \"resourceMetadata\": {\n                        \"id\": \"[parameters('id')]\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: TextBox User Input Output\nDESCRIPTION: Sample JSON output from a TextBox control after a user has typed \"example\" into the field. This demonstrates how user input is represented in the output.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"example\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for ResourceGroupSelector Output\nDESCRIPTION: Defines the TypeScript interface for the output returned by the ResourceGroupSelector control, including the mode and resource group value properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceGroupSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n    * The mode of the dropdown, create new or use existing.\n    */\n    mode: SelectedMode;\n    /**\n    * The ARM value for the resource group.\n    */\n    value: ResourceGroup;\n```\n\n----------------------------------------\n\nTITLE: Referencing CDN Integration Blade as a Menu Item in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to add the Azure CDN integration blade as a static menu item within an Azure portal extension's resource menu. It defines the menu item's properties like ID, display text, visibility, keywords, icon, and uses `BladeReferences` for a type-checked way to create a reference to the `CdnIntegrationBlade`. It requires passing `resourceId`, `location`, and `originHostname` as parameters to the blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-cdn.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    id: \"cdnIntegration\",\n    displayText: \"Azure CDN\",\n    enabled: ko.observable(true),\n    visible: ko.observable(true), //Shouldn't be visible in national clouds\n    keywords: [\n        \"cdn\",\n        \"endpoint\",\n        \"profile\",\n        \"domain\"\n    ],\n    icon: MsPortalFx.Base.Images.Polychromatic.Cdn(),\n    supplyBladeReference: () => {\n        return BladeReferences.forExtension(\"Microsoft_Azure_Cdn\").forBlade(\"CdnIntegrationBlade\").createReference({\n            parameters: {\n                resourceId: <your resource Id>,\n                location: <your resource location>,\n                originHostname: <your resource hostname>\n            }});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Robot Model with Knockout Observables in TypeScript\nDESCRIPTION: Defines a TypeScript interface for Robot, indicating that each property (name, status, model, manufacturer, os, specId) must be a KnockoutObservable of string. Provides the shape for data items stored in the QueryCache, ensuring that all fields are observable for UI binding and updates. This interface is a requirement for all subsequent mapping and grid projection operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Robot {\n    name: KnockoutObservable<string>;\n    status: KnockoutObservable<string>;\n    model: KnockoutObservable<string>;\n    manufacturer: KnockoutObservable<string>;\n    os: KnockoutObservable<string>;\n    specId: KnockoutObservable<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating EditScopeView with Item ID\nDESCRIPTION: Example of updating an EditScopeView with a specific item ID when inputs are set. It acquires an edit scope seeded with the specified item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-working-with-edit-scopes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// update the editScopeView with a new id\npublic onInputsSet(inputs: any): Promise<any> {\n    // Acquires edit scope seeded with an item with id currentItemId.\n    return this._editScopeView.fetchForExistingData(inputs.editScopeId, inputs.currentItemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Advanced GraphApiControl Query\nDESCRIPTION: This snippet demonstrates the sample output for the advanced GraphApiControl query. It includes a larger set of application objects, showcasing how the API can return multiple results. This raw data would then be transformed and mapped according to the control's configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@odata.context\": \"https://graph.microsoft.com/beta/$metadata#applications(displayName,appId)\",\n    \"@odata.nextLink\": \"https://graph.microsoft.com/beta/myorganization/applications?filter=startsWith(displayName%2c+%27a%27)&select=displayName%2cappId&$skiptoken=RFNwdAoAAQAAAAAAAAAAFAAAAIp1HJXa4DBEtkF0BYnTinsBAAAAAAAAAAAAAAAAAAAXMS4yLjg0MC4xMTM1NTYuMS40LjIzMzEGAAAAAAABTw8AYx5Ec0iWsOnZnC1p5QEaAAAAAQQAAAA\",\n    \"value\": [\n        {\n            \"displayName\": \"astf4\",\n            \"appId\": \"512628f9-3682-4a1d-43242a7a8-f575f\"\n        },\n        {\n            \"displayName\": \"Add an application my organization is developing\",\n            \"appId\": \"3a4a2-8288-4d23437f-9bde-7f8864\"\n        },\n        {\n            \"displayName\": \"AwasaConfig\",\n            \"appId\": \"30125bcb-9b20-4c30-a0bb-95177d\"\n        },\n        {\n            \"displayName\": \"AMPAlert\",\n            \"appId\": \"3fd7-741e-42f7-91b0-e5f0645354\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning a Part in Azure Portal UI Extension\nDESCRIPTION: Shows how to pin a part using the PartPinner API with type-safe part references and parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-architecture.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as PartPinner from \"Fx/Pinner\";\nimport { PartReferences } from \"Fx/Composition\";\n\npublic onPinButtonClick() {\n    const { parameters } = this.context;\n\n    PartPinner.pin([\n        PartReferences.forPart(\"WebsitePart\").createReference({\n            parameters: { resourceId: parameters.resourceId },\n        })\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Menu Items with Value Comparison Using Feature Flags\nDESCRIPTION: Demonstrates menu item replacement based on feature flag value comparison. Shows how to specify replacement content when feature flag matches a specific value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceMenuItems-conditionalSupport.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"menu\": {\n      \"overview\": {\n        \"id\": \"dxOverviewId\",\n        \"displayName\": \"dxOverviewDisplayName\",\n        \"icon\": \"someIcon\",\n        \"blade\": {\n          \"name\": \"Overview_dx\"\n        },\n        \"fx.feature\": {\n          \"name\": \"foo\",\n          \"replaceWhen\": \"ValueEquals\",\n          \"value\": \"oof\",\n          \"replacement\": {\n            \"id\": \"dxOverviewId\",\n            \"displayName\": \"replacedDxOverviewDisplayName\",\n            \"icon\": \"replacedSomeIcon\",\n            \"blade\": {\n              \"name\": \"ReplacedOverview_dx\"\n            }\n          }\n        },\n```\n\n----------------------------------------\n\nTITLE: Navigating to Azure Portal Create Blade using C#\nDESCRIPTION: This snippet shows how to sign into the Azure Portal and navigate directly to the resource group creation blade using a deep link. It demonstrates setting up authentication and specifying portal navigation parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-createsample.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign into the portal\nportalAuth.SignInAndSkipPostValidation(userName: \"\", /** The account login to use.  Note Multi Factor Authentication (MFA) is not supported, you must use an account that does not require MFA **/\n        password: \"\", /** The account password **/\n        tenantDomainName: string.Empty, /** the tenant to login to, set only if you need to login to a specific tenant **/\n        query: \"feature.canmodifyextensions=true\", /** Query string to use when navigating to the portal.  **/\n        fragment: \"create/Microsoft.ResourceGroup\" /** The hash fragment, we use this to navigate directly to the create blade on sign in. **/)\n```\n\n----------------------------------------\n\nTITLE: Advanced Resource Menu Configuration with Error Handling in TypeScript\nDESCRIPTION: This snippet shows a more comprehensive implementation of getResourceMenuConfig with error handling and dynamic menu configuration. It includes constants for menu strings and keywords, and demonstrates how to create menu items and handle potential errors during resource loading.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Di from \"Fx/DependencyInjection\";\nimport { ArmId } from \"Fx/ResourceManagement\";\nimport * as ClientResources from \"ClientResources\";\nimport { BladeReferences } from \"Fx/Composition\";\nimport { ViewModels } from \"_generated/ExtensionDefinition\";\nimport { processSupplementalData } from \"../../../Shared/ResourceData\";\nimport { handleResourceMenuFailures } from \"../../../Shared/ResourceTypesCommon\";\nimport { DataContext, TestHelpersForSamplesExtensionOnly } from \"../../ResourceTypesArea\";\nimport { PrinterStatus } from \"../PrinterData\";\nimport { PrinterImages as Images } from \"../PrinterLogos\";\n\n// NOTE: For the resource menu configuration, the menu item and group IDs ('id' property) should be unique within the\n//       menu configuration, should not be localized or changed (the ID is part of the deep link for the blade within\n//       the menu) and should not contain any spaces and should be lowercase. The ID is the unique identifier for the\n//       groups and items.\n\nimport FxBase = MsPortalFx.Base;\nimport FxDiagnostics = FxBase.Diagnostics;\nimport FxStatusBadges = FxBase.Images.StatusBadge;\nimport FxContainerContract = MsPortalFx.ViewModels.ContainerContract;\nimport GridFormat = MsPortalFx.ViewModels.Controls.Lists.Grid.Format;\nimport FxAssets = MsPortalFx.Assets;\nimport Definition = ViewModels.ResourceTypes.PrinterViewModel;\n\nconst log = FxDiagnostics.createLog(require);\nconst entityResourceType = \"microsoft.test/printers\";\n\nconst MenuStrings = ClientResources.ResourceMenu.Printer;\nconst MenuKeywords = ClientResources.ResourceMenuKeyword.Printer;\n\n/**\n* Constants for the column IDs for the custom browse config.\n*/\nmodule BrowseColumns {\n   /**\n    * The status column.\n    */\n   export const status = \"status\";\n\n   /**\n    * Constants for the properties for the status column.\n    */\n   export module StatusProperties {\n       /**\n        * The status property.\n        */\n       export const status = \"status\";\n   }\n\n   /**\n    * The model column.\n    */\n   export const model = \"model\";\n\n   /**\n    * Constants for the properties for the model column.\n    */\n   export module ModelProperties {\n       /**\n        * The model property.\n        */\n       export const model = \"model\";\n   }\n\n   /**\n    * The technology column.\n    */\n   export const technology = \"technology\";\n\n   /**\n    * Constants for the properties for the technology column.\n    */\n   export module TechnologyProperties {\n       /**\n        * The technology property.\n        */\n       export const technology = \"technologyString\";\n   }\n}\n\nfunction getPrinterMenu(resourceId: string, dataContext: DataContext): Promise<FxAssets.ResourceMenuConfig> {\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // EXAMPLE : Providing static menu items for a kind of resource.\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n   // Build the menu items.\n   const overviewItem: FxAssets.MenuItem = {\n       id: \"overview\", // menu item IDs must be unique, must not be localized, should not contain spaces and should be lowercase\n       displayText: MenuStrings.overview,\n       enabled: ko.observable(true),\n       keywords: MenuKeywords.overview.split(\" \"),\n       icon: Images.printer,\n       supplyBladeReference: () => {\n           return BladeReferences.forBlade(\"PrinterBlade\").createReference({ parameters: { id: resourceId }});\n       },\n   };\n   // Build the resource menu config.\n   const handledError = ko.observable<MsPortalFx.ViewModels.ErrorOptions>();\n   const fail = ko.observable<string>();\n   const menuConfig: FxAssets.ResourceMenuConfig = {\n       overview: overviewItem,\n       options: {\n           enableRbac: true,\n           enableTags: true,\n       },\n       groups: [],\n       handledError,\n       fail,\n   };\n\n   // Load the resource and update the menu items in the background.\n   // In the case of this asset type, the ResourceProvidedBy for the resource menu is marked as\n   // \"NoResource\". In this case, the AJAX call to retrieve the printer resource from ARM should\n   // not be part of the menu config. In this case, the menu config should be returned as\n```\n\n----------------------------------------\n\nTITLE: Requesting a Self-Resource Token in Azure Portal Extension Client\nDESCRIPTION: Uses the MsPortalFx.Base.Net2.ajax function to make an API call with a self-resource token. This approach adds the 'setAuthorizationHeader' parameter with a resourceName of 'self' to obtain a token for the extension's own resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n    MsPortalFx.Base.Net2.ajax({\n        uri: \"MyController/MyAction\",\n        setAuthorizationHeader: { resourceName: \"self\" }\n    }).then((myData) => {\n        // do work with data\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Pageable Grid ViewModel in TypeScript\nDESCRIPTION: Shows the implementation of a pageable grid view model using the Sequential type navigator. The code includes grid initialization, column configuration, and handling of data navigation for virtualized content.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract,\n            initialState: any,\n            dataContext: ControlsArea.DataContext) {\n\n    // create the data navigator from the data context (above)\n    this._sequentialDataNavigator = dataContext.productDataByContinuationToken.productsCache.createNavigator(container);\n\n    // Define the extensions you wish to enable.\n    var extensions = MsPortalFx.ViewModels.Controls.Lists.Grid.Extensions.Pageable;\n\n    // Define the options required to have the extensions behave properly.\n    var pageableExtensionOptions = {\n        pageable: {\n            type: MsPortalFx.ViewModels.Controls.Lists.Grid.PageableType.Sequential,\n            dataNavigator: this._sequentialDataNavigator\n        }\n    };\n\n    // Initialize the grid view model.\n    this.sequentialPageableGridViewModel = new MsPortalFx.ViewModels.Controls.Lists.Grid\n        .ViewModel<SamplesExtension.DataModels.Product, ProductSelectionItem>(\n            null, extensions, pageableExtensionOptions);\n\n    // Set up which columns to show.  If you do not specify a formatter, we just call toString on\n    // the item.\n    var basicColumns: MsPortalFx.ViewModels.Controls.Lists.Grid.Column[] = [\n        {\n            itemKey: \"id\",\n            name: ko.observable(ClientResources.gridProductIdHeader)\n        },\n        {\n            itemKey: \"description\",\n            name: ko.observable(ClientResources.gridProductDescriptionHeader)\n        },\n    ];\n    this.sequentialPageableGridViewModel.showHeader = true;\n\n    this.sequentialPageableGridViewModel.columns =\n        ko.observableArray<MsPortalFx.ViewModels.Controls.Lists.Grid.Column>(basicColumns);\n\n    this.sequentialPageableGridViewModel.summary =\n        ko.observable(ClientResources.basicGridSummary);\n\n    this.sequentialPageableGridViewModel.noRowsMessage =\n        ko.observable(ClientResources.nobodyInDatabase);\n}\n\n\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._sequentialDataNavigator.setQuery({ categoryId: inputs.categoryId });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Notifications in TypeScript (v3)\nDESCRIPTION: Example of creating a notification with formatted title and description using publishNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishNotification({\n    title: MyNotification.Started.title.format(formatArgs),\n    description: MyNotification.Started.message.format(formatArgs),\n    status: CompletedStatus.Success,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityCache with findCachedEntity for Data Reuse in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the findCachedEntity option to reuse data already loaded in a QueryCache, eliminating redundant network requests when navigating between resource lists and detailed resource views.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websiteEntities = new MsPortalFx.Data.EntityCache<SamplesExtension.DataModels.WebsiteModel, number>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(DataShared.websiteByIdUri),\n    findCachedEntity: {\n        queryCache: this.websitesQuery,\n        entityMatchesId: (website, id) => {\n            return website.id() === id;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using forceRemove to Clear Cache Entries in Azure Portal\nDESCRIPTION: Illustrates how to completely remove a deleted entity from the EntityCache using forceRemove. This ensures that when a resource is deleted from the server, it's also forcibly removed from the client cache, even after blades are closed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\npublic deleteComputer(computer: Computer): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: ComputerData._apiRoot + computer.name(),\n        type: \"DELETE\",\n    }).then(() => {\n        // This will notify the shell that the computer is being removed.\n        MsPortalFx.UI.AssetManager.notifyAssetDeleted(ExtensionDefinition.AssetTypeNames.computer, computer.name());\n\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.computersQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we deleted a computer in the cache, so we will reflect this change on the client side.\n            dataSet.removeItem(computer);\n        });\n\n        // This will force the removal of the deleted computer from this EntityCache.  Subsequently, any Part or\n        // Blades that use an EntityView to fetch this deleted computer will likely receive an expected 404\n        // response.\n        this.computerEntities.forceRemove(computer.name());\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Key Picker Interface Definitions in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure for key picker inputs/outputs including key attributes and configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyPickerInputsOutputs {\n    key: KnockoutObservable<Key>; // The key that was picked, or created.\n    vaultId: KnockoutObservable<string>; // The vault id of the vault to pick from. This can be supplied here or in config. If it is supplied here it is an updateable input.\n}\n\nexport interface Key {\n    kid: KnockoutObservable<string>; // base key identifier of the base key, i.e. https://myvault.vault.azure.net/keys/mykey\n    attributes: KnockoutObservable<KeyAttributes>; // Key attributes of the selected key\n    tags: KnockoutObservable<StringMap<KnockoutObservable<string>>>; // any tags associated with the key\n}\n\nexport interface KeyAttributes {\n    kid: KnockoutObservable<string>; // Full key identifier of the current key version, i.e. https://myvault.vault.azure.net/keys/mykey/1d7c8dd8-f795-439c-9ebf-9510af7ec445\n    enabled: KnockoutObservable<boolean>;\n    nbf: KnockoutObservable<number>;\n    exp: KnockoutObservable<number>;\n    created: KnockoutObservable<number>;\n    updated: KnockoutObservable<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Context Panes with Closed Callbacks in TypeScript\nDESCRIPTION: Shows how to open context panes with callbacks for when they are closed. Similar to the blade opening pattern, this implementation uses promises to track successful context pane opening and updates UI state accordingly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic contextBladeOpened = ko.observable(false);\n\npublic onContextBladeButtonClick() {\n    // this callback is invoked when the blade is closed\n    const onBladeClosed = () => {\n        // just for demonstration purposes we set a value that is displayed in the blade to false\n        this.contextBladeOpened(false);\n    };\n\n    const openContextBladePromise = this._container.openContextPane(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference({ onClosed: onBladeClosed }));\n\n    void openContextBladePromise.then((result) => {\n        this.contextBladeOpened(result);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MenuCommand with OpenBladeCommand and OpenMarketplaceCommand in JSON\nDESCRIPTION: This snippet demonstrates how to structure a MenuCommand with child commands including OpenBladeCommand and OpenMarketplaceCommand. It defines a main menu command with an ID, display name, and icon, containing two child commands for opening a blade and launching marketplace items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewMenuCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        },\n        {\n            \"kind\": \"OpenMarketplaceCommand\",\n            \"id\": \"OpenMarketplaceCommandId1\",\n            \"displayName\": \"openMarketplace\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"content\": \"content:Second line description\",\n            \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n            \"disabled\": false\n        }\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Advanced Number Formatting Options in TypeScript\nDESCRIPTION: This snippet illustrates using options with `Globalization.NumberFormat.create()` for more specific number formatting. Examples include formatting as currency (`style: 'currency'`, `currency: 'EUR'`, `currency: 'JPY'`) for different locales ('de-DE', 'ja-JP') and limiting the number of significant digits (`maximumSignificantDigits: 3`) for a locale like 'en-IN'. Requires the `MsPortalFx/Globalization` module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar number = 123456.789;\n\n// request a currency format // User locale is 'de-DE'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'EUR' }).format(number));\n// → 123.456,79 €\n// the Japanese yen doesn't use a minor unit // User locale is 'ja-JP'\nconsole.log(Globalization.NumberFormat.create({ style: 'currency', currency: 'JPY' }).format(number));\n// → ￥123,457\n// limit to three significant digits // User locale is 'en-IN'\nconsole.log(Globalization.NumberFormat.create({ maximumSignificantDigits: 3 }).format(number));\n// → 1,23,000\n\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional POST Request for Storage Account Keys\nDESCRIPTION: Shows how to implement a POST request to list storage account keys with a condition based on storage account existence.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      },\n      {       \n        \"name\": \"testPOSTCondition\",   \n        \"method\": \"POST\",      \n        \"id\": \"[concat(resources('storageAccount').id,'/listKeys')]\",    \n        \"condition\": \"[not(empty(resources('storageAccount').id))]\",   \n        \"apiVersion\": \"2021-09-01\"   \n       }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST listCondition\",\n              \"value\": \"[resources('testPOSTCondition').keys.length]\",\n              \"description\": \"Number of access keys\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ajax Error Logging in Extension Definition - .NET (C#)\nDESCRIPTION: This code sample illustrates how to enable automatic logging of Ajax errors in an Azure Portal extension by overriding the 'TraceAjaxErrors' property in the extension definition class. When set to true, HTTP 5xx responses from Ajax requests made through Base.net methods are logged to the ClientEvents MDS table. The extension must implement this override, and it requires no additional parameters. This approach centralizes Ajax error tracking in the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-logging-from-typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool TraceAjaxErrors\n{\n    get\n    {\n        return true;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Shell Command to Declarative Blade in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add a Cloud Shell command to the commands section of a declarative blade. It defines an OpenBladeCommand that opens the FormBladeCloudShell in a context pane.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-cloudShell.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n  \"id\": \"formcloudshellCommand\",\n  \"kind\": \"OpenBladeCommand\",\n  \"displayName\": {\n    \"property\": \"formCloudShell\"\n  },\n  \"blade\": {\n    \"name\": \"FormBladeCloudShell_Dx\",\n    \"inContextPane\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Menu Configuration Methods in TypeScript\nDESCRIPTION: Implementation of the three different resource menu configuration methods based on ResourceProvidedBy setting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\\n    return Q({});\\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\npublic getMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInformation): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\\n    return Q({});\\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceAndMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInfo): Promise<MsPortalFx.Assets.ExtensionSuppliedResourceInfo> {\\n    return Q({});\\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Error Distribution in Azure Portal Create Flow with Kusto\nDESCRIPTION: This query analyzes the distribution of errors in the Azure Portal create flow for the previous week. It filters for failed provisioning events, excludes certain error scenarios, and groups results by provisioning status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nlet today = floor(now(),1d);\nlet sat = today - dayofweek(today) - 8d;\nlet fri =  sat + 6d;\nClientTelemetry\n| where PreciseTimeStamp >= sat and PreciseTimeStamp < fri + 1d\n| where Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\"\n| extend provisioningStatus = extractjson(\"$.provisioningStatus\", Data, typeof(string)),\n  isCustomProvisioning = extractjson(\"$.isCustomProvisioning\", Data, typeof(string)),\n  oldCreateApi = extractjson(\"$.oldCreateApi\", Data, typeof(string)),\n  launchingContext = extract('\"launchingContext\"\\\\s?:\\\\s?{([^}]+)', 1, Data)\n| where isnotempty(launchingContext) and isempty(extract(\"^(\\\"telemetryId\\\":\\\"[^\\\"]*\\\")$\", 1, launchingContext)) and oldCreateApi != \"true\" and isCustomProvisioning != \"true\" and provisioningStatus != \"DeploymentCanceled\"\n| where Data !contains \"We could not find a credit card on file for your azure subscription.\"\n| summarize [\"Error Count\"] = count() by [\"Error\"] = provisioningStatus\n| order by [\"Error Count\"] desc\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities Tab in Azure Portal JSON\nDESCRIPTION: This JSON schema defines the structure for a Capabilities tab that can be added to a resource overview. It includes various capability items such as Backup, Disaster recovery, Insights, and Security, each with their own status, actions, and icons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Capabilities\",\n  \"capabilities\": [\n    {\n      \"title\": \"Backup\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n      \"description\": \"Simple and reliable server backup to the cloud\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[contains(resources().name, 'test')]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Disaster recovery\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n      \"description\": \"Replicate your virtual machine to another Azure region\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[not(contains(resources().name, 'test'))]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Insights\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n      \"description\": \"Enable logs and detailed monitoring capabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[resources().properties.test]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"present\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"notPresent\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          },\n          {\n            \"value\": \"null\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          },\n          {\n            \"value\": \"undefined\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Security\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n      \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ParameterCollector to Use EditScope Methods in TypeScript\nDESCRIPTION: Initializes an `MsPortalFx.ViewModels.ParameterCollector` for `ServerConfig` arrays. The `supplyInitialData` callback uses `editScope.getEntityArrayWithEdits` to provide the current state of the array (including edits) to the collector. The `receiveResult` callback uses `editScope.applyArrayAsEdits` to process the array returned from a provider blade, automatically determining and applying created, updated, or deleted entities to the local `EditScope` array.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.itemsCollector = new MsPortalFx.ViewModels.ParameterCollector<ServerConfig[]>(container, {\n    selectable: this.itemsSelector.selectable,\n    supplyInitialData: () => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to develop an array with all created/updated/deleted items\n        // in this entity array.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(editScope.root.serverConfigs).arrayWithEdits;\n    },\n    receiveResult: (result: ServerConfig[]) => {\n        const editScope = this._editScopeView.editScope();\n\n        // Use EditScope's 'applyArrayWithEdits' to examine the array returned from the Provider Blade\n        // and apply any differences to our EditScope entity array in terms of created/updated/deleted entities.\n        editScope.applyArrayAsEdits(result, editScope.root.serverConfigs);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Form ViewModel Initialization\nDESCRIPTION: Creates a Form.ViewModel instance and assigns the editScope reference for form handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nthis._form = new Form.ViewModel<WebsiteModel>(this._ltm);\nthis._form.editScope = this._editScopeView.editScope;\n```\n\n----------------------------------------\n\nTITLE: Accessing Globalization Settings in TypeScript\nDESCRIPTION: Shows how to access the user's current display language and format culture settings using the Globalization API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar displayLanguage = Globalization.displayLanguage;\nvar formatCulture = Globalization.formatCulture;\n```\n\n----------------------------------------\n\nTITLE: GalleryViewType Properties Option 1\nDESCRIPTION: Configuration options for the first variant of GalleryViewType properties section, including title, mode, marketplaceQueryParams, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-galleryViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title of the Marketplace Gallery view\n|mode|True|\n|marketplaceQueryParams|False|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining a TemplateBlade in Azure Portal PDL (XML)\nDESCRIPTION: This XML snippet shows how to declare a blade in a PDL file, specifying its name, associated ViewModel, display state, and HTML template. Required parameters include the blade 'Name', the 'ViewModel' binding, and the 'Template'. Optional parameters configure appearance, pinning, exporting, and whether this blade provides parameters for others. This markup is consumed by Ibiza's blade infrastructure and must reference correct module and template paths.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade\n            Name=\"MyTemplateBlade\"\n            ViewModel=\"{ ViewModel Name=MyTemplateBladeViewModel, Module=./ViewModels/MyTemplateBladeViewModel }\"\n            InitialDisplayState=\"Maximized\"\n            Template=\"{ Html Source='Templates\\\\MyTemplateBlade.html' }\">\n</TemplateBlade>\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Menu for Printer Resources in TypeScript\nDESCRIPTION: This method retrieves the resource menu configuration for a given printer resource ID. It validates the resource type and returns the appropriate menu configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<FxAssets.ResourceMenuConfig> {\n    const armId = ArmId.parse(resourceId, true);\n    executeInDevelopmentModeOnly(() => {\n        const resourceType = armId.resourceType.toLowerCase();\n        if (resourceType !== entityResourceType) {\n            log.error(\"*** mismatched resource type: <{0}>, expected: <{1}>\".format(resourceType, entityResourceType));\n        }\n    });\n    if (armId.kind === ArmId.Kind.Resource &&\n        armId.resourceType.toLowerCase() === entityResourceType) {\n        return getPrinterMenu(resourceId, this._dataContext);\n    }\n    return Promise.resolve(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Directory - Bash Commands\nDESCRIPTION: Commands to create a new directory for test files and install the test framework via npm\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmd e2etests\ncd e2etests\nnpm install @microsoft/azureportal-test\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.Section Component in JSON\nDESCRIPTION: Example configuration of a Section component containing two textbox elements. The section requires a name, type, label and elements array. Optional properties include visible flag for controlling visibility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Section.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"section1\",\n    \"type\": \"Microsoft.Common.Section\",\n    \"label\": \"Example section\",\n    \"elements\": [\n      {\n        \"name\": \"text1\",\n        \"type\": \"Microsoft.Common.TextBox\",\n        \"label\": \"Example text box 1\"\n      },\n      {\n        \"name\": \"text2\",\n        \"type\": \"Microsoft.Common.TextBox\",\n        \"label\": \"Example text box 2\"\n      }\n    ],\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ARM Form Request HTTP Methods Enum\nDESCRIPTION: Enumeration defining the allowed HTTP methods for ARM form requests. The permitted values are PATCH for partial updates, POST for creating new resources, and PUT for complete updates or creations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-formArmRequest-method.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- PATCH\n- POST\n- PUT\n```\n\n----------------------------------------\n\nTITLE: Configuring TextBlock Control in Azure Portal\nDESCRIPTION: Example configuration for a TextBlock control that displays text with an optional learn more link. The control allows setting visibility and includes options for text content and link properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBlock.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"text1\",\n    \"type\": \"Microsoft.Common.TextBlock\",\n    \"visible\": true,\n    \"options\": {\n        \"text\": \"Please provide the configuration values for your application.\",\n        \"link\": {\n            \"label\": \"Learn more\",\n            \"uri\": \"https://www.microsoft.com\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags to Resources in Azure Resource Manager Template\nDESCRIPTION: Example showing how to assign tags to a specific resource type using the TagsByResource output. This uses the if function to handle cases where no tags are assigned to a resource type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"saName1\",\n  \"type\": \"Microsoft.Storage/storageAccounts\",\n  \"tags\": \"[ if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], json('{}')) ]\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Progress Notification in TypeScript\nDESCRIPTION: Shows how to complete a pending notification with a success status using the new complete method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nnotification.complete({\n    status: CompletedStatus.Success,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Frame Communication Events with postMessage in Azure Portal - JavaScript\nDESCRIPTION: This snippet manages IFrame communication for Portal initialization, user prompts, and authentication tokens using window.postMessage and document APIs. It updates UI elements on the child frame in response to Portal messages and signals loading or completion states to the parent. Dependencies include Q (a promise library) for async delays; inputs/outputs are postMessage events and updating page content. Key parameters include the message data, sessionId, and function callbacks. Limitations: requires correct element classnames and parent frame listening for these message kinds.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementsByClassName(\"fxs-frame-token\")[0].innerText = \"Token: \" + msg.data;\n    } else {\n        console.warn(sessionId, \"Message not recognized.\", msg);\n    }\n}, false);\n\n// ---------------------------------------------------------------------------------------------\n// -------------------------------- Code to reveal view to user --------------------------------\n// ---------------------------------------------------------------------------------------------\n\nfunction makeViewPresentableToUser(msg) {\n    document.getElementsByClassName(\"fxs-frame-header\")[0].innerText = msg.data;\n    document.head.getElementsByTagName(\"title\")[0].innerText = msg.data;\n\n    // Post message 'revealcontent' to the parent to indicate that the part is now in a state to\n    // dismiss the opaque spinner and reveal content.\n    postMessageToParent(\"revealcontent\");\n\n    completeInitialization();\n}\n\n// ---------------------------------------------------------------------------------------------\n// ------------------------------ Code to complete initialization ------------------------------\n// ---------------------------------------------------------------------------------------------\n\nfunction completeInitialization() {\n    // Mimic an async operation that takes 2 seconds.\n    Q.delay(2000).then(() => {\n        // Post message the 'initializationcomplete' to the parent to indicate that the part is\n        // now ready for user interaction.\n        postMessageToParent(\"initializationcomplete\");\n    });\n}\n\n// Send a post message indicate that the frame is ready to start initialization.\npostMessageToParent(\"ready\");\n\n// This is an example of posting the 'getAuthToken' event to Portal.\npostMessageToParent(\"getAuthToken\");\n\n})();\n```\n\n----------------------------------------\n\nTITLE: Logging Errors and Warnings in Azure Portal Extension\nDESCRIPTION: This TypeScript code shows how to log errors and warnings to the ExtEvents table using the MsPortalFx.Base.Diagnostics.Log class in an Azure Portal extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nvar log = new MsPortalFx.Base.Diagnostics.Log(\"logging_area\");\nlog.warning(errorMessage, code, args);\nlog.error(errorMessage, code, args);\n```\n\n----------------------------------------\n\nTITLE: Linking to a Blade with Serialized Inputs - URL Example - Plaintext\nDESCRIPTION: Provides an example of a full deep link URL to a specific portal extension blade, including an input parameter. The segment 'resourceType/Microsoft.Resources%2Fresources' demonstrates passing a serialized name/value pair as an input to the blade. No dependencies other than valid portal access; parameters must be URL-encoded.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#blade/HubsExtension/Resources/resourceType/Microsoft.Resources%2Fresources\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregation Type Enum for Azure Monitoring Metrics\nDESCRIPTION: This enum specifies the allowed aggregation types for Azure monitoring metrics. It includes common statistical aggregations like average, sum, count, minimum, maximum, unique count, and percentile.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-getStartedMonitoringMetric-aggregationType.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- Avg\n- Sum\n- Count\n- Min\n- Max\n- Unique\n- Percentile\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Access Authorization in Azure Portal Extension\nDESCRIPTION: Configures the extension's authorization settings to include a 'self' resource for token exchange. This resource refers to the extension's own AAD application ID, enabling the extension to request tokens for itself.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"authorization\": {\n    \"resourceAccess\": [\n        {\n            \"name\": \"self\",\n            \"resource\": \"1a123abc-1234-1a2b-ab01-01ab01a1a1ab\"    // The extension's AAD application ID\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Blade and Part References from Composition Module in TypeScript\nDESCRIPTION: Shows how to import the BladeReferences and PartReferences classes from the Fx/Composition module, which are necessary for working with blades and parts across extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sharing-blades-and-parts.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BladeReferences, PartReferences } from \"Fx/Composition\";\n```\n\n----------------------------------------\n\nTITLE: Disabling All Extensions Except Specific Ones via URL Flag\nDESCRIPTION: This URL query string demonstrates how to use the `feature.DisableExtensions=true` flag to disable all Azure Portal extensions by default. It then explicitly enables necessary extensions like `HubsExtension` and a custom extension (`MyOtherExtension`) by setting their respective flags to `true`. This technique is useful for isolating and testing specific extensions without interference from others.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_7\n\nLANGUAGE: uri\nCODE:\n```\n?feature.DisableExtensions=true&HubsExtension=true&MyOtherExtension=true \n```\n\n----------------------------------------\n\nTITLE: Defining view-dashboardViewType-visualizationSnapshotOptions Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the view-dashboardViewType-visualizationSnapshotOptions object using a markdown table. It specifies optional properties for customizing snapshot visualizations in Azure Portal dashboards.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-visualizationSnapshotOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|snapshot__label|False|The label displayed with the snapshot visualization.\n|snapshot__labelColor|False|The label color displayed with the snapshot visualization.\n|snapshot__link|False|The clickable link with the snapshot visualization.\n|snapshot__valueColumn|False|The column to use with the snapshot visualization.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Proper Implementation Using MapInto\nDESCRIPTION: Using mapInto() function with proper observable handling, which behaves the same as the properly implemented map() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.mapInto<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: robot.name,\n        status: robot.status,\n        modelAndMfg: ko.pureComputed(() => {\n            this._logComputedRecalculating(projectionId, robot);\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Date Formatting with DateTimeFormat in TypeScript\nDESCRIPTION: Demonstrates using DateTimeFormat.create() to format dates according to different locale conventions. Shows date formatting for US English, British English, Korean, Arabic, and Japanese locales.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n// formats below assume the local time zone of the locale\n\n// America/Los_Angeles for the US\n// US English uses month-day-year order\n// User locale is 'en-US'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"12/19/2012\"\n\n// British English uses day-month-year order\n// User locale is 'en-GB'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"20/12/2012\"\n\n// Korean uses year-month-day order\n// User locale is 'ko-KR'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"2012. 12. 20.\"\n\n// Arabic in most Arabic speaking countries/regions uses real Arabic digits\n// User locale is 'ar-EG'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"٢٠‏/١٢‏/٢٠١٢\"\n\n// for Japanese, applications may want to use the Japanese calendar, where 2012 was the year 24 of the Heisei era\n// User locale is 'ja-JP-u-ca-japanese' using the Japanese calendar\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"24/12/20\"\n```\n\n----------------------------------------\n\nTITLE: Basic Number Formatting with Globalization.NumberFormat in TypeScript\nDESCRIPTION: This example demonstrates the basic usage of `Globalization.NumberFormat.create().format()` to format a number according to different user locales ('de-DE', 'ar-EG', 'en-IN', 'zh-Hans-CN-u-nu-hanidec'). It showcases how separators and digits vary based on locale settings. Requires the `MsPortalFx/Globalization` module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar number = 123456.789;\n\n// User locale is 'de-DE'\n// German uses comma as decimal separator and period for thousands\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 123.456,789\n// User locale is 'ar-EG' // Arabic in most Arabic speaking countries/regions uses real Arabic digits\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → ١٢٣٤٥٦٫٧٨٩\n// User locale is 'en-IN' // India uses thousands/lakh/crore separators\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 1,23,456.789\n// User locale is 'zh-Hans-CN-u-nu-hanidec' with Chinese decimal numbering system // the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 一二三,四五六.七八九\n\n````\n```\n\n----------------------------------------\n\nTITLE: Triggering a Confirmation Dialog in a Command ViewModel (TypeScript)\nDESCRIPTION: Illustrates how to invoke a confirmation dialog from the 'execute' method of a command view model in TypeScript, typically used for potentially destructive operations. It creates an instance of 'MsPortalFx.ViewModels.MessageBox' with a prompt message, a title, and specifies the Yes/No button set using 'MsPortalFx.ViewModels.MessageBoxButtons.YesNo'. The 'this.dialog()' method is then called with the MessageBox instance to display the prompt to the user.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npublic execute(): void {\n    var confirmationMessageBox = new MsPortalFx.ViewModels.MessageBox(\n        \"Are you sure you want to stop the site?\",\n        \"The site has been stopped.\",\n        MsPortalFx.ViewModels.MessageBoxButtons.YesNo);\n    this.dialog(confirmationMessageBox);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Parameters with MsPortalFx/Globalization (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the MsPortalFx/Globalization module to access the current user\\'s display language and format culture. Dependencies include the MsPortalFx/Globalization module. Both parameters provide locale information for UI display and value formatting; output variables can be used throughout your extension for culture-aware behaviors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar displayLanguage = Globalization.displayLanguage;\nvar formatCulture = Globalization.formatCulture;\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for Part on a Blade Using Extension Method - C#\nDESCRIPTION: This C# example uses a BaseElement extension method to wait for and find an element on a blade by a condition, combining element location and assertion in one operation. This wraps WaitUntil with a selector predicate. Dependencies: Portal Test Framework, blade object (BaseElement). Input: predicate for Part. Output: Part if found.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = blade.WaitForAndFindElement<Part>(p => p.PartTitle.Equals(\"TheTitle\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a TextBox Form Control in TypeScript\nDESCRIPTION: This code creates a textbox control for editing the website name with input validation and instantaneous value updates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-construction.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst websiteName = new ObsoleteTextBox.ViewModel(\n    this._ltm,\n    this._form,\n    this._form.createEditScopeAccessor(data => data.name),\n    {\n        label: ko.observable(ClientResources.masterDetailEditWebsiteNameLabel),\n        validations: ko.observableArray([\n            new FxViewModels.RequiredValidation(ClientResources.masterDetailEditWebsiteNameRequired),\n        ]),\n        // TODO, #9968182, Remove this before associated control implementation is removed.\n        valueUpdateTrigger: (ValueUpdateTrigger as any).Input, // by default textboxes only update the value when the user moves focus. Since we don't do any expensive validation we can get updates on keypress\n    });\n\n// Section\nthis.section = Section.create(this._ltm, {\n    children: ko.observableArray<any>([\n        websiteName,\n    ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Command to Launch Select Member Blade in PDL\nDESCRIPTION: Provides an example of the PDL (Portal Definition Language) XML changes required to define a command (`TestSelectMemberV3Command`) that launches the Select Member Blade (`SelectMemberV3`). It associates the command with the `TestSelectMemberV3CommandViewModel` (TypeScript collector), configures the `BladeAction` to use the `selectMemberCollector` defined in the ViewModel, and passes `title` and `subtitle` as blade inputs. It also demonstrates passing configuration properties like `isSingleSelect` and `isInviteEnabled` from another part.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!--This is a test collector for the selectMemberv3 blade-->\n    <Command Name =\"TestSelectMemberV3Command\"\n             Kind =\"Blade\"\n             Text =\"{Resource testSelectMemberV3CommandTitle, Module=ClientResources}\"\n             ViewModel =\"TestSelectMemberV3CommandViewModel\">\n      <BladeAction Blade =\"{BladeReference SelectMemberV3, ExtensionName=Microsoft_Azure_AD}\"\n                   ParameterCollector =\"selectMemberCollector\">\n        <BladeInput Parameter=\"title\" Source=\"title\" />\n        <BladeInput Parameter=\"subtitle\" Source=\"subtitle\" />\n      </BladeAction>\n      <Property Name=\"isSingleSelect\" Source=\"{PartProperty Part=SomeOtherPart, Property=isSingleSelect}\"/>\n      <Property Name=\"isInviteEnabled\" Source=\"{PartProperty Part=SomeOtherPart, Property=isInviteEnabled}\"/>\n    </Command>\n```\n\n----------------------------------------\n\nTITLE: Defining Spec Picker Blade Structure in PDL (XML)\nDESCRIPTION: This XML snippet defines the basic structure of the Spec Picker blade within the Azure Portal definition language (PDL). It utilizes the `SpecPickerV3` template and links it to the corresponding Blade ViewModel (`RobotSpecPickerV3BladeViewModel`) and Extender ViewModel (`RobotSpecPickerV3Extender`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<azurefx:SpecPickerBladeV3 Name=\"RobotSpecPickerV3\"\n                        BladeViewModel=\"RobotSpecPickerV3BladeViewModel\"\n                        PartExtenderViewModel=\"RobotSpecPickerV3Extender\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Blob Selector Control in Azure Portal\nDESCRIPTION: Example configuration for the Microsoft.Storage.StorageBlobSelector control. Shows how to set up the control with file extension constraints, visibility options, and custom labels. The control allows selection of .zip and .cspkg files from Azure storage.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.StorageBlobSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"storageBlobSelection\",\n    \"type\": \"Microsoft.Storage.StorageBlobSelector\",\n    \"visible\": true,\n    \"toolTip\": \"Select storage blob\",\n    \"label\": \"Package (.zip, .cspkg)\",\n    \"options\": {\n      \"text\": \"Select Package\"\n    },\n    \"constraints\": {\n      \"allowedFileExtensions\": [ \"zip\", \"cspkg\" ]\n    },\n    \"extendExpirationDate\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Using VM Policy Field in React Component\nDESCRIPTION: This snippet demonstrates how to use the VM Policy Field within a React component to update resource details and handle validation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-adding-policy-validation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n}\n<FormLabel displayValue={ClientStrings.Label.region} required\n    tooltip={<><span>{ClientStrings.Tooltip.region}</span></>}>\n    <LocationDropdown\n        onLocationChange={this.props.onLocationChange}\n        selectedLocationId={this.props.locationId}\n        subscriptionId={this.props.subscriptionId}\n        customizeLocations={this.props.onCustomizeLocations}\n    />\n    <VMPolicyField getUsePolicyField={(usePolicyField) => usePolicyField(\"location\", this.props.locationId)} onUpdateValidation={this.props.setLocationValidationMessage} />\n</FormLabel>\n{\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Pinned Part in PDL\nDESCRIPTION: Demonstrates how to create a custom pinned part using PDL markup. The example shows defining a part in the catalog and referencing it as a pinned part for a blade. The part uses a button kind and includes a blade action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n\tCreate a part in the <definition> element, making it available\n\tin the catalog.\n-->\n<Part Name=\"SDKPartType\"\n      ViewModel=\"SDKPartViewModel\"\n      PartKind=\"Button\">\n  <BladeAction Blade=\"SDKBlade\"/>\n</Part>\n\n<Blade Name=\"SDKBlade\"\n  \t   ViewModel=\"SDKBladeViewModel\">\n  <!--\n  \tThe pinned part tag simply refers to a part already in the catalog.\n  -->\n  <PinnedPart PartType=\"SDKPartType\" />\n  ...\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Adding AMD Dependency Tag in TypeScript\nDESCRIPTION: This snippet shows how to add an AMD dependency tag to TypeScript files that use the converted OSS library. This ensures proper dependency generation during TypeScript to JavaScript transpilation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-best-practices.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <amd-dependency path=\"dependencyPath\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Action for Property Item (JSON)\nDESCRIPTION: This JSON snippet defines a property item with a clickable URL action in the Azure Portal. When rendered, the 'displayName' is shown and clicking the value opens the specified URL in a new browser window. The 'action' object includes a 'url' property with the link's address. This is used to provide direct navigation from a property value to external resources or documentation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Azure portal\\\",\\n    \\\"value\\\": \\\"https://azure.microsoft.com/\\\",\\n    \\\"action\\\": {\\n        \\\"url\\\": \\\"https://azure.microsoft.com/\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Outputs in Azure Portal CustomPart XML\nDESCRIPTION: This XML snippet demonstrates how to define a CustomPart with a BladeAction that includes a BladeOutput. The BladeOutput is used to pass a 'currentNumber' parameter from a child blade back to the parent blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-outputs.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<CustomPart Name=\"ParentPart\"\n            ViewModel=\"{ViewModel Name=OutputBindingsParentPartViewModel,\n                                  Module=./OutputBindings/ViewModels/OutputBindingsViewModels}\"\n            Template=\"{Html Source='Templates\\\\Parent.html'}\">\n\n  <BladeAction Blade=\"OutputBindingsChildBlade\">\n    <BladeOutput Parameter=\"currentNumber\"\n                 Target=\"currentNumber\" />\n  </BladeAction>\n</CustomPart>\n```\n\n----------------------------------------\n\nTITLE: Modern Progress Notification Implementation in TypeScript\nDESCRIPTION: Shows the new way of creating progress notifications using publishPendingNotification with simplified update and complete methods.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishPendingNotification } from \"Fx/Notification\";\nvar notification = publishPendingNotification({\n    title: clientStrings.myEventLabel,\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    percentComplete: percentComplete,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Authored Type Metadata in QueryCache (TypeScript)\nDESCRIPTION: Illustrates how to use the `name` property of a manually authored `ComputerMetadata` object to configure the `entityTypeName` property of an `MsPortalFx.Data.QueryCache`. This links the query cache to the specific data model schema defined manually.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\n    import { Computer, ComputerMetadata } from \"./SamplesExtension/DataModels/Computer\";\n...\n    public computersQuery = new MsPortalFx.Data.QueryCache<Computer, any>({\n        entityTypeName: ComputerMetadata.name,\n        sourceUri: () => Util.appendSessionId(ComputerData._apiRoot),\n    });\n\n```\n\n----------------------------------------\n\nTITLE: Asset Type Environment Configuration\nDESCRIPTION: JSON configuration for controlling asset type visibility across different environments, including options for hiding types and instances.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"assettypeoptions\": {\n      \"AzureContainerService\": { \"options\": \"HideAssetType\" },\n      \"ContainerGroup\": { \"options\": \"HideAssetType,HideInstances\" },\n      \"ManagedClusters\": { \"options\": \"HideAssetType\" },\n      \"VirtualWan\": { \"options\": \"\" },\n      \"SomeAssetWithKinds\": { \"kinds\": { \"nameofkind\": { \"options\": \"HideInstances\" } } }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Accessing Globalization Settings with MsPortalFx (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the MsPortalFx/Globalization module in TypeScript and access key properties such as displayLanguage and formatCulture. These properties provide information about the currently active display language and culture, facilitating context-aware formatting in client applications. There are no additional dependencies beyond the MsPortalFx/Globalization module. No parameters are required; outputs are the current language and culture settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalization.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar displayLanguage = Globalization.displayLanguage;\nvar formatCulture = Globalization.formatCulture;\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of StartBoard Part - C#\nDESCRIPTION: This snippet checks that no StartBoard part with a given title exists by counting matches in the elements found. It returns only when the count is zero, useful for confirming removal or ensuring an element is not present. Dependencies: StartBoard, webDriver. Input: part type, title string. Output: None; assertion by WaitUntil polling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nwebDriver.WaitUntil(() => portal.StartBoard.FindElements<Part>()\n                                            .Count(p => p.PartTitle.Equals(\"John Doe\")) == 0,\n                        \"Expected to not find a part with title 'John Doe' in the StartBoard\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Browse View with Dynamic Resources in Azure Portal\nDESCRIPTION: This snippet shows how to configure a Data Browse view using dynamic data from the resources() function. It displays resource names, types, and locations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": \"[resources().resources]\",\n    \"columns\": [\n        {\n            \"displayName\": \"Name\",\n            \"name\": \"name\"\n        },\n        {\n            \"displayName\": \"VM Type\",\n            \"name\": \"type\"\n        },\n        {\n            \"displayName\": \"Location\",\n            \"name\": \"location\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Select Dropdown Element in JSON\nDESCRIPTION: This JSON snippet defines a `Microsoft.Common.DropDown` element named \"element1\". It's configured as a multi-select dropdown with filtering enabled, a default value (\"Value two\"), and specific allowed values (\"one\", \"two\") with labels and descriptions. The element is marked as required and visible.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DropDown.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Common.DropDown\",\n    \"label\": \"Example drop down\",\n    \"placeholder\": \"\",\n    \"defaultValue\": [\"Value two\"],\n    \"toolTip\": \"\",\n    \"multiselect\": true,\n    \"selectAll\": true,\n    \"filter\": true,\n    \"filterPlaceholder\": \"Filter items ...\",\n    \"multiLine\": true,\n    \"defaultDescription\": \"A value for selection\",\n    \"constraints\": {\n        \"allowedValues\": [\n            {\n                \"label\": \"Value one\",\n                \"description\": \"The value to select for option 1.\",\n                \"value\": \"one\"\n            },\n            {\n                \"label\": \"Value two\",\n                \"description\": \"The value to select for option 2.\",\n                \"value\": \"two\"\n            }\n        ],\n        \"required\": true\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Part Performance in Kusto\nDESCRIPTION: This Kusto query retrieves Part performance data from the 'Framework' database for the last hour using the 'PartPerformance' function. It measures the time taken for a Part's 'onInputsSet' or 'onInitialize' promise to resolve (telemetry action 'PartReady'). The query returns Part/Extension identifiers, load counts, percentile durations (50th, 80th, 95th, 99th) for the 'PartReady' action, and a RedScore indicating performance violations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_7\n\nLANGUAGE: Kusto\nCODE:\n```\ndatabase('Framework').PartPerformance(ago(1h), now())\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML in infoBalloonContent for TextBox in Azure Portal\nDESCRIPTION: Code snippet demonstrating how to display HTML content in the infoBalloonContent property of a TextBox component. This approach allows for formatted text with bold elements, line breaks, and hyperlinks within the information balloon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  infoBalloonContent: {\n      htmlTemplate:\"<b>Sample label</b><br>infoBalloonContent should explain concepts and <br>can include a link to learn more.<a>Learn\n      more about infoBalloon</a>\",\n      viewModel: {},\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining the GetCreateFlows Kusto Function Signature\nDESCRIPTION: Provides the function signature for `GetCreateFlows`, a Kusto function designed to query Azure Portal create flow telemetry. It details required time range parameters (`startDate`, `endDate`) and numerous optional filters for refining results based on extension, blade, session, subscription, correlation IDs, gallery package, build number, and marketplace origin (`exclude_NonMarketplace`). This function exists in both `AzurePortal` (for live-site/test debugging, faster data availability but slower queries) and `AzPtlCosmos` (for KPI/dashboarding, slower data availability but faster queries and excludes test traffic) databases.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate:datetime,                 // required\n    endDate:datetime,                   // required\n    match_Extention:string=\"\",          // optional\n    match_Blade:string=\"\",              // optional\n    match_SessionId:string=\"\",          // optional\n    match_SubscriptionId:string=\"\",     // optional\n    match_TelemetryId:string=\"\",        // optional\n    match_CorrelationId:string=\"\",      // optional\n    match_GalleryPackageId:string=\"\",   // optional\n    match_BuildNumber:string=\"\",        // optional\n    exclude_NonMarketplace:bool=true    // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Alerting Environments and Performance Criteria (Azure Portal, JSON)\nDESCRIPTION: This JSON snippet provides a template for defining alert configuration for Azure Portal extensions. It configures environments (including national clouds), enables/disables specific alert types, and sets up performance alert criteria. Required dependencies are Azure Portal extensions infrastructure and alerting system support; key parameters include 'extensionName', 'enabled', 'environments', and per-environment performance properties. Inputs are structured as JSON, and outputs are used by the Azure Portal to trigger and manage alerts based on this configuration. Optional properties like 'availability', 'clientError', 'create', and 'performance' provide further granularity.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"], // National clouds are supported.\n            \"availability\": [...], // Optional. Add it when you want to enable availability alerts.\n            \"clientError\": [...], // Optional. Add it when you want to enable client error alerts.\n            \"create\": [...], // Optional. Add it when you want to enable create alerts.\n            \"performance\": [\n                 {\n                    \"type\": \"extension\", // Support value, \"extension\", \"blade\" or \"part\".\n                    \"enabled\": true, // Enable or disable extension type alerts for Your_Extension_Name.\n                    \"criteria\": [\n                       ...\n                    ]\n                },\n                {\n                    \"type\": \"blade\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n                ...\n            ]\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            \"performance\": [\n                {\n                    ...\n                }\n                ...\n             ]\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Theme Changes\nDESCRIPTION: TypeScript implementation for passing theme information to the AppBlade IFrame.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Services.getSettings().then(settings => {\n    const theme = settings[\"fxs-theme\"];\n    theme.subscribe(container, theme =>\n        this.postMessage(new FxAppBlade.Message(\"theme\", theme.name))\n    ).callback(theme());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Blade Input Data in onInputsSet Method in TypeScript\nDESCRIPTION: Implements the onInputsSet lifecycle method that's invoked when template blade receives new parameters. This method fetches data for the grid sample with an empty string parameter.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * onInputsSet is invoked when the template blade receives new parameters\n */\npublic onInputsSet(): Promise<any> {\n    // fetch data for the grid sample\n    return this._view.fetch(\"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Locale-Aware Dates using MsPortalFx/Globalization (TypeScript)\nDESCRIPTION: This TypeScript sample demonstrates formatting a date according to the user\\'s locale settings using MsPortalFx/Globalization.DateTimeFormat. After importing the module and setting a UTC date object, the snippet logs the formatted string (day-month-year order for \\'en-GB\\') to the console. Dependencies include the MsPortalFx/Globalization module. Inputs are JavaScript Date objects; outputs are locale-formatted date strings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// British English uses day-month-year order\n// User locale is 'en-GB'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// \\u2192 \\\"20/12/2012\\\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Action in Azure Portal\nDESCRIPTION: Creates a clickable link that opens the Resource Overview for a specified resourceId. Requires resource path parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a resource\",\n    \"value\": \"Resource name\",\n    \"action\": {\n        \"resourceId\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Reference With Parameters Object in Azure Portal\nDESCRIPTION: Specifies the properties for configuring a blade reference with parameters. Includes name, extension, parameters, provisioning flag, and feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-bladeReferenceWithParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the blade\n|extension|False|Extension name\n|parameters|False|Parameters for configuring blade\n|doesProvisioning|False|Specify whether to open this blade as Provisioning blade\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Dashboard View Parameter Update Action Configuration\nDESCRIPTION: Configuration schema for defining parameter update actions when dashboard elements are clicked. Requires type specification as 'updateParameters' and a parameters array defining affected parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-actionsOnClick.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description |\n| ---|:--:|:--:|\n|type|True|What action the tile should do when clicked. Enum permitting the value: \"updateParameters\"\n|parameters|True|The parameters present in this array will be affected by parameter related actions.  See [here](dx-view-dashboardViewType-parametersValues.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Azure PDE File Metadata Structure - JSON\nDESCRIPTION: This JSON code block shows the structure of a .PDE file, which describes extension metadata including the extension name, version, SDK and schema versions, asset types, parts, and blades. Consuming extensions use this file to discover available components for sharing or referencing, provided both extensions are present in the portal shell at runtime. Actual code generation and file placement are required as prerequisites, and the JSON describes a sample with extension identifier and component arrays. The .PDE file's limitations are that it requires both extensions to be loaded together to enable sharing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extension\": \"HubsExtension\",\n  \"version\": \"1.0\",\n  \"sdkVersion\": \"1.0.8889.122 (rd_auxweb_n_f1(tomcox).130919-1440)\",\n  \"schemaVersion\": \"0.9.1.0\",\n  \"assetTypes\": [\n    {\n      \"name\": \"TagsCollection\",\n      \"permissions\": []\n    }\n    ...\n  ],\n  \"parts\": [\n    {\n      \"name\": \"ChangeLogPart\",\n      \"inputs\": []\n    },\n    ...\n  ],\n  \"blades\": [\n    {\n      \"name\": \"TagCollectionBlade\",\n      \"keyParameters\": [],\n      \"inputs\": [],\n      \"outputs\": []\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Temperature Conversion Blade ViewModel Implementation\nDESCRIPTION: Implements a blade view model that transforms temperature values from Fahrenheit to Celsius, demonstrating computed properties and input handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-properties.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The blade view model for blade Properties.\n */\nexport class BladePropertiesBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    /**\n     * The temperature in celcius is calculated as a public property, used by a part.\n     */\n    public tempInCelcius: KnockoutComputed<number>;\n\n    private _tempInFahrenheit = ko.observable(0);\n\n    /**\n     * View model constructor.\n     */\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: DataContext) {\n        super();\n        this.title(SamplesExtension.Resources.Strings.bladePropertiesBladeTitle);\n        this.icon(MsPortalFx.Base.Images.Polychromatic.Gears());\n\n        this.tempInCelcius = ko.computed<number>(() => {\n            return Math.round((this._tempInFahrenheit() - 32) * (5/9));\n        });\n    }\n\n    /**\n     * When the temperature in F is passed in, trigger the computed to calculate it in C\n     */\n    public onInputsSet(inputs: any): Promise<any> {\n        this._tempInFahrenheit(inputs.tempInFahrenheit);\n        this.title(SamplesExtension.Resources.Strings.bladePropertiesBladeTitle + \" - \" + inputs.tempInFahrenheit + \" deg F\");\n        return Promise.resolve();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Value-Based Feature Flags in TypeScript\nDESCRIPTION: Shows how to retrieve and use feature flag values with MsPortalFx.getFeatureValue API. The example uses a switch statement to implement different behaviors based on the flag's value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (MsPortalFx.getFeatureValue(\"someotherflag\"))\n{\n    case \"value1\":\n        // behavior 1\n        break;\n    case \"value2\":\n        // behavior 2\n        break;\n    default:\n        // default behavior\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FormViewType for Cloud Shell Execution\nDESCRIPTION: This example demonstrates how to set up a FormViewType to execute commands in Azure Cloud Shell. It includes properties for customizing form steps and defining Cloud Shell execution parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"isWizard\": false,\n    \"title\": \"Execute in Cloud Shell\",\n    \"primaryButtonLabel\": \"Run\",\n    \"steps\": [],\n    \"cloudShell\": {\n      \"os\": \"linux\",\n      \"shellScript\": \"echo 'Hello from Cloud Shell'\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Key Picker ParameterCollector in TypeScript\nDESCRIPTION: Provides an example TypeScript constructor for initializing the Key picker using `MsPortalFx.ViewModels.ParameterCollector`. It shows how to supply the `vaultId` and optionally a pre-selected key (`supplyInitialData`), define the `receiveResult` callback to handle the selected key's identifier (`kid`) upon blade closure, and provide the `vaultId` again in the configuration (`supplyProviderConfig`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.keyPickerCollector = new MsPortalFx.ViewModels.ParameterCollector<KeyPickerInputsOutputs>(_container, {\n          supplyInitialData: () => {\n              return <KeyPickerInputsOutputs> {\n                  vaultId: this._vaultSelector.value().id;\n                  // this is where you would pass in pre selected key, if desired\n                  key: ko.observable(<Key>{\n                      kid: ko.observable(\"\")\n                  });\n              };\n          },\n          receiveResult: (result: KeyPickerInputsOutputs) => {\n              // this is what will happen when the user finishes selecting a key and the blade closes.\n             this._keyId(result.key().kid());\n          },\n          supplyProviderConfig: () => {\n              return <KeyPickerConfig> {\n                  vaultId: this._vaultSelector.value().id();\n              };\n          }\n      });\n```\n\n----------------------------------------\n\nTITLE: Defining MarkdownViewType Sections in Markdown\nDESCRIPTION: This snippet lists the available sections for MarkdownViewType, including their names, whether they are required, and brief descriptions. It covers essential components like kind, export, parameters, resources, and various UI elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-markdownViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|\n|export|False|Designation for blade sharing across extensions. If set to `true` then it is available to be used by other extensions.\n|contextPaneWidth|False|See [here](dx-enum-contextPaneWidth.md ) for the available options\n|parameters|False|Defines the parameters to be passed into a declarative blade, that then can be accessed using the parameters function. See [View parameters](dx-viewTypeParameters.md) for more.\n|resources|False|The resources section takes an ARM resource id and apiVersion, which in turn makes a ARM GET request to retrieve the resource details. You can use the resources() function to retrieve the resource payload at runtime.\n|dataSources|False|Supports Graph API. Use it to pre-load graph API before the view is rendered. See [here](dx-viewTypeDataSources.md) for **dataSources** property.\n|messages|False|Display a banner at the top of the view. See [here](dx-viewTypeMessages.md) for details.\n|essentials|False|Defines Essentials section for the view\n|commands|False|The commands section defines the Commands in the command bar.See [here](dx-viewTypeCommands.md) for **commands** property.\n|properties|False|The properties section defines the form that needs to be rendered. The tabs needed, the controls in each tab etc. are defined in the properties section.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Querying BladeFullReady Performance in Kusto\nDESCRIPTION: This Kusto query retrieves blade performance data, focusing on the 'BladeFullReady' metric, from the 'Framework' database for the last hour using the 'BladePerformance' function. It includes an adjustment for 'getMenuConfig' resolution time when blades are loaded in resource menus. The query returns blade/extension identifiers, load counts (total and in-menu), menu configuration details (duration, static status), lock status, and percentile durations for the adjusted 'BladeFullReady' time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_5\n\nLANGUAGE: Kusto\nCODE:\n```\ndatabase('Framework').BladePerformance(ago(1h), now())\n```\n\n----------------------------------------\n\nTITLE: Transmitting User Theme Selection to IFrame via postMessage in Azure Portal - TypeScript\nDESCRIPTION: This snippet shows how to access the current portal theme using MsPortalFx.Services, subscribe to theme changes, and use postMessage to send the selection to the App IFrame. The receiving side (not shown) should update UI themes based on the message. Dependencies: MsPortalFx.Services API and subscription/callback support; parameters include the container for the subscription and the theme name. Input is theme selection in settings, and output is the postMessage event with theme data. Limitation: Must be run in the context of Portal's extension development framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Get theme class and pass it to App Blade\nMsPortalFx.Services.getSettings().then(settings => {\n    const theme = settings[\"fxs-theme\"];\n    theme.subscribe(container, theme =>\n        this.postMessage(new FxAppBlade.Message(\"theme\", theme.name))\n    ).callback(theme());\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Menu Items Using AFEC Flags\nDESCRIPTION: Demonstrates menu item replacement using AFEC flags. Shows configuration for replacing content based on AFEC flag state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceMenuItems-conditionalSupport.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"menu\": {\n      \"overview\": {\n        \"id\": \"dxOverviewId\",\n        \"displayName\": \"dxOverviewDisplayName\",\n        \"icon\": \"someIcon\",\n        \"blade\": {\n          \"name\": \"Overview_dx\"\n        },\n        \"fx.afec\": {\n          \"names\": [\"bar\"],\n          \"replaceWhen\": \"Disabled\",\n          \"replacement\": {\n            \"id\": \"dxOverviewId\",\n            \"displayName\": \"replacedDxOverviewDisplayName\",\n            \"icon\": \"replacedSomeIcon\",\n            \"blade\": {\n              \"name\": \"ReplacedOverview_dx\"\n            }\n          }\n        },\n```\n\n----------------------------------------\n\nTITLE: Including Generated TypeScript Files in Client Project (XML)\nDESCRIPTION: XML snippet for a `.csproj` file demonstrating how to include all TypeScript files (including the auto-generated ones typically placed under `Client/`) within the project structure using a wildcard pattern. This ensures the generated files are recognized by the build process and included in compilation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <None Include=\"Client\\**\\*.ts\" />\n</ItemGroup>\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Legacy PCv1/v2 Provider Callbacks to PCv3\nDESCRIPTION: Shows the correspondence between legacy PCv1/v2 Parameter Provider methods (`overrideInputParameters` or `onInputsReceived`, `overrideOutputParameters`) and their PCv3 equivalents (`mapIncomingDataToEditScope/Async`, `mapOutgoingDataForCollector`). Also mentions how to access collector configuration within the new provider callbacks using `this.parameterProvider.configFromCollector()`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noverrideInputParameters\n```\n\nLANGUAGE: javascript\nCODE:\n```\nonInputsReceived\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmapIncomingDataToEditScope/Async\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.paramterProvider.configFromCollector()\n```\n\nLANGUAGE: javascript\nCODE:\n```\noverrideOutputParameters\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmapOutgoingDataForCollector\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Parent Frames in Azure Portalfx Extensions (XML)\nDESCRIPTION: This XML snippet demonstrates how to set the 'Microsoft.Portal.Framework.FrameworkConfiguration.AllowedParentFrame' key in a configuration file (CSCFG) for an Azure sovereign cloud deployment. This setting takes a JSON array of allowed portal domains, ensuring that only specified Azure portals may load an extension via iframe in the browser. Omitting or misconfiguring this key can cause browser security errors and prevent the extension from loading in the intended cloud portal. The example targets the Mooncake (China) sovereign cloud.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-deployment-sovereign.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\\\"Microsoft.Portal.Framework.FrameworkConfiguration.AllowedParentFrame\\\" value=\\\"['portal.microsoftazure.cn']\\\" />\n```\n\n----------------------------------------\n\nTITLE: Legacy Extension Resource Access Configuration - Azure Extensions.prod.json - JSON\nDESCRIPTION: Represents a legacy JSON configuration for defining extension-wide resource access before migration. Contains multiple resources, including ARM (empty name for ARM endpoint) and Microsoft Graph, as well as metadata such as hosting service name, extension name, email, and flags. Inputs include extension identity and required resources. Placement is in Extensions.prod.json or similar legacy config files; limitation: after migration, this is replaced by per-hosting-service 'authorization' config.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"name\": \"Contoso_Extension\",\\n    \"feedbackEmail\": \"myteamtriage@microsoft.com\",\\n    \"flags\": \"SupportsPrewarming\",\\n    \"resourceAccess\": [\\n        {\\n            \"name\": \"\",\\n            \"resource\": \"https://management.azure.com/\",\\n        }\\n        {\\n            \"name\": \"microsoft.graph\",\\n            \"resource\": \"https://graph.microsoft.com/\",\\n        }\\n    ],\\n    \"hostingServiceName\": \"contoso\"\\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment OnSubmit for Azure Portal Form View\nDESCRIPTION: This JSON snippet shows how to configure the onSubmit property in a deployment object for an Azure Portal Form view. It demonstrates opening a sequence of custom blades as context blades when the user clicks 'submit' to start deployment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"deployment\": {\n    \"kind\": \"ResourceGroup\",\n    \"resourceGroupId\": \"[steps('basics').resourceGroup.value.resourceId]\",\n    \"location\": \"[if(equals('New', steps('basics').resourceGroup.modeName), steps('basics').location.name, steps('basics').resourceGroup.value.location)]\",\n    \"onSubmit\": [\n        {\n            \"condition\": \"[equals(length(parameters('msAppId')), 0)]\",\n            \"blade\": {\n                \"name\": \"ConvergedAppRegisterBlade\",\n                \"inContextPane\": true,\n                \"parameters\": {\n                    \"name\": \"[steps('basics').resourceName]\",\n                    \"hideButton\": true\n                },\n                \"outputItem\": \"app\",\n                \"transforms\": {\n                    \"parameters\": \"{msAppId:appId,msAppPassword:appPassword}\"\n                }\n            }\n        }\n    ],\n    \"parameters\": {\n        \"botId\": \"[steps('basics').resourceName]\",\n        \"sku\": \"[steps('basics').botSku]\",\n        \"msAppId\": \"[coalesce(steps('basics').existingApp.botAppId, '')]\",\n        \"msAppPassword\": \"[coalesce(steps('basics').existingApp.botAppPassword, '')]\"\n    },\n    \"template\": {\n        \"file\": \"./createWithComposer.json\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Status Badge SVG Icon Collection\nDESCRIPTION: Collection of status badge SVG icons including Error, Failed, Info, None, Pending, Stopped, and Success states. Each icon is designed with consistent styling and includes both filled and outline variants. The icons use specific brand colors like #EC008C for errors, #0072C6 for info, and #7FBA00 for success states.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_191\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"9px\" height=\"9px\" viewBox=\"0 0 9 9\" enable-background=\"new 0 0 9 9\" xml:space=\"preserve\">\n<circle fill=\"#EC008C\" cx=\"4.5\" cy=\"4.5\" r=\"4.5\"/>\n<circle fill=\"#FFFFFF\" cx=\"4.5\" cy=\"6.438\" r=\"0.697\"/>\n<polygon fill=\"#FFFFFF\" points=\"4.604,2.186 4.396,2.186 3.875,2.186 4.061,5.418 4.396,5.418 4.604,5.418 4.939,5.418 5.125,2.186\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers for Locales with MsPortalFx NumberFormat (TypeScript)\nDESCRIPTION: These examples demonstrate how to use the Globalization.NumberFormat.create() method from the MsPortalFx/Globalization module in TypeScript to format numbers according to various user locales. The formatter utilizes the Intl API under the hood and outputs the formatted number as a string, respecting locale-specific conventions such as digit scripts and separators. Dependencies are the MsPortalFx/Globalization module. Key parameters include the target number and the optional locale context (determined by user settings). Outputs are formatted number strings matching the user's locale. No constraints aside from the module dependency.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalization.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar number = 123456.789;\n\n// User locale is 'de-DE'\n// German uses comma as decimal separator and period for thousands\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 123.456,789\n// User locale is 'ar-EG'\\uFFFD// Arabic in most Arabic speaking countries/regions uses real Arabic digits\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → \\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u066B\\u0667\\u0668\\u0669\n// User locale is 'en-IN'\\uFFFD// India uses thousands/lakh/crore separators\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 1,23,456.789\n// User locale is 'zh-Hans-CN-u-nu-hanidec' with Chinese decimal numbering system\\uFFFD// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → \\u4E00\\u4E8C\\u4E09,\\u56DB\\u4E94\\u516D.\\u4E03\\u516B\\u4E5D\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Units for Property Items in Azure Portal\nDESCRIPTION: This snippet shows how to specify source units for property values and set the number of decimal digits to display. It demonstrates the JSON structure for defining unit-based properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk Size\",\n    \"value\": \"[resources().properties.diskSize]\",\n    \"sourceUnits\": \"Gigabytes\",\n    \"maximumFractionDigits\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tutorials Tab Configuration in Azure Portal\nDESCRIPTION: JSON schema for configuring a Tutorials tab within a resource overview page. Contains configuration for tiles, videos, and useful links sections that can be added to the Resource Overview tabs array.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Tutorials\",\n  \"tilesGroup\": {\n    \"displayName\": {\n      \"property\": \"freeTrainingsFromMicrosoft\"\n    },\n    \"items\": [\n      {\n        \"title\": {\n          \"property\": \"tile1Title\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n        \"subtitle\": {\n          \"property\": \"tile1Subtitle\"\n        },\n        \"description\": {\n          \"property\": \"tile1Description\"\n        },\n        \"action\": {\n          \"url\": \"https://www.azure.com\",\n          \"displayName\": {\n            \"property\": \"start\"\n          }\n        }\n      }\n    ]\n  },\n  \"videosGroup\": {\n    \"displayName\": {\n      \"property\": \"tab2videosTitle\"\n    },\n    \"items\": [\n      {\n        \"title\": {\n          \"property\": \"tab2feature1Title\"\n        },\n        \"description\": {\n          \"property\": \"tab2feature1Description\"\n        },\n        \"learnMore\": {\n          \"url\": \"https://www.azure.com\",\n          \"ariaLabel\": \"Learn more about Azure\"\n        },\n        \"video\": {\n          \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n        }\n      }\n    ]\n  },\n  \"linksGroup\": {\n    \"displayName\": \"Useful links\",\n    \"items\": [\n      {\n        \"title\": \"Concepts\",\n        \"action\": [\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Azure Managed applications overview\"\n          },\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Service Catalog applications\"\n          },\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Managed applications in Azure Marketplace\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pseudo-localization in Azure Portal\nDESCRIPTION: This code snippet demonstrates how to enable pseudo-localization for testing client-side strings in the Azure Portal. It uses a query string parameter to activate this feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:12000?l=qps-ploc\n```\n\n----------------------------------------\n\nTITLE: Applying TemplateBlade Decorators in TypeScript\nDESCRIPTION: Focuses on applying the `@TemplateBlade.Decorator` and `@TemplateBlade.ForContextPane.Decorator`. The `htmlTemplate` property defines the blade's UI structure (shown inline here, but can also be a relative file path like `./MyBladeName.html`), and the `width` property within `@TemplateBlade.ForContextPane.Decorator` configures the blade's size when displayed as a context pane. Multiple decorators can be applied to a single class.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Decorator({\nhtmlTemplate: \"\" +\n    \"<div class='msportalfx-padding'>\" +\n    \"  <div>This is a Template Blade.</div>\" +\n    \"</div>\",\n})\n@TemplateBlade.ForContextPane.Decorator({\nwidth: TemplateBlade.ForContextPane.Width.Small,\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding GetDefaultQueryString in Custom Application Context\nDESCRIPTION: Demonstrates how to override the GetDefaultQueryString method in the derived application context class to implement environment-specific feature flag defaults.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override IReadOnlyDictionary<string, string> GetDefaultQueryString(string host)\n{\n    return this.configuration.DefaultQueryString.GetValueOrDefault(host);\n}\n```\n\n----------------------------------------\n\nTITLE: Form Step Properties Schema Definition\nDESCRIPTION: Markdown table defining the required and optional properties for form step configurations. Includes name, label, description, elements, and feature flag properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formSteps-formStepsWithoutResourceScope.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the step/tab instance\n|label|True|Display name of the step/tab\n|description|False|Description of the step/tab\n|elements|True|List of form controls to be rendered in the the step. See [formControlsWithoutResourceScope](dx-view-formViewType-formControlsWithoutResourceScope.md).\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Provisioner Callback for Asynchronous Operation\nDESCRIPTION: The `supplyProvisioningPromise` callback is used within a Provisioner. It's responsible for returning a promise that represents the asynchronous provisioning operation (e.g., deploying an ARM template, calling a backend). It receives mapped data outputs from the Parameter Provider when triggered via an action bar.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyProvisioningPromise\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceInformation Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the ResourceInformation interface, which represents the resource information passed to the getMenuConfig method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceInformation {\n    resourceId: string;\n    resource: FxAzure.Subscription | FxHubsAzure.ResourceGroup | FxHubsAzure.Resource;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft.Common.InfoBox Control in JSON\nDESCRIPTION: This snippet demonstrates how to specify an InfoBox control in a JSON template. It includes the required properties such as name, type, and options, as well as the optional visible property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.InfoBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"text1\",\n\"type\": \"Microsoft.Common.InfoBox\",\n\"visible\": true,\n\"options\": {\n  \"style\": \"None\",\n  \"text\": \"Style: None\",\n  \"uri\": \"https://www.microsoft.com\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: BladeFullReady Stages Table in Markdown\nDESCRIPTION: Table defining the different stages of blade initialization and their corresponding performance tracking metrics in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Stage | Native marker identifier | Data property name | Description |\n| ----- | ------------------------ | -------- | ----------- |\n| 0 | ExtLoadBladeBundles | bundleLoadingTime | The async time spent requiring the BladeDefinition (which today is co-bundled with the Blade class' module). This covers the time downloading and processing your Blade's bundles. |\n| 1 | ExtInstantiateBladeClass | Not Tracked | The async time spent diContainer.getAsync'ing the Blade class. This and the following 'ExtBladeOnInitializeSync' show up as insignificantly small, which itself can help refocus on larger time-slices. |\n| 2 | ExtBladeOnInitializeSync | Not Tracked | The sync time spent in the Blade's 'onInitialize' method. |\n| 3 | ExtBladeOnInitializeAsync | onInitializeAsyncTime | The async time from the point 'onInitialized' is called to the point where the Promise returned from 'onInitialize' is resolved. All these are measured in the extension web worker. |\n| * | ExtBladePrepareFirstAjax | prepareFirstAjaxTime | The time spent from the point 'onInitialized' is called to the point where the first ajax call is sent from the extension web worker.  This is fuzzy because the FX ajax client isn't explicitly bound to a Blade, but inaccuracies should be outlier cases and should be easy to exclude based on knowledge of the Blade. |\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Fields and Binding to EditScope in TypeScript\nDESCRIPTION: This extensive snippet demonstrates how to create a set of form field objects and bind them to the EditScope. It includes creating text boxes, option groups, and sections with various configuration options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _initializeForm(): void {\n\n        // Form fields.\n        var websiteNameFieldOptions = <MsPortalFx.ViewModels.Forms.TextBoxOptions>{\n            label: ko.observable(ClientResources.masterDetailEditWebsiteNameLabel),\n            validations: ko.observableArray([\n                new MsPortalFx.ViewModels.RequiredValidation(ClientResources.masterDetailEditWebsiteNameRequired),\n                new MsPortalFx.ViewModels.RegExMatchValidation(\"^[a-zA-Z _]+$\", ClientResources.masterDetailEditWebsiteNameValidation)\n            ]),\n            emptyValueText: ko.observable(ClientResources.masterDetailEditWebsiteNameInitial),\n            labelPosition: ko.observable(MsPortalFx.ViewModels.Forms.LabelPosition.Left)\n        };\n\n        this.websiteNameField = new MsPortalFx.ViewModels.Forms.TextBox(this._container, this, \"name\", websiteNameFieldOptions);\n\n        var isRunningFieldOptions = <MsPortalFx.ViewModels.Forms.OptionsGroupOptions<boolean>>{\n            label: ko.observable(ClientResources.masterDetailEditRunningLabel),\n            options: ko.observableArray([\n                {\n                    text: ko.observable(ClientResources.masterDetailEditRunningOn),\n                    value: true\n                },\n                {\n                    text: ko.observable(ClientResources.masterDetailEditRunningOff),\n                    value: false\n                }\n            ]),\n            labelPosition: ko.observable(MsPortalFx.ViewModels.Forms.LabelPosition.Left)\n        };\n\n        this.isRunningField = new MsPortalFx.ViewModels.Forms.OptionsGroup(this._container, this, \"running\", isRunningFieldOptions);\n\n        var generalSectionOptions = <MsPortalFx.ViewModels.Forms.SectionOptions>{\n            children: ko.observableArray([\n                this.websiteNameField,\n                this.isRunningField\n            ]),\n            style: ko.observable(MsPortalFx.ViewModels.Forms.SectionStyle.Wrapper),\n        };\n\n        this.generalSection = new MsPortalFx.ViewModels.Forms.Section(this._container, generalSectionOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Weekly Create Flow Deployment Success in Kusto\nDESCRIPTION: This Kusto query calculates the weekly deployment success percentage for create flows over the last 5 weeks, excluding unsupported and custom deployments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\nlet today = floor(now(),1d);\nlet fri= today - dayofweek(today) - 2d;\nlet sat = fri - 6d;\nlet startDate = sat-35d;\nlet endDate = fri;\nGetCreateFunnelByDay(startDate, endDate)\n| where Unsupported == 0 and CustomDeployment == 0\n| extend startOfWeek = iff(dayofweek(Date) == 6d,Date , Date - dayofweek(Date) - 1d)\n| summarize sum(CreateFlowLaunched), sum(DeploymentStartedWithExclusions), sum(DeploymentSucceeded) by startOfWeek, ExtensionName\n| extend [\"Deployment Success %\"] = iff(sum_DeploymentStartedWithExclusions == 0, todouble(0), bin(todouble(sum_DeploymentSucceeded)/sum_DeploymentStartedWithExclusions*100 + 0.05, 0.1))\n| project startOfWeek, [\"Extension\"] = ExtensionName, [\"Deployment Success %\"]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Frame Communication Handler\nDESCRIPTION: JavaScript code handling cross-frame communication, security validation, and message passing between the Frame Blade and parent portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    \"use strict\";\n\n    let sessionId = location.hash.substr(1);\n\n    let queryMap = (function() {\n        let query = window.location.search.substring(1);\n        let parameterList = query.split(\"&\");\n        let map = {};\n        for (let i = 0; i < parameterList.length; i++) {\n            let pair = parameterList[i].split(\"=\");\n            map[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n        }\n        return map;\n    })();\n\n    function getQueryParameter(name) {\n        return queryMap[name] || \"\";\n    }\n\n    function postMessageToParent(kind) {\n        window.parent.postMessage({\n            signature: frameSignature,\n            kind: kind,\n        }, trustedParentOrigin);\n    }\n\n    let allowedParentFrameAuthorities = [\"localhost:55555\", \"portal.azure.com\"];\n    let trustedParentOrigin = (function () {\n        let sessionId = location.hash.substr(1);\n        let parentOriginFromQueryString = (new URLSearchParams(window.location.search)).get(\"trustedAuthority\") || \"\";\n        let parentTrustedAuthority = (parentOriginFromQueryString.split(\"//\")[1] || \"\").toLowerCase();\n        let isTrustedOrigin = allowedParentFrameAuthorities.some(function (allowedOrigin) {\n            if (allowedOrigin === parentTrustedAuthority) {\n                return true;\n            }\n            let subdomainSuffix = \".\" + allowedOrigin;\n            return parentTrustedAuthority.endsWith(subdomainSuffix);\n        });\n    })();\n```\n\n----------------------------------------\n\nTITLE: Declaring Context Property for Template Blade in TypeScript\nDESCRIPTION: This snippet shows how to declare the context property for a template blade. It demonstrates the basic declaration and how to modify it when adding decorators like ReturnsData. The context property provides APIs for interacting with the shell.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic context: TemplateBlade.Context<void>;\n\n// With ReturnsData decorator\npublic context: TemplateBlade.Context<void> & TemplateBlade.ReturnsData.Context<{ value: string }>;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Resource Blade Settings in Azure Portal using TypeScript\nDESCRIPTION: This code demonstrates conditionally setting the `getSettingsSelection` property based on the 'resourcemenu' feature flag. If the feature is enabled (checked via `MsPortalFx.isFeatureEnabled`), the property is set to `null`; otherwise, it's assigned the value of `SettingsSelection`. This pattern allows switching between legacy and new behaviors, specifically within the context of resource blade settings in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSettingsSelection: MsPortalFx.isFeatureEnabled(\"resourcemenu\") ? null : SettingsSelection;\n```\n\n----------------------------------------\n\nTITLE: Defining Spec Picker Extender ViewModel Structure (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the structure of the `RobotSpecPickerV3Extender` class, which implements the `SpecPickerExtender` interface. It sets up Knockout observables for input (`input`), output (`output`), defines properties for selection mode and filter controls, and declares private members for managing spec data views (`_specDataView`, `_specData`). The constructor signature shows dependencies on the container and data context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* The sample extender for the robot spec picker blade.\n*/\nexport class RobotSpecPickerV3Extender implements HubsExtension.Azure.SpecPicker.SpecPickerExtender {\n   /**\n    * See SpecPickerExtender interface.\n    */\n   public input = ko.observable<SpecPicker.SpecPickerExtenderInput>();\n\n   /**\n    * See SpecPickerExtender interface.\n    */\n   public output = ko.observable<SpecPicker.SpecPickerExtenderOutput>();\n\n   /**\n    * See SpecPickerExtender interface.\n    */\n   public selectionMode: SpecPicker.SelectionMode;\n\n   /**\n    * See SpecPickerExtender interface.\n    */\n   public filterControls: KnockoutObservableArray<SpecPicker.FilterControl>;\n\n   private _specDataView: MsPortalFx.Data.EntityView<SpecPicker.SpecData, any>;\n\n   private _specData = ko.observable<SpecPicker.SpecData>();\n\n   /**\n    * Extender constructor.\n    *\n    * @param container The view model for the part container.\n    * @param dataContext The data context.\n    */\n   constructor(container: MsPortalFx.ViewModels.ContainerContract, dataContext: HubsArea.DataContext, selectionMode?: SpecPicker.SelectionMode) {\n       \n```\n\n----------------------------------------\n\nTITLE: Dashboard View Blade Opening Action Configuration\nDESCRIPTION: Configuration schema for defining blade opening actions when dashboard elements are clicked. Requires type specification as 'openBlade' and a blade reference configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-actionsOnClick.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description |\n| ---|:--:|:--:|\n|type|True|What action the tile should do when clicked. Enum permitting the value: \"openBlade\"\n|blade|True|See [here](dx-view-dashboardViewType-bladeReference.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring TrackEdits Attribute in C#\nDESCRIPTION: Example showing how to opt out of tracking user edits for read-only properties in C# by using the TrackEdits attribute with a false value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TypeMetadataModel(typeof(Employee))]\npublic class Employee\n{\n    [TrackEdits(false)]\n    public int AccruedVacationDays { get; set; }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Azure Resource Group Creation and Validating Success using C#\nDESCRIPTION: This snippet shows how to finalize the resource group creation process by clicking the 'Create' button and validating the success of the operation. It demonstrates waiting for the creation notification and verifying the blade closure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-createsample.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Find and click the create button (sometimes also called Ok button)\nCreateActionBar createActionBar = webDriver.WaitUntil(() => createRgBlade.FindElement<CreateActionBar>(), \"Could not find the create action bar.\");\ncreateActionBar.ClickOk();\nwebDriver.WaitUntil(() => portal.IsBladeClosed(rgCreateBladeTitle),\n    string.Format(CultureInfo.InvariantCulture, \"The {0} blade did not close after clicking the Create button on it's Create action bar.\", rgCreateBladeTitle));\n\nportal.GetNotifications(text: \"Creating resource group '\" + rgName + \"' succeeded\", timeout: TimeSpan.FromSeconds(90))\n```\n\n----------------------------------------\n\nTITLE: VirtualNetworkCombo Control Output Structure\nDESCRIPTION: Sample output showing the structure returned by the VirtualNetworkCombo control after user configuration, including network details and subnet configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"vnet01\",\n    \"resourceGroup\": \"ManagedIdentityTest\",\n    \"addressPrefixes\": [\n        \"10.0.0.0/16\"\n    ],\n    \"addressPrefix\": \"10.0.0.0/16\",\n    \"newOrExisting\": \"new\",\n    \"subnets\": {\n        \"subnet1\": {\n            \"name\": \"subnet-1\",\n            \"addressPrefix\": \"10.0.0.0/24\",\n            \"startAddress\": \"10.0.0.4\"\n        },\n        \"subnet2\": {\n            \"name\": \"subnet-2\",\n            \"addressPrefix\": \"10.0.1.0/26\",\n            \"startAddress\": \"10.0.1.4\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Transformed Data in Azure Portal Control\nDESCRIPTION: This snippet demonstrates how to reference the result of a transform in a dropdown control's allowedValues property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-function-transforms.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowedValues\": \"[steps('setpName').queryApi.transformed.list]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Parent Frames in web.config (XML)\nDESCRIPTION: Illustrates configuring the `AllowedParentFrame` application setting within the extension's `web.config` file using XML. This setting specifies a list of trusted host domains that are permitted to load the extension within an iframe. The first example shows a production setting restricting access to 'portal.azure.com', while the second shows a test/debug setting allowing any host ('*').\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-versioning.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- production -->\n<add key=\"Microsoft.Portal.Framework.FrameworkConfiguration.AllowedParentFrame\" value=\"['portal.azure.com']\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- test -->\n<add key=\"Microsoft.Portal.Framework.FrameworkConfiguration.AllowedParentFrame\" value=\"['*']\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Tile Configuration - URI Source Option\nDESCRIPTION: Defines the structure for configuring a markdown tile that loads content from a URI. Requires specifying the source type as 'uri' and providing the URI where the content can be retrieved.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-markdownTileData.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{\n  \"source\": \"uri\",\n  \"uri\": \"<content-uri>\",\n  \"fx.feature\": \"<optional>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Token Request Format for Azure Portal Delegation\nDESCRIPTION: Example of a token request payload sent to the Portal DelegationToken controller endpoint. Shows required fields including extension name, resource name, tenant ID, and portal authorization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\":\"Microsoft_AAD_IAM\",\n    \"resourceName\":\"self\",\n    \"tenant\":\"9e4917cd-bd32-4371-b1c8-82b5d610f2e2\",\n    \"portalAuthorization\":\"MIIF....\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Create Flow Regression Base Data in Kusto\nDESCRIPTION: This query analyzes create flow performance over a specified time period. It takes parameters for start time, duration in hours, and minimum create count threshold to identify potential regressions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\n_CreateFlowRegressionsBase(now(),24h,50)\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization and App Settings - ASP.NET web.config - XML\nDESCRIPTION: Defines authorization rules for users and static resources, specifying paths for home, scripts, and content folders, and ensures only authenticated users are permitted except for specified locations. Also injects required AAD authentication and portal-specific appSettings for proper operation. Requires assemblies Microsoft.Portal.AadCore.dll and System.IdentityModel.Tokens.Jwt.dll. Inputs include user identity and configuration keys, outputting enforced access restrictions; limitations include static rule application and dependency on correct appSettings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<system.web>\\n    <authorization>\\n    <deny users=\"?\" />\\n    </authorization>\\n</system.web>\\n\\n<!-- allow the home page which serves the extension source -->\\n<!-- this loads the extension from ~/Index; change path to fit your development environment -->\\n<location path=\"Index\">\\n<system.web>\\n    <authorization>\\n    <allow users=\"*\" />\\n    </authorization>\\n</system.web>\\n</location>\\n\\n<!-- allow images and scripts -->\\n<location path=\"Content\">\\n<system.web>\\n    <authorization>\\n    <allow users=\"*\" />\\n    </authorization>\\n</system.web>\\n</location>\\n<location path=\"Scripts\">\\n<system.web>\\n    <authorization>\\n    <allow users=\"*\" />\\n    </authorization>\\n</system.web>\\n</location>\\n\\n<configuration>\\n<appSettings>\\n    <!-- For test, use authority=\"https://login.windows-ppe.net/\" -->\\n    <!-- For PROD, use authority=\"https://login.windows.net/\" -->\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.Authority\"\\n        value=\"https://login.windows-ppe.net/\" />\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.TenantId\"\\n        value=\"common\" />\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.AllowedAudiences\"\\n        value=\"['https://management.core.windows.net/']\" />\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.MinValidationCertUpdateInterval\"\\n        value=\"PT05M\" />\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.MaxValidationCertUpdateInterval\"\\n        value=\"PT24H\" />\\n    <add key=\"Microsoft.Portal.Security.AzureActiveDirectory.AadAuthenticationConfiguration.ForwardDecryptedAuthorizationTokens\"\\n        value=\"false\" />\\n</appSettings>\\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Assigning ParameterProvider's EditScope to a Form in TypeScript\nDESCRIPTION: Demonstrates assigning the `EditScope` instance managed by a `ParameterProvider` to the `editScope` property of the current context (likely a form ViewModel). This links the form's editing capabilities directly to the `EditScope` provided and managed by the `ParameterProvider`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// The parameter provider takes care of instantiating and initializing an edit scope for you,\n// so all we need to do is point our form's edit scope to the parameter provider's edit scope.\nthis.editScope = this.parameterProvider.editScope;\n```\n\n----------------------------------------\n\nTITLE: Opening a Menu Blade for a Specific Resource in TypeScript\nDESCRIPTION: This snippet demonstrates how to open a menu blade for a specific resource, selecting the 'control' menu item using the BladeReferences API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resourceId = \"/subscriptions/sub123/resourcegroups/servertest/providers/Microsoft.test/virtualservers/web1\";\nvoid this._container.openBlade(BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"control\").createReference({ parameters: { id: resourceId } }));\n```\n\n----------------------------------------\n\nTITLE: Importing LocationDropDown Component\nDESCRIPTION: Import statement for the LocationDropDown control from the Azure Portal framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport * as LocationDropDown from \"Fx/Controls/LocationDropDown\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Load More Grid with Continuation Token in TypeScript\nDESCRIPTION: Demonstrates setting up a QueryCache with navigation element for implementing a 'load more' pattern with continuation tokens. This includes cache configuration, server response processing, and metadata handling for virtualized data loading.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nthis.productsCache = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.Product, ProductQueryParams>({\n    entityTypeName: SamplesExtension.DataModels.ProductType,\n    sourceUri: MsPortalFx.Data.uriFormatter(ProductData.QueryString),\n    navigation: {\n        loadByContinuationToken: (\n            suppliedQueryView: MsPortalFx.Data.QueryView<SamplesExtension.DataModels.Product, ProductQueryParams>,\n            query: ProductQueryParams,\n            reset: boolean,\n            filter: string): Promise<any> => {\n\n            var token = reset ? \"\" :\n                (suppliedQueryView.metadata() ?\n                suppliedQueryView.metadata().continuationToken :\n                \"\");\n\n            return suppliedQueryView.fetch({ token: token, categoryId: query.categoryId });\n        }\n    },\n    processServerResponse: (response: any) => {\n        return <MsPortalFx.Data.DataCacheProcessedResponse>{\n            data: response.products,\n            navigationMetadata: {\n                totalItemCount: response.totalCount,\n                continuationToken: response.continuationToken\n            }\n        };\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Blade Performance in Azure Portal\nDESCRIPTION: Query to measure blade performance metrics targeting the Partner table in Azportal cluster. Used to verify if blades meet the required reveal time of <4 seconds for 80th percentile and <8 seconds for 95th percentile.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-production-ready-metrics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nBladePerformanceIncludingNetwork(ago(1d), now())\\n| where Extension == \"Microsoft_Azure_Compute\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactModel with Store Subscription and Async Operations\nDESCRIPTION: This snippet shows a ReactModel implementation that subscribes to store changes and triggers asynchronous operations based on state changes. It demonstrates handling of conditional async flows and state updates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Redux from \"redux\";\n\ninterface StoreState {\n  text: string;\n  fetchServiceText: boolean;\n}\n\nexport = class ExampleModel extends MsPortalFx.Models.React<StoreState, Redux.AnyAction> {\n  private _isFetching = false;\n\n  constructor(options: MsPortalFx.Models.Options<StoreState, Redux.AnyAction>) {\n    super(options);\n\n    options.asyncStore.then((store) => {\n      store.subscribe(() => {\n        const shouldFetchText = store.getState().fetchServiceText;\n        if (shouldFetchText && !this._isFetching) {\n          this._isFetching = true;\n          const setTextAction = {\n            type: \"SetText\",\n            text: \"This is from our timeout, simulating a service response\",\n          };\n          const setFetchServiceTextAction = {\n            type: \"SetFetchServiceText\",\n            fetchServiceText: false,\n          }\n\n          // Simulating an asynchronous result\n          setTimeout(() => {\n            store.dispatch(setTextAction);\n            store.dispatch(setFetchServiceTextAction);\n            this._isFetching = false;\n          }, 1000);\n        }\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyVault Picker ParameterCollector in TypeScript\nDESCRIPTION: Provides an example TypeScript constructor for initializing the KeyVault picker using `MsPortalFx.ViewModels.ParameterCollector`. It demonstrates how to supply initial data (e.g., a pre-selected vault ID), define a callback function (`receiveResult`) to handle the selected vault data when the blade closes, and provide configuration (`supplyProviderConfig`) like subscription, resource group, and location dynamically.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.vaultPickerCollector = new MsPortalFx.ViewModels.ParameterCollector<VaultPickerInputsOutputs>(_container, {\n          supplyInitialData: () => {\n              return <VaultPickerInputsOutputs> {\n                  // this is where you would pass in pre selected vault, if desired\n\t\t\t\t     id: ko.observable(\"\")\n              };\n          },\n          receiveResult: (result: VaultPickerInputsOutputs) => {\n              // this is what will happen when the user finishes selecting a vault and the blade closes.\n              this._vault(result);\n          },\n          supplyProviderConfig: () => {\n              return <VaultPickerConfig> {\n                  subscriptionId: this._subscriptionSelector.value ? this._subscriptionSelector.value().subscriptionID : null,\n                  resourceGroup: this._resourceGroupSelector.value ? this._resourceGroupSelector.value.name() : null,\n                  location: this._locationSelector.value ? this._locationSelector.value().name : null\n              };\n          }\n      });\n```\n\n----------------------------------------\n\nTITLE: Initializing Blade Reference Picker with Value Subscriptions in TypeScript\nDESCRIPTION: Sets up a picker for blade references with value change monitoring. Updates dynamic blade reference based on selected value, handling null, valid blade, and valid child blade options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _initializeBladeLinkSample(container: BladeContainer) {\n    this.bladeRefPicker.value.subscribe(container, (value) => {\n        if (Resources.nullBladeRefLabel === value) {\n            this.dynamicBladeRef(null);\n        } else if (Resources.validBlade === value) {\n            this.dynamicBladeRef(BladeReferences.forBlade(\"OpenBladeApiSamples\").createReference());\n        } else if (Resources.validChildBlade === value) {\n            this.dynamicBladeRef(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Monitoring View Type Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of a monitoring view type object using a markdown table. It specifies required fields like title and charts, and optional fields like fx.feature. The 'charts' property refers to additional documentation for more details.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-monitoringViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the Monitoring view\n|charts|True|Defines the array of Monitoring charts. See [here](dx-getstarted-MonitoringTab-charts.md) for more on charts.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Sample Output for GraphApiControl Query\nDESCRIPTION: This snippet shows a sample output from the GraphApiControl query. It includes the OData context, next link, and an array of application objects with their display names and app IDs. This represents the raw data returned from the Graph API before any transformations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@odata.context\": \"https://graph.microsoft.com/beta/$metadata#applications(displayName,appId)\",\n    \"@odata.nextLink\": \"https://graph.microsoft.com/beta/myorganization/applications?filter=startsWith(displayName%2c+%27a%27)&select=displayName%2cappId&$skiptoken=RFNwdAoAAQAAAAAAAAAAFAAAAAKm5DQv4BdLqamgIFkbbkIBAAAAAAAAAAAAAAAAAAAXMS4yLjg0MC4xMTM1NTYuMS40LjIzMzEGAAAAAAABTw8AYx5Ec0iWsOnZnC1p5QEaAAAAAQQAAAA\",\n    \"value\": [\n        {\n            \"displayName\": \"astf4\",\n            \"appId\": \"518f9-3682-434d-a7a8-f5931f945f\"\n        },\n        {\n            \"displayName\": \"Add an application my organization is developing\",\n            \"appId\": \"3a44535342-8288-4535-94342-5cf34535\"\n        },\n        {\n            \"displayName\": \"adelete1\",\n            \"appId\": \"563a-9785-466d-8273-f073254c\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Format for BladeInvokeControl Before Selection\nDESCRIPTION: Example of the default value structure for the BladeInvokeControl before a user makes a selection. This shows the basic disk size parameter that will be used initially.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.BladeInvokeControl.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"diskSizeGB\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Picker Configuration Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `KeyPickerConfig` for configuring the Key picker blade. Options include specifying the `vaultId` to fetch keys from (unless provided in `KeyPickerInputsOutputs`), controlling the visibility of the 'Create New' key option (`showCreateNew`), and specifying `requiredKeyOperations` to filter selectable keys based on their allowed operations (e.g., 'sign', 'encrypt'). Keys not meeting requirements are shown as read-only.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeyPickerConfig {\n    vaultId: string; // the resource id of the vault to display keys from (Optional if the id of the vault was supplied in the KeyPickerInputsOutputs)\n    showCreateNew?: boolean; // Whether the picker will give the option to create a new key.\n    requiredKeyOperations?: string[]; // Required key operations for selected keys. Supported key_ops are \"sign\", \"verify\", \"wrapKey\", \"unwrapKey\", \"encrypt\" & \"decrypt\". When a key doesn't have all required key_ops, it is readonly and cannot be selected.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Atomization Context in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to set a custom atomization context for a QueryCache.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_53\n\nLANGUAGE: ts\nCODE:\n```\nvar cache = new MsPortalFx.Data.QueryCache<ModelType, QueryType>({\n    ...\n    atomizationOptions: {\n        atomizationContextId: \"string-id\"\n    }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form View for Top-Level Resource Creation in Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to configure a Form view for creating a top-level resource in Azure Portal. It includes steps for basic information, tags, and deployment configuration using a ResourceGroup scope.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"properties\": {\n      \"title\": \"Create Dx Ibiza Engine resource\",\n      \"steps\": [\n        {\n          \"name\": \"step1\",\n          \"label\": \"Basics\",\n          \"description\": \"Add a description of your service here to quickly introduce your service to customers. Also add a Learn More link that links to documentation or Azure's marketing site for your resource type. [Learn more](https://azure.microsoft.com/)\",\n          \"elements\": [\n            {\n              \"type\": \"Microsoft.Common.ResourceScope\",\n              \"name\": \"resourceScope\",\n              \"resourceName\": {\n                \"label\": \"Engine name\",\n                \"constraints\": {\n                  \"validations\": [\n                    {\n                      \"regex\": \"^[A-Za-z0-9]{0,6}$\",\n                      \"message\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n                    }\n                  ]\n                },\n                \"toolTip\": \"Name should contain alphanumeric characters only, up to 6 symbols\"\n              }\n            }\n          ]\n        },\n        {\n          \"name\": \"tags\",\n          \"label\": \"Tags\",\n          \"elements\": [\n            {\n              \"name\": \"tagsByResource\",\n              \"type\": \"Microsoft.Common.TagsByResource\",\n              \"resources\": [\n                \"Providers.Test/statefulIbizaEngines\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"deployment\": {\n        \"kind\": \"ResourceGroup\",\n        \"resourceGroupId\": \"[steps('step1').resourceScope.resourceGroup.id]\",\n        \"parameters\": {\n          \"name\": \"[steps('step1').resourceScope.resourceName]\",\n          \"location\": \"centralus\"\n        },\n        \"template\":\n        {\n          \"file\": \"../../UiDef/DxExtensionResource/DeploymentTemplate.json\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized EntityCache Implementation with invokeApi\nDESCRIPTION: Improved implementation using invokeApi optimization to reduce CORS preflight requests. Demonstrates how to configure EntityCache to use a single endpoint for multiple resource requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npublic resourceEntities = new MsPortalFx.Data.EntityCache<DataModels.RootResource, string>({\n    entityTypeName: ExtensionTemplate.DataModels.RootResourceType,\n    sourceUri: MsPortalFx.Data.uriFormatter(endpoint + \"{id}?\" + this._armVersion, false),\n    supplyData: (httpMethod: string, uri: string, headers?: StringMap<any>, data?: any, params?: any) => {\n        return MsPortalFx.Base.Net.ajax({\n            uri: uri,\n            type: httpMethod || \"GET\",\n            dataType: \"json\",\n            traditional: true,\n            headers: headers,\n            contentType: \"application/json\",\n            setAuthorizationHeader: true,\n            invokeApi: \"api/invoke\",\n            data: data\n        })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Create Flow Funnel Success Rate in Kusto\nDESCRIPTION: This Kusto query calculates the success rate of create flow deployments over the last 30 days, grouped by date, extension name, and create blade name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\nlet timeSpan = 30d;\nlet startDate = GetStartDateForLastNDays(timeSpan);\nlet endDate = GetEndDateForTimeSpanQueries();\nGetCreateFunnelByDay(startDate, endDate)\n| extend DeploymentSucceededPerc = iff(DeploymentStarted == 0, 0.0, todouble(DeploymentSucceeded)/DeploymentStarted)\n| project Date, ExtensionName, CreateBladeName, DeploymentSucceededPerc\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Type Icon Metadata in Manifest - TypeScript\nDESCRIPTION: This snippet illustrates adding a custom icon at the individual resourceType level within an RP manifest. By embedding a 'metadata.portal.icon' property inside each resourceType object, different resource types can have their own specific icons, specified as SVG XML strings or HTTPS URLs. Required parameters are the RP namespace, the resourceType name, and the respective icon value. Limitations include manifest size constraints if using inline SVG; URLs are preferable for larger manifests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    \"namespace\": \"rp.namespace\",\n    \"metadata\": {\n        \"portal\": {\n            \"icon\": \"<svg>...</svg>\"\n        }\n    },\n    ...\n    \"resourceTypes\": [\n        {\n            \"resourceType\": \"instances\",\n            \"metadata\": {\n                \"portal\": {\n                    \"icon\": \"https://...\"\n                }\n            },\n            ...\n        },\n        ...\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.Selector Component\nDESCRIPTION: Example showing basic implementation of a Selector component for virtual machine disk size selection. Includes value mapping, key paths, and visibility conditions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Selector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Selector\",\n    \"name\": \"vmDisk\",\n    \"label\": \"Virtual Machine disk size\",\n    \"valueMapping\": [\n        {\n        \"value\": \"4\",\n        \"displayName\": \"4 GiB\"\n        },\n        {\n        \"value\": \"8\",\n        \"displayName\": \"8 GiB\"\n        },\n        {\n        \"value\": \"512\",\n        \"displayName\": \"512 GiB\"\n        }\n    ],\n    \"keyPath\": \"diskSizeGB\",\n    \"descriptionKeyPath\": \"subText\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 4,\n        \"subText\": 250\n    },\n    \"value\": \"[steps('step1').diskSize.transformed.sku]\",\n    \"visible\": \"[contains(resources().name, 'e')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure Resource Essentials Panel in PDL - XML\nDESCRIPTION: This snippet demonstrates how to declare an Essentials panel within a resource blade using PDL (Portal Definition Language) XML. It utilizes the <ResourceSummary> element, specifying the related ViewModel and adjusted input parameters such as ResourceIdSource and ItemCount. This configuration requires the corresponding ViewModel file and assumes Azure Resource Manager integration. Key parameters are the panel name, reference to the view model, and the maximum number of displayed properties. The snippet is limited to static metadata wiring, and does not include logic for dynamic or reactive property values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\\\"EngineBlade\\\">\\n    <Blade.Parameters>\\n        <Parameter Name=\\\"id\\\" Type=\\\"Key\\\" />\\n    </Blade.Parameters>\\n    <ResourceSummary Name=\\\"EngineBladeResourceSummary\\\"\\n                     ViewModel=\\\"EngineResourceSummaryViewModel\\\"\\n                     ResourceIdSource=\\\"{BladeParameter Name=id}\\\"\\n                     ItemCount=\\\"4\\\" />\\n    ...\\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Adding CDN Extension NuGet Package Reference in XML Configuration\nDESCRIPTION: This XML snippet shows how to add the `Microsoft.Portal.Extensions.Cdn` NuGet package reference to a `corext.config` or `packages.config` file in a CoreXT-based environment. This package is required to use the CDN integration blade within an Azure portal extension. The version number should be updated to the latest available.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-cdn.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package id=\"Microsoft.Portal.Extensions.Cdn\" version=\"1.0.13.177\" />\n```\n\n----------------------------------------\n\nTITLE: Analyzing Error Distribution by Extension in Azure Portal Create Flow\nDESCRIPTION: This query analyzes the distribution of errors in the Azure Portal create flow for the previous week, grouped by extension. It filters for failed provisioning events and excludes certain error scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nlet today = floor(now(),1d);\nlet sat = today - dayofweek(today) - 8d;\nlet fri =  sat + 6d;\nClientTelemetry\n| where PreciseTimeStamp >= sat and PreciseTimeStamp < fri + 1d\n| where Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\"\n| extend provisioningStatus = extractjson(\"$.provisioningStatus\", Data, typeof(string)),\n  isCustomProvisioning = extractjson(\"$.isCustomProvisioning\", Data, typeof(string)),\n  oldCreateApi = extractjson(\"$.oldCreateApi\", Data, typeof(string)),\n  launchingContext = extract('\"launchingContext\"\\\\s?:\\\\s?{([^}]+)', 1, Data)\n| where isnotempty(launchingContext) and isempty(extract(\"^(\\\"telemetryId\\\":\\\"[^\\\"]*\\\")$\", 1, launchingContext)) and oldCreateApi != \"true\" and isCustomProvisioning != \"true\" and provisioningStatus != \"DeploymentCanceled\"\n| where Data !contains \"We could not find a credit card on file for your azure subscription.\"\n| summarize [\"Error Count\"] = count() by Extension\n| order by [\"Error Count\"] desc\n```\n\n----------------------------------------\n\nTITLE: Configuring Child Resource Creation Form in JSON\nDESCRIPTION: This snippet illustrates a Form configuration for creating a child resource. It includes parameters and resources properties, demonstrating how to reference parent resource properties using the resources() function. The example shows deployment parameter setup for a child resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"key\"\n            }\n        ],\n        \"resources\": [\n            {\n                \"id\": \"[parameters('id')]\",\n                \"apiVersion\": \"2020-03-01-preview\"\n            }\n        ],\n        \"steps\": [\n        ],\n        \"deployment\": {\n            \"kind\": \"ResourceGroup\",\n            \"resourceGroupId\": \"[resources().resourceGroupId]\",        \n            \"parameters\": {\n                \"name\": \"[steps('step1').textbox]\",\n                \"location\": \"[resources().location]\",\n                \"omsLogAnalyticsWorkspaceName\": \"[resources().name]\"\n            },\n            \"template\": {\n                \"file\": \"./SavedSearchDeploymentTemplate.json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Accessing Globalization Properties in TypeScript\nDESCRIPTION: This snippet shows the basic import statement for the Azure Portal Globalization module and how to access core properties like the current display language (`displayLanguage`) and format culture (`formatCulture`). It depends on the `MsPortalFx/Globalization` module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar displayLanguage = Globalization.displayLanguage;\nvar formatCulture = Globalization.formatCulture;\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Knockout.js Pure Computed with Potential Hidden Dependencies in TypeScript\nDESCRIPTION: This snippet demonstrates defining a `ko.pureComputed`. It calls an external method `_processfoo`, which might read other observables. This pattern can make it difficult to determine all the observables that will trigger a recalculation of the computed, potentially leading to performance issues if `_processfoo` introduces unintended dependencies.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nlet computed = ko.pureComputed(() => {\n    let foo = this.foo();\n    this._processfoo(foo);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MonitoringViewType as Full Screen Blade in JSON\nDESCRIPTION: This snippet shows how to configure the MonitoringViewType view as a full-screen blade opened from a resource menu. It defines the view kind, parameters, resources, and properties including charts and metrics.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Monitoring\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Monitoring Example\",\n      \"charts\": [\n       {\n         \"title\": \"CPU (average)\",\n         \"metrics\": [\n           {\n             \"id\": \"Percentage CPU\",\n             \"aggregationType\": \"Avg\",\n             \"resourceMetadata\": {\n               \"id\": \"[parameters('id')]\"\n             }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Completing Pending Notifications in TypeScript (v3)\nDESCRIPTION: Example of updating a pending notification's progress and completing it with a final status using update() and complete() methods in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishPendingNotification } from \"Fx/Notification\";\n// correlationIds have been replaced with a single id property, which is returned in the notification object from the \"publishNotification\" and \"publishPendingNotification\" calls.\nnotification.update({\n    percentComplete: 52,\n});\nnotification.update({\n    percentComplete: 78,\n});\nnotification.complete({\n    status: CompletedStatus.Warning,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Management Group Scope Deployment Properties in Markdown\nDESCRIPTION: This snippet defines the properties required for a management group scope deployment in Azure. It specifies mandatory fields like kind, managementGroupId, location, parameters, and template, as well as optional fields like postCreate and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-managementGroupScopeDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"ManagementGroup\"\n|managementGroupId|True|Specify managementGroupId for deployment\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Blade TypeScript Class\nDESCRIPTION: TypeScript class definition for registering a Frame Blade with the extension using the @FrameBlade decorator. Includes initialization logic and message handling between the blade and iframe.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* View model for a FrameBlade.\n*/\n@FrameBlade.Decorator({\n   reflowReady: true,\n})\nexport class SampleFrameBlade {\n   public title = ClientResources.sampleFrameBladeTitle;\n   public subtitle: string;  // This FrameBlade doesn't make use of a subtitle.\n   public context: FrameBlade.Context<void>;\n\n   constructor(\n       private readonly _container: FrameBlade.Container\n   ) {\n   }\n\n   /*\n    * View model for the frame blade.\n    */\n   public viewModel: FrameBlade.ViewModelV2Contract;\n\n   public async onInitialize() {\n       const viewModel = this.viewModel = FrameBlade.createViewModel(this._container, {\n           src: MsPortalFx.Base.Resources.getContentUri(\"/Content/SamplesExtension/framebladepage.html\"),\n           onReceiveMessage: (message: FramePage.Message) => {\n               switch (message.messageType) {\n                   // This is an example of how to listen for messages from your iframe.\n                   case FramePage.MessageType.OpenBlade:\n                       // In this sample, opening a sample child blade.\n                       this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n                       break;\n                   default:\n                       break;\n               }\n           },\n       });\n\n       // This is an example of how to post a message back to your iframe.\n       // Send initialization information to iframe.\n       MsPortalFx.Base.Security.getAuthorizationToken().then((token) => {\n           // Post initialization info from FrameControl to your iframe.\n           viewModel.postMessage({ messageType: FramePage.MessageType.InitInfo, value: { authToken: token.header, resourceId: \"testResourceId\" } });\n       });\n```\n\n----------------------------------------\n\nTITLE: Specifying a Create Blade in Gallery Package Definition - JSON\nDESCRIPTION: This snippet shows an example UIDefinition.json file for an Azure Portal gallery package, defining the mapping from a declarative form to a create blade. The $schema property links to the required schema version, and the createDefinition section specifies the blade's name (derived from the form file) and its associated extension. Required for ensuring the gallery package launches the correct create blade for the extension; make sure the referenced form and extension names match your deployment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cuid.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://gallery.azure.com/schemas/2018-02-12/UIDefinition.json#\",\n  \"createDefinition\": {\n      \"createBlade\": {\n          \"name\": \"CreateForm_Dx\",\n          \"extension\": \"ExtensionTemplate\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spec Picker Extender Logic (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the implementation details within the `RobotSpecPickerV3Extender` constructor. It sets the `selectionMode`, fetches initial spec data using `dataContext.robotData.specDataEntity`, handles the fetch response or errors, defines a computed observable `filteredSpecIds` to filter specs based on blade inputs and available spec data, and uses `ko.reactor` to update the `output` observable whenever inputs or fetched spec data change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The spec picker can return one or many specs. Specify if you want the user to be able to select multiple specs.\nthis.selectionMode = selectionMode || SpecPicker.SelectionMode.Single;\n\n// Perform the initial fetch to load data into the view from your own controllers\n//config#specPickerData\nthis._specDataView = dataContext.robotData.specDataEntity.createView(container);\nthis._specDataView.fetch({}).then(\n    () => {\n        const specData = ko.toJS(this._specDataView.item());\n        // Pass the spec data into an observable\n        this._specData(specData);\n    },\n    () => {\n        // Implement custom error handling logic\n        throw new Error(\"Fetch spec data failed.\");\n    }\n);\n//config#specPickerData\n\n// a computed which returns an array of spec ids which will determine what specs will be shown\nconst filteredSpecIds = ko.computed(container, () => {\n    const input = this.input();\n    if (!input) {\n        return [];\n    }\n    // Options is a property passed in as part of the blade inputs. Defaults to any type\n    const options = input.options;\n    const filterFeatures: string[] = options && options.filterFeatures || [];\n\n    // React to the input availableSpecData observable. This observable is updated\n    // when billing information returns from the server and contains specs which have not\n    // been filtered out by the billing calls.\n    return input.availableSpecData().filter((spec) => {\n        // This will filter out any spec which contains the feature in input.options.filterFeatures\n        return !MsPortalFx.find(spec.features, (feature) => (feature.displayValue !== null && feature.displayValue !== undefined) && !!~filterFeatures.indexOf(feature.displayValue.toString()));\n    }).map((spec) => spec.id);\n});\nko.reactor(container, () => {\n    // react to inputs and specData observables being updated\n    const input = this.input(),\n        specData = this._specData();\n\n    if (!input || !specData) {\n        return;\n    }\n\n    const output: SpecPicker.SpecPickerExtenderOutput = {\n        specData: specData,\n        //disabledSpecs: [],\n        //failureMessage: \"\",\n        //recentSpecIds: [],\n        filteredSpecIds: filteredSpecIds,\n    };\n    // Update the output observable to give all the spec data back to the spec picker blade\n    this.output(output);\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Browse Flyout and Selecting Resource Groups in C#\nDESCRIPTION: This snippet demonstrates how to open the browse flyout, select the Resource groups item, and verify that the browse blade has opened successfully.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-openbrowse.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nportal.SideBar.OpenBrowse();\nvar browseFlyout = portal.SideBar.BrowseFlyout;\n\nwebDriver.WaitUntil(\n    () => browseFlyout.Displayed,\n    \"Expected the browse flyout to be displayed\");\nbrowseFlyout.GetItem(\"Resource groups\").Click();\nvar rgBrowseBlade = portal.FindSingleBladeByTitle(\"Resource groups\");\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sample Resource Map Structure (TypeScript/JSON)\nDESCRIPTION: This snippet demonstrates the structure of the Resource Map data, used to link spec selections to billing resources. It shows a `default` map containing a list of spec objects. Each object has an `id` (matching the spec ID), a `firstParty` array mapping the spec to internal Azure resource IDs and quantities, and optionally a `thirdParty` array for marketplace items, detailing publisher, offer, plan, and meter information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"default\": [ // List of spec cards\n    {\n        \"id\": \"Standard_D15_v2\", // Roundtrip spec card ID of your choice to track request/response\n        \"firstParty\": [ // list of first party\n            {\n                \"id\": \"STANDARD_D15_V2\",\n                \"resourceId\": \"4naypwzhqsu7yaeruxj3fpqa5ah5p9ax4nayrti71j3x5pdwtc7y4imyqeyy6a\", // resource target key for this spec (you can use GUID now) work with PM if you don’t know this\n                \"quantity\": 744, // quantity based on the unit of measure in the Catalog\n            },\n        ],\n        \"thirdParty\": [ // list of third party resources, this is used for Marketplace, usually not used for Microsoft resource\n            {\n                \"id\": \"samplecloudconnect:sample:samplebackup\",\n                \"publisherId\": \"sample\",\n                \"offerId\": \"samplecloudconnect\",\n                \"planId\": \"samplebackup\",\n                \"promotionCode\": \"\",\n                \"meters\": [\n                    {\n                        \"meterId\": \"20core\",\n                        \"quantity\": 744,\n                    },\n                ],\n            },\n        ],\n    },\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with Log.Error API in TypeScript\nDESCRIPTION: Example of using the Log.Error API to log client-side errors in Azure Portal extensions. This API allows logging of error objects or strings with optional error codes and additional arguments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Log error information.\n *\n * @param entry <Error | string> The message to log.\n * @param code <number> The message code.\n * @param restArgs <any[]> Extra information to log with the message.\n*/\nerror(entry: LogMessage, code?: number, ...restArgs: any[]): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvar log = new MsPortalFx.Base.Diagnostics.Log(\"fileName_or_codeArea\");\nlog.error(errorOrString, code, restArgs);\n```\n\n----------------------------------------\n\nTITLE: Defining Default ResourceScope Control - Azure Portal - JSON\nDESCRIPTION: This snippet demonstrates a minimal configuration for declaring the ResourceScope control in an Azure portal template. It specifies the basic 'name' and Azure-specific 'type', serving as a starting point for resource scoping in portal forms. No dependencies or validations are included, making it suitable for scenarios where default scoping behavior is sufficient.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceScope.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"resourceScope\\\",\\n  \\\"type\\\": \\\"Microsoft.Common.ResourceScope\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Application Context for CDN\nDESCRIPTION: C# class that inherits from ApplicationContext to handle CDN configuration settings and development mode flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cdn.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(typeof(ApplicationContext))]\ninternal class CustomApplicationContext : ApplicationContext\n{\n    private ApplicationConfiguration configuration;\n\n    [ImportingConstructor]\n    public CustomApplicationContext(ApplicationConfiguration configuration)\n    {\n        this.configuration = configuration;\n    }\n\n    public override bool IsDevelopmentMode\n    {\n        get\n        {\n            return this.configuration.IsDevelopmentMode;\n        }\n    }\n\n    public override string CdnPrefix\n    {\n        get\n        {\n            return this.configuration.CdnPrefix;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryCache View in TypeScript\nDESCRIPTION: Demonstrates creating a view (`_websitesQueryView`) on a `QueryCache` instance (`dataContext.websitesQuery`) within a TypeScript view model (`MasterViewModels.ts`). This view is the primary mechanism for interacting with the QueryCache, allowing data fetching via its `fetch()` method and observation of results through its `items` property. Requires a `dataContext` object with a `websitesQuery` property (representing the `QueryCache`) and a `container` (likely a lifetime manager).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websitesQueryView = dataContext.websitesQuery.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Using mapInto for Grid Data Projection in TypeScript\nDESCRIPTION: Demonstrates using mapInto to project data for a grid view, creating computed properties from robot data. Shows proper observable handling and grid initialization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nthis._view = dataContext.robotData.robotsQuery.createView(container);\n\n// As items are added or removed from the underlying items array,\n// individual changed items will be re-evaluated to create the computed\n// value in the resulting observable array.\nconst projectedItems = this._view.items.mapInto<RobotDetails>(container, (_ /* itemLifetime */, robot) => {\n    return <RobotDetails>{\n        name: robot.name,\n        computedName: ko.pureComputed(() => {\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n\nthis.grid = new Grid.ViewModel<RobotDetails, string>(\n    container,\n    projectedItems,\n    Grid.Extensions.SelectableRow);\n```\n\n----------------------------------------\n\nTITLE: Fetching Supplemental Data for Printer Resources in TypeScript\nDESCRIPTION: This method retrieves supplemental data for an array of resource IDs. It processes printer data, adding model, status, and technology properties to the supplemental data object. It includes a warning about test code that should not be in production.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic getSupplementalData(resourceIds: string[], columns: string[], refresh?: boolean): Promise<any> {\n    return processSupplementalData(resourceIds, columns, this._updateMap, this.supplementalDataStream, this._dataContext.printerData, (printer) => {\n        // ***\n        // THIS IS FOR TESTING ONLY, DO NOT INCLUDE THIS IN PRODUCTION CODE.\n        TestHelpersForSamplesExtensionOnly.attachPrinterValueRotator(this._dataContext, printer);\n        // ***\n\n        const supplementalData: FxAssets.SupplementalData = {\n            resourceId: printer.id(),\n        };\n        if (columns.indexOf(BrowseColumns.model) !== -1) {\n            // Add the model property.\n            supplementalData[BrowseColumns.ModelProperties.model] = printer.model;\n        }\n        if (columns.indexOf(BrowseColumns.status) !== -1) {\n            // Add the status property - observable for live value.\n            supplementalData[BrowseColumns.StatusProperties.status] = ko.pureComputed(() => ((printer.status && printer.status()) || \"\").toLowerCase());\n        }\n        if (columns.indexOf(BrowseColumns.technology) !== -1) {\n            // Add the technology property.\n            supplementalData[BrowseColumns.TechnologyProperties.technology] = printer.technologyString;\n        }\n        return supplementalData;\n    }, refresh);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Command Types Enum in TypeScript\nDESCRIPTION: Enumeration defining the allowed types of selection commands in the Azure Portal. Includes commands for opening blades, ARM operations, menu interactions, and deletion operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-selectionCommandKinds-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum SelectionCommandKinds {\n    OpenBladeSelectionCommand,\n    ArmSelectionCommand,\n    MenuSelectionCommand,\n    DeleteSelectionCommand\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Scope Control Properties Definition - Markdown\nDESCRIPTION: Defines the configuration properties available for the resourceScopeControl-resourceScopeResourceGroup component, including constraints and resource group creation options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceScopeControl-resourceScopeResourceGroup.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|constraints|False|\n|allowExisting|False|Specifies whether using an existing resource group would be allowed. If set to false, a new resource group would need to be created.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Creating a DataView from EntityCache in TypeScript\nDESCRIPTION: This snippet shows how to create a DataView from a previously configured EntityCache. The DataView is created within a Blade or Part view model constructor and is associated with a container to manage its lifecycle.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-overview.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websiteEntityView = dataContext.websiteEntities.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Microsoft.ManagedIdentity.IdentitySelector\nDESCRIPTION: This snippet shows a sample output generated by the Microsoft.ManagedIdentity.IdentitySelector control. It demonstrates the structure of the output when a user-assigned identity is selected, including the identity type and the resource ID of the selected identity.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.ManagedIdentity.IdentitySelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"UserAssigned\",\n    \"userAssignedIdentities\": {\n        \"/subscriptions/xxxx/resourceGroups/ManagedIdentityTest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/TestUserIdentity1\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Filters in Azure Portal DataViews\nDESCRIPTION: Example showing how to fetch data from a DataView with filters applied. This allows different views to be created over a single cache, each presenting a potentially different data set.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: inputs.filterRunningStatus.value });\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in Knockout Blades\nDESCRIPTION: Examples of logging errors in Knockout-based blades using the FxError class and Log.error method. These snippets show how to log basic errors, caught errors, and errors with additional context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FxError } from \"Fx/Errors\";\nconst Log = new MsPortalFx.Base.Diagnostics.Log(\"fileName_or_codeArea\");\nLog.error(new FxError(`Something bad happened`));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FxError } from \"Fx/Errors\";\nconst Log = new MsPortalFx.Base.Diagnostics.Log(\"fileName_or_codeArea\");\ntry {\n    doSomething();\n} catch (err) {\n    Log.error(new FxError({\n        message: \"doSomething did something bad\",\n        innerErrors: [err]\n    }));\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FxError } from \"Fx/Errors\";\nconst Log = new MsPortalFx.Base.Diagnostics.Log(\"fileName_or_codeArea\");\ntry {\n    doSomething();\n} catch (err) {\n    Log.error(\n        \"Error message\", // extension provided error message\n        505, // extension provided error code\n        new FxError({\n            innerErrors: [err]\n        })\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping DataCache Contents in TypeScript\nDESCRIPTION: Demonstrates how to use the dump() method to inspect the contents of a DataCache object. The method can print data to the console or return it as objects for further analysis.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nqueryCache.dump(true)[0].name()\n```\n\n----------------------------------------\n\nTITLE: Publishing a Client Notification Linked to an Asset – Typescript\nDESCRIPTION: This TypeScript snippet shows how to publish a portal notification that is linked to a specific asset using MsPortalFx's notification and asset APIs. The notification includes asset metadata, which ensures it is associated with the intended resource in the portal's UI. Prerequisites include the MsPortalFx.Hubs.Notifications and resx resource objects, as well as appropriate asset extension definitions. The input parameters include notification title, description, status, and asset object, with the notification appearing in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Hubs.Notifications.ClientNotification.publish({\\n    title: resx.myEvent.title,\\n    description: resx.myEvent.description,\\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Information,\\n    asset: {\\n        extensionName: ExtensionDefinition.definitionName,\\n        assetType: ExtensionDefinition.AssetTypes.MyAsset.name,\\n        assetId: assetId\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IcM Connectors in Alerting Customization JSON for Azure Portal Extension\nDESCRIPTION: This JSON snippet demonstrates how to configure IcM connectors for different cloud environments in the alerting customization JSON for an Azure Portal extension. It specifies the extension name, enables alerting, and defines connectors for multiple cloud instances.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"extensionName\":\"Your_Extension_Name\",\n   \"enabled\":true,\n   \"icmConnectors\":[\n      {\n         \"connectorId\":\"12345678-abcd-abcd-abcd-123456789012\",\n         \"cloud\":\"Public\"\n      },\n      {\n         \"connectorId\":\"87654321-dcba-dcba-dcba-210987654321\",\n         \"cloud\":\"Mooncake\"\n      },\n      ...\n   ],\n   \"environments\":[\n      ...\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data on OptionGroup Value Change in TypeScript\nDESCRIPTION: Subscribes to changes in the `value` property of an `OptionGroup` control (`runningStatus`) using its observable `value` property. When the selected option changes (newValue), it sets the associated grid (`this.grid`) to a loading state, initiates a new data fetch on the `_websitesQueryView` with the updated `runningStatus` parameter, and finally removes the grid's loading state once the fetch completes using `.finally()`. This allows dynamic filtering of the grid data based on user selection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.runningStatus.value.subscribe(this._lifetime, (newValue) => {\n    this.grid.loading(true);\n    this._websitesQueryView.fetch({ runningStatus: newValue })\n        .finally(() => {\n            this.grid.loading(false);\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Supplemental Parameters for Azure Portal Blades in XML\nDESCRIPTION: Demonstrates the use of supplemental parameters in a blade, which provide additional non-key data required by the part. These parameters may come from different parts on the launching blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Blade>\n  ...\n  <Blade.Parameters>\n\n    <!--\n      Supplemental inputs provide non-key parameters from launching blade. These may\n      come from a different part on the launching blade.\n    -->\n    <Parameter Name=\"checkBoxValue\" Type=\"Supplemental\" />\n\n  </Blade.Parameters>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Compute.UserNameTextBox Control in JSON\nDESCRIPTION: Example configuration for a UserNameTextBox control with Windows platform validation. The control includes custom regex validation to ensure input is 1-30 alphanumeric characters. The implementation demonstrates required properties, constraints, validation message, and visibility settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.UserNameTextBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Enclosing comment\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Compute.UserNameTextBox\",\n    \"label\": \"User name\",\n    \"defaultValue\": \"\",\n    \"toolTip\": \"\",\n    \"constraints\": {\n      \"required\": true,\n      \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n      \"validationMessage\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n    },\n    \"osPlatform\": \"Windows\",\n    \"visible\": true\n  }\n// Enclosing comment\n```\n\n----------------------------------------\n\nTITLE: Output Format of Microsoft.Compute.CredentialsCombo-Windows Control\nDESCRIPTION: This example shows the JSON output format returned by the Microsoft.Compute.CredentialsCombo control when configured for Windows platforms. The output contains the authentication type (fixed as 'password') and the actual password value entered by the user.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Windows.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"password\",\n  \"password\": \"passwordValue\",\n}\n```\n\n----------------------------------------\n\nTITLE: Including Generated TypeScript Files in Extension.csproj\nDESCRIPTION: XML configuration to include generated TypeScript files in the extension project.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <None Include=\"Client\\**\\*.ts\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Reading Feature Flags in C# AJAX Controller Methods\nDESCRIPTION: Demonstrates how to access feature flags in C# controller methods that extend Microsoft.Portal.Framework.ApiControllerBase by using the RequestFlags dictionary.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nif (RequestFlags.TryGetValue(\"microsoft_azure_compute_someflag\", out value) && value == \"true\")\n{\n    // turn on feature here\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CredentialsCombo Control Configuration\nDESCRIPTION: Sample configuration for the CredentialsCombo control showing basic setup with password validation and SSH key options for Linux authentication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Linux.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"element1\",\n  \"type\": \"Microsoft.Compute.CredentialsCombo\",\n  \"label\": {\n    \"authenticationType\": \"Authentication type\",\n    \"password\": \"Password\",\n    \"confirmPassword\": \"Confirm password\",\n    \"sshPublicKey\": \"SSH public key\"\n  },\n  \"toolTip\": {\n    \"authenticationType\": \"\",\n    \"password\": \"\",\n    \"sshPublicKey\": \"\"\n  },\n  \"constraints\": {\n    \"required\": true,\n    \"customPasswordRegex\": \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{12,}$\",\n    \"customValidationMessage\": \"The password must be alphanumeric, contain at least 12 characters, and have at least 1 letter and 1 number.\"\n  },\n  \"options\": {\n    \"hideConfirmation\": false,\n    \"hidePassword\": false\n  },\n  \"osPlatform\": \"Linux\",\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Globalization.DateTimeFormat in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `Globalization` module and use `DateTimeFormat.create().format()` to format a JavaScript Date object according to the user's locale settings (e.g., 'en-GB'). It requires the `MsPortalFx/Globalization` module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// British English uses day-month-year order\n// User locale is 'en-GB'\nconsole.log(Globalization.DateTimeFormat.create().format(date));\n// → \"20/12/2012\"\n\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Search Keywords in Azure Asset Type Definition (JSON)\nDESCRIPTION: This JSON snippet illustrates how to configure an Azure asset type definition to use search keywords defined in a separate resource file. The `stringSource` property specifies the path to the `.resjson` file, and the `keywords` property references the key within that file (in this case, also named \"keywords\") that holds the comma-separated keyword string. This links the keywords to the asset type for global search indexing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalsearch.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n  \"assetType\": {\n    \"name\": \"SampleAssetType\",\n    \"keywords\":\"keywords\",\n    \"displayNames\": {\n      \"singular\": \"singular\",\n      \"plural\": \"plural\",\n      \"lowerSingular\": \"lowerSingular\",\n      \"lowerPlural\": \"lowerPlural\"\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Logos.MicrosoftSquares\",\n    \"browse\": {\n      \"type\": \"ResourceType\",\n      \"query\"\n    },\n    \"resourceType\": {\n      \"name\": \"Providers.Test/statefulIbizaEngines\",\n      \"apiVersion\": \"2014-04-01\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing a Specific Language via URL Query Parameter\nDESCRIPTION: This provides a URL example illustrating how to force the Azure Portal to run in a specific language (e.g., US English 'en-us') by appending the `?l=` query parameter. This is useful for verifying the end-to-end localization process for a particular language.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nhttp://localhost:12000?l=en-us\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Dropdown Values in Azure Portal\nDESCRIPTION: This snippet demonstrates how to group dropdown values using a mapping function that categorizes items into groups based on item properties. It also shows how to customize group sorting order with a comparator function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngrouping: {\n    map: (item: Value): string => {\n        return item.property.slice(-2) === \"bg\" ? \"Group B\" : \"Group A\";\n    },\n    sort: (a: string, b: string) => MsPortalFx.compare(b, a),\n},\n```\n\n----------------------------------------\n\nTITLE: Declaring the Context Property in a TypeScript Blade\nDESCRIPTION: Illustrates the declaration of the mandatory `context` property within a TypeScript Blade class using the 'no-PDL' pattern. The framework populates this property upon blade initialization, providing access to shell APIs for interaction (e.g., closing the blade, opening other blades). The type `TemplateBlade.Context<T>` (here `T` is `void`, indicating no specific parameters are expected via context for this blade) is used to type this interaction.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npublic context: TemplateBlade.Context<void>;\n```\n\n----------------------------------------\n\nTITLE: Chaining Map and Filter Operations in TypeScript\nDESCRIPTION: Shows how to chain map and filter operations to transform data, filtering for specific phone models and mapping to required grid columns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nthis._view = dataContext.personData.peopleQuery.createView(container);\nvar projectedItems = this._view.items\n    .filter((person: SamplesExtension.DataModels.Person) => {\n        return person.smartPhone() === \"Lumia 520\";\n    })\n    .map((person: SamplesExtension.DataModels.Person) => {\n        return <MappedPerson>{\n            name: person.name,\n            ssnId: person.ssnId\n        };\n    });\n\nvar personItems = ko.observableArray<MappedPerson>([]);\ncontainer.registerForDispose(projectedItems.subscribe(personItems));\n```\n\n----------------------------------------\n\nTITLE: Verifying Action Completion in C# using Portal Test Framework\nDESCRIPTION: Demonstrates how to wait for an action to complete before proceeding with the next step in a test case. This ensures that the browser has enough time to process the action and update the UI accordingly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncommandBar.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\nwebDriver.WaitUntil(() => !commandBar.HasMessageBox, \"There is still a message box in the command bar.\");\n```\n\n----------------------------------------\n\nTITLE: Publishing and Updating Client Notifications in TypeScript\nDESCRIPTION: This snippet demonstrates how to create, publish, and update a client notification for a long-running operation in an Azure Portal extension. It shows how to suppress server events by adding a correlation ID and how to update the notification's progress and status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// publish an in-progress server event\nvar n = new MsPortalFx.Hubs.Notifications.ClientNotification({\n    title: resx.myEvent.title,\n    description: resx.myEvent.description,\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.InProgress,\n    asset: {\n        extensionName: ExtensionDefinition.definitionName,\n        assetType: ExtensionDefinition.AssetTypes.MyAsset.name,\n        assetId: assetId\n    }\n});\nn.publish();\n\n// start server event\n...\n\n// save correlation id from ARM response and re-publish\nn.correlationIds.push(xhr.getResponseHeader(\"x-ms-correlation-request-id\"));\nn.publish();\n\n...\n\n// update the notification\nn.percentComplete = 25;  // .1 == .1%, 10 == 10%\nn.publish();\n\n...\n\n// finish processing\nn.percentComplete = 100;\nn.status = MsPortalFx.Hubs.Notifications.NotificationStatus.Information;\nn.publish();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Resource Menu Configuration\nDESCRIPTION: Example of implementing getResourceMenuConfig method with support for troubleshooting and resource health options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                ...\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties ViewType Structure in Markdown\nDESCRIPTION: This snippet defines the structure of the view-propertiesViewType-properties object. It specifies required properties like 'title' and 'groups', and an optional 'fx.feature' property. The 'title' is used for display text, while 'groups' defines an array of property view groups containing property view items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the Properties view\n|groups|True|Defines the array of property view groups which contain property view items.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Accessing EditScope Data in TypeScript\nDESCRIPTION: Shows how to access edited data in an EditScope object and view the original data using the getOriginal() method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\neditScope.getOriginal(editScope.root)\n```\n\n----------------------------------------\n\nTITLE: Applying Policy Validations to Multiple Resource Controls in TypeScript\nDESCRIPTION: Sets up different name field controls with separate policy validations for primary, secondary, and backup resources. Each control triggers a different policy check request for its respective resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Here we are able to run policy validations across our different resources being created\n// eslint-disable-next-line deprecation/deprecation\nconst createNameFieldValidation = (policyValidationFactory: PolicyValidationFactory) => policyValidationFactory.createFieldValidation<string>({\n    buildResourceDetails: (details, value) => {\n        details.resourceContent.name = value;\n        return details;\n    },\n    pendingValues: {\n        field: \"name\",\n    },\n}).validation;\nconst [primaryNameFieldValidation, secondaryNameFieldValidation, backupNameFieldValidation] = (primaryEnginePolicyFactory) ? [primaryEnginePolicyFactory, secondaryEnginePolicyFactory, backupEnginePolicyFactory].map(createNameFieldValidation) : [];\nconst primaryEngineNameTextBox = FxTextBox.create(container, {\n    label: ClientResources.primaryEngineName,\n    placeHolderText: ClientResources.enterName,\n    // Make sure to set the match validation with the control it's meant for\n    validations: [...nameValidations, primaryNameFieldValidation],\n});\nthis._primaryEngineName = primaryEngineNameTextBox.value;\n\nconst secondaryEngineNameTextBox = FxTextBox.create(container, {\n    label: ClientResources.secondaryEngineName,\n    placeHolderText: ClientResources.enterName,\n    // This will trigger a different policy check request\n    validations: [...nameValidations, secondaryNameFieldValidation],\n});\nthis._secondaryEngineName = secondaryEngineNameTextBox.value;\n\nconst backupEngineNameTextBox = FxTextBox.create(container, {\n    label: ClientResources.backupEngineName,\n    placeHolderText: ClientResources.enterName,\n    validations: [...nameValidations, backupNameFieldValidation],\n});\nthis._backupEngineName = backupEngineNameTextBox.value;\n\nthis._backupEngineName = backupEngineNameTextBox.value;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Menu Blade Titles\nDESCRIPTION: Implementation of a blade class that customizes menu titles using the HostedInMenuBlade interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyResourceBlade\n    extends MsPortalFx.ViewModels.Blade\n    implements MsPortalFx.ViewModels.HostedInMenuBlade {\n\n    public menuContent = {\n        title: ko.observable<string>(),\n        subtitle: ko.observable<string>(),\n    };\n\n    public onInputsSet(inputs: any): Promise<any> {\n        return someAsyncCall().then(data => {\n            this.menuContent.title(data.title);\n            this.menuContent.subtitle(data.subtitle);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Robot Blade ViewModel in TypeScript\nDESCRIPTION: Shows the implementation of a blade view model that handles property binding and updates blade display information based on input parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-properties.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule SamplesExtension.Hubs {\n    /**\n     * Represents the view model used by the robot blade.\n     */\n    export class RobotBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n        /**\n         * The name property is provided by an input binding to the blade.\n         */\n        public name = ko.observable(\"\");\n\n        /**\n         * When the name is passed, bind it to the blade title. You could also choose\n         * to grab the whole robot and use other pieces of its data (see RobotPartViewModel)\n         */\n        constructor(initialValue: any, dataContext: DataContext) {\n            super();\n            this.subtitle(SamplesExtension.Resources.Strings.hubsLensTitle);\n            this.icon(MsPortalFx.Base.Images.Polychromatic.Gears());\n\n            this.title = ko.computed((): string => {\n                var title = SamplesExtension.Resources.Strings.loadingText;\n\n                if (this.name() !== \"\") {\n                    title = SamplesExtension.Resources.Strings.robotTitle + \": \" + this.name();\n                }\n\n                return title;\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML in TextBox InfoBalloonContent\nDESCRIPTION: Example of how to display HTML content within the infoBalloonContent of a TextBox component. This approach allows for rich text formatting including bold text and hyperlinks.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  infoBalloonContent: {\n      htmlTemplate:\"<b>Sample label</b><br>infoBalloonContent should explain concepts and <br>can include a link to learn more.<a>Learn\n      more about infoBalloon</a>\",\n      viewModel: {},\n  }\n```\n\n----------------------------------------\n\nTITLE: GetCreateFunnelByGalleryPackageId Function Signature\nDESCRIPTION: Function signature for GetCreateFunnelByGalleryPackageId that calculates create funnel KPIs by gallery package ID, extension, and create blade over a given time range with various filtering options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_10\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFunnelByGalleryPackageId(\n    startDate:datetime,                 // required\n    endDate:datetime,                   // required\n    match_Extention:string=\"\",          // optional\n    match_Blade:string=\"\",              // optional\n    match_SessionId:string=\"\",          // optional\n    match_SubscriptionId:string=\"\",     // optional\n    match_TelemetryId:string=\"\",        // optional\n    match_CorrelationId:string=\"\",      // optional\n    match_GalleryPackageId:string=\"\",   // optional\n    match_BuildNumber:string=\"\",        // optional\n    exclude_NonMarketplace:bool=true    // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Tile Data Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the resource tile data object used in Azure dashboard view types. It specifies required and optional fields including resourceId, visibleProperties, allowedCommands, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-resourceTileData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|resourceId|True|The resource id of an Azure resource.\n|visibleProperties|False|A list that determines what resource properties to show for the tile.\n|allowedCommands|False|A list that determines the allowed commands for the resource displayed on the tile.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Grouping Multiple Kinds with KindGroup for Combined Display – XML\nDESCRIPTION: This XML configuration illustrates grouping multiple resource kinds into a single logical kind using <KindGroup>. Sub-kinds (e.g., lg, samsung) are defined separately, then referenced using <KindReference>. The group (e.g., android) acts as an abstract kind for presentation purposes and is included in the manifest, but should not be assigned directly as a resource's kind. This enables consolidated or parallel browse entries in the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\\\"Watch\\\">\\n    <ResourceType ResourceTypeName=\\\"Microsoft.Test/watches\\\"\\n                  ApiVersion=\\\"2017-04-01\\\">\\n      <Kind Name=\\\"lg\\\"\\n            CompositeDisplayName=\\\"{Resource AssetTypeNames.Watch.LG, Module=ClientResources}\\\"\\n            Icon=\\\"{Svg File=../../Svg/Watches/lg.svg}\\\"\\n            BladeName=\\\"LgWatchBlade\\\"\\n            PartName=\\\"LgWatchTile\\\" />\\n      <Kind Name=\\\"samsung\\\"\\n            CompositeDisplayName=\\\"{Resource AssetTypeNames.Watch.Samsung, Module=ClientResources}\\\"\\n            Icon=\\\"{Svg File=../../Svg/Watches/samsung.svg}\\\"\\n            BladeName=\\\"SamsungWatchBlade\\\"\\n            PartName=\\\"SamsungWatchTile\\\" />\\n      <!--\\n        The 'android' kind group wraps the lg and samsung kinds into a single kind. The 'android' kind is an abstract\\n        kind. There should never be a watch with the kind set to 'android'. Instead it's used to group kinds into\\n        a single list. However, 'lg' watches and be seen separately, same with 'samsung' watches. The 'android' kind\\n        will be emitted to the manifest as a kind.\\n      -->\\n      <KindGroup Name=\\\"android\\\"\\n            CompositeDisplayName=\\\"{Resource AssetTypeNames.Watch.Android, Module=ClientResources}\\\"\\n            Icon=\\\"{Svg File=../../Svg/Watches/android.svg}\\\">\\n        <KindReference KindName=\\\"lg\\\" />\\n        <KindReference KindName=\\\"samsung\\\" />\\n      </KindGroup>\\n    </ResourceType>\\n  </AssetType>\n```\n\n----------------------------------------\n\nTITLE: Handling Blade Closure with Data Return in TypeScript\nDESCRIPTION: This code snippet demonstrates how to close a blade and return data to its parent. It shows the usage of the closeCurrentBlade method with the ReturnsData decorator applied.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.container.closeCurrentBlade({\n    value: \"Data to return to parent blade\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Extension-Specific Client Optimizations via URL Parameter\nDESCRIPTION: This URL shows how to control client-side optimizations for a specific Azure Portal extension using a targeted query string parameter. Replace `<extensionName>` with the name of the target extension (as specified in its configuration) and `<value>` with the desired optimization mode (`true`, `false`, `bundle`, or `minify`). This allows debugging a single extension with optimizations disabled without affecting the performance of the rest of the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://portal.azure.com/?<extensionName>_clientOptimizations=<value>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Inclusion in JSON Configuration\nDESCRIPTION: This snippet shows how to use the 'fx.feature' property with 'includeWhen' directive to conditionally include or remove a JSON object based on the state of the 'bar' feature flag. In this case, the object is included when the flag is disabled.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-FeatureFlags.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"customerId\",\n            \"value\": \"bar disabled\",\n            \"fx.feature\": {\n                \"name\": \"bar\",\n                \"includeWhen\": \"Disabled\"\n            }\n        },\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting PrinterViewModel for Portal Resource Types - TypeScript\nDESCRIPTION: This TypeScript class defines a view model for the printer resource type in the Azure portal extension, adhering to the framework's interface contract. It demonstrates dependency injection, resource update registration/disposal, and exposes observable arrays for supplemental data. Dependencies include Di.Class, MsPortalFx, Knockout, and data context types. The constructor registers and cleans up data update hooks. There are no external inputs (it's instantiated by the portal system) and it provides a supplementalDataStream observable for UI consumption.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Di.Class(\"viewModel\")\nexport class PrinterViewModel\n   implements Definition.Contract {\n\n   /**\n    * This observable array is used to stream supplementary data results to the caller.\n    */\n   public supplementalDataStream = ko.observableArray<FxAssets.SupplementalData>([]);\n\n   private _dataContext: DataContext;\n   private _updateMap: StringMap<{ columns: string[] }>;\n\n   /**\n    * Initializes a new instance of the printer view model class.\n    *\n    * @param container Object representing the container in the shell.\n    * @param dataContext Long lived data access object passed into all view models in the current area.\n    */\n   constructor(container: FxContainerContract, dataContext: DataContext) {\n       this._dataContext = dataContext;\n       this._updateMap = Object.create(null);\n       const updateId = dataContext.printerData.registerUpdate<{ columns: string[] }>(this._updateMap, (resourceId, data) => {\n           return this.getSupplementalData([resourceId], data.columns).then(MsPortalFx.noop);\n       });\n       container.registerForDispose(() => {\n           dataContext.printerData.unregisterUpdate(updateId);\n       });\n   }\n\n   /**\n    * Gets the browse config.\n    *\n    * @returns A promise which will be resolved with the browse config.\n    */\n   public getBrowseConfig(): Promise<FxAssets.BrowseConfig> {\n       // This sample shows how to include additional columns for the printer resource and sets one pre-defined\n       // column and one custom column as the default columns. This ensures that without customization, these\n       // columns will appear in the browse grid.\n       //\n       // NOTE that since the browse is resource type-based, the icon, resource name will be prepended at the start\n       // of the columns and subscription will be appended at the end of the columns. Those three columns must not be\n       // included in the custom config.\n       return Promise.resolve({\n           columns: [\n               // Column for the model using a custom column.\n               {\n                   id: BrowseColumns.model,\n                   name: ko.observable<string>(ClientResources.Columns.Printer.model),\n                   description: ko.observable<string>(ClientResources.Columns.Printer.modelDescription),\n                   itemKey: BrowseColumns.ModelProperties.model,\n                   width: ko.observable<string>(\"90px\"),\n               },\n\n               // Column for the status using a custom column.\n               {\n                   id: BrowseColumns.status,\n                   name: ko.observable<string>(ClientResources.Columns.Printer.status),\n                   description: ko.observable<string>(ClientResources.Columns.Printer.statusDescription),\n                   itemKey: BrowseColumns.StatusProperties.status,\n                   width: ko.observable<string>(\"80px\"),\n                   cssClass: \"fxs-hubs-gridStatusIconColumn\",\n                   format: GridFormat.SvgIconLookup,\n                   formatOptions: {\n                       svgIconLookup: {\n                           [PrinterStatus.working.toLowerCase()]: {\n                               svg: FxStatusBadges.Success(),\n                               text: ClientResources.Status.Printer.working,\n                           },\n                           [PrinterStatus.jammed.toLowerCase()]: {\n                               svg: FxStatusBadges.Error(),\n                               text: ClientResources.Status.Printer.jammed,\n                           },\n\n```\n\n----------------------------------------\n\nTITLE: Fetching QueryCache Data on Blade Input Set in TypeScript\nDESCRIPTION: Implements the `onInputsSet` method within an Azure Portal blade's view model. This method is invoked when the blade receives new inputs. It calls the `fetch` method on the previously created `QueryCache` view (`this._websitesQueryView`), passing filter parameters (like `runningStatus` derived from `this.runningStatus.value()`). Returning the promise from `fetch` is standard practice for handling asynchronous data loading.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change\n */\npublic onInputsSet(): Promise<any> {\n    return this._websitesQueryView.fetch({ runningStatus: this.runningStatus.value() });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppBlade ViewModel\nDESCRIPTION: TypeScript implementation of an AppBlade ViewModel that loads Microsoft Docs into an IFrame.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MicrosoftDocsBladeViewModel extends MsPortalFx.ViewModels.AppBlade.ViewModel {\n    constructor(container: FxViewModels.ContainerContract, initialState: any, dataContext: any) {\n\n        super(container, {\n            source: 'https://learn.microsoft.com/'\n        });\n\n        this.title(\"learn.microsoft.com\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pageable Grid ViewModel with Pageable Extension\nDESCRIPTION: This snippet demonstrates how to set up a view model for a pageable grid using the Pageable extension. It shows the configuration of the grid, including column setup, and how to use the createNavigator API for integration with the virtualized data system.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract,\n            initialState: any,\n            dataContext: ControlsArea.DataContext) {\n\n    this._pageableDataNavigator = dataContext.productDataBySkipTake.productsCache.createNavigator(container);\n\n    // Define the extensions you wish to enable.\n    var extensions = MsPortalFx.ViewModels.Controls.Lists.Grid.Extensions.Pageable;\n\n    // Define the options required to have the extensions behave properly.\n    var pageableExtensionOptions = {\n        pageable: {\n            type: MsPortalFx.ViewModels.Controls.Lists.Grid.PageableType.Pageable,\n            dataNavigator: this._pageableDataNavigator,\n            itemsPerPage: ko.observable(20)\n        }\n    };\n\n    // Initialize the grid view model.\n    this.pagingPageableGridViewModel = new MsPortalFx.ViewModels.Controls.Lists.Grid\n        .ViewModel<SamplesExtension.DataModels.Product, ProductSelectionItem>(\n            null, extensions, pageableExtensionOptions);\n\n    // Set up which columns to show.  If you do not specify a formatter, we just call toString on\n    // the item.\n    var basicColumns: MsPortalFx.ViewModels.Controls.Lists.Grid.Column[] = [\n        {\n            itemKey: \"id\",\n            name: ko.observable(ClientResources.gridProductIdHeader)\n        },\n        {\n            itemKey: \"description\",\n            name: ko.observable(ClientResources.gridProductDescriptionHeader)\n        },\n    ];\n\n    this.pagingPageableGridViewModel.showHeader = true;\n\n    this.pagingPageableGridViewModel.columns =\n        ko.observableArray<MsPortalFx.ViewModels.Controls.Lists.Grid.Column>(basicColumns);\n\n    this.pagingPageableGridViewModel.summary =\n        ko.observable(ClientResources.basicGridSummary);\n\n    this.pagingPageableGridViewModel.noRowsMessage =\n        ko.observable(ClientResources.nobodyInDatabase);\n}\n\npublic onInputsSet(inputs: any): Promise<any> {\n    return this._pageableDataNavigator.setQuery({ categoryId: inputs.categoryId });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RefreshCommand in Azure Portal View\nDESCRIPTION: Sample configuration for adding a refresh command to a view. The command requires an ID and display name, with optional properties for icon, tooltip, and aria label for accessibility. Uses the MsPortalFx.Base.Images.Refresh icon by default.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewRefreshCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"RefreshCommand\",\n    \"id\": \"refreshCommandId\",\n    \"displayName\": \"refreshCommand\",\n    \"icon\": \"MsPortalFx.Base.Images.Refresh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Options in ARM Dropdown Controls\nDESCRIPTION: Demonstrates how to hide certain values in ARM dropdown controls by providing a hide callback and a reason message. This approach completely removes options from the dropdown list.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nhiding: {\n    hide: (item: Value) => item.property === \"5ag\",\n    reason: \"Some values are hidden because because of legal restrictions on new software\",\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View with resources() Data Source in Azure Portal (JSON)\nDESCRIPTION: This example shows how to set up a DataBrowse view using the resources() data source. It displays columns for resource name, VM type, and location, expecting an array output from resources().resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/DataBrowseTab.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": \"[resources().resources]\",\n    \"columns\": [\n        {\n            \"displayName\": \"Name\",\n            \"name\": \"name\"\n        },\n        {\n            \"displayName\": \"VM Type\",\n            \"name\": \"type\"\n        },\n        {\n            \"displayName\": \"Location\",\n            \"name\": \"location\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DefaultQueryString Property in C# ApplicationConfiguration\nDESCRIPTION: Shows how to add the DefaultQueryString configuration property to the ApplicationConfiguration class to support default feature flag values across deployments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ConfigurationSetting]\npublic CaseInsensitiveReadOnlyDictionary<IReadOnlyDictionary<string, string>> DefaultQueryString\n{\n    get;\n    private set;\n}\n```\n\n----------------------------------------\n\nTITLE: Diff Example of Converting hammer.js to AMD Module\nDESCRIPTION: This code diff shows the changes made to the hammer.js library to convert it into an AMD module. It wraps the entire library code in a define function call.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n--------------------------------------------------------------------------\n4    4       * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;\n5    5       * Licensed under the MIT license */\n\n     7     + define([], function () {\n7    8       (function (window, undefined) {\n8    9           'use strict';\n\n10   11          /**\n--------------------------------------------------------------------------\n2156 2157        window.Hammer = Hammer;\n\n2158 2159    })(window);\n2159 2160  + });\n--------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse Tab with JSON Schema\nDESCRIPTION: Demonstrates the complete JSON structure for configuring a DataBrowse tab in Azure Portal. Includes data array configuration, column definitions, value mappings, and formatting options. The example shows how to set up interactive elements like URLs, status indicators, and blade actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"DataBrowse\",\n  \"ariaLabel\": \"testing\",\n  \"data\": [\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"succeeded\",\n      \"menu\": \"tags\",\n      \"urlText\": \"Azure portal\",\n      \"urlAction\": {\n        \"url\": \"https://azure.microsoft.com/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"aks-agentpool\"\n        },\n        \"title\": \"aks-agentpool\"\n      },\n      \"diskSize\": 100,\n      \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n    },\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"warning\",\n      \"menu\": \"metrics\",\n      \"urlText\": \"Microsoft\",\n      \"urlAction\": {\n        \"url\": \"https://www.microsoft.com/en-us/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"AzureMobileTest-vnet\"\n        },\n        \"title\": \"AzureMobileTest-vnet\"\n      },\n      \"diskSize\": 10000,\n      \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n    },\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"failed\",\n      \"menu\": \"locks\",\n      \"urlText\": \"Github\",\n      \"urlAction\": {\n        \"url\": \"https://github.com/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"Test-disk\"\n        },\n        \"title\": \"Test-disk\"\n      },\n      \"diskSize\": 1500,\n      \"price\": 1500,\n      \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n    }\n  ],\n  \"columns\": [\n    {\n      \"displayName\": \"Name\",\n      \"name\": \"name\",\n      \"action\": {\n        \"resourceId\": \"[$item.id]\"\n      }\n    },\n    {\n      \"displayName\": \"Menu\",\n      \"name\": \"menu\",\n      \"action\": {\n        \"menu\": \"[$item.menu]\"\n      }\n    },\n    {\n      \"displayName\": \"Url\",\n      \"name\": \"urlText\",\n      \"action\": {\n        \"url\": \"[$item.urlAction.url]\"\n      }\n    },\n    {\n      \"displayName\": \"Blade\",\n      \"name\": \"name\",\n      \"action\": {\n        \"blade\": {\n          \"name\": \"ObjectJsonViewBlade\",\n          \"extension\": \"Microsoft_Azure_CreateUIDef\",\n          \"parameters\": \"[$item.parameters]\",\n          \"inContextPane\": true\n        }\n      }\n    },\n    {\n      \"displayName\": \"Status\",\n      \"name\": \"status\",\n      \"valueMapping\": [\n        {\n          \"value\": \"Succeeded\",\n          \"displayName\": \"Succeeded\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n        },\n        {\n          \"value\": \"Warning\",\n          \"displayName\": \"Warning\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n        },\n        {\n          \"value\": \"Failed\",\n          \"displayName\": \"Failed\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n        }\n      ]\n    },\n    {\n      \"displayName\": \"Disk size\",\n      \"name\": \"diskSize\",\n      \"format\": \"Number\",\n      \"sourceUnits\": \"Gigabytes\",\n      \"maximumFractionDigits\": 2\n    },\n    {\n      \"displayName\": \"Creation time\",\n      \"name\": \"creationTime\",\n      \"format\": \"Date\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring National Cloud Support for Azure Portal Alerts\nDESCRIPTION: This JSON snippet demonstrates how to specify national cloud portal domain names in the \"environment\" property for Azure Portal alerts. It shows different configurations for various cloud environments, including global Azure, Azure China, and Azure US Government.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-error-messages.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   ...\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"ms.portal.azure.com\", \"portal.azure.cn\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.cn\",\"portal.azure.us\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.us\"],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Provisioning Blade Launcher\nDESCRIPTION: A TypeScript class demonstrating how to create a blade that launches different provisioning blades, including marketplace and custom blades. It shows how to set up blade references with parameters and provisioning flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* This blade is an example of how to launch a provisioning blade\n* combined with a marketplace gallery id\n*/\n@TemplateBlade.Decorator({\n   htmlTemplate: `\n   <div class='msportalfx-padding'>\n       <a data-bind='text: engineText, fxclick: engineBladeLink'></a>\n       <p></p>\n       <a data-bind='text: robotText, fxclick: robotBladeLink'></a>\n       <p></p>\n       <a data-bind='text: engineNoMarketplaceText, fxclick: noMarketplaceEngineBladeLink'></a>\n       <p></p>\n       <a data-bind='text: reactRobotText, fxclick: reactViewLink'></a>\n   </div>`,\n})\n@TemplateBlade.InjectableModel.Decorator(DataContext)\nexport class CreateLauncherBlade {\n   public title = ClientResources.createLauncher;\n   public subtitle: string;\n   public context: TemplateBlade.Context<void, DataContext>;\n   public engineText = ClientResources.createEngine;\n   public engineNoMarketplaceText = ClientResources.createNoMarketplaceEngine;\n   public robotText = ClientResources.createRobot;\n   public reactRobotText = ClientResources.reactCreateRobot;\n\n   public async onInitialize() {\n   }\n\n   public robotBladeLink: BladeLink = {\n       bladeReference: BladeReferences.forBlade(\"CreateCustomRobotBlade\").createReference({\n           parameters: createCustomRobotBladeParameters,\n           doesProvisioning: true,\n       }),\n   };\n   //docs#launchProvisioningBlades\n   public engineBladeLink: BladeLink = {\n       bladeReference: BladeReferences.forMarketplace().createReference({\n           marketplaceId: \"Microsoft.EngineNoPdlV1\",\n           parameters: createEngineBladeParameters,\n       }),\n   };\n   public noMarketplaceEngineBladeLink: BladeLink = {\n       bladeReference: BladeReferences.forBlade(\"CreateNoMarketplaceArmEngineBlade\").createReference({\n           doesProvisioning: true,\n           parameters: createEngineBladeParameters,\n       }),\n   };\n   //docs#launchProvisioningBlades\n   public reactViewLink: BladeLink = {\n       bladeReference: BladeReferences.forBlade(\"CreateCustomRobot.ReactView\").createReference({\n           doesProvisioning: true,\n       }),\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Responses to Command Dialogs (TypeScript)\nDESCRIPTION: Provides the implementation for the 'dialogClick' method in a command view model (TypeScript), which is invoked when the user clicks a button in a dialog previously shown by 'this.dialog()'. It receives the 'DialogResult' (e.g., Yes, No, OK), identifies the specific dialog instance if multiple dialogs are used, and performs actions based on the user's choice. For example, if the user clicks 'Yes' on the confirmation box, the command is disabled, and the '_stopIt()' method is called.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npublic dialogClick(result: MsPortalFx.ViewModels.DialogResult): void {\n    // Figure out which is the current message box\n    var currentDialog = this.dialog();\n\n    // Take action according to the current message box and the clicked message box button\n    switch (currentDialog) {\n        case this._confirmationMessageBox:\n            if (result === MsPortalFx.ViewModels.DialogResult.Yes) {\n                // Disable the command to prevent further interaction\n                this.enabled(false);\n\n                // stop the site\n                this._stopIt();\n            } else {\n                // reset command\n                this.status(MsPortalFx.ViewModels.CommandStatus.None);\n            }\n            break;\n        case this._successMessageBox:\n            // only button is OK button so command is done executing\n            this.status(MsPortalFx.ViewModels.CommandStatus.None);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Graph API Control and Dropdown for Azure Portal UI (JSON)\nDESCRIPTION: Defines two Azure portal UI controls using JSON. The first, `callGraph`, is a `Microsoft.Solutions.GraphApiControl` that makes a GET request to the Microsoft Graph API beta endpoint `/beta/myorganization/applications`. It filters applications where the `displayName` starts with 'a', selects the `displayName` and `appId`, and transforms the results using a JMESPath expression into a list format suitable for a dropdown. The second control, `userName`, is a `Microsoft.Common.DropDown` that uses the transformed list from `callGraph` (accessed via `steps('controls').callGraph.transformed.list`) as its required `allowedValues`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"name\": \"callGraph\",\n        \"type\": \"Microsoft.Solutions.GraphApiControl\",\n        \"request\": {\n            \"method\": \"GET\",\n            \"path\": \"/beta/myorganization/applications?filter=startsWith(displayName, 'a')&select=displayName,appId\",\n            \"transforms\": {\n                \"list\": \"value|[*].{label:displayName, value:appId, description:appId}\"\n            }\n        }\n    },\n    {\n        \"name\": \"userName\",\n        \"type\": \"Microsoft.Common.DropDown\",\n        \"label\": \"User info\",\n        \"multiLine\": true,\n        \"constraints\": {\n            \"required\": true,\n            \"allowedValues\": \"[coalesce(steps('controls').callGraph.transformed.list, parse('[]'))]\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Microsoft.Azure.Gallery.Common and Utility in csproj (MSBuild XML)\nDESCRIPTION: This XML snippet shows how to reference the Microsoft.Azure.Gallery.Common assembly and import the Microsoft.Azure.Gallery.AzureGalleryUtility.targets file in a .csproj file for an Azure web project. The <Reference> element sets the path to the required DLL, and the <Import> element includes the required build targets, both conditional on package installation. These steps are essential for enabling gallery package development and F5 debug/testing flows as described in the documentation. The paths rely on NuGet or CoreXT package resolution variables (e.g., $(PkgMicrosoft_Azure_Gallery_Common)).\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n   <Reference Include=\\\"Microsoft.Azure.Gallery.Common\\\">\\n      <HintPath$(PkgMicrosoft_Azure_Gallery_Common)\\\\lib\\\\net45\\\\Microsoft.Azure.Gallery.Common.dll</HintPath>\\n  </Reference> \\n  ...\\n  <Import Project=\\\"$(PkgMicrosoft_Azure_Gallery_Common)\\\\build\\\\Microsoft.Azure.Gallery.AzureGalleryUtility.targets\\\"            Condition=\\\"Exists('$(PkgMicrosoft_Azure_Gallery_Common)\\\\build\\\\Microsoft.Azure.Gallery.AzureGalleryUtility.targets')\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Required Checkbox Element in Azure UI Definition (JSON)\nDESCRIPTION: This JSON object defines a checkbox control using the 'Microsoft.Common.CheckBox' type for an Azure portal UI definition. It sets the display 'label' to \"I agree to the terms and conditions.\" and includes a 'constraints' object making the checkbox 'required'. If the user attempts to proceed without checking the box, the specified 'validationMessage' will be displayed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.CheckBox.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"legalAccept\",\n    \"type\": \"Microsoft.Common.CheckBox\",\n    \"label\": \"I agree to the terms and conditions.\",\n    \"constraints\": {\n        \"required\": true,\n        \"validationMessage\": \"Please acknowledge the legal conditions.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Localized Strings in PDL\nDESCRIPTION: Demonstrates how to reference localized strings in PDL markup using the Resource directive.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Lens Name=\"PartsLens\" Title=\"{Resource partsLensTitle, Module=ClientResources}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Percentage-based Client Error Alerts in Azure Portal\nDESCRIPTION: Configuration structure for percentage-based error alerts including severity settings, minimum affected user counts, exclusions, and deployment stage filters. This type of alert triggers based on the percentage of users affected by an error.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"percentage\",\n        \"enabled\": true,\n        \"criteria\": [\n            {\n                \"severity\": 3,\n                \"enabled\": true,\n                \"minAffectedUserCount\": 2,\n                \"minAffectedUserPercentage\": 10.0,\n                \"exclusion\": {\n                    \"type\": \"or\",\n                    \"message1\":\"eastus2stage\",\n                    \"message2\":\"eastus2(stage)\"\n                },\n                \"safeDeploymentStage\": [\"3\"],\n                \"datacenterCode\": [\"AM\"]\n            },\n            ...\n        ]\n    },\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET RESX File as EmbeddedResource in XML\nDESCRIPTION: This XML snippet demonstrates how to include a .NET RESX resource file (ClientResources.resx) for localization using the EmbeddedResource build item in a .csproj configuration. The <Generator> and <LastGenOutput> properties ensure a strongly-typed code file is generated for string access, while <BundleId> and <SubType> support build tooling. Prerequisites: Standard .NET build tools and project file editing access. Inputs: Path to RESX file. Outputs: Embedded resource and generated designer class. Limitations: Should not be manually edited post-generation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<EmbeddedResource Include=\\\"Client\\\\ClientResources.resx\\\">\\n  <Generator>PublicResXFileCodeGenerator</Generator>\\n  <LastGenOutput>ClientResources.Designer.cs</LastGenOutput>\\n  <BundleId>SamplesExtension</BundleId>\\n  <SubType>Designer</SubType>\\n</EmbeddedResource>\n```\n\n----------------------------------------\n\nTITLE: Implementing CapabilitiesViewType as Resource Overview Tab in Azure Portal\nDESCRIPTION: JSON configuration for implementing Capabilities view as a tab within a resource overview (GetStarted view). Shows the basic structure for tab integration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting an Azure Portal Extension Project - Shell\nDESCRIPTION: This snippet provides a sequence of shell commands for initializing a new Azure portal extension project. It navigates to the desired directory, generates a project scaffold using the “ap” CLI tool, and starts the development server. Dependencies include having the Azure Portal CLI (“ap”) installed and running with sufficient permissions (Administrator mode). Inputs consist of the extension name and output directory, while outputs include the scaffolded extension structure and a running development instance. This process must be performed in a shell with admin privileges and is subject to authentication and local system configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-isv-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd c:\\\\ && mkdir dev && cd dev\nap new -d -n CompanyName_MyService -o ./MyService\ncd ./MyService/src/default/extension\nap start\n\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Portal.Extensions.Hubs via NuGet Package Manager - PowerShell\nDESCRIPTION: This snippet provides the PowerShell command needed to install the Microsoft.Portal.Extensions.Hubs package from a custom NuGet feed. It requires the NuGet Package Manager Console in Visual Studio and assumes internet access to the specified Azure DevOps package source. Replace <Version_Number> with the actual version desired. The command will fetch the specified version and add it as a dependency within the project.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-hubsextension-pde.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Hubs -Source https://msazure.pkgs.visualstudio.com/_packaging/Official/nuget/v3/index.json -Version <Version_Number>\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties Tab in Resource Overview (JSON)\nDESCRIPTION: This JSON schema defines the structure for adding a Properties view as a tab in a resource overview (GetStarted view). It includes parameters, resources, and placeholders for tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Microsoft Common TextBlock in Azure Portal Templates - JSON\nDESCRIPTION: This JSON snippet configures a user-facing text block in an Azure portal template, using the Microsoft.Common.TextBlock type. It sets the visible property to true, displays a prompt message, and provides an interactive hyperlink labeled 'Learn more' that directs users to a specified URI. This format requires no dependencies outside of the Azure portal's template schema and is typically used within an 'outputs' or 'parameters' section of an Azure Resource Manager (ARM) or custom deployment UI definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBlock.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"text1\",\n    \"type\": \"Microsoft.Common.TextBlock\",\n    \"visible\": true,\n    \"options\": {\n        \"text\": \"Please provide the configuration values for your application.\",\n        \"link\": {\n            \"label\": \"Learn more\",\n            \"uri\": \"https://www.microsoft.com\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph API DataSource\nDESCRIPTION: JSON schema showing how to configure Azure Active Directory Resource Graph requests for accessing graph data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"dataSources\": [\n    {\n        \"kind\": \"graph\",\n        \"name\": \"graph\",\n        \"path\": \"v1.0/me?$select=displayName,id,mail\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Link to Create Blade for Windows Server 2016 - URL Example - Plaintext\nDESCRIPTION: An example direct link for opening the Create blade for Microsoft.WindowsServer2016Datacenter-ARM in Azure Portal. Designed for quick starts or documentation links. {package id} must match the asset in Azure Marketplace.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#create/Microsoft.WindowsServer2016Datacenter-ARM\n```\n\n----------------------------------------\n\nTITLE: Setting Up Microsoft.Common.Selector for Disk Size Options in JSON\nDESCRIPTION: Creates a Selector control offering disk size options within a custom Azure portal experience. Each value maps to a display label, with additional configuration for default values, key paths for value/description extraction, value transformation, and conditional visibility. Designed to interoperate with BladeInvokeControl, it depends on upstream outputs for dynamic displays and step-based value selection. Inputs are user-selected disk size values, and outputs are mapped values and display texts, intended for flow into other controls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.BladeInvokeControl.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"Microsoft.Common.Selector\\\",\\n    \\\"name\\\": \\\"vmDisk\\\",\\n    \\\"label\\\": \\\"Virtual Machine disk size\\\",\\n    \\\"valueMapping\\\": [\\n        {\\n        \\\"value\\\": \\\"4\\\",\\n        \\\"displayName\\\": \\\"4 GiB\\\"\\n        },\\n        {\\n        \\\"value\\\": \\\"8\\\",\\n        \\\"displayName\\\": \\\"8 GiB\\\"\\n        },\\n        {\\n        \\\"value\\\": \\\"512\\\",\\n        \\\"displayName\\\": \\\"512 GiB\\\"\\n        }\\n    ],\\n    \\\"keyPath\\\": \\\"diskSizeGB\\\",\\n    \\\"descriptionKeyPath\\\": \\\"subText\\\",\\n    \\\"defaultValue\\\": {\\n        \\\"diskSizeGB\\\": 4,\\n        \\\"subText\\\": 250\\n    },\\n    \\\"value\\\": \\\"[steps('step1').diskSize.transformed.sku]\\\",\\n    \\\"visible\\\": \\\"[contains(resources().name, 'e')]\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Blade with Custom HTML Click in JavaScript\nDESCRIPTION: This example shows how to open a blade when a user clicks on an HTML element using the fxclick Knockout data-binding and a view model method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Your html template\n<a href=\"#\" data-bind=\"fxclick: myOnClick\">Click me!</a>\n\n// Your template blade or part view model\npublic myOnClick(): void {\n    container.openBlade(BladeReferences.forBlade(\"SomeBlade\").createReference());\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Legacy PCv1/v2 Provisioner Callbacks to PCv3\nDESCRIPTION: Details the upgrade path for Provisioner logic from PCv1/v2 to PCv3. The old `executeCustomProvisioning` method maps to the new `supplyProvisioningPromise` callback. The `mapOutputsForProvisioning` concept is integrated into the data flow where `mapOutgoingDataForCollector` (from the Provider) sends data that becomes input to `supplyProvisioningPromise`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexecuteCustomProvisioning\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyProvisioningPromise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmapOutputsForProvisioning\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmapOutgoingDataForCollector\n```\n\n----------------------------------------\n\nTITLE: Opening Blades with Closed Callbacks in TypeScript\nDESCRIPTION: Demonstrates how to open a blade with a callback that runs when the blade is closed. Uses promises to handle the blade opening result and updates UI state based on successful blade opening.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic bladeOpened = ko.observable(false);\n\npublic onButtonClick() {\n    // this callback is invoked when the blade is closed\n    const onBladeClosed = () => {\n        // just for demonstration purposes we set a value that is displayed in the blade to false\n        this.bladeOpened(false);\n    };\n\n    // The openBlade API returns a promise that is resolved after the blade is opened\n    const openBladePromise = this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference({ onClosed: onBladeClosed }));\n\n    // If the promise result is true the blade was sucessfully opened.\n    // If the promise is false the blade could not be opened.\n    // This can happen for example if a different blade is open with edits and the user doesn't want to lose their changes\n    void openBladePromise.then((result) => {\n        this.bladeOpened(result);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to an Asset in Azure Portal - URL Pattern - Plaintext\nDESCRIPTION: Specifies the pattern for constructing links to assets within extensions, including {extension}, {asset type}, and {asset id}. Enables direct navigation to resource-like objects such as secrets or certificates. All parameters are required and must be valid within the corresponding extension context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#asset/{extension}/{asset type}/{asset id}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Page for FrameBlade Content\nDESCRIPTION: HTML page that serves as the main content for the FrameBlade's iframe. It includes basic structure, elements for displaying content, and script references for handling communication with the extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Frame Blade</title>\n    <meta charset=\"utf-8\" />\n</head>\n\n<body>\n    <h1 class=\"fxs-frame-header\" style=\"margin: 0;\">Frame Blade</h1>\n    <div class=\"fxs-frame-token\"></div>\n    <div class=\"fxs-frame-content\"></div>\n    <div class=\"fxs-frame-documentation-link\">More information and best practices for FrameBlades can be found in our <a\n            href=\"https://github.com/Azure/portaldocs/blob/master/portal-sdk/generated/top-blades-frameblade.md\"\n            target=\"_blank\">documentation\n            page</a>.</div>\n    <button class=\"fxs-frame-button\" type=\"button\">Open Blade</button>\n    <!-- Define frameSignature and allowed origin list -->\n    <script>\n        var frameSignature = \"FxFrameBlade\";\n        var allowedParentFrameAuthorities = [\"df.onecloud.azure-test.net\", \"portal.azure.com\"];\n    </script>\n    <script src=\"../Scripts/IFrameSample/FramePage.js\"></script>\n    <script src=\"../Scripts/IFrameSample/IdleBehavior.js\"></script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Form View for Child Resource Creation in Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to configure a Form view for creating a child resource in Azure Portal. It includes parameters and resources properties, and shows how to reference parent resource properties using the resources() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"key\"\n            }\n        ],\n        \"resources\": [\n            {\n                \"id\": \"[parameters('id')]\",\n                \"apiVersion\": \"2020-03-01-preview\"\n            }\n        ],\n        \"steps\": [\n        ],\n        \"deployment\": {\n            \"kind\": \"ResourceGroup\",\n            \"resourceGroupId\": \"[resources().resourceGroupId]\",        \n            \"parameters\": {\n                \"name\": \"[steps('step1').textbox]\",\n                \"location\": \"[resources().location]\",\n                \"omsLogAnalyticsWorkspaceName\": \"[resources().name]\"\n            },\n            \"template\": {\n                \"file\": \"./SavedSearchDeploymentTemplate.json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Locale-Aware Numbers using MsPortalFx/Globalization (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates formatting a number in a locale-aware way using MsPortalFx/Globalization.NumberFormat. It imports the module, sets a sample number, and logs the formatted result to the console for a German user (\\'de-DE\\'). The formatter handles proper thousands separator and decimal display for the current culture, requiring the Globalization module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Globalization from \\\"MsPortalFx/Globalization\\\";\nvar number = 123456.789;\n\n// User locale is 'de-DE'\n// German uses comma as decimal separator and period for thousands\nconsole.log(Globalization.NumberFormat.create().format(number));\n// \\u2192 123.456,789\n\n```\n\n----------------------------------------\n\nTITLE: Filling Out Azure Resource Group Creation Form using C#\nDESCRIPTION: This snippet demonstrates how to interact with the Azure Portal's resource group creation form. It shows how to find form elements, set values for resource group name, subscription, and location, and handle form validation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-createsample.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar rgNameTextboxFieldLabel = \"Resource group name\";\nvar rgName = \"Test-\" + Guid.NewGuid();\nvar rgCreateBladeTitle = \"Resource group\";\n\n// Find the create resource group blade which should be open because we deep linked into it\nvar createRgBlade = portal.FindSingleBladeByTitle(rgCreateBladeTitle).WaitUntilBladeIsLoaded().WaitUntilAllPartsAreLoaded();\n\n// Get the form section for the create blade so we can find the fields to fill out\nvar formSection = createRgBlade.FindElement<FormSection>();\n\n// Find the textbox with the label for resource group name\nvar rgNameTextbox = formSection.FindFieldByLabel<Textbox>(rgNameTextboxFieldLabel);\nrgNameTextbox.Value = rgName + Keys.Tab; // Keys.Tab shifts focus out of the textfield so validation can kick in\nwebDriver.WaitUntil(() => rgNameTextbox.IsEdited && rgNameTextbox.ValidationState.Equals(ControlValidationState.Valid),\n    string.Format(CultureInfo.InvariantCulture, \"The '{0}' field is still invalid or did not change into an edited state after entering a valid value.\", rgNameTextboxFieldLabel));\nTestContext.WriteLine(\"Resource group name's text box field was set to: \" + rgNameTextbox.Value);\n\n// Fill out the rest of the fields.\nvar subFilterComboBoxLabel = \"Subscription\";\nFilterCombo subFilterComboBox = formSection.FindFieldByLabel<FilterCombo>(subFilterComboBoxLabel);\nvar selectedSubFilterComboBoxValue = subFilterComboBox.Value;\nsubFilterComboBox.SetValueToFirstDropdownMatch(selectedSubFilterComboBoxValue);\n\nvar rgFilterComboBoxLabel = \"Resource group location\";\nFilterCombo rgFilterComboBox = formSection.FindFieldByLabel<FilterCombo>(rgFilterComboBoxLabel);\nvar rgSelectedFilterComboValue = rgFilterComboBox.Value;\nrgFilterComboBox.SetValueToFirstDropdownMatch(rgSelectedFilterComboValue)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running a Complete Contact Creation Test in Azure Portal\nDESCRIPTION: This complete example demonstrates setting up test servers, initializing the portal, and testing the creation of a contact through the UI. It includes server configuration, form filling, selector interactions, and verification of the created contact. The test initializes the environment, performs the contact creation, and cleans up resources afterward.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.Portal.TestFramework.Core;\nusing Microsoft.Selenium.Utilities;\nusing OpenQA.Selenium;\nusing Microsoft.Portal.TestFramework.Core.Shell;\nusing Microsoft.Portal.TestFramework.Core.Controls;\n\nnamespace SamplesExtensionTests\n{\n    [TestClass]\n    public class Create\n    {\n        private const string SamplesExtensionUrl = \"http://localhost:11997\";\n        private const string SamplesExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\SamplesExtension\\Extension\";\n        private const string HubsExtensionUrl = \"http://localhost:11998\";\n        private const string HubsExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\HubsExtension\";\n        private static IWebDriver webDriver;\n        private static PortalServer portalServer;\n        private static WebServer samplesExtensionServer;\n        private static WebServer hubsExtensionServer;\n\n        [TestInitialize]\n        public void TestInitialize()\n        {\n            hubsExtensionServer = new WebServer(new Uri(HubsExtensionUrl), HubsExtensionWebSitePath);\n            if (hubsExtensionServer.IsHostedByTestFramework)\n            {\n                hubsExtensionServer.Start();\n            }\n\n            samplesExtensionServer = new WebServer(new Uri(SamplesExtensionUrl), SamplesExtensionWebSitePath);\n            if (samplesExtensionServer.IsHostedByTestFramework)\n            {\n                samplesExtensionServer.Start();\n            }\n\n            portalServer = PortalServer.Create();\n\n            if (portalServer.IsHostedByTestFramework)\n            {\n                portalServer.RegisterExtension(\"Hubs\", new Uri(hubsExtensionServer.Uri));\n                portalServer.RegisterExtension(\"Samples\", new Uri(samplesExtensionServer.Uri));\n                portalServer.Start();\n            }\n\n            webDriver = WebDriverFactory.Create();\n            webDriver.Url = \"about:blank\";\n            portalServer.ClearUserSettings();\n        }\n\n        [TestMethod]\n        public void CanCreateContact()\n        {\n            var portal = this.NavigateToPortal();\n\n            // Open and find the Create Form\n            portal.StartBoard.FindSinglePartByTitle<ButtonPart>(\"New Contact\").Click();\n\n            string contactName = \"John Doe\";\n            string subscriptionName = \"Portal Subscription 2\";\n\n            var blade = portal.FindSingleBladeByTitle(\"Basic Information\");\n            var form = webDriver.WaitUntil(() => blade.FindElement<FormSection>(), \"Could not find the form.\");\n\n            // Fill a textbox field\n            string fieldName = \"contactName\";\n            var field = webDriver.WaitUntil(() => form.FindField<Textbox>(fieldName),\n                                            string.Format(\"Could not find the {0} textbox.\", fieldName));\n            field.Value = contactName + Keys.Tab;\n            webDriver.WaitUntil(() => field.IsEdited && field.IsValid,\n                                string.Format(\"The {0} field did not pass validations.\", fieldName));\n\n            // Open a picker from a selector field and select an item\n            fieldName = \"subscriptionField\";\n            form.FindField<Selector>(fieldName).Click();\n\n            blade = portal.FindSingleBladeByTitle(\"Select Subscription\");\n\n            var grid = webDriver.WaitUntil(blade.FindElement<Grid>, \"Could not find the grid in the blade.\");\n            GridRow row = grid.SelectRow(subscriptionName);\n\n            PickerActionBar pickerActionBar = webDriver.WaitUntil(() => blade.FindElement<PickerActionBar>(),\n                                                                \"Could not find the picker action bar.\");\n            webDriver.WaitUntil(() => pickerActionBar.OkButton.IsEnabled,\n                                \"Expected the OK Button of the Picker Action Bar to be enabled after selecting an item in the picker list.\");\n            pickerActionBar.ClickOk();\n\n            // Click the Create button\n            blade = portal.FindSingleBladeByTitle(\"Basic Information\");\n\n            CreateActionBar createActionBar = webDriver.WaitUntil(() => blade.FindElement<CreateActionBar>(),\n                                                                \"Could not find the create action bar.\");\n            createActionBar.ClickOk();\n\n            // There should be an open blade with 'John Doe' as its title\n            portal.FindSingleBladeByTitle(contactName);\n        }\n\n        [TestCleanup]\n        public void TestCleanup()\n        {\n            webDriver.Dispose();\n            portalServer.Dispose();\n            samplesExtensionServer.Dispose();\n            hubsExtensionServer.Dispose();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Text Box Validation Configuration\nDESCRIPTION: Configuration settings for text box validation including required fields, OS platform specification, regex patterns, and validation messages. The validation combines both built-in OS platform checks and optional custom regex validation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.UserNameTextBox-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  constraints: {\n    required: true,          // Default: true\n    regex: null,            // Default: null\n    validationMessage: null // Default: null\n  },\n  osPlatform: \"Windows\"     // Must be \"Windows\" or \"Linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Scripts on Elements with Playwright\nDESCRIPTION: Example of executing a script on a specific element in both Selenium and Playwright. The Playwright implementation requires a different approach using a function with an element parameter.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst journeyBlade = testFx.portal.element(testFx.Locators.By.className(journeyBladeClass));\nconst result: string = await testFx.BrowserAutomation.runAutomation<string>(\n    async (wd) => await wd.executeScript(\"return $.contains(arguments[0], document.activeElement)\", journeyBlade),\n    async () => await (<testFx.PlaywrightElement>(await journeyBlade.getWebElements())[0]).executeScript(\"(htmlElem) => $.contains(htmlElem, document.activeElement)\")\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints for Microsoft.Common.CheckBox Control in Azure Portal\nDESCRIPTION: This snippet describes the properties that can be used to define constraints for the Microsoft.Common.CheckBox control. It includes options for making the checkbox required, setting a validation message, and specifying feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.CheckBox-constraints.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|required|False|When required is set to **true** then Form validation will fail is checkbox is not checked.\n|validationMessage|False|Display message shown when the checkbox is not checked\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen Tutorials View in Azure Portal\nDESCRIPTION: JSON schema for configuring a full screen Tutorials view that can be accessed from a resource menu. Includes configuration for tiles, videos, and useful links sections with their respective properties and actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Tutorials\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Tutorials Example\",\n      \"tilesGroup\": {\n        \"displayName\": {\n          \"property\": \"freeTrainingsFromMicrosoft\"\n        },\n        \"items\": [\n          {\n            \"title\": {\n              \"property\": \"tile1Title\"\n            },\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n            \"subtitle\": {\n              \"property\": \"tile1Subtitle\"\n            },\n            \"description\": {\n              \"property\": \"tile1Description\"\n            },\n            \"action\": {\n              \"url\": \"https://www.azure.com\",\n              \"displayName\": {\n                \"property\": \"start\"\n              }\n            }\n          }\n        ]\n      },\n      \"videosGroup\": {\n        \"displayName\": {\n          \"property\": \"tab2videosTitle\"\n        },\n        \"items\": [\n          {\n            \"title\": {\n              \"property\": \"tab2feature1Title\"\n            },\n            \"description\": {\n              \"property\": \"tab2feature1Description\"\n            },\n            \"learnMore\": {\n              \"url\": \"https://www.azure.com\",\n              \"ariaLabel\": \"Learn more about Azure\"\n            },\n            \"video\": {\n              \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n            }\n          }\n        ]\n      },\n      \"linksGroup\": {\n        \"displayName\": \"Useful links\",\n        \"items\": [\n          {\n            \"title\": \"Concepts\",\n            \"action\": [\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Azure Managed applications overview\"\n              },\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Service Catalog applications\"\n              },\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Managed applications in Azure Marketplace\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FileUpload Output for Single File Content (JSON)\nDESCRIPTION: Shows the JSON output format when options.multiple is false and options.uploadMode is file. The output contains the file contents as a JSON string.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Resource Menu\nDESCRIPTION: Error handling implementation for resource menu failures, including response extraction and handling of expected failures.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultResponseExtractor(error: Error) {\nreturn error && (<any>error).content && (<any>error).content.message\n    || error && (<any>error).content && (<any>error).content.error && (<any>error).content.error.message\n    || error && (<any>error).content && JSON.stringify((<any>error).content);\n}\n\nexport function handleResourceMenuFailures(\nerror: Error,\nhandledError: KnockoutObservable<MsPortalFx.ViewModels.ErrorOptions>,\nassetTypeName: string,\nresourceId: string,\narmResponseExtractor?: (error: Error) => string,\n) {\narmResponseExtractor = armResponseExtractor || defaultResponseExtractor;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing editscopeless TextBox control with validations\nDESCRIPTION: Factory pattern initialization of TextBox control with label, sub-label, placeholder, and validations. The validations include required field checks, regex pattern matching, and a resource name validator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.engineName = TextBox.create(container, {\n    label: ClientResources.engineNameColumn,\n    subLabel: ClientResources.sampleSubLabel,\n    placeHolderText: ClientResources.enterEngineName,\n    validations: ko.observableArray([\n        new Validations.Required(ClientResources.emptyFirstName),\n        new Validations.RegExMatchValidation(\"^[a-zA-Z]+\", ClientResources.startsWithLetterValidationMessage),\n        // The 'Reserved Resource Name Validator' makes sure the engine name is not a trademark or reserved word.\n        new Validations.ReservedResourceNameValidator(resourceType)\n    ])\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Pending Notifications in TypeScript (v3)\nDESCRIPTION: Example of creating a pending notification with formatted title and description using publishPendingNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publishPendingNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishPendingNotification({\n    title: MyNotification.Started.title.format(formatArgs),\n    description: MyNotification.Started.message.format(formatArgs),\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Refreshing EditScopeView with New Data in TypeScript\nDESCRIPTION: This code shows how to refresh the EditScopeView with new data when the Part's inputs change. It uses the fetchForExistingData method to acquire an edit scope seeded with an item identified by currentItemId.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: Def.DetailPartViewModel.InputsContract): Promise<any> {\n    // Acquires edit scope seeded with an item with id currentItemId.\n    return this._editScopeView.fetchForExistingData(inputs.editScopeId, inputs.currentItemId);\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for AvatarDefault Icon\nDESCRIPTION: Default user avatar placeholder for Azure Portal. The SVG uses gray (#A0A1A2) and light gray (#E5E5E5, #FFFFFF) colors to represent a generic user silhouette.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_106\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect fill=\"#A0A1A2\" width=\"50\" height=\"50\"/>\n<path fill=\"#E5E5E5\" d=\"M33,18.2c0,4.5-3.7,8.2-8.2,8.2c-4.5,0-8.2-3.7-8.2-8.2c0-4.5,3.7-8.2,8.2-8.2C29.3,10,33,13.7,33,18.2\"/>\n<polygon fill=\"#E5E5E5\" points=\"30.8,29.2 24.8,37.7 18.8,29.2 10.1,29.2 10.1,50 39.4,50 39.4,29.2 \"/>\n<path fill=\"#FFFFFF\" d=\"M16.5,18.2c0,4.5,3.6,8.1,8,8.2l2.1-16.2C26,10.1,25.4,10,24.8,10C20.2,10,16.5,13.7,16.5,18.2\"/>\n<polygon fill=\"#FFFFFF\" points=\"18.8,29.2 10.1,29.2 10.1,50 21.6,50 23.4,35.8 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertiesViewType as Full Screen Blade\nDESCRIPTION: JSON schema for configuring the PropertiesViewType as a full screen blade opened from a resource menu. It defines the view structure including parameters, resources, and properties groups.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Properties\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Properties Example\",\n      \"groups\": [\n        {\n          \"displayName\": \"Virtual machine\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n          \"description\": \"This is a virtual machine.\",\n          \"items\": [\n          ]\n        },\n        {\n          \"displayName\": \"Availability + scaling\",\n          \"icon\": \"MsPortalFx.Base.Images.Polychromatic.AvailabilitySet\",\n          \"items\": [\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Essentials Section with Action Resource Property (JSON)\nDESCRIPTION: Shows a property in the essentials section that enables navigation to another Azure resource identified by 'resourceId'. Requires an 'action' object with a valid resourceId string and a display value. Input parameters include the resourceId template; output is a link to open the referenced resource from essentials. Limitation: resourceId must be properly formatted and reference an existing Azure resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"propertydisplayname\",\n            \"value\": \"action resource\",\n            \"action\": {\n                \"resourceId\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Value Mapping Properties Definition in Azure Portal\nDESCRIPTION: Defines the schema for value mapping objects in Azure Portal development. Each mapping can include a required value property, optional display name, and optional icon reference.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-ValueMappingWithIcon.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|value|True|Specifies the value of the valueMapping.\n|displayName|False|Specifies the displayName for the valueMapping.\n|icon|False|Specifies the icon for the valueMapping.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Subscription Scope Deployment Properties\nDESCRIPTION: Configuration properties for subscription level deployments. Requires kind, subscriptionId, location, parameters, and template fields, with optional postCreate customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formDeployment.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"Subscription\"\n|subscriptionId|True|Specify subscriptionId for deployment\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing DataBrowse with Static Array Data\nDESCRIPTION: Example showing how to configure DataBrowse view with static array data including disk size, price, display name and creation time columns. Demonstrates basic column formatting and unit specifications.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-DataBrowseTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": [\n        {\n            \"diskSize\": 100,\n            \"price\": 100,\n            \"displayName\": \"a\",\n            \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 10000,\n            \"price\": 10000,\n            \"displayName\": \"b\",\n            \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 1500,\n            \"price\": 1500,\n            \"displayName\": \"c\",\n            \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n        }\n    ],\n    \"columns\": [\n        {\n            \"displayName\": \"Disk Size\",\n            \"name\": \"diskSize\",\n            \"format\": \"Number\",\n            \"sourceUnits\": \"Gigabytes\",\n            \"maximumFractionDigits\": 2\n        },\n        {\n            \"displayName\": \"Price\",\n            \"name\": \"price\"\n        },\n        {\n            \"displayName\": \"Display Names\",\n            \"name\": \"displayName\"\n        },\n        {\n            \"displayName\": \"Creation time\",\n            \"name\": \"creationTime\",\n            \"format\": \"Date\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: ARM Deployment Template for Resource Creation\nDESCRIPTION: ARM template that defines the resource deployment structure including parameters for name, location and tags. Used in conjunction with the Declarative Form to create resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cuid.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"location\": {\n            \"type\": \"string\"\n        },\n\t\t\"tagsByResource\": {\n\t\t\t\"type\": \"Object\"\n\t\t}\n    },\n    \"resources\": [\n        {\n            \"apiVersion\": \"2014-04-01\",\n            \"name\": \"[parameters('name')]\",\n            \"location\": \"[parameters('location')]\",\n            \"type\": \"Providers.Test/statefulIbizaEngines\",\n            \"properties\": {\n\t\t\t\t\"tags\": \"[ if(contains(parameters('tagsByResource'), 'Providers.Test/statefulIbizaEngines'), parameters('tagsByResource')['Providers.Test/statefulIbizaEngines'], json('{}')) ]\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Format in Azure Portal\nDESCRIPTION: Displays content in asterisks (*) for sensitive information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Key\",\n    \"value\": \"[resources().id]\",\n    \"format\": \"Secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Blade Reference Configuration Schema\nDESCRIPTION: Defines the schema for configuring blade references with properties including name, extension, parameters, full screen mode, and provisioning settings. All properties are optional except for the blade name which is required.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-bladeReferenceWithFullScreen.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the blade\n|extension|False|Extension name\n|parameters|False|Parameters for configuring blade\n|inFullScreen|False|Specify whether to display this blade as contextPane or in full screen\n|doesProvisioning|False|Specify whether to open this blade as Provisioning blade\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Example ServiceGroupRootReplacements.json Configuration\nDESCRIPTION: Sample JSON configuration file defining deployment parameters for different environments (production and mooncake). Includes subscription IDs, Key Vault URIs, storage settings, and other Ev2 deployment control parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"production\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ]\n    },\n    \"mooncake\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.cn/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Versions per Stage using config.json in JSON\nDESCRIPTION: This JSON snippet shows a sample `config.json` file used by the Azure portal hosting service. This file defines which version of an extension should be served for different deployment stages (e.g., stage1, stage2). The hosting service reads this file from a public endpoint to download and deploy the specified extension versions. In this example, version `2.0.0.0` is specified for all stages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$version\": \"3\",\n    \"stage1\": \"2.0.0.0\",\n    \"stage2\": \"2.0.0.0\",\n    \"stage3\": \"2.0.0.0\",\n    \"stage4\": \"2.0.0.0\",\n    \"stage5\": \"2.0.0.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for MessageBox to Disappear - C#\nDESCRIPTION: This C# snippet demonstrates how to wait for a message box to be dismissed after a user action in UI automation. It uses the WaitUntil method to poll the 'CommandBar.HasMessageBox' property, ensuring that the test only proceeds when the message box is no longer displayed. Dependencies: Portal Test Framework, 'webDriver' and 'commandBar' objects. Inputs: message box identification string. Output: None; waits for state change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncommandBar.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\nwebDriver.WaitUntil(() => !commandBar.HasMessageBox, \"There is still a message box in the command bar.\");\n```\n\n----------------------------------------\n\nTITLE: Querying Creates for a Specific Portal SDK Build\nDESCRIPTION: This query retrieves create operations that occurred with a specific Portal SDK build number in the last 15 days.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate=ago(15d),\n    endDate=ago(1d),\n    match_BuildNumber=\"8.101.0.5\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Async Validation for ARM Templates in JSON\nDESCRIPTION: This snippet defines an array of validation rules for an Azure portal form using JSON syntax in an ARM portal extension. It demonstrates asynchronous validation by awaiting results of a REST-based check and integrates skip logic and valid-state checks for a field (e.g., bot ID). Dependencies include ARM template support in the Azure portal and the relevant REST validator logic. Inputs include a field 'resourceName', and outputs indicate field validity; the await/check/skip structure enables dynamic and async validation patterns for user-entered data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"validations\\\": [\\n        {\\n            \\\"skip\\\": \\\"[equals(0, length(steps('basics').resourceName))]\\\",\\n            \\\"await\\\": \\\"[basics('botIdCheck').done]\\\",\\n            \\\"isValid\\\": \\\"[equals('botIdCheck').valid, true)]\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard View Action Reference Schema Definition - Blade Option\nDESCRIPTION: Defines the schema for blade-based action references in dashboard views. Requires a type, blade reference and display name, with optional feature flag support.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-actionReference.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|type|True|Enum permitting the value: \"blade\"\n|blade|True|See [here](dx-view-dashboardViewType-bladeReference.md) for more information.\n|displayName|True|Display name for the link.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining a Metric for Azure Portal Monitoring View\nDESCRIPTION: JSON configuration for defining a metric in the Monitoring view. The id and aggregationType must match what is available in Azure Monitor's Metric and Aggregation options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"Percentage CPU\",\n    \"aggregationType\": \"Sum\",\n    \"resourceMetadata\": {\n        \"id\": \"[parameters('id')]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ServicePrincipalSelector Configuration in JSON\nDESCRIPTION: Basic configuration structure for the ServicePrincipalSelector control showing core properties including labels, tooltips, default values, and constraints.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"ServicePrincipal\",\n\"type\": \"Microsoft.Common.ServicePrincipalSelector\",\n\"label\": {\n  \"password\": \"Password\",\n  \"certificateThumbprint\": \"Certificate thumbprint\",\n  \"authenticationType\": \"Authentication Type\",\n  \"sectionHeader\": \"Service Principal\"\n},\n\"toolTip\": {\n  \"password\": \"Password\",\n  \"certificateThumbprint\": \"Certificate thumbprint\",\n  \"authenticationType\": \"Authentication Type\"\n},\n\"defaultValue\": {\n  \"principalId\": \"<default guid>\",\n  \"name\": \"(New) default App Id\"\n},\n\"constraints\": {\n  \"required\": true,\n  \"regex\": \"^[a-zA-Z0-9]{8,}$\",\n  \"validationMessage\": \"Password must be at least 8 characters long, contain only numbers and letters\"\n},\n\"options\": {\n  \"hideCertificate\": false\n},\n\"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Deep Linking to a Key Vault Secret - URL Example - Plaintext\nDESCRIPTION: An example URL that deep links to a specific secret in Azure Key Vault via the assets pattern. Applies for scenarios requiring direct navigation to specific secrets or objects managed by an extension. {asset id} must be a valid URI for the requested object.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#asset/Microsoft_Azure_KeyVault/Secret/https://mykeyvaultname.vault.azure.net/secrets/secretName/id\n```\n\n----------------------------------------\n\nTITLE: Configuring Curated Gallery List in JSON\nDESCRIPTION: JSON configuration example for setting up a curated list of gallery items. This configuration includes an ID, categories, and specific gallery items that will appear in the Gallery Results Blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"Microsoft.WebSite-WebSite\",\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ],\n  \"items\": [\n    \"Microsoft.SQLDatabase.0.2.0-preview\",\n    \"Microsoft.ClassicStorage.0.2.0-preview\",\n    \"Microsoft.HDInsight.0.2.0-placeholder\",\n    \"Microsoft.Cache.0.2.0-preview\",\n    \"SuccessBricksInc.ClearDBMySQLDatabase.0.2.0-preview\",\n    \"ObjectLabsCorporation.MongoLab.0.2.0-placeholder\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Solutions.BladeInvokeControl in JSON\nDESCRIPTION: Defines the BladeInvokeControl for Azure portal, specifying transformation logic for display, openBladeStatus, default values, and a bladeReference with full parameterization for dynamic blade invocation. This control relies on context and outputs from related steps (e.g., Selector value) and passes them as parameters to the referenced blade. Dependencies include the existence of the referenced blade and extension, and that it's used alongside compatible selector controls. Inputs mainly consist of disk sizing parameters, and outputs include the result of the invoked blade's actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.BladeInvokeControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"type\\\": \\\"Microsoft.Solutions.BladeInvokeControl\\\",\\n    \\\"name\\\": \\\"diskSize\\\",\\n    \\\"transforms\\\": {\\n        \\\"sku\\\": \\\"{\\\\\\\"diskSizeGB\\\\\\\": join(' ',[`Disk Size:`, @.to_string(diskSizeGB), `GiB`]), \\\\\\\"subText\\\\\\\": join(', ', [@.to_string(iops), join(' ', [@.to_string(throughput), `throughput`]), @.to_string(sku)])}\\\"\\n    },\\n    \\\"openBladeStatus\\\": \\\"[steps('step1').vmDisk.changing]\\\",\\n    \\\"defaultValue\\\": {\\n        \\\"diskSizeGB\\\": 8\\n    },\\n    \\\"bladeReference\\\": {\\n        \\\"name\\\": \\\"ChangeDiskSizeBlade\\\",\\n        \\\"extension\\\": \\\"Microsoft_Azure_Compute\\\",\\n        \\\"parameters\\\": {\\n        \\\"location\\\": \\\"eastus\\\",\\n        \\\"subscription\\\": \\\"[steps('step1').resourceScope.subscription.subscriptionId]\\\",\\n        \\\"isUltraSsdEnabled\\\": false,\\n        \\\"minimumDiskSize\\\": 1,\\n        \\\"maximumDiskSize\\\": 30000,\\n        \\\"diskConfiguration\\\": {\\n            \\\"sku\\\": \\\"Premium_LRS\\\",\\n            \\\"diskSizeGB\\\": 4,\\n            \\\"iops\\\": 400,\\n            \\\"throughput\\\": 4\\n        }\\n        },\\n        \\\"inFullScreen\\\": false\\n   }\\n}\n```\n\n----------------------------------------\n\nTITLE: Finding StartBoard Part using Custom Method in C#\nDESCRIPTION: Demonstrates a custom method to find a StartBoard part by its title, which is a more verbose approach compared to using built-in framework methods.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = webDriver.WaitUntil(\n    () => portal.StartBoard.FindElements<Part>()\n    .FirstOrDefault(p => p.PartTitle.Equals(\"TheTitle\")),\n    \"Could not find a part with title 'Samples'.\");\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Load Performance and Usage with Kusto\nDESCRIPTION: This Kusto query analyzes the load performance and usage statistics for a specific Azure Portal extension over the last 14 days. It filters the `ClientTelemetry` table for completed `ExtensionLoad` actions, calculates the total loads, distinct user count, and 50th, 80th, and 95th percentiles of load duration, aggregated daily. Replace 'HubsExtension' with the target extension name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where action == \"ExtensionLoad\"\n| where actionModifier == \"complete\"\n| where name == \"HubsExtension\"\n| summarize Loads = count(), Users = dcount(userId, 4), percentiles(duration, 50, 80, 95) by bin(PreciseTimeStamp, 1d)\n```\n\n----------------------------------------\n\nTITLE: Property View Item Format Enumeration Values\nDESCRIPTION: Defines the allowed format values for property view items. Includes NoFormat for unformatted values, String for text, Date for temporal values, Number for numeric values, and Secret for sensitive data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-propertiesViewItemReference-format.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NoFormat\n- String\n- Date\n- Number\n- Secret\n```\n\n----------------------------------------\n\nTITLE: Querying Create Flow Funnel Data in Kusto\nDESCRIPTION: This Kusto query retrieves create flow funnel data for the last 30 days, including metrics like create flow launched, deployment started, and deployment succeeded.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\nlet timeSpan = 30d;\nlet startDate = GetStartDateForLastNDays(timeSpan);\nlet endDate = GetEndDateForTimeSpanQueries();\nGetCreateFunnel(startDate, endDate)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FileUpload Output for Multiple URLs (JSON)\nDESCRIPTION: Illustrates the JSON output format when options.multiple is true and options.uploadMode is url. The output is an array of URLs as JSON strings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"https://myaccount.blob.core.windows.net/pictures/\",\n  \"https://myaccount.blob.core.windows.net/pictures/\",\n  \"https://myaccount.blob.core.windows.net/pictures/\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Alerts Structure in JSON\nDESCRIPTION: Provides the overall JSON structure for defining alerts for an Azure Portal extension. It includes enabling the extension's alerts, defining multiple environments (like `portal.azure.com`, `portal.azure.cn`), and specifying configurations for different alert types such as `availability`, `clientError`, `create`, and `performance` within each environment. The `create` array holds specific configurations for create blade alerts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-create.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"],\n            \"availability\": [...], // Optional\n            \"clientError\": [...], // Optional.\n            \"create\": [\n                 {\n                    \"type\": \"regression\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n            ],\n            \"performance\": [...], // Optional.\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            \"create\": [\n                {\n                    ...\n                }\n                ...\n             ]\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Key Vault Certificate Selector Control (JSON)\nDESCRIPTION: This JSON snippet defines a UI control named `keyVaultCertificateSelection` of type `Microsoft.KeyVault.KeyVaultCertificateSelector`. It's configured to be visible, provides a tooltip \"Select certificate\", and its scope is dynamically set using expressions to derive the `subscriptionId` and `location` from a preceding step named 'basics'. The control displays the label \"KeyVault certificates selection\" and is intended for use in Azure portal UI definitions or custom deployment experiences to allow users to select an existing Key Vault certificate.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.KeyVault.KeyVaultCertificateSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"keyVaultCertificateSelection\",\n    \"type\": \"Microsoft.KeyVault.KeyVaultCertificateSelector\",\n    \"visible\": true,\n    \"toolTip\": \"Select certificate\",\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"label\": \"KeyVault certificates selection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Robot and Updating QueryCache with TypeScript\nDESCRIPTION: This code shows how to delete a robot via a DELETE request, notify the shell of the asset deletion, and update the client-side cache using applyChanges. It removes the item from the dataset directly, avoiding an additional server request to refresh the data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npublic deleteRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot + robot.name(),\n        type: \"DELETE\",\n    }).then(() => {\n        // This will notify the shell that the robot is being removed.\n        MsPortalFx.UI.AssetManager.notifyAssetDeleted(ExtensionDefinition.AssetTypeNames.robot, robot.name());\n\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.robotsQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we deleted a robot in the cache, so we will reflect this change on the client side.\n            dataSet.removeItem(robot);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Logging in TypeScript for Azure Portal Extensions\nDESCRIPTION: Demonstrates how to use the provided API to write log messages that appear in the browser console and can be sent to the server.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Base.Diagnostics.Log.writeEntry(\n    MsPortalFx.Base.Diagnostics.LogEntryLevel.Error,\n    \"Area of your application\",\n    \"The message you would like to log\",\n    \"Extra parameter 1\",\n    \"Extra parameter 2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Deployment Flow in Azure Portal Form\nDESCRIPTION: This snippet demonstrates how to implement a custom deployment flow using the onSubmit property in the deployment configuration. It allows opening a sequence of custom blades before the actual deployment starts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\"deployment\": {\n    \"kind\": \"ResourceGroup\",\n    \"resourceGroupId\": \"[steps('basics').resourceGroup.value.resourceId]\",\n    \"location\": \"[if(equals('New', steps('basics').resourceGroup.modeName), steps('basics').location.name, steps('basics').resourceGroup.value.location)]\",\n    \"onSubmit\": [\n        {\n            \"condition\": \"[equals(length(parameters('msAppId')), 0)]\",\n            \"blade\": {\n                \"name\": \"ConvergedAppRegisterBlade\",\n                \"inContextPane\": true,\n                \"parameters\": {\n                    \"name\": \"[steps('basics').resourceName]\",\n                    \"hideButton\": true\n                },\n                \"outputItem\": \"app\",\n                \"transforms\": {\n                    \"parameters\": \"{msAppId:appId,msAppPassword:appPassword}\"\n                }\n            }\n        }\n    ],\n    \"parameters\": {\n        \"botId\": \"[steps('basics').resourceName]\",\n        \"sku\": \"[steps('basics').botSku]\",\n        \"msAppId\": \"[coalesce(steps('basics').existingApp.botAppId, '')]\",\n        \"msAppPassword\": \"[coalesce(steps('basics').existingApp.botAppPassword, '')]\"\n    },\n    \"template\": {\n        \"file\": \"./createWithComposer.json\"\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Child Resource Asset Definition in Azure Portal\nDESCRIPTION: This JSON snippet shows how to configure a child resource asset definition in Azure Portal. It includes the proxyAssetType configuration with create blade reference, which passes the parent resource Id to the create operation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../Definitions/dx.schema.json\",\n    \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n    \"proxyAssetType\": {\n        \"name\": \"MyDxChildResource\",\n        \"resourceType\": {\n        \"name\": \"Microsoft.OperationalInsights/Workspaces/savedSearches\",\n        \"apiVersion\": \"2020-03-01-preview\"\n    },\n    \"displayNames\": {\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Dashboard\", \n    \"create\": {\n        \"blade\": {\n        \"name\": \"SavedSearchCreate_Dx\",\n        \"parameters\": {\n        \"id\": \"{resourceId}\"\n        }\n    }\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Assigned Managed Identity in Azure ARM Template - JSON\nDESCRIPTION: This snippet defines the identity section for an Azure Resource Manager (ARM) template that assigns a user-assigned managed identity to a resource. The 'type' property is set to 'UserAssigned', and the 'userAssignedIdentities' object lists one or more managed identity resource IDs (in this case, a sample ID ending in 'TestUserIdentity1'). Prerequisites include having an existing user-assigned identity in your Azure subscription. Inputs include the resource ID(s) for user-assigned identities, and outputs are the managed identity assignments on the target Azure resource. The configuration is constrained by Azure requirements for identity assignment in ARM deployments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.ManagedIdentity.IdentitySelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"UserAssigned\",\n    \"userAssignedIdentities\": {\n        \"/subscriptions/xxxx/resourceGroups/ManagedIdentityTest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/TestUserIdentity1\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Property for Essentials Panel - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a 'Status' property for the Essentials panel view model. It leverages Knockout.js computed observables to determine and reactively update the displayed engine status, and links the isLoading property to an EntityView's or QueryView's loading state to manage UI loading indicators. Dependencies include Knockout.js, Azure portal client frameworks, and localization resources. Expected input is an engineView containing engine status, and outputs are dynamic status labels for the UI. Do not use deprecated base classes for the view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Status property\\nlet statusValue = ko.computed(lifetime, () => {\\n    let status = engineView.item() && engineView.item().status();\\n    switch (status) {\\n        case EngineData.EngineStatus.Running:\\n            return ClientResources.engineStatusRunning;\\n        case EngineData.EngineStatus.OilLow:\\n            return ClientResources.engineStatusLowOil;\\n        case EngineData.EngineStatus.Seized:\\n            return ClientResources.engineStatusSeized;\\n    }\\n    return \\\"unhandled status: {0}\\\".format(status);\\n});\\nlet engineView = this._engineView;\\nlet statusIsLoading = engineView.loading;  // A loading indicator is shown while the Engine data is loading.\\n\\nreturn <MsPortalFx.ViewModels.Parts.ResourceSummary.Options2>{\\n    getQuickStartSelection: getQuickStartSelection,\\n    getSettingsSelection: getAllSettingsSelection,\\n    getKeysSelection: getKeysSelection,\\n    collapsed: false,\\n    status: {\\n        value: statusValue,\\n        isLoading: statusIsLoading\\n    },\\n    staticProperties: properties\\n};\n```\n\n----------------------------------------\n\nTITLE: Knockout Control Binding\nDESCRIPTION: Shows how to bind a control to the view using Knockout's pcControl binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-controls.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-bind='pcControl: myControl'></div>\n```\n\n----------------------------------------\n\nTITLE: Command Bar Implementation\nDESCRIPTION: Implements save and discard commands with proper enabling/disabling logic based on EditScope state and saving status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst saveCommand = new Toolbars.CommandButton();\nsaveCommand.label(ClientResources.saveText);\nsaveCommand.icon(FxBase.Images.Save());\nsaveCommand.command = {\n    canExecute: ko.pureComputed(() => {\n        const editScope = this._editScopeView.editScope();\n        const editScopeDirty = editScope ? editScope.dirty() : false;\n        return !this._saving() && editScopeDirty;\n    }),\n    execute: (): Promise<any> => {\n        return this._editScopeView.editScope().saveChanges();\n    },\n};\n\nconst discardCommand = new Toolbars.CommandButton();\ndiscardCommand.label(ClientResources.discardText);\ndiscardCommand.icon(MsPortalFx.Base.Images.Delete());\ndiscardCommand.command = {\n    canExecute: ko.pureComputed(() => {\n        const editScope = this._editScopeView.editScope();\n        const editScopeDirty = editScope ? editScope.dirty() : false;\n        return !this._saving() && editScopeDirty;\n    }),\n    execute: (): Promise<any> => {\n        this._editScopeView.editScope().revertAll();\n        return null;\n    },\n};\n\nthis.commandBar = new Toolbars.Toolbar(this._ltm);\nthis.commandBar.setItems([saveCommand, discardCommand]);\n```\n\n----------------------------------------\n\nTITLE: SVG Element Color Class Implementation\nDESCRIPTION: Example showing proper usage of color classes within SVG elements. The SVG element contains a g element with a rect that uses the msportafx-bgcolor class for styling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<svg>\n    <g>\n        <rect class=\"msportafx-bgcolor-i0t2\"/>\n    </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Validating Name Availability via ARM API Control and TextBox - JSON\nDESCRIPTION: This snippet defines a portal form step that validates an account name using an ARM API Control and enforces constraints on a TextBox input. The checkNameAvailabilityApi performs a POST request to Microsoft's CognitiveServices API, checking if the entered sub-domain is available. The accountName TextBox requires valid alphanumeric, underscore, or hyphen input (2-64 chars, regex constraint), and ensures the name is available before accepting it. Dependencies include correct configuration of ARM API Control, and isValid/regex validation expressions. User input and API responses determine validation; errors prompt users for alternate names.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"steps\": [\n    {\n        \"name\": \"basics\",\n        \"label\": \"Basics\",\n        \"elements\": [\n            {\n                \"name\": \"resourceScope\",\n                \"type\": \"Microsoft.Common.ResourceScope\"\n            },\n            {\n                \"name\": \"checkNameAvailabilityApi\",\n                \"type\": \"Microsoft.Solutions.ArmApiControl\",\n                \"request\": {\n                    \"method\": \"POST\",\n                    \"path\": \"[concat(steps('basics').resourceScope.subscription.id, '/providers/Microsoft.CognitiveServices/checkDomainAvailability?api-version=2017-04-18')]\",\n                    \"body\": \"[parse(concat('{\\\"subDomainName\\\":', string(steps('basics').accountName), ',\\\"type\\\": \\\"Microsoft.CognitiveServices/accounts\\\"}'))]\"\n                }\n            },\n            {\n                \"name\": \"accountName\",\n                \"type\": \"Microsoft.Common.TextBox\",\n                \"label\": \"Name\",\n                \"defaultValue\": \"\",\n                \"toolTip\": \"Test tooltip\",\n                \"constraints\": {\n                    \"required\": true,\n                    \"validations\": [\n                        {\n                            \"isValid\": \"[or(equals(string(steps('basics').checkNameAvailabilityApi.isSubdomainAvailable), 'true'), not(contains(steps('basics').checkNameAvailabilityApi, 'isSubdomainAvailable')))]\",\n                            \"message\": \"The sub-domain name is already used. Please pick a different name.\"\n                        },\n                        {\n                            \"regex\": \"^[a-z0-9A-Z][a-z0-9A-Z-_]{0,62}[a-z0-9A-Z]$\",\n                            \"message\": \"Only alphanumeric characters, underscores and hyphens are allowed, and the value must be 2-64 characters long.\"\n                        }\n                    ]\n                },\n                \"visible\": true\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring DeleteCommand for Azure Command Bar (JSON)\nDESCRIPTION: Specifies a DeleteCommand object that adds a delete button to the resource's command bar in the Azure portal, prompting for a confirmation dialog and using a specific API version for the deletion operation. Requires both a 'confirmation' object (with dialog text) and a 'definition' object specifying 'apiVersion', in addition to basic command metadata fields. Inputs include command display data and confirmation messages, output is a deletion action with user prompt. Limitation: The API version must match what's supported by the target Resource Provider.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"DeleteCommand\",\n        \"id\": \"deleteCommand\",\n        \"displayName\": \"delete\",\n        \"icon\": \"MsPortalFx.Base.Images.Delete\",\n        \"confirmation\": {\n          \"title\": \"deleteResourceTitle\",\n          \"message\": \"deleteResourceMessage\"\n        },\n        \"definition\": {\n          \"apiVersion\": \"2014-04-01\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Output Schema for Microsoft.Network.PublicIpAddressCombo Control\nDESCRIPTION: Example of the JSON output generated by the Microsoft.Network.PublicIpAddressCombo control. This output includes the IP name, resource group, domain name label, creation type (new/existing/none), allocation method, and SKU information that can be used in deployment templates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.PublicIpAddressCombo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"demo\",\n    \"resourceGroup\": \"TestRG\",\n    \"domainNameLabel\": \"demoaddress\",\n    \"newOrExistingOrNone\": \"new\",\n    \"publicIPAllocationMethod\": \"Dynamic\",\n    \"sku\": \"Basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Revealing Content Immediately with Synchronous Data Extraction - Azure Portal Part (TypeScript)\nDESCRIPTION: Illustrates calling container.revealContent() immediately within onInputsSet when the essential UI information can be synchronously derived from the inputs, prior to launching further async loading. The promise returned still governs indicator visibility. Dependencies: ResourceTypes, resource descriptor parser, TypeScript, _dataView promise-fetching. Inputs: inputs with resourceId. Outputs: UI responds immediately, indicators persist until async fetch is complete. Useful for cases where required info doesn't require async calls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parts-revealContent.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: MyPartInputs): Promise {\n\n    // In this case, the 'resourceGroupName' is sufficient to allow the user to interact with the Part/Blade.\n    var resourceDescriptor = ResourceTypes.parseResourceManagerDescriptor(inputs.resourceId);\n    this.resourceGroupName(resourceDescriptor.resourceGroup);\n    this._container.revealContent();\n\n    // This Promise controls the lifetime of all loading indicators (the\n    // non-blocking one in this case, since 'container.revealContent()' has been called).\n    return this._dataView.fetch(inputs.resourceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ViewTypeCommands and ViewCommandKinds Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the viewTypeCommands and viewCommandKinds objects. It specifies the 'kind' property as required and references external documentation for command kinds. The 'fx.feature' property is listed as optional.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewCommandKinds.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|See [here](dx-enum-viewCommandKinds-kind.md) for more on Command kinds.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Output Format of Microsoft.Common.DropDown Control\nDESCRIPTION: This snippet shows the output format produced by the Microsoft.Common.DropDown control when a selection is made. In this example, the output is the value of the selected item (\"two\").\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DropDown.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"two\"\n```\n\n----------------------------------------\n\nTITLE: Form Step Properties Schema Definition\nDESCRIPTION: Markdown table defining the required and optional properties for form steps/tabs, including name, label, description, elements list and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formSteps-formStep.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the step/tab instance\n|label|True|Display name of the step/tab\n|description|False|Description of the step/tab\n|elements|True|List of form controls to be rendered in the step. <br> See [formControls](dx-view-formViewType-formControls.md). <br> If using, always put Microsoft.Common.ResourceScope as a first item.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed File Extensions in Azure Portal\nDESCRIPTION: Code snippet demonstrating how to specify allowed file extensions using the constraints.allowedFileExtensions property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.StorageBlobSelector-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"constraints\": {\n  \"allowedFileExtensions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic EntityView Item Observable Subscription in Azure Portal\nDESCRIPTION: Example of a problematic implementation for subscribing to EntityView item changes. This approach doesn't work as expected during refresh operations because data merging happens in-place rather than replacing objects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nentityView.item.subscribe(lifetime, () => {\n    const item = entityView.item();\n    if (item) {\n        // Do something with 'newItem' after refresh.\n        doSomething(item.customerName());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag Replacement in JSON Configuration\nDESCRIPTION: This snippet demonstrates how to use the 'fx.feature' property to conditionally replace a JSON object based on a feature flag value. It shows the structure for defining a replacement when the flag 'foo' equals 'oof'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-FeatureFlags.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"customerId\",\n            \"value\": \"foo is not oof\",\n            \"fx.feature\": {\n                \"name\": \"foo\",\n                \"replaceWhen\": \"ValueEquals\",\n                \"value\": \"oof\",\n                \"replacement\": {\n                    \"displayName\": \"customerId\",\n                    \"value\": \"foo is oof\"\n                }\n            }\n        },\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Deployment with config.json in Azure Portal Extensions\nDESCRIPTION: This JSON configuration file specifies the versions that the hosting service needs to download, process and serve. It defines the staged rollout across different regions using version numbers and includes optional friendly names for testing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$version\": \"3\",\n    \"stage1\": \"1.0.0.5\",\n    \"stage2\": \"1.0.0.4\",\n    \"stage3\": \"1.0.0.3\",\n    \"stage4\": \"1.0.0.2\",\n    \"stage5\": \"1.0.0.1\",\n    \"friendlyName\": \"2.0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for Azure Portal Printer Resource Type Definition in TypeScript\nDESCRIPTION: Imports necessary modules and types from Azure Portal FX (`Fx/*`, `MsPortalFx.*`), client resources, generated definitions (`_generated/ExtensionDefinition`), shared utilities, and specific data contexts/helpers for defining the Printer resource type's behavior within the Azure Portal. It includes dependencies for dependency injection, resource management, UI components (Blades, ViewModels, Controls), diagnostics, and asset definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Di from \"Fx/DependencyInjection\";\nimport { ArmId } from \"Fx/ResourceManagement\";\nimport * as ClientResources from \"ClientResources\";\nimport { BladeReferences } from \"Fx/Composition\";\nimport { ViewModels } from \"_generated/ExtensionDefinition\";\nimport { processSupplementalData } from \"../../../Shared/ResourceData\";\nimport { handleResourceMenuFailures } from \"../../../Shared/ResourceTypesCommon\";\nimport { DataContext, TestHelpersForSamplesExtensionOnly } from \"../../ResourceTypesArea\";\nimport { PrinterStatus } from \"../PrinterData\";\nimport { PrinterImages as Images } from \"../PrinterLogos\";\n\n// NOTE: For the resource menu configuration, the menu item and group IDs ('id' property) should be unique within the\n//       menu configuration, should not be localized or changed (the ID is part of the deep link for the blade within\n//       the menu) and should not contain any spaces and should be lowercase. The ID is the unique identifier for the\n//       groups and items.\n\nimport FxBase = MsPortalFx.Base;\nimport FxDiagnostics = FxBase.Diagnostics;\nimport FxStatusBadges = FxBase.Images.StatusBadge;\nimport FxContainerContract = MsPortalFx.ViewModels.ContainerContract;\nimport GridFormat = MsPortalFx.ViewModels.Controls.Lists.Grid.Format;\nimport FxAssets = MsPortalFx.Assets;\nimport Definition = ViewModels.ResourceTypes.PrinterViewModel;\n\nconst log = FxDiagnostics.createLog(require);\nconst entityResourceType = \"microsoft.test/printers\";\n\nconst MenuStrings = ClientResources.ResourceMenu.Printer;\nconst MenuKeywords = ClientResources.ResourceMenuKeyword.Printer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Capabilities Tab Schema\nDESCRIPTION: JSON schema for defining capability tiles in Azure Portal's Capabilities tab. Demonstrates configuration of backup, disaster recovery, insights, and security capabilities with status indicators, icons, and actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Capabilities\",\n  \"capabilities\": [\n    {\n      \"title\": \"Backup\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Backup\",\n      \"description\": \"Simple and reliable server backup to the cloud\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[contains(resources().name, 'test')]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Disaster recovery\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SiteRecovery\",\n      \"description\": \"Replicate your virtual machine to another Azure region\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[not(contains(resources().name, 'test'))]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"true\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"false\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Insights\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Insights\",\n      \"description\": \"Enable logs and detailed monitoring capabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      },\n      \"status\": {\n        \"value\": \"[resources().properties.test]\",\n        \"valueMapping\": [\n          {\n            \"value\": \"present\",\n            \"displayName\": \"Configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Success\"\n          },\n          {\n            \"value\": \"notPresent\",\n            \"displayName\": \"Not configured\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.None\",\n            \"action\": {\n              \"blade\": {\n                \"name\": \"\",\n                \"extension\": \"\",\n                \"parameters\": {},\n                \"inContextPane\": true\n              }\n            }\n          },\n          {\n            \"value\": \"null\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          },\n          {\n            \"value\": \"undefined\",\n            \"displayName\": \"Error\",\n            \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Error\"\n          }\n        ]\n      }\n    },\n    {\n      \"title\": \"Security\",\n      \"icon\": \"MsPortalFx.Base.Images.Polychromatic.SslCustomDomains\",\n      \"description\": \"Continuously monitor your VM for potential security vulnerabilities\",\n      \"action\": {\n        \"menu\": \"tags\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Messages for Resource State in Azure Portal (JSON)\nDESCRIPTION: Demonstrates configuring the 'messages' array for a resource overview, where each entry conditionally displays a message (info, success, warning, or error) depending on resource state, and supports actions such as navigating to a resource, blade, or external URL. Required parameters for each message include 'kind', 'message', and (optionally) a 'visible' expression and 'action' object (which can specify a resourceId, blade details, or URL). The first visible message is shown; order affects precedence. Limitation: Only the first 'true' visible message will be rendered even if multiple conditions are satisfied.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"messages\": [\n      {\n        \"kind\": \"error\",\n        \"message\": \"vm is deallocated\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/deallocated')]\",\n        \"action\": {\n          \"resourceId\": \"/subscriptions/415b6834-1801-4f6e-a285-f646ec13fe34/resourceGroups/AzureMobileTest/providers/Microsoft.Network/virtualNetworks/AzureMobileTest-vnet\"\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running1\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   },\n                   \"inContextPane\": true\n                 }\n        }\n      },\n      {\n        \"kind\": \"success\",\n        \"message\": \"vm is running2\",\n        \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\",\n        \"action\": {\n          \"blade\":\n                 {\n                   \"name\": \"AzureMonitoringBrowseBlade\",\n                   \"extension\": \"Microsoft_Azure_Monitoring\",\n                   \"parameters\": {\n                     \"resId\": \"[resources().id]\"\n                   }\n                 }\n        }\n      },\n      {\n        \"kind\": \"info\",\n        \"message\": \"Welcome to our extension! please take a look at our tutorial\",\n        \"action\": {\n          \"url\": \"https://ms.portal.azure.com/\"\n        }\n      }\n    ],\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selector for Element Selection in C#\nDESCRIPTION: Demonstrates the use of CSS selectors for finding web elements, which is preferred over XPath due to better browser compatibility and performance.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ngrid.FindElements(By.CssSelector(\"[aria-selected=true]\"))\n```\n\n----------------------------------------\n\nTITLE: GalleryViewType Properties Option 2\nDESCRIPTION: Configuration options for the second variant of GalleryViewType properties section, including title, elements, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-galleryViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|\n|elements|True|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring deployment.postCreate in FormBladeCreate.Dx.jsonc\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'deployment' property in FormBladeCreate.Dx.jsonc, including the 'postCreate' section. It shows optional fields like 'assetType', 'provisioningHash', and 'primaryResourceId', as well as other deployment-related properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-deployment-postCreate.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"deployment\": {\n  \"kind\": \"ResourceGroup\",\n  \"postCreate\": {\n    \"assetType\": \"MyAssetType2\",\n    \"provisioningHash\": \"This string is passed using provisioningHash\",\n    \"primaryResourceId\": \"[concat(steps('step1').resourceScope.resourceGroup.id, '/providers/Microsoft.Network/routeTables/', steps('step1').resourceScope.resourceName)]\"\n  },\n  \"resourceGroupId\": \"[steps('step1').resourceScope.resourceGroup.id]\",\n  \"parameters\": {\n    \"name\": \"[steps('step1').resourceScope.resourceName]\",\n    \"location\": \"centralus\"\n  },\n  \"template\":\n  {\n    \"file\": \"../../UiDef/DxExtensionResource/DeploymentTemplate.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions for a Part in XML\nDESCRIPTION: This snippet demonstrates how to define permissions for a part in XML, specifying the required action, asset type, and asset ID.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Part>\n  <Part.Permissions>\n    <Permission\n        Action=\"Arm.Namespace/resourceType/action\"\n        AssetType=\"{AssetTypeReference Robot, Extension=Company_Suite_Component}\"\n        AssetId=\"id\"/>\n  </Part.Permissions>\n</Part>\n```\n\n----------------------------------------\n\nTITLE: Referencing ARM Request Responses in PropertiesViewType\nDESCRIPTION: Examples of how to reference the responses from ARM requests within property items. It demonstrates accessing nested properties and conditional visibility based on response values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk Size\",\n    \"value\": \"[resources().properties.storageProfile.osDisk.diskSizeGB]\",\n    \"sourceUnits\": \"Gigabytes\",\n    \"maximumFractionDigits\": 2\n}\n{\n    \"displayName\": \"Visible if VM running\",\n    \"value\": \"[resources('vmInstanceView').properties.instanceView.statuses.1.displayStatus]\",\n    \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Percentage-Based Client Error Alert Criteria in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a percentage-based client error alert within the `clientError` array. It specifies the alert `type` as \"percentage\", enables it, and defines criteria such as `severity`, `minAffectedUserCount`, and `minAffectedUserPercentage`. It also shows how to use the `exclusion` property with \"or\" logic to ignore errors containing specific messages, and optionally filter alerts by `safeDeploymentStage` and `datacenterCode`. Up to 3 exclusion messages are supported.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-error-messages.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"percentage\",\n        \"enabled\": true,\n        \"criteria\":[\n            {\n                \"severity\": 3,\n                \"enabled\": true,\n                \"minAffectedUserCount\": 2,\n                \"minAffectedUserPercentage\": 10.0,\n                \"exclusion\": {\n                    \"type\": \"or\", // Only support value \"and\", \"or\".\n                    \"message1\":\"eastus2stage\",\n                    \"message2\":\"eastus2(stage)\"\n                },\n                \"safeDeploymentStage\": [\"3\"], // Optional. It does not support asterisk(\"*\") sign.\n                \"datacenterCode\": [\"AM\"] // Optional.\n            },\n            ...\n        ]\n    },\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a View on QueryCache in TypeScript\nDESCRIPTION: Creates a view (`_websitesQueryView`) over the `websitesQuery` (a QueryCache instance obtained from the `dataContext`). This view provides methods like `fetch()` to populate the underlying cache and exposes an observable `items` array for UI controls to bind to. The `container` parameter, likely a lifetime manager, ensures the view is disposed correctly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websitesQueryView = dataContext.websitesQuery.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Opening Blade In-Place in TypeScript\nDESCRIPTION: Shows how to open a blade in-place by setting the inPlace option to true. This causes the blade to replace the current blade rather than opening as a new blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onOpenBladeInPlaceButtonClick() {\n    void this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference(), { inPlace: true });\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request for Listing Storage Account Keys\nDESCRIPTION: Implements a direct POST request to list storage account keys using a specific storage account path with conditional execution.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources-guidance.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n          \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/      Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n          \"apiVersion\": \"2021-09-01\",     \n          \"name\": \"storageAccount\"    \n      },\n      {       \n         \"name\": \"testPOSTList\",\n         \"method\": \"POST\",    \n         \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/Microsoft.Storage/storageAccounts/e2eteststorageaccount/listKeys\",     \n         \"apiVersion\": \"2021-09-01\",    \n         \"condition\": \"[not(empty(resources('storageAccount').id))]\"     \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST listcount\",\n              \"value\": \"[resources('testPOSTList').keys.length]\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Validation in Azure Portal Form\nDESCRIPTION: Shows how to set up asynchronous validation logic that waits for a REST call to complete before validating the input.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"validations\": [\n        {\n            \"skip\": \"[equals(0, length(steps('basics').resourceName))]\",\n            \"await\": \"[basics('botIdCheck').done]\",\n            \"isValid\": \"[equals('botIdCheck').valid, true)]\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Blade URL Parameters in the ViewModel (TypeScript)\nDESCRIPTION: This ViewModel example demonstrates accepting typed input parameters (specifically, 'id') from the blade’s declaration and wiring them to observable properties. It logs the provided 'id' to the console within the onInputsSet lifecycle callback. Requires referencing the 'Def.InputsContract' signature type, the Azure portal SDK, and proper blade parameter declaration in PDL. Intended for scenarios where blades are invoked with dynamic input.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Def = ExtensionDefinition.ViewModels.Resource.MyTemplateBladeViewModel;\n\nexport class MyTemplateBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    // this property is part of the blade signature and is passed into onInputSet\n    public id: KnockoutObservable<string>;\n\n    public infoBox: MsPortalFx.ViewModels.Controls.InfoBox.BaseViewModel;\n\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: any) {\n        super();\n        this.title(\"InfoBox\");\n        this.subtitle(\"InfoBox Playground\");\n\n        this.infoBox = new MsPortalFx.ViewModels.Controls.InfoBox.LinkViewModel(container, {\n            text: ko.observable<string>('Go to the Azure Portal'),\n            image: ko.observable(MsPortalFx.Base.Images.Info()),\n            clickableLink: ko.observable(MsPortalFx.ViewModels.Part.createClickableLinkViewModel(ko.observable<string>('https://portal.azure.com'))\n        });\n    }\n\n    public onInputsSet(inputs: Def.InputsContract): Promise<any> {\n        // write the input property to the console\n        console.log(inputs.id);\n        return Promise.resolve();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Empty Value in JSON TextBox - JSON\nDESCRIPTION: This snippet demonstrates how an empty string (\"\") is represented in JSON for a Microsoft.Common.TextBox's default value scenario. No dependencies are required beyond basic JSON parsing and rendering within UI controls. The expected input is a JSON-formatted empty string, with the output being a control set to blank. Limitations include the inability to represent other data types directly (such as null or numbers) in this context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBox-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating AssetViewModel Skeleton in TypeScript\nDESCRIPTION: This TypeScript code provides a skeleton for the AssetViewModel class, which is required for implementing the Resource Menu. It includes a constructor with necessary parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyResourceViewModel\n    implements ExtensionDefinition.ViewModels.MyResourceViewModel.Contract {\n\n    constructor(container: FxContainerContract, initialState: any, dataContext: DataContext) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Metadata and Interface for Editable String Arrays in TypeScript\nDESCRIPTION: Defines metadata for a wrapper type (`StringWrapperType`) using `MsPortalFx.Data.Metadata.setTypeMetadata`. This metadata marks the type as an entity (`entityType: true`), enabling its use within an `EditScope` for editable grids. An interface `StringWrapperType` is also defined, containing a Knockout observable string `value`, to structure the wrapped string data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst wrapperTypeMetadataName = \"ParameterProviderWithEditableStringsBladeViewModel_StringWrapperType\";\nMsPortalFx.Data.Metadata.setTypeMetadata(wrapperTypeMetadataName, {\nname: wrapperTypeMetadataName,\nproperties: {\n    value: null,\n},\nentityType: true,\n});\n\nexport interface StringWrapperType {\nvalue: KnockoutObservable<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Alerts for National Clouds in JSON\nDESCRIPTION: Demonstrate how to configure alert environments specifically for national clouds within the Azure portal alerting system. This JSON snippet shows multiple environment entries targeting different combinations of portal domains, including standard Azure (`portal.azure.com`), internal (`ms.portal.azure.com`), and national clouds like China (`portal.azure.cn`) and US Government (`portal.azure.us`). You can use the same or different criteria sets for each defined environment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-availability.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   ...\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"ms.portal.azure.com\", \"portal.azure.cn\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.cn\",\"portal.azure.us\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.us\"],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FileUpload Output for Single URL (JSON)\nDESCRIPTION: Shows the JSON output format when options.multiple is false and options.uploadMode is url. The output is a single URL as a JSON string.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"https://myaccount.blob.core.windows.net/pictures/\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Action for Property Item (JSON)\nDESCRIPTION: This snippet defines a property item configured with a clickable 'resourceId' action. The action opens the Resource Overview page for the specified Azure resource, using a resource identifier with parameter tokens (such as subscription, resourcegroup, provider, etc.). This enables in-portal navigation to specific Azure resources from property items, assuming valid resource identifiers are provided.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Open a resource\\\",\\n    \\\"value\\\": \\\"Resource name\\\",\\n    \\\"action\\\": {\\n        \\\"resourceId\\\": \\\"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BladeInvokeControl for Disk Size Modification in Azure Portal UI JSON\nDESCRIPTION: This JSON snippet defines a `Microsoft.Solutions.BladeInvokeControl` named `diskSize`. It's designed to open a specific Azure management blade (`ChangeDiskSizeBlade` from `Microsoft_Azure_Compute` extension) for modifying disk size. The `transforms` property uses JMESPath expressions to format strings for display, combining values like disk size, IOPS, and throughput. The blade opening is triggered based on the changing state of the `vmDisk` control from a previous step (`steps('step1').vmDisk.changing`). Parameters such as location, subscription, size limits, and initial disk configuration are passed to the invoked blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Selector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Solutions.BladeInvokeControl\",\n    \"name\": \"diskSize\",\n    \"transforms\": {\n        \"sku\": \"{\\\"diskSizeGB\\\": join(' ',[`Disk Size:`, @.to_string(diskSizeGB), `GiB`]), \\\"subText\\\": join(', ', [@.to_string(iops), join(' ', [@.to_string(throughput), `throughput`]), @.to_string(sku)])}\"\n    },\n    \"openBladeStatus\": \"[steps('step1').vmDisk.changing]\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 8\n    },\n    \"bladeReference\": {\n        \"name\": \"ChangeDiskSizeBlade\",\n        \"extension\": \"Microsoft_Azure_Compute\",\n        \"parameters\": {\n        \"location\": \"eastus\",\n        \"subscription\": \"[steps('step1').resourceScope.subscription.subscriptionId]\",\n        \"isUltraSsdEnabled\": false,\n        \"minimumDiskSize\": 1,\n        \"maximumDiskSize\": 30000,\n        \"diskConfiguration\": {\n            \"sku\": \"Premium_LRS\",\n            \"diskSizeGB\": 4,\n            \"iops\": 400,\n            \"throughput\": 4\n        }\n        },\n        \"inFullScreen\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Flighting for No-PDL Knockout Blade Redirects using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates enabling flighting for a Blade redirect targeting a No-PDL Knockout blade. The `useFlighting: true` option is added to the `@TemplateBlade.ReplacesOldBlade.Decorator`. This allows the redirect to be controlled via the Azure Portal experimentation platform (ExP), enabling staged rollouts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\n@TemplateBlade.ReplacesOldBlade.Decorator({\n\treplacedBlade:  \"LegacyBlade\",\n\textension:      \"LegacyExtension\",\n\tuseFlighting:  \ttrue,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid ViewModel with QueryCache View Items in TypeScript\nDESCRIPTION: Initializes a `Grid.ViewModel` instance for displaying `WebsiteModel` data. It binds the grid's data source directly to the `items` observable array property of the `_websitesQueryView`. This ensures the grid automatically reflects changes in the view's data whenever a fetch operation completes. `_lifetime`, `extensions`, and `extensionsOptions` are passed for lifetime management and grid configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.grid = new Grid.ViewModel<WebsiteModel, number>(this._lifetime, this._websitesQueryView.items, extensions, extensionsOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating a Strongly Typed Blade Reference in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a strongly typed blade reference for a Website blade with parameters using the BladeReferences API from the Fx/Composition module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BladeReferences } from \"Fx/Composition\";\n…\nvar bladeRef = BladeReferences.forBlade(\"WebsiteBlade\").createReference({\n    parameters: { id: \"_ARM_ID_HERE\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Output Structures for Parameter Collection (Portalfx, TypeScript)\nDESCRIPTION: This snippet presents a TypeScript object structure for the outputs returned from a parameter collection provider, following the same shape as the inputs but with final parameter values. It models a dictionary of output parameter sets, where each entry contains parameter values filled in as a result of user interaction or provider processing. Requires compliance with the Portalfx parameter collection output contract.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noutputs = {\n    outputParameters: { // Mirrors the input parameters\n        parameterSetA: {\n            parameter1: \"Final value for parameter1\",\n            parameter2: \"Final value for parameter2\",\n            // More parameters values...\n        },\n        // More parameter sets...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form-Based Cloud Shell Commands in Azure Portal\nDESCRIPTION: Demonstrates how to set up a form blade that executes Cloud Shell commands with configurable parameters. The form includes a text input for resource name and configures bash environment with az resource list command.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formCloudShell.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"primaryButtonLabel\": \"Run Shell Commands\",\n            \"steps\": [\n                {\n                    \"name\": \"parameters\",\n                    \"label\": \"Cloud Shell parameters\",\n                    \"elements\": [\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Resource name\",\n                            \"defaultValue\": \"\",\n                            \"visible\": true\n                        }\n                    ]\n                }\n            ],\n            \"cloudShell\": {\n                \"kind\": \"bash\",\n                \"commands\": [\n                    {\n                        \"name\": \"az resource list\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"--name\",\n                                \"value\": \"[steps('parameters').name]\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Spec Data in Extender ViewModel (TypeScript)\nDESCRIPTION: This TypeScript snippet isolates the code responsible for fetching the specification data within the Extender ViewModel. It uses a `dataContext` to create an `EntityView` (`_specDataView`) and calls its `fetch` method. The successful response populates the `_specData` observable, while errors trigger custom handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._specDataView = dataContext.robotData.specDataEntity.createView(container);\nthis._specDataView.fetch({}).then(\n    () => {\n        const specData = ko.toJS(this._specDataView.item());\n        // Pass the spec data into an observable\n        this._specData(specData);\n    },\n    () => {\n        // Implement custom error handling logic\n        throw new Error(\"Fetch spec data failed.\");\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal ArmCommand with Async Operation\nDESCRIPTION: Example configuration for an ARM command with async operation polling in Azure Portal views. Demonstrates how to set up long-running operation handling with custom polling header override.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewDeleteCommand-properties-definition.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definition\":{\n    \"httpMethodType\": \"POST\",\n    \"uri\": \"{resourceid}/myaction?api-version=2018-09-01-preview\",\n    \"asyncOperation\": {\n      \"pollingHeaderOverride\": \"Azure-AsyncOperation\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenBladeCommand in Azure Portal Command Bar\nDESCRIPTION: This example demonstrates how to configure an OpenBladeCommand in the command bar to open another blade either in full screen or as a context pane.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"OpenBladeCommand\",\n        \"id\": \"openBladeCommand\",\n        \"displayName\": \"Open Blade\",\n        \"icon\": \"MsPortalFx.Base.Images.Logos.MicrosoftSquares\",\n        \"blade\": {\n            \"name\": \"CreateForm_dx\",\n            \"inContextPane\": true\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Logging Errors and Warnings in Knockout for Azure Portal\nDESCRIPTION: This code demonstrates how to log errors and warnings using the MsPortalFx.Base.Diagnostics.Log class in Knockout components for the Azure Portal. It shows methods for logging warnings and errors with message, code, and additional arguments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvar log = new MsPortalFx.Base.Diagnostics.Log(\"logging_area\");\nlog.warning(errorMessage, code, args);\nlog.error(errorMessage, code, args);\n```\n\n----------------------------------------\n\nTITLE: Configuring Information Tab in Azure Portal Declarative Overview\nDESCRIPTION: JSON configuration for creating an Information tab with multiple action types including external URLs, blade navigation, and menu opening. The snippet demonstrates setting up card features with various interactive elements and custom display properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-InformationTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Information\",\n    \"displayName\": \"Information\",\n    \"features\": [\n        {\n            \"title\": \"Declarative Resources\",\n            \"action\": [\n                {\n                    \"displayName\": \"Declarative Developer guide\",\n                    \"url\": \"https://aka.ms/portalfx/declarative\"\n                },\n                {\n                    \"displayName\": \"Declarative Form Sandbox\",\n                    \"url\": \"https://aka.ms/form/sandbox\"\n                },\n                {\n                    \"displayName\": \"Open Active Directory\",\n                    \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                    }\n                },\n                {\n                    \"displayName\": \"Open Tags\",\n                    \"menu\": \"tags\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Move Command in Azure Portal JSON\nDESCRIPTION: This snippet demonstrates how to define a MoveCommand for use in Azure Portal view commands. It specifies the command's kind, id, displayName, and icon properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewMoveCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"kind\": \"MoveCommand\",\n\"id\": \"moveCommand\",\n\"displayName\": {\n    \"property\": \"move\"\n},\n\"icon\": \"MsPortalFx.Base.Images.Move\"\n}\n```\n\n----------------------------------------\n\nTITLE: Associating a Command Group with a Custom Part in PDL (XML)\nDESCRIPTION: This PDL snippet demonstrates associating a `CommandGroup` ('commandDialogsGroup') with a `CustomPart` ('CommandDialogsSimplePart') using the `<CommandGroupReference>` element. This makes the commands within the referenced group available via the part's right-click context menu.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<CustomPart Name=\"CommandDialogsSimplePart\"\n            ViewModel=\"CommandDialogsSimplePartViewModel\"\n            Template=\"{Html Source='Templates\\PartWithContextMenu.html'}\">\n\n  <!--Association to command group at part level happens here-->\n  <CommandGroupReference Name=\"commandDialogsGroup\" />\n</CustomPart>\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview (GetStarted) Schema in Azure Portal\nDESCRIPTION: This JSON configuration defines the basic structure for a Resource Overview (GetStarted) view in the Azure portal. It includes parameters, resources, and a placeholder for tabs. This schema serves as a foundation for adding DataBrowse views as tabs within a resource overview.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Extension Caching Behavior with Query Strings - Plaintext\nDESCRIPTION: This snippet provides a sample URL for testing different caching modes in a portal extension by forcing the cacheability level via query string parameters. Developers can set 'YOUR_EXTENSION_NAME-cacheability=manifest' and 'feature.canmodifyextensions=true' to activate manifest-level caching and enable test scenarios without server-side configuration changes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-homepage-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://ms.portal.azure.com/?YOUR_EXTENSION_NAME-cacheability=manifest&feature.canmodifyextensions=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Alert Environments in JSON\nDESCRIPTION: Define the overall structure for configuring alerts in the Azure portal. This JSON snippet shows how to specify the extension name, enable/disable alerts globally, and define multiple environment configurations. Each environment specifies the target portal URLs (including national clouds) and contains arrays for availability, client error, create, and performance alerts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-availability.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true, // Enable or disable alerts for Your_Extension_Name.\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"], // National clouds are supported.\n            \"availability\": [\n                {\n                    \"type\": \"extension\", // Support value, \"extension\", \"blade\" or \"part\".\n                    \"enabled\": true, // Enable or disable extension type alerts for Your_Extension_Name.\n                    \"criteria\": [\n                       ...\n                    ]\n                },\n                {\n                    \"type\": \"blade\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n                ...\n            ],\n            \"clientError\": [...], // Optional. Add it when you want to enable client error alerts.\n            \"create\": [...], // Optional. Add it when you want to enable create alerts.\n            \"performance\": [...] // Optional. Add it when you want to enable performance alerts.\n\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            \"performance\": [\n                {\n                    ...\n                }\n                ...\n             ]\n            ...\n        }\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dashboard View Action Reference Schema Definition - URI Option\nDESCRIPTION: Defines the schema for URI-based action references in dashboard views. Requires a type, URI and display name, with optional feature flag support.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-actionReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|type|True|Enum permitting the value: \"uri\"\n|uri|True|The URI that will be opened\n|displayName|True|Display name for the link\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Feature Flag Values in JSON Configuration\nDESCRIPTION: Shows how to define default feature flag values in configuration files (web.config or cscfg) for different environments using a JSON structure with domain-specific overrides.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n<Setting name=\"Microsoft.StbPortal.Website.Configuration.ApplicationConfiguration.DefaultQueryString\" value=\"{\n'*': {\n    'websitesextension_supportsettingsenabled':'true',\n    'websitesextension_troubleshootsettingsenabled':'true'\n},\n'prod.websitesextension.com': {\n    'websitesextension_requestsettingsenabled':'true'\n},\n'dogfood.websitesextension.com': {healthsettingsenabled\n        'websitesextension_':'true'\n}\n}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Certificate Details - JSON\nDESCRIPTION: This JSON snippet defines essential fields for referencing a certificate stored in Azure Key Vault, including the vault name (\"keyVaultName\"), vault resource ID (\"keyVaultId\"), certificate name (\"certificateName\"), direct URL to the certificate (\"certificateUrl\"), and the certificate thumbprint (\"certificateThumbprint\"). It can be used as part of configuration files or scripts interacting with Azure APIs or automation processes. Inputs are strings representing Azure resource metadata; the snippet does not impose constraints but expects valid Azure-format strings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.KeyVault.KeyVaultCertificateSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyVaultName\": \"azuretestkeyvault01\",\n    \"keyVaultId\": \"/subscriptions/<subscriptionid_redacted>/resourceGroups/keyvaultrg/providers/Microsoft.KeyVault/vaults/azuretestkeyvault01\",\n    \"certificateName\": \"certificate1\",\n    \"certificateUrl\": \"https://azuretestkeyvault01.vault.azure.net/secrets/certificate1/0a52462b834f4fd8938dff5f05d18826\",\n    \"certificateThumbprint\": \"D3D46A19A8DE0579CD3D8AF8CB5BDF503479E69D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Row Value in Grid Validation (JSON)\nDESCRIPTION: This snippet demonstrates how to access the current row's value when performing validations using the $rowIndex variable in a Grid control. It combines the last() and take() commands to retrieve the value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.EditableGrid-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"last(take(<reference_to_grid>, $rowIndex))\"\n```\n\n----------------------------------------\n\nTITLE: Defining a DatePicker with Time Selection and Validation in Azure Portal UI (JSON)\nDESCRIPTION: This JSON snippet configures a date picker control named \"dateTime2\" labeled \"end time\". It enables both date and time selection by setting `time.visible` to true. It includes a constraint marking the field as required and a validation rule that checks if the selected end time is not earlier than the start time selected in another control (`steps('datePicker').dateTime1`). The `isValid` expression uses the `less` and `duration` functions for comparison.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DatePicker.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime2\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"end time\",\n    \"visible\": true,\n    \"time\": {\n        \"visible\": true\n    },\n    \"constraints\": {\n        \"required\": true,\n        \"validations\":\n        [\n            {\n                \"message\": \"can't be earlier than the start time\",\n                \"isValid\": \"[less(duration(steps('datePicker').dateTime1, steps('datePicker').dateTime2), 0)]\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Creates Within Date Range\nDESCRIPTION: This query returns a single row for each create operation within the specified time range. It's useful for identifying patterns by showing both successful and failed create operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreatesByDateRange(ago(1d),now())\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Template Handlers and Initialization Methods in TypeScript\nDESCRIPTION: Sets up UI components including text boxes and initializes various samples for hotspots, grids, and link types. Creates TextBox component with placeholder text and value binding, followed by initialization of sample components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.customHrefTextBox = TextBox.create(container, {\n    placeHolderText: Resources.customHrefTextBoxPlaceholder,\n    value: this.hrefValue,\n});\n\nthis._initializeHotSpotSample(container);\nthis._initializeGridSample(container, dataContext);\nthis._initializeBladeLinkSample(container);\nthis._initializeResouceLinkSample(container);\nthis._initializeDynamicFxclickLinkSample(container);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Refresh in QueryCache\nDESCRIPTION: Example showing how to set up automatic polling for a QueryCache instance with Robot entities. The polling interval defaults to 60 seconds with a minimum of 10 seconds to prevent server overload.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic robotsQuery = new MsPortalFx.Data.QueryCache<Robot, any>({\n    entityTypeName: RobotMetadata.name,\n    sourceUri: () => RobotData._apiRoot,\n    poll: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Management Group Scope Deployment Properties\nDESCRIPTION: Configuration properties for management group level deployments. Requires kind, managementGroupId, location, parameters, and template fields, with optional postCreate customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formDeployment.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"ManagementGroup\"\n|managementGroupId|True|Specify managementGroupId for deployment\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing Properties Tab with Menu Action\nDESCRIPTION: JSON schema showing how to implement a Properties tab with a menu action link in the group display name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Properties\",\n    \"groups\": [\n        {\n            \"displayName\": \"Virtual machine\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"description\": \"This is a virtual machine.\",\n            \"items\": [\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure ServicePrincipalSelector Control in CreateUIDefinition JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the `Microsoft.Common.ServicePrincipalSelector` control within an Azure CreateUIDefinition file (`CreateUIDefinition.MultiVm.json`). It specifies labels, tooltips, default values for `principalId` and `name` (using `<default guid>` as a placeholder), validation constraints (required, regex for password), and options like hiding the certificate field. The `outputs` section defines how to retrieve values like `appId`, `objectId`, `password`, etc., from the control using ARM template functions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ServicePrincipalSelector-samples.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#\",\n  \"handler\": \"Microsoft.Azure.CreateUIDef\",\n  \"version\": \"0.1.2-preview\",\n  \"parameters\": {\n    \"basics\": [],\n    \"steps\": [\n      {\n        \"name\": \"SPNcontrol\",\n        \"label\": \"SPNcontrol\",\n        \"elements\": [\n          {\n            \"name\": \"ServicePrincipal\",\n            \"type\": \"Microsoft.Common.ServicePrincipalSelector\",\n            \"label\": {\n              \"password\": \"Password\",\n              \"certificateThumbprint\": \"Certificate thumbprint\",\n              \"authenticationType\": \"Authentication Type\",\n              \"sectionHeader\": \"Service Principal\"\n            },\n            \"toolTip\": {\n              \"password\": \"Password\",\n              \"certificateThumbprint\": \"Certificate thumbprint\",\n              \"authenticationType\": \"Authentication Type\"\n            },\n            \"defaultValue\": {\n              \"principalId\": \"<default guid>\",\n              \"name\": \"(New) default App Id\"\n            },\n            \"constraints\": {\n              \"required\": true,\n              \"regex\": \"^[a-zA-Z0-9]{8,}$\",\n              \"validationMessage\": \"Password must be at least 8 characters long, contain only numbers and letters\"\n            },\n            \"options\": {\n              \"hideCertificate\": false\n            },\n            \"visible\": true\n          }\n        ]\n      }\n    ],\n    \"outputs\": {\n      \"appId\": \"[steps('SPNcontrol').ServicePrincipal.appId]\",\n      \"objectId\": \"[steps('SPNcontrol').ServicePrincipal.objectId]\",\n      \"password\": \"[steps('SPNcontrol').ServicePrincipal.password]\",\n      \"certificateThumbprint\": \"[steps('SPNcontrol').ServicePrincipal.certificateThumbprint]\",\n      \"newOrExisting\": \"[steps('SPNcontrol').ServicePrincipal.newOrExisting]\",\n      \"authenticationType\": \"[steps('SPNcontrol').ServicePrincipal.authenticationType]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Property Items in Azure Portal\nDESCRIPTION: This snippet demonstrates how to apply special formatting to property items, including displaying content as secrets (asterisks) or as date values. It shows the JSON structure for each format type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Key\",\n    \"value\": \"[resources().id]\",\n    \"format\": \"Secret\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Creation time\",\n    \"value\": \"2021-03-23T21:24:47.7856737Z\",\n    \"format\": \"Date\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Portal Logging in Extension Definition - .NET (C#)\nDESCRIPTION: This snippet demonstrates how to enable logging to portal MDS tables for an Azure Portal extension by setting the 'EnablePortalLogging' property to true in the extension definition class. It requires references to 'ArmConfiguration' and 'ApplicationConfiguration' injected via the constructor, and makes use of attributes from MEF (Managed Extensibility Framework). The feature ensures that all extension traces and telemetry are logged into portal MDS tables. No input parameters are required for this operation, and logging is enabled by default for serverless extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-logging-from-typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(typeof(ExtensionDefinition))]\n    internal class SamplesExtensionDefinition : ExtensionDefinition\n    {\n        [ImportingConstructor]\n        public SamplesExtensionDefinition(ArmConfiguration armConfiguration, ApplicationConfiguration applicationConfiguration)\n        {\n            this.EnablePortalLogging = true;\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Monitor Metric Schema\nDESCRIPTION: Basic schema for defining an Azure Monitor metric with required properties including id, aggregationType, and resourceMetadata.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-MonitoringTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"Percentage CPU\",\n    \"aggregationType\": \"Sum\",\n    \"resourceMetadata\": {\n        \"id\": \"[parameters('id')]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Start Link in Essentials Panel\nDESCRIPTION: Demonstrates how to create a function that returns a DynamicBladeSelection for navigating to a Quick Start blade from the Essentials panel. This helps users get started with using the resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar getQuickStartSelection: MsPortalFx.ViewModels.Parts.ResourceSummary.GetDynamicBladeSelection = (inputs: Def.InputsContract) => {\n    return <MsPortalFx.ViewModels.DynamicBladeSelection> {\n        detailBlade: ExtensionDefinition.BladeNames.engineQuickStartBlade,\n        detailBladeInputs: {\n            id: inputs.resourceId\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Observable Property Updates in TypeScript\nDESCRIPTION: Examples of correct and incorrect ways to update observable properties in blade view models.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nviewModel.readonly = false;\nviewModel.value(\"updated\");\n```\n\n----------------------------------------\n\nTITLE: Setting the disabled property for form controls in JavaScript\nDESCRIPTION: Example of setting the disabled property to true to prevent user input and validation in form controls. This changes styling and ARIA attributes to reflect the disabled state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-forms.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndisabled: true\n```\n\n----------------------------------------\n\nTITLE: Handling Resource Menu Failures in TypeScript\nDESCRIPTION: This function handles various HTTP status codes for resource menu failures. It sets appropriate error messages and details based on the status code, including not found, unauthorized, and unavailable scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function handleResourceMenuFailures(\n    error: Error,\n    handledError: KnockoutObservable<MsPortalFx.ViewModels.ErrorOptions>,\n    assetTypeName: string,\n    resourceId: string,\n    armResponseExtractor?: (error: Error) => string,\n) {\n    armResponseExtractor = armResponseExtractor || defaultResponseExtractor;\n    resourceId = MsPortalFx.encodeHtml(resourceId || \"\");\n    const statusCode = error && (<any>error).httpStatusCode;\n    if (statusCode && [HttpStatusCode.NotFound, HttpStatusCode.Gone].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.notFoundHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.notFoundDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n\n    if (statusCode && [HttpStatusCode.Forbidden, HttpStatusCode.Unauthorized].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.unauthorizedHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.unauthorizedDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n\n    if (statusCode && [0, HttpStatusCode.InternalServerError, HttpStatusCode.ServiceUnavailable].includes(statusCode)) {\n        const statusMessage = MsPortalFx.encodeHtml(armResponseExtractor(error) || ResourceMenuNotice.unknownResponse);\n        handledError({\n            message: ResourceMenuNotice.unavailableHeader.format(assetTypeName),\n            code: statusCode,\n            details: MsPortalFx.replaceAll(ResourceMenuNotice.unavailableDescription.format(assetTypeName, resourceId, statusCode, statusMessage), \"\\n\", \"<br />\"),\n        });\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Dropdown for ARM Resources\nDESCRIPTION: Implementation of a location dropdown for selecting Azure regions, with validation, policy integration, and resource type filtering. The control can disable locations based on policy restrictions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst locationDropDown = FxLocationDropDown.createCustom(container, {\n    initialLocationName: provisioning.initialValues.locationNames,\n    infoBalloonContent: ClientResources.infoBalloonContent,\n    subscriptionId: this._subscription,\n    resourceTypes: [resourceType],\n    validations: ([\n        ...(!isFeatureEnabled(\"PolicyAwareControls\") ? locationPolicyValidations.map((val) => val.validation) : []),\n        new Validations.Required(ClientResources.selectLocation),\n    ]),\n    // Use policy denied values to disable options and inform your user that their policies have disallowed that value\n    disable: (!isFeatureEnabled(\"PolicyAwareControls\")) && ((loc) => {\n        return locationPolicyValidations\n            .reduce((previous, val) => previous.concat(val.pendingResultValues()?.denied || []), [] as string[])\n            .includes(loc.name) && ClientResources.policyDisabledLocations;\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining tenantScopeDeployment Properties in Azure Portal FormViewType\nDESCRIPTION: This snippet defines the properties for tenant scope deployments in Azure Portal's form view type. It specifies required fields such as kind, location, parameters, and template, as well as optional fields like postCreate and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-tenantScopeDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"Tenant\"\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring GetStarted View Tab in JSON\nDESCRIPTION: This JSON snippet configures a 'GetStarted' view tab within the 'properties.tabs' array of the main Declarative Resource Overview schema. It defines the tab's title, description, a 'learnMore' link, and a list of 'features', each with its own title, description, icon, optional 'learnMore' link, and an action (like opening a menu item, another blade, or a URL). String values are sourced externally using the 'property' key referencing values in the .resjson file defined in the main schema.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"GetStarted\",\n    \"title\": {\n        \"property\": \"tab1Title\"\n    },\n    \"description\": {\n        \"property\": \"tab1Description\"\n    },\n    \"learnMore\": {\n        \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n        \"ariaLabel\": \"Learn more about Azure Portal\"\n    },\n    \"features\": [\n        {\n            \"title\": {\n                \"property\": \"tab1feature1Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature1Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"menu\": \"tags\",\n                \"displayName\": {\n                    \"property\": \"tab1feature1actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature2Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature2Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/engine.svg\"\n            },\n            \"action\": {\n                \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                },\n                \"displayName\": {\n                    \"property\": \"tab1feature2actionDisplayName\"\n                }\n            }\n        },\n        {\n            \"title\": {\n                \"property\": \"tab1feature3Title\"\n            },\n            \"description\": {\n                \"property\": \"tab1feature3Description\"\n            },\n            \"learnMore\": {\n                \"url\": \"https://azure.microsoft.com/en-us/features/azure-portal/\",\n                \"ariaLabel\": \"Learn more about Azure Portal\"\n            },\n            \"icon\": {\n                \"file\": \"../../Content/svg/msi.svg\"\n            },\n            \"action\": {\n                \"url\": \"https://www.azure.com\",\n                \"displayName\": {\n                    \"property\": \"tab1feature3actionDisplayName\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextBox Constraints Option 1 in Markdown\nDESCRIPTION: Specifies the properties for the first option of textBoxConstraints, including required, regex, validationMessage, and fx.feature fields. This option allows for basic validation using a regex pattern.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-textBoxConstraints.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|required|False|Value can be a boolean or an expression(string). If true, then the text box must have a value to validate successfully. The default value is false.\n|regex|False|JavaScript regular expression pattern. If specified, the text box's value must match the pattern to validate successfully. The default value is null. For more information about regex syntax, see [Regular expression quick reference](https://learn.microsoft.com/dotnet/standard/base-types/regular-expression-language-quick-reference).\n|validationMessage|False|A string to display when the text box's value fails validation.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining View Menu Command Types Enum\nDESCRIPTION: Specifies the allowed enum values for view menu commands in the Azure Portal. Includes commands for opening blades, marketplace, executing ARM operations, deleting resources, moving resources, and refreshing content.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-viewMenuCommand-commands-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ViewMenuCommandKind {\n  OpenBladeCommand,\n  OpenMarketplaceCommand,\n  ArmCommand,\n  DeleteCommand,\n  MoveCommand,\n  RefreshCommand\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RP Icon Metadata in Manifest - TypeScript\nDESCRIPTION: This snippet demonstrates how to add an icon definition at the ARM resource provider (RP) manifest level by including a 'metadata.portal.icon' property. The icon is typically in SVG XML format (inline as a string), but HTTPS URLs are accepted as well. Required parameters include the RP namespace and the SVG or URL string for the icon. This is mainly for customizing how the RP is represented in Azure Portal and related UIs. Prerequisites: familiarity with RP manifest structure and proper escaping of SVG content if included directly as a string.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    \"namespace\": \"rp.namespace\",\n    \"metadata\": {\n        \"portal\": {\n            \"icon\": \"<svg>...</svg>\"\n        }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Parameters in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the structure of a nested object that can be passed as a parameter. It shows how to access nested properties using the 'parameters' function within the view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/viewTypeParameters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    objectName = {\n        nestedProperty1: {\n            nestedProperty2: <value>,\n            ...\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Dogfood Configuration File in XML Build\nDESCRIPTION: XML build configuration to include the dogfood environment configuration file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"Content\\Config\\df.onecloud.azure-test.net.json\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewMenuCommand in Azure Portal JSON\nDESCRIPTION: This snippet demonstrates how to create a ViewMenuCommand object with nested OpenBladeCommand and OpenMarketplaceCommand. It shows the structure for defining menu items with icons, labels, and associated actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewMenuCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        },\n        {\n            \"kind\": \"OpenMarketplaceCommand\",\n            \"id\": \"OpenMarketplaceCommandId1\",\n            \"displayName\": \"openMarketplace\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"content\": \"content:Second line description\",\n            \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n            \"disabled\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Value Mapping for Property Item Localization and Icons (JSON)\nDESCRIPTION: This JSON snippet utilizes 'valueMapping' to localize display names and set custom icons based on the property's value. Each value mapping includes 'value', 'displayName', and an 'icon' reference conforming to the icon enum. This enables the UI to display localized strings and visual badges for specific property states such as 'Succeeded', 'Warning', or 'Failed'. The snippet is extensible and expects that value mapping values align with property values returned.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Provisioning State\\\",\\n    \\\"value\\\": \\\"[resources().properties.provisioningState]\\\",\\n    \\\"description\\\": \\\"This is provisioning state.\\\",\\n    \\\"valueMapping\\\": [\\n      {\\n        \\\"value\\\": \\\"Succeeded\\\",\\n        \\\"displayName\\\": \\\"Succeeded\\\",\\n        \\\"icon\\\": \\\"MsPortalFx.Base.Images.StatusBadge.Outline.Success\\\"\\n      },\\n      {\\n        \\\"value\\\": \\\"Warning\\\",\\n        \\\"displayName\\\": \\\"Warning\\\",\\n        \\\"icon\\\": \\\"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\\\"\\n      },\\n      {\\n        \\\"value\\\": \\\"Failed\\\",\\n        \\\"displayName\\\": \\\"Failed\\\",\\n        \\\"icon\\\": \\\"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\\\"\\n      }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Configuration for Portal Extension Development\nDESCRIPTION: A tsconfig.json file configuration to fix compilation issues with samples by enabling experimental decorators, which are required for Portal extension development using V2 APIs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-samples.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"experimentalDecorators\": true\n  },\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching EntityCache Data on Blade Input Set in TypeScript\nDESCRIPTION: Implements the `onInputsSet` method for a detail blade's view model. This method is called when the blade's inputs change. It invokes the `fetch` method on the `EntityCache` view (`this._websiteEntityView`), passing the ID of the specific item to fetch (`inputs.currentItemId`) obtained from the blade's input contract. The promise returned by `fetch` is returned by `onInputsSet`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Invoked when the blade's inputs change.\n */\npublic onInputsSet(inputs: Def.BrowseDetailViewModel.InputsContract): Promise<any> {\n    return this._websiteEntityView.fetch(inputs.currentItemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorials View in Azure Portal's Declarative Resource Overview\nDESCRIPTION: This JSON snippet defines the structure for a Tutorials view in the Azure Portal. It includes sections for tutorial tiles, videos, and useful links. The configuration uses property bindings for dynamic content and provides URLs for external resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/TutorialsTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Tutorials\",\n    \"tilesGroup\": {\n        \"displayName\": {\n            \"property\": \"freeTrainingsFromMicrosoft\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tile1Title\"\n                },\n                \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n                \"subtitle\": {\n                    \"property\": \"tile1Subtitle\"\n                },\n                \"description\": {\n                    \"property\": \"tile1Description\"\n                },\n                \"action\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"displayName\": {\n                        \"property\": \"start\"\n                    }\n                }\n            }\n        ]\n    },\n    \"videosGroup\": {\n        \"displayName\": {\n            \"property\": \"tab2videosTitle\"\n        },\n        \"items\": [\n            {\n                \"title\": {\n                    \"property\": \"tab2feature1Title\"\n                },\n                \"description\": {\n                    \"property\": \"tab2feature1Description\"\n                },\n                \"learnMore\": {\n                    \"url\": \"https://www.azure.com\",\n                    \"ariaLabel\": \"Learn more about Azure\"\n                },\n                \"video\": {\n                    \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n                }\n            }\n        ]\n    },\n    \"linksGroup\": {\n        \"displayName\": \"Useful links\",\n        \"items\": [\n            {\n                \"title\": \"Concepts\",\n                \"action\": [\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Azure Managed applications overview\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Service Catalog applications\"\n                    },\n                    {\n                        \"url\": \"https://azure.microsoft.com/en-us/\",\n                        \"displayName\": \"Managed applications in Azure Marketplace\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output from TagsByResource Control\nDESCRIPTION: Example of the JSON output generated by the TagsByResource control when users have applied tags to different resource types. This shows how tags are organized by resource type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Microsoft.Storage/storageAccounts\": {\n  \"Dept\": \"Finance\",\n  \"Environment\": \"Production\"\n},\n\"Microsoft.Compute/virtualMachines\": {\n  \"Dept\": \"Finance\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific Language in Azure Portal\nDESCRIPTION: This code snippet shows how to force the Azure Portal to run in a specific language for end-to-end localization testing. It uses a query string parameter to set the desired language.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:12000?l=en-us\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Type for ARM Resource in XML\nDESCRIPTION: This XML snippet demonstrates how to associate an ARM resource with the AssetType by specifying the Browse and ResourceType tags within the AssetType definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Browse Type=\"ResourceType\" />\n<ResourceType\n    ResourceTypeName=\"<<your-resource-type-name>>\"\n    ApiVersion=\"api-version-you-want-to-use\" />\n```\n\n----------------------------------------\n\nTITLE: Querying In-Product Feedback Submissions via Kusto - Kusto Query Language (KQL)\nDESCRIPTION: This Kusto Query Language (KQL) snippet retrieves and projects in-product feedback submissions for the Azure Portal from the 'ClientTelemetry' table. It filters by action, extension, timeframe, and source, then extracts dimensions like scores, comments, and identifying information from the JSON-structured 'data' column. The snippet depends on access to the Azure Data Explorer instance and appropriate permissions. Key parameters include filtering for recent ('ago(1d)'), relevant action and extension types. Input is telemetry data, output is a table with user feedback fields suitable for dashboarding. Limitations: only data submitted via the InProductFeedbackBlade and HubsExtension are included.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-inproduct-feedback.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ncluster('azportalpartner').database('AzurePortal').ClientTelemetry\n| where PreciseTimeStamp >= ago(1d)\n| where userTypeHint == \"\"\n| where source == 'InProductFeedbackBlade'\n| where action == 'InProductFeedbackSubmit'\n| where extension == 'HubsExtension'\n| extend data = todynamic(data)\n| extend featureExtensionName = data.extensionName\n| extend featureBladeName = data.bladeName\n| extend CESValue = data.CESValue\n| extend CVAValue = data.CVAValue\n| extend comments = data.comments\n| extend featureName = data.featureName\n| extend surveyId = data.surveyId\n| extend validStringFormat = data.validStringFormat\n| extend mayContact = data.mayContact\n| project PreciseTimeStamp, featureName, surveyId, featureExtensionName, featureBladeName, CESValue, CVAValue, comments, validStringFormat, userId, mayContact\n```\n\n----------------------------------------\n\nTITLE: Lighthouse Metrics Table in Markdown\nDESCRIPTION: Table defining the Lighthouse performance metrics used to evaluate Azure Portal blade performance including First Contentful Paint, Largest Contentful Paint, and other key metrics.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Aspect | Metric | Units |\n| ------ | ------ | ----- |\n| How fast to render initial content (static and shimmers)? | [First Contentful Paint (FCP)](https://web.dev/fcp/) | Seconds from t<sub>0</sub> |\n| How fast to render main content (loaded data)? | [Largest Contentful Paint (LCP)](https://web.dev/lcp/) | Seconds from t<sub>0</sub> |\n| Does UI shift during rendering? | [Cumulative Layout Shift (CLS)](https://web.dev/cls/) | Custom units |\n| When is the UI responsive to user interaction? | [Time to Interactive (TTI)](https://web.dev/tti/) | Seconds from t<sub>0</sub> |\n| Is the UI ever unresponsive to user interaction? | [Total Blocking Time (TBT)](https://web.dev/tbt/) | Seconds (absolute) |\n| <Not implemented, lab-only measurement> | [~~Speed Index (SI)~~](https://web.dev/si/) | Custom units |\n```\n\n----------------------------------------\n\nTITLE: Updating an Engine Entity with Refresh in Azure Portal\nDESCRIPTION: Implements an updateEngine method that performs a PATCH operation to update an entity on the server, then refreshes the local data cache. It demonstrates two approaches: using framework portal and using a local controller.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\npublic updateEngine(engine: EngineModel): Promise<void> {\n   let promise: Promise<any>;\n   if (useFrameworkPortal) {\n       // Using framework portal (NOTE: this is not allowed against ARM).\n       // NOTE: do NOT use invoke API since it doesn't handle CORS.\n       promise = FxBaseNet.ajaxExtended<any>({\n           headers: { accept: applicationJson },\n           isBackgroundTask: false,\n           setAuthorizationHeader: true,\n           setTelemetryHeader: \"Update\" + entityType,\n           type: \"PATCH\",\n           uri: EngineData._apiRoot + \"&api-version=\" + entityVersion,\n           data: ko.toJSON(convertToResource(engine)),\n           contentType: applicationJson,\n           useFxArmEndpoint: true,\n       });\n   } else {\n       // Using local controller.\n       promise = FxBaseNet.ajax({\n           type: \"PATCH\",\n           uri: EngineData._apiRoot + \"?id=\" + engine.id(),\n           data: ko.toJSON(convertToArmResource(engine)),\n           contentType: applicationJson,\n       });\n   }\n\n   return promise.then(() => {\n       if (useFrameworkPortal) {\n           // This will refresh the set of data that is available in the underlying data cache.\n           EngineData._debouncer.execute([this._getEngineId(engine)]);\n       } else {\n           // This will refresh the set of data that is available in the underlying data cache.\n           // The {} params let the cache know to re-fetch any data that matches these parameters.\n           // In the case of this contrived scenario, we always fetch all data.  In the future we\n           // will add a way to refresh all (or selective) caches for a given type.  The second param\n           // manages lifetime, which is not needed in this case.\n           this.enginesQuery.refresh({}, null);\n       }\n   });\n    }\n```\n\n----------------------------------------\n\nTITLE: Full Example: Azure Portal Navigation and Extension Sideloading Test in C#\nDESCRIPTION: This C# code provides a complete MSTest `TestMethod` example demonstrating an end-to-end automated test flow for the Azure Portal. It includes retrieving configuration, waiting for servers, creating a WebDriver, authenticating (requires non-MFA account), handling trust prompts, sideloading a test extension using JavaScript, handling trust prompts again after reload, and finally disposing of the WebDriver instance. It utilizes classes from `Microsoft.Portal.TestFramework` and `OpenQA.Selenium`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n//------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n//------------------------------------------------------------\n\nusing System;\nusing System.Configuration;\nusing Microsoft.Portal.TestFramework.Core;\nusing Microsoft.Portal.TestFramework.Core.Authentication;\nusing Microsoft.Portal.TestFramework.Core.Shell;\nusing Microsoft.Selenium.Utilities;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing OpenQA.Selenium;\n\nnamespace DocSampleTest\n{\n    [TestClass]\n    public class NavigateToPortalTest\n    {\n        [TestMethod]\n        public void NavigateToPortal()\n        {\n            //config#navigateToPortal\n            // Get the specified Portal Uri from the configuration file\n            var portalUri = new Uri(ConfigurationManager.AppSettings[\"PortalUri\"]);\n            var extensionUri = new Uri(ConfigurationManager.AppSettings[\"ExtensionUri\"]);\n\n            // Make sure the servers are available\n            PortalServer.WaitForServerReady(portalUri);\n            ExtensionsServer.WaitForServerReady(extensionUri);\n\n            // Create a webdriver instance to automate the browser.\n            var webDriver = WebDriverFactory.Create();\n\n            // Create a Portal Authentication class to handle login, note that the portalUri parameter is used to validate that login was successful.\n            var portalAuth = new PortalAuthentication(webDriver, portalUri);\n\n            //config#sideLoadingExtension\n            // Sign into the portal\n            portalAuth.SignInAndSkipPostValidation(userName: \"\", /** The account login to use.  Note Multi Factor Authentication (MFA) is not supported, you must use an account that does not require MFA **/\n                password: \"\", /** The account password **/\n                tenantDomainName: string.Empty, /** the tenant to login to, set only if you need to login to a specific tenant **/\n                query: \"feature.canmodifyextensions=true\", /** Query string to use when navigating to the portal.  **/ \n                fragment: \"#\" /** The hash fragment, use this to optionally navigate directly to your resource on sign in. **/);\n            //config#navigateToPortal\n\n            // Check for and click the Untrusted Extension prompt if its present\n            Microsoft.Portal.TestFramework.Core.Shell.Portal.CheckAndClickExtensionTrustPrompt(webDriver);\n            var portal = Microsoft.Portal.TestFramework.Core.Shell.Portal.FindPortal(webDriver, false);\n\n            // Register a deployed extension via javascript and then reload the portal.  Not required if using the query string method to load from localhost\n            (webDriver as IJavaScriptExecutor).ExecuteScript(\"MsPortalImpl.Extension.registerTestExtension({ name: \\\"SamplesExtension\\\", uri: \\\"https://df.onecloud.azure-test.net/Samples\\\"});\");\n            portal.WaitForPortalToReload(() => webDriver.Navigate().Refresh());\n\n            // Check for and click the Untrusted Extension prompt if its present\n            Microsoft.Portal.TestFramework.Core.Shell.Portal.CheckAndClickExtensionTrustPrompt(webDriver);\n            portal = Microsoft.Portal.TestFramework.Core.Shell.Portal.FindPortal(webDriver, false);\n            //config#sideLoadingExtension\n\n            //config#dispose\n            // Clean up the webdriver after\n            webDriver.Dispose();\n            //config#dispose\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Menu Action for Property Item (JSON)\nDESCRIPTION: This snippet sets up a property item with a 'menu' action that opens a specified menu item, as defined by the 'action.menu' property. The referenced menu must exist in the menu definition. This is useful for organizing actions and enabling feature-specific interactions in portal UI extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Open a menu\\\",\\n    \\\"value\\\": \\\"Tags\\\",\\n    \\\"action\\\": {\\n        \\\"menu\\\": \\\"tags\\\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type Definitions for Exported Components in TypeScript\nDESCRIPTION: Demonstrates how to define type definitions for exported blades in a .d.ts file that will be shared with partner teams. This enables type checking for parameters passed to the exported components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sharing-blades-and-parts.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* API types for Blades and Parts exported from this extension.\n* This TypeScript definition file will be redistributed to extension teams who reuse this extension's exported Blades\n* and Parts.\n* The types here are referenced by code-generated BladeReferences and PartReferences, enabling compiler verification for\n* parameters passed to the exported Blades and Parts.\n*/\ndeclare namespace SamplesExtension {\n\n   /**\n    * API types for the exported 'ExportedBlade' Blade.\n    */\n   namespace ExportedBlade {\n\n       /**\n        * Defines the parameters that can be passed to 'ExportedBlade' when, for instance,\n        * it is programmatically pinned using the 'pin' function in the 'Fx/Pinner' module.\n        */\n       interface Parameters {\n\n           /**\n            * An optional, sample parameter passed to 'ExportedBlade'.\n            */\n           parameter1?: string;\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters Type in Blade Context in TypeScript\nDESCRIPTION: Shows how to reference the Parameters type defined in the .d.ts file within the blade implementation. This allows the compiler to verify that parameters are correctly typed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sharing-blades-and-parts.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic context: TemplateBlade.Context<SamplesExtension.ExportedBlade.Parameters>;\n```\n\n----------------------------------------\n\nTITLE: Setting Flight Value in Session Storage\nDESCRIPTION: A snippet demonstrating how to assign a user to a flight and store this information in the browser's session storage for persistence during the current session.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flighting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsessionStorage.setItem(flight, true)\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Blade Structure in XML for Azure Portal\nDESCRIPTION: This XML snippet demonstrates how to create a legacy blade in a PDL file for the Azure Portal. It defines a blade named 'LockedBlade' with an associated ViewModel 'LockedBladeViewModel' and includes a Lens element.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-legacy.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"LockedBlade\"\n       ViewModel=\"LockedBladeViewModel\">\n    <Lens>\n        ...\n    </Lens>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Handling Unexpected Blade Loading Failures in Azure Portal\nDESCRIPTION: Demonstrates how to handle unexpected errors during blade loading using the container.fail() API. This should be used for unexpected errors only, with the message being logged but not shown to users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-advanced.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.fail()\n```\n\n----------------------------------------\n\nTITLE: Using EntityCache with Default Ajax Configuration in TypeScript\nDESCRIPTION: This snippet shows the default implementation of EntityCache that causes a CORS preflight request for each unique URI, leading to performance overhead due to multiple network requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n    public resourceEntities = new MsPortalFx.Data.EntityCache<DataModels.RootResource, string>({\n        entityTypeName: ExtensionTemplate.DataModels.RootResourceType,\n        sourceUri: MsPortalFx.Data.uriFormatter(endpoint + \"{id}?\" + this._armVersion, false),\n        supplyData: (httpMethod: string, uri: string, headers?: StringMap<any>, data?: any, params?: any) => {\n            return MsPortalFx.Base.Net.ajax({\n                uri: uri,\n                type: httpMethod || \"GET\",\n                dataType: \"json\",\n                traditional: true,\n                headers: headers,\n                contentType: \"application/json\",\n                setAuthorizationHeader: true,\n                cache: false,\n                data: data\n            })\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing NewEditScope Parameters for Azure Portal Blades in XML\nDESCRIPTION: Shows how to use a NewEditScope parameter in a blade, which is useful for parts providing form editing capabilities. This parameter type simplifies access to the editScopeId.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Blade>\n  ...\n  <Blade.Parameters>\n    <!--\n      EditScopes are a special kind of input. They are generated from the shell,\n      and are not passed via a blade binding.\n    -->\n    <Parameter Type=\"NewEditScope\" />\n  </Blade.Parameters>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: GetCreateFunnel Function Definition\nDESCRIPTION: This function calculates create funnel KPIs for each extension's create blade within a given time range. It can be used to analyze success rates, failure counts, and customer drop-off rates for create operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_7\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFunnel(\n    startDate:datetime,                 // required\n    endDate:datetime,                   // required\n    match_Extention:string=\"\",          // optional\n    match_Blade:string=\"\",              // optional\n    match_SessionId:string=\"\",          // optional\n    match_SubscriptionId:string=\"\",     // optional\n    match_TelemetryId:string=\"\",        // optional\n    match_CorrelationId:string=\"\",      // optional\n    match_GalleryPackageId:string=\"\",   // optional\n    match_BuildNumber:string=\"\",        // optional\n    exclude_NonMarketplace:bool=true    // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Browse Options Enum for Azure Portal\nDESCRIPTION: This enumeration defines the permitted values for browse options in the Azure Portal. It includes options to hide or show asset types and instances, as well as a default 'NoOptions' value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-browse-options.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NoOptions\n- HideAssetType\n- HideInstances\n- ShowAssetType\n- ShowInstances\n```\n\n----------------------------------------\n\nTITLE: Using cachedAjax with QueryCache supplyData Override in TypeScript\nDESCRIPTION: Illustrates how to override the `supplyData` function in an `MsPortalFx.Data.QueryCache` to use `MsPortalFx.Base.Net.cachedAjax()` instead of the standard `ajax`. This enables server-side change detection via `x-ms-cache-tag` headers, reducing network bandwidth and client processing if data hasn't changed. The example also shows post-processing the response based on the `modified` flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\npublic websitesQuery = new MsPortalFx.Data.QueryCache<SamplesExtension.DataModels.WebsiteModel, any>({\n    entityTypeName: SamplesExtension.DataModels.WebsiteModelType,\n    sourceUri: MsPortalFx.Data.uriFormatter(Shared.websitesControllerUri),\n\n    // Overriding the supplyData function and supplying our own logic used to perform an ajax\n    // request.\n    supplyData: (method, uri, headers, data) => {\n        // Using MsPortalFx.Base.Net.cachedAjax to perform our custom ajax request\n        return MsPortalFx.Base.Net.cachedAjax({\n            uri: uri,\n            type: \"GET\",\n            dataType: \"json\",\n            cache: false,\n            contentType: \"application/json\"\n        }).then((response: MsPortalFx.Base.Net.AjaxCachedResult<any>) => {\n            // Post processing the response data of the ajax request.\n            if (response.modified && Array.isArray(response.data) && response.data.length > 5) {\n                return response.data = response.data.slice(5);\n            }\n            return response;\n        });\n    }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Complete ServicePrincipalSelector Implementation Example\nDESCRIPTION: Full implementation example showing how to integrate the ServicePrincipalSelector within a CreateUIDefinition template, including steps configuration and output mappings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalSelector.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#\",\n  \"handler\": \"Microsoft.Azure.CreateUIDef\",\n  \"version\": \"0.1.2-preview\",\n  \"parameters\": {\n    \"basics\": [],\n    \"steps\": [\n      {\n        \"name\": \"SPNcontrol\",\n        \"label\": \"SPNcontrol\",\n        \"elements\": [\n          {\n            \"name\": \"ServicePrincipal\",\n            \"type\": \"Microsoft.Common.ServicePrincipalSelector\",\n            \"label\": {\n              \"password\": \"Password\",\n              \"certificateThumbprint\": \"Certificate thumbprint\",\n              \"authenticationType\": \"Authentication Type\",\n              \"sectionHeader\": \"Service Principal\"\n            },\n            \"toolTip\": {\n              \"password\": \"Password\",\n              \"certificateThumbprint\": \"Certificate thumbprint\",\n              \"authenticationType\": \"Authentication Type\"\n            },\n            \"defaultValue\": {\n              \"principalId\": \"<default guid>\",\n              \"name\": \"(New) default App Id\"\n            },\n            \"constraints\": {\n              \"required\": true,\n              \"regex\": \"^[a-zA-Z0-9]{8,}$\",\n              \"validationMessage\": \"Password must be at least 8 characters long, contain only numbers and letters\"\n            },\n            \"options\": {\n              \"hideCertificate\": false\n            },\n            \"visible\": true\n          }\n        ]\n      }\n    ],\n    \"outputs\": {\n      \"appId\": \"[steps('SPNcontrol').ServicePrincipal.appId]\",\n      \"objectId\": \"[steps('SPNcontrol').ServicePrincipal.objectId]\",\n      \"password\": \"[steps('SPNcontrol').ServicePrincipal.password]\",\n      \"certificateThumbprint\": \"[steps('SPNcontrol').ServicePrincipal.certificateThumbprint]\",\n      \"newOrExisting\": \"[steps('SPNcontrol').ServicePrincipal.newOrExisting]\",\n      \"authenticationType\": \"[steps('SPNcontrol').ServicePrincipal.authenticationType]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching External Blades in Azure Portal Extensions Using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to open a blade from another portal extension using the BladeReferences API. The extension and specific menu item are identified by name, and the resource context (resourceId) is provided as a parameter. Dependencies include the portal's TypeScript client framework, and the main input is the resourceId string. The output is navigation to the specified external blade in the Azure portal UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// open the \\\"control\\\" menu item in the resource menu for a specific resource\nconst resourceId = \"/subscriptions/sub123/resourcegroups/servertest/providers/Microsoft.test/virtualservers/web1\";\nvoid this._container.openBlade(BladeReferences.forExtension(\"HubsExtension\").forMenuBlade(\"ResourceMenuBlade\", \"control\").createReference({ parameters: { id: resourceId } }));\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Test Management Experience Properties (JSON)\nDESCRIPTION: This JSON snippet defines the configuration properties for an Azure entity, likely a subscription or management group, named 'TEST Management Experiences'. It specifies the authorization source as 'RoleBased', enables the entity, and links it to specific subscription and tenant IDs. It also includes subscription policies related to location placement and quotas.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.SubscriptionSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"authorizationSource\": \"RoleBased\",\n    \"displayName\": \"TEST Management Experiences\",\n    \"state\": \"Enabled\",\n    \"subscriptionId\": \"2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4\",\n    \"subscriptionPolicies\": {\n        \"locationPlacementId\": \"Internal_2014-09-01\",\n        \"quotaId\": \"Internal_2014-09-01\"\n    },\n    \"tenantId\": \"72f988bf-86f1-41af-91ab-2d7cd011db47\",\n    \"uniqueDisplayName\": \"TEST Management Experiences\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom CSS Classes in HTML Templates\nDESCRIPTION: Example of using custom CSS classes in an HTML template for an Azure Portal extension. This template uses the custom class to display a warning message with a reset button.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ext-too-many-clicks-box\" data-bind=\"visible: !allowMoreClicks()\">\n    That's too many clicks!\n    <button data-bind=\"click: resetClickCount\">Reset</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Properties Table - Azure Portal Recommendations View\nDESCRIPTION: A markdown table defining the properties available for the recommendations view type. It includes the property name, whether it's required, and its description.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the Recommendations view\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Web.config Setting Configuration\nDESCRIPTION: Example of setting configuration in web.config file for extension settings\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Azure.MyExtension.MySetting\" value=\"myValue\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced LifetimeManager Usage with Dynamic UI\nDESCRIPTION: Shows advanced implementation of LifetimeManager for dynamic UI scenarios where components need to be swapped out during runtime.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-lifetime.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _childLifetime: DisposableLifetimeManager;\n\npublic onInitialize() {\n    const childLifetime = this._newChildLifetime();\n    this._controlA = TextBox.create(this._childLifetime, { … });\n    this._controlB = CheckBox.create(this._childLifetime, { … });\n    this._controlC = Button.create(this._childLifetime, { … });\n    …\n}\n\npublic onButtonClick() {\n    const childLifetime = this._newChildLifetime();\n    this._controlD = Grid.create(this._childLifetime, { … });\n    this._controlE = DropDown.create(this._childLifetime, { … });\n    this._controlF = Chart.create(this._childLifetime, { … });\n}\n\nprivate _newChildLifetime(): LifetimeManager {\n    if (this._childLifetime) {\n        this._childLifetime.dispose();\n    }\n\n    const bladeLifetime = this.context.container;\n    this._childLifetime = bladeLifetime.createChildLifetime();\n\n    return this._childLifetime;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generation Modes in Extension Project (XML)\nDESCRIPTION: XML snippet for an `Extension.csproj` file configuring the `BladeReferencesCodegenMode` and `PartReferencesCodegenMode` properties to `Definitions`. This setting is part of enabling the C# to TypeScript type metadata generation process.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\n<PropertyGroup>\n  <BladeReferencesCodegenMode>Definitions</BladeReferencesCodegenMode>\n  <PartReferencesCodegenMode>Definitions</PartReferencesCodegenMode>\n</PropertyGroup>\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Notifications with publishNotification in TypeScript (v3)\nDESCRIPTION: Example of creating a basic notification using publishNotification in TypeScript for Azure Portal v3, including title and description.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publishNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishNotification({\n    title: MyNotification.Started.title,\n    description: MyNotification.Started.message\n});\n```\n\n----------------------------------------\n\nTITLE: Defining postCreateBlade in ResourceAsset.dx.jsonc\nDESCRIPTION: This JSON snippet shows how to define the 'postCreateBlade' property in the 'assetType' section of ResourceAsset.dx.jsonc. It specifies the name of the custom React view for the post-create experience.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-deployment-postCreate.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"postCreateBlade\": {\n    \"name\": \"{your own reactView name - for example: PostCreateSampleCreate.ReactView}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initial SVG Icon in Azure Portal\nDESCRIPTION: An SVG icon that appears to represent some kind of launching or sending functionality with a white triangular shape against a background.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_147\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M50,17.8L32.2,0c-0.8,2.6-0.9,5.2-0.5,7.7L18.6,20.7c-4-1.6-8.8-2.1-13-0.7l9.4,9.1L0,50l21-15l9,8.8\n\tc1.3-4.2,0.9-8.6-0.7-12.4l13-13C44.8,18.7,47.4,18.6,50,17.8z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: TemplateBlade Context Property Definition\nDESCRIPTION: Shows the context property definition for a TemplateBlade, which provides access to framework APIs and blade parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-template.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic context: TemplateBlade.Context<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Background Color Palette\nDESCRIPTION: This CSS snippet defines a comprehensive set of background color classes with corresponding text colors. It includes various shades and tints for each color in the palette.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-color-palette.md#2025-04-23_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n/* These style copied from generated CustomPart.css */\n.msportalfx-bgcolor-a1 {\n  background-color: #fcd116;\n  color: #000000;\n}\n.msportalfx-bgcolor-b1 {\n  background-color: #eb3c00;\n  color: #ffffff;\n}\n/* ... (truncated for brevity) ... */\n.msportalfx-bgcolor-k0t2 {\n  background-color: #63707e;\n  color: #ffffff;\n}\n```\n\n----------------------------------------\n\nTITLE: Output Structure for Microsoft.Common.Grid Control in JSON\nDESCRIPTION: This example shows the output format of a Microsoft.Common.Grid control. The output is an array of objects containing the properties defined in the grid's columns, with each object representing a row in the grid.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Grid.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"name\": \"resource1\",\n        \"region\": \"East US\",\n        \"state\": \"on\",\n        \"note\": \"Lorem ipsum\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility of Property Item Using Dynamic Expression (JSON)\nDESCRIPTION: This JSON snippet configures the 'visible' property with a dynamic expression to control the visibility of a property item based on a resource's status. If the condition in the expression evaluates to true (e.g., VM is running), the property is shown; otherwise, it is hidden. This enables context-aware UI, only displaying properties when certain conditions are met.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Visible if VM running\\\",\\n    \\\"value\\\": \\\"[resources('vmInstanceView').properties.instanceView.statuses.1.displayStatus]\\\",\\n    \\\"visible\\\": \\\"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataBrowse with Dynamic Resources Data\nDESCRIPTION: Example demonstrating DataBrowse configuration using dynamic resources data source. Shows how to display resource properties like name, type, and location.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-DataBrowseTab.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": \"[resources().resources]\",\n    \"columns\": [\n        {\n            \"displayName\": \"Name\",\n            \"name\": \"name\"\n        },\n        {\n            \"displayName\": \"VM Type\",\n            \"name\": \"type\"\n        },\n        {\n            \"displayName\": \"Location\",\n            \"name\": \"location\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Information Tab in Declarative Resource Overview Schema (JSON)\nDESCRIPTION: This JSON snippet defines the structure for adding an Information Tab to the Declarative Resource Overview. It includes a feature with multiple actions such as external links, blade navigation, and menu opening.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/InformationTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Information\",\n    \"displayName\": \"Information\",\n    \"features\": [\n        {\n            \"title\": \"Declarative Resources\",\n            \"action\": [\n                {\n                    \"displayName\": \"Declarative Developer guide\",\n                    \"url\": \"https://aka.ms/portalfx/declarative\"\n                },\n                {\n                    \"displayName\": \"Declarative Form Sandbox\",\n                    \"url\": \"https://aka.ms/form/sandbox\"\n                },\n                {\n                    \"displayName\": \"Open Active Directory\",\n                    \"blade\": {\n                    \"name\": \"ActiveDirectoryMenuBlade\",\n                    \"extension\": \"Microsoft_AAD_IAM\"\n                    }\n                },\n                {\n                    \"displayName\": \"Open Tags\",\n                    \"menu\": \"tags\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Blob Selector Output Format\nDESCRIPTION: Example of the output returned by the StorageBlobSelector control after blob selection. Returns the blob name and a generated SAS URI for accessing the selected blob.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.StorageBlobSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"blobName\": \"test.zip\",\n    \"sasUri\": \"https://azstorageaccnt1.blob.core.windows.net/container1/test.zip?sp=r&se=2020-10-10T07:46:22Z&sv=2019-12-12&sr=b&sig=X4EL8ZsRmiP1TVxkVfTcGyMj2sHg1zCbFBXsDmnNOyg%3D\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Dialog Position Enum Definition\nDESCRIPTION: Enum defining possible dialog position options relative to target element.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* option hint for requested dialog position. Defaults to BottomLeftEdge.\n*/\nexport const enum DialogPosition {\n    TopLeftEdge = 1,\n    RightTopEdge = 2,\n    BottomLeftEdge = 3,\n    LeftTopEdge = 4,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Output Parameters for Azure Portal Blades in XML\nDESCRIPTION: Illustrates the declaration of an output parameter in a blade, which allows receiving input from a child blade. Output parameters cannot be set at invocation time and cannot be keys or edit scopes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Blade>\n  ...\n  <Blade.Parameters>\n    <!--\n      Output parameters are not set at invocation time, and cannot be keys or edit scopes.\n    -->\n    <Parameter Name=\"queryMetricId\" Type=\"Output\" />\n  </Blade.Parameters>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Defining Create Alert Criteria in JSON\nDESCRIPTION: Details the JSON configuration for a specific 'create' alert criterion, nested within the 'criteria' array of a 'create' object. It includes properties like `severity` for the resulting IcM alert, `enabled` to toggle this specific criterion, `bladeName` to specify target blades, and minimum success rates (`minSuccessRateOverPast24Hours`, `minSuccessRateOverPastHour`) and total counts (`minTotalCountOverPast24Hours`, `minTotalCountOverPastHour`) required to trigger an alert over specified time periods.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-create.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"severity\": 3,\n    \"enabled\": true,\n    \"bladeName\": [\"CreateBlade\"],\n    \"minSuccessRateOverPast24Hours\":94.0,\n    \"minSuccessRateOverPastHour\":94.0,\n    \"minTotalCountOverPast24Hours\":50,\n    \"minTotalCountOverPastHour\":3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context Pane Width Enum in Markdown\nDESCRIPTION: This snippet defines an enumeration for context pane width options. It includes four size values: Small, Medium, Large, and XLarge. These options are likely used to set the width of context panes in the Azure Portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-contextPaneWidth.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Small\n- Medium\n- Large\n- XLarge\n```\n\n----------------------------------------\n\nTITLE: Basic Blade Disposal Pattern in TypeScript\nDESCRIPTION: Demonstrates the basic implementation of dispose() pattern in a Blade class to handle resource cleanup.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-lifetime.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Decorator(…)\nexport class MyBlade {\n    private _someOtherComponent: OtherComponent;\n\n    public dispose() {\n        this._someOtherComponent.dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Localized Strings in PDL/Declarative XML\nDESCRIPTION: This XML fragment shows how to refer to a localized string in a declarative resource-aware property by specifying both the resource key and its module. The Title property references a resource key within ClientResources for localization. Prerequisites: RESX and resource module generated. Inputs: Resource name and module. Outputs: Localized property value. Limitations: Module and key must exist; referenced at compile-time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<Lens Name=\\\"PartsLens\\\"\\n      Title=\\\"{Resource partsLensTitle, Module=ClientResources}\\\">\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern for Tracking EntityView Item Changes in Azure Portal\nDESCRIPTION: The recommended approach for tracking changes to EntityView items using ko.reactor. This ensures the callback is triggered both when the item observable changes and when any properties on the entity change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nko.reactor(lifetime, () => {\n    const item = entityView.item();\n    if (item) {\n        // Do something with 'newItem' after refresh.\n        doSomething(item.customerName());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: EntityCache Implementation Before CORS Optimization\nDESCRIPTION: Initial implementation of EntityCache showing standard AJAX request pattern that results in multiple CORS preflight requests. Demonstrates basic ARM resource querying setup.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-loadingdata.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic resourceEntities = new MsPortalFx.Data.EntityCache<DataModels.RootResource, string>({\n    entityTypeName: ExtensionTemplate.DataModels.RootResourceType,\n    sourceUri: MsPortalFx.Data.uriFormatter(endpoint + \"{id}?\" + this._armVersion, false),\n    supplyData: (httpMethod: string, uri: string, headers?: StringMap<any>, data?: any, params?: any) => {\n        return MsPortalFx.Base.Net.ajax({\n            uri: uri,\n            type: httpMethod || \"GET\",\n            dataType: \"json\",\n            traditional: true,\n            headers: headers,\n            contentType: \"application/json\",\n            setAuthorizationHeader: true,\n            cache: false,\n            data: data\n        })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Menu Configuration Interface\nDESCRIPTION: TypeScript interface defining the structure of resource menu configuration including groups, default item ID and options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceMenuConfig {\n    groups: FxMenuBlade.MenuGroup[];\n    defaultItemId: string;\n    options?: ResourceMenuOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM Resources Request\nDESCRIPTION: JSON schema showing how to configure ARM GET requests for accessing runtime property values with multiple named requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"resources\": [\n    {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n    },\n    {\n        \"name\": \"vmInstanceView\",\n        \"id\": \"[concat(parameters('id'), '?$expand=instanceView')]\",\n        \"apiVersion\": \"2021-03-01\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Extension Support Feature Flags in Azure Portal\nDESCRIPTION: Example of how to enable various support settings in an extension through query string parameters. These flags enable troubleshooting, health monitoring, and support request capabilities when coordinated with the support extension team.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n   &<extensionName>=troubleshootsettingsenabled=true\n   &<extensionName>=healthsettingsenabled=true\n   &<extensionName>=requestsettingsenabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Extension in Dogfood Environment\nDESCRIPTION: This JSON snippet demonstrates how to configure an Azure portal extension in the dogfood environment. It includes settings for the extension name, feedback email, resource access, service tree ID, ICM details, and hosting service name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-onboarding-old.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Microsoft_Azure_DemoExtension\",\n    \"feedbackEmail\": \"demoextPMDev@microsoft.com\",\n    \"flags\": \"SupportsPrewarming\",\n    \"resourceAccess\": [\n        {\n            \"name\": \"\",\n            \"resource\": \"https://management.core.windows.net/\"\n        },\n        {\n            \"name\": \"self\",\n            \"resource\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        },\n        {\n            \"name\": \"graph\",\n            \"resource\": \"https://graph.windows.net/\",\n            \"oAuthClientId\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        },\n        {\n            \"name\": \"microsoft.graph\",\n            \"resource\": \"https://graph.microsoft.com/\",\n            \"oAuthClientId\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\"\n        }\n    ],\n    \"serviceTreeId\": \"abcdbde1-a1b3-41da-be44-e3fa76a3ffc6\",\n    \"icm\": {\n        \"service\": \"Demo IcM Service\",\n        \"team\": \"Azure Demo UX\"\n    },\n    \"hostingServiceName\": \"demoextension\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overall Alerting Structure in Azure Portal (JSON)\nDESCRIPTION: This JSON structure outlines the main configuration file for Azure Portal extension alerts. It includes the extension name, a global enable flag, and an array of `environments` where specific alert types like `clientError`, `availability`, `create`, and `performance` can be configured for different portal domains (including national clouds like `portal.azure.cn`). The `clientError` section allows defining criteria for both `message` and `percentage` based alerts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-error-messages.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"], // National clouds are supported.\n            \"availability\": [...], // Optional. Add it when you want to enable availability alerts.\n            \"clientError\": [\n                {\n                    \"type\": \"message\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                },\n                {\n                    \"type\": \"percentage\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n            ],\n            \"create\": [...], // Optional. Add it when you want to enable create alerts.\n            \"performance\": [...], // Optional. Add it when you want to enable performance alerts.\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            ...\n            \"clientError\": [\n                {\n                    ...\n                }\n                ...\n             ],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving value from editscopeless TextBox for deployment\nDESCRIPTION: Gets the value from the TextBox control to pass to the ARM deployment template. Since the control is not backed by EditScope, its value must be accessed directly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar engineName = this.engineName.value();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum for ResourceGroupSelector Modes\nDESCRIPTION: Defines the possible selection modes for the ResourceGroupSelector control using a TypeScript enum, either UseExisting or CreateNew.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceGroupSelector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n            /**\n             * The modes possible for the dropdown.\n             */\n            const enum Mode {\n                UseExisting = 0,\n                CreateNew = 1,\n            }\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG in TypeScript Command ViewModel (AMD)\nDESCRIPTION: This TypeScript snippet shows how to use a custom SVG icon (Commandbar_Trash.svg) in a command bar view model using AMD module loading (`require`). It imports the generated SVG definitions and assigns the specific custom icon to the 'icon' observable property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport CustomSvgImages = require(\"./SvgDefinitions.js\");\nexport class DeleteCommandViewModel implements MsPortalFx.ViewModels.CommandContract {\n    public icon = ko.observable<MsPortalFx.Base.Image>();\n\n    constructor(dataContext: WebsitesDataContext) {\n        this.icon(CustomSvgImages.Content.MsPortalFx.Images.commandbar_Trash);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using WaitForAndFindElement Extension Method in C#\nDESCRIPTION: Demonstrates the use of a BaseElement extension method that wraps the webDriver.WaitUntil call, providing a more concise way to wait for and find elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = blade.WaitForAndFindElement<Part>(p => p.PartTitle.Equals(\"TheTitle\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Refresh Polling in TypeScript\nDESCRIPTION: Shows how to configure a QueryCache with polling enabled for automatic data refresh from the server.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\npublic robotsQuery = new MsPortalFx.Data.QueryCache<Robot, any>({\n    entityTypeName: RobotMetadata.name,\n    sourceUri: () => RobotData._apiRoot,\n    poll: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the ViewModel for a URL Command (TypeScript)\nDESCRIPTION: Implements the view model ('UriCommandViewModel') for a URL command by extending 'MsPortalFx.ViewModels.UriCommand'. The constructor sets the target URL using 'this.navigateUri()', typically loading the URL from resources (e.g., 'SamplesExtension.Resources.Strings.microsoftUri'). It also sets an icon for the command. This view model doesn't require 'execute' or dialog methods as the framework handles navigation based on the 'navigateUri' property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UriCommandViewModel extends MsPortalFx.ViewModels.UriCommand {\n\n    /**\n     * Load any required data using this.bindings, and update navigateUri if needed\n     */\n    constructor(container: MsPortalFx.ViewModels.ContainerContract,\n                initialValue: any,\n                dataContext: DataContext) {\n        super();\n\n        // Specify the  Uri to launch when clicking the button. It will be a common pattern\n        // to use info in this.bindings to load sub data, and change this after the view is\n        // ready.\n        this.navigateUri(SamplesExtension.Resources.Strings.microsoftUri);\n        this.icon(MsPortalFx.Base.Images.Link());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Menu Blade - URL Pattern - Plaintext\nDESCRIPTION: Shows the URL pattern for linking to a menu blade inside the Azure Portal, including the menu item identifier segment. The optional {menuItemId} segment selects a specific menu item on navigation. Requires valid extension, blade, and (optionally) menu item identifiers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#blade/{extension}/{blade}/{menuItemId}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern Example in Data Mapping\nDESCRIPTION: Demonstrates an incorrect way of handling observables in mapping functions that can lead to selection issues and performance problems.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nvar projectedItems = this._view.items.map<RobotDetails>({\n    mapping: (robot: SamplesExtension.DataModels.Robot) => {\n        return <RobotDetails>{\n            name: robot.name,\n\n            // DO NOT DO THIS!  USE A COMPUTED INSTEAD!\n            computedName: \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        };\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Create Dropdown in TypeScript\nDESCRIPTION: Code for creating a dropdown control with a 'Create new' sub-label that opens a context pane for creating new items. Includes validation and item management functionality.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-create.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst engineDisplacement = FxDropDown.create<string>(container, {\n    label: ClientResources.engineDisplacementColumn,\n    infoBalloonContent: ClientResources.infoBalloonContent,\n    items: displacementItems,\n    validations: [\n        new Validations.Required(),\n    ],\n    subLabel: {\n        htmlTemplate: `<a href=\"#\" data-bind=\"text: createNew, fxclick: onClick\"></a>`,\n        viewModel: {\n            createNew: ClientResources.createNew,\n            onClick: () => {\n                void container.openContextPane(BladeReferences.forBlade(\"CreateDisplacementItemBlade\").createReference({\n                    parameters: { label: ClientResources.engineDisplacementColumn },\n                    onClosed: (reason, data) => {\n                        if (reason === BladeClosedReason.ChildClosedSelf) {\n                            const { value } = data;\n                            const currentItems = displacementItems();\n                            if (MsPortalFx.findIndex(currentItems, (i) => MsPortalFx.localeCompareIgnoreCase(ko.unwrap(i.text), value) === 0) === -1) {\n                                const newItem = {\n                                    text: value,\n                                    value: value,\n                                };\n                                currentItems.push(newItem);\n                                engineDisplacement.suppressSelectedUpdate(true);\n                                displacementItems(currentItems);\n                                engineDisplacement.suppressSelectedUpdate(false);\n                            }\n                            this._displacement(value);\n                        }\n                    },\n                }));\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Bitbucket Logo SVG Icons - Standard and Boxed Variants\nDESCRIPTION: SVG vector graphics defining the Bitbucket logo in both standard and boxed container variants. Uses Azure blue (#0072C6) as primary color with opacity overlays.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_193\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"-0.5 0.5 30 30\" enable-background=\"new -0.5 0.5 30 30\" xml:space=\"preserve\">\n<ellipse fill=\"#0072C6\" cx=\"14.52\" cy=\"15.01\" rx=\"2.072\" ry=\"2.072\"/>\n<path fill=\"#0072C6\" d=\"M14.5,0.5C7.312,0.5,1.483,2.404,1.483,4.761l2.16,12.727c0,2.52,4.854,4.552,10.857,4.552\n\tc5.992,0,10.857-2.032,10.857-4.552l2.16-12.727C27.505,2.404,21.688,0.5,14.5,0.5z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Command Types Enum in TypeScript\nDESCRIPTION: Enumeration defining the allowed types of static commands in the Azure Portal. Includes commands for opening blades, accessing the marketplace, and menu operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-staticCommandKinds-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum StaticCommandKinds {\n    OpenBladeCommand,\n    OpenMarketplaceCommand,\n    MenuCommand\n}\n```\n\n----------------------------------------\n\nTITLE: Using BrowserAutomation.runAutomation for Cross-Compatibility\nDESCRIPTION: Example of using runAutomation to provide both Selenium and Playwright implementations of the same action. This approach ensures tests can run with either automation framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst dropDownArrow = testFx.portal.element(testFx.Locators.By.className(dropDownArrowClass));\nawait testFx.BrowserAutomation.runAutomation(\n    async (wd) => await wd.executeScript(\"$(arguments[0]).trigger('mousedown').trigger('mouseup').trigger('click');\", dropDownArrow),\n    async () => await dropDownArrow.click()\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Storage Connection String Format\nDESCRIPTION: Specifies the standard format for an Azure Storage connection string. This format is typically provided by the Azure portal and can be used as a storage credential secret in Key Vault for Ev2 deployments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nThe format of the storage connection string is the default form `DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={3}`, which is the format provided from `portal.azure.com`.\n```\n\n----------------------------------------\n\nTITLE: Defining Browse Columns for Resource Type Data Grid - TypeScript\nDESCRIPTION: This TypeScript snippet uses module and export constructs to define string constants for grid column IDs and their internal properties, used in browse (listing) configurations for resource types. It helps enforce consistency, unique keys, and maintainability in the columns displayed for printers. The constants reside under the BrowseColumns module and its submodules for status, model, and technology. There are no inputs or outputs; these are static values used in other configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nmodule BrowseColumns {\n   /**\n    * The status column.\n    */\n   export const status = \"status\";\n\n   /**\n    * Constants for the properties for the status column.\n    */\n   export module StatusProperties {\n       /**\n        * The status property.\n        */\n       export const status = \"status\";\n   }\n\n   /**\n    * The model column.\n    */\n   export const model = \"model\";\n\n   /**\n    * Constants for the properties for the model column.\n    */\n   export module ModelProperties {\n       /**\n        * The model property.\n        */\n       export const model = \"model\";\n   }\n\n   /**\n    * The technology column.\n    */\n   export const technology = \"technology\";\n\n   /**\n    * Constants for the properties for the technology column.\n    */\n   export module TechnologyProperties {\n       /**\n        * The technology property.\n        */\n       export const technology = \"technologyString\";\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using PNG Image in Command ViewModel via ImageUri\nDESCRIPTION: This TypeScript snippet demonstrates using a PNG image file instead of an SVG for a command's icon. It utilizes the `MsPortalFx.Base.Images.ImageUri()` function, providing the URI to the PNG image obtained via `MsPortalFx.Base.Resources.getContentUri()`. This is presented as an alternative to the standard SVG approach.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport class DeleteCommandViewModel implements MsPortalFx.ViewModels.CommandContract {\n    public icon = ko.observable<MsPortalFx.Base.Image>();\n\n    constructor(dataContext: WebsitesDataContext) {\n        //SVG version\n        //this.icon(MsPortalFx.Base.Images.Start());\n\n        //PNG Version\n        this.icon(\n            MsPortalFx.Base.Images.ImageUri(\n                MsPortalFx.Base.Resources.getContentUri(\"Content/RemoteExtension/Images/Website_Commandbar_Play.png\")\n            )\n        );\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Monospace Font Styling in Azure Portal\nDESCRIPTION: Demonstrates how to apply monospace font styling to text blocks in the Azure Portal using the msportalfx-font-monospace class. This is useful for displaying fixed-width text that needs to be aligned precisely.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-utility-classes.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"msportalfx-font-monospace\">msportalfx-font-monospace</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Part Load Reliability in Azure Data Explorer\nDESCRIPTION: This query analyzes part load reliability for a specific extension in Azure Portal. It calculates successful and failed loads, along with user-specific metrics, over a 14-day period.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where name contains \"MyExtensionName\"\n| where action in (\"PartReady\", \"PartErrored\")\n| summarize SuccessfulLoads = countif(action == \"PartReady\"), FailedLoads = countif(action == \"PartErrored\")\n, SuccessfulUsersLoads = dcountif(userId, action == \"PartReady\", 4), FailedUserLoads = dcountif(userId, action == \"PartErrored\", 4)\n by bin(PreciseTimeStamp, 1d), name\n| extend ReliabilitySLA = (todouble(SuccessfulLoads) / todouble(SuccessfulLoads + FailedLoads)) * 100\n| extend ReliabilityUserSLA = (todouble(SuccessfulUsersLoads) / todouble(SuccessfulUsersLoads + FailedUserLoads)) * 100\n| sort by ReliabilitySLA asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties Tab in Resource Overview\nDESCRIPTION: JSON schema for adding a Properties tab to the resource overview. It demonstrates how to define groups with display names, icons, and optional menu actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Properties\",\n    \"groups\": [\n        {\n            \"displayName\": \"Virtual machine\",\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.VirtualMachine\",\n            \"action\": {\n                \"menu\": \"tags\"\n            },\n            \"description\": \"This is a virtual machine.\",\n            \"items\": [\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft.Common.ManagementGroupSelector Control in JSON\nDESCRIPTION: This snippet demonstrates how to define a Microsoft.Common.ManagementGroupSelector control in a JSON configuration. It includes the basic properties required for the control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ManagementGroupSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"managementGroup\",\n    \"type\": \"Microsoft.Common.ManagementGroupSelector\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Link Handlers in Azure Portal\nDESCRIPTION: This code sets up different click behavior handlers based on link type selection. It assigns appropriate click callbacks and display text for each link type (callback, blade, resource, and clickable links).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n                this.dynamicFxclickText(Resources.dynamicFxclickCallbackText);\n            } else if (Resources.bladeLink === value) {\n                this.dynamicFxclick(this._onBladeLinkFxclickLink);\n                this.dynamicFxclickText(Resources.dynamicFxclickBladeLinkText);\n            } else if (Resources.resourceLink === value) {\n                this.dynamicFxclick(this._onResourceLinkFxclickLink);\n                this.dynamicFxclickText(Resources.dynamicFxclickResourceLinkText);\n            } else if (Resources.clickableLink === value) {\n                this.dynamicFxclick(this._onClickableLinkFxclickLink);\n                this.dynamicFxclickText(Resources.dynamicFxclickClickableLinkText);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Format for Property Item Content (JSON)\nDESCRIPTION: This snippet demonstrates setting the 'format' property to 'Secret' to display the value as asterisks ('*') in the UI. It is used for sensitive information such as keys or secrets, ensuring the value is obfuscated from direct view. The value may use binding expressions and the configuration should be used where privacy is required.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Key\\\",\\n    \\\"value\\\": \\\"[resources().id]\\\",\\n    \\\"format\\\": \\\"Secret\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Browse State in XML\nDESCRIPTION: XML configuration for handling empty browse states in Azure Portal assets. Defines description and link properties to display when no results are found or when resources haven't been created.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType\n    Name=\"MyAsset\"\n    ...\n    Description=\"{Resource MyAsset.description, Module=ClientResources}\">\n    ...\n    <Link Title=\"{Resource MyAsset..linkTitle1, Module=ClientResources}\" Uri=\"https://www.bing.com\"/>\n    <Link Title=\"{Resource MyAsset.linkTitle2, Module=ClientResources}\" Uri=\"https://www.bing.com\"/>\n    ...\n  </AssetType>\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Criteria for Performance Alerts (Azure Portal, JSON)\nDESCRIPTION: This JSON snippet serves as a sample template for specifying alert criteria in Azure Portal extension alert configurations. Fields specify severity, percentiles, thresholds, and optional properties for name paths and exclusions. Supported dependencies are alerting services in Azure Portal; parameters like 'severity', 'percentile', and 'percentileDurationThresholdInMilliseconds' control sensitivity and scope. The snippet is intended to be embedded in the 'criteria' property of a parent alert configuration, and guides the system on when to trigger alerts based on performance data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"severity\": 3, // Support value 0, 1, 2, 3 or 4.\n    \"enabled\": true, // Enable or disable this criteria.\n    \"percentile\": 95, // Support value 80 or 95.\n    \"percentileDurationThresholdInMilliseconds\": 4000,\n    \"minAffectedUserCount\": 10,\n    \"bottomMinAffectedUserCount\": 2,\n    \"namePath\": [\"*\"], // Only support for blade or part type.\n    \"exclusion\": [\n        \"Extension/Your_Extension_Name/Blade/BladeNameA\",\n        \"Extension/Your_Extension_Name/Blade/BladeNameB\"], // Only support for blade or part type.\n    \"safeDeploymentStage\": [\"3\"], // Optional. It does not support asterisk(\"*\") sign.\n    \"datacenterCode\": [\"AM\"] // Optional.\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Reference Schema Documentation\nDESCRIPTION: Defines the schema for icon references in Azure Portal with two options: an object containing file path, palette, and type properties, or a simple string value. The object option includes links to external documentation for palette and SVG type enumerations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-iconReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# iconReference\n* [iconReference](#iconreference)\n    * [Definitions:](#iconreference-definitions)\n        * [Option 1](#iconreference-definitions-option-1)\n        * [Option 2](#iconreference-definitions-option-2)\n\n## Definitions:\n### Option 1\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|file|False|relative path to file\n|palette|False|See [here](dx-enum-iconReference-palette.md) for allowed palette values.\n|type|False|See [here](dx-enum-svgEnum.md) for a list of supported types\n### Option 2\n##### Any String\n```\n\n----------------------------------------\n\nTITLE: Interacting with Selector Field and Picker Blade in Azure Portal Form (C#)\nDESCRIPTION: This snippet illustrates how to interact with a Selector field in a form, open its associated picker blade, select an item from the picker's grid, and confirm the selection. It demonstrates complex form interactions in Azure Portal extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nfieldName = \"subscriptionField\";\nform.FindField<Selector>(fieldName).Click();\n\nblade = portal.FindSingleBladeByTitle(\"Select Subscription\");\n\nvar grid = webDriver.WaitUntil(blade.FindElement<Grid>, \"Could not find the grid in the blade.\");\nGridRow row = grid.SelectRow(subscriptionName);\n\nPickerActionBar pickerActionBar = webDriver.WaitUntil(() => blade.FindElement<PickerActionBar>(),\n                                                    \"Could not find the picker action bar.\");\nwebDriver.WaitUntil(() => pickerActionBar.OkButton.IsEnabled,\n                    \"Expected the OK Button of the Picker Action Bar to be enabled after selecting an item in the picker list.\");\npickerActionBar.ClickOk();\n```\n\n----------------------------------------\n\nTITLE: Post-Migration Extension Resource Access Configuration - Azure portal.azure.com.json - JSON\nDESCRIPTION: Shows the new authorization section format for extension hosting configuration post-migration, specifying access to Microsoft Graph only (ARM is now default and omitted). Inputs include resource names and URIs, with this section placed in portal.azure.com.json or equivalent. Outputs enable the authentication pipeline to detect and enforce specific resource authorization requirements; constraints: no override of extension-level oAuthClientId, must be deployed in all stages before use.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"authorization\": {\\n    \"resourceAccess\": [\\n      {\\n        \"name\": \"microsoft.graph\",\\n        \"resource\": \"https://graph.microsoft.com/\"\\n      }\\n    ]\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Including Menu Items Using AFEC Flags in Azure Portal\nDESCRIPTION: Shows configuration for conditionally including menu items using AFEC flags. The example demonstrates overview menu item configuration with AFEC flag condition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceMenuItems-conditionalSupport.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"menu\": {\n      \"overview\": {\n        \"id\": \"dxOverviewId\",\n        \"displayName\": \"dxOverviewDisplayName\",\n        \"icon\": \"someIcon\",\n        \"blade\": {\n          \"name\": \"Overview_dx\"\n        },\n        \"fx.afec\": {\n          \"names\": [\"bar\"],\n          \"includeWhen\": \"Disabled\",\n        },\n```\n\n----------------------------------------\n\nTITLE: Defining Notifications in PDL (v2)\nDESCRIPTION: XML structure for defining notifications in PDL (Portal Definition Language) for Azure Portal v2, including server event mappings and message definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Notification Name=\"MyNotification\" AssetType=\"MyAsset\">\n    <Notification.ServerEvent>\n    <NotificationServerEventMapping\n        Source=\"Resource.Provider\"\n        Operation=\"Resource.Provider/types\"/>\n    </Notification.ServerEvent>\n\n    <InProgressMessage\n        Status=\"started\"\n        Title=\"{Resource MyNotification.Started.title, Module=MyExtension/MyClientStrings}\"\n        Message=\"{Resource MyNotification.Started.message, Module=MyExtension/MyClientStrings}\"/>\n    <ErrorMessage\n        Status=\"failed\"\n        Title=\"{Resource MyNotification.Failed.title, Module=MyExtension/MyClientStrings}\"\n        Message=\"{Resource MyNotification.Failed.title, Module=MyExtension/MyClientStrings}\"/>\n    <InfoMessage\n        Status=\"succeeded\"\n        Title=\"{Resource MyNotification.Succeeded.title, Module=MyExtension/MyClientStrings}\"\n        Message=\"{Resource MyNotification.Succeeded.title, Module=MyExtension/MyClientStrings}\"/>\n</Notification>\n```\n\n----------------------------------------\n\nTITLE: Mutating Part Containers in Azure Blades (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how parts of a blade may be mutated at runtime by calling the mutate method on a part container. It is included as a diagnostic example for extension authors to help identify and review potential mutation logic within their blades, as part mutations are being deprecated. No external dependencies are specified, but developers should ensure they correctly identify all usages matching this pattern when preparing for the deprecation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-key-announcments.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npartContainer.mutate(…);\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceGroupSelector Output Structure in TypeScript\nDESCRIPTION: Defines the TypeScript type for the object returned by the ResourceGroupSelector. This object includes the selected mode (`UseExisting` or `CreateNew`) represented by the `SelectedMode` enum, and the ARM representation of the resource group using the `ResourceGroup` interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceGroupSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n    * The mode of the dropdown, create new or use existing.\n    */\n    mode: SelectedMode;\n    /**\n    * The ARM value for the resource group.\n    */\n    value: ResourceGroup;\n```\n\n----------------------------------------\n\nTITLE: Implementing NoResource Menu Configuration\nDESCRIPTION: Complete implementation of getResourceMenuConfig using NoResource option with overview group and item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                {\n                    id: \"overview_group\",\n                    displayText: ClientResources.ResourceMenuGroup.overview,\n                    items: [\n                        {\n                            id: \"overview\",\n                            displayText: ClientResources.ResourceMenu.overview,\n                            enabled: ko.observable(true),\n                            keywords: \"overview\",\n                            icon: Images.MyResourceIcon,\n                            supplyBladeReference: () => {\n                                return new BladeReferences.MyResourceOverviewBlade({ id: resourceId });\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Resource Schema in JSON\nDESCRIPTION: This JSON schema outlines the structure for representing an Azure resource. It includes the resource name, full resource ID, deployment location, and associated subscription name. This structure is crucial for uniquely identifying and managing resources within Azure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ResourceSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"{resource-name}\",\n    \"id\": \"/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}\",\n    \"location\": \"{deployed-location}\",\n    \"subscriptionName\": \"{subscription-name}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Client Error Alerts with Environment Settings\nDESCRIPTION: Base configuration structure for client error alerts that defines environments and alert types. The configuration includes extension name, enabled status, and different environment settings for various portal domains.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"],\n            \"availability\": [...],\n            \"clientError\": [\n                {\n                    \"type\": \"message\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                },\n                {\n                    \"type\": \"percentage\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n            ],\n            \"create\": [...],\n            \"performance\": [...],\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            ...\n            \"clientError\": [\n                {\n                    ...\n                }\n                ...\n             ],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Implementation of Map Projection\nDESCRIPTION: Correct implementation of map() that passes through observables directly and uses pureComputed for derived values, preventing unnecessary rebuilds of the projection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.map<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: robot.name,\n        status: robot.status,\n        modelAndMfg: ko.pureComputed(() => {\n            this._logComputedRecalculating(projectionId, robot);\n            return \"{0}:{1}\".format(robot.model(), robot.manufacturer());\n        }),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Default ResourceScope Control in JSON\nDESCRIPTION: A basic implementation of the Microsoft.Common.ResourceScope control with minimal configuration. This snippet shows how to include the control in a Form view for deployment scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceScope.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"resourceScope\",\n  \"type\": \"Microsoft.Common.ResourceScope\"\n}\n```\n\n----------------------------------------\n\nTITLE: PureComputed vs Reactor Comparison\nDESCRIPTION: Demonstrates the difference between ko.pureComputed and ko.reactor, showing how side effects are handled differently in each approach.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet obsNum = ko.observable(0);\nlet pureComputedCounter = 0;\nlet reactorCounter = 0;\n\nlet pure = ko.pureComputed(() => {\n    pureComputedCounter++;\n    return obsNum() + 1;\n});\n\nlet reactor = ko.reactor(lifetime, () => {\n    reactorCounter++;\n    return obsNum() + 2;\n});\n\nobsNum(10);\nobsNum(3);\nobsNum(5);\n\nconsole.log(\"According to pureComputed obsNum changed \" + pureComputedCounter + \" times\");\nconsole.log(\"According to reactor obsNum changed \" + reactorCounter + \" times\");\n```\n\n----------------------------------------\n\nTITLE: Defining Authored Type Metadata for a Model in TypeScript\nDESCRIPTION: Defines a TypeScript interface `ComputerComponent` and its corresponding `MsPortalFx.Data.Metadata.Metadata` object (`ComputerComponentMetadata`). It registers the metadata using `MsPortalFx.Data.Metadata.setTypeMetadata`. This is part of the manual authoring approach where schema information is explicitly defined in the client-side code.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    export interface ComputerComponent {\n        name: KnockoutObservable<string>;\n        display: KnockoutObservable<string>;\n        componentType: KnockoutObservable<number>;\n        model: KnockoutObservable<string>;\n        manufacturer: KnockoutObservable<string>;\n        status: KnockoutObservable<number>;\n    }\n\n    export const ComputerComponentMetadata: MsPortalFx.Data.Metadata.Metadata = {\n        name: \"SamplesExtension.DataModels.ComputerComponent\",\n        properties: {\n            name: {},\n            display: {},\n            componentType: {},\n            model: {},\n            manufacturer: {},\n            status: {}\n        },\n        idProperties: [\n            name\n        ],\n        entityType: false,\n        hasGloballyUniqueId: false\n    };\n\n    MsPortalFx.Data.Metadata.setTypeMetadata(ComputerComponentMetadata.name, ComputerComponentMetadata);\n\n```\n\n----------------------------------------\n\nTITLE: Complete Browse Test Sample in C#\nDESCRIPTION: This snippet provides a full sample of a browse test, including opening the browse flyout, selecting resource groups, waiting for grid columns to load, choosing a new column, and verifying the updated columns. It's part of a test class that inherits from BaseTest.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-openbrowse.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n//------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n//------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Portal.TestFramework.Core.Controls;\nusing Microsoft.Portal.TestFramework.Core.Shell;\nusing Microsoft.Selenium.Utilities;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace DocSampleTest\n{\n    /// <summary>\n    /// Summary description for BrowseTest\n    /// </summary>\n    [TestClass]\n    public class BrowseTest : BaseTest\n    {\n        [TestMethod]\n        public void OpenBrowseItem()\n        {\n            //config#openBrowseItem\n            portal.SideBar.OpenBrowse();\n            var browseFlyout = portal.SideBar.BrowseFlyout;\n\n            webDriver.WaitUntil(\n                () => browseFlyout.Displayed,\n                \"Expected the browse flyout to be displayed\");\n            browseFlyout.GetItem(\"Resource groups\").Click();\n            var rgBrowseBlade = portal.FindSingleBladeByTitle(\"Resource groups\");\n            //config#openBrowseItem\n\n            //config#findGrid\n            Grid rgBrowseGrid = rgBrowseBlade.WaitForAndFindElement<Grid>();\n\n            //config#waitForGridToLoadAllColumns\n            var browseGridColumns = new List<string>() { \"NAME\", \"SUBSCRIPTION\", \"LOCATION\" };\n\n            // You probably want to wrap this in a function for re-use.  This is inlined for documenation purposes only\n            webDriver.WaitUntil(\n                    () =>\n                    {\n                        var headers = rgBrowseGrid.Headers.ToList();\n                        if (headers.Count != browseGridColumns.Count)\n                        {\n                            return false;\n                        }\n                        for (var index = 0; index < browseGridColumns.Count; index++)\n                        {\n                            if (!headers[index].Text.Equals(browseGridColumns[index], StringComparison.OrdinalIgnoreCase))\n                            {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    \"Columns never finished loading or they were incorrect\");\n            //config#waitForGridToLoadAllColumns\n\n            //config#chooseColumns\n            rgBrowseBlade.FindCommandBar().ClickCommandBarItem(\"Columns\");\n\n            // Find the column choose blade that pops up on the right\n            var columnChooserBlade = portal.FindSingleBladeByTitle(\"Choose columns\");\n\n            // Find the column we want to activate\n            var columChooserGrid = columnChooserBlade.WaitForAndFindElement<Grid>();\n            var statusCell = columChooserGrid.FindCell(\"Status\");\n            var statusCheckbox = statusCell.FindElement<CheckBox>();\n            statusCheckbox.Click();\n            columnChooserBlade.FindElement<FilterActionBar>().UpdateButton.Click();\n            //config#chooseColumns\n\n            //config#verifyNewColumns\n            browseGridColumns.Add(\"Status\");\n\n            // You probably want to wrap this in a function for re-use.  This is inlined for documenation purposes only\n            webDriver.WaitUntil(\n                    () =>\n                    {\n                        var headers = rgBrowseGrid.Headers.ToList();\n                        if (headers.Count != browseGridColumns.Count)\n                        {\n                            return false;\n                        }\n                        for (var index = 0; index < browseGridColumns.Count; index++)\n                        {\n                            if (!headers[index].Text.Equals(browseGridColumns[index], StringComparison.OrdinalIgnoreCase))\n                            {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    \"Columns never finished loading or they were incorrect\");\n            //config#verifyNewColumns\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft.Solutions.ArmApiControl-request Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Microsoft.Solutions.ArmApiControl-request object. It includes required and optional fields for making ARM API requests, such as HTTP method, path, body, and transforms.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-Microsoft.Solutions.ArmApiControl-request.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|method|True|Specifies the HTTP method. Only \"GET\" or \"POST\" are allowed\n|path|True|Specifies a URL that must be a relative path to an ARM endpoint\n|body|False|Specifies a JSON body that is sent with the request.\n|transforms|False|See [here](dx-function-transforms.md) for more on transforms\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Setting Playwright Automation Dynamically in Test Code\nDESCRIPTION: Code to dynamically set Playwright as the automation tool within test code. This approach allows selective use of Playwright for specific test files or test suites.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbefore(async () => {\n    await testFx.BrowserAutomation.setAutomation(testFx.BrowserAutomationType.Playwright);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Blade with ARM Request in Azure Portal\nDESCRIPTION: This JSON defines a Form blade that executes an ARM request (POST action) for a resource. It takes a resource ID as a parameter, specifies the API version, constructs the request path, and sends a body with location information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"view\": {\n    \"kind\": \"Form\",\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"properties\": {\n      \"title\": \"Form blade: please fill in values\",\n      \"steps\": [\n      ],\n      \"armRequest\": {\n        \"path\": \"[concat(resources().id, '/actionName?api-version=2014-04-01')]\",\n        \"method\": \"POST\",\n        \"body\": \"[parse(concat('{\\\"location\\\":', string(resources().location), '}'))]\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Type Metadata for Editable Grid Entity in TypeScript\nDESCRIPTION: Example of applying type metadata to mark a type as an entity type for use in an editable grid, specifying the properties that constitute the entity's ID for tracking individual items in an array.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalFx.Data.Metadata.setTypeMetadata(\"GridItem\", {\nproperties: {\n    key: null,\n    option: null,\n    value: null,\n},\nentityType: true,\nidProperties: [ \"key\" ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SubscriptionDropDown Component\nDESCRIPTION: Import statement for the SubscriptionDropDown control from the Azure Portal framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport * as SubscriptionDropDown from \"Fx/Controls/SubscriptionDropDown\";\n```\n\n----------------------------------------\n\nTITLE: Defining Getting Started Links Schema in Markdown\nDESCRIPTION: Specifies the structure for getting started links in Azure Portal tutorials. Each item in the array is an object with required 'title' and 'action' properties, and an optional 'fx.feature' property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-tutorials-gettingStartedLinksReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the tile\n|action|True|An array of items where each item is of the [type](dx-getstarted-gettingStartedActionReference.md) \n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: EditableGrid Output Structure\nDESCRIPTION: Example of the output structure generated by the EditableGrid control showing the format of collected data for a single row including name, gender, and contact preference values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.EditableGrid.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"colName\": \"contoso\",\n    \"colGender\": \"female\",\n    \"colContactPreference\": \"email\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Asset Part and Blade Definition\nDESCRIPTION: XML configuration for defining the associated part and blade components for an asset type, including required ID parameter specifications.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Part Name=\"MyAssetPart\" ViewModel=\"MyAssetPartViewModel\" AssetType=\"MyAsset\" AssetIdProperty=\"id\" ...>\n  <Part.Properties>\n    <!-- Required. Must be the only input parameter. -->\n    <Property Name=\"id\" Source=\"{DataInput Property=id}\" />\n  </Part.Properties>\n  <BladeAction Blade=\"MyAssetBlade\">\n    <BladeInput Source=\"id\" Parameter=\"id\" />\n  </BladeAction>\n  ...\n</Part>\n\n<Blade Name=\"MyAssetBlade\" ViewModel=\"MyAssetBladeViewModel\" AssetType=\"MyAsset\" AssetIdProperty=\"id\">\n  <Blade.Parameters>\n    <!-- Required. Must be the only input parameter. -->\n    <Parameter Name=\"id\" Type=\"Key\" />\n  </Blade.Parameters>\n  <Blade.Properties>\n    <Property Name=\"id\" Source=\"{BladeParameter Name=id}\" />\n  </Blade.Properties>\n  ...\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Specifying Performance Alert Criteria in JSON\nDESCRIPTION: This JSON snippet details the criteria for performance alerts. It includes properties like `severity`, `enabled` status, `percentile` (80 or 95), `percentileDurationThresholdInMilliseconds` (performance threshold), `minAffectedUserCount` (minimum users impacted), `bottomMinAffectedUserCount` (threshold for low traffic periods), `namePath` (target blades/parts, '*' for all), `exclusion` (list of paths to exclude), `safeDeploymentStage`, and `datacenterCode`. These properties define the conditions based on performance metrics and user impact for triggering an alert.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"severity\": 3,\n    \"enabled\": true,\n    \"percentile\": 95,\n    \"percentileDurationThresholdInMilliseconds\": 4000,\n    \"minAffectedUserCount\": 10,\n    \"bottomMinAffectedUserCount\": 2,\n    \"namePath\": [\"*\"],\n    \"exclusion\": [\n        \"Extension/Your_Extension_Name/Blade/BladeNameA\",\n        \"Extension/Your_Extension_Name/Blade/BladeNameB\"],\n    \"safeDeploymentStage\": [\"3\"],\n    \"datacenterCode\": [\"AM\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with Notifications v1 API in TypeScript\nDESCRIPTION: Demonstrates the deprecated method for creating and adding a notification using the `MsPortalFx.UI.NotificationManager.Notification` class constructor and the `MsPortalFx.UI.NotificationManager.addNotification` function. This approach requires a corresponding `NotificationDefinition` in PDL. Key parameters include event source, event type, state, description arguments, subscription ID, operation ID, percent complete, and asset ID.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nvar notification = new MsPortalFx.UI.NotificationManager.Notification(\n        \"eventSource\",\n        \"eventType\",\n        MsPortalFx.UI.NotificationManager.NotificationState.InProgress,\n        [formatArg0, formatArg1],\n        subscriptionId,\n        operationId,\n        percentComplete,\n        assetId);\nMsPortalFx.UI.NotificationManager.addNotification(notification);\n```\n```\n\n----------------------------------------\n\nTITLE: Example: Marketplace Item Details from Create Blade - URL Example - Plaintext\nDESCRIPTION: Provides a direct link to the marketplace preview blade for the Microsoft.WindowsServer2016Datacenter-ARM package. Intended for use in documentation, vendor pages, or emails to trigger preview experiences.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#create/Microsoft.WindowsServer2016Datacenter-ARM/preview\n```\n\n----------------------------------------\n\nTITLE: Linking to a Create Blade - URL Pattern - Plaintext\nDESCRIPTION: Shows how to navigate directly to a create blade for a marketplace offering in Azure Portal, by specifying the {package id}. Useful for onboarding flows, templates, or guided deployments. Only the package id is required in addition to portal access.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#create/{package id}\n```\n\n----------------------------------------\n\nTITLE: Completing Form Submission and Verifying Results in Azure Portal (C#)\nDESCRIPTION: This code demonstrates how to complete a form submission by clicking the Create button and then verifying the successful creation by looking for a blade with the title of the created item. It showcases the final steps in a form interaction test.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nblade = portal.FindSingleBladeByTitle(\"Basic Information\");\n\nCreateActionBar createActionBar = webDriver.WaitUntil(() => blade.FindElement<CreateActionBar>(),\n                                                    \"Could not find the create action bar.\");\ncreateActionBar.ClickOk();\n\nportal.FindSingleBladeByTitle(contactName);\n```\n\n----------------------------------------\n\nTITLE: Importing ResourceGroupDropDown Component\nDESCRIPTION: Import statement for the ResourceGroupDropDown control from the Azure Portal framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport * as ResourceGroupDropDown from \"Fx/Controls/ResourceGroupDropDown\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Area in PDL Definition for DataContext Access in XML\nDESCRIPTION: Defines the `Area` attribute within the `<Definition>` tag of a PDL (Portal Definition Language) file. Setting the `Area` to `V1/MasterDetail` ensures that blades defined in this file receive the correct DataContext associated with that area, enabling access to shared data caches like `websitesQuery` and `websiteEntities` defined within that DataContext.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\"\nArea=\"V1/MasterDetail\">\n```\n\n----------------------------------------\n\nTITLE: Analyzing Error Distribution by Error Code in Azure Portal Create Flow\nDESCRIPTION: This query analyzes the distribution of errors in the Azure Portal create flow for the previous week, grouped by error code. It extracts the error code from the details field and filters for specific error conditions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nlet today = floor(now(),1d);\nlet sat = today - dayofweek(today) - 8d;\nlet fri =  sat + 6d;\nClientTelemetry\n| where PreciseTimeStamp >= sat and PreciseTimeStamp < fri + 1d\n| where Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\"\n| extend provisioningStatus = extractjson(\"$.provisioningStatus\", Data, typeof(string)),\n  isCustomProvisioning = extractjson(\"$.isCustomProvisioning\", Data, typeof(string)),\n  oldCreateApi = extractjson(\"$.oldCreateApi\", Data, typeof(string)),\n  eCode = extractjson(\"$.details.code\", Data, typeof(string)),\n  launchingContext = extract('\"launchingContext\"\\\\s?:\\\\s?{([^}]+)', 1, Data)\n| where isnotempty(launchingContext) and isempty(extract(\"^(\\\"telemetryId\\\":\\\"[^\\\"]*\\\")$\", 1, launchingContext)) and oldCreateApi != \"true\"\n| where provisioningStatus != \"DeploymentFailed\" and provisioningStatus != \"DeploymentCanceled\" and isCustomProvisioning != \"true\"\n| where Data !contains \"We could not find a credit card on file for your azure subscription.\"\n| summarize [\"Error Count\"] = count() by [\"Error Code\"] = eCode\n| order by [\"Error Count\"] desc\n```\n\n----------------------------------------\n\nTITLE: Querying Part Performance and Usage with Kusto\nDESCRIPTION: This Kusto query measures the performance and usage metrics for a specific Azure Portal part over the last 14 days. It filters the `ClientTelemetry` table for completed `PartReady` actions for the given part name, then aggregates daily load counts, distinct users, and load duration percentiles (50th, 80th, 95th). Ensure the 'name' filter is set to the correct part identifier.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where action == \"PartReady\"\n| where actionModifier == \"complete\"\n| where name == \"Extension/HubsExtension/StartboardPartInstance/Browse\"\n| summarize Loads = count(), Users = dcount(userId, 4), percentiles(duration, 50, 80, 95) by bin(PreciseTimeStamp, 1d)\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Properties Schema in Azure Portal Monitoring\nDESCRIPTION: Schema definition for chart configuration objects in the Azure Portal Monitoring tab. Each chart requires a title and metrics array, with an optional fx.feature property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-MonitoringTab-charts.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title of the chart.\n|metrics|True|Defines the array of Monitoring metrics. See [here](dx-getstarted-MonitoringTab-metrics.md) for more on metrics.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Robot Interface Definition in TypeScript\nDESCRIPTION: Interface definition for Robot objects stored in the QueryCache, showing the observable properties that will be mapped to the UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\ninterface Robot {\n    name: KnockoutObservable<string>;\n    status: KnockoutObservable<string>;\n    model: KnockoutObservable<string>;\n    manufacturer: KnockoutObservable<string>;\n    os: KnockoutObservable<string>;\n    specId: KnockoutObservable<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Overview Base Schema in Azure Portal\nDESCRIPTION: Base JSON schema for the Resource Overview (GetStarted) view where the Tutorials tab can be added. Defines the basic structure including parameters and resources configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ICM Correlation Rules for Azure Portal Alerting\nDESCRIPTION: A table defining the field values for setting up correlation rules in ICM for Azure Portal alerting. It specifies routing ID format, correlation ID mapping, and various matching criteria.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Value |\n| -----  | ----- |\n| Routing ID | 'AIMS://AZUREPORTAL\\Portal\\{ExtensionName}' |\n| Correlation ID | Specific to alert, use table below to map |\n| Mode | Hit count (recommended) |\n| Match DC/Region | Checked |\n| Match Slice | Checked |\n| Match Severity | Checked |\n| Match Role | Checked |\n| Match Instance/Cluster | Checked |\n```\n\n----------------------------------------\n\nTITLE: Importing V2 Tools Target\nDESCRIPTION: XML configuration for importing the new V2 tools target in the project file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(PkgMicrosoft_Portal_Tools)\\build\\Microsoft.Portal.Tools.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Essentials Section with Action Blade Property (JSON)\nDESCRIPTION: Adds a custom property in the essentials section that, when clicked, opens a specified Azure blade using the provided extension and blade name. The 'action' object includes a 'blade' object with 'extension', 'name', and optional 'parameters'. Inputs are the blade's identifying information and parameter set; outputs an actionable essential property launching the target blade. Limitation: The referenced blade and extension must exist and be enabled.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"propertydisplayname\",\n            \"value\": \"action blade\",\n            \"action\": {\n                \"blade\": {\n                    \"extension\": \"Microsoft_AAD_IAM\",\n                    \"name\": \"ActiveDirectoryQuickStartBlade\",\n                    \"parameters\": {}\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Duration with durationFormat in DatePicker Control\nDESCRIPTION: Examples of using the durationFormat function with DatePicker to format time durations in different ways, showing various format options from years to seconds.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'yy MM dd hh mm ss')]\"\n  => \"1 year 1 month 20 days 9 hours 20 minutes 46 seconds\"\n\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'hh mm ss')]\"\n  => \"9849 hours 20 minutes 17 seconds\"\n\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'dd')]\" => \"410 days\"\n```\n\n----------------------------------------\n\nTITLE: Interacting with Command Bar Commands in Azure Portal Tests\nDESCRIPTION: This snippet demonstrates how to interact with commands in a command bar within the Azure Portal. It shows how to find a command bar on a blade, locate a specific command, and handle the resulting message box when executing a delete operation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar blade = portal.FindSingleBladeByTitle(contactName);\n\nCommandBar commandBar = blade.FindCommandBar();\n\nvar command = commandBar.FindCommandBarItem(\"DELETE\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncommand.Click();\n\ncommandBar.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\nwebDriver.WaitUntil(() => !commandBar.HasMessageBox, \"There is still a message box in the command bar.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring the Select Members Blade Command with Blade Input Bindings (XML)\nDESCRIPTION: This XML snippet illustrates the configuration needed in a PDL file to integrate the SelectMemberV3 Blade with parameter and property bindings. It requires the command and blade definitions present in your Azure PortalFx extension, with references to the ViewModel class and collector instances matching those in your TypeScript implementation. Inputs such as title and subtitle are mapped to blade parameters, and properties for isSingleSelect and isInviteEnabled are linked from other application parts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-adrbac.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!--This is a test collector for the selectMemberv3 blade-->\n    <Command Name =\"TestSelectMemberV3Command\"\n             Kind =\"Blade\"\n             Text =\"{Resource testSelectMemberV3CommandTitle, Module=ClientResources}\"\n             ViewModel =\"TestSelectMemberV3CommandViewModel\">\n      <BladeAction Blade =\"{BladeReference SelectMemberV3, ExtensionName=Microsoft_Azure_AD}\"\n                   ParameterCollector =\"selectMemberCollector\">\n        <BladeInput Parameter=\"title\" Source=\"title\" />\n        <BladeInput Parameter=\"subtitle\" Source=\"subtitle\" />\n      </BladeAction>\n      <Property Name=\"isSingleSelect\" Source=\"{PartProperty Part=SomeOtherPart, Property=isSingleSelect}\"/>\n      <Property Name=\"isInviteEnabled\" Source=\"{PartProperty Part=SomeOtherPart, Property=isInviteEnabled}\"/>\n    </Command>\n\n```\n\n----------------------------------------\n\nTITLE: Default Azure Disk Size Configuration in JSON\nDESCRIPTION: This JSON snippet represents a basic Azure disk configuration, specifying only the default disk size as 8 GiB. It serves as an initial state before a user selects a different disk option.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.BladeInvokeControl-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"diskSizeGB\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Create Flow Funnel by Resource Name in Kusto\nDESCRIPTION: This Kusto query retrieves create flow funnel data for the last 30 days, broken down by resource name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\nlet timeSpan = 30d;\nlet startDate = GetStartDateForLastNDays(timeSpan);\nlet endDate = GetEndDateForTimeSpanQueries();\nGetCreateFunnelByResourceName(startDate, endDate)\n```\n\n----------------------------------------\n\nTITLE: Creating Pending Notifications in TypeScript (v3)\nDESCRIPTION: Example of creating a pending notification that can be updated later using publishPendingNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publishPendingNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishPendingNotification({\n    title: MyNotification.Started.title,\n    description: MyNotification.Started.message,\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Form Fields Using String-Typed Path in TypeScript\nDESCRIPTION: This code shows how to bind form fields to EditScope data using the string-typed path method. While discouraged due to lack of compile-time verification, it provides a simpler syntax for binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.textBoxViewModel = new ObsoleteTextBox.ViewModel(container, this, \"name\", textBoxOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing BladeInvokeControl with Selector\nDESCRIPTION: Example showing the integration of BladeInvokeControl with the Selector component for disk size configuration. Includes blade reference parameters and transformation logic.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Selector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Solutions.BladeInvokeControl\",\n    \"name\": \"diskSize\",\n    \"transforms\": {\n        \"sku\": \"{\\\"diskSizeGB\\\": join(' ',[`Disk Size:`, @.to_string(diskSizeGB), `GiB`]), \\\"subText\\\": join(', ', [@.to_string(iops), join(' ', [@.to_string(throughput), `throughput`]), @.to_string(sku)])}\"\n    },\n    \"openBladeStatus\": \"[steps('step1').vmDisk.changing]\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 8\n    },\n    \"bladeReference\": {\n        \"name\": \"ChangeDiskSizeBlade\",\n        \"extension\": \"Microsoft_Azure_Compute\",\n        \"parameters\": {\n        \"location\": \"eastus\",\n        \"subscription\": \"[steps('step1').resourceScope.subscription.subscriptionId]\",\n        \"isUltraSsdEnabled\": false,\n        \"minimumDiskSize\": 1,\n        \"maximumDiskSize\": 30000,\n        \"diskConfiguration\": {\n            \"sku\": \"Premium_LRS\",\n            \"diskSizeGB\": 4,\n            \"iops\": 400,\n            \"throughput\": 4\n        }\n        },\n        \"inFullScreen\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Permissions for a Part in Azure Portal PDL (XML)\nDESCRIPTION: Shows how to associate required permissions with a Part in PDL, especially when the Part isn't directly linked to a single asset context or requires explicit asset details. The `<PermissionReference>` elements specify the `AssetType`, the property holding the `AssetId`, and the required permission alias. This allows the framework to check permissions for specific resources relevant to the Part's functionality.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Part>\n  <Part.Permissions>\n    <PermissionReference AssetType=\"Robot\" AssetId=\"id\" Permission=\"read\" />\n    <PermissionReference AssetType=\"Robot\" AssetId=\"id\" Permission=\"readChildren\" />\n  </Part.Permissions>\n</Part>\n```\n\n----------------------------------------\n\nTITLE: Full Example of Testing Parts and Blades in Azure Portal Extension (C#)\nDESCRIPTION: This comprehensive example showcases a complete test class for interacting with parts and blades in an Azure Portal extension. It includes test initialization, cleanup, and a test method demonstrating various interactions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Linq;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.Portal.TestFramework.Core;\nusing Microsoft.Selenium.Utilities;\nusing OpenQA.Selenium;\nusing Microsoft.Portal.TestFramework.Core.Shell;\n\nnamespace SamplesExtensionTests\n{\n    [TestClass]\n    public class PartsAndBlades\n    {\n        private const string ExtensionUrl = \"http://localhost:11998\";\n        private const string ExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\SamplesExtension\\Extension\";\n        private static IWebDriver webDriver;\n        private static PortalServer portalServer;\n        private static WebServer extensionServer;\n\n        [TestInitialize]\n        public void TestInitialize()\n        {\n            extensionServer = new WebServer(new Uri(ExtensionUrl), ExtensionWebSitePath);\n            if (extensionServer.IsHostedByTestFramework)\n            {\n                extensionServer.Start();\n            }\n\n            portalServer = PortalServer.Create();\n\n            if (portalServer.IsHostedByTestFramework)\n            {\n                portalServer.RegisterExtension(\"Samples\", new Uri(extensionServer.Uri));\n                portalServer.Start();\n            }\n\n            webDriver = WebDriverFactory.Create();\n            webDriver.Url = \"about:blank\";\n            portalServer.ClearUserSettings();\n        }\n\n        [TestMethod]\n        public void CanFindPartsAndBlades()\n        {\n            var portal = this.NavigateToPortal();\n\n            string samplesTitle = \"Samples\";\n\n            var samplesPart = portal.StartBoard.FindSinglePartByTitle<ButtonPart>(samplesTitle);\n            samplesPart.Click();\n\n            var blade = portal.FindSingleBladeByTitle(samplesTitle);\n\n            string sampleName = \"Notifications\";\n\n            blade.FindSinglePartByTitle(sampleName).Click();\n\n            blade = portal.FindSingleBladeByTitle(sampleName);\n\n            var errorPart = webDriver.WaitUntil(() => blade.FindElements<Part>()\n\t\t\t\t\t\t\t\t\t\t\t\t   .FirstOrDefault(p => p.Text.Contains(\"Send Error\")),\n\t\t\t\t\t\t\t\t\t\"Could not find a part with a 'Send Error' text.\");\n\n            webDriver.WaitUntil(() => errorPart.FindElement(By.TagName(\"button\")),\n\t\t\t\t\t\t\t\"Could not find the button.\")\n\t\t\t\t\t .Click();\n        }\n\n        [TestCleanup]\n        public void TestCleanup()\n        {\n            webDriver.Dispose();\n            portalServer.Dispose();\n            extensionServer.Dispose();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supplemental Data for Printer Resources in TypeScript\nDESCRIPTION: This method retrieves supplemental data for an array of printer resource IDs. It processes the data and includes properties like model, status, and technology based on the requested columns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic getSupplementalData(resourceIds: string[], columns: string[], refresh?: boolean): Promise<any> {\n    return processSupplementalData(resourceIds, columns, this._updateMap, this.supplementalDataStream, this._dataContext.printerData, (printer) => {\n        // ***\n        // THIS IS FOR TESTING ONLY, DO NOT INCLUDE THIS IN PRODUCTION CODE.\n        TestHelpersForSamplesExtensionOnly.attachPrinterValueRotator(this._dataContext, printer);\n        // ***\n\n        const supplementalData: FxAssets.SupplementalData = {\n            resourceId: printer.id(),\n        };\n        if (columns.indexOf(BrowseColumns.model) !== -1) {\n            // Add the model property.\n            supplementalData[BrowseColumns.ModelProperties.model] = printer.model;\n        }\n        if (columns.indexOf(BrowseColumns.status) !== -1) {\n            // Add the status property - observable for live value.\n            supplementalData[BrowseColumns.StatusProperties.status] = ko.pureComputed(() => ((printer.status && printer.status()) || \"\").toLowerCase());\n        }\n        if (columns.indexOf(BrowseColumns.technology) !== -1) {\n            // Add the technology property.\n            supplementalData[BrowseColumns.TechnologyProperties.technology] = printer.technologyString;\n        }\n        return supplementalData;\n    }, refresh);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Registering Persistent Test Extension in JavaScript\nDESCRIPTION: Example showing how to register an extension named Microsoft_Azure_Demo running on a specific machine name for sideloading in user settings that persist across multiple sessions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-sideloading.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalImpl.Extension.registerTestExtension({ name: \"Microsoft_Azure_Demo\", uri: \"https://somemachinename\" });\n```\n\n----------------------------------------\n\nTITLE: Referencing the PDE File in Project Configuration - XML\nDESCRIPTION: This XML snippet illustrates how to modify the .csproj project file to include a PDE file as an <ExtensionReference> rather than as regular content. This is necessary for the consuming extension to recognize and use the components defined in the PDE file. The file path for inclusion must be set appropriately, and the operation involves editing the project file directly in an unloaded state in Visual Studio. The main constraint is that the referenced PDE must be present at the specified location.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionReference Include=\"Client\\References\\HubsExtension.pde\" />\n```\n\n----------------------------------------\n\nTITLE: Transformed JSON for Dropdown Control in Azure Portal\nDESCRIPTION: This snippet shows the result of applying the 'list' transform to the OData JSON response, creating a format suitable for allowedValues constraints in dropdown controls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-function-transforms.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"label\": \"foo\", \"value\": \"{some_guid}\", \"description\": \"{some_guid}\"},\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Account Selector in Azure Portal\nDESCRIPTION: This JSON snippet defines a ResourceSelector control for selecting storage accounts in Azure. It specifies the resource type, scope, constraints, and visibility settings for the selector.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ResourceSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"storageSelector\",\n    \"type\": \"Microsoft.Solutions.ResourceSelector\",\n    \"label\": \"Select storage accounts\",\n    \"resourceType\": \"Microsoft.Storage/storageAccounts\",\n    \"toolTip\": \"Select a storage account\",\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"constraints\": {\n        \"required\": true\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output for ServicePrincipalSelector (Selected/Existing) in JSON\nDESCRIPTION: This JSON snippet illustrates the output structure from the `ServicePrincipalSelector` control after a user selects either 'Create new' or an existing application registration. In this scenario, the `appId` and `objectId` reflect the selected or created application's GUID (represented by `<guid>`), and crucially, the `newOrExisting` property is set to \"existing\". Other properties like `password`, `certificateThumbprint` (shown empty here), and `authenticationType` are also included in the output.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ServicePrincipalSelector-samples.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": {\n    \"value\": \"<guid>\"\n  },\n  \"objectId\": {\n    \"value\": [\"<guid>\"]\n  },\n  \"password\": {\n    \"value\": \"<password>\"\n  },\n  \"certificateThumbprint\": {\n    \"value\": \"\"\n  },\n  \"newOrExisting\": {\n    \"value\": \"existing\"\n  },\n  \"authenticationType\": {\n    \"value\": \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Resource Link Selecting 'monitoring' Tab - URL Example - Plaintext\nDESCRIPTION: A concrete link that selects the 'monitoring' menu item for a web app resource in Azure Portal. Demonstrates how to target subviews such as monitoring directly. Supply real subscription and resource identifiers for live use.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/foo/providers/microsoft.web/sites/bar/monitoring\n```\n\n----------------------------------------\n\nTITLE: Multiple File Contents Output Example\nDESCRIPTION: Example showing the JSON array output format when options.multiple is true and options.uploadMode is file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n  \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n  \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\",\n  \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Button Interface Definition\nDESCRIPTION: TypeScript interface defining the structure for custom dialog buttons with display text and button identifier.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Describes a custom button in a dialog\n*/\nexport interface CustomDialogButton {\n    /**\n    * Display text of the button\n    */\n    displayText: string;\n    /**\n    * Button identifier that is programatically passed back\n    */\n    button: DialogButton;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Merge Failure Error Message in Azure Portal\nDESCRIPTION: Example error message displayed when a data merge operation fails in the Azure Portal. These failures typically occur when Knockout subscriptions throw exceptions during the merge process.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nData merge failed for data set 'FooBarDataSet'. The error message was: ...\n```\n\n----------------------------------------\n\nTITLE: Creating Pending Notifications with Asset ID in TypeScript (v3)\nDESCRIPTION: Example of creating a pending notification with an associated asset ID using publishPendingNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publishPendingNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishPendingNotification({\n    title: MyNotification.Started.title,\n    description: MyNotification.Started.message,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional ContentUnbundler Execution in MSBuild XML\nDESCRIPTION: This snippet demonstrates how to use MSBuild properties and conditional imports to control whether the ContentUnbundler process runs during the build of an Azure portal extension. The 'ForceUnbundler' property allows developers to manually override and force the unbundler to run, while the 'IsOfficialBuild' flag ensures it executes in official builds only. Dependencies include the Microsoft.Portal.Tools.ContentUnbundler NuGet package or build tools, and key parameters are 'ForceUnbundler' and 'IsOfficialBuild'. Inputs are project properties and environment flags; the outcome is a more flexible build pipeline.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\\n    <ForceUnbundler>false</ForceUnbundler>\\n</PropertyGroup>\\n<Import Project=\\\"$(PkgMicrosoft_Portal_Tools_ContentUnbundler)\\\\build\\\\Microsoft.Portal.Tools.ContentUnbundler.targets\\\"\\n        Condition=\\\"'$(IsOfficialBuild)' == 'true' Or '$(ForceUnbundler)' == 'true'\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Form with Provider Role in TypeScript\nDESCRIPTION: Example of a simple form implementation that only uses the parameterProvider role. This is the minimal setup for a form that collects data from the user but doesn't launch other forms or perform custom provisioning.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-v2.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sample parameter collection form.\n */\nexport class MySimpleFormPartViewModel\n    extends MsPortalFx.ViewModels.ParameterCollectionV2.Form<MyDataModel>\n    implements MsPortalFx.Base.Disposable {\n    /**\n     * Constructs the view model.\n     *\n     * @param container The container into which the part is being placed.\n     * @param initialState Initial state of the view model.\n     * @param dataContext The data context for the part.\n     */\n    constructor(container: MsPortalFx.ViewModels.PartContainerContract, initialState: any, dataContext: DataContext) {\n        // Define the roles that this form will play and pass them to the super's contructor.\n        var roles: MsPortalFx.ViewModels.ParameterCollectionV2.FormRoles<MyDataModel> = {\n            // Form will always be a provider because it collects data from the user, but we're not doing\n            // anything special, so we'll pass an empty object to get the default provisioning behavior.\n            parameterProvider: {}\n        };\n\n        super(container, roles, initialState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Model Object from Generated Metadata (TypeScript)\nDESCRIPTION: Shows how to use the `MsPortalFx.Data.Metadata.createEmptyObject` utility function along with the `name` property of the auto-generated `ComputerMetadata` to create an empty instance of the `Computer` model object conforming to the generated interface. This is useful when needing a new, empty instance of a model whose interface was generated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n    const empty = MsPortalFx.Data.Metadata.createEmptyObject(ComputerMetadata.name);\n\n```\n\n----------------------------------------\n\nTITLE: Specifying National Cloud Environments in Alert Configuration (Azure Portal, JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'environment' property in alert configurations to include national cloud domains. Multiple environments can be specified, enabling the same or different criteria per region. Requirements include Azure Portal alerting infrastructure; parameters are environment domain names within each environment object. Input domains determine where alerts are monitored and managed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   ...\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"ms.portal.azure.com\", \"portal.azure.cn\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.cn\",\"portal.azure.us\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.us\"],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Date-Only Selection\nDESCRIPTION: A basic implementation of the DatePicker control that only allows selecting a date without time. The required constraint makes this a mandatory field.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime1\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"start time\",\n    \"visible\": true,\n    \"constraints\": {\n    \"required\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: No-PDL Blade with Asset Type Configuration\nDESCRIPTION: Example showing how to associate a blade with an asset type and its icon in the no-PDL approach.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetTypes, AssetTypeNames } from \"../_generated/ExtensionDefinition\";\n\n@TemplateBlade.Decorator({\n    forAsset: {\n        assetType: AssetTypeNames.customer,\n        assetIdParameter: \"carrotId\"\n    }\n})\nexport class Carrot {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Billing Extension NuGet Package (PowerShell)\nDESCRIPTION: This command uses the NuGet Package Manager Console (PowerShell) to install the `Microsoft.Portal.Extensions.Billing` package from a specific Azure DevOps package feed. The user must replace `<Version_Number>` with the actual version number they intend to install. This package is intended for developers building Azure Portal extensions related to billing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-billing.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Billing -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version <Version_Number>\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Load Reliability with Kusto\nDESCRIPTION: This Kusto query calculates the load reliability of a specific Azure Portal extension over the preceding 14 days. It analyzes `ExtensionLoad` actions in the `ClientTelemetry` table, counting successful ('complete') and failed ('cancel') loads and distinct users for each status. It then computes daily reliability SLAs based on both total loads and unique users. Replace 'MyExtensionName' with the actual extension name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where action == \"ExtensionLoad\"\n| where name contains \"MyExtensionName\"\n| summarize SuccessfulLoads = countif(actionModifier == \"complete\"), FailedLoads = countif(actionModifier == \"cancel\")\n, SuccessfulUsersLoads = dcountif(userId, actionModifier == \"complete\", 4), FailedUserLoads = dcountif(userId, actionModifier == \"cancel\", 4)\n by bin(PreciseTimeStamp, 1d), name\n| extend ReliabilitySLA = (todouble(SuccessfulLoads) / todouble(SuccessfulLoads + FailedLoads)) * 100\n| extend ReliabilityUserSLA = (todouble(SuccessfulUsersLoads) / todouble(SuccessfulUsersLoads + FailedUserLoads)) * 100\n| sort by ReliabilitySLA asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Group with Icon\nDESCRIPTION: JSON schema showing how to configure a property group with display name, icon and optional menu action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk\",\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Discs\",\n    \"action\": {\n        \"menu\": \"disk\"\n    },\n    \"items\": [\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Group and Item Interfaces\nDESCRIPTION: TypeScript interfaces defining the structure of menu groups and items, including common attributes and item-specific properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MenuGroup extends MenuItemBase {\n    items: MenuItem[];\n}\n\ninterface MenuItem extends MenuItemBase, FxComposition.Selectable2Options<FxComposition.BladeReference<any>> {\n    icon: FxBase.Image;\n    enabled?: KnockoutObservableBase<boolean>;\n}\n\ninterface MenuItemBase {\n    id: string;\n    displayText: string;\n    keywords?: string | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Performance Alert Configuration in JSON\nDESCRIPTION: This JSON structure outlines the configuration for performance-related alerts within Azure Portal extensions across different environments (including public and national clouds). It allows defining specific performance alert criteria for extensions or blades (`type`: \"extension\" or \"blade\") within each specified environment. Optional sections for availability, client error, and create alerts can also be included per environment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"portal.azure.cn\"],\n            \"availability\": [...],\n            \"clientError\": [...],\n            \"create\": [...],\n            \"performance\": [\n                 {\n                    \"type\": \"extension\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                },\n                {\n                    \"type\": \"blade\",\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n                ...\n            ]\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            \"performance\": [\n                {\n                    ...\n                }\n                ...\n             ]\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: GalleryViewType Properties Table\nDESCRIPTION: Table defining the main sections and properties available in GalleryViewType configuration including kind, export, contextPaneWidth, parameters, resources, dataSources, messages, essentials, commands, properties, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-galleryViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|\n|export|False|Designation for blade sharing across extensions. If set to `true` then it is available to be used by other extensions.\n|contextPaneWidth|False|See [here](dx-enum-contextPaneWidth.md ) for the available options\n|parameters|False|Defines the parameters to be passed into a declarative blade, that then can be accessed using the parameters function. See [View parameters](dx-viewTypeParameters.md) for more.\n|resources|False|The resources section takes an ARM resource id and apiVersion, which in turn makes a ARM GET request to retrieve the resource details. You can use the resources() function to retrieve the resource payload at runtime.\n|dataSources|False|Supports Graph API. Use it to pre-load graph API before the view is rendered. See [here](dx-viewTypeDataSources.md) for **dataSources** property.\n|messages|False|Display a banner at the top of the view. See [here](dx-viewTypeMessages.md) for details.\n|essentials|False|Defines Essentials section for the view\n|commands|False|The commands section defines the Commands in the command bar.See [here](dx-viewTypeCommands.md) for **commands** property.\n|properties|False|The properties section defines the form that needs to be rendered. The tabs needed, the controls in each tab etc. are defined in the properties section.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Files in PDL Definition\nDESCRIPTION: Example of how to reference a custom CSS file in a PDL definition file for Azure Portal extensions. The StyleSheet element with the Source attribute points to the CSS file location.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\" Area=\"Parts\">\n  <!--\n    The following sample demonstrates the use of custom parts. Custom parts\n    supply HTML templates and can be styled with custom style sheets.\n  -->\n  <StyleSheet Source=\"{Css Source='Styles\\\\ExampleStyles.css'}\" />\n  ...\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Configuration Settings\nDESCRIPTION: C# class that defines configuration settings for CDN and development mode, inheriting from ConfigurationSettings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cdn.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Export(typeof(ApplicationConfiguration))]\npublic class ApplicationConfiguration : ConfigurationSettings\n{\n    [ConfigurationSetting]\n    public bool IsDevelopmentMode\n    {\n        get;\n        private set;\n    }\n\n    [ConfigurationSetting]\n    public string CdnPrefix\n    {\n        get;\n        private set;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Print Request Sources in Azure Portal\nDESCRIPTION: KQL query to track how print operations are initiated over the last day for non-internal users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-printing.md#2025-04-23_snippet_1\n\nLANGUAGE: kql\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(1d)\n| where userTypeHint == \"\"\n| where action == \"PrintRequest\"\n| summarize count() by source\n```\n\n----------------------------------------\n\nTITLE: Illustrating Ev2 Build Output File Structure\nDESCRIPTION: Shows a sample directory structure and list of files generated by the build process configured for Ev2 deployments. This output includes the application package zip, build version information, various rollout specification files (for different durations, stages, and health checks), service models, and rollout parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nout\\retail-amd64\\ServiceGroupRoot\n\\HostingSvc\\1.2.1.0.zip\n\\buildver.txt\n\\Production.RolloutSpec.PT6H.json\n\\Production.RolloutSpec.P1D.json\n\\Production.RolloutSpec.Stage1.json\n\\Production.RolloutSpec.Stage2.json\n\\Production.RolloutSpec.Stage3.json\n\\Production.RolloutSpec.Stage4.json\n\\Production.RolloutSpec.Stage5.json\n\\Production.RolloutSpec.WithHealthCheck.Stage1.json\n\\Production.RolloutSpec.WithHealthCheck.Stage2.json\n\\Production.RolloutSpec.WithHealthCheck.Stage3.json\n\\Production.RolloutSpec.WithHealthCheck.Stage4.json\n\\Production.RolloutSpec.WithHealthCheck.Stage5.json\n\\Production.RolloutSpec.HealthCheckOnly.json\n\\Production.RolloutSpec.SetFriendlyName.friendlyname_1.json\n\\Production.RolloutSpec.SetFriendlyName.friendlyname_2.json\n\\Production.RolloutSpec.SetFriendlyName.friendlyname_3.json\n\\Production.RolloutSpec.RemoveFriendlyName.friendlyname_1.json\n\\Production.RolloutSpec.RemoveFriendlyName.friendlyname_2.json\n\\Production.RolloutSpec.RemoveFriendlyName.friendlyname_3.json\n    \\Production\\Production.ServiceModel.PT6H.json\n    \\Production\\Production.ServiceModel.P1D.json\n    \\Production\\Production.RolloutParameters.PT6H.json\n    \\Production\\Production.RolloutParameters.P1D.json\n    \\Production\\Production.ServiceModel.Stage1.json\n    \\Production\\Production.ServiceModel.Stage2.json\n    \\Production\\Production.ServiceModel.Stage3.json\n    \\Production\\Production.ServiceModel.Stage4.json\n    \\Production\\Production.ServiceModel.Stage5.json\n    \\Production\\Production.ServiceModel.HealthCheckOnly.json\n    \\Production\\Production.RolloutParameters.Stage1.json\n    \\Production\\Production.RolloutParameters.Stage2.json\n    \\Production\\Production.RolloutParameters.Stage3.json\n    \\Production\\Production.RolloutParameters.Stage4.json\n    \\Production\\Production.RolloutParameters.Stage5.json\n    \\Production\\Production.RolloutParameters.HealthCheckOnly.json\n    \\Production\\Production.RolloutParameters.WithHealthCheck.Stage1.json\n    \\Production\\Production.RolloutParameters.WithHealthCheck.Stage2.json\n    \\Production\\Production.RolloutParameters.WithHealthCheck.Stage3.json\n    \\Production\\Production.RolloutParameters.WithHealthCheck.Stage4.json\n    \\Production\\Production.RolloutParameters.WithHealthCheck.Stage5.json\n    \\Production\\Production.ServiceModel.SetFriendlyName.friendlyname_1.json\n    \\Production\\Production.ServiceModel.SetFriendlyName.friendlyname_2.json\n    \\Production\\Production.ServiceModel.SetFriendlyName.friendlyname_3.json\n    \\Production\\Production.RolloutParameters.SetFriendlyName.friendlyname_1.json\n    \\Production\\Production.RolloutParameters.SetFriendlyName.friendlyname_2.json\n    \\Production\\Production.RolloutParameters.SetFriendlyName.friendlyname_3.json\n    \\Production\\Production.ServiceModel.RemoveFriendlyName.friendlyname_1.json\n    \\Production\\Production.ServiceModel.RemoveFriendlyName.friendlyname_2.json\n    \\Production\\Production.ServiceModel.RemoveFriendlyName.friendlyname_3.json\n    \\Production\\Production.RolloutParameters.RemoveFriendlyName.friendlyname_1.json\n    \\Production\\Production.RolloutParameters.RemoveFriendlyName.friendlyname_2.json\n    \\Production\\Production.RolloutParameters.RemoveFriendlyName.friendlyname_3.json\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Menu Group Reference ID Enum Values\nDESCRIPTION: Enumeration of valid built-in reference IDs that can be used for resource menu item groups in the Azure portal. The values represent different menu section categories including management, support, quick access and monitoring.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-resourceMenuItemGroupBuiltin-referenceId.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- management\n- support\n- quickaccess\n- monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview with Monitoring Tab in Azure Portal JSON\nDESCRIPTION: This JSON schema defines a resource overview (GetStarted view) where a monitoring tab can be added. It includes the view kind, parameters, resources, and properties structure for tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Performance and Reliability Metrics\nDESCRIPTION: Query to calculate performance and reliability metrics for an extension over a specified time period. Takes parameters for start date, time span, and whether to include test traffic.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-production-ready-metrics.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// First parameter startDate\\n// Second parameter timeSpan\\n// Third parameter includeTestTraffic - set this to `false` if you are already in public preview\\nGetExtensionPerfReliability(now(),7d,true)\\n| where extension == \"<extensionName>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Item Properties in Markdown\nDESCRIPTION: This snippet defines the properties of a metric item object using a markdown table. It specifies required and optional fields along with their descriptions, including links to further documentation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-MonitoringTab-metrics.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|id|True|Defines the metric id. See [here](dx-getstarted-MonitoringTab-guidance.md) for more information.\n|aggregationType|True|Defines the metric aggregation type. See [here](dx-getstarted-MonitoringTab-guidance.md) for more information.\n|resourceMetadata|True|<code>resourceMetadata.id</code> defines the resource id (can be passed in as a parameter to the blade).\n|namespace|False|Defines the namespace for the metric. See [here](dx-getstarted-MonitoringTab-guidance.md) for more information.\n|visible|False|When visible is evaluated to *true* then the control will be displayed, otherwise it will be hidden.  Default value is **true**.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining MarkdownViewType Properties Section in Markdown\nDESCRIPTION: This snippet outlines the structure of the Properties section in MarkdownViewType. It describes an object with properties including title, content, and fx.feature, providing details on their requirements and purposes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-markdownViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|False|Title of the Markdown Tab\n|content|False|See [List of Supported Tabs](#list-of-supported-tabs)\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Resource Information Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of resource information passed to getMenuConfig method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceInformation {\\n    /**\\n     * The resource ID.\\n     */\\n    resourceId: string;\\n    /**\\n     * The resource or resource group.\\n     */\\n    resource: FxAzure.Subscription | FxHubsAzure.ResourceGroup | FxHubsAzure.Resource;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with Status in TypeScript (v3)\nDESCRIPTION: Example of creating a notification with a specific status using publishNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishNotification({\n    title: MyNotification.Started.title,\n    description: MyNotification.Started.message,\n    status: CompletedStatus.Information\n});\n```\n\n----------------------------------------\n\nTITLE: Opening AppBlade in Context Menu in TypeScript\nDESCRIPTION: Shows how to open an AppBlade in the context menu. This simple implementation demonstrates opening a specific app blade type in the context pane.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic onContextAppBladeButtonClick() {\n    /* Opens an AppBlade in the context menu (additional sample) */\n    void this._container.openContextPane(BladeReferences.forBlade(\"AppBlade\").createReference());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Operation in ARM Command View\nDESCRIPTION: Example configuration for handling long-running ARM operations in view definitions. Shows how to specify polling header override for async operations using the asyncOperation property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewArmCommand-properties-definition-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nArmCommand (in Views)\n\"definition\":{\n  \"httpMethodType\": \"POST\",\n  \"uri\": \"{resourceid}/myaction?api-version=2018-09-01-preview\",\n  \"asyncOperation\": {\n    \"pollingHeaderOverride\": \"Azure-AsyncOperation\",\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Sku and AccessPolicy Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for SKU and AccessPolicy used in VaultProperties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Sku {\n    family: KnockoutObservable<string>;\n    name: KnockoutObservable<string>;\n}\n\nexport interface AccessPolicy {\n    tenantId: KnockoutObservable<string>;\n    objectId: KnockoutObservable<string>;\n    permissions: KnockoutObservable<AccessPolicyPermission>;\n}\n\nexport interface AccessPolicyPermission {\n    keys: KnockoutObservableArray<string>;\n    secrets: KnockoutObservableArray<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating an InfoBox Control in the Blade ViewModel (TypeScript)\nDESCRIPTION: This TypeScript ViewModel exposes an InfoBox control instance for use in the HTML template using the pcControl Knockout binding. It demonstrates extension of the ViewModel to support controls, initializing the InfoBox with an observable link, image, and appropriate text. Dependencies include MsPortalFx, Knockout, and relevant Azure portal UI controls; the referenced HTML must bind to 'infoBox'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyTemplateBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    // view-model for the infoBox control\n    public infoBox: MsPortalFx.ViewModels.Controls.InfoBox.BaseViewModel;\n\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: any) {\n        super();\n        this.title(\"InfoBox\");\n        this.subtitle(\"InfoBox Playground\");\n\n        // initialization of the InfoBox view-model\n        this.infoBox = new MsPortalFx.ViewModels.Controls.InfoBox.LinkViewModel(container, {\n            text: ko.observable<string>('Go to the Azure Portal'),\n            image: ko.observable(MsPortalFx.Base.Images.Info()),\n            clickableLink: ko.observable(MsPortalFx.ViewModels.Part.createClickableLinkViewModel(ko.observable<string>('https://portal.azure.com'))\n        });\n    }\n\n    public onInputsSet(inputs: any): Promise<any> {\n        return Promise.resolve();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TutorialsViewType as Full Screen Blade in Azure Portal\nDESCRIPTION: This JSON schema demonstrates how to configure the TutorialsViewType as a full screen blade opened from a resource menu. It includes definitions for tiles, videos, and links groups, along with their respective properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Tutorials\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Tutorials Example\",\n      \"tilesGroup\": {\n        \"displayName\": {\n          \"property\": \"freeTrainingsFromMicrosoft\"\n        },\n        \"items\": [\n          {\n            \"title\": {\n              \"property\": \"tile1Title\"\n            },\n            \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n            \"subtitle\": {\n              \"property\": \"tile1Subtitle\"\n            },\n            \"description\": {\n              \"property\": \"tile1Description\"\n            },\n            \"action\": {\n              \"url\": \"https://www.azure.com\",\n              \"displayName\": {\n                \"property\": \"start\"\n              }\n            }\n          }\n        ]\n      },\n      \"videosGroup\": {\n        \"displayName\": {\n          \"property\": \"tab2videosTitle\"\n        },\n        \"items\": [\n          {\n            \"title\": {\n              \"property\": \"tab2feature1Title\"\n            },\n            \"description\": {\n              \"property\": \"tab2feature1Description\"\n            },\n            \"learnMore\": {\n              \"url\": \"https://www.azure.com\",\n              \"ariaLabel\": \"Learn more about Azure\"\n            },\n            \"video\": {\n              \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n            }\n          }\n        ]\n      },\n      \"linksGroup\": {\n        \"displayName\": \"Useful links\",\n        \"items\": [\n          {\n            \"title\": \"Concepts\",\n            \"action\": [\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Azure Managed applications overview\"\n              },\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Service Catalog applications\"\n              },\n              {\n                \"url\": \"https://azure.microsoft.com/en-us/\",\n                \"displayName\": \"Managed applications in Azure Marketplace\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Constraints Schema Definition in Markdown\nDESCRIPTION: Defines the schema for grid constraints configuration including rows, columns, validations, and width properties. The schema specifies required and optional properties along with their descriptions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-grid-constraints.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|rows|False|Constraints on number of rows, specify min and max number of rows in Grid\n|canEditRows|False|Specify whether user can edit rows\n|validations|False|Add validation logics to the grid\n|columns|True|Specify the behavior of columns. The order of array is columns from left to right. See [here](dx-grid-constraints-columns-items.md) for more on constraints.\n|width|False|Width of the Grid\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Custom Part Property Binding in PDL\nDESCRIPTION: Shows how to bind a custom part to a blade view model property using BladeProperty binding syntax in PDL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-properties.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<CustomPart Name=\"PropertyButtonPart\"\n            ViewModel=\"PropertyButtonPart\"\n            Template=\"{Html Source='Templates\\\\Temperature.html'}\">\n  <CustomPart.Properties>\n    <!--\n      This part accepts an input via a public property on the blade view model.\n      These bindings are called BladeProperty bindings.\n    -->\n    <Property Name=\"tempInCelcius\"\n              Source=\"{BladeProperty content.tempInCelcius}\" />\n  </CustomPart.Properties>\n</CustomPart>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyVault Picker Configuration Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `VaultPickerConfig` for configuring the KeyVault picker blade. Options include filtering vaults by subscription ID, resource group, or location, controlling the visibility of the 'Create New' button, specifying whether vault creation happens within the blade or is deferred, and defining required user permissions (currently not implemented).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VaultPickerConfig {\n    subscriptionId?: string; // if supplied, only vaults from this subscription will be shown. If not, vaults in all. Subscriptions will be shown.\n    resourceGroup?: string; // only valid when subscriptionId is supplied, otherwise behavior is undefined. Name of resourceGroup to show vaults for.\n    location?: string; // if supplied, only vaults in this region/location will be shown\n    showCreateNew?: boolean; // whether the picker should display the create new button.\n    createOnBlade?: boolean; // whether the vault should be created on the blade, or returned to be created later (ex. in a template deployment). This should not be false if you are using the key/secret pickers as well, since the vault needs to be created in order to select keys/secrets.\n    requiredPermissions?: string[]; // **TODO – Not implemented yet** An array of requirements for the ability for this user to select vaults. If the user doesn’t have this access the vault will be shown but displayed as disabled. Allowed values are: “keys”, and “secrets” for listing keys, and listing secrets respectively.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Themed Text Color Classes in Azure Portal CSS\nDESCRIPTION: A set of CSS classes for text elements that automatically adapt to the user's chosen theme in the Azure Portal. These classes maintain proper contrast and readability regardless of the theme, with options for default text, muted text, links, and highlighted text.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-themed-color-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Suited for main text, will render with the highest contrast\nmsportalfx-text-default\n\n// Suited for labels, subheaders, or any secondary text\nmsportalfx-text-muted-50\n\n// Suited for links, or call to action text\nmsportalfx-link-primary\n\n// Suited for highlighting searched text\nmsportalfx-highlight\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM Path for ExpressRoute Circuits in JSON\nDESCRIPTION: Example of an ARM API request path for accessing Microsoft.Network/expressRouteCircuits resources. The path includes subscription ID, resource group name, and route circuit name parameters, along with the API version specified as a query parameter.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.ArmApiControl-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"path\": \"subscriptions/<subid>/resourceGroup/<resourceGroupName>/providers/Microsoft.Network/expressRouteCircuits/<routecircuitName>/?api-version=2020-05-01\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic DatePicker (Date Only) in Azure Portal UI (JSON)\nDESCRIPTION: This JSON snippet defines a simple date picker control for Azure portal UI definitions. It is named \"dateTime1\", has the label \"start time\", is set to be visible, and is marked as a required field using constraints. This configuration only allows the user to select a date, without time selection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DatePicker.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime1\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"start time\",\n    \"visible\": true,\n    \"constraints\": {\n    \"required\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Branch Icon in Azure Portal\nDESCRIPTION: SVG markup for the Branch icon used in the Azure Portal. The icon features a blue diamond shape with white accents representing a branch structure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M49,22.5c1.4,1.4,1.4,3.7,0,5L27.5,49c-1.4,1.4-3.7,1.4-5,0L1,27.5c-1.4-1.4-1.4-3.7,0-5L22.5,1\n\tc1.4-1.4,3.7-1.4,5,0L49,22.5z\"/>\n<polygon fill=\"#FFFFFF\" points=\"16.2,30.1 23.2,39.9 30.2,30.1 \"/>\n<polygon fill=\"#FFFFFF\" points=\"33.5,30.1 39.9,28.5 36.4,22.9 \"/>\n<rect x=\"21\" y=\"11.1\" fill=\"#FFFFFF\" width=\"4.5\" height=\"20.1\"/>\n<path fill=\"#FFFFFF\" d=\"M37,29.1c-16.9-4.5-15.7-15.3-15.7-15.8l3.7,0.5l-1.9-0.2l1.9,0.2c0,0.3-0.7,8.1,12.9,11.7L37,29.1z\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M27.5,1c-1.4-1.4-3.7-1.4-5,0L1,22.5c-1.4,1.4-1.4,3.7,0,5l14.1,14.1L33.7,7.2L27.5,1z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Video Card Properties Schema Definition in Markdown\nDESCRIPTION: Defines the schema for video card configuration objects, including required and optional properties like title, description, video reference, and learn more links.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-tutorials-gettingStartedVideoCardReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the tile\n|description|True|Description for the tile\n|learnMore|False| See [here](dx-getstarted-LearnMoreLink.md) for more.\n|video|True| See [here](dx-getstarted-TutorialsTab-videoReference.md) for more.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Referencing Localized Strings in Portal Definition Language (XML)\nDESCRIPTION: This PDL (XML) snippet shows how to reference a localized string from a module\\'s resource within a Lens definition. The string key and module are specified using the {Resource ...} syntax, enabling the compiler to link UI elements to localized resources. This pattern requires ClientResources to be generated and available to the extension at compile time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-localization.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<Lens Name=\\\"PartsLens\\\"\\n      Title=\\\"{Resource partsLensTitle, Module=ClientResources}\\\">\n```\n\n----------------------------------------\n\nTITLE: Basic ARG Query for Web Sites\nDESCRIPTION: Minimal KQL query required to populate ARG browse with basic web site properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_2\n\nLANGUAGE: kql\nCODE:\n```\nwhere type =~ 'microsoft.web/sites'\n| project name,resourceGroup,kind,location,id,type,subscriptionId,tags\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Details - TypeScript\nDESCRIPTION: This code sample queries detailed information about a single subscription by calling MsPortalFx.Azure.getSubscriptionInfo() with a subscription id. The returned promise resolves to a Subscription object, providing details like displayName, state, and policies. Dependencies include the MsPortalFx.Azure API. Input is a subscription id, and the output is a single Subscription object, from which you can extract properties such as display name and check its current state or quota.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-subscriptions.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nMsPortalFx.Azure.getSubscriptionInfo(subId).then((sub: Subscription) => {\n    var name = sub.displayName,\n        isDisabled = sub.state.toLowerCase() === \"disabled\",\n        quotaId = sub.subscriptionPolicies.quotaId;\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Child Resource Asset for Creation in Azure Portal\nDESCRIPTION: This JSON snippet shows how to define a child resource asset in Azure Portal, including the create blade reference with a special {resourceId} parameter to reference the parent resource ID.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-resourceGroupScopeDeployment.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../Definitions/dx.schema.json\",\n    \"stringSource\": \"Resources/MyAssetStrings.resjson\",\n    \"proxyAssetType\": {\n        \"name\": \"MyDxChildResource\",\n        \"resourceType\": {\n        \"name\": \"Microsoft.OperationalInsights/Workspaces/savedSearches\",\n        \"apiVersion\": \"2020-03-01-preview\"\n    },\n    \"displayNames\": {\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Dashboard\", \n    \"create\": {\n        \"blade\": {\n        \"name\": \"SavedSearchCreate_Dx\",\n        \"parameters\": {\n        \"id\": \"{resourceId}\"\n        }\n    }\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a User Prompt String in JSON\nDESCRIPTION: This JSON snippet defines a simple string literal. It is intended to be displayed to a user, prompting them to provide configuration values and offering a link or instruction to learn more. It doesn't represent a complex configuration or functional code but rather static text data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBlock-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Please provide the configuration values for your application. Learn more\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal RolloutSpec with Health Checks\nDESCRIPTION: Defines deployment configuration for Azure Portal extensions in Production and Mooncake environments. Includes settings for health monitoring, storage credentials, deployment certificates, and environment-specific health check resources. Specifies custom health check replacements and friendly name configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Production\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"MDMHealthResources\":\n        {\n            \"SDP\" : [\n                \"EHSExtension\" ,\n                \"Extension_90thLoadTime_LessThan4S_PT30M\",\n                \"Custom_1\",\n                \"Custom_3\"\n            ],\n            \"Stage1\" : [\"Custom_1\", \"EHSExtension\"],\n            \"Stage2\" : [\"Extension_90thLoadTime_LessThan4S_PT24H\", \"Blade_95thLoadTime_LessThan4S_PT30M\"],\n            \"friendlyname_1\" : [\"Custom_1\", \"Extension_90thLoadTime_LessThan4S_PT24H\" ]\n        },\n        \"CustomHealthCheckReplacements\" :\n        {\n            \"dimension1\": \"1\",\n            \"dimension2\": \"2\",\n            \"dimension3\": \"3\"\n        }\n    },\n    \"Mooncake\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.cn/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"HotfixDeployment\": \"true\",\n        \"HotfixMonitorDurations\" : [ \"PT30M\", \"P1D\" ],\n        \"MDMHealthResources\":\n        {\n            \"Hotfix\": [\n                \"Custom_2\"\n            ],\n            \"SDP\" : [\n                \"Extension_90thLoadTime_LessThan4S_PT30M\" ,\n                \"Blade_95thLoadTime_LessThan4S_PT30M\"\n            ],\n            \"Stage2\" : [\"Custom_2\", \"Blade_95thLoadTime_LessThan4S_PT24H\", \"EHSExtension\"],\n            \"friendlyname_3\" : [\"Custom_2\", \"Extension_90thLoadTime_LessThan4S_PT24H\" ]\n        },\n        \"CustomHealthCheckReplacements\" :\n        {\n            \"dimension1\": \"a\",\n            \"dimension2\": \"b\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Fields with Edit Scope\nDESCRIPTION: Example of initializing form fields that are bound to an edit scope. It creates text input and options group fields with validations and binds them to the edit scope properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-working-with-edit-scopes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _initializeForm(): void {\n\n        // Form fields.\n        var websiteNameFieldOptions = <MsPortalFx.ViewModels.Forms.TextBoxOptions>{\n            label: ko.observable(ClientResources.masterDetailEditWebsiteNameLabel),\n            validations: ko.observableArray([\n                new MsPortalFx.ViewModels.RequiredValidation(ClientResources.masterDetailEditWebsiteNameRequired),\n                new MsPortalFx.ViewModels.RegExMatchValidation(\"^[a-zA-Z _]+$\", ClientResources.masterDetailEditWebsiteNameValidation)\n            ]),\n            emptyValueText: ko.observable(ClientResources.masterDetailEditWebsiteNameInitial),\n            labelPosition: ko.observable(MsPortalFx.ViewModels.Forms.LabelPosition.Left)\n        };\n\n        this.websiteNameField = new MsPortalFx.ViewModels.Forms.TextBox(this._container, this, \"name\", websiteNameFieldOptions);\n\n        var isRunningFieldOptions = <MsPortalFx.ViewModels.Forms.OptionsGroupOptions<boolean>>{\n            label: ko.observable(ClientResources.masterDetailEditRunningLabel),\n            options: ko.observableArray([\n                {\n                    text: ko.observable(ClientResources.masterDetailEditRunningOn),\n                    value: true\n                },\n                {\n                    text: ko.observable(ClientResources.masterDetailEditRunningOff),\n                    value: false\n                }\n            ]),\n            labelPosition: ko.observable(MsPortalFx.ViewModels.Forms.LabelPosition.Left)\n        };\n\n        this.isRunningField = new MsPortalFx.ViewModels.Forms.OptionsGroup(this._container, this, \"running\", isRunningFieldOptions);\n\n        var generalSectionOptions = <MsPortalFx.ViewModels.Forms.SectionOptions>{\n            children: ko.observableArray([\n                this.websiteNameField,\n                this.isRunningField\n            ]),\n            style: ko.observable(MsPortalFx.ViewModels.Forms.SectionStyle.Wrapper),\n        };\n\n        this.generalSection = new MsPortalFx.ViewModels.Forms.Section(this._container, generalSectionOptions);\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Error Messages in Azure Portal\nDESCRIPTION: Kusto query to retrieve detailed error messages matching a specific pattern within a time range, with client version filtering.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nGetExtensionErrorsByAggregatedErrorMessage(datetime(\"2016-07-25 18:15:00\"), datetime(\"2016-07-26 18:30:00\"), \"Compute\", \"Error\", \"portal.azure.com\", 'message: Script error')\n| where clientVersion == \"4.12.102.0 (82a67ee.160722-1641)\"\n| take 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Tags Assignment in Azure Resource Template\nDESCRIPTION: Shows how to assign tags to specific resource types using the tagsByResource parameter with conditional logic to handle cases where no tags are assigned.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"saName1\",\n  \"type\": \"Microsoft.Storage/storageAccounts\",\n  \"tags\": \"[ if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], json('{}')) ]\",\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Key-Pair Generation Form in Azure Portal\nDESCRIPTION: Example configuration for setting up an SSH key-pair generation form with resource scope and credentials combo control. Demonstrates how to map SSH public key parameters for deployment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Linux.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative-path-to-Dx-Schema>\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"title\": \"Sample Form for SSH Key-Pair Generation\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"sshKeys\",\n                    \"label\": \"SSH Keys\",\n                    \"elements\": [\n                        {\n                            \"name\": \"credentialsCombo\",\n                            \"type\": \"Microsoft.Compute.CredentialsCombo\",\n                            \"label\": {\n                                \"password\": \"Password\",\n                                \"confirmPassword\": \"Confirm password\",\n                                \"sshPublicKey\": \"Ssh public key\",\n                                \"authenticationType\": \"Authentication Type\"\n                            },\n                            \"toolTip\": {\n                                \"password\": \"\"\n                            },\n                            \"constraints\": {\n                                \"required\": true,\n                                \"customPasswordRegex\": \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{12,}$\",\n                                \"customValidationMessage\": \"The password must be alphanumeric, contain at least 12 characters, and have at least 1 letter and 1 number.\"\n                            },\n                            \"options\": {\n                                \"hideConfirmation\": false,\n                                \"hidePassword\": true\n                            },\n                            \"osPlatform\": \"Linux\",\n                            \"visible\": true\n                        }\n                    ]\n                }\n            ],\n            \"deployment\": {\n                \"parameters\": {\n                    \"sshPublicKey\": \"[steps('sshKeys').credentialsCombo.sshPublicKey]\"\n                },\n                \"template\": {\n                    \"file\": \"<path-to-ARM-Template>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PropertiesTab Group Structure in Azure Portal\nDESCRIPTION: Specifies the structure for defining groups within the PropertiesTab. Each group is represented as an object with properties such as displayName, icon, items, description, action, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab-groups.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|displayName|True|Specifies the displayName for the group.\n|icon|True|Specifies the icon for the group. See [here](dx-iconReference.md) on how to define an icon.\n|items|True|Specifies the property items for the group. See [here](dx-getstarted-PropertiesTab-items.md) for more.\n|description|False|Specifies the description for the group.\n|action|False|Specifies the action to be taken on clicking the group. See [here](dx-getstarted-ActionReference.md) for more.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Setting Format\nDESCRIPTION: Example of JSON configuration file format for extension settings\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mySetting\": \"myValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fairfax Configuration File in XML Build\nDESCRIPTION: XML build configuration to include the Fairfax (US Government) environment configuration file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"Content\\Config\\portal.azure.us.json\" />\n```\n\n----------------------------------------\n\nTITLE: Create Flow Error Analysis Kusto Query\nDESCRIPTION: A comprehensive Kusto query that analyzes deployment errors over a 30-day period. It calculates various error metrics including cancelled deployments, billing errors, and different types of provisioning failures. The query joins deployment data with extension mappings and calculates error percentages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet timeSpan = 30d;\nlet startDate = GetStartDateForLastNDays(timeSpan);\nlet endDate = GetEndDateForTimeSpanQueries();\n\nlet errors =\n(GetClientTelemetryByDateRange(startDate, endDate, false)\n| union (GetExtTelemetryByDateRange(startDate, endDate, false))\n| where Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\" and isnotempty(Name))\n| union (_GetArmCreateEvents(startDate, endDate) | where ExecutionStatus in (\"Failed\", \"Cancelled\", \"BillingError\") and isnotempty(Name))\n| extend\n    Date = bin(PreciseTimeStamp, 1d)\n    | join kind = leftouter (\n        _GetCreateBladesMapping(startDate, endDate)\n        | project Date, Name,\n            ExtensionIdCurrent = ExtensionId,\n            CreateBladeNameCurrent = CreateBladeName,\n            UnsupportedCurrent = Unsupported,\n            CustomDeploymentCurrent = CustomDeployment\n      ) on Date, Name\n    | join kind = leftouter (\n        _GetCreateBladesMapping(startDate - 1d, endDate - 1d)\n        | project Date, Name,\n            ExtensionIdPrev = ExtensionId,\n            CreateBladeNamePrev = CreateBladeName,\n            UnsupportedPrev = Unsupported,\n            CustomDeploymentPrev = CustomDeployment\n        | extend Date = Date + 1d\n      ) on Date, Name\n    | extend\n        ExtensionId = iff(isnotempty(ExtensionIdCurrent), ExtensionIdCurrent, ExtensionIdPrev),\n        CreateBladeName = iff(isnotempty(ExtensionIdCurrent), CreateBladeNameCurrent, CreateBladeNamePrev),\n        Unsupported = iff(isnotempty(ExtensionIdCurrent), UnsupportedCurrent, UnsupportedPrev),\n        CustomDeployment = iff(isnotempty(ExtensionIdCurrent), CustomDeploymentCurrent, CustomDeploymentPrev)\n| where isnotempty(ExtensionId) and isnotempty(CreateBladeName)\n| extend ExecutionStatus = iff(Action == \"ProvisioningEnded\", extractjson(\"$.provisioningStatus\", Data, typeof(string)), ExecutionStatus);\n\nerrors\n| summarize\n    CustomDeploymentErrorsCount = count(Action == \"ProvisioningEnded\" and ActionModifier == \"Failed\"),\n    ARMDeploymentErrorsCount = count((Action startswith \"CreateDeployment\") or (Action == \"ProvisioningEnded\" and ExecutionStatus !in (\"DeploymentFailed\", \"DeploymentCanceled\")))\n  by ExtensionId, CreateBladeName, Unsupported, CustomDeployment\n| join kind = inner (\n    errors\n    | summarize\n        ARMFailed = count(Action startswith \"CreateDeployment\" and ExecutionStatus == \"Failed\"),\n        ARMCancelled = count(Action startswith \"CreateDeployment\" and ExecutionStatus == \"Cancelled\"),\n        ARMBillingError = count(Action startswith \"CreateDeployment\" and ExecutionStatus == \"BillingError\"),\n        Failed = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"DeploymentFailed\"),\n        Cancelled = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"DeploymentCanceled\"),\n        ErrorSubmitting = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"ErrorSubmittingDeploymentRequest\"),\n        ErrorProvisioning = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"ErrorProvisioningResourceGroup\"),\n        ErrorRegistering = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"ErrorRegisteringResourceProviders\"),\n        ErrorGettingStatus = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"ErrorGettingDeploymentStatus\"),\n        InvalidArgs = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"InvalidArgs\"),\n        UnknownFailure = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"UnknownFailure\"),\n        RequestFailed = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"DeploymentRequestFailed\"),\n        StatusUnknown = count(Action == \"ProvisioningEnded\" and ExecutionStatus == \"DeploymentStatusUnknown\")\n      by ExtensionId, CreateBladeName, Unsupported, CustomDeployment)\n  on ExtensionId, CreateBladeName, Unsupported, CustomDeployment\n| extend Failed = iff(CustomDeployment, Failed, ARMFailed)\n| extend Cancelled = iff(CustomDeployment, Cancelled, ARMCancelled)\n| extend BillingError = iff(CustomDeployment, 0, ARMBillingError)\n| extend TotalCount = iff(CustomDeployment, CustomDeploymentErrorsCount, ARMDeploymentErrorsCount) - Cancelled - BillingError\n| extend TotalCountDbl = todouble(TotalCount)\n| join kind = leftouter (ExtensionLookup | extend ExtensionId = Extension) on ExtensionId\n| project\n    [\"Extension Name\"] = ExtensionName,\n    [\"Create Blade Name\"] = CreateBladeName,\n    [\"Deployment Cancelled Count\"] = Cancelled,\n    [\"Billing Error Count\"] = BillingError,\n    [\"Total Errors Count\"] = TotalCount,\n    [\"Deployment Failed %\"] = iff(TotalCountDbl == 0.0, 0.0, Failed / TotalCountDbl),\n    [\"Error Submitting Deployment Request %\"] = iff(TotalCountDbl == 0.0, 0.0, ErrorSubmitting / TotalCountDbl),\n    [\"Error Provisioning Resource Group %\"] = iff(TotalCountDbl == 0.0, 0.0, ErrorProvisioning / TotalCountDbl),\n    [\"Error Registering Resource Providers %\"] = iff(TotalCountDbl == 0.0, 0.0, ErrorRegistering / TotalCountDbl),\n    [\"Error Getting Deployment Status %\"] = iff(TotalCountDbl == 0.0, 0.0, ErrorGettingStatus / TotalCountDbl),\n    [\"Invalid Args %\"] = iff(TotalCountDbl == 0.0, 0.0, InvalidArgs / TotalCountDbl),\n    [\"Unknown Failure %\"] = iff(TotalCountDbl == 0.0, 0.0, UnknownFailure / TotalCountDbl),\n    [\"Deployment Request Failed %\"] = iff(TotalCountDbl == 0.0, 0.0, RequestFailed / TotalCountDbl),\n    [\"Deployment Status Unknown %\"] = iff(TotalCountDbl == 0.0, 0.0, StatusUnknown / TotalCountDbl),\n    [\"Old Create API\"] = Unsupported,\n    [\"Custom Deployment\"] = CustomDeployment\n```\n\n----------------------------------------\n\nTITLE: Implementing ProvidedByResourceMenu Configuration\nDESCRIPTION: Implementation of getMenuConfig using ProvidedByResourceMenu option with blade references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npublic getMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInformation): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                {\n                    id: \"overview_group\",\n                    displayText: ClientResources.ResourceMenuGroup.overview,\n                    items: [\n                        {\n                            id: \"overview\",\n                            displayText: ClientResources.ResourceMenu.overview,\n                            enabled: ko.observable(true),\n                            keywords: \"overview\",\n                            icon: Images.MyResourceIcon,\n                            supplyBladeReference: () => {\n                                return BladeReferences.forBlade(\"MyResourceOverviewBlade\").createReference({\n                                    parameters: { id: resourceInfo.resourceId },\n                                });\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of Generated PDE File - JSON\nDESCRIPTION: Shows a sample structure for a PDE (portal definition export) file generated during an Azure Portal extension build. The JSON snippet lists metadata such as extension name, version, SDK info, schema, and collections for assetTypes, parts, and blades. Consumers need this PDE content to reference parts in other extensions; prerequisite is a successful prior build of the extension. Entries may be elided with ellipses for readability in documentation but should be fully specified in real scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-rpc.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extension\": \"HubsExtension\",\n  \"version\": \"1.0\",\n  \"sdkVersion\": \"1.0.8889.122 (rd_auxweb_n_f1(tomcox).130919-1440)\",\n  \"schemaVersion\": \"0.9.1.0\",\n  \"assetTypes\": [\n    {\n      \"name\": \"TagsCollection\",\n      \"permissions\": []\n    }\n    ...\n  ],\n  \"parts\": [\n    {\n      \"name\": \"ChangeLogPart\",\n      \"inputs\": []\n    },\n    ...\n  ],\n  \"blades\": [\n    {\n      \"name\": \"TagCollectionBlade\",\n      \"keyParameters\": [],\n      \"inputs\": [],\n      \"outputs\": []\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DatePicker Output Formats\nDESCRIPTION: Examples of the output format from DatePicker control, showing both date-only selection (with default time 00:00:00) and date-with-time selection formats.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"Fri Aug 05 2022 00:00:00 GMT-0700 (Pacific Daylight Time)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Fri Aug 05 2022 17:00:00 GMT-0700 (Pacific Daylight Time)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Portal Alert Criteria in JSON\nDESCRIPTION: Specify detailed criteria for triggering an availability alert within an Azure portal extension. This JSON snippet includes properties like severity level (0-4), enablement status, minimum availability percentage, minimum failure count, minimum unique user failure count, target blades/parts (`namePath`), exclusions, optional safe deployment stage filters (does not support '*'), and optional datacenter code filters. The `namePath` and `exclusion` properties are only applicable for blade or part type alerts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-availability.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"severity\": 3, // Support value 0, 1, 2, 3 or 4.\n    \"enabled\": true, // Enable or disable this criteria.\n    \"minAvailability\": 80.0,\n    \"minFailureCount\": 10,\n    \"minFailureUserCount\": 10,\n    \"namePath\": [\"*\"], // Only support for blade or part type.\n    \"exclusion\": [\n        \"Extension/Your_Extension_Name/Blade/BladeNameA\",\n        \"Extension/Your_Extension_Name/Blade/BladeNameB\"], // Only support for blade or part type.\n    \"safeDeploymentStage\": [\"3\"], // Optional. It does not support asterisk(\"*\") sign.\n    \"datacenterCode\": [\"AM\"] // Optional.\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Group Scope Deployment Properties\nDESCRIPTION: Configuration properties for resource group level deployments. Includes required fields like kind, resourceGroupId, parameters, and template, along with optional fields for location, onSubmit actions, and post-deployment customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"ResourceGroup\"\n|location|False|Specify location for deployment\n|onSubmit|False|Specify onSubmit action after deployment. This allows a sequence of custom blade to open (as context blade) on user click primary button to start deployment.\n|resourceGroupId|True|Specify resourceGroupId\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|primaryResourceId|False|Specify primary resource id used in deployment\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Unit in Azure Portal\nDESCRIPTION: Specifies unit display for numeric values with optional decimal precision using maximumFractionDigits.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk Size\",\n    \"value\": \"[resources().properties.diskSize]\",\n    \"sourceUnits\": \"Gigabytes\",\n    \"maximumFractionDigits\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Redirect for No-PDL Knockout Blades using TypeScript\nDESCRIPTION: This TypeScript snippet shows how to implement a Blade redirect for a No-PDL (programmatic definition) Knockout blade. It uses the `@TemplateBlade.ReplacesOldBlade.Decorator` from the `Fx/Composition/TemplateBlade` module on the new blade class (`NewBlade`). The decorator parameters specify the original blade (`LegacyBlade`) and its extension (`LegacyExtension`) to redirect from. Requires the Portal SDK.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\n@TemplateBlade.ReplacesOldBlade.Decorator({\n\treplacedBlade: \"LegacyBlade\",\n\textension: \"LegacyExtension\",\n})\n@TemplateBlade.Decorator({\n\thtmlTemplate: \"<p>This is replacement KO blade </p>\",\n})\nexport class NewBlade {\n\tpublic title = \"New Blade\";\n\tpublic subtitle = \"\";\n\tpublic context: TemplateBlade.Context<void>;\n\tpublic async onInitialize() {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Blade with the forExport Option in TypeScript\nDESCRIPTION: Shows how to mark a blade for export so it can be used by other extensions. This is done by setting the forExport property to true in the TemplateBlade.Decorator configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sharing-blades-and-parts.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Decorator({\nhtmlTemplate: \"\" +\n    \"<div class='msportalfx-padding'>\" +\n    \"  <div>This Blade is exported for use by other extensions.</div>\" +\n    \"  <div data-bind='visible: bladeParameterValue'>The Blade was passed parameter value '<span data-bind='text: bladeParameterValue'></span>'.</div>\" +\n    \"</div>\",\nforExport: true,\n})\nexport class ExportedBlade {\n```\n\n----------------------------------------\n\nTITLE: Adding ARM Request Command to Declarative Blade in Azure Portal (JSON)\nDESCRIPTION: This snippet shows how to add a command to a declarative blade that opens the ARM request Form blade. It specifies the icon, display name, and parameters for the blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-armRequest.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n  \"id\": \"formarmrequestCommand\",\n  \"kind\": \"OpenBladeCommand\",\n  \"displayName\": {\n    \"property\": \"formArmRequest\"\n  },\n  \"blade\": {\n    \"name\": \"FormBladeArmRequest_Dx\",\n    \"inContextPane\": true,\n    \"parameters\": {\n      \"id\": \"[parameters('id')]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding TextBox ViewModel using String Path in TypeScript\nDESCRIPTION: Illustrates the discouraged method of binding an `ObsoleteTextBox.ViewModel` using a simple string (`\"name\"`) to specify the path to the data within the `EditScope`. This method lacks compile-time verification and is less maintainable if property names in the data model change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n\nthis.textBoxViewModel = new ObsoleteTextBox.ViewModel(container, this, \"name\", textBoxOptions);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommendations Tab in Azure Declarative Resource Overview (JSON)\nDESCRIPTION: This JSON snippet defines the configuration for adding a 'Recommendations' tab to the Azure Portal's Declarative Resource Overview. Setting the 'kind' property to 'Recommendations' integrates the Azure Advisor recommendations for the current resource directly into this tab. No further configuration is needed within this snippet.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Recommendations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Password Authentication Output Schema\nDESCRIPTION: JSON schema showing the control output format when password authentication is selected.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Linux.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"password\",\n  \"password\": \"passwordValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Format for Property Item Content (JSON)\nDESCRIPTION: This snippet demonstrates setting the 'format' property to 'Date', which renders the value as a date in the UI. The value should be a valid ISO date string or a binding expression that resolves to such. This ensures the date is formatted appropriately for display in the Properties pane.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Creation time\\\",\\n    \\\"value\\\": \\\"2021-03-23T21:24:47.7856737Z\\\",\\n    \\\"format\\\": \\\"Date\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a DatePicker with Past Date Validation in Azure Portal UI (JSON)\nDESCRIPTION: This JSON snippet defines a date picker control named \"dateTime3\". It includes a validation constraint to prevent users from selecting a date earlier than the current date. The `isValid` expression uses the `less`, `duration`, `addHours`, and `utcNow` functions to compare the selected date (`steps('datePicker').dateTime1` - likely a typo in the source, should probably refer to `dateTime3` or be relative to the current control) with the time 24 hours prior to the current UTC time. If the validation fails, the specified message is displayed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DatePicker.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime3\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"showValidationMessage\",\n    \"visible\": true,\n    \"constraints\": {\n        \"validations\":\n        [\n            {\n                \"message\": \"selected date can't be earlier than today\",\n                \"isValid\": \"[less(duration(addHours(utcNow(), -24), steps('datePicker').dateTime1), 0)]\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Code in Azure Portal\nDESCRIPTION: An SVG icon representing code or development. Used in the Azure Portal UI to indicate functionality related to coding, development, or script editing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_117\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0.5 0.5 24 24\" enable-background=\"new 0.5 0.5 24 24\" xml:space=\"preserve\">\n<g>\n\t<polygon points=\"15.5,4.5 12,19.5 9.5,19.5 13,4.5 \"/>\n</g>\n<polygon points=\"8.5,5.553 2.5,10.981 2.5,13.118 8.5,18.545 8.5,15.109 5.118,12.049 8.5,8.99 \"/>\n<polygon points=\"16.5,5.553 16.5,8.99 19.882,12.049 16.5,15.109 16.5,18.545 22.5,13.118 22.5,10.981 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Virtual Network Combo Constraints Schema Definition\nDESCRIPTION: Defines the schema for VirtualNetworkCombo control constraints, including the required minAddressPrefixSize property for setting virtual network address prefix limitations and an optional fx.feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-constraints.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|minAddressPrefixSize|True|Sets the limit for virtual network's address prefix size (ex. /16).\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining permitted values for assetTypeBrowseInfoBox-style enum in Azure Portal\nDESCRIPTION: This enum specifies the available visual styles that can be applied to info boxes in the asset type browsing interface of Azure Portal. It includes options ranging from default styling to various semantic styles like warnings and errors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetTypeBrowseInfoBox-style.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Default\n- Info\n- Upsell\n- Success\n- Warning\n- Error\n```\n\n----------------------------------------\n\nTITLE: DateTime Duration Formatting Examples in Azure Portal\nDESCRIPTION: Examples demonstrating the durationFormat function usage with different format patterns to calculate and display time differences. Shows conversions to years/months/days, hours/minutes/seconds, and days-only formats.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'yy MM dd hh mm ss')]\" \n  => \"1 year 1 month 20 days 9 hours 20 minutes 46 seconds\"\n\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'hh mm ss')]\" \n  => \"9849 hours 20 minutes 17 seconds\"\n\n\"[durationFormat(duration(utcNow(), steps('basics').datePicker), 'dd')]\" => \"410 days\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Create Flow Origins in Kusto\nDESCRIPTION: This Kusto query analyzes the origins of create flow launches over the last 30 days, categorizing them into New, Browse, Marketplace, and DeepLink sources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-createFlowDashboard.md#2025-04-23_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\nlet timeSpan = 30d;\nlet selectedData =\nGetClientTelemetryByTimeSpan(timeSpan, false)\n| union (GetExtTelemetryByTimeSpan(timeSpan, false));\n\nselectedData\n| where Action == \"CreateFlowLaunched\"\n| extend\n    CreateBladeName = _GetCreateBladeNameFromData(Data, ActionModifier),\n    ExtensionId = _GetCreateExtensionNameFromData(Data, ActionModifier),\n    OriginFromMenuItemId = extractjson(\"$.menuItemId\", Data, typeof(string)),\n    DataContext = extractjson(\"$.context\", Data, typeof(string))\n| extend OriginFromDataContext = extract('([^,\"]*Blade[^,\"]*)', 1, DataContext)\n| project CreateBladeName, ExtensionId, Origin = iff(OriginFromMenuItemId == \"recentItems\" or OriginFromMenuItemId == \"deepLinking\", OriginFromMenuItemId, OriginFromDataContext), DataContext\n| extend Origin = iff(Origin == \"\", DataContext, Origin)\n| summarize CreateFlowLaunched = count() by ExtensionId, CreateBladeName, Origin\n| summarize\n    CreateFlowLaunched = sum(CreateFlowLaunched),\n    New = sum(iff(Origin contains \"recentItems\" or Origin contains \"GalleryCreateMenuResultsListBlade\", CreateFlowLaunched, 0)),\n    Browse = sum(iff(Origin contains \"BrowseResourceBlade\", CreateFlowLaunched, 0)),\n    Marketplace = sum(iff(Origin contains \"GalleryItemDetailsBlade\" or Origin contains \"GalleryResultsListBlade\" or Origin contains \"GalleryHeroBanner\", CreateFlowLaunched, 0)),\n    DeepLink = sum(iff(Origin contains \"deepLinking\", CreateFlowLaunched, 0))\n  by ExtensionId, CreateBladeName\n| join kind = inner (ExtensionLookup | extend ExtensionId = Extension) on ExtensionId\n| project\n    [\"Extension Name\"] = ExtensionName,\n    [\"Create Blade Name\"] = CreateBladeName,\n    [\"Create Flow Launched\"] = CreateFlowLaunched,\n    [\"+New\"] = New,\n    [\"+New (%)\"] = todouble(New) / CreateFlowLaunched,\n    [\"Browse\"] = Browse,\n    [\"Browse (%)\"] = todouble(Browse) / CreateFlowLaunched,\n    [\"Marketplace\"] = Marketplace,\n    [\"Marketplace (%)\"] = todouble(Marketplace) / CreateFlowLaunched,\n    [\"DeepLink\"] = DeepLink,\n    [\"DeepLink (%)\"] = todouble(DeepLink) / CreateFlowLaunched\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph Applications - JSON\nDESCRIPTION: This snippet shows a sample JSON response from querying the Microsoft Graph API for applications, filtered to those whose display names start with 'a'. Key properties include '@odata.context' and '@odata.nextLink' for metadata and pagination, with the 'value' array listing application 'displayName' and 'appId' pairs. This format is useful for understanding API pagination and extracting application details from the response.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.GraphApiControl-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"@odata.context\\\": \\\"https://graph.microsoft.com/beta/$metadata#applications(displayName,appId)\\\",\\n    \\\"@odata.nextLink\\\": \\\"https://graph.microsoft.com/beta/myorganization/applications?filter=startsWith(displayName%2c+%27a%27)&select=displayName%2cappId&$skiptoken=RFNwdAoAAQAAAAAAAAAAFAAAAAKm5DQv4BdLqamgIFkbbkIBAAAAAAAAAAAAAAAAAAAXMS4yLjg0MC4xMTM1NTYuMS40LjIzMzEGAAAAAAABTw8AYx5Ec0iWsOnZnC1p5QEaAAAAAQQAAAA\\\",\\n    \\\"value\\\": [\\n        {\\n            \\\"displayName\\\": \\\"astf4\\\",\\n            \\\"appId\\\": \\\"518f9-3682-434d-a7a8-f5931f945f\\\"\\n        },\\n        {\\n            \\\"displayName\\\": \\\"Add an application my organization is developing\\\",\\n            \\\"appId\\\": \\\"3a44535342-8288-4535-94342-5cf34535\\\"\\n        },\\n        {\\n            \\\"displayName\\\": \\\"adelete1\\\",\\n            \\\"appId\\\": \\\"563a-9785-466d-8273-f073254c\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EditScopeView in a ViewModel\nDESCRIPTION: Example of creating an EditScopeView in a view model constructor. The view model initializes an edit scope from a data context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-working-with-edit-scopes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// create a new editScopeView\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract,\n            initialState: any,\n            dataContext: DataContext) {\n    super();\n    ...\n    this._editScopeView = dataContext.masterDetailEditSample.editScopeCache.createView(container);\n    // Initialize editScope of the base class.\n    this.editScope = this._editScopeView.editScope;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frame Blade in TypeScript\nDESCRIPTION: TypeScript class demonstrating Frame Blade implementation with @FrameBlade decorator, message handling, and toolbar customization. Includes initialization logic and command bar setup.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../../../FramePage.d.ts\" />\n\nimport * as ClientResources from \"ClientResources\";\nimport { BladeReferences } from \"Fx/Composition\";\nimport { DialogButtons } from \"Fx/Composition/Dialog\";\nimport * as FrameBlade from \"Fx/Composition/FrameBlade\";\n\nimport Toolbars = MsPortalFx.ViewModels.Toolbars;\nimport Toolbar = Toolbars.Toolbar;\n\n@FrameBlade.Decorator({\n    reflowReady: true,\n})\nexport class SampleFrameBlade {\n    public title = ClientResources.sampleFrameBladeTitle;\n    public subtitle: string;\n    public context: FrameBlade.Context<void>;\n\n    constructor(\n        private readonly _container: FrameBlade.Container\n    ) {\n    }\n\n    public viewModel: FrameBlade.ViewModelV2Contract;\n\n    public async onInitialize() {\n        const viewModel = this.viewModel = FrameBlade.createViewModel(this._container, {\n            src: MsPortalFx.Base.Resources.getContentUri(\"/Content/SamplesExtension/framebladepage.html\"),\n            onReceiveMessage: (message: FramePage.Message) => {\n                switch (message.messageType) {\n                    case FramePage.MessageType.OpenBlade:\n                        this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n                        break;\n                    default:\n                        break;\n                }\n            },\n        });\n\n        MsPortalFx.Base.Security.getAuthorizationToken().then((token) => {\n            viewModel.postMessage({ messageType: FramePage.MessageType.InitInfo, value: { authToken: token.header, resourceId: \"testResourceId\" } });\n        });\n\n        const commandBar = new Toolbar(this._container);\n        commandBar.setItems([this._openLinkButton(), this._openDialogButton()]);\n        this._container.commandBar = commandBar;\n    }\n\n    private _openLinkButton(): Toolbars.OpenLinkButton {\n        const button = new Toolbars.OpenLinkButton(\"http://microsoft.com\");\n        button.label(ClientResources.ToolbarButton.openLink);\n        button.icon(MsPortalFx.Base.Images.Hyperlink());\n        return button;\n    }\n\n    private _openDialogButton(): Toolbars.CommandButton<void> {\n        return new Toolbars.CommandButton<void>({\n            label: \"Open a dialog\",\n            command: {\n                canExecute: ko.observable(true),\n                execute: () => {\n                    return this._container.openDialog({\n                        telemetryName: \"FrameBladeDialog\",\n                        title: ClientResources.sampleFrameBladeDialogTitle,\n                        content: ClientResources.sampleFrameBladeDialogContent,\n                        buttons: DialogButtons.Ok,\n                    });\n                },\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Structure of Microsoft.Common.ManagementGroupSelector in TypeScript\nDESCRIPTION: This snippet shows the structure of the output object returned by the ManagementGroupSelector control. It includes the displayName and managementGroupId properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ManagementGroupSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    displayName: string;\n    managementGroupId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ParameterProvider with EditScope for Array Edits in TypeScript\nDESCRIPTION: Initializes an `MsPortalFx.ViewModels.ParameterProvider` for an array of `ServerConfig`. It defines mappings for incoming data (`mapIncomingDataForEditScope`) to convert it into a Knockout observable array suitable for editable grids, and outgoing data (`mapOutgoingDataForCollector`) which uses the `editScope().getEntityArrayWithEdits` method to return the array reflecting all created, updated, and deleted items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<ServerConfig[], KnockoutObservableArray<ServerConfig>>(container, {\n    editScopeMetadataType: ServerConfigMetadata.name,\n    mapIncomingDataForEditScope: (incoming) => {\n        return ko.observableArray(incoming);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        return editScope.getEntityArrayWithEdits<ServerConfig>(outgoing).arrayWithEdits;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Start Icon in SVG\nDESCRIPTION: SVG implementation of QuickStart icon for the Azure Portal. The design uses a document-like shape with a lightning symbol to represent quick startup functionality.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_68\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"-10.5 -9.5 50 50\">\n<path class=\"msportalfx-svg-c15\" d=\"M34.5,35.865h2L36.405-9.5H-1.833H-4.5c-1.293,0.167-3.992,3.3-3.992,3.751 c0,0.187,0.059,43.882,0.059,43.882c0,1.307,1.06,2.367,2.368,2.367H31.5v-0.729L34.5,35.865z\"/>\n<path class=\"msportalfx-svg-c01\" d=\"M22.673,15.737c0.14-0.548,0.217-1.115,0.217-1.688c0-2.263-1.108-4.258-2.82-5.465l-2.685,4.523 c-0.11,0.17-0.025,0.312,0.18,0.312l3.445-0.022c0.198-0.007,0.248,0.117,0.115,0.265l-8.892,10.142 c-0.132,0.152-0.185,0.127-0.105-0.058l2.807-6.853c0.065-0.182-0.028-0.332-0.23-0.332h-2.732c-0.195,0-0.302-0.142-0.225-0.337 l3.272-8.728c-2.21,0.417-4.027,1.937-4.873,3.962c-0.857-1.013-2.14-1.662-3.572-1.662c-2.582,0-4.685,2.112-4.685,4.72 c0,0.457,0.065,0.882,0.18,1.29c-2.11,0.783-3.62,2.828-3.62,5.223c0,3.068,2.47,5.563,5.522,5.563h17.037 c3.06,0,5.523-2.492,5.523-5.563C26.538,18.543,24.917,16.443,22.673,15.737z\"/>\n<path class=\"msportalfx-svg-c02\" d=\"M-2.718-7.5c-1.105,0-1.58,0.185-2.507,1c-2.275,2,0.39,2,1.495,2H31.5v44.271l3-3.906V-7.5H-2.718z\"/>\n<polygon opacity=\"0.5\" class=\"msportalfx-svg-c03\" enable-background=\"new\" points=\"31.5,39.771 34.5,35.865 34.5,-7.5 31.5,-4.5\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Updating Element Interaction for Playwright Compatibility\nDESCRIPTION: Example of replacing Selenium's getDriver() method with Playwright's getBrowser() method for element interaction. This is part of migrating tests from Selenium to Playwright.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeElement = await testFx.portal.getBrowser().getActiveElement();\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Bug Icon in Azure Portal\nDESCRIPTION: SVG markup for the Bug icon used in the Azure Portal. This icon depicts a stylized bug with purple body elements and gray limbs, used for debugging or issue tracking.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_10\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M7.824,32.85c0-0.726,0.032-1.442,0.094-2.147H2.1c-1.159,0-2.1,0.93-2.1,2.076s0.941,2.076,2.1,2.076h5.808\n\tC7.852,34.196,7.824,33.527,7.824,32.85 M46.381,20.733c0.82-0.813,0.82-2.127,0-2.939c-0.82-0.811-2.152-0.811-2.971,0\n\tl-3.713,3.671c0.723,1.273,1.327,2.648,1.797,4.099L46.381,20.733z M3.619,45.415c-0.821,0.811-0.821,2.127,0,2.936\n\tc0.82,0.812,2.15,0.812,2.97,0l4.166-4.118c-0.721-1.272-1.327-2.646-1.794-4.098L3.619,45.415z M8.85,25.904\n\tc0.45-1.468,1.041-2.856,1.749-4.148l-4.008-3.962c-0.82-0.811-2.151-0.811-2.972,0c-0.821,0.812-0.821,2.126,0,2.939L8.85,25.904z\n\t M41.379,40.472c-0.489,1.434-1.11,2.792-1.85,4.044l3.881,3.835c0.819,0.812,2.15,0.812,2.971,0c0.82-0.809,0.82-2.125,0-2.936\n\tL41.379,40.472z M47.898,30.703h-5.363c0.061,0.705,0.095,1.421,0.095,2.147c0,0.677-0.03,1.346-0.085,2.005h5.353\n\tc1.161,0,2.102-0.93,2.102-2.076C50,31.633,49.059,30.703,47.898,30.703\"/>\n<path fill=\"#804998\" d=\"M23.736,36.485L23.736,36.485V17.199h-4.762c-4.681,2.849-7.905,8.745-7.905,15.543\n\tc0,0.551,0.022,1.095,0.063,1.633c0.02,0.267,0.06,0.527,0.091,0.791c0.03,0.263,0.052,0.529,0.092,0.787\n\tc0.059,0.383,0.139,0.757,0.218,1.131c0.028,0.129,0.047,0.262,0.077,0.39c0.103,0.442,0.225,0.874,0.356,1.301\n\tc0.016,0.053,0.028,0.109,0.045,0.162c0.148,0.47,0.314,0.93,0.494,1.38c0.003,0.006,0.005,0.013,0.007,0.02\n\tc0.549,1.369,1.243,2.633,2.054,3.772c0.005,0.007,0.009,0.015,0.014,0.022l0,0c1.137,1.59,2.504,2.927,4.042,3.93\n\tc0.011,0.007,0.021,0.016,0.033,0.023c0.353,0.228,0.715,0.436,1.084,0.628c0.039,0.02,0.076,0.045,0.114,0.065\n\tc0.347,0.176,0.703,0.33,1.063,0.473c0.063,0.025,0.124,0.058,0.188,0.082c0.355,0.134,0.718,0.244,1.084,0.344\n\tc0.072,0.02,0.14,0.048,0.212,0.066c0.438,0.111,0.883,0.2,1.335,0.261l0,0h0.001C23.736,50.003,23.736,36.485,23.736,36.485z\"/>\n<path fill=\"#804998\" d=\"M39.561,32.742c0-0.394-0.013-0.784-0.036-1.171c-0.011-0.198-0.031-0.392-0.047-0.588\n\tc-0.014-0.16-0.025-0.32-0.043-0.479c-0.518-4.874-2.699-9.114-5.826-11.856c-0.027-0.024-0.053-0.048-0.08-0.072\n\tc-0.25-0.216-0.506-0.421-0.768-0.618c-0.056-0.042-0.111-0.088-0.167-0.129c-0.306-0.223-0.619-0.436-0.939-0.631h-4.762v16.65l0,0\n\tV50l0,0c3.964-0.536,7.439-3.064,9.742-6.739C38.468,40.341,39.561,36.696,39.561,32.742z\"/>\n<path fill=\"#7A7A7A\" d=\"M13.372,1.803c3.442,0.024,5.003,1.288,5.917,2.697c0.753,1.182,0.967,2.557,1.014,3.374\n\tc-1.92,1.301-3.296,3.327-3.727,5.682h17.479c-0.431-2.355-1.809-4.381-3.729-5.682c0.049-0.819,0.262-2.192,1.014-3.374\n\tc0.913-1.407,2.474-2.671,5.92-2.697c0.504,0,0.912-0.404,0.912-0.901C38.173,0.405,37.765,0,37.261,0\n\tc-3.931-0.024-6.298,1.641-7.471,3.546c-0.749,1.2-1.068,2.444-1.203,3.412c-1.013-0.4-2.114-0.621-3.269-0.623\n\tc-1.157,0.002-2.262,0.225-3.274,0.623c-0.136-0.968-0.454-2.212-1.205-3.412c-1.172-1.905-3.54-3.57-7.467-3.546\n\tc-0.506,0-0.913,0.405-0.913,0.902S12.866,1.803,13.372,1.803\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M18.974,17.199c-4.681,2.849-7.905,8.745-7.905,15.543\n\tc0,4.356,1.33,8.335,3.511,11.387l9.156-7.644V17.199H18.974z\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M31.656,17.199h-4.762v16.65l10.994-9.177\n\tC36.493,21.462,34.326,18.824,31.656,17.199\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Checking Group Membership in Windows Console\nDESCRIPTION: This command outputs the current user's group memberships to a text file and opens it in Notepad for easy searching. It's used to verify access to specific Azure groups.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwhoami /groups > temp.txt\nnotepad temp.txt\n```\n\n----------------------------------------\n\nTITLE: Defining the ResourceGroup Interface in TypeScript\nDESCRIPTION: Defines the `ResourceGroup` interface in TypeScript, representing an Azure Resource Group object used within the Azure portal context. It includes mandatory properties like `location` (string) and `name` (string), and optional properties like `provisioningState` (string) and `resourceId` (string). This interface structures the resource group data returned by the ResourceGroupSelector.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceGroupSelector-output.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceGroup {\n        /**\n         * Resource group location.\n         */\n        location: string;\n        /**\n         * Resource group name.\n         */\n        name: string;\n        /**\n         * Resource group provisioning state.\n         */\n        provisioningState?: string;\n        /**\n         * The resource id of the resource group. e.g. /subscriptions/123/resourceGroups/${this.name}\n         * Available with the fx resource group dropdown.\n         */\n        resourceId?: string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Gitdown Content Declaration\nDESCRIPTION: Markdown configuration for including localization and globalization documentation using gitdown includes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-localization-globalization.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"gitdown\": \"contents\", \"maxLevel\": 2\n\n<a name=\"localization-globalization\"></a>\n# Localization / Globalization\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-localization.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-globalization.md\"\n```\n\n----------------------------------------\n\nTITLE: Mapping QueryCache Robots to RobotDetails (Buggy Implementation with Knockout Observables, TypeScript)\nDESCRIPTION: Implements a mapping from a QueryCache of Robot objects to a projected array of RobotDetails for grid display, using the map() method. Key properties (name, status, modelAndMfg) are wrapped in new observables using ko.observable and values read via the underlying observable call (e.g., robot.name()). This causes reference instability: when source observables change, map() reruns the mapping function, replacing items instead of updating them, breaking UI selection and state. Dependencies: Knockout.js observables, correct Robot and RobotDetails interfaces, and context-provided this._view, this._uuid, this._logMapFunctionRunning. Returns: projectedItems array of RobotDetails with new observables per call.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.map<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: ko.observable(robot.name()),\n        status: ko.observable(robot.status()),\n        modelAndMfg: ko.observable(\"{0}:{1}\".format(robot.model(), robot.manufacturer())),\n    };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Schema for InfoCard Properties\nDESCRIPTION: Defines the schema for InfoCard configuration including required and optional properties. Shows the property names, whether they are required, and links to additional documentation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-InfoTab-InfoCardReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the card\n|description|False|Description for the card\n|learnMore|False| See [here](dx-getstarted-LearnMoreLink.md) for more.\n|action|True|An array of items or a single item of the [type](dx-getstarted-gettingStartedActionReference.md). Specifies the action to be taken on a card click.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Setting Assembly Version Attributes in C#\nDESCRIPTION: Demonstrates how to specify assembly version attributes for Azure portal extensions. Uses AssemblyFileVersion and AssemblyInformationalVersionAttribute to set version information that the portal shell uses for runtime decisions and content serving.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-versioning-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.Reflection.AssemblyFileVersion(\"5.0.0.56\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"5.0.0.56 (COMPUTER.150701-1627)\")]\n```\n\n----------------------------------------\n\nTITLE: Dashboard Visualization Schema Option 2\nDESCRIPTION: Specifies an alternative visualization configuration that restricts the type to 'snapshot' only. Includes the same options and feature flag support as Option 1 but with limited visualization type choices.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-visualization.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description |\n| ---|:--:|:--:|\n|type|True|The type of chart to use for displaying tile data. Enum permitting the value: \"snapshot\"|\n|options|False|Options used to further customize the visualization type. More details soon.|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Example Mocha Test Output\nDESCRIPTION: Displays sample console output generated during the execution of the Mocha test suite via `npm test`. The output shows test progress, information logs (prefixed with `testFx:information`), test results (passing count, duration), and potentially cleanup steps.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nResource Group Tests\n  testFx:information Opening the blade for create/Microsoft.ResourceGroup... +1s\n  testFx:information Starting the ChromeDriver process... +2ms\n  testFx:information Navigating to https://df.onecloud.azure-test.net?testframework=msportalfx-test&trace=debugLog&enableAnimations=false#create/Microsoft.ResourceGroup +18ms\n  testFx:information Performing sign in... +6s\n  testFx:information Performing SignIn... +1ms\n  testFx:information Successfully signed in +11s\n  testFx:information Already signed in, proceeding with test... +2ms\n  testFx:information Waiting 120000 ms for the splash screen to go away... +1ms\n    √ Example test (96266ms)\nRunning cleanup\nResourcesTest.ts:54\n  1 passing (2m)\n```\n\n----------------------------------------\n\nTITLE: Exporting a Sharable Command in PDL (XML)\nDESCRIPTION: Defines a command named 'MyExportedCommand' within a 'CommandGroup' using PDL (XML). The 'Export=\"true\"' attribute makes this command available for sharing across different command groups or extensions. It also declares an expected input property 'commandInput' sourced from 'DataInput', indicating data required by the command.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<CommandGroup>\n  <Command Name=\"MyExportedCommand\" Export=\"true\">\n    <!-- The shared command declares its expected inputs -->\n    <Property Name=\"commandInput\" Source=\"{DataInput Property=input}\" />\n  </Command>\n</CommandGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Collector in PDL for Azure Portal\nDESCRIPTION: This XML snippet demonstrates how to define a Parameter Collector in PDL by applying the 'ParameterCollector' attribute to a BladeAction within a Part definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Lens Name=\"PartLens\">\n  <Part PartKind=\"Button\"\n        Name=\"ParameterCollectorButton\"\n        ViewModel=\"{ViewModel Name=CollectorButtonViewModel,\n        \tModule=./CollectorAsButtonPart/ViewModels/CollectorButtonViewModel}\" >\n\n    <BladeAction Blade=\"ParameterProviderFormBlade\"\n    \t\t\t ParameterCollector=\"serverConfigCollector\" />\n\n  </Part>\n</Lens>\n```\n\n----------------------------------------\n\nTITLE: Defining Message-Based Client Error Alert Criteria in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet illustrates configuring a message-based client error alert within the `clientError` array. It sets the alert `type` to \"message\" and defines criteria including `severity`, `minAffectedUserCount`, and specific error strings (`message1`, `message2` - up to 3) that must co-exist in the error log. It features an optional `checkAllNullRefs` flag for targeting null reference errors and an `exclusion` property (supporting up to 3 messages with \"and\"/\"or\" logic) to filter out certain messages. Optional `safeDeploymentStage` and `datacenterCode` filters can also be applied.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-error-messages.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"message\",\n        \"criteria\":[\n            {\n                \"severity\": 4,\n                \"enabled\": true,\n                \"checkAllNullRefs\": true, // Optional.\n                \"message1\": \"Cannot read property\", // Optional.\n                \"message2\": \"of null\", // Optional.\n                \"minAffectedUserCount\": 1,\n                \"exclusion\": {\n                    \"type\": \"or\", // Only support value \"and\", \"or\".\n                    \"message1\":\"eastus2stage\",\n                    \"message2\":\"eastus2(stage)\"\n                },\n                \"safeDeploymentStage\": [\"3\"], // Optional. It does not support asterisk(\"*\") sign.\n                \"datacenterCode\": [\"AM\"] // Optional.\n            },\n            ...\n        ]\n    },\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Create/Prevalidation Alert Criteria in JSON\nDESCRIPTION: This JSON snippet defines the specific criteria for triggering a create or prevalidation alert. It includes properties like `severity` (for the IcM alert), `enabled` status, `bladeName` (target blade), minimum success rates (`minSuccessRateOverPast24Hours`, `minSuccessRateOverPastHour`), minimum total counts (`minTotalCountOverPast24Hours`, `minTotalCountOverPastHour`), and an optional list of `errorCodesToExclude` (only for prevalidation alerts). These criteria determine the conditions under which an alert is fired based on recent activity and success rates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"severity\": 3,\n    \"enabled\": true,\n    \"bladeName\": [\"CreateBlade\"],\n    \"minSuccessRateOverPast24Hours\":94.0,\n    \"minSuccessRateOverPastHour\":94.0,\n    \"minTotalCountOverPast24Hours\":50,\n    \"minTotalCountOverPastHour\":3,\n    \"errorCodesToExclude\": [\"\"] // Optional and only supported in prevalidation alerts\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Hosting Service URI Configuration\nDESCRIPTION: Example of URI configuration for extensions hosted by a hosting service\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nuri: \"//demo.hosting.portal.azure.net/demo\",\n```\n\n----------------------------------------\n\nTITLE: Resetting User State Before Test - C#\nDESCRIPTION: This C# snippet uses the Portal's ResetDesktopState method to clear all user customizations, ensuring consistency between test runs. This is crucial as persistent test state may affect test reproducibility. Only use at test startup. Dependency: Portal object. Input/output: None; triggers desktop state reset and portal reload.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nportal.ResetDesktopState();\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Azure AD Service Principal in PowerShell\nDESCRIPTION: This PowerShell snippet connects to Azure AD, retrieves a service principal, and adds a certificate credential to it. It uses the previously converted Base64 certificate value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nimport-module MSOnline\nConnect-MsolService\n$sp = Get-AzureRmADServicePrincipal -ServicePrincipalName yourApplicationId\nNew-MsolServicePrincipalCredential -ObjectId $sp.Id -Type asymmetric -Value\n$credValue -StartDate $cer.GetEffectiveDateString() -EndDate\n$cer.GetExpirationDateString()\n```\n\n----------------------------------------\n\nTITLE: Replacing Menu Items Based on Feature Flag State\nDESCRIPTION: Shows how to replace menu items based on feature flag enabled state. Demonstrates replacement configuration without value comparison.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceMenuItems-conditionalSupport.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"menu\": {\n      \"overview\": {\n        \"id\": \"dxOverviewId\",\n        \"displayName\": \"dxOverviewDisplayName\",\n        \"icon\": \"someIcon\",\n        \"blade\": {\n          \"name\": \"Overview_dx\"\n        },\n        \"fx.feature\": {\n          \"name\": \"foo\",\n          \"replaceWhen\": \"Enabled\",\n          \"replacement\": {\n            \"id\": \"dxOverviewId\",\n            \"displayName\": \"replacedDxOverviewDisplayName\",\n            \"icon\": \"replacedSomeIcon\",\n            \"blade\": {\n              \"name\": \"ReplacedOverview_dx\"\n            }\n          }\n        },\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Portal Hubs Extension via NuGet - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to install the Microsoft.Portal.Extensions.Hubs NuGet package from the specified Azure DevOps (msazure) feed using the NuGet Package Manager Console. Replace \\u003cVersion_Number\\u003e with the actual version number, which can be found in the linked Azure DevOps feed documentation. Prerequisites include access to the feed, appropriate permissions, and a compatible .NET project. The expected input is the version number, and the output is an installed extension package. Ensure you are running this command in the NuGet Package Manager Console within the intended project context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Hubs -Source https://msazure.pkgs.visualstudio.com/_packaging/Official/nuget/v3/index.json -Version \\u003cVersion_Number\\u003e\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring View with CPU Chart in Azure Portal Resource Overview\nDESCRIPTION: This JSON snippet defines the structure for adding a Monitoring view to the Azure Portal's Resource Overview. It includes a chart for average CPU usage, utilizing the 'Percentage CPU' metric for the specified resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/MonitoringTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Monitoring\",\n    \"charts\": [\n        {\n            \"title\": \"CPU (average)\",\n            \"metrics\": [\n                {\n                    \"id\": \"Percentage CPU\",\n                    \"aggregationType\": \"Avg\",\n                    \"resourceMetadata\": {\n                        \"id\": \"[parameters('id')]\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Runtime Type Metadata Generation in AssemblyInfo (C#)\nDESCRIPTION: Instructs adding the `Microsoft.Portal.TypeMetadata.IgnoreRuntimeTypeMetadataGeneration` attribute to the `AssemblyInfo.cs` file of the DataModels project. This prevents embedding the type metadata blob in the runtime response, optimizing extension load time. Note: The provided code snippet is empty, the description reflects the instruction from the surrounding text.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Importing a Shared Command using CommandReference in PDL (XML)\nDESCRIPTION: Demonstrates how to import an exported command ('MyExportedCommand' from 'ExportingExtension') into another 'CommandGroup' using the 'CommandReference' tag in PDL (XML). It assigns the imported command a local name 'MyImportedCommand' and satisfies the required 'commandInput' property using a 'Constant' binding. The 'Extension' attribute can be omitted if the command is shared within the same extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<CommandGroup>\n  <CommandReference Name=\"MyImportedCommand\" CommandType=\"MyExportedCommand\" Extension=\"ExportingExtension\">\n    <!-- The command reference must satisfy all expected inputs -->\n    <Binding Property=\"commandInput\" Source=\"{Constant myInput}\" />\n  </CommandReference>\n</CommandGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Blade Reference Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the grid-bladeReference object using a markdown table. It specifies the name, required status, and description for each property, including name, extension, parameters, outputItem, inContextPane, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-grid-bladeReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the blade\n|extension|False|Extension name\n|parameters|True|Parameters for passing input into blade\n|outputItem|False|Defining output of the blade which returns back to the grid\n|inContextPane|False|Specify whether to display this blade as contextPane or in full screen\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: ARG Query with Status Column Extension\nDESCRIPTION: KQL query that extends the basic properties with a custom status column using case statements to transform state values into user-friendly strings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_3\n\nLANGUAGE: kql\nCODE:\n```\nwhere type =~ 'microsoft.web/sites'\n| extend state = tolower(properties.state)\n| extend status = case(\nstate == 'stopped',\n'Stopped',\nstate == 'running',\n'Running',\n'Other')\n| project name,resourceGroup,kind,location,id,type,subscriptionId,tags\n, status\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Resource Creation in Azure Portal Form\nDESCRIPTION: This snippet shows how to structure a Form view for creating child resources in Azure Portal. It demonstrates how to use parameters, resources, and deployment configurations specific to child resource creation scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"key\"\n            }\n        ],\n        \"resources\": [\n            {\n                \"id\": \"[parameters('id')]\",\n                \"apiVersion\": \"2020-03-01-preview\"\n            }\n        ],\n        \"steps\": [\n        ],\n        \"deployment\": {\n            \"kind\": \"ResourceGroup\",\n            \"resourceGroupId\": \"[resources().resourceGroupId]\",        \n            \"parameters\": {\n                \"name\": \"[steps('step1').textbox]\",\n                \"location\": \"[resources().location]\",\n                \"omsLogAnalyticsWorkspaceName\": \"[resources().name]\"\n            },\n            \"template\": {\n                \"file\": \"./SavedSearchDeploymentTemplate.json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Imported Blades and Pinning Imported Parts in TypeScript\nDESCRIPTION: Demonstrates how to open a blade and pin a part that has been imported from another extension. The example shows passing parameters to the blade and part references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sharing-blades-and-parts.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic onOpenImportedBladeClick() {\n    const { container } = this.context;\n    container.openBlade(BladeReferences.forExtension(\"SamplesExtension\").forBlade(\"ExportedBlade\").createReference({\n        parameters: { parameter1: \"42\" },\n    }));\n}\n\npublic onPinImportedPartClick() {\n    pin([PartReferences.forExtension(\"SamplesExtension\").forPart(\"ExportedPart\").createReference({ parameters: { parameter1: \"42\" } })]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Bar to AppBlade\nDESCRIPTION: TypeScript code showing how to add and configure a command bar in an AppBlade view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// You can add command bars to app blades.\nthis.commandBar = new Toolbar(container);\nthis.commandBar.setItems([this._openLinkButton()]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _openLinkButton(): Toolbars.OpenLinkButton {\n    const button = new Toolbars.OpenLinkButton(\"http://microsoft.com\");\n\n    button.label(ClientResources.ToolbarButton.openLink);\n    button.icon(MsPortalFx.Base.Images.Hyperlink());\n\n    return button;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column JSON Structure\nDESCRIPTION: Basic JSON structure for defining a custom column in Azure Portal browse view. Shows required properties like name, displayName, description, format, and width.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"columns\": [\n        {\n          \"name\": \"status\",\n          \"displayName\": \"Status\",\n          \"description\": \"Displays the status of the resource\",\n          \"format\":\"String\",\n          \"width\": \"120fr\"\n\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Querying Extension-Specific Create Regression Summary in Kusto\nDESCRIPTION: This query retrieves a summary of create flow performance for a specific extension. It filters data to show only relevant information for the specified extension (in this example, websitesextension).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateRegressionExtSummary(now(),\"websitesextension\")\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Variables Icon in Azure Portal\nDESCRIPTION: SVG definition for the Variables icon that can be accessed through MsPortalFx.Base.Images.Variables(). The icon represents variables or mathematical symbols with a stylized representation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_183\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M22.972,4.679c1.417,1.504,2.488,3.009,3.211,4.512c0.521,1.041,1.374,3.775,2.56,8.2l3.818-5.727\n\tc1.012-1.388,2.242-2.712,3.688-3.97s2.719-2.119,3.818-2.582c0.694-0.289,1.461-0.434,2.3-0.434c1.244,0,2.235,0.333,2.972,0.998\n\tc0.738,0.666,1.106,1.475,1.106,2.43c0,1.1-0.217,1.851-0.651,2.256c-0.81,0.723-1.736,1.085-2.777,1.085\n\tc-0.607,0-1.258-0.13-1.952-0.39c-1.36-0.462-2.271-0.694-2.733-0.694c-0.694,0-1.519,0.406-2.473,1.215\n\tc-1.793,1.504-3.934,4.411-6.421,8.721l3.558,14.926c0.55,2.285,1.012,3.652,1.388,4.1c0.376,0.449,0.752,0.673,1.128,0.673\n\tc0.607,0,1.316-0.332,2.126-0.998c1.591-1.33,2.95-3.066,4.079-5.207l1.519,0.781c-1.822,3.413-4.136,6.248-6.942,8.504\n\tc-1.591,1.273-2.936,1.909-4.035,1.909c-1.62,0-2.907-0.911-3.862-2.733c-0.607-1.128-1.866-5.988-3.775-14.579\n\tc-4.512,7.839-8.128,12.886-10.847,15.143c-1.764,1.446-3.471,2.169-5.12,2.169c-1.157,0-2.213-0.419-3.167-1.258\n\tc-0.694-0.636-1.041-1.49-1.041-2.56c0-0.955,0.318-1.75,0.955-2.386c0.636-0.636,1.417-0.955,2.343-0.955s1.909,0.463,2.95,1.388\n\tc0.752,0.666,1.331,0.998,1.736,0.998c0.347,0,0.795-0.231,1.345-0.694c1.36-1.099,3.211-3.471,5.554-7.116s3.876-6.276,4.599-7.897\n\tc-1.793-7.029-2.762-10.745-2.907-11.151c-0.665-1.88-1.533-3.211-2.603-3.992s-2.647-1.171-4.729-1.171\n\tc-0.665,0-1.432,0.029-2.3,0.087V6.718L22.972,4.679z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Querying Create Regression Error Count in Kusto\nDESCRIPTION: Executes the Kusto function `GetCreateRegressionErrorCount` to identify the specific errors contributing to a create regression percentage for a given extension and create blade. It analyzes data from the last 24 hours ending at the specified time (using `now()` in the example). Required parameters are the end time, the target extension name (e.g., 'websitesextension'), and the specific create blade name (e.g., 'webhostingplancreateblade'). The query returns a table listing the extension, blade name, error codes encountered, and the number of times (Hits) each error occurred.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: Kusto\nCODE:\n```\nGetCreateRegressionErrorCount(now(),\"websitesextension\",\"webhostingplancreateblade\")\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Disabled State in Azure Portal\nDESCRIPTION: An SVG icon representing a disabled state. Used in the Azure Portal UI to visually indicate when an item, resource, or feature is in a disabled state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_124\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder msportalfx-svg-palette-error\" viewBox=\"0 0 30 30\">\n  <circle cx=\"15\" cy=\"15\" r=\"14\"/>\n  <rect fill=\"#FFFFFF\" x=\"7.222\" y=\"11.889\" width=\"15.556\" height=\"6.222\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Weighted Percentile Load Duration Calculation (Azure Portal Alerting, plaintext)\nDESCRIPTION: This plaintext snippet shows the mathematical formula that calculates weighted percentile load duration for alerting in Azure Portal extensions. It aggregates the six most recent percentile samples, giving higher weight to recent data. No dependencies required; the formula expects six sampled values and outputs a single weighted score, which is used in JSON alert configurations to determine if an alert should be triggered.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nWeighted duration = 8/24 * {most recent percentile load duration} + 6/24 * {2nd most recent percentile load duration} + 4/24 * {3rd…} + 3/24 * {4th …} + 2/24 * {5th …} + 1/24 * {6th …}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Parts in Azure Portal Extensions Using TypeScript\nDESCRIPTION: This snippet shows how to pin a part from another extension to a dashboard by creating a part reference via PartReferences.forExtension. The method onPin retrieves expected parameters from the context and creates a part reference object for the specified external extension and part name. Required dependencies are the portal TypeScript framework and availability of the target part. Input parameters are derived from the current context, and the resulting part reference can be used for pinning or other operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-blade-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic onPin() {\n    const { parameters } = this.context;\n    return PartReferences.forExtension(\"HubsExtension\").forPart(\"ResourcePart\").createReference({ parameters: parameters });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Failed Creates for an Extension's Blade\nDESCRIPTION: This query retrieves failed create operations for a specific extension and blade over the last 7 days.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(\n    startDate=ago(8d),\n    endDate=ago(1d),\n    match_Extention=\"WebsitesExtension\",\n    match_Blade=\"AppServiceWebAppCreateV3Blade\"\n)\n```\n\n----------------------------------------\n\nTITLE: Logging in C# Test Cases using TestContext\nDESCRIPTION: Shows how to use TestContext.WriteLine for logging in test cases, which helps in diagnosing failed tests by providing detailed execution information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTestContext.WriteLine(\"Starting provisioning from the StartBoard...\");\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default TSG Links with Extension-Specific Links in Azure Portal\nDESCRIPTION: This JSON snippet shows how to specify custom TSG (Troubleshooting Guide) links for different alert types in the extension's customization JSON. This allows extension teams to provide their own TSG links instead of using the default ones set by the Azure Portal team.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"tsgLinks\": {\n        \"availability\":\"https://extension_availability_TSG_link_preferably_a_url_in_engineering_hub\",\n        \"clientError\":\"any_valid_url\",\n        \"create\":\"https://aka.ms/your_extension_name_portalfx_create_alert_TSG_link\",\n        \"extensionAgeOverdue\":\"https://extension_age_overdue_alert_TSG_link\",\n        \"performance\":\"https://your_extension_name_performance_alert\",\n        \"telemetryThrottled\":\"https://aka.ms/telemetry_throttled_TSG\"\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Type in PDL\nDESCRIPTION: XML configuration for defining a new asset type in Portal Definition Language (PDL). Includes display name configurations, icon settings, and blade/part references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType\n    Name=\"MyAsset\"\n    ServiceDisplayName=\"{Resource MyAsset.service, Module=ClientResources}\"\n    SingularDisplayName=\"{Resource MyAsset.singular, Module=ClientResources}\"\n    PluralDisplayName=\"{Resource MyAsset.plural, Module=ClientResources}\"\n    LowerSingularDisplayName=\"{Resource MyAsset.lowerSingular, Module=ClientResources}\"\n    LowerPluralDisplayName=\"{Resource MyAsset.lowerPlural, Module=ClientResources}\"\n    Keywords=\"{Resource MyAsset.keywords, Module=ClientResources}\"\n    Description=\"{Resource MyAsset.description, Module=ClientResources}\"\n    Icon=\"{Resource Content.MyExtension.Images.myAsset, Module=./../_generated/Svg}\"\n    BladeName=\"MyAssetBlade\"\n    PartName=\"MyAssetPart\"\n    IsPreview=\"true\">\n  ...\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Defining a ParameterProvider in PDL (XML)\nDESCRIPTION: This PDL snippet demonstrates how to define a CustomPart within a Blade as a ParameterProvider by setting the 'ParameterProvider' attribute to 'true'. This indicates that the associated ViewModel will handle parameter provider logic, receiving initial data and returning results.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"ParameterProviderFormBlade\" ViewModel=\"{...}\">\n\t<Lens Name=\"ParameterProviderFormLens\">\n  \t\t<CustomPart Name=\"ParameterProviderFormPart\"\n\t\t\t\t\tViewModel=\"...\"\n\t\t\t\t\tTemplate=\"{Html Source='Templates\\\\ParameterProviderForm.html'}\"\n              \t\tInitialSize=\"HeroWideFitHeight\"\n\t\t\t\t\tParameterProvider=\"true\">\n  \t\t</CustomPart>\n\t</Lens>\n\n\t<ActionBar ActionBarKind=\"Create\" />\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Basic TextBox Implementation with Validation\nDESCRIPTION: Example of a basic TextBox configuration for capturing an application name with validation constraints. This snippet includes required field validation and regex pattern matching with a custom validation message.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"vmName\",\n    \"type\": \"Microsoft.Common.TextBox\",\n    \"label\": \"Application name\",\n    \"toolTip\": \"Assign a name to your Azure application\",\n    \"defaultValue\": \"\",\n    \"constraints\": {\n        \"required\": true,\n        \"regex\": \"[a-z][a-z0-9-]{2,5}[a-z0-9]$\",\n        \"validationMessage\": \"Must be 3-5 characters.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility in Azure Portal\nDESCRIPTION: Controls the visibility of property items based on conditional expressions. Default visibility is true if not specified.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Visible if VM running\",\n    \"value\": \"[resources('vmInstanceView').properties.instanceView.statuses.1.displayStatus]\",\n    \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tab in Azure Portal Resource Overview\nDESCRIPTION: This snippet shows how to set a tab as the default tab in a Declarative Resource Overview. Only the first tab with 'default: true' will be considered as the default tab.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"default\": true\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Extensions in Portal Tests\nDESCRIPTION: A query string parameter pattern for selectively loading extensions in the Portal during testing. This enables developers to only load the extensions they need for testing, improving test performance and isolation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n?feature.DisableExtensions=true&HubsExtension=true&Microsoft_Azure_Support=true&MyOtherExtension=true\n```\n\n----------------------------------------\n\nTITLE: Sample Output From Microsoft.Common.CheckBox Control in JSON\nDESCRIPTION: This snippet shows the output returned by the CheckBox control. When checked, the control returns a Boolean true value, and when unchecked, it returns false.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.CheckBox.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Virtual Network Icon in Azure Portal\nDESCRIPTION: SVG code representing a virtual network icon used in the Azure Portal. Features blue chevron-like arrows on the sides and green circular nodes in the middle, representing network connectivity between components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_87\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M49.7,25.7c0.5-0.5,0.4-1.3,0-1.8l-2.4-2.4L36.5,11c-0.5-0.5-1.2-0.5-1.7,0l0,0c-0.5,0.5-0.6,1.3,0,1.8\n\tl11.3,11.1c0.5,0.5,0.5,1.3,0,1.8L34.6,37.2c-0.5,0.5-0.5,1.3,0,1.8l0,0c0.5,0.5,1.3,0.4,1.7,0l10.7-10.6c0,0,0,0,0.1-0.1L49.7,25.7\n\tz\"/>\n<path fill=\"#3999C6\" d=\"M0.3,25.7c-0.5-0.5-0.4-1.3,0-1.8l2.4-2.4L13.5,11c0.5-0.5,1.2-0.5,1.7,0l0,0c0.5,0.5,0.6,1.3,0,1.8\n\tL4.1,23.9c-0.5,0.5-0.5,1.3,0,1.8l11.3,11.5c0.5,0.5,0.5,1.3,0,1.8l0,0c-0.5,0.5-1.3,0.4-1.7,0L2.8,28.5c0,0,0,0-0.1-0.1L0.3,25.7z\"\n\t/>\n<path fill=\"#7FBA00\" d=\"M18.2,24.8c0,1.9-1.6,3.3-3.3,3.3s-3.5-1.6-3.5-3.3s1.4-3.3,3.5-3.3C16.9,21.5,18.2,23.1,18.2,24.8z\"/>\n<path fill=\"#7FBA00\" d=\"M28.3,24.8c0,1.9-1.6,3.3-3.3,3.3s-3.5-1.6-3.5-3.3s1.6-3.3,3.5-3.3S28.3,23.1,28.3,24.8z\"/>\n<circle fill=\"#7FBA00\" cx=\"35.2\" cy=\"24.8\" r=\"3.3\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Resource Menu Overview for a Kind – XML\nDESCRIPTION: This snippet shows how to enable a static overview menu item for a resource kind using the <StaticOverview /> node nested within a <Kind> element. This optional configuration allows selected kinds to participate in a static resource menu overview item in the portal. No attributes are required for the <StaticOverview /> node, and it must be contained within a valid <Kind> definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Kind ...>\\n  <StaticOverview />\\n</Kind>\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Prefix in Web.config\nDESCRIPTION: XML configuration to set the CDN prefix in web.config for extension content delivery. The prefix omits protocol to allow dynamic http/https selection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cdn.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Portal.Extensions.SamplesExtension.ApplicationConfiguration.CdnPrefix\" \n     value=\"//<MyCDNNamespace>.vo.msecnd.net/\" />\n```\n\n----------------------------------------\n\nTITLE: Resource Scope Location Control Properties Schema\nDESCRIPTION: Defines the configuration properties for the resource scope location control including label, tooltip, resource types filtering, allowed values, and visibility settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceScopeControl-resourceScopeLocation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|label|False|Specifies the display name of the location control.\n|toolTip|False|Specifies the text to display when hovering over the tooltip icon. Tooltip icon will only be displayed if text is a non-empty value.\n|resourceTypes|False|Specifies an array of resource types to filter the locations.\n|allowedValues|False|Specifies allowed locations. Accepts an array of values or a single string.\n|visible|False|When visible is evaluated to *true* then the control will be displayed, otherwise it will be hidden.  Default value is **true**.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CSS File for Azure Portal Extensions\nDESCRIPTION: Defines a custom CSS class with the required 'ext-' prefix. This example creates a warning box style with red text, dotted border, padding, and centered alignment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-custom-css-file.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.ext-too-many-clicks-box {\n    color: red;\n    border: 2px dotted red;\n    padding: 8px;\n    text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Asset Conversion in CSProj (XML)\nDESCRIPTION: XML snippet to be added to the csproj file to enable the PDL to JSON conversion tool. This setting triggers the conversion process during build.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-pdl-migration.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ConvertAssetsToDx>true</ConvertAssetsToDx>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sample Features Data Structure (TypeScript/JSON)\nDESCRIPTION: This snippet provides examples of feature definition objects, which are part of the `features` array within the main spec data structure. Each feature object includes an `id`, a `displayName` for UI presentation, and optionally an `iconSvgData` (as raw SVG) or an `iconName` referencing a standard portal icon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-pricing-tier.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    \"id\": \"disks\",\n    \"displayName\": \"Data disks\",\n    \"iconSvgData\": \"<svg viewBox=\\\"0 0 50 50\\\" class=\\\"msportalfx-svg-placeholder\\\" > <path d=\\\"M50,37.198c0,5.001-11.194,9.054-25,9.054S0,42.199,0,37.198v-4.88h50V37.198z\\\" class=\\\"msportalfx-svg-c14\\\"/> <path d=\\\"M50,32.318c0,5.001-11.194,9.054-25,9.054S0,37.319,0,32.318c0-5,11.193-9.054,25-9.054S50,27.318,50,32.318 \\\" class=\\\"msportalfx-svg-c13\\\"/> <path d=\\\"M33.013,31.797c0,1.33-3.588,2.407-8.014,2.407s-8.015-1.077-8.015-2.407s3.589-2.407,8.015-2.407 S33.013,30.468,33.013,31.797\\\" class=\\\"msportalfx-svg-c14\\\"/> <path opacity=\\\"0.25\\\" d=\\\"M43.071,26.115c-3.502-1.327-8.104-2.269-13.279-2.633l-3.244,6.004 c1.596,0.094,3.023,0.329,4.127,0.662L43.071,26.115z\\\" class=\\\"msportalfx-svg-c01\\\"/> <path opacity=\\\"0.25\\\" d=\\\"M5.902,38.208c3.601,1.543,8.598,2.643,14.288,3.045l3.793-7.02 c-1.579-0.06-3.014-0.257-4.168-0.552L5.902,38.208z\\\" class=\\\"msportalfx-svg-c01\\\"/> <path d=\\\"M50,17.682c0,5.001-11.194,9.054-25,9.054S0,22.682,0,17.682v-4.88h50V17.682z\\\" class=\\\"msportalfx-svg-c19\\\"/> <path d=\\\"M50,12.802c0,5.001-11.194,9.054-25,9.054S0,17.802,0,12.802s11.193-9.054,25-9.054S50,7.801,50,12.802\\\" class=\\\"msportalfx-svg-c15\\\"/> <path d=\\\"M33.013,12.281c0,1.33-3.588,2.407-8.014,2.407s-8.015-1.077-8.015-2.407s3.589-2.407,8.015-2.407 S33.013,10.951,33.013,12.281\\\" class=\\\"msportalfx-svg-c19\\\"/> <path opacity=\\\"0.25\\\" d=\\\"M43.071,6.549c-3.502-1.327-8.104-2.269-13.279-2.633L26.548,9.92 c1.596,0.094,3.023,0.329,4.127,0.662L43.071,6.549z\\\" class=\\\"msportalfx-svg-c01\\\"/> <path opacity=\\\"0.25\\\" d=\\\"M5.902,18.642c3.601,1.543,8.598,2.643,14.288,3.045l3.793-7.02 c-1.579-0.06-3.014-0.257-4.168-0.552L5.902,18.642z\\\" class=\\\"msportalfx-svg-c01\\\"/> </svg>\",\n},\n{\n    \"id\": \"iops\",\n    \"displayName\": \"Max IOPS\",\n    \"iconName\": \"Monitoring\",\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Mapping in Azure Portal\nDESCRIPTION: Enables localization and custom display names with icons for different property values. Supports multiple mappings with different icons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Provisioning State\",\n    \"value\": \"[resources().properties.provisioningState]\",\n    \"description\": \"This is provisioning state.\",\n    \"valueMapping\": [\n      {\n        \"value\": \"Succeeded\",\n        \"displayName\": \"Succeeded\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n      },\n      {\n        \"value\": \"Warning\",\n        \"displayName\": \"Warning\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n      },\n      {\n        \"value\": \"Failed\",\n        \"displayName\": \"Failed\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Knockout Foreach Binding with Click Handler\nDESCRIPTION: This HTML snippet shows how to use a click handler from a parent viewmodel within a foreach binding, utilizing the $parent context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-this.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul data-bind=\"foreach: myButtons\">\n    <li>    \n        <button data-bind=\"text: displayName, click: $parent.buttonClickHandler\"></button>\n        Number of clicks: <strong data-bind=\"text: clicked\"></strong>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Identifying Azure Portal Extension Context using MsPortalFx in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to call `MsPortalFx.getEnvironmentValue` with the specific extension name within the browser's developer console (F12 tools). This is useful for determining the correct frame or web worker context when debugging or inspecting a running Azure Portal extension, especially if the context isn't obvious.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMsPortalFx.getEnvironmentValue(\"<extensionName>\")\n```\n\n----------------------------------------\n\nTITLE: Legacy One-Time Notification Implementation in TypeScript\nDESCRIPTION: Shows the old way of creating and publishing a one-time notification using ClientNotification class with error status and asset information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nvar notification = new MsPortalFx.Hubs.Notifications.ClientNotification({\n    title: clientStrings.myEventLabel,\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.Error,\n    asset: {\n        extensionName: ExtensionDefinition.definitionName,\n        assetType: ExtensionDefinition.AssetTypes.MyAsset.name,\n        assetId: assetId\n    }\n});\nnotification.publish();\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Options Group Schema Definition\nDESCRIPTION: Schema definition for allowed values in options group constraints. It defines required and optional properties for each option item including label, value, and feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-optionsgroupConstraints-allowedValues.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|label|True|Displayed text for an item\n|value|True|Description for an item\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining DashboardViewType Properties in Markdown\nDESCRIPTION: This snippet outlines the required and optional properties for a DashboardViewType object in a markdown table format. It includes the property names, whether they are required, and brief descriptions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|The title of the DashboardV2.\n|pages|True|List of dashboard pages available in the DashboardV2. See [here](dx-view-dashboardViewType-pages.md) for more information.\n|parameters|False|List of parameters that are used in the DashboardV2. See [here](dx-view-dashboardViewType-parameters.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Web Hosting Plan Icon in Azure Portal\nDESCRIPTION: SVG definition for the Web Hosting Plan icon that can be accessed through MsPortalFx.Base.Images.WebHostingPlan(). The icon represents a web hosting service with server and cloud elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_187\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<circle cx=\"5.6\" cy=\"5.4\" r=\"1\"/>\n<circle cx=\"5.6\" cy=\"9.4\" r=\"1\"/>\n<circle cx=\"5.6\" cy=\"13.4\" r=\"1\"/>\n<path d=\"M4.9,18.7c0-1.5,0.7-2.8,1.8-3.7H4.5c-0.8,0-1.5-0.7-1.5-1.5s0.7-1.5,1.5-1.5h7c0,0,0.1,0,0.1,0c0.7-0.5,1.5-0.9,2.4-1.1V3\n\tc0-0.6-0.5-1-1-1H3C2.5,2,2,2.5,2,3v18c0,0.6,0.5,1,1,1h3.2C5.4,21.1,4.9,20,4.9,18.7z M4.5,3.9h7c0.8,0,1.5,0.7,1.5,1.5\n\ts-0.7,1.5-1.5,1.5h-7C3.7,6.9,3,6.3,3,5.4S3.7,3.9,4.5,3.9z M4.5,7.9h7c0.8,0,1.5,0.7,1.5,1.5s-0.7,1.5-1.5,1.5h-7\n\tC3.7,10.9,3,10.3,3,9.4S3.7,7.9,4.5,7.9z\"/>\n<path d=\"M22,20.2c0-1-0.8-1.8-1.8-1.8c-0.1,0-0.1,0-0.2,0c0.1-0.4,0.2-0.8,0.2-1.3c0-2.7-2.2-4.9-4.8-4.9c-2.1,0-3.9,1.4-4.6,3.3\n\tc-0.3-0.1-0.7-0.2-1.1-0.2c-1.8,0-3.3,1.5-3.3,3.3c0,1.8,1.5,3.3,3.3,3.3c0,0,0,0,0,0v0h10.7l0,0C21.3,21.9,22,21.1,22,20.2\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Running Mocha Tests using npm\nDESCRIPTION: This command executes the test suite, likely using the Mocha test runner. It runs the script named 'test' defined in the 'scripts' section of the `package.json` file against the previously compiled JavaScript files. Note: Using an elevated command prompt might cause issues.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Detecting IFrame Idle/Active State and Notifying Parent - TypeScript\nDESCRIPTION: This snippet listens for browser window 'blur' and 'focus' events and posts corresponding 'frameidle' and 'framebusy' messages to the parent window. It helps Azure Portal extensions detect whether the user is interacting with the IFrame and, for example, trigger logout or session extension logic. Key parameters are the window events and a frameSignature identifier; dependencies are standard JS window and postMessage. Inputs are browser focus/blur actions, and output is the postMessage event. Constraint: Only works properly if used within a Portal frame handling these message types.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Send message to indicate to parent that we are idle\nwindow.addEventListener(\"blur\", () => {\n    window.parent.postMessage(\n        {\n            signature: window.frameSignature,\n            kind: \"frameidle\",\n        },\n        \"*\"\n    );\n});\n\n// Send message to indicate to parent that we are active\nwindow.addEventListener(\"focus\", () => {\n    window.parent.postMessage(\n        {\n            signature: window.frameSignature,\n            kind: \"framebusy\",\n        },\n        \"*\"\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WebsiteStaging SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the WebsiteStaging icon used in the Azure portal. The icon represents a cloud-based staging environment with server and cloud elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_94\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M40.771,43.034c0,0.687-0.557,1.243-1.243,1.243H11.475c-0.686,0-1.243-0.557-1.243-1.243\n\tc0-0.687,0.557-1.243,1.243-1.243h28.053C40.214,41.791,40.771,42.348,40.771,43.034\"/>\n<path fill=\"#3E3E3E\" d=\"M28.683,48.758c0,0.687-0.557,1.242-1.243,1.242H11.474c-0.686,0-1.242-0.555-1.242-1.242\n\tc0-0.687,0.557-1.243,1.242-1.243H27.44C28.126,47.515,28.683,48.071,28.683,48.758\"/>\n<path fill=\"#3E3E3E\" d=\"M40.612,31.237c0,0.687-0.557,1.243-1.243,1.243H11.474c-0.686,0-1.242-0.557-1.242-1.243\n\tc0-0.685,0.557-1.243,1.242-1.243h27.895C40.055,29.994,40.612,30.552,40.612,31.237\"/>\n<path fill=\"#3E3E3E\" d=\"M35.349,36.961c0,0.687-0.557,1.243-1.243,1.243H11.474c-0.686,0-1.242-0.557-1.242-1.243\n\tc0-0.687,0.557-1.243,1.242-1.243h22.631C34.792,35.718,35.349,36.275,35.349,36.961\"/>\n<path fill=\"#59B4D9\" d=\"M46.4,22.105c0-2.799-2.247-5.067-5.022-5.067c-0.209,0-0.415,0.016-0.613,0.043\n\tc0.306-1.138,0.476-2.335,0.476-3.572C41.24,6.048,35.243,0,27.846,0c-5.91,0-10.921,3.859-12.7,9.217\n\tc-0.938-0.33-1.941-0.516-2.99-0.516C7.095,8.701,3,12.836,3,17.936c0,5.103,4.095,9.238,9.155,9.238c0,0,0.009-0.004,0.013-0.004\n\tv0.004h29.617l-0.005-0.025C44.364,26.945,46.4,24.768,46.4,22.105\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M17.019,27.174c-1.204-1.196-2.101-2.734-2.508-4.517c-1.135-4.972,1.937-9.915,6.87-11.041\n\tc1.023-0.234,2.042-0.276,3.03-0.163c0.448-4.645,3.281-8.776,7.502-10.815C30.629,0.226,29.264,0,27.846,0\n\tc-5.91,0-10.921,3.859-12.7,9.217c-0.938-0.33-1.941-0.516-2.99-0.516C7.095,8.701,3,12.836,3,17.936\n\tc0,5.103,4.095,9.238,9.155,9.238c0,0,0.009-0.004,0.013-0.004v0.004H17.019z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Deployment Stages with stagedefinition.json in Azure Portal\nDESCRIPTION: A custom stage definition file that allows extension developers to specify custom rollout regions. It defines which Azure regions are included in each stage and the sequence of deployment stages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stagename\":[\"array of ARM region names\"],\n    \"allregionsstagename\":[\"*\"],\n    \"$sequence\":[\"stagename\",\"allregionsstagename\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Print Requests by View in Azure Portal\nDESCRIPTION: KQL query to analyze print requests by view name over the last day for non-internal users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-printing.md#2025-04-23_snippet_0\n\nLANGUAGE: kql\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(1d)\n| where userTypeHint == \"\"\n| where action == \"PrintRequest\"\n| summarize count() by name\n```\n\n----------------------------------------\n\nTITLE: SVG Icon - Commit\nDESCRIPTION: SVG markup for a source control commit icon showing an upward arrow and rectangle\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_19\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0 0 24 24\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5,13v9h15v-9H5z M18,20H7v-5h11V20z\"/>\n<polygon points=\"11.121,6.251 7,9.936 7,6.934 12.509,2 18,6.911 18,9.912 13.905,6.251 13.905,12 11.121,12\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions for Property Items in Azure Portal\nDESCRIPTION: This snippet demonstrates various types of actions that can be associated with property items, including URL links, resource links, blade openings, and menu actions. It shows the JSON structure for each action type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Azure portal\",\n    \"value\": \"https://azure.microsoft.com/\",\n    \"action\": {\n        \"url\": \"https://azure.microsoft.com/\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a resource\",\n    \"value\": \"Resource name\",\n    \"action\": {\n        \"resourceId\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a blade\",\n    \"value\": \"Blade name\",\n    \"action\": {\n        \"blade\": {\n            \"name\": \"A blade name\",\n            \"extension\": \"An extension name\",\n            \"parameters\": {\n                \"resId\": \"[resources().id]\"\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a menu\",\n    \"value\": \"Tags\",\n    \"action\": {\n        \"menu\": \"tags\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview (GetStarted) View in Azure Portal JSON\nDESCRIPTION: This JSON schema defines the structure for a Resource Overview (GetStarted) view in the Azure portal. It includes parameters, resources, and a placeholder for tabs where the Capabilities view can be added.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-capabilitiesViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Client Optimizations via URL Parameter\nDESCRIPTION: This URL demonstrates how to control client-side optimizations (bundling and minification) for the entire Azure Portal and all loaded extensions by appending the `clientOptimizations` query string parameter. Replace `<value>` with `true` (enable), `false` (disable), `bundle` (bundle only), or `minify` (minify only) to set the desired mode for easier debugging.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://portal.azure.com/?clientOptimizations=<value>\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Feature Flag Replacement in JSON Configuration\nDESCRIPTION: This snippet demonstrates a more complex use of the 'fx.feature' property with 'replaceWhen' directive. It shows how to replace a JSON object when the 'foo' flag equals 'oof', providing a replacement object with the same schema as the original.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-FeatureFlags.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"customerId\",\n            \"value\": \"foo is not oof\",\n            \"fx.feature\": {\n                \"name\": \"foo\",\n                \"replaceWhen\": \"ValueEquals\",\n                \"value\": \"oof\",\n                \"replacement\": {\n                    \"displayName\": \"customerId\",\n                    \"value\": \"foo is oof\"\n                }\n            }\n        },\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Zone-Based Alerting for Azure Portal Extensions\nDESCRIPTION: This JSON snippet demonstrates how to specify the 'businessHourStartTimeUtc' property in the alerting configuration. This setting allows alerts to be triggered during the business hours of the extension team's time zone.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"businessHourStartTimeUtc\": \"4\",\n    \"enabled\": true,\n    \"environments\": [\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Disable in Azure Portal\nDESCRIPTION: An SVG icon representing a disable action. Used in the Azure Portal UI to indicate functionality related to disabling features, services, or resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_123\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0.5 24.5 24 24\" enable-background=\"new 0.5 24.5 24 24\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.446,40.87L8.133,30.557c1.252-0.926,2.768-1.442,4.367-1.442\n\tc1.978,0,3.831,0.768,5.22,2.168c1.4,1.389,2.168,3.252,2.168,5.22C19.888,38.102,19.382,39.607,18.446,40.87z M7.28,41.722\n\tc-2.526-2.515-2.841-6.409-0.958-9.271L16.552,42.68c-1.189,0.779-2.589,1.21-4.052,1.21C10.522,43.89,8.669,43.122,7.28,41.722z\n\t M19.572,29.431c-1.884-1.884-4.399-2.926-7.072-2.926s-5.188,1.042-7.072,2.926c-3.904,3.904-3.904,10.239,0,14.144\n\tC7.312,45.458,9.827,46.5,12.5,46.5s5.188-1.042,7.072-2.926C23.476,39.67,23.476,33.335,19.572,29.431z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Permission References in XML\nDESCRIPTION: This snippet shows how to create permission references using predefined aliases for commonly-used actions on an asset type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"Robot\">\n  <AssetType.Permissions>\n    <PermissionDefinition Name=\"alias\" Action=\"Arm.Namespace/resourceType/action\" />\n  </AssetType.Permissions>\n</AssetType>\n\n<Part AssetType=\"Object\" AssetIdProperty=\"id\">\n  <Part.Permissions>\n    <PermissionReference Permission=\"alias\" />\n  </Part.Permissions>\n</Part>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global.asax.cs for Azure Portal Extensions\nDESCRIPTION: Example of extending ExtensionApplicationBase in Global.asax.cs to enable the PrecompiledMvcViewEngine for Azure Portal extensions. This implementation registers MVC areas, WebApi configuration, filters, and routes while maintaining the base class functionality.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-migrate-existing-to-extensioncontrollerbase.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n/// <summary>\n/// The http application for the extension.\n/// </summary>\npublic class MvcApplication : ExtensionApplicationBase\n{\n    /// <summary>\n    /// This method allows for execution of code on Application_Start.\n    /// </summary>\n    protected override void ApplicationStartHandler()\n    {\n        // remove the below call to the base method if you do not want to register the <c>PrecompiledMvcViewEngine</c> view engine.\n        base.ApplicationStartHandler();\n\n        AreaRegistration.RegisterAllAreas();\n        WebApiConfig.Register(GlobalConfiguration.Configuration);\n        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n        RouteConfig.RegisterRoutes(RouteTable.Routes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Persistent Test Extension in Azure Portal\nDESCRIPTION: Registers a custom extension in the Azure Portal that persists until the user restores default settings or explicitly unregisters it. This allows developers to sideload extensions from domains other than localhost.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sideloading.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// use this command if the changes should persist \n//  until the user restores default settings or\n//  executes MsPortalImpl.Extension.unregisterTestExtension(\"<extensionName>\")\nMsPortalImpl.Extension.registerTestExtension({ \nname: \"<extensionName>\", \nuri: \"https://<endpoint>:<portNumber>\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Date and Time Selection\nDESCRIPTION: An implementation of DatePicker that includes both date and time selection, with validation to ensure the selected time is not earlier than a previously selected start time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.DatePicker.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"dateTime2\",\n    \"type\": \"Microsoft.Common.DatePicker\",\n    \"label\": \"end time\",\n    \"visible\": true,\n    \"time\": {\n        \"visible\": true\n    },\n    \"constraints\": {\n        \"required\": true,\n        \"validations\":\n        [\n            {\n                \"message\": \"can't be earlier than the start time\",\n                \"isValid\": \"[less(duration(steps('datePicker').dateTime1, steps('datePicker').dateTime2), 0)]\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft.Common.ServicePrincipalV2Selector Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the Microsoft.Common.ServicePrincipalV2Selector object. It includes required and optional properties, along with their descriptions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalV2Selector.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|\n|type|True|\n|label|False|\n|toolTip|False|\n|visible|False|\n|options|False|\n|constraints|False|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Frame Blade Content\nDESCRIPTION: HTML template defining the structure and content of a Frame Blade's iframe, including header, content areas, and necessary script references.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Frame Blade</title>\n    <meta charset=\"utf-8\" />\n</head>\n\n<body>\n    <h1 class=\"fxs-frame-header\" style=\"margin: 0;\">Frame Blade</h1>\n    <div class=\"fxs-frame-token\"></div>\n    <div class=\"fxs-frame-content\"></div>\n    <div class=\"fxs-frame-documentation-link\">More information and best practices for FrameBlades can be found in our <a\n            href=\"https://github.com/Azure/portaldocs/blob/master/portal-sdk/generated/top-blades-frameblade.md\"\n            target=\"_blank\">documentation\n            page</a>.</div>\n    <button class=\"fxs-frame-button\" type=\"button\">Open Blade</button>\n    <!-- Define frameSignature and allowed origin list -->\n    <script>\n        var frameSignature = \"FxFrameBlade\";\n        var allowedParentFrameAuthorities = [\"df.onecloud.azure-test.net\", \"portal.azure.com\"];\n    </script>\n    <script src=\"../Scripts/IFrameSample/FramePage.js\"></script>\n    <script src=\"../Scripts/IFrameSample/IdleBehavior.js\"></script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard View Type Actions Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the view-dashboardViewType-actions object. It includes onClick for click actions, footer for external or blade links at the bottom of the tile, contextMenu for links in the context menu, and an optional fx.feature property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|onClick|False|Click action on the tile. See [here](dx-view-dashboardViewType-actionsOnClick.md) for more information.\n|footer|False|The external or blade links added to the bottom of the tile. Only two links allowed. See [here](dx-view-dashboardViewType-actionReference.md) for more information.\n|contextMenu|False|The external or blade links added to the context menu. Only two links allowed. See [here](dx-view-dashboardViewType-actionReference.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Resource Info Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of resource info passed to getExtensionAndMenuConfig method.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceInfo {\\n    /**\\n     * The resource ID.\\n     */\\n    resourceId: string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Gallery Package Source Folder in Azure Web Projects (MSBuild XML)\nDESCRIPTION: This XML code snippet demonstrates how to override the default folder location for gallery packages in an Azure web project's build configuration by setting the <GalleryPackagesSourceFolder> property within a <PropertyGroup>. This is useful when the default solution structure is not used, particularly when the .sln file is not checked in, and ensures the build step locates packages in a custom directory. This should be added anywhere before importing Microsoft.Azure.Gallery.AzureGalleryUtility.targets in the project file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n  <PropertyGroup>\\n    <GalleryPackagesSourceFolder>$(ProjectDir)GalleryPackages</GalleryPackagesSourceFolder>\\n  </PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating LoadBalancer Icon with Diamond Shape in SVG\nDESCRIPTION: Definition of a load balancer icon featuring a diamond shape with internal connection paths. The SVG uses a green diamond with white path elements representing the load balancing functionality and blue central circle.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_51\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M25.001,50c-1.232,0-2.392-0.48-3.261-1.352L1.351,28.26C0.492,27.401,0,26.214,0,24.999\n\tc0-1.214,0.492-2.402,1.351-3.26L21.74,1.351c0.871-0.872,2.029-1.352,3.261-1.352c1.231,0,2.39,0.48,3.261,1.352l20.386,20.388\n\tC49.521,22.607,50,23.766,50,24.999c0,1.233-0.479,2.392-1.353,3.263L28.262,48.648C27.392,49.52,26.232,50,25.001,50\"/>\n<path fill=\"#FFFFFF\" d=\"M45.613,24.66L39,18.048v4.668l-7.016-0.006c-0.677-2.418-2.573-4.328-4.984-5.02V11h4.613L25,4.387\n\tL18.388,11H23v6.689c-2.407,0.692-4.301,2.596-4.981,5.008L11,22.691v-4.618l-6.613,6.613L11,31.298V26.63l7.022,0.006\n\tc0.683,2.407,2.574,4.305,4.978,4.996v4.636c-1,0.728-2.528,2.258-2.528,4.04c0,2.481,2.033,4.5,4.514,4.5s4.51-2.019,4.51-4.5\n\tc0-1.762-1.496-3.274-2.496-4.013v-4.663c2.399-0.689,4.289-2.583,4.975-4.983L39,26.655v4.618L45.613,24.66z\"/>\n<path fill=\"#59B4D9\" d=\"M25,19.402c-2.899,0-5.258,2.359-5.258,5.258s2.359,5.258,5.258,5.258s5.258-2.358,5.258-5.258\n\tS27.899,19.402,25,19.402z\"/>\n<path opacity=\"0.15\" fill=\"#FFFFFF\" d=\"M28.262,1.351c-0.871-0.872-2.029-1.352-3.261-1.352c-1.231,0-2.389,0.48-3.26,1.352\n\tL1.352,21.739C0.492,22.597,0,23.785,0,24.999c0,1.215,0.492,2.403,1.352,3.261l11.543,11.544L34.61,7.698L28.262,1.351z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Properties in Markdown\nDESCRIPTION: This snippet defines the properties of grid columns using a markdown table. It specifies required and optional attributes such as id, header, element, width, cellType, text, and fx.feature. The table provides a clear overview of each property's requirement and purpose.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-grid-constraints-columns-items.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|id|True|Id of the column\n|header|True|DisplayName of the column.\n|element|False|Specify column with TextBox, DropDown, or OptionsGroup.\n|width|False|Width of the column. you can specify with fractional unit.\n|cellType|True|cellType can be either 'readonly' or 'input'. \n|text|False|Configuration on what to display in each column.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Integrating Key Picker Blade using PDL in XML\nDESCRIPTION: Shows the required PDL (Portal Definition Language) changes in XML to integrate the Key picker blade. The `BladeAction` tag specifies the target blade (`KeyPicker` from the `Microsoft_Azure_KeyVault` extension) and links it to the corresponding `ParameterCollector` instance (`keyPickerCollector`) defined in the ViewModel.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<BladeAction Blade =\"{BladeReference KeyPicker, ExtensionName=Microsoft_Azure_KeyVault}\"\n\t                   ParameterCollector =\"keyPickerCollector\">\n\t</BladeAction>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FileUpload Output for Multiple File Contents (JSON)\nDESCRIPTION: Illustrates the JSON output format when options.multiple is true and options.uploadMode is file. The output is an array of file contents as JSON strings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n  \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n  \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\",\n  \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Asset Type Visibility Configuration\nDESCRIPTION: Configuration for controlling asset visibility in different environments using assettypeoptions in domain-specific config files. Demonstrates how to hide/show assets and their instances in different contexts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"assettypeoptions\": {\n      \"YOUR_ASSET_NAME\": { \"options\": \"HideAssetType\" },\n      \"YOUR_OTHER_ASSET_NAME\": { \"options\": \"HideAssetType,HideInstances\" },\n      \"YOUR_THIRD_ASSET_NAME\": { \"options\": \"\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TextBox Validation Object Structure - Expression Based\nDESCRIPTION: Defines the structure for expression-based text box validation. The validation object requires a message property for error display and an isValid expression property that determines validity. Optional properties include await and skip functions for validation control, and fx.feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-textBoxConstraints-validations.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"string\",\n  \"isValid\": \"expression\",\n  \"await\": \"function\",\n  \"skip\": \"function\",\n  \"fx.feature\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Config File References\nDESCRIPTION: XML configurations for including environment-specific configuration files as embedded resources\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n    <EmbeddedResource Include=\"Content\\Config\\df.onecloud.azure-test.net.json\" />\n    <EmbeddedResource Include=\"Content\\Config\\portal.azure.com.json\" />\n    <EmbeddedResource Include=\"Content\\Config\\portal.azure.cn.json\" />\n    <EmbeddedResource Include=\"Content\\Config\\portal.azure.us.json\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Client-Side Extension Version via fx.environment.version in JavaScript\nDESCRIPTION: This JavaScript code demonstrates accessing the `fx.environment.version` property within the browser's developer console. After selecting the correct extension frame/context (using the method involving `MsPortalFx.getEnvironmentValue`), typing this expression reveals the version of the Azure Portal extension currently loaded on the client side.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfx.environment.version\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Version for Content Versioning\nDESCRIPTION: C# assembly attributes for version control of extension content and CDN cache invalidation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cdn.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.Reflection.AssemblyFileVersion(\"5.0.0.56\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"5.0.0.56 (COMPUTER.150701-1627)\")]\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Shield with Timer in TypeScript\nDESCRIPTION: This TypeScript code shows how to implement a dynamic shield that alternates between opaque and translucent states using a timer. It also includes a TextBox form field.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Di.Class(\"viewModel\")\nexport class TemplateBladeWithShieldViewModel\nextends Blade\nimplements Def.TemplateBladeWithShieldViewModel.Contract\n{\n/**\n * The blade's title.\n */\npublic title: KnockoutObservable<string>;\n\n/**\n * TextBox form field.\n */\npublic myTextBox: TextBox.Contract;\n\nprivate _timerHandle: number;\n\nconstructor(container: FxCompositionBlade.Container) {\n    super();\n\n    this.title(ClientResources.templateBladeWithShield);\n\n    const translucent = MsPortalFx.ViewModels.ShieldType.Translucent;\n    const opaque = MsPortalFx.ViewModels.ShieldType.Opaque;\n    let isTranslucent = true;\n\n    const op = () => {\n        const operation = Fx.defer<any>();\n        const shieldType = isTranslucent ? translucent : opaque;\n        container.operations.add(operation.promise, { blockUi: true, shieldType: shieldType });\n\n        isTranslucent = !isTranslucent;\n        window.setTimeout(() => { operation.resolve(); }, 3000);\n    };\n\n    op();\n\n    window.setInterval(op, 5000);\n\n    // TextBox\n    this.myTextBox = TextBox.create(container, {\n        label: ClientResources.formsSampleBasicTextBox,\n    });\n}\n\n/**\n * Clean up any resources.\n */\npublic dispose(): void {\n    window.clearInterval(this._timerHandle);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining view-dashboardViewType-visible Property in Markdown\nDESCRIPTION: This markdown snippet defines the structure and properties of the 'visible' object used in Azure Portal's dashboard view type. It specifies optional parameters for controlling visibility based on parameter values and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-visible.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|parameters|False|If parameter values are selected on the page, the tile is visible. Defaults to true. See [here](dx-view-dashboardViewType-parametersValues.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Opting in to Resource Menu via AssetType in XML\nDESCRIPTION: This XML snippet shows how to opt in to the Resource Menu by adding the ResourceMenu tag to the AssetType definition. It includes the ResourceProvidedBy attribute to specify how the resource is provided.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"MyResource\"\n           ...>\n    <ResourceMenu ResourceProvidedBy=\"NoResource\" />\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Format in Azure Portal\nDESCRIPTION: Displays content as a formatted date value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Creation time\",\n    \"value\": \"2021-03-23T21:24:47.7856737Z\",\n    \"format\": \"Date\"\n}\n```\n\n----------------------------------------\n\nTITLE: WebsiteModel Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of WebsiteModel with KnockoutObservable properties for id, name, and running status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebsiteModel {\n    id: KnockoutObservable<number>;\n    name: KnockoutObservable<string>;\n    running: KnockoutObservable<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetType with ResourceMenu in XML\nDESCRIPTION: XML configuration to enable resource menu functionality by adding ResourceMenu tag to AssetType with appropriate ResourceProvidedBy setting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"MyResource\"\\n           ...>\\n    <ResourceMenu ResourceProvidedBy=\"NoResource\" />\\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Refreshing QueryCache and EntityCache Entries in Azure Portal\nDESCRIPTION: Demonstrates how to refresh specific cache entries when server data changes are known to affect particular items. This approach issues a single AJAX call to the server to update the cache.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst promises: Promise<void>[] = [];\nthis.enginesQuery.refresh({}, null);\nMsPortalFx.makeArray(engines).forEach((engine) => {\n    promises.push(Promise.resolve(this.engineEntities.refresh(engine, null)));\n});\nreturn Promise.all(promises);\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Microsoft.Storage.MultiStorageAccountCombo Control in JSON\nDESCRIPTION: This snippet shows the expected output format from the Microsoft.Storage.MultiStorageAccountCombo control. It includes the prefix, count, resource group, and storage account type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.MultiStorageAccountCombo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"prefix\": \"sa\",\n    \"count\": 2,\n    \"resourceGroup\": \"rg01\",\n    \"type\": \"Premium_LRS\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Control Factory Method Signature\nDESCRIPTION: Demonstrates the standard signature for control factory methods used to create control instances.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-controls.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<alias>.create(lifetimeManager, configurationOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Recent Resources Tile in Markdown\nDESCRIPTION: Describes the structure for a recent resources query tile. It includes properties for specifying the query kind and optional parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-queryTileData.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Option 3\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|The recent resources data source of the query tile. Enum permitting the value: \"recent-resources\"\n|usedParameters|False|Parameter names that are applied to the tile. It can be used within the query.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Applying Status Color Classes in Azure Portal HTML\nDESCRIPTION: Demonstrates using `msportalfx-*` CSS classes in HTML to apply colors conveying status (Info, Dirty, Success, Warning, Error). It shows how to change background (`msportalfx-bg-*`), text (`msportalfx-text-*`), border (`msportalfx-br-*`), and SVG fill (`msportalfx-fill-*`) colors. These classes rely on the Azure Portal's CSS framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-color-palette.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"statuspalette\">\n<div class=\"statuscontainer\">\nInfo\n  <div class=\"msportalfx-bg-info\">msportalfx-bg-info</div>\n  <div class=\"msportalfx-text-info\">msportalfx-text-info</div>\n  <div class=\"msportalfx-br-info\">msportalfx-br-info</div>\n  <div class=\"msportalfx-fill-info\">msportalfx-fill-info <svg><rect height=\"10\" width=\"10\"/></svg></div>\n</div>\n<div class=\"statuscontainer\">\nDirty\n  <div class=\"msportalfx-bg-dirty\">msportalfx-bg-dirty</div>\n  <div class=\"msportalfx-text-dirty\">msportalfx-text-dirty</div>\n  <div class=\"msportalfx-br-dirty\">msportalfx-br-dirty</div>\n  <div class=\"msportalfx-fill-dirty\">msportalfx-fill-dirty <svg><rect height=\"10\" width=\"10\"/></svg></div>\n</div>\n<br>\n<br>\n<div class=\"statuscontainer\">\nSuccess\n  <div class=\"msportalfx-bg-success\">msportalfx-bg-success</div>\n  <div class=\"msportalfx-text-success\">msportalfx-text-success</div>\n  <div class=\"msportalfx-br-success\">msportalfx-br-success</div>\n  <div class=\"msportalfx-fill-success\">msportalfx-fill-success <svg><rect height=\"10\" width=\"10\"/></svg></div>\n</div>\n<div class=\"statuscontainer\">\nWarning\n  <div class=\"msportalfx-bg-warning\">msportalfx-bg-warning</div>\n  <div class=\"msportalfx-text-warning\">msportalfx-text-warning</div>\n  <div class=\"msportalfx-br-warning\">msportalfx-br-warning</div>\n  <div class=\"msportalfx-fill-warning\">msportalfx-fill-warning <svg><rect height=\"10\" width=\"10\"/></svg></div>\n</div>\n<div class=\"statuscontainer\">\nError\n  <div class=\"msportalfx-bg-error\">msportalfx-bg-error</div>\n  <div class=\"msportalfx-text-error\">msportalfx-text-error</div>\n  <div class=\"msportalfx-br-error\">msportalfx-br-error</div>\n  <div class=\"msportalfx-fill-error\">msportalfx-fill-error <svg><rect height=\"10\" width=\"10\"/></svg></div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Save All Icon in SVG\nDESCRIPTION: SVG markup defining the 'Save All' icon for the Azure portal. It creates a stacked document icon with a save symbol.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_163\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M20.8,8H9.2C8.4,8,8,8.6,8,9.4v11.2C8,21.4,8.4,22,9.2,22h0.7v-4.1c0-0.5,0.4-0.9,0.9-0.9h8.4c0.5,0,0.9,0.4,0.9,0.9V22h0.7\n\tc0.8,0,1.2-0.6,1.2-1.4V9.4C22,8.6,21.6,8,20.8,8z M20.1,13.5c0,0.5-0.4,0.8-0.9,0.8h-8.4c-0.5,0-0.9-0.4-0.9-0.9v-2.7\n\tc0-0.5,0.4-0.9,0.9-0.9h8.4c0.5,0,0.9,0.5,0.9,1L20.1,13.5L20.1,13.5z\"/>\n<path d=\"M19,6.4C19,5.6,18.6,5,17.8,5H6.2C5.4,5,5,5.6,5,6.4v11.2C5,18.4,5.4,19,6.2,19h0.7V7.7c0-0.5,0.4-0.9,0.9-0.9h8.4H19V6.4z\"\n\t/>\n<path d=\"M16,3.4C16,2.6,15.6,2,14.8,2H3.2C2.4,2,2,2.6,2,3.4v11.2C2,15.4,2.4,16,3.2,16h0.7V4.7c0-0.5,0.4-0.9,0.9-0.9h8.4H16V3.4z\"\n\t/>\n<rect x=\"12.2\" y=\"20.1\" width=\"2.8\" height=\"1.9\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Portal Billing Extension via NuGet in PowerShell\nDESCRIPTION: Shows the PowerShell command to install the `Microsoft.Portal.Extensions.Billing` NuGet package using the Package Manager Console. It specifies a custom package source URL and requires replacing `<Version_Number>` with the desired package version.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Billing -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version <Version_Number>\n```\n\n----------------------------------------\n\nTITLE: TypeScript External Link Sanitization\nDESCRIPTION: Implementation example for sanitizing external links in FrameBlade and FramePart components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-linking.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst externalUri = \"https://bing.com\";\nconst sanitizedUri = `${trustedAuthority}/verifyLink?href=${encodeURIComponent(externalUri)}&id=MyExtensionName`;\n```\n\n----------------------------------------\n\nTITLE: Locating Form and Input Fields in Azure Portal Extension (C#)\nDESCRIPTION: This snippet demonstrates how to find a form within a blade and locate specific input fields using the FindField method of the FormSection class. It's part of a process for entering data into forms in Azure Portal extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar portal = this.NavigateToPortal();\n\nportal.StartBoard.FindSinglePartByTitle<ButtonPart>(\"New Contact\").Click();\n\nstring contactName = \"John Doe\";\n\nstring subscriptionName = \"Portal Subscription 2\";\nvar blade = portal.FindSingleBladeByTitle(\"Basic Information\");\nvar form = webDriver.WaitUntil(() => blade.FindElement<FormSection>(), \"Could not find the form.\");\n```\n\n----------------------------------------\n\nTITLE: Registering Temporary Test Extensions in JavaScript\nDESCRIPTION: Command to register a test extension that persists only for the current Portal load session. This approach is useful for temporary testing without affecting persistent user settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-sideloading.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// use this command if the extension should be registered \n//   only for the current Portal load\nMsPortalImpl.Extension.registerTestExtension({\nname: \"<extensionName>\",\nuri: \"https://<endpoint>:<portNumber>\" }, \n<temporary>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Logic for Permissions in XML\nDESCRIPTION: This snippet demonstrates how to use PermissionSet to implement AND and OR operations for multiple permissions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-permissions.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Part AssetType=\"Object\" AssetIdProperty=\"id\">\n  <Part.Permissions>\n    <PermissionSet Require=\"any\">\n      <Permission Name=\"read\" />\n      <Permission Name=\"readChildren\" />\n      <PermissionSet Require=\"all\">\n        <Permission Name=\"write\" />\n        <Permission Name=\"writeChildren\" />\n      </PermissionSet>\n    </PermissionSet>\n  </Part.Permissions>\n</Part>\n```\n\n----------------------------------------\n\nTITLE: Custom Deployment URI Configuration\nDESCRIPTION: Example of URI configuration for custom deployment teams managing their own deployments\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nuri: \"//main.demo.ext.azure.com\",\n```\n\n----------------------------------------\n\nTITLE: Checking TypeScript Version in Bash\nDESCRIPTION: Command to verify the installed version of TypeScript on the machine.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$>tsc -version\n```\n\n----------------------------------------\n\nTITLE: Defining Data Browse Column Format Enum Values\nDESCRIPTION: Enumeration that defines the allowed format values for data browse columns. The values include NoFormat for unformatted data, String for text data, Date for temporal data, and Number for numeric data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-dataBrowse-columns-format.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NoFormat\n- String\n- Date\n- Number\n```\n\n----------------------------------------\n\nTITLE: XML Project Configuration for Web Worker Prewarming\nDESCRIPTION: XML property settings in the extension's csproj file to enable web worker prewarming. This involves adding either 'testPrewarming' for testing environments or 'enablePrewarming' for production deployment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-webworkers.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <testPrewarming>true</testPrewarming>\n    <!-- or -->\n    <enablePrewarming>true</enablePrewarming>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetType with ARG Query Integration\nDESCRIPTION: PDL configuration showing how to integrate ARG query results with AssetType for status display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"VirtualServer\"\n             ...\n             PartName=\"{ResourcePart}\">\n    <Browse Type=\"ResourceType\"\n            UseCustomConfig=\"true\"\n            UseSupplementalData=\"true\"\n            Query=\"{Query File=./VirtualServerQuery.kml}\"\n            DefaultColumns=\" status\">\n      <Summary StatusColumn=\"status\" />\n      <Column Name=\"status\"\n            DisplayName=\"{Resource Columns.VirtualServer.status, Module=ClientResources}\"\n            Description=\"{Resource Columns.VirtualServer.statusDescription, Module=ClientResources}\"\n            Format=\"String\"\n            WidthInPixels=\"80\" />\n    </Browse>\n```\n\n----------------------------------------\n\nTITLE: Creating PDE NuGet Package with nuproj (XML)\nDESCRIPTION: This XML snippet provides a template `.nuproj` file for building a NuGet package to distribute an Azure Portal Extension's PDE. It defines package metadata, specifies the PDE file and associated TypeScript definition files (`.d.ts`) to include, sets their target path within the package (`Client\\_extensions\\Name`), and includes an `Install.ps1` script for post-installation actions. Developers need to customize placeholders like `Name`, file paths (`$(RepoRoot)` dependent locations), and potentially import paths (`$(EnvironmentConfig)`, `$(PkgNuProj)`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-publish.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n<Import Project=\"$(EnvironmentConfig)\" />\n\n<PropertyGroup>\n    <Id>Microsoft.Portal.Extensions.Name</Id>\n    <Title>Microsoft Portal Extension Name</Title>\n    <Description>Provides the Microsoft Portal Name PDE</Description>\n    <Summary>Provides the Microsoft Portal Name PDE</Summary>\n    <Tags>Microsoft Azure Cloud Portal Framework Name  PDE</Tags>\n</PropertyGroup>\n\n<ItemGroup>\n    <!-- update the following to pull the PDE from your official build-->\n    <Content Include=\"$(RepoRoot)\\src\\SDK\\Extensions\\HubsExtension\\Extension\\TypeScript\\HubsExtension\\HubsExtension.pde\">\n    <!-- update the following to pull in any *.d.ts files that consumers of your extensions PDE will require -->\n    <Content Include=\"$(RepoRoot)\\src\\SDK\\Extensions\\HubsExtension\\Extension\\TypeScript\\HubsExtension\\ForExport\\*.d.ts\">\n    <TargetPath>Client\\_extensions\\Name</TargetPath>\n    </Content>\n    <!-- include an install.ps1 to both set appropriate build action on pde and to pop documents-->\n    <File Include=\"$(REPOROOT)\\RDPackages\\NuGet\\Microsoft.Portal.Extensions.Name\\Install.ps1\" >\n    <TargetPath>Tools\\Install.ps1</TargetPath>\n    </File>\n</ItemGroup>\n<!-- update the following as needed aka.ms/onebranch -->\n<Import Project=\"$(PkgNuProj)\\NuProj.Targets\" />\n<Import Project=\"..\\Portal.Common.NuGet.props\" />\n<PropertyGroup>\n    <GenerateSymbolPackage>false</GenerateSymbolPackage>\n</PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode in Web.config\nDESCRIPTION: Web.config setting to disable development mode for production builds.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Portal.Extensions.<YourExtension>.ApplicationConfiguration.IsDevelopmentMode\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Quickstart Icon in SVG\nDESCRIPTION: SVG code that defines the Azure quickstart icon using a custom path. The icon is styled with a light blue color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_108\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"-0.5 -0.5 50 50\">\n<path class=\"msportalfx-svg-c01\" d=\"M49.5,32.663c0-3.224-2.589-5.837-5.787-5.837c-0.241,0-0.476,0.019-0.707,0.049 c0.355-1.311,0.55-2.69,0.55-4.115c0-5.003-2.35-9.442-5.986-12.289l-5.652,7.279h6.682L24.459,32.718l4.662-10.773H23.06 l5.471-14.729c-0.136-0.004-0.269-0.021-0.406-0.021c-6.808,0-12.581,4.447-14.63,10.617c-1.082-0.377-2.238-0.592-3.447-0.592 C4.221,17.22-0.5,21.984-0.5,27.86c0,5.877,4.721,10.64,10.548,10.64c0.005,0,0.01-0.001,0.014-0.001V38.5h34.124l-0.007-0.026 C47.157,38.236,49.5,35.728,49.5,32.663z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Printer Asset Type ViewModel for Azure Portal in TypeScript\nDESCRIPTION: Implements the `PrinterViewModel` class, conforming to the `Definition.Contract`, which provides asset type information and behavior for printers within the Azure Portal. It manages supplemental data streaming (`supplementalDataStream`), interacts with a `DataContext` for data operations, registers for updates, and defines the `getBrowseConfig` method to customize the columns displayed in the resource browse list. The class is designed to be stateless, relying on the `DataContext` for state management and utilizes dependency injection (`@Di.Class`) and handles disposal (`registerForDispose`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* This sample demonstrates using the asset type view model to provide asset type information.\n*\n* IMPORTANT\n* It is important to note that this class will be instantiated and disposed at the discretion of the portal, so no\n* \"stateful\" data should be stored in this class. All stateful data belongs in the data context and caching will be\n* handled by the portal code.\n*/\n@Di.Class(\"viewModel\")\nexport class PrinterViewModel\n   implements Definition.Contract {\n\n   /**\n    * This observable array is used to stream supplementary data results to the caller.\n    */\n   public supplementalDataStream = ko.observableArray<FxAssets.SupplementalData>([]);\n\n   private _dataContext: DataContext;\n   private _updateMap: StringMap<{ columns: string[] }>;\n\n   /**\n    * Initializes a new instance of the printer view model class.\n    *\n    * @param container Object representing the container in the shell.\n    * @param dataContext Long lived data access object passed into all view models in the current area.\n    */\n   constructor(container: FxContainerContract, dataContext: DataContext) {\n       this._dataContext = dataContext;\n       this._updateMap = Object.create(null);\n       const updateId = dataContext.printerData.registerUpdate<{ columns: string[] }>(this._updateMap, (resourceId, data) => {\n           return this.getSupplementalData([resourceId], data.columns).then(MsPortalFx.noop);\n       });\n       container.registerForDispose(() => {\n           dataContext.printerData.unregisterUpdate(updateId);\n       });\n   }\n\n   /**\n    * Gets the browse config.\n    *\n    * @returns A promise which will be resolved with the browse config.\n    */\n   public getBrowseConfig(): Promise<FxAssets.BrowseConfig> {\n       // This sample shows how to include additional columns for the printer resource and sets one pre-defined\n       // column and one custom column as the default columns. This ensures that without customization, these\n       // columns will appear in the browse grid.\n       //\n       // NOTE that since the browse is resource type-based, the icon, resource name will be prepended at the start\n       // of the columns and subscription will be appended at the end of the columns. Those three columns must not be\n       // included in the custom config.\n       return Promise.resolve({\n           columns: [\n               // Column for the model using a custom column.\n               {\n                   id: BrowseColumns.model,\n                   name: ko.observable<string>(ClientResources.Columns.Printer.model),\n                   description: ko.observable<string>(ClientResources.Columns.Printer.modelDescription),\n                   itemKey: BrowseColumns.ModelProperties.model,\n                   width: ko.observable<string>(\"90px\"),\n               },\n\n               // Column for the status using a custom column.\n               {\n                   id: BrowseColumns.status,\n                   name: ko.observable<string>(ClientResources.Columns.Printer.status),\n                   description: ko.observable<string>(ClientResources.Columns.Printer.statusDescription),\n                   itemKey: BrowseColumns.StatusProperties.status,\n                   width: ko.observable<string>(\"80px\"),\n                   cssClass: \"fxs-hubs-gridStatusIconColumn\",\n                   format: GridFormat.SvgIconLookup,\n                   formatOptions: {\n                       svgIconLookup: {\n                           [PrinterStatus.working.toLowerCase()]: {\n                               svg: FxStatusBadges.Success(),\n                               text: ClientResources.Status.Printer.working,\n                           },\n                           [PrinterStatus.jammed.toLowerCase()]: {\n                               svg: FxStatusBadges.Error(),\n                               text: ClientResources.Status.Printer.jammed,\n                           },\n                       }\n                   }\n               }\n           ]\n       });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Page Version in MSBuild\nDESCRIPTION: MSBuild target configuration to set the extension page version using build version and timestamp for zip file naming.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"SetExtensionPageVersion\"\n          BeforeTargets=\"CompilePdl\" >\n    <PropertyGroup>\n      <ExtensionPageVersion>$(BuildVersion).$([System.DateTime]::Now.ToString(\"yyMMdd-HHmm\"))</ExtensionPageVersion>\n    </PropertyGroup>\n  </Target>\n```\n\n----------------------------------------\n\nTITLE: Tenant Scope Deployment Properties\nDESCRIPTION: Configuration properties for tenant level deployments. Requires kind, location, parameters, and template fields, with optional postCreate customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formDeployment.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"Tenant\"\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Resetting Portal State\nDESCRIPTION: Demonstrates how to clear user settings before starting a test using ResetDesktopState.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nportal.ResetDesktopState();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Azure Portal V2\nDESCRIPTION: TypeScript configuration file (tsconfig.json) for Azure Portal SDK V2 targets. Specifies compiler options including module system, source maps, and strict type checking.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compileOnSave\": true,\n    \"compilerOptions\": {\n      \"baseUrl\": \"Client\",\n      \"declaration\": true,\n      \"experimentalDecorators\": true,\n      \"forceConsistentCasingInFileNames\": true,\n      \"inlineSources\": true,\n      \"module\": \"amd\",\n      \"moduleResolution\": \"node\",\n      \"noEmitHelpers\": true,\n      \"noImplicitAny\": true,\n      \"noImplicitThis\": true,\n      \"paths\": {\n        \"*\": [\n          \"*\"\n        ]\n      },\n      \"outDir\": \"Output/Content/Scripts\",\n      \"rootDir\": \"Client\",\n      \"removeComments\": false,\n      \"sourceMap\": true,\n      \"target\": \"es5\",\n      \"types\": []\n    },\n    \"include\": [\n      \"Client/**/*\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Portal Test Class with TestInitialize, TestMethods, and TestCleanup in C#\nDESCRIPTION: A complete example class showing how to test Azure Portal extensions. It demonstrates test initialization with web servers and portal registration, test methods for verifying functionality like deleting contacts from blades and grids, and proper test cleanup. The example includes helper methods for provisioning test data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.Portal.TestFramework.Core;\nusing Microsoft.Selenium.Utilities;\nusing OpenQA.Selenium;\nusing Microsoft.Portal.TestFramework.Core.Shell;\nusing Microsoft.Portal.TestFramework.Core.Controls;\nusing OpenQA.Selenium.Interactions;\n\nnamespace SamplesExtensionTests\n{\n    [TestClass]\n    public class Commands\n    {\n        private const string SamplesExtensionUrl = \"http://localhost:11997\";\n        private const string SamplesExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\SamplesExtension\\Extension\";\n        private const string HubsExtensionUrl = \"http://localhost:11998\";\n        private const string HubsExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\HubsExtension\";\n        private static IWebDriver webDriver;\n        private static PortalServer portalServer;\n        private static WebServer samplesExtensionServer;\n        private static WebServer hubsExtensionServer;\n\n        [TestInitialize]\n        public void TestInitialize()\n        {\n            hubsExtensionServer = new WebServer(new Uri(HubsExtensionUrl), HubsExtensionWebSitePath);\n            if (hubsExtensionServer.IsHostedByTestFramework)\n            {\n                hubsExtensionServer.Start();\n            }\n\n            samplesExtensionServer = new WebServer(new Uri(SamplesExtensionUrl), SamplesExtensionWebSitePath);\n            if (samplesExtensionServer.IsHostedByTestFramework)\n            {\n                samplesExtensionServer.Start();\n            }\n\n            portalServer = PortalServer.Create();\n\n            if (portalServer.IsHostedByTestFramework)\n            {\n                portalServer.RegisterExtension(\"Hubs\", new Uri(hubsExtensionServer.Uri));\n                portalServer.RegisterExtension(\"Samples\", new Uri(samplesExtensionServer.Uri));\n                portalServer.Start();\n            }\n\n            webDriver = WebDriverFactory.Create();\n            webDriver.Url = \"about:blank\";\n            portalServer.ClearUserSettings();\n        }\n\n        [TestMethod]\n        public void CanDeleteContactFromBlade()\n        {\n            var portal = this.NavigateToPortal();\n\n            string contactName = \"John Doe\";\n            string subscriptionName = \"Portal Subscription 2\";\n\n            this.ProvisionContact(contactName, subscriptionName, portal);\n\n            var blade = portal.FindSingleBladeByTitle(contactName);\n\n            CommandBar commandBar = blade.FindCommandBar();\n\n            var command = commandBar.FindCommandBarItem(\"DELETE\");\n            command.Click();\n\n            commandBar.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\n            webDriver.WaitUntil(() => !commandBar.HasMessageBox,\n\t\t\t\t\t\t\t\t\"There is still a message box in the command bar.\");\n\n            portal.StartBoard.FindSinglePartByTitle(\"Deleted\");\n        }\n\n        [TestMethod]\n        public void CanDeleteContactFromGrid()\n        {\n            var portal = this.NavigateToPortal();\n\n            string contactName = \"Jane Doe\";\n            string subscriptionName = \"Portal Subscription 2\";\n\n            this.ProvisionContact(contactName, subscriptionName, portal);\n\n            portal.StartBoard.FindSinglePartByTitle(\"Contacts\").Click();\n            var blade = portal.FindSingleBladeByTitle(\"Contacts List\");\n            var grid = webDriver.WaitUntil(() => blade.FindElement<Grid>(), \"Could not find the grid.\");\n            GridRow row = webDriver.WaitUntil(() => grid.FindRow(contactName), \"Could not find the contact row.\");\n\n            Actions actions = new Actions(webDriver);\n            actions.ContextClick(row);\n            actions.Perform();\n\n            ContextMenuItem menuItem = webDriver.WaitUntil(() => webDriver.FindElement<ContextMenu>(),\n                                                           \"Could not find the context menu.\")\n                                                .FindContextMenuItemByText(\"Delete\");\n            menuItem.Click();\n\n            portal.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\n\n            webDriver.WaitUntil(() => !portal.HasMessageBox, \"There is still a message box in the Portal.\");\n\n            portal.StartBoard.FindSinglePartByTitle(\"Deleted\");\n        }\n\n        [TestCleanup]\n        public void TestCleanup()\n        {\n            webDriver.Dispose();\n            portalServer.Dispose();\n            samplesExtensionServer.Dispose();\n            hubsExtensionServer.Dispose();\n        }\n\n        private void ProvisionContact(string contactName, string subscriptionName, Portal portal)\n        {\n            // Open and find the Create Form\n            portal.StartBoard.FindSinglePartByTitle<ButtonPart>(\"New Contact\").Click();\n\n            var blade = portal.FindSingleBladeByTitle(\"Basic Information\");\n            var form = webDriver.WaitUntil(() => blade.FindElement<FormSection>(), \"Could not find the form.\");\n\n            // Fill a textbox field\n            string fieldName = \"contactName\";\n            var field = webDriver.WaitUntil(() => form.FindField<Textbox>(fieldName),\n\t\t\t\t\t\t\t\t\t\tstring.Format(\"Could not find the {0} textbox.\", fieldName));\n            field.Value = contactName + Keys.Tab;\n            webDriver.WaitUntil(() => field.IsEdited && field.IsValid,\n\t\t\t\t\t\t\t\tstring.Format(\"The {0} field did not pass validations.\", fieldName));\n\n            // Open a picker from a selector field and select an item\n            fieldName = \"subscriptionField\";\n            form.FindField<Selector>(fieldName).Click();\n\n            blade = portal.FindSingleBladeByTitle(\"Select Subscription\");\n\n            var grid = webDriver.WaitUntil(blade.FindElement<Grid>, \"Could not find the grid in the blade.\");\n            GridRow row = grid.SelectRow(subscriptionName);\n\n            PickerActionBar pickerActionBar = webDriver.WaitUntil(() => blade.FindElement<PickerActionBar>(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \"Could not find the picker action bar.\");\n            webDriver.WaitUntil(() => pickerActionBar.OkButton.IsEnabled,\n\t\t\t\t\t\t\t\t\"Expected the OK Button of the Picker Action Bar to be enabled after selecting an item in the picker list.\");\n            pickerActionBar.ClickOk();\n\n            // Click the Create button\n            blade = portal.FindSingleBladeByTitle(\"Basic Information\");\n\n            CreateActionBar createActionBar = webDriver.WaitUntil(() => blade.FindElement<CreateActionBar>(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \"Could not find the create action bar.\");\n            createActionBar.ClickOk();\n\n            // There should be an open blade with 'John Doe' as its title\n            portal.FindSingleBladeByTitle(contactName);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an InfoBox Control to the Blade Template (HTML)\nDESCRIPTION: This HTML replaces the anchor link with a control container, binding the 'pcControl:infoBox' Knockout binding. It demonstrates using a richer Azure controls library (e.g., InfoBox) in place of primitive HTML controls. The bound property must be exposed and instantiated in the ViewModel for the binding to function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>This is an example template blade that shows a link.</div>\n\n<div data-bind=\"pcControl:infoBox\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Command to Open a Blade (No Parameters) in PDL (XML)\nDESCRIPTION: Defines a command in PDL (`\\Client\\Commands\\OpenBladeCommand\\OpenBladeCommand.pdl`) with 'Kind=\"Blade\"', indicating it should open a portal blade. The 'BladeAction' element specifies the target blade ('NoParameterChildBlade') by name. This example shows opening a blade that does not require any input parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<Command Kind=\"Blade\"\n       Name=\"OpenBladeCommand\"\n       Text=\"{Resource openBladeCommandNone, Module=ClientResources}\"\n       ViewModel=\"{ViewModel Name=OpenBladeCommand, Module=./OpenBladeCommand/ViewModels/OpenBladeCommandViewModels}\">\n  <BladeAction Blade=\"NoParameterChildBlade\" />\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Defining WebsiteModel Interface in TypeScript\nDESCRIPTION: This interface defines the data model for a website with Knockout observables for id, name, and running status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-construction.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebsiteModel {\n    id: KnockoutObservable<number>;\n    name: KnockoutObservable<string>;\n    running: KnockoutObservable<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Portal Blade API Sample in TypeScript\nDESCRIPTION: A TypeScript class implementing various blade opening and interaction methods for Azure Portal extensions. Features include blade links, resource links, clickable links, and event handlers for different interaction patterns. Includes support for dynamic references and telemetry counting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Person } from \"DataModels/Person\";\nimport * as Di from \"Fx/DependencyInjection\";\nimport * as OptionsGroup from \"Fx/Controls/OptionsGroup\";\nimport * as TextBox from \"Fx/Controls/TextBox\";\nimport { BladeReferences, BladeLink, ResourceLink, ClickableLink, OnClickHandler } from \"Fx/Composition\";\nimport * as FxCompositionBlade from \"Fx/Composition/Pdl/Blade\";\nimport { ViewModels as ViewModelDefinitions } from \"_generated/ExtensionDefinition\";\nimport { DataContext } from \"../../NavigationArea\";\n\nimport AjaxMock from \"../../../../Mock/AjaxMock\";\n\n// import references to blades that are opened by these samples\nimport * as Resources from \"ClientResources\";\n\nimport Def = ViewModelDefinitions.V1$$Navigation.OpenBladeApiSamplesViewModel;\nimport BladeContainer = FxCompositionBlade.Container;\nimport Grid = MsPortalFx.ViewModels.Controls.Lists.Grid;\nimport QueryView = MsPortalFx.Data.QueryView;\n\n// Data type used in the grid sample\nexport { Person } from \"DataModels/Person\";\n\n// OBSOLETE API IMPORTS\nimport * as FxObsoleteHotSpot from \"Fx/Controls/HotSpot\";\nconst ObsoleteHotSpot: any = FxObsoleteHotSpot;\ntype ObsoleteHotSpotViewModel = any;\n\nconst incrementDynamicFxclickClickCount = (observable: KnockoutObservable<number>) => {\n    return () => {\n        observable(observable() + 1);\n    };\n};\n\n@Di.Class(\"viewModel\")\nexport class OpenBladeApiSamplesViewModel\n    extends MsPortalFx.ViewModels.Blade\n    implements Def.Contract {\n\n    private _container: BladeContainer;\n\n    public onOpenChildBladeLinkClick: OnClickHandler;\n\n    public readonly onOpenChildBladeLinkClickWithBladeLink: BladeLink;\n\n    public readonly onOpenChildBladeLinkClickWithDynamicBladeLink: BladeLink;\n\n    public readonly onOpenChildBladeLinkClickWithResourceLink: ResourceLink;\n\n    public readonly onOpenChildBladeLinkClickWithDynamicResourceLink: ResourceLink;\n\n    public readonly onLinkClickWithClickableLink: ClickableLink;\n\n    public readonly bladeRefPicker: OptionsGroup.Contract<any>;\n    public readonly resourceIdPicker: OptionsGroup.Contract<any>;\n    public readonly fxclickPicker: OptionsGroup.Contract<any>;\n\n    public readonly dynamicFxclickClickCount = ko.observable<number>(0);\n\n    public readonly bladeLinkClickCount = ko.observable<number>(0);\n\n    public readonly resourceLinkClickCount = ko.observable<number>(0);\n\n    public readonly clickableLinkClickCount = ko.observable<number>(0);\n\n    private readonly dynamicBladeRef = ko.observable(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n\n    private readonly dynamicResourceId = ko.observable(\"/subscriptions/sub123/resourceGroups/accounts/providers/Microsoft.test/accounts/Peter\");\n\n    public readonly dynamicFxclick: KnockoutObservable<OnClickHandler | BladeLink | ResourceLink | ClickableLink>;\n\n    public readonly dynamicFxclickText: KnockoutObservable<string>;\n\n    public readonly divTagFxclickText = Resources.divTagFxclickText;\n\n    public readonly aTagFxclickText = Resources.aTagFxclickText;\n\n    public onDivTagFxclickClick() {\n        console.log(`The 'DIV' tag callback fxclick has been accessed with href=\"${this.hrefValue()}\"`); \n    }\n\n    public onATagFxclickClick() {\n        console.log(`The 'A' tag callback fxclick has been accessed with href=\"${this.hrefValue()}\"`); \n    }\n\n    public readonly customHrefTextBox: TextBox.Contract;\n\n    public readonly hrefValue = ko.observable<string>();\n\n    private readonly _onCallbackFxclickClick: OnClickHandler;\n\n    private readonly _onBladeLinkFxclickLink: BladeLink;\n\n    private readonly _onResourceLinkFxclickLink: ResourceLink;\n\n    private readonly _onClickableLinkFxclickLink: ClickableLink;\n\n    public hotspot: ObsoleteHotSpotViewModel;\n\n    public grid: Grid.ViewModel<Person, Person>;\n\n    private _view: QueryView<Person, string>;\n\n    constructor(container: BladeContainer, dataContext: DataContext, _mock: AjaxMock) {\n        super();\n        this.title(Resources.openBladeAPITitle);\n        this.subtitle(Resources.navigationSamplesTitle);\n\n        this._container = container;\n\n        this.bladeRefPicker = OptionsGroup.create(this._container, {\n            label: Resources.bladeRefPickerLabel,\n            items: [\n                {\n                    text: Resources.validChildBlade,\n                    value: Resources.validChildBlade,\n                },\n                {\n                    text: Resources.validBlade,\n                    value: Resources.validBlade,\n                },\n                {\n                    text: Resources.nullBladeRefLabel,\n                    value: Resources.nullBladeRefLabel,\n                },\n            ],\n        });\n\n        this.resourceIdPicker = OptionsGroup.create(this._container, {\n            label: Resources.resourceIdPickerLabel,\n            items: [\n                {\n                    text: Resources.validResource,\n                    value: Resources.validResource,\n                },\n                {\n                    text: Resources.nullResourceIdLabel,\n                    value: Resources.nullResourceIdLabel,\n                },\n            ],\n        });\n\n        this.fxclickPicker = OptionsGroup.create(this._container, {\n            label: Resources.fxclickPickerLabel,\n            items: [\n                {\n                    text: Resources.callback,\n                    value: Resources.callback,\n                },\n                {\n                    text: Resources.bladeLink,\n                    value: Resources.bladeLink,\n                },\n                {\n                    text: Resources.resourceLink,\n                    value: Resources.resourceLink,\n                },\n                {\n                    text: Resources.clickableLink,\n                    value: Resources.clickableLink,\n                },\n            ],\n        });\n\n        this._onCallbackFxclickClick = () => {\n            void this._container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Localization String Usage\nDESCRIPTION: Example of using localized resource strings in JSON files within an Azure Gallery Package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"property1\": \"ms-resource:key1\",\n\t\"property2\": \"ms-resource:key2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph Applications (Extended Result) - JSON\nDESCRIPTION: This snippet provides a second example of a JSON response from the Microsoft Graph API, also filtered for applications with display names starting with 'a'. It extends the previous example by including an additional application entry, demonstrating handling of response arrays of varying lengths. The structure is identical, emphasizing pagination and the listing of application metadata.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.GraphApiControl-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"@odata.context\\\": \\\"https://graph.microsoft.com/beta/$metadata#applications(displayName,appId)\\\",\\n    \\\"@odata.nextLink\\\": \\\"https://graph.microsoft.com/beta/myorganization/applications?filter=startsWith(displayName%2c+%27a%27)&select=displayName%2cappId&$skiptoken=RFNwdAoAAQAAAAAAAAAAFAAAAIp1HJXa4DBEtkF0BYnTinsBAAAAAAAAAAAAAAAAAAAXMS4yLjg0MC4xMTM1NTYuMS40LjIzMzEGAAAAAAABTw8AYx5Ec0iWsOnZnC1p5QEaAAAAAQQAAAA\\\",\\n    \\\"value\\\": [\\n        {\\n            \\\"displayName\\\": \\\"astf4\\\",\\n            \\\"appId\\\": \\\"512628f9-3682-4a1d-43242a7a8-f575f\\\"\\n        },\\n        {\\n            \\\"displayName\\\": \\\"Add an application my organization is developing\\\",\\n            \\\"appId\\\": \\\"3a4a2-8288-4d23437f-9bde-7f8864\\\"\\n        },\\n        {\\n            \\\"displayName\\\": \\\"AwasaConfig\\\",\\n            \\\"appId\\\": \\\"30125bcb-9b20-4c30-a0bb-95177d\\\"\\n        },\\n        {\\n            \\\"displayName\\\": \\\"AMPAlert\\\",\\n            \\\"appId\\\": \\\"3fd7-741e-42f7-91b0-e5f0645354\\\"\\n        }\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks Icon in SVG\nDESCRIPTION: SVG markup defining the 'Tasks' icon for the Azure portal. It creates three horizontal lines representing a list of tasks.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_173\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M47.794,10.559H13.919c-1.218,0-2.206,0.988-2.206,2.206s0.988,2.206,2.206,2.206h33.875\n\tc1.218,0,2.206-0.988,2.206-2.206S49.012,10.559,47.794,10.559z\"/>\n<path fill=\"#59B4D9\" d=\"M47.794,23.735H13.919c-1.218,0-2.206,0.988-2.206,2.206s0.988,2.206,2.206,2.206h33.875\n\tc1.218,0,2.206-0.988,2.206-2.206S49.012,23.735,47.794,23.735z\"/>\n<path fill=\"#59B4D9\" d=\"M47.794,36.912H13.919c-1.218,0-2.206,0.988-2.206,2.206c0,1.218,0.988,2.206,2.206,2.206h33.875\n\n```\n\n----------------------------------------\n\nTITLE: Defining Log Streaming SVG Icon for Azure Portal\nDESCRIPTION: SVG markup defining the Log Streaming icon used in the Azure portal. The icon features an orange background with white signal-like shapes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_56\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-10.5 -9.5 50 50\" enable-background=\"new -10.5 -9.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#FF8C00\" d=\"M34.5,35.865h2V-9.5H-1.833H-4.5c-1.293,0.167-3.992,3.3-3.992,3.751c0,0.187,0.059,43.882,0.059,43.882\n\tc0,1.307,1.06,2.367,2.368,2.367H31.5v-0.729L34.5,35.865z\"/>\n<path fill=\"#E5E5E5\" d=\"M-2.718-7.5c-1.105,0-1.58,0.185-2.507,1c-2.275,2,0.39,2,1.495,2H31.5v44.271l3-3.906V-7.5H-2.718z\"/>\n<polygon opacity=\"0.5\" fill=\"#A0A1A2\" enable-background=\"new    \" points=\"31.5,39.771 34.5,35.865 34.5,-7.5 31.5,-4.5 \"/>\n<g>\n\t<path fill=\"#FFFFFF\" d=\"M7.048,17.125c0-1.332,0.533-2.542,1.396-3.428L6.548,11.8c-1.349,1.373-2.183,3.253-2.183,5.325\n\t\tc0,2.096,0.853,3.996,2.229,5.373l1.896-1.896C7.6,19.71,7.048,18.481,7.048,17.125z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M16.886,17.125c0,1.356-0.552,2.586-1.442,3.477l1.896,1.896c1.377-1.377,2.229-3.277,2.229-5.373\n\t\tc0-2.072-0.834-3.952-2.183-5.325l-1.896,1.896C16.353,14.583,16.886,15.792,16.886,17.125z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M21.134,17.125c0,2.527-1.028,4.819-2.688,6.479l1.896,1.896c2.146-2.146,3.475-5.108,3.475-8.375\n\t\tc0-3.243-1.311-6.185-3.429-8.327l-1.896,1.896C20.125,12.35,21.134,14.621,21.134,17.125z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M2.8,17.125c0-2.503,1.01-4.775,2.642-6.431L3.546,8.797c-2.118,2.142-3.429,5.084-3.429,8.327\n\t\tc0,3.267,1.329,6.23,3.475,8.375l1.896-1.896C3.828,21.944,2.8,19.652,2.8,17.125z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M14.225,14.961c-0.57-0.594-1.37-0.966-2.258-0.966c-0.888,0-1.688,0.372-2.258,0.966\n\t\tc-0.539,0.562-0.872,1.324-0.872,2.164c0,0.864,0.35,1.647,0.917,2.213c0.566,0.567,1.349,0.917,2.213,0.917\n\t\tc0.864,0,1.647-0.35,2.213-0.917c0.567-0.566,0.917-1.349,0.917-2.213C15.097,16.284,14.764,15.523,14.225,14.961z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Checks in ServiceGroupRootReplacements.json\nDESCRIPTION: This JSON snippet demonstrates how to configure health checks for Azure Portal extensions in the ServiceGroupRootReplacements.json file. It includes settings for both Production and Mooncake environments, specifying different health checks for SDP and Hotfix deployments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Production\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"MDMHealthResources\":\n        {\n            \"SDP\" : [\n                \"EHSExtension\" ,\n                \"Extension_90thLoadTime_LessThan4S_PT30M\"\n            ]\n        }\n    },\n    \"Mooncake\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.cn/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"HotfixDeployment\": \"true\",\n        \"HotfixMonitorDurations\" : [ \"PT30M\", \"P1D\" ],\n        \"MDMHealthResources\":\n        {\n            \"Hotfix\": [\n                \"Blade_99thLoadTime_LessThan4S_PT30M\" ,\n                \"ExtensionLoad_95PercentSuccessRate_PT30M\"\n            ],\n            \"SDP\" : [\n                \"Extension_90thLoadTime_LessThan4S_PT30M\" ,\n                \"Blade_95thLoadTime_LessThan4S_PT30M\",\n                \"BladeLoad_90PercentSuccessRate_PT30M\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Group Selection Modes Enum in TypeScript\nDESCRIPTION: Defines the `Mode` constant enum in TypeScript, specifying the possible states for the ResourceGroupSelector: `UseExisting` (value 0) and `CreateNew` (value 1). This enum is referred to as `SelectedMode` in the surrounding text and determines whether the user intends to use an existing resource group or create a new one.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceGroupSelector-output.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n            /**\n             * The modes possible for the dropdown.\n             */\n            const enum Mode {\n                UseExisting = 0,\n                CreateNew = 1,\n            }\n```\n\n----------------------------------------\n\nTITLE: Querying Blade Failures Summary in Kusto\nDESCRIPTION: Kusto query to get a summary of blade failures within a specified time range and extension. Returns details about error occurrences, affected users/sessions, and error samples.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-reliability.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nGetBladeFailuresSummary(ago(1d), now())\n| where extension contains \"Microsoft_Azure_Compute\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview with MonitoringViewType Tab in JSON\nDESCRIPTION: This snippet demonstrates how to set up a Resource Overview (GetStarted) view with a tab for the MonitoringViewType. It includes the basic structure for the GetStarted view with placeholders for tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataBrowse with Transforms and Inputs\nDESCRIPTION: Example showing how to use transforms and inputs in DataBrowse to process and format data before display. Demonstrates JMES path query usage for data transformation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-DataBrowseTab.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"testing\",\n    \"data\": {\n        \"transforms\": \"[concat('[', '@.{caching:caching, createOption: createOption, name: name, osType:osType, managedDisk:managedDisk.to_string(@)}', ']')]\",\n        \"input\": \"[resources().properties.storageProfile.osDisk]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Blade HTML Template\nDESCRIPTION: HTML template for the Frame Blade's iframe content, including basic structure and required script references for frame communication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Frame Blade</title>\n    <meta charset=\"utf-8\" />\n</head>\n\n<body>\n    <h1 class=\"fxs-frame-header\" style=\"margin: 0;\">Frame Blade</h1>\n    <div class=\"fxs-frame-token\"></div>\n    <div class=\"fxs-frame-content\"></div>\n    <div class=\"fxs-frame-documentation-link\">More information and best practices for FrameBlades can be found in our <a\n            href=\"https://github.com/Azure/portaldocs/blob/master/portal-sdk/generated/top-blades-frameblade.md\"\n            target=\"_blank\">documentation\n            page</a>.</div>\n    <button class=\"fxs-frame-button\" type=\"button\">Open Blade</button>\n    <!-- Define frameSignature and allowed origin list -->\n    <script>\n        var frameSignature = \"FxFrameBlade\";\n        var allowedParentFrameAuthorities = [\"df.onecloud.azure-test.net\", \"portal.azure.com\"];\n    </script>\n    <script src=\"../Scripts/IFrameSample/FramePage.js\"></script>\n    <script src=\"../Scripts/IFrameSample/IdleBehavior.js\"></script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering a Temporary Test Extension in Azure Portal\nDESCRIPTION: Registers a custom extension in the Azure Portal for the current session only. This method is useful for temporary testing without persisting the extension registration across browser sessions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sideloading.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// use this command if the extension should be registered \n//   only for the current Portal load\nMsPortalImpl.Extension.registerTestExtension({\nname: \"<extensionName>\",\nuri: \"https://<endpoint>:<portNumber>\" }, \n<temporary>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Formatting with Pre Tags in Azure Portal\nDESCRIPTION: Shows how to format code blocks within the Azure Portal using the msportalfx-code class with pre and code tags. This creates a styled code block with appropriate formatting for displaying code snippets.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-utility-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"msportalfx-code\"><code>// this is code</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code defines an image icon with a frame and a stylized cloud overlay. The icon uses multiple colors to represent different elements of an image or photo.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_43\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect y=\"5\" fill=\"#7A7A7A\" width=\"50\" height=\"39\"/>\n<rect x=\"2.2\" y=\"7.2\" fill=\"#59B4D9\" width=\"45.7\" height=\"34.8\"/>\n<rect x=\"2.2\" y=\"7.2\" fill=\"#59B4D9\" width=\"45.7\" height=\"34.8\"/>\n<path fill=\"#B8D432\" d=\"M47.8,27.3L44.5,24c-1.3-1.3-3.4-1.3-4.8,0L21.9,42h26V27.3z\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M47.8,27.3L44.5,24c-1.3-1.3-3.4-1.3-4.8,0L21.9,42h26V27.3z\"/>\n<path fill=\"#7FBA00\" d=\"M43.1,42l-14-14c-1-1-2.7-1-3.7,0l-14,14H43.1z\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M43.1,42l-14-14c-1-1-2.7-1-3.7,0l-14,14H43.1z\"/>\n<path opacity=\"0.63\" fill=\"#FFFFFF\" d=\"M27.6,22.3c0-1.4-1.1-2.5-2.4-2.5c-0.1,0-0.2,0-0.3,0c0.1-0.6,0.2-1.1,0.2-1.7\n\tc0-3.6-2.9-6.6-6.5-6.6c-2.9,0-5.3,1.9-6.2,4.5c-0.5-0.2-0.9-0.3-1.5-0.3c-2.5,0-4.4,2-4.4,4.5c0,2.5,2,4.5,4.4,4.5c0,0,0,0,0,0v0\n\th14.4l0,0C26.6,24.6,27.6,23.6,27.6,22.3\"/>\n```\n\n----------------------------------------\n\nTITLE: Parameter Collector Callback for Receiving Results\nDESCRIPTION: The `receiveResult` callback on a Parameter Collector is invoked when the launched Parameter Provider blade is dismissed (e.g., by clicking the action bar). It receives the data output from the provider, allowing the collector component to process the results.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveResult\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Mapping in Web.config for Azure Portal Extension\nDESCRIPTION: This XML snippet demonstrates how to add a URL mapping in the web.config file to redirect the root application path to the home page controller. This is needed when changing the extension registration URI for fast extension load.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-fast-extension-load.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<system.web>\n    <urlMappings enabled=\"true\">\n        <add url=\"~/\" mappedUrl=\"~/Home/Index\"/>\n    </urlMappings>\n</system.web>\n```\n\n----------------------------------------\n\nTITLE: Initializing HotSpot for Blade Opening in TypeScript\nDESCRIPTION: Creates a hotspot UI element that opens a child blade when clicked. This private method sets up an ObsoleteHotSpot.ViewModel with a click handler that opens a specific blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _initializeHotSpotSample(container: BladeContainer) {\n    this.hotspot = new ObsoleteHotSpot.ViewModel(container, {\n        onClick: () => {\n            void container.openBlade(BladeReferences.forBlade(\"OpenBladeApiChildBlade\").createReference());\n        },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing CDN PDE in Extension Project File (csproj)\nDESCRIPTION: This XML snippet demonstrates how to add an `ExtensionReference` to the `Microsoft_Azure_Cdn.pde` file within the extension's `.csproj` file. This reference is necessary to make the CDN extension's components, including the integration blade, available to the hosting extension. The path uses a variable `$(PkgMicrosoft_Portal_Extensions_Cdn)` typically resolved by the build process from the NuGet package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-cdn.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionReference Include=\"$(PkgMicrosoft_Portal_Extensions_Cdn)\\content\\Client\\_extensions\\Cdn\\Microsoft_Azure_Cdn.pde\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring DeleteCommand for Resource Deletion in Azure Portal\nDESCRIPTION: JSON configuration for a DeleteCommand used in Azure Portal View Commands. It specifies the command ID, display text, icon, and confirmation dialog settings including dependent resources that may be affected by the deletion operation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewDeleteCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DeleteCommand\",\n    \"id\": \"deleteCommand\",\n    \"displayName\": {\n        \"property\": \"delete\"\n    },\n    \"icon\": \"MsPortalFx.Base.Images.Delete\",\n    \"confirmation\": {\n        \"title\": {\n        \"property\": \"deleteResourceTitle\"\n        },\n        \"message\": {\n        \"property\": \"deleteResourceMessage\"\n        },\n        \"dependentResources\": [\n            {\n                \"apiVersion\": \"2021-02-01-preview\",\n                \"resourceType\": \"Microsoft.Network/networkSecurityPerimeters/profiles/accessRules\",\n                \"icon\": {\n                    \"file\": \"../../Content/SVG/PerimeterAccessRules.svg\"\n                }\n            }\n        ]\n    },\n    \"definition\": {\n        \"apiVersion\": \"2014-04-01\"\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitdown Content Structure\nDESCRIPTION: Gitdown directive to configure table of contents with maximum heading level of 2\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"gitdown\": \"contents\", \"maxLevel\": 2\n```\n\n----------------------------------------\n\nTITLE: Defining Video Reference Properties Schema in Azure Portal\nDESCRIPTION: Schema documentation defining required and optional properties for video references in Azure Portal tutorials. Includes 'src' as a required property and 'fx.feature' as an optional property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-TutorialsTab-videoReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|src|True|\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Gallery Package using AzureGalleryUtility\nDESCRIPTION: Command to validate and build a Gallery Item Package using the AzureGalleryUtility tool. Requires path to manifest.json and output directory.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_8\n\nLANGUAGE: bat\nCODE:\n```\n> Microsoft.Azure.Gallery.AzureGalleryUtility.exe package -m [path to manifest.json] -o [output directory]\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Blade Pinning in PDL\nDESCRIPTION: PDL configuration for enabling ResourcePart pinning in legacy blade implementations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade Name=\"AuthorBlade\" .. Pinnable=\"True\".. >\n   ..\n    <PinnedResourcePart />\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Icon in SVG\nDESCRIPTION: SVG markup defining the 'Tag' icon for the Azure portal. It creates a tag shape with a hole for attachment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_171\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#804998\" d=\"M42.3,0.3L28.6,0.8L0,29.4l20.3,20.3l28.6-28.6L50,8L42.3,0.3z M43.4,10.9c-1.1,1.1-2.9,1.1-4,0\n\tc-1.1-1.1-1.1-2.9,0-4c1.1-1.1,2.9-1.1,4,0C44.5,8,44.5,9.8,43.4,10.9z\"/>\n<polygon opacity=\"0.1\" fill=\"#FFFFFF\" points=\"0,29.4 20.3,49.7 24.9,45.2 24.9,4.5 \"/>\n<path opacity=\"0.3\" fill=\"#1E1E1E\" d=\"M45.1,5.2c-2-2-5.3-2-7.3,0c-2,2-2,5.3,0,7.3c2,2,5.3,2,7.3,0C47.1,10.5,47.1,7.2,45.1,5.2z\n\tM43.4,10.9c-1.1,1.1-2.9,1.1-4,0c-1.1-1.1-1.1-2.9,0-4c1.1-1.1,2.9-1.1,4,0C44.5,8,44.5,9.8,43.4,10.9z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing HostedInMenuBlade Interface\nDESCRIPTION: Example of implementing the HostedInMenuBlade interface to customize menu titles and subtitles in resource blades.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyResourceBlade\n    extends MsPortalFx.ViewModels.Blade\n    implements MsPortalFx.ViewModels.HostedInMenuBlade {\n\n    public menuContent = {\n        title: ko.observable<string>(),\n        subtitle: ko.observable<string>(),\n    };\n\n    public onInputsSet(inputs: any): Promise<any> {\n        return someAsyncCall().then(data => {\n            this.menuContent.title(data.title);\n            this.menuContent.subtitle(data.subtitle);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automating PDE Setup with Install.ps1 (PowerShell)\nDESCRIPTION: This PowerShell script (`Install.ps1`) is designed to be included in the PDE NuGet package and executed upon installation in a Visual Studio project. It automates the configuration of the consumed PDE by setting its Build Action (`ItemType`) to `ExtensionReference` in the consuming project file. It also opens a specified documentation URL (ideally an `aka.ms` link for flexibility) using the DTE automation object to guide the user. The script requires customization for the specific folder name, PDE file name, and documentation URL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-publish.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam($installPath, $toolsPath, $package, $project)\n\n# set the build action for the pde to ExtensionResource\n$item = $project.ProjectItems.Item(\"Client\").ProjectItems.Item(\"_extensions\").ProjectItems.Item(\"Your Folder Name that nuproj puts the pde in\").ProjectItems.Item(\"SomeExtension.pde\") \n$item.Properties.Item(\"ItemType\").Value = \"ExtensionReference\"\n# open the documentation for consuming exposed content from the pde. use an aka.ms link so you can change out the target content without having to republish\n$DTE.ItemOperations.Navigate(\"https://aka.ms/portalfx/somepde\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Create Information\nDESCRIPTION: This query provides additional details for create operations, including user and session IDs. It returns multiple rows per create operation (identified by telemetryId) with detailed JSON data for debugging.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateDetailsByDateRange(ago(1d),now())\n```\n\n----------------------------------------\n\nTITLE: Defining view-tutorialsViewType Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the view-tutorialsViewType object using a markdown table. It specifies the name, required status, and description for each property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the Tutorials view\n|tilesGroup|False|<br>1) <code>tilesGroup.displayName</code> defines the section header for the tiles section(see UI sample for an example). <br>2) <code>tilesGroup.items</code>: See [here](dx-getstarted-tutorials-gettingStartedMSTileReference.md) for <code>tilesGroup.items</code> .\n|videosGroup|False|<br>1) <code>videosGroup.displayName</code> defines the section header for the videos group section(see UI sample for an example). <br>2) <code>videosGroup.items</code>: See [here](dx-getstarted-tutorials-gettingStartedVideoCardReference.md) for <code>videosGroup.items</code> .\n|linksGroup|False|<br>1) <code>linksGroup.displayName</code> defines the section header for the links group section(see UI sample for an example). <br>2) <code>linksGroup.items</code>: See [here](dx-getstarted-tutorials-gettingStartedLinksReference.md) for <code>linksGroup.items</code> .\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Calculating Weighted Duration for Alert Triggering in Azure Portal\nDESCRIPTION: This snippet shows the formula used to calculate the weighted duration from the most recent 6 sample points of percentile load duration. This weighted duration is used to determine if an alert should be triggered.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nWeighted duration = 8/24 * {most recent percentile load duration} + 6/24 * {2nd most recent percentile load duration} + 4/24 * {3rd…} + 3/24 * {4th …} + 2/24 * {5th …} + 1/24 * {6th …}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Attachment Icon\nDESCRIPTION: Paperclip-style attachment icon for file attachments in Azure Portal. The SVG uses a simple path to create a paperclip shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_105\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M12,22c-3.196,0-6-2.57-6-5.5v-10C6,4.019,8.019,2,10.5,2S15,4.019,15,6.5V15c0,1.654-1.346,3-3,3s-3-1.346-3-3V8h2v7\n\tc0,0.552,0.449,1,1,1s1-0.448,1-1V6.5C13,5.122,11.878,4,10.5,4S8,5.122,8,6.5v10c0,1.971,2.15,3.5,4,3.5s4-1.529,4-3.5V8h2v8.5\n\tC18,19.43,15.196,22,12,22z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components for Provisioning Blade\nDESCRIPTION: Import statements for the necessary modules to work with blade references and marketplace integration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\nimport { BladeReferences, BladeLink } from \"Fx/Composition\";\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\nimport { DataContext } from \"./CreateArea\";\n```\n\n----------------------------------------\n\nTITLE: Importing Localized Strings in TypeScript\nDESCRIPTION: Shows how to import and use localized string resources from a resx file in TypeScript code.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ClientResources from \"ClientResources\";\n...\nthis.subtitle(ClientResources.hubsLensTitle);\n```\n\n----------------------------------------\n\nTITLE: Including PortalFx General Testing Template using GitDown\nDESCRIPTION: This configuration line uses the GitDown `include-file` directive to embed the content of the `portalfx-test.md` Markdown file from the parent `templates` directory. This included file likely contains general information, guidelines, or templates related to testing within the Azure Portal Framework (PortalFx).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-test.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"gitdown\": \"include-file\", \"file\": \"../templates/portalfx-test.md\"\n```\n\n----------------------------------------\n\nTITLE: Querying Create Flow Regression Overrides in Kusto\nDESCRIPTION: This query retrieves the current bar settings for create flow regression monitoring, including extension names, bar thresholds, and override settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: kusto\nCODE:\n```\n_CreateFlowRegressionOverrides()\n```\n\n----------------------------------------\n\nTITLE: Opening CDN Integration Blade Dynamically in TypeScript\nDESCRIPTION: This TypeScript snippet shows an alternative method to open the `CdnIntegrationBlade` using a `DynamicBladeSelection`. This approach specifies the target extension and blade names as strings and passes parameters in the `detailBladeInputs` object. It avoids the need for the CDN NuGet package but lacks the type safety of the menu item approach and is generally discouraged.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-cdn.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis._container.selectable.selectedValue(<MsPortalFx.ViewModels.DynamicBladeSelection>{\n        extension: \"Microsoft_Azure_Cdn\",\n        detailBlade: \"CdnIntegrationBlade\",\n        detailBladeInputs: {\n            resourceId: this.resourceUri(),\n            location: this._siteView.item().Location(),\n            originHostname: this._siteView.item().DefaultHostName()\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Application Insights Metrics Tile in Markdown\nDESCRIPTION: Outlines the structure for an Application Insights metrics query tile. It includes properties for specifying the query kind, a list of metrics to display, and optional parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-queryTileData.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Option 2\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|The Metrics data source of the query tile. Enum permitting the value: \"app-insights\"\n|metrics|True|The list of metrics to display. See [here](dx-view-dashboardViewType-metricsItem.md) for more information.\n|usedParameters|False|Parameter names that are applied to the tile. It can be used within the query.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Recommendations Tab Configuration in Azure Portal\nDESCRIPTION: Simple JSON configuration for adding a Recommendations tab to a resource overview. Defines the basic structure needed to implement a Recommendations tab.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Recommendations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommendations Tab in Azure Portal\nDESCRIPTION: JSON configuration to add a Recommendations tab to the resource overview page. The tab displays active Azure Advisor recommendations for the resource. Optional 'default' property can be set to make this the default tab.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-RecommendationsTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Recommendations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Resource Registration in C#\nDESCRIPTION: Code snippet showing how to register embedded JavaScript resources in an Azure Portal extension assembly using the AllowEmbeddedContent attribute.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: AllowEmbeddedContent(\"<YourExtensionNamespace>\")]\n```\n\n----------------------------------------\n\nTITLE: Creating JourneyHub Icon with Colored Rectangles in SVG\nDESCRIPTION: Definition of the JourneyHub icon using colored rectangles. The SVG contains three main vertical colored rectangles with additional overlay rectangles at the top with different opacity and colors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_48\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"2\" fill=\"#FCD116\" width=\"14\" height=\"50\"/>\n<rect x=\"18\" fill=\"#B8D432\" width=\"14\" height=\"50\"/>\n<rect x=\"34\" fill=\"#59B4D9\" width=\"14\" height=\"50\"/>\n<rect x=\"2\" y=\"0\" opacity=\"0.6\" fill=\"#FF8C00\" enable-background=\"new    \" width=\"14\" height=\"8.5\"/>\n<rect x=\"18\" y=\"0\" fill=\"#7FBA00\" width=\"14\" height=\"8.5\"/>\n<rect x=\"34\" y=\"0\" fill=\"#3999C6\" width=\"14\" height=\"8.5\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining MS Tile Properties in Markdown\nDESCRIPTION: This snippet outlines the structure of an MS Tile object used in Azure Portal's getting started tutorials. It specifies required and optional properties such as title, icon, subtitle, description, action, and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-tutorials-gettingStartedMSTileReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the tile\n|icon|True|Specifies the icon for the tile. See [here](dx-iconReference.md) on how to define an icon.\n|subtitle|True|Subtitle for the tile\n|description|True|Description for the tile\n|action|True|Specifies the action to be taken on clicking the tile. See [here](dx-getstarted-gettingStartedActionReference.md) for more.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining Search Icon in SVG\nDESCRIPTION: SVG markup defining the 'Search' icon for the Azure portal. It creates a magnifying glass shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_164\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M4.2,22c-0.6,0-1.1-0.2-1.5-0.6C2.2,21,2,20.4,2,19.9c0-0.6,0.2-1.1,0.6-1.5l5.2-5.3C7,11.4,6.7,9.5,7.2,7.7\n\tC8,4.4,11,2,14.5,2c0.6,0,1.2,0.1,1.8,0.2c2,0.5,3.6,1.7,4.6,3.4c1,1.7,1.3,3.7,0.9,5.7c-0.8,3.4-3.8,5.7-7.3,5.7\n\tc-0.6,0-1.2-0.1-1.8-0.2c-0.6-0.2-1.2-0.4-1.8-0.7l-5.2,5.2C5.3,21.8,4.7,22,4.2,22 M14.5,4.8c-2.2,0-4,1.5-4.5,3.6\n\tc-0.3,1.3-0.1,2.6,0.7,3.7c0.3,0.5,0.7,0.9,1.2,1.2c0.5,0.3,1,0.6,1.5,0.7c0.4,0.1,0.7,0.1,1.1,0.1c2.2,0,4-1.5,4.5-3.6\n\tc0.3-1.2,0.1-2.5-0.5-3.5C17.8,6,16.8,5.3,15.6,5C15.2,4.9,14.8,4.8,14.5,4.8\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Resource Linked SVG Icon Definition\nDESCRIPTION: SVG path definitions for a linked resource icon using multiple paths and opacity effects. Includes white fill paths and colored elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_71\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M25.001,50c-1.232,0-2.392-0.48-3.261-1.352L1.351,28.26C0.492,27.401,0,26.214,0,24.999\n\tc0-1.214,0.492-2.402,1.351-3.26L21.74,1.351c0.871-0.872,2.029-1.352,3.261-1.352c1.231,0,2.39,0.48,3.261,1.352l20.386,20.388\n\tC49.521,22.607,50,23.766,50,24.999c0,1.233-0.479,2.392-1.353,3.263L28.262,48.648C27.392,49.52,26.232,50,25.001,50\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: HTML Error States Table Structure\nDESCRIPTION: HTML table structure defining various Azure Portal extension error states including FirstResponseNotReceived, HomePageTimedOut, ManifestNotReceived, InvalidExtensionName, InvalidManifest, InvalidDefinition, FailedToInitialize, TooManyRefreshes, TooManyBootGets, TimedOut, and MaxRetryAttemptsExceeded.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-reliability.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    <tr>\n        <th>Error State</th>\n        <th>Definition</th>\n        <th>Action items</th>\n    </tr>\n    <tr>\n        <td>FirstResponseNotReceived</td>\n        <td>This error state means that the shell loaded the extension URL obtained from the config into an IFrame, however there wasn't any response from the extension</td>\n        <td>...</td>\n    </tr>\n    <!-- Additional rows omitted for brevity -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Page Versioned Extension URL - Plaintext\nDESCRIPTION: This snippet demonstrates the URL format used when loading an Azure portal extension with page versioning enabled. The 'pageVersion' query parameter uniquely identifies the build of an extension, allowing the server and browser to coordinate caching. Changing the 'pageVersion' value with each build ensures proper cache invalidation when the extension is updated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-homepage-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://YourExtension.contoso.com/\\n    ?pageVersion=5.0.202.18637347.150928-1117\\n    &l=en.en-us\\n    &trustedAuthority=portal.azure.com\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Clock in Azure Portal\nDESCRIPTION: An SVG icon representing a clock. Used in the Azure Portal UI to represent time-related concepts or operations that involve scheduling or timing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_115\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<path d=\"M8,0C3.582,0,0,3.582,0,8s3.582,8,8,8s8-3.582,8-8S12.418,0,8,0z M8,13.5c-3.038,0-5.5-2.462-5.5-5.5\n\tS4.962,2.5,8,2.5s5.5,2.462,5.5,5.5S11.038,13.5,8,13.5z\"/>\n<rect x=\"7\" y=\"3\" width=\"1\" height=\"5\"/>\n<rect x=\"7\" y=\"8\" width=\"5\" height=\"1\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Targeted Dialog with Position Hint\nDESCRIPTION: Example of implementing a dialog targeted at specific element with positioning hints.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openDialog({\n    telemetryName: \"SimpleDialogWithTargetAndPositionHint\",\n    title: ClientResources.Dialog.SimpleDialog.title,\n    content: ClientResources.Dialog.SimpleDialog.message,\n    positionHint: DialogPosition.RightTopEdge,\n    target: \".ext-target-simple\",\n    buttons: DialogButtons.OK,\n    onClosed: () => {\n        // this callback is invoked when the dialog is closed\n        // result.button may be inspected to see which button was clicked.\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: IFrame Message Handling\nDESCRIPTION: XML/JavaScript implementation for message handling within the IFrame, including theme changes and authentication responses.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\nwindow.addEventListener(\"message\", receiveMessage, false);\n```\n\nLANGUAGE: xml\nCODE:\n```\nfunction receiveMessage(event) {\n    if (!event.data || event.data[\"signature\"] !== \"FxAppBlade\") {\n        return;\n    }\n    var data = event.data[\"data\"];\n    var kind = event.data[\"kind\"];\n\n    if (!data) {\n        return;\n    }\n\n    var postMessageContainer = document.getElementById(\"post-message-container\");\n    var divElement = document.getElementById(kind);\n    if (!divElement) {\n        return;\n    }\n    var message;\n\n    switch (kind) {\n        case \"getAuthTokenResponse\":\n            message = data;\n            divElement.style.background = \"yellow\";\n            break;\n        case \"favoriteAnimal\":\n            message = \"My favorite animal is: \" + data;\n            divElement.style.background = \"pink\";\n            break;\n        case \"theme\":\n            message = \"The current theme is: \" + data;\n            divElement.style.background = \"lightblue\";\n            break;\n    }\n\n    divElement.innerText = message;\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\nif (window.parent !== window) {\n    window.parent.postMessage({\n        signature: \"FxAppBlade\",\n        kind: \"ready\"\n    }, shellSrc);\n\n    window.parent.postMessage({\n        signature: \"FxAppBlade\",\n        kind: \"getAuthToken\"\n    }, shellSrc);\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy PDL Blade Icon Setting\nDESCRIPTION: Example showing how icons were set in PDL-based blades using the icon API.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.icon(MsPortalFx.Base.Images.Logos.MicrosoftSquares());  // For instance\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Form Create Experience in Azure Portal\nDESCRIPTION: Sample Declarative Form JSON configuration for creating a full screen resource creation experience. Defines the form structure with basic fields, tags, and deployment settings for ResourceGroup scope.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cuid.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative path to dx.schema.json>\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"title\": \"Test Form View\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Name\",\n                            \"defaultValue\": \"\",\n                            \"constraints\": {\n                                \"required\": true\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"tags\",\n                    \"label\": \"Tags\",\n                    \"elements\": [\n                        {\n                            \"name\": \"tagsControl\",\n                            \"type\": \"Microsoft.Common.TagsByResource\",\n                            \"resources\": [\n                                \"Providers.Test/statefulIbizaEngines\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"deployment\": {\n                \"kind\": \"ResourceGroup\",\n                \"resourceGroupId\": \"[steps('basics').resourceScope.resourceGroup.id]\",\n                \"parameters\": {\n                    \"location\": \"[steps('basics').resourceScope.location.name]\",\n                    \"name\": \"[steps('basics').name]\",\n                    \"tagsByResource\": \"[steps('tags').tagsControl]\"\n                },\n                \"template\": {\n                    \"file\": \"<ARM deployment template relative path>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TypeScript Compiler Version\nDESCRIPTION: This command checks the installed version of the TypeScript compiler (`tsc`). It's used to verify that the correct version, as recommended by the documentation, is being used to avoid compilation errors, such as those involving `node.d.ts`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ntsc --version\n```\n\n----------------------------------------\n\nTITLE: Configuring RefreshCommand for Azure Command Bar (JSON)\nDESCRIPTION: Defines a RefreshCommand object to allow users to refresh the blade or UI view of a resource in the Azure portal. The command requires properties such as 'id', 'displayName', and 'icon', and it is referenced as an actionable item in the command bar. Inputs are static property values; outputs trigger a refresh action for the associated blade. No additional nested properties or dependencies are needed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"RefreshCommand\",\n        \"id\": \"refreshCommandId\",\n        \"displayName\": \"refresh\",\n        \"icon\": \"MsPortalFx.Base.Images.Refresh\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Cloud Shell Form Kind Enum Values\nDESCRIPTION: Defines the allowed values for Cloud Shell form types in Azure Portal. The enum restricts values to either 'bash' or 'powershell' shell types.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-formCloudShell-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- bash\n- powershell\n```\n\n----------------------------------------\n\nTITLE: Defining SSL Custom Domains Icon SVG\nDESCRIPTION: SVG vector graphic defining the SSL Custom Domains icon with green shield and lock design\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_80\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M38.185,5.96L38.185,5.96C27.169,4.745,25.326,0,25.326,0S22.847,6.242,7,6.242v25.611 c0,3.097,1.721,5.997,4.104,8.532l0,0c5.402,5.748,14.223,9.616,14.223,9.616s18.327-8.029,18.327-18.149V6.242 C41.616,6.242,39.803,6.139,38.185,5.96z\"/>\n<path opacity=\"0.4\" fill=\"#B8D432\" d=\"M29.86,16.543L38.185,5.96C27.169,4.745,25.326,0,25.326,0S22.847,6.242,7,6.242v25.611 c0,3.097,1.721,5.997,4.104,8.532l6.154-7.822L29.86,16.543z\"/>\n<path fill=\"#FFFFFF\" d=\"M32.595,24.46h-1.066v-3.552c0-1.709-0.629-3.276-1.669-4.45l0,0c-0.039-0.043-0.074-0.09-0.112-0.133 c-1.107-1.186-2.683-1.948-4.422-1.947c-1.736-0.001-3.312,0.761-4.419,1.947c-1.11,1.187-1.783,2.811-1.783,4.582v3.553h-1.065 c-0.443,0-0.801,0.359-0.801,0.801v7.217l0,0.001v2.174c0,0.442,0.359,0.801,0.801,0.801h14.536c0.442,0,0.801-0.359,0.801-0.801 v-9.391C33.396,24.818,33.037,24.46,32.595,24.46z M28.584,24.461h-5.02l0.001-0.001H22.07v-3.552c0-1.022,0.386-1.927,0.988-2.57 c0.605-0.643,1.395-1.013,2.268-1.013c0.874,0,1.665,0.37,2.27,1.013c0.143,0.153,0.271,0.323,0.389,0.504l-0.001,0.001 c0.373,0.579,0.6,1.288,0.6,2.064V24.461z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Values for IdentitySelector Default Value\nDESCRIPTION: This snippet lists the permitted values for the defaultValue property of the IdentitySelector enum control. These values determine the initial state of the control when it is rendered.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-control-IdentitySelector-defaultValue.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- On\n- Off\n- OnOnly\n- OffOnly\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Redux Path Mapping\nDESCRIPTION: Shows how to update the tsconfig.json file to include Redux in the path mapping. This configuration is necessary for proper module resolution.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ... other options\n    \"paths\": {\n      // ... other paths\n      \"redux\": [\n        \"node_modules/redux/\"\n      ],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Microsoft.Common.OptionsGroup Control\nDESCRIPTION: This snippet shows the expected output when a value is selected in the Microsoft.Common.OptionsGroup control. The output is the value corresponding to the selected option.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.OptionsGroup.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"two\"\n```\n\n----------------------------------------\n\nTITLE: Defining TenantSelector Code Property Example\nDESCRIPTION: Example showing the code property format in the constraints object for TenantSelector component.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TenantSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nconstraints.items\nconstraints.minItems\n```\n\n----------------------------------------\n\nTITLE: Resetting Portal Desktop State in C#\nDESCRIPTION: Demonstrates how to reset the Portal's desktop state before starting a test, ensuring a clean slate for each test case and avoiding interference from previous user customizations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nportal.ResetDesktopState();\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View with Icon and Link Support in Azure Portal (JSON)\nDESCRIPTION: This snippet demonstrates a DataBrowse view configuration with icon and link support. It includes columns for resource name, status (with icon mapping), menu actions, URL links, and blade actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/DataBrowseTab.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"kind\": \"DataBrowse\",\n\t\"displayName\": \"Data browse\",\n\t\"ariaLabel\": \"testing\",\n\t\"data\": [\n\t\t{\n\t\t\t\"name\": \"resourceName1\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Succeeded\",\n\t\t\t\"menu\": \"tags\",\n\t\t\t\"urlText\": \"Azure portal\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://azure.microsoft.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName1\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName2\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Warning\",\n\t\t\t\"menu\": \"properties\",\n\t\t\t\"urlText\": \"Microsoft\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://www.microsoft.com/en-us/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName2\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName3\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Failed\",\n\t\t\t\"menu\": \"locks\",\n\t\t\t\"urlText\": \"Github\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://github.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName3\"\n\t\t\t}\n\t\t}\n\t],\n\t\"columns\": [\n\t\t{\n\t\t\t\"displayName\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"resourceId\": \"[$item.id]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Status\",\n\t\t\t\"name\": \"status\",\n\t\t\t\"valueMapping\": [\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Succeeded\",\n\t\t\t\t\t\"displayName\": \"Succeeded\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Warning\",\n\t\t\t\t\t\"displayName\": \"Warning\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Failed\",\n\t\t\t\t\t\"displayName\": \"Failed\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Menu\",\n\t\t\t\"name\": \"menu\",\n\t\t\t\"action\": {\n\t\t\t\t\"menu\": \"[$item.menu]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Url\",\n\t\t\t\"name\": \"urlText\",\n\t\t\t\"action\": {\n\t\t\t\t\"url\": \"[$item.urlAction.url]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Blade\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"blade\": {\n\t\t\t\t\t\"name\": \"A blade name\",\n\t\t\t\t\t\"extension\": \"An extension name\",\n\t\t\t\t\t\"parameters\": \"[$item.parameters]\",\n\t\t\t\t\t\"inContextPane\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Specific Menu Blade Overview - URL Example - Plaintext\nDESCRIPTION: An example of a menu blade deep link URL selecting the 'overview' menu item of Microsoft_Azure_Support's HelpAndSupportBlade. Useful for documentation or support scenarios; parameters are statically set in the sample.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/overview\n```\n\n----------------------------------------\n\nTITLE: Comparing Parameter Collector Callbacks `supplyInitialData` and `supplyProviderConfig`\nDESCRIPTION: Explains the distinction between `supplyInitialData` and `supplyProviderConfig` callbacks on a Parameter Collector. `supplyInitialData` returns the primary data for the form, potentially pre-filled, which the user will modify. `supplyProviderConfig` returns optional configuration flags that alter the behavior of the Parameter Provider blade itself, rather than representing user-modifiable data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyInitialData\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupplyProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Primary Button Label\nDESCRIPTION: Configuration for customizing the primary button label in the form view properties. Available from SDK 7.4.0.5.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formArmRequest.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n    \"primaryButtonLabel\": \"Execute ARM request\",\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Production Configuration File in XML Build\nDESCRIPTION: XML build configuration to include the production environment configuration file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"Content\\Config\\portal.azure.com.json\" />\n```\n\n----------------------------------------\n\nTITLE: Defining PropertySourceUnits Enum in Markdown\nDESCRIPTION: This snippet lists all the permitted values for the PropertySourceUnits enum. It includes units for data size (e.g., Bytes, Kilobytes), time (e.g., Seconds, Minutes), frequency (e.g., CountPerSecond), and their combinations, in both binary and SI units.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-propertySourceUnits.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- None\n- Percentage\n- Bytes\n- Kilobytes\n- Megabytes\n- Gigabytes\n- Terabytes\n- Petabytes\n- BytesPerDay\n- BytesPerHour\n- BytesPerMinute\n- BytesPerSecond\n- KilobytesPerSecond\n- MegabytesPerSecond\n- GigabytesPerSecond\n- TerabytesPerSecond\n- PetabytesPerSecond\n- Count\n- Thousand\n- Million\n- Billion\n- Trillion\n- MicroSeconds\n- MilliSeconds\n- Seconds\n- Minutes\n- Hours\n- Days\n- CountPerDay\n- CountPerHour\n- CountPerMinute\n- CountPerSecond\n- ThousandPerSecond\n- MillionPerSecond\n- BillionPerSecond\n- TrillionPerSecond\n- Bytes_SI\n- Kilobytes_SI\n- Megabytes_SI\n- Gigabytes_SI\n- Terabytes_SI\n- Petabytes_SI\n- BytesPerDay_SI\n- BytesPerHour_SI\n- BytesPerMinute_SI\n- BytesPerSecond_SI\n- KilobytesPerSecond_SI\n- MegabytesPerSecond_SI\n- GigabytesPerSecond_SI\n- TerabytesPerSecond_SI\n- PetabytesPerSecond_SI\n```\n\n----------------------------------------\n\nTITLE: Status Badge SVG Icons - Unknown, Warning and Update States\nDESCRIPTION: SVG vector graphics defining status badge icons for unknown, warning and update states. Includes both filled and outline variants with consistent styling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_192\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"9px\" height=\"9px\" viewBox=\"-0.5 0.5 9 9\" enable-background=\"new -0.5 0.5 9 9\" xml:space=\"preserve\">\n<circle fill=\"#A0A1A2\" cx=\"4\" cy=\"5\" r=\"4.5\"/>\n<path fill=\"#FFFFFF\" d=\"M5.5,3.67c0,0.45-0.24,0.87-0.69,1.26C4.63,5.08,4.48,5.2,4.42,5.32C4.36,5.41,4.33,5.56,4.33,5.71v0.18\n\tH3.49V5.62c0-0.39,0.15-0.72,0.48-0.99c0.21-0.15,0.33-0.3,0.39-0.39c0.06-0.09,0.12-0.24,0.12-0.39s-0.06-0.24-0.15-0.33\n\tc-0.12-0.12-0.24-0.18-0.42-0.18c-0.36,0-0.69,0.15-1.02,0.42V2.8c0.33-0.21,0.72-0.3,1.14-0.3c0.45,0,0.84,0.12,1.08,0.33\n\tC5.38,3.01,5.5,3.31,5.5,3.67z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Sign Out Icon in SVG\nDESCRIPTION: SVG markup defining the 'Sign Out' icon for the Azure portal. It creates an arrow pointing out of a circle shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_165\n\nLANGUAGE: XML\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 15 15\">\n<path class=\"msportalfx-svg-c01\" d=\"M12.133,3.033c-0.389-0.389-1.019-0.389-1.408,0c-0.389,0.389-0.389,1.019,0,1.408l0,0 c0.892,0.893,1.335,2.054,1.336,3.225c-0.001,1.17-0.444,2.332-1.336,3.225c-0.893,0.892-2.054,1.334-3.225,1.336 c-1.17-0.001-2.332-0.444-3.224-1.336C3.384,9.998,2.941,8.836,2.94,7.666c0.001-1.171,0.444-2.332,1.336-3.225 c0.389-0.389,0.389-1.019,0-1.408c-0.388-0.389-1.019-0.389-1.408,0C1.59,4.31,0.947,5.993,0.948,7.666 C0.947,9.34,1.59,11.022,2.868,12.299c1.277,1.277,2.959,1.92,4.632,1.919h0.004c1.672,0,3.353-0.642,4.628-1.919 c1.278-1.277,1.92-2.959,1.919-4.633C14.053,5.993,13.41,4.31,12.133,3.033z M7.5,8.662c0.55,0,0.996-0.446,0.996-0.996V1.655 c0-0.55-0.446-0.996-0.996-0.996c-0.55,0-0.996,0.446-0.996,0.996v6.011C6.504,8.216,6.95,8.662,7.5,8.662z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.Grid with AAD Integration in JSON\nDESCRIPTION: This example shows a Grid control for managing Azure Active Directory users with role assignments. It integrates with AAD object picker blade and includes validations to ensure at least one administrator role is assigned.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Grid.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Grid\",\n    \"name\": \"aadGrid\",\n    \"label\": {\n        \"addition\": \"Add AAD-Based User\",\n        \"delete\": \"Delete\",\n        \"summary\": \"AAD-Based User(s)\"\n    },\n    \"defaultValue\": [\n        {\n            \"id\": \"[dataSources('graph').id]\",\n            \"ledgerRoleName\": \"Administrator\",\n            \"displayName\": \"[dataSources('graph').displayName]\",\n            \"mail\": \"[dataSources('graph').mail]\"\n        }\n    ],\n    \"addBlade\": {\n        \"extension\": \"Microsoft_AAD_IAM\",\n        \"name\": \"ObjectPickerBlade\",\n        \"parameters\": {\n            \"title\": \"addAadLabel\",\n            \"disabledObjectIds\": \"[map(steps('security').aadGrid,(element)=>element.id)]\",\n            \"queries\": 1\n        },\n        \"outputItem\": \"selectedObjects\",\n        \"inContextPane\": true\n    },\n    \"constraints\": {\n        \"width\": \"Full\",\n        \"canEditRows\": false,\n        \"columns\": [\n            {\n                \"id\": \"displayName\",\n                \"header\": \"Name\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.displayName]\"\n            },\n            {\n                \"id\": \"mail\",\n                \"header\": \"Email\",\n                \"cellType\": \"readonly\",\n                \"text\": \"[$item.mail]\"\n            },\n            {\n                \"id\": \"ledgerRoleName\",\n                \"header\": \"Ledger Role\",\n                \"cellType\": \"input\",\n                \"element\": {\n                    \"type\": \"Microsoft.Common.DropDown\",\n                    \"constraints\": {\n                        \"allowedValues\": [\n                            {\n                                \"label\": \"readerLabel\",\n                                \"value\": \"Reader\"\n                            },\n                            {\n                                \"label\": \"contributorLabel\",\n                                \"value\": \"Contributor\"\n                            },\n                            {\n                                \"label\": \"administratorLabel\",\n                                \"value\": \"Administrator\"\n                            }\n                        ],\n                        \"required\": true\n                    }\n                }\n            }\n        ],\n        \"rows\": {\n            \"count\": {\n                \"min\": 1,\n                \"max\": 3\n            }\n        },\n        \"validations\": [\n            {\n                \"isValid\": \"[contains(map(steps('security').aadGrid,(element)=>element.ledgerRoleName),'Administrator')]\",\n                \"message\": \"Must include at least one AAD-based user with the role of Administrator.\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Website QueryCache\nDESCRIPTION: Demonstrates QueryCache implementation for handling lists of website data. Includes configuration for entity type naming and dynamic URI generation based on query parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-masterdetailsbrowse.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.websitesQuery = new QueryCache<WebsiteModel, WebsiteQueryParams>({\n    entityTypeName: WebsiteModelMetadata.name,\n\n    // when fetch() is called on the cache the params will be passed to this function and it\n    // should return the right URI for getting the data\n    sourceUri: (params: WebsiteQueryParams): string => {\n        let uri = MsPortalFx.Base.Resources.getAppRelativeUri(\"/api/Websites\");\n\n        // if runningStatus is null we should get all websites\n        // if a value was provided we should get only websites with that running status\n        if (params.runningStatus !== null) {\n            uri += \"?$filter=Running eq \" + params.runningStatus;\n        }\n\n        // this particular controller expects a sessionId as well but this is not the common case.\n        // Unless your controller also requires a sessionId this can be omitted\n        return uri;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Flighting for PDL Knockout Blade Redirects using XML\nDESCRIPTION: This XML snippet illustrates how to enable flighting for a Blade redirect defined in a PDL file. The `UseFlighting=\"True\"` attribute is added to the `<RedirectBlade>` tag. This allows the experimentation platform (ExP) to control whether the redirect from `LegacyBlade` to `NewBlade` is active based on flight assignments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- This RedirectBlade tag specifies what blade is being replaced, and from what extension -->\n<RedirectBlade Name=\"LegacyBlade\" Extension=\"LegacyExtension\" UseFlighting=\"True\" >\n\t<!-- Name of the blade in the extension to replace LegacyBlade -->\n\t<NewBlade Name=\"NewBlade\"/>\n</RedirectBlade>\n```\n\n----------------------------------------\n\nTITLE: Defining Search Keywords in RESJSON for Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to define a comma-separated list of search keywords within a resource file (e.g., `MyAssetStrings.resjson`). These keywords allow users to find the associated Azure service using terms other than its official display name in the Portal's global search. The key is typically named \"keywords\".\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-globalsearch.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"keywords\": \"subname, assetname\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Progress Notification Implementation in TypeScript\nDESCRIPTION: Shows the old way of creating and updating a progress notification using ClientNotification class with correlation IDs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvar notification = new MsPortalFx.Hubs.Notifications.ClientNotification({\n    title: clientStrings.myEventLabel,\n    description: clientStrings.myEventMessage.format(formatArg0, formatArg1),\n    status: MsPortalFx.Hubs.Notifications.NotificationStatus.InProgress,\n    percentComplete: percentComplete,\n    asset: {\n        extensionName: ExtensionDefinition.definitionName,\n        assetType: ExtensionDefinition.AssetTypes.MyAsset.name,\n        assetId: assetId\n    }\n});\nnotification.publish();\n// execute server-side operation and get server event correlation id\nnotification.correlationIds.push(correlationId);\nnotification.publish();\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from QueryCache with applyChanges in Azure Portal\nDESCRIPTION: Shows how to delete a robot entity and update the client-side cache by using applyChanges to remove the item from the local dataset. It also notifies the shell about the asset deletion.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\npublic deleteRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot + robot.name(),\n        type: \"DELETE\",\n    }).then(() => {\n        // This will notify the shell that the robot is being removed.\n        MsPortalFx.UI.AssetManager.notifyAssetDeleted(ExtensionDefinition.AssetTypeNames.robot, robot.name());\n\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.robotsQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we deleted a robot in the cache, so we will reflect this change on the client side.\n            dataSet.removeItem(robot);\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining TagsByResource Parameter in Azure Resource Manager Template\nDESCRIPTION: Demonstrates how to define the tagsByResource parameter in an Azure Resource Manager template to receive tag values from the portal control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"parameters\": {\n  \"tagsByResource\": { \"type\": \"object\", \"defaultValue\": {} }\n}\n```\n\n----------------------------------------\n\nTITLE: KnockoutJS Subscription Disposal Example\nDESCRIPTION: Shows how to properly dispose of KnockoutJS subscriptions in early versions of Azure Portal SDK.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-lifetime.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis._customerNameSubscription = customerName.subscribe(() => { … });\n\t\n…\n\t\npublic dispose() {\n\tthis._customerNameSubscription.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Command in Azure Portal\nDESCRIPTION: Configuration for adding a command to a declarative blade that opens the ARM request form. Specifies icon, display name, and blade parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formArmRequest.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n        \"id\": \"formarmrequestCommand\",\n        \"kind\": \"OpenBladeCommand\",\n        \"displayName\": {\n          \"property\": \"formArmRequest\"\n        },\n        \"blade\": {\n          \"name\": \"FormBladeArmRequest_Dx\",\n          \"inContextPane\": true,\n          \"parameters\": {\n            \"id\": \"[parameters('id')]\"\n          }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Designing Input/Output Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code creates an input/output icon with arrows pointing left and right. The icon uses different colors to distinguish between input and output directions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_45\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#804998\" points=\"17.7,23.411 12.811,18.256 16.789,18.256 23.333,24.978 16.822,31.667 12.844,31.667 17.7,26.511 \n\t0,26.511 0,23.411 \"/>\n<polygon fill=\"#59B4D9\" points=\"44.367,23.411 39.478,18.256 43.456,18.256 50,24.978 43.489,31.667 39.511,31.667 44.367,26.511 \n\t26.667,26.511 26.667,23.411 \"/>\n<polygon fill=\"#A0A1A2\" points=\"36.667,40.889 5.556,40.889 5.556,30.556 10,30.556 10,36.444 32.222,36.444 32.222,30.556 \n\t36.667,30.556 \"/>\n<polygon fill=\"#A0A1A2\" points=\"36.667,19.444 32.222,19.444 32.222,12.444 10,12.444 10,19.444 5.556,19.444 5.556,8 36.667,8 \"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Blade in PDL (XML)\nDESCRIPTION: This XML snippet shows how to define a Menu Blade in Portal Definition Language (PDL). It specifies the blade name and associated view model.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-menublade.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MenuBlade\n  Name=\"PdlSampleMenuBlade\"\n  ViewModel=\"SampleMenuBlade\" />\n```\n\n----------------------------------------\n\nTITLE: Wrapping OSS Library in AMD Module Definition\nDESCRIPTION: This snippet demonstrates how to wrap an existing OSS library code in an AMD module definition using the define function. This is the first step in converting a library to an AMD module.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefine([], function() {\n    /** OSS code here **/\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Custom Buttons\nDESCRIPTION: Example showing how to implement a dialog with custom buttons and handle different button click scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openDialog({\n    telemetryName: \"DialogWithCustomButtons\",\n    title: ClientResources.Dialog.CustomButtons.title,\n    content: dialogContent,\n    buttons: [\n        { button: DialogButton.Yes, displayText: ClientResources.Dialog.CustomButtons.sushi },\n        { button: DialogButton.No, displayText: ClientResources.Dialog.CustomButtons.nothing, disabled: disableNothingOption },\n        { button: DialogButton.Cancel, displayText: ClientResources.Dialog.CustomButtons.pizza },\n    ],\n    onClosed: (dialogResult) => {\n        switch (dialogResult.button) {\n            case DialogButton.Yes:\n                this.dinnerSelection(ClientResources.Dialog.CustomButtons.sushi);\n                break;\n            case DialogButton.No:\n                // only users over the age of 18 can choose to skip dinner\n                this.dinnerSelection(\"\");\n                break;\n            case DialogButton.Cancel:\n                // if the user cancels with escape key they are getting pizza\n                this.dinnerSelection(ClientResources.Dialog.CustomButtons.pizza);\n                break;\n        }\n    },\n    target: evt.target,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Token Messages\nDESCRIPTION: TypeScript implementation for listening to authentication token requests and sending responses between IFrames.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.on(\"getAuthToken\", () => {\n    MsPortalFx.Base.Security.getAuthorizationToken().then((token) => {\n        const header = token.header;\n        const message = new FxAppBlade.Message(\"getAuthTokenResponse\", header);\n\n        this.postMessage(message);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PDE NuGet Package with MSBuild (.nuproj)\nDESCRIPTION: This MSBuild project file (`.nuproj`) defines the structure and metadata for creating a NuGet package containing an Azure Portal Extension PDE. It specifies package details like ID, Title, and Description, includes the `.pde` file and associated TypeScript definition (`.d.ts`) files, adds an `Install.ps1` script for post-installation actions, and imports necessary build targets. Placeholders like 'Name' and repository paths need customization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n<Import Project=\"$(EnvironmentConfig)\" />\n\n<PropertyGroup>\n    <Id>Microsoft.Portal.Extensions.Name</Id>\n    <Title>Microsoft Portal Extension Name</Title>\n    <Description>Provides the Microsoft Portal Name PDE</Description>\n    <Summary>Provides the Microsoft Portal Name PDE</Summary>\n    <Tags>Microsoft Azure Cloud Portal Framework Name  PDE</Tags>\n</PropertyGroup>\n\n<ItemGroup>\n    <!-- update the following to pull the PDE from your official build-->\n    <Content Include=\"$(RepoRoot)\\src\\SDK\\Extensions\\HubsExtension\\Extension\\TypeScript\\HubsExtension\\HubsExtension.pde\">\n    <!-- update the following to pull in any *.d.ts files that consumers of your extensions PDE will require -->\n    <Content Include=\"$(RepoRoot)\\src\\SDK\\Extensions\\HubsExtension\\Extension\\TypeScript\\HubsExtension\\ForExport\\*.d.ts\">\n    <TargetPath>Client\\_extensions\\Name</TargetPath>\n    </Content>\n    <!-- include an install.ps1 to both set appropriate build action on pde and to pop documents-->\n    <File Include=\"$(REPOROOT)\\RDPackages\\NuGet\\Microsoft.Portal.Extensions.Name\\Install.ps1\" >\n    <TargetPath>Tools\\Install.ps1</TargetPath>\n    </File>\n</ItemGroup>\n<!-- update the following as needed aka.ms/onebranch -->\n<Import Project=\"$(PkgNuProj)\\NuProj.Targets\" />\n<Import Project=\"..\\Portal.Common.NuGet.props\" />\n<PropertyGroup>\n    <GenerateSymbolPackage>false</GenerateSymbolPackage>\n</PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Defining Permitted Format Values for Asset Type Browse Columns in Azure Portal\nDESCRIPTION: An enumeration that specifies the permitted format values for browse columns in the Azure Portal. These formats control how the data is displayed in the portal's browsing experience.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetTypeBrowseColumns-format.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NoFormat\n- String\n- Resource\n- Date\n- Number\n- Location\n- BladeLink\n- Tenant\n- Status\n- DeepLink\n- QueryBladeLink\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Insights NuGet Package (PowerShell)\nDESCRIPTION: This command uses the NuGet Package Manager Console in PowerShell to install version 5.10.0.43 of the `Microsoft.Portal.Extensions.Insights` package from the official Azure DevOps feed. Users are advised to verify and potentially update the version number to the latest available.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-azureinsights.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Insights -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version 5.10.0.43\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Location Metadata in JSON\nDESCRIPTION: This JSON object defines the metadata for the 'East US' Azure location. It includes properties like 'displayName', 'name' (normalized), 'id' (fully qualified), 'regionalDisplayName', and 'type' ('Region' in this case). The 'metadata' object contains further details specific to the location type, such as 'geographyGroup', coordinates ('latitude', 'longitude'), 'pairedRegion' information, 'physicalLocation', 'regionCategory', and 'regionType'. Comments within the JSON explain the purpose of key fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.LocationSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"displayName\": \"East US\",\n        /**\n         * The normalized name of the location.\n         */\n        \"name\": \"eastus\",\n        /**\n         * The fully qualified ID of the location.\n         */\n        \"id\": \"/subscriptions/{subscription-ID}/locations/eastus\",\n        /**\n         * The display name with the Region included\n         */\n        \"regionalDisplayName\": \"(US) East US\",\n        /**\n         * The type of the location, can be \\\"Region\\\" or \\\"EdgeZone\\\".\n         */\n        \"type\": \"Region\",\n        /**\n         * Metadata about the location\n         * 'type' will determine which interface is returned from ARM\n         * If 'type' is \\\"Region\\\", then 'metadata can be casted to type 'RegionLocationMetadata'.\n         * If 'type' is \\\"EdgeZone\\\", then 'metadata can be casted to type 'EdgeZoneLocationMetadata'.\n         */\n        \"metadata\": {\n                \"geographyGroup\": \"US\",\n                \"latitude\": \"37.3719\",\n                \"longitude\": \"-79.8164\",\n                \"pairedRegion\": [\n                        {\n                                \"name\": \"westus\", \n                                \"id\": \"/subscriptions/{subscription-ID}/locations/westus\"\n                        }\n                ],\n                \"physicalLocation\": \"Virginia\",\n                \"regionCategory\": \"Recommended\",\n                \"regionType\": \"Physical\"\n        }\n}     \n```\n\n----------------------------------------\n\nTITLE: SVG Definition for AddAlternate Icon\nDESCRIPTION: Alternative plus sign icon for the Azure Portal with a different visual style. This version uses a simple polygon for a cleaner look.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_99\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"21px\" width=\"21px\" viewBox=\"0 0 21 21\" enable-background=\"new 0 0 21 21\" xml:space=\"preserve\">\n<polygon points=\"21,9 12,9 12,0 9,0 9,9 0,9 0,12 9,12 9,21 12,21 12,12 21,12 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Invoking GetCreateFlows Function in Kusto\nDESCRIPTION: Demonstrates the basic usage of the `GetCreateFlows` function in the `AzPtlCosmos` Kusto database to query the `CreateFlows` table. This function requires `startDate` and `endDate` parameters of type datetime to specify the time range for the telemetry data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFlows(startDate: datetime, endDate: datetime)\n```\n\n----------------------------------------\n\nTITLE: Adding ActionBar to TemplateBlade in PDL\nDESCRIPTION: This XML snippet demonstrates how to add an ActionBar element to a TemplateBlade in PDL. The ActionBar is docked to the bottom of the blade and contains buttons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade\n            Name=\"MyTemplateBlade\"\n            ViewModel=\"{ ViewModel Name=MyTemplateBladeViewModel, Module=./ViewModels/MyTemplateBladeViewModel }\"\n            Template=\"{ Html Source='Templates\\\\MyTemplateBlade.html' }\">\n    <TemplateBlade.Parameters>\n        <Parameter Name=\"id\" />\n    </TemplateBlade.Parameters>\n    <ActionBar ActionBarKind=\"Generic\" />\n</TemplateBlade>\n```\n\n----------------------------------------\n\nTITLE: TextBox Validation Object Structure - Regex Based\nDESCRIPTION: Defines the structure for regex-based text box validation. The validation object requires a message property for error display and a regex property containing a JavaScript regular expression pattern. Includes optional fx.feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-textBoxConstraints-validations.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"string\",\n  \"regex\": \"pattern\",\n  \"fx.feature\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom SVG Icon Resource in PDL Asset Definition\nDESCRIPTION: This XML (PDL - Portal Definition Language) snippet demonstrates referencing a custom SVG icon within an AssetType definition. The 'Icon' attribute points to a resource key defined in a generated SvgDefinitions module, linking the asset type visually to the specified engine icon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<AssetType Name=\"Engine\"\n           Text=\"{Resource engineSearchProviderKey, Module=ClientResources}\"\n           Icon=\"{Resource Content.SamplesExtension.Images.engine, Module=./../Generated/SvgDefinitions}\"\n           BladeName=\"EngineBlade\"\n           PartName=\"EnginePart\">\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Example Input Value in JSON TextBox - JSON\nDESCRIPTION: This snippet exemplifies user input into a Microsoft.Common.TextBox expressed as a JSON string with the value \"example\". Dependencies and requirements are limited to standard JSON support. The key parameter is the plain string input, which, when used, sets the control's content to 'example'. This form is limited to single string values and should not include complex structures.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.TextBox-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"example\"\n```\n\n----------------------------------------\n\nTITLE: Adding tsconfig.json Content Tag\nDESCRIPTION: XML snippet showing how to include tsconfig.json as content in the project file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"tsconfig.json\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Loading Indicator Removal in onInputsSet - Azure Portal Part (TypeScript)\nDESCRIPTION: Demonstrates how the promise returned from the onInputsSet method determines when to remove the blocking loading indicator from a Part. This example uses a fetch operation and returns its promise; loading indicators are displayed while the operation is pending. Dependencies: TypeScript, promise-based API, Def.InputsContract, _view.fetch(). Inputs: 'inputs' config object with a websiteId property. Outputs: A promise controlling the loading state. The presence and removal of the spinner is directly tied to resolving this promise.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parts-revealContent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: Def.InputsContract): Promise<any> {\n\t// When this promise is resolved, the loading indicator is removed.\n    return this._view.fetch(inputs.websiteId);\n}\n```\n\n----------------------------------------\n\nTITLE: EntityView Subscription Example\nDESCRIPTION: Example showing an incorrect way to handle EntityView refreshes using direct item subscription.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nentityView.item.subscribe(lifetime, () => {\n    const item = entityView.item();\n    if (item) {\n        // Do something with 'newItem' after refresh.\n        doSomething(item.customerName());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties Table for Status Definition\nDESCRIPTION: Table defining the required properties for configuring status values in the Capabilities Tab. Specifies mandatory fields for value and valueMapping, with an optional fx.feature property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-CapabilitiesTab-status.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|value|True|Specifies the value of the configuration status.\n|valueMapping|True|Specifies the valueMapping for the configuration status. See [here](dx-getstarted-CapabilitiesTab-valueMapping.md) on how to define a valueMapping.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Running Create Flow Regressions Alert Query\nDESCRIPTION: This is the base query that drives the alert system for create flow regressions. It tracks the success percentage over the last 24 hours compared to the established success bar, triggering alerts when regression exceeds 5%.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\nCreateFlowRegressions(now())\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Reference Properties in Azure Portal Dashboard Views\nDESCRIPTION: Schema definition for blade reference configuration in Azure Portal dashboards. Specifies required and optional properties including blade name, extension, parameters, context pane settings, and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-bladeReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|True|Name of the blade\n|extension|False|Extension of the blade\n|parameters|False|Parameters of the blade\n|inContextPane|False|Specify opening blade in context pane. If false, open blade in full screen.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Azure VirtualNetworkCombo Subnet Constraint Properties Table\nDESCRIPTION: Markdown table defining the configuration properties for subnet constraints including address prefix size, minimum address count, and contiguous address requirements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-subnets-constraint.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|minAddressPrefixSize|True|Sets the limit for subnet's address prefix size (ex. /16)\n|minAddressCount|False|Sets the minimum for available subnet addresses.  Default is **0**.\n|requireContiguousAddresses|False|Set to **true** to ensure available addresses are contiguous.  Default is **true**\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing Portal Tests with C# Test Framework\nDESCRIPTION: A comprehensive example of a test class that demonstrates setting up a test environment for the Azure Portal, including server initialization, WebDriver setup, test execution, and cleanup with screenshot capabilities on test failure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Microsoft.Portal.TestFramework.Core;\nusing Microsoft.Selenium.Utilities;\nusing OpenQA.Selenium;\nusing Microsoft.Portal.TestFramework.Core.Shell;\n\nnamespace SamplesExtensionTests\n{\n    [TestClass]\n    public class Screenshots\n    {\n        public TestContext TestContext { get; set; }\n\n        private const string SamplesExtensionUrl = \"http://localhost:11997\";\n        private const string SamplesExtensionWebSitePath = @\"d:\\Users\\julioct\\Documents\\PortalSDK\\FrameworkPortal\\Extensions\\SamplesExtension\\Extension\";\n        private static IWebDriver webDriver;\n        private static PortalServer portalServer;\n        private static WebServer samplesExtensionServer;\n\n        [TestInitialize]\n        public void TestInitialize()\n        {\n            samplesExtensionServer = new WebServer(new Uri(SamplesExtensionUrl), SamplesExtensionWebSitePath);\n            if (samplesExtensionServer.IsHostedByTestFramework)\n            {\n                samplesExtensionServer.Start();\n            }\n\n            portalServer = PortalServer.Create();\n\n            if (portalServer.IsHostedByTestFramework)\n            {\n                portalServer.RegisterExtension(\"Samples\", new Uri(samplesExtensionServer.Uri));\n                portalServer.Start();\n            }\n\n            webDriver = WebDriverFactory.Create();\n            webDriver.Url = \"about:blank\";\n            portalServer.ClearUserSettings();\n        }\n\n        [TestMethod]\n        public void CanFindSamplesPart()\n        {\n            var portal = this.NavigateToPortal();\n\n            // Intentional mistake. There is no part with this title in the StartBoard,\n            // so the call to FindSinglePartByTitle will fail\n            string samplesTitle = \"The Samples\";\n\n            var samplesPart = portal.StartBoard.FindSinglePartByTitle<ButtonPart>(samplesTitle);\n            samplesPart.Click();\n        }\n\n        [TestCleanup]\n        public void TestCleanup()\n        {\n            if (TestContext.CurrentTestOutcome != UnitTestOutcome.Passed && webDriver != null)\n            {\n                TestContext.AddResultFile(webDriver.TakeScreenshot(TestContext.TestRunResultsDirectory,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   TestContext.TestName));\n            }\n\n            webDriver.Dispose();\n            portalServer.Dispose();\n            samplesExtensionServer.Dispose();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Dropdown Filtering in Azure Portal Form\nDESCRIPTION: Demonstrates a form configuration with cascading dropdowns for Express Route circuit provisioning. Includes provider selection, peering locations, and bandwidth options that filter based on previous selections.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"<relative path to dx.schema.json>\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"title\": \"Test Form View\",\n            \"steps\": [\n                {\n                    \"name\": \"basics\",\n                    \"label\": \"Basics\",\n                    \"elements\": [\n                        {\n                            \"name\": \"resourceScope\",\n                            \"type\": \"Microsoft.Common.ResourceScope\"\n                        }\n                    ]\n                },\n                {\n                    \"name\": \"settings\",\n                    \"label\": \"Settings\",\n                    \"elements\": [\n                        {\n                            \"name\": \"providersApi\",\n                            \"type\": \"Microsoft.Solutions.ArmApiControl\",\n                            \"request\": {\n                                \"method\": \"GET\",\n                                \"path\": \"[concat(steps('basics').resourceScope.subscription.id,'/providers/Microsoft.Network/expressRouteServiceProviders?api-version=2019-02-01')]\"\n                            }\n                        },\n                        {\n                            \"name\": \"circuitName\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Circuit name\",\n                            \"defaultValue\": \"TestFaceAccount\",\n                            \"toolTip\": \"The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.\",\n                            \"constraints\": {\n                                \"required\": true\n                            },\n                            \"visible\": true\n                        },\n                        {\n                            \"name\": \"providerDropDown\",\n                            \"type\": \"Microsoft.Common.DropDown\",\n                            \"label\": \"Provider\",\n                            \"toolTip\": \"The ISP that will be providing the express route connection\",\n                            \"constraints\": {\n                                \"allowedValues\": \"[map(steps('settings').providersApi.value,(item) => parse(concat('{\\\"label\\\":\\\"',item.name,'\\\",\\\"value\\\":\\\"',item.name,'\\\"}')))]\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Defining SSH Public Key Authentication JSON Output Structure in Azure Portal\nDESCRIPTION: This JSON snippet represents the output returned by an Azure Portal control when a user authenticates using an SSH public key. It includes the `authenticationType` set to 'sshPublicKey', a flag `generateNewSshKey` indicating if a new key pair should be generated, the `sshPublicKey` itself (or empty if generating), and the `sshKeyName` if a new key pair is generated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Compute.CredentialsCombo-Linux-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"sshPublicKey\",\n  /**\n   * Set to true if the user opts to generate a new SSH key pair. False for all other scenarios.\n   */\n  \"generateNewSshKey\" : false,\n   /**\n    * The SSH Public key. Set to an empty string if the user opts to generate a new key pair.\n    */\n  \"sshPublicKey\": \"<ssh-public-key>\",\n  /**\n   * The name of the SSH key pair to be generated if the user opts to generate a new key pair.\n   * Set to an empty string for all other scenarios.\n   */\n  \"sshKeyName\": \"<ssh-key-name>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced GraphApiControl Configuration with Value Mapping\nDESCRIPTION: This snippet shows an advanced configuration of GraphApiControl with custom value mappings. It includes a more complex transformation using JMESPath and property mappings to customize the display of certain values. The associated DropDown control uses the transformed and mapped data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"name\": \"callGraph2\",\n        \"type\": \"Microsoft.Solutions.GraphApiControl\",\n        \"request\": {\n            \"method\": \"GET\",\n            \"path\": \"/beta/myorganization/applications?filter=startsWith(displayName, 'a')&select=displayName,appId\",\n            \"transforms\": {\n                \"list\": {\n                    \"jmesPath\": \"value|[*].{label:displayName, value:appId, description:appId}\",\n                    \"propertyMappings\": [\n                        {\n                            \"property\": \"label\",\n                            \"valueMapping\": [\n                                {\n                                    \"value\": \"astf4\",\n                                    \"displayName\": \"Test astf4\"\n                                },\n                                {\n                                    \"value\": \"adelete1\",\n                                    \"displayName\": \"Test adelete1\"\n                                }\n                            ]\n                        },\n                        {\n                            \"property\": \"description\",\n                            \"valueMapping\": [\n                                {\n                                    \"value\": \"512628f9-3682-4a1d-a7a8-f5931f9c575f\",\n                                    \"displayName\": \"Test 512628f9-3682-4a1d-a7a8-f5931f9c575f\"\n                                },\n                                {\n                                    \"value\": \"0d30f29a-9785-466d-8273-f07699ef7bfc\",\n                                    \"displayName\": \"Test 0d30f29a-9785-466d-8273-f07699ef7bfc\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        }\n    },\n{\n    \"name\": \"userName2\",\n    \"type\": \"Microsoft.Common.DropDown\",\n    \"label\": \"User info 2\",\n    \"multiLine\": true,\n    \"constraints\": {\n        \"required\": true,\n        \"allowedValues\": \"[coalesce(steps('controls').callGraph2.transformed.list, parse('[]'))]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Microsoft.Common.InfoBox Control\nDESCRIPTION: This snippet shows the expected output of the InfoBox control defined in the previous code snippet. The output is simply the text content of the InfoBox.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.InfoBox.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Style: None\"\n```\n\n----------------------------------------\n\nTITLE: Defining Extension in PDL (XML)\nDESCRIPTION: Example of an extension definition in PDL format, typically found in an extension.pdl file. It defines the extension name and entry point module path.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-pdl-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\">\n  <Extension Name=\"ToolTest\" EntryPointModulePath=\"Program\" />\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Defining a URL-Opening Command in PDL (XML)\nDESCRIPTION: Defines a command in PDL (located in `\\Client\\Commands\\UrlCommand\\UrlCommand.pdl`) specifically designed to open a URL in a new browser tab. The 'Kind=\"Url\"' attribute signals this behavior. The command's text is sourced from resources, and it's linked to the 'UriCommandViewModel' which will provide the actual URL to navigate to.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<Command Kind=\"Url\"\n         Text=\"SamplesExtension.Resources.Strings.uriCommandTitle\"\n         ViewModel=\"UriCommandViewModel\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Vault Picker Constructor in TypeScript\nDESCRIPTION: TypeScript code showing how to initialize a vault picker parameter collector with input/output handling and provider configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.vaultPickerCollector = new MsPortalFx.ViewModels.ParameterCollector<VaultPickerInputsOutputs>(_container, {\n          supplyInitialData: () => {\n              return <VaultPickerInputsOutputs> {\n                  // this is where you would pass in pre selected vault, if desired\n\t\t\t\t     id: ko.observable(\"\")\n              };\n          },\n          receiveResult: (result: VaultPickerInputsOutputs) => {\n              // this is what will happen when the user finishes selecting a vault and the blade closes.\n              this._vault(result);\n          },\n          supplyProviderConfig: () => {\n              return <VaultPickerConfig> {\n                  subscriptionId: this._subscriptionSelector.value ? this._subscriptionSelector.value().subscriptionID : null,\n                  resourceGroup: this._resourceGroupSelector.value ? this._resourceGroupSelector.value.name() : null,\n                  location: this._locationSelector.value ? this._locationSelector.value().name : null\n              };\n          }\n      });\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Type Tag for ARM Resource\nDESCRIPTION: Example XML configuration for resource groups showing how to associate an ARM resource with the assetType.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ResourceType\\n    ResourceTypeName=\"Microsoft.Resources/subscriptions/resourceGroups\"\\n    ApiVersion=\"2014-04-01-preview\" />\n```\n\n----------------------------------------\n\nTITLE: Form Validation Using WaitUntil\nDESCRIPTION: Shows how to properly wait for asynchronous form validation using WaitUntil instead of Assert.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar field = form.FindField<Textbox>(\"contactName\");\nfield.Value = contactName + Keys.Tab;\nwebDriver.WaitUntil(() => field.IsValid, \"The 'contactName' field did not pass validations.\");\n```\n\n----------------------------------------\n\nTITLE: Open Blade Methods in JavaScript\nDESCRIPTION: This code block lists the available openBlade methods on the template blade container, including methods for opening blades synchronously and asynchronously.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-opening-and-closing.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// opens a blade right now\nopenBlade(bladeToOpen: BladeReference): Promise<boolean>;\n\n// displays the blade placeholder right now, but shows a spinner until the given promise resolves\nopenBladeAsync(promiseToDetermineBladeToOpen: Promise<BladeReference>): Promise<boolean>;\n\n// opens a context blade right now\nopenContextBlade(bladeToOpen: BladeReference): Promise<boolean>;\n\n// displays the context blade placeholder right now, but shows a spinner until the given promise resolves\nopenContextBladeAsync(promiseToDetermineBladeToOpen: Promise<BladeReference>): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Configuring PDE NuGet Package Installation with PowerShell\nDESCRIPTION: This PowerShell script (`Install.ps1`) is executed when the PDE NuGet package is installed into a project. It uses the Visual Studio Development Tools Environment (DTE) object model to locate the installed `.pde` file within the project structure and sets its 'Build Action' property to 'ExtensionReference'. It also opens a specified documentation URL (using an aka.ms link) in the browser to guide the consumer. The script requires customization for the specific folder and PDE file names.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nparam($installPath, $toolsPath, $package, $project)\n\n# set the build action for the pde to ExtensionResource\n$item = $project.ProjectItems.Item(\"Client\").ProjectItems.Item(\"_extensions\").ProjectItems.Item(\"Your Folder Name that nuproj puts the pde in\").ProjectItems.Item(\"SomeExtension.pde\") \n$item.Properties.Item(\"ItemType\").Value = \"ExtensionReference\"\n# open the documentation for consuming exposed content from the pde. use an aka.ms link so you can change out the target content without having to republish\n$DTE.ItemOperations.Navigate(\"https://aka.ms/portalfx/somepde\")\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Delete in Azure Portal\nDESCRIPTION: An SVG icon representing a delete or trash action. Used in the Azure Portal UI to indicate functionality related to deleting resources, items, or data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_122\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0.5 0.5 24 24\" enable-background=\"new 0.5 0.5 24 24\" xml:space=\"preserve\">\n<path d=\"M19.846,6.5H5.154C4.601,6.5,4.5,6.27,4.5,6s0.101-1.5,0.654-1.5h14.692C20.399,4.5,20.5,5.73,20.5,6S20.399,6.5,19.846,6.5\n\tz\"/>\n<path d=\"M14.33,3.5h-0.011h-3.723c-0.402,0-0.597-0.13-0.597-0.5c0.011-0.36,0.149-0.5,0.597-0.5h3.686\n\tc0.402,0,0.717,0.14,0.717,0.5c0,0.37-0.256,0.5-0.646,0.5H14.33z\"/>\n<path d=\"M5.5,7.5v14c0.04,0.82,3.537,1,4.337,1h5.862c0.8,0,3.761-0.18,3.801-1v-14H5.5z M9.542,19.167\n\tc0.01,0.36-0.27,0.68-0.62,0.69h-0.73c-0.35,0-0.63-0.28-0.65-0.65v-9.37c-0.01-0.37,0.542-0.726,1.023-0.726\n\tc0.34,0,0.967,0.316,0.977,0.676V19.167z M13.5,19.156c-0.01,0.36-0.3,0.64-0.64,0.64h-0.74c-0.35-0.01-0.63-0.33-0.62-0.7v-9.37\n\tc0.02-0.37,0.642-0.655,1.002-0.635S13.51,9.416,13.5,9.786V19.156z M17.396,19.151c-0.01,0.36-0.3,0.64-0.64,0.64h-0.74\n\tc-0.35-0.01-0.63-0.33-0.62-0.7v-9.37c0.02-0.37,0.642-0.654,1.002-0.635c0.36,0.02,1.008,0.325,0.998,0.695V19.151z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Updated Azure Disk Configuration (16GiB Premium_LRS) in JSON\nDESCRIPTION: This JSON snippet details the configuration properties for an Azure disk after selecting a 16 GiB size, specifically for the 'Premium_LRS' SKU. It includes parameters like IOPS, throughput, max shares, read-only limits, and default performance tier information ('P3').\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.BladeInvokeControl-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sku\": \"Premium_LRS\",\n    \"diskSizeGB\": 16,\n    \"iops\": 120,\n    \"throughput\": 25,\n    \"maxValueOfMaxShares\": 3,\n    \"ultraReadOnlyValues\": {\n        \"minRoIops\": 10,\n        \"minRoThroughput\": 10,\n        \"maxRoIops\": 4000,\n        \"maxRoThroughput\": 2000\n    },\n    \"defaultPerformanceTier\": {\n        \"minSize\": 8,\n        \"maxSize\": 16,\n        \"tier\": \"P3\",\n        \"maxIops\": 120,\n        \"maxThroughput\": 25,\n        \"maxValueOfMaxShares\": 3,\n        \"maxBurstIops\": 3500,\n        \"maxBurstThroughput\": 170\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Controller Endpoint in JSON Configuration\nDESCRIPTION: Example of providing a controller endpoint URL in a JSON configuration file. This shows how to configure backend controller endpoints that will be accessible from the client.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"controllerEndpoint\":\"https://mycontrollerendpoint.mybackendhostname.net\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Button Label for ARM Request Form\nDESCRIPTION: This JSON snippet shows how to customize the primary button label for an ARM request Form blade. Available from SDK 7.4.0.5, this optional property allows changing the default 'Submit' label to a custom value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n    \"primaryButtonLabel\": \"Execute ARM request\",\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Endpoint Configuration Example\nDESCRIPTION: Example of configuring controller endpoint in JSON configuration file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"controllerEndpoint\":\"https://mycontrollerendpoint.mybackendhostname.net\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project File for Custom SVG Processing (csproj)\nDESCRIPTION: This XML snippet shows the necessary configuration within a C# project file (.csproj) to automatically process SVG files. The `SvgTs` element tells the build process to find SVG files in 'Content\\Images' and generate corresponding TypeScript definition files in 'Client\\_generated\\Svg'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<SvgTs Include=\"Content\\Images\\*.svg\">\n  <OutputFile>Client\\_generated\\Svg\\%(Filename).ts</OutputFile>\n</SvgTs>\n```\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package UI Definition Schema\nDESCRIPTION: JSON schema for the UIDefinition.json file, which contains metadata, parameters, and content used in the portal create experience.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#\",\n    \"createDefinition\": {\n        \"createBlade\": {\n            \"name\": \"[bladeName]\",\n            \"extension\": \"[extension]\"\n        },\n        \"startboardPart\": {\n            \"name\": \"[partName]\",\n            \"extension\": \"[extension]\"\n        },\n        \"startboardPartKeyId\": \"id\"\n    },\n    \"initialData\": {\n        \"model\": \"Azure Engine 3.0\"\n    },\n    \"options\": {\n        \"key\": \"value\",\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Extension with Client-Side Resource Access\nDESCRIPTION: This JSON snippet shows how to configure an Azure portal extension with client-side resource access. It includes settings for OAuth client ID and other extension details.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-onboarding-old.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Microsoft_Azure_DemoExtension\",\n    \"feedbackEmail\": \"demoextPMDev@microsoft.com\",\n    \"flags\": \"SupportsPrewarming\",\n    \"oAuthClientId\": \"abcd18b0-9c38-48c9-a847-e1ef3af0602d\",\n    \"serviceTreeId\": \"abcdbde1-a1b3-41da-be44-e3fa76a3ffc6\",\n    \"icm\": {\n        \"service\": \"Demo IcM Service\",\n        \"team\": \"Azure Demo UX\"\n    },\n    \"hostingServiceName\": \"demoextension\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Overview View Type Properties in Markdown\nDESCRIPTION: This snippet outlines the required and optional properties for the view-overviewViewType object. It specifies the title, summary, and features as mandatory fields, with fx.feature as an optional property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-overviewViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the Overview view\n|summary|True|See [Overview Summary](dx-view-overviewViewType-SummaryReference.md) for how to define summary.\n|features|True|See [Overview Cards](dx-getstarted-IconCardReference.md) for how to define cards.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Locating Extension Source File for Debugging\nDESCRIPTION: Placeholder pattern used within the browser's developer tools (e.g., using CTRL+P) to search for the core JavaScript file of a specific Azure Portal extension, enabling debugging of the extension's code. Replace `<extensionName>` with the actual name of the extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n<extensionName>ScriptsCore.js\n```\n\n----------------------------------------\n\nTITLE: Referencing Overview Blade Definition in Azure Portal Extension\nDESCRIPTION: Shows the file path for a declarative JSON file that defines an Overview blade with essentials. This is an example of building Portal views using JSON configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\n../Client/Assets/Views/ResourceOverviewWithEssentials.Dx.jsonc\n```\n\n----------------------------------------\n\nTITLE: Opting Into Resource Menu in Azure Portal AssetType (XML)\nDESCRIPTION: Demonstrates how to enable the 'ResourceMenu' in an Azure Portal custom asset by updating the AssetType XML. This snippet requires Azure Portal configuration knowledge and being on platform version 5.0.302.374 or higher. It specifies the main resource ViewModel to be used and includes the <ResourceMenu> tag for portal navigation integration. Key parameters include the AssetType name, ViewModel reference, and ResourceProvidedBy attribute. This configuration is mandatory for migration; any omitted attributes must be verified for your specific extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-resourcemenu-adoption.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\\\"MyResource\\\"\\n           ViewModel=\\\"{ViewModel Name=MyResourceViewModel, Module=./AssetViewModels/MyResourceViewModel}\\\"\\n           ...>\\n    ...\\n    <ResourceMenu ResourceProvidedBy=\\\"NoResource\\\" />\\n</AssetType>\n```\n\n----------------------------------------\n\nTITLE: Default Output Example for New Service Principal\nDESCRIPTION: Example of the output structure when no selection is made in the ServicePrincipalSelector control, showing default values and new state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalSelector.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": {\n    \"value\": \"<default guid>\"\n  },\n  \"objectId\": {\n    \"value\": [\"<default guid>\"]\n  },\n  \"password\": {\n    \"value\": \"<password>\"\n  },\n  \"certificateThumbprint\": {\n    \"value\": \"\"\n  },\n  \"newOrExisting\": {\n    \"value\": \"new\"\n  },\n  \"authenticationType\": {\n    \"value\": \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dependency Injected View Models in XML Configuration\nDESCRIPTION: Add this line to your csproj file to enable dependency injected view models in your Azure Portal extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-dependency-injection.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<EnableDependencyInjectedViewModels>true</EnableDependencyInjectedViewModels>\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript for FrameBlade Communication\nDESCRIPTION: JavaScript that handles communication between the iframe and the extension using postMessage. It includes security validation, query parameter handling, and message processing for authentication and content updates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n    \"use strict\";\n\n    // ---------------------------------------------------------------------------------------------\n    // ------------------------------------- Helper Functions --------------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    // var frameSignature = ...;  Defined by .html page that loaded this script.\n\n    // Capture the client session ID to use to correlate user actions and events within this\n    // client session.\n    let sessionId = location.hash.substr(1);\n\n    let queryMap = (function() {\n        let query = window.location.search.substring(1);\n        let parameterList = query.split(\"&\");\n        let map = {};\n        for (let i = 0; i < parameterList.length; i++) {\n            let pair = parameterList[i].split(\"=\");\n            map[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n        }\n        return map;\n    })();\n\n    function getQueryParameter(name) {\n        return queryMap[name] || \"\";\n    }\n\n    function postMessageToParent(kind) {\n        window.parent.postMessage({\n            signature: frameSignature,\n            kind: kind,\n        }, trustedParentOrigin);\n    }\n\n    // ---------------------------------------------------------------------------------------------\n    // --------------------------------------- Security Code ---------------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    // Get the below trusted origins from configuration to include the origin of the portal in\n    // which the page needs to be iframe'd.\n    let allowedParentFrameAuthorities = [\"localhost:55555\", \"portal.azure.com\"];\n    let trustedParentOrigin = (function () {\n        // Capture the client session ID to use to correlate user actions and events within this client session.\n        let sessionId = location.hash.substr(1);\n        // Parse query string\n        let parentOriginFromQueryString = (new URLSearchParams(window.location.search)).get(\"trustedAuthority\") || \"\";\n        let parentTrustedAuthority = (parentOriginFromQueryString.split(\"//\")[1] || \"\").toLowerCase();\n        let isTrustedOrigin = allowedParentFrameAuthorities.some(function (allowedOrigin) {\n            // Verify that the requested trusted authority is an allowed origin.\n            if (allowedOrigin === parentTrustedAuthority) {\n                return true;\n            }\n            // Verify that the requested trusted authority is a subdomain of an allowed origin.\n            let subdomainSuffix = \".\" + allowedOrigin; // Eg. \".portal.azure.com\"\n            return parentTrustedAuthority.length > subdomainSuffix.length && parentTrustedAuthority.slice(-subdomainSuffix.length) === subdomainSuffix;\n        });\n\n        if (!isTrustedOrigin) {\n            // Allow localhost for testing/development scenarios.\n            if (parentTrustedAuthority.indexOf(\"localhost:\") !== 0) {\n                let errorMessage = \"The origin '\" + parentTrustedAuthority + \"' is not trusted.\";\n                global.console.error(errorMessage + \" Session: \" + sessionId);\n                throw new Error(errorMessage);\n            }\n        }\n\n        return parentOriginFromQueryString;\n    })();\n\n    // ---------------------------------------------------------------------------------------------\n    // -------------------------------- Handshake Code with Portal ---------------------------------\n    // ---------------------------------------------------------------------------------------------\n\n    window.addEventListener(\"message\", function(evt) {\n        // It is critical that we only allow trusted messages through. Any domain can send a\n        // message event and manipulate the html.\n        if (evt.origin.toLowerCase() !== trustedParentOrigin) {\n            return;\n        }\n\n        let msg = evt.data;\n\n        // Check that the signature of the message matches that of frame parts.\n        if (!msg || msg.signature !== frameSignature) {\n            return;\n        }\n\n        // Handle different message kinds.\n        if (msg.kind === \"frametitle\") {\n            makeViewPresentableToUser(msg);\n        } else if (msg.kind === \"framecontent\") {\n            document.getElementsByClassName(\"fxs-frame-content\")[0].innerText = msg.data;\n        } else if (msg.kind === \"getAuthTokenResponse\") {\n\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Tab Items in Azure Portal Getstarted Blade (Markdown)\nDESCRIPTION: This snippet outlines the structure for defining items in the Properties Tab. Each item is an object with properties such as displayName, value, valueMapping, description, action, format, and more. These properties control how the item is displayed and behaves in the Azure Portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab-items.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### An array of items, where each item is of the type:\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|displayName|True|Specifies the displayName of the property item.\n|value|True|Specifies the value of the property item.\n|valueMapping|False|Specifies the valueMapping for the property item. See [here](dx-getstarted-ValueMappingWithIcon.md) on how to define a valueMapping.\n|description|False|Specifies the description for the property item.\n|action|False|Specifies the action to be taken on clicking the property item. See [here](dx-getstarted-ActionReference.md) for more.\n|format|False|Specifies the data format for the property item. See [here](dx-enum-propertiesViewItemReference-format.md) for a list of format types.\n|sourceUnits|False|Specifies the source unit for the property item. See [here](dx-enum-propertySourceUnits.md) for a list of source units.\n|maximumFractionDigits|False|Specifies the maximum fraction digits for the property item.\n|visible|False|When visible is evaluated to *true* then the property item will be displayed, otherwise it will be hidden.  Default value is **true**.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Applying Data Differentiation Color Classes in Azure Portal HTML\nDESCRIPTION: Illustrates the use of `msportalfx-bgcolor-*` CSS classes in HTML for differentiating data, such as in charts. These classes set the background color and a contrasting text color, remaining consistent across themes. Examples include the base color set and various shades and tints.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-color-palette.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"bgcolorpalette\">\n<div class=\"bgcolorcontainer\">\nBase set\n  <div class=\"msportalfx-bgcolor-a0\">msportalfx-bgcolor-a0</div>\n  <div class=\"msportalfx-bgcolor-b0\">msportalfx-bgcolor-b0</div>\n  <div class=\"msportalfx-bgcolor-c0\">msportalfx-bgcolor-c0</div>\n  <div class=\"msportalfx-bgcolor-d0\">msportalfx-bgcolor-d0</div>\n  <div class=\"msportalfx-bgcolor-e0\">msportalfx-bgcolor-e0</div>\n  <div class=\"msportalfx-bgcolor-f0\">msportalfx-bgcolor-f0</div>\n  <div class=\"msportalfx-bgcolor-g0\">msportalfx-bgcolor-g0</div>\n  <div class=\"msportalfx-bgcolor-h0\">msportalfx-bgcolor-h0</div>\n  <div class=\"msportalfx-bgcolor-i0\">msportalfx-bgcolor-i0</div>\n  <div class=\"msportalfx-bgcolor-j0\">msportalfx-bgcolor-j0</div>\n  <div class=\"msportalfx-bgcolor-k0\">msportalfx-bgcolor-k0</div>\n</div>\n<br>\n<br>\n<div class=\"bgcolorcontainer\">\nShade 1\n  <div class=\"msportalfx-bgcolor-a1\">msportalfx-bgcolor-a1</div>\n  <div class=\"msportalfx-bgcolor-b1\">msportalfx-bgcolor-b1</div>\n  <div class=\"msportalfx-bgcolor-c1\">msportalfx-bgcolor-c1</div>\n  <div class=\"msportalfx-bgcolor-d1\">msportalfx-bgcolor-d1</div>\n  <div class=\"msportalfx-bgcolor-e1\">msportalfx-bgcolor-e1</div>\n  <div class=\"msportalfx-bgcolor-f1\">msportalfx-bgcolor-f1</div>\n  <div class=\"msportalfx-bgcolor-g1\">msportalfx-bgcolor-g1</div>\n  <div class=\"msportalfx-bgcolor-h1\">msportalfx-bgcolor-h1</div>\n  <div class=\"msportalfx-bgcolor-i1\">msportalfx-bgcolor-i1</div>\n  <div class=\"msportalfx-bgcolor-j1\">msportalfx-bgcolor-j1</div>\n  <div class=\"msportalfx-bgcolor-k1\">msportalfx-bgcolor-k1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nShade 2\n  <div class=\"msportalfx-bgcolor-a0s1\">msportalfx-bgcolor-a0s1</div>\n  <div class=\"msportalfx-bgcolor-b0s1\">msportalfx-bgcolor-b0s1</div>\n  <div class=\"msportalfx-bgcolor-c0s1\">msportalfx-bgcolor-c0s1</div>\n  <div class=\"msportalfx-bgcolor-d0s1\">msportalfx-bgcolor-d0s1</div>\n  <div class=\"msportalfx-bgcolor-e0s1\">msportalfx-bgcolor-e0s1</div>\n  <div class=\"msportalfx-bgcolor-f0s1\">msportalfx-bgcolor-f0s1</div>\n  <div class=\"msportalfx-bgcolor-g0s1\">msportalfx-bgcolor-g0s1</div>\n  <div class=\"msportalfx-bgcolor-h0s1\">msportalfx-bgcolor-h0s1</div>\n  <div class=\"msportalfx-bgcolor-i0s1\">msportalfx-bgcolor-i0s1</div>\n  <div class=\"msportalfx-bgcolor-j0s1\">msportalfx-bgcolor-j0s1</div>\n  <div class=\"msportalfx-bgcolor-k0s1\">msportalfx-bgcolor-k0s1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nShade 3\n  <div class=\"msportalfx-bgcolor-a0s2\">msportalfx-bgcolor-a0s2</div>\n  <div class=\"msportalfx-bgcolor-b0s2\">msportalfx-bgcolor-b0s2</div>\n  <div class=\"msportalfx-bgcolor-c0s2\">msportalfx-bgcolor-c0s2</div>\n  <div class=\"msportalfx-bgcolor-d0s2\">msportalfx-bgcolor-d0s2</div>\n  <div class=\"msportalfx-bgcolor-e0s2\">msportalfx-bgcolor-e0s2</div>\n  <div class=\"msportalfx-bgcolor-f0s2\">msportalfx-bgcolor-f0s2</div>\n  <div class=\"msportalfx-bgcolor-g0s2\">msportalfx-bgcolor-g0s2</div>\n  <div class=\"msportalfx-bgcolor-h0s2\">msportalfx-bgcolor-h0s2</div>\n  <div class=\"msportalfx-bgcolor-i0s2\">msportalfx-bgcolor-i0s2</div>\n  <div class=\"msportalfx-bgcolor-j0s2\">msportalfx-bgcolor-j0s2</div>\n  <div class=\"msportalfx-bgcolor-k0s2\">msportalfx-bgcolor-k0s2</div>\n</div>\n<br>\n<br>\n<div class=\"bgcolorcontainer\">\nTint 1\n  <div class=\"msportalfx-bgcolor-a2\">msportalfx-bgcolor-a2</div>\n  <div class=\"msportalfx-bgcolor-b2\">msportalfx-bgcolor-b2</div>\n  <div class=\"msportalfx-bgcolor-c2\">msportalfx-bgcolor-c2</div>\n  <div class=\"msportalfx-bgcolor-d2\">msportalfx-bgcolor-d2</div>\n  <div class=\"msportalfx-bgcolor-e2\">msportalfx-bgcolor-e2</div>\n  <div class=\"msportalfx-bgcolor-f2\">msportalfx-bgcolor-f2</div>\n  <div class=\"msportalfx-bgcolor-g2\">msportalfx-bgcolor-g2</div>\n  <div class=\"msportalfx-bgcolor-h2\">msportalfx-bgcolor-h2</div>\n  <div class=\"msportalfx-bgcolor-i2\">msportalfx-bgcolor-i2</div>\n  <div class=\"msportalfx-bgcolor-j2\">msportalfx-bgcolor-j2</div>\n  <div class=\"msportalfx-bgcolor-k2\">msportalfx-bgcolor-k2</div>\n</div>\n<div class=\"bgcolorcontainer\">\nTint 2\n  <div class=\"msportalfx-bgcolor-a0t1\">msportalfx-bgcolor-a0t1</div>\n  <div class=\"msportalfx-bgcolor-b0t1\">msportalfx-bgcolor-b0t1</div>\n  <div class=\"msportalfx-bgcolor-c0t1\">msportalfx-bgcolor-c0t1</div>\n  <div class=\"msportalfx-bgcolor-d0t1\">msportalfx-bgcolor-d0t1</div>\n  <div class=\"msportalfx-bgcolor-e0t1\">msportalfx-bgcolor-e0t1</div>\n  <div class=\"msportalfx-bgcolor-f0t1\">msportalfx-bgcolor-f0t1</div>\n  <div class=\"msportalfx-bgcolor-g0t1\">msportalfx-bgcolor-g0t1</div>\n  <div class=\"msportalfx-bgcolor-h0t1\">msportalfx-bgcolor-h0t1</div>\n  <div class=\"msportalfx-bgcolor-i0t1\">msportalfx-bgcolor-i0t1</div>\n  <div class=\"msportalfx-bgcolor-j0t1\">msportalfx-bgcolor-j0t1</div>\n  <div class=\"msportalfx-bgcolor-k0t1\">msportalfx-bgcolor-k0t1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nTint 3\n  <div class=\"msportalfx-bgcolor-a0t2\">msportalfx-bgcolor-a0t2</div>\n  <div class=\"msportalfx-bgcolor-b0t2\">msportalfx-bgcolor-b0t2</div>\n  <div class=\"msportalfx-bgcolor-c0t2\">msportalfx-bgcolor-c0t2</div>\n  <div class=\"msportalfx-bgcolor-d0t2\">msportalfx-bgcolor-d0t2</div>\n  <div class=\"msportalfx-bgcolor-e0t2\">msportalfx-bgcolor-e0t2</div>\n  <div class=\"msportalfx-bgcolor-f0t2\">msportalfx-bgcolor-f0t2</div>\n  <div class=\"msportalfx-bgcolor-g0t2\">msportalfx-bgcolor-g0t2</div>\n  <div class=\"msportalfx-bgcolor-h0t2\">msportalfx-bgcolor-h0t2</div>\n  <div class=\"msportalfx-bgcolor-i0t2\">msportalfx-bgcolor-i0t2</div>\n  <div class=\"msportalfx-bgcolor-j0t2\">msportalfx-bgcolor-j0t2</div>\n  <div class=\"msportalfx-bgcolor-k0t2\">msportalfx-bgcolor-k0t2</div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Settings in JSON Format\nDESCRIPTION: Equivalent JSON configuration format for extension settings. This shows how settings defined in web.config are represented in JSON configuration files.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mySetting\": \"myValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining resourceScopeControl-resourceScopeSubscription Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the resourceScopeControl-resourceScopeSubscription object. It includes optional properties for constraints, resource providers, and a feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-resourceScopeControl-resourceScopeSubscription.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|constraints|False|See [here](dx-resourceConstraints-validations.md) for more on constraints.\n|resourceProviders|False|Array of strings, where each string denotes a resource provider).\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Stamping Extension Version using C# Assembly Attributes\nDESCRIPTION: Defines assembly-level attributes `AssemblyFileVersion` and `AssemblyInformationalVersionAttribute` in C#. The Azure Portal shell uses these attributes at runtime to determine the extension's version for tasks like invalidating cached manifests and content. The informational version is preferred, falling back to the file version if the former is absent. This version is accessible via `window.fx.environment.version` in the browser console.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-versioning.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[assembly: System.Reflection.AssemblyFileVersion(\"5.0.0.56\")]\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"5.0.0.56 (COMPUTER.150701-1627)\")]\n```\n\n----------------------------------------\n\nTITLE: Referencing DataSource Properties\nDESCRIPTION: Shows how to reference and use properties from a defined dataSource using the dataSources function syntax.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeDataSources.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"[dataSources('mygraph').displayName]\"\n```\n\n----------------------------------------\n\nTITLE: Sideloading an Azure Portal Extension via JavaScript in C#\nDESCRIPTION: This C# snippet shows how to sideload a deployed Azure Portal extension for testing after successful authentication. It first signs into the portal using `PortalAuthentication.SignInAndSkipPostValidation`. Then, it checks for and handles any untrusted extension prompts using `CheckAndClickExtensionTrustPrompt`. Finally, it executes a JavaScript command (`MsPortalImpl.Extension.registerTestExtension`) via the `IJavaScriptExecutor` interface to register the test extension and reloads the portal to apply the changes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign into the portal\nportalAuth.SignInAndSkipPostValidation(userName: \"\", /** The account login to use.  Note Multi Factor Authentication (MFA) is not supported, you must use an account that does not require MFA **/\n    password: \"\", /** The account password **/\n    tenantDomainName: string.Empty, /** the tenant to login to, set only if you need to login to a specific tenant **/\n    query: \"feature.canmodifyextensions=true\", /** Query string to use when navigating to the portal.  **/ \n    fragment: \"#\" /** The hash fragment, use this to optionally navigate directly to your resource on sign in. **/);\n//config#navigateToPortal\n\n// Check for and click the Untrusted Extension prompt if its present\nMicrosoft.Portal.TestFramework.Core.Shell.Portal.CheckAndClickExtensionTrustPrompt(webDriver);\nvar portal = Microsoft.Portal.TestFramework.Core.Shell.Portal.FindPortal(webDriver, false);\n\n// Register a deployed extension via javascript and then reload the portal.  Not required if using the query string method to load from localhost\n(webDriver as IJavaScriptExecutor).ExecuteScript(\"MsPortalImpl.Extension.registerTestExtension({ name: \\\"SamplesExtension\\\", uri: \\\"https://df.onecloud.azure-test.net/Samples\\\"});\");\nportal.WaitForPortalToReload(() => webDriver.Navigate().Refresh());\n\n// Check for and click the Untrusted Extension prompt if its present\nMicrosoft.Portal.TestFramework.Core.Shell.Portal.CheckAndClickExtensionTrustPrompt(webDriver);\nportal = Microsoft.Portal.TestFramework.Core.Shell.Portal.FindPortal(webDriver, false);\n```\n\n----------------------------------------\n\nTITLE: Custom Deployment URIFormat Configuration\nDESCRIPTION: Example of URIFormat configuration for extensions not using the hosting service\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nuri: \"//main.demo.ext.azure.com\",\nuriFormat: \"//{0}.demo.ext.azure.com\",\n```\n\n----------------------------------------\n\nTITLE: UIDefinition JSON for Marketplace Package\nDESCRIPTION: JSON configuration for creating a custom Marketplace package that uses the Deploy to Azure blade. This enables template-based deployment through the Azure Marketplace.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-deploytoazure.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#\",\n    \"createDefinition\": {\n        \"createBlade\": {\n            \"name\": \"DeployToAzure\",\n            \"extension\": \"HubsExtension\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Field Validation - C#\nDESCRIPTION: This C# snippet validates a textbox field's value using asynchronous server-side validation. It assigns a value to the field, then polls the IsValid property with WaitUntil for eventual consistency. This approach is preferable to Assert for validations dependent on asynchronous events. Dependencies: form object, webDriver, Textbox class. Inputs: field identifier, string value. Output: None; assertion by WaitUntil.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar field = form.FindField<Textbox>(\"contactName\");\nfield.Value = contactName + Keys.Tab;\nwebDriver.WaitUntil(() => field.IsValid, \"The 'contactName' field did not pass validations.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.KeyVault.KeyVaultCertificateSelector in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.KeyVault.KeyVaultCertificateSelector control in JSON. It includes properties for name, type, visibility, tooltip, scope, and label. The scope is used to filter certificates by subscription ID and location.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.KeyVault.KeyVaultCertificateSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"keyVaultCertificateSelection\",\n    \"type\": \"Microsoft.KeyVault.KeyVaultCertificateSelector\",\n    \"visible\": true,\n    \"toolTip\": \"Select certificate\",\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"label\": \"KeyVault certificates selection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Atomization in C# Model\nDESCRIPTION: C# code showing how to configure data atomization for a model class using TypeMetadataModel attribute.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_52\n\nLANGUAGE: cs\nCODE:\n```\n[TypeMetadataModel(typeof(Robot), \"SamplesExtension.DataModels\", true /* Safe to unify entity as Robot IDs are globally unique. */)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension URI Format in Azure Portal\nDESCRIPTION: Example of extension configuration with uriFormat parameter that allows loading different versions of an extension based on specified parameters. This enables accessing secondary configurations when the feature.canmodifystamps flag is used.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nname: \"Microsoft_Azure_Demo\",\nuri: \"//main.demo.ext.azure.com\",\nuriFormat: \"//{0}.demo.ext.azure.com\",\n. . .\nhttps://portal.azure.com?feature.canmodifystamps=true&Microsoft_Azure_Demo=perf\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Warning Icon in Azure Portal\nDESCRIPTION: SVG definition for the Warning icon that can be accessed through MsPortalFx.Base.Images.Warning(). The icon shows a triangular warning symbol with an exclamation mark.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_186\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<path fill=\"#FF8C00\" d=\"M14.697,15H8.001H1.302c-1.067,0-1.629-1.108-1.102-2.007l3.38-5.94L6.926,1.46\n\tc0.537-0.901,1.605-0.914,2.128-0.014l3.392,5.821l3.346,5.741C16.325,13.903,15.788,15,14.697,15z\"/>\n<circle fill=\"#FFFFFF\" cx=\"8\" cy=\"11.761\" r=\"1.093\"/>\n<polygon fill=\"#FFFFFF\" points=\"8.218,5.094 7.891,5.094 7.075,5.094 7.367,10.161 7.891,10.161 8.218,10.161 8.743,10.161 \n\t9.036,5.094 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Storage Icon SVG\nDESCRIPTION: SVG vector graphic defining the Azure Storage icon with gray and lime green color scheme showing storage container layers\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_79\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M0,45.1c0,1,0.8,1.9,1.8,1.9h46.3c1,0,1.9-0.8,1.9-1.9V12H0V45.1z\"/>\n<path fill=\"#7A7A7A\" d=\"M48.1,4.1H1.8C0.8,4.1,0,5,0,6v6h50V6c0-1-0.8-1.6-1.9-1.6\"/>\n<rect x=\"4\" y=\"25.5\" fill=\"#B8D432\" width=\"42\" height=\"7\"/>\n<rect x=\"4\" y=\"15\" fill=\"#FFFFFF\" width=\"42\" height=\"7\"/>\n<rect x=\"4\" y=\"36\" fill=\"#B8D432\" width=\"42\" height=\"7\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M2,4C0.9,4,0,4.9,0,6v7.3v3.3v28c0,1.1,0.9,2,2,2h2.2L43.6,4H2z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Filename Pattern for Ev2 Friendly Name Removal\nDESCRIPTION: This snippet shows the filename pattern for the Ev2 deployment file used to remove a friendly name. To remove a specific friendly name, execute an Ev2 deployment using a file named according to this pattern, replacing `<friendlyName>` with the actual name to be removed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nRolloutspec.RemoveFriendlyName.<friendlyName>.json\n```\n\n----------------------------------------\n\nTITLE: Example DatePicker Output (Date and Time) in JSON\nDESCRIPTION: This JSON string illustrates the output format of a DatePicker component when both date and a specific time (17:00:00 in this case) are selected. It includes the date, time, and timezone information (GMT-0700, Pacific Daylight Time).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DatePicker-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Fri Aug 05 2022 17:00:00 GMT-0700 (Pacific Daylight Time)\"\n```\n\n----------------------------------------\n\nTITLE: Content Unbundler Target Import\nDESCRIPTION: XML configuration to import Content Unbundler targets in project file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <Import Project=\"$(PkgMicrosoft_Portal_Tools_ContentUnbundler)\\build\\Microsoft.Portal.Tools.ContentUnbundler.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CSS Files for Azure Portal Extensions\nDESCRIPTION: Example of creating a custom CSS file for an Azure Portal extension. CSS class names must start with the '.ext-' prefix to identify classes owned by the extension. This example creates a styled warning box.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.ext-too-many-clicks-box {\n    color: red;\n    border: 2px dotted red;\n    padding: 8px;\n    text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Control Module in TypeScript\nDESCRIPTION: Shows how to import a control module from the Fx/Controls framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-controls.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as <alias> from \"Fx/Controls/<ControlName>\";\n```\n\n----------------------------------------\n\nTITLE: Importing VM Policy Field in TypeScript\nDESCRIPTION: This snippet shows how to import the VM Policy Field for use in React components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-adding-policy-validation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VMPolicyField } from \"./CreateExperienceVMPolicy\";\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to IFrame\nDESCRIPTION: TypeScript example of sending a message from the Ibiza extension to the IFrame.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.postMessage(new FxAppBlade.Message(\"favoriteAnimal\", \"porcupine\"));\n```\n\n----------------------------------------\n\nTITLE: Defining VaultProperties Interface in TypeScript\nDESCRIPTION: Defines the interface for KeyVault properties, including SKU, tenant ID, access policies, and various enabled flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface VaultProperties {\n    sku: KnockoutObservable<Sku>;\n    tenantId: KnockoutObservable<string>;\n    accessPolicies: KnockoutObservableArray<AccessPolicy>;\n    enabledForDeployment: KnockoutObservable<boolean>;\n    enabledForDiskEncryption: KnockoutObservable<boolean>;\n    enabledForTemplateDeployment: KnockoutObservable<boolean>;\n    vaultUri: KnockoutObservable<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Gitdown Content Include Structure\nDESCRIPTION: Markdown structure using gitdown includes to organize documentation about Portal test frameworks and testing guidelines\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-test.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"gitdown\": \"contents\", \"maxLevel\": 2\n\n<a name=\"portal-test-frameworks\"></a>\n# Portal Test Frameworks\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-choosing-test-framework.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-test.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/top-extensions-node-js-test-framework.md\"\n```\n\n----------------------------------------\n\nTITLE: Querying Part Failures Summary in Kusto\nDESCRIPTION: Kusto query to get a summary of part failures within a specified time range and extension. Returns details about error occurrences, affected users/sessions, and error samples.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-reliability.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nGetPartFailuresSummary(ago(1d), now())\n| where extension contains \"Microsoft_Azure_Compute\"\n```\n\n----------------------------------------\n\nTITLE: Finding StartBoard Part - Framework Method\nDESCRIPTION: Shows the simplified approach using built-in framework method to find a StartBoard part by title.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = portal.StartBoard.FindSinglePartByTitle(\"TheTitle\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Portal Developer CLI\nDESCRIPTION: Command to install the Azure Portal Developer CLI globally using npm, with a note about specifying versions and authentication.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @microsoft/azureportalcli\n```\n\n----------------------------------------\n\nTITLE: Complex Dialog with Custom Template\nDESCRIPTION: Implementation of a dialog with complex UI elements using custom HTML template and ViewModel.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-dialogs.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { container } = this.context;\nconst dialogViewModel = {\n    slider: Slider.createSimpleSlider(container, {\n        label: ClientResources.slider,\n        max: 10,\n        min: 0,\n        value: 8,\n        ariaLabel: ClientResources.sliderAriaLabel,\n    }),\n};\nconst dialogContent: HtmlContent = {\n    htmlTemplate: `<div data-bind='pcControl: slider'></div>`,\n    viewModel: dialogViewModel,\n};\n\ncontainer.openDialog({\n    telemetryName: \"DialogWithCustomTemplate\",\n    title: ClientResources.Dialog.Template.title,\n    content: dialogContent,\n    buttons: DialogButtons.OK,\n    target: evt.target,\n});\n```\n\n----------------------------------------\n\nTITLE: Vault Picker PDL Configuration in XML\nDESCRIPTION: XML configuration for adding the vault picker blade action to the portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<BladeAction Blade =\"{BladeReference VaultPicker, ExtensionName=Microsoft_Azure_KeyVault}\"\n                   ParameterCollector =\"vaultPickerCollector\">\n      </BladeAction>\n```\n\n----------------------------------------\n\nTITLE: Consuming Generated TypeMetadata in TypeScript\nDESCRIPTION: Example of using generated TypeMetadata and data models within a QueryCache in TypeScript.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_50\n\nLANGUAGE: ts\nCODE:\n```\nimport { Computer, ComputerMetadata } from \"_generated/SamplesExtension/DataModels/Computer\";\n...\n\npublic computersQuery = new MsPortalFx.Data.QueryCache<Computer, any>({\n    entityTypeName: ComputerMetadata.name,\n    sourceUri: () => Util.appendSessionId(ComputerData._apiRoot),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Authentication Test Query Parameter\nDESCRIPTION: Query string parameter format for testing extension authentication configuration on a specific friendly name stamp. Enables reading authorization configuration from the specified stamp for testing purposes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n?Contoso_Extension_authstamp=foobar\n```\n\n----------------------------------------\n\nTITLE: Updating a Robot and Refreshing All Data in QueryCache with TypeScript\nDESCRIPTION: This code shows how to update a robot entity via a PUT request and then refresh all data in the underlying robotsQuery cache. The refreshAll method triggers new AJAX calls for each entry in the cache to ensure data consistency.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npublic updateRobot(robot: Robot): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: RobotData._apiRoot + robot.name(),\n        type: \"PUT\",\n        contentType: \"application/json\",\n        data: ko.toJSON(robot),\n    }).then(() => {\n        // This will refresh the set of data that is available in the underlying data cache.\n        this.robotsQuery.refreshAll();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Browser Icon in Azure Portal\nDESCRIPTION: SVG markup for the Browser icon used in the Azure Portal. The design shows a browser window with blue and gray elements representing a web interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_9\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M0.5,45.127c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V13.798h-50V45.127z\"/>\n<path fill=\"#A0A1A2\" d=\"M48.493,4.5H2.507C1.398,4.5,0.5,5.398,0.5,6.507v10.627h50V6.507C50.5,5.398,49.601,4.5,48.493,4.5\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M2.514,4.5c-1.108,0-2.007,0.898-2.007,2.007v7.291v3.336v27.993\n\tc0,1.108,0.899,2.007,2.007,2.007h2.188L44.12,4.5H2.514z\"/>\n<rect x=\"13.357\" y=\"9.279\" fill=\"#FFFFFF\" width=\"33.671\" height=\"3.942\"/>\n<path fill=\"#59B4D9\" d=\"M11.81,11.183c0,2.693-2.184,4.878-4.878,4.878s-4.878-2.185-4.878-4.878c0-2.694,2.184-4.879,4.878-4.879\n\tC9.625,6.304,11.81,8.489,11.81,11.183\"/>\n<polygon fill=\"#FFFFFF\" points=\"6.416,11.732 8.629,14.068 7.428,14.068 4.469,11.25 7.417,8.432 8.615,8.432 6.416,10.754 \n\t11.809,10.754 11.809,11.732 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Web Environment Icon in Azure Portal\nDESCRIPTION: SVG code representing a web environment icon used in the Azure Portal. Features a blue globe/earth with a network diagram overlay and a green bar at the bottom to represent web hosting environment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_88\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#B8D432\" points=\"50,43.012 0,43.012 6,32.012 44,32.012 \"/>\n<path fill=\"#59B4D9\" d=\"M35.387,34.763c-3.069,2.347-6.684,3.489-10.274,3.489c-5.094,0-10.131-2.287-13.46-6.64\n\tC5.966,24.186,7.37,13.566,14.809,7.876c3.067-2.361,6.687-3.487,10.273-3.487c5.094,0,10.132,2.287,13.46,6.645\n\tC44.23,18.457,42.812,29.079,35.387,34.763\"/>\n<path fill=\"#FFFFFF\" d=\"M32.276,24.289c1.23,1.604,3.513,1.894,5.108,0.68c0.083-0.063,0.148-0.141,0.224-0.209\n\tc1.632,1.149,2.901,2.001,3.54,2.436c0.189-0.49,0.315-0.954,0.449-1.445c-0.675-0.502-1.718-1.303-3.037-2.372\n\tc0.433-1.138,0.296-2.465-0.494-3.503c-1.13-1.463-3.133-1.835-4.698-0.933c-1.725-1.547-3.619-3.32-5.617-5.306\n\tc6.208-3.339,10.619-2.85,10.619-2.85c-0.736-0.939-1.562-1.761-2.443-2.504c-2.618-0.404-6.685-0.359-11.332,2.113l-0.002-0.002\n\tl-0.001,0c-1.549-1.621-3.125-3.358-4.73-5.224c-0.768,0.246-1.519,0.55-2.244,0.912c1.185,1.939,2.779,3.894,4.575,5.802h0\n\tc0.007,0.007,0.014,0.014,0.021,0.021c-1.491,1.046-3.188,2.452-4.713,4.065c-0.196,0.209-0.385,0.42-0.571,0.631\n\tc-0.919-0.192-1.886-0.136-2.789,0.191c-1.534-3.309-1.411-5.967-1.168-7.337c-0.666,0.698-1.288,1.431-1.824,2.213\n\tc-0.4,1.637-0.514,3.996,0.667,6.839c-1.368,1.79-1.432,4.328-0.004,6.2c0.119,0.155,0.246,0.299,0.379,0.437\n\tc-0.624,2.125-0.903,4.175-0.989,5.935c0.161,0.218,0.161,0.394,0.32,0.607c0.812,1.042,1.839,2.027,2.824,2.822\n\tc-0.122-1.862,0.003-4.717,1.155-7.81c0.795,0.06,1.603-0.065,2.359-0.383c0.434,0.382,0.887,0.767,1.372,1.159\n\tc1.661,1.315,3.319,2.339,4.935,3.145c-0.084,0.822,0.122,1.676,0.656,2.383c1.141,1.474,3.255,1.749,4.73,0.622\n\tc0.307-0.235,0.549-0.519,0.75-0.824c2.635,0.587,4.936,0.69,6.643,0.69c0.261,0,1.475-1.65,2.17-2.673\n\tc-1.039,0.218-4.121,0.641-8.332-0.569c-0.102-0.472-0.296-0.932-0.608-1.341c-1.07-1.402-3.026-1.705-4.483-0.767\n\tc-1.464-0.794-2.997-1.789-4.578-3.041c-0.319-0.252-0.625-0.505-0.92-0.757c0.966-1.522,1.069-3.473,0.216-5.114\n\tc0.194-0.194,0.384-0.388,0.59-0.581c1.565-1.462,3.038-2.633,4.416-3.573c-0.042-0.038-0.078-0.114-0.118-0.153\n\tc0.041,0.038,0.079,0.08,0.12,0.08h-0.001c2.114,2,4.356,3.843,6.479,5.498C31.334,21.688,31.422,23.173,32.276,24.289z\"/>\n<rect y=\"43\" fill=\"#7A7A7A\" width=\"50\" height=\"3\"/>\n<rect y=\"43\" opacity=\"0.5\" fill=\"#DD5900\" width=\"50\" height=\"3\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Cache Icon in Azure Portal\nDESCRIPTION: SVG markup for the Cache icon used in the Azure Portal. The icon shows a multi-layered design with blue and green elements representing data storage or caching mechanisms.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_12\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\nwidth=\"50px\" height=\"50px\"  viewBox=\"0 0 300 250\" enable-background=\"new 0 0 300 250\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M25,35.5V216c0,19,42,34,93.5,34V35.5H25z\"/>\n<path fill=\"#59B4D9\" d=\"M117.5,250h1.5c52,0,93.5-15,93.5-34V35.5h-95V250z\"/>\n<path fill=\"#FFFFFF\" d=\"M212.5,35.5c0,18.5-42,34-93.5,34S25,54,25,35.5s42-34,93.5-34S212.5,17,212.5,35.5\"/>\n<path fill=\"#7FBA00\" d=\"M193.5,33.5C193.5,46,160,56,119,56S44,46,44,33.5S77.5,11,118.5,11S193.5,21,193.5,33.5\"/>\n<path fill=\"#B8D432\" d=\"M177.5,47c10-4,15.5-8.5,15.5-13.5C193,21,159.5,11,118.5,11S44,21,44,33.5c0,5,6,10,15.5,13.5\n\tc13.5-5.5,35-8.5,59-8.5S164,42,177.5,47\"/>\n<path fill=\"#0072C6\" d=\"M144,107v120.5c0,12.5,28,22.5,62.5,22.5V107H144z\"/>\n<path fill=\"#0072C6\" d=\"M205.5,250h1c34.5,0,62.5-10,62.5-22.5V107h-63.5V250z\"/>\n<path opacity=\"0.15\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M205.5,250h1c34.5,0,62.5-10,62.5-22.5V107h-63.5V250z\"/>\n<path fill=\"#FFFFFF\" d=\"M269,107c0,12.5-28,22.5-62.5,22.5S144,119.5,144,107s28-22.5,62.5-22.5S269,94.5,269,107\"/>\n<path fill=\"#7FBA00\" d=\"M256,105.5c0,8-22.5,15-49.5,15s-49.5-6.5-49.5-15c0-8,22.5-15,49.5-15S256,97.5,256,105.5\"/>\n<path fill=\"#B8D432\" d=\"M245.5,114.5c6.5-2.5,10.5-5.5,10.5-9c0-8-22.5-15-49.5-15c-27.5,0-49.5,6.5-49.5,15c0,3.5,4,6.5,10.5,9\n```\n\n----------------------------------------\n\nTITLE: Referencing AssetViewModel in AssetType XML\nDESCRIPTION: This XML snippet shows how to reference the AssetViewModel from the AssetType definition in the PDL file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"MyResource\"\n           ...\n           ViewModel=\"{ViewModel Name=MyResourceViewModel, Module=./AssetViewModels/MyResourceViewModel}\">\n```\n\n----------------------------------------\n\nTITLE: Launching an Azure Portal Extension\nDESCRIPTION: Commands to launch the Azure Portal extension using different methods including command prompt, VS Code, or Visual Studio.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nap start\n```\n\n----------------------------------------\n\nTITLE: Analyzing Menu Blade Context for Print Requests\nDESCRIPTION: KQL query to examine menu blade context during print operations over the last day for non-internal users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-printing.md#2025-04-23_snippet_3\n\nLANGUAGE: kql\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp > ago(1d)\n| where userTypeHint == \"\"\n| where action == \"PrintRequest\"\n| extend datajson = parse_json(data)\n| extend ctxMenu = tostring(datajson.menuBladeCtx)\n| summarize count() by ctxMenu, name\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Key-Value Pairs for Localization in JSON - JSON\nDESCRIPTION: This example shows the structure of a Strings.resjson file used for localizing display strings in an Azure Portal extension. The file is a JSON object where each key represents a unique identifier for a display string and the associated value is the localized display name. This file must reside in the same directory as DeploymentTemplate.json and CreateForm.Dx.json. No external dependencies are required, but the extension must be configured for localization and all display strings should have corresponding keys in this file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cuid.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceName\": \"Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with Custom Conditions in Azure Portal (C#)\nDESCRIPTION: This snippet illustrates how to use FindElements method with LINQ to locate parts based on custom conditions. It uses WebDriver.WaitUntil for polling until the condition is met or a timeout occurs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar errorPart = webDriver.WaitUntil(() => blade.FindElements<Part>()\n                                               .FirstOrDefault(p => p.Text.Contains(\"Send Error\")),\n\t\t\t\t\t\t\t\t\t\"Could not find a part with a Send Error text.\");\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: Extensions\nDESCRIPTION: SVG markup for an extensions icon showing interconnected colored blocks. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.Extensions() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_28\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 100 100\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\">\n<rect x=\"30\" y=\"42\" fill=\"#59B4D9\" width=\"28\" height=\"28\"/>\n<polygon fill=\"#804998\" points=\"56,0 56,22 78,22 78,44 100,44 100,0 \"/>\n<polygon fill=\"#A0A1A2\" points=\"22,78 22,34 38,34 38,12 0,12 0,100 88,100 88,60 66.2,60 66.2,78 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Data Model for Type Metadata Generation (Computer)\nDESCRIPTION: Placeholder for the C# class definition of `Computer` within the `SamplesExtension.DataModels` project. This class, decorated with `[TypeMetadataModel]` and referencing `ComputerComponent`, enables the generation of its TypeScript interface and metadata, including handling the nested collection. Note: The provided code snippet is empty, the description reflects the intended content based on context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Canceled Icon in SVG\nDESCRIPTION: SVG code that defines a canceled icon using a circle with a diagonal line through it. The icon uses paths to create the shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_112\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<path d=\"M8,0C3.582,0,0,3.582,0,8s3.582,8,8,8s8-3.582,8-8S12.418,0,8,0z M8,13.5c-3.038,0-5.5-2.462-5.5-5.5\n\tS4.962,2.5,8,2.5s5.5,2.462,5.5,5.5S11.038,13.5,8,13.5z\"/>\n<rect x=\"7\" y=\"0.988\" transform=\"matrix(0.7071 -0.7071 0.7071 0.7071 -3.3137 8)\" width=\"2\" height=\"14.024\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: Download\nDESCRIPTION: SVG markup for a download icon showing an arrow pointing downward in a blue window. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.Download() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_26\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M32.426,38.534h-1.191h-11.79H18.83c1.634,5.768-0.561,6.595-10.175,6.595v3.02h12.227h8.927h11.538v-3.02\n\tC31.733,45.129,30.79,44.305,32.426,38.534\"/>\n<path fill=\"#A0A1A2\" d=\"M46.98,2H2.718C1.214,2,0.001,3.345,0.001,4.847v30.866c0,1.493,1.213,2.823,2.717,2.823H46.98\n\tc1.501,0,3.021-1.33,3.021-2.823V4.847C50.001,3.341,48.481,2,46.98,2\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M47.011,2.003c-0.011,0-0.021-0.002-0.031-0.002H2.717\n\tC1.213,2.001,0,3.345,0,4.848v30.865c0,1.494,1.213,2.824,2.717,2.824H3.77L47.011,2.003z\"/>\n<polygon fill=\"#59B4D9\" points=\"46.212,5.848 46.212,34.689 3.79,34.689 3.79,5.848 46.212,5.786 \"/>\n<polygon fill=\"#FFFFFF\" points=\"26.43,20.575 33.333,14.027 33.333,17.58 25.003,26.331 16.666,17.611 16.666,14.069 23.532,20.575 \n\t23.532,6.977 26.43,6.977 \"/>\n<rect x=\"17.778\" y=\"29.18\" fill=\"#FFFFFF\" width=\"14.445\" height=\"3.333\"/>\n<rect x=\"8.655\" y=\"45.128\" fill=\"#A0A1A2\" width=\"32.692\" height=\"3.021\"/>\n<path fill=\"#B8D432\" d=\"M25.518,4.095c0,0.392-0.318,0.71-0.71,0.71c-0.393,0-0.709-0.318-0.709-0.71c0-0.393,0.316-0.71,0.709-0.71\n\tC25.2,3.385,25.518,3.702,25.518,4.095\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Setting IsDevelopmentMode to False via web.config Transform in XML\nDESCRIPTION: This XML snippet demonstrates how to use a `web.Release.config` transform (XDT) to set the `IsDevelopmentMode` application setting to `false`. This configuration is often necessary to ensure the build output zip file is named according to the build version rather than the default 'HostingSvc.zip'. It uses `xdt:Transform=\"SetAttributes\"` and `xdt:Locator=\"Match(key)\"` to find and modify the specific application setting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- For more information on using web.config transformation visit https://go.microsoft.com/fwlink/?LinkId=125889 -->\n    <configuration xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\">\n        <appSettings>\n            <!-- dont forget to ensure the Key is correct for your specific extension -->\n        <add key=\"Microsoft.Portal.Extensions.Monitoring.ApplicationConfiguration.IsDevelopmentMode\" value=\"false\" xdt:Transform=\"SetAttributes\" xdt:Locator=\"Match(key)\"/>\n        </appSettings>\n    </configuration>\n```\n\n----------------------------------------\n\nTITLE: Enabling Pseudo-localization via URL Query Parameter\nDESCRIPTION: This shows a URL example demonstrating how to enable client-side pseudo-localization for testing string externalization. Appending `?l=qps-ploc` to the development URL activates this mode, helping verify that strings originate from .resx files.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-localization-globalization.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nhttp://localhost:12000?l=qps-ploc\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Notifications with NotificationDefinition in PDL (v1)\nDESCRIPTION: Shows the XML structure for defining a notification's metadata within a PDL file, used in conjunction with the v1 Notifications API. It specifies the `EventSource`, `EventType`, and links to resource strings for the notification's `Label` and `Message`. This definition is no longer required in Notifications v4.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<NotificationDefinition\n    EventSource=\"eventSource\"\n    EventType=\"eventType\"\n    Label=\"{Resource myEventLabel, Module=MyExtension/MyClientStrings}\"\n    Message=\"{Resource myEventMessage, Module=MyExtension/MyClientStrings}\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Form Control Properties JSON Schema\nDESCRIPTION: Defines the schema for form controls without resource scope, focusing on checkbox implementation. Includes required and optional properties like name, type, label, defaultValue, tooltip, constraints, and visibility settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-formControlsWithoutResourceScope.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"type\": \"Microsoft.Common.CheckBox\",\n  \"label\": \"string\",\n  \"defaultValue\": \"boolean\",\n  \"toolTip\": \"string\",\n  \"constraints\": \"object\",\n  \"visible\": \"boolean\",\n  \"fx.feature\": \"any\"\n}\n```\n\n----------------------------------------\n\nTITLE: CDN Package Reference in XML\nDESCRIPTION: XML configuration for adding CDN extension package reference in CoreXT environment.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<package id=\"Microsoft.Portal.Extensions.Cdn\" version=\"1.0.13.177\" />\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Localization Folder Structure\nDESCRIPTION: Folder structure for localized string resources in an Azure Gallery Package, supporting multiple languages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n/GalleryPackage\n  /Strings\n    /resources.resjson\n      /fr\n        resources.resjson\n      /ja\n        resources.resjson\n      /pt-BR\n        resources.resjson\n      /pt-PT\n        resources.resjson\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Windows Password Authentication\nDESCRIPTION: This JSON snippet exemplifies the output structure returned by a control when the OS Platform is Windows and password authentication is configured. It specifies the 'authenticationType' as 'password' and includes a placeholder for the actual password value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Compute.CredentialsCombo-Windows-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"password\",\n  \"password\": \"passwordValue\",\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Checkmark/Success in Azure Portal\nDESCRIPTION: An SVG icon representing a checkmark or success indicator. Used in the Azure Portal UI to indicate successful operations or confirmed selections.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_114\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M0.632,8.853L0.101,8.278C-0.037,8.126-0.037,7.885,0.123,7.74l1.534-1.418\n\tc0.073-0.066,0.16-0.101,0.255-0.101c0.108,0,0.204,0.044,0.276,0.123l4.218,4.523l7.258-9.296c0.073-0.094,0.182-0.145,0.298-0.145\n\tc0.088,0,0.167,0.029,0.233,0.081l1.659,1.28c0.081,0.059,0.13,0.145,0.145,0.248c0.007,0.101-0.015,0.204-0.081,0.276L6.595,15.246\n\tL0.632,8.853z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Tests using npm\nDESCRIPTION: This command compiles TypeScript test files into JavaScript. It executes the script named 'build' defined in the 'scripts' section of the project's `package.json` file, typically invoking the TypeScript compiler (`tsc`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Converted Extension Definition in JSON\nDESCRIPTION: Example of a converted extension definition in JSON format. This is the result of converting the PDL extension definition to the new JSON-based format.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-pdl-migration.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../Definitions/dx.schema.json\",\n  \"extension\": {\n    \"name\": \"ToolTest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Field Validation with Policy in TypeScript\nDESCRIPTION: Implements policy validation for tags with a dynamic approach, generating pending fields at runtime instead of statically defining them. This allows validating tags that are not known until the control defines them.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// In some policy validations, you won't know what fields you're going to validate until the control defines it.\n// In that case use the pendingValuesGenerator\n// eslint-disable-next-line deprecation/deprecation\nconst createTagFieldValidation = (factory: PolicyValidationFactory) => factory.createFieldValidation<FxTags.TaggedResource[]>({\n    buildResourceDetails: (details, taggedResources) => {\n        let resourceTypeVal = resourceType;\n        [resourceTypeVal] = resourceTypeVal.split(\"?\");\n        details.resourceContent.tags = (taggedResources || []).reduce((acc, taggedResource) => {\n            if (taggedResource.id.toLowerCase() === resourceTypeVal.toLowerCase()) {\n                taggedResource.tags.reduce((acc, tag) => {\n                    acc[tag.name] = tag.value;\n                    return acc;\n                }, acc);\n            }\n            return acc;\n        }, {} as { [field: string]: string });\n        return details;\n    },\n    // This function generates multiple pending fields for tags to be validated\n    pendingValuesGenerator: (taggedResources) => {\n        const [resourceTypeVal] = resourceType.split(\"?\");\n        const pendingValues = (taggedResources || []).reduce((acc, taggedResource) => {\n            if (taggedResource.id.toLowerCase() === resourceTypeVal.toLowerCase()) {\n                taggedResource.tags.reduce((acc, tag) => {\n                    acc.push({\n                        field: `tags.${tag.name}`,\n                        valueToField: () => tag.value,\n                        fieldToDisplay: () => {\n                            return {\n                                displayField: clientStrings.tag.format(tag.name),\n                                displayValue: tag.value,\n                            };\n                        },\n                    });\n                    return acc;\n                }, acc);\n            }\n            return acc;\n        }, [] as PendingValues<FxTags.TaggedResource[]>[]);\n        pendingValues.push({\n            field: \"tags\",\n            valueToField: null,\n            fieldToDisplay: (field) => ({\n                displayField: clientStrings.tag.format(field.split(\".\").slice(1).join(\".\")),\n            }),\n        });\n        return pendingValues;\n    },\n}).validation;\n\nconst tagsValidations = (primaryEnginePolicyFactory) ? [primaryEnginePolicyFactory, secondaryEnginePolicyFactory, backupEnginePolicyFactory].map(createTagFieldValidation) : [];\nconst tagsByResource = FxTags.create(container, {\n    resources: tagResources,\n    validations: [...(primaryEnginePolicyFactory ? tagsValidations : [])],\n    // Optional -> provide an observable for the value of the control if the value will need to be updated manually.\n    // tags: this._tags,\n});\n```\n\n----------------------------------------\n\nTITLE: Including Documentation Headings with Gitdown - Plaintext\nDESCRIPTION: Each snippet provides a Gitdown directive to include the headings from a specific documentation template Markdown file. The included files supply content for dedicated documentation topics such as telemetry, troubleshooting, performance, and reliability. No additional dependencies other than Gitdown are required, and the only input is the reference path to the template content to be included; there is no programmatic output as these directives are processed by the Gitdown tool during documentation rendering.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-monitor.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry-getting-started.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry-kusto-databases.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry-live-telemetry.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry-extension-errors.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-telemetry-create.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-create-troubleshooting.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/performance.md\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-reliability.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile SVG Icon for Azure Portal\nDESCRIPTION: SVG markup defining the Mobile icon used in the Azure portal. The icon represents a smartphone with a touchscreen and home button.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_59\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M42.445,47c0,1.657-1.343,3-3,3H11c-1.657,0-3-1.343-3-3V3c0-1.657,1.343-3,3-3h28.445c1.657,0,3,1.343,3,3\n\tV47z\"/>\n<rect x=\"10.224\" y=\"5\" fill=\"#59B4D9\" width=\"30\" height=\"35.222\"/>\n<path fill=\"#FFFFFF\" d=\"M28.112,45.11c0,1.596-1.294,2.889-2.89,2.889c-1.594,0-2.888-1.293-2.888-2.889\n\tc0-1.595,1.294-2.889,2.888-2.889C26.818,42.221,28.112,43.515,28.112,45.11\"/>\n<path fill=\"#B8D432\" d=\"M27.117,45.11c0,1.046-0.848,1.895-1.895,1.895c-1.045,0-1.893-0.849-1.893-1.895\n\tc0-1.046,0.848-1.894,1.893-1.894C26.269,43.216,27.117,44.064,27.117,45.11\"/>\n<path opacity=\"0.15\" fill=\"#FFFFFF\" d=\"M10.223,40.222V5H32.99l2.031-5H11C9.343,0,8,1.343,8,3v44c0,1.658,1.343,3,3,3h3.695\n\tl3.974-9.778H10.223z\"/>\n<path fill=\"#1E1E1E\" d=\"M30.334,2.817c0,0.408-0.33,0.738-0.738,0.738h-8.744c-0.409,0-0.74-0.33-0.74-0.738\n\tc0-0.408,0.331-0.739,0.74-0.739h8.744C30.004,2.078,30.334,2.409,30.334,2.817\"/>\n<path fill=\"#FFFFFF\" d=\"M30.334,2.817c0,0.408-0.33,0.738-0.738,0.738h-8.744c-0.409,0-0.74-0.33-0.74-0.738\n```\n\n----------------------------------------\n\nTITLE: Accessing Knockout ViewModel from DOM Element in JavaScript Console\nDESCRIPTION: JavaScript commands executed in the browser console to retrieve the Knockout.js ViewModel object associated with a specific DOM element. `ko.dataFor(element)` takes a DOM element reference, while `ko.dataFor($0)` uses the browser's shortcut `$0` for the currently selected element in the Elements pane. Assigning the result to a variable like `viewModel` allows for easier inspection and Intellisense support in the console. This is useful for examining the data bound to the UI at runtime.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nko.dataFor(element)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nko.dataFor($0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar viewModel = ko.dataFor($0)\n```\n\n----------------------------------------\n\nTITLE: Defining Grid SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for a Grid icon, consisting of a 4x2 grid of green rectangles. This icon likely represents a layout or organizational element in the Azure portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_39\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"5\" y=\"5\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"15.377\" y=\"5\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"25.728\" y=\"5\" fill=\"#B8D432\" width=\"8.895\" height=\"8.792\"/>\n<rect x=\"36.132\" y=\"5\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"5\" y=\"15.402\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"15.377\" y=\"15.402\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"25.728\" y=\"15.402\" fill=\"#B8D432\" width=\"8.895\" height=\"8.792\"/>\n<rect x=\"36.132\" y=\"15.402\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Settings in XML Web.config\nDESCRIPTION: Example of how to add extension settings in web.config file. The portal framework expects settings in the format 'Microsoft.Azure.MyExtension.MySetting' and will propagate them to the client as 'mySetting'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Azure.MyExtension.MySetting\" value=\"myValue\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Data Model with a CommandGroup Property\nDESCRIPTION: This C# snippet defines a `Contact` data model class used in Azure Portal extensions. It includes standard properties like `Id` and `Name`, along with a crucial `CommandGroup` string property. This property's value should match the name of a PDL `CommandGroup` to associate those commands with instances of this model, enabling commands on list items representing these contacts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TypeMetadataModel(typeof(Contact), \"SamplesExtension.DataModels\")]\npublic class Contact\n{\n    /// <summary>\n    /// Gets or sets the unique identifier of the contact.\n    /// </summary>\n    [Key]\n    public int Id { get; set; }\n\n    /// <summary>\n    /// Gets or sets the contact name.\n    /// </summary>\n    public string Name { get; set; }\n\n    ...\n\n    /// <summary>\n    /// Gets or sets the command group associated to the contact.\n    /// </summary>\n    public string CommandGroup { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Resource and Selecting a Menu Item - URL Pattern - Plaintext\nDESCRIPTION: Explains the extended URL pattern for accessing an ARM resource and selecting a specific menu item on arrival. Menu item is passed as the final parameter; appropriate for direct deep linking to resource subviews. Requires valid {directory}, {resource id}, and {menuItemId}.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#@{directory}/resource/{resource id}/{menuItemId}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Overview with Recommendations Tab in Azure Portal\nDESCRIPTION: JSON schema configuration for implementing a GetStarted view that can include a Recommendations tab. Shows the base structure for a resource overview blade with tabs support.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Trusted Domains\nDESCRIPTION: Example configuration showing how to specify trusted domains in the extension-specific allow-list, including support for wildcards.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-linking.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"trustedLinkedDomains\": [\n        \"extensionsiteexample.com\",\n        \"*.subdomainsallowedexample.com\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppBlade in PDL\nDESCRIPTION: XML configuration for defining an AppBlade component in the PDL file, specifying the blade name, view model, and initial display state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-appblades.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AppBlade Name=\"MicrosoftDocs\"\n            ViewModel=\"{ViewModel Name=MicrosoftDocsBladeViewModel, Module=./Summary/ViewModels/MicrosoftDocsBladeViewModel}\"\n            InitialDisplayState=\"Maximized\">\n</AppBlade>\n```\n\n----------------------------------------\n\nTITLE: Basic Extension Configuration Structure in JSON\nDESCRIPTION: A typical extension configuration file containing essential parameters like name, URI, feedback email and cacheability settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n     name: \"Microsoft_Azure_Demo\",\n     uri: \"//demo.hosting.portal.azure.net/demo\",\n     uriFormat: \"//demo.hosting.portal.azure.net/demo/{0}\",\n     feedbackEmail: \"azureux-demo@microsoft.com\",\n     cacheability: \"manifest\",\n     disabled: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Framework Method to Find StartBoard Part in C#\nDESCRIPTION: Shows how to use a built-in Portal Test Framework method to find a StartBoard part by its title, which is more concise and encapsulates best practices like waiting for elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = portal.StartBoard.FindSinglePartByTitle(\"TheTitle\");\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Team Project Icon SVG\nDESCRIPTION: SVG icon for team project functionality with purple circles and shapes using color #804998.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_82\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#804998\" d=\"M44.977,10.5c0,5.638-4.571,10.209-10.21,10.209S24.558,16.138,24.558,10.5s4.57-10.209,10.209-10.209\nC40.406,0.291,44.977,4.862,44.977,10.5\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing getResourceAndMenuConfig Method in TypeScript\nDESCRIPTION: This TypeScript code demonstrates the implementation of the getResourceAndMenuConfig method in the AssetViewModel, which is used when ResourceProvidedBy is set to 'ReturnedByExtension'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceAndMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInfo): Promise<MsPortalFx.Assets.ExtensionSuppliedResourceInfo> {\n    return Q({});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICM Routing Rule Format for Azure Portal Extensions\nDESCRIPTION: This string illustrates the format for ICM routing rules under the Azure Portal (Ibiza) service. It uses the AIMS protocol and includes a placeholder '{ExtensionName}' to direct incidents to the specific partner extension's team, based on onboarding information stored separately.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n'AIMS://AZUREPORTAL\\Portal\\{ExtensionName}'\n```\n\n----------------------------------------\n\nTITLE: SVG PowerShell Icon Implementation in Azure Portal\nDESCRIPTION: XML-based SVG graphic definition for a PowerShell icon used in the Azure Portal. The graphic depicts a console window with blue and gray elements to represent the PowerShell command-line interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_64\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M0,44.627c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V12.634H0V44.627z\"/>\n<path fill=\"#A0A1A2\" d=\"M47.993,4H2.007C0.898,4,0,4.898,0,6.007v7.291h50V6.007C50,4.898,49.101,4,47.993,4z\"/>\n<rect y=\"13.298\" opacity=\"0.15\" fill=\"#FFFFFF\" width=\"50\" height=\"3.336\"/>\n<path opacity=\"0.1\" fill=\"#FFFFFF\" d=\"M2.014,4C0.906,4,0.007,4.898,0.007,6.007v7.291v3.336v27.993\n\tc0,1.108,0.899,2.007,2.007,2.007h19.188L43.62,4H2.014z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: InstallVisualStudio SVG Icon Definition\nDESCRIPTION: SVG definition for the InstallVisualStudio icon used in the Azure Portal. The icon combines the Visual Studio logo with an installation or download symbol, representing the action to install Visual Studio.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_142\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#59B4D9\" d=\"M13.796,14.204l7.511-5.841v11.682L13.796,14.204z M2.841,18.466\n\tV9.943l4.261,4.261L2.841,18.466z M21.307,0L10.034,11.273L2.841,5.682L0,7.102v14.205l2.841,1.42l7.193-5.591l11.273,11.273\n\tl7.102-2.841V2.841L21.307,0z\"/>\n<path fill=\"#59B4D9\" d=\"M45.694,25.261l-3.977-1.068l-1.057-3.977l4.057-4.057c-2.398-0.648-5.068-0.034-6.943,1.852\n\tc-1.898,1.886-2.5,4.568-1.841,6.977L24.989,35.932c-2.409-0.659-5.091-0.045-6.989,1.841c-1.875,1.875-2.489,4.546-1.841,6.943\n\tl4.057-4.057l3.977,1.057l1.057,3.977l-4.057,4.057c2.398,0.648,5.068,0.034,6.943-1.852c1.977-1.966,2.557-4.807,1.739-7.296\n\tl10.727-10.727c2.489,0.818,5.33,0.239,7.307-1.739c1.875-1.875,2.489-4.546,1.841-6.943L45.694,25.261z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Azure Portal Icon Set\nDESCRIPTION: Collection of SVG icon definitions used in Azure Portal including navigation and interaction elements like download, edit, error states, favorites and filters. Each icon is defined as a 24x24 pixel SVG with specific paths and shapes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_126\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"-0.5 0.5 24 24\" enable-background=\"new -0.5 0.5 24 24\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.1,16.5h4.4c0.17,0,0.34-0.03,0.49-0.09c0.65-0.24,1.13-0.98,1.28-1.91h4.03v-4\n\th-4.04c-0.19-1.14-1.47-1.99-2.36-1.99l0,0L12.1,16.5z M13.82,8.51h-1.23L8.72,16.5h1.3L13.82,8.51z M10.69,8.51L7.44,8.5H6.16\n\tc-0.91,0-1.47,0.83-1.61,2H0.5v4h4.06c0.17,1.13,0.72,2,1.6,2H6.9L10.69,8.51z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Entering and Validating Text Input in Azure Portal Form (C#)\nDESCRIPTION: This code shows how to enter text into a TextBox field within a form, wait for it to be marked as edited and valid, and perform validations. It uses the FindField method to locate the specific input field by its name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstring fieldName = \"contactName\";\nvar field = webDriver.WaitUntil(() => form.FindField<Textbox>(fieldName),\n                                string.Format(\"Could not find the {0} textbox.\", fieldName));\nfield.Value = contactName + Keys.Tab;\nwebDriver.WaitUntil(() => field.IsEdited && field.IsValid,\n                    string.Format(\"The {0} field did not pass validations.\", fieldName));\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Blade Parameters in Azure Portal\nDESCRIPTION: Example of defining parameters in a Form blade view configuration. Shows how to specify required key parameters and optional parameters, along with their usage in form elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"parameters\": [\n            {\n                \"name\": \"keyParameter\",\n                \"type\": \"key\"\n            },\n            {\n                \"name\": \"optionalParameter\",\n                \"type\": \"optional\"\n            }\n        ],\n        \"properties\": {\n            \"title\": \"FooBar\",\n            \"steps\": [\n               {\n                   \"name\": \"testform\",\n                   \"label\": \"TestForm\",\n                   \"elements\": [\n                       {\n                            \"name\": \"textBox\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Using Parameters function\",\n                            \"defaultValue\": \"[parameters('keyParameter')]\",\n                        }\n                   ]\n               }\n            ],\n            \"deployment\": {\n               ....\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Tile Properties in Azure Dashboard\nDESCRIPTION: Schema definition for navigation tile data structure. Specifies required and optional properties including icon, description, and feature flags for dashboard navigation tiles.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-navigationTileData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|icon|True|Icon to be displayed on the navigation tile. See [here](dx-iconReference.md) for more information.\n|description|False|The description displayed within the navigation tile.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining commandAsyncOperation Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the commandAsyncOperation object using a markdown table. It includes optional properties for overriding polling headers and specifying status paths in response bodies.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-commandAsyncOperation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|pollingHeaderOverride|False|By default when http Accepted (202) status code is received, the Location header will be looked up for polling uri to get the status of long running operation. A different response header can be specified with the pollingHeaderOverride value.\n|statusPath|False|A property path to look for status in the response body. By default 'status' property will be looked up to see if it has \"Succeeded\", \"Failed\", \"InProgress\" or \"Canceled\".\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation Error Example\nDESCRIPTION: Example showing a typical TypeScript compilation error when return type doesn't match the Contract interface requirements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nArgument of type 'typeof TestTemplateBlade' is not assignable to parameter of type 'TemplateBladeClass'.\n  Type 'TestTemplateBlade' is not assignable to type 'Contract<any, any>'.\n    Types of property `onInitialize` are incompatible.\n      Type '() => void' is not assignable to type '() => Promise<any>'.\n        Type 'void' is not assignable to type 'Promise<any>'.\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard View Highlight Properties in Markdown\nDESCRIPTION: This snippet defines the properties for configuring highlight behavior in dashboard views. It includes options for parameter-based highlighting and a feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-highlight.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|parameters|False|If parameter values are selected on the page, the tile is highlighted. Defaults to false. See [here](dx-view-dashboardViewType-parametersValues.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Warning Log for Missing Type Metadata in Azure Portal Data Merging\nDESCRIPTION: Example of a console warning that appears when arrays are being merged without proper type metadata. This warning indicates a potential performance issue that should be addressed by providing identity metadata for array types.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nBase.Diagnostics.js:351 [Microsoft_Azure_FooBar]  18:55:54\nMsPortalFx/Data/Data.DataSet Data.DataSet: Data of type [No type specified] is being merged without identity because the type has no metadata. Please supply metadata for this type.\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen Recommendations Blade in Azure Portal\nDESCRIPTION: JSON schema configuration for implementing a full screen Recommendations blade that can be accessed from a resource menu. Includes basic structure with schema reference, string source, view configuration, and properties definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-recommendationsViewType-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"Recommendations\",\n    \"export\": true,\n    \"parameters\": [],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2020-06-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n      \"title\": \"Recommendations Example\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Tools SVG Icon\nDESCRIPTION: SVG icon definition for 'Tools' representation, sized 50x50px with blue (#59B4D9) elements depicting tools and mechanical shapes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_175\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<!-- Path definitions for tool shapes -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Empty onInitialize Method Example\nDESCRIPTION: Example showing an empty onInitialize method that triggers TypeScript Intellisense errors to reveal required return type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInitialize() {\n    // No return statement\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Redirect for PDL Knockout Blades using XML\nDESCRIPTION: This XML snippet demonstrates how to define a Blade redirect within a PDL (Portal Definition Language) file. The `<RedirectBlade>` tag specifies the name (`LegacyBlade`) and extension (`LegacyExtension`) of the blade being replaced. The nested `<NewBlade>` tag indicates the name (`NewBlade`) of the replacement blade within the current extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\" Area=\"Blades\">\n\t<!-- This RedirectBlade tag specifies what blade is being replaced, and from what extension -->\n\t<RedirectBlade Name=\"LegacyBlade\" Extension=\"LegacyExtension\">\n\t\t<!-- Name of the blade in the extension to replace LegacyBlade -->\n\t\t<NewBlade Name=\"NewBlade\"/>\n\t</RedirectBlade>\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Enabling Skip Safe Deployment in Ev2 JSON Configuration\nDESCRIPTION: This JSON snippet illustrates how to configure an Ev2 deployment to skip the delay between stages (safe deployment). This is achieved by adding the key-value pair `\"SkipSafeDeployment\": \"true\"` to the relevant environment configuration (e.g., \"production\") within the `ServiceGroupRootReplacements.json` file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"production\": {\n        \"ServiceGroupRootReplacementsVersion\": 2,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"SkipSafeDeployment\": \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Book Icon in SVG\nDESCRIPTION: SVG code that defines a book icon using multiple paths. The icon is styled with a light blue color and includes details like pages and binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_110\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M36.194,30.337c2.303,0,4.003,0.407,5.126,0.801c0.562,0.197,0.969,0.393,1.236,0.534l0.256,0.148v-3.206\n\tc-1.418-0.555-3.619-1.156-6.619-1.156c-2.991,0-5.15,0.597-6.545,1.154v3.214C29.831,31.713,31.966,30.337,36.194,30.337z\"/>\n<path fill=\"#59B4D9\" d=\"M36.194,24.101c2.303,0,4.003,0.421,5.126,0.815c0.562,0.197,0.969,0.379,1.236,0.52l0.256,0.148v-3.206\n\tc-1.418-0.555-3.619-1.156-6.619-1.156c-2.991,0-5.15,0.602-6.545,1.159v3.223C29.747,25.548,31.882,24.115,36.194,24.101z\"/>\n<path fill=\"#59B4D9\" d=\"M29.649,19.382c0.098-0.07,2.233-1.503,6.545-1.503c2.303,0,4.003,0.407,5.126,0.801\n\tc0.562,0.197,0.969,0.393,1.236,0.52l0.256,0.162v-3.205C41.394,15.601,39.194,15,36.194,15c-2.991,0-5.15,0.597-6.545,1.154v3.214\n\tV19.382z\"/>\n<path fill=\"#59B4D9\" d=\"M13.806,30.337c-2.303,0-4.003,0.407-5.126,0.801c-0.562,0.197-0.969,0.393-1.236,0.534L7.188,31.82v-3.206\n\tc1.418-0.555,3.619-1.156,6.619-1.156c2.991,0,5.15,0.597,6.545,1.154v3.214C20.169,31.713,18.034,30.337,13.806,30.337z\"/>\n<path fill=\"#59B4D9\" d=\"M13.806,24.101c-2.303,0-4.003,0.421-5.126,0.815c-0.562,0.197-0.969,0.379-1.236,0.52l-0.256,0.148v-3.206\n\tc1.418-0.555,3.619-1.156,6.619-1.156c2.991,0,5.15,0.602,6.545,1.159v3.223C20.253,25.548,18.118,24.115,13.806,24.101z\"/>\n<path fill=\"#59B4D9\" d=\"M20.351,19.382c-0.098-0.07-2.233-1.503-6.545-1.503c-2.303,0-4.003,0.407-5.126,0.801\n\tc-0.562,0.197-0.969,0.393-1.236,0.52l-0.256,0.162v-3.205C8.606,15.601,10.806,15,13.806,15c2.991,0,5.15,0.597,6.545,1.154v3.214\n\tV19.382z\"/>\n<path fill=\"#59B4D9\" d=\"M49.761,13.834c-0.07-0.098-1.32-1.98-3.483-3.905c-2.163-1.924-5.506-3.918-9.902-3.918\n\tc-4.41-0.014-7.711,2.008-9.832,3.932c-0.598,0.546-1.113,1.088-1.545,1.589c-0.431-0.502-0.947-1.043-1.545-1.589\n\tc-2.121-1.924-5.421-3.947-9.832-3.932c-4.396,0-7.739,1.994-9.902,3.918s-3.413,3.806-3.483,3.905L0,14.747V43.09l3.399,0.899\n\th0.169v-0.014l0.014-0.028l0.112-0.169c0.112-0.155,0.267-0.393,0.492-0.674c0.435-0.576,1.095-1.362,1.952-2.121\n\tc1.756-1.545,4.228-3.006,7.486-3.006c3.16,0,5.534,1.362,7.219,2.837c0.71,0.626,0.979,1.286,1.067,1.844H25h3.09\n\tc0.089-0.558,0.357-1.218,1.067-1.844c1.685-1.475,4.059-2.837,7.219-2.837c3.258,0,5.73,1.461,7.486,3.006\n\tc0.857,0.758,1.517,1.545,1.952,2.121c0.225,0.281,0.379,0.52,0.492,0.674l0.112,0.169l0.014,0.028v0.014h0.169L50,43.09V14.747\n\tL49.761,13.834z M23.75,38.118c-2.121-1.868-5.421-3.778-9.691-3.764c-4.354,0-8.146,1.952-10.309,3.848V15.267l0.379-0.52\n\tc0.435-0.562,1.152-1.348,2.008-2.107c1.756-1.545,4.228-3.006,7.486-3.006c3.16,0,6.011,1.362,7.697,2.837\n\tc1.236,1.081,2.065,2.219,2.43,2.781V38.118z M46.25,38.202c-2.163-1.896-5.955-3.848-10.309-3.848\n\tc-4.27-0.014-7.57,1.896-9.691,3.764V15.253c0.365-0.562,1.194-1.699,2.43-2.781c1.685-1.475,4.536-2.837,7.697-2.837\n\tc3.258,0,5.73,1.461,7.486,3.006c0.857,0.758,1.573,1.545,2.008,2.107l0.379,0.52C46.25,15.268,46.25,38.202,46.25,38.202z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Markdown Breaking Changes Redirect Notice\nDESCRIPTION: Markdown content providing information about the relocation of breaking changes documentation and the preferred aka.ms link to access it.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/breaking-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Breaking changes has moved to eng.ms!\\n\\nPlease update your links to always use the aka.ms shortcut as we will keep it up to date if things move in the future.\\n\\nGo to -> https://aka.ms/portalfx/breaking\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Compute.CredentialsCombo-Windows Control in Azure Portal\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.Compute.CredentialsCombo control for Windows authentication. It includes password and password confirmation fields with custom regex validation that requires at least 12 alphanumeric characters with at least one letter and one number.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Windows.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"element1\",\n  \"type\": \"Microsoft.Compute.CredentialsCombo\",\n  \"label\": {\n    \"password\": \"Password\",\n    \"confirmPassword\": \"Confirm password\"\n  },\n  \"toolTip\": {\n    \"password\": \"\"\n  },\n  \"constraints\": {\n    \"required\": true,\n    \"customPasswordRegex\": \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{12,}$\",\n    \"customValidationMessage\": \"The password must be alphanumeric, contain at least 12 characters, and have at least 1 letter and 1 number.\"\n  },\n  \"options\": {\n    \"hideConfirmation\": false\n  },\n  \"osPlatform\": \"Windows\",\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Website Folder Icon in SVG\nDESCRIPTION: SVG code for a folder icon with a website symbol. It combines a yellow folder shape with a blue globe icon to represent a web folder.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_32\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FEE087\" d=\"M47.064,11.912V7.934H21.897L15.963,2H0v43.708c0,1.309,1.06,2.372,2.371,2.372l0,0h45.258\n\tc1.309,0,2.371-1.063,2.371-2.371V11.912H47.064z\"/>\n<path fill=\"#59B4D9\" d=\"M32.59,38.052c-1.656,1.267-3.607,1.883-5.544,1.883c-2.749,0-5.467-1.234-7.263-3.584\n\tc-3.069-4.007-2.312-9.737,1.703-12.807c1.655-1.274,3.608-1.882,5.543-1.882c2.749,0,5.467,1.234,7.263,3.585\n\tC37.361,29.253,36.596,34.986,32.59,38.052\"/>\n<path fill=\"#FFFFFF\" d=\"M30.911,32.399c0.664,0.866,1.895,1.023,2.757,0.367c0.045-0.034,0.079-0.075,0.12-0.112\n\tc0.88,0.62,1.565,1.08,1.909,1.314c0.104-0.265,0.17-0.515,0.244-0.78c-0.362-0.269-0.933-0.709-1.639-1.281\n\tc0.233-0.613,0.158-1.329-0.267-1.89c-0.609-0.787-1.688-0.988-2.532-0.505c-0.934-0.838-1.95-1.784-3.034-2.861\n\tc3.351-1.802,5.73-1.537,5.73-1.537c-0.398-0.508-0.843-0.952-1.318-1.352c-1.414-0.219-3.607-0.194-6.115,1.14v-0.001\n\tc-0.122,0.064-0.244,0.139-0.367,0.21c0.122-0.071,0.244-0.146,0.366-0.211c-0.835-0.875-1.687-1.812-2.552-2.819\n\tc-0.416,0.133-0.82,0.298-1.211,0.492c0.639,1.046,1.498,2.101,2.469,3.131c0,0,0,0,0.001,0c0.032,0.034,0.067,0.068,0.099,0.102\n\tc-0.033-0.034-0.07-0.065-0.101-0.099c-0.828,0.57-1.673,1.296-2.531,2.203c-0.109,0.117-0.205,0.236-0.308,0.354\n\tc-0.492-0.1-1.009-0.074-1.493,0.099c-0.83-1.789-0.773-3.229-0.642-3.968c-0.359,0.376-0.695,0.771-0.984,1.193\n\tc-0.217,0.885-0.276,2.162,0.365,3.699c-0.735,0.965-0.776,2.328-0.006,3.336c0.067,0.087,0.146,0.158,0.221,0.235\n\tc-0.336,1.146-0.504,2.255-0.55,3.204c0.086,0.118,0.086,0.212,0.173,0.327c0.438,0.562,0.992,1.094,1.524,1.523\n\tc-0.065-1.007,0.007-2.551,0.631-4.221c0.426,0.031,0.856-0.035,1.262-0.205c0.236,0.208,0.48,0.417,0.744,0.63\n\tc0.897,0.71,1.791,1.263,2.663,1.698c-0.045,0.444,0.066,0.904,0.354,1.286c0.616,0.795,1.757,0.944,2.552,0.336\n\tc0.166-0.127,0.297-0.28,0.405-0.445c1.422,0.317,2.664,0.372,3.585,0.372c0.141,0,0.795-0.889,1.17-1.441\n\tc-0.56,0.117-2.226,0.339-4.497-0.313c-0.055-0.253-0.16-0.5-0.328-0.719c-0.577-0.756-1.629-0.92-2.417-0.415\n\tc-0.791-0.429-1.618-0.963-2.472-1.639c-0.178-0.141-0.331-0.281-0.495-0.422c0.513-0.817,0.571-1.857,0.12-2.735\n\tc0.108-0.108,0.199-0.218,0.314-0.325c0.807-0.753,1.663-1.424,2.387-1.926c1.14,1.054,2.348,2.052,3.492,2.944\n\tC30.403,31.015,30.451,31.798,30.911,32.399z\"/>\n<path opacity=\"0.2\" fill=\"#1E1E1E\" d=\"M4.742,11.912v33.796c0,1.309-1.062,2.372-2.371,2.372C1.06,48.08,0,47.017,0,45.708V2h15.963\n\tl5.934,5.934h25.167v3.978H4.742z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Property Grouping in JSON for Azure Portal\nDESCRIPTION: This snippet shows how to define a property group with a display name, icon, and optional action. It demonstrates the structure for grouping property items and configuring clickable group headers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Disk\",\n    \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Discs\",\n    \"action\": {\n        \"menu\": \"disk\"\n    },\n    \"items\": [\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mooncake Configuration File in XML Build\nDESCRIPTION: XML build configuration to include the Mooncake (China) environment configuration file\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"Content\\Config\\portal.azure.cn.json\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Blade Structure in PDL\nDESCRIPTION: Shows the basic XML structure for defining a blade in Portal Definition Language (PDL). The blade definition includes a Name attribute for identification and references a ViewModel for handling dynamic content like titles, icons, and status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-legacy.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"LockedBlade\"\n       ViewModel=\"LockedBladeViewModel\">\n    <Lens>\n        ...\n    </Lens>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Implementing Part Redirection in PDL\nDESCRIPTION: PDL configuration for redirecting existing custom parts to use ResourcePart instead.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<RedirectPart Name=\"AuthorPart\">\n  <ResourcePart />\n</RedirectPart>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Redirection in Azure Portal\nDESCRIPTION: This JSON snippet shows how to configure an extension redirection in the Azure portal. It includes settings for the new extension name, feedback email, redirection target, service tree ID, ICM details, and hosting service name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-onboarding-old.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Microsoft_Azure_NewDemoExtension\",\n    \"feedbackEmail\": \"demoextPMDev@microsoft.com\",\n    \"redirectTo\": \"Microsoft_Azure_DemoExtension\",\n    \"serviceTreeId\": \"abcdb46d-bf43-4fef-a148-0d740e595d62\",\n    \"icm\": {\n        \"service\": \"Azure Demo IcM\",\n        \"team\": \"Demo Team\"\n    },\n    \"hostingServiceName\": \"demoextension\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making FrameBlade UI Presentable to User in JavaScript\nDESCRIPTION: Updates the UI elements with received data and sends a message to the parent portal to dismiss the loading spinner and reveal content. This function is called when the frametitle message is received.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction makeViewPresentableToUser(msg) {\n    document.getElementsByClassName(\"fxs-frame-header\")[0].innerText = msg.data;\n    document.head.getElementsByTagName(\"title\")[0].innerText = msg.data;\n\n    // Post message 'revealcontent' to the parent to indicate that the part is now in a state to\n    // dismiss the opaque spinner and reveal content.\n    postMessageToParent(\"revealcontent\");\n\n    completeInitialization();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Process Explorer Icon in SVG\nDESCRIPTION: SVG implementation of ProcessExplorer icon for the Azure Portal. The icon uses a monitor-like design with graph elements and includes multiple colored components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_66\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M32.4,38.4h-1.2H19.4h-0.6c1.6,5.7-0.6,6.6-10.2,6.6v3h12.2h8.9h11.5v-3C31.7,45,30.8,44.2,32.4,38.4\"/>\n<path fill=\"#A0A1A2\" d=\"M47,2H2.7C1.2,2,0,3.3,0,4.8v30.8c0,1.5,1.2,2.8,2.7,2.8H47c1.5,0,3-1.3,3-2.8V4.8C50,3.3,48.5,2,47,2\n\t M46.2,5.8v28.7H3.8V5.8l42.4-0.1L46.2,5.8z\"/>\n<polygon fill=\"#59B4D9\" points=\"46.1,5.8 46.1,34.6 3.8,34.6 3.8,5.8 46.2,5.8 \"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M3.8,34.6L3.8,34.6L3.8,5.8l38.7-0.1L47,2c0,0,0,0,0,0H2.7C1.2,2,0,3.3,0,4.8v30.8\n\tc0,1.5,1.2,2.8,2.7,2.8h1.1l4.6-3.8H3.8z\"/>\n<polygon fill=\"#59B4D9\" points=\"3.8,34.6 3.8,34.6 3.8,5.8 42.5,5.8 42.5,5.8 3.8,5.8 \"/>\n<rect x=\"8.7\" y=\"45\" fill=\"#A0A1A2\" width=\"32.7\" height=\"3\"/>\n<path fill=\"#B8D432\" d=\"M25.5,4.1c0,0.4-0.3,0.7-0.7,0.7c-0.4,0-0.7-0.3-0.7-0.7c0-0.4,0.3-0.7,0.7-0.7C25.2,3.4,25.5,3.7,25.5,4.1\"/>\n<polygon fill=\"#0072C6\" points=\"3.8,20.7 12.5,18.8 16.2,24.9 21.5,18.8 25.1,22.2 31.3,10.6 35,27.1 38.6,18.9 46.2,21.9 \n\t46.2,34.6 3.8,34.6 \"/>\n<g>\n\t<path fill=\"#B8D432\" d=\"M38.1,17.4l-2.8,6.3L31.7,7.5l-6.8,12.8l-3.5-3.2L16.3,23L13,17.4l-9.2,2v2c0.1,0,0.1,0,0.2,0l8-1.8l4,6.7\n\t\tl5.6-6.4l3.8,3.6l5.5-10.4l3.7,16.8L39.1,20l6.7,2.6c0.1,0,0.2,0,0.3,0v-2.1L38.1,17.4z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Create/Prevalidation Alert Configuration in JSON\nDESCRIPTION: This JSON structure demonstrates how to configure alerts for Azure Portal extensions, specifically focusing on create and prevalidation scenarios. It defines environments (like portal.azure.com) and includes sections for availability, client error, create (regression/prevalidation types), and performance alerts. Each environment can have its own set of rules, and alerts can be enabled or disabled globally or per environment/type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extensionName\": \"Your_Extension_Name\",\n    \"enabled\": true,\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"ms.portal.azure.com\"], // prevalidation type is only supported in public clouds\n            \"availability\": [...], // Optional\n            \"clientError\": [...], // Optional.\n            \"create\": [\n                 {\n                    \"type\": \"regression\", // \"regression\" or \"prevalidation\" are supported types\n                    \"enabled\": true,\n                    \"criteria\": [\n                       ...\n                    ]\n                }\n            ],\n            \"performance\": [...], // Optional.\n        },\n        {\n            \"environment\": [\"ms.portal.azure.com\"],\n            \"create\": [\n                {\n                    ...\n                }\n                ...\n             ]\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Production Ready DB Icon in SVG\nDESCRIPTION: SVG implementation of ProductionReadyDB icon for the Azure Portal. The icon depicts a database with a checkmark, using blue and green colors to represent a production-ready database.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_67\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M6.139,6.831v36.338C6.139,46.941,14.584,50,25,50V6.831H6.139z\"/>\n<path fill=\"#59B4D9\" d=\"M24.742,49.999H25c10.416,0,18.861-3.057,18.861-6.831V6.831H24.742V49.999z\"/>\n<path fill=\"#FFFFFF\" d=\"M43.861,6.831c0,3.773-8.445,6.831-18.861,6.831S6.139,10.603,6.139,6.831C6.139,3.058,14.584,0,25,0\n\tS43.861,3.058,43.861,6.831\"/>\n<path fill=\"#7FBA00\" d=\"M40.005,6.438c0,2.491-6.718,4.507-15.005,4.507S9.994,8.928,9.994,6.438c0-2.49,6.719-4.507,15.006-4.507\n\tS40.005,3.948,40.005,6.438\"/>\n<path fill=\"#B8D432\" d=\"M36.861,9.191c1.964-0.762,3.145-1.716,3.145-2.752c0-2.491-6.718-4.508-15.006-4.508\n\tc-8.287,0-15.005,2.018-15.005,4.508c0,1.036,1.18,1.99,3.145,2.752C15.883,8.126,20.17,7.439,25,7.439\n\tC29.831,7.439,34.116,8.126,36.861,9.191\"/>\n<polygon fill=\"#FFFFFF\" points=\"14.435,29.376 14.435,29.376 17.325,26.483 17.325,26.483 17.325,26.483 23.112,32.271 \n\t34.689,20.694 34.689,20.694 34.689,20.694 37.579,23.589 37.579,23.589 37.579,23.589 23.112,38.06 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Logo SVG in Microsoft Portal Framework\nDESCRIPTION: SVG definition for the Redis logo in red color. The SVG features the Redis logo with multiple path elements in BA141A color (red) and includes semi-transparent elements, sized at 50x50 pixels.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_201\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#BA141A\" d=\"M0,35.7c-0.1,0.5,0.4,1.1,1.4,1.5l20.3,8.3c1.8,0.7,4.8,0.7,6.6,0l20.3-8.3c1-0.4,1.4-1,1.4-1.5l0-4.8\n\tc0.1,0.5-0.4,1.1-1.4,1.5l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,32.4c-1.1-0.4-1.5-1-1.3-1.6L0,35.7z\"/>\n<path fill=\"#BA141A\" d=\"M48.6,29.7c1.8,0.7,1.8,2,0,2.7l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,32.4c-1.8-0.7-1.8-2,0-2.7l20.3-8.3\n\tc1.8-0.7,4.8-0.7,6.6,0L48.6,29.7z\"/>\n<path fill=\"#BA141A\" d=\"M0,27.3c-0.1,0.5,0.4,1.1,1.4,1.5l20.3,8.3c1.8,0.7,4.8,0.7,6.6,0l20.3-8.3c1-0.4,1.4-1,1.4-1.5l0-4.8\n\tc0.1,0.5-0.4,1.1-1.4,1.5l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,24c-1.1-0.4-1.5-1-1.3-1.6L0,27.3z\"/>\n<path fill=\"#BA141A\" d=\"M48.6,21.2c1.8,0.7,1.8,2,0,2.7l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,24c-1.8-0.7-1.8-2,0-2.7l20.3-8.3\n\tc1.8-0.7,4.8-0.7,6.6,0L48.6,21.2z\"/>\n<path fill=\"#BA141A\" d=\"M0,18.8c-0.1,0.5,0.4,1.1,1.4,1.5l20.3,8.3c1.8,0.7,4.8,0.7,6.6,0l20.3-8.3c1-0.4,1.4-1,1.4-1.5l0-4.8\n\tc0.1,0.5-0.4,1.1-1.4,1.5l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,15.5c-1.1-0.4-1.5-1-1.3-1.6L0,18.8z\"/>\n<path opacity=\"0.25\" fill=\"#1E1E1E\" d=\"M0,35.7c-0.1,0.5,0.4,1.1,1.4,1.5l20.3,8.3c1.8,0.7,4.8,0.7,6.6,0l20.3-8.3\n\tc1-0.4,1.4-1,1.4-1.5l0-4.8c0.1,0.5-0.4,1.1-1.4,1.5l-20.3,8.3c-1.8,0.7-4.8,0.7-6.6,0L1.4,32.4c-1.1-0.4-1.5-1-1.3-1.6L0,35.7z\"/>\n<path opacity=\"0.25\" fill=\"#1E1E1E\" d=\"M0,27.3c-0.1,0.5,0.4,1.1,1.4,1.5l20.3,8.3c1.8,0.7,4.8,0.7,6.6,0l20.3-8.3\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Squares Logo SVG in Microsoft Portal Framework\nDESCRIPTION: SVG definition for the Microsoft colored squares logo. The SVG features four colored squares in the Microsoft brand colors: red (F25022), green (7FBA00), blue (00A4EF), and yellow (FFB900), sized at 50x50 pixels.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_200\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"0\" y=\"0\" fill=\"#F25022\" width=\"23.8\" height=\"23.8\"/>\n<rect x=\"26.2\" fill=\"#7FBA00\" width=\"23.8\" height=\"23.8\"/>\n<rect x=\"0\" y=\"26.2\" fill=\"#00A4EF\" width=\"23.8\" height=\"23.8\"/>\n<rect x=\"26.2\" y=\"26.2\" fill=\"#FFB900\" width=\"23.8\" height=\"23.8\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: CoreXT Initialization Command\nDESCRIPTION: Command to initialize CoreXT environment after updating SDK versions\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-packages.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ninit.cmd\n```\n\n----------------------------------------\n\nTITLE: Safe Deployment Configuration in JSON\nDESCRIPTION: Example of a config.json file for safe deployment across different Azure regions. This configuration specifies which extension versions should be deployed to each stage/region in a staged rollout approach.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$version\": \"3\",\n    \"stage1\": \"1.0.0.5\",\n    \"stage2\": \"1.0.0.4\",\n    \"stage3\": \"1.0.0.3\",\n    \"stage4\": \"1.0.0.2\",\n    \"stage5\": \"1.0.0.1\",\n    \"friendlyName\": \"2.0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourcePart AssetType in PDL\nDESCRIPTION: PDL configuration showing how to set up an AssetType to use ResourcePart for pinning resources from browse experience.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"Author\"\n           ViewModel=\"{ViewModel Name=AuthorViewModel, Module=./Document/AssetViewModels/AuthorViewModel}\"\n           CompositeDisplayName=\"{Resource AssetTypeNames.Author, Module=ClientResources}\"\n           Icon=\"{Svg File=../../../Svg/Documents/author.svg}\"\n           BladeName=\"AuthorBlade\"\n           PartName=\"{ResourcePart}\">\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceProvidedBy Enum Values in Azure Portal Asset Type Resource Menu\nDESCRIPTION: An enumeration that defines the possible ways resources can be provided in the Azure Portal asset type resource menu. The enum specifies whether resources are provided by the resource menu, returned by an extension, or if no resource is provided.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetTypeResourceMenu-resourceProvidedBy.md#2025-04-23_snippet_0\n\nLANGUAGE: enum\nCODE:\n```\n- ProvidedByResourceMenu\n- ReturnedByExtension\n- NoResource\n```\n\n----------------------------------------\n\nTITLE: AssemblyInfo Compile Config\nDESCRIPTION: XML configuration to include AssemblyInfo.cs in project compilation\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n    <Compile Include=\"AssemblyInfo.cs\" />\n```\n\n----------------------------------------\n\nTITLE: Azure Dashboard Metrics Item Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties required for a metrics item view in Azure dashboards. Includes property names, requirement flags, and descriptions for aggregationType, name, namespace, resourceMetadata, and fx.feature fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-metricsItem.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|aggregationType|True|The aggregation type to use for the metric. See [here](dx-enum-dashboardSchemaQueryTileMetricsItem-type.md) for more on aggregation types.\n|name|True|The name of the metric.\n|namespace|False|Additional information used to determine the metrics provider. Only needed for certain providers, when not specified, chart uses a fixed default for each metric type.\n|resourceMetadata|True|Information that identifies the resource to which the metric belongs to. See [here](dx-view-dashboardViewType-metricsItemResource.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Example Azure VM Size Output (Text)\nDESCRIPTION: This snippet displays the string 'Standard_D1', which represents a specific Azure Virtual Machine size. This is likely an example output from an Azure command-line tool or API call querying VM configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.SizeSelector-output.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Standard_D1\"\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definitions for Azure Portal UI\nDESCRIPTION: Collection of SVG icon definitions including various UI elements like Link, Lock, Log, Mail, Message, Monitoring, etc. Each icon is defined with specific viewBox dimensions and path elements for vector rendering.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_146\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<g>\n\t<g>\n\t\t<path d=\"M21.89,9.381l-3.05,2.91c-1.13,1.07-2.39,1.12-3.82,0.72l5.34-5.09c0.79-0.75,0.38-2.31-0.42-3.07\n\t\t\tc-0.79-0.76-2.35-1.09-3.15-0.33l-5.33,5.09c-0.42-1.36-0.36-2.57,0.76-3.63l3.05-2.91c1.63-1.56,4.69-1.35,6.32,0.21\n\t\t\tc1.63,1.56,1.98,4.57,0.34,6.13L21.89,9.381z\"/>\n\t</g>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Verifying TypeScript Version using Bash Command\nDESCRIPTION: This Bash command checks the installed version of the TypeScript compiler (`tsc`). It's recommended to ensure TypeScript version 2.3.3 is installed for Azure portal development as mentioned in the surrounding text.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$>tsc -version\n```\n\n----------------------------------------\n\nTITLE: Defining arcSnapshotTileDataNoResources Object Properties in Markdown\nDESCRIPTION: This snippet outlines the required and optional properties for the arcSnapshotTileDataNoResources object. It specifies the text and icon to be displayed when no resources are configured, and includes an optional feature flag.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-arcSnapshotTileDataNoResources.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|text|True|Text to be shown when there are no resources to be configured with the service.\n|icon|True|Icon to be shown when there are no resources to be configured with. See [here](dx-iconReference.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Example Output for ServicePrincipalSelector (Default/New) in JSON\nDESCRIPTION: This JSON snippet shows the output structure produced by the `ServicePrincipalSelector` control when no specific application is selected, effectively using the default values specified in the definition. Key output values include `appId` and `objectId` (using the placeholder `<default guid>`), `password`, an empty `certificateThumbprint`, `newOrExisting` set to \"new\", and `authenticationType` set to \"password\". This reflects the state before user interaction or when the default is explicitly chosen.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ServicePrincipalSelector-samples.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": {\n    \"value\": \"<default guid>\"\n  },\n  \"objectId\": {\n    \"value\": [\"<default guid>\"]\n  },\n  \"password\": {\n    \"value\": \"<password>\"\n  },\n  \"certificateThumbprint\": {\n    \"value\": \"\"\n  },\n  \"newOrExisting\": {\n    \"value\": \"new\"\n  },\n  \"authenticationType\": {\n    \"value\": \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Redirect\nDESCRIPTION: A markdown link redirecting to the top-extensions-getting-started.md document\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-creating-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[top-extensions-getting-started.md](./top-extensions-getting-started.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Group Icon in SVG\nDESCRIPTION: SVG implementation of ResourceGroup icon for the Azure Portal. The design shows a stylized representation of a resource group using Azure blue colorways.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_70\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M25.047,22.647c-0.078,0-0.15-0.023-0.22-0.064l-14.711-8.49c-0.14-0.08-0.223-0.228-0.223-0.389\n\tc0-0.156,0.083-0.304,0.223-0.382l14.616-8.435c0.139-0.077,0.309-0.077,0.442,0l14.714,8.495c0.133,0.078,0.221,0.224,0.221,0.382\n\tc0,0.163-0.088,0.308-0.221,0.387l-14.619,8.433C25.2,22.624,25.126,22.647,25.047,22.647\"/>\n<path fill=\"#59B4D9\" d=\"M22.932,43.284c-0.08,0-0.158-0.019-0.226-0.059L8.042,34.761c-0.142-0.079-0.226-0.224-0.226-0.386V17.39\n```\n\n----------------------------------------\n\nTITLE: Defining Key Parameters for Azure Portal Blades in XML\nDESCRIPTION: Demonstrates how to declare a key parameter for a blade, which acts as a primary identifier. Key parameters are used to save user settings like blade layout and part states.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade>\n  ...\n  <Blade.Parameters>\n\n    <!--\n      Typically a blade will have a key property (or set of key properties)\n      that indicate uniqueness of the data within the blade.\n     -->\n    <Parameter Name=\"WebsiteId\" Type=\"Key\" />\n\n  </Blade.Parameters>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeMetadata Generation in Extension.csproj\nDESCRIPTION: XML configuration to set BladeReferencesCodegenMode and PartReferencesCodegenMode for TypeMetadata generation in the extension project.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <BladeReferencesCodegenMode>Definitions</BladeReferencesCodegenMode>\n  <PartReferencesCodegenMode>Definitions</PartReferencesCodegenMode>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: CDN PDE Reference in XML\nDESCRIPTION: XML configuration for referencing the CDN PDE file in extension project.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionReference Include=\"$(PkgMicrosoft_Portal_Extensions_Cdn)\\content\\Client\\_extensions\\Cdn\\Microsoft_Azure_Cdn.pde\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Robots to RobotDetails using mapInto() (Buggy Implementation with New Observables in Knockout, TypeScript)\nDESCRIPTION: Demonstrates an incorrect use of mapInto() that wraps the current values of each property (name, status, modelAndMfg) in new observables on each mapping, rather than passing through the existing observables or using pureComputed. This leads to the same instability and rerunning behavior described for buggy map(): changes in the source observables cause new RobotDetails references, disrupting selection and grid state due to replaced items. Requires Knockout.js, provided context, and the defined interfaces. Output: projectedItems array where each property is a freshly created observable per mapInto() run.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-projections.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.mapInto<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: ko.observable(robot.name()),\n        status: ko.observable(robot.status()),\n        modelAndMfg: ko.observable(\"{0}:{1}\".format(robot.model(), robot.manufacturer())),\n    };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Atomization Context in Query Cache\nDESCRIPTION: Shows how to configure a custom atomization context ID when creating a query cache. This allows for separate atomization contexts within the extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-atomization.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar cache = new MsPortalFx.Data.QueryCache<ModelType, QueryType>({\n    ...\n    atomizationOptions: {\n        atomizationContextId: \"string-id\"\n    }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Test Case Steps - C#\nDESCRIPTION: This C# snippet illustrates logging within test cases using the TestContext.WriteLine method to record key steps or actions. Logging provides traceability and facilitates debugging in case of test failures. Dependencies: TestContext object available in test context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTestContext.WriteLine(\"Starting provisioning from the StartBoard...\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Resource Group Definition\nDESCRIPTION: Defines the TypeScript interface for the Resource Group object returned by the ResourceGroupSelector, including properties like location, name, provisioning state, and resource ID.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ResourceGroupSelector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResourceGroup {\n        /**\n         * Resource group location.\n         */\n        location: string;\n        /**\n         * Resource group name.\n         */\n        name: string;\n        /**\n         * Resource group provisioning state.\n         */\n        provisioningState?: string;\n        /**\n         * The resource id of the resource group. e.g. /subscriptions/123/resourceGroups/${this.name}\n         * Available with the fx resource group dropdown.\n         */\n        resourceId?: string;\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Provider Configuration Value\nDESCRIPTION: An example configuration value (`confirmPassword: true`) returned by the `supplyProviderConfig` callback. This flag indicates to the Parameter Provider blade that it should include and potentially enforce a password confirmation field, modifying its behavior based on collector-supplied configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconfirmPassword: true\n```\n\n----------------------------------------\n\nTITLE: Waiting to Find StartBoard Part by Title - C#\nDESCRIPTION: This C# snippet uses webDriver.WaitUntil combined with a lambda expression to search for a part on the Portal StartBoard by its title, retrying until the element is found or timeout occurs. It demonstrates resilient UI element location through polling. Dependencies: Portal Test Framework, StartBoard and webDriver objects. Inputs: part type and title string. Output: matching StartBoard part or null if not found.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = webDriver.WaitUntil(\n    () => portal.StartBoard.FindElements<Part>()\n    .FirstOrDefault(p => p.PartTitle.Equals(\"TheTitle\")),\n    \"Could not find a part with title 'Samples'.\");\n```\n\n----------------------------------------\n\nTITLE: Linking to Marketplace Item Details Blade - Preview URL Pattern - Plaintext\nDESCRIPTION: Demonstrates augmenting the create blade link with '/preview' to open the marketplace item details page for a package. Useful for showing preview features or details before deployment. Requires valid {package id}.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#create/{package id}/preview\n```\n\n----------------------------------------\n\nTITLE: Defining Check Icon in SVG\nDESCRIPTION: SVG code that defines a checkmark icon. This snippet is incomplete and only contains the XML declaration and DOCTYPE.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_113\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Shell Command to Declarative Blade\nDESCRIPTION: Shows the configuration for adding a Cloud Shell command to a declarative blade's command section. Includes setup for opening the form blade in a context pane.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-formCloudShell.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"icon\": \"MsPortalFx.Base.Images.ArrowUp\",\n        \"id\": \"formcloudshellCommand\",\n        \"kind\": \"OpenBladeCommand\",\n        \"displayName\": {\n          \"property\": \"formCloudShell\"\n        },\n        \"blade\": {\n          \"name\": \"FormBladeCloudShell_Dx\",\n          \"inContextPane\": true\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: ServiceGroupRootReplacements Configuration for Production and Mooncake\nDESCRIPTION: Comprehensive configuration example showing ServiceGroupRootReplacements.json setup for Production and Mooncake environments, including custom health check replacements, MDM health resources, and environment-specific parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Production\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"MDMHealthResources\":\n        {\n            \"SDP\" : [\n                \"EHSExtension\" ,\n                \"Extension_90thLoadTime_LessThan4S_PT30M\",\n                \"Custom_1\",\n                \"Custom_3\"\n            ]\n        },\n        \"CustomHealthCheckReplacements\" :\n        {\n            \"dimension1\": \"1\",\n            \"dimension2\": \"2\",\n            \"dimension3\": \"3\"\n        }\n    },\n    \"Mooncake\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.cn/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorageAccountKey | https://sometest.vault.azure.cn/secrets/PortalHostingServiceStorage-SASToken>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"HotfixDeployment\": \"true\",\n        \"HotfixMonitorDurations\" : [ \"PT30M\", \"P1D\" ],\n        \"MDMHealthResources\":\n        {\n            \"Hotfix\": [\n                \"Custom_2\"\n            ],\n            \"SDP\" : [\n                \"Extension_90thLoadTime_LessThan4S_PT30M\" ,\n                \"Blade_95thLoadTime_LessThan4S_PT30M\"\n            ]\n        },\n        \"CustomHealthCheckReplacements\" :\n        {\n            \"dimension1\": \"a\",\n            \"dimension2\": \"b\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clock Icon SVG Definition\nDESCRIPTION: SVG icon definition for clock/time indicator with blue circular face and gray hands.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M22.83,4.372C17.124,4.974,12.221,7.82,8.877,11.951c-3.345,4.134-5.106,9.52-4.508,15.227\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for 'Get More License' in Azure Portal\nDESCRIPTION: SVG definition for a 'Get More License' icon, featuring an arrow pointing to a document-like shape. This icon is likely used in licensing or subscription-related sections of the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_133\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#59B4D9\" points=\"29.946,22.868 20.19,12.584 25.484,12.584 38.523,24.994 25.53,37.416 20.252,37.416 29.946,27.187 \n\t0,27.187 0,22.868 \"/>\n<path fill=\"#59B4D9\" d=\"M48.147,0H46L30.269,0.002L15,0h-3.143C10.836,0,10,0.837,10,1.857V17h5V5h30v40H15V33h-5v15.152\n\tC10,49.164,10.84,50,11.861,50h36.286C49.168,50,50,49.164,50,48.152V1.857C50,0.837,49.168,0,48.147,0z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar Icon in SVG\nDESCRIPTION: SVG code that defines a calendar icon using rectangles to create a grid-like structure. The icon uses a single color fill.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_111\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 18 18\" enable-background=\"new 0 0 18 18\" xml:space=\"preserve\">\n<g>\n\t<path fill=\"#A0A1A2\" d=\"M17.1,0H0.9C0.4,0,0,0.4,0,0.9v16.1C0,17.6,0.4,18,0.9,18h16.1c0.5,0,0.9-0.4,0.9-0.9V0.9\n\t\tC18,0.4,17.6,0,17.1,0z M17,17H1V4h16V17z\"/>\n\t<rect x=\"5\" y=\"5\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"8\" y=\"5\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"2\" y=\"8\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"5\" y=\"8\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"8\" y=\"8\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"11\" y=\"8\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"2\" y=\"11\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"5\" y=\"11\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"2\" y=\"14\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"5\" y=\"14\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"8\" y=\"14\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"11\" y=\"14\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"8\" y=\"11\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"11\" y=\"5\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"11\" y=\"11\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"14\" y=\"8\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"14\" y=\"5\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n\t<rect x=\"14\" y=\"11\" fill=\"#A0A1A2\" width=\"2\" height=\"2\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Update Command\nDESCRIPTION: Command to update NuGet packages using the NuGet CLI, used for updating package configurations in VS Code\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-packages.md#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nnuget.exe update ./Extension/packages.config\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Type Metadata for Editable Grid in TypeScript\nDESCRIPTION: Demonstrates how to define type metadata using `MsPortalFx.Data.Metadata.setTypeMetadata` in TypeScript for a type named `\"GridItem\"`. This metadata marks the type as an `entityType` and specifies `\"key\"` as its `idProperties`. This configuration is necessary to enable individual item tracking (create/update/delete) within an `EditScope` for editable grid scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n\nMsPortalFx.Data.Metadata.setTypeMetadata(\"GridItem\", {\nproperties: {\n    key: null,\n    option: null,\n    value: null,\n},\nentityType: true,\nidProperties: [ \"key\" ],\n});\n\n```\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Control Output Configuration\nDESCRIPTION: Specifies the configuration options and output behavior for Azure Portal controls. When hideNone is true, newOrExistingOrNone is limited to 'new' or 'existing' values. When hideDomainNameLabel is true, the domainNameLabel property remains undeclared.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.PublicIpAddressCombo-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\noptions.hideNone\n```\n\nLANGUAGE: plaintext\nCODE:\n```\noptions.hideDomainNameLabel\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Folder Structure\nDESCRIPTION: Defines the standard folder structure for an Azure Gallery Package (azpkg), including locations for manifest, UI definition, icons, screenshots, and deployment templates.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n/MyPackage/\n/MyPackage/Manifest.json\n/MyPackage/UIDefinition.json\n/MyPackage/Icons/\n/MyPackage/Screenshots/\n/MyPackage/Strings/\n/MyPackage/DeploymentTemplates/\n/MyPackage/DeploymentFragments/\n/MyPackage/DeploymentFragments/Template.json\n```\n\n----------------------------------------\n\nTITLE: Defining ArcSnapshotTileDataActions Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the ArcSnapshotTileDataActions object using a markdown table. It includes options for configuring and viewing services in different states, as well as viewing unconfigured resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-arcSnapshotTileDataActions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|configureService|False|Corresponds to incomplete state - to configure the service. See [here](dx-view-dashboardViewType-actionReference.md) for more information.\n|viewConfiguredService|False|Corresponds to complete state - to view the configured service. See [here](dx-view-dashboardViewType-actionReference.md) for more information.\n|viewNotConfiguredResources|False|Corresponds to complete state - to view the resources that are not configured with the service. See [here](dx-view-dashboardViewType-actionReference.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Box Logo SVG in Microsoft Portal Framework\nDESCRIPTION: SVG definition for a GitHub logo in a dark box format. The SVG uses a black background with the GitHub octocat icon in white, sized at 30x30 pixels.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_198\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"-0.5 0.5 30 30\" enable-background=\"new -0.5 0.5 30 30\" xml:space=\"preserve\">\n<rect x=\"-0.5\" y=\"0.5\" fill=\"#1E1E1E\" width=\"30\" height=\"30\"/>\n<path fill=\"#FFFFFF\" d=\"M14.5,4.5c-6.073,0-11,4.927-11,11c0,6.081,4.927,11,11,11s11-4.919,11-11C25.5,9.427,20.573,4.5,14.5,4.5z\n\tM17.409,25.05v-1.879c0-0.725-0.396-1.368-1.005-1.772c0.041-0.008,0.091-0.016,0.14-0.016c1.046-0.132,1.994-0.461,1.994-0.461\n\ts1.36-0.42,2.093-1.277c0.775-0.906,0.972-2.249,0.972-2.249s0.255-1.467,0-2.604c-0.255-1.112-1.071-1.887-1.071-1.887\n\ts0.28-0.725,0.255-1.483c-0.025-0.725-0.363-1.483-0.363-1.483s-0.643-0.058-1.327,0.206c-0.832,0.321-1.739,0.972-1.739,0.972\n\ts-0.634-0.206-1.376-0.305c-0.684-0.099-1.483-0.107-1.483-0.107s-0.799,0.008-1.483,0.107c-0.742,0.099-1.376,0.305-1.376,0.305\n\ts-0.898-0.651-1.739-0.972C9.227,9.88,8.576,9.938,8.576,9.938s-0.33,0.758-0.354,1.483c-0.025,0.758,0.255,1.483,0.255,1.483\n\ts-0.824,0.774-1.071,1.887c-0.264,1.137,0,2.604,0,2.604s0.198,1.343,0.964,2.249c0.733,0.857,2.101,1.277,2.101,1.277\n\ts0.939,0.33,1.986,0.461c0.049,0,0.099,0.008,0.148,0.016c-0.61,0.404-1.013,1.046-1.013,1.772v1.879\n\tc-4.095-1.244-7.07-5.051-7.07-9.55c0-5.512,4.466-9.978,9.978-9.978s9.987,4.466,9.987,9.978\n\tC24.487,19.999,21.504,23.806,17.409,25.05z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard View Type Page Properties in Markdown\nDESCRIPTION: Markdown table defining the required and optional properties for dashboard view type pages. Includes properties like title, tiles, and feature flags with their requirement status.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|The title of the page.\n|tiles|True|The tiles that are part of the DashboardV2 page. See [here](dx-view-dashboardViewType-tiles.md) for more information.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Localized ARG Query for Resource Status\nDESCRIPTION: Azure Resource Graph query demonstrating status string localization using case operator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\nwhere type == 'microsoft.test/printers'\n| extend model = properties.model\n| extend status = case(\n    tolower(properties.status) == 'working', '{{Resource Status.Printer.working, Module=ClientResources}}',\n    tolower(properties.status) == 'jammed', '{{Resource Status.Printer.jammed, Module=ClientResources}}',\n    tolower(properties.status) == 'damaged', '{{Resource Status.Printer.damaged, Module=ClientResources}}',\n    tolower(properties.status) == 'out-of-paper', '{{Resource Status.Printer.outOfPaper, Module=ClientResources}}',\n    'Unknown')\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Object Instance from TypeMetadata\nDESCRIPTION: TypeScript code demonstrating how to create an empty object instance using generated TypeMetadata.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_51\n\nLANGUAGE: ts\nCODE:\n```\nconst empty = MsPortalFx.Data.Metadata.createEmptyObject(ComputerMetadata.name);\n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Asset Type Browse Default Columns in Azure Portal\nDESCRIPTION: An enumeration listing all permitted values for default columns when browsing Azure resources, including resource metadata like Kind, ResourceGroup, Location, and various identifiers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetTypeBrowseDefaultColumns.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- FxColumns.Kind\n- FxColumns.ResourceGroup\n- FxColumns.Location\n- FxColumns.LocationId\n- FxColumns.ResourceId\n- FxColumns.ResourceGroupId\n- FxColumns.ResourceType\n- FxColumns.Subscription\n- FxColumns.SubscriptionId\n- FxColumns.AssetType\n- FxColumns.Tags\n```\n\n----------------------------------------\n\nTITLE: TextBlock Control Output Example\nDESCRIPTION: Sample output showing the rendered text content from the TextBlock control, including the main text and link label concatenated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBlock.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Please provide the configuration values for your application. Learn more\"\n```\n\n----------------------------------------\n\nTITLE: Installing Fiddler for Telemetry Logging\nDESCRIPTION: This URL provides the download link for Fiddler, a tool used to capture and analyze telemetry logs from the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-live-telemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://www.telerik.com/fiddler\n```\n\n----------------------------------------\n\nTITLE: Designing Globe Icon in SVG\nDESCRIPTION: SVG code that creates a globe or world icon. It uses various shapes and colors to represent a stylized Earth with continents.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_35\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FF8C00\" d=\"M23.987,40.351h-3.951c0.957,5.788-2.336,6.618-7.968,6.618V50h7.163h5.229h6.759v-3.031\n\tC25.588,46.969,23.029,46.142,23.987,40.351\"/>\n<rect x=\"12.07\" y=\"46.968\" fill=\"#FCD116\" width=\"19.151\" height=\"3.032\"/>\n<path fill=\"#59B4D9\" stroke=\"#59B4D9\" stroke-width=\"0.232\" stroke-miterlimit=\"10\" d=\"M23.968,30.928\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Monitoring Tab in Azure Portal JSON\nDESCRIPTION: This JSON schema defines the structure of a monitoring tab that can be added to a resource overview. It includes the tab kind and charts configuration with metrics.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Monitoring\",\n  \"charts\": [\n    {\n      \"title\": \"CPU (average)\",\n      \"metrics\": [\n        {\n          \"id\": \"Percentage CPU\",\n          \"aggregationType\": \"Avg\",\n          \"resourceMetadata\": {\n             \"id\": \"[parameters('id')]\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for 'For Placement Only' in Azure Portal\nDESCRIPTION: SVG definition for a 'For Placement Only' icon, featuring a pink circle with 'FPO' text. This icon is likely used as a placeholder in the Azure Portal design process.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_130\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<circle fill=\"#EC008C\" cx=\"25\" cy=\"25\" r=\"25\"/>\n<path fill=\"#FFFFFF\" d=\"M10.055,19.625v4.507h5.294v2.179h-5.294v6.379h-2.53V17.446h8.25v2.179H10.055z\"/>\n<path fill=\"#FFFFFF\" d=\"M28.669,22.177c0,0.688-0.128,1.338-0.383,1.951c-0.255,0.613-0.631,1.146-1.127,1.6\n\tc-0.496,0.453-1.105,0.813-1.828,1.079c-0.723,0.266-1.549,0.398-2.477,0.398h-1.807v5.485h-2.53V17.446h4.709\n\tc0.914,0,1.711,0.11,2.392,0.33c0.68,0.22,1.247,0.535,1.7,0.946c0.454,0.411,0.792,0.909,1.016,1.493\n\tC28.558,20.8,28.669,21.454,28.669,22.177z M26.011,22.262c0-0.411-0.065-0.781-0.196-1.111c-0.131-0.33-0.331-0.611-0.601-0.845\n\tc-0.27-0.233-0.604-0.413-1.004-0.537s-0.874-0.186-1.419-0.186h-1.743v5.485h1.626c1.049,0,1.867-0.237,2.456-0.712\n\tC25.717,23.881,26.011,23.183,26.011,22.262z\"/>\n<path fill=\"#FFFFFF\" d=\"M44.796,24.919c0,1.226-0.176,2.333-0.526,3.322c-0.351,0.989-0.851,1.832-1.499,2.53\n\ts-1.426,1.237-2.333,1.616s-1.921,0.568-3.04,0.568c-1.085,0-2.071-0.188-2.961-0.563c-0.89-0.375-1.649-0.899-2.28-1.573\n\tc-0.631-0.673-1.12-1.482-1.467-2.429c-0.348-0.946-0.521-1.986-0.521-3.12c0-1.169,0.165-2.247,0.495-3.232\n\tc0.329-0.985,0.813-1.837,1.45-2.557c0.639-0.719,1.421-1.281,2.35-1.685c0.929-0.404,1.991-0.605,3.189-0.605\n\tc1.056,0,2.023,0.184,2.902,0.553c0.878,0.368,1.632,0.889,2.259,1.563s1.114,1.487,1.462,2.439\n\tC44.622,22.7,44.796,23.757,44.796,24.919z M42.117,25.153c0-0.942-0.108-1.77-0.324-2.482c-0.217-0.712-0.524-1.308-0.925-1.786\n\ts-0.881-0.84-1.44-1.084c-0.561-0.244-1.188-0.367-1.882-0.367c-0.723,0-1.375,0.138-1.956,0.415s-1.073,0.665-1.478,1.164\n\tc-0.404,0.5-0.716,1.093-0.936,1.781s-0.329,1.446-0.329,2.275c0,0.886,0.116,1.678,0.351,2.376c0.233,0.698,0.556,1.29,0.967,1.775\n\ts0.896,0.855,1.457,1.11c0.56,0.256,1.165,0.383,1.817,0.383c0.694,0,1.327-0.118,1.897-0.355s1.063-0.589,1.478-1.053\n\tc0.415-0.464,0.735-1.044,0.962-1.738C42.004,26.872,42.117,26.067,42.117,25.153z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Power Up Icon in SVG\nDESCRIPTION: SVG implementation of PowerUp icon for the Azure Portal. The icon uses a complex path-based design with multiple colored elements to represent a power-up concept.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_65\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M23.844,21.87c0.132-0.091,0.264-0.182,0.395-0.263C24.107,21.688,23.976,21.779,23.844,21.87L23.844,21.87z\n\t\"/>\n<polygon fill=\"#FFFFFF\" points=\"25.134,23.341 25.122,23.328 25.135,23.341 \"/>\n<path fill=\"#A0A1A2\" d=\"M41.386,50c-6.829,0-16.33-5.585-26.069-15.323C1.768,21.125-3.448,8.134,2.338,2.348\n\tC3.875,0.811,6.039,0,8.599,0c6.829,0,16.331,5.585,26.069,15.325c6.637,6.638,11.379,13.177,13.715,18.916\n\tc2.365,5.811,2.104,10.572-0.736,13.413C46.111,49.189,43.946,50,41.386,50 M8.599,3.078c-1.75,0-3.124,0.486-4.083,1.445\n\tC0.791,8.249,4.052,19.056,17.495,32.498c9.031,9.032,17.962,14.424,23.892,14.424c1.75,0,3.123-0.486,4.082-1.446\n\tc1.908-1.908,1.932-5.486,0.063-10.074C43.35,30.04,38.84,23.85,32.49,17.502C23.459,8.471,14.528,3.078,8.599,3.078\"/>\n<path fill=\"#0F0F0F\" d=\"M8.599,50c-2.56,0-4.724-0.811-6.261-2.346c-2.84-2.841-3.101-7.602-0.735-13.413\n\tc2.336-5.739,7.078-12.278,13.715-18.916C25.056,5.585,34.558,0,41.387,0c2.56,0,4.724,0.811,6.26,2.347\n\tc5.786,5.787,0.57,18.778-12.979,32.33C24.929,44.415,15.427,50,8.599,50 M41.387,3.078c-5.93,0-14.861,5.393-23.893,14.424\n\tc-6.348,6.348-10.86,12.538-13.041,17.9c-1.869,4.588-1.845,8.166,0.063,10.074c0.959,0.96,2.332,1.446,4.083,1.446\n\tc5.93,0,14.86-5.392,23.892-14.424C45.933,19.056,49.194,8.249,45.468,4.522C44.509,3.564,43.137,3.078,41.387,3.078\"/>\n<path fill=\"#BA141A\" d=\"M32.273,20.801c-0.303-0.33-0.665-0.573-1.063-0.739c-1.839-0.766-4.496,0.188-6.16,2.55\n\tc-2.559-3.088-5.619-3.668-7.323-1.811c-3.404,3.706,0.859,8.576,4.221,11.341c1.325,1.09,2.51,1.853,3.032,2.089v0.024\n\tc0.005-0.001,0.014-0.009,0.018-0.009c0,0,0.018,0.009,0.025,0.009v-0.024C26.863,33.397,37.017,25.969,32.273,20.801\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M25.05,22.613c-2.559-3.088-5.619-3.668-7.323-1.811c-3.404,3.706,0.859,8.576,4.221,11.341\n\tl9.262-12.08C29.371,19.297,26.714,20.25,25.05,22.613\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: POST Request with Body in Azure Portal Resource Overview\nDESCRIPTION: Demonstrates a POST request with a request body for querying Resource Graph. Includes condition based on storage account existence and displays results in tabs.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeResources-guidance.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      },\n      {    \n        \"id\": \"/subscriptions/2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4/resourceGroups/managedAppTest_rg/providers/Microsoft.Storage/storageAccounts/e2eteststorageaccount\",  \n        \"apiVersion\": \"2021-09-01\",     \n        \"name\": \"storageAccount\"    \n      },\n      {     \n        \"name\": \"testPOSTARG\",    \n        \"method\": \"POST\",     \n        \"id\": \"/providers/Microsoft.ResourceGraph/resources\",    \n        \"apiVersion\": \"2018-09-01-preview\",    \n        \"body\": {      \n          \"subscriptions\": [    \n              \"2a5aa7f9-d10a-4a12-bf51-a5f8a29cf0b4\"      \n          ],       \n         \"query\": \"where isnotnull(tags['TagForResourceGraphTest'])\"       \n        },       \n        \"condition\":  \"[not(empty(resources('storageAccount').id))]\"   \n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n            {\n              \"displayName\": \"Storage account name\",\n              \"value\": \"[resources('storageAccount').name]\"\n            },\n            {\n              \"displayName\": \"TestPOST ARGcount\",\n              \"value\": \"[resources('testPOSTARG').count]\",\n              \"description\": \"Number of storage accounts with tag\"\n            }\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataSource for Graph API in Azure Portal JSON\nDESCRIPTION: This snippet shows how to define a dataSource of kind 'graph' in the Azure Portal configuration. It specifies the name and path for the Graph API endpoint.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/dataSources/viewTypeDataSources.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dataSources\": [\n    {\n    \"kind\": \"graph\",\n    \"name\": \"mygraph\",\n    \"path\": \"v1.0/me?$select=displayName,id,mail\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring MenuCommand with OpenMarketplaceCommand in Azure Portal\nDESCRIPTION: This JSON snippet demonstrates how to configure a MenuCommand with nested OpenBladeCommand and OpenMarketplaceCommand. The OpenMarketplaceCommand is used to open a specific marketplace item, with options for customization such as display name, icon, and content.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewOpenMarketplaceCommandWithContent.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        },\n        {\n            \"kind\": \"OpenMarketplaceCommand\",\n            \"id\": \"OpenMarketplaceCommandId1\",\n            \"displayName\": \"openMarketplace\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"content\": \"content:Second line description\",\n            \"marketplaceItemId\": \"Microsoft.WindowsServer2016Datacenter-ARM\",\n            \"disabled\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Ev2 Bake Times in JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to specify custom monitor durations (bake times) for Ev2 deployments within the `ServiceGroupRootReplacements.json` file. The `MonitorDuration` array accepts multiple duration values (e.g., \"PT30M\", \"PT1H\") which define the wait time between deployment stages. If this array is omitted, the deployment defaults to PT6H and P1D.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"production\": {\n        \"ServiceGroupRootReplacementsVersion\": 3,\n        \"AzureSubscriptionId\": \"<SubscriptionId>\",\n        \"CertKeyVaultUri\": \"https://sometest.vault.azure.net/secrets/PortalHostingServiceDeploymentCertificate\",\n        \"StorageAccountCredentialsType\": \"<ConnectionString | AccountKey | SASToken>\",\n        \"TargetStorageCredentialsKeyVaultUri\": \"<https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageConnectionString | https://sometest.vault.azure.net/secrets/PortalHostingServiceStorageAccountKey>\",\n        \"TargetContainerName\": \"hostingservice\",\n        \"ContactEmail\": \"youremail@microsoft.com\",\n        \"PortalExtensionName\": \"Microsoft_Azure_Monitoring\",\n        \"FriendlyNames\": [ \"friendlyname_1\", \"friendlyname_2\", \"friendlyname_3\" ],\n        \"MonitorDuration\": [ \"PT30M\", \"PT1H\" ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blob Storage Connection String for Persistent Cache in XML\nDESCRIPTION: Defines a configuration key in web.config to provide the storage account connection string for the custom content cache implementation. This entry allows the extension to retrieve secure settings at runtime. The key must match your extension's namespace and class naming convention; the value should be a valid Azure Storage connection string.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-persistent-caching-of-scripts.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<add key=\"<your.extension.namespace>.HubsBlobStorageBackedContentCacheSettings.StorageConnectionString\" value=\"\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Values for Dashboard Schema Query Tile Metrics Item Type\nDESCRIPTION: This enum defines the permitted values for the dashboard schema query tile metrics item type. It includes common aggregation methods used in metrics queries.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-dashboardSchemaQueryTileMetricsItem-type.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- avg\n- count\n- max\n- min\n- percentile\n- sum\n- unique\n```\n\n----------------------------------------\n\nTITLE: Markdown Tile Configuration - Inline Content Option\nDESCRIPTION: Defines the structure for configuring a markdown tile with inline content. Requires specifying the source type as 'inline' and providing the actual markdown content to display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-markdownTileData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{\n  \"source\": \"inline\",\n  \"content\": \"<markdown content>\",\n  \"fx.feature\": \"<optional>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Visual Studio Logo Box in Azure Portal\nDESCRIPTION: SVG definition for the Visual Studio Logo in a box that can be accessed through MsPortalFx.Base.Images.VisualStudioLogoBox(). The icon displays the Visual Studio logo within a square container.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_185\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 30 30\">\n<rect class=\"msportalfx-svg-c20\" width=\"30\" height=\"30\"/>\n<path class=\"msportalfx-svg-c01\" d=\"M14.743,14.924l4.757-3.703v7.406L14.743,14.924z M7.8,17.624v-5.4l2.7,2.7L7.8,17.624z M19.5,5.924 l-7.142,7.142L7.8,9.524l-1.8,0.9v9l1.8,0.9l4.558-3.542l7.142,7.142l4.5-1.8v-14.4L19.5,5.924z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Choosing Columns in Browse Blade using C#\nDESCRIPTION: This snippet demonstrates how to select and add a new column (Status) to the browse blade. It involves opening the column chooser, finding the desired column, clicking its checkbox, and applying the changes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-openbrowse.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nrgBrowseBlade.FindCommandBar().ClickCommandBarItem(\"Columns\");\n\n// Find the column choose blade that pops up on the right\nvar columnChooserBlade = portal.FindSingleBladeByTitle(\"Choose columns\");\n\n// Find the column we want to activate\nvar columChooserGrid = columnChooserBlade.WaitForAndFindElement<Grid>();\nvar statusCell = columChooserGrid.FindCell(\"Status\");\nvar statusCheckbox = statusCell.FindElement<CheckBox>();\nstatusCheckbox.Click();\ncolumnChooserBlade.FindElement<FilterActionBar>().UpdateButton.Click();\n```\n\n----------------------------------------\n\nTITLE: Defining Dropbox Logo SVG\nDESCRIPTION: SVG code for the Dropbox logo. It defines a 30x30 pixel image with paths representing the Dropbox icon using blue color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_195\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"-0.5 0.5 30 30\" enable-background=\"new -0.5 0.5 30 30\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M14.519,6.721l-8.957,5.465L-0.5,7.319L8.342,1.55L14.519,6.721z\"/>\n<path fill=\"#0072C6\" d=\"M14.519,17.65l-8.957-5.464L-0.5,17.053l8.842,5.768L14.519,17.65z\"/>\n<path fill=\"#0072C6\" d=\"M14.481,6.721l8.946,5.465L29.5,7.319L20.658,1.55L14.481,6.721z\"/>\n<path fill=\"#0072C6\" d=\"M14.481,17.65l8.946-5.464l6.073,4.867l-8.842,5.768L14.481,17.65z\"/>\n<path fill=\"#0072C6\" d=\"M20.658,23.87l-6.178-5.087L8.302,23.87L5.68,22.15v2.024l8.8,5.276l8.8-5.276V22.15L20.658,23.87z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining WebTest SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the WebTest icon used in the Azure portal. The icon represents a web testing environment with a circular progress indicator and a checkmark.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_96\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M33.143,38.974c-3.735,2.856-8.137,4.248-12.507,4.248c-6.201,0-12.333-2.784-16.385-8.084\n\tc-6.923-9.039-5.214-21.967,3.842-28.893C11.827,3.371,16.233,2,20.598,2c6.201,0,12.334,2.784,16.385,8.089\n\tC43.907,19.125,42.182,32.055,33.143,38.974\"/>\n<path fill=\"#59B4D9\" d=\"M33.143,38.974c-3.735,2.856-8.137,4.248-12.507,4.248c-6.201,0-12.333-2.784-16.385-8.084\n\tc-6.923-9.039-5.214-21.967,3.842-28.893C11.827,3.371,16.233,2,20.598,2c6.201,0,12.334,2.784,16.385,8.089\n\tC43.907,19.125,42.182,32.055,33.143,38.974\"/>\n<path fill=\"#FFFFFF\" d=\"M29.356,26.225c1.497,1.953,4.276,2.305,6.218,0.828c0.101-0.077,0.18-0.171,0.272-0.255\n\tc1.986,1.399,3.532,2.436,4.309,2.965c0.23-0.596,0.383-1.161,0.547-1.759c-0.821-0.611-2.092-1.586-3.698-2.887\n\tc0.527-1.385,0.361-3.001-0.602-4.264c-1.376-1.781-3.814-2.234-5.719-1.136c-2.1-1.884-4.406-4.042-6.838-6.459\n\tc7.557-4.064,12.927-3.469,12.927-3.469c-0.896-1.143-1.901-2.144-2.973-3.049c-3.187-0.492-8.138-0.437-13.795,2.572l-0.002-0.003\n\tl-0.001,0c-1.885-1.973-3.804-4.088-5.758-6.359c-0.935,0.299-1.849,0.67-2.731,1.111c1.442,2.36,3.383,4.741,5.57,7.063h0\n\tc0,0,0,0,0,0c-1.822,1.275-3.841,2.994-5.713,4.974c-0.239,0.255-0.469,0.511-0.695,0.768C9.556,16.632,8.38,16.7,7.281,17.098\n\tC5.413,13.07,5.563,9.835,5.858,8.166c-0.811,0.849-1.568,1.742-2.22,2.694c-0.487,1.992-0.626,4.864,0.812,8.325\n\tc-1.665,2.179-1.743,5.269-0.004,7.548c0.145,0.189,0.3,0.364,0.461,0.532c-0.76,2.587-1.099,5.082-1.204,7.225\n\tc0.195,0.266,0.195,0.48,0.389,0.739c0.989,1.268,2.238,2.467,3.438,3.435c-0.149-2.267,0.003-5.742,1.406-9.507\n\tc0.967,0.073,1.951-0.079,2.872-0.467c0.528,0.465,1.08,0.934,1.67,1.411c2.022,1.601,4.041,2.847,6.007,3.829\n\tc-0.102,1.001,0.149,2.04,0.798,2.901c1.39,1.794,3.962,2.129,5.758,0.758c0.374-0.286,0.669-0.632,0.913-1.003\n\tc3.207,0.714,6.009,0.84,8.086,0.84c0.318,0,1.795-2.009,2.641-3.254c-1.265,0.265-5.016,0.78-10.143-0.693\n\tc-0.124-0.575-0.36-1.134-0.741-1.633c-1.302-1.707-3.683-2.076-5.457-0.934c-1.782-0.967-3.648-2.178-5.572-3.702\n\tc-0.388-0.307-0.761-0.615-1.12-0.922c1.176-1.853,1.301-4.228,0.262-6.225c0.236-0.236,0.468-0.473,0.719-0.707\n\tc1.906-1.78,3.698-3.205,5.376-4.349c-0.066-0.062-0.126-0.127-0.192-0.189c0.066,0.061,0.128,0.123,0.194,0.184\n\tc0,0-0.001,0.001-0.002,0.001c2.573,2.38,5.302,4.635,7.887,6.65C28.209,23.101,28.316,24.866,29.356,26.225z\"/>\n<path fill=\"#A0A1A2\" d=\"M49.625,45.229l-8.023-13.897v-5.625h0.145c0.96,0,1.738-0.778,1.738-1.738s-0.778-1.738-1.738-1.738h-8.754\n\tc-0.96,0-1.738,0.778-1.738,1.738s0.778,1.738,1.738,1.738h0.145v5.625l-8.023,13.897c-0.88,1.524-0.16,2.771,1.6,2.771h21.311\n\tC49.785,48,50.504,46.753,49.625,45.229z\"/>\n<path fill=\"#B8D432\" d=\"M43.016,39.247h-3.767c0.104,0.214,0.165,0.454,0.165,0.708c0,0.894-0.725,1.619-1.619,1.619\n\ts-1.619-0.725-1.619-1.619c0-0.254,0.06-0.494,0.165-0.708h-4.619l-3.31,5.734h17.915L43.016,39.247z\"/>\n<path fill=\"#7FBA00\" d=\"M37.795,41.574c0.894,0,1.619-0.725,1.619-1.619c0-0.254-0.06-0.494-0.165-0.708h-2.908\n\tc-0.104,0.214-0.165,0.454-0.165,0.708C36.176,40.85,36.901,41.574,37.795,41.574z\"/>\n<circle fill=\"#7FBA00\" cx=\"39.804\" cy=\"42.824\" r=\"0.794\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Database Icon Implementation\nDESCRIPTION: SVG implementation of a database icon using cylindrical shapes and gradients. Features multiple layers with different colors to create depth effect.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_23\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#3999C6\" d=\"M6,6.788v36.111c0,3.749,8.392,6.789,18.743,6.789v-42.9C24.743,6.788,6,6.788,6,6.788z\"/>\n```\n\n----------------------------------------\n\nTITLE: Using $root in Widget Context for Click Handling\nDESCRIPTION: This TypeScript snippet demonstrates how to use the $root property to bind a click handler from a part/blade viewmodel to HTML inside a widget.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-this.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Declare my click handler\nthis.labelClick = () => this.labelSelectable.isSelected(true);\n\n// Set my click handler as an <a> tag 'click' binding on the label of my textbox\nthis.lastNameModel = new Forms.TextBox.ViewModel(container, this, \"lastName\", {\n    label: ko.observable<string>(\"Choose your last name (click here for more <a href data-bind='click: $root.labelClick'>info</a>)\"),\n    subLabel: ko.observable<string>(ClientResources.tryCara)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Parameters in config.json\nDESCRIPTION: Specific configuration for the Playwright automation in the @microsoft/azureportal-test framework. This defines browser type, resolution, and other Playwright-specific options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"playwright\": {\n    \"browser\": \"chrome\",\n    \"resolution\": {\n        \"width\": 1280,\n        \"height\": 960\n    },\n    \"options\": {\n        \"headless\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Color Palette CSS Implementation\nDESCRIPTION: Comprehensive CSS color palette implementation defining background colors and text colors for various states and shades. Includes multiple color variations with specific hex values.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n#bgcolorpalette .bgcolorcontainer {\n    display: inline-flex;\n    flex-flow: column nowrap;\n  }\n\n  .bgcolorcontainer div {\n    padding: 10px;\n    width: 200px;\n    display: inline-block;\n    text-align: center;\n    margin: auto;\n  }\n```\n\n----------------------------------------\n\nTITLE: Uploading Azure Gallery Package\nDESCRIPTION: Command to upload an Azure Gallery package (azpkg) to the marketplace using AzureGalleryUtility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_9\n\nLANGUAGE: bat\nCODE:\n```\n> Microsoft.Azure.Gallery.AzureGalleryUtility.exe upload -p ..\\path\\to\\package.azpkg\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Reference Palette Enum Values\nDESCRIPTION: Enumeration defining the allowed color palette values for icon references in the Azure Portal. Includes basic colors and special states like 'None', 'Inherit', and 'Disabled'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-iconReference-palette.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- None\n- White\n- Black\n- Blue\n- Green\n- Gray\n- Inherit\n- Disabled\n```\n\n----------------------------------------\n\nTITLE: Defining Media SVG Icon for Azure Portal\nDESCRIPTION: SVG markup defining the Media icon used in the Azure portal. The icon features a hexagonal shape with a play button inside.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_57\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#3E3E3E\" points=\"24.65,50 3,37.5 3,12.5 24.65,0 46.301,12.5 46.301,37.5 \"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M24.651,50L46.3,37.5v-25C46.3,12.5,28.413,26.12,24.651,50\"/>\n<path fill=\"#FFFFFF\" d=\"M34.172,14.958c-5.55-5.526-14.518-5.526-20.074,0c-5.549,5.549-5.549,14.535,0,20.084\n\tc5.549,5.525,14.524,5.525,20.074,0C39.715,29.497,39.715,20.511,34.172,14.958\"/>\n<path fill=\"#59B4D9\" d=\"M32.227,16.903c-4.474-4.456-11.705-4.456-16.185,0c-4.473,4.474-4.473,11.719,0,16.192\n\tc4.475,4.456,11.711,4.456,16.185,0C36.697,28.626,36.697,21.38,32.227,16.903\"/>\n<polygon fill=\"#FFFFFF\" points=\"31.029,24.986 20.127,17.816 20.127,25.015 30.986,25.015 \"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" enable-background=\"new    \" points=\"30.986,25.015 20.127,25.015 20.127,32.213 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse Tab in Resource Overview for Azure Portal\nDESCRIPTION: This JSON configuration defines a DataBrowse tab to be included in a resource overview. It specifies the data structure and column definitions for the DataBrowse view, including custom actions and value mappings for different statuses. This configuration can be added to the 'tabs' section of a Resource Overview (GetStarted) schema.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"DataBrowse\",\n  \"ariaLabel\": \"testing\",\n  \"data\": [\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"succeeded\",\n      \"menu\": \"tags\",\n      \"urlText\": \"Azure portal\",\n      \"urlAction\": {\n        \"url\": \"https://azure.microsoft.com/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"aks-agentpool\"\n        },\n        \"title\": \"aks-agentpool\"\n      },\n      \"diskSize\": 100,\n      \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n    },\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"warning\",\n      \"menu\": \"metrics\",\n      \"urlText\": \"Microsoft\",\n      \"urlAction\": {\n        \"url\": \"https://www.microsoft.com/en-us/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"AzureMobileTest-vnet\"\n        },\n        \"title\": \"AzureMobileTest-vnet\"\n      },\n      \"diskSize\": 10000,\n      \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n    },\n    {\n      \"name\": \"\",\n      \"id\": \"\",\n      \"status\": \"failed\",\n      \"menu\": \"locks\",\n      \"urlText\": \"Github\",\n      \"urlAction\": {\n        \"url\": \"https://github.com/\"\n      },\n      \"parameters\": {\n        \"obj\": {\n          \"name\": \"Test-disk\"\n        },\n        \"title\": \"Test-disk\"\n      },\n      \"diskSize\": 1500,\n      \"price\": 1500,\n      \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n    }\n  ],\n  \"columns\": [\n    {\n      \"displayName\": \"Name\",\n      \"name\": \"name\",\n      \"action\": {\n        \"resourceId\": \"[$item.id]\"\n      }\n    },\n    {\n      \"displayName\": \"Menu\",\n      \"name\": \"menu\",\n      \"action\": {\n        \"menu\": \"[$item.menu]\"\n      }\n    },\n    {\n      \"displayName\": \"Url\",\n      \"name\": \"urlText\",\n      \"action\": {\n        \"url\": \"[$item.urlAction.url]\"\n      }\n    },\n    {\n      \"displayName\": \"Blade\",\n      \"name\": \"name\",\n      \"action\": {\n        \"blade\": {\n          \"name\": \"ObjectJsonViewBlade\",\n          \"extension\": \"Microsoft_Azure_CreateUIDef\",\n          \"parameters\": \"[$item.parameters]\",\n          \"inContextPane\": true\n        }\n      }\n    },\n    {\n      \"displayName\": \"Status\",\n      \"name\": \"status\",\n      \"valueMapping\": [\n        {\n          \"value\": \"Succeeded\",\n          \"displayName\": \"Succeeded\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n        },\n        {\n          \"value\": \"Warning\",\n          \"displayName\": \"Warning\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n        },\n        {\n          \"value\": \"Failed\",\n          \"displayName\": \"Failed\",\n          \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n        }\n      ]\n    },\n    {\n      \"displayName\": \"Disk size\",\n      \"name\": \"diskSize\",\n      \"format\": \"Number\",\n      \"sourceUnits\": \"Gigabytes\",\n      \"maximumFractionDigits\": 2\n    },\n    {\n      \"displayName\": \"Creation time\",\n      \"name\": \"creationTime\",\n      \"format\": \"Date\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots in TestCleanup for Failed Tests in C#\nDESCRIPTION: Example showing how to capture screenshots when tests fail. This implementation adds the screenshot to test results when the test outcome is not 'Passed', providing visual evidence for debugging failures. The method properly cleans up resources by disposing web driver and servers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCleanup]\npublic void TestCleanup()\n{\n    if (TestContext.CurrentTestOutcome != UnitTestOutcome.Passed && webDriver != null)\n    {\n        TestContext.AddResultFile(webDriver.TakeScreenshot(TestContext.TestRunResultsDirectory,\n\t\t\t\t\t\t\t\t\t\t\t   TestContext.TestName));\n    }\n\n    webDriver.Dispose();\n    portalServer.Dispose();\n    samplesExtensionServer.Dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Print Display Modes in Azure Portal\nDESCRIPTION: KQL query to analyze display modes active during print requests over the last day for non-internal users.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-printing.md#2025-04-23_snippet_2\n\nLANGUAGE: kql\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(1d)\n| where userTypeHint == \"\"\n| where action == \"PrintRequest\"\n| extend displayMode = tostring(parse_json(data)[\"displayMode\"])\n| summarize count() by displayMode\n```\n\n----------------------------------------\n\nTITLE: Registering Domain-Mapped Test Extension in JavaScript\nDESCRIPTION: Code snippet showing how to register an extension running on a custom domain or a domain mapped via the hosts file. The true parameter makes this registration temporary for the current session only.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-sideloading.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMsPortalImpl.Extension.registerTestExtension({ name:  \"<extensionName>\", uri: \"https://some.hosts.mapped.domain\"}, true);\n```\n\n----------------------------------------\n\nTITLE: Defining Quickstart SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Quickstart icon used in the Azure Portal interface. This icon displays a cloud with a lightning bolt, representing quick deployment or setup.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_156\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-0.5 0.5 50 50\" enable-background=\"new -0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M42.63,22.172c0.249-0.976,0.386-1.985,0.386-3.006c0-4.03-1.973-7.582-5.021-9.731l-4.781,8.054\n\tc-0.196,0.303-0.045,0.555,0.32,0.555l6.134-0.039c0.353-0.012,0.442,0.208,0.205,0.472L24.041,36.535\n\tc-0.234,0.27-0.329,0.226-0.187-0.104l4.997-12.202c0.116-0.323-0.05-0.591-0.41-0.591h-4.864c-0.347,0-0.537-0.252-0.401-0.599\n\tl5.825-15.541c-3.935,0.742-7.17,3.448-8.677,7.054c-1.525-1.804-3.81-2.959-6.359-2.959c-4.597,0-8.342,3.76-8.342,8.404\n\tc0,0.813,0.116,1.57,0.32,2.297C2.189,23.689-0.5,27.33-0.5,31.594c0,5.463,4.398,9.906,9.831,9.906h30.334\n\tc5.448,0,9.834-4.436,9.834-9.906C49.512,27.17,46.624,23.431,42.63,22.172z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for Shield in Azure Portal\nDESCRIPTION: SVG definition for a shield icon, likely used to represent security or protection features in the Azure Portal UI. The icon is a simple shield shape with a diagonal line across it.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_127\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M22,5.477c0,0-2.462-1.4-10-1.4s-10,1.4-10,1.4l7.969,8.031l0.338,7c0,0,0.754,0.492,1.692,0.492\n\tc0.954,0,1.692-0.492,1.692-0.492l0.385-7L22,5.477z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Authored Type Metadata for a Composite Model in TypeScript\nDESCRIPTION: Shows how to define a composite model interface (`Computer`) that includes an array of another model (`ComputerComponent`). It defines the corresponding metadata (`ComputerMetadata`), specifying `isArray` and `itemType` for the nested collection. Includes an `amd-dependency` directive to ensure the component's metadata is registered first before the composite model's metadata. Registers the metadata using `setTypeMetadata`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    /// <amd-dependency path=\"./ComputerComponent\" />\n    import { ComputerComponent } from \"./ComputerComponent\";\n\n    export interface Computer {\n        name: KnockoutObservable<string>;\n        display: KnockoutObservable<string>;\n        model: KnockoutObservable<string>;\n        manufacturer: KnockoutObservable<string>;\n        components: KnockoutObservableArray<ComputerComponent>;\n    }\n\n    export const ComputerMetadata: MsPortalFx.Data.Metadata.Metadata = {\n        name: \"SamplesExtension.DataModels.Computer\",\n        properties: {\n            name: {},\n            display: {},\n            model: {},\n            manufacturer: {},\n            components: {\n                isArray: true,\n                itemType: \"SamplesExtension.DataModels.ComputerComponent\"\n            }\n        },\n        idProperties: [\n            name\n        ],\n        entityType: false,\n        hasGloballyUniqueId: false\n    };\n\n    MsPortalFx.Data.Metadata.setTypeMetadata(ComputerMetadata.name, ComputerMetadata);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Claims from HttpContext.User - ASP.NET - C#\nDESCRIPTION: Demonstrates accessing extended identity and claims from the current user in an ASP.NET extension using the HttpContext. Shows casting Identity to IPortalIdentity for email and tenant ID, and further to IAadIdentity for object and principal IDs and to check org account type. Requires Microsoft.Portal.Framework.IPortalIdentity and Microsoft.WindowsAzure.Management.AadAuthentication.IAadIdentity, plus an authenticated HttpContext. Expects user context present; constraints include incomplete population of FirstName/LastName and object type safety.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// use IPortalIdentity for email and tenant id\\n// NOTE: Do not rely on IPortalIdentity.FirstName and LastName properties; they are not consistenty populated\\nvar portalUser = HttpContext.User.Identity as Microsoft.Portal.Framework.IPortalIdentity;\\n// portalUser.EmailAddress;\\n// portalUser.TenantId;\\n\\n// use IAadIdentity (implements IPortalIdentity) for user id\\n// and to determine if the user is an MSA or AAD account\\nvar aadUser = portalUser as Microsoft.WindowsAzure.Management.AadAuthentication.IAadIdentity;\\nif (aadUser != null)\\n{\\n    // aadUser.ObjectId;\\n    // aadUser.PrincipalId;\\n    // aadUser.IsOrgId\\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: ErrorIcon\nDESCRIPTION: SVG markup for an error icon with a cloud shape and a blue exclamation mark. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.ErrorIcon() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_27\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n   viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<g>\n<path fill=\"#58595B\" d=\"M47.1,22.5c0-2.9-2.3-5.2-5.1-5.2c-0.2,0-0.4,0-0.6,0c0.3-1.2,0.5-2.4,0.5-3.6C41.9,6.2,35.8,0,28.2,0\n  c-6,0-11.1,3.9-13,9.4c-1-0.3-2-0.5-3-0.5c-5.2,0-9.3,4.2-9.3,9.4c0,5.2,4.2,9.4,9.3,9.4c0,0,0,0,0,0v0h30.2l0,0\n  C45.1,27.5,47.1,25.3,47.1,22.5\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M17.2,27.7c-1.2-1.2-2.1-2.8-2.6-4.6c-1.2-5.1,2-10.1,7-11.3\n  c1-0.2,2.1-0.3,3.1-0.2c0.5-4.7,3.3-9,7.7-11C31,0.2,29.7,0,28.2,0c-6,0-11.1,3.9-13,9.4c-1-0.3-2-0.5-3-0.5\n  c-5.2,0-9.3,4.2-9.3,9.4c0,5.2,4.2,9.4,9.3,9.4c0,0,0,0,0,0v0H17.2z\"/>\n<path fill=\"#00ACED\" d=\"M35.4,40.6l-3.9-11.3l-3.9,11.3c-0.9,2.4-2.1,5.6,0,7.8c2.1,2.1,5.6,2.1,7.8,0\n  C37.6,46.2,36.4,43.8,35.4,40.6z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Specific Cache Entries in QueryCache and EntityCache with TypeScript\nDESCRIPTION: This code demonstrates refreshing specific cache entries by using the refresh method, which is more efficient than refreshAll when changes are targeted. It refreshes the enginesQuery and also updates individual engine entities.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst promises: Promise<void>[] = [];\nthis.enginesQuery.refresh({}, null);\nMsPortalFx.makeArray(engines).forEach((engine) => {\n    promises.push(Promise.resolve(this.engineEntities.refresh(engine, null)));\n});\nreturn Promise.all(promises);\n```\n\n----------------------------------------\n\nTITLE: Defining Managed Identity Selector UI Control in JSON\nDESCRIPTION: This JSON snippet defines the configuration for a `Microsoft.ManagedIdentity.IdentitySelector` UI element. It sets the control's name to 'identity', specifies labels and tooltips for system and user-assigned identities, defaults system-assigned identity to 'Off', and provides options to hide either type of identity. This configuration is likely used within Azure portal UI definitions or similar frameworks.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.ManagedIdentity.IdentitySelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"identity\",\n    \"type\": \"Microsoft.ManagedIdentity.IdentitySelector\",\n    \"label\": \"Managed Identity Configuration\",\n    \"toolTip\": {\n      \"systemAssignedIdentity\": \"Enable system assigned identity to grant the resource access to other existing resources.\",\n      \"userAssignedIdentity\": \"Add user assigned identities to grant the resource access to other existing resources.\"\n    },\n    \"defaultValue\": {\n      \"systemAssignedIdentity\": \"Off\"\n    },\n    \"options\": {\n      \"hideSystemAssignedIdentity\": false,\n      \"hideUserAssignedIdentity\": false\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionBar in ViewModel\nDESCRIPTION: This JavaScript code shows how to instantiate and configure the ActionBar in the ViewModel. It includes setting up a click event handler for the action button.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyTemplateBladeViewModel extends MsPortalFx.ViewModels.Blade {\n\n    public id: KnockoutObservable<string>;\n    public infoBox: MsPortalFx.ViewModels.Controls.InfoBox.BaseViewModel;\n\n    // define the actionBar view-demol\n    public actionBar: MsPortalFx.ViewModels.ActionBars.GenericActionBar.ViewModel;\n\n    constructor(container: MsPortalFx.ViewModels.ContainerContract, initialState: any, dataContext: any) {\n        super();\n        this.title(\"InfoBox\");\n        this.subtitle(\"InfoBox Playground\");\n\n        this.infoBox = new MsPortalFx.ViewModels.Controls.InfoBox.LinkViewModel(container, {\n            text: this.text,\n            image: ko.observable(MsPortalFx.Base.Images.Info()),\n            clickableLink: ko.observable(MsPortalFx.ViewModels.Part.createClickableLinkViewModel(this.url))\n        });\n\n  // initialize the ActionBar\n\n        this.actionBar = new MsPortalFx.ViewModels.ActionBars.GenericActionBar.ViewModel(container);\n        this.actionBar.actionButtonClick = () => {\n            console.log(\"Clicked!!!\");\n        };\n    }\n\n    public onInputsSet(inputs: Def.InputsContract): Promise<any> {\n        return Promise.resolve();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Metadata for Atomization in C#\nDESCRIPTION: Demonstrates how to enable atomization for entity types with globally unique IDs using the TypeMetadataModel attribute. The third boolean parameter enables atomization for the specified type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-atomization.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[TypeMetadataModel(typeof(Robot), \"SamplesExtension.DataModels\", true /* Safe to unify entity as Robot IDs are globally unique. */)]\n```\n\n----------------------------------------\n\nTITLE: Defining Overview View Type Summary Properties in Azure Portal\nDESCRIPTION: Markdown table defining the properties for overview view type summaries in Azure Portal. Includes required and optional fields like title, description, learnMore link, and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-overviewViewType-SummaryReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the summary.\n|description|False|Description for the summary.\n|learnMore|False|LearnMore link that follows the description section for the summary. See [here](dx-getstarted-LearnMoreLink.md) on how to define a link.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: SVG Notification Icon Implementation in Azure Portal\nDESCRIPTION: XML-based SVG graphic definition for a notification icon used in the Azure Portal. The design features a speech bubble or notification balloon with an exclamation mark indicator to represent alerts or system notifications.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_63\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#B8D432\" d=\"M43.327,0H6.275C2.611-0.02,0,2.188,0,5.839v26.218c0,3.706,2.661,6.985,6.329,7.029l13.383,0.025\n\tL30.702,49.9l0.082-10.758h12.441c3.661,0.03,6.664-2.933,6.664-6.594l0.056-26.317C49.97,2.59,46.993,0,43.327,0\"/>\n<path fill=\"#FFFFFF\" d=\"M28.611,27.92c0,2.025-1.642,3.666-3.666,3.666c-2.024,0-3.667-1.641-3.667-3.666\n\tc0-2.025,1.643-3.666,3.667-3.666C26.969,24.254,28.611,25.895,28.611,27.92\"/>\n<polygon fill=\"#FFFFFF\" points=\"25.636,6.305 24.607,6.305 22.039,6.305 22.957,22.237 24.607,22.237 25.636,22.237 27.283,22.237 \n\t28.202,6.305 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using MsPortalFx.Data.AcceptEditScopeChangesAction\nDESCRIPTION: Reference to the full namespace path for AcceptEditScopeChangesAction enum in the Microsoft Portal Framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nMsPortalFx.Data.AcceptEditScopeChangesAction\n```\n\n----------------------------------------\n\nTITLE: Defining Refresh SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Refresh icon used in the Azure Portal interface. This icon shows a circular arrow with a triangle, representing a refresh or reload action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_158\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<g>\n\t<g>\n\t\t<polygon points=\"3.25,2 11.94,2 11.94,10.17 \t\t\"/>\n\t\t<path d=\"M12.6,22C7.32,21.91,3,17.53,3,12.19c0-3.12,1.49-5.86,3.78-7.58l2.08,2.08c-1.8,1.18-2.98,3.22-2.98,5.55\n\t\t\tc0,3.74,3.02,6.81,6.71,6.87c3.71,0.06,6.7-2.9,6.7-6.63c0-2.37-1.22-4.48-3.06-5.71l2.04-2.06c2.36,1.8,3.73,4.7,3.73,7.88\n\t\t\tC22,17.92,17.9,22.09,12.6,22z\"/>\n\t</g>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Minimal Content Unbundler Configuration in XML\nDESCRIPTION: Simplified configuration for Content Unbundler outside of CoreXT environments. Only the extension route prefix needs to be specified in most cases.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ContentUnbundlerExtensionRoutePrefix>[YourExtensionNameInHostingService]</ContentUnbundlerExtensionRoutePrefix>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting initial value for editscopeless TextBox control\nDESCRIPTION: Setting the initial value for the TextBox control explicitly since it's not tied to the EditScope. This must be done after the dataModel is initialized.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.engineName.value(data.name || \"\");\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Discard in Azure Portal\nDESCRIPTION: An SVG icon representing a discard or cancel action. Used in the Azure Portal UI to indicate functionality related to discarding changes or canceling operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_125\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<polygon points=\"15,3.475 12.539,1.001 8.006,5.534 3.474,1.001 1,3.475 5.52,8.007 1,12.527 3.474,15.001 \n\t7.994,10.481 12.526,15.014 15,12.54 10.467,8.007 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Start Icon in SVG\nDESCRIPTION: SVG markup defining the 'Start' icon for the Azure portal. It creates a triangular play button shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_166\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<g>\n\t<polygon points=\"20,11.95 6,22 6,2 \t\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating LaunchPortal Icon with External Link Representation in SVG\nDESCRIPTION: Definition of a launch portal icon that resembles an external link symbol. The SVG contains a green document/window shape and a yellow arrow pointing to the top-right corner, indicating external navigation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_50\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\" enable-background=\"new 0 0 30 30\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#B8D432\" d=\"M20.4,19.2v7.2H3.6V9.6h7.198V6H2.4C1.075,6,0,7.075,0,8.4v19.2\n\tC0,28.925,1.075,30,2.4,30h19.2c1.325,0,2.4-1.075,2.4-2.4v-8.4H20.4z\"/>\n<polygon fill=\"#FCD116\" points=\"30,0 19.2,0 23.221,4.021 7.835,19.406 10.629,22.2 26.015,6.815 30,10.8 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using batchMultiple for Fixed URI Sets\nDESCRIPTION: Shows how to batch multiple specific URIs together using the batchMultiple helper.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { batchMultiple} from \"Fx/Ajax\";\n\nreturn batchMultiple({\n    batchRequests: [\n       {\n           uri: \"https://management.azure.com/subscriptions/test/resourcegroups?api-version=2014-04-01-preview\",\n            httpMethod: \"GET\",\n       },\n       {\n           uri: \"https://management.azure.com/subscriptions/test/resourcegroups?api-version=2014-04-01-preview\",\n            httpMethod: \"PUT\",\n            content: {\n                  tags: { a: \"b\",  c:\"d\" },\n            },\n       },\n    ],\n}).then((batchResponse) => {\n    return batchResponse.content;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Ellipsis Icon Path Elements\nDESCRIPTION: SVG path elements that define three dots in an ellipsis pattern. Each path element represents a dot with specific positioning attributes and fill color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_47\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#FFFFFF\" d=\"M17.926,36.576c0,0.57-0.203,1.037-0.609,1.4s-0.941,0.545-1.605,0.545c-0.594,0-1.098-0.186-1.512-0.557\n\ts-0.621-0.834-0.621-1.389c0-0.563,0.207-1.023,0.621-1.383s0.938-0.539,1.57-0.539c0.609,0,1.121,0.184,1.535,0.551\n\tS17.926,36.029,17.926,36.576z\"/>\n<path fill=\"#FFFFFF\" d=\"M26.83,36.576c0,0.57-0.203,1.037-0.609,1.4s-0.941,0.545-1.605,0.545c-0.594,0-1.098-0.186-1.512-0.557\n\ts-0.621-0.834-0.621-1.389c0-0.563,0.207-1.023,0.621-1.383s0.938-0.539,1.57-0.539c0.609,0,1.121,0.184,1.535,0.551\n\tS26.83,36.029,26.83,36.576z\"/>\n<path fill=\"#FFFFFF\" d=\"M35.733,36.576c0,0.57-0.203,1.037-0.609,1.4s-0.941,0.545-1.605,0.545c-0.594,0-1.098-0.186-1.512-0.557\n\ts-0.621-0.834-0.621-1.389c0-0.563,0.207-1.023,0.621-1.383s0.938-0.539,1.57-0.539c0.609,0,1.121,0.184,1.535,0.551\n\tS35.733,36.029,35.733,36.576z\"/>\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Value in JavaScript (JSON)\nDESCRIPTION: This snippet demonstrates a JSON primitive string value, namely 'two'. The code is valid in any context that accepts JSON, such as API payloads, configuration files, or data serialization. There are no additional dependencies, parameters, or outputs beyond representing the string itself. Usage is limited to contexts expecting a bare JSON string value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DropDown-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"two\"\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Multiple Commits in Azure Portal\nDESCRIPTION: An SVG icon representing multiple commits or a commit history. Used in the Azure Portal UI to indicate functionality related to viewing or managing multiple commits in source control systems.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_120\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#59B4D9\" points=\"24.069,9.256 17.167,15.804 17.167,12.251 25.496,3.5 33.833,12.22 33.833,15.762 26.968,9.256 \n\t26.968,20.854 24.069,20.854 \"/>\n<path fill=\"#59B4D9\" d=\"M48.648,25.5H2.353c-1.02,0-1.853,0.832-1.853,1.853V31.5v13v4.147c0,1.021,0.836,1.853,1.848,1.853h46.295\n\tc1.02,0,1.853-0.832,1.853-1.853V44.5v-13v-4.147C50.496,26.332,49.66,25.5,48.648,25.5z M46.728,46.51h-42.5V29.5h42.5V46.51z\"/>\n<rect x=\"21.146\" y=\"34.176\" fill=\"#59B4D9\" width=\"8.323\" height=\"8.324\"/>\n<rect x=\"33.564\" y=\"34.176\" fill=\"#59B4D9\" width=\"8.32\" height=\"8.324\"/>\n<rect x=\"8.729\" y=\"34.176\" fill=\"#59B4D9\" width=\"8.324\" height=\"8.324\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Versions Icon in Azure Portal\nDESCRIPTION: SVG code representing a stacked documents icon used for the Versions functionality in Azure Portal. Uses blue and gray colors with offset stacking to create depth and includes opacity effects for visual interest.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_85\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M0,33.847c0,0.853,0.691,1.545,1.545,1.545h35.41c0.854,0,1.545-0.692,1.545-1.545V9.724H0V33.847z\"/>\n<path fill=\"#A0A1A2\" d=\"M36.955,2.564H1.545C0.691,2.564,0,3.255,0,4.109v5.873h38.501V4.109\n\tC38.501,3.255,37.808,2.564,36.955,2.564\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M1.551,2.564c-0.853,0-1.545,0.691-1.545,1.545v5.614v2.569v21.555\n\tc0,0.853,0.692,1.545,1.545,1.545h1.685L33.588,2.564H1.551z\"/>\n<path fill=\"#0072C6\" d=\"M11.499,45.52c0,0.853,0.691,1.545,1.545,1.545h35.41c0.854,0,1.545-0.692,1.545-1.545V21.396H11.499V45.52z\n\t\"/>\n<path fill=\"#3E3E3E\" d=\"M48.455,14.237h-35.41c-0.854,0-1.545,0.691-1.545,1.545v5.873H50v-5.873\n\tC50,14.928,49.308,14.237,48.455,14.237\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M13.05,14.237c-0.853,0-1.545,0.691-1.545,1.545v5.614v2.569V45.52\n\tc0,0.853,0.692,1.545,1.545,1.545h1.685l30.352-32.829H13.05z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorials Tab in Resource Overview (GetStarted) View in Azure Portal\nDESCRIPTION: This JSON schema demonstrates how to configure a Tutorials tab within a Resource Overview (GetStarted) view. It includes definitions for tiles, videos, and links groups, along with their respective properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Tutorials\",\n  \"tilesGroup\": {\n    \"displayName\": {\n      \"property\": \"freeTrainingsFromMicrosoft\"\n    },\n    \"items\": [\n      {\n        \"title\": {\n          \"property\": \"tile1Title\"\n        },\n        \"icon\": \"MsPortalFx.Base.Images.Polychromatic.Learn\",\n        \"subtitle\": {\n          \"property\": \"tile1Subtitle\"\n        },\n        \"description\": {\n          \"property\": \"tile1Description\"\n        },\n        \"action\": {\n          \"url\": \"https://www.azure.com\",\n          \"displayName\": {\n            \"property\": \"start\"\n          }\n        }\n      }\n    ]\n  },\n  \"videosGroup\": {\n    \"displayName\": {\n      \"property\": \"tab2videosTitle\"\n    },\n    \"items\": [\n      {\n        \"title\": {\n          \"property\": \"tab2feature1Title\"\n        },\n        \"description\": {\n          \"property\": \"tab2feature1Description\"\n        },\n        \"learnMore\": {\n          \"url\": \"https://www.azure.com\",\n          \"ariaLabel\": \"Learn more about Azure\"\n        },\n        \"video\": {\n          \"src\": \"https://www.youtube.com/watch?v=KXkBZCe699A\"\n        }\n      }\n    ]\n  },\n  \"linksGroup\": {\n    \"displayName\": \"Useful links\",\n    \"items\": [\n      {\n        \"title\": \"Concepts\",\n        \"action\": [\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Azure Managed applications overview\"\n          },\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Service Catalog applications\"\n          },\n          {\n            \"url\": \"https://azure.microsoft.com/en-us/\",\n            \"displayName\": \"Managed applications in Azure Marketplace\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Integrating a Member Selection Collector with PortalFx (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to define interfaces for input and configuration, and implement a command class that interacts with the Select Members Blade in Azure PortalFx using the ParameterCollection Framework v3.0. It requires dependencies on PortalFx SDK, Knockout (ko), a logging library, and assumes integration in a Portal extension. Key parameters such as memberIds, isSingleSelect, isInviteEnabled, and searchCriteria are supplied and updated to control blade configuration. The code expects Knockout observables for inputs and outputs, and processes the result in the receiveResult callback.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-adrbac.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This interface is used to define the inputs from the collector.\nexport interface SelectMemberInputs {\n    memberIds: KnockoutObservable<string>;\n}\n\n// This interface is used to define the config from the collector.\nexport interface SelectMemberConfig {\n    isSingleSelect: boolean;\n    isInviteEnabled: boolean;\n    searchCriteria: string[];\n}\n\n/**\n * This is an example of a command which calls into the select member blade\n */\nexport class TestSelectMemberV3CommandViewModel extends MsPortalFx.ViewModels.OpenBladeCommand implements VMD.Contract {\n\n  // collector\n  public selectMemberCollector: MsPortalFx.ViewModels.ParameterCollector<SelectMemberInputs>;\n\n  // inputs\n  private _memberIds = ko.observable(\"\");\n\n  // configuration values\n  private _isSingleSelect = ko.observable(true);\n  private _isInviteEnabled = ko.observable(true);\n  private _searchCriteria = ko.observableArray<string>([]);\n\n  // blade parameter values (these are passed via the blade params, not via the PCv3 framework.)\n  public title = \"Choose Members\";\n  public subtitle = \"Select Member Blade\";\n\n  constructor(_container: MsPortalFx.ViewModels.CommandContainerContract, initialState: any, dataContext: SharedArea.DataContext) {\n      super(_container);\n      this.icon(MsPortalFx.Base.Images.Polychromatic.Key());\n\n      this.selectMemberCollector = new MsPortalFx.ViewModels.ParameterCollector<SelectMemberInputs>(_container, {\n          supplyInitialData: () => {\n              return <SelectMemberInputs> {\n                  // this is where you would pass in an array of pre-selected members, if you desire.\n                  memberIds: ko.observable(\"\")\n              };\n          },\n          receiveResult: (result: SelectMemberInputs) => {\n              // this is what will happen when the user finishes selecting members and the blade closes.\n              this._performActionOnMembers(result.memberIds());\n          },\n          supplyProviderConfig: () => {\n              return <SelectMemberConfig> {\n                  isSingleSelect: this._isSingleSelect(),\n                  isInviteEnabled: this._isInviteEnabled(),\n                  searchCriteria: this._searchCriteria()\n              };\n          }\n      });\n  }\n\n  // normally, you would perform some action on the returned members here. In this example, just dump the payload into the log.\n  private _performActionOnMembers(membersAsJson: string) {\n      log.verbose(membersAsJson);\n  }\n\n  public onInputsSet(inputs: VMD.InputsContract): Promise<any> {\n      // these inputs are coming from another part\n      this._isSingleSelect(inputs.isSingleSelect);\n      this._isInviteEnabled(inputs.isInviteEnabled);\n\n      // remove all elements of the array\n      this._searchCriteria = ko.observableArray<string>([\"IncludeAllUsers\", \"IncludeOnlySecurityGroups\", \"ExcludeMSAUsers\"]);\n\n      return Promise.resolve();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Retain SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Retain icon used in the Azure Portal interface. This icon shows a document with a downward-pointing arrow, representing retention or storing of data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_161\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"4.5 20.5 24 24\" enable-background=\"new 4.5 20.5 24 24\" xml:space=\"preserve\">\n<path d=\"M23.5,27.5v13h-15v-13h-2v15h19v-15H23.5z\"/>\n<polygon points=\"17.379,34.249 21.5,30.564 21.5,33.566 15.991,38.5 10.5,33.589 10.5,30.588 14.595,34.249 14.595,22.5 \n\t17.379,22.5 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Blade Constructor Implementation in TypeScript\nDESCRIPTION: Constructor implementation showing initialization of view models, textboxes, and button controls with proper observable handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis._view = dataContext.personData.peopleEntities.createView(container);\n\nthis.nameTextBox = TextBox.create(container, {\n    readOnly: true,\n    label: \"Name\",\n});\n\nthis.smartPhone = ko.observable();\n\nthis.okButton = Button.create(container, {\n    text: \"OK\",\n    onClick: () => {\n        container.closeChildBlade();\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS for Azure Portal Icon Gallery - CSS\nDESCRIPTION: Establishes a set of CSS rules for layout, icon sizing, borders, and color styling in the Azure Portal icon presentation gallery. This stylesheet customizes HTML headings, list layouts, background colors, and applies different box sizing for icons based on their position. No external dependencies are required; styles operate on presentational classes and IDs provided in the same documentation HTML. Inputs are applied through class and element selectors; outputs are visual CSS effects applied in the browser. Constraints: The target HTML must use the expected structure and class names.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#icon-container h6, #icon-container h2 {\n  padding-top: 20px;\n  clear:both;\n}\n.icons, .icons ul {\n  list-style-type: none;\n  clear: both;\n}\n.icons > li > ul > li {\n  padding: 10px;\n  margin-right: 10px;\n  float: left;\n  border: 1px solid gray;\n}\n.icons > li > ul > li:nth-child(3n+1) > div {\n  width: 16px;\n  height: 16px;\n}\n.icons > li > ul > li:nth-child(3n+2) > div {\n  width: 24px;\n  height: 24px;\n}\n.icons > li > ul > li:nth-child(3n+3) > div {\n  width: 50px;\n  height: 50px;\n}\n.icons > li > ul > li:nth-child(n+4) {\n  background-color: #32383f\n}\nsvg {\n  width: 100%;\n  height: 100%;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inefficient Observable Array Mutation Example\nDESCRIPTION: Demonstrates an inefficient way of mutating observable arrays that should be avoided due to performance implications.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet numbers = ko.observable([]);\nfor (i = 0; i < 100; i++) {\n    numbers.push(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate Icon SVG Definition\nDESCRIPTION: SVG icon definition for a certificate/document with yellow background and orange seal element.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_13\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FCD116\" d=\"M50,37.571c0,1.973-1.599,3.571-3.571,3.571H3.571C1.599,41.143,0,39.544,0,37.571v-30 C0,5.599,1.599,4,3.571,4h42.857C48.401,4,50,5.599,50,7.571V37.571z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Dashboard Tile Properties Documentation\nDESCRIPTION: Structured documentation of tile properties and configurations for different tile types in Azure Dashboard views. Each tile type has specific required and optional properties that control its appearance and behavior.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-tiles.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description |\n| ---|:--:|:--:|\n|type|True|Enum permitting the value: \"MarkdownTile\"\n|title|True|The title of the tile.\n|subtitle|False|The subtitle of the tile.\n|layout|True|Determines the tile size and location of the tile on the page.\n|visible|False|Hide or show the tile based on the parameter values.\n|highlight|False|Highlight the tile based on the parameter values.\n|actions|False|Actions available on the tile.\n|data|True|The data that determines the content of the markdown tile.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing Properties Icon in Azure Portal\nDESCRIPTION: An SVG icon showing a properties or settings menu with three horizontal lines and dots. This simple list view icon is used to represent configuration settings or properties in the Azure Portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_151\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M21.31,13.5H8.69c-0.51,0-0.93-0.56-0.93-1.07c0-0.51,0.42-0.93,0.93-0.93h12.62c0.52,0,0.93,0.42,0.93,0.93\n\tC22.24,12.94,21.83,13.5,21.31,13.5z\"/>\n<path d=\"M21.31,7.5H8.69c-0.51,0-0.93-0.56-0.93-1.07S8.18,5.5,8.69,5.5h12.62c0.52,0,0.93,0.42,0.93,0.93S21.83,7.5,21.31,7.5z\"/>\n<path d=\"M21.32,19.5H8.69c-0.51,0-0.93-0.56-0.93-1.07c0-0.52,0.42-0.93,0.93-0.93h12.63c0.51,0,0.92,0.41,0.92,0.93\n\tC22.24,18.94,21.83,19.5,21.32,19.5z\"/>\n<circle cx=\"4.5\" cy=\"6.5\" r=\"1.5\"/>\n<circle cx=\"4.5\" cy=\"12.5\" r=\"1.5\"/>\n<circle cx=\"4.5\" cy=\"18.5\" r=\"1.5\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Capability Item Properties in Azure Portal (Markdown)\nDESCRIPTION: This snippet defines the properties required for each capability item in the Capabilities Tab. It includes essential fields like title, description, icon, and action, as well as optional fields like status and visibility control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-CapabilitiesTab-capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title of the capability\n|description|True|Description for the capability\n|icon|True|Specifies the icon for the capability. See [here](dx-iconReference.md) on how to define an icon.\n|action|True|Specifies the action to be taken on clicking the capability. See [here](dx-getstarted-ActionReference.md) for more.\n|status|False|Specifies the configuration status for the capability. See [here](dx-getstarted-CapabilitiesTab-status.md) for more.\n|visible|False|When visible is evaluated to *true* then the capability will be displayed, otherwise it will be hidden.  Default value is **true**.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Creating Guide Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code defines a circular guide icon with multiple path elements. The icon uses different colors to create a layered effect and includes a small 'M' letter in the center.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_41\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M22.83,4.368C17.124,4.97,12.221,7.816,8.877,11.947c-3.345,4.134-5.106,9.52-4.508,15.227\n\tc0.604,5.703,3.449,10.604,7.581,13.949c4.134,3.346,9.52,5.109,15.222,4.509c5.705-0.601,10.606-3.451,13.955-7.581\n\tc3.34-4.132,5.106-9.519,4.505-15.225c-0.608-5.751-3.528-10.669-7.724-14.064c-3.531-2.859-8.032-4.51-12.856-4.51\n\tC24.319,4.252,23.578,4.29,22.83,4.368\"/>\n<path fill=\"#A0A1A2\" d=\"M49.859,22.381c-0.728-6.937-4.271-12.883-9.273-16.928c-0.971-0.786-2.018-1.472-3.1-2.1L35.523,7.13\n\tc0.83,0.493,1.636,1.024,2.385,1.632c4.196,3.395,7.116,8.312,7.723,14.063c0.602,5.706-1.165,11.093-4.504,15.226\n\tc-3.349,4.131-8.25,6.98-13.955,7.581c-3.82,0.4-7.489-0.277-10.744-1.761l-1.961,3.774c3.976,1.851,8.479,2.708,13.151,2.214\n\tc6.862-0.719,12.796-4.164,16.814-9.133C48.453,35.763,50.587,29.239,49.859,22.381\"/>\n<path fill=\"#A0A1A2\" d=\"M11.951,41.123c-4.133-3.346-6.978-8.247-7.581-13.949C3.771,21.466,5.532,16.08,8.878,11.946\n\tc3.343-4.13,8.246-6.977,13.951-7.578c4.613-0.484,9.016,0.574,12.694,2.76l1.963-3.776c-4.416-2.564-9.661-3.787-15.105-3.214\n\tC15.522,0.861,9.588,4.305,5.569,9.27L5.562,9.279c-4.018,4.965-6.144,11.484-5.423,18.338c0.723,6.859,4.164,12.796,9.135,16.815\n\tc1.582,1.282,3.335,2.346,5.194,3.212l1.961-3.774C14.826,43.14,13.315,42.227,11.951,41.123\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M11.951,41.123c-4.133-3.346-6.978-8.247-7.581-13.949\n\tC3.771,21.466,5.532,16.08,8.878,11.946c3.343-4.13,8.246-6.977,13.951-7.578c4.613-0.484,9.016,0.574,12.694,2.76l1.963-3.776\n\tc-4.416-2.564-9.661-3.787-15.105-3.214C15.522,0.861,9.588,4.305,5.569,9.27L5.562,9.279c-4.018,4.965-6.144,11.484-5.423,18.338\n\tc0.723,6.859,4.164,12.796,9.135,16.815c1.582,1.282,3.335,2.346,5.194,3.212l1.961-3.774C14.826,43.14,13.315,42.227,11.951,41.123\n\t\"/>\n<polygon fill=\"#BA141A\" points=\"29.678,27.103 25,12.803 25,12.802 25,12.802 25,12.801 25,12.803 20.322,27.104 25,27.104 \n\t25,27.103 \"/>\n<polygon fill=\"#3E3E3E\" points=\"25,27.103 25,27.103 20.322,27.103 25,41.406 25,41.406 29.678,27.103 \"/>\n<path d=\"M27.834,12.422h-1.433l-2.596-3.959c-0.154-0.231-0.258-0.406-0.318-0.523h-0.016c0.022,0.234,0.035,0.574,0.035,1.019\n\tv3.463h-1.341V6.12h1.529l2.5,3.837l0.318,0.514h0.016c-0.022-0.153-0.035-0.442-0.035-0.865V6.12h1.341\n\tC27.834,6.12,27.834,12.422,27.834,12.422z\"/>\n<polygon opacity=\"0.3\" fill=\"#FFFFFF\" enable-background=\"new    \" points=\"29.678,27.103 29.678,27.103 29.678,27.103 25,12.801 \n\t25,27.103 25,27.103 25,41.406 29.678,27.103 \"/>\n```\n\n----------------------------------------\n\nTITLE: Migrating Extension Configuration to Hosting Service Format - JSON\nDESCRIPTION: This JSON snippet shows the minimal configuration required when moving an extension to the Hosting Service format, as part of a migration process. The hostingServiceName property is added to identify the extension within the hosting service infrastructure, and the feedback email is kept for notifications and support. Dependency: The hosting service must be enabled and the extension registered in the Azure environment. Inputs include the extension name and hostingServiceName; output is the simplified configuration file consumed by the hosting infrastructure. Limitation: Should only be used after uriFormat has been migrated and tested.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    name: \"Microsoft_Azure_MyExtension\",\n    hostingServiceName: \"myextension\",\n    feedbackEmail: \"azureux-myextension@microsoft.com\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backlog Icon in SVG\nDESCRIPTION: SVG code that defines a backlog icon using paths to create lines and checkmarks. The icon uses a single color fill.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_109\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M21.07,13.5H8.45c-0.51,0-0.93-0.56-0.93-1.07c0-0.51,0.42-0.93,0.93-0.93h12.62c0.52,0,0.93,0.42,0.93,0.93\n\tC22,12.94,21.59,13.5,21.07,13.5z\"/>\n<path d=\"M21.07,7.5H8.45c-0.51,0-0.93-0.56-0.93-1.07S7.94,5.5,8.45,5.5h12.62C21.59,5.5,22,5.92,22,6.43S21.59,7.5,21.07,7.5z\"/>\n<path d=\"M21.08,19.5H8.45c-0.51,0-0.93-0.56-0.93-1.07c0-0.52,0.42-0.93,0.93-0.93h12.63c0.51,0,0.92,0.41,0.92,0.93\n\tC22,18.94,21.59,19.5,21.08,19.5z\"/>\n<polygon points=\"2,5.899 2,5.899 2.699,5.199 2.699,5.199 2.699,5.199 4.1,6.599 6.901,3.798 6.901,3.798 6.901,3.798 7.6,4.499 \n\t7.6,4.499 7.6,4.499 4.1,8 \"/>\n<polygon points=\"2,11.899 2,11.899 2.699,11.199 2.699,11.199 2.699,11.199 4.1,12.599 6.901,9.798 6.901,9.798 6.901,9.798 \n\t7.6,10.499 7.6,10.499 7.6,10.499 4.1,14 \"/>\n<polygon points=\"2,17.899 2,17.899 2.699,17.199 2.699,17.199 2.699,17.199 4.1,18.599 6.901,15.798 6.901,15.798 6.901,15.798 \n\t7.6,16.499 7.6,16.499 7.6,16.499 4.1,20 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic App Insights Icon - SVG/XML\nDESCRIPTION: Implements the App Insights polychromatic icon as a complete SVG document for Azure applications. No dependencies beyond HTML/SVG support are needed; outputs a styled, scalable analytics bulb icon suited for data monitoring themes. It requires placement in a valid HTML container supporting SVG, and custom CSS may affect sizing.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_2\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t viewBox=\\\"0 0 50 50\\\" enable-background=\\\"new 0 0 50 50\\\" xml:space=\\\"preserve\\\">\\n<rect x=\\\"19.8\\\" y=\\\"39.4\\\" fill=\\\"#7A7A7A\\\" width=\\\"10.6\\\" height=\\\"3.4\\\"/>\\n<polygon fill=\\\"#7A7A7A\\\" points=\\\"23.1,50 27,50 30.3,46.5 19.8,46.5 \\\"/>\\n<path fill=\\\"#68217A\\\" d=\\\"M41.2,14.7L41.2,14.7v-0.3c0-7.7-6.6-14.1-14.7-14.2c-0.2-0.3-4.8,0.1-4.8,0.1l0,0c-7.3,0.9-13,7-13,14.1\\nc0,0.2-0.8,5.8,4.9,10.5c2.6,2.3,5.3,8.5,5.7,10.3l0.3,0.6h10.6l0.3-0.6c0.4-1.8,3.2-8,5.7-10.2C41.9,20.2,41.2,14.9,41.2,14.7z\\\"/>\\n<path fill=\\\"#FFFFFF\\\" d=\\\"M30.4,18.1l-1.7,10.6h-2V18.2l0.1-0.2c3.8,0,3.3-3.5,3.3-3.5H19.8v0.3c0,0.8,0.3,3.3,3.5,3.3v10.6h-2\\nl-0.5-2.5l-1.3-8.1c-2.3,0-3-1.5-3.3-2.6c0-0.4,0-0.9,0-1.4c0-2.8,3.2-3.1,3.2-3.1h11c0,0,3.5,0.4,3.5,3.5\\nC33.8,14.5,33.9,18.1,30.4,18.1z\\\"/>\\n<path opacity=\\\"0.15\\\" fill=\\\"#FFFFFF\\\" enable-background=\\\"new    \\\" d=\\\"M41.2,16.4c0.1-1,0-1.7,0-1.8l0,0v-0.3\\nc0-7.7-6.6-14.1-14.7-14.2c-0.2-0.3-4.8,0.1-4.8,0.1l0,0c-7.3,0.9-13,7-13,14.1c0,0.1-0.1,0.9,0,2.1H41.2z\\\"/>\\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic SQL Database SVG Icon in Azure Portal\nDESCRIPTION: SVG definition for a SQL Database icon used in the Azure Portal. The icon displays a blue cylindrical database with SQL text overlay, representing Azure SQL Database service.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_77\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-0.5 0.5 50 50\" enable-background=\"new -0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M5.757,7.288v36.111c0,3.749,8.392,6.789,18.743,6.789v-42.9C24.5,7.288,5.757,7.288,5.757,7.288z\"/>\n<path fill=\"#0072C6\" d=\"M24.243,50.187H24.5c10.351,0,18.743-3.038,18.743-6.788V7.288h-19V50.187z\"/>\n<path opacity=\"0.15\" fill=\"#FFFFFF\" d=\"M24.243,50.187H24.5c10.351,0,18.743-3.038,18.743-6.788V7.288h-19V50.187z\"/>\n<path fill=\"#FFFFFF\" d=\"M43.243,7.288c0,3.749-8.392,6.788-18.743,6.788S5.757,11.037,5.757,7.288S14.149,0.5,24.5,0.5\n\tS43.243,3.539,43.243,7.288\"/>\n<path fill=\"#7FBA00\" d=\"M39.411,6.897c0,2.475-6.676,4.479-14.911,4.479S9.588,9.372,9.588,6.897c0-2.474,6.677-4.479,14.912-4.479\n\tS39.411,4.423,39.411,6.897\"/>\n<path fill=\"#B8D432\" d=\"M36.287,9.634c1.952-0.757,3.125-1.705,3.125-2.735c0-2.475-6.676-4.48-14.912-4.48\n\tc-8.235,0-14.911,2.005-14.911,4.48c0,1.03,1.173,1.978,3.125,2.735C15.44,8.576,19.7,7.893,24.5,7.893\n\tC29.301,7.893,33.559,8.576,36.287,9.634\"/>\n<path fill=\"#FFFFFF\" d=\"M18.547,32.354c0,1.122-0.407,1.991-1.221,2.607c-0.814,0.616-1.938,0.924-3.373,0.924\n\tc-1.221,0-2.241-0.22-3.061-0.66v-2.64c0.946,0.803,1.988,1.205,3.126,1.205c0.55,0,0.975-0.11,1.275-0.33s0.45-0.511,0.45-0.875\n\tc0-0.357-0.144-0.668-0.433-0.932s-0.876-0.605-1.761-1.023c-1.804-0.846-2.706-2.002-2.706-3.464c0-1.061,0.393-1.912,1.18-2.553\n\tc0.786-0.64,1.831-0.961,3.134-0.961c1.155,0,2.111,0.152,2.871,0.454v2.466c-0.797-0.55-1.705-0.825-2.722-0.825\n\tc-0.511,0-0.915,0.108-1.212,0.325c-0.297,0.218-0.445,0.508-0.445,0.87c0,0.374,0.119,0.681,0.359,0.92\n\tc0.239,0.239,0.73,0.535,1.472,0.887c1.106,0.523,1.893,1.053,2.364,1.592C18.312,30.881,18.547,31.552,18.547,32.354z\"/>\n<path fill=\"#FFFFFF\" d=\"M31.274,29.682c0,1.391-0.317,2.599-0.949,3.621c-0.633,1.023-1.523,1.74-2.672,2.153l3.431,3.176H27.62\n\tl-2.45-2.747c-1.05-0.038-1.998-0.316-2.842-0.833c-0.844-0.516-1.496-1.225-1.955-2.124s-0.689-1.902-0.689-3.007\n\tc0-1.226,0.249-2.319,0.746-3.279c0.498-0.96,1.197-1.698,2.099-2.215c0.902-0.516,1.935-0.775,3.102-0.775\n\tc1.088,0,2.063,0.25,2.924,0.751c0.86,0.5,1.528,1.212,2.004,2.136C31.036,27.463,31.274,28.511,31.274,29.682z M28.47,29.831\n\tc0-1.199-0.261-2.146-0.784-2.842s-1.237-1.044-2.145-1.044c-0.924,0-1.663,0.349-2.219,1.047c-0.555,0.699-0.833,1.628-0.833,2.788\n\tc0,1.155,0.272,2.077,0.816,2.767c0.545,0.69,1.267,1.035,2.169,1.035c0.919,0,1.647-0.334,2.186-1.002\n\tC28.2,31.913,28.47,30.996,28.47,29.831z\"/>\n<polygon fill=\"#FFFFFF\" points=\"40.273,35.679 33.229,35.679 33.229,23.851 35.893,23.851 35.893,33.518 40.273,33.518 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Queued SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Queued icon used in the Azure Portal interface. This icon shows three parallel vertical bars representing items in a queue.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_155\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<rect y=\"2.5\" width=\"4\" height=\"12\"/>\n<rect x=\"6\" y=\"2.5\" width=\"4\" height=\"12\"/>\n<rect x=\"12\" y=\"2.5\" width=\"4\" height=\"12\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining BlobBlock Icon SVG in Azure Portal\nDESCRIPTION: SVG definition for the BlobBlock icon used in Azure Portal. It shows a rectangle divided into sections representing blob storage blocks.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M0,44.8c0,1,0.8,1.9,1.8,1.9h46.3c1,0,1.9-0.8,1.9-1.9l0-33.1H0V44.8z\"/>\n<path fill=\"#7A7A7A\" d=\"M48.1,4H1.8C0.8,4,0,4.9,0,5.9v5.7h50l0-5.7C50,4.9,49.2,4,48.1,4\"/>\n<rect x=\"3.7\" y=\"15.1\" fill=\"#0072C6\" width=\"20.4\" height=\"13\"/>\n<rect x=\"3.7\" y=\"29.9\" fill=\"#0072C6\" width=\"20.4\" height=\"13\"/>\n<rect x=\"25.9\" y=\"15.1\" fill=\"#FFFFFF\" width=\"20.3\" height=\"13\"/>\n<rect x=\"25.9\" y=\"29.9\" fill=\"#0072C6\" width=\"20.3\" height=\"13\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M2,4C0.9,4,0,4.9,0,6v7.3v3.3v28c0,1.1,0.9,2,2,2h2.2L43.6,4H2z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining WebSlots SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the WebSlots icon used in the Azure portal. The icon represents multiple web slots with different colors, indicating staging and production environments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_95\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M42.744,50H7.256c-3.27,0-5.93-2.66-5.93-5.93v-9.863c0-0.864,0.699-1.563,1.563-1.563\n\ts1.563,0.699,1.563,1.563v9.863c0,1.546,1.259,2.805,2.805,2.805h35.489c1.546,0,2.805-1.259,2.805-2.805v-9.863\n\tc0-0.864,0.699-1.563,1.563-1.563s1.563,0.699,1.563,1.563v9.863C48.674,47.34,46.014,50,42.744,50z\"/>\n<rect x=\"7.006\" y=\"16.691\" fill=\"#59B4D9\" width=\"9.87\" height=\"27.614\"/>\n<rect x=\"20.065\" y=\"16.691\" fill=\"#59B4D9\" width=\"9.87\" height=\"27.614\"/>\n<rect x=\"33.125\" y=\"16.691\" fill=\"#B8D432\" width=\"9.869\" height=\"27.614\"/>\n<g>\n\t<path fill=\"#B8D432\" d=\"M16.908,11.426C16.908,5.125,22.035,0,28.336,0S39.89,4.784,39.89,11.084c0,0.864-0.699,1.563-1.563,1.563\n\t\ts-1.563-0.699-1.563-1.563c0-4.578-3.852-7.959-8.429-7.959s-8.302,3.723-8.302,8.301H16.908z\"/>\n</g>\n<polygon fill=\"#B8D432\" points=\"44.365,8.782 38.199,14.948 32.033,8.782 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Testing Hidden Asset URL Parameters\nDESCRIPTION: URL parameters for testing hidden assets in the Azure portal. Shows how to enable specific assets for testing by modifying feature flags and asset type options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-assets.md#2025-04-23_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n    ?microsoft_azure_mynewextension_assettypeoptions={\"MyNewAsset\":{\"options\":\"\"},\"MySecondNewAsset\":{\"options\":\"\"}}\n    &microsoft_azure_mynewextension=true\n    &feature.canmodifyextensions=true\n```\n\n----------------------------------------\n\nTITLE: Designing FTP Icon in SVG\nDESCRIPTION: SVG code that creates an FTP icon. It features a blue rectangle with white text and arrows to represent file transfer.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_33\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M0,44.627c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V13.298H0V44.627z\"/>\n<path fill=\"#A0A1A2\" d=\"M47.993,4H2.007C0.898,4,0,4.898,0,6.007v10.627h50V6.007C50,4.898,49.101,4,47.993,4\"/>\n<polygon fill=\"#FFFFFF\" points=\"26.556,21.397 19.1,39.232 14.424,39.232 21.848,21.397 \"/>\n<polygon fill=\"#FFFFFF\" points=\"36.123,21.397 28.667,39.232 23.991,39.232 31.415,21.397 \"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M2.014,4C0.906,4,0.007,4.898,0.007,6.007v7.291v3.336v27.993\n\tc0,1.108,0.899,2.007,2.007,2.007h2.188L43.62,4H2.014z\"/>\n<rect x=\"12.857\" y=\"8.779\" fill=\"#FFFFFF\" width=\"33.671\" height=\"3.942\"/>\n<path fill=\"#59B4D9\" d=\"M11.31,10.683c0,2.693-2.184,4.878-4.878,4.878s-4.878-2.185-4.878-4.878c0-2.694,2.184-4.879,4.878-4.879\n\tC9.125,5.804,11.31,7.989,11.31,10.683\"/>\n<polygon fill=\"#FFFFFF\" points=\"5.916,11.232 8.129,13.568 6.928,13.568 3.969,10.75 6.917,7.932 8.115,7.932 5.916,10.254 \n\t11.309,10.254 11.309,11.232 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Wrench Icon in Azure Portal\nDESCRIPTION: SVG definition for the Wrench icon that can be accessed through MsPortalFx.Base.Images.Wrench(). The icon is a simple wrench/spanner tool representation typically used for settings or configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_188\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"-0.5 0.5 16 16\" enable-background=\"new -0.5 0.5 16 16\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M13.478,4.879l-1.865-0.496l-0.496-1.865l1.905-1.905c-1.128-0.304-2.377-0.016-3.257,0.864\n\tC8.877,2.366,8.588,3.623,8.901,4.759L3.763,9.897C2.626,9.585,1.37,9.873,0.481,10.761c-0.88,0.88-1.168,2.129-0.864,3.257\n\tl1.905-1.905l1.865,0.496l0.496,1.865l-1.905,1.905c1.128,0.304,2.377,0.016,3.257-0.864c0.928-0.928,1.2-2.257,0.824-3.425\n\tl5.034-5.034c1.168,0.376,2.497,0.104,3.425-0.824c0.88-0.88,1.168-2.129,0.864-3.257L13.478,4.879z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for 'Get Started' in Azure Portal\nDESCRIPTION: SVG definition for a 'Get Started' icon, showing a rightward-pointing arrow. This icon is likely used to guide users to begin using a service or feature in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_134\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<g>\n\t<polygon fill=\"#59B4D9\" points=\"33.097,19.905 18.435,5.389 30.371,5.389 50,23.986 30.452,42.486 18.516,42.486 33.097,27.97 \n\t\t0,27.97 0,19.905 \t\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP REST Methods Enum Values\nDESCRIPTION: Enumeration defining the standard HTTP methods supported by the API Explorer. Includes the five main REST verbs: GET for retrieval, POST for creation, PUT for full updates, PATCH for partial updates, and DELETE for removal operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-apiExplorerGroupREST-method.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- GET\n- POST\n- PUT\n- PATCH\n- DELETE\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Table Icon SVG\nDESCRIPTION: SVG icon representing a table with colored cells in a grid layout, using fill colors A0A1A2, 7A7A7A, FFFFFF, and FCD116.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_81\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" height=\"50\" width=\"50\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M0,44.4c0,1,0.7,1.9,1.9,1.9h46.2c1,0,1.9-0.7,1.9-1.9V11.3H0V44.4z\"/>\n<path fill=\"#7A7A7A\" d=\"M48.1,3.7H1.9C0.7,3.7,0,4.6,0,5.6v5.7h50V5.6C50,4.6,49.3,3.7,48.1,3.7\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Request SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Request icon used in the Azure Portal interface. This icon shows two document shapes with one in front of the other, representing a request form or document.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_160\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"-0.5 0.5 16 16\" enable-background=\"new -0.5 0.5 16 16\" xml:space=\"preserve\">\n<path d=\"M3.5,9.5h-2v-7h7v2h2v-4h-11v11h4V9.5z\"/>\n<path d=\"M4.5,5.5v11h11v-11H4.5z M6.5,7.5h2v2h-2V7.5z M13.5,14.5h-7v-3h2h1h1v-4h3V14.5z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining BillingHub Icon SVG in Azure Portal\nDESCRIPTION: SVG definition for the BillingHub icon used in Azure Portal. It shows a dollar sign within circular shapes representing billing or financial concepts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#0F0F0F\" d=\"M28.431,27.562c0,0.811-0.254,1.462-0.764,1.955c-0.512,0.493-1.254,0.796-2.23,0.908v1.59h-1.07v-1.546\n\tc-1.006-0.01-1.928-0.234-2.768-0.674v-2.028c0.264,0.215,0.684,0.423,1.264,0.626c0.578,0.202,1.08,0.318,1.504,0.348v-2.666\n\tc-1.078-0.4-1.844-0.839-2.293-1.314c-0.449-0.477-0.674-1.103-0.674-1.879s0.277-1.432,0.828-1.967\n\tc0.553-0.534,1.266-0.846,2.139-0.934v-1.362h1.07v1.333c1.029,0.049,1.799,0.215,2.307,0.498v1.978\n\tc-0.68-0.41-1.447-0.664-2.307-0.762v2.775c1.078,0.392,1.848,0.831,2.307,1.318C28.203,26.249,28.431,26.849,28.431,27.562z\n\tM24.367,24.017v-2.322c-0.678,0.122-1.018,0.477-1.018,1.063C23.349,23.269,23.689,23.69,24.367,24.017z M26.484,27.664\n\tc0-0.473-0.35-0.863-1.047-1.172v2.22C26.134,28.599,26.484,28.25,26.484,27.664z\"/>\n<path fill=\"#7FBA00\" d=\"M25,38.81c-7.627,0-13.811-6.183-13.811-13.809s6.183-13.809,13.81-13.81l0,0\n\tc7.627,0,13.81,6.182,13.81,13.809h11.19c0-13.807-11.192-25-25-25v0.001C11.191,0.002,0,11.194,0,25.001s11.192,25,25,25\n\tc6.393,0,12.221-2.403,16.641-6.35l-7.457-8.358C31.741,37.474,28.53,38.81,25,38.81z\"/>\n<path opacity=\"0.1\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M25,38.81c-7.627,0-13.811-6.183-13.811-13.809\n\ts6.183-13.809,13.81-13.81l0,0c7.627,0,13.81,6.182,13.81,13.809h11.19c0-13.807-11.192-25-25-25v0.001\n\tC11.191,0.002,0,11.194,0,25.001s11.192,25,25,25c6.393,0,12.221-2.403,16.641-6.35l-7.457-8.358\n\tC31.741,37.474,28.53,38.81,25,38.81z\"/>\n<path fill=\"#FCD116\" d=\"M50,25H38.809c0,4.096-1.793,7.764-4.625,10.292l7.457,8.359C46.768,39.072,50,32.415,50,25\"/>\n<path opacity=\"0.9\" fill=\"#B8D432\" enable-background=\"new    \" d=\"M38.809,25h11.19c0-13.807-11.192-25-25-25v11.191\n\tC32.625,11.191,38.809,17.373,38.809,25\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Support Icon in SVG\nDESCRIPTION: SVG markup defining the 'Support' icon for the Azure portal. It creates a shape resembling a person with a headset.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_169\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M34.256,14.928c0,5.006-4.059,9.065-9.066,9.065s-9.065-4.059-9.065-9.065s4.058-9.065,9.065-9.065\n\tC30.197,5.863,34.256,9.922,34.256,14.928\"/>\n<polygon fill=\"#59B4D9\" points=\"31.818,27.1 25.19,36.387 18.562,27.1 9.001,27.1 9.001,50 41.38,50 41.38,27.1 \"/>\n<path fill=\"#59B4D9\" d=\"M39.966,24.14h-6.881v-3.33h3.552v-5.827c0-6.426-5.228-11.654-11.654-11.654S13.329,8.557,13.329,14.983\n\tv1.665h-3.33v-1.665C9.999,6.722,16.721,0,24.982,0s14.983,6.722,14.983,14.983L39.966,24.14L39.966,24.14z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Designing Heart Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code creates a heart-shaped icon using path elements. The icon is primarily filled with a red color and includes a white highlight effect.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_42\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#BA141A\" d=\"M43.701,8.79c-0.8-0.872-1.755-1.513-2.807-1.95c-4.855-2.022-11.869,0.495-16.261,6.731\n\tC17.876,5.42,9.798,3.89,5.302,8.79c-8.986,9.784,2.267,22.64,11.143,29.938c3.498,2.877,6.627,4.891,8.003,5.514v0.064\n\tc0.012-0.002,0.038-0.023,0.047-0.025c0,0,0.049,0.023,0.066,0.025v-0.064C29.417,42.04,56.222,22.432,43.701,8.79\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M24.632,13.572C17.876,5.421,9.8,3.889,5.302,8.792\n\tC-3.684,18.575,7.57,31.43,16.445,38.729L40.894,6.841C36.038,4.819,29.025,7.336,24.632,13.572\"/>\n```\n\n----------------------------------------\n\nTITLE: Request Options Enumeration Definition\nDESCRIPTION: Defines the available options for batch requests including debouncing, retrying and caching behaviors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const enum RequestOptions {\n    None = 0,\n    DebounceNextTick = 1,\n    Debounce100ms = 2,\n    DebounceOneMinute = 4,\n    RetryForce = 8,\n    RetrySkip = 16,\n    ResponseCacheEnabled = 32,\n    ResponseCacheSkip = 64,\n    RetrySkipOnForbidden = 128,\n}\n```\n\n----------------------------------------\n\nTITLE: Extension PDL Definition File\nDESCRIPTION: XML configuration file (extension.pdl) that defines basic extension properties including name, version and entry point.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\">\n<Extension Name=\"Microsoft_Azure_Demo\" Version=\"1.0\" EntryPointModulePath=\"Program\"/>\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Cloud Service Icon SVG Definition\nDESCRIPTION: SVG icon definition for cloud service with gray cloud shape and connected elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_17\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M43.339,18.659c0.195-0.911,0.291-1.779,0.291-2.643C43.63,9.39,38.232,4,31.595,4\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating EntityCache View for Website Details in TypeScript\nDESCRIPTION: This snippet shows how to create a view on the EntityCache to display website details. It uses the websiteEntities from the dataContext to create the view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis._websiteEntityView = dataContext.websiteEntities.createView(container);\n```\n\n----------------------------------------\n\nTITLE: Configuring @microsoft/azureportal-test Framework with config.json\nDESCRIPTION: Configuration file for the @microsoft/azureportal-test framework that specifies browser settings, portal URLs, authentication details, and other test environment parameters. This file should be placed next to your portaltests.ts file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-node-js-test-framework.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"playwright\": {\n        \"browser\": \"chrome\",\n        \"resolution\": {\n            \"width\": 1280,\n            \"height\": 960\n        },\n        \"options\": {\n            \"headless\": false\n        }\n    },\n    \"capabilities\": {\n        \"browserName\": \"chrome\",\n        \"chromeOptions\": {\n            \"args\": [\n                \"no-sandbox\",\n                \"window-size=1280,960\",\n                \"disable-extensions\",\n                \"disable-popup-blocking\"\n            ]\n        }\n    },\n    \"chromeDriverPath\": \"node_modules\\\\chromedriver\\\\lib\\\\chromedriver\\\\chromedriver.exe\",\n    \"portalUrl\": \"https://portal.azure.com\",\n    \"signInUrl\": \"https://login.microsoftonline.com\",\n    \"enableFiddler\": \"false\",\n    \"managementEndpoint\": \"https://management.core.windows.net/\",\n    \"allowUnauthorizedCert\": \"true\",\n    \"LOGIN_NAME\": \"<someone@someCompany.com>\",\n    \"partnerTeamEmail\": \"partnerEmail@partnerCompany.com\",\n    \"AzureEnvironment\": < for public use \"AzurePublicCloud\", for fairfax use \"AzureGovernment\", for mooncake use \"AzureChina\" >,\n    \"browserAutomation\": < to run tests under Playwright use \"playwright\", to run tests under Selenium use \"webdriver\" >,\n    \"tenantId\": < optional: a tenant id that the tests will navigate to >\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Knockout Observable Changes using Subscribe and Debugger Keyword\nDESCRIPTION: JavaScript code examples demonstrating how to use the Knockout `subscribe` function on an observable property to trigger the browser's debugger whenever the property's value changes. First, access the specific observable property (e.g., using `ko.dataFor($0)`), then call `subscribe` with a callback function containing the `debugger;` keyword. This allows developers to inspect the call stack and understand what caused the observable to change, provided the developer tools are open.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myProperty = ko.dataFor($0).observablePropertyICareAbout;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyProperty.subscribe(function (value) { debugger; })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nko.dataFor($0).observablePropertyICareAbout.subscribe(function (value) { debugger; })\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy TypeScript MSBuild Properties\nDESCRIPTION: XML configuration showing TypeScript and PDL MSBuild properties that need to be removed when migrating to V2 targets.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TypeScriptExperimentalDecorators>true</TypeScriptExperimentalDecorators>\n    <PortalDefinitionTargetFolder>Client</PortalDefinitionTargetFolder>\n    <PortalDefinitionContentName>.</PortalDefinitionContentName>\n    <PortalDefinitionWriteAmd>true</PortalDefinitionWriteAmd>\n    <EmbeddedTypeScriptResourcePrefixReplace>Client\\</EmbeddedTypeScriptResourcePrefixReplace>\n    <EmbeddedTypeScriptResourcePrefix>Content\\Scripts\\</EmbeddedTypeScriptResourcePrefix>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\" Label=\"TypeScriptConfigurationsDebug\">\n    <TypeScriptNoImplicitAny>true</TypeScriptNoImplicitAny>\n    <TypeScriptTarget>ES5</TypeScriptTarget>\n    <TypeScriptRemoveComments>false</TypeScriptRemoveComments>\n    <TypeScriptSourceMap>true</TypeScriptSourceMap>\n    <TypeScriptGeneratesDeclarations>false</TypeScriptGeneratesDeclarations>\n    <TypeScriptModuleKind>AMD</TypeScriptModuleKind>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <TypeScriptNoImplicitAny>true</TypeScriptNoImplicitAny>\n    <TypeScriptTarget>ES5</TypeScriptTarget>\n    <TypeScriptRemoveComments>true</TypeScriptRemoveComments>\n    <TypeScriptSourceMap>true</TypeScriptSourceMap>\n    <TypeScriptGeneratesDeclarations>false</TypeScriptGeneratesDeclarations>\n    <TypeScriptModuleKind>AMD</TypeScriptModuleKind>\n  </PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Recommendations Tab in Azure Portal Resource Overview Schema (JSON)\nDESCRIPTION: This JSON snippet adds a Recommendations view to the properties.tabs section in the Declarative Resource Overview schema. It specifies the 'kind' property with the value 'Recommendations' to include this view in the resource overview.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/RecommendationsTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"Recommendations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PreviewRight Icon in Azure Portal\nDESCRIPTION: An SVG icon showing a triangular preview indicator with \"PREVIEW\" text embedded within. The design uses green colors (#7FBA00, #B8D432) and transparency effects to create visual depth.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_150\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"40px\" width=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">\n<polygon fill=\"#B8D432\" points=\"40,20.4 40,17.5 22.5,0 19.6,0 1.8,0 40,38.1 \"/>\n<path fill=\"#7FBA00\" d=\"M15.1,4.6l-1.3,1.3l-0.6-0.6l3.6-3.6l1.1,1.1c0.4,0.4,0.6,0.8,0.7,1.2c0,0.4-0.1,0.8-0.5,1.2\n\tc-0.3,0.3-0.8,0.5-1.2,0.5c-0.5,0-0.9-0.2-1.3-0.6L15.1,4.6z M16.9,2.8l-1.3,1.3L16,4.5c0.3,0.3,0.5,0.4,0.8,0.4\n\tc0.3,0,0.5-0.1,0.7-0.3c0.4-0.4,0.4-0.9-0.1-1.4L16.9,2.8z\"/>\n<path fill=\"#7FBA00\" d=\"M19.1,11.2l-0.7-0.7l0.4-1.5c0-0.1,0.1-0.3,0.1-0.4c0-0.1,0-0.2,0-0.3c0-0.1,0-0.2-0.1-0.3\n\tc0-0.1-0.1-0.2-0.2-0.2l-0.2-0.2L16.9,9l-0.6-0.6l3.6-3.6L21.1,6c0.2,0.2,0.3,0.3,0.4,0.5c0.1,0.2,0.2,0.4,0.2,0.6\n\tc0,0.2,0,0.4-0.1,0.6c-0.1,0.2-0.2,0.4-0.3,0.5c-0.1,0.1-0.3,0.2-0.4,0.3c-0.1,0.1-0.3,0.1-0.4,0.1c-0.2,0-0.3,0-0.5,0\n\tc-0.2,0-0.3-0.1-0.5-0.2l0,0c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2-0.1,0.3L19.1,11.2z M20,5.9\n\tl-1.2,1.2l0.5,0.5c0.1,0.1,0.2,0.2,0.3,0.2c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0,0.3-0.1c0.1,0,0.2-0.1,0.3-0.2\n\tc0.2-0.2,0.3-0.4,0.2-0.6c0-0.2-0.1-0.4-0.3-0.6L20,5.9z\"/>\n<path fill=\"#7FBA00\" d=\"M21.6,13.7l-2-2l3.6-3.6l1.9,1.9l-0.5,0.5l-1.3-1.3l-1,1l1.2,1.2L23,12l-1.2-1.2l-1.1,1.1l1.4,1.4L21.6,13.7\n\tz\"/>\n<path fill=\"#7FBA00\" d=\"M28.8,13.7L23.9,16l-0.7-0.7l2.3-4.9l0.7,0.7l-1.8,3.6c-0.1,0.1-0.1,0.2-0.2,0.4l0,0\n\tc0.1-0.1,0.2-0.2,0.4-0.2l3.6-1.8L28.8,13.7z\"/>\n<path fill=\"#7FBA00\" d=\"M26.4,18.5l-0.6-0.6l3.6-3.6l0.6,0.6L26.4,18.5z\"/>\n<path fill=\"#7FBA00\" d=\"M29.4,21.5l-2-2l3.6-3.6l1.9,1.9l-0.5,0.5L31.1,17l-1,1l1.2,1.2l-0.5,0.5l-1.2-1.2l-1.1,1.1l1.4,1.4\n\tL29.4,21.5z\"/>\n<path fill=\"#7FBA00\" d=\"M38.3,23.2l-4.6,2.6L33,25.1l1.8-3.2c0.1-0.1,0.2-0.3,0.3-0.4l0,0c-0.1,0.1-0.3,0.2-0.4,0.3l-3.2,1.8\n\tl-0.7-0.7l2.6-4.6l0.7,0.7l-2,3.3c-0.1,0.1-0.2,0.3-0.3,0.4l0,0c0.1-0.1,0.2-0.2,0.4-0.3l3.4-1.9l0.6,0.6l-2,3.3\n\tc-0.1,0.1-0.2,0.2-0.3,0.4l0,0c0.1-0.1,0.2-0.2,0.4-0.3l3.3-2L38.3,23.2z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M15.1,4.6l-1.3,1.3l-0.6-0.6l3.6-3.6l1.1,1.1\n\tc0.4,0.4,0.6,0.8,0.7,1.2c0,0.4-0.1,0.8-0.5,1.2c-0.3,0.3-0.8,0.5-1.2,0.5c-0.5,0-0.9-0.2-1.3-0.6L15.1,4.6z M16.9,2.8l-1.3,1.3\n\tL16,4.5c0.3,0.3,0.5,0.4,0.8,0.4c0.3,0,0.5-0.1,0.7-0.3c0.4-0.4,0.4-0.9-0.1-1.4L16.9,2.8z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M19.1,11.2l-0.7-0.7l0.4-1.5c0-0.1,0.1-0.3,0.1-0.4\n\tc0-0.1,0-0.2,0-0.3c0-0.1,0-0.2-0.1-0.3c0-0.1-0.1-0.2-0.2-0.2l-0.2-0.2L16.9,9l-0.6-0.6l3.6-3.6L21.1,6c0.2,0.2,0.3,0.3,0.4,0.5\n\tc0.1,0.2,0.2,0.4,0.2,0.6c0,0.2,0,0.4-0.1,0.6c-0.1,0.2-0.2,0.4-0.3,0.5c-0.1,0.1-0.3,0.2-0.4,0.3c-0.1,0.1-0.3,0.1-0.4,0.1\n\tc-0.2,0-0.3,0-0.5,0c-0.2,0-0.3-0.1-0.5-0.2l0,0c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2,0,0.3c0,0.1,0,0.2-0.1,0.3\n\tL19.1,11.2z M20,5.9l-1.2,1.2l0.5,0.5c0.1,0.1,0.2,0.2,0.3,0.2c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.2,0,0.3-0.1c0.1,0,0.2-0.1,0.3-0.2\n\tc0.2-0.2,0.3-0.4,0.2-0.6c0-0.2-0.1-0.4-0.3-0.6L20,5.9z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M21.6,13.7l-2-2l3.6-3.6l1.9,1.9l-0.5,0.5l-1.3-1.3l-1,1\n\tl1.2,1.2L23,12l-1.2-1.2l-1.1,1.1l1.4,1.4L21.6,13.7z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M28.8,13.7L23.9,16l-0.7-0.7l2.3-4.9l0.7,0.7l-1.8,3.6\n\tc-0.1,0.1-0.1,0.2-0.2,0.4l0,0c0.1-0.1,0.2-0.2,0.4-0.2l3.6-1.8L28.8,13.7z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M26.4,18.5l-0.6-0.6l3.6-3.6l0.6,0.6L26.4,18.5z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M29.4,21.5l-2-2l3.6-3.6l1.9,1.9l-0.5,0.5L31.1,17l-1,1l1.2,1.2\n\tl-0.5,0.5l-1.2-1.2l-1.1,1.1l1.4,1.4L29.4,21.5z\"/>\n<path opacity=\"0.35\" fill=\"#1E1E1E\" enable-background=\"new    \" d=\"M38.3,23.2l-4.6,2.6L33,25.1l1.8-3.2c0.1-0.1,0.2-0.3,0.3-0.4\n\tl0,0c-0.1,0.1-0.3,0.2-0.4,0.3l-3.2,1.8l-0.7-0.7l2.6-4.6l0.7,0.7l-2,3.3c-0.1,0.1-0.2,0.3-0.3,0.4l0,0c0.1-0.1,0.2-0.2,0.4-0.3\n\tl3.4-1.9l0.6,0.6l-2,3.3c-0.1,0.1-0.2,0.2-0.3,0.4l0,0c0.1-0.1,0.2-0.2,0.4-0.3l3.3-2L38.3,23.2z\"/>\n<polygon opacity=\"0.6\" fill=\"#1E1E1E\" enable-background=\"new    \" points=\"40,38.1 1.8,0 0,0 40,40 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Studio Box Logo SVG in Azure Portal\nDESCRIPTION: SVG markup for the boxed Visual Studio logo that includes a purple background rectangle with the white Visual Studio logo. This version is designed for square contexts in the Azure Portal UI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_203\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\" enable-background=\"new 0 0 30 30\" xml:space=\"preserve\">\n<rect fill=\"#68217A\" width=\"30\" height=\"30\"/>\n<path fill=\"#FFFFFF\" d=\"M14.743,14.924l4.757-3.703v7.406L14.743,14.924z M7.8,17.624v-5.4l2.7,2.7L7.8,17.624z M19.5,5.924\n\tl-7.142,7.142L7.8,9.524l-1.8,0.9v9l1.8,0.9l4.558-3.542l7.142,7.142l4.5-1.8v-14.4L19.5,5.924z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for ArrowRight Icon\nDESCRIPTION: Right-pointing arrow icon for navigation or forward buttons in Azure Portal. Simple polygon-based arrow shape pointing right.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_103\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<polygon points=\"15.6,10.2 10.9,5 14.7,5 21,12 14.8,19 10.9,19 15.6,13.8 3,13.8 3,10.2 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding CommandBar to TemplateBlade in PDL\nDESCRIPTION: This snippet shows how to add a CommandBar element to a TemplateBlade in PDL. The CommandBar is typically displayed at the top of the template blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade\n            Name=\"MyTemplateBlade\"\n            ViewModel=\"{ ViewModel Name=MyTemplateBladeViewModel, Module=./ViewModels/MyTemplateBladeViewModel }\"\n            Template=\"{ Html Source='Templates\\\\MyTemplateBlade.html' }\">\n    <TemplateBlade.Parameters>\n        <Parameter Name=\"id\" />\n    </TemplateBlade.Parameters>\n    <CommandBar />\n</TemplateBlade>\n```\n\n----------------------------------------\n\nTITLE: Creating Key Icon with Complex Path Elements in SVG\nDESCRIPTION: Definition of a key icon using SVG path elements with a main yellow key shape and additional overlay elements. The design includes the key head with a circular hole and a shaft with notches.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_49\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FCD116\" d=\"M39.337,19.525c2.222-2.22,2.222-5.824,0-8.045l-9.812-9.813c-2.222-2.222-5.824-2.222-8.046,0l-9.813,9.813\n\tc-2.221,2.221-2.221,5.825,0,8.045l8.633,8.633v16.641l5.202,5.202l4.519-4.519v-0.033l2.652-2.653l-2.629-2.629l2.629-2.629\n\tl-2.629-2.629l2.629-2.629l-2.652-2.653v-0.784L39.337,19.525z M25.502,4.039c1.783,0,3.229,1.446,3.229,3.229\n\tc0,1.784-1.446,3.229-3.229,3.229c-1.783,0-3.229-1.445-3.229-3.229S23.719,4.039,25.502,4.039z\"/>\n<polygon opacity=\"0.4\" fill=\"#FF8C00\" enable-background=\"new    \" points=\"22.728,43.961 24.758,45.961 24.758,30.008 \n\t22.728,29.008 \"/>\n<rect x=\"15.868\" y=\"13.617\" opacity=\"0.5\" fill=\"#FFFFFF\" enable-background=\"new    \" width=\"18.64\" height=\"2.679\"/>\n<rect x=\"15.868\" y=\"17.976\" opacity=\"0.5\" fill=\"#FFFFFF\" enable-background=\"new    \" width=\"18.64\" height=\"2.679\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic Active Directory Icon - SVG/XML\nDESCRIPTION: Implements the Active Directory polychromatic icon as a complete SVG document suitable for embedding in HTML. Requires an SVG-compatible web environment or viewer. No additional JavaScript is needed. Inputs: None. Outputs: The graphical vector icon (Active Directory) with Azure color branding and layered effects. Limitation: Graphics scale with container size and require appropriate licensing for branding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_1\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t width=\\\"50px\\\" height=\\\"50px\\\" viewBox=\\\"0 0 50 50\\\" enable-background=\\\"new 0 0 50 50\\\" xml:space=\\\"preserve\\\">\\n<path fill=\\\"#59B4D9\\\" d=\\\"M25.001,50.001c-1.232,0-2.392-0.48-3.261-1.352L1.351,28.261C0.492,27.402,0,26.215,0,25\\nc0-1.214,0.492-2.402,1.351-3.26L21.74,1.352C22.611,0.48,23.769,0,25.001,0c1.231,0,2.39,0.48,3.261,1.352L48.648,21.74\\nC49.521,22.608,50,23.767,50,25c0,1.233-0.479,2.392-1.353,3.263L28.262,48.649C27.392,49.521,26.232,50.001,25.001,50.001\\\"/>\\n<path fill=\\\"#FFFFFF\\\" d=\\\"M38.614,21.093c-2.16,0-3.91,1.75-3.91,3.909c0,0.792,0.239,1.527,0.645,2.143l-7.744,7.744\\nc-0.206-0.144-0.427-0.264-0.656-0.373V14.759c1.167-0.676,1.961-1.924,1.961-3.37C28.91,9.23,27.16,7.48,25,7.48\\nc-2.158,0-3.908,1.75-3.908,3.909c0,1.446,0.794,2.694,1.96,3.37v19.756c-0.219,0.104-0.434,0.216-0.632,0.353l-7.753-7.753\\nc0.394-0.61,0.628-1.333,0.628-2.113c0-2.159-1.75-3.909-3.908-3.909c-2.16,0-3.91,1.75-3.91,3.909s1.75,3.909,3.91,3.909\\nc0.448,0,0.872-0.091,1.274-0.23l8.15,8.15c-0.234,0.548-0.364,1.15-0.364,1.783c0,2.513,2.038,4.551,4.551,4.551\\nc2.514,0,4.551-2.038,4.551-4.551c0-0.621-0.126-1.212-0.351-1.751l8.173-8.172c0.392,0.132,0.804,0.22,1.241,0.22\\nc2.158,0,3.908-1.75,3.908-3.909S40.771,21.093,38.614,21.093z\\\"/>\\n<rect x=\\\"31.006\\\" y=\\\"8.226\\\" transform=\\\"matrix(-0.707 0.7072 -0.7072 -0.707 68.2099 8.8718)\\\" opacity=\\\"0.5\\\" fill=\\\"#FFFFFF\\\" width=\\\"2.523\\\" height=\\\"20.676\\\"/>\\n<rect x=\\\"16.487\\\" y=\\\"8.242\\\" transform=\\\"matrix(0.7071 0.7071 -0.7071 0.7071 18.3355 -7.1088)\\\" opacity=\\\"0.5\\\" fill=\\\"#FFFFFF\\\" width=\\\"2.524\\\" height=\\\"20.677\\\"/>\\n<path fill=\\\"#B8D432\\\" d=\\\"M27.665,38.614c0,1.496-1.214,2.709-2.71,2.709c-1.497,0-2.709-1.213-2.709-2.709\\nc0-1.496,1.212-2.709,2.709-2.709C26.45,35.905,27.665,37.118,27.665,38.614\\\"/>\\n<path fill=\\\"#B8D432\\\" d=\\\"M27.174,11.389c0,1.201-0.973,2.174-2.174,2.174c-1.201,0-2.174-0.973-2.174-2.174\\nc0-1.201,0.973-2.174,2.174-2.174C26.201,9.215,27.174,10.188,27.174,11.389\\\"/>\\n<path fill=\\\"#B8D432\\\" d=\\\"M13.563,25.001c0,1.201-0.975,2.174-2.174,2.174c-1.201,0-2.174-0.973-2.174-2.174\\nc0-1.201,0.973-2.174,2.174-2.174C12.588,22.827,13.563,23.8,13.563,25.001\\\"/>\\n<path fill=\\\"#B8D432\\\" d=\\\"M40.788,25.001c0,1.201-0.975,2.174-2.175,2.174c-1.2,0-2.174-0.973-2.174-2.174\\nc0-1.201,0.974-2.174,2.174-2.174C39.813,22.827,40.788,23.8,40.788,25.001\\\"/>\\n<path opacity=\\\"0.1\\\" fill=\\\"#FFFFFF\\\" d=\\\"M28.262,1.352C27.391,0.48,26.233,0,25.001,0c-1.231,0-2.389,0.48-3.26,1.352L1.352,21.74\\nC0.492,22.598,0,23.786,0,25c0,1.215,0.492,2.403,1.352,3.261l11.543,11.544L34.61,7.699L28.262,1.352z\\\"/>\\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Target Import Order\nDESCRIPTION: XML showing the correct order for importing MSBuild targets in the project file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v15.0\\WebApplications\\Microsoft.WebApplication.targets\" />\n  <Import Project=\"$(NuGetPath_Microsoft_Portal_Tools)\\build\\Microsoft.Portal.Tools.targets\" Condition=\"Exists('$(NuGetPath_Microsoft_Portal_Tools)\\build\\Microsoft.Portal.Tools.targets')\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Icon SVG in Azure Portal\nDESCRIPTION: SVG definition for the Backup icon used in Azure Portal. It depicts a cloud with an arrow indicating backup or data transfer.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M45.083,14.967c0.033-0.35,0.05-0.717,0.05-1.083c0-5.817-4.783-10.55-10.65-10.55\n\tC31,3.333,27.8,5,25.833,7.733C24.567,6.95,23.1,6.517,21.567,6.517c-4.183,0-7.633,3.183-8.017,7.233\n\tc0.65-0.083,1.3-0.15,1.967-0.15c3.083,0,6.05,1,8.467,2.767C25.8,12.183,30.417,9.5,35.533,9.35V5.767l6.25,5.35l-6.25,5.317v-3.5\n\tC32.6,13.05,29.75,14.15,28.1,16.817l0.333-0.033c5.967,0,10.9,4.467,11.6,10.183c1.417,1.067,2.533,2.35,3.333,3.817\n\tC47.233,29.75,50,26.417,50,22.333C50,19.05,48.233,16.433,45.083,14.967z\"/>\n<path fill=\"#59B4D9\" d=\"M4.917,28.833c-0.033-0.367-0.05-0.733-0.05-1.1c0-5.817,4.783-10.533,10.65-10.533\n\tc3.483,0,6.683,1.667,8.65,4.383c1.267-0.783,2.733-1.2,4.267-1.2c4.433,0,8.05,3.583,8.05,7.983L36.467,29\n\tc3,1.517,4.617,4.033,4.617,7.183c0,4.95-4.033,8.817-9.183,8.817H9.183C4.033,45,0,41.133,0,36.183\n\tC0,32.917,1.767,30.3,4.917,28.833z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Website SVG Icon\nDESCRIPTION: SVG icon representing Azure Website/Web App services with blue cloud design\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_92\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M40.193,44.839c-4.53,3.464-9.867,5.151-15.167,5.151c-7.52,0-14.956-3.376-19.87-9.803C-3.24,29.225-1.168,13.548,9.814,5.148C14.343,1.663,19.686,0,24.979,0c7.52,0,14.958,3.376,19.87,9.809C53.247,20.768,51.154,36.448,40.193,44.839\"/>\n<!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Subtract Icon in SVG\nDESCRIPTION: SVG markup defining the 'Subtract' icon for the Azure portal. It creates a horizontal line shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_168\n\nLANGUAGE: XML\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 24 24\">\n    <polygon points=\"20.87,14 2,14 2,9 21,9 21,14\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Team-Based Wildcard SSL Certificate Pattern for Azure Portal Extensions\nDESCRIPTION: Shows an alternative pattern for naming extensions (`<extensionName>.<team>.ext.azure.com`) and the corresponding wildcard SSL certificate (`*.<team>.ext.azure.com`). This approach simplifies certificate management when multiple teams build independent extensions, ensuring they are served via HTTPS as required by the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<extensionName>.<team>.ext.azure.com\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n*.<team>.ext.azure.com\n```\n\n----------------------------------------\n\nTITLE: Defining getstarted-LearnMoreLink Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the getstarted-LearnMoreLink object using a markdown table. It specifies the property names, whether they are required, and provides brief descriptions for each.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-LearnMoreLink.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|url|True|Link URL\n|ariaLabel|False|Aria Label for the link\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Traffic Manager Icon SVG\nDESCRIPTION: SVG icon representing Traffic Manager functionality with octagonal shape and internal network pattern using colors #804998 and #FFFFFF.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_83\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#804998\" points=\"50,35.5 50,14.588 35.368,0 14.662,0 0,15.029 0,35.426 14.632,50 35.368,50 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining VaultPickerInputsOutputs Interface in TypeScript\nDESCRIPTION: Defines the interface for inputs and outputs of the KeyVault picker, including properties like id, name, type, location, tags, and vault properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface VaultPickerInputsOutputs {\n    id: KnockoutObservable<string>; //resourceId of the vault selected\n    name: KnockoutObservable<string>; // name of the vault selected\n    type: KnockoutObservable<string>; // Microsoft.KeyVault/vaults\n    location: KnockoutObservable<string>; // region the vault is deployed in\n    tags: KnockoutObservable<StringMap<KnockoutObservable<string>>>; // any tags associated with the vault\n    properties?: KnockoutObservable<VaultProperties>; // Any properties associated with this vault, such as access policies. ONLY INCLUDED IF THE VAULT IS CREATED ON THE BLADE.\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Portal TrendDown SVG Icon\nDESCRIPTION: SVG icon definition for downward trend indicator, sized 9x9px with black (#0F0F0F) arrow polygon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_176\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"9px\" height=\"9px\" viewBox=\"0 0 9 9\" enable-background=\"new 0 0 9 9\" xml:space=\"preserve\">\n<polygon fill=\"#0F0F0F\" points=\"0,1.5 5.25,6.75 1.5,6.75 3.608,9 9,9 9,3.75 6.75,1.5 6.75,5.25 1.5,0 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitoring Extension via NuGet Package Manager - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to install the Microsoft.Portal.Extensions.Monitoring package from a specified NuGet source using the Install-Package command. Prerequisites include access to the NuGet Package Manager console (typically through Visual Studio) and required permissions to the provided package source URL. The key parameter is the package version, which should be updated to the latest available. The command downloads and installs the monitoring extension for use within Azure Portal projects. Input: execution within the package manager console; Output: installation of the specified NuGet package. Users should replace the version number with the latest, when applicable.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Monitoring -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version 1.0.26.0\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Unpin Icon in Azure Portal\nDESCRIPTION: SVG definition for the Unpin icon that can be accessed through MsPortalFx.Base.Images.Unpin(). The icon shows a visual representation of removing a pinned item.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_181\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M14.8,9.2c-1.6-1.6-4.1-1.6-5.7,0c-1.6,1.6-1.6,4.1,0,5.7c1.6,1.6,4.1,1.6,5.7,0S16.4,10.7,14.8,9.2z M10,14\n\tc-1-1-1.1-2.5-0.4-3.6l4,4C12.5,15.1,11,15,10,14z M14.4,13.6l-4-4C11.5,8.9,13,9,14,10C15,11,15.1,12.5,14.4,13.6z\"/>\n<path fill=\"#FFFFFF\" d=\"M12.9,6.5l0.7-0.7c0.8,0.1,1.6,0.1,2.4-0.2L10.3,0c-0.2,0.8-0.3,1.6-0.2,2.4L5.9,6.6C4.6,6.1,3.1,6,1.8,6.4\n\tl3,2.9L0,16l0,0l0,0l6.3-4.5C6.5,10.2,7,9,7.9,8.1C9.3,6.7,11.2,6.2,12.9,6.5z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown View with External Content Reference in JSON\nDESCRIPTION: This snippet shows how to configure a Markdown view that references content from an external MyStrings.resjson file. It includes an optional 'image' parameter and exports the view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/markdownType.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"stringSource\": \"../Resources/MyStrings.resjson\",\n    \"view\": {\n        \"kind\": \"Markdown\",\n        \"parameters\": [\n            {\n                \"name\": \"image\",\n                \"type\": \"optional\"\n            }\n        ],\n        \"export\": true,\n        \"properties\": {\n            \"content\": {\n                \"property\": \"markdownContent\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for Folder in Azure Portal\nDESCRIPTION: SVG definition for a folder icon, used to represent directories or collections in the Azure Portal UI. The icon shows a simple folder shape with a darker base.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_128\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 12 12\" enable-background=\"new 0 0 12 12\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M11.3,3H1v9h10.4c0.3,0,0.6-0.3,0.6-0.6V3H11.3z\"/>\n<path fill=\"#7A7A7A\" d=\"M1,3v8.6C1,11.9,0.9,12,0.6,12C0.3,12,0,12.1,0,11.8V1h3.8l1.4,1H12v1H1z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View with Static Array Data Source in Azure Portal (JSON)\nDESCRIPTION: This snippet demonstrates how to configure a DataBrowse view using a static array data source. It includes columns for disk size, price, display name, and creation time, with specific formatting options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/DataBrowseTab.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"Data browse\",\n    \"data\": [\n        {\n            \"diskSize\": 100,\n            \"price\": 100,\n            \"displayName\": \"a\",\n            \"creationTime\": \"2021-03-23T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 10000,\n            \"price\": 10000,\n            \"displayName\": \"b\",\n            \"creationTime\": \"2021-04-24T21:24:47.7856737Z\"\n        },\n        {\n            \"diskSize\": 1500,\n            \"price\": 1500,\n            \"displayName\": \"c\",\n            \"creationTime\": \"2021-05-25T21:24:47.7856737Z\"\n        }\n    ],\n    \"columns\": [\n        {\n            \"displayName\": \"Disk Size\",\n            \"name\": \"diskSize\",\n            \"format\": \"Number\",\n            \"sourceUnits\": \"Gigabytes\",\n            \"maximumFractionDigits\": 2\n        },\n        {\n            \"displayName\": \"Price\",\n            \"name\": \"price\"\n        },\n        {\n            \"displayName\": \"Display Names\",\n            \"name\": \"displayName\"\n        },\n        {\n            \"displayName\": \"Creation time\",\n            \"name\": \"creationTime\",\n            \"format\": \"Date\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Save SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Save icon used in the Azure Portal interface. This icon shows a traditional floppy disk image, representing a save action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_162\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"16px\" width=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M14.4,0H1.6C0.7,0,0,0.7,0,1.6v12.8C0,15.3,0.7,16,1.6,16L3,16v-5c0-0.6,0.5-1.1,1.1-1.1l7.9,0c0.6,0,1.1,0.5,1.1,1.1v5\n\t\th1.3c0.9,0,1.6-0.7,1.6-1.6V1.6C16,0.7,15.3,0,14.4,0z M13.1,6.2c0,0.6-0.5,1-1.1,1l-7.9,0C3.5,7.2,3,6.7,3,6.1L2.9,2.9\n\t\tc0-0.6,0.5-1.1,1.1-1.1l7.9,0C12.5,1.8,13,2.4,13,3L13.1,6.2L13.1,6.2z\"/>\n\t<polygon points=\"5,13 8,13 8,16 5,16 \"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: LaunchCurrent SVG Icon Definition\nDESCRIPTION: SVG definition for the LaunchCurrent icon used in the Azure Portal. The icon shows an arrow pointing to the top-right corner, representing opening or launching something in the current context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_144\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 15 15\">\n<path class=\"msportalfx-svg-c01\" d=\"M8.883,0.942v1.586h3.118L6.314,8.214c-0.31,0.31-0.31,0.812,0,1.121C6.469,9.49,6.672,9.568,6.875,9.568 S7.281,9.49,7.435,9.336l5.545-5.545v2.833h1.586V0.942H8.883z\"/>\n<path class=\"msportalfx-svg-c01\" d=\"M12.01,6.064c-0.117-0.049-0.253-0.022-0.344,0.068L10.72,7.078c-0.059,0.059-0.092,0.14-0.092,0.223 v3.746c0,0.601-0.489,1.09-1.09,1.09H3.272c-0.601,0-1.09-0.489-1.09-1.09V6.07c0-0.601,0.489-1.09,1.09-1.09h4.762 c0.084,0,0.164-0.033,0.223-0.092l0.946-0.946c0.09-0.09,0.117-0.226,0.068-0.344C9.223,3.48,9.108,3.403,8.98,3.403H3.272 c-1.471,0-2.667,1.196-2.667,2.667v4.977c0,1.47,1.196,2.667,2.667,2.667h6.266c1.471,0,2.667-1.196,2.667-2.667V6.355 C12.204,6.228,12.127,6.113,12.01,6.064z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Localization String Format\nDESCRIPTION: JSON format for localization string resources in an Azure Gallery Package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"key1\": \"value1\",\n\t\"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Question Mark Icon in SVG\nDESCRIPTION: SVG code that defines a question mark icon using paths and shapes. The icon is styled with a gray background and white foreground.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_107\n\nLANGUAGE: SVG\nCODE:\n```\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\" enable-background=\"new 0 0 30 30\" xml:space=\"preserve\">\n<rect fill=\"#A0A1A2\" width=\"30\" height=\"30\"/>\n<g>\n\t<path fill=\"#FFFFFF\" d=\"M9.143,11.378c0-0.804,0.258-1.619,0.774-2.444s1.27-1.509,2.26-2.05s2.146-0.813,3.466-0.813\n\t\tc1.228,0,2.311,0.227,3.25,0.679s1.665,1.068,2.178,1.847c0.512,0.779,0.768,1.625,0.768,2.539c0,0.719-0.146,1.35-0.438,1.892\n\t\tc-0.293,0.542-0.64,1.009-1.041,1.403c-0.402,0.394-1.124,1.056-2.165,1.987c-0.288,0.262-0.519,0.493-0.692,0.691\n\t\tc-0.173,0.199-0.302,0.381-0.387,0.547c-0.085,0.164-0.15,0.33-0.197,0.494c-0.046,0.166-0.116,0.455-0.209,0.87\n\t\tc-0.161,0.88-0.664,1.32-1.511,1.32c-0.44,0-0.811-0.144-1.11-0.432c-0.301-0.288-0.451-0.716-0.451-1.282\n\t\tc0-0.711,0.11-1.326,0.33-1.848c0.22-0.52,0.512-0.977,0.876-1.371s0.854-0.861,1.473-1.403c0.542-0.474,0.933-0.832,1.175-1.073\n\t\tc0.24-0.241,0.443-0.51,0.609-0.806c0.164-0.296,0.247-0.618,0.247-0.965c0-0.677-0.252-1.249-0.755-1.714\n\t\tc-0.504-0.465-1.153-0.698-1.949-0.698c-0.931,0-1.616,0.235-2.057,0.705s-0.813,1.162-1.117,2.076\n\t\tc-0.288,0.957-0.834,1.435-1.638,1.435c-0.474,0-0.874-0.167-1.2-0.501C9.306,12.129,9.143,11.767,9.143,11.378z M15.338,25.292\n\t\tc-0.517,0-0.967-0.167-1.352-0.501c-0.386-0.335-0.578-0.803-0.578-1.403c0-0.533,0.187-0.981,0.559-1.346s0.829-0.546,1.371-0.546\n\t\tc0.533,0,0.981,0.182,1.346,0.546s0.546,0.813,0.546,1.346c0,0.593-0.19,1.058-0.571,1.396S15.837,25.292,15.338,25.292z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Canceled Status Badge in Azure Portal\nDESCRIPTION: SVG definition for the Canceled status badge that can be accessed through MsPortalFx.Base.Images.StatusBadge.Canceled(). The icon shows a gray circle with an X symbol representing a canceled state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_189\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<circle fill=\"#A0A1A2\" cx=\"8\" cy=\"8\" r=\"8\"/>\n<polygon fill=\"#FFFFFF\" points=\"12.073,5.285 10.715,3.927 8,6.642 5.285,3.927 3.927,5.285 6.642,8 3.927,10.715 5.285,12.073 \n\t8,9.358 10.715,12.073 12.073,10.715 9.358,8 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Log Diagnostics SVG Icon for Azure Portal\nDESCRIPTION: SVG markup defining the Log Diagnostics icon used in the Azure portal. The icon features a green background with a white line graph.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_55\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-10.5 -9.5 50 50\" enable-background=\"new -10.5 -9.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M34.492,35.865h2V-9.5H-1.841h-2.667C-5.801-9.333-8.5-6.2-8.5-5.749c0,0.187,0.059,43.882,0.059,43.882\n\tc0,1.307,1.06,2.367,2.368,2.367h37.565v-0.729L34.492,35.865z\"/>\n<path fill=\"#E5E5E5\" d=\"M-2.726-7.5c-1.105,0-1.58,0.185-2.507,1c-2.275,2,0.39,2,1.495,2h35.23v44.271l3-3.906V-7.5H-2.726z\"/>\n<polygon opacity=\"0.5\" fill=\"#A0A1A2\" enable-background=\"new    \" points=\"31.492,39.771 34.492,35.865 34.492,-7.5 31.492,-4.5 \n\t\"/>\n<g>\n\t<path fill=\"#FFFFFF\" d=\"M15.417,29.203l-4.302-17.581l-2.241,6.076H0.492c-0.828,0-1.5-0.671-1.5-1.5s0.672-1.5,1.5-1.5h6.29\n\t\tl4.915-13.32l4.507,18.419l2.197-5.099h7.091c0.828,0,1.5,0.671,1.5,1.5s-0.672,1.5-1.5,1.5h-5.116L15.417,29.203z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Release SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Release icon used in the Azure Portal interface. This icon shows a document with an arrow pointing upward, representing a release or deployment action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_159\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"4.5 20.5 24 24\" enable-background=\"new 4.5 20.5 24 24\" xml:space=\"preserve\">\n<path d=\"M23.5,27.5v13h-15v-13h-2v15h19v-15H23.5z\"/>\n<polygon points=\"14.621,26.751 10.5,30.436 10.5,27.434 16.009,22.5 21.5,27.411 21.5,30.412 17.405,26.751 17.405,38.5 \n\t14.621,38.5 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Gitdown Include Directives\nDESCRIPTION: Multiple gitdown include directives for importing content from template files into the documentation\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-development.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-howitworks.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for 'Go' in Azure Portal\nDESCRIPTION: SVG definition for a 'Go' icon, featuring a circular shape with an arrow inside. This icon is likely used for navigation or to indicate an action to proceed in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_135\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path d=\"M25.004,0C38.809,0,50,11.197,50,25c0,13.808-11.191,25-24.996,25C11.194,50,0,38.808,0,25\n\tC0,11.197,11.194,0,25.004,0 M25.004,3.179C12.974,3.179,3.181,12.967,3.181,25c0,12.033,9.792,21.825,21.823,21.825\n\tc12.026,0,21.817-9.792,21.817-21.825C46.821,12.967,37.03,3.179,25.004,3.179\"/>\n<polygon points=\"29.576,22.574 21.893,15.329 28.14,15.329 38.415,25.021 28.187,34.677 21.938,34.677 \n\t29.576,27.475 12.259,27.475 12.259,22.574 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Logo SVG in Microsoft Portal Framework\nDESCRIPTION: SVG definition for the Microsoft text logo in white color. The SVG includes the Microsoft word mark with detailed path elements for each letter, sized at 101x37 pixels.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_199\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"101px\" height=\"37px\" viewBox=\"0 0 101 37\" enable-background=\"new 0 0 101 37\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M39.032,19.815l-0.476,1.332h-0.027c-0.085-0.312-0.228-0.755-0.451-1.317l-2.547-6.39h-2.49v10.159h1.642\n\tv-6.245c0-0.385-0.008-0.851-0.025-1.384c-0.008-0.27-0.039-0.486-0.047-0.65h0.036c0.083,0.383,0.17,0.674,0.233,0.869l3.054,7.41\n\th1.149l3.031-7.477c0.069-0.17,0.142-0.503,0.209-0.802h0.036c-0.04,0.74-0.073,1.416-0.078,1.824v6.455h1.752V13.44h-2.392\n\tL39.032,19.815z\"/>\n<rect x=\"45.684\" y=\"16.319\" fill=\"#FFFFFF\" width=\"1.713\" height=\"7.28\"/>\n<path fill=\"#FFFFFF\" d=\"M46.558,13.225c-0.282,0-0.528,0.096-0.73,0.286c-0.203,0.191-0.306,0.431-0.306,0.714\n\tc0,0.279,0.102,0.514,0.302,0.7c0.2,0.185,0.446,0.279,0.733,0.279c0.287,0,0.534-0.094,0.736-0.279\n\tc0.203-0.186,0.306-0.421,0.306-0.7c0-0.273-0.1-0.511-0.298-0.706C47.105,13.324,46.855,13.225,46.558,13.225z\"/>\n<path fill=\"#FFFFFF\" d=\"M53.46,16.246c-0.329-0.068-0.651-0.103-0.957-0.103c-0.786,0-1.487,0.168-2.083,0.501\n\tc-0.597,0.333-1.059,0.808-1.373,1.412c-0.313,0.603-0.472,1.307-0.472,2.092c0,0.688,0.154,1.319,0.458,1.875\n\tc0.305,0.558,0.736,0.993,1.282,1.296c0.545,0.302,1.175,0.455,1.872,0.455c0.814,0,1.509-0.163,2.066-0.483l0.023-0.013v-1.569\n\tl-0.072,0.053c-0.253,0.184-0.535,0.331-0.838,0.436c-0.303,0.106-0.579,0.159-0.821,0.159c-0.672,0-1.211-0.21-1.603-0.625\n\tc-0.393-0.415-0.591-0.997-0.591-1.731c0-0.738,0.207-1.336,0.616-1.777c0.408-0.44,0.948-0.663,1.606-0.663\n\tc0.563,0,1.112,0.191,1.63,0.567l0.072,0.052v-1.653l-0.023-0.013C54.057,16.405,53.79,16.314,53.46,16.246z\"/>\n<path fill=\"#FFFFFF\" d=\"M59.102,16.192c-0.43,0-0.815,0.138-1.145,0.411c-0.29,0.239-0.499,0.567-0.659,0.976H57.28v-1.261h-1.712\n\tv7.28h1.712v-3.724c0-0.633,0.144-1.153,0.427-1.546c0.28-0.388,0.652-0.585,1.108-0.585c0.154,0,0.328,0.025,0.515,0.076\n\tc0.185,0.05,0.32,0.104,0.399,0.161l0.072,0.052v-1.726l-0.028-0.012C59.613,16.226,59.388,16.192,59.102,16.192z\"/>\n<path fill=\"#FFFFFF\" d=\"M63.753,16.143c-1.201,0-2.154,0.352-2.834,1.046c-0.68,0.694-1.024,1.654-1.024,2.854\n\tc0,1.14,0.336,2.056,0.999,2.724c0.663,0.668,1.566,1.007,2.683,1.007c1.163,0,2.098-0.357,2.778-1.06\n\tc0.679-0.703,1.024-1.654,1.024-2.826c0-1.158-0.323-2.082-0.961-2.745C65.781,16.48,64.884,16.143,63.753,16.143z M65.115,21.749\n\tc-0.322,0.404-0.806,0.608-1.439,0.608c-0.629,0-1.125-0.208-1.475-0.619c-0.352-0.413-0.53-1.002-0.53-1.751\n\tc0-0.772,0.178-1.376,0.53-1.796c0.35-0.418,0.841-0.63,1.461-0.63c0.601,0,1.08,0.202,1.422,0.602\n\tc0.345,0.401,0.519,1.001,0.519,1.782C65.603,20.735,65.439,21.342,65.115,21.749z\"/>\n<path fill=\"#FFFFFF\" d=\"M71.177,19.327c-0.54-0.217-0.886-0.397-1.028-0.535c-0.138-0.133-0.207-0.322-0.207-0.561\n\tc0-0.212,0.086-0.382,0.263-0.519c0.178-0.138,0.426-0.208,0.737-0.208c0.289,0,0.585,0.045,0.878,0.135\n\tc0.293,0.089,0.551,0.209,0.767,0.356l0.071,0.048V16.46l-0.028-0.012c-0.198-0.085-0.46-0.158-0.778-0.217\n\tc-0.317-0.059-0.605-0.088-0.854-0.088c-0.817,0-1.492,0.209-2.008,0.621c-0.519,0.414-0.782,0.958-0.782,1.615\n\tc0,0.342,0.057,0.645,0.169,0.902c0.112,0.258,0.287,0.486,0.518,0.677c0.229,0.189,0.584,0.387,1.054,0.589\n\tc0.395,0.162,0.689,0.3,0.876,0.408c0.183,0.106,0.313,0.213,0.386,0.317c0.071,0.102,0.108,0.241,0.108,0.413\n\tc0,0.489-0.366,0.727-1.12,0.727c-0.28,0-0.598-0.058-0.948-0.173c-0.35-0.115-0.676-0.281-0.971-0.492l-0.072-0.052v1.669\n\tl0.026,0.012c0.245,0.113,0.555,0.209,0.919,0.284c0.364,0.075,0.695,0.113,0.981,0.113c0.886,0,1.6-0.21,2.12-0.624\n\tc0.524-0.417,0.789-0.973,0.789-1.654c0-0.491-0.143-0.911-0.425-1.251C72.34,19.909,71.855,19.6,71.177,19.327z\"/>\n<path fill=\"#FFFFFF\" d=\"M77.649,16.143c-1.201,0-2.154,0.352-2.834,1.046c-0.679,0.694-1.024,1.654-1.024,2.854\n\tc0,1.14,0.336,2.056,1,2.724c0.663,0.668,1.566,1.007,2.683,1.007c1.163,0,2.098-0.357,2.778-1.06\n\tc0.679-0.703,1.024-1.654,1.024-2.826c0-1.158-0.323-2.082-0.961-2.745C79.677,16.48,78.78,16.143,77.649,16.143z M79.011,21.749\n\tc-0.322,0.404-0.806,0.608-1.439,0.608c-0.629,0-1.125-0.208-1.475-0.619c-0.352-0.413-0.53-1.002-0.53-1.751\n\tc0-0.772,0.178-1.376,0.53-1.796c0.35-0.418,0.841-0.63,1.461-0.63c0.601,0,1.08,0.202,1.422,0.602\n\tc0.345,0.401,0.519,1.001,0.519,1.782C79.5,20.735,79.335,21.342,79.011,21.749z\"/>\n<path fill=\"#FFFFFF\" d=\"M90.406,17.715v-1.397h-1.734v-2.171l-0.058,0.018l-1.629,0.499l-0.032,0.01v1.645h-2.57v-0.916\n\tc0-0.427,0.095-0.753,0.284-0.971c0.187-0.216,0.454-0.325,0.794-0.325c0.245,0,0.499,0.058,0.754,0.172l0.064,0.028v-1.471\n\tl-0.03-0.011c-0.238-0.086-0.562-0.129-0.963-0.129c-0.506,0-0.966,0.111-1.366,0.328c-0.401,0.219-0.717,0.531-0.938,0.927\n\tc-0.22,0.396-0.332,0.853-0.332,1.36v1.008h-1.208v1.397h1.208v5.883h1.733v-5.883h2.57v3.739c0,1.54,0.726,2.32,2.159,2.32\n\tc0.235,0,0.483-0.028,0.736-0.082c0.258-0.056,0.433-0.111,0.536-0.17l0.023-0.013v-1.41l-0.07,0.047\n\tc-0.094,0.063-0.211,0.114-0.349,0.152c-0.138,0.039-0.253,0.058-0.342,0.058c-0.336,0-0.584-0.09-0.738-0.269\n\tc-0.156-0.18-0.235-0.495-0.235-0.936v-3.437H90.406z\"/>\n<rect x=\"11.006\" y=\"10\" fill=\"#FFFFFF\" width=\"7.99\" height=\"8\"/>\n<rect x=\"20\" y=\"10\" fill=\"#FFFFFF\" width=\"8\" height=\"8\"/>\n<rect x=\"11.006\" y=\"19\" fill=\"#FFFFFF\" width=\"7.99\" height=\"8\"/>\n<rect x=\"20\" y=\"19\" fill=\"#FFFFFF\" width=\"8\" height=\"8\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Resource List SVG Icon Definition\nDESCRIPTION: SVG definitions for a resource list icon using rectangles and paths with custom color classes. Includes clickable regions and hover states.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_72\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0 0 50 50\">\n    <rect x=\"16.261\" y=\"1\" class=\"msportalfx-svg-c13\" width=\"9.802\" height=\"9.695\"/>\n    <rect x=\"27.702\" y=\"1\" class=\"msportalfx-svg-c13\" width=\"9.831\" height=\"9.695\"/>\n    <rect x=\"39.199\" y=\"1\" class=\"msportalfx-svg-c13\" width=\"9.801\" height=\"9.695\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring MoveCommand for Azure Command Bar (JSON)\nDESCRIPTION: Defines a MoveCommand object, enabling users to initiate resource movement to a different subscription or resource group in the Azure portal. This command requires core metadata including a unique 'id', a display label, and an icon reference, with no nested commands or additional configuration beyond user interface. The input is the JSON object itself; output is an actionable Move button in the portal UI. No dependencies except that the MoveCommand kind must be supported by the portal implementation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"kind\": \"MoveCommand\",\n        \"id\": \"moveCommand\",\n        \"displayName\": \"move\",\n        \"icon\": \"MsPortalFx.Base.Images.Move\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Code Formatting in Azure Portal\nDESCRIPTION: Example of how to format code blocks in the Azure Portal using the msportalfx-code class and monospace font styling. These classes ensure consistent presentation of code snippets.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"msportalfx-code\"><code>// this is code</code></pre>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"msportalfx-font-monospace\">msportalfx-font-monospace</div>\n```\n\n----------------------------------------\n\nTITLE: SVG Monitoring Icon Implementation in Azure Portal\nDESCRIPTION: XML-based SVG graphic definition for a monitoring icon used in the Azure Portal. The design features a circular progress indicator with different opacity regions and status indicators in green and orange colors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_61\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FFFFFF\" d=\"M22.83,4.37c-5.706,0.602-10.609,3.448-13.953,7.579c-3.345,4.134-5.106,9.52-4.508,15.227\n\tc0.604,5.703,3.449,10.604,7.581,13.949c4.134,3.346,9.52,5.109,15.222,4.509c5.705-0.601,10.606-3.451,13.955-7.581\n\tc3.34-4.132,5.106-9.519,4.505-15.225c-0.608-5.751-3.528-10.669-7.724-14.064c-3.531-2.859-8.032-4.51-12.856-4.51\n\tC24.319,4.254,23.578,4.292,22.83,4.37\"/>\n<path opacity=\"0.4\" fill=\"#7FBA00\" enable-background=\"new    \" d=\"M16.456,19.472l-5.048-4.086\n\tc-2.158,3.088-3.137,6.688-2.991,10.232l6.454-0.679C14.871,23.049,15.392,21.151,16.456,19.472\"/>\n<path opacity=\"0.8\" fill=\"#7FBA00\" enable-background=\"new    \" d=\"M30.575,16.279l4.087-5.049c-3.09-2.156-6.693-3.13-10.238-2.982\n\tl0.679,6.453C26.994,14.699,28.894,15.217,30.575,16.279\"/>\n<path opacity=\"0.6\" fill=\"#7FBA00\" enable-background=\"new    \" d=\"M22.853,14.956l-0.68-6.46c-3.49,0.623-6.795,2.35-9.348,5.123\n\tl5.044,4.084C19.274,16.294,21.012,15.371,22.853,14.956\"/>\n<path opacity=\"0.25\" fill=\"#7FBA00\" enable-background=\"new    \" d=\"M15.121,27.189l-6.46,0.682c0.62,3.492,2.345,6.801,5.121,9.357\n\tl4.083-5.044C16.455,30.775,15.534,29.034,15.121,27.189\"/>\n<path fill=\"#A0A1A2\" d=\"M49.859,22.383C49.131,15.446,45.588,9.5,40.586,5.455c-0.971-0.786-2.018-1.472-3.1-2.1l-1.963,3.777\n\tc0.83,0.493,1.636,1.024,2.385,1.632c4.196,3.395,7.116,8.312,7.723,14.063c0.602,5.706-1.165,11.093-4.504,15.226\n\tc-3.349,4.131-8.25,6.98-13.955,7.581c-3.82,0.4-7.489-0.277-10.744-1.761l-1.961,3.774c3.976,1.851,8.479,2.708,13.151,2.214\n\tc6.862-0.719,12.796-4.164,16.814-9.133C48.453,35.765,50.587,29.241,49.859,22.383\"/>\n<path fill=\"#A0A1A2\" d=\"M11.951,41.125C7.818,37.78,4.973,32.879,4.37,27.177c-0.599-5.708,1.162-11.094,4.508-15.228\n\tc3.343-4.13,8.246-6.977,13.951-7.578c4.613-0.484,9.016,0.574,12.694,2.76l1.963-3.776c-4.416-2.564-9.661-3.787-15.105-3.214\n\tC15.522,0.863,9.588,4.307,5.569,9.272L5.562,9.281c-4.018,4.965-6.144,11.484-5.423,18.338c0.723,6.859,4.164,12.796,9.135,16.815\n\tc1.582,1.282,3.335,2.346,5.194,3.212l1.961-3.774C14.826,43.142,13.315,42.229,11.951,41.125\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M11.951,41.125C7.818,37.78,4.973,32.879,4.37,27.177\n\tc-0.599-5.708,1.162-11.094,4.508-15.228c3.343-4.13,8.246-6.977,13.951-7.578c4.613-0.484,9.016,0.574,12.694,2.76l1.963-3.776\n\tc-4.416-2.564-9.661-3.787-15.105-3.214C15.522,0.863,9.588,4.307,5.569,9.272L5.562,9.281c-4.018,4.965-6.144,11.484-5.423,18.338\n\tc0.723,6.859,4.164,12.796,9.135,16.815c1.582,1.282,3.335,2.346,5.194,3.212l1.961-3.774\n\tC14.826,43.142,13.315,42.229,11.951,41.125\"/>\n<path fill=\"#7FBA00\" d=\"M36.43,12.647l-4.084,5.045c1.008,1.002,1.759,2.178,2.264,3.437h6.775\n\tC40.643,17.958,38.977,14.985,36.43,12.647z\"/>\n<path fill=\"#DD5900\" d=\"M23.082,27.041c-1.147-1.136-1.154-2.986-0.018-4.131c0.573-0.578,1.327-0.866,2.079-0.866\n\tc0.743,0,1.487,0.248,2.057,0.813c0.007,0.007,0.01-0.008,0.019,0h7.601h6.685l0.621-0.005l0.004,0.005\n\tc1.173,0,2.125,0.943,2.133,2.113c0.003,1.178-0.944,2.133-2.121,2.137H27.057c-0.55,0.481-1.235,0.779-1.923,0.779\n\tC24.394,27.886,23.652,27.606,23.082,27.041\"/>\n<path fill=\"#FF8C00\" d=\"M42.13,22.875l-0.004-0.005l-0.621,0.005H34.82h-7.601c-0.009-0.008-0.012,0.007-0.019,0\n\tc-0.57-0.565-1.314-0.813-2.057-0.813c-0.752,0-1.506,0.288-2.079,0.866c-0.564,0.569-0.845,1.312-0.846,2.055h22.044\n\tC44.251,23.815,43.301,22.875,42.13,22.875z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Portal TrendUp SVG Icon\nDESCRIPTION: SVG icon definition for upward trend indicator, sized 9x9px with black (#0F0F0F) arrow polygon.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_177\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"9px\" height=\"9px\" viewBox=\"0 0 9 9\" enable-background=\"new 0 0 9 9\" xml:space=\"preserve\">\n<polygon fill=\"#0F0F0F\" points=\"0,7.5 5.25,2.25 1.5,2.25 3.608,0 9,0 9,5.25 6.75,7.5 6.75,3.75 1.5,9 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Cubes Icon Implementation\nDESCRIPTION: SVG implementation of a cubes icon using multiple paths to create a 3D cube effect. Uses green and white colors with opacity effects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_21\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#7FBA00\" d=\"M11.923,34.94c-0.055,0-0.107-0.013-0.155-0.043L1.595,29.025c-0.099-0.056-0.158-0.158-0.158-0.267c0-0.111,0.059-0.212,0.158-0.266l10.109-5.834c0.093-0.056,0.211-0.056,0.306,0l10.172,5.874c0.099,0.054,0.159,0.156,0.159,0.268c0,0.11-0.06,0.211-0.159,0.265l-10.107,5.832C12.027,34.927,11.976,34.94,11.923,34.94\"/>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for ArrowDown Icon\nDESCRIPTION: Downward-pointing arrow icon for navigation or dropdown menus in Azure Portal. Simple polygon-based arrow shape pointing downward.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_101\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<polygon points=\"13.8,15.6 19,10.9 19,14.7 12,21 5,14.8 5,10.9 10.2,15.6 10.2,3 13.8,3 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Gear Icon in SVG\nDESCRIPTION: SVG code for a gear or settings icon. It uses a gray polygon shape with white details to represent a gear mechanism.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_34\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#7A7A7A\" points=\"50,27.726 50,22.036 49.197,21.775 43.106,19.786 41.481,15.861 44.605,9.252 40.581,5.229 \n\t39.826,5.61 34.115,8.513 30.19,6.885 27.724,0 22.036,0 21.773,0.807 19.784,6.899 15.862,8.522 9.25,5.4 5.227,9.422 5.61,10.175 \n\t8.51,15.889 6.887,19.81 0,22.276 0,27.967 0.804,28.231 6.896,30.218 8.521,34.141 5.398,40.752 9.419,44.777 10.174,44.393 \n\t15.886,41.492 19.81,43.117 22.275,50 27.966,50 28.228,49.197 30.217,43.108 34.14,41.482 40.75,44.608 44.775,40.582 \n\t44.392,39.828 41.49,34.117 43.117,30.193 \"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M39.749,5.648l-5.634,2.865L30.19,6.886L27.725,0h-5.689\n\tl-0.262,0.807l-1.989,6.091l-3.922,1.624L9.249,5.398L5.227,9.422l0.383,0.753l2.9,5.715l-1.623,3.92L0,22.277v5.69l0.804,0.263\n\tl6.092,1.988l1.625,3.923l-3.123,6.611l4.021,4.025l0.755-0.384l2.433-1.236l3.452-4.77c0.006,0.004,0.012,0.008,0.018,0.012\n\tl19.047-26.32c-0.006-0.005-0.012-0.009-0.018-0.014L39.749,5.648z\"/>\n<path fill=\"#FFFFFF\" d=\"M32.527,16.257l-2.369,2.391c2.137,1.429,3.554,3.879,3.554,6.632c0,4.331-3.472,7.769-7.781,7.699\n\tc-4.285-0.07-7.792-3.635-7.792-7.978c0-2.433,1.245-4.587,2.989-5.994L23,20.747V15h-5.809l1.421,1.522\n\tc-2.326,2.009-3.817,5.02-3.817,8.371c0,6.201,5.016,11.312,11.148,11.417c6.155,0.104,10.916-4.725,10.916-10.915\n\tC36.859,21.702,35.268,18.347,32.527,16.257z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Output Structure of Microsoft.Common.LocationSelector in JSON\nDESCRIPTION: This snippet shows the expected output format from the LocationSelector control. It includes comprehensive location metadata such as display name, normalized name, regional information, geographical coordinates, paired region details, and category information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.LocationSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"displayName\": \"East US\",\n        /**\n         * The normalized name of the location.\n         */\n        \"name\": \"eastus\",\n        /**\n         * The fully qualified ID of the location.\n         */\n        \"id\": \"/subscriptions/{subscription-ID}/locations/eastus\",\n        /**\n         * The display name with the Region included\n         */\n        \"regionalDisplayName\": \"(US) East US\",\n        /**\n         * The type of the location, can be \"Region\" or \"EdgeZone\".\n         */\n        \"type\": \"Region\",\n        /**\n         * Metadata about the location\n         * 'type' will determine which interface is returned from ARM\n         * If 'type' is \"Region\", then 'metadata can be casted to type 'RegionLocationMetadata'.\n         * If 'type' is \"EdgeZone\", then 'metadata can be casted to type 'EdgeZoneLocationMetadata'.\n         */\n        \"metadata\": {\n                \"geographyGroup\": \"US\",\n                \"latitude\": \"37.3719\",\n                \"longitude\": \"-79.8164\",\n                \"pairedRegion\": [\n                        {\n                                \"name\": \"westus\", \n                                \"id\": \"/subscriptions/{subscription-ID}/locations/westus\"\n                        }\n                ],\n                \"physicalLocation\": \"Virginia\",\n                \"regionCategory\": \"Recommended\",\n                \"regionType\": \"Physical\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Experimental Decorators\nDESCRIPTION: This tsconfig.json file configuration enables experimental decorators in TypeScript projects to resolve compilation errors. It sets compiler options including noImplicitAny, target ES5, and enables experimental decorators.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-samples.md#2025-04-23_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"experimentalDecorators\": true\n  },\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GetCreateFunnelByDay Function Signature\nDESCRIPTION: Function signature for GetCreateFunnelByDay that calculates create funnel KPIs for each extension's create blade for each day over a given time range. It includes various parameters for filtering the results.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_9\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFunnelByDay(\n    startDate:datetime,                 // required\n    endDate:datetime,                   // required\n    match_Extention:string=\"\",          // optional\n    match_Blade:string=\"\",              // optional\n    match_SessionId:string=\"\",          // optional\n    match_SubscriptionId:string=\"\",     // optional\n    match_TelemetryId:string=\"\",        // optional\n    match_CorrelationId:string=\"\",      // optional\n    match_GalleryPackageId:string=\"\",   // optional\n    match_BuildNumber:string=\"\",        // optional\n    exclude_NonMarketplace:bool=true    // optional\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Portal Extension Deployment Stamps (JSON)\nDESCRIPTION: This JSON object represents a sample configuration for an Azure Portal extension (`Microsoft_Azure_DevTestLab`) defining its deployment stamps. The `uri` property specifies the default production endpoint (loaded via HTTPS), while `uriFormat` provides a template for accessing alternative stamps (e.g., for testing) by substituting the `{0}` placeholder with a stamp name provided via a URL parameter (e.g., `&Microsoft_Azure_DevTestLab=perf`). This allows developers to test different versions or configurations of their extension without affecting the production environment. Requires the `feature.canmodifystamps=true` flag in the portal URL to use non-default stamps.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    name: \"Microsoft_Azure_DevTestLab\",\n    uri: \"//main.devtest.ext.azure.com\",\n    uriFormat: \"//{0}.devtest.ext.azure.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IP Address Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code defines an IP address icon with a rectangular shape and a circular element. The icon uses blue and gray colors to represent different components of an IP address or network concept.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_46\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M0.5,45.127c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V13.798h-50V45.127z\"/>\n<path fill=\"#A0A1A2\" d=\"M48.493,4.5H2.507C1.398,4.5,0.5,5.398,0.5,6.507v10.627h50V6.507C50.5,5.398,49.601,4.5,48.493,4.5\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M2.514,4.5c-1.108,0-2.007,0.898-2.007,2.007v7.291v3.336v27.993\n\tc0,1.108,0.899,2.007,2.007,2.007h2.188L44.12,4.5H2.514z\"/>\n<rect x=\"13.357\" y=\"9.279\" fill=\"#FFFFFF\" width=\"33.671\" height=\"3.942\"/>\n<path fill=\"#59B4D9\" d=\"M11.81,11.183c0,2.693-2.184,4.878-4.878,4.878c-2.694,0-4.878-2.185-4.878-4.878\n\tc0-2.694,2.184-4.879,4.878-4.879C9.625,6.304,11.81,8.489,11.81,11.183\"/>\n<polygon fill=\"#FFFFFF\" points=\"6.416,11.732 8.629,14.068 7.428,14.068 4.469,11.25 7.417,8.432 8.615,8.432 6.416,10.754 \n\t11.809,10.754 11.809,11.732 \"/>\n```\n\n----------------------------------------\n\nTITLE: Assembly Info Configuration\nDESCRIPTION: AssemblyInfo.cs configuration for setting build version and allowing embedded content\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n//-----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n//-----------------------------------------------------------------------------\nusing Microsoft.Portal.Framework;\n[assembly: AllowEmbeddedContent(\"Microsoft.Portal.Extensions.<YourExtension>\")]\n[assembly: System.Reflection.AssemblyFileVersion(\"1.0.0.0\")]\n```\n\n----------------------------------------\n\nTITLE: Hyperlink SVG Icon Definition\nDESCRIPTION: SVG definition for the Hyperlink icon used in the Azure Portal. The icon shows a document with an arrow pointing out from it, representing an external link or navigation to an external resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_139\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<g>\n\t<polygon fill-rule=\"evenodd\" clip-rule=\"evenodd\" points=\"14.607,2.04 17.727,4.61 8.557,13.31 11.377,16.12 19.987,6.96 \n\t\t22.507,9.48 22.507,2.04 \"/>\n\t<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.507,19.04h-15v-14h7v-3h-7.92c-1.66,0-2.09,1.77-2.08,1.75\n\t\tc-0.02-0.74,0.01,11.45,0.02,16.17c0,1.09,2.05,2.08,2,2.08c0.68-0.05,12.88-0.02,17.36-0.01c1,0.01,1.6-1.46,1.62-1.4\n\t\tc-0.02,0.93,0-6.59,0-6.59h-3V19.04z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for ArrowLeft Icon\nDESCRIPTION: Left-pointing arrow icon for navigation or back buttons in Azure Portal. Simple polygon-based arrow shape pointing left.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_102\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<polygon points=\"8.4,13.8 13.1,19 9.3,19 3,12 9.2,5 13.1,5 8.4,10.2 21,10.2 21,13.8 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Verifying TypeScript Compiler Version using Bash\nDESCRIPTION: This Bash command (`tsc -version`) is executed in a terminal or command prompt to check the installed version of the TypeScript compiler. This verification is required to ensure TypeScript 2.3.3 or later is installed for using the 'Compile on Save' feature in Visual Studio for TypeScript projects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$>tsc -version\n```\n\n----------------------------------------\n\nTITLE: Defining Redo SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Redo icon used in the Azure Portal interface. This icon shows a curved arrow pointing to the right, representing a redo action.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_157\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"-0.5 0.5 24 24\" enable-background=\"new -0.5 0.5 24 24\" xml:space=\"preserve\">\n<path d=\"M10.147,3.491c1.708,0,3.364,0.609,4.66,1.713l2.72,2.252V2.5L20.5,5.653v3.875v1.442v1.442h-6.754l-3.159-2.974h4.956\n\tl-2.602-2.035c-0.777-0.663-1.772-1.028-2.795-1.028c-2.383,0-4.322,1.941-4.322,4.326c0,1.265,0.672,2.462,1.65,3.301l7.078,6.34\n\tl-1.91,2.157l-7.061-6.323c-1.601-1.372-2.638-3.369-2.638-5.475C2.943,6.726,6.175,3.491,10.147,3.491z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Number Icon Implementation\nDESCRIPTION: SVG icon implementation showing numbers with white fill on blue background. Uses paths and rectangles to create the numerical display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_20\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#FFFFFF\" d=\"M30.1,24.7c0,2.5-0.5,4.4-1.4,5.7s-2.2,2-3.8,2c-1.6,0-2.8-0.6-3.7-1.9C20.4,29.2,20,27.4,20,25c0-2.6,0.4-4.5,1.3-5.9s2.2-2,3.9-2C28.5,17.2,30.1,19.7,30.1,24.7z M27.7,24.8c0-2-0.2-3.4-0.6-4.3c-0.4-0.9-1.1-1.4-1.9-1.4c-1.8,0-2.7,2-2.7,5.9c0,1.8,0.2,3.2,0.7,4.1c0.5,0.9,1.1,1.4,2,1.4c0.9,0,1.5-0.5,1.9-1.4S27.6,26.7,27.7,24.8L27.7,24.8z\"/>\n```\n\n----------------------------------------\n\nTITLE: Gitdown Content Configuration\nDESCRIPTION: Gitdown configuration for setting up table of contents with maximum heading level of 2\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-development.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"gitdown\": \"contents\", \"maxLevel\": 2\n```\n\n----------------------------------------\n\nTITLE: Defining Question SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Question icon used in the Azure Portal interface. This icon represents a question mark symbol for help or information purposes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_154\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 30 30\">\n  <path d=\"M14.622,1c4.843,0,9.61,2.232,9.61,7.568c0,4.919-5.638,6.811-6.848,8.589 c-0.908,1.324-0.605,3.179-3.103,3.179c-1.627,0-2.422-1.324-2.422-2.535c0-4.503,6.622-5.524,6.622-9.232 c0-2.043-1.362-3.254-3.632-3.254c-4.843,0-2.951,4.995-6.622,4.995c-1.325,0-2.46-0.795-2.46-2.308C5.768,4.292,10.006,1,14.622,1 z M14.432,22.794c1.703,0,3.103,1.4,3.103,3.103c0,1.703-1.4,3.103-3.103,3.103s-3.103-1.4-3.103-3.103 C11.329,24.194,12.729,22.794,14.432,22.794z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Extension PDL Configuration Options\nDESCRIPTION: Configuration options that can be set in the extension.pdl file to control visibility and preview status of an Azure Portal extension. Options include HideAssetType and HideInstances which control the extension's visibility in navigation and search.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-developmentPhases.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nPreview=\"true\"\nOptions=\"HideAssetType\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Public IP Resource - JSON\nDESCRIPTION: This JSON snippet defines the parameters required to provision or configure a public IP resource in Microsoft Azure. Key parameters include the resource group name (\"resourceGroup\"), domain name label (\"domainNameLabel\"), and public IP allocation method (\"publicIPAllocationMethod\"). Depends on Azure deployment or scripting tools capable of consuming JSON input, such as Azure CLI or ARM templates. Inputs must match Azure naming constraints and the selected SKU must be available for the region. Outputs are typically used within deployment pipelines or resource provisioning scripts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Network.PublicIpAddressCombo-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"demo\",\n    \"resourceGroup\": \"TestRG\",\n    \"domainNameLabel\": \"demoaddress\",\n    \"newOrExistingOrNone\": \"new\",\n    \"publicIPAllocationMethod\": \"Dynamic\",\n    \"sku\": \"Basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LoadTest Icon with Flask Shape in SVG\nDESCRIPTION: Definition of a load test icon resembling a laboratory flask. The SVG uses blue, green, and white elements to create a scientific testing flask with liquid inside, representing load testing functionality.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_52\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M48.288,44.623L32.72,17.659V6.743h0.281c1.862,0,3.372-1.51,3.372-3.372S34.863,0,33.001,0H16.016\n\tc-1.862,0-3.372,1.51-3.372,3.372s1.51,3.372,3.372,3.372h0.281v10.915L0.729,44.623C-0.979,47.58,0.418,50,3.833,50h41.351\n\tC48.598,50,49.995,47.58,48.288,44.623z\"/>\n<polygon fill=\"#B8D432\" points=\"13.551,33.017 7.127,44.143 41.889,44.143 35.466,33.017 \"/>\n<path fill=\"#7FBA00\" d=\"M25.334,37.532c1.735,0,3.141-1.406,3.141-3.141c0-0.493-0.117-0.958-0.32-1.374h-5.643\n\tc-0.203,0.415-0.32,0.88-0.32,1.374C22.193,36.126,23.599,37.532,25.334,37.532z\"/>\n<circle fill=\"#7FBA00\" cx=\"29.232\" cy=\"39.956\" r=\"1.541\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M0.729,44.623l15.568-26.965V6.743h-0.281c-1.862,0-3.372-1.51-3.372-3.372\n\tS14.153,0,16.016,0l7.319,0v17.572L15.13,50H3.833C0.418,50-0.979,47.58,0.729,44.623z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Embedding Content for Versioning using csproj ItemGroup\nDESCRIPTION: Shows how to include a JavaScript file as an embedded resource within the extension's assembly using the `<EmbeddedResource>` tag in a `.csproj` file (XML). This is the recommended approach for content versioning, allowing the Azure Portal shell's `getContentUri` API to serve versioned URLs (e.g., /Content/<Version>/Scripts/...), enabling effective browser caching tied to the specific build.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-versioning.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<EmbeddedResource Include=\"Content\\SamplesExtension\\Scripts\\MsPortalFxDocs.js\" />\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Undo SVG Icon\nDESCRIPTION: SVG icon definition for undo action, sized 24x24px with partial path definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_179\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M20.8,10.2c0,2.1-1,4.1-2.6,5.5L11.1,22l-1.9-2.2l7.1-6.3c1-0.8,1.6-2,1.6-3.3c0-2.4-1.9-4.3-4.3-4.3c-1,0-2,0.4-2.8,1\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Visual Studio Icon in Azure Portal\nDESCRIPTION: SVG definition for the Visual Studio icon that can be accessed through MsPortalFx.Base.Images.VisualStudio(). The icon represents the Visual Studio IDE logo in a simplified form.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_184\n\nLANGUAGE: SVG\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 21 21\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"msportalfx-svg-c20\" d=\"M9.714,10.007L15,5.893v8.229L9.714,10.007z M2,13.007v-6l3,3 L2,13.007z M15,0.007L7.064,7.943L2,4.007l-2,1v10l2,1l5.064-3.936L15,20.007l5-2v-16L15,0.007z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Commit in Azure Portal\nDESCRIPTION: An SVG icon representing a commit action. Used in the Azure Portal UI to indicate functionality related to committing changes, especially in source control or version control contexts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_119\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5,13v9h15v-9H5z M18,20H7v-5h11V20z\"/>\n<polygon points=\"11.121,6.251 7,9.936 7,6.934 12.509,2 18,6.911 18,9.912 13.905,6.251 13.905,12 11.121,12 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining DataBrowse View Properties in Markdown\nDESCRIPTION: This snippet defines the properties of a DataBrowse view type, including required fields like title, ariaLabel, data, and columns, as well as optional fields like description and fx.feature. It provides a table format for easy readability.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dataBrowseViewType-properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Display title text for the DataBrowse view\n|description|False|Display description text for the DataBrowse view\n|fx.feature|False|\n|ariaLabel|True|label of the command used for screen reader users.\n|data|True|Data property accepts an array, and can be static or dynamic. In both cases, the data must map to the columns specified. You can specify a JMES path query in the `transforms` to manage the data. See [here](dx-view-databrowseViewType-data.md) for more information.\n|columns|True|Define the column to be shown in the DataBrowse view. See [here](dx-view-databrowseViewType-columns.md) for more information.\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: Files\nDESCRIPTION: SVG markup for a stacked files icon showing multiple blue document outlines. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.Files() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_30\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#59B4D9\" points=\"47.4,17.5 43.5,13.6 41.8,12 41.6,12 13,12 13,50 49,50 49,19.4 49,19.2 \"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" points=\"41,14 15,14 15,48 47,48 47,20 41,20 \"/>\n<path fill=\"#59B4D9\" d=\"M20,39.1c0-0.5,0.4-0.9,0.9-0.9h12.4c0.5,0,0.9,0.4,0.9,0.9c0,0.5-0.4,0.9-0.9,0.9H20.9\n\tC20.4,40,20,39.6,20,39.1\"/>\n<path fill=\"#59B4D9\" d=\"M20,32.9c0-0.5,0.4-0.9,0.9-0.9h20.5c0.5,0,0.9,0.4,0.9,0.9c0,0.5-0.4,0.9-0.9,0.9H20.9\n\tC20.4,33.8,20,33.4,20,32.9\"/>\n<path fill=\"#59B4D9\" d=\"M20,27.1c0-0.5,0.4-0.9,0.9-0.9h20.5c0.5,0,0.9,0.4,0.9,0.9c0,0.5-0.4,0.9-0.9,0.9H20.9\n\tC20.4,28,20,27.6,20,27.1\"/>\n<rect x=\"3\" fill=\"#59B4D9\" width=\"29\" height=\"6\"/>\n<rect x=\"1\" fill=\"#59B4D9\" width=\"6\" height=\"40\"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" points=\"5,2 3,2 3,38 7,38 7,6 30,6 30,2 \"/>\n<rect x=\"9\" y=\"6\" fill=\"#59B4D9\" width=\"29\" height=\"6\"/>\n<rect x=\"7\" y=\"6\" fill=\"#59B4D9\" width=\"6\" height=\"38\"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" points=\"11,8 9,8 9,42 13,42 13,12 36,12 36,8 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for a Purple Diamond Icon\nDESCRIPTION: SVG code defining a purple diamond-shaped icon with a checkmark. The icon uses a polygon base with opacity effects and includes a green circle with a checkmark indicator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_84\n\nLANGUAGE: SVG\nCODE:\n```\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#804998\" points=\"50,35.5 50,14.588 35.368,0 14.662,0 0,15.029 0,35.426 14.632,50 35.368,50 \"/>\n<path opacity=\"0.8\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M34.538,2h-19.05L2,15.827v18.765L15.462,48h19.077L48,34.66\n\tV15.421L34.538,2z M33.403,45.24h-0.152l-11.28-11.446l2.382-2.662h-8.177v8.382l2.677-2.882l8.868,8.608H16.602L4.76,33.446V16.95\n\tl3.322-3.406l8.829,7.955l-5.029,5.221h16.059V10.765L22.691,16l-8.885-8.323l2.846-2.917h16.745L45.24,16.567v14.745l-5.622-5.298\n\tl4.118-3.706H32.353v10.75l3.72-3.691l6.368,6.915L33.403,45.24z\"/>\n<polygon opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" points=\"42.896,7.506 35.368,0 14.662,0 0,15.029 0,35.427 \n\t7.503,42.899 \"/>\n<circle fill=\"#7FBA00\" cx=\"8\" cy=\"42\" r=\"8\"/>\n<path fill=\"#FFFFFF\" d=\"M3.989,42.469L3.7,42.156c-0.075-0.083-0.075-0.214,0.012-0.293l0.835-0.772\n\tc0.04-0.036,0.087-0.055,0.139-0.055c0.059,0,0.111,0.024,0.15,0.067l2.296,2.462l3.951-5.06c0.04-0.051,0.099-0.079,0.162-0.079\n\tc0.048,0,0.091,0.016,0.127,0.044l0.903,0.697c0.044,0.032,0.071,0.079,0.079,0.135c0.004,0.055-0.008,0.111-0.044,0.15\n\tl-5.075,6.497L3.989,42.469z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: Discs\nDESCRIPTION: SVG markup for database discs icon with blue and green colored discs stacked on each other. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.Discs() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_25\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M50,37.198c0,5.001-11.194,9.054-25,9.054S0,42.199,0,37.198v-4.88h50V37.198z\"/>\n<path fill=\"#B8D432\" d=\"M50,32.318c0,5.001-11.194,9.054-25,9.054S0,37.319,0,32.318c0-5,11.193-9.054,25-9.054S50,27.318,50,32.318\n\t\"/>\n<path fill=\"#7FBA00\" d=\"M33.013,31.797c0,1.33-3.588,2.407-8.014,2.407s-8.015-1.077-8.015-2.407s3.589-2.407,8.015-2.407\n\tS33.013,30.468,33.013,31.797\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M43.071,26.115c-3.502-1.327-8.104-2.269-13.279-2.633l-3.244,6.004\n\tc1.596,0.094,3.023,0.329,4.127,0.662L43.071,26.115z\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M5.902,38.208c3.601,1.543,8.598,2.643,14.288,3.045l3.793-7.02\n\tc-1.579-0.06-3.014-0.257-4.168-0.552L5.902,38.208z\"/>\n<path fill=\"#0072C6\" d=\"M50,17.682c0,5.001-11.194,9.054-25,9.054S0,22.682,0,17.682v-4.88h50V17.682z\"/>\n<path fill=\"#59B4D9\" d=\"M50,12.802c0,5.001-11.194,9.054-25,9.054S0,17.802,0,12.802s11.193-9.054,25-9.054S50,7.801,50,12.802\"/>\n<path fill=\"#0072C6\" d=\"M33.013,12.281c0,1.33-3.588,2.407-8.014,2.407s-8.015-1.077-8.015-2.407s3.589-2.407,8.015-2.407\n\tS33.013,10.951,33.013,12.281\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M43.071,6.549c-3.502-1.327-8.104-2.269-13.279-2.633L26.548,9.92\n\tc1.596,0.094,3.023,0.329,4.127,0.662L43.071,6.549z\"/>\n<path opacity=\"0.25\" fill=\"#FFFFFF\" d=\"M5.902,18.642c3.601,1.543,8.598,2.643,14.288,3.045l3.793-7.02\n\tc-1.579-0.06-3.014-0.257-4.168-0.552L5.902,18.642z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing Section Control Output via JSON Path - JSON\nDESCRIPTION: This snippet demonstrates how to reference a text control (\\\"text1\\\") within a section control (\\\"section1\\\") that resides in a configuration step. The syntax uses the steps() function to access the value of the nested control in the portal documentation JSON schema. The code expects that \\\"configuration\\\", \\\"section1\\\", and \\\"text1\\\" are preconfigured with relevant values in the portal. Input is not required; output is the current value of the referenced control. There are no external dependencies; use is limited to Azure portal documentation configuration context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Section-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nsteps('configuration').section1.text1\n```\n\n----------------------------------------\n\nTITLE: Configuring Essentials Section with Action URL Property (JSON)\nDESCRIPTION: Shows how to add a property to the essentials section that, when clicked, opens a specified URL in the user's browser. The configuration requires an 'action' object containing a 'url', tied to a display value. Inputs include the target URL and display parameters; output is an actionable property in the essentials UI. Limitation: The action must be a valid, accessible URL.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-declarative-overview.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n\"essentials\": {\n    \"properties\": [\n        {\n            \"displayName\": \"propertydisplayname\",\n            \"value\": \"action url\",\n            \"action\": {\n                \"url\": \"https://www.azure.com\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Portal Deployment Documentation\nDESCRIPTION: Series of gitdown include directives that specify which template files to include in the deployment documentation\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-deployment.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-extension-hosting-service.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-extension-hosting-service-advanced.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-deployment-sovereign.md\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Postpone Clock Icon in Azure Portal\nDESCRIPTION: An SVG icon representing a clock or timer functionality with a circular clock face and hands pointing to specific times. Used for the MsPortalFx.Base.Images.Postpone() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_148\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0.5 0.5 24 24\" enable-background=\"new 0.5 0.5 24 24\" xml:space=\"preserve\">\n<path d=\"M12.5,2.5c-5.523,0-10,4.477-10,10s4.477,10,10,10s10-4.477,10-10S18.023,2.5,12.5,2.5z M12.5,19.375\n\tc-3.797,0-6.875-3.078-6.875-6.875S8.703,5.625,12.5,5.625s6.875,3.078,6.875,6.875S16.297,19.375,12.5,19.375z\"/>\n<rect x=\"11.25\" y=\"6.25\" width=\"1.25\" height=\"6.25\"/>\n<rect x=\"11.25\" y=\"12.5\" width=\"6.25\" height=\"1.25\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Basic ARG Query for Resource Status\nDESCRIPTION: Sample Azure Resource Graph query for retrieving resource status information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\nwhere type == 'microsoft.test/virtualservers' |\nextend status = properties.status\n```\n\n----------------------------------------\n\nTITLE: Buggy Implementation Using MapInto\nDESCRIPTION: A problematic implementation of mapInto() that creates new observables, demonstrating that mapInto() has the same pitfalls as map() when implemented incorrectly.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.mapInto<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: ko.observable(robot.name()),\n        status: ko.observable(robot.status()),\n        modelAndMfg: ko.observable(\"{0}:{1}\".format(robot.model(), robot.manufacturer())),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Logo SVG\nDESCRIPTION: SVG code for the GitHub logo. It defines a 30x30 pixel image with paths representing the GitHub icon using black color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_197\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"-0.5 0.5 30 30\" enable-background=\"new -0.5 0.5 30 30\" xml:space=\"preserve\">\n<path fill=\"#1E1E1E\" d=\"M14.5,0.5c-8.281,0-15,6.719-15,15c0,8.292,6.719,15,15,15s15-6.708,15-15C29.5,7.219,22.781,0.5,14.5,0.5z\n\t M18.466,28.522v-2.562c0-0.989-0.539-1.865-1.371-2.416c0.056-0.011,0.124-0.022,0.191-0.022c1.427-0.18,2.719-0.629,2.719-0.629\n\ts1.854-0.573,2.854-1.742c1.056-1.236,1.326-3.067,1.326-3.067s0.348-2,0-3.551c-0.348-1.517-1.461-2.573-1.461-2.573\n\ts0.382-0.989,0.348-2.023c-0.034-0.989-0.494-2.022-0.494-2.022s-0.876-0.079-1.809,0.281c-1.135,0.438-2.371,1.326-2.371,1.326\n\ts-0.865-0.281-1.876-0.416C15.59,8.972,14.5,8.961,14.5,8.961s-1.09,0.011-2.022,0.146c-1.011,0.135-1.876,0.416-1.876,0.416\n\tS9.376,8.635,8.23,8.197c-0.921-0.36-1.809-0.281-1.809-0.281S5.972,8.949,5.938,9.938c-0.034,1.034,0.348,2.023,0.348,2.023\n\ts-1.124,1.056-1.461,2.573c-0.36,1.551,0,3.551,0,3.551s0.27,1.831,1.315,3.067c1,1.169,2.865,1.742,2.865,1.742\n\ts1.281,0.449,2.708,0.629c0.067,0,0.135,0.011,0.202,0.022c-0.831,0.551-1.382,1.427-1.382,2.416v2.562\n\tc-5.584-1.697-9.64-6.888-9.64-13.022c0-7.517,6.09-13.607,13.607-13.607S28.118,7.983,28.118,15.5\n\tC28.118,21.635,24.051,26.826,18.466,28.522z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Link in Essentials Panel\nDESCRIPTION: Shows how to create a function that returns a DynamicBladeSelection to navigate to a Settings blade from the Essentials panel. This enables users to access resource settings via the first command and the 'all settings' link.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-essentials.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar getAllSettingsSelection: MsPortalFx.ViewModels.Parts.ResourceSummary.GetDynamicBladeSelection = (inputs: Def.InputsContract) => {\n    return <MsPortalFx.ViewModels.DynamicBladeSelection> {\n        detailBlade: ExtensionDefinition.BladeNames.engineAllSettingsBlade,\n        detailBladeInputs: {\n            id: inputs.resourceId\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Blade Load Reliability with Kusto\nDESCRIPTION: This Kusto query evaluates the load reliability for blades within a specific Azure Portal extension over the last 14 days. It examines `BladeFullReady` (success) and `BladeLoadErrored` (failure) actions in the `ClientTelemetry` table, summarizing successful and failed loads/users daily per blade name. It calculates reliability SLAs based on these counts. The query requires updating the `name` filter to match the target extension or specific blade name pattern.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nClientTelemetry\n| where PreciseTimeStamp >= ago(14d)\n| where userTypeHint == \"\"\n| where name contains \"MyExtensionName\"\n| where action in (\"BladeFullReady\", \"BladeLoadErrored\")\n| summarize SuccessfulLoads = countif(action == \"BladeFullReady\"), FailedLoads = countif(action == \"BladeLoadErrored\")\n, SuccessfulUsersLoads = dcountif(userId, action == \"BladeFullReady\", 4), FailedUserLoads = dcountif(userId, action == \"BladeLoadErrored\", 4)\n by bin(PreciseTimeStamp, 1d), name\n| extend ReliabilitySLA = (todouble(SuccessfulLoads) / todouble(SuccessfulLoads + FailedLoads)) * 100\n| extend ReliabilityUserSLA = (todouble(SuccessfulUsersLoads) / todouble(SuccessfulUsersLoads + FailedUserLoads)) * 100\n| sort by ReliabilitySLA asc\n```\n\n----------------------------------------\n\nTITLE: Referencing PDE File in .csproj - XML\nDESCRIPTION: This XML snippet demonstrates updating a .csproj project file so the PDE file is recognized as an extension reference rather than plain content. It is necessary when consuming exported parts or blades from another extension, and is completed by editing the project file after the PDE is added. The 'Include' path must match the PDE file's location in your project. Only one reference per PDE, and the entry should be placed under an appropriate item group for extension integration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensibility-pde.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ExtensionReference Include=\"Client\\References\\HubsExtension.pde\" />\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Upload Icon in Azure Portal\nDESCRIPTION: SVG definition for the Upload icon that can be accessed through MsPortalFx.Base.Images.Upload(). The icon visually represents uploading content with an upward-pointing arrow.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_182\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<polygon points=\"10.745,12.91 5.5,17.6 5.5,13.78 12.511,7.5 19.5,13.75 19.5,17.57 14.288,12.91 14.288,22.5 10.745,22.5 \"/>\n<rect x=\"5.5\" y=\"2.5\" width=\"14\" height=\"3\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Mode in Web.config\nDESCRIPTION: XML configuration to set IsDevelopmentMode to false for Content Unbundler functionality in extension's web.config\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <add key=\"Microsoft.Portal.Extensions.<YourExtension>.ApplicationConfiguration.IsDevelopmentMode\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Globe Warning SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for a Globe Warning icon, using paths and shapes with specified colors and opacity. Includes a gray base, orange globe, and white exclamation mark indicator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_38\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M24.159,40.351h-3.951c0.957,5.788-2.336,6.618-7.968,6.618V50h7.163h5.229h6.759v-3.031\n\tC25.76,46.969,23.201,46.142,24.159,40.351\"/>\n<rect x=\"12.242\" y=\"46.968\" fill=\"#A0A1A2\" width=\"19.151\" height=\"3.032\"/>\n<path fill=\"#FF8C00\" d=\"M35.12,5.48c-3.17-3.17-7.195-4.963-11.332-5.383C18.386-0.452,12.791,1.341,8.652,5.48\n\tC4.513,9.619,2.72,15.214,3.268,20.616c0.42,4.138,2.213,8.162,5.383,11.332c4.898,4.898,11.833,6.508,18.077,4.842\n\tc3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117C40.37,13.34,38.551,8.91,35.12,5.48z\"/>\n<path opacity=\"0.2\" fill=\"#1E1E1E\" d=\"M31.612,28.442c-3.221,3.222-7.105,5.373-11.211,6.469c-2.025,0.54-4.105,0.818-6.187,0.842\n\tc3.95,1.775,8.378,2.142,12.515,1.038c3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117\n\tc-0.111-2.361-0.679-4.7-1.679-6.891C38.857,17.279,36.449,23.605,31.612,28.442z\"/>\n<path fill=\"#A0A1A2\" d=\"M21.886,43.656c-6.662,0-12.926-2.594-17.637-7.305c-0.68-0.68-0.68-1.781,0-2.461\n\tc0.68-0.679,1.781-0.68,2.461,0c4.054,4.054,9.443,6.286,15.176,6.286c5.733,0,11.122-2.232,15.176-6.286\n\tc4.054-4.054,6.286-9.443,6.286-15.176S41.116,7.592,37.062,3.538c-0.68-0.68-0.68-1.781,0-2.461c0.68-0.68,1.782-0.679,2.461,0\n\tc4.711,4.711,7.305,10.974,7.305,17.637s-2.594,12.926-7.305,17.637S28.548,43.656,21.886,43.656z\"/>\n<path fill=\"#FFFFFF\" d=\"M32.932,24.446l-4.743-8.137l-4.808-8.25c-0.741-1.275-2.255-1.257-3.016,0.02l-4.742,7.928l-4.791,8.419\n\tc-0.746,1.275,0.051,2.845,1.562,2.845h9.495h9.49C32.926,27.271,33.687,25.716,32.932,24.446z M21.733,13.229h0.464h1.159\n\tl-0.416,7.182h-0.743h-0.464h-0.743l-0.413-7.182H21.733z M21.886,24.229c-0.856,0-1.55-0.694-1.55-1.55\n\tc0-0.856,0.694-1.55,1.55-1.55c0.856,0,1.55,0.694,1.55,1.55C23.436,23.535,22.742,24.229,21.886,24.229z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Test Logging in C#\nDESCRIPTION: Shows how to implement logging in test cases using TestContext.WriteLine for better diagnostic capabilities.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nTestContext.WriteLine(\"Starting provisioning from the StartBoard...\");\n```\n\n----------------------------------------\n\nTITLE: Adding ServiceGroupRootReplacements.json to Project File\nDESCRIPTION: XML configuration to include ServiceGroupRootReplacements.json in the extension project file. This ensures the configuration file is copied to the output directory during build.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"ServiceGroupRootReplacements.json\">\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n</Content>\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Gallery Package\nDESCRIPTION: Command to delete a gallery package from test environments using AzureGalleryUtility. Not supported in production except for security/legal issues.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_12\n\nLANGUAGE: bat\nCODE:\n```\n> Microsoft.Azure.Gallery.AzureGalleryUtility.exe delete -i [Publisher].[Name].[Version]\n```\n\n----------------------------------------\n\nTITLE: Multiple URLs Output Example\nDESCRIPTION: Example showing the JSON array output format when options.multiple is true and options.uploadMode is url.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload-guidance.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"https://myaccount.blob.core.windows.net/pictures/\",\n  \"https://myaccount.blob.core.windows.net/pictures/\",\n  \"https://myaccount.blob.core.windows.net/pictures/\"\n]\n```\n\n----------------------------------------\n\nTITLE: Linking AssetViewModel in AssetType Definition\nDESCRIPTION: XML configuration showing how to reference the AssetViewModel from the AssetType definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<AssetType Name=\"MyResource\"\\n           ...\\n           ViewModel=\"{ViewModel Name=MyResourceViewModel, Module=./AssetViewModels/MyResourceViewModel}\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Portal Background Color Classes in HTML\nDESCRIPTION: This HTML snippet demonstrates the various background color classes available in the Azure Portal. It includes base colors, shades, and tints, each with a contrasting text color. These classes are designed to remain consistent across different themes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"bgcolorpalette\">\n<div class=\"bgcolorcontainer\">\nBase set\n  <div class=\"msportalfx-bgcolor-a0\">msportalfx-bgcolor-a0</div>\n  <div class=\"msportalfx-bgcolor-b0\">msportalfx-bgcolor-b0</div>\n  <div class=\"msportalfx-bgcolor-c0\">msportalfx-bgcolor-c0</div>\n  <div class=\"msportalfx-bgcolor-d0\">msportalfx-bgcolor-d0</div>\n  <div class=\"msportalfx-bgcolor-e0\">msportalfx-bgcolor-e0</div>\n  <div class=\"msportalfx-bgcolor-f0\">msportalfx-bgcolor-f0</div>\n  <div class=\"msportalfx-bgcolor-g0\">msportalfx-bgcolor-g0</div>\n  <div class=\"msportalfx-bgcolor-h0\">msportalfx-bgcolor-h0</div>\n  <div class=\"msportalfx-bgcolor-i0\">msportalfx-bgcolor-i0</div>\n  <div class=\"msportalfx-bgcolor-j0\">msportalfx-bgcolor-j0</div>\n  <div class=\"msportalfx-bgcolor-k0\">msportalfx-bgcolor-k0</div>\n</div>\n<br>\n<br>\n<div class=\"bgcolorcontainer\">\nShade 1\n  <div class=\"msportalfx-bgcolor-a1\">msportalfx-bgcolor-a1</div>\n  <div class=\"msportalfx-bgcolor-b1\">msportalfx-bgcolor-b1</div>\n  <div class=\"msportalfx-bgcolor-c1\">msportalfx-bgcolor-c1</div>\n  <div class=\"msportalfx-bgcolor-d1\">msportalfx-bgcolor-d1</div>\n  <div class=\"msportalfx-bgcolor-e1\">msportalfx-bgcolor-e1</div>\n  <div class=\"msportalfx-bgcolor-f1\">msportalfx-bgcolor-f1</div>\n  <div class=\"msportalfx-bgcolor-g1\">msportalfx-bgcolor-g1</div>\n  <div class=\"msportalfx-bgcolor-h1\">msportalfx-bgcolor-h1</div>\n  <div class=\"msportalfx-bgcolor-i1\">msportalfx-bgcolor-i1</div>\n  <div class=\"msportalfx-bgcolor-j1\">msportalfx-bgcolor-j1</div>\n  <div class=\"msportalfx-bgcolor-k1\">msportalfx-bgcolor-k1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nShade 2\n  <div class=\"msportalfx-bgcolor-a0s1\">msportalfx-bgcolor-a0s1</div>\n  <div class=\"msportalfx-bgcolor-b0s1\">msportalfx-bgcolor-b0s1</div>\n  <div class=\"msportalfx-bgcolor-c0s1\">msportalfx-bgcolor-c0s1</div>\n  <div class=\"msportalfx-bgcolor-d0s1\">msportalfx-bgcolor-d0s1</div>\n  <div class=\"msportalfx-bgcolor-e0s1\">msportalfx-bgcolor-e0s1</div>\n  <div class=\"msportalfx-bgcolor-f0s1\">msportalfx-bgcolor-f0s1</div>\n  <div class=\"msportalfx-bgcolor-g0s1\">msportalfx-bgcolor-g0s1</div>\n  <div class=\"msportalfx-bgcolor-h0s1\">msportalfx-bgcolor-h0s1</div>\n  <div class=\"msportalfx-bgcolor-i0s1\">msportalfx-bgcolor-i0s1</div>\n  <div class=\"msportalfx-bgcolor-j0s1\">msportalfx-bgcolor-j0s1</div>\n  <div class=\"msportalfx-bgcolor-k0s1\">msportalfx-bgcolor-k0s1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nShade 3\n  <div class=\"msportalfx-bgcolor-a0s2\">msportalfx-bgcolor-a0s2</div>\n  <div class=\"msportalfx-bgcolor-b0s2\">msportalfx-bgcolor-b0s2</div>\n  <div class=\"msportalfx-bgcolor-c0s2\">msportalfx-bgcolor-c0s2</div>\n  <div class=\"msportalfx-bgcolor-d0s2\">msportalfx-bgcolor-d0s2</div>\n  <div class=\"msportalfx-bgcolor-e0s2\">msportalfx-bgcolor-e0s2</div>\n  <div class=\"msportalfx-bgcolor-f0s2\">msportalfx-bgcolor-f0s2</div>\n  <div class=\"msportalfx-bgcolor-g0s2\">msportalfx-bgcolor-g0s2</div>\n  <div class=\"msportalfx-bgcolor-h0s2\">msportalfx-bgcolor-h0s2</div>\n  <div class=\"msportalfx-bgcolor-i0s2\">msportalfx-bgcolor-i0s2</div>\n  <div class=\"msportalfx-bgcolor-j0s2\">msportalfx-bgcolor-j0s2</div>\n  <div class=\"msportalfx-bgcolor-k0s2\">msportalfx-bgcolor-k0s2</div>\n</div>\n<br>\n<br>\n<div class=\"bgcolorcontainer\">\nTint 1\n  <div class=\"msportalfx-bgcolor-a2\">msportalfx-bgcolor-a2</div>\n  <div class=\"msportalfx-bgcolor-b2\">msportalfx-bgcolor-b2</div>\n  <div class=\"msportalfx-bgcolor-c2\">msportalfx-bgcolor-c2</div>\n  <div class=\"msportalfx-bgcolor-d2\">msportalfx-bgcolor-d2</div>\n  <div class=\"msportalfx-bgcolor-e2\">msportalfx-bgcolor-e2</div>\n  <div class=\"msportalfx-bgcolor-f2\">msportalfx-bgcolor-f2</div>\n  <div class=\"msportalfx-bgcolor-g2\">msportalfx-bgcolor-g2</div>\n  <div class=\"msportalfx-bgcolor-h2\">msportalfx-bgcolor-h2</div>\n  <div class=\"msportalfx-bgcolor-i2\">msportalfx-bgcolor-i2</div>\n  <div class=\"msportalfx-bgcolor-j2\">msportalfx-bgcolor-j2</div>\n  <div class=\"msportalfx-bgcolor-k2\">msportalfx-bgcolor-k2</div>\n</div>\n<div class=\"bgcolorcontainer\">\nTint 2\n  <div class=\"msportalfx-bgcolor-a0t1\">msportalfx-bgcolor-a0t1</div>\n  <div class=\"msportalfx-bgcolor-b0t1\">msportalfx-bgcolor-b0t1</div>\n  <div class=\"msportalfx-bgcolor-c0t1\">msportalfx-bgcolor-c0t1</div>\n  <div class=\"msportalfx-bgcolor-d0t1\">msportalfx-bgcolor-d0t1</div>\n  <div class=\"msportalfx-bgcolor-e0t1\">msportalfx-bgcolor-e0t1</div>\n  <div class=\"msportalfx-bgcolor-f0t1\">msportalfx-bgcolor-f0t1</div>\n  <div class=\"msportalfx-bgcolor-g0t1\">msportalfx-bgcolor-g0t1</div>\n  <div class=\"msportalfx-bgcolor-h0t1\">msportalfx-bgcolor-h0t1</div>\n  <div class=\"msportalfx-bgcolor-i0t1\">msportalfx-bgcolor-i0t1</div>\n  <div class=\"msportalfx-bgcolor-j0t1\">msportalfx-bgcolor-j0t1</div>\n  <div class=\"msportalfx-bgcolor-k0t1\">msportalfx-bgcolor-k0t1</div>\n</div>\n<div class=\"bgcolorcontainer\">\nTint 3\n  <div class=\"msportalfx-bgcolor-a0t2\">msportalfx-bgcolor-a0t2</div>\n  <div class=\"msportalfx-bgcolor-b0t2\">msportalfx-bgcolor-b0t2</div>\n  <div class=\"msportalfx-bgcolor-c0t2\">msportalfx-bgcolor-c0t2</div>\n  <div class=\"msportalfx-bgcolor-d0t2\">msportalfx-bgcolor-d0t2</div>\n  <div class=\"msportalfx-bgcolor-e0t2\">msportalfx-bgcolor-e0t2</div>\n  <div class=\"msportalfx-bgcolor-f0t2\">msportalfx-bgcolor-f0t2</div>\n  <div class=\"msportalfx-bgcolor-g0t2\">msportalfx-bgcolor-g0t2</div>\n  <div class=\"msportalfx-bgcolor-h0t2\">msportalfx-bgcolor-h0t2</div>\n  <div class=\"msportalfx-bgcolor-i0t2\">msportalfx-bgcolor-i0t2</div>\n  <div class=\"msportalfx-bgcolor-j0t2\">msportalfx-bgcolor-j0t2</div>\n  <div class=\"msportalfx-bgcolor-k0t2\">msportalfx-bgcolor-k0t2</div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using NumberFormat for Basic Number Formatting in TypeScript\nDESCRIPTION: Demonstrates basic usage of NumberFormat.create() to format numbers according to different locale conventions (German, Arabic, Indian, and Chinese). Shows how the same number appears differently based on user locale settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-localization-globalization.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Globalization from \"MsPortalFx/Globalization\";\nvar number = 123456.789;\n\n// User locale is 'de-DE'\n// German uses comma as decimal separator and period for thousands\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 123.456,789\n\n// User locale is 'ar-EG'\n// Arabic in most Arabic speaking countries/regions uses real Arabic digits\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → ١٢٣٤٥٦٫٧٨٩\n\n// User locale is 'en-IN'\n// India uses thousands/lakh/crore separators\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 1,23,456.789\n\n// User locale is 'zh-Hans-CN-u-nu-hanidec' with Chinese decimal numbering system\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(Globalization.NumberFormat.create().format(number));\n// → 一二三,四五六.七八九\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for SVG Color Palette\nDESCRIPTION: This CSS snippet defines styles for various color classes used in SVG elements. It includes background colors, text colors, and fill colors for different states such as info, success, warning, and error.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-color-palette.md#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n/* These style copied from generated Theme.Universal.css */\n.msportalfx-bg-info {\n  background-color: #0072c6;\n}\n.msportalfx-bg-success {\n  background-color: #7fba00;\n}\n.msportalfx-bg-dirty {\n  background-color: #9b4f96;\n}\n.msportalfx-bg-error {\n  background-color: #e81123;\n}\n.msportalfx-bg-warning {\n  background-color: #ff8c00;\n}\n.msportalfx-text-info {\n  color: #0072c6;\n}\n.msportalfx-text-success {\n  color: #7fba00;\n}\n.msportalfx-text-dirty {\n  color: #9b4f96;\n}\n.msportalfx-text-error {\n  color: #e81123;\n}\n.msportalfx-text-warning {\n  color: #ff8c00;\n}\n.msportalfx-br-info {\n  border-color: #0072c6;\n}\n.msportalfx-br-success {\n  border-color: #7fba00;\n}\n.msportalfx-br-dirty {\n  border-color: #9b4f96;\n}\n.msportalfx-br-error {\n  border-color: #e81123;\n}\n.msportalfx-br-warning {\n  border-color: #ff8c00;\n}\n.msportalfx-fill-info {\n  fill: #0072c6;\n}\n.msportalfx-fill-success {\n  fill: #7fba00;\n}\n.msportalfx-fill-dirty {\n  fill: #9b4f96;\n}\n.msportalfx-fill-error {\n  fill: #e81123;\n}\n.msportalfx-fill-warning {\n  fill: #ff8c00;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Extension Development Mode Example\nDESCRIPTION: Example XML configuration showing IsDevelopmentMode setting for the Monitoring extension\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <add key=\"Microsoft.Portal.Extensions.MonitoringExtension.ApplicationConfiguration.IsDevelopmentMode\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Query SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for the Query icon used in the Azure Portal interface. The icon represents two overlapping documents or database query concept.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_153\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M15.8,22c0.8,0,1.2-0.6,1.2-1.4V9.4C17,8.6,16.6,8,15.8,8H3.2C2.4,8,2,8.6,2,9.4v11.2C2,21.4,2.4,22,3.2,22H15.8z M3.9,20.1\n\tV12h11.2v8.1H3.9z\"/>\n<path d=\"M20.8,16c0.8,0,1.2-0.6,1.2-1.4V3.4C22,2.6,21.6,2,20.8,2H8.3C7.5,2,7.1,2.6,7.1,3.4v11.2c0,0.8,0.4,1.4,1.2,1.4H20.8z\n\tM9,14.1V6h11.1v8.1H9z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable External Links with Click Tracking in TypeScript\nDESCRIPTION: Implements a ClickableLink for external URLs with click counting and access method tracking. The implementation opens links in a new tab and logs whether the link was accessed via mouse click or keyboard Enter key.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-context-panes.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.onLinkClickWithClickableLink = new ClickableLink(\n    \"http://www.bing.com/\",\n    \"_new\",\n    \"\",\n    (keypress) => {\n        this.clickableLinkClickCount(this.clickableLinkClickCount() + 1);\n\n        if (keypress) {\n            console.log(\"The ClickableLink has been accessed by 'Enter' key\");\n        } else {\n            console.log(\"The ClickableLink has been accessed by left-Click\");\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Logging in Azure Portal Extension\nDESCRIPTION: This JSON configuration enables portal logging for an Azure Portal extension by setting the enablePortalLogging flag to true in the Content/Config/default.json file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"enablePortalLogging\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Health Checks with Multiple Monitoring Accounts\nDESCRIPTION: Sample JSON configuration showing how to define custom health checks from two different monitoring accounts with various dimensions and resource types. Demonstrates the structure for specifying monitoring account names, health resources, and dimension mappings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"monitoringAccountName\": \"Account_1\",\n        \"healthResources\": [\n            {\n                \"resourceType\" : \"Custom_1\",\n                \"dimensions\":\n                {\n                    \"extension_name\" : \"{PortalExtensionName}\",\n                    \"extension_version\" : \"{ExtensionVersion}\",\n                    \"dimension1\": \"{dimension1}\",\n                }\n            }\n        ]\n    },\n    {\n        \"monitoringAccountName\": \"Account_2\",\n        \"healthResources\": [\n            {\n                \"resourceType\" : \"Custom_2\",\n                \"dimensions\":\n                {\n                    \"dimension1\": \"{dimension1}\",\n                    \"dimension2\": \"{dimension2}\",\n                }\n            },\n            {\n                \"resourceType\" : \"Custom_3\",\n                \"dimensions\":\n                {\n                    \"dimension1\": \"{dimension1}\",\n                    \"dimension2\": \"{dimension2}\",\n                    \"dimension3\": \"{dimension3}\"\n                }\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Access for Extension Hosting - Azure Portal - JSON\nDESCRIPTION: Illustrates a minimal JSON configuration fragment for an extension hosting service, specifying explicit resource access requirements (e.g., Microsoft Graph). This format is post-migration and leverages the 'authorization' section, used by the Azure portal authentication pipeline. Inputs include resource names and endpoint URLs. The configuration must be placed in the extension's hosting JSON and is required for defining additional resource scopes; ARM is included by default as a special case.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-authentication-procedures.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"authorization\": {\\n        \"resourceAccess\": [\\n            {\\n                \"name\": \"microsoft.graph\",\\n                \"resource\": \"https://graph.microsoft.com/\"\\n            }\\n        ]\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Solutions.ResourceSelector Control in Azure Portal\nDESCRIPTION: Example implementation of the ResourceSelector control that allows users to select storage accounts. The control is configured with resource type filters, scope restrictions, and validation requirements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.ResourceSelector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"storageSelector\",\n    \"type\": \"Microsoft.Solutions.ResourceSelector\",\n    \"label\": \"Select storage accounts\",\n    \"resourceType\": \"Microsoft.Storage/storageAccounts\",\n    \"toolTip\": \"Select a storage account\",\n    \"scope\": {\n        \"subscriptionId\": \"[steps('basics').resourceScope.subscription.subscriptionId]\",\n        \"location\": \"[steps('basics').resourceScope.location.name]\"\n    },\n    \"constraints\": {\n        \"required\": true\n    },\n    \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating KeyVault Picker Blade using PDL in XML\nDESCRIPTION: Shows the required PDL (Portal Definition Language) changes in XML to integrate the KeyVault picker blade. The `BladeAction` tag specifies the target blade (`VaultPicker` from the `Microsoft_Azure_KeyVault` extension) and links it to the corresponding `ParameterCollector` instance (`vaultPickerCollector`) defined in the ViewModel.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <BladeAction Blade =\"{BladeReference VaultPicker, ExtensionName=Microsoft_Azure_KeyVault}\"\n                   ParameterCollector =\"vaultPickerCollector\">\n      </BladeAction>\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Action in Azure Portal\nDESCRIPTION: Creates a clickable link that opens a predefined menu item. The menu must exist in the menu definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Open a menu\",\n    \"value\": \"Tags\",\n    \"action\": {\n        \"menu\": \"tags\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Form Field with WaitUntil in C#\nDESCRIPTION: Shows how to use WebDriver.WaitUntil for validating a form field that has asynchronous validation, ensuring the test waits for the validation to complete before proceeding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar field = form.FindField<Textbox>(\"contactName\");\nfield.Value = contactName + Keys.Tab;\nwebDriver.WaitUntil(() => field.IsValid, \"The 'contactName' field did not pass validations.\");\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy to Azure Button in HTML\nDESCRIPTION: HTML code for adding a Deploy to Azure button to a web page. Requires a URI-encoded template URL to be replaced in the placeholder.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-deploytoazure.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://portal.azure.com/#create/Microsoft.Template/uri/{encodedTemplateUrl}\"><img src=\"http://azuredeploy.net/deploybutton.png\"></a>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Dashboard Policy Tile Data Properties\nDESCRIPTION: Defines the required and optional properties for configuring policy tile data in Azure Portal dashboards. The table specifies property names, requirements, and descriptions for kind, usedParameters, and fx.feature fields.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-policyTileData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|The data source of the policy tile. Enum permitting the value: \"policy\"\n|usedParameters|False|Parameter names that are applied to the tile. It can be used within the query.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Legacy PCv1/v2 PDL Form Template Tag\nDESCRIPTION: This snippet shows the `<azure:CreateStepForm .../>` tag, a specific PDL (Portal Definition Language) element used in older Azure Portal SDK versions (PCv1/v2) to define form templates. When upgrading to PCv3, this legacy tag must be replaced with a standard blade template.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parameter-collection-faq.md#2025-04-23_snippet_5\n\nLANGUAGE: pdl\nCODE:\n```\n<azure:CreateStepForm .../>\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphApiControl and DropDown in Azure Portal\nDESCRIPTION: This snippet demonstrates how to set up a GraphApiControl to query applications and use the results in a DropDown control. It includes the GraphApiControl configuration for making a GET request to the Graph API and transforming the results, as well as the associated DropDown control that uses the transformed data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.GraphApiControl.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"name\": \"callGraph\",\n        \"type\": \"Microsoft.Solutions.GraphApiControl\",\n        \"request\": {\n            \"method\": \"GET\",\n            \"path\": \"/beta/myorganization/applications?filter=startsWith(displayName, 'a')&select=displayName,appId\",\n            \"transforms\": {\n                \"list\": \"value|[*].{label:displayName, value:appId, description:appId}\"\n            }\n        }\n    },\n    {\n        \"name\": \"userName\",\n        \"type\": \"Microsoft.Common.DropDown\",\n        \"label\": \"User info\",\n        \"multiLine\": true,\n        \"constraints\": {\n            \"required\": true,\n            \"allowedValues\": \"[coalesce(steps('controls').callGraph.transformed.list, parse('[]'))]\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining IconCard Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of an IconCard object used in the GetStarted section. It specifies required and optional fields, their descriptions, and links to related documentation for certain properties.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-IconCardReference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|title|True|Title for the card\n|description|True|Description for the card\n|learnMore|False|LearnMore link shown in the card. See [here](dx-getstarted-LearnMoreLink.md) on how to define a link.\n|icon|True|Specifies the icon for the tile. See [here](dx-iconReference.md) on how to define an icon.\n|action|True|An array of items or a single item of the [type](dx-getstarted-gettingStartedActionReference.md). Specifies the action to be taken on a card click.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Debugging Output for Unnamed Network Requests in Developer Console\nDESCRIPTION: Example of the diagnostic output shown in the developer console when using the 'fixajaxnames' feature flag, which displays the stack trace to help identify the source of unnamed network requests.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSupply a logical name for the ajax call to '<URL>' for inclusion in telemetry. Stack:\n    at AjaxCaller._executeAjaxCall (https://portal.azure.com/Content/Dynamic/H2gJAaaFiXqe.js?-type=MsPortalFx1:13439:96)\n    at AjaxCaller.ajaxExtended (https://portal.azure.com/Content/Dynamic/H2gJAaaFiXqe.js?-type=MsPortalFx1:13144:37)\n    at Object.ajaxExtended (https://portal.azure.com/Content/Dynamic/H2gJAaaFiXqe.js?-type=MsPortalFx1:13758:34)\n    at ajaxExtended (https://portal.azure.com/Content/Dynamic/r6uQ-uyhV6oV.js?-type=MsPortalFxStable&bundlingKind=DefaultPartitioner&jQueryNext=false&polyfill=false&preorder=true:22000:23)\n    at makeRequestFunc (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1154:48)\n    at DefaultHttpHandler.send (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1183:20)\n    at MezzoUrlTransformingHttpHandler.send (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1089:31)\n    at HttpClient.request (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:312:45)\n    at HttpClient.post (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:383:25)\n    at makeSmallMsGraphBatchRequest (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1361:23)\n    at makeMsGraphBatchRequest (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1392:16)\n    at makeMsGraphV1BatchRequest (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/M0whDYowRfP2.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/ActiveDirectoryMenuBlade:1401:16)\n    at MassMsGraphBatchBuilder._sendBatchRequests (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/hufEi5IqO41p.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/UserProfileV2Blade:2147:73)\n    at MassMsGraphBatchBuilder.calculateIcons (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/hufEi5IqO41p.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/UserProfileV2Blade:2208:25)\n    at fetchIcons (https://afd.hosting.portal.azure.net/iam/Content/Dynamic/hufEi5IqO41p.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/UserProfileV2Blade:2309:60)\n    at https://afd.hosting.portal.azure.net/iam/Content/Dynamic/Mxf_Z5-eRrqm.js?-type=DefaultPartitioner&bundlingKind=DefaultPartitioner&root=*_generated/Blades/DeletedUsersListBladeV3:275:76\n```\n\n----------------------------------------\n\nTITLE: Implementing DataBrowse with Icons and Links\nDESCRIPTION: Advanced DataBrowse implementation showing status icons, resource links, menu actions, and URL integrations with various action types and value mappings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-DataBrowseTab.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"kind\": \"DataBrowse\",\n\t\"displayName\": \"Data browse\",\n\t\"ariaLabel\": \"testing\",\n\t\"data\": [\n\t\t{\n\t\t\t\"name\": \"resourceName1\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Succeeded\",\n\t\t\t\"menu\": \"tags\",\n\t\t\t\"urlText\": \"Azure portal\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://azure.microsoft.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName1\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName2\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Warning\",\n\t\t\t\"menu\": \"properties\",\n\t\t\t\"urlText\": \"Microsoft\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://www.microsoft.com/en-us/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName2\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"name\": \"resourceName3\",\n\t\t\t\"id\": \"/subscriptions/{subscription}/resourcegroups/{resourcegroup}/providers/{provider}/{resourceType}/{resourceName}\",\n\t\t\t\"status\": \"Failed\",\n\t\t\t\"menu\": \"locks\",\n\t\t\t\"urlText\": \"Github\",\n\t\t\t\"urlAction\": {\n\t\t\t\t\"url\": \"https://github.com/\"\n\t\t\t},\n\t\t\t\"parameters\": {\n\t\t\t\t\"title\": \"resourceName3\"\n\t\t\t}\n\t\t}\n\t],\n\t\"columns\": [\n\t\t{\n\t\t\t\"displayName\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"resourceId\": \"[$item.id]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Status\",\n\t\t\t\"name\": \"status\",\n\t\t\t\"valueMapping\": [\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Succeeded\",\n\t\t\t\t\t\"displayName\": \"Succeeded\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Warning\",\n\t\t\t\t\t\"displayName\": \"Warning\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"value\": \"Failed\",\n\t\t\t\t\t\"displayName\": \"Failed\",\n\t\t\t\t\t\"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Menu\",\n\t\t\t\"name\": \"menu\",\n\t\t\t\"action\": {\n\t\t\t\t\"menu\": \"[$item.menu]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Url\",\n\t\t\t\"name\": \"urlText\",\n\t\t\t\"action\": {\n\t\t\t\t\"url\": \"[$item.urlAction.url]\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"displayName\": \"Blade\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"action\": {\n\t\t\t\t\"blade\": {\n\t\t\t\t\t\"name\": \"A blade name\",\n\t\t\t\t\t\"extension\": \"An extension name\",\n\t\t\t\t\t\"parameters\": \"[$item.parameters]\",\n\t\t\t\t\t\"inContextPane\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Output Example for Existing Service Principal\nDESCRIPTION: Example of the output structure when an existing application is selected or 'Create new' is chosen in the ServicePrincipalSelector control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.ServicePrincipalSelector.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appId\": {\n    \"value\": \"<guid>\"\n  },\n  \"objectId\": {\n    \"value\": [\"<guid>\"]\n  },\n  \"password\": {\n    \"value\": \"<password>\"\n  },\n  \"certificateThumbprint\": {\n    \"value\": \"\"\n  },\n  \"newOrExisting\": {\n    \"value\": \"existing\"\n  },\n  \"authenticationType\": {\n    \"value\": \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Create KPIs for a Specific Extension's Blade\nDESCRIPTION: Example query that retrieves create funnel KPIs for a specific extension's blade (WebsitesExtension/AppServiceWebAppCreateV3Blade) over the last 7 days using the GetCreateFunnel function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-create.md#2025-04-23_snippet_8\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateFunnel(\n    startDate=ago(8d),\n    endDate=ago(1d),\n    match_Extention=\"WebsitesExtension\",\n    match_Blade=\"AppServiceWebAppCreateV3Blade\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Blade Pinning in PDL\nDESCRIPTION: Shows how to prevent a blade from being pinnable by setting the Pinnable attribute to False. This is useful for create flows, editable forms, and wizard steps where pinning would not add value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blades-pinning.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"SecuritySampleBlade\"\n       Pinnable=\"False\">\n  ...\n```\n\n----------------------------------------\n\nTITLE: Sample OData JSON Response in Azure Portal\nDESCRIPTION: This snippet illustrates the structure of a typical OData JSON response returned by an API call in Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-function-transforms.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"value\": [\n        {\n            \"displayName\": \"foo\",\n            \"appId\": \"{some_guid}\",\n             \"objectId\": \"{some_other_guid}\"\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inactive SVG Icon Definition\nDESCRIPTION: SVG definition for the Inactive icon used in the Azure Portal. The icon shows a gray circle with a horizontal line through it, representing an inactive or disabled state for resources or components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_140\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"-0.5 0.5 16 16\" enable-background=\"new -0.5 0.5 16 16\" xml:space=\"preserve\">\n<circle fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#7A7A7A\" cx=\"7.5\" cy=\"8.5\" r=\"8\"/>\n<rect x=\"3.5\" y=\"7.5\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#FFFFFF\" width=\"8\" height=\"2\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overview (GetStarted) Schema in Azure Portal\nDESCRIPTION: This JSON schema shows the basic structure for configuring a Resource Overview (GetStarted) view in the Azure Portal. It includes the necessary properties and structure to which a Tutorials tab can be added.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-tutorialsViewType.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authoring a Basic Blade HTML Template with Knockout Bindings (HTML)\nDESCRIPTION: This HTML template binds to the ViewModel’s observable properties using Knockout. It displays static text and a dynamic link, with link anchor text and href set via Knockout data-binding. The template is referenced from the PDL and depends on the corresponding ViewModel being set with the expected properties. Must be used in conjunction with Knockout and the Azure portal framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>This is an example template blade that shows a link.</div>\n\n<a data-bind=\"text: text, attr: { href: url }\" target=\"_blank\"></a>\n```\n\n----------------------------------------\n\nTITLE: Implementing getResourceMenuConfig Method in TypeScript\nDESCRIPTION: This TypeScript code demonstrates the implementation of the getResourceMenuConfig method in the AssetViewModel, which is used when ResourceProvidedBy is set to 'NoResource'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q({});\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Duration Options for Portal Notifications - TypeScript\nDESCRIPTION: This TypeScript const enum specifies options for how long toast notifications are displayed in Azure Portal. It provides several display duration modes: Short (5 seconds), Long (30 seconds), Sticky (until dismissed), Suppress (do not show), and Modal (require white-listing for use). Prerequisite: Proper use of enum values when configuring notifications; some options, like Modal, may require additional approval or feature flag. Expected input: ToastDuration enum value; output: numeric representing configured display mode for toast messages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-iris.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n/**\n * Notification toast duration.\n */\nexport const enum ToastDuration {\n    /**\n     * Toast stays for 5 seconds.\n     */\n    Short = 0,\n\n    /**\n     * Toast stays for 30 seconds.\n     */\n    Long = 1,\n\n    /**\n     * Toast stays till the user manually dismisses it.\n     */\n    Sticky = 2,\n\n    /**\n     * Suppress toast notification.\n     */\n    Suppress = 3,\n\n    /**\n     * Modal toast notification. By default this option won\\'t be allowed unless white listed.\n     * If you need to onboard a modal notification, please contact the Portal team.\n     */\n    Modal = 4,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Output Format of Microsoft.Common.PasswordBox\nDESCRIPTION: Shows the example output format when using the PasswordBox control. The control returns the plain-text password value as a string when successfully validated.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.PasswordBox.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"p4ssw0rd\"\n```\n\n----------------------------------------\n\nTITLE: Adding CloudBuild SVG Support\nDESCRIPTION: XML configuration to enable SVG file support in CloudBuild.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-using-v2-targets.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<AvailableItemName Include=\"Svg\">\n     <Visible>False</Visible>\n  </AvailableItemName>\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Telemetry in Azure Portal\nDESCRIPTION: This URL enables console telemetry in the Azure Portal. Users should navigate to this URL to activate the feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-live-telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://portal.azure.com/?feature.consoletelemetry=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Portal Logging in C# Extension Definition\nDESCRIPTION: Demonstrates how to enable logging to portal MDS tables by setting 'EnablePortalLogging' to true in the extension definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n [Export(typeof(ExtensionDefinition))]\n    internal class SamplesExtensionDefinition : ExtensionDefinition\n    {\n        [ImportingConstructor]\n        public SamplesExtensionDefinition(ArmConfiguration armConfiguration, ApplicationConfiguration applicationConfiguration)\n        {\n            this.EnablePortalLogging = true;\n        }\n```\n\n----------------------------------------\n\nTITLE: Localized App Services ARG Query\nDESCRIPTION: KQL query with resource string references for localization support in the Azure Portal extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_5\n\nLANGUAGE: kql\nCODE:\n```\nwhere type == 'microsoft.web/sites'\n| extend appServicePlanId = properties.serverFarmId\n| extend state = tolower(properties.state)\n| extend sku = tolower(properties.sku)\n| extend pricingTier = case(\n    sku == 'free',\n    '{{Resource pricingTier.free, Module=BrowseResources}}',\n    sku == 'shared',\n    '{{Resource pricingTier.shared, Module=BrowseResources}}',\n    sku == 'dynamic',\n    '{{Resource pricingTier.dynamic, Module=BrowseResources}}',\n    sku == 'isolated',\n    '{{Resource pricingTier.isolated, Module=BrowseResources}}',\n    sku == 'premiumv2',\n    '{{Resource pricingTier.premiumv2, Module=BrowseResources}}',\n    sku == 'premium',\n    '{{Resource pricingTier.premium, Module=BrowseResources}}',\n    '{{Resource pricingTier.standard, Module=BrowseResources}}')\n| extend status = case(\n    state == 'stopped',\n    '{{Resource status.stopped, Module=BrowseResources}}',\n    state == 'running',\n    '{{Resource status.running, Module=BrowseResources}}',\n    '{{Resource status.other, Module=BrowseResources}}')\n| extend appType = case(\n    kind contains 'botapp',\n    '{{Resource appType.botapp, Module=BrowseResources}}',\n    kind contains 'api',\n    '{{Resource appType.api, Module=BrowseResources}}',\n    kind contains 'functionapp',\n    '{{Resource appType.functionapp, Module=BrowseResources}}',\n    '{{Resource appType.webapp, Module=BrowseResources}}')\n| project name,resourceGroup,kind,location,id,type,subscriptionId,tags\n, appServicePlanId, pricingTier, status, appType\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: File\nDESCRIPTION: SVG markup for a file icon with blue outline and horizontal lines representing text content. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.File() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_29\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#59B4D9\" points=\"45,6.8 40.2,2 38.2,0 38,0 3,0 3,50 47,50 47,9 47,8.8 \"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" points=\"38,2 5,2 5,48 45,48 45,9 38,9 \"/>\n<path fill=\"#59B4D9\" d=\"M28.8,39.2c0,0.6-0.5,1.1-1.1,1.1H12.6c-0.6,0-1.1-0.5-1.1-1.1c0-0.6,0.5-1.1,1.1-1.1h15.1\n\tC28.3,38.1,28.8,38.6,28.8,39.2\"/>\n<path fill=\"#59B4D9\" d=\"M38.9,24.2c0,0.6-0.5,1.1-1.1,1.1H12.6c-0.6,0-1.1-0.5-1.1-1.1c0-0.6,0.5-1.1,1.1-1.1h25.1\n\tC38.4,23.1,38.9,23.6,38.9,24.2\"/>\n<path fill=\"#59B4D9\" d=\"M38.9,31.7c0,0.6-0.5,1.1-1.1,1.1H12.6c-0.6,0-1.1-0.5-1.1-1.1c0-0.6,0.5-1.1,1.1-1.1h25.1\n\tC38.4,30.6,38.9,31.1,38.9,31.7\"/>\n<path fill=\"#59B4D9\" d=\"M38.9,16.7c0,0.6-0.5,1.1-1.1,1.1H12.6c-0.6,0-1.1-0.5-1.1-1.1c0-0.6,0.5-1.1,1.1-1.1h25.1\n\tC38.4,15.6,38.9,16.1,38.9,16.7\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Host in Azure Portal Hosting Service (JSON)\nDESCRIPTION: Example configuration entry added to the 'hostExtensionConfigs' section within environment-specific JSON files (e.g., config.dogfood.json, config.prod.json) in the AzureUX-PortalHostingSvc repository. This entry registers the extension's route prefix with the hosting service. Replace 'Your_Extension_Route_Prefix' with the actual prefix and configure its specific settings within the nested object.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-onboarding-old.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"hostExtensionConfigs\": {\n  // ... other extension configurations ...\n  \"Your_Extension_Route_Prefix\": {\n    // ... specific configuration for your extension ...\n  }\n  // ... other extension configurations ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON String Literals in JSON File - JSON\nDESCRIPTION: This snippet demonstrates how to represent a simple string value in JSON format. There are no external dependencies. The key (if provided in context) should be interpreted as a JSON property, and the value here is a string. Input is a string value, and output is a standard JSON string literal. The format is fully compliant with JSON syntax requirements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.OptionsGroup-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"two\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Values in Azure Portal Forms\nDESCRIPTION: Shows how to set a value in a dropdown by selecting from the fetched values array, specifically for location dropdowns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nlocationDropDown.value(locationDropDown.fetchedValues().first((value)=> value.name === \"centralus\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing EditScopeCache for Existing Data in TypeScript\nDESCRIPTION: Creates an `MsPortalFx.Data.EditScopeCache` instance typed for `DataModels.WebsiteModel` with a number as the identifier. The `supplyExistingData` callback defines how to fetch existing data based on a `websiteId`. It uses a jQuery Deferred object (`$.Deferred`) to handle the asynchronous retrieval of the website data, resolving the deferred object once the data is available or rejecting it if not found.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.editScopeCache = MsPortalFx.Data.EditScopeCache.create<DataModels.WebsiteModel, number>({\n    entityTypeName: DataModels.WebsiteModelType,\n    supplyExistingData: (websiteId: number) => {\n        var deferred = $.Deferred<JQueryDeferredV<DataModels.WebsiteModel>>();\n\n        this.initializationPromise.then(() => {\n            var website = this.getWebsite(websiteId);\n            if (website) {\n                deferred.resolve(website);\n            } else {\n                deferred.reject();\n            }\n        });\n        return deferred;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: TextBox Empty Default Value Output\nDESCRIPTION: Sample JSON output from a TextBox control when the default value is empty. This represents the initial state before user input.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Items with Child Lifetime Management in TypeScript\nDESCRIPTION: Demonstrates mapping data items to grid items while creating associated buttons using mapInto(). Shows basic implementation but lacks proper cleanup of disposed buttons from the section.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-lifetime.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet gridItems = this._view.items.mapInto(container, (itemLifetime, item) => {\n    let button = new Button.ViewModel(itemLifetime, { label: pureComputed(() => \"Button for \" + item.name())});\n    this.section.children.push(button);\n    return {\n        name: item.name,\n        status: ko.pureComputed(() => item.running() ? \"Running\" : \"Stop\")\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Output Format After Selecting Different Disk Size in BladeInvokeControl\nDESCRIPTION: Example of the transformed data structure after a user selects a different disk size (16GiB). Shows the complete configuration including performance parameters that are returned from the blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.BladeInvokeControl.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sku\": \"Premium_LRS\",\n    \"diskSizeGB\": 16,\n    \"iops\": 120,\n    \"throughput\": 25,\n    \"maxValueOfMaxShares\": 3,\n    \"ultraReadOnlyValues\": {\n        \"minRoIops\": 10,\n        \"minRoThroughput\": 10,\n        \"maxRoIops\": 4000,\n        \"maxRoThroughput\": 2000\n    },\n    \"defaultPerformanceTier\": {\n        \"minSize\": 8,\n        \"maxSize\": 16,\n        \"tier\": \"P3\",\n        \"maxIops\": 120,\n        \"maxThroughput\": 25,\n        \"maxValueOfMaxShares\": 3,\n        \"maxBurstIops\": 3500,\n        \"maxBurstThroughput\": 170\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Info SVG Icon Definition\nDESCRIPTION: SVG definition for the Info icon used in the Azure Portal. The icon shows a blue circular information symbol with the letter 'i' in the center, used to represent informational messages or help content.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_141\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M25,2.753C12.713,2.753,2.753,12.713,2.753,25S12.713,47.246,25,47.246S47.247,37.287,47.247,25\n\tC47.247,12.714,37.286,2.753,25,2.753z M23.457,10.666c0.652-0.659,1.441-0.989,2.369-0.989c0.94,0,1.737,0.33,2.39,0.989\n\tc0.651,0.659,0.976,1.451,0.976,2.378s-0.329,1.717-0.987,2.369c-0.659,0.651-1.453,0.977-2.379,0.977\n\tc-0.928,0-1.717-0.326-2.369-0.977c-0.652-0.652-0.978-1.442-0.978-2.369S22.805,11.325,23.457,10.666z M31.322,39.831H20.35v-0.782\n\tc0.898-0.029,1.564-0.29,1.999-0.782c0.289-0.333,0.434-1.217,0.434-2.651V23.754c0-1.433-0.166-2.349-0.498-2.748\n\tc-0.334-0.398-0.979-0.627-1.935-0.684v-0.804h8.517v16.098c0,1.434,0.166,2.35,0.499,2.749c0.333,0.398,0.985,0.626,1.956,0.684\n\tV39.831z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom CSS in PDL Files for Azure Portal Extensions\nDESCRIPTION: Shows how to reference a custom CSS file within a PDL (Portal Definition Language) file. The StyleSheet element links to the CSS file using the Css Source attribute.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-custom-css-file.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Definition xmlns=\"http://schemas.microsoft.com/aux/2013/pdl\" Area=\"Parts\">\n  <!--\n    The following sample demonstrates the use of custom parts. Custom parts\n    supply HTML templates and can be styled with custom style sheets.\n  -->\n  <StyleSheet Source=\"{Css Source='Styles\\\\ExampleStyles.css'}\" />\n  ...\n</Definition>\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated Columns in Browse Blade using C#\nDESCRIPTION: This snippet shows how to verify that the columns in the browse blade have been updated correctly after adding a new column. It uses a similar wait function as before to check for the presence and order of the updated set of columns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-openbrowse.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbrowseGridColumns.Add(\"Status\");\n\n// You probably want to wrap this in a function for re-use.  This is inlined for documenation purposes only\nwebDriver.WaitUntil(\n        () =>\n        {\n            var headers = rgBrowseGrid.Headers.ToList();\n            if (headers.Count != browseGridColumns.Count)\n            {\n                return false;\n            }\n            for (var index = 0; index < browseGridColumns.Count; index++)\n            {\n                if (!headers[index].Text.Equals(browseGridColumns[index], StringComparison.OrdinalIgnoreCase))\n                {\n                    return false;\n                }\n            }\n            return true;\n        },\n        \"Columns never finished loading or they were incorrect\");\n```\n\n----------------------------------------\n\nTITLE: Asset Type Visibility with Resource Kinds\nDESCRIPTION: Extended configuration for controlling asset visibility including specific resource kinds. Shows how to hide/show instances of particular resource kinds while maintaining asset type visibility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/declarative-assets.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"assettypeoptions\": {\n      \"YOUR_ASSET_NAME\": { \"options\": \"HideAssetType\" },\n      \"YOUR_OTHER_ASSET_NAME\": { \"options\": \"HideAssetType,HideInstances\" },\n      \"YOUR_THIRD_ASSET_NAME\": { \"options\": \"\" },\n      \"YOUR_ASSET_WITH_KINDS_NAME\": { \"kinds\": { \"KIND_NAME\": { \"options\": \"HideInstances\" } } }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced TextBox with Multiple Validations\nDESCRIPTION: Example of a TextBox with multiple validation rules including regex pattern matching and a custom validation expression. This configuration enforces alphanumeric input with specific length requirements and ensures values start with 'contoso'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TextBox.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"nameInstance\",\n  \"type\": \"Microsoft.Common.TextBox\",\n  \"label\": \"Name\",\n  \"defaultValue\": \"contoso123\",\n  \"toolTip\": \"Use only allowed characters\",\n  \"placeholder\": \"\",\n  \"multiLine\": false,\n  \"constraints\": {\n    \"required\": true,\n    \"validations\": [\n      {\n        \"regex\": \"^[a-z0-9A-Z]{1,30}$\",\n        \"message\": \"Only alphanumeric characters are allowed, and the value must be 1-30 characters long.\"\n      },\n      {\n        \"isValid\": \"[startsWith(steps('resourceConfig').nameInstance, 'contoso')]\",\n        \"message\": \"Must start with 'contoso'.\"\n      }\n    ]\n  },\n  \"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Globe Success SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for a Globe Success icon, using paths and shapes with specified colors and opacity. Includes a gray base, green globe, and white checkmark indicator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_37\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M24.159,40.351h-3.951c0.957,5.788-2.336,6.618-7.968,6.618V50h7.163h5.229h6.759v-3.031\n\tC25.76,46.969,23.201,46.142,24.159,40.351\"/>\n<rect x=\"12.242\" y=\"46.968\" fill=\"#A0A1A2\" width=\"19.151\" height=\"3.032\"/>\n<path fill=\"#7FBA00\" d=\"M35.12,5.48c-3.17-3.17-7.195-4.963-11.332-5.383C18.386-0.452,12.791,1.341,8.652,5.48\n\tC4.513,9.619,2.72,15.214,3.268,20.616c0.42,4.138,2.213,8.162,5.383,11.332c4.898,4.898,11.833,6.508,18.077,4.842\n\tc3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117C40.37,13.34,38.551,8.91,35.12,5.48z\"/>\n<path fill=\"#A0A1A2\" d=\"M21.886,43.656c-6.662,0-12.926-2.594-17.637-7.305c-0.68-0.68-0.68-1.781,0-2.461\n\tc0.68-0.679,1.781-0.68,2.461,0c4.054,4.054,9.443,6.286,15.176,6.286c5.733,0,11.122-2.232,15.176-6.286\n\tc4.054-4.054,6.286-9.443,6.286-15.176S41.116,7.592,37.062,3.538c-0.68-0.68-0.68-1.781,0-2.461c0.68-0.68,1.782-0.679,2.461,0\n\tc4.711,4.711,7.305,10.974,7.305,17.637s-2.594,12.926-7.305,17.637S28.548,43.656,21.886,43.656z\"/>\n<polygon fill=\"#FFFFFF\" points=\"11.175,18.713 11.175,18.713 13.85,16.034 13.85,16.034 13.85,16.034 19.208,21.392 29.925,10.676 \n\t29.925,10.676 29.925,10.676 32.6,13.355 32.6,13.355 32.6,13.355 19.208,26.751 \"/>\n<path opacity=\"0.2\" fill=\"#1E1E1E\" d=\"M20.401,34.911c-2.025,0.54-4.105,0.818-6.187,0.842c3.95,1.775,8.379,2.142,12.515,1.038\n\tc3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117c-0.111-2.361-0.679-4.7-1.679-6.891\n\tc-0.045,6.339-2.454,12.665-7.29,17.501C28.391,31.663,24.507,33.815,20.401,34.911z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Mapping for Property Items in Azure Portal\nDESCRIPTION: This snippet shows how to use value mapping to localize display names and assign icons based on property values. It demonstrates the JSON structure for defining multiple display options for a single property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Provisioning State\",\n    \"value\": \"[resources().properties.provisioningState]\",\n    \"description\": \"This is provisioning state.\",\n    \"valueMapping\": [\n      {\n        \"value\": \"Succeeded\",\n        \"displayName\": \"Succeeded\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Success\"\n      },\n      {\n        \"value\": \"Warning\",\n        \"displayName\": \"Warning\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Warning\"\n      },\n      {\n        \"value\": \"Failed\",\n        \"displayName\": \"Failed\",\n        \"icon\": \"MsPortalFx.Base.Images.StatusBadge.Outline.Failed\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Blade for Cloud Shell Commands in Azure Portal (JSON)\nDESCRIPTION: This JSON snippet defines a Form blade configuration for executing Cloud Shell commands. It specifies the shell environment, command parameters, and user input elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-cloudShell.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../../../Definitions/dx.schema.json\",\n    \"view\": {\n        \"kind\": \"Form\",\n        \"properties\": {\n            \"primaryButtonLabel\": \"Run Shell Commands\",\n            \"steps\": [\n                {\n                    \"name\": \"parameters\",\n                    \"label\": \"Cloud Shell parameters\",\n                    \"elements\": [\n                        {\n                            \"name\": \"name\",\n                            \"type\": \"Microsoft.Common.TextBox\",\n                            \"label\": \"Resource name\",\n                            \"defaultValue\": \"\",\n                            \"visible\": true\n                        }\n                    ]\n                }\n            ],\n            \"cloudShell\": {\n                \"kind\": \"bash\",\n                \"commands\": [\n                    {\n                        \"name\": \"az resource list\",\n                        \"parameters\": [\n                            {\n                                \"name\": \"--name\",\n                                \"value\": \"[steps('parameters').name]\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft.Common.Slider in Azure Portal Templates (JSON)\nDESCRIPTION: Example of how to specify a Microsoft.Common.Slider control in JSON with customized memory size selection. This snippet demonstrates setting minimum/maximum values, labels, tooltips, and other configuration options for the slider component.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Slider.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"memorySize\",\n\"type\": \"Microsoft.Common.Slider\",\n\"min\": 1,\n\"max\": 64,\n\"label\": \"Memory\",\n\"subLabel\": \"MB\",\n\"defaultValue\": 26,\n\"showStepMarkers\": false,\n\"toolTip\": \"Pick the size in MB\",\n\"constraints\": {\n  \"required\": false\n},\n\"visible\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenBladeCommandWithContent in Azure Portal JSON\nDESCRIPTION: This snippet demonstrates how to configure an OpenBladeCommand with content within a MenuCommand. It shows the structure and properties required for setting up a blade opening command with additional content display.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeCommands-viewOpenBladeCommandWithContent.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Create Regression Details in Kusto\nDESCRIPTION: This query retrieves detailed information about failed resource creation operations for a specific extension and blade. It provides comprehensive error details over a 24-hour period ending at the specified time.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\nGetCreateRegressionDetails(now(),\"websitesextension\",\"webhostingplancreateblade\")\n```\n\n----------------------------------------\n\nTITLE: Disposing WebDriver Instance in C#\nDESCRIPTION: This C# snippet demonstrates the necessary cleanup step of disposing the WebDriver instance after test execution. Calling `webDriver.Dispose()` releases the resources associated with the browser automation session.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Clean up the webdriver after\nwebDriver.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Importing Fx/Controls modules for TextBox implementation\nDESCRIPTION: Import statements for the Fx/Controls TextBox and Validations modules. These imports are required to use the editscopeless TextBox control in an EditScope-backed form.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TextBox from \"Fx/Controls/TextBox\";\nimport * as Validations from \"Fx/Controls/Validations\"\n```\n\n----------------------------------------\n\nTITLE: Azure Portal WebJobs SVG Icon\nDESCRIPTION: SVG icon representing Azure WebJobs functionality with purple accents and cloud integration\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_91\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M33.143,38.974c-3.735,2.856-8.137,4.248-12.507,4.248c-6.201,0-12.333-2.784-16.385-8.084c-6.923-9.039-5.214-21.967,3.842-28.893C11.827,3.371,16.233,2,20.598,2c6.201,0,12.334,2.784,16.385,8.089C43.907,19.125,42.181,32.055,33.143,38.974\"/>\n<!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Naive Implementation of Map Projection\nDESCRIPTION: A buggy implementation of the map() function that creates new observables for each property, causing the projection to rebuild whenever source values change.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-data.md#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst projectedItems = this._view.items.map<RobotDetails>(this._currentProjectionLifetime, (_ /* itemLifetime */, robot) => {\n    const projectionId = this._uuid++;\n    this._logMapFunctionRunning(projectionId, robot);\n    return <RobotDetails>{\n        name: ko.observable(robot.name()),\n        status: ko.observable(robot.status()),\n        modelAndMfg: ko.observable(\"{0}:{1}\".format(robot.model(), robot.manufacturer())),\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with CSS Selector in Grid - C#\nDESCRIPTION: This C# snippet demonstrates locating elements in a grid using a CSS selector with the By.CssSelector method. It highlights a best practice in automated UI testing for better performance and compatibility compared to XPath. Dependencies: grid control, Selenium By class. Input: CSS selector string. Output: found elements collection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ngrid.FindElements(By.CssSelector(\"[aria-selected=true]\"))\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Error Counts in Azure Portal\nDESCRIPTION: Kusto query to retrieve error counts for a specific environment between given timestamps, grouped by hourly intervals. Includes filtering by client version.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nGetExtensionErrorCounts(datetime(\"2016-07-25 00:00:00\"), datetime(\"2016-07-26 00:00:00\"), \"Compute\", \"Error\", \"portal.azure.com\", 1h)\n| where clientVersion == \"4.12.102.0 (82a67ee.160722-1641)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Per Extension Feedback in Azure Data Explorer\nDESCRIPTION: This query retrieves user feedback for a specific extension in Azure Portal. It filters for generic feedback actions and extracts relevant information such as extension name, view, emotion, and comments.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry.md#2025-04-23_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nlet experienceFilter = \"Extension/HubsExtension/\";\nClientTelemetry\n| where userTypeHint == \"\"\n| where action == \"GenericFeedback\"\n| where actionModifier == \"mark\"\n| where data contains experienceFilter\n| extend data = parsejson(['data'])\n| extend extension = data.currentBladeInfo.extensionName\n| extend view = data.currentBladeInfo.bladeName\n| where view contains experienceFilter\n| extend comments = data.comments\n| extend emotion = data.emotion\n| extend env = tostring(split(requestUri, '/', 2)[0])\n| extend region = tostring(split(serverId, '-',2)[0])\n| project PreciseTimeStamp, userId, sessionId, region, env, extension, view, emotion, comments\n| sort by PreciseTimeStamp desc\n```\n\n----------------------------------------\n\nTITLE: SVG Network Interface Card Icon Implementation in Azure Portal\nDESCRIPTION: XML-based SVG graphic definition for a network interface card icon used in the Azure Portal. The design portrays a card-like device with connection ports and indicators, using green and yellow colors to represent network connectivity.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_62\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"3\" fill=\"#7FBA00\" width=\"40.205\" height=\"50\"/>\n<rect x=\"19.19\" y=\"4.915\" width=\"18.921\" height=\"11.888\"/>\n<rect x=\"43.205\" y=\"3.846\" fill=\"#FCD116\" width=\"4.501\" height=\"8.577\"/>\n<rect x=\"43.205\" y=\"16.084\" fill=\"#FCD116\" width=\"4.501\" height=\"22.825\"/>\n<rect x=\"20.809\" y=\"31.718\" width=\"3.243\" height=\"13.391\"/>\n<rect x=\"15.565\" y=\"31.718\" width=\"3.243\" height=\"13.391\"/>\n<polygon opacity=\"0.2\" points=\"17.636,37.365 11.492,37.365 11.492,11.908 19.734,11.908 19.734,14.006 13.59,14.006 13.59,35.267 \n\t17.636,35.267 \"/>\n<polygon opacity=\"0.2\" points=\"15.538,42.61 7.296,42.61 7.296,7.713 20.783,7.713 20.783,9.811 9.394,9.811 9.394,40.512 \n\t15.538,40.512 \"/>\n<polygon opacity=\"0.2\" points=\"33.12,40.144 27.058,40.144 27.058,22.834 31.798,22.834 31.798,15.035 33.896,15.035 33.896,24.932 \n\t29.156,24.932 29.156,38.046 33.12,38.046 \"/>\n<path fill=\"#E5E5E5\" d=\"M23.003,24.11c0,1.343-1.089,2.431-2.431,2.431l0,0c-1.343,0-2.431-1.089-2.431-2.431l0,0\n\tc0-1.343,1.089-2.431,2.431-2.431l0,0C21.915,21.678,23.003,22.767,23.003,24.11L23.003,24.11z\"/>\n<rect x=\"32.846\" y=\"32.343\" fill=\"#E5E5E5\" width=\"4.322\" height=\"12.365\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing NoResource Menu Configuration\nDESCRIPTION: Complete implementation of getResourceMenuConfig using the NoResource option, including overview group and item configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q(\n        <MsPortalFx.Assets.ResourceMenuConfig>{\n            defaultItemId: \"overview\",\n            options: {\n                enableSupportTroubleshootV2: true,\n                enableSupportResourceHealth: true\n            },\n            groups: <FxMenuBlade.MenuGroup[]>[\n                {\n                    id: \"overview_group\",\n                    displayText: ClientResources.ResourceMenuGroup.overview,\n                    items: [\n                        {\n                            id: \"overview\",\n                            displayText: ClientResources.ResourceMenu.overview,\n                            enabled: ko.observable(true),\n                            keywords: \"overview\",\n                            icon: Images.MyResourceIcon,\n                            supplyBladeReference: () => {\n                                return new BladeReferences.MyResourceOverviewBlade({ id: resourceId });\n                            }\n                        }\n                    ]\n                }\n            ]\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Units and Decimal Precision for Property Item Value (JSON)\nDESCRIPTION: This snippet sets the 'sourceUnits' property to 'Gigabytes' and specifies 'maximumFractionDigits' for decimal precision. Used for displaying numerical values (like disk size) with appropriate units and precision, it references a supported unit enum and provides a way to control number formatting in the property view.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-propertiesViewType.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"displayName\\\": \\\"Disk Size\\\",\\n    \\\"value\\\": \\\"[resources().properties.diskSize]\\\",\\n    \\\"sourceUnits\\\": \\\"Gigabytes\\\",\\n    \\\"maximumFractionDigits\\\": 2\\n}\n```\n\n----------------------------------------\n\nTITLE: Binding CustomPart Properties to ActionBar in PDL\nDESCRIPTION: This snippet illustrates how to bind a CustomPart property to an ActionBar property. It shows the structure for a Lens containing a CustomPart and an ActionBar, demonstrating property binding between components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-binding-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Lens ...>\n  <CustomPart ...>\n    <CustomPart.Properties>\n       <Property Name=\"resetTriggered\" \n \tSource=\"{ActionBarProperty resetTriggered}\" />\n    </CustomPart.Properties>\n  </CustomPart>\n</Lens>\n<ActionBar Name=\"FilterFormActionBar\"\n       ActionBarKind=\"Generic\"\n       ViewModel=\"FilterFormActionBarViewModel\">\n</ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Using BaseElement API for Element Search\nDESCRIPTION: Demonstrates using the BaseElement API extension method for waiting and finding elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = blade.WaitForAndFindElement<Part>(p => p.PartTitle.Equals(\"TheTitle\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter for TagsByResource in Azure Resource Manager Template\nDESCRIPTION: Example of how to define a parameter in an Azure Resource Manager template to receive the TagsByResource control's output. This demonstrates the parameter declaration pattern.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.TagsByResource.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"parameters\": {\n  \"tagsByResource\": { \"type\": \"object\", \"defaultValue\": {} }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Publish Icon in Azure Portal\nDESCRIPTION: An SVG icon for the Publish functionality with a blue (#59B4D9) circular design. This SVG is incomplete in the provided content, as it appears to be cut off at the end.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_152\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M45.636,25.068c0-0.326-0.007-0.65-0.021-0.973h-4.288c0.017,0.322,0.029,0.646,0.029,0.973\n\tc0,0.458-0.021,0.912-0.054,1.362c-0.283,3.821-1.744,7.319-4.023,10.131c-1.325-0.697-2.826-1.296-4.46-1.78\n\tc0.739-2.513,1.203-5.342,1.311-8.351c0.016-0.451,0.027-0.904,0.027-1.362c0-0.326-0.005-0.65-0.013-0.973\n\tc-0.077-3.011-0.507-5.85-1.217-8.381c1.682-0.504,3.22-1.132,4.57-1.863c1.364-0.739,2.534-1.582,3.471-2.505\n\tc-0.477-0.621-0.987-1.215-1.524-1.783C35.328,5.219,29.511,2.5,23.068,2.5S10.808,5.219,6.692,9.563\n\tc-0.538,0.568-1.047,1.162-1.524,1.783C2.244,15.152,0.5,19.909,0.5,25.068c0,5.261,1.814,10.103,4.843,13.945\n\n\n```\n\n----------------------------------------\n\nTITLE: Reading Boolean Feature Flags in TypeScript\nDESCRIPTION: Demonstrates how to detect whether a feature flag is enabled using the MsPortalFx.isFeatureEnabled API. This example checks if 'someflag' is set to true via query string parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (MsPortalFx.isFeatureEnabled(\"someflag\"))\n{\n    // turn on new feature\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Monitor Metrics in JSON for Azure Portal\nDESCRIPTION: This JSON structure defines a metric for use in the Azure Portal. It specifies the metric ID, aggregation type, and resource metadata. The values for 'id', 'aggregationType', and 'namespace' must correspond to the available options in Azure Monitor's Metric, Aggregation, and Metric Namespace respectively.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-MonitoringTab-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"Percentage CPU\",\n    \"aggregationType\": \"Sum\",\n    \"resourceMetadata\": {\n        \"id\": \"[parameters('id')]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alerts for National Clouds in JSON\nDESCRIPTION: Illustrates how to specify national cloud environments (e.g., `portal.azure.cn`, `portal.azure.us`) within the `environments` array of the main alert configuration JSON. This allows defining specific or shared alert criteria for different national cloud portals alongside the public Azure portal or development environments like `ms.portal.azure.com`.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-create.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   ...\n    \"environments\": [\n        {\n            \"environment\": [\"portal.azure.com\", \"ms.portal.azure.com\", \"portal.azure.cn\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.cn\",\"portal.azure.us\"],\n            ...\n        },\n        {\n            \"environment\": [\"portal.azure.us\"],\n            ...\n        }\n        ...\n    ]\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic SQL Database Server SVG Icon in Azure Portal\nDESCRIPTION: SVG definition for a SQL Database Server icon used in the Azure Portal. The icon displays a blue cylindrical database with green top, representing the Azure SQL Database Server service.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_78\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-0.5 0.5 50 50\" enable-background=\"new -0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M-0.5,7.288v36.111c0,3.749,8.392,6.789,18.743,6.789v-42.9C18.243,7.288-0.5,7.288-0.5,7.288z\"/>\n<path fill=\"#0072C6\" d=\"M17.986,50.187h0.257c10.351,0,18.743-3.038,18.743-6.788V7.288h-19V50.187z\"/>\n<path opacity=\"0.15\" fill=\"#FFFFFF\" d=\"M17.986,50.187h0.257c10.351,0,18.743-3.038,18.743-6.788V7.288h-19V50.187z\"/>\n<path fill=\"#FFFFFF\" d=\"M36.986,7.288c0,3.749-8.392,6.788-18.743,6.788S-0.5,11.037-0.5,7.288S7.892,0.5,18.243,0.5\n\tS36.986,3.539,36.986,7.288\"/>\n<path fill=\"#7FBA00\" d=\"M33.154,6.897c0,2.475-6.676,4.479-14.911,4.479S3.331,9.372,3.331,6.897c0-2.474,6.677-4.479,14.912-4.479\n\tS33.154,4.423,33.154,6.897\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Blade in TypeScript for Azure Portal\nDESCRIPTION: This code snippet demonstrates how to define a frame blade in TypeScript for the Azure Portal. It shows the structure of a frame blade, including its name, content, and various properties like title and subtitle.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frame.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreturn <FrameBlade\\n    name=\"MyFrameBlade\"\\n    content={{\\n        kind: \"PdFrameBladeContent\",\\n        parameters: [\\n            {\\n                name: \"subscriptionId\",\\n                value: \"{subscriptionId}\"\\n            }\\n        ],\\n        uri: \"https://main.oss.sonar.azure.com/subscriptions/{subscriptionId}/overview\"\\n    }}\\n    title={t(\"My Frame Blade\")}\\n    subtitle={t(\"Frame blade subtitle\")}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Resource Menu Configuration in TypeScript\nDESCRIPTION: This method retrieves the resource menu configuration for a given resource ID. It checks if the resource type matches the expected entity resource type and returns the printer menu configuration if it does.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic getResourceMenuConfig(resourceId: string): Promise<FxAssets.ResourceMenuConfig> {\n    const armId = ArmId.parse(resourceId, true);\n    executeInDevelopmentModeOnly(() => {\n        const resourceType = armId.resourceType.toLowerCase();\n        if (resourceType !== entityResourceType) {\n            log.error(\"*** mismatched resource type: <{0}>, expected: <{1}>\".format(resourceType, entityResourceType));\n        }\n    });\n    if (armId.kind === ArmId.Kind.Resource &&\n        armId.resourceType.toLowerCase() === entityResourceType) {\n        return getPrinterMenu(resourceId, this._dataContext);\n    }\n    return Promise.resolve(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ArmCommand with Async Operation in Azure Views\nDESCRIPTION: Example of configuring an ArmCommand with async operation polling in Azure Portal views. Demonstrates how to set up a POST request with custom polling header for long-running operations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewDeleteCommand-properties-definition-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definition\":{\n    \"httpMethodType\": \"POST\",\n    \"uri\": \"{resourceid}/myaction?api-version=2018-09-01-preview\",\n    \"asyncOperation\": {\n      \"pollingHeaderOverride\": \"Azure-AsyncOperation\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Excluded Columns Enum for Azure Portal Asset Browsing\nDESCRIPTION: Enumeration of column identifiers that can be excluded from asset type browse views. Includes standard Azure resource properties like resource group, location, subscription ID, and tags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetTypeBrowseExcludeColumns.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- FxColumns.ResourceGroup\n- FxColumns.Location\n- FxColumns.SubscriptionId\n- FxColumns.Tags\n```\n\n----------------------------------------\n\nTITLE: Configuring Message-based Client Error Alerts in Azure Portal\nDESCRIPTION: Configuration structure for message-based error alerts that trigger on specific error message patterns. Includes settings for null reference checks, message patterns to match, user count thresholds, and exclusion conditions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-telemetry-alerting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"type\": \"message\",\n        \"criteria\": [\n            {\n                \"severity\": 4,\n                \"enabled\": true,\n                \"checkAllNullRefs\": true,\n                \"message1\": \"Cannot read property\",\n                \"message2\": \"of null\",\n                \"minAffectedUserCount\": 1,\n                \"exclusion\": {\n                    \"type\": \"or\",\n                    \"message1\":\"eastus2stage\",\n                    \"message2\":\"eastus2(stage)\"\n                },\n                \"safeDeploymentStage\": [\"3\"],\n                \"datacenterCode\": [\"AM\"]\n            },\n            ...\n        ]\n    },\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Blade Parameters Definition and Usage\nDESCRIPTION: Demonstrates the pattern for defining and using strongly-typed blade parameters in Azure Portal UI extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-architecture.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebsiteDetailsBladeParameters {\n    resourceId: string;\n}\n\npublic onClick() {\n    const { container, parameters } = this.context;\n    const bladeParameters: WebsiteDetailsBladeParameters = {\n          resourceId: parameters.resourceId\n    };\n\n    container.openBlade(BladeReferences.forBlade(\"WebsiteDetailsBlade\").createReference({ parameters: bladeParameters }));\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for ArrowUp Icon\nDESCRIPTION: Upward-pointing arrow icon for navigation or scrolling to top in Azure Portal. Simple polygon-based arrow shape pointing upward.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_104\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<polygon points=\"10.2,8.4 5,13.1 5,9.3 12,3 19,9.3 19,13.1 13.8,8.4 13.8,21 10.2,21 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Finding Single Part by Title Using Built-in Method - C#\nDESCRIPTION: This C# snippet simplifies finding a StartBoard part by title using the built-in FindSinglePartByTitle helper, which encapsulates polling (WaitUntil) internally. This reduces code complexity and increases maintainability. Dependencies: Portal Test Framework, StartBoard object. Input: title string. Output: the matching part or raises if not found.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-bp-csharp-test.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = portal.StartBoard.FindSinglePartByTitle(\"TheTitle\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Indicator with Opaque Shield\nDESCRIPTION: This JavaScript code demonstrates how to display a loading indicator with an opaque shield while the blade is initializing. It uses a promise to control the shield's visibility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor(container: FxCompositionBlade.Container, initialState: any, dataContext: BladesArea.DataContext) {\n    super();\n\n    var operation = Q.defer<any>();\n\n    // display the shield while the operation promise is not resolved\n    container.operations.add(operation.promise, { blockUi: true, shieldType: MsPortalFx.ViewModels.ShieldType.Opaque });\n\n    // wait for 3 seconds and resolve the promise (which will remove the shield)\n    window.setTimeout(() => { operation.resolve(); }, 3000);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Alert Types to Correlation IDs for Azure Portal Alerting\nDESCRIPTION: A table mapping specific alert types to their corresponding correlation IDs for use in ICM correlation rules for Azure Portal alerting.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-alerting-performance.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Alert | Correlation ID |\n| ----- | -------------- |\n| Performance - Extension | ExtensionLoadPerformance |\n| Performance - Blade | BladeLoadPerformance |\n| Performance - Part | PartLoadPerformance|\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Microsoft.KeyVault.KeyVaultCertificateSelector in JSON\nDESCRIPTION: This snippet shows a sample output of the Microsoft.KeyVault.KeyVaultCertificateSelector control. It includes details about the selected certificate such as the key vault name, key vault ID, certificate name, URL, and thumbprint.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.KeyVault.KeyVaultCertificateSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keyVaultName\": \"azuretestkeyvault01\",\n    \"keyVaultId\": \"/subscriptions/<subscriptionid_redacted>/resourceGroups/keyvaultrg/providers/Microsoft.KeyVault/vaults/azuretestkeyvault01\",\n    \"certificateName\": \"certificate1\",\n    \"certificateUrl\": \"https://azuretestkeyvault01.vault.azure.net/secrets/certificate1/0a52462b834f4fd8938dff5f05d18826\",\n    \"certificateThumbprint\": \"D3D46A19A8DE0579CD3D8AF8CB5BDF503479E69D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic Search Grid SVG Icon in Azure Portal\nDESCRIPTION: SVG definition for a polychromatic search grid icon used in the Azure Portal. The icon features green rectangles in a grid pattern and a magnifying glass design with search functionality representation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_75\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"16.261\" y=\"1\" fill=\"#B8D432\" width=\"9.802\" height=\"9.695\"/>\n<rect x=\"27.702\" y=\"1\" fill=\"#B8D432\" width=\"9.831\" height=\"9.695\"/>\n<rect x=\"39.199\" y=\"1\" fill=\"#B8D432\" width=\"9.801\" height=\"9.695\"/>\n<rect x=\"39.199\" y=\"12.469\" fill=\"#B8D432\" width=\"9.801\" height=\"9.695\"/>\n<rect x=\"39.199\" y=\"23.938\" fill=\"#B8D432\" width=\"9.801\" height=\"9.831\"/>\n<path fill=\"#3E3E3E\" d=\"M4.121,48.367c-0.961,0-1.865-0.373-2.546-1.048c-0.686-0.679-1.068-1.587-1.072-2.553\n\tc-0.005-0.968,0.367-1.877,1.048-2.564l8.747-8.83c-1.479-2.758-1.888-5.921-1.145-8.952c1.399-5.652,6.431-9.599,12.236-9.599\n\tc1.01,0,2.026,0.124,3.022,0.368c3.269,0.805,6.029,2.836,7.771,5.718c1.742,2.882,2.258,6.272,1.45,9.541\n\tc-1.389,5.646-6.421,9.589-12.235,9.589c-1.017,0-2.031-0.124-3.018-0.367c-1.032-0.254-2.033-0.643-2.984-1.16l-8.701,8.784\n\tC6.007,47.987,5.094,48.367,4.121,48.367 M21.389,19.598c-3.604,0-6.728,2.452-7.598,5.965c-0.525,2.141-0.105,4.429,1.151,6.27\n\tc0.545,0.802,1.223,1.488,2.017,2.037c0.793,0.547,1.655,0.94,2.563,1.163c0.612,0.152,1.244,0.227,1.875,0.227\n\tc3.609,0,6.734-2.448,7.597-5.956c0.502-2.028,0.182-4.133-0.901-5.926c-1.081-1.79-2.795-3.051-4.823-3.551\n\tC22.651,19.674,22.018,19.598,21.389,19.598\"/>\n<path fill=\"#B8D432\" d=\"M24.792,14.08c0.432,0.106,0.854,0.234,1.271,0.379v-1.991h-9.802v2.284c1.631-0.686,3.412-1.068,5.27-1.068\n\tC22.623,13.684,23.72,13.816,24.792,14.08\"/>\n<path fill=\"#B8D432\" d=\"M33.175,20.249c0.372,0.617,0.679,1.26,0.946,1.915h3.41v-9.696h-9.83v2.704\n\tC29.946,16.309,31.84,18.041,33.175,20.249\"/>\n<path fill=\"#B8D432\" d=\"M34.741,30.541c-0.282,1.146-0.704,2.227-1.243,3.227h4.034v-9.831h-2.807\n\tC35.271,26.079,35.286,28.335,34.741,30.541\"/>\n<path fill=\"#B8D432\" d=\"M28.208,27.414c0,3.703-3.003,6.704-6.705,6.704c-3.703,0-6.705-3.001-6.705-6.704\n\tc0-3.703,3.002-6.704,6.705-6.704C25.204,20.71,28.208,23.711,28.208,27.414\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Blade Settings with TemplateBlade.Configurable.Decorator in TypeScript\nDESCRIPTION: Shows the usage of @TemplateBlade.Configurable.Decorator to add configuration capabilities to Blades. This decorator provides access to this.context.configuration API for loading and saving blade settings. Available for TemplateBlade, FrameBlade, and Blade.Decorator but not for MenuBlade.Decorator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@TemplateBlade.Configurable.Decorator\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Storage.MultiStorageAccountCombo Control in JSON\nDESCRIPTION: This snippet demonstrates how to configure the Microsoft.Storage.MultiStorageAccountCombo control in a JSON template. It includes settings for name, type, label, tooltip, default values, constraints, count, and visibility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Storage.MultiStorageAccountCombo.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"element1\",\n    \"type\": \"Microsoft.Storage.MultiStorageAccountCombo\",\n    \"label\": {\n      \"prefix\": \"Storage account prefix\",\n      \"type\": \"Storage account type\"\n    },\n    \"toolTip\": {\n      \"prefix\": \"\",\n      \"type\": \"\"\n    },\n    \"defaultValue\": {\n      \"prefix\": \"sa\",\n      \"type\": \"Premium_LRS\"\n    },\n    \"constraints\": {\n      \"allowedTypes\": [],\n      \"excludedTypes\": []\n    },\n    \"count\": 2,\n    \"visible\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing ParameterProvider for Editable String Arrays in Editable Grid - TypeScript\nDESCRIPTION: This code demonstrates transforming an array of strings into an observable entity array suitable for editable grids and integrating EditScope for proper edit tracking. Incoming strings are wrapped in objects with a Knockout observable property, and outgoing arrays are unwrapped. Depends on MsPortalFx.ViewModels.ParameterProvider, Knockout, and correct entity metadata registration. Facilitates edit reconciliation and UI updates in grid contexts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms-edit-scope-faq.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.parameterProvider = new MsPortalFx.ViewModels.ParameterProvider<string[], KnockoutObservableArray<StringWrapperType>>(container, {\n    editScopeMetadataType: wrapperTypeMetadataName,\n    mapIncomingDataForEditScope: (incoming) => {\n        // Editable grid only accepts an array of editable entities (that is, objects and not strings).\n        const wrappedStrings = incoming.map((str) => {\n            return {\n                value: ko.observable(str),\n            };\n        });\n        return ko.observableArray(wrappedStrings);  // Editable grid can only bind to an observable array.\n    },\n    mapOutgoingDataForCollector: (outgoing) => {\n        const editScope = this.parameterProvider.editScope();\n\n        // Use EditScope's 'getEntityArrayWithEdits' to return an array with all created/updated/deleted items.\n        const entityArrayWithEdits = editScope.getEntityArrayWithEdits<StringWrapperType>(outgoing);\n\n        // Unwrap each string to produce the expected string array.\n        return entityArrayWithEdits.arrayWithEdits.map((wrapper) => {\n            return wrapper.value();\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing VM Policy Context in TypeScript\nDESCRIPTION: This snippet shows how to import the VM Policy Context for use in React components.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-adding-policy-validation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VMPolicyContext } from \"./Components/CreateExperienceVMPolicy\";\n```\n\n----------------------------------------\n\nTITLE: Defining Refresh Command in JSON for Azure Portal\nDESCRIPTION: This snippet defines a command object for the Azure Portal using JSON. The object specifies the command type as \\\"RefreshCommand\\\", includes a unique identifier (\\\"refreshCommandId\\\"), a display name for UI presentation, and associates an icon from the portal's image set. This structure is typically used to configure action commands within Azure Portal extensions. No external dependencies required beyond a JSON-compatible environment. Inputs are the command properties; output is a structured command configuration object.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewRefreshCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"RefreshCommand\",\n    \"id\": \"refreshCommandId\",\n    \"displayName\": \"refreshCommand\",\n    \"icon\": \"MsPortalFx.Base.Images.Refresh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining assetSelectionCommandVisibility Enum in Markdown\nDESCRIPTION: This snippet defines the 'assetSelectionCommandVisibility' enum with four permitted values: HiddenByDefault, BrowseToolbar, BrowseContextMenu, and ResourceHoverCard. These values likely represent different visibility settings for asset selection commands in the Azure Portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetSelectionCommandVisibility.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- HiddenByDefault\n- BrowseToolbar\n- BrowseContextMenu\n- ResourceHoverCard\n```\n\n----------------------------------------\n\nTITLE: Defining Monitoring Tab for Resource Overview in JSON\nDESCRIPTION: This snippet shows how to define a Monitoring tab to be included in a Resource Overview. It specifies the tab kind as 'Monitoring' and includes an example chart configuration with CPU metrics.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-MonitoringViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Monitoring\",\n  \"charts\": [\n    {\n      \"title\": \"CPU (average)\",\n      \"metrics\": [\n        {\n          \"id\": \"Percentage CPU\",\n          \"aggregationType\": \"Avg\",\n          \"resourceMetadata\": {\n             \"id\": \"[parameters('id')]\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selenium WebDriver to Find and Click Elements in Azure Portal (C#)\nDESCRIPTION: This code demonstrates how to use classic Selenium WebDriver syntax with By selectors to find specific elements within a part and perform actions like clicking.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nwebDriver.WaitUntil(() => errorPart.FindElement(By.TagName(\"button\")),\n\t\t\t\t\t\"Could not find the button.\")\n\t     .Click();\n```\n\n----------------------------------------\n\nTITLE: Single URL Output Example\nDESCRIPTION: Example showing the JSON string output format when options.multiple is false and options.uploadMode is url.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload-guidance.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"https://myaccount.blob.core.windows.net/pictures/\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Options in ARM Dropdown Controls\nDESCRIPTION: Shows how to disable certain values in ARM dropdown controls by providing a callback that returns a reason message when a value should be disabled. This approach ensures users understand why an option is unavailable.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndisable: (loc) => { return !!~[\"5ag\", \"3bg\"].indexOf(loc.property) && \"Disabled (value not allowed for subscription)\"; },\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Data Model for Type Metadata Generation (ComputerComponent)\nDESCRIPTION: Placeholder for the C# class definition of `ComputerComponent` within the `SamplesExtension.DataModels` project. This class would be decorated with attributes like `[TypeMetadataModel]` to enable automatic generation of the corresponding TypeScript interface and metadata. Note: The provided code snippet is empty, the description reflects the intended content based on context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-typemetadata.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DataBrowse View with Transforms and Inputs in Azure Portal (JSON)\nDESCRIPTION: This example illustrates how to configure a DataBrowse view using transforms and inputs. It applies a transform to the input data from resources().properties.storageProfile.osDisk to create a specific data structure.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/DataBrowseTab.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"DataBrowse\",\n    \"displayName\": \"Data browse\",\n    \"ariaLabel\": \"testing\",\n    \"data\": {\n        \"transforms\": \"[concat('[', '@.{caching:caching, createOption: createOption, name: name, osType:osType, managedDisk:managedDisk.to_string(@)}', ']')]\",\n        \"input\": \"[resources().properties.storageProfile.osDisk]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Wildcard SSL Certificate Patterns for Azure Portal Extensions\nDESCRIPTION: Provides example naming conventions for wildcard SSL certificates used when hosting Azure Portal extensions, which must be served over HTTPS. These patterns simplify maintenance across different environments like test (`*.onecloud-ext.azure-test.net`) and production (`*.ext.azure.com`).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-faq-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*.<extensionName>.onecloud-ext.azure-test.net\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n*.<extensionName>.ext.azure.com\n```\n\n----------------------------------------\n\nTITLE: Defining ARG Query Tile in Markdown\nDESCRIPTION: Describes the structure for an ARG (Azure Resource Graph) query tile. It includes properties for specifying the query kind, the actual query string, and optional parameters.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-dashboardViewType-queryTileData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Option 1\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|The ARG data source of the query tile. Enum permitting the value: \"arg\"\n|query|True|The valid ARG query used to fetch the data.\n|usedParameters|False|Parameter names that are applied to the tile. It can be used within the query.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Active Directory Resource Graph Requests\nDESCRIPTION: This snippet shows how to configure Resource Graph GET requests for retrieving data from Azure Active Directory. It demonstrates the structure for specifying graph queries and how to reference the response in property definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"dataSources\": [\n    {\n        \"kind\": \"graph\",\n        \"name\": \"graph\",\n        \"path\": \"v1.0/me?$select=displayName,id,mail\"\n    }\n],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"[dataSources('graph').displayName]\"\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Service Health SVG Icon\nDESCRIPTION: SVG icon component showing service health status indicators and cloud integration\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_90\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M29.364,47.462c0,1.402-1.136,2.538-2.538,2.538H2.538C1.136,50,0,48.864,0,47.462V2.538C0,1.136,1.136,0,2.538,0h24.288c1.402,0,2.538,1.136,2.538,2.538V47.462z\"/>\n<!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyVault Picker Inputs/Outputs Interfaces in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces (`VaultPickerInputsOutputs`, `VaultProperties`, `Sku`, `AccessPolicy`, `AccessPolicyPermission`) used for data exchange with the KeyVault picker blade. These interfaces specify the structure of data returned when a vault is selected or created, including details like resource ID, name, location, tags, and properties (if created on the blade). Properties include SKU, tenant ID, access policies, and deployment enablement flags. Uses Knockout observables for dynamic data binding.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-keyvault.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VaultPickerInputsOutputs {\n    id: KnockoutObservable<string>; //resourceId of the vault selected\n    name: KnockoutObservable<string>; // name of the vault selected\n    type: KnockoutObservable<string>; // Microsoft.KeyVault/vaults\n    location: KnockoutObservable<string>; // region the vault is deployed in\n    tags: KnockoutObservable<StringMap<KnockoutObservable<string>>>; // any tags associated with the vault\n    properties?: KnockoutObservable<VaultProperties>; // Any properties associated with this vault, such as access policies. ONLY INCLUDED IF THE VAULT IS CREATED ON THE BLADE.\n}\n\nexport interface VaultProperties {\n    sku: KnockoutObservable<Sku>;\n    tenantId: KnockoutObservable<string>;\n    accessPolicies: KnockoutObservableArray<AccessPolicy>;\n    enabledForDeployment: KnockoutObservable<boolean>;\n    enabledForDiskEncryption: KnockoutObservable<boolean>;\n    enabledForTemplateDeployment: KnockoutObservable<boolean>;\n    vaultUri: KnockoutObservable<string>;\n}\n\nexport interface Sku {\n    family: KnockoutObservable<string>;\n    name: KnockoutObservable<string>;\n}\n\nexport interface AccessPolicy {\n    tenantId: KnockoutObservable<string>;\n    objectId: KnockoutObservable<string>;\n    permissions: KnockoutObservable<AccessPolicyPermission>;\n}\n\nexport interface AccessPolicyPermission {\n    keys: KnockoutObservableArray<string>;\n    secrets: KnockoutObservableArray<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Redirect for ReactViews using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define a Blade redirect for a ReactView component. The `@ReactView.ReplacesOldBlade.Decorator` is used on the new blade class (`NewBlade`) to specify the blade it replaces (`LegacyBlade`) and the extension where the old blade resides (`LegacyExtension`). This ensures navigations to `LegacyBlade` render `NewBlade` instead. Requires the `@microsoft/azureportal-reactview` package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\";\nimport * as ReactView from \"@microsoft/azureportal-reactview/ReactView\";\n@ReactView.ReplacesOldBlade.Decorator({\n\treplacedBlade: \"LegacyBlade\",\n\textension: \"LegacyExtension\",\n})\n@ReactView.ReduxFree.Decorator<{}, {}>()\nexport class NewBlade extends React.Component<{}, {}> {\n\tpublic render() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>This is a replacement ReactView blade</p>\n\t\t\t</>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating action bar validation computation for mixed controls\nDESCRIPTION: Modifies the computed observable that determines if the action bar should be enabled. The computation now combines the EditScope validation state with the validation state of the editscopeless TextBox control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-fxcontrols-editscope-forms.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nko.computed<boolean>(container, () => {\n            this.actionBar.valid(this.valid() && this.engineName.valid());\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy to Azure Button in Markdown\nDESCRIPTION: Markdown code for adding a Deploy to Azure button to a Github project. Requires a URI-encoded template URL to be replaced in the placeholder.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create-deploytoazure.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Azure](../media/portalfx-create-deploytoazure/deploybutton.png) http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/{encodedTemplateUrl})\n```\n\n----------------------------------------\n\nTITLE: Defining a Selector Control for VM Disk Size in Azure Portal UI JSON\nDESCRIPTION: This JSON snippet defines a `Microsoft.Common.Selector` control within an Azure portal UI definition. Named `vmDisk`, it presents a dropdown labeled 'Virtual Machine disk size' allowing users to select predefined disk sizes (4, 8, or 512 GiB). The selected value is mapped to the `diskSizeGB` key path, a default value is set, the control's value is dynamically linked to another step's output, and its visibility depends on a condition checking the resource name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Selector.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"Microsoft.Common.Selector\",\n    \"name\": \"vmDisk\",\n    \"label\": \"Virtual Machine disk size\",\n    \"valueMapping\": [\n        {\n        \"value\": \"4\",\n        \"displayName\": \"4 GiB\"\n        },\n        {\n        \"value\": \"8\",\n        \"displayName\": \"8 GiB\"\n        },\n        {\n        \"value\": \"512\",\n        \"displayName\": \"512 GiB\"\n        }\n    ],\n    \"keyPath\": \"diskSizeGB\",\n    \"descriptionKeyPath\": \"subText\",\n    \"defaultValue\": {\n        \"diskSizeGB\": 4,\n        \"subText\": 250\n    },\n    \"value\": \"[steps('step1').diskSize.transformed.sku]\",\n    \"visible\": \"[contains(resources().name, 'e')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Scope Deployment Properties in Azure Portal\nDESCRIPTION: This snippet outlines the required and optional properties for configuring a subscription-scoped deployment in Azure Portal. It includes fields for specifying the subscription, location, parameters, template, and post-deployment customization options.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-formViewType-properties-subscriptionScopeDeployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"Subscription\"\n|subscriptionId|True|Specify subscriptionId for deployment\n|location|True|Specify location for deployment\n|parameters|True|Specify all deployment parameters\n|template|True|Supply relative path to your deployment template using template.file\n|postCreate|False|Specify all postCreate to allow post deployment customization\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Command ViewModel in TypeScript\nDESCRIPTION: This TypeScript class (`SimpleBladeCommandViewModel`) extends `MsPortalFx.ViewModels.Command` and provides the behavior for the command defined in PDL. It implements the required `execute()` method, which in this simple example logs a message (`SamplesExtension.Resources.Strings.bladeCommandMessage`) to the console.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Simple blade command view model.\n */\nexport class SimpleBladeCommandViewModel extends MsPortalFx.ViewModels.Command {\n\n    /**\n     * Command view model constructor.\n     */\n    constructor(container: MsPortalFx.ViewModels.ContainerContract,\n                initialValue: any,\n                dataContext: DataContext) {\n        super();\n    }\n\n    public execute(): void {\n        console.log(SamplesExtension.Resources.Strings.bladeCommandMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Overview GetStarted Schema\nDESCRIPTION: JSON schema for implementing the base structure of a Resource Overview (GetStarted) view where Properties can be added as a tab.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-PropertiesTab.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../../Definitions/dx.schema.json\",\n  \"stringSource\": \"Resources/MyStrings.resjson\",\n  \"view\": {\n    \"kind\": \"GetStarted\",\n    \"export\": true,\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"key\"\n      }\n    ],\n    \"resources\": [\n      {\n        \"id\": \"[parameters('id')]\",\n        \"apiVersion\": \"2014-04-01\"\n      }\n    ],\n    \"essentials\": {},\n    \"commands\": [],\n    \"properties\": {\n        \"title\": \"title\",\n        \"tabs\": [\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoveCommand for Azure Portal View Commands\nDESCRIPTION: JSON configuration for implementing a MoveCommand in Azure Portal. This command enables move functionality with a dedicated icon and display name. The configuration specifies the command kind, identifier, display name property, and icon reference.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewMoveCommand.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"kind\": \"MoveCommand\",\n\"id\": \"moveCommand\",\n\"displayName\": {\n    \"property\": \"move\"\n},\n\"icon\": \"MsPortalFx.Base.Images.Move\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Button Label for ARM Request Form in Azure Portal (JSON)\nDESCRIPTION: This snippet demonstrates how to customize the primary button label for the ARM request Form blade. It's available from SDK version 7.4.0.5 and allows changing the default 'Submit' label.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/FormViewType-properties-armRequest.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n    \"primaryButtonLabel\": \"Execute ARM request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Computer and Updating Cache in Azure Portal (TypeScript)\nDESCRIPTION: This snippet demonstrates how to delete a computer entity, update the QueryCache and EntityCache, and notify the Azure Portal shell of the asset deletion. It uses FxBaseNet for AJAX calls and MsPortalFx.UI.AssetManager for asset management.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npublic deleteComputer(computer: Computer): Promise<any> {\n    return FxBaseNet.ajax({\n        uri: ComputerData._apiRoot + computer.name(),\n        type: \"DELETE\",\n    }).then(() => {\n        // This will notify the shell that the computer is being removed.\n        MsPortalFx.UI.AssetManager.notifyAssetDeleted(ExtensionDefinition.AssetTypeNames.computer, computer.name());\n\n        // This will refresh the set of data that is displayed to the client by applying the change we made to\n        // each data set in the cache.\n        // For this particular example, there is only one data set in the cache.\n        // This function is executed on each data set selected by the query params.\n        // params: any The query params\n        // dataSet: MsPortalFx.Data.DataSet The dataset to modify\n        this.computersQuery.applyChanges((_ /* params */, dataSet) => {\n            // Duplicates on the client the same modification to the datacache which has occurred on the server.\n            // In this case, we deleted a computer in the cache, so we will reflect this change on the client side.\n            dataSet.removeItem(computer);\n        });\n\n        // This will force the removal of the deleted computer from this EntityCache.  Subsequently, any Part or\n        // Blades that use an EntityView to fetch this deleted computer will likely receive an expected 404\n        // response.\n        this.computerEntities.forceRemove(computer.name());\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Properties Schema for Azure Portal Views\nDESCRIPTION: Schema definition for deployment properties in Azure Portal views. Specifies required and optional parameters for configuring resource deployments including scope, template parameters, and resource identifiers.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-view-autogenFormViewType-properties-deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|kind|True|enum \"ResourceGroup\", \"Subscription\", \"ManagementGroup\", \"Tenant\"\n|primaryResourceId|False|Supply primaryResourceId to pick up parentResource deployment scope information\n|templateParametersDefaultValueOverrides|False|Supply parameters to override in template.file parameters\n|template|True|Supply relative path to your deployment template using template.file\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: EditScope Blade Definition in PDL\nDESCRIPTION: PDL configuration for a blade that uses EditScope, including parameter definitions and custom part configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<Blade Name=\"DetailBlade\"\n       ViewModel=\"DetailBladeViewModel\">\n    <Blade.Parameters>\n        <Parameter Name=\"currentItemId\" Type=\"Key\" />\n        <Parameter Type=\"NewEditScope\" />\n        <Parameter Name=\"formValid\" Type=\"Output\" />\n    </Blade.Parameters>\n\n    <Lens Title=\"SamplesExtension.Resources.Strings.masterDetailEditDetailTitle\">\n        <CustomPart Name=\"DetailPart\"\n                    ViewModel=\"DetailPartViewModel\"\n                    Template=\"{Html Source=&#039;Templates\\\\WebsitesDetail.html&#039;}\"\n                    InitialSize=\"HeroWideFitHeight\">\n        <CustomPart.Properties>\n            <Property Name=\"editScopeId\"\n                      Source=\"{BladeParameter editScopeId}\" />\n            <Property Name=\"valid\"\n                      Source=\"{BladeParameter formValid}\"\n                      Direction=\"Output\" />\n            <Property Name=\"currentItemId\"\n                      Source=\"{BladeParameter currentItemId}\" />\n        </CustomPart.Properties>\n      </CustomPart>\n    </Lens>\n</Blade>\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualNetworkCombo Subnet Default Properties Table\nDESCRIPTION: Markdown table defining the properties for subnet default value configuration. Contains properties for subnet name, address prefix size, and feature flag settings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-subnets-defaultvalue.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|False|Name of the subnet.\n|addressPrefixSize|False|Default value for subnet's address prefix size (ex. /16.)\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Revealing Content After Loading Essential Data - Azure Portal Part (TypeScript)\nDESCRIPTION: Presents the standard pattern of calling container.revealContent() inside a promise callback after essential, fast-loading data is ready. The returned promise still tracks the loading state of all data, both essential and non-essential, to maintain correct indicator visibility. Dependencies: Q (promise lib), essential and non-essential data views, TypeScript. Inputs: An inputs object with resourceId is used. Outputs: Promises for both essential and slow data; UI content is revealed as soon as essentials load. Limitation: All loading indicators are removed only after the full promise resolves.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-parts-revealContent.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npublic onInputsSet(inputs: MyPartInputs): Promise {\n    // This larger Promise still controls the lifetime of all loading indicators (the\n    // non-blocking one in this case, since 'container.revealContent()' has been called).\n    return Q.all([\n        this._essentialDataView.fetch(inputs.resourceId).then(() => {\n            // Show the Part content once essential, fast-loading data loads.\n            this._container.revealContent();\n        }),\n        this._slowLoadingNonEssentialDataView.fetch(inputs.resourceId)\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Object Structure Example\nDESCRIPTION: Example showing the structure of a parameter object with nested properties and how to access them using the parameters function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-viewTypeParameters.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    objectName = {\n        nestedProperty1: {\n            nestedProperty2: <value>,\n            ...\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Insights Package in NuGet\nDESCRIPTION: Command to install the Microsoft.Portal.Extensions.Insights NuGet package for use with Azure Insights. The package is installed from the Microsoft Azure NuGet feed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Insights -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version 5.10.0.43\n```\n\n----------------------------------------\n\nTITLE: Extension PDL GA Configuration\nDESCRIPTION: Configuration for setting an extension to General Availability (GA) status by removing the preview tag in the extension.pdl file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-developmentPhases.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nPreview=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility for Property Items in Azure Portal\nDESCRIPTION: This snippet demonstrates how to control the visibility of property items based on conditions. It shows the JSON structure for defining conditional visibility using the 'visible' property.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/propertiesViewType.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"displayName\": \"Visible if VM running\",\n    \"value\": \"[resources('vmInstanceView').properties.instanceView.statuses.1.displayStatus]\",\n    \"visible\": \"[equals(resources('vmInstanceView').properties.instanceView.statuses.1.code, 'PowerState/running')]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output Format for Microsoft.Solutions.ResourceSelector\nDESCRIPTION: Example of the JSON output structure returned by the ResourceSelector control when a resource is selected. The output includes resource name, full resource ID, location, and subscription information.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Solutions.ResourceSelector.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"{resource-name}\",\n    \"id\": \"/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}\",\n    \"location\": \"{deployed-location}\",\n    \"subscriptionName\": \"{subscription-name}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Dropdown Values in Azure Portal\nDESCRIPTION: This snippet shows how to implement custom sorting for dropdown values using a comparator function. The sort function compares properties of dropdown items to determine their display order.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-create.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nsort: (a: Value, b: Value) => MsPortalFx.compare(b.property, a.property),\n```\n\n----------------------------------------\n\nTITLE: HTML External Link Example\nDESCRIPTION: Demonstrates how an external link is transformed by the sanitization process to include a verification page.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-linking.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://bing.com/path\">Go to other site</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://portal.azure.com/verifyLink?href=https%3A%2F%2Fbing.com%2Fpath&id=HubsExtension\">Go to other site</a>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Parameterized TemplateBlade in PDL (XML)\nDESCRIPTION: This XML snippet extends the original TemplateBlade definition to declare an 'id' parameter that will be passed to the ViewModel at runtime. The <TemplateBlade.Parameters> node offers a mechanism for type-safe, named inputs from Azure portal invocation. The associated ViewModel must correctly handle the provided named parameter.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade\n            Name=\"MyTemplateBlade\"\n            ViewModel=\"{ ViewModel Name=MyTemplateBladeViewModel, Module=./ViewModels/MyTemplateBladeViewModel }\"\n            Template=\"{ Html Source='Templates\\\\MyTemplateBlade.html' }\">\n    <TemplateBlade.Parameters>\n        <Parameter Name=\"id\" />\n    </TemplateBlade.Parameters>\n</TemplateBlade>\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Sections with Gitdown\nDESCRIPTION: Uses gitdown syntax to include content from multiple markdown template files covering different aspects of PDE configuration and sharing\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/index-portalfx-extension-sharing-pde.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"gitdown\": \"contents\", \"maxLevel\": 2\n\n<a name=\"sharing-pde\"></a>\n# Sharing PDE\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-publish.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-adrbac.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-billing.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-hubsextension-pde.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-azureinsights.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-monitoring.md\"\n\"gitdown\": \"include-headings\", \"file\": \"../templates/portalfx-pde-keyvault.md\"\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Localization Structure\nDESCRIPTION: Folder structure for localizing images in an Azure Gallery Package, supporting multiple languages.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n/GalleryPackage\n    /Images\n        icon.png\n        /fr\n            icon.png\n        /ja\n            icon.png\n        /pt-BR\n            icon.png\n        /pt-PT\n            icon.png\n```\n\n----------------------------------------\n\nTITLE: Defining Password Authentication JSON Output Structure in Azure Portal\nDESCRIPTION: This JSON snippet represents the output returned by an Azure Portal control when a user authenticates using a password. It includes the `authenticationType` set to 'password' and the `password` field containing the provided password value.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Compute.CredentialsCombo-Linux-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"password\",\n  \"password\": \"passwordValue\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Action Types with Potential Limitations\nDESCRIPTION: Illustrates an alternative approach using TypeScript enums for action types, which may cause dependency issues in contract files. This can lead to 'Module not found' errors when rebuilding the project.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ActionType {\n  SetText = \"SetText\",\n  ResetState = \"ResetState\",\n}\n\nexport interface SetTextAction {\n  type: ActionType.SetText;\n  text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility of Azure CDN Integration Blade Menu Item - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to set the visibility of the CDN Integration Blade menu item using a Knockout observable. It checks whether the \\\"cdnintegration\\\" feature is enabled via MsPortalFx and updates the UI accordingly. Requires Knockout.js, MsPortalFx, and should be executed within the Azure portal extension context; input is implicit (feature flag state), output is a boolean observable controlling menu visibility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nvisible: ko.observable(MsPortalFx.isFeatureEnabled(\"cdnintegration\"))\n```\n\n----------------------------------------\n\nTITLE: Representing a Boolean True Value in JSON\nDESCRIPTION: This snippet shows the literal boolean value 'true' in JSON format. This is a standard way to represent a true condition or enabled state within JSON data structures, often used in configurations or API payloads.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.CheckBox-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Body for Bot Name Availability Check\nDESCRIPTION: Shows the configuration for a POST request to check bot name availability in the Azure Bot Service.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request\": {\n        \"method\": \"POST\",\n        \"path\": \"providers/Microsoft.BotService/checkNameAvailability?api-version=2018-07-12\",\n        \"body\": {\n            \"type\": \"\",\n            \"name\": \"[steps('basics').botId]\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with Asset ID in TypeScript (v3)\nDESCRIPTION: Example of creating a notification with an associated asset ID using publishNotification in TypeScript for Azure Portal v3.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-notifications-upgrade.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CompletedStatus, publishNotification } from \"Fx/Notification\";\nvar formatArgs = { name: \"MyAssetName\" };\nvar notification = publishNotification({\n    title: MyNotification.Started.title,\n    description: MyNotification.Started.message,\n    status: CompletedStatus.Information,\n    linkTo: `#asset/${ExtensionDefinition.definitionName}/${ExtensionDefinition.AssetTypes.MyAsset.name}/${assetId}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Printer Browse Grid Columns in TypeScript\nDESCRIPTION: Defines a TypeScript module `BrowseColumns` containing constants for column IDs and their associated property names used in the custom browse configuration for the 'microsoft.test/printers' resource type. This structure organizes identifiers for status, model, and technology columns, facilitating consistent referencing within the browse grid implementation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Constants for the column IDs for the custom browse config.\n*/\nmodule BrowseColumns {\n   /**\n    * The status column.\n    */\n   export const status = \"status\";\n\n   /**\n    * Constants for the properties for the status column.\n    */\n   export module StatusProperties {\n       /**\n        * The status property.\n        */\n       export const status = \"status\";\n   }\n\n   /**\n    * The model column.\n    */\n   export const model = \"model\";\n\n   /**\n    * Constants for the properties for the model column.\n    */\n   export module ModelProperties {\n       /**\n        * The model property.\n        */\n       export const model = \"model\";\n   }\n\n   /**\n    * The technology column.\n    */\n   export const technology = \"technology\";\n\n   /**\n    * Constants for the properties for the technology column.\n    */\n   export module TechnologyProperties {\n       /**\n        * The technology property.\n        */\n       export const technology = \"technologyString\";\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Portal UI Image Resource Enum\nDESCRIPTION: Enum containing all available image resource paths in the MsPortalFx.Base.Images namespace. Includes standard UI icons, service logos, loading animations, and polychromatic service icons.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-svgEnum.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MsPortalFx.Base.Images {\n    ImageUri,\n    Add,\n    AddBoxed,\n    AddTeamMember,\n    // ... additional enum values omitted for brevity\n    NetworkInterfaceCard\n}\n```\n\n----------------------------------------\n\nTITLE: Example DatePicker Output (Date Only) in JSON\nDESCRIPTION: This JSON string represents the output format of a DatePicker component when only the date is selected. The time component defaults to midnight (00:00:00) in the specified timezone (GMT-0700, Pacific Daylight Time in this example).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.DatePicker-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Fri Aug 05 2022 00:00:00 GMT-0700 (Pacific Daylight Time)\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource Asset Definition in Azure Portal Extension\nDESCRIPTION: Shows the file path for the resource asset definition where the resource menu can be configured. The menu JSON object can be modified to customize the resource menu items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n../Client/Assets/ResourceAsset.dx.json\n```\n\n----------------------------------------\n\nTITLE: Azure VirtualNetworkCombo Default Value Properties Definition\nDESCRIPTION: Defines the object properties for configuring default values in the VirtualNetworkCombo control. Includes optional properties for virtual network name, address prefix size, and feature flags.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-defaultvalue.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|name|False|Default value for virtual network name.\n|addressPrefixSize|False|Default value for virtual network's address prefix size (ex. /16).\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for Alternative Folder in Azure Portal\nDESCRIPTION: SVG definition for an alternative folder icon, featuring a more detailed design with a tab and open folder representation. This icon may be used for special folder types or states in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_129\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M22,8.1V5.4C22,4.6,21.6,4,20.8,4H14c-0.8,0-1,0-1.7,1.4L11,8.1L22,8.1z\"/>\n<path d=\"M20.7,7H3.2C2.4,7,2,7.6,2,8.4v11.2C2,20.4,2.4,21,3.2,21h17.5c0.8,0,1.2-0.6,1.2-1.4V8.4C21.9,7.6,21.5,7,20.7,7z M20,19H4\n\tV9h16V19z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Blade HTML Structure\nDESCRIPTION: This snippet demonstrates the basic HTML structure for a frame blade in the Azure Portal. It includes a named anchor for easy reference and navigation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblade.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a name=\"frameblade\"></a>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Menu Item Visibility with Feature Flag in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to control the visibility of the CDN integration menu item based on an Azure portal feature flag. It uses `MsPortalFx.isFeatureEnabled(\"cdnintegration\")` within a Knockout observable assigned to the `visible` property, allowing the menu item to be shown or hidden dynamically.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-pde-cdn.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvisible: ko.observable(MsPortalFx.isFeatureEnabled(\"cdnintegration\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreXT Hosting Service Properties in Extension.csproj\nDESCRIPTION: MSBuild property configuration for enabling hosting service deployment artifacts generation and setting the extension route prefix.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <HostingServiceCreateDeploymentArtifacts>$(IsOfficialBuild)</HostingServiceCreateDeploymentArtifacts>\n    <HostingServiceRoutePrefix>[YourExtensionNameInHostingService]<</HostingServiceRoutePrefix>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Virtual Machine Icon in Azure Portal\nDESCRIPTION: SVG code representing a virtual machine icon used in the Azure Portal. Features a monitor display with geometric shapes inside to represent virtual resources, using gray, blue and white colors with opacity effects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_86\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M32.426,38.534h-1.191h-11.79H18.83c1.634,5.768-0.561,6.595-10.175,6.595v3.02h12.227h8.927h11.538v-3.02\n\tC31.733,45.129,30.79,44.305,32.426,38.534\"/>\n<path fill=\"#A0A1A2\" d=\"M46.98,2H2.718C1.214,2,0.001,3.345,0.001,4.847v30.866c0,1.493,1.213,2.823,2.717,2.823H46.98\n\tc1.501,0,3.021-1.33,3.021-2.823V4.847C50.001,3.341,48.481,2,46.98,2\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M47.011,2.003c-0.011,0-0.021-0.002-0.031-0.002H2.717\n\tC1.213,2.001,0,3.345,0,4.848v30.865c0,1.494,1.213,2.824,2.717,2.824H3.77L47.011,2.003z\"/>\n<polygon fill=\"#59B4D9\" points=\"46.098,5.848 46.098,34.689 3.79,34.689 3.79,5.848 \"/>\n<polygon fill=\"#59B4D9\" points=\"3.79,34.689 3.848,34.689 3.848,5.849 42.528,5.791 42.53,5.791 3.79,5.849 \"/>\n<rect x=\"8.655\" y=\"45.128\" fill=\"#A0A1A2\" width=\"32.692\" height=\"3.021\"/>\n<path fill=\"#B8D432\" d=\"M25.518,4.095c0,0.392-0.318,0.71-0.71,0.71c-0.393,0-0.709-0.318-0.709-0.71c0-0.393,0.316-0.71,0.709-0.71\n\tC25.2,3.385,25.518,3.702,25.518,4.095\"/>\n<path fill=\"#FFFFFF\" d=\"M25.546,19.394c-0.045,0-0.091-0.014-0.134-0.038l-8.804-5.082c-0.081-0.048-0.132-0.137-0.132-0.231\n\tc0-0.095,0.051-0.183,0.132-0.23l8.751-5.049c0.082-0.046,0.182-0.046,0.263,0l8.807,5.084c0.082,0.047,0.131,0.135,0.131,0.23\n\tc0,0.096-0.049,0.183-0.131,0.23l-8.748,5.048C25.638,19.38,25.595,19.394,25.546,19.394\"/>\n<path opacity=\"0.7\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M24.281,31.746c-0.05,0-0.095-0.012-0.134-0.036l-8.778-5.066\n\tc-0.085-0.047-0.136-0.133-0.136-0.231V16.247c0-0.096,0.051-0.183,0.136-0.231c0.081-0.049,0.181-0.049,0.268,0l8.777,5.064\n\tc0.078,0.05,0.13,0.137,0.13,0.233v10.166c0,0.097-0.052,0.183-0.13,0.231C24.37,31.734,24.324,31.746,24.281,31.746\"/>\n<path opacity=\"0.4\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M26.766,31.746c-0.048,0-0.093-0.012-0.138-0.036\n\tc-0.078-0.048-0.129-0.134-0.129-0.231V21.377c0-0.094,0.051-0.182,0.129-0.231l8.777-5.064c0.084-0.048,0.182-0.048,0.264,0\n\tc0.084,0.047,0.135,0.135,0.135,0.23v10.101c0,0.098-0.051,0.184-0.135,0.231l-8.774,5.066\n\tC26.859,31.734,26.812,31.746,26.766,31.746\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using AcceptEditScopeChangesAction Enum Reference\nDESCRIPTION: Code reference showing the AcceptEditScopeChangesAction enum used in EditScope for handling save operations. This enum determines how the EditScope resets itself after saving changes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-forms.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nAcceptEditScopeChangesAction\n```\n\n----------------------------------------\n\nTITLE: Implementing getMenuConfig Method in TypeScript\nDESCRIPTION: This TypeScript code shows the implementation of the getMenuConfig method in the AssetViewModel, which is used when ResourceProvidedBy is set to 'ProvidedByResourceMenu'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npublic getMenuConfig(resourceInfo: MsPortalFx.Assets.ResourceInformation): Promise<MsPortalFx.Assets.ResourceMenuConfig> {\n    return Q({});\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Public Key Authentication Output Schema\nDESCRIPTION: JSON schema showing the control output format when SSH public key authentication is selected, including support for new key pair generation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Compute.CredentialsCombo-Linux.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticationType\": \"sshPublicKey\",\n  \"generateNewSshKey\" : false,\n  \"sshPublicKey\": \"<ssh-public-key>\",\n  \"sshKeyName\": \"<ssh-key-name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template Structure in XML\nDESCRIPTION: Basic XML template structure for rendering blade controls including textbox and button bindings.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-blade-viewmodel.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<div data-bind=\"pcControl: nameTextBox\"></div>\n<div data-bind=\"pcControl: smartPhone\"></div>\n<div data-bind=\"pcControl: okButton\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for Gear in Azure Portal\nDESCRIPTION: SVG definition for a gear icon, commonly used to represent settings or configuration options in the Azure Portal. The icon features a detailed gear shape with a stylized 'A' in the center.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_131\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M50,27.726v-5.69l-0.803-0.261l-6.091-1.989l-1.625-3.925l3.124-6.609l-4.024-4.023L39.826,5.61\n\tl-5.711,2.903L30.19,6.885L27.724,0h-5.688l-0.263,0.807l-1.989,6.092l-3.922,1.623L9.25,5.4L5.227,9.422l0.383,0.753l2.9,5.714\n\tL6.887,19.81L0,22.276v5.691l0.804,0.264l6.092,1.987l1.625,3.923l-3.123,6.611l4.021,4.025l0.755-0.384l5.712-2.901l3.924,1.625\n\tL22.275,50h5.691l0.262-0.803l1.989-6.089l3.923-1.626l6.61,3.126l4.025-4.026l-0.383-0.754l-2.902-5.711l1.627-3.924L50,27.726z\n\t M25.943,36.31c-6.132-0.105-11.148-5.216-11.148-11.417c0-3.351,1.491-6.362,3.817-8.371L16,14h8v8l-2.872-2.993\n\tc-1.744,1.407-2.989,3.561-2.989,5.994c0,4.343,3.507,7.908,7.792,7.978c4.309,0.07,7.781-3.368,7.781-7.699\n\tc0-2.753-1.417-5.203-3.554-6.632l2.369-2.391c2.741,2.09,4.332,5.445,4.332,9.138C36.859,31.585,32.098,36.414,25.943,36.31z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Including PortalFx Test Framework Choice Template using GitDown\nDESCRIPTION: This configuration line uses the GitDown `include-file` directive to embed the content of the `portalfx-choosing-test-framework.md` Markdown file. This file, located in the parent `templates` directory, likely provides guidance on selecting appropriate testing frameworks for Azure Portal extensions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-test.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"gitdown\": \"include-file\", \"file\": \"../templates/portalfx-choosing-test-framework.md\"\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Triangle SVG Icon\nDESCRIPTION: SVG icon definition for triangle shape, sized 10x10px with a simple polygon definition.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_178\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"10px\" height=\"10px\" viewBox=\"0 0 10 10\" enable-background=\"new 0 0 10 10\" xml:space=\"preserve\">\n<polygon points=\"3,0 8,5 3,10 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Object for a Resource\nDESCRIPTION: This JSON snippet demonstrates a simple object structure representing a resource. It includes key-value pairs for properties such as 'name', 'region', 'state', and an optional 'note'. This format is commonly used for configuration or data representation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.Grid-output.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"name\": \"resource1\",\n        \"region\": \"East US\",\n        \"state\": \"on\",\n        \"note\": \"Lorem ipsum\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Azure Gallery Package Template Schema\nDESCRIPTION: JSON schema for the Template.json file, which contains publisher, name, version and content of a template.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://gallery.azure.com/schemas/2014-06-01/gallerytemplate.json#\",\n  \"name\": \"[name]\",\n  \"publisher\": \"[publisher]\",\n  \"version\": \"[version]\",\n  \"content\": {\n    // well-formed json\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Polychromatic Workflow Icon\nDESCRIPTION: SVG icon definition for the Workflow functionality in Azure Portal. The SVG uses a combination of blue colors (#59B4D9 and #0072C6) to represent a workflow process with connected elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_97\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#59B4D9\" d=\"M37.676,26.891c-0.299-0.299-0.769-1.218-2.176-1.218h-7.67H15.5\n\tc-1.408,0-1.877,0.919-2.176,1.218L7.096,35.54l4.724,1.29l4.481-6.353h11.53h6.87l4.481,6.353l4.724-1.29L37.676,26.891z\"/>\n<rect x=\"23.111\" y=\"14.465\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#59B4D9\" width=\"4.778\" height=\"24.488\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#59B4D9\" d=\"M29.169,0.5h-7.338c-2.112,0-3.84,1.728-3.84,3.84v6.655\n\tc0,2.112,1.728,3.84,3.84,3.84h7.338c2.112,0,3.84-1.728,3.84-3.84V4.34C33.009,2.228,31.281,0.5,29.169,0.5z M29.596,10.739\n\tc0,0.375-0.307,0.683-0.683,0.683h-6.826c-0.375,0-0.683-0.307-0.683-0.683V4.596c0-0.375,0.307-0.683,0.683-0.683h6.826\n\tc0.375,0,0.683,0.307,0.683,0.683V10.739z\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#0072C6\" d=\"M29.169,0.5h-7.338c-2.112,0-3.84,1.728-3.84,3.84v6.655\n\tc0,2.112,1.728,3.84,3.84,3.84h7.338c2.112,0,3.84-1.728,3.84-3.84V4.34C33.009,2.228,31.281,0.5,29.169,0.5z M29.596,10.739\n\tc0,0.375-0.307,0.683-0.683,0.683h-6.826c-0.375,0-0.683-0.307-0.683-0.683V4.596c0-0.375,0.307-0.683,0.683-0.683h6.826\n\tc0.375,0,0.683,0.307,0.683,0.683V10.739z\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#0072C6\" d=\"M27.804,38.213h-4.608c-2.112,0-3.84,1.728-3.84,3.84v4.608\n\tc0,2.112,1.728,3.84,3.84,3.84h4.608c2.112,0,3.84-1.728,3.84-3.84v-4.608C31.643,39.941,29.916,38.213,27.804,38.213z\n\tM28.23,46.404c0,0.375-0.307,0.683-0.683,0.683h-4.096c-0.375,0-0.683-0.307-0.683-0.683v-4.096c0-0.375,0.307-0.683,0.683-0.683\n\th4.096c0.375,0,0.683,0.307,0.683,0.683V46.404z\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#0072C6\" d=\"M0.5,37.053v4.608c0,2.112,1.728,3.84,3.84,3.84h4.608\n\tc2.112,0,3.84-1.728,3.84-3.84v-4.608c0-2.112-1.728-3.84-3.84-3.84H4.34C2.228,33.213,0.5,34.941,0.5,37.053z M3.913,37.309\n\tc0-0.375,0.307-0.683,0.683-0.683h4.096c0.375,0,0.683,0.307,0.683,0.683v4.096c0,0.375-0.307,0.683-0.683,0.683H4.596\n\tc-0.375,0-0.683-0.307-0.683-0.683V37.309z\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#0072C6\" d=\"M46.66,33.213h-4.608c-2.112,0-3.84,1.728-3.84,3.84v4.608\n\tc0,2.112,1.728,3.84,3.84,3.84h4.608c2.112,0,3.84-1.728,3.84-3.84v-4.608C50.5,34.941,48.772,33.213,46.66,33.213z M47.087,41.404\n\tc0,0.375-0.307,0.683-0.683,0.683h-4.096c-0.375,0-0.683-0.307-0.683-0.683v-4.096c0-0.375,0.307-0.683,0.683-0.683h4.096\n\tc0.375,0,0.683,0.307,0.683,0.683V41.404z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using DataSource in Azure Portal JSON Configuration\nDESCRIPTION: This snippet demonstrates how to use a previously defined dataSource in the Azure Portal configuration. It references the 'displayName' property of the 'mygraph' dataSource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/dataSources/viewTypeDataSources.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"name\": \"[dataSources('mygraph').displayName]\"\n```\n\n----------------------------------------\n\nTITLE: Querying Blade Traffic with KQL in Azure Portal\nDESCRIPTION: KQL query for monitoring blade traffic in Azure Portal using Data Explorer. The query filters telemetry data for specific blade and extension names within a given time range, focusing on BladeFullReady actions. Required parameters include blade name, extension name, and time range timestamps.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-redirects.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nlet ['bladeName']='Your Blade name';\nlet ['extensionName']='Your Extension Name';\nlet ['_startTime']=datetime('Start Date timestamp');\nlet ['_endTime']=datetime('End Date timestamp');\nlet ['portalEnvironment']='https://portal.azure.com';\ndatabase('AzurePortal').ClientTelemetry\n| where PreciseTimeStamp between (_startTime.._endTime)\n| where requestUri startswith \"https://portal.azure.com\"\n| where action == \"BladeFullReady\"\n| where extension == extensionName\n| where name endswith bladeName\n| summarize count() by name, extension, action\n```\n\n----------------------------------------\n\nTITLE: Accessing Section Control Output in JSON\nDESCRIPTION: Demonstrates how to reference controls within a section using dot notation. The section itself has no output but individual controls can be accessed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.Section.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nsteps('configuration').section1.text1\n```\n\n----------------------------------------\n\nTITLE: Accessing MDS Tables URL in Azure Portal\nDESCRIPTION: The URL for accessing MDS tables in the Azure Portal production environment. This link provides access to the Monitoring and Diagnostics Service data.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-mds-tables.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[https://production.diagnostics.monitoring.core.windows.net/](https://production.diagnostics.monitoring.core.windows.net/)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top 10 Recent Errors in Azure Portal\nDESCRIPTION: Kusto query to get the top 10 errors from the last hour across all client versions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-extension-errors.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nTop10ExtErrorsFromLastHour(\"Compute\", \"Error\", \"portal.azure.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating Info Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code defines an information icon with a circular background and an 'i' symbol. The icon uses blue and white colors to create a distinctive appearance.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_44\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M47.247,25c0,12.287-9.96,22.246-22.247,22.246S2.753,37.287,2.753,25S12.713,2.753,25,2.753\n\tC37.286,2.753,47.247,12.714,47.247,25\"/>\n<path fill=\"#59B4D9\" d=\"M25,2.753C12.713,2.753,2.753,12.714,2.753,25c0,5.266,1.84,10.096,4.897,13.906L40.42,8.986\n\tC36.42,5.135,30.992,2.753,25,2.753\"/>\n<path fill=\"#FFFFFF\" d=\"M28.867,19.518v16.098c0,1.434,0.166,2.35,0.499,2.749c0.333,0.398,0.985,0.626,1.956,0.684v0.782H20.35\n\tv-0.782c0.898-0.029,1.564-0.29,1.999-0.782c0.289-0.333,0.434-1.217,0.434-2.651V23.754c0-1.433-0.166-2.349-0.498-2.748\n\tc-0.334-0.398-0.979-0.627-1.935-0.684v-0.804H28.867z\"/>\n<path fill=\"#FFFFFF\" d=\"M25.826,9.677c0.94,0,1.737,0.33,2.39,0.989c0.651,0.659,0.976,1.451,0.976,2.378s-0.329,1.717-0.987,2.369\n\tc-0.659,0.651-1.453,0.977-2.379,0.977c-0.928,0-1.717-0.326-2.369-0.977c-0.652-0.652-0.978-1.442-0.978-2.369\n\ts0.326-1.719,0.978-2.378S24.898,9.677,25.826,9.677\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding AMD Dependency for hammer.js\nDESCRIPTION: This example demonstrates how to add the AMD dependency tag specifically for the hammer.js library in a TypeScript file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance-best-practices.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <amd-dependency path=\"hammer\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Blade Pinning with ResourcePart in TypeScript\nDESCRIPTION: TypeScript implementation of the onPin method to enable blade pinning using ResourcePart in a noPDL blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-parts-resourcepart.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic onPin() {\n    const { parameters } = this.context;\n    return PartReferences.forExtension(\"HubsExtension\").forPart(\"ResourcePart\").createReference({ parameters: parameters });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetNonSelectionCommandVisibility Enum Values\nDESCRIPTION: Enumeration defining valid visibility states for non-selection commands in Azure Portal asset views. Controls where commands appear when no asset is selected.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-enum-assetNonSelectionCommandVisibility.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- HiddenByDefault\n- BrowseToolbar\n- BrowseEmptyView\n- ServiceHoverCard\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic Server Farm SVG Icon in Azure Portal\nDESCRIPTION: SVG definition for a server farm icon used in the Azure Portal. The icon represents server racks with green indicators and a red server component, suitable for visualizing server farm or hosting plan resources.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_76\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M29.364,47.462c0,1.402-1.136,2.538-2.538,2.538H2.538C1.136,50,0,48.864,0,47.462V2.538\n\tC0,1.136,1.136,0,2.538,0h24.288c1.402,0,2.538,1.136,2.538,2.538V47.462z\"/>\n<path fill=\"#1E1E1E\" d=\"M4.316,27.024c0-1.762,1.429-3.191,3.191-3.191h14.614c1.762,0,3.191,1.429,3.191,3.191l0,0\n\tc0,1.762-1.429,3.191-3.191,3.191H7.507C5.745,30.215,4.316,28.787,4.316,27.024L4.316,27.024z\"/>\n<circle fill=\"#B8D432\" cx=\"7.643\" cy=\"27.024\" r=\"2.142\"/>\n<path fill=\"#1E1E1E\" d=\"M4.316,17.545c0-1.762,1.429-3.191,3.191-3.191h14.614c1.762,0,3.191,1.429,3.191,3.191l0,0\n\tc0,1.762-1.429,3.191-3.191,3.191H7.507C5.745,20.736,4.316,19.307,4.316,17.545L4.316,17.545z\"/>\n<circle fill=\"#B8D432\" cx=\"7.643\" cy=\"17.545\" r=\"2.142\"/>\n<path fill=\"#1E1E1E\" d=\"M4.316,8.065c0-1.762,1.429-3.191,3.191-3.191h14.614c1.762,0,3.191,1.429,3.191,3.191l0,0\n\tc0,1.762-1.429,3.191-3.191,3.191H7.507C5.745,11.257,4.316,9.828,4.316,8.065L4.316,8.065z\"/>\n<circle fill=\"#B8D432\" cx=\"7.643\" cy=\"8.065\" r=\"2.142\"/>\n<polygon fill=\"#BA141A\" points=\"43.167,25.117 31.557,19.889 19.948,25.117 15.867,35.404 15.867,50 47.248,50 47.248,35.404 \"/>\n<polygon fill=\"#A0A1A2\" points=\"47.111,37.362 42.247,26.523 31.557,21.709 20.868,26.523 16.004,37.362 13.784,36.365 \n\t19.027,24.684 31.557,19.042 44.088,24.684 49.331,36.365 \"/>\n<path fill=\"#FFFFFF\" d=\"M39.369,50H23.561V37.812h15.808V50z M25.187,48.374h12.555v-8.935H25.187V48.374z\"/>\n<rect x=\"22.623\" y=\"43.092\" transform=\"matrix(-0.802 -0.5973 0.5973 -0.802 30.4733 97.9112)\" fill=\"#FFFFFF\" width=\"17.682\" height=\"1.626\"/>\n<rect x=\"30.65\" y=\"35.065\" transform=\"matrix(-0.5972 -0.8021 0.8021 -0.5972 15.0365 95.3626)\" fill=\"#FFFFFF\" width=\"1.626\" height=\"17.682\"/>\n<rect x=\"28.943\" y=\"27.568\" opacity=\"0.5\" fill=\"#1E1E1E\" enable-background=\"new    \" width=\"5.229\" height=\"4.187\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Single File Content Output Example\nDESCRIPTION: Example showing the JSON string output format when options.multiple is false and options.uploadMode is file.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Common.FileUpload-guidance.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PowerUp Icon in Azure Portal\nDESCRIPTION: An SVG icon for the PowerUp functionality with curved paths and a lightning bolt design in the center. This icon uses blue color (#59B4D9) and opacity effects to create visual depth.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_149\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path opacity=\"0.5\" fill=\"#59B4D9\" d=\"M41.386,50c-6.829,0-16.33-5.585-26.069-15.323C1.768,21.125-3.448,8.134,2.338,2.348\n\tC3.875,0.811,6.039,0,8.599,0c6.829,0,16.331,5.585,26.069,15.325c6.637,6.638,11.379,13.177,13.715,18.916\n\tc2.365,5.811,2.104,10.572-0.736,13.413C46.111,49.189,43.946,50,41.386,50 M8.599,3.078c-1.75,0-3.124,0.486-4.083,1.445\n\tC0.791,8.249,4.052,19.056,17.495,32.498c9.031,9.032,17.962,14.424,23.892,14.424c1.75,0,3.123-0.486,4.082-1.446\n\tc1.908-1.908,1.932-5.486,0.063-10.074C43.35,30.04,38.84,23.85,32.49,17.502C23.459,8.471,14.528,3.078,8.599,3.078\"/>\n<path fill=\"#59B4D9\" d=\"M8.599,50c-2.56,0-4.724-0.811-6.261-2.346c-2.84-2.841-3.101-7.602-0.735-13.413\n\tc2.336-5.739,7.078-12.278,13.715-18.916C25.056,5.585,34.558,0,41.387,0c2.56,0,4.724,0.811,6.26,2.347\n\tc5.786,5.787,0.57,18.778-12.979,32.33C24.929,44.415,15.427,50,8.599,50 M41.387,3.078c-5.93,0-14.861,5.393-23.893,14.424\n\tC11.146,23.85,6.634,30.04,4.453,35.402c-1.869,4.588-1.845,8.166,0.063,10.074c0.959,0.96,2.332,1.446,4.083,1.446\n\tc5.93,0,14.86-5.392,23.892-14.424C45.933,19.056,49.194,8.249,45.468,4.522C44.509,3.564,43.137,3.078,41.387,3.078\"/>\n<path fill=\"#59B4D9\" d=\"M31.914,20.031c-0.291-0.318-0.639-0.551-1.022-0.71c-1.768-0.736-4.322,0.18-5.922,2.451\n\tc-2.46-2.968-5.402-3.526-7.039-1.741c-3.272,3.563,0.826,8.244,4.058,10.902c1.274,1.048,2.413,1.781,2.914,2.008v0.023\n\tc0.004-0.001,0.014-0.008,0.017-0.009c0,0,0.018,0.008,0.024,0.009v-0.023C26.713,32.139,36.473,24.998,31.914,20.031\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Querying Interactive Network Request Performance in Kusto\nDESCRIPTION: This Kusto query analyzes the performance of interactive network requests from the 'Framework' database over the last day using the 'InteractiveNetworkPerformance' function. It requires specifying the target extension and optionally the blade name in the third parameter. The query returns request details including date, identifiers, name, occurrence/request counts, blade instances, unique customers, percentile durations (50th, 80th, 95th, 99th), and a KPI classification based on the 95th percentile duration (Green <= 1s, Yellow <= 2s, Red > 2s).\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/performance.md#2025-04-23_snippet_6\n\nLANGUAGE: Kusto\nCODE:\n```\ndatabase('Framework').InteractiveNetworkPerformance(ago(1d), now(), \"Extension/YOUR_EXTENSION_NAME/Blade/YOUR_BLADE_NAME\")\n```\n\n----------------------------------------\n\nTITLE: History SVG Icon Definition\nDESCRIPTION: SVG definition for the History icon used in the Azure Portal. The icon depicts a circular clock face with an arrow pointing left, representing history or previously viewed items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_138\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"-0.5 0.5 24 24\" enable-background=\"new -0.5 0.5 24 24\" xml:space=\"preserve\">\n<path d=\"M5.848,17.718c1.587,2.111,4.112,3.477,6.956,3.477c4.802,0,8.696-3.893,8.696-8.696\n\ts-3.893-8.696-8.696-8.696S4.109,7.698,4.109,12.5c0,0.294,0.015,0.584,0.043,0.87l2.737,0c-0.041-0.284-0.063-0.574-0.063-0.87\n\tc0-3.302,2.676-5.978,5.978-5.978s5.978,2.676,5.978,5.978s-2.676,5.978-5.978,5.978c-2.005,0-3.779-0.986-4.863-2.5L5.848,17.718z\"\n\t/>\n<rect x=\"11.717\" y=\"7.065\" width=\"1.087\" height=\"5.435\"/>\n<rect x=\"11.717\" y=\"12.5\" width=\"5.435\" height=\"1.087\"/>\n<polygon fill=\"#7A7A7A\" points=\"9.326,12.5 5.413,16.413 1.5,12.5 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding Default Configuration File in XML Build\nDESCRIPTION: XML build configuration to include the default.json configuration file with Content build action\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Content Include=\"Content\\Config\\default.json\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization File Copy in Build Pipeline - XML\nDESCRIPTION: This MSBuild ItemGroup snippet demonstrates how to configure CoreXt or similar build systems to process and localize Strings.resjson files automatically. It uses an ItemGroup to include all Strings.resjson files under the Client\\UiDef\\ path and specifies how output and copying are handled. Prerequisites include integration with a compatible CI/build pipeline (like CoreXt), and the extension project file must be properly structured to support this directive. No runtime impact, but essential for ensuring all required localization resource files are generated for supported languages during builds.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-cuid.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n<FilesToLocalize Include=\"Client\\UiDef\\**\\Strings.resjson\">\n<OutputPath>$(MSBuildThisFileDirectory)\\Client\\UiDef\\%(RecursiveDir)</OutputPath>\n<CopyOption>LangIDOnName</CopyOption>\n</FilesToLocalize>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Globe Error SVG Icon for Azure Portal\nDESCRIPTION: SVG definition for a Globe Error icon, using paths and shapes with specified colors and opacity. Includes a gray base, pink globe, and white error indicator.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_36\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7A7A7A\" d=\"M24.159,40.351h-3.951c0.957,5.788-2.336,6.618-7.968,6.618V50h7.163h5.229h6.759v-3.031\n\tC25.76,46.969,23.201,46.142,24.159,40.351\"/>\n<rect x=\"12.242\" y=\"46.968\" fill=\"#A0A1A2\" width=\"19.151\" height=\"3.032\"/>\n<path fill=\"#EC008C\" d=\"M35.12,5.48c-3.17-3.17-7.195-4.963-11.332-5.383C18.386-0.452,12.791,1.341,8.652,5.48\n\tC4.513,9.619,2.72,15.214,3.268,20.616c0.42,4.138,2.213,8.162,5.383,11.332c4.898,4.898,11.833,6.508,18.077,4.842\n\tc3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117C40.37,13.34,38.551,8.91,35.12,5.48z\"/>\n<path fill=\"#A0A1A2\" d=\"M21.886,43.656c-6.662,0-12.926-2.594-17.637-7.305c-0.68-0.68-0.68-1.781,0-2.461\n\tc0.68-0.679,1.781-0.68,2.461,0c4.054,4.054,9.443,6.286,15.176,6.286c5.733,0,11.122-2.232,15.176-6.286\n\tc4.054-4.054,6.286-9.443,6.286-15.176S41.116,7.592,37.062,3.538c-0.68-0.68-0.68-1.781,0-2.461c0.68-0.68,1.782-0.679,2.461,0\n\tc4.711,4.711,7.305,10.974,7.305,17.637s-2.594,12.926-7.305,17.637S28.548,43.656,21.886,43.656z\"/>\n<path opacity=\"0.2\" fill=\"#1E1E1E\" d=\"M31.612,28.442c-3.221,3.222-7.105,5.373-11.211,6.469c-2.025,0.54-4.105,0.818-6.187,0.842\n\tc3.95,1.775,8.379,2.142,12.515,1.038c3.074-0.82,5.981-2.431,8.392-4.842c3.879-3.879,5.699-9.038,5.461-14.117\n\tc-0.111-2.361-0.679-4.7-1.679-6.891C38.857,17.279,36.449,23.605,31.612,28.442z\"/>\n<circle fill=\"#FFFFFF\" cx=\"21.817\" cy=\"27.096\" r=\"2.904\"/>\n<polygon fill=\"#FFFFFF\" points=\"22.25,9.379 21.383,9.379 19.213,9.379 19.988,22.846 21.383,22.846 22.25,22.846 23.646,22.846 \n\t24.421,9.379 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding Hide Key to Gallery Package Manifest\nDESCRIPTION: JSON configuration to add a hide key filter to the manifest.json file for package visibility control.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"filters\": [\n  {\n    \"type\": \"HideKey\",\n    \"value\": \"HIDEKEY_NAME_HERE\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtensionDefinition for Azure Portal Extensions\nDESCRIPTION: Sample implementation of an ExtensionDefinition class that configures extension-specific settings such as PreInitializeBundles and ExtensionConfiguration. This example shows how to export the definition through MEF and inject ArmConfiguration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-migrate-existing-to-extensioncontrollerbase.md#2025-04-23_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Export(typeof(ExtensionDefinition))]\ninternal class SamplesExtensionDefinition : ExtensionDefinition\n{\n    [ImportingConstructor]\n    public SamplesExtensionDefinition(ArmConfiguration armConfiguration)\n    {\n        this.PreInitializeBundles = new[] { new SamplesExtensionScripts() };\n        this.ExtensionConfiguration = new Dictionary<string, object>()\n        {\n            { \"armEndpoint\", armConfiguration.ArmEndpoint }\n        };\n    }\n\n    public override string GetTitle(PortalRequestContext context)\n    {\n        return ClientResources.samples;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags Icon in SVG\nDESCRIPTION: SVG markup defining the 'Tags' icon for the Azure portal. It creates multiple overlapping tag shapes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_172\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#7FBA00\" d=\"M34.5,0l-9.9,0.4L3.9,21.1l14.7,14.7l20.7-20.7l0.8-9.5L34.5,0z M35.3,7.7c-0.8,0.8-2.1,0.8-2.9,0\n\tc-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0C36.1,5.6,36.1,6.9,35.3,7.7z\"/>\n<polygon opacity=\"0.1\" fill=\"#FFFFFF\" points=\"3.9,21.1 18.6,35.8 21.9,32.5 21.9,3.1 \"/>\n<path opacity=\"0.3\" fill=\"#1E1E1E\" d=\"M36.5,3.6c-1.5-1.5-3.8-1.5-5.3,0c-1.5,1.5-1.5,3.8,0,5.3c1.5,1.5,3.8,1.5,5.3,0\n\tC38,7.4,38,5,36.5,3.6z M35.3,7.7c-0.8,0.8-2.1,0.8-2.9,0c-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0C36.1,5.6,36.1,6.9,35.3,7.7\n\tz\"/>\n<path fill=\"#3999C6\" d=\"M37.5,7.1l-9.9,0.4L6.9,28.2l14.7,14.7l20.7-20.7l0.8-9.5L37.5,7.1z M38.3,14.8c-0.8,0.8-2.1,0.8-2.9,0\n\tc-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0C39.1,12.7,39.1,14,38.3,14.8z\"/>\n<polygon opacity=\"0.1\" fill=\"#FFFFFF\" points=\"6.9,28.2 21.6,42.9 24.9,39.6 24.9,10.2 \"/>\n<path opacity=\"0.3\" fill=\"#1E1E1E\" d=\"M39.5,10.7c-1.5-1.5-3.8-1.5-5.3,0c-1.5,1.5-1.5,3.8,0,5.3c1.5,1.5,3.8,1.5,5.3,0\n\tC41,14.5,41,12.2,39.5,10.7z M38.3,14.8c-0.8,0.8-2.1,0.8-2.9,0c-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0\n\tC39.1,12.7,39.1,14,38.3,14.8z\"/>\n<path fill=\"#804998\" d=\"M40.5,14.2l-9.9,0.4L9.9,35.3L24.6,50l20.7-20.7l0.8-9.5L40.5,14.2z M41.3,21.9c-0.8,0.8-2.1,0.8-2.9,0\n\tc-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0C42.1,19.8,42.1,21.1,41.3,21.9z\"/>\n<polygon opacity=\"0.1\" fill=\"#FFFFFF\" points=\"9.9,35.3 24.6,50 27.9,46.7 27.9,17.3 \"/>\n<path opacity=\"0.3\" fill=\"#1E1E1E\" d=\"M42.5,17.8c-1.5-1.5-3.8-1.5-5.3,0c-1.5,1.5-1.5,3.8,0,5.3c1.5,1.5,3.8,1.5,5.3,0\n\tC44,21.6,44,19.3,42.5,17.8z M41.3,21.9c-0.8,0.8-2.1,0.8-2.9,0c-0.8-0.8-0.8-2.1,0-2.9c0.8-0.8,2.1-0.8,2.9,0\n\tC42.1,19.8,42.1,21.1,41.3,21.9z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Trace Endpoint in XML Web.config\nDESCRIPTION: Shows how to modify the web.config to change the default trace endpoint for custom handling of traces.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Portal.Extensions.SamplesExtension.ApplicationConfiguration.ClientTraceUri\"\n     value=\"~/MyController/MyTraceAction\" />\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Clone in Azure Portal\nDESCRIPTION: An SVG icon representing a cloning action. Used in the Azure Portal UI to indicate functionality for duplicating or cloning resources or objects.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_116\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M12,11v8H6v-8H12 M15,8H3v14h12V8L15,8z\"/>\n<polyline points=\"18,5 18,13 16,13 16,16 21,16 21,2 21,2 9,2 9,7 12,7 12,5 18,5 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Screen TemplateBlade in PDL\nDESCRIPTION: This XML snippet shows how to configure a TemplateBlade to open in full screen mode by adding the InitialState attribute set to 'Maximized'.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-blades-template-pdl.md#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<TemplateBlade\n            Name=\"MyTemplateBlade\"\n            ViewModel=\"{ ViewModel Name=MyTemplateBladeViewModel, Module=./ViewModels/MyTemplateBladeViewModel }\"\n            InitialDisplayState=\"Maximized\"\n            Template=\"{ Html Source='Templates\\\\MyTemplateBlade.html' }\">\n</TemplateBlade>\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Icon in SVG\nDESCRIPTION: SVG markup defining the 'Stop' icon for the Azure portal. It creates a square stop button shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_167\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Properties for Ev2 Deployment in CoreXT\nDESCRIPTION: Example of customized build configuration for a playground extension in CoreXT. This configuration sets properties to control Ev2 template generation and deployment artifact creation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-ev2.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <HostingServiceCreateDeploymentArtifacts>$(IsOfficialBuild)</HostingServiceCreateDeploymentArtifacts>\n    <HostingServiceRoutePrefix>[YourExtensionNameInHostingService]<</HostingServiceRoutePrefix>\n    <HostingServiceEv2ExportTemplates>true</HostingServiceEv2ExportTemplates>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Elements using FindElements in C#\nDESCRIPTION: Shows how to use the FindElements method in combination with LINQ to verify that a specific element is not present in the Portal, useful for negative test cases.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-best-practices.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nwebDriver.WaitUntil(() => portal.StartBoard.FindElements<Part>()\n                                           .Count(p => p.PartTitle.Equals(\"John Doe\")) == 0,\n                    \"Expected to not find a part with title 'John Doe' in the StartBoard\");\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Gallery Package Filters\nDESCRIPTION: Command to update hide keys and subscription filters for an existing gallery package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/gallery-sdk/generated/index-gallery.md#2025-04-23_snippet_11\n\nLANGUAGE: bat\nCODE:\n```\n> Microsoft.Azure.Gallery.AzureGalleryUtility.exe update -i [Publisher].[Name].[Version] -h [comma-separated hide key list] -sf [comma-separated subscription guid list]\n```\n\n----------------------------------------\n\nTITLE: Example Development Mode Configuration for Monitoring Extension\nDESCRIPTION: Example web.config setting showing development mode configuration for the monitoring extension.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"Microsoft.Portal.Extensions.MonitoringExtension.ApplicationConfiguration.IsDevelopmentMode\" value=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon - Code\nDESCRIPTION: SVG markup for a code/development icon with blue background and white code brackets symbols\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_18\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M-0.5,45.1c0,1.1,0.9,2,2,2h46c1.1,0,2-0.9,2-2v-32h-50V45.1z\"/>\n<path fill=\"#A0A1A2\" d=\"M47.5,4.5h-46c-1.1,0-2,0.9-2,2v7.3h50V6.5C49.5,5.4,48.6,4.5,47.5,4.5z\"/>\n<rect x=\"-0.5\" y=\"13.8\" opacity=\"0.15\" fill=\"#FFFFFF\" enable-background=\"new    \" width=\"50\" height=\"3.3\"/>\n<path opacity=\"0.1\" fill=\"#FFFFFF\" enable-background=\"new    \" d=\"M1.5,4.5c-1.1,0-2,0.9-2,2v7.3v3.3v28c0,1.1,0.9,2,2,2h19.2L43.1,4.5H1.5z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Themed Color Classes for Text Styling\nDESCRIPTION: List of themed color classes available for text styling in the Azure Portal. These classes adapt to user-chosen themes and maintain readability by ensuring proper contrast.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n// Suited for main text, will render with the highest contrast\nmsportalfx-text-default\n\n// Suited for labels, subheaders, or any secondary text\nmsportalfx-text-muted-50\n\n// Suited for links, or call to action text\nmsportalfx-link-primary\n\n// Suited for highlighting searched text\nmsportalfx-highlight\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Unlock Icon in Azure Portal\nDESCRIPTION: SVG definition for the Unlock icon that can be accessed through MsPortalFx.Base.Images.Unlock(). The icon represents an unlocked padlock with a keyhole.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_180\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"-0.5 0.5 24 24\" enable-background=\"new -0.5 0.5 24 24\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M15.5,12.5h-7V9.13c0-0.97,0.36-2.26,0.92-2.87S11.19,5.3,12,5.29c0.81,0.01,2.02,0.36,2.58,0.97\n\t\tc0.56,0.61,0.92,1.47,0.92,2.44v1.738l3,0.062V8.7c0-1.68-0.62-3.23-1.66-4.35C15.82,3.22,13.62,2.5,12,2.5S8.18,3.22,7.16,4.35\n\t\tC6.12,5.47,5.5,7.02,5.5,8.7v3.8h0.01c-1.479,0-2.01,0.875-2.01,2v6c0,0.979,0.609,2,1.74,2h13.52c1.302,0,1.74-1.021,1.74-2v-6\n\t\tc0-1.016-0.406-2-2.01-2h0.01H15.5z\"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Adding ClientTraceUri Property in C# ApplicationConfiguration\nDESCRIPTION: Demonstrates how to update the ApplicationConfiguration.cs class to include a ClientTraceUri property for custom trace handling.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-telemetry-logging.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ConfigurationSetting]\npublic AppRelativePath ClientTraceUri\n{\n    get;\n    private set;\n}\n```\n\n----------------------------------------\n\nTITLE: Scale SVG Icon Definition\nDESCRIPTION: SVG path and rectangle definitions for a scale/resize icon with event handling. Uses fill rules and clipping paths.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_73\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"-0.5 0.5 50 50\" enable-background=\"new -0.5 0.5 50 50\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#A0A1A2\" d=\"M36.167,27.167v10H12.833V13.833h9.997v-5H11.167\n\tc-1.841,0-3.333,1.493-3.333,3.333v26.667c0,1.841,1.493,3.333,3.333,3.333h26.667c1.841,0,3.333-1.493,3.333-3.333V27.167H36.167z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Monitoring Package in NuGet\nDESCRIPTION: Command to install the Microsoft.Portal.Extensions.Monitoring NuGet package for use with Azure Monitoring. The package is installed from the Microsoft Azure NuGet feed.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-sharing-pde.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Portal.Extensions.Monitoring -Source https://msazure.pkgs.visualstudio.com/DefaultCollection/_packaging/Official/nuget/v3/index.json -Version 1.0.26.0\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Web Hosting Icon in Azure Portal\nDESCRIPTION: Partial SVG code for a Web Hosting icon used in the Azure Portal. This appears to be an incomplete definition that would likely display a web server or hosting-related visual.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_89\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Waiting for Grid Columns to Load in C#\nDESCRIPTION: This snippet shows how to wait for all expected column headers to be loaded in the browse blade grid before proceeding with further actions. It uses a custom wait function to check for the presence and order of specified columns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-testing-cs-openbrowse.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar browseGridColumns = new List<string>() { \"NAME\", \"SUBSCRIPTION\", \"LOCATION\" };\n\n// You probably want to wrap this in a function for re-use.  This is inlined for documenation purposes only\nwebDriver.WaitUntil(\n        () =>\n        {\n            var headers = rgBrowseGrid.Headers.ToList();\n            if (headers.Count != browseGridColumns.Count)\n            {\n                return false;\n            }\n            for (var index = 0; index < browseGridColumns.Count; index++)\n            {\n                if (!headers[index].Text.Equals(browseGridColumns[index], StringComparison.OrdinalIgnoreCase))\n                {\n                    return false;\n                }\n            }\n            return true;\n        },\n        \"Columns never finished loading or they were incorrect\");\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for AddTeamMember Icon\nDESCRIPTION: Icon for adding a team member in Azure Portal, featuring a user silhouette with a plus sign. Uses blue (#59B4D9) as the primary color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_100\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M42.959,15.338c0,4.947-4.011,8.959-8.96,8.959c-4.948,0-8.958-4.011-8.958-8.959\n\tc0-4.947,4.01-8.958,8.958-8.958C38.948,6.38,42.959,10.391,42.959,15.338\"/>\n<polygon fill=\"#59B4D9\" points=\"40.55,27.368 34,36.546 27.449,27.368 18,27.368 18,50 50,50 50,27.368 \"/>\n<polygon fill=\"#59B4D9\" points=\"8.211,23.289 8.211,18.5 4.789,18.5 4.789,23.289 0,23.289 0,26.711 4.789,26.711 4.789,31.5 \n\t8.211,31.5 8.211,31.411 8.211,26.711 12.911,26.711 13,26.711 13,23.289 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Network Combo Label Properties in Azure Portal\nDESCRIPTION: Markdown table defining the required properties for the VirtualNetworkCombo label control. Specifies that virtualNetwork and subnets display text are required properties, while fx.feature is optional.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-control-Microsoft.Network.VirtualNetworkCombo-label.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Required | Description\n| ---|:--:|:--:|\n|virtualNetwork|True|Display text for Virtual Network.\n|subnets|True|Display text for Subnets.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: Defining CodePlex Logo SVG\nDESCRIPTION: SVG code for the CodePlex logo. It defines a 30x30 pixel image with paths representing the CodePlex icon using purple and white colors.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_194\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"30px\" height=\"30px\" viewBox=\"-0.5 0.5 30 30\" enable-background=\"new -0.5 0.5 30 30\" xml:space=\"preserve\">\n<path fill=\"#804998\" d=\"M29.5,26.5H16.441l7.491-7.444v-7.574l-7.491-7.527H29.5V26.5z\"/>\n<path opacity=\"0.4\" fill=\"#FFFFFF\" d=\"M29.5,26.5H16.441l7.491-7.444v-7.574l-7.491-7.527H29.5V26.5z\"/>\n<path fill=\"#3E3E3E\" d=\"M10.754,19.021c-2.078,0-3.763-1.686-3.763-3.764v-0.107c0-2.078,1.686-3.763,3.763-3.763h3.763V3.908h-3.87\n\tC4.486,3.908-0.5,8.894-0.5,15.044v0.321c0,6.149,4.986,11.136,11.148,11.136h3.87v-7.479H10.754L10.754,19.021z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Unbundler in XML Project File\nDESCRIPTION: Example configuration for the Content Unbundler tool in a CoreXT environment. This shows how to customize the build process to generate the extension package.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-hosting-service-legacy-contentunbundler.md#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ContentUnbundlerSourceDirectory>$(WebProjectOutputDir.Trim('\\'))</ContentUnbundlerSourceDirectory>\n    <ContentUnbundlerOutputDirectory>$(BinariesBuildTypeArchDirectory)\\HostingSvc</ContentUnbundlerOutputDirectory>\n    <ContentUnbundlerExtensionRoutePrefix>[YourExtensionNameInHostingService]</ContentUnbundlerExtensionRoutePrefix>\n    <ContentUnbundlerZipOutput>true</ContentUnbundlerZipOutput>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definition: DevConsole\nDESCRIPTION: SVG markup for a developer console icon with dark background and white keyboard symbols. Used in the Azure Portal UI through the MsPortalFx.Base.Images.Polychromatic.DevConsole() function.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_24\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M0,44.525c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V12.531H0V44.525z\"/>\n<path fill=\"#A0A1A2\" d=\"M47.993,3.898H2.007C0.898,3.898,0,4.796,0,5.904v7.291h50V5.904C50,4.796,49.101,3.898,47.993,3.898z\"/>\n<rect y=\"13.195\" opacity=\"0.15\" fill=\"#FFFFFF\" width=\"50\" height=\"3.336\"/>\n<path opacity=\"0.1\" fill=\"#FFFFFF\" d=\"M2.014,3.898c-1.108,0-2.007,0.898-2.007,2.007v7.291v3.336v27.993\n\tc0,1.108,0.899,2.007,2.007,2.007h19.188L43.62,3.898H2.014z\"/>\n<polygon fill=\"#FFFFFF\" points=\"7.363,37.231 7.363,35.96 16.343,31.535 16.343,31.481 7.363,26.46 7.363,25.215 18.397,31.403 \n\t18.397,31.641 \"/>\n<rect x=\"17.621\" y=\"41.683\" fill=\"#FFFFFF\" width=\"11.262\" height=\"1.576\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Data Merge Warning Example\nDESCRIPTION: Console warning message that appears when attempting to merge array data without proper type metadata configuration.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBase.Diagnostics.js:351 [Microsoft_Azure_FooBar]  18:55:54\nMsPortalFx/Data/Data.DataSet Data.DataSet: Data of type [No type specified] is being merged without identity because the type has no metadata. Please supply metadata for this type.\n```\n\n----------------------------------------\n\nTITLE: Key SVG Icon Definition\nDESCRIPTION: SVG definition for the Key icon used in the Azure Portal. The icon depicts a stylized key symbol, representing security, authentication, or access control features in the portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_143\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<path d=\"M18,15c1.6,0,3-1.3,3-3V5c0-1.7-1.3-3-3-3H11C9.4,2,8,3.3,8,5v6.2l-6,6V21h3.3l0,0h1.9v-1.9h1.9v-1.9H11v-1.9l0.3-0.3H18z\n\t M18.7,4.3c0.6,0.6,0.6,1.7,0,2.3s-1.7,0.6-2.3,0c-0.6-0.6-0.6-1.7,0-2.3C17,3.7,18,3.7,18.7,4.3z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Verifying MessageBox Completion in C#\nDESCRIPTION: Demonstrates how to properly wait for a message box to be dismissed before proceeding with subsequent test actions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\ncommandBar.FindMessageBox(\"Delete contact\").ClickButton(\"Yes\");\nwebDriver.WaitUntil(() => !commandBar.HasMessageBox, \"There is still a message box in the command bar.\");\n```\n\n----------------------------------------\n\nTITLE: Finding StartBoard Part - Manual Approach\nDESCRIPTION: Demonstrates the verbose way of finding a StartBoard part by title using WaitUntil and LINQ.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar part = webDriver.WaitUntil(\n    () => portal.StartBoard.FindElements<Part>()\n    .FirstOrDefault(p => p.PartTitle.Equals(\"TheTitle\")),\n    \"Could not find a part with title 'Samples'.\");\n```\n\n----------------------------------------\n\nTITLE: Defining SVG for Disabled Status Badge in Azure Portal\nDESCRIPTION: SVG definition for the Disabled status badge that can be accessed through MsPortalFx.Base.Images.StatusBadge.Disabled(). The icon shows a pink/magenta circle with a horizontal line representing a disabled state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_190\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"16px\" height=\"16px\" viewBox=\"0.5 16.5 16 16\" enable-background=\"new 0.5 16.5 16 16\" xml:space=\"preserve\">\n<circle fill=\"#EC008C\" cx=\"8.5\" cy=\"24.5\" r=\"8\"/>\n<rect x=\"3.5\" y=\"23.5\" fill=\"#FFFFFF\" width=\"10\" height=\"2\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Media File SVG Icon for Azure Portal\nDESCRIPTION: SVG markup defining the Media File icon used in the Azure portal. The icon represents a file with media playback controls.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_58\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#59B4D9\" points=\"45,6.761 40.239,2 38.239,0 38,0 3,0 3,50 47,50 47,9 47,8.761 \"/>\n<polygon opacity=\"0.8\" fill=\"#FFFFFF\" points=\"38,2 5,2 5,48 45,48 45,9 38,9 \"/>\n<path fill=\"#59B4D9\" d=\"M38.857,24.738c0,0.618-0.501,1.119-1.119,1.119H22.637c-0.618,0-1.119-0.501-1.119-1.119\n\tc0-0.618,0.501-1.119,1.119-1.119h15.101C38.356,23.619,38.857,24.12,38.857,24.738\"/>\n<polygon fill=\"#59B4D9\" points=\"11.509,11.203 24.765,18.844 11.509,26.485 \"/>\n<path fill=\"#59B4D9\" d=\"M38.857,29.89c0,0.618-0.501,1.118-1.119,1.118h-25.11c-0.617,0-1.118-0.5-1.118-1.118\n\tc0-0.618,0.501-1.119,1.118-1.119h25.11C38.356,28.771,38.857,29.272,38.857,29.89\"/>\n<path fill=\"#59B4D9\" d=\"M38.857,35.042c0,0.618-0.501,1.119-1.119,1.119h-25.11c-0.617,0-1.118-0.501-1.118-1.119\n\tc0-0.617,0.501-1.119,1.118-1.119h25.11C38.356,33.923,38.857,34.425,38.857,35.042\"/>\n<path fill=\"#59B4D9\" d=\"M38.857,40.194c0,0.618-0.501,1.119-1.119,1.119h-25.11c-0.617,0-1.118-0.501-1.118-1.119\n\tc0-0.618,0.501-1.119,1.118-1.119h25.11C38.356,39.075,38.857,39.576,38.857,40.194\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional REST Call in Azure Portal Form\nDESCRIPTION: Demonstrates how to configure a conditional REST API call that executes based on a specified condition, useful for validation scenarios.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Solutions.ArmApiControl.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"botIdCheck\",\n    \"type\": \"Microsoft.Solutions.ArmApiControl\",\n    \"condition\": \"[greater(length(steps('basics').botId), 0)]\",\n    \"request\": {\n        \"method\": \"POST\",\n        \"path\": \"providers/Microsoft.BotService/checkNameAvailability?api-version=2018-07-12\",\n        \"body\": {\n            \"type\": \"\",\n            \"name\": \"[steps('basics')botId]\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ResourceScope Outputs via Expressions in Azure Portal Forms\nDESCRIPTION: Demonstrates how to reference various output properties of a 'ResourceScope' control named 'resourceScope' located in a step named 'step1' within an Azure Portal Form view. These expressions retrieve details such as resource group ID, name, location, mode, subscription information, management group data, selected location, and resource name.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceScope-output.md#2025-04-23_snippet_0\n\nLANGUAGE: Azure Expression Language\nCODE:\n```\n[steps('step1').resourceScope.resourceGroup.id]\n[steps('step1').resourceScope.resourceGroup.name]\n[steps('step1').resourceScope.resourceGroup.location]\n[steps('step1').resourceScope.resourceGroup.mode]\n[steps('step1').resourceScope.subscription.id]\n[steps('step1').resourceScope.subscription.subscriptionId]\n[steps('step1').resourceScope.subscription.displayName]\n[steps('step1').resourceScope.subscription.tenantId]\n[steps('step1').resourceScope.managementGroup.id]\n[steps('step1').resourceScope.managementGroup.name]\n[steps('step1').resourceScope.managementGroup. displayName]\n[steps('step1').resourceScope.location.name]\n[steps('step1').resourceScope.location.displayName]\n[steps('step1').resourceScope.resourceName]\n```\n\n----------------------------------------\n\nTITLE: Displaying Visual Studio Logo SVG in Azure Portal\nDESCRIPTION: SVG markup for the Visual Studio logo with purple branding. This is a simplified vector representation of the Visual Studio logo suitable for UI elements in the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_202\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"21px\" height=\"21px\" viewBox=\"0 0 21 21\" enable-background=\"new 0 0 21 21\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#68217A\" d=\"M9.714,10.007L15,5.893v8.229L9.714,10.007z M2,13.007v-6l3,3\n\tL2,13.007z M15,0.007L7.064,7.943L2,4.007l-2,1v10l2,1l5.064-3.936L15,20.007l5-2v-16L15,0.007z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Custom Domain Icon Implementation\nDESCRIPTION: SVG implementation of a custom domain icon featuring a browser window design with multiple paths and opacity effects. Uses blue and gray color scheme.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_22\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#0072C6\" d=\"M0,44.474c0,1.108,0.898,2.007,2.007,2.007h45.986c1.109,0,2.007-0.899,2.007-2.007V13.145H0V44.474z\"/>\n```\n\n----------------------------------------\n\nTITLE: Linking to a Resource by ID - URL Pattern - Plaintext\nDESCRIPTION: Describes the URL schema for opening a specific Azure ARM resource by directory and resource ID in the portal. Variables include {directory} and {resource id}; non-tenant and non-nested resources only are supported. Outputs a targeted resource details view when visited.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#@{directory}/resource/{resource id}\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Add Icon\nDESCRIPTION: Simple plus sign icon for adding items or resources in Azure Portal. The SVG consists of two intersecting rectangles forming a plus shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_98\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"16px\" width=\"16px\" viewBox=\"0 0 16 16\" enable-background=\"new 0 0 16 16\" xml:space=\"preserve\">\n<g>\n\t<polygon points=\"10,16 6,16 6,0 10,0 10,15.9 \"/>\n</g>\n<g>\n\t<polygon points=\"15.9,10 0,10 0,6 16,6 16,10 \"/>\n</g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon for Alternative Gear in Azure Portal\nDESCRIPTION: SVG definition for an alternative gear icon, featuring a simpler design compared to the main gear icon. This version may be used in different contexts or sizes within the Azure Portal.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_132\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M50,27.7V22l-0.8-0.3l-6.1-2l-1.6-3.9l3.1-6.6l-4-4l-0.8,0.4l-5.7,2.9l-3.9-1.6L27.7,0H22l-0.3,0.8l-2,6.1\n\tl-3.9,1.6L9.3,5.4l-4,4l0.4,0.8l2.9,5.7l-1.6,3.9L0,22.3V28l0.8,0.3l6.1,2l1.6,3.9l-3.1,6.6l4,4l0.8-0.4l5.7-2.9l3.9,1.6l2.5,6.9H28\n\tl0.3-0.8l2-6.1l3.9-1.6l6.6,3.1l4-4l-0.4-0.8l-2.9-5.7l1.6-3.9L50,27.7z M25,33.5c-4.7,0-8.5-3.8-8.5-8.5s3.8-8.5,8.5-8.5\n\ts8.5,3.8,8.5,8.5S29.7,33.5,25,33.5z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Extensions in Portal Tests\nDESCRIPTION: A query string pattern using canmodifyextensions feature flag to disable specific extensions while testing in the Portal environment. This allows for targeted testing with specific extension configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n?feature.canmodifyextensions=true&ExtensionNameToDisable=false\n```\n\nLANGUAGE: text\nCODE:\n```\n?feature.canmodifyextensions=true&MyOldExtension=false&MyNewExtension=true\n```\n\n----------------------------------------\n\nTITLE: Creating Location Icon with Pin Marker in SVG\nDESCRIPTION: Definition of a location/map pin icon. The SVG uses a green pin shape with additional concentric rings elements suggesting location targeting. The icon includes both the main pin and indicators of range.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_53\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path opacity=\"0.8\" fill=\"#3E3E3E\" d=\"M21.666,38.421c0,2.161,1.752,3.914,3.913,3.914c2.162,0,3.914-1.753,3.914-3.914\n\tc0-1.43-0.775-2.666-1.92-3.35c-0.662,1.107-1.106,1.822-1.193,1.96l-0.801,1.286l-0.801-1.286c-0.086-0.138-0.531-0.853-1.193-1.96\n\tC22.439,35.755,21.666,36.991,21.666,38.421\"/>\n<path opacity=\"0.5\" fill=\"#3E3E3E\" d=\"M17.668,38.421c0,4.363,3.549,7.911,7.909,7.911c4.363,0,7.912-3.548,7.912-7.911\n\tc0-2.896-1.569-5.426-3.895-6.804c-0.238,0.416-0.471,0.82-0.693,1.2c1.913,1.138,3.203,3.221,3.203,5.604\n\tc0,3.599-2.928,6.525-6.527,6.525c-3.598,0-6.524-2.926-6.524-6.525c0-2.383,1.289-4.466,3.201-5.604\n\tc-0.221-0.38-0.453-0.784-0.69-1.2C19.236,32.995,17.668,35.525,17.668,38.421\"/>\n<path opacity=\"0.2\" fill=\"#3E3E3E\" d=\"M31.381,28.417c-0.227,0.413-0.448,0.816-0.668,1.214c3.02,1.77,5.058,5.044,5.058,8.79\n\tc0,5.62-4.574,10.192-10.193,10.192c-5.621,0-10.192-4.572-10.192-10.192c0-3.747,2.038-7.02,5.057-8.79\n\tc-0.219-0.398-0.443-0.801-0.667-1.214C16.328,30.424,14,34.151,14,38.421c0,6.385,5.193,11.58,11.578,11.58\n\tc6.385,0,11.578-5.195,11.578-11.58C37.156,34.151,34.828,30.425,31.381,28.417\"/>\n<path fill=\"#B8D432\" d=\"M29.492,10.553c0,2.161-1.752,3.914-3.914,3.914c-2.161,0-3.914-1.753-3.914-3.914s1.753-3.914,3.914-3.914\n\tC27.74,6.639,29.492,8.392,29.492,10.553 M25.579,0c-6.393,0-11.573,5.183-11.573,11.574c0,6.393,11.573,24.958,11.573,24.958\n\ts11.574-18.565,11.574-24.958C37.152,5.183,31.97,0,25.579,0\"/>\n<path opacity=\"0.2\" fill=\"#FFFFFF\" d=\"M25.579,14.466c-2.161,0-3.913-1.752-3.913-3.913c0-2.162,1.752-3.914,3.913-3.914\n\tc1.484,0,2.761,0.837,3.425,2.056l2.358-7.135c-1.701-0.987-3.674-1.559-5.783-1.559c-6.393,0-11.574,5.181-11.574,11.572\n\tc0,3.98,4.484,12.673,7.87,18.672l5.342-16.148C26.716,14.328,26.166,14.466,25.579,14.466\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Search SVG Icon Definition\nDESCRIPTION: SVG path definitions for a search magnifying glass icon with fills and transforms. Includes hover state definitions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_74\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3E3E3E\" d=\"M47.092,8.89c-2.544-4.209-6.572-7.174-11.343-8.349C34.298,0.183,32.812,0,31.329,0\n\tc-8.472,0-15.818,5.768-17.863,14.024c-1.123,4.584-0.389,9.441,1.974,13.547L1.372,41.751c-1.841,1.861-1.828,4.862,0.033,6.704\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Initializing EditScopeView in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an EditScopeView object in the constructor of a ViewModel. It creates the EditScopeView from the dataContext and sets up the editScope observable.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-legacy-editscopes.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(container: MsPortalFx.ViewModels.PartContainerContract, dataContext: MasterDetailArea.DataContext, _mock: AjaxMock) {\n    super(container);\n\n    this._editScopeView = dataContext.editScopeCache.createView(container);\n\n    // Initialize editScope of the base class.\n    this.editScope = this._editScopeView.editScope;\n\n    // Setup editable form.\n    this._initializeForm(container);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying UI Element Based on ResourceScope Output in JSON\nDESCRIPTION: JSON snippet illustrating how to control the 'visible' property of a UI element (a location label) based on the 'modeName' output of a 'ResourceScope' control (accessed via steps().resourceScope.resourceGroup.modeName). The label becomes visible only when the resource group mode is 'New'. This uses the 'equals' function within the expression.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/controls/Microsoft.Common.ResourceScope-output.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"location\": {\n        \"label\": \"New resource group location\",\n        \"visible\": \"[equals('New', steps('basics').resourceScope.resourceGroup.modeName)]\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Columns in Azure Portal\nDESCRIPTION: An SVG icon representing columns or a tabular layout. Used in the Azure Portal UI to indicate functionality related to column views, tables, or grid layouts.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_118\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t height=\"24px\" width=\"24px\" viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\n<rect x=\"2\" y=\"5\" width=\"9\" height=\"3\"/>\n<rect x=\"13\" y=\"5\" width=\"9\" height=\"3\"/>\n<rect x=\"2\" y=\"10\" width=\"9\" height=\"3\"/>\n<rect x=\"13\" y=\"10\" width=\"9\" height=\"3\"/>\n<rect x=\"2\" y=\"15\" width=\"9\" height=\"3\"/>\n<rect x=\"13\" y=\"15\" width=\"9\" height=\"3\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for Builds Icon in Azure Portal\nDESCRIPTION: SVG markup for the Builds icon used in the Azure Portal. It shows a build concept with a purple arrow and green block elements representing build components or processes.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_11\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0.5 0.5 50 50\" enable-background=\"new 0.5 0.5 50 50\" xml:space=\"preserve\">\n<polygon fill=\"#804998\" points=\"26.931,12.098 33.833,5.55 33.833,9.103 25.504,17.854 17.167,9.134 17.167,5.592 24.032,12.098 \n\t24.032,0.5 26.931,0.5 \"/>\n<path fill=\"#804998\" d=\"M0.5,48.647c0,1.021,0.836,1.853,1.848,1.853h46.295c1.02,0,1.853-0.832,1.853-1.853L50.5,15.508h-3.768\n\tv15.796H4.201V15.508H0.5V48.647z\"/>\n<rect x=\"4.228\" y=\"31.304\" opacity=\"0.35\" fill=\"#FFFFFF\" enable-background=\"new    \" width=\"42.5\" height=\"15.206\"/>\n<rect x=\"21.146\" y=\"19.979\" fill=\"#B8D432\" width=\"8.323\" height=\"8.324\"/>\n<rect x=\"33.564\" y=\"19.979\" fill=\"#B8D432\" width=\"8.32\" height=\"8.324\"/>\n<rect x=\"8.729\" y=\"19.979\" fill=\"#B8D432\" width=\"8.324\" height=\"8.324\"/>\n<rect x=\"26.673\" y=\"34.474\" fill=\"#B8D432\" width=\"8.323\" height=\"8.324\"/>\n<rect x=\"14.256\" y=\"34.474\" fill=\"#B8D432\" width=\"8.324\" height=\"8.324\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using Custom CSS Classes in HTML Templates for Azure Portal Extensions\nDESCRIPTION: Demonstrates how to apply custom CSS classes in an HTML template with data binding. The example shows a warning message that appears when a user exceeds click limits, featuring a reset button.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-custom-css-file.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ext-too-many-clicks-box\" data-bind=\"visible: !allowMoreClicks()\">\n    That's too many clicks!\n    <button data-bind=\"click: resetClickCount\">Reset</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: SVG Definition for an Azure Portal Icon\nDESCRIPTION: A collection of SVG icon definitions used in the Azure Portal. Each SVG includes vector paths that define the shape and appearance of various UI icons. The icons use a consistent color scheme and design language.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_136\n\nLANGUAGE: SVG\nCODE:\n```\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M49.859,22.381c-0.728-6.937-4.271-12.883-9.273-16.928c-0.971-0.786-2.018-1.472-3.1-2.1L35.523,7.13\n\tc0.83,0.493,1.636,1.024,2.385,1.632c4.196,3.395,7.116,8.312,7.723,14.063c0.602,5.706-1.165,11.093-4.504,15.226\n\tc-3.349,4.131-8.25,6.98-13.955,7.581c-3.82,0.4-7.489-0.277-10.744-1.761l-1.961,3.774c3.976,1.851,8.479,2.708,13.151,2.214\n\tc6.862-0.719,12.796-4.164,16.814-9.133C48.453,35.763,50.587,29.239,49.859,22.381\"/>\n<path fill=\"#59B4D9\" d=\"M11.951,41.123c-4.133-3.346-6.978-8.247-7.581-13.949C3.771,21.466,5.532,16.08,8.878,11.946\n\tc3.343-4.13,8.246-6.977,13.951-7.578c4.613-0.484,9.016,0.574,12.694,2.76l1.963-3.776c-4.416-2.564-9.661-3.787-15.105-3.214\n\tC15.522,0.861,9.588,4.305,5.569,9.27L5.562,9.279c-4.018,4.965-6.144,11.484-5.423,18.338c0.723,6.859,4.164,12.796,9.135,16.815\n\tc1.582,1.282,3.335,2.346,5.194,3.212l1.961-3.774C14.826,43.14,13.315,42.227,11.951,41.123\"/>\n<path fill=\"#59B4D9\" d=\"M27.834,12.422h-1.433l-2.596-3.959c-0.154-0.231-0.258-0.406-0.318-0.523h-0.016\n\tc0.022,0.234,0.035,0.574,0.035,1.019v3.463h-1.341V6.12h1.529l2.5,3.837l0.318,0.514h0.016c-0.022-0.153-0.035-0.442-0.035-0.865\n\tV6.12h1.341C27.834,6.12,27.834,12.422,27.834,12.422z\"/>\n<polygon opacity=\"0.8\" fill=\"#59B4D9\" points=\"20.322,27.103 25,41.406 25,27.103 \"/>\n<polygon fill=\"#59B4D9\" points=\"20.322,27.104 25,27.104 25,27.103 25,12.803 \"/>\n<polygon opacity=\"0.8\" fill=\"#59B4D9\" points=\"25,12.803 25,27.103 29.678,27.103 \"/>\n<polygon opacity=\"0.6\" fill=\"#59B4D9\" points=\"25,27.103 25,41.406 29.678,27.103 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Status Palette CSS Styling\nDESCRIPTION: CSS styles for status indicators including info, success, dirty, error, and warning states. Defines background colors, text colors, border colors, and SVG fill colors for each state.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n#statuspalette .statuscontainer {\n    display: inline-flex;\n    flex-flow: column nowrap;\n  }\n\n  .statuscontainer div {\n    padding: 10px;\n    width: 200px;\n    display: inline-block;\n    text-align: center;\n    margin: 3px auto;\n    border-width: 3px;\n    border-style: solid;\n  }\n\n  #statuspalette svg {\n    height: 10px;\n    width: 10px;\n    display: inline-block;\n    stroke: #000;\n  }\n```\n\n----------------------------------------\n\nTITLE: Completing Initialization of FrameBlade in JavaScript\nDESCRIPTION: Simulates an asynchronous operation with a 2-second delay before signaling to the parent portal that initialization is complete. Uses Q promise library for the delay implementation.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-frameblades.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction completeInitialization() {\n    // Mimic an async operation that takes 2 seconds.\n    Q.delay(2000).then(() => {\n        // Post message the 'initializationcomplete' to the parent to indicate that the part is\n        // now ready for user interaction.\n        postMessageToParent(\"initializationcomplete\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backlog Icon SVG in Azure Portal\nDESCRIPTION: SVG definition for the Backlog icon used in Azure Portal. It consists of rectangular shapes representing a list or backlog items.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#A0A1A2\" d=\"M48.083,28.179H17.287c-1.325,0-2.417-1.12-2.417-2.14c0-1.02,1.091-1.86,2.417-1.86h30.796\n\tc1.351,0,2.417,0.84,2.417,1.86C50.5,27.059,49.435,28.179,48.083,28.179z\"/>\n<path fill=\"#A0A1A2\" d=\"M48.083,12.587H17.287c-1.325,0-2.417-1.12-2.417-2.14s1.091-1.86,2.417-1.86h30.796\n\tc1.351,0,2.417,0.84,2.417,1.86S49.435,12.587,48.083,12.587z\"/>\n<path fill=\"#A0A1A2\" d=\"M48.109,43.772H17.287c-1.325,0-2.417-1.12-2.417-2.14c0-1.04,1.091-1.86,2.417-1.86h30.822\n\tc1.325,0,2.391,0.82,2.391,1.86C50.5,42.652,49.435,43.772,48.109,43.772z\"/>\n<polygon fill=\"#B8D432\" points=\"0.5,9.907 0.5,9.907 2.248,8.157 2.248,8.157 2.248,8.157 5.749,11.658 12.752,4.655 12.752,4.655 \n\t12.752,4.655 14.5,6.406 14.5,6.406 14.5,6.406 5.749,15.16 \"/>\n<polygon fill=\"#B8D432\" points=\"0.5,25.5 0.5,25.5 2.248,23.75 2.248,23.75 2.248,23.75 5.749,27.25 12.752,20.248 12.752,20.248 \n\t12.752,20.248 14.5,21.999 14.5,21.999 14.5,21.999 5.749,30.752 \"/>\n<polygon fill=\"#B8D432\" points=\"0.5,41.092 0.5,41.092 2.248,39.342 2.248,39.342 2.248,39.342 5.749,42.843 12.752,35.84 \n\t12.752,35.84 12.752,35.84 14.5,37.591 14.5,37.591 14.5,37.591 5.749,46.345 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Icon in SVG for Azure Portal\nDESCRIPTION: This SVG code defines a grid icon using multiple rectangular shapes with green fill color. The icon is likely used to represent a grid or table view in the Azure portal interface.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_40\n\nLANGUAGE: SVG\nCODE:\n```\n<rect x=\"5\" y=\"25.804\" fill=\"#B8D432\" width=\"8.868\" height=\"8.917\"/>\n<rect x=\"15.377\" y=\"25.804\" fill=\"#B8D432\" width=\"8.868\" height=\"8.917\"/>\n<rect x=\"25.728\" y=\"25.804\" fill=\"#B8D432\" width=\"8.895\" height=\"8.917\"/>\n<rect x=\"36.132\" y=\"25.804\" fill=\"#B8D432\" width=\"8.868\" height=\"8.917\"/>\n<rect x=\"5\" y=\"36.208\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"15.377\" y=\"36.208\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n<rect x=\"25.728\" y=\"36.208\" fill=\"#B8D432\" width=\"8.895\" height=\"8.792\"/>\n<rect x=\"36.132\" y=\"36.208\" fill=\"#B8D432\" width=\"8.868\" height=\"8.792\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Log Icon with Partial Path in SVG\nDESCRIPTION: Partial definition of a log icon. The SVG contains the beginning of a path definition for what appears to be a document or log representation, but the SVG definition is incomplete.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_54\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"-10.5 -9.5 50 50\" enable-background=\"new -10.5 -9.5 50 50\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M34.492,35.865h2V-9.5H-1.841h-2.667C-5.801-9.333-8.5-6.2-8.5-5.749c0,0.187,0.059,43.882,0.059,43.882\"\n```\n\n----------------------------------------\n\nTITLE: Opening a Form Blade with Parameters in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to open a Form Blade and pass parameters to it. It shows how to specify both key and optional parameters when creating the blade reference.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/views/viewTypeParameters.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontainer.openBlade(BladeReferences.forBlade(\"TestForm_Dx\").createReference({\n            parameters: {\n                keyParameter: \"default value for textBox\",\n                optionalParameter: \"some value\"\n            }\n        }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Default Icon in SVG\nDESCRIPTION: SVG implementation of ResourceDefault icon for the Azure Portal. The design uses geometric shapes with blue coloring to represent a generic Azure resource.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_69\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#3999C6\" d=\"M25.561,23.167c-0.103,0-0.197-0.03-0.288-0.083L6.011,12.045c-0.183-0.103-0.292-0.297-0.292-0.506\n\tc0-0.203,0.108-0.395,0.292-0.496L25.149,0.075c0.182-0.1,0.405-0.1,0.579,0L44.994,11.12c0.174,0.102,0.29,0.291,0.29,0.496\n\tc0,0.212-0.116,0.4-0.29,0.504L25.853,23.084C25.762,23.137,25.665,23.167,25.561,23.167\"/>\n<path fill=\"#59B4D9\" d=\"M22.792,50c-0.104,0-0.207-0.024-0.295-0.077L3.295,38.917C3.11,38.814,3,38.626,3,38.416V16.331\n\tc0-0.207,0.11-0.397,0.295-0.506c0.176-0.1,0.401-0.1,0.586,0L23.08,26.831c0.178,0.107,0.286,0.297,0.286,0.504v22.086\n\tc0,0.212-0.108,0.397-0.286,0.502C22.985,49.976,22.888,50,22.792,50\"/>\n<path fill=\"#59B4D9\" d=\"M28.225,50c-0.098,0-0.199-0.024-0.295-0.077c-0.178-0.105-0.288-0.289-0.288-0.502V27.478\n\tc0-0.207,0.11-0.397,0.288-0.504l19.196-11.002c0.185-0.102,0.403-0.102,0.587,0c0.176,0.103,0.287,0.295,0.287,0.5v21.943\n\tc0,0.211-0.111,0.398-0.287,0.502L28.511,49.923C28.429,49.976,28.325,50,28.225,50\"/>\n<path opacity=\"0.5\" fill=\"#FFFFFF\" d=\"M28.225,50c-0.098,0-0.199-0.024-0.295-0.077c-0.178-0.105-0.288-0.289-0.288-0.502V27.478\n\tc0-0.207,0.11-0.397,0.288-0.504l19.196-11.002c0.185-0.102,0.403-0.102,0.587,0c0.176,0.103,0.287,0.295,0.287,0.5v21.943\n\tc0,0.211-0.111,0.398-0.287,0.502L28.511,49.923C28.429,49.976,28.325,50,28.225,50\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Browse Columns for Printer Resources in TypeScript\nDESCRIPTION: This snippet defines the browse columns for printer resources, including status, model, and technology. It uses Knockout observables and custom status badges.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenublade.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n    id: BrowseColumns.status,\n    name: ko.observable<string>(ClientResources.Columns.Printer.status),\n    description: ko.observable<string>(ClientResources.Columns.Printer.statusDescription),\n    itemKey: BrowseColumns.StatusProperties.status,\n    width: ko.observable<string>(\"100px\"),\n    cellTemplate: StatusCell,\n    cellTemplateData: {\n        statusMap: {\n            [PrinterStatus.damaged.toLowerCase()]: {\n                svg: FxStatusBadges.Critical(),\n                text: ClientResources.Status.Printer.damaged,\n            },\n            [PrinterStatus.outOfPaper.toLowerCase()]: {\n                svg: FxStatusBadges.Warning(),\n                text: ClientResources.Status.Printer.outOfPaper,\n            },\n        },\n    },\n},\n\n// Column for the technology using a custom column.\n{\n    id: BrowseColumns.technology,\n    name: ko.observable<string>(ClientResources.Columns.Printer.technology),\n    description: ko.observable<string>(ClientResources.Columns.Printer.technologyDescription),\n    itemKey: BrowseColumns.TechnologyProperties.technology,\n    width: ko.observable<string>(\"80px\"),\n},\n],\n\n// The following are the default columns.\ndefaultColumns: [\n    BrowseColumns.model,\n    BrowseColumns.status,\n    BrowseColumns.technology,\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Blade Parameters in PDL\nDESCRIPTION: This snippet demonstrates how to define parameters for a Blade using the Blade.Parameters element. It shows the structure for declaring a parameter with a name and type.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-binding-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Blade.Parameters>\n   <Parameter Name=\"id\" Type=\"%Type%\" />\n</Blade.Parameters>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon for Connect in Azure Portal\nDESCRIPTION: An SVG icon representing a connection action. Used in the Azure Portal UI to indicate functionality related to connecting services, resources, or systems.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_121\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"24px\" height=\"24px\" viewBox=\"-0.5 0.5 24 24\" enable-background=\"new -0.5 0.5 24 24\" xml:space=\"preserve\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.44,16.5h1.06v-4h-5v-4H6.16c-0.91,0-1.47,0.83-1.61,2H0.5v4h4.07\n\tc0.16,1.13,0.71,2,1.59,2H12.44z\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.5,8.5v3h5v5h2c0.17,0,0.34-0.03,0.49-0.09c0.65-0.24,1.13-0.98,1.28-1.91h4.03\n\tv-4h-4.04c-0.19-1.14-0.87-2-1.76-2H9.5z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Value Mapping Schema for Capabilities Tab in Markdown\nDESCRIPTION: Describes the structure of an array of items, where each item is an object with specific properties for value mapping in the Capabilities Tab. It includes required fields like value, displayName, and icon, as well as optional fields like action and fx.feature.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/dx-getstarted-CapabilitiesTab-valueMapping.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### An array of items, where each item is of the type:\n##### An object with the following properties\n| Name | Required | Description\n| ---|:--:|:--:|\n|value|True|Specifies the value of the configuration status.\n|displayName|True|Specifies the displayName for the configuration status.\n|icon|True|Specifies the icon for the configuration status. See [here](dx-iconReference.md) on how to define an icon.\n|action|False|Specifies the action for the configuration status. See [here](dx-getstarted-ActionReference.md) for more.\n|fx.feature|False|\n```\n\n----------------------------------------\n\nTITLE: HeartPulse SVG Icon Definition\nDESCRIPTION: SVG definition for the HeartPulse icon used in the Azure Portal. The icon represents a heartbeat or pulse visualization with a blue heart shape containing an ECG-like pulse line.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_137\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M45.4,7.3c-4.8-5.2-14.6-3-20.4,5.1C17.8,3.8,9.2,2.1,4.3,7.3c-5,5.4-3.7,11.7-0.7,16.9l5.1-0.1l4.9-0.2\n\tl3.7-9.8c0.2-0.6,0.6-1.7,2.1-1.7c1.6,0,1.7,1.2,1.7,1.8l0.1,16.3l2.6-5.5c0.2-0.5,0.7-0.8,1.2-0.8h15.6c0.7,0,1.3,0.7,1.3,1.4\n\tc0,0.7-0.6,1.7-1.3,1.7H26.6l-5,10c-0.3,1-0.8,1.3-1.9,1.2l0,0c-0.6-0.1-1.1-1-1.1-1.6l-0.2-15l-1.5,4.1c-0.1,0.5-0.6,1.3-1.1,1.4\n\tl-4.6,0l-6.2,0c6.1,8.9,16.6,16.4,19.6,17.7v0.1v0v0v-0.1C30.6,42.9,58.9,21.9,45.4,7.3z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Icon in SVG\nDESCRIPTION: SVG markup defining the 'Swap' icon for the Azure portal. It creates two curved arrows pointing in opposite directions.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_170\n\nLANGUAGE: XML\nCODE:\n```\n<svg class=\"msportalfx-svg-placeholder\" viewBox=\"0 0 24 24\">\n\t<polygon points=\"14.047,4.976 8.075,9.769 12.968,10.134 10.7,11.963 4.142,11.488 5.011,4.958 7.279,3.129 6.63,8.004 12.657,2.855 13.663,4.336 \"/>\n\t<polygon points=\"19.927,19.097 17.806,20.715 18.318,16.061 12.026,21.145 10.59,19.38 16.873,14.295 11.98,13.93 14.248,12.101 20.604,12.32 \"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Portal Website Power SVG Icon\nDESCRIPTION: SVG icon showing website power status with blue circular design\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_93\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#59B4D9\" d=\"M29.833,31.322c-1.443,1.104-3.144,1.642-4.832,1.642c-2.396,0-4.765-1.076-6.331-3.123c-2.676-3.494-2.014-8.488,1.484-11.165c1.443-1.11,3.145-1.64,4.832-1.64c2.396,0,4.765,1.076,6.33,3.125C33.992,23.653,33.324,28.649,29.833,31.322\"/>\n<!-- Additional paths omitted for brevity -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Linking to a Specific Resource Instance - URL Example - Plaintext\nDESCRIPTION: Presents a deep link example targeting a specific web app resource within a subscription and resource group. Useful for showcasing direct jump to resource; displayed IDs must be replaced by real values for production usage.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-links.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/foo/providers/microsoft.web/sites/bar\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenBlade Portal Commands in Azure Using JSON\nDESCRIPTION: This JSON snippet defines a menu command (of kind 'MenuCommand') that includes an embedded command (of kind 'OpenBladeCommand'). The configuration specifies display names, icons, aria labels, custom content, and blade parameters. Dependencies include the Azure portal's menu and blade frameworks, and parameters like 'resourceid' and 'foo' can be customized for context-aware UI behavior. Inputs are JSON fields defining command structure, while outputs are rendered commands and contextual blades in the Azure portal. Only valid under the broader Azure portal menu command context.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/samples/dx/commands/viewOpenBladeCommandWithContent.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"MenuCommand\",\n    \"id\": \"OpenCreateCommandId\",\n    \"displayName\": \"openCreate\",\n    \"icon\": \"MsPortalFx.Base.Images.AddTeamMember\",\n    \"commands\": [\n        {\n            \"kind\": \"OpenBladeCommand\",\n            \"id\": \"OpenBladeCommandId1\",\n            \"displayName\": \"openBlade\",\n            \"ariaLabel\": \"openBlade\",\n            \"content\": \"content:Second line description\",\n            \"icon\": \"MsPortalFx.Base.Images.Save\",\n            \"blade\": {\n                \"name\": \"MarkdownView_Dx\",\n                \"parameters\": {\n                    \"foo\": \"foo\"\n                },\n                \"inContextPane\": true\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browse Columns for Printer Resources in TypeScript\nDESCRIPTION: This snippet defines the configuration for browse columns in the Azure Portal, including status, model, and technology columns for printer resources. It sets up column properties, status badges, and default columns.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-blades-resourcemenu.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Column for the technology using a custom column.\n{\n    id: BrowseColumns.technology,\n    name: ko.observable<string>(ClientResources.Columns.Printer.technology),\n    description: ko.observable<string>(ClientResources.Columns.Printer.technologyDescription),\n    itemKey: BrowseColumns.TechnologyProperties.technology,\n    width: ko.observable<string>(\"80px\"),\n},\n],\n\n// The following are the default columns.\ndefaultColumns: [\n    BrowseColumns.model,\n    BrowseColumns.status,\n    BrowseColumns.technology,\n],\n```\n\n----------------------------------------\n\nTITLE: Complete TextBox Control Implementation\nDESCRIPTION: Full example showing how to implement a TextBox control in a template blade, including imports, view model setup, and initialization.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-controls.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TemplateBlade from \"Fx/Composition/TemplateBlade\";\nimport * as TextBox from \"Fx/Controls/TextBox\";\n\n@TemplateBlade.Decorator({\n    htmlTemplate:\n        \"<div data-bind='pcControl: myTextbox'></div>\"\n})\nexport class AddUserBlade {\n    public title = ClientResources.bladeTitle;\n    public subtitle = ClientResources.bladeSubtitle;\n    public context: TemplateBlade.Context<void, MyArea.DataContext>;\n\n    public myTextbox: TextBox.Contract;\n\n    public onInitialize() {\n        const { container } = this.context;\n\n        this.myTextbox = TextBox.create(container, {\n            label: \"this is my textbox\"\n        });\n\n        return Q();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Link SVG Icon Definition\nDESCRIPTION: SVG definition for the Link icon used in the Azure Portal. This is a partial definition that appears to be the start of an SVG for a link or chain icon, representing connection or linking resources together.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_145\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Icon in SVG\nDESCRIPTION: SVG code that defines a folder icon using paths and colors. The icon includes a yellow folder shape with a darker shadow effect.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_31\n\nLANGUAGE: SVG\nCODE:\n```\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#FEE087\" d=\"M48.065,11.912V7.935H21.897L15.963,2H0v43.708c0,1.31,1.06,2.371,2.37,2.372v0h45.258\n\tc1.309,0,2.371-1.062,2.371-2.372V11.912H48.065z\"/>\n<path opacity=\"0.2\" fill=\"#1E1E1E\" d=\"M4.742,11.912v33.796c0,1.31-1.062,2.372-2.371,2.372C1.06,48.08,0,47.018,0,45.708V2h15.963\n\tl5.934,5.935h26.168v3.977H4.742z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: ClearDB Database Icon SVG Definition\nDESCRIPTION: SVG icon definition for ClearDB database service with blue cylindrical database shape.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_15\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<path fill=\"#0072C6\" d=\"M6,6.831v36.338C6,46.941,14.507,50,25,50V6.831H6z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Including msportalfx Specific Testing Template using GitDown\nDESCRIPTION: This configuration line uses the GitDown `include-file` directive to embed the content of the `msportalfx-test.md` Markdown file, also located in the parent `templates` directory. This file probably contains testing information or templates specifically relevant to the `msportalfx` variant or components within the Azure Portal Framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extension-test.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"gitdown\": \"include-file\", \"file\": \"../templates/msportalfx-test.md\"\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Elements with CSS Classes in HTML\nDESCRIPTION: This snippet demonstrates how to apply color classes to SVG elements within an HTML structure. It uses the 'msportafx-bgcolor-i0t2' class to color a rectangle element.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-extensions-style-color-palette.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<svg>\n    <g>\n        <rect class=\"msportafx-bgcolor-i0t2\"/>\n    </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Contract for ReactView and ReactModel\nDESCRIPTION: This code defines a shared contract interface for use in both ReactView and ReactModel. It demonstrates how to create a common state interface to reduce code duplication between the two separate TypeScript configurations.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/react-guides-using-react-model.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StoreState {\n  text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct EntityView Refresh Handling\nDESCRIPTION: Proper implementation of EntityView refresh handling using ko.reactor for better change detection.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-data-refreshingdata.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nko.reactor(lifetime, () => {\n    const item = entityView.item();\n    if (item) {\n        // Do something with 'newItem' after refresh.\n        doSomething(item.customerName());\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Command Name in ReactViews with Native Fetch API\nDESCRIPTION: Example of how to properly name network requests in ReactViews when using the native browser fetch API by adding the CommandName header from the Ajax utility.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-data-ajax.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Ajax from \"@microsoft/azureportal-reactview/Ajax\";\n\nfetch(<URL>, {\n    headers: {\n        [Ajax.HeaderNames.CommandName]: <REQUEST_NAME>,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Git Logo SVG\nDESCRIPTION: SVG code for the Git logo. It defines a 30x30 pixel image with paths representing the Git icon using an orange color.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_196\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 30 30\" enable-background=\"new 0 0 30 30\" xml:space=\"preserve\">\n<path fill=\"#DD5900\" d=\"M29.5,13.7L16.3,0.5c-0.7-0.7-1.9-0.7-2.6,0l-2.8,2.8l3.4,3.4c0.3-0.1,0.5-0.2,0.8-0.2c1.3,0,2.3,1,2.3,2.3\nc0,0.3,0,0.6-0.1,0.8l3.3,3.3c0.3-0.1,0.5-0.2,0.8-0.2c1.3,0,2.3,1,2.3,2.3c0,1.3-1,2.3-2.3,2.3c-1.3,0-2.3-1-2.3-2.3\nc0-0.3,0.1-0.6,0.2-0.8l-3.1-3.1v8.2c0.8,0.4,1.3,1.2,1.3,2c0,1.3-1,2.3-2.3,2.3c-1.3,0-2.3-1-2.3-2.3c0-1,0.6-1.8,1.5-2.1V11\nc-0.9-0.3-1.5-1.2-1.5-2.1c0-0.3,0.1-0.6,0.2-0.8L9.6,4.7l-9,9c-0.7,0.7-0.7,1.9,0,2.6l13.1,13.1c0.7,0.7,1.9,0.7,2.6,0l13.1-13.1\nC30.2,15.6,30.2,14.4,29.5,13.7z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Polychromatic Automation Icon - SVG/XML\nDESCRIPTION: Implements the Automation icon in SVG format for Azure-based interfaces. No dependencies except standard browser SVG rendering; input is the direct embedding of SVG in markup. Output is a mechanical gear themed, multi-color icon for automation contexts. Ensure compliance with brand usage.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_3\n\nLANGUAGE: svg\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n\\t width=\\\"50px\\\" height=\\\"50px\\\" viewBox=\\\"0 0 50 50\\\" enable-background=\\\"new 0 0 50 50\\\" xml:space=\\\"preserve\\\">\\n<path fill=\\\"#A0A1A2\\\" d=\\\"M46.281,23.344c0-0.375-0.031-0.734-0.063-1.109L50,20.141c-0.203-1.25-0.531-2.469-0.969-3.625\\nl-4.313,0.078c-0.328-0.672-0.688-1.328-1.094-1.938l2.219-3.703c-0.797-0.969-1.688-1.859-2.641-2.641l-2.188,1.297l-0.922,1.375\\nl-1.984,2.922c2.813,2.188,4.625,5.594,4.625,9.438c0,6.594-5.328,11.938-11.922,11.938c-6.578,0-11.922-5.344-11.922-11.938\\nc0-5.906,4.281-10.781,9.906-11.75l0.906-3.672l-2.094-3.781C26.359,4.344,25.156,4.672,24,5.109l0.063,4.328\\nc-0.656,0.313-1.313,0.672-1.922,1.094l-3.703-2.219c-0.969,0.781-1.844,1.672-2.641,2.641l2.219,3.703\\nc-0.422,0.609-0.766,1.266-1.094,1.938l-4.328-0.078c-0.422,1.156-0.75,2.375-0.953,3.625l3.766,2.094\\nc-0.031,0.375-0.047,0.734-0.047,1.109s0.016,0.734,0.047,1.109l-3.766,2.094c0.203,1.25,0.531,2.469,0.969,3.625l4.313-0.078\\nc0.328,0.672,0.672,1.328,1.094,1.938l-2.219,3.703c0.797,0.969,1.672,1.859,2.641,2.656l3.703-2.234\\nc0.609,0.422,1.266,0.781,1.922,1.109L24,41.578c1.156,0.438,2.359,0.766,3.609,0.969l2.109-3.781\\nc0.359,0.031,0.719,0.063,1.094,0.063s0.75-0.031,1.109-0.063l2.094,3.781c1.25-0.203,2.469-0.531,3.625-0.969l-0.078-4.313\\nc0.672-0.328,1.313-0.688,1.938-1.109l3.703,2.234c0.953-0.797,1.844-1.688,2.641-2.656l-2.219-3.703\\nc0.406-0.609,0.766-1.266,1.094-1.938l4.313,0.078c0.438-1.156,0.766-2.375,0.969-3.625l-3.781-2.094\\nC46.25,24.078,46.281,23.719,46.281,23.344z\\\"/>\\n<path fill=\\\"#7A7A7A\\\" d=\\\"M16,39.719v-1.859l-0.102-0.094l-1.902-0.641l-0.49-1.281l0.942-1.953l0.104-0.219l-0.589-0.594\\nl-0.716-0.719l-0.249,0.125l-1.859,0.953l-1.281-0.359L9.047,31H7.203l-0.094,0.094l-0.641,1.898L5.172,33.48l-2.156-1.037\\nl-1.313,1.302l0.125,0.245l0.953,1.857l-0.531,1.28L0,37.938v1.859l0.266,0.078l1.984,0.656l0.531,1.281l-1.016,2.156l1.313,1.328\\nl0.25-0.125l1.859-0.953l1.281,0.531L7.281,47h1.859l0.078-0.266l0.656-1.984l1.266-0.531l2.172,1.016l1.313-1.313l-0.125-0.25\\nl-0.953-1.859l0.367-1.297L16,39.719z M8.172,41.438c-1.438,0-2.609-1.172-2.609-2.609s1.172-2.609,2.609-2.609\\ns2.594,1.172,2.594,2.609S9.609,41.438,8.172,41.438z\\\"/>\\n<path fill=\\\"#FCD116\\\" d=\\\"M33.297,1.688l-0.719,2.266l-1.234,3.938L30.75,9.781l-0.516,1.656l-3.594,11.422\\nc-0.078,0.219,0.031,0.391,0.281,0.391h3.313c0.109,0,0.188,0.031,0.234,0.094c0.078,0.078,0.094,0.188,0.047,0.313l-3.422,8.297\\nc-0.094,0.219-0.031,0.266,0.125,0.078L38.047,19.75c0.156-0.188,0.094-0.328-0.141-0.328l-3.547,0.016l-0.656,0.016\\nc-0.234,0-0.344-0.172-0.219-0.375l3.375-6.016l0.797-1.438l0.922-1.656l1.969-3.484l1.125-2.031\\nC39.156,3,36.328,2.031,33.297,1.688z\\\"/>\\n<path opacity=\\\"0.3\\\" fill=\\\"#FF8C00\\\" d=\\\"M39.505,3.367l-7.844,16.07h1.953c-0.174-0.037-0.249-0.183-0.14-0.359l3.375-6.016\\nl0.797-1.438l0.922-1.656l1.969-3.484l1.125-2.031C40.966,4.052,40.245,3.692,39.505,3.367z\\\"/>\\n<path opacity=\\\"0.3\\\" fill=\\\"#FF8C00\\\" d=\\\"M37.92,19.422l-2.189,0.01l-8.093,12.14L38.061,19.75\\nC38.217,19.563,38.155,19.422,37.92,19.422z\\\"/>\\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Azure Portal ThisWeek SVG Icon\nDESCRIPTION: SVG icon definition for 'This Week' representation, sized 21x21px with black (#1E1E1E) text elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_174\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"21px\" height=\"21px\" viewBox=\"0 0 21 21\" enable-background=\"new 0 0 21 21\" xml:space=\"preserve\">\n<!-- Path definitions for text elements -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Opening a Blade with Callback for Returned Data in TypeScript\nDESCRIPTION: This snippet shows how to open a blade and handle the data returned when it closes. It demonstrates type-safe usage of the onClosed callback with the data returned from the child blade.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-no-pdl-programming.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.container.openBlade(BladeReferences.forBlade(\"SimpleTemplateBlade\").createReference({\n    onClosed: (reason: BladeClosedReason, data: {value: string}) => {\n        if (reason === BladeClosedReason.ChildClosedSelf) {\n            const newValue = data && data.value ? data.value : noValue;\n            this.previouslyReturnedValue(newValue);\n        }\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Framework Settings in app.config for Azure Portal Testing\nDESCRIPTION: Sample XML configuration for the C# Portal Test Framework showing essential settings including browser type, timeouts, portal URI, and extension URI. This configuration is required in the app.config file of the test project to properly initialize the test framework.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-csharp-test-framework.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<appSettings>\n  <!-- Browser type. \"Chrome\", \"IE\" -->\n  <add key=\"TestFramework.WebDriver.Browser\" value=\"Chrome\" />\n  <add key=\"TestFramework.WebDriver.DirectoryPath\" value=\"packages\\WebDriver.ChromeDriver.win32.2.19.0.0\\content\" />\n\n  <!-- Amount of time to wait for the Portal to load before timing out (seconds) -->\n  <add key=\"TestFramework.Portal.PortalLoadTimeOut\" value=\"60\" />\n\n  <!-- The uri of the target Portal server -->\n  <add key=\"PortalUri\" value=\"https://portal.azure.com\" />\n\n  <!-- The uri of your deployed extension -->\n  <add key=\"ExtensionUri\" value=\"https://mscompute2.iaas.ext.azure.com/ComputeContent/ComputeIndex\" />\n\n  <!-- The default webdriver server timeout for requests to be processed and returned (not the same as the waitUntil timeout) -->\n  <add key=\"TestFramework.WebDriver.DefaultTimeout\" value=\"60\"/>\n\n  <!-- Team's email alias for identifying the owners of the test  -->\n  <add key=\"PartnerTeamEmail\" value=\"myTeamEmail@microsoft.com\" />\n</appSettings>\n```\n\n----------------------------------------\n\nTITLE: Registering a Test Extension in TypeScript for Azure Portal\nDESCRIPTION: This code snippet demonstrates how to programmatically register a test extension in the Azure Portal when the extension is running on a domain other than localhost. It uses the MsPortalImpl.Extension.registerTestExtension method to specify the extension name and URI.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/top-extensions-sideloading.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMsPortalImpl.Extension.registerTestExtension({ \n  name: \"Microsoft_Azure_Demo\", \n  uri: \"https://someotherdomain.com:44301 \" }\n);\n```\n\n----------------------------------------\n\nTITLE: SVG Module Icon Implementation in Azure Portal\nDESCRIPTION: XML-based SVG graphic definition for a module icon used in the Azure Portal. The graphic consists of colored rectangles representing a modular structure with varying opacity to create visual depth.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_60\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 17.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"50px\" height=\"50px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect x=\"3\" y=\"3\" fill=\"#804998\" width=\"11.704\" height=\"11.541\"/>\n<rect x=\"19.107\" y=\"3\" fill=\"#804998\" width=\"11.746\" height=\"11.541\"/>\n<rect x=\"35.296\" y=\"3\" fill=\"#804998\" width=\"11.704\" height=\"11.541\"/>\n<rect x=\"3\" y=\"19.133\" fill=\"#804998\" width=\"27.853\" height=\"11.541\"/>\n<rect x=\"35.296\" y=\"19.133\" fill=\"#804998\" width=\"11.704\" height=\"11.541\"/>\n<rect x=\"3\" y=\"19.133\" opacity=\"0.2\" fill=\"#FFFFFF\" width=\"27.853\" height=\"11.541\"/>\n<rect x=\"35.296\" y=\"19.133\" opacity=\"0.2\" fill=\"#FFFFFF\" width=\"11.704\" height=\"11.541\"/>\n<rect x=\"3\" y=\"35.266\" fill=\"#804998\" width=\"44\" height=\"11.734\"/>\n<rect x=\"3\" y=\"35.266\" opacity=\"0.4\" fill=\"#FFFFFF\" width=\"44\" height=\"11.734\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Chart Icon SVG Definition\nDESCRIPTION: SVG icon definition for a graph/chart visualization with blue bars and purple line elements.\nSOURCE: https://github.com/azure/portaldocs/blob/main/portal-sdk/generated/portalfx-icons-builtin.md#2025-04-23_snippet_14\n\nLANGUAGE: SVG\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\" enable-background=\"new 0 0 50 50\" xml:space=\"preserve\">\n<rect y=\"24.7\" fill=\"#0072C6\" width=\"8.8\" height=\"25.3\"/>\n<rect x=\"13.7\" y=\"17.8\" fill=\"#59B4D9\" width=\"8.8\" height=\"32.2\"/>\n</svg>\n```"
  }
]