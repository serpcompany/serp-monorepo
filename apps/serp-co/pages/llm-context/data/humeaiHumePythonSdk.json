[
  {
    "owner": "humeai",
    "repo": "hume-python-sdk",
    "content": "TITLE: Installing Hume AI Python SDK\nDESCRIPTION: Shows different methods to install the Hume AI Python SDK using pip, poetry, or uv package managers.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install hume\n# or\npoetry add hume\n# or\nuv add hume\n```\n\n----------------------------------------\n\nTITLE: Initializing HumeClient and Listing Configs in Python\nDESCRIPTION: Demonstrates how to initialize the HumeClient with an API key and list configurations for the Empathic Voice API.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hume.client import HumeClient\n\nclient = HumeClient(api_key=\"YOUR_API_KEY\")\nclient.empathic_voice.configs.list_configs()\n```\n\n----------------------------------------\n\nTITLE: Accessing Different API Namespaces in HumeClient\nDESCRIPTION: Demonstrates how to access different API namespaces (Empathic Voice, TTS, Expression Measurement) using the HumeClient.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hume.client import HumeClient\n\nclient = HumeClient(api_key=\"YOUR_API_KEY\")\n\nclient.emapthic_voice.         # APIs specific to Empathic Voice\nclient.tts.                    # APIs specific to Text-to-speech\nclient.expression_measurement. # APIs specific to Expression Measurement\n```\n\n----------------------------------------\n\nTITLE: Using AsyncHumeClient for Non-blocking API Calls in Python\nDESCRIPTION: Shows how to use the AsyncHumeClient to make asynchronous, non-blocking calls to the Hume AI API.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom hume.client import AsyncHumeClient\n\nclient = AsyncHumeClient(api_key=\"YOUR_API_KEY\")\n\nasync def main() -> None:\n    await client.empathic_voice.configs.list_configs()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech with Text Data and Context in Hume Python SDK\nDESCRIPTION: Example showing how to use the synthesize_json method to convert text to speech with a detailed voice description. The example includes creating context through previous utterances and formatting options for the output. This method returns the speech in JSON format with base64-encoded audio.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.tts import FormatMp3, PostedContextWithUtterances, PostedUtterance\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tts.synthesize_json(\n    utterances=[\n        PostedUtterance(\n            text=\"Beauty is no quality in things themselves: It exists merely in the mind which contemplates them.\",\n            description=\"Middle-aged masculine voice with a clear, rhythmic Scots lilt, rounded vowels, and a warm,  steady tone with an articulate, academic quality.\",\n        )\n    ],\n    context=PostedContextWithUtterances(\n        utterances=[\n            PostedUtterance(\n                text=\"How can people see beauty so differently?\",\n                description=\"A curious student with a clear and respectful tone, seeking clarification on Hume's  ideas with a straightforward question.\",\n            )\n        ],\n    ),\n    format=FormatMp3(),\n    num_generations=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Job Artifacts Asynchronously with aiofiles in Python\nDESCRIPTION: Demonstrates how to download job artifacts asynchronously using the AsyncHumeClient and aiofiles library.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport aiofiles\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient()\nasync with aiofiles.open('artifacts.zip', mode='wb') as file:\n    async for chunk in client.expression_measurement.batch.get_job_artifacts(id=\"my-job-id\"):\n        await file.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors in Python\nDESCRIPTION: Shows how to handle API errors thrown by the SDK using try-except blocks and the ApiError class.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport hume.client\n\ntry:\n  client.expression_measurement.batch.get_job_predictions(...)\nexcept hume.core.ApiError as e: # Handle all errors\n  print(e.status_code)\n  print(e.body)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries and Timeouts in Python SDK\nDESCRIPTION: Demonstrates how to configure retries and timeouts for API requests using the SDK's RequestOptions.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom hume.client import HumeClient\nfrom hume.core import RequestOptions\n\nclient = HumeClient(...)\n\n# Override retries for a specific method\nclient.expression_measurement.batch.get_job_predictions(...,\n    request_options=RequestOptions(max_retries=5)\n)\n\nclient = HumeClient(\n    # All timeouts are 20 seconds\n    timeout=20.0,\n)\n\n# Override timeout for a specific method\nclient.expression_measurement.batch.get_job_predictions(...,\n    request_options=RequestOptions(timeout_in_seconds=20)\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTP Client in Python SDK\nDESCRIPTION: Shows how to override the default HTTP client with custom settings for proxies and transports.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n\nfrom hume.client import HumeClient\n\nclient = HumeClient(\n    http_client=httpx.Client(\n        proxies=\"http://my.test.proxy.example.com\",\n        transport=httpx.HTTPTransport(local_address=\"0.0.0.0\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Client for EVI and Expression Measurement in Python\nDESCRIPTION: Shows how to use the WebSocket client for interacting with the EVI API and Expression Measurement API asynchronously.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import StreamDataModels\n\nclient = AsyncHumeClient(api_key=os.getenv(\"HUME_API_KEY\"))\n\nasync with client.expression_measurement.stream.connect(\n    options={\"config\": StreamDataModels(...)}\n) as hume_socket:\n    print(await hume_socket.get_job_details())\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech to Audio File with Generation ID in Hume Python SDK\nDESCRIPTION: Example demonstrating how to use the synthesize_file method to convert text to speech with a voice description and save the result as an audio file. This approach uses a generation ID for context to maintain consistency in speech style and prosody across multiple requests.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.tts import FormatMp3, PostedContextWithGenerationId, PostedUtterance\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tts.synthesize_file(\n    utterances=[\n        PostedUtterance(\n            text=\"Beauty is no quality in things themselves: It exists merely in the mind which contemplates them.\",\n            description=\"Middle-aged masculine voice with a clear, rhythmic Scots lilt, rounded vowels, and a warm,  steady tone with an articulate, academic quality.\",\n        )\n    ],\n    context=PostedContextWithGenerationId(\n        generation_id=\"09ad914d-8e7f-40f8-a279-e34f07f7dab2\",\n    ),\n    format=FormatMp3(),\n    num_generations=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming TTS Synthesis to JSON with Hume Python SDK\nDESCRIPTION: Shows how to stream synthesized speech as JSON objects with base64-encoded audio. This example creates a client, specifies utterances for generation, and includes contextual utterances to influence speech style and prosody, returning a stream of JSON objects.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.tts import FormatMp3, PostedContextWithUtterances, PostedUtterance\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.tts.synthesize_json_streaming(\n    utterances=[\n        PostedUtterance(\n            text=\"Beauty is no quality in things themselves: It exists merely in the mind which contemplates them.\",\n            description=\"Middle-aged masculine voice with a clear, rhythmic Scots lilt, rounded vowels, and a warm,  steady tone with an articulate, academic quality.\",\n        )\n    ],\n    context=PostedContextWithUtterances(\n        utterances=[\n            PostedUtterance(\n                text=\"How can people see beauty so differently?\",\n                description=\"A curious student with a clear and respectful tone, seeking clarification on Hume's  ideas with a straightforward question.\",\n            )\n        ],\n    ),\n    format=FormatMp3(),\n)\nfor chunk in response:\n    yield chunk\n```\n\n----------------------------------------\n\nTITLE: Creating an Empathic Voice Interface Prompt in Python\nDESCRIPTION: Example showing how to create a new prompt for EVI using the Hume Python SDK. This code initializes a HumeClient and creates a weather assistant prompt with specific instructions on behavior and response style.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt(\n    name=\"Weather Assistant Prompt\",\n    text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming TTS Synthesis to File with Hume Python SDK\nDESCRIPTION: Demonstrates how to use the Hume Python SDK to stream synthesized speech to a file. This example initializes a client, specifies an utterance with descriptive text, and uses a specific generation ID for context to ensure consistent speech style.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.tts import FormatMp3, PostedContextWithGenerationId, PostedUtterance\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tts.synthesize_file_streaming(\n    utterances=[\n        PostedUtterance(\n            text=\"Beauty is no quality in things themselves: It exists merely in the mind which contemplates them.\",\n            description=\"Middle-aged masculine voice with a clear, rhythmic Scots lilt, rounded vowels, and a warm,  steady tone with an articulate, academic quality.\",\n        )\n    ],\n    context=PostedContextWithGenerationId(\n        generation_id=\"09ad914d-8e7f-40f8-a279-e34f07f7dab2\",\n    ),\n    format=FormatMp3(),\n    num_generations=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Available TTS Voices with Hume Python SDK\nDESCRIPTION: Demonstrates how to list voices available in your Voice Library. The code example shows filtering voices by provider, allowing you to list either Hume's preset voices or custom voices created in your account.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.tts.voices.list(\n    provider=\"CUSTOM_VOICE\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Creating a TTS Voice in Python using Hume SDK\nDESCRIPTION: Creates a new voice from a specified TTS generation ID and saves it to the Voice Library. This allows for consistent speech style and prosody across multiple requests.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tts.voices.create(\n    generation_id=\"795c949a-1510-4a80-9646-7d0863b023ab\",\n    name=\"David Hume\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an EmpathicVoice Tool in Python using Hume SDK\nDESCRIPTION: Creates a Tool that can be added to an EVI configuration. This method defines the tool's name, parameters, description, and fallback content.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool(\n    name=\"get_current_weather\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description=\"This tool is for getting the current weather.\",\n    fallback_content=\"Unable to fetch current weather.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Config Version with Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to create a new version of an existing EVI configuration using the Hume Python SDK. It includes setting various parameters such as prompt, voice, language model, and event messages.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version_description=\"This is an updated version of the Weather Assistant Config.\",\n    evi_version=\"2\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"ITO\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-7-sonnet-latest\",\n        temperature=1.0,\n    ),\n    ellm_model=PostedEllmModel(\n        allow_short_responses=True,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Listing EmpathicVoice Tools in Python using Hume SDK\nDESCRIPTION: Fetches a paginated list of Tools. This method allows for pagination and filtering of the tools list.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tools(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tool Version in Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to create a new version of a Tool using the Hume Python SDK. It includes setting parameters for weather information retrieval, version description, fallback content, and tool description.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallback_content=\"Unable to fetch current weather.\",\n    description=\"This tool is for getting the current weather.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Tool Version in Hume Python SDK\nDESCRIPTION: This code snippet shows how to fetch a specific version of a Tool using the Hume Python SDK. It requires the Tool's unique identifier and the version number.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.get_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Tool Version in Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to delete a specific version of a Tool using the Hume Python SDK. It requires the Tool's unique identifier and the version number to be deleted.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Tool Version Description in Hume Python SDK\nDESCRIPTION: This code snippet shows how to update the description of a specific Tool version using the Hume Python SDK. It requires the Tool's unique identifier, version number, and the new description.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_description(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n    version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Expression Measurement Inference Job in Python\nDESCRIPTION: This snippet shows how to start a new Expression Measurement inference job using the Hume Python SDK. It demonstrates passing URLs for processing and enabling notifications.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job(\n    urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Prompt Versions in the Empathic Voice Interface\nDESCRIPTION: Example demonstrating how to retrieve all versions of a specific prompt. The code initializes a HumeClient and calls the list_prompt_versions method with a prompt identifier.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.list_prompt_versions(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version of an Existing Prompt in Empathic Voice Interface\nDESCRIPTION: Example showing how to update a prompt by creating a new version. This creates a new version of the weather assistant prompt with updated text and a version description.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Prompt from the Empathic Voice Interface\nDESCRIPTION: Example demonstrating how to delete a prompt and all its versions using the Hume Python SDK. The code initializes a HumeClient and calls the delete_prompt method with a prompt identifier.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating a Prompt Name in the Empathic Voice Interface\nDESCRIPTION: Example showing how to update just the name of an existing prompt. The code initializes a HumeClient and calls the update_prompt_name method with the prompt ID and the new name.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_name(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    name=\"Updated Weather Assistant Prompt Name\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Prompt Version with HumeClient\nDESCRIPTION: Demonstrates how to delete a specific version of a prompt using the HumeClient. Requires API key and takes prompt ID and version number as parameters.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Prompts in Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to fetch a paginated list of Prompts using the Hume Python SDK. It includes options for specifying page number and page size, and shows how to iterate through the results.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.prompts.list_prompts(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Updating Prompt Description with HumeClient\nDESCRIPTION: Shows how to update the description of a specific prompt version using the HumeClient. Requires API key and accepts prompt ID, version, and new description as parameters.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_description(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Voices with HumeClient\nDESCRIPTION: Demonstrates how to retrieve a paginated list of custom voices using the HumeClient. Supports pagination and filtering by name.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.custom_voices.list_custom_voices()\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Voice with HumeClient\nDESCRIPTION: Shows how to create a new custom voice using the HumeClient. Requires API key and accepts name and base voice parameters.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice(\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Prompt Version in the Empathic Voice Interface\nDESCRIPTION: Example demonstrating how to fetch a specific version of a prompt using the Hume Python SDK. The code initializes a HumeClient and calls the get_prompt_version method with a prompt ID and version number.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.get_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=0,\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Voice Details with HumeClient\nDESCRIPTION: Demonstrates how to fetch details of a specific custom voice by its ID using the HumeClient.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.get_custom_voice(\n    id=\"id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Voice Version with HumeClient\nDESCRIPTION: Shows how to create a new version of an existing custom voice using the HumeClient. Requires voice ID, name, and base voice parameters.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice_version(\n    id=\"id\",\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Custom Voice with Hume Python SDK\nDESCRIPTION: Demonstrates how to delete a custom voice using the Hume SDK by providing the voice ID to the delete_custom_voice method.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.delete_custom_voice(\n    id=\"id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Pagination in Python SDK\nDESCRIPTION: Demonstrates different ways to handle paginated responses using the SDK's pagination features.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport hume.client\n\nclient = HumeClient(api_key=\"YOUR_API_KEY\")\n\nfor tool in client.empathic_voice.tools.list_tools():\n  print(tool)\n\n# Iterate page-by-page\nfor page in client.empathic_voice.tools.list_tools().iter_pages():\n  print(page.items)\n\n# Manual pagination\npager = client.empathic_voice.tools.list_tools()\n# First page\nprint(pager.items)\n# Second page\npager = pager.next_page()\nprint(pager.items)\n```\n\n----------------------------------------\n\nTITLE: Listing Empathic Voice Configs with Pagination\nDESCRIPTION: Demonstrates how to retrieve a paginated list of Empathic Voice configurations with options for page size and filtering.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.configs.list_configs(\n    page_number=0,\n    page_size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Creating a Config for Empathic Voice Interface\nDESCRIPTION: Shows how to create a new configuration for the Empathic Voice Interface with specific settings for voice, language model, and event handling.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config(\n    name=\"Weather Assistant Config\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    evi_version=\"2\",\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"SAMPLE VOICE\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-7-sonnet-latest\",\n        temperature=1.0,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Config Versions with Hume Python SDK\nDESCRIPTION: Demonstrates how to retrieve a paginated list of versions for a specific Empathic Voice configuration by providing its ID.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.configs.list_config_versions(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Deleting an EVI Config with Hume Python SDK\nDESCRIPTION: This snippet shows how to delete an entire EVI configuration, including all its versions, using the Hume Python SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing EmpathicVoice Tool Versions in Python using Hume SDK\nDESCRIPTION: Fetches a list of a Tool's versions. This method allows for pagination and filtering of the tool versions.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tool_versions(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Updating EVI Config Name with Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to update the name of an existing EVI configuration using the Hume Python SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_name(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    name=\"Updated Weather Assistant Config Name\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EVI Config Version with Hume Python SDK\nDESCRIPTION: This snippet shows how to fetch a specific version of an EVI configuration using the Hume Python SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.get_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating EVI Config Description with Hume Python SDK\nDESCRIPTION: This snippet shows how to update the description of a specific version of an EVI configuration using the Hume Python SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_description(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing EmpathicVoice Chats with Pagination\nDESCRIPTION: Example of using the HumeClient to fetch a paginated list of chats. Demonstrates both iterating through individual items and paginating page by page.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chats(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Listing EmpathicVoice Chat Events\nDESCRIPTION: Example showing how to retrieve chat events for a specific chat ID with pagination support. Includes options for both item-by-item and page-by-page iteration.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chat_events(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Retrieving EmpathicVoice Chat Audio\nDESCRIPTION: Example of fetching the audio recording for a previous chat session using the chat ID.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chats.get_audio(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing EmpathicVoice Chat Groups\nDESCRIPTION: Example demonstrating how to fetch a paginated list of chat groups with optional filtering by config ID.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chat_groups.list_chat_groups(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n    config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n```\n\n----------------------------------------\n\nTITLE: Updating a Custom Voice Name with Hume Python SDK\nDESCRIPTION: Shows how to update the name of a custom voice by providing the voice ID and new name. The name will be converted to uppercase.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.update_custom_voice_name(\n    id=\"id\",\n    name=\"name\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EmpathicVoice Chat Group Details\nDESCRIPTION: Example showing how to fetch details for a specific chat group including its associated chats with pagination support.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_chat_group(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Expression Measurement Batch Jobs in Python\nDESCRIPTION: This snippet demonstrates how to list Expression Measurement Batch jobs using the Hume Python SDK. It allows filtering and sorting of jobs based on various parameters like status, timestamp, and sort order.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.list_jobs()\n```\n\n----------------------------------------\n\nTITLE: Getting Job Details with Hume Expression Measurement Batch API\nDESCRIPTION: Code snippet demonstrating how to retrieve details about a specific batch job using the Hume Python SDK. This requires initializing a HumeClient with an API key and then calling the get_job_details method with a job ID.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_details(\n    id=\"job_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Predictions with Hume Expression Measurement Batch API\nDESCRIPTION: Code snippet showing how to fetch the JSON predictions from a completed inference job using the Hume Python SDK. This requires initializing a HumeClient with an API key and then calling the get_job_predictions method with a job ID.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_predictions(\n    id=\"job_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Inference Job from Local File with Hume Expression Measurement Batch API\nDESCRIPTION: Code snippet demonstrating how to start a new batch inference job from a local file using the Hume Python SDK. This requires initializing a HumeClient with an API key and then calling the start_inference_job_from_local_file method.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job_from_local_file()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tool in Hume Python SDK\nDESCRIPTION: This code snippet shows how to delete a Tool and all its versions using the Hume Python SDK. It requires the Tool's unique identifier.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Legacy HumeVoiceClient in Python\nDESCRIPTION: Shows how to use the legacy HumeVoiceClient for backward compatibility with older versions of the SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hume.legacy import HumeVoiceClient, VoiceConfig\n\nclient = HumeVoiceClient(\"<your-api-key>\")\nconfig = client.empathic_voice.configs.get_config_version(\n    id=\"id\",\n    version=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a TTS Voice in Python using Hume SDK\nDESCRIPTION: Removes a custom voice from the Voice Library.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tts.voices.delete(\n    name=\"David Hume\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Tool Name in Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to update the name of a Tool using the Hume Python SDK. It requires the Tool's unique identifier and the new name.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_name(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    name=\"get_current_temperature\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting EVI Config Version with Hume Python SDK\nDESCRIPTION: This snippet demonstrates how to delete a specific version of an EVI configuration using the Hume Python SDK.\nSOURCE: https://github.com/humeai/hume-python-sdk/blob/main/reference.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n```"
  }
]