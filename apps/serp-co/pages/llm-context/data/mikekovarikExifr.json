[
  {
    "owner": "mikekovarik",
    "repo": "exifr",
    "content": "TITLE: Basic EXIF Parsing in JavaScript\nDESCRIPTION: Demonstrates basic file parsing with exifr using both file path and buffer methods. Shows how to extract camera make and model information.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// exifr reads the file from disk, only a few hundred bytes.\nexifr.parse('./myimage.jpg')\n  .then(output => console.log('Camera:', output.Make, output.Model))\n// Or read the file on your own and feed the buffer into exifr.\nfs.readFile('./myimage.jpg')\n  .then(exifr.parse)\n  .then(output => console.log('Camera:', output.Make, output.Model))\n```\n\n----------------------------------------\n\nTITLE: Selective EXIF Tag Extraction\nDESCRIPTION: Shows how to extract specific EXIF tags like GPS coordinates, orientation, and custom tag selections. Demonstrates different filtering options.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// only GPS\nlet {latitude, longitude} = await exifr.gps('./myimage.jpg')\n// only orientation\nlet num = await exifr.orientation(blob)\n// only three tags\nlet output = await exifr.parse(file, ['ISO', 'Orientation', 'LensModel'])\n// only XMP segment (and disabled TIFF which is enabled by default)\nlet output = await exifr.parse(file, {tiff: false, xmp: true})\n```\n\n----------------------------------------\n\nTITLE: Using options.pick for Selective Tag Parsing in exifr\nDESCRIPTION: Demonstrates how to improve performance by specifying only the tags you need with the options.pick parameter. This approach allows exifr to avoid unnecessary reads and stop parsing once the requested tags are found.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// do this:\nlet {ISO, FNumber} = await exifr.parse(file, {exif: ['ISO', 'FNumber']})\n// not this:\nlet {ISO, FNumber} = await exifr.parse(file)\n```\n\n----------------------------------------\n\nTITLE: Using Specialized GPS Method in exifr\nDESCRIPTION: Demonstrates using the specialized exifr.gps() method instead of the general parse method when only GPS data is needed. This method is fine-tuned for extracting GPS coordinates with maximum efficiency.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// do this:\nexifr.gps(file)\n// not this:\nexifr.parse(file, {gps: true})\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Extraction\nDESCRIPTION: Examples of extracting embedded thumbnails from images, both as buffer and as object URL for browser use.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet thumbBuffer = await exifr.thumbnail(file)\n// or get object URL (browser only)\nimg.src = await exifr.thumbnailUrl(file)\n```\n\n----------------------------------------\n\nTITLE: Importing Exifr in Modern JavaScript\nDESCRIPTION: Examples of importing the exifr library using ES modules in modern JavaScript environments.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport exifr from 'exifr' // => exifr/dist/full.umd.cjs\n// Explicily import ES Module\nimport exifr from 'exifr/dist/full.esm.mjs' // to use ES Modules\n```\n\n----------------------------------------\n\nTITLE: Caching Options Object in exifr\nDESCRIPTION: Shows how to cache the options object when parsing multiple files with the same settings. This leverages exifr's internal WeakMap to reuse previously created Options instances rather than creating new ones for each parse operation.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// do this:\nlet options = {exif: true, iptc: true}\nfor (let file of files) exif.parse(file, options)\n// not this:\nfor (let file of files) exif.parse(file, {exif: true, iptc: true})\n```\n\n----------------------------------------\n\nTITLE: Browser ESM Implementation\nDESCRIPTION: Shows how to use exifr with ES modules in a browser, including handling multiple files through a file input.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"filepicker\" type=\"file\" multiple>\n<script type=\"module\">\n  import exifr from './node_modules/exifr/dist/lite.esm.js'\n  document.querySelector('#filepicker').addEventListener('change', async e => {\n    let files = Array.from(e.target.files)\n    let exifs = await Promise.all(files.map(exifr.parse))\n    let dates = exifs.map(exif => exif.DateTimeOriginal.toGMTString())\n    console.log(`${files.length} photos taken on:`, dates)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Bundle Configuration for JPEG and ICC in exifr\nDESCRIPTION: Shows how to create a custom bundle including only the necessary components for processing JPEG files with ICC data. This approach reduces bundle size by importing only required modules.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Core bundle has nothing in it\nimport * as exifr from 'exifr/src/core.mjs'\n// Now we import what we need\nimport 'exifr/src/file-readers/BlobReader.mjs'\nimport 'exifr/src/file-parsers/jpeg.mjs'\nimport 'exifr/src/segment-parsers/icc.mjs'\nimport 'exifr/src/dicts/icc-keys.mjs'\nimport 'exifr/src/dicts/icc-values.mjs'\n```\n\n----------------------------------------\n\nTITLE: Disabling IFD0 Parsing in exifr\nDESCRIPTION: Shows how to disable the IFD0 (Image block) parsing when not needed, while still allowing access to EXIF and GPS blocks. This optimization reduces unnecessary data processing.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// do this:\nlet options = {ifd0: false, exif: true} \n// not this:\nlet options = {exif: true} \n```\n\n----------------------------------------\n\nTITLE: Including Exifr in HTML\nDESCRIPTION: Examples of including the exifr library in HTML using different script tags for various browser support scenarios.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- ES Module in modern browsers -->\n<script type=\"module\">import exifr from 'node_modules/exifr/dist/lite.esm.js';</script>\n<!-- classic UMD script -->\n<script src=\"https://cdn.jsdelivr.net/npm/exifr/dist/lite.umd.js\"></script>\n<!-- IE10 & old browsers. You also need Promise polyfill -->\n<script src=\"https://cdn.jsdelivr.net/npm/exifr/dist/lite.legacy.umd.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Browser UMD Implementation\nDESCRIPTION: Demonstrates using exifr in a browser via UMD module with an image element.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"./myimage.jpg\">\n<script src=\"./node_modules/exifr/dist/lite.umd.js\"></script>\n<script>\n  let img = document.querySelector('img')\n  window.exifr.parse(img).then(exif => console.log('Exposure:', exif.ExposureTime))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Exifr in CommonJS\nDESCRIPTION: Example of importing the exifr library using CommonJS in older Node.js environments.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar exifr = require('exifr') // => exifr/dist/full.umd.cjs\n```\n\n----------------------------------------\n\nTITLE: Comparing reviveValues Output in exifr\nDESCRIPTION: Illustrates how the reviveValues option transforms raw data into more usable formats. When enabled, it converts date strings to Date objects and formats arrays into readable strings.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  GPSVersionID: [0x02, 0x02, 0x00, 0x00],\n  ModifyDate: '2018:07:25 16:34:23',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  GPSVersionID: '2.2.0.0',\n  ModifyDate: <Date instance: 2018-07-25T14:34:23.000Z>,\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing translateKeys Output in exifr\nDESCRIPTION: Demonstrates the difference in output format when translateKeys option is set to true versus false. When false, numeric keys are used for metadata properties; when true, readable property names are used.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  0x0110: 'Pixel', // IFD0\n  90: 'Vsetín', // IPTC\n  64: 'Perceptual', // ICC\n  desc: 'sRGB IEC61966-2.1', // ICC\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Model: 'Pixel', // IFD0\n  City: 'Vsetín', // IPTC\n  RenderingIntent: 'Perceptual', // ICC\n  ProfileDescription: 'sRGB IEC61966-2.1', // ICC\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing translateValues Output in exifr\nDESCRIPTION: Shows how the translateValues option affects the output. When false, raw enum values are returned; when true, these values are translated to human-readable strings.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Orientation: 1,\n  ResolutionUnit: 2,\n  DeviceManufacturer: 'GOOG'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Orientation: 'Horizontal (normal)',\n  ResolutionUnit: 'inches',\n  DeviceManufacturer: 'Google'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Options in Exifr\nDESCRIPTION: Examples of skipping specific tags globally or within EXIF block\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Skips reading these three tags in any block\n{skip: ['ImageWidth', 'Model', 'FNumber', 'GPSLatitude']}\n// Skips reading three tags in EXIF block\n{exif: {skip: ['ImageUniqueID', 42033, 'SubSecTimeDigitized']}}\n```\n\n----------------------------------------\n\nTITLE: Web Worker Implementation\nDESCRIPTION: Shows how to use exifr in a Web Worker context, including message passing and transferable objects.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet worker = new Worker('./worker.js')\nworker.postMessage('../test/IMG_20180725_163423.jpg')\nworker.onmessage = e => console.log(e.data)\n// tip: try Transferable Objects with ArrayBuffer\nworker.postMessage(arrayBuffer, [arrayBuffer])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// worker.js\nimportScripts('./node_modules/exifr/dist/lite.umd.js')\nself.onmessage = async e => postMessage(await exifr.parse(e.data))\n```\n\n----------------------------------------\n\nTITLE: Custom Bundle Configuration for HEIC and TIFF in exifr\nDESCRIPTION: Demonstrates a minimal bundle configuration for processing HEIC and TIFF files, focusing only on EXIF data with translated values but not keys. This reduces bundle size for specialized use cases.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as exifr from 'exifr/src/core.mjs'\nimport 'exifr/src/file-parsers/heic.mjs'\nimport 'exifr/src/file-parsers/tiff.mjs'\nimport 'exifr/src/segment-parsers/tiff.mjs'\nimport 'exifr/src/dicts/tiff-exif-values.mjs'\n```\n\n----------------------------------------\n\nTITLE: Customizing GPS Date Value Processing in exifr\nDESCRIPTION: Demonstrates how to customize the processing of GPS date values by setting a custom reviver function. This allows for custom formatting of specific metadata types.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Modify single tag's GPSDateStamp value is processed\nimport exifr from 'exifr'\nlet gpsRevivers = exifr.tagRevivers.get('gps')\ngpsRevivers.set(0x001D, rawValue => {\n  let [year, month, day] = rawValue.split(':').map(str => parseInt(str))\n  return new Date(year, month - 1, day)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GPS Dictionary in exifr\nDESCRIPTION: Shows how to create a custom dictionary for GPS metadata tags, defining mappings between numeric codes and human-readable names. This allows for extending the library's translation capabilities.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Create custom dictionary for GPS block\nimport exifr from 'exifr'\nexifr.createDictionary(exifr.tagKeys, 'gps', [\n  [0x0001, 'LatitudeRef'],\n  [0x0002, 'Latitude'],\n  [0x0003, 'LongitudeRef'],\n  [0x0004, 'Longitude'],\n])\n```\n\n----------------------------------------\n\nTITLE: Extending Existing IFD0 Dictionary in exifr\nDESCRIPTION: Demonstrates how to extend an existing dictionary (IFD0) with additional tag mappings. This allows for adding support for custom or vendor-specific metadata tags.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Extend existing IFD0 dictionary\nimport exifr from 'exifr'\nexifr.createDictionary(exifr.tagKeys, 'ifd0', [\n  [0xc7b5, 'DefaultUserCrop'],\n  [0xc7d5, 'NikonNEFInfo'],\n  ...\n])\n```\n\n----------------------------------------\n\nTITLE: Modifying Individual Tag Translation in exifr\nDESCRIPTION: Shows how to modify the translation of a single EXIF tag (Saturation) by accessing and updating the internal dictionaries. This allows for customizing how specific metadata values are interpreted.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Modify single tag's 0xa409 (Saturation) translation\nimport exifr from 'exifr'\nlet exifKeys   = exifr.tagKeys.get('exif')\nlet exifValues = exifr.tagValues.get('exif')\nexifKeys.set(0xa409, 'Saturation')\nexifValues.set(0xa409, {\n  0: 'Normal',\n  1: 'Low',\n  2: 'High'\n})\n```\n\n----------------------------------------\n\nTITLE: Tag Filtering Configuration Example\nDESCRIPTION: Shows how to configure tag filtering across different blocks\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Only extract FNumber + ISO tags from EXIF and GPSLatitude + GPSLongitude from GPS\n{\n  exif: true, gps: true,\n  pick: ['FNumber', 'ISO', 'GPSLatitude', 0x0004] // 0x0004 is GPSLongitude\n}\n// is a shortcut for\n{exif: ['FNumber', 'ISO'], gps: ['GPSLatitude', 0x0004]}\n// which is another shortcut for\n{exif: {pick: ['FNumber', 'ISO']}, gps: {pick: ['GPSLatitude', 0x0004]}}\n```\n\n----------------------------------------\n\nTITLE: XMP to JSON Parsing Example\nDESCRIPTION: Demonstrates how XML/XMP data is transformed into JSON structure\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<rdf:Description foo:name=\"Exifr\">\n  <foo:author>Mike Kovařík</foo:author>\n  <foo:description xml:lang=\"en-us\">Some string here</foo:description>\n  <foo:formats><rdf:Seq><rdf:li>jpeg</rdf:li></rdf:Seq></foo:formats>\n  <foo:segments><rdf:Seq><rdf:li>xmp</rdf:li><rdf:li>tiff</rdf:li><rdf:li>iptc</rdf:li></rdf:Seq></foo:segments>\n</rdf:Description>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'Exifr', // attribute belonging to the same namespace\n  author: 'Mike Kovařík', // simple tag of the namespace\n  description: {lang: 'en-us', value: 'Some string here'}, // tag with attrs and value becomes object\n  formats: 'jpeg', // single item array is unwrapped\n  segments: ['xmp', 'tiff', 'iptc'] // array as usual\n}\n```\n\n----------------------------------------\n\nTITLE: TIFF Block Configuration Shortcuts\nDESCRIPTION: Examples of configuring TIFF blocks using shorthand options\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{interop: true, tiff: false}\n// is a shortcut for\n{interop: true, ifd0: false, exif: false, gps: false, ifd1: true}\n```\n\n----------------------------------------\n\nTITLE: Benchmarks Comparing exifr with Other Libraries\nDESCRIPTION: Benchmark results from pigallery2 comparing exifr with exifreader and exiftool across 2036 photos totaling 22GB. The results show exifr's significant performance advantage with an average processing time of 2.5ms per file.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n2036 photos (in total 22GB):\nlib        | average  | all files\n---------------------------------\nexifr      | 2.5ms    | 5s         <--- !!!\nexifreader | 9.5ms    | 19.5s\nexiftool   | 76ms     | 154s\n```\n\n----------------------------------------\n\nTITLE: Benchmarks Comparing File Reading Methods in exifr\nDESCRIPTION: Benchmark results comparing different file reading approaches, demonstrating exifr's chunked reading method is significantly faster than reading whole files. The results highlight the efficiency of exifr's parsing strategy.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/README.md#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nuser reads file            8.4 ms\nexifr reads whole file     8.2 ms\nexifr reads file by chunks 0.5 ms  <--- !!!\nonly parsing, not reading  0.2 ms  <--- !!!\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Full changelog documenting the version history of the exifr library, including changes, fixes, and new features across multiple versions.\nSOURCE: https://github.com/mikekovarik/exifr/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [Unreleased]\n\n## [7.1.3]\n\n### Fixed\n- `UrlFetcher` in Node.js can now handle redirects.\n- added missing `multiSegment` in .d.ts file.\n\n## [7.1.2]\n\n### Fixed\n- Issue #67 -> improved IPTC parsing performance.\n\n## [7.1.0]\n\n### Added\n- Sidecar support through `exifr.sidecar()`.\n- Support for url query strings and headers in Node.js polyfill of UrlFetcher.\n\n## [7.0.0]\n\n### Added\n- `UrlFetcher` now works in Node.js too. i.e. You can use `string` URL as `file` argument in Node.js (previously only available in browser). Exifr now implements polyfill for `window.fetch()`. But it's only available in `full` bundle.\n\n### Fixed\n- Issue #59 regarding `mwg-rs:Regions`.\n- Problems with parsing absolute paths in Electron, NW.JS and other Node/browser hybrid environments. (*Node's `fs` now takes precedence over brower's `fetch` when parsing absolute path argument*)\n\n### Breaking changes\n- Slight changes to XMP parsing logic. Only affects obscure cases with lists and nested `rdf:Description`. Won't affect most of the basic use cases.\n```"
  }
]