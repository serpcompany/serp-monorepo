[
  {
    "owner": "hacksider",
    "repo": "deep-live-cam",
    "content": "TITLE: Running Deep-Live-Cam without GPU\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python. This execution is without GPU acceleration. Initial execution will download necessary models.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies using pip in Windows\nDESCRIPTION: This snippet creates a virtual environment named 'venv', activates it, and installs the required Python packages from the 'requirements.txt' file. This ensures a clean environment for the project dependencies. It requires Python and pip to be installed and assumes a 'requirements.txt' file exists in the current directory.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nvenv\\Scripts\\activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning the Deep-Live-Cam repository using Git\nDESCRIPTION: This snippet clones the Deep-Live-Cam repository from GitHub to the local machine and navigates into the cloned directory. It requires Git to be installed.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hacksider/Deep-Live-Cam.git\ncd Deep-Live-Cam\n```\n\n----------------------------------------\n\nTITLE: Running Deep-Live-Cam with CUDA Execution Provider\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python with CUDA execution provider to utilize NVIDIA GPU for acceleration.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --execution-provider cuda\n```\n\n----------------------------------------\n\nTITLE: Running Deep-Live-Cam with DirectML Execution Provider\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python with DirectML execution provider to utilize Windows GPU for acceleration.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --execution-provider directml\n```\n\n----------------------------------------\n\nTITLE: Running Deep-Live-Cam with CoreML Execution Provider (Apple Silicon)\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python 3.10 with CoreML execution provider to utilize Apple Silicon (M1/M2/M3) GPU for acceleration.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3.10 run.py --execution-provider coreml\n```\n\n----------------------------------------\n\nTITLE: Running Deep-Live-Cam with CoreML Execution Provider (Apple Legacy)\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python with CoreML execution provider to utilize Apple GPU for acceleration on older Macs.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --execution-provider coreml\n```\n\n----------------------------------------\n\nTITLE: Running Deep-Live-Cam with OpenVINO Execution Provider\nDESCRIPTION: This snippet executes the Deep-Live-Cam script 'run.py' using Python with OpenVINO execution provider to utilize Intel CPU/GPU for acceleration.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython run.py --execution-provider openvino\n```\n\n----------------------------------------\n\nTITLE: Dependencies List\nDESCRIPTION: Specifies dependencies for the project. It includes versions and platform-specific packages for macOS and other systems, especially for PyTorch and ONNX Runtime.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n--extra-index-url https://download.pytorch.org/whl/cu118\n\nnumpy>=1.23.5,<2\ntyping-extensions>=4.8.0\nopencv-python==4.10.0.84\ncv2_enumerate_cameras==1.1.15\nonnx==1.16.0\ninsightface==0.7.3\npsutil==5.9.8\ntk==0.1.0\ncustomtkinter==5.2.2\npillow==11.1.0\ntorch==2.5.1+cu118; sys_platform != 'darwin'\ntorch==2.5.1; sys_platform == 'darwin'\ntorchvision==0.20.1; sys_platform != 'darwin'\ntorchvision==0.20.1; sys_platform == 'darwin'\nonnxruntime-silicon==1.16.3; sys_platform == 'darwin' and platform_machine == 'arm64'\nonnxruntime-gpu==1.17; sys_platform != 'darwin'\ntensorflow; sys_platform != 'darwin'\nopennsfw2==0.10.2\nprotobuf==4.23.2\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies using pip in macOS\nDESCRIPTION: This snippet installs Python 3.10, tkinter package (required for GUI), creates and activates a virtual environment, and installs dependencies from 'requirements.txt'. Specific to Apple Silicon (M1/M2/M3).\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install Python 3.10 (specific version is important)\nbrew install python@3.10\n\n# Install tkinter package (required for the GUI)\nbrew install python-tk@3.10\n\n# Create and activate virtual environment with Python 3.10\npython3.10 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install CUDA Execution Provider\nDESCRIPTION: This snippet uninstalls the default onnxruntime and onnxruntime-gpu and then installs a specific version(1.16.3) of onnxruntime-gpu. The CUDA Toolkit 11.8.0 must be installed before running this.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall onnxruntime onnxruntime-gpu\npip install onnxruntime-gpu==1.16.3\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install CoreML Execution Provider (Apple Silicon)\nDESCRIPTION: This snippet uninstalls the default onnxruntime and onnxruntime-silicon and then installs a specific version(1.13.1) of onnxruntime-silicon for Apple Silicon (M1/M2/M3) based Macs. Python 3.10 is required.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall onnxruntime onnxruntime-silicon\npip install onnxruntime-silicon==1.13.1\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install DirectML Execution Provider\nDESCRIPTION: This snippet uninstalls the default onnxruntime and onnxruntime-directml and then installs a specific version(1.15.1) of onnxruntime-directml for Windows with DirectML support.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall onnxruntime onnxruntime-directml\npip install onnxruntime-directml==1.15.1\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install OpenVINO Execution Provider\nDESCRIPTION: This snippet uninstalls the default onnxruntime and onnxruntime-openvino and then installs a specific version(1.15.0) of onnxruntime-openvino for Intel CPU/GPU acceleration.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall onnxruntime onnxruntime-openvino\npip install onnxruntime-openvino==1.15.0\n```\n\n----------------------------------------\n\nTITLE: Reinstalling the Virtual Environment in macOS\nDESCRIPTION: This snippet deactivates and removes the virtual environment, reinstalls it, activates it, and reinstalls the dependencies from 'requirements.txt'. Used in case of errors during the initial installation on macOS.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Deactivate the virtual environment\nrm -rf venv\n\n# Reinstall the virtual environment\npython -m venv venv\nsource venv/bin/activate\n\n# install the dependencies again\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install CoreML Execution Provider (Apple Legacy)\nDESCRIPTION: This snippet uninstalls the default onnxruntime and onnxruntime-coreml and then installs a specific version(1.13.1) of onnxruntime-coreml for older Apple Macs.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall onnxruntime onnxruntime-coreml\npip install onnxruntime-coreml==1.13.1\n```\n\n----------------------------------------\n\nTITLE: Deep-Live-Cam CLI Arguments\nDESCRIPTION: This section outlines the command-line arguments available for the Deep-Live-Cam application.  It details the options for specifying source and target images/videos, output paths, frame processors, video encoding settings, memory management, and execution providers.  Note that this command line interface is currently unmaintained.\nSOURCE: https://github.com/hacksider/deep-live-cam/blob/main/README.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\noptions:\n  -h, --help                                               show this help message and exit\n  -s SOURCE_PATH, --source SOURCE_PATH                     select a source image\n  -t TARGET_PATH, --target TARGET_PATH                     select a target image or video\n  -o OUTPUT_PATH, --output OUTPUT_PATH                     select output file or directory\n  --frame-processor FRAME_PROCESSOR [FRAME_PROCESSOR ...]  frame processors (choices: face_swapper, face_enhancer, ...)\n  --keep-fps                                               keep original fps\n  --keep-audio                                             keep original audio\n  --keep-frames                                            keep temporary frames\n  --many-faces                                             process every face\n  --map-faces                                              map source target faces\n  --mouth-mask                                             mask the mouth region\n  --video-encoder {libx264,libx265,libvpx-vp9}             adjust output video encoder\n  --video-quality [0-51]                                   adjust output video quality\n  --live-mirror                                            the live camera display as you see it in the front-facing camera frame\n  --live-resizable                                         the live camera frame is resizable\n  --max-memory MAX_MEMORY                                  maximum amount of RAM in GB\n  --execution-provider {cpu} [{cpu} ...]                   available execution provider (choices: cpu, ...)\n  --execution-threads EXECUTION_THREADS                    number of execution threads\n  -v, --version                                            show program's version number and exit\n```"
  }
]