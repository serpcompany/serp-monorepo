[
  {
    "owner": "mjackson",
    "repo": "remix-the-web",
    "content": "TITLE: Using the Low-level Multipart API\nDESCRIPTION: TypeScript example demonstrating how to use the low-level parseMultipart API for working directly with multipart data and boundaries.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { parseMultipart } from '@mjackson/multipart-parser';\n\n// Get the multipart data from some API, filesystem, etc.\nlet multipartMessage = new Uint8Array();\n// can also be a stream or any Iterable/AsyncIterable\n// let multipartMessage = new ReadableStream(...);\n// let multipartMessage = [new Uint8Array(...), new Uint8Array(...)];\n\nlet boundary = '----WebKitFormBoundary56eac3x';\n\nawait parseMultipart(multipartMessage, { boundary }, (part) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Multipart Requests in JavaScript\nDESCRIPTION: TypeScript example showing how to parse multipart/form-data requests, handling both file uploads and text fields while implementing error handling.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { MultipartParseError, parseMultipartRequest } from '@mjackson/multipart-parser';\n\nasync function handleRequest(request: Request): void {\n  try {\n    await parseMultipartRequest(request, (part) => {\n      if (part.isFile) {\n        let buffer = await part.bytes(); // Uint8Array\n        console.log(`File received: ${part.filename} (${buffer.length} bytes)`);\n        console.log(`Content type: ${part.mediaType}`);\n        console.log(`Field name: ${part.name}`);\n      } else {\n        let text = await part.text(); // string\n        console.log(`Field received: ${part.name} = ${JSON.stringify(text)}`);\n      }\n    });\n  } catch (error) {\n    if (error instanceof MultipartParseError) {\n      console.error('Failed to parse multipart request:', error.message);\n    } else {\n      console.error('An unexpected error occurred:', error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Header Class in TypeScript\nDESCRIPTION: Demonstrates how to use the Cookie class to parse, manipulate, and iterate over HTTP cookie values. Supports getting, setting, and deleting cookies, as well as checking for existence of specific cookies. Multiple initialization styles are shown.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cookie } from '@mjackson/headers';\n\nlet header = new Cookie('theme=dark; session_id=123');\nheader.get('theme'); // \"dark\"\nheader.set('theme', 'light');\nheader.delete('theme');\nheader.has('session_id'); // true\n\n// Iterate over cookie name/value pairs\nfor (let [name, value] of header) {\n  // ...\n}\n\n// Alternative init styles\nlet header = new Cookie({ theme: 'dark', session_id: '123' });\nlet header = new Cookie([\n  ['theme', 'dark'],\n  ['session_id', '123'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Set-Cookie Header Class in TypeScript\nDESCRIPTION: Demonstrates how to use the SetCookie class to parse and create Set-Cookie headers. This class provides properties for all cookie attributes including domain, path, security flags, and expiration settings. Supports string-based and object-based initialization.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetCookie } from '@mjackson/headers';\n\nlet header = new SetCookie('session_id=abc; Domain=example.com; Path=/; Secure; HttpOnly');\nheader.name; // \"session_id\"\nheader.value; // \"abc\"\nheader.domain; // \"example.com\"\nheader.path; // \"/\"\nheader.secure; // true\nheader.httpOnly; // true\nheader.sameSite; // undefined\nheader.maxAge; // undefined\nheader.expires; // undefined\n\n// Alternative init styles\nlet header = new SetCookie({\n  name: 'session_id',\n  value: 'abc',\n  domain: 'example.com',\n  path: '/',\n  secure: true,\n  httpOnly: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using form-data-parser for Handling File Uploads in TypeScript\nDESCRIPTION: Demonstrates how to use the form-data-parser package to handle file uploads in a server environment. It shows the usage of parseFormData function and how to process FileUpload objects, including storing them using a file storage system.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/form-data-parser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalFileStorage } from '@mjackson/file-storage/local';\nimport { type FileUpload, parseFormData } from '@mjackson/form-data-parser';\n\nconst fileStorage = new LocalFileStorage('/uploads/user-avatars');\n\nasync function uploadHandler(fileUpload: FileUpload) {\n  // Is this file upload from the <input type=\"file\" name=\"user-avatar\"> field?\n  if (fileUpload.fieldName === 'user-avatar') {\n    let storageKey = `user-${user.id}-avatar`;\n\n    // FileUpload objects are not meant to stick around for very long (they are\n    // streaming data from the request.body!) so we should store them as soon as\n    // possible.\n    await fileStorage.set(storageKey, fileUpload);\n\n    // Return a File for the FormData object. This is a LazyFile that knows how\n    // to access the file's content if needed (using e.g. file.stream()) but\n    // waits until it is requested to actually read anything.\n    return fileStorage.get(storageKey);\n  }\n\n  // Ignore any files we don't recognize the name of...\n}\n\nasync function requestHandler(request: Request) {\n  let formData = await parseFormData(request, uploadHandler);\n\n  let file = formData.get('user-avatar'); // File\n  file.name; // \"my-avatar.jpg\" (name of the file on the user's computer)\n  file.size; // number\n  file.type; // \"image/jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using If-None-Match Header Class in TypeScript\nDESCRIPTION: Shows how to work with the If-None-Match HTTP header class which handles ETag values. The class allows checking if specific tags exist in the header and testing if a tag matches. Supports both string-based initialization and array/object initialization.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IfNoneMatch } from '@mjackson/headers';\n\nlet header = new IfNoneMatch('\"67ab43\", \"54ed21\"');\n\nheader.has('67ab43'); // true\nheader.has('21ba69'); // false\n\nheader.matches('\"67ab43\"'); // true\n\n// Alternative init style\nlet header = new IfNoneMatch(['67ab43', '54ed21']);\nlet header = new IfNoneMatch({\n  tags: ['67ab43', '54ed21'],\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting File Upload Size in Multipart Requests\nDESCRIPTION: TypeScript example demonstrating how to set maximum file size limits when parsing multipart requests and returning appropriate HTTP status codes when limits are exceeded.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  MultipartParseError,\n  MaxFileSizeExceededError,\n  parseMultipartRequest,\n} from '@mjackson/multipart-parser/node';\n\nconst oneMb = Math.pow(2, 20);\n\nasync function handleRequest(request: Request): Promise<Response> {\n  try {\n    await parseMultipartRequest(request, { maxFileSize: 10 * oneMb }, (part) => {\n      // ...\n    });\n  } catch (error) {\n    if (error instanceof MaxFileSizeExceededError) {\n      return new Response('File size limit exceeded', { status: 413 });\n    } else if (error instanceof MultipartParseError) {\n      return new Response('Failed to parse multipart request', { status: 400 });\n    } else {\n      console.error(error);\n      return new Response('Internal Server Error', { status: 500 });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FileStorage Interface\nDESCRIPTION: Example showing how to implement a custom FileStorage interface for custom storage backends. Includes interface methods for checking existence, setting, getting, and removing files.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type FileStorage } from '@mjackson/file-storage';\n\nclass CustomFileStorage implements FileStorage {\n  /**\n   * Returns `true` if a file with the given key exists, `false` otherwise.\n   */\n  has(key: string): boolean | Promise<boolean> {\n    // ...\n  }\n  /**\n   * Puts a file in storage at the given key.\n   */\n  set(key: string, file: File): void | Promise<void> {\n    // ...\n  }\n  /**\n   * Returns the file with the given key, or `null` if no such key exists.\n   */\n  get(key: string): File | null | Promise<File | null> {\n    // ...\n  }\n  /**\n   * Removes the file with the given key from storage.\n   */\n  remove(key: string): void | Promise<void> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalFileStorage in TypeScript\nDESCRIPTION: Example demonstrating how to use LocalFileStorage to store and retrieve files with metadata preservation. Shows basic operations like setting, getting, and removing files.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocalFileStorage } from '@mjackson/file-storage/local';\n\nlet storage = new LocalFileStorage('./user/files');\n\nlet file = new File(['hello world'], 'hello.txt', { type: 'text/plain' });\nlet key = 'hello-key';\n\n// Put the file in storage.\nawait storage.set(key, file);\n\n// Then, sometime later...\nlet fileFromStorage = await storage.get(key);\n// All of the original file's metadata is intact\nfileFromStorage.name; // 'hello.txt'\nfileFromStorage.type; // 'text/plain'\n\n// To remove from storage\nawait storage.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Parsing a Tar Archive with tar-parser in TypeScript\nDESCRIPTION: Example of using the parseTar function to process a gzipped tar archive fetched from a URL. It demonstrates how to handle each entry in the archive.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/tar-parser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseTar } from '@mjackson/tar-parser';\n\nlet response = await fetch(\n  'https://github.com/mjackson/remix-the-web/archive/refs/heads/main.tar.gz'\n);\n\nawait parseTar(response.body.pipeThrough(new DecompressionStream('gzip')), (entry) => {\n  console.log(entry.name, entry.size);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Fetch Proxy in TypeScript\nDESCRIPTION: Example showing how to create a fetch proxy that forwards requests to remix.run, then demonstrating how to use it to handle incoming requests and verify the response. The proxy function can be integrated into a server environment.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/fetch-proxy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFetchProxy } from '@mjackson/fetch-proxy';\n\n// Create a proxy that sends all requests through to remix.run\nlet proxy = createFetchProxy('https://remix.run');\n\n// This fetch handler is probably running as part of your server somewhere...\nfunction handleFetch(request: Request): Promise<Response> {\n  return proxy(request);\n}\n\n// Test it out by manually throwing a Request at it\nlet response = await handleFetch(new Request('https://shopify.com'));\n\nlet text = await response.text();\nlet title = text.match(/<title>([^<]+)<\\/title>/)[1];\nassert(title.includes('Remix'));\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server for File Upload Handling in Node.js\nDESCRIPTION: This code creates an HTTP server that listens on port 3000. It sets up a request handler that processes incoming POST requests, parses form data, and handles file uploads by streaming them to temporary files on disk.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/form-data-parser/examples/node/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttp\n  .createServer(async (req, res) => {\n    if (req.method === \"POST\") {\n      const parser = formDataParser(req.headers);\n      for await (const part of parser) {\n        if (part.name === \"file\" && part.data) {\n          const filename = `./tmp/${part.filename}`;\n          const writeStream = fs.createWriteStream(filename);\n          for await (const chunk of part.data) {\n            writeStream.write(chunk);\n          }\n          writeStream.end();\n          console.log(`Uploaded ${filename}`);\n        }\n      }\n    }\n    res.end(\"ok\");\n  })\n  .listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Using Multipart Parser with Node.js HTTP Server\nDESCRIPTION: TypeScript example showing how to use the Node.js-specific version of multipart-parser with a native HTTP server.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport * as http from 'node:http';\nimport { MultipartParseError, parseMultipartRequest } from '@mjackson/multipart-parser/node';\n\nconst server = http.createServer(async (req, res) => {\n  try {\n    await parseMultipartRequest(req, (part) => {\n      // ...\n    });\n  } catch (error) {\n    if (error instanceof MultipartParseError) {\n      console.error('Failed to parse multipart request:', error.message);\n    } else {\n      console.error('An unexpected error occurred:', error);\n    }\n  }\n});\n\nserver.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: File System Operations with lazy-file/fs\nDESCRIPTION: Examples of reading from and writing to the local filesystem using the File API with lazy loading functionality.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openFile, writeFile } from '@mjackson/lazy-file/fs';\n\n// No data is read at this point, it's just a reference to a\n// file on the local filesystem\nlet file = openFile('./path/to/file.json');\n\n// Data is read when you call file.text() (or any of the\n// other Blob methods, like file.bytes(), file.stream(), etc.)\nlet json = JSON.parse(await file.text());\n\n// Write the file's contents back to the filesystem at a\n// different path\nawait writeFile('./path/to/other-file.json', file);\n\n// Or write to an open file handle/descriptor\nimport * as fsp from 'node:fs/promises';\nlet handle = await fsp.open('./path/to/other-file.json');\nawait writeFile(handle, file);\n\nlet imageFile = openFile('./path/to/image.jpg');\n\n// Get a LazyBlob that omits the first 100 bytes of the file.\n// This could be useful e.g. when serving HTTP Range requests\nlet blob = imageFile.slice(100);\n```\n\n----------------------------------------\n\nTITLE: Basic Server Implementation with Node Fetch\nDESCRIPTION: Basic example showing how to create a simple HTTP server using node-fetch-server with a basic request handler that returns 'Hello, world!'.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as http from 'node:http';\nimport { createRequestListener } from '@mjackson/node-fetch-server';\n\nfunction handler(request: Request) {\n  return new Response('Hello, world!');\n}\n\nlet server = http.createServer(createRequestListener(handler));\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Individual Header Class Examples\nDESCRIPTION: Shows usage of individual header utility classes like Accept, Accept-Encoding, Accept-Language, etc.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Accept, AcceptEncoding, AcceptLanguage, CacheControl, ContentDisposition, ContentType } from '@mjackson/headers';\n\n// Accept Example\nlet acceptHeader = new Accept('text/html;text/*;q=0.9');\n\n// Accept-Encoding Example\nlet encodingHeader = new AcceptEncoding('gzip,deflate;q=0.9');\n\n// Accept-Language Example\nlet languageHeader = new AcceptLanguage('en-US,en;q=0.9');\n\n// Cache-Control Example\nlet cacheHeader = new CacheControl('public, max-age=3600, s-maxage=3600');\n\n// Content-Disposition Example\nlet dispositionHeader = new ContentDisposition('attachment; name=file1; filename=file1.txt');\n\n// Content-Type Example\nlet contentTypeHeader = new ContentType('text/html; charset=utf-8');\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyFile with Streaming Content\nDESCRIPTION: Complete example showing how to create a LazyFile with streaming content implementation using ReadableStream.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LazyContent, LazyFile } from '@mjackson/lazy-file';\n\nlet content: LazyContent = {\n  // The total length of this file in bytes.\n  byteLength: 100000,\n  // A function that provides a stream of data for the file contents,\n  // beginning at the `start` index and ending at `end`.\n  stream(start, end) {\n    // ... read the file contents from somewhere and return a ReadableStream\n    return new ReadableStream({\n      start(controller) {\n        controller.enqueue('X'.repeat(100000).slice(start, end));\n        controller.close();\n      },\n    });\n  },\n};\n\nlet file = new LazyFile(content, 'example.txt', { type: 'text/plain' });\nawait file.arrayBuffer(); // ArrayBuffer of the file's content\nfile.name; // \"example.txt\"\nfile.type; // \"text/plain\"\n```\n\n----------------------------------------\n\nTITLE: Implementing If-None-Match Header in TypeScript\nDESCRIPTION: Shows how to use the newly added If-None-Match header support for conditional GET requests, comparing ETag values to determine if a new response is needed.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuperHeaders } from '@mjackson/headers';\n\nfunction requestHandler(request: Request): Promise<Response> {\n  let response = await callDownstreamService(request);\n\n  if (request.method === 'GET' && response.headers.has('ETag')) {\n    let headers = new SuperHeaders(request.headers);\n    if (headers.ifNoneMatch.matches(response.headers.get('ETag'))) {\n      return new Response(null, { status: 304 });\n    }\n  }\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Headers Usage Example\nDESCRIPTION: Demonstrates core functionality of the Headers library including handling Accept, Content-Type, Cookies, and other common headers.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Headers from '@mjackson/headers';\n\nlet headers = new Headers();\n\n// Accept\nheaders.accept = 'text/html, text/*;q=0.9';\n\nheaders.accept.mediaTypes; // [ 'text/html', 'text/*' ]\nObject.fromEntries(headers.accept.entries()); // { 'text/html': 1, 'text/*': 0.9 }\n\nheaders.accept.accepts('text/html'); // true\nheaders.accept.accepts('text/plain'); // true\nheaders.accept.accepts('image/jpeg'); // false\n\nheaders.accept.getPreferred(['text/plain', 'text/html']); // 'text/html'\n\nheaders.accept.set('text/plain', 0.9);\nheaders.accept.set('text/*', 0.8);\n\nheaders.get('Accept'); // 'text/html,text/plain;q=0.9,text/*;q=0.8'\n```\n\n----------------------------------------\n\nTITLE: Headers Iteration Example\nDESCRIPTION: Demonstrates how to iterate over headers using for...of loops and create string representations.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet headers = new Headers({\n  'Content-Type': 'application/json',\n  'X-API-Key': 'secret-key',\n  'Accept-Language': 'en-US,en;q=0.9',\n});\n\nfor (let [name, value] of headers) {\n  console.log(`${name}: ${value}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Headers Configuration Object\nDESCRIPTION: Shows how to initialize Headers with an object configuration including content type and cookies.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet headers = new Headers({\n  contentType: {\n    mediaType: 'text/html',\n    charset: 'utf-8',\n  },\n  setCookie: [\n    { name: 'session', value: 'abc', path: '/' },\n    { name: 'theme', value: 'dark', expires: new Date('2021-12-31T23:59:59Z') },\n  ],\n});\n\nconsole.log(`${headers}`);\n// Content-Type: text/html; charset=utf-8\n// Set-Cookie: session=abc; Path=/\n// Set-Cookie: theme=dark; Expires=Fri, 31 Dec 2021 23:59:59 GMT\n```\n\n----------------------------------------\n\nTITLE: Low-level Custom Server Implementation\nDESCRIPTION: Example of building a custom server using low-level APIs for direct translation between Node.js req/res objects and fetch Request/Response objects.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as http from 'node:http';\nimport { createRequest, sendResponse } from '@mjackson/node-fetch-server';\n\nlet server = http.createServer(async (req, res) => {\n  let request = createRequest(req, res, { host: process.env.HOST });\n\n  try {\n    let response = await customAppLogic(request);\n    await sendResponse(res, response);\n  } catch (error) {\n    console.error(error);\n    res.writeHead(500, { 'Content-Type': 'text/plain' });\n    res.end('Internal Server Error');\n  }\n});\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Client Information Handler Implementation\nDESCRIPTION: Example showing how to access client IP and port information in the request handler.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type FetchHandler } from '@mjackson/node-fetch-server';\n\nlet handler: FetchHandler = (request, client) => {\n  return new Response(`The client IP address is ${client.address}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating LazyFile Object in TypeScript\nDESCRIPTION: Demonstrates creating a LazyFile object with deferred content loading using the LazyContent interface.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet lazyContent: LazyContent = {\n  /* See below for usage */\n};\nlet file = new LazyFile(lazyContent, 'hello.txt', { type: 'text/plain' });\n```\n\n----------------------------------------\n\nTITLE: Paginating Through All Files in file-storage\nDESCRIPTION: Demonstrates pagination through all files in storage using the cursor property returned from list operations, continuing to fetch pages until the cursor is undefined.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await storage.list();\nconsole.log(result.files);\n\nwhile (result.cursor !== undefined) {\n  result = await storage.list({ cursor: result.cursor });\n  console.log(result.files);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard File Object in TypeScript\nDESCRIPTION: Shows the traditional way of creating a File object which requires immediate content loading.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet file = new File(['hello world'], 'hello.txt', { type: 'text/plain' });\n```\n\n----------------------------------------\n\nTITLE: Initializing SuperHeaders with Object Config in TypeScript\nDESCRIPTION: Demonstrates how to initialize a SuperHeaders instance using an object configuration with various header types.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet headers = new Headers({\n  contentType: { mediaType: 'text/html' },\n  cookies: [\n    ['session_id', 'abc'],\n    ['theme', 'dark'],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP/2 Server with node-fetch-server in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTP/2 server using node-fetch-server. It sets up a secure server, creates a request listener, and handles requests based on URL paths.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as http2 from 'node:http2';\nimport { createRequestListener } from '@mjackson/node-fetch-server';\n\nlet server = http2.createSecureServer(options);\n\nserver.on(\n  'request',\n  createRequestListener((request) => {\n    let url = new URL(request.url);\n\n    if (url.pathname === '/') {\n      return new Response('Hello HTTP/2!', {\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n      });\n    }\n\n    return new Response('Not Found', { status: 404 });\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Using AcceptEncoding Header Methods in TypeScript\nDESCRIPTION: Shows how to use the new AcceptEncoding header methods for checking encoding acceptance, getting weights, and finding preferred encodings.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AcceptEncoding } from '@mjackson/headers';\n\nlet header = new AcceptEncoding({ gzip: 1, deflate: 0.9 });\n\nheader.accepts('gzip'); // true\nheader.accepts('deflate'); // true\nheader.accepts('identity'); // true\nheader.accepts('br'); // false\n\nheader.getWeight('gzip'); // 1\nheader.getWeight('deflate'); // 0.9\n\nheader.getPreferred(['gzip', 'deflate']); // 'gzip'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Node.js File Upload Server\nDESCRIPTION: This snippet imports the necessary Node.js modules and third-party libraries required for setting up a file upload server. It includes http for creating the server, formDataParser for parsing form data, and fs for file system operations.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/form-data-parser/examples/node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst http = require(\"http\");\nconst { formDataParser } = require(\"@web3-storage/form-data-parser\");\nconst fs = require(\"fs\");\n```\n\n----------------------------------------\n\nTITLE: Using Accept Header Methods in TypeScript\nDESCRIPTION: Demonstrates the usage of new Accept header methods for checking media type acceptance, getting weights, and finding preferred types.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Accept } from '@mjackson/headers';\n\nlet header = new Accept({ 'text/html': 1, 'text/*': 0.9 });\n\nheader.accepts('text/html'); // true\nheader.accepts('text/plain'); // true\nheader.accepts('text/*'); // true\nheader.accepts('image/jpeg'); // false\n\nheader.getWeight('text/html'); // 1\nheader.getWeight('text/plain'); // 0.9\n\nheader.getPreferred(['text/html', 'text/plain']); // 'text/html'\n```\n\n----------------------------------------\n\nTITLE: Using parseMultipartRequest with Before/After API Comparison in TypeScript\nDESCRIPTION: Shows the API change from v0.8.0 where the interface changed from a `for await...of` pattern to an `await` + callback API for parseMultipartRequest.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseMultipartRequest } from '@mjackson/multipart-parser';\n\n// before\nfor await (let part of parseMultipartRequest(request)) {\n  // ...\n}\n\n// after\nawait parseMultipartRequest(request, (part) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Date Headers with Numeric Values in TypeScript\nDESCRIPTION: Demonstrates how date headers can now be set using numeric millisecond values in addition to Date objects.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet ms = new Date().getTime();\nlet headers = new SuperHeaders({ lastModified: ms });\nheaders.date = ms;\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Metadata in file-storage\nDESCRIPTION: Shows how to list files in storage with their metadata included, such as lastModified timestamp, name, size, and content type.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await storage.list({ prefix: 'user123/', includeMetadata: true });\nconsole.log(result.files);\n// [\n//   {\n//     key: \"user123/...\",\n//     lastModified: 1737955705270,\n//     name: \"hello.txt\",\n//     size: 16,\n//     type: \"text/plain\"\n//   },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Parsing a Tar Archive with Custom Filename Encoding\nDESCRIPTION: Example of using the parseTar function with a custom filename encoding option. This is useful for archives with non-UTF-8 encoded filenames.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/tar-parser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet response = await fetch(/* ... */);\n\nawait parseTar(response.body, { filenameEncoding: 'latin1' }, (entry) => {\n  console.log(entry.name, entry.size);\n});\n```\n\n----------------------------------------\n\nTITLE: Using AcceptLanguage Methods in TypeScript\nDESCRIPTION: Shows the usage of new AcceptLanguage methods for checking language acceptance, getting weights, and finding preferred languages.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AcceptLanguage } from '@mjackson/headers';\n\nlet header = new AcceptLanguage({ 'en-US': 1, en: 0.9 });\n\nheader.accepts('en-US'); // true\nheader.accepts('en-GB'); // true\nheader.accepts('en'); // true\nheader.accepts('fr'); // false\n\nheader.getWeight('en-US'); // 1\nheader.getWeight('en-GB'); // 0.9\n\nheader.getPreferred(['en-GB', 'en-US']); // 'en-US'\n```\n\n----------------------------------------\n\nTITLE: Using the put Method for Immediate File Access in file-storage\nDESCRIPTION: Compares the old pattern of setting and then getting a file with the new put method that combines these operations into one for convenience when immediate access to the stored file is needed.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nawait storage.set(key, file);\nlet newFile = await storage.get(key)!;\n\n// after\nlet newFile = await storage.put(key, file);\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Across Node.js, Bun, and Deno\nDESCRIPTION: Terminal output showing benchmark comparisons between multipart-parser, multipasta, busboy, and @fastify/busboy across three JavaScript runtimes (Node.js, Bun, and Deno). The benchmarks test performance with different file sizes and quantities.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n> @mjackson/multipart-parser@0.6.1 bench:node /Users/michael/Projects/multipart-parser\n> node --import tsimp/import ./bench/runner.ts\n\nPlatform: Darwin (23.5.0)\nCPU: Apple M1 Pro\nDate: 8/18/2024, 4:18:39 PM\nNode.js v22.1.0\n┌──────────────────┬──────────────────┬──────────────────┬──────────────────┬───────────────────┐\n│ (index)          │ 1 small file     │ 1 large file     │ 100 small files  │ 5 large files     │\n├──────────────────┼──────────────────┼──────────────────┼──────────────────┼───────────────────┤\n│ multipart-parser │ '0.01 ms ± 0.03' │ '1.06 ms ± 0.04' │ '0.10 ms ± 0.03' │ '10.60 ms ± 0.22' │\n│ multipasta       │ '0.01 ms ± 0.03' │ '1.06 ms ± 0.03' │ '0.15 ms ± 0.02' │ '10.70 ms ± 2.70' │\n│ busboy           │ '0.03 ms ± 0.09' │ '3.01 ms ± 0.08' │ '0.22 ms ± 0.03' │ '29.91 ms ± 0.91' │\n│ @fastify/busboy  │ '0.03 ms ± 0.07' │ '1.20 ms ± 0.08' │ '0.39 ms ± 0.07' │ '11.86 ms ± 0.17' │\n└──────────────────┴──────────────────┴──────────────────┴──────────────────┴───────────────────┘\n\n> @mjackson/multipart-parser@0.6.1 bench:bun /Users/michael/Projects/multipart-parser\n> bun run ./bench/runner.ts\n\nPlatform: Darwin (23.5.0)\nCPU: Apple M1 Pro\nDate: 8/18/2024, 4:20:58 PM\nBun 1.1.21\n┌──────────────────┬────────────────┬────────────────┬─────────────────┬─────────────────┐\n│                  │ 1 small file   │ 1 large file   │ 100 small files │ 5 large files   │\n├──────────────────┼────────────────┼────────────────┼─────────────────┼─────────────────┤\n│ multipart-parser │ 0.01 ms ± 0.04 │ 0.91 ms ± 0.09 │ 0.11 ms ± 0.05  │ 8.23 ms ± 0.18  │\n│       multipasta │ 0.01 ms ± 0.03 │ 0.87 ms ± 0.08 │ 0.22 ms ± 0.15  │ 8.09 ms ± 0.15  │\n│           busboy │ 0.03 ms ± 0.07 │ 3.59 ms ± 0.13 │ 0.36 ms ± 0.17  │ 35.26 ms ± 0.39 │\n│  @fastify/busboy │ 0.04 ms ± 0.11 │ 7.23 ms ± 0.15 │ 0.63 ms ± 0.15  │ 71.86 ms ± 0.53 │\n└──────────────────┴────────────────┴────────────────┴─────────────────┴─────────────────┘\n\n> @mjackson/multipart-parser@0.6.1 bench:deno /Users/michael/Projects/multipart-parser\n> deno --unstable-byonm --unstable-sloppy-imports run --allow-sys ./bench/runner.ts\n\nPlatform: Darwin (23.5.0)\nCPU: Apple M1 Pro\nDate: 8/18/2024, 4:24:16 PM\nDeno 1.45.5\n┌──────────────────┬──────────────────┬───────────────────┬──────────────────┬────────────────────┐\n│ (idx)            │ 1 small file     │ 1 large file      │ 100 small files  │ 5 large files      │\n├──────────────────┼──────────────────┼───────────────────┼──────────────────┼────────────────────┤\n│ multipart-parser │ \"0.01 ms ± 0.15\" │ \"1.00 ms ± 1.00\"  │ \"0.08 ms ± 0.39\" │ \"10.08 ms ± 0.41\"  │\n│ multipasta       │ \"0.01 ms ± 0.14\" │ \"1.02 ms ± 1.00\"  │ \"0.17 ms ± 0.56\" │ \"14.59 ms ± 0.92\"  │\n│ busboy           │ \"0.04 ms ± 0.28\" │ \"3.04 ms ± 1.00\"  │ \"0.30 ms ± 0.71\" │ \"29.86 ms ± 0.83\"  │\n│ @fastify/busboy  │ \"0.05 ms ± 0.31\" │ \"12.36 ms ± 0.78\" │ \"0.78 ms ± 0.98\" │ \"123.54 ms ± 5.04\" │\n└──────────────────┴──────────────────┴───────────────────┴──────────────────┴────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Initializing SuperHeaders with Object in TypeScript\nDESCRIPTION: Shows how to initialize SuperHeaders with an object configuration after v0.9.0, using the object init instead of array init for non-string values.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet headers = new SuperHeaders([['Content-Type', { mediaType: 'text/html' }]]);\n\n// if you need the previous behavior, use the object init instead\nlet headers = new SuperHeaders({ contentType: { mediaType: 'text/html' } });\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Header in TypeScript\nDESCRIPTION: Illustrates the changes in setting headers after v0.9.0, where set() method no longer accepts non-string values and setter should be used for object values.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet headers = new SuperHeaders();\nheaders.set('Content-Type', { mediaType: 'text/html' });\n\n// after\nheaders.set('Content-Type', 'text/html');\n\n// if you need the previous behavior, use the setter instead of set()\nheaders.contentType = { mediaType: 'text/html' };\n```\n\n----------------------------------------\n\nTITLE: Handling Uninitialized Header Values in TypeScript\nDESCRIPTION: Demonstrates the change in behavior for uninitialized custom header values, which now return null instead of undefined to align with the native Headers interface.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet headers = new SuperHeaders();\nheaders.get('Host'); // null\nheaders.get('Content-Type'); // undefined\n\n// after\nheaders.get('Host'); // null\nheaders.get('Content-Type'); // null\n```\n\n----------------------------------------\n\nTITLE: Using parseFormData Function in TypeScript\nDESCRIPTION: Example showing the before and after syntax for the parseFormData function. In v0.7.0, the API was changed so that parserOptions is the second argument and the upload handler is always the last argument.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/form-data-parser/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseFormData } from '@mjackson/form-data-parser';\n\n// before\nawait parseFormData(\n  request,\n  (fileUpload) => {\n    // ...\n  },\n  { maxFileSize },\n);\n\n// after\nawait parseFormData(request, { maxFileSize }, (fileUpload) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Deleting Headers in TypeScript\nDESCRIPTION: Illustrates how setters now accept undefined or null to delete headers, equivalent to using the delete() method.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet headers = new SuperHeaders({ contentType: 'text/html' });\nheaders.get('Content-Type'); // 'text/html'\n\nheaders.contentType = null; // same as headers.delete('Content-Type');\nheaders.get('Content-Type'); // null\n```\n\n----------------------------------------\n\nTITLE: Updating Cookie Usage in TypeScript\nDESCRIPTION: Demonstrates the changes in accessing cookie names after the breaking change in v0.10.0, where cookie.names() became a getter returning string[] instead of a method.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet cookieNames = Array.from(headers.cookie.names());\n\n// after\nlet cookieNames = headers.cookie.names;\n```\n\n----------------------------------------\n\nTITLE: Error Handling with MultipartParser in Node.js\nDESCRIPTION: Demonstrates how to handle different error types including MaxFileSizeExceededError and MultipartParseError in a Node.js HTTP server.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as http from 'node:http';\nimport {\n  MultipartParseError,\n  MaxFileSizeExceededError,\n  parseMultipartRequest,\n} from '@mjackson/multipart-parser/node';\n\nconst tenMb = 10 * Math.pow(2, 20);\n\nconst server = http.createServer(async (req, res) => {\n  try {\n    await parseMultipartRequest(req, { maxFileSize: tenMb }, (part) => {\n      // ...\n    });\n  } catch (error) {\n    if (error instanceof MaxFileSizeExceededError) {\n      res.writeHead(413);\n      res.end(error.message);\n    } else if (error instanceof MultipartParseError) {\n      res.writeHead(400);\n      res.end('Invalid multipart request');\n    } else {\n      console.error(error);\n      res.writeHead(500);\n      res.end('Internal Server Error');\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Prefix in file-storage\nDESCRIPTION: Demonstrates how to list files in storage that have keys starting with a specific prefix. The result includes an array of objects with file keys.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await storage.list({ prefix: 'user123/' });\nconsole.log(result.files);\n// [\n//   { key: \"user123/...\" },\n//   { key: \"user123/...\" },\n//   ...\n// ]\n```\n\n----------------------------------------\n\nTITLE: Initializing AcceptLanguage Header in TypeScript\nDESCRIPTION: Shows the change in initializing AcceptLanguage header, where undefined weight values are no longer allowed.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nlet h1 = new AcceptLanguage({ 'en-US': undefined });\nlet h2 = new AcceptLanguage([['en-US', undefined]]);\n\n// after\nlet h3 = new AcceptLanguage({ 'en-US': 1 });\n```\n\n----------------------------------------\n\nTITLE: Custom Hostname Server Configuration\nDESCRIPTION: Example demonstrating how to configure a server with custom hostname support using environment variables.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as assert from 'node:assert/strict';\nimport * as http from 'node:http';\nimport { createRequestListener } from '@mjackson/node-fetch-server';\n\nfunction handler(request: Request) {\n  // This is now true\n  assert.equal(new URL(request.url).host, process.env.HOST);\n  return new Response('Hello, world!');\n}\n\nlet server = http.createServer(createRequestListener(handler, { host: process.env.HOST }));\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to GitHub for Automated Publishing in Remix-the-Web\nDESCRIPTION: This Git command pushes the main branch along with tags to GitHub, which triggers the automated publish step in GitHub Actions. This is an alternative to running the publish-release command manually.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin main --tags\n```\n\n----------------------------------------\n\nTITLE: Running Tag Release Command for Package Version Updates in Remix-the-Web\nDESCRIPTION: This command creates a new version tag for a package. It updates the version in package.json, jsr.json (if applicable), and the changelog, then creates a git tag. The example shows how to create a minor release for the 'headers' package.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run tag-release headers minor\n```\n\n----------------------------------------\n\nTITLE: Publishing a Tagged Release in Remix-the-Web\nDESCRIPTION: This command publishes a previously tagged release to npm/JSR and creates a GitHub Release. The example shows how to publish the 'headers' package at version 1.0.0.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run publish-release headers@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Describing Multipart Form Data Handling in Deno\nDESCRIPTION: This markdown snippet outlines the purpose of the example, which is to demonstrate handling a multipart/form-data POST request in a Deno server. It specifically mentions streaming file uploads to a temporary directory on the filesystem.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/examples/deno/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# multipart-parser Deno Example\n\nThis example demonstrates handling a `<form enctype=\"multipart/form-data\">` POST to [a Deno server](https://deno.com/) and streaming any file uploads it contains to a tmp directory on the filesystem.\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with PNPM\nDESCRIPTION: Shell command to run the multipart-parser benchmarks using PNPM package manager. This allows users to replicate the benchmark tests on their own systems.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm run bench\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Headers Library\nDESCRIPTION: Command to install the headers library via npm package manager.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/headers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mjackson/headers\n```\n\n----------------------------------------\n\nTITLE: Installing lazy-file Package\nDESCRIPTION: NPM installation command for the lazy-file package.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mjackson/lazy-file\n```\n\n----------------------------------------\n\nTITLE: Installing file-storage package using npm\nDESCRIPTION: Command to install the file-storage package from npm registry\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/file-storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mjackson/file-storage\n```\n\n----------------------------------------\n\nTITLE: Installing tar-parser via npm\nDESCRIPTION: Command to install the tar-parser package from npm using the terminal.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/tar-parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mjackson/tar-parser\n```\n\n----------------------------------------\n\nTITLE: Installing Multipart Parser from JSR (for Deno)\nDESCRIPTION: Command for installing the multipart-parser package from JSR for Deno environments.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno add @mjackson/multipart-parser\n```\n\n----------------------------------------\n\nTITLE: Installing Multipart Parser from npm\nDESCRIPTION: Command for installing the multipart-parser package from npm repository.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/multipart-parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mjackson/multipart-parser\n```\n\n----------------------------------------\n\nTITLE: Installing form-data-parser via npm\nDESCRIPTION: Command to install the form-data-parser package from npm. This is a prerequisite step before using the library in your project.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/form-data-parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mjackson/form-data-parser\n```\n\n----------------------------------------\n\nTITLE: Installing fetch-proxy with npm\nDESCRIPTION: Command to install the fetch-proxy package from npm registry. This is the first step to use the library in your project.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/fetch-proxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mjackson/fetch-proxy\n```\n\n----------------------------------------\n\nTITLE: Documenting fetch-proxy Changelog in Markdown\nDESCRIPTION: This snippet presents the changelog for the fetch-proxy package, including version numbers, release dates, and brief descriptions of changes made in each version.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/fetch-proxy/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `fetch-proxy` CHANGELOG\n\nThis is the changelog for [`fetch-proxy`](https://github.com/mjackson/remix-the-web/tree/main/packages/fetch-proxy). It follows [semantic versioning](https://semver.org/).\n\n## v0.2.0 (2024-11-14)\n\n- Added CommonJS build\n\n## v0.1.0 (2024-09-12)\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for lazy-file Package\nDESCRIPTION: Comprehensive changelog entries documenting version updates, breaking changes, and new features for the lazy-file package from version 1.0.0 to 3.3.1.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/lazy-file/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `lazy-file` CHANGELOG\n\nThis is the changelog for [`lazy-file`](https://github.com/mjackson/remix-the-web/tree/main/packages/lazy-file). It follows [semantic versioning](https://semver.org/).\n\n## v3.3.1 (2025-01-25)\n\n- Handle stream errors in `lazy-file/fs`' `writeFile`. When there is an error in the stream, call `writeStream.end()` on the underlying file stream before rejecting the promise.\n\n## v3.3.0 (2024-11-14)\n\n- Add CommonJS build\n\n## v3.2.0 (2024-09-12)\n\n- Export `OpenFileOptions` from `lazy-file/fs`\n\n## v3.1.0 (2024-09-04)\n\n- Add writeFile method to `lazy-file/fs` and rename `getFile` => `openFile`\n- Accept an open file descriptor or file handle in `writeFile(fd)`\n\n## v3.0.0 (2024-08-25)\n\n- BREAKING: Do not accept regular string argument to `LazyFile`. This more closely matches `File` behavior\n- BREAKING: Move 4th `LazyFile()` argument `range` into `options.range`\n- BREAKING: Renamed `LazyFileContent` interface to `LazyContent` and `content.read()` => `content.stream()`\n- Added `LazyBlob` (`Blob` subclass) as a complement to `LazyFile`\n- Added `LazyBlobOptions` and `LazyFileOptions` interfaces (`endings` is not supported)\n- Return a `name`-less `Blob` from `file.slice()` to more closely match native `File` behavior\n\n## v2.2.0 (2024-08-24)\n\n- Added support for `getFile(, { lastModified })` to override `file.lastModified`\n- Export `GetFileOptions` interface from `lazy-file/fs`\n\n## v2.1.0 (2024-08-24)\n\n- Added `getFile` helper to `lazy-file/fs` export for reading files from the local filesystem\n\n## v2.0.0 (2024-08-23)\n\n- BREAKING: Do not automatically propagate `name` and `lastModified` in `file.slice()`. This matches the behavior of `File` more closely\n- BREAKING: Remove `LazyFile[Symbol.asyncIterator]` to match the behavior of `File` more closely\n- In `slice(start, end)` make `end` default to `size` instead of `Infinity`. This more closely matches the `File` spec\n- Small perf improvement when streaming content arrays with Blobs in them and ending early\n\n## v1.1.0 (2024-08-22)\n\n- Add ability to initialize a LazyFile with `BlobPart[]`, just like a normal `File`\n- Add async iterator support to LazyFile\n\n## v1.0.0 (2024-08-21)\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Installing Node Fetch Server Package\nDESCRIPTION: Command to install the node-fetch-server package using npm package manager.\nSOURCE: https://github.com/mjackson/remix-the-web/blob/main/packages/node-fetch-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mjackson/node-fetch-server\n```"
  }
]