[
  {
    "owner": "make-software",
    "repo": "casper-net-sdk",
    "content": "TITLE: Installing Casper SDK via dotnet CLI\nDESCRIPTION: Command to install Casper.Network.SDK using the dotnet CLI tool, compatible with Windows, Mac, and Linux\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/GettingStarted.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Initializing Casper Client and Key Pairs in C#\nDESCRIPTION: Sets up the Casper client with a node address and chain name, and initializes key pairs for the faucet account and user account. This snippet prepares the necessary objects for interacting with the Casper network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/counter-contract/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic string nodeAddress = \"http://207.154.217.11:11101/rpc\";\nstatic string chainName = \"casper-net-1\";\n\nstatic NetCasperClient casperSdk = new NetCasperClient(nodeAddress);\n\nstatic KeyPair faucetAcct = KeyPair.FromPem(\"/tmp/faucetact_sk.pem\");\n\nstatic KeyPair myAccount = KeyPair.FromPem(\"/tmp/myaccount_sk.pem\");\nstatic PublicKey myAccountPK = PublicKey.FromPem(\"/tmp/myaccount_pk.pem\");\n```\n\n----------------------------------------\n\nTITLE: Installing Casper .NET SDK with Package Manager in Windows\nDESCRIPTION: Command to install the Casper .NET SDK using the Package Manager in Visual Studio on Windows.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Creating New Console Application\nDESCRIPTION: Command to create a new .NET console application named GetStarted using the dotnet CLI\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/GettingStarted.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new console -o GetStarted\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Contract with C# and Casper .NET SDK\nDESCRIPTION: This snippet demonstrates how to deploy an ERC-20 contract using the Casper .NET SDK. It prepares the deploy object, signs it, and sends it to the network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task<HashKey> DeployERC20Contract(KeyPair accountKey)\n{\n    var wasmFile = \"./erc20_token.wasm\";\n    var wasmBytes = System.IO.File.ReadAllBytes(wasmFile);\n\n    var header = new DeployHeader()\n    {\n        Account = accountKey.PublicKey,\n        Timestamp = DateUtils.ToEpochTime(DateTime.UtcNow),\n        Ttl = 1800000,\n        ChainName = chainName,\n        GasPrice = 1\n    };\n    var payment = new ModuleBytesDeployItem(300_000_000_000);\n\n    List<NamedArg> runtimeArgs = new List<NamedArg>();\n    runtimeArgs.Add(new NamedArg(\"name\", \"C# SDK Token\"));\n    runtimeArgs.Add(new NamedArg(\"symbol\", \"CSSDK\"));\n    runtimeArgs.Add(new NamedArg(\"decimals\", (byte) 5)); //u8\n    runtimeArgs.Add(new NamedArg(\"total_supply\", CLValue.U256(10_000)));\n\n    var session = new ModuleBytesDeployItem(wasmBytes, runtimeArgs);\n\n    var deploy = new Deploy(header, payment, session);\n    deploy.Sign(accountKey);\n\n    await casperSdk.PutDeploy(deploy);\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deploy.Hash, tokenSource.Token);\n\n    var execResult = deployResponse.Parse().ExecutionResults.First();\n\n    Console.WriteLine(\"Deploy COST : \" + execResult.Cost);\n\n    var contractHash = execResult.Effect.Transforms.First(t =>\n        t.Type == TransformType.WriteContract).Key;\n    Console.WriteLine(\"Contract key: \" + contractHash);\n\n    File.WriteAllText(\"res_DeployERC20Contract.json\", deployResponse.Result.GetRawText());\n\n    return (HashKey) contractHash;\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for API Documentation in Casper Network SDK\nDESCRIPTION: Provides an example of how to search for documentation within the Casper Network SDK by using an entity name like 'Account'.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSearch for a class, method, enumeration or namespace by its name or part of the name e.g. `Account`.\n```\n\n----------------------------------------\n\nTITLE: Creating ServerEventsClient for Different Casper Node Versions in C#\nDESCRIPTION: Examples of instantiating the ServerEventsClient for different Casper Node versions. The client takes event IP address, local network port, and an optional nodeVersion parameter which defaults to 2 for Casper Node 2.x compatibility.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithSSE.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar sse = new ServerEventsClient(eventIpAddress, localNetPort, nodeVersion: 1); // For versions 1.x\n\nvar sse = new ServerEventsClient(eventIpAddress, localNetPort); // The default value is 2\n```\n\n----------------------------------------\n\nTITLE: Creating ED25519 Key Pair in Casper .Net SDK\nDESCRIPTION: Creates a new cryptographic key pair using the ED25519 algorithm. This generates both public and private keys that can be used for signing transactions in the Casper network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar newKeyPair = KeyPair.CreateNew(KeyAlgo.ED25519);\n```\n\n----------------------------------------\n\nTITLE: Creating Public Key from Hex String in Casper .Net SDK\nDESCRIPTION: Creates a PublicKey object from a hexadecimal string that includes the algorithm identifier prefix. This is useful when you have a key in string format that includes the algorithm byte.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar pk = PublicKey.FromHexString(\"012629e6d0eed7db2d232b5b0a35d729796bb6f3cbd12811538a61de78c75870ba\");\n```\n\n----------------------------------------\n\nTITLE: Reading Public Key from PEM File in Casper .Net SDK\nDESCRIPTION: Loads a public key from a PEM formatted file. This allows using existing public keys that are stored in the PEM format for transaction validation.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar pk = PublicKey.FromPem(\"/tmp/my_pk.pem\");\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric CLValues in C#\nDESCRIPTION: Examples of creating CLValue objects with numeric types in C#, showing conversion for different integer sizes and methods for direct usage in NamedArg objects.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar myI32 = CLValue.I32(int.MinValue);\nvar myI64 = CLValue.I64(long.MaxValue);\nvar myU8 = CLValue.U8(0x7F);\nvar myU32 = CLValue.U32(0);\nvar myU64 = CLValue.U64(ulong.MaxValue);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar i32Arg = new NamedArg(\"value\", int.MinValue);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar i32Arg = new NamedArg(\"value\", myI32);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar num1 = myI32.ToInt32();\nvar num2 = myI64.ToInt64();\nvar num3 = myU8.ToByte();\nvar num4 = myU32.ToUInt32();\nvar num5 = myU64.ToUInt64();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar num1 = (int)myI32;\nvar num2 = (long)myI64;\nvar num3 = (byte)myU8;\nvar num4 = (uint)myU32;\nvar num5 = (ulong)myU64;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar cspr3 = CLValue.U512(3_000_000_000);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar payment = new NamedArg(\"payment\", new BigInteger(3_000_000_000));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar payment = new NamedArg(\"payment\", cspr3);\n```\n\n----------------------------------------\n\nTITLE: Creating ED25519 Public Key from Raw Bytes in Casper .Net SDK\nDESCRIPTION: Creates an ED25519 PublicKey object from a hexadecimal string of raw bytes without the algorithm prefix. This method requires explicitly specifying the key algorithm.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar pk2 = PublicKey.FromRawBytes(\"2629e6d0eed7db2d232b5b0a35d729796bb6f3cbd12811538a61de78c75870ba\", KeyAlgo.ED25519);\n```\n\n----------------------------------------\n\nTITLE: Writing Public Key to PEM File from Key Pair in Casper .Net SDK\nDESCRIPTION: Saves only the public key component of a key pair to a PEM file. This method is convenient when you want to share only the public key with others.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnewKeyPair.WritePublicKeyToPem(\"newED25519_pk.pem\");\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter Value on Casper Network in C#\nDESCRIPTION: Creates and sends a deploy to call the 'counter_inc' entry point of the counter contract. This function shows how to interact with deployed contracts on the Casper network by calling their entry points.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/counter-contract/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task CallCounterInc()\n{\n  var deploy = DeployTemplates.ContractCall(\n      \"counter\",\n      \"counter_inc\",\n      null,\n      myAccountPK,\n      15_000_000,\n      chainName);\n  deploy.Sign(myAccount);\n  \n  var putResponse = await casperSdk.PutDeploy(deploy);\n  \n  var deployHash = putResponse.GetDeployHash();\n  \n  var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n  var getResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n  \n  var execResult = getResponse.Parse().ExecutionResults.First();\n  \n  Console.WriteLine(\"Deploy COST : \" + execResult.Cost);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Public Key to PEM File Directly in Casper .Net SDK\nDESCRIPTION: Saves a public key object directly to a PEM file. This is an alternative way to export just the public key when you already have a reference to the PublicKey object.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnewKeyPair.PublicKey.WriteToPem(\"newED25519_pk2.pem\");\n```\n\n----------------------------------------\n\nTITLE: Writing Private Key to PEM File for ED25519 in Casper .Net SDK\nDESCRIPTION: Saves a newly created ED25519 private key to a PEM file for later use. The file will contain the complete key pair information in PEM format.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnewKeyPair.WriteToPem(\"newED25519_sk.pem\");\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens with C# and Casper .NET SDK\nDESCRIPTION: This snippet demonstrates how to transfer tokens from one account to another using the ERC-20 contract and the Casper .NET SDK. It calls the 'transfer' entry point of the contract.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task TransferTokens(string contractHash, KeyPair ownerAccount, PublicKey recipientPk,\n            ulong amount)\n{\n    var deploy = DeployTemplates.ContractCall(new HashKey(contractHash),\n        \"transfer\",\n        new List<NamedArg>()\n        {\n            new NamedArg(\"recipient\", CLValue.Key(new AccountHashKey(recipientPk))),\n            new NamedArg(\"amount\", CLValue.U256(amount))\n        },\n        ownerAccount.PublicKey,\n        1_000_000_000,\n        chainName);\n    deploy.Sign(ownerAccount);\n\n    await casperSdk.PutDeploy(deploy);\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deploy.Hash, tokenSource.Token);\n\n    File.WriteAllText(\"res_TransferTokens.json\", deployResponse.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Token Balance with C# and Casper .NET SDK\nDESCRIPTION: This snippet shows how to read the balance of an account from the ERC-20 contract using the Casper .NET SDK. It queries the 'balances' dictionary of the contract.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task ReadBalance(string contractHash, PublicKey publicKey)\n{\n    var accountHash = new AccountHashKey(publicKey);\n    var dictItem = Convert.ToBase64String(accountHash.GetBytes());\n    \n    var response = await casperSdk.GetDictionaryItemByContract(contractHash, \"balances\", dictItem);\n\n    File.WriteAllText(\"res_ReadBalance.json\", response.Result.GetRawText());\n\n    var result = response.Parse();\n    var balance = result.StoredValue.CLValue.ToBigInteger();\n    Console.WriteLine(\"Balance: \" + balance.ToString() + \" $CSSDK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens from Owner's Allowance with C# and Casper .NET SDK\nDESCRIPTION: This snippet shows how a spender can transfer tokens from the owner's account to a recipient using the approved allowance. It calls the 'transfer_from' entry point of the ERC-20 contract using the Casper .NET SDK.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task TransferTokensFromOwner(string contractHash, KeyPair spenderAccount, \n    PublicKey ownerPk, PublicKey recipientPk, ulong amount)\n{\n    var deploy = DeployTemplates.ContractCall(new HashKey(contractHash),\n        \"transfer_from\",\n        new List<NamedArg>()\n        {\n            new NamedArg(\"owner\", CLValue.Key(new AccountHashKey(ownerPk))),\n            new NamedArg(\"recipient\", CLValue.Key(new AccountHashKey(recipientPk))),\n            new NamedArg(\"amount\", CLValue.U256(amount))\n        },\n        spenderAccount.PublicKey,\n        1_000_000_000,\n        chainName);\n    deploy.Sign(spenderAccount);\n\n    await casperSdk.PutDeploy(deploy);\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deploy.Hash, tokenSource.Token);\n\n    File.WriteAllText(\"res_TransferFromOwner.json\", deployResponse.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Key Pair from PEM File in Casper .Net SDK\nDESCRIPTION: Loads a complete key pair (both public and private keys) from a PEM formatted file. This allows using existing keys for signing new transactions.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar keypair = KeyPair.FromPem(\"/tmp/faucetact.pem\");\n```\n\n----------------------------------------\n\nTITLE: Working with Option CLValues in C#\nDESCRIPTION: Examples of creating and using Option CLValue types, including creating Some and None options, checking option state, and extracting values from options.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar option1 = CLValue.Option(CLValue.String(\"Hello World!\"));\n// but also:\nvar option2 = CLValue.Option(\"Hello World!\");\nvar option3 = CLValue.Option(int.MinValue);\nvar option4 = CLValue.Option(publicKey);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar option4 = CLValue.OptionNone(CLType.String);\n```\n\nLANGUAGE: csharp\nCODE:\n```\noption1.IsSome(); //returns true\noption1.IsNone(); //returns false\n\noption4.IsSome(); //returns false\noption4.IsNone(); //returns true\n```\n\nLANGUAGE: csharp\nCODE:\n```\nif(option1.Some(out string str1))\n  Console.WriteLine($\"option1 = {str1}\");\n```\n\n----------------------------------------\n\nTITLE: Converting ISO 8601 String to Epoch Timestamp in C#\nDESCRIPTION: This method converts an ISO 8601 formatted date string to an epoch timestamp (milliseconds since Unix epoch). It handles both UTC and local time formats.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/apidoc/Utils.DateUtils.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static long ToEpochTime(string iso8601String)\n{\n    DateTime dateTime;\n    if (iso8601String.EndsWith(\"Z\"))\n    {\n        dateTime = DateTime.Parse(iso8601String, null, DateTimeStyles.RoundtripKind);\n    }\n    else\n    {\n        dateTime = DateTime.Parse(iso8601String);\n    }\n    return new DateTimeOffset(dateTime).ToUnixTimeMilliseconds();\n}\n```\n\n----------------------------------------\n\nTITLE: Working with List CLValues in C#\nDESCRIPTION: Examples of creating and converting List CLValue types, demonstrating creation of a list of values, usage in NamedArg, and extraction of list values.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar list = CLValue.List(new[]\n    {CLValue.U8(0x10), CLValue.U8(0x20), CLValue.U8(0x30), CLValue.U8(0x40)});\n\nvar namedArgs = new List<NamedArg>()\n{\n    new NamedArg(\"name\", \"MyListOfBytes\"),\n    new NamedArg(\"value\", list)\n};\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar list1 = list.ToList();\n```\n\n----------------------------------------\n\nTITLE: Block Class Structure in Casper .NET SDK v3.0\nDESCRIPTION: Definition of the Block class in v3.0 which can represent either V1 or V2 block types in the network. This class contains all the data that can be queried from blocks, with some properties being null for specific versions.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Block\n{\n        public int Version { get; init; }\n        public string Hash { get; init; }\n        public string AccumulatedSeed { get; init; }\n        public ulong EraId { get; init; }\n        public ulong Height { get; init; }\n        public string ParentHash { get; init; }\n        public string ProtocolVersion { get; init; }\n        public bool RandomBit { get; init; }\n        public string StateRootHash { get; init; }\n        public string Timestamp { get; init; }\n        public EraEnd EraEnd { get; init; }\n        public UInt16 CurrentGasPrice { get; init; }\n        public Proposer Proposer { get; init; }\n        public string LastSwitchBlockHash { get; init; }\n        public List<BlockTransaction> Transactions { get; init; }\n        public List<List<UInt16>> RewardedSignatures { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Generic Block to Versioned Block Types\nDESCRIPTION: Example of how to cast a generic Block object to its specific version (BlockV1 or BlockV2) based on the Version property. This allows access to version-specific properties and structures.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (block.Version == 2) {\n    var blockv2 = (BlockV2)block;\n    // ...\n} else if (block.Version == 1) {\n    var blockv1 = (BlockV1)block;\n    // ...\n}    \n```\n\n----------------------------------------\n\nTITLE: Deploying Counter Contract to Casper Network in C#\nDESCRIPTION: Reads a WebAssembly contract file, creates a deploy for contract installation, signs it, and sends it to the network. This function shows how to deploy smart contracts to the Casper blockchain using the .NET SDK.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/counter-contract/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task DeployContract(string wasmFile)\n{\n  var wasmBytes = await File.ReadAllBytesAsync(wasmFile);\n  \n  var deploy = DeployTemplates.ContractDeploy(\n      wasmBytes, \n      myAccount,\n      50_000_000_000, \n      chainName);\n  deploy.Sign(myAccount);\n  \n  var putResponse = await casperSdk.PutDeploy(deploy);\n  \n  var deployHash = putResponse.GetDeployHash();\n  \n  var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n  var getResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n  \n  var execResult = getResponse.Parse().ExecutionResults.First();\n  \n  Console.WriteLine(\"Deploy COST : \" + execResult.Cost);\n  Console.WriteLine(\"Contract key: \" + execResult.Effect.Transforms.First(t =>\n      t.Type == TransformType.WriteContract).Key);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing EraEnd from BlockV1\nDESCRIPTION: Example showing how to retrieve the EraEnd object from a BlockV1 instance. This demonstrates how to access version-specific structures when needed.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (block.Version == 1) {\n    var blockv1 = (BlockV1)block;\n    var eraEnd = blockv1.Header.EraEnd;\n    // ...\n}    \n```\n\n----------------------------------------\n\nTITLE: Converting Transfers to Versioned Types\nDESCRIPTION: Example of how to cast a generic Transfer object to its specific version (TransferV1 or TransferV2) when processing block transfers. This allows access to version-specific properties.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await rpcClient.GetBlockTransfers();\nvar result = response.Parse();\nforeach(var transfer in result.Transfers)\n{\n    if (transfer.Version == 1) {\n        var transferv1 = (TransferV1)transfer;\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Map CLValues in C#\nDESCRIPTION: Examples of creating and converting Map CLValue types, demonstrating creation of a dictionary of key-value pairs, usage in NamedArg, and extraction of dictionary values.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar dict = new Dictionary<CLValue, CLValue>()\n    {\n        {CLValue.String(\"fourteen\"), CLValue.Option(CLValue.String(\"14\"))},\n        {CLValue.String(\"fifteen\"), CLValue.Option(CLValue.String(\"15\"))},\n        {CLValue.String(\"sixteen\"), CLValue.Option(CLValue.String(\"16\"))},\n        {CLValue.String(\"none\"), CLValue.OptionNone(CLType.String)},\n    };\n\nvar map = CLValue.Map(dict);\n\nvar namedArgs = new List<NamedArg>()\n    {\n        new NamedArg(\"name\", \"MyMap\"),\n        new NamedArg(\"value\", map)\n    };\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar dict1 = map.ToDictionary();\n```\n\n----------------------------------------\n\nTITLE: Converting FinalitySignature to Versioned Types\nDESCRIPTION: Example of how to cast a generic FinalitySignature object to its specific version (FinalitySignatureV1 or FinalitySignatureV2) based on the Version property. This allows access to version-specific properties.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nif (finalitySignature.Version == 2) {\n    var finalitySignatureV2 = (FinalitySignatureV2)finalitySignature;\n    // ...\n} else if (finalitySignature.Version == 1) {\n    var finalitySignatureV1 = (FinalitySignatureV1)finalitySignature;\n    // ...\n}   \n```\n\n----------------------------------------\n\nTITLE: Installing Casper .NET SDK with dotnet CLI\nDESCRIPTION: Command to add the Casper .NET SDK package to a project using the dotnet CLI tool on Windows, Mac, or Linux.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Creating SECP256K1 Key Pair in Casper .Net SDK\nDESCRIPTION: Creates a new cryptographic key pair using the SECP256K1 algorithm. This generates a different type of key pair that's also supported by the Casper network for signing transactions.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar anotherKeyPair = KeyPair.CreateNew(KeyAlgo.SECP256K1);\n```\n\n----------------------------------------\n\nTITLE: Working with PublicKey and URef CLValues in C#\nDESCRIPTION: Examples of converting between PublicKey/URef objects and CLValue objects, demonstrating creation, usage in NamedArg, and extraction of typed values.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar publicKey = PublicKey.FromPem(\"myPublicKey.pem\");\nvar pkClValue = CLValue.PublicKey(publicKey);\n\nvar arg1 = new NamedArg(\"value\", pkClValue); \nvar arg2 = new NamedArg(\"value\", publicKey);\n\nvar pk1 = pkClValue.ToPublicKey();\nvar pk2 = (PublicKey) pkClValue;            \n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar uref = new URef(\"uref-000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f-007\");\nvar urefClValue = CLValue.URef(uref);\n\nvar arg3 = new NamedArg(\"value\", urefClValue); \nvar arg4 = new NamedArg(\"value\", uref);\n\nvar uref2 = urefClValue.ToURef();\nvar uref3 = (URef) urefClValue;\n```\n\n----------------------------------------\n\nTITLE: Approving Token Spender with C# and Casper .NET SDK\nDESCRIPTION: This snippet shows how to approve a spender to transfer tokens on behalf of the owner using the ERC-20 contract and the Casper .NET SDK. It calls the 'approve' entry point of the contract.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task ApproveSpender(string contractHash, KeyPair ownerAccount, PublicKey spenderPk, ulong amount)\n{\n    var deploy = DeployTemplates.ContractCall(new HashKey(contractHash),\n        \"approve\",\n        new List<NamedArg>()\n        {\n            new NamedArg(\"spender\", CLValue.Key(new AccountHashKey(spenderPk))),\n            new NamedArg(\"amount\", CLValue.U256(amount))\n        },\n        ownerAccount.PublicKey,\n        1_000_000_000,\n        chainName);\n    deploy.Sign(ownerAccount);\n\n    await casperSdk.PutDeploy(deploy);\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deploy.Hash, tokenSource.Token);\n\n    File.WriteAllText(\"res_ApproveSpender.json\", deployResponse.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Working with ByteArray CLValues in C#\nDESCRIPTION: Examples of converting between C# byte arrays and CLValue objects, demonstrating creation, usage in NamedArg, and extraction of byte array values.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar bytes = new byte[] {0x00, 0x01, 0x02, 0x03};\nvar clValue = CLValue.ByteArray(bytes);\n\nvar arg1 = new NamedArg(\"value\", clValue);\nvar arg2 = new NamedArg(\"value\", bytes);\n\nvar bytes1 = clValue.ToByteArray();\nvar bytes2 = (byte[]) clValue;\n```\n\n----------------------------------------\n\nTITLE: Working with String CLValues in C#\nDESCRIPTION: Examples of converting between C# strings and CLValue objects, showing explicit creation, usage in NamedArg, and extraction of string values.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar clString = CLValue.String(\"Hello world!\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar namedArgs = new List<NamedArg>()\n    {\n        new NamedArg(\"name\", \"Weekday\"),\n        new NamedArg(\"value\", \"Monday\")\n    };\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstring value = clString.ToString();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstring value = (string)clValue;\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean CLValues in C#\nDESCRIPTION: Examples of creating CLValue objects with boolean types in C#. Shows both the explicit creation of CLValue objects and using native C# boolean types with NamedArg.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar clTrue = CLValue.Bool(true);\nvar clFalse = CLValue.Bool(false);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar inputArg = new NamedArg(\"value\", true);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar b1 = clValue.ToBoolean();\nvar b2 = (bool)clValue;\n```\n\n----------------------------------------\n\nTITLE: Creating SECP256K1 Public Key from Raw Bytes in Casper .Net SDK\nDESCRIPTION: Creates a SECP256K1 PublicKey object from a hexadecimal string of raw bytes. This demonstrates creating a different type of key by explicitly specifying the SECP256K1 algorithm.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar pk3 = PublicKey.FromRawBytes(\"02793d6a3940502b0946bed65719d3e75d089a25b52a8fc740373c48a8031e83b3\", KeyAlgo.SECP256K1);\n```\n\n----------------------------------------\n\nTITLE: Deploying Key-Value Storage Contract in C#\nDESCRIPTION: Method to deploy the key-value storage contract to the Casper network. It reads the WASM file, creates a deploy object, signs it, and sends it to the network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task<HashKey> DeployKVStorageContract()\n{\n    var wasmFile = \"./contract.wasm\";\n    var wasmBytes = System.IO.File.ReadAllBytes(wasmFile);\n    \n    var deploy = DeployTemplates.ContractDeploy(\n        wasmBytes, \n        myAccountPK,\n        300_000_000_000, \n        chainName);\n    deploy.Sign(myAccount);\n\n    var response = await casperSdk.PutDeploy(deploy);\n\n    string deployHash = response.GetDeployHash();\n    \n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n\n    var execResult = deployResponse.Parse().ExecutionResults.First();\n\n    Console.WriteLine(\"Deploy COST : \" + execResult.Cost);\n    \n    var contractHash = execResult.Effect.Transforms.First(t =>\n                t.Type == TransformType.WriteContract).Key;\n    Console.WriteLine(\"Contract key: \" + contractHash);\n    \n    return (HashKey)contractHash;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Counter Value from Casper Network in C#\nDESCRIPTION: Sends a query to the Casper network to retrieve the current value of the counter. This function demonstrates how to read contract state from the blockchain using the QueryGlobalState method.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/counter-contract/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task QueryState()\n{\n  var accountKey = new AccountHashKey(myAccountPK);\n  var rpcResponse = await casperSdk.QueryGlobalState(accountKey, null,\n     \"counter/count\");\n \n  var result = rpcResponse.Parse();\n  Console.WriteLine(\"Counter value: \" + (int)result.StoredValue.CLValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Key from Key Pair in Casper .Net SDK\nDESCRIPTION: Retrieves the public key component from a key pair object. This is useful when you need only the public part for verification purposes after loading a complete key pair.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar faucetPK = keypair.PublicKey;\n```\n\n----------------------------------------\n\nTITLE: Writing Private Key to PEM File for SECP256K1 in Casper .Net SDK\nDESCRIPTION: Saves a newly created SECP256K1 private key to a PEM file for later use. The file will contain the complete key pair information in PEM format.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/KeyManagement.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nanotherKeyPair.WriteToPem(\"newSECP256K1_sk.pem\");\n```\n\n----------------------------------------\n\nTITLE: Storing String Value Using Contract Hash\nDESCRIPTION: Method to store a string value in the contract using the contract hash instead of named key.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task StoreString(HashKey contractHash = null)\n{\n    var namedArgs = new List<NamedArg>()\n    {\n        new NamedArg(\"name\", \"WorkingOn\"),\n        new NamedArg(\"value\", \"Casper .NET SDK\")\n    };\n\n    var deploy = DeployTemplates.ContractCall(contractHash,\n        \"store_string\",\n        namedArgs,\n        myAccountPK,\n        500_000_000,\n        chainName);\n\n    deploy.Sign(myAccount);\n\n    var response = await casperSdk.PutDeploy(deploy);\n    var deployHash = response.GetDeployHash();\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n\n    File.WriteAllText(\"res_StoreString.json\", deployResponse.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Stored Value by Named Key\nDESCRIPTION: Method to read a stored value from the contract using the contract name and named key.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task<CLValue> ReadStoredValue(string namedKey)\n{\n    var accountKey = new AccountHashKey(myAccountPK);\n    var rpcResponse = await casperSdk.QueryGlobalState(accountKey, null,\n        $\"kvstorage_contract/{namedKey}\");\n\n    Console.WriteLine(rpcResponse.Result.GetRawText());\n    File.WriteAllText($\"res_ReadStoredValue_{namedKey}.json\", rpcResponse.Result.GetRawText());\n\n    return rpcResponse.Parse().StoredValue.CLValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Integer Value in Contract\nDESCRIPTION: Methods to store an integer value in the contract using the store_i32 entry point.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task StoreI32()\n{\n    var namedArgs = new List<NamedArg>()\n    {\n        new NamedArg(\"name\", \"I32MinValue\"),\n        new NamedArg(\"value\", int.MinValue)\n    };\n\n    await StoreKeyValue(\"store_i32\", namedArgs, \"res_StoreI32.json\");\n}\n\nprivate async static Task StoreKeyValue(string entryPoint, List<NamedArg> namedArgs, string saveToFile)\n{\n    var deploy = DeployTemplates.ContractCall(\"kvstorage_contract\",\n        entryPoint,\n        namedArgs,\n        myAccountPK,\n        1_000_000_000,\n        chainName);\n    deploy.Sign(myAccount);\n\n    var response = await casperSdk.PutDeploy(deploy);\n    var deployHash = response.GetDeployHash();\n\n    var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n    var deployResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n\n    if (saveToFile != null)\n        File.WriteAllText(saveToFile, deployResponse.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NCTL Docker Container\nDESCRIPTION: Docker command to run NCTL in a container with port forwarding for node communication. Maps container ports 11101, 14101, and 18101 to host machine, enabling interaction with the local Casper network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/RunningNctlLocally.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name mynctl -d -p 11101:11101 -p 14101:14101 -p 18101:18101 makesoftware/casper-nctl\n```\n\n----------------------------------------\n\nTITLE: Running NCTL in Docker Container\nDESCRIPTION: Docker command to start an NCTL container and publish ports for one of the nodes. This allows running a local Casper network for testing.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --name mynctl -d -p 11101:11101 -p 14101:14101 -p 18101:18101 makesoftware/casper-nctl\n```\n\n----------------------------------------\n\nTITLE: Building Casper .NET SDK\nDESCRIPTION: Command to build the Casper .NET SDK library using the dotnet CLI tool.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build --configuration Release\n```\n\n----------------------------------------\n\nTITLE: Running Casper .NET SDK Tests\nDESCRIPTION: Command to run the test suite for the Casper .NET SDK, excluding NCTL integration tests.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter 'TestCategory!~NCTL'\n```\n\n----------------------------------------\n\nTITLE: Running Casper .NET SDK Integration Tests\nDESCRIPTION: Command to run the integration tests for the Casper .NET SDK against a local NCTL network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --settings Casper.Network.SDK.Test/test.runsettings --filter 'TestCategory~NCTL'\n```\n\n----------------------------------------\n\nTITLE: Installing Casper SDK via Package Manager\nDESCRIPTION: Command to install Casper.Network.SDK using the Windows Package Manager in Visual Studio\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/GettingStarted.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package Casper.Network.SDK\n```\n\n----------------------------------------\n\nTITLE: Adding SDK Project Reference\nDESCRIPTION: Commands to navigate to the project directory and add a direct reference to the Casper.Network.SDK project file\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/GettingStarted.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd GetStarted\ndotnet add reference ../Casper.Network.SDK/Casper.Network.SDK.csproj\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: Command to run the .NET console application after setup\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/GettingStarted.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Casper .NET SDK Tests for netstandard2.0\nDESCRIPTION: Command to run the test suite for the Casper .NET SDK targeting the netstandard2.0 framework.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FRAMEWORK=netstandard2.0 dotnet test --filter 'TestCategory!~NCTL'\n```\n\n----------------------------------------\n\nTITLE: Running Casper .NET SDK Integration Tests for netstandard2.0\nDESCRIPTION: Command to run the integration tests for the Casper .NET SDK targeting the netstandard2.0 framework against a local NCTL network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTEST_FRAMEWORK=netstandard2.0 dotnet test --settings Casper.Network.SDK.Test/test.runsettings --filter 'TestCategory~NCTL'\n```\n\n----------------------------------------\n\nTITLE: Converting ExecutionResult to Versioned Types\nDESCRIPTION: Example of how to cast a generic ExecutionResult object to its specific version (ExecutionResultV1 or ExecutionResultV2) based on the Version property. This allows access to version-specific properties.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nif (executionResult.Version == 2) {\n    var executionResultV2 = (ExecutionResultV2)executionResult;\n    // ...\n} else if (executionResult.Version == 1) {\n    var executionResultV1 = (ExecutionResultV1)executionResult;\n    // ...\n}   \n```\n\n----------------------------------------\n\nTITLE: Working with Key CLValues in C#\nDESCRIPTION: Example of converting between GlobalStateKey objects (e.g., AccountHashKey) and CLValue objects, showing creation and usage in NamedArg.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar publicKey = PublicKey.FromPem(\"myPublicKey.pem\");\nvar accountHash = new AccountHashKey(publicKey);\n\nvar accountClValue = CLValue.Key(accountHash);\n\nvar arg1 = new NamedArg(\"value\", accountClValue);\nvar arg2 = new NamedArg(\"value\", accountHash);\n```\n\n----------------------------------------\n\nTITLE: Transferring CSPR from Faucet to User Account in C#\nDESCRIPTION: Creates a deploy for transferring 2500 CSPR from the faucet account to the user account. It signs the deploy, sends it to the network, and waits for confirmation. This function demonstrates how to perform token transfers on the Casper network.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/counter-contract/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task FundAccount()\n{\n  var deploy = DeployTemplates.StandardTransfer(\n      faucetAcct.PublicKey,\n      myAccountPK,\n      2500_000_000_000,\n      100_000_000,\n      chainName);\n  deploy.Sign(faucetAcct);\n  \n  var putResponse = await casperSdk.PutDeploy(deploy);\n  \n  var deployHash = putResponse.GetDeployHash();\n  \n  var tokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(120));\n  var getResponse = await casperSdk.GetDeploy(deployHash, tokenSource.Token);\n  \n  var execResult = getResponse.Parse().ExecutionResults.First();\n  Console.WriteLine(\"Deploy COST : \" + execResult.Cost);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information in C#\nDESCRIPTION: Method to fetch account information including named keys after contract deployment.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task GetAccountInfo()\n{\n    var response = await casperSdk.GetAccountInfo(myAccountPK);\n    \n    File.WriteAllText(\"res_GetAccountInfo.json\", response.Result.GetRawText());\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Stored Value Using Contract Hash\nDESCRIPTION: Method to read a stored value using the contract hash and named key.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async static Task<CLValue> ReadStoredValue(string namedKey, GlobalStateKey contractHash)\n{\n    var queryResponse = await casperSdk.QueryGlobalState(contractHash, null, namedKey);\n\n    File.WriteAllText($\"res_ReadStoredValue_{namedKey}.json\", queryResponse.Result.GetRawText());\n\n    return queryResponse.Parse().StoredValue.CLValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Token Allowance with C# and Casper .NET SDK\nDESCRIPTION: This snippet demonstrates how to read the allowance of a spender for a specific owner's tokens using the ERC-20 contract and the Casper .NET SDK. It queries the 'allowances' dictionary of the contract.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task ReadAllowance(string contractHash, PublicKey ownerPk, PublicKey spenderPk)\n{\n    var ownerAccHash = new AccountHashKey(ownerPk);\n    var spenderAccHash = new AccountHashKey(spenderPk);\n    var bytes = new byte[ownerAccHash.GetBytes().Length + spenderAccHash.GetBytes().Length];\n    Array.Copy(ownerAccHash.GetBytes(), 0, bytes, 0, ownerAccHash.GetBytes().Length);\n    Array.Copy(spenderAccHash.GetBytes(), 0, bytes, ownerAccHash.GetBytes().Length,\n        spenderAccHash.GetBytes().Length);\n\n    var bcBl2bdigest = new Org.BouncyCastle.Crypto.Digests.Blake2bDigest(256);\n    bcBl2bdigest.BlockUpdate(bytes, 0, bytes.Length);\n    var hash = new byte[bcBl2bdigest.GetDigestSize()];\n    bcBl2bdigest.DoFinal(hash, 0);\n\n    var dictItem = Hex.ToHexString(hash);\n\n    var response = await casperSdk.GetDictionaryItemByContract(contractHash, \"allowances\", dictItem);\n\n    File.WriteAllText(\"res_ReadAllowance.json\", response.Result.GetRawText());\n\n    var result = response.Parse();\n    var balance = result.StoredValue.CLValue.ToBigInteger();\n    Console.WriteLine(\"Allowance: \" + balance.ToString() + \" $CSSDK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Balance or Allowance with Error Handling in C# and Casper .NET SDK\nDESCRIPTION: This snippet demonstrates how to check the balance or allowance of an account, handling the case where the account or allowance doesn't exist in the contract's dictionary. It uses a try-catch block to capture and handle RPC errors.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/erc20-contract/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    var response = await casperSdk.GetDictionaryItemByContract(contractHash, \"balances\", dictItem);\n\n    File.WriteAllText(\"res_ReadBalance.json\", response.Result.GetRawText());\n\n    var result = response.Parse();\n    var balance = result.StoredValue.CLValue.ToBigInteger();\n    Console.WriteLine(\"Balance: \" + balance.ToString() + \" $CSSDK\");\n}\ncatch (RpcClientException e)\n{\n    if (e.RpcError.Code == -32003)\n        Console.WriteLine(\"Allowance not found!\");\n    else\n        throw;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.0\nDESCRIPTION: Changelog entry for version 3.0.0, noting it is identical to 3.0.0-beta4 and referring to previous beta releases and migration guide.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.0]\n\nThis version is identical to `3.0.0-beta4`. Please review the changes in the previous beta releases, and refer to the [Migration guide](https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/Casper20MigrationGuide.md) if you're updating a project from `v2.x`.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.0-beta4\nDESCRIPTION: Changelog entry for version 3.0.0-beta4, adding the 'Unbond' bid kind to the 'Bids' list in the get auction info response.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.0-beta4]\n\n### Added\n\n* Added the `Unbond` bid kind to the `Bids` list in the get auction info response.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 3.0.0-beta3\nDESCRIPTION: Changelog entry for version 3.0.0-beta3, listing additions, changes, and fixes including new methods, property changes, and bug fixes.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.0-beta3]\n\n### Added\n\n* The `TransactionBuilder` now accepts amount as `ulong` type for the `Payment()` method.\n* New `GlobalStateKey.FromValidatorKey()` to get the bid address key of a validator.\n* New `GetNodeVersion()` in the main client class as a convenient method to check node version.\n* New `GetValidatorBid()` method to recover the bid information of a validator.\n\n### Changed\n\n* `MessageKey` contains an `AddressableEntity` property instead of a `HashAddr` to represent the related contract entity.\n* `GetAuctionInfo()` now uses the new `state_get_auction_info_v2` RPC method in Casper 2.0.\n\n### Fixed\n\n* [#99](https://github.com/make-software/casper-net-sdk/issues/99) SSE Listener emits the same event 3 times when listening to EventType.All\n* Fixed the `TransactionV1.ValidateHashes()` method to properly verify the hashes.\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits with Developer Certificate of Origin in Markdown\nDESCRIPTION: Example of how to sign git commits with the Developer Certificate of Origin (DCO) by adding a Signed-off-by line to commit messages. This shows both manual signing and how to set up git for automatic signing with the -s flag.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n````\n  Signed-off-by: Random J Developer <random@developer.example.org>\n````\n```\n\n----------------------------------------\n\nTITLE: CLValue Boolean Example in JSON\nDESCRIPTION: Example of a simple CLValue representing a boolean true value in JSON format, showing the cl_type, bytes representation, and parsed value.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Articles/WorkingWithCLValue.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cl_type\":\"Bool\",\n    \"bytes\":\"01\",\n    \"parsed\":true\n}\n```\n\n----------------------------------------\n\nTITLE: Building Key-Value Storage Contract\nDESCRIPTION: Commands to clone and build the key-value storage contract from GitHub repository.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/Tutorials/kvstorage-contract/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casper-ecosystem/kv-storage-contract\ncd kv-storage-contract\nmake build-contract\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: YAML frontmatter defining the documentation structure for ByteSerializers namespace, including unique identifier and summary placeholder.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/apidoc/ByteSerializers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nuid: Casper.Network.SDK.ByteSerializers.md\nsummary: *content\n---\n```\n\n----------------------------------------\n\nTITLE: Converting Epoch Timestamp to ISO 8601 String in C#\nDESCRIPTION: This method converts an epoch timestamp (milliseconds since Unix epoch) to an ISO 8601 formatted date string in UTC format.\nSOURCE: https://github.com/make-software/casper-net-sdk/blob/master/Docs/apidoc/Utils.DateUtils.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string ToIso8601(long epochTime)\n{\n    var dateTime = DateTimeOffset.FromUnixTimeMilliseconds(epochTime).UtcDateTime;\n    return dateTime.ToString(\"yyyy-MM-ddTHH:mm:ss.fffZ\");\n}\n```"
  }
]