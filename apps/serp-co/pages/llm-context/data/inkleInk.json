[
  {
    "owner": "inkle",
    "repo": "ink",
    "content": "TITLE: Setting/Getting Ink Variables - C#\nDESCRIPTION: This snippet illustrates how to set and get variables within the ink story's `variablesState` object. It accesses variables by their names (strings) and assigns or retrieves values. Requires casting when retrieving values to ensure correct data types.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.variablesState[\"player_health\"] = 100\n\nint health = (int) _inkStory.variablesState[\"player_health\"]\n```\n\n----------------------------------------\n\nTITLE: C# Ink Runtime Engine Integration\nDESCRIPTION: This C# code demonstrates the basic steps for integrating the ink runtime engine into a game. It involves loading a compiled ink story from a JSON string, iterating through the story content, displaying choices to the player, and advancing the story based on player selection. The code relies on the `Ink.Runtime` namespace.\nSOURCE: https://github.com/inkle/ink/blob/master/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Ink.Runtime;\n\n// 1) Load story\n_story = new Story(sourceJsonString);\n\n// 2) Game content, line by line\nwhile(_story.canContinue)\n    Debug.Log(story.Continue());\n\n// 3) Display story.currentChoices list, allow player to choose one\nDebug.Log(_story.currentChoices[0].text);\n_story.ChooseChoiceIndex(0);\n\n// 4) Back to 2\n...\n```\n\n----------------------------------------\n\nTITLE: Observing Variable Changes in Ink - C#\nDESCRIPTION: This code snippet demonstrates how to register a delegate function that is called whenever a specific variable changes in the ink story. It uses the `ObserveVariable` method and passes a lambda expression to handle the variable change event. This enables real-time updates in the UI based on the ink story's state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.ObserveVariable (\"health\", (string varName, object newValue) => {\n    SetHealthInUI((int)newValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Ink State Machine Example\nDESCRIPTION: This snippet showcases using ink lists as state machines. The `=` operator sets the state, while `++` and `--` step forward or backward. The `==`, `>`, etc. operators test the current state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_151\n\nLANGUAGE: ink\nCODE:\n```\nLIST PancakeState = ingredients_gathered, batter_mix, pan_hot, pancakes_tossed, ready_to_eat\n{ PancakeState == batter_mix }\n{ PancakeState < ready_to_eat }\n~ PancakeState++\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Conditional Choices (Ink)\nDESCRIPTION: This example shows how to use logical operators (`and`, `or`, `not`) within conditional choices in Ink to create more complex conditions for option availability.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_33\n\nLANGUAGE: Ink\nCODE:\n```\n*\t{ not (visit_paris or visit_rome) && (visit_london || visit_new_york) } [ Wait. Go where? I'm confused. ] -> visit_someplace\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables\nDESCRIPTION: This snippet shows how to define global variables using the `VAR` keyword, specifying an initial value to determine the variable type (integer, floating point, content, or story address).\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_57\n\nLANGUAGE: ink\nCODE:\n```\n\tVAR knowledge_of_the_cure = false\n\tVAR players_name = \"Emilia\"\n\tVAR number_of_infected_people = 521\n\tVAR current_epilogue = -> they_all_die_of_the_plague\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocks: Extended if/else if/else in Ink\nDESCRIPTION: Shows an extended if/else if/else structure that allows for multiple conditions to be checked.  The code assigns different values to 'y' based on the value of 'x'.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_70\n\nLANGUAGE: ink\nCODE:\n```\n{\n\t\t- x == 0:\n\t\t\t~ y = 0\n\t\t- x > 0:\n\t\t\t~ y = x - 1\n\t\t- else:\n\t\t\t~ y = x + 1\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables\nDESCRIPTION: This snippet demonstrates how to use global variables to control options and provide conditional text, similar to testing content that the player has seen.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_58\n\nLANGUAGE: ink\nCODE:\n```\n\t=== the_train ===\n\t\tThe train jolted and rattled. { mood > 0:I was feeling positive enough, however, and did not mind the odd bump|It was more than I could bear}.\n\t\t* \t{ not knows_about_wager } 'But, Monsieur, why are we travelling?'[] I asked.\n\t\t* \t{ knows_about_wager} I contemplated our strange adventure[]. Would it be possible?\n```\n\n----------------------------------------\n\nTITLE: Operate Lamp Subroutine\nDESCRIPTION: This subroutine handles the action of operating the lamp. It toggles the `bedroomLightState` between on and off, updating the lamp's status and providing descriptive text based on the new state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_149\n\nLANGUAGE: ink\nCODE:\n```\n= operate_lamp\n    I flicked the light switch.\n    { bedroomLightState ? on:\n        <> The bulb fell dark.\n        ~ bedroomLightState += off\n        ~ bedroomLightState -= on\n    - else:\n        { bedroomLightState ? on_floor: <> A little light spilled under the bed.} { bedroomLightState ? on_desk : <> The light gleamed on the polished tabletop. }\n```\n\n----------------------------------------\n\nTITLE: List Testing for Containment\nDESCRIPTION: This snippet demonstrates how to test if an ink list contains specific values using the `has` or `?` operator. It checks if the list contains the specified values, either individually or as a set.  `hasnt` or `!?` can be used to check if values are not present.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_118\n\nLANGUAGE: ink\nCODE:\n```\n{ DoctorsInSurgery ? (Adams, Bernard):\n\t\tDr Adams and Dr Bernard are having a hushed argument in one corner.\n}\n\n{ DoctorsInSurgery has Eamonn:\n\t\tDr Eamonn is polishing his glasses.\n}\n\nDoctorsInSurgery !? (Adams, Bernard)\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing List Entries\nDESCRIPTION: This code demonstrates adding and removing entries from an ink list, both singly and collectively. Adding an entry that already exists or removing an entry that doesn't exist has no effect.  The `+=` operator is shorthand for adding, and `-=` is shorthand for removing.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_114\n\nLANGUAGE: ink\nCODE:\n```\n~ DoctorsInSurgery = DoctorsInSurgery + Adams\n~ DoctorsInSurgery += Adams  // this is the same as the above\n~ DoctorsInSurgery -= Eamonn\n~ DoctorsInSurgery += (Eamonn, Denver)\n~ DoctorsInSurgery -= (Adams, Eamonn, Denver)\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocks: Story content control in Ink\nDESCRIPTION: Shows an example of conditional blocks controlling story content, adding dialog depending on the value of the `know_about_wager` variable.  This allows dynamic responses based on game knowledge.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_73\n\nLANGUAGE: ink\nCODE:\n```\nI stared at Monsieur Fogg.\n\t{ know_about_wager:\n\t\t<> \"But surely you are not serious?\" I demanded.\n\t- else:\n\t\t<> \"But there must be a reason for this trip,\" I observed.\n\t}\n\tHe said nothing in reply, merely considering his newspaper with as much thoroughness as entomologist considering his latest pinned addition.\n```\n\n----------------------------------------\n\nTITLE: Conditional Choices (Ink)\nDESCRIPTION: This example demonstrates how to create conditional choices in Ink. The availability of a choice depends on whether a specific piece of content (knot/stitch) has been seen before, controlled by curly braces and boolean expressions.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_31\n\nLANGUAGE: Ink\nCODE:\n```\n*\t{ not visit_paris } \t[Go to Paris] -> visit_paris\n+\t{ visit_paris \t } \t\t[Return to Paris] -> visit_paris\n\n*\t{ visit_paris.met_estelle } [ Telephone Mme Estelle ] -> phone_estelle\n```\n\n----------------------------------------\n\nTITLE: Iterating through Ink Story Content\nDESCRIPTION: This C# code demonstrates how to iterate through the content of an Ink story using the `Continue()` method. It continuously calls `Continue()` as long as `canContinue` is true, logging each line of content to the console.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nwhile (_inkStory.canContinue) {\n    Debug.Log (_inkStory.Continue ());\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Blocks: Switch statement in Ink\nDESCRIPTION: Illustrates the use of a switch statement to execute different code blocks based on the value of a variable. The example assigns strings based on the numerical value of 'x'.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_71\n\nLANGUAGE: ink\nCODE:\n```\n{ x:\n\t- 0: \tzero\n\t- 1: \tone\n\t- 2: \ttwo\n\t- else: lots\n\t}\n```\n\n----------------------------------------\n\nTITLE: Tracking Multiple States with Lists (Ink)\nDESCRIPTION: This snippet demonstrates how to use lists to track multiple states of a device (kettle). It defines lists for OnOff and HotCold states, and then uses a list variable to represent the kettle's current state. Functions are used to change the state of the kettle, updating the list variable accordingly.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_137\n\nLANGUAGE: ink\nCODE:\n```\n\tLIST OnOff = on, off\n\tLIST HotCold = cold, warm, hot\n\n\tVAR kettleState = (off, cold) // we need brackets because it's a proper, multi-valued list now\n\n\t=== function turnOnKettle() ===\n\t{ kettleState ? hot:\n\t\tYou turn on the kettle, but it immediately flips off again.\n\t- else:\n\t\tThe water in the kettle begins to heat up.\n\t\t~ kettleState -= off\n\t\t~ kettleState += on\n\t\t// note we avoid \"=\" as it'll remove all existing states\n\t}\n\n\t=== function can_make_tea() ===\n\t\t~ return kettleState ? (hot, off)\n```\n\n----------------------------------------\n\nTITLE: Number to Words Function in Ink\nDESCRIPTION: Defines a comprehensive function `print_num` that converts a numerical value into its word representation. This function showcases advanced usage of conditions and recursion to handle different numerical ranges.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_93\n\nLANGUAGE: ink\nCODE:\n```\n=== function print_num(x) ===\n{\n    - x >= 1000:\n        {print_num(x / 1000)} thousand { x mod 1000 > 0:{print_num(x mod 1000)}}\n    - x >= 100:\n        {print_num(x / 100)} hundred { x mod 100 > 0:and {print_num(x mod 100)}}\n    - x == 0:\n        zero\n    - else:\n        { x >= 20:\n            { x / 10:\n                - 2: twenty\n                - 3: thirty\n                - 4: forty\n                - 5: fifty\n                - 6: sixty\n                - 7: seventy\n                - 8: eighty\n                - 9: ninety\n            }\n            { x mod 10 > 0:<>-<>}\n        }\n        { x < 10 || x > 20:\n            { x mod 10:\n                - 1: one\n                - 2: two\n                - 3: three\n                - 4: four\n                - 5: five\n                - 6: six\n                - 7: seven\n                - 8: eight\n                - 9: nine\n            }\n        - else:\n            { x:\n                - 10: ten\n                - 11: eleven\n                - 12: twelve\n                - 13: thirteen\n                - 14: fourteen\n                - 15: fifteen\n                - 16: sixteen\n                - 17: seventeen\n                - 18: eighteen\n                - 19: nineteen\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Ink List Flags Example\nDESCRIPTION: This snippet demonstrates how to use ink lists as flags to track events. The `+=` operator marks an event as occurred, and the `?` and `!?` operators test whether an event has occurred.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_150\n\nLANGUAGE: ink\nCODE:\n```\nLIST GameEvents = foundSword, openedCasket, metGorgon\n{ GameEvents ? openedCasket }\n{ GameEvents ? (foundSword, metGorgon) }\n~ GameEvents += metGorgon\n```\n\n----------------------------------------\n\nTITLE: Helper Function for List Subject-Verb Agreement\nDESCRIPTION: This snippet provides a helper function, `isAre`, to determine whether to use \"is\" or \"are\" based on the list count. It improves the grammatical correctness of sentences using lists. This function allows for better readability by handling singular and plural cases.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_123\n\nLANGUAGE: ink\nCODE:\n```\n=== function isAre(list)\n\t\t{LIST_COUNT(list) == 1:is|are}\n\n\tMy favourite dinosaurs {isAre(favouriteDinosaurs)} {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n\nAnd to be pendantic:\n\n\tMy favourite dinosaur{LIST_COUNT(favouriteDinosaurs) != 1:s} {isAre(favouriteDinosaurs)} {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n\n```\n\n----------------------------------------\n\nTITLE: List Definition with Initial State\nDESCRIPTION: This code snippet demonstrates how to define an ink list and specify the initial state of its elements. Elements within parentheses are included in the initial state of the list. Values can also be assigned to list elements.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_112\n\nLANGUAGE: ink\nCODE:\n```\nLIST DoctorsInSurgery = Adams, Bernard, Cartwright, Denver, Eamonn\nLIST DoctorsInSurgery = (Adams), (Bernard), (Cartwright), (Denver), (Eamonn)\nLIST DoctorsInSurgery = (Adams), Bernard, (Cartwright), Denver, Eamonn\nLIST primeNumbers = (two = 2), (three) = 3, (five = 5)\n```\n\n----------------------------------------\n\nTITLE: Fallback Choice Example (Ink)\nDESCRIPTION: This example shows a complete example of how to implement and use a fallback choice to avoid the game ending prematurely. When the player runs out of other options, the fallback option is chosen.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_28\n\nLANGUAGE: Ink\nCODE:\n```\n=== find_help ===\n\n\t\tYou search desperately for a friendly face in the crowd.\n\t\t*\tThe woman in the hat[?] pushes you roughly aside. -> find_help\n\t\t*\tThe man with the briefcase[?] looks disgusted as you stumble past him. -> find_help\n\t\t*\t->\n\t\t\tBut it is too late: you collapse onto the station platform. This is the end.\n\t\t\t-> END\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Parameters in Ink\nDESCRIPTION: Defines a function `lerp` that takes three parameters (a, b, k) and performs a linear interpolation calculation, returning the result. This shows how to define a function with multiple parameters and perform calculations within the function body.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_86\n\nLANGUAGE: ink\nCODE:\n```\n=== function lerp(a, b, k) ===\n\t~ return ((b - a) * k) + a\n```\n\n----------------------------------------\n\nTITLE: Define Inventory List\nDESCRIPTION: Defines the `Inventory` list to track what items the player has collected. Items can be added to the inventory using the `get` function.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_143\n\nLANGUAGE: ink\nCODE:\n```\nLIST Inventory = (none), cane, knife\n\n=== function get(x)\n    ~ Inventory += x\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation: RANDOM function in Ink\nDESCRIPTION: Illustrates the use of the RANDOM function to generate random integers within a specified range (inclusive).  Examples cover dice rolls, lazy grading, and serpent head counts.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_65\n\nLANGUAGE: ink\nCODE:\n```\n~ temp dice_roll = RANDOM(1, 6)\n\n~ temp lazy_grading_for_test_paper = RANDOM(30, 75)\n\n~ temp number_of_heads_the_serpent_has = RANDOM(3, 8)\n```\n\n----------------------------------------\n\nTITLE: Setup Game Variables\nDESCRIPTION: Initializes game variables, including `bedroomLightState` (initially off, located on the desk) and `knifeState` (initially under the bed). These variables track the current state of key items in the scene.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_146\n\nLANGUAGE: ink\nCODE:\n```\nVAR bedroomLightState = (off, on_desk)\n\nVAR knifeState = (under_bed)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Full List\nDESCRIPTION: This snippet demonstrates how to access the full set of possible values in a list, not just the currently included values, using the `LIST_ALL` function. This allows operations like getting the total number of possible values or the minimum value of all possible values.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_124\n\nLANGUAGE: ink\nCODE:\n```\n{LIST_ALL(DoctorsInSurgery)} // Adams, Bernard, Cartwright, Denver, Eamonn\n{LIST_COUNT(LIST_ALL(DoctorsInSurgery))} // \"5\"\n{LIST_MIN(LIST_ALL(Eamonn))} \t\t\t\t// \"Adams\"\n```\n\n----------------------------------------\n\nTITLE: Murder Scene Content\nDESCRIPTION: Defines the main content for the murder scene, including descriptions of the environment, player choices, and state changes based on actions. It uses conditionals to check and update item states and knowledge using the defined functions.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_148\n\nLANGUAGE: ink\nCODE:\n```\n=== murder_scene ===\n    The bedroom. This is where it happened. Now to look for clues.\n- (top)\n    { bedroomLightState ? seen:     <- seen_light  }\n    <- compare_prints(-> top)\n\n    *   (dobed) [The bed...]\n        The bed was low to the ground, but not so low something might not roll underneath. It was still neatly made.\n        ~ reach (neatly_made)\n        - - (bedhub)\n        * *     [Lift the bedcover]\n                I lifted back the bedcover. The duvet underneath was crumpled.\n                ~ reach (crumpled_duvet)\n                ~ BedState = covers_shifted\n        * *     (uncover) {reached(crumpled_duvet)}\n                [Remove the cover]\n                Careful not to disturb anything beneath, I removed the cover entirely. The duvet below was rumpled.\n                Not the work of the maid, who was conscientious to a point. Clearly this had been thrown on in a hurry.\n                ~ reach (hastily_remade)\n                ~ BedState = covers_off\n        * *     (duvet) {BedState == covers_off} [ Pull back the duvet ]\n                I pulled back the duvet. Beneath it was a sheet, sticky with blood.\n                ~ BedState = bloodstain_visible\n                ~ reach (body_on_bed)\n                Either the body had been moved here before being dragged to the floor - or this is was where the murder had taken place.\n        * *     {BedState !? made_up} [ Remake the bed ]\n                Carefully, I pulled the bedsheets back into place, trying to make it seem undisturbed.\n                ~ BedState = made_up\n        * *     [Test the bed]\n                I pushed the bed with spread fingers. It creaked a little, but not so much as to be obnoxious.\n        * *     (darkunder) [Look under the bed]\n                Lying down, I peered under the bed, but could make nothing out.\n\n        * *     {TURNS_SINCE(-> dobed) > 1} [Something else?]\n                I took a step back from the bed and looked around.\n                -> top\n        - -     -> bedhub\n\n    *   {darkunder && bedroomLightState ? on_floor && bedroomLightState ? on}\n        [ Look under the bed ]\n        I peered under the bed. Something glinted back at me.\n        - - (reaching)\n        * *     [ Reach for it ]\n                I fished with one arm under the bed, but whatever it was, it had been kicked far enough back that I couldn't get my fingers on it.\n                -> reaching\n        * *     {Inventory ? cane} [Knock it with the cane]\n                -> knock_with_cane\n\n        * *     {reaching > 1 } [ Stand up ]\n                I stood up once more, and brushed my coat down.\n                -> top\n\n    *   (knock_with_cane) {reaching && TURNS_SINCE(-> reaching) >= 4 &&  Inventory ? cane } [Use the cane to reach under the bed ]\n        Positioning the cane above the carpet, I gave the glinting thing a sharp tap. It slid out from the under the foot of the bed.\n        ~ move_to_supporter( knifeState, on_floor )\n        * *     (standup) [Stand up]\n                Satisfied, I stood up, and saw I had knocked free a bloodied knife.\n                -> top\n\n        * *     [Look under the bed once more]\n                Moving the cane aside, I looked under the bed once more, but there was nothing more there.\n                -> standup\n\n    *   {knifeState ? on_floor} [Pick up the knife]\n        Careful not to touch the handle, I lifted the blade from the carpet.\n        ~ get(knife)\n\n    *   {Inventory ? knife} [Look at the knife]\n        The blood was dry enough. Dry enough to show up partial prints on the hilt!\n        ~ reach (prints_on_knife)\n\n    *   [   The desk... ]\n        I turned my attention to the desk. A lamp sat in one corner, a neat, empty in-tray in the other. There was nothing else out.\n        Leaning against the desk was a wooden cane.\n        ~ bedroomLightState += seen\n\n        - - (deskstate)\n        * *     (pickup_cane) {Inventory !? cane}  [Pick up the cane ]\n                ~ get(cane)\n              I picked up the wooden cane. It was heavy, and unmarked.\n\n        * *    { bedroomLightState !? on } [Turn on the lamp]\n                -> operate_lamp ->\n\n        * *     [Look at the in-tray ]\n                I regarded the in-tray, but there was nothing to be seen. Either the victim's papers were taken, or his line of work had seriously dried up. Or the in-tray was all for show.\n\n        + +     (open)  {open < 3} [Open a drawer]\n                I tried {a drawer at random|another drawer|a third drawer}. {Locked|Also locked|Unsurprisingly, locked as well}.\n\n        * *     {deskstate >= 2} [Something else?]\n                I took a step away from the desk once more.\n                -> top\n\n        - -     -> deskstate\n\n    *     {(Inventory ? cane) && TURNS_SINCE(-> deskstate) <= 2} [Swoosh the cane]\n        I was still holding the cane: I gave it an experimental swoosh. It was heavy indeed, though not heavy enough to be used as a bludgeon.\n        But it might have been useful in self-defence. Why hadn't the victim reached for it? Knocked it over?\n\n    *   [The window...]\n        I went over to the window and peered out. A dismal view of the little brook that ran down beside the house.\n\n        - - (window_opts)\n        <- compare_prints(-> window_opts)\n        * *     (downy) [Look down at the brook]\n                { GlassState ? steamed:\n                    Through the steamed glass I couldn't see the brook. -> see_prints_on_glass -> window_opts\n                }\n                I watched the little stream rush past for a while. The house probably had damp but otherwise, it told me nothing.\n        * *     (greasy) [Look at the glass]\n                { GlassState ? steamed: -> downy }\n                The glass in the window was greasy. No one had cleaned it in a while, inside or out.\n        * *     { GlassState ? steamed && not see_prints_on_glass && downy && greasy }\n                [ Look at the steam ]\n                A cold day outside. Natural my breath should steam. -> see_prints_on_glass ->\n        + +     {GlassState ? steam_gone} [ Breathe on the glass ]\n                I breathed gently on the glass once more. { reached (fingerprints_on_glass): The fingerprints reappeared. }\n                ~ GlassState = steamed\n\n        + +     [Something else?]\n                { window_opts < 2 || reached (fingerprints_on_glass) || GlassState ? steamed:\n                    I looked away from the dreary glass.\n                    {GlassState ? steamed:\n                        ~ GlassState = steam_gone\n                        <> The steam from my breath faded.\n                    }\n                    -> top\n                }\n                I leant back from the glass. My breath had steamed up the pane a little.\n               ~ GlassState = steamed\n\n        - -     -> window_opts\n\n    *   {top >= 5} [Leave the room]\n        I'd seen enough. I {bedroomLightState ? on:switched off the lamp, then} turned and left the room.\n        -> joe_in_hall\n\n    -   -> top\n```\n\n----------------------------------------\n\nTITLE: List Element Pop Function\nDESCRIPTION: Defines a function `pop` that removes the first element from a list and returns it. It takes a list as a reference, finds the minimum value (assumed to be the first element), removes it, and returns the value. Used for managing state transitions.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_141\n\nLANGUAGE: ink\nCODE:\n```\n=== function pop(ref list)\n   ~ temp x = LIST_MIN(list) \n   ~ list -= x \n   ~ return x\n```\n\n----------------------------------------\n\nTITLE: Checking if a List Contains an Item - C#\nDESCRIPTION: This code snippet demonstrates how to check if an Ink list contains a specific item by name. It retrieves an InkList and utilizes the ContainsItemNamed method to verify the presence of \"Apple\".\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nfruit = story.variablesState[\"fruit\"] as Ink.Runtime.InkList;\nif( fruit.ContainsItemNamed(\"Apple\") ) {\n    // We're eating apple's tonight!\n}\n```\n\n----------------------------------------\n\nTITLE: Define Item Supporters List and Move Function\nDESCRIPTION: Defines a list of `Supporters` representing possible locations for items, such as `on_desk`, `on_floor`, etc. The `move_to_supporter` function updates an item's state by removing its current supporter and adding the new one.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_144\n\nLANGUAGE: ink\nCODE:\n```\nLIST Supporters = on_desk, on_floor, on_bed, under_bed, held, with_joe\n\n=== function move_to_supporter(ref item_state, new_supporter) ===\n    ~ item_state -= LIST_ALL(Supporters)\n    ~ item_state += new_supporter\n```\n\n----------------------------------------\n\nTITLE: Calling a Function in Ink\nDESCRIPTION: Illustrates how to call a function with and without parameters. The `lerp` function is called with arguments, and `say_yes_to_everything` is called without arguments, demonstrating the syntax for function calls in ink.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_87\n\nLANGUAGE: ink\nCODE:\n```\n~ x = lerp(2, 8, 0.3)\n\n*\t{say_yes_to_everything()} 'Yes.'\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Knot/Stitch in Ink - C#\nDESCRIPTION: This code snippet demonstrates how to jump to a specific knot or stitch within an ink story using the `ChoosePathString` method. It takes a string representing the path to the desired location in the ink story as input. Call `Continue()` as usual after choosing the path.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.ChoosePathString(\"myKnotName\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.ChoosePathString(\"myKnotName.theStitchWithin\");\n```\n\n----------------------------------------\n\nTITLE: Maximum Function Definition in Ink\nDESCRIPTION: Defines a function `max` that takes two parameters (a, b) and returns the larger of the two. This is a simple example of a function that performs a comparison and returns a value based on the result.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_91\n\nLANGUAGE: ink\nCODE:\n```\n=== function max(a,b) ===\n{\n\ta < b:\n\t\t~ return b\n\t- else:\n\t\t~ return a\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Multi-File Ink Stories with INCLUDE - C#\nDESCRIPTION: This code snippet demonstrates how to precompile Ink stories that are split into multiple files using the INCLUDE directive. It configures the Ink compiler with options to count all visits and provides a file handler to resolve included files based on the directory of the main Ink file.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar compiler = new Ink.Compiler(inkFileContents, new Ink.Compiler.Options\n{\n\tcountAllVisits = true,\n\tfileHandler = new Ink.Compiler.UnityInkFileHandler(System.IO.Path.GetDirectoryName(inkAbsoluteFilePath))\n});\nInk.Runtime.Story story = compiler.Compile();\nDebug.Log(story.Continue());\n```\n\n----------------------------------------\n\nTITLE: Function Calling Another Function in Ink\nDESCRIPTION: Defines a function `say_no_to_nothing` that calls another function, `say_yes_to_everything`, and returns its result. This demonstrates how functions can call each other in ink.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_88\n\nLANGUAGE: ink\nCODE:\n```\n=== function say_no_to_nothing ===\n\t~ return say_yes_to_everything()\n```\n\n----------------------------------------\n\nTITLE: Testing Conditions\nDESCRIPTION: This snippet shows how to test conditions using variables within curly braces. These conditions can control the flow of the story and provide conditional text.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_63\n\nLANGUAGE: ink\nCODE:\n```\n\t{ x == 1.2 }\n\t{ x / 2 > 4 }\n\t{ y - 1 <= x * x }\n```\n\n----------------------------------------\n\nTITLE: Tracking Objects with Lists (Ink)\nDESCRIPTION: This snippet uses lists to track the presence of objects in different rooms. It defines lists for characters and props, and then uses list variables to represent the contents of each room. The describe_room function uses list membership checks to describe the room's contents.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_136\n\nLANGUAGE: ink\nCODE:\n```\n\tLIST Characters = Alfred, Batman, Robin\n\tLIST Props = champagne_glass, newspaper\n\n\tVAR BallroomContents = (Alfred, Batman, newspaper)\n\tVAR HallwayContents = (Robin, champagne_glass)\n\n\t=== function describe_room(roomState)\n\t\t{ roomState ? Alfred: Alfred is here, standing quietly in a corner. } { roomState ? Batman: Batman's presence dominates all. } { roomState ? Robin: Robin is all but forgotten. }\n\t\t<> { roomState ? champagne_glass: A champagne glass lies discarded on the floor. } { roomState ? newspaper: On one table, a headline blares out WHO IS THE BATMAN? AND *WHO* IS HIS BARELY-REMEMBERED ASSISTANT? }\n```\n\n----------------------------------------\n\nTITLE: CHOICE_COUNT() Function Example (Ink)\nDESCRIPTION: This example shows how to use the `CHOICE_COUNT()` function to control the number of options presented to the player based on the number of options created.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_46\n\nLANGUAGE: ink\nCODE:\n```\n\t*\t{false} Option A\n\t* \\t{true} Option B\n\t*  {CHOICE_COUNT() == 1} Option C\n```\n\n----------------------------------------\n\nTITLE: Change State Helper Function (Ink)\nDESCRIPTION: This Ink function provides a helper for changing the state of a variable, removing existing states of a certain type and adding the desired state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_138\n\nLANGUAGE: ink\nCODE:\n```\n\t=== function changeStateTo(ref stateVariable, stateToReach)\n\t\t// remove all states of this type\n\t\t~ stateVariable -= LIST_ALL(stateToReach)\n\t\t// put back the state we want\n\t\t~ stateVariable += stateToReach\n```\n\n----------------------------------------\n\nTITLE: Thread Example: Adding the same choice\nDESCRIPTION: This Ink script demonstrates how to use threads to add the same choice in multiple places. It uses the `<-` operator to call the `review_case_notes` thread and pass a divert (`-> top`) as a parameter to return to the original knot.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_97\n\nLANGUAGE: ink\nCODE:\n```\n=== outside_the_house\nThe front step. The house smells. Of murder. And lavender.\n- (top)\n\t<- review_case_notes(-> top)\n\t*\t[Go through the front door]\n\t\tI stepped inside the house.\n\t\t-> the_hallway\n\t*\t[Sniff the air]\n\t\tI hate lavender. It makes me think of soap, and soap makes me think about my marriage.\n\t\t-> top\n\n=== the_hallway\nThe hallway. Front door open to the street. Little bureau.\n- (top)\n\t<- review_case_notes(-> top)\n\t*\t[Go through the front door]\n\t\tI stepped out into the cool sunshine.\n\t\t-> outside_the_house\n\t*\t[Open the bureau]\n\t\tKeys. More keys. Even more keys. How many locks do these people need?\n\t\t-> top\n\n=== review_case_notes(-> go_back_to)\n+\t{not done || TURNS_SINCE(-> done) > 10}\n\t\t[Review my case notes]\n\t\t// the conditional ensures you don't get the option to check repeatedly\n\t \t{I|Once again, I} flicked through the notes I'd made so far. Still not obvious suspects.\n-\t(done) -> go_back_to\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocks: Options inside conditional blocks in Ink\nDESCRIPTION: Illustrates how to place options inside conditional blocks, changing available options based on the value of the `door_open` variable. Note restrictions on gather points within conditional blocks.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_74\n\nLANGUAGE: ink\nCODE:\n```\n{ door_open:\n\t\t* \tI strode out of the compartment[] and I fancied I heard my master quietly tutting to himself. \t\t\t-> go_outside\n\t- else:\n\t\t*\tI asked permission to leave[] and Monsieur Fogg looked surprised. \t-> open_door\n\t\t* \tI stood and went to open the door[]. Monsieur Fogg seemed untroubled by this small rebellion. -> open_door\n\t}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Numbers\nDESCRIPTION: This Ink script shows how to explicitly get the numerical value of a list member using the `LIST_VALUE` function.  Note that list values start at 1, not 0.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_109\n\nLANGUAGE: ink\nCODE:\n```\nThe lecturer has {LIST_VALUE(deafening) - LIST_VALUE(lecturersVolume)} notches still available to him.\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Valued Lists in ink\nDESCRIPTION: This code snippet demonstrates querying operations in ink using multi-valued lists. It shows how to define lists and use functions like `LIST_ALL`, `LIST_COUNT`, `LIST_MIN`, `LIST_MAX`, as well as other logical operators like set membership `?`, set difference `^`, and comparison operators `>=`, `<` and `LIST_INVERT` to perform operations on the defined lists.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_139\n\nLANGUAGE: ink\nCODE:\n```\nLIST Letters = a,b,c\nLIST Numbers = one, two, three\n\nVAR mixedList = (a, three, c)\n\n{LIST_ALL(mixedList)}   // a, one, b, two, c, three\n{LIST_COUNT(mixedList)} // 3\n{LIST_MIN(mixedList)}   // a\n{LIST_MAX(mixedList)}   // three or c, albeit unpredictably\n\n{mixedList ? (a,b) }        // false\n{mixedList ^ LIST_ALL(a)}   // a, c\n\n{ mixedList >= (one, a) }   // true\n{ mixedList < (three) }     // false\n\n{ LIST_INVERT(mixedList) }            // one, b, two\n```\n\n----------------------------------------\n\nTITLE: Global Constant Definitions in Ink\nDESCRIPTION: Defines several global constants using the `CONST` keyword, assigning string and numerical values to them. This demonstrates how to define constants that can be used throughout the ink story.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_95\n\nLANGUAGE: ink\nCODE:\n```\nCONST HASTINGS = \"Hastings\"\nCONST POIROT = \"Poirot\"\nCONST JAPP = \"Japp\"\n\nVAR current_chief_suspect = HASTINGS\n\n=== review_evidence ===\n{\n\tfound_japps_bloodied_glove:\n\t\t~ current_chief_suspect = POIROT\n}\nCurrent Suspect: {current_chief_suspect}\n```\n\nLANGUAGE: ink\nCODE:\n```\nCONST PI = 3.14\nCONST VALUE_OF_TEN_POUND_NOTE = 10\n```\n\nLANGUAGE: ink\nCODE:\n```\nCONST LOBBY = 1\nCONST STAIRCASE = 2\nCONST HALLWAY = 3\n\nCONST HELD_BY_AGENT = -1\n\nVAR secret_agent_location = LOBBY\nVAR suitcase_location = HALLWAY\n\n=== report_progress ===\n{\n    -  secret_agent_location == suitcase_location:\n\t\tThe secret agent grabs the suitcase!\n\t\t~ suitcase_location = HELD_BY_AGENT\n\n\t-  secret_agent_location < suitcase_location:\n\t\tThe secret agent moves forward.\n\t\t~ secret_agent_location++\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Script MonoBehaviour for Ink Story\nDESCRIPTION: This C# script creates a MonoBehaviour component named 'Script' that wraps an Ink story. It defines a public TextAsset variable 'inkAsset' to hold the compiled JSON asset and a private 'Story' object '_inkStory' to manage the story's state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Ink.Runtime;\n\npublic class Script : MonoBehaviour {\n\n\t// Set this file to your compiled json asset\n\tpublic TextAsset inkAsset;\n\n\t// The ink story that we're wrapping\n\tStory _inkStory;\n```\n\n----------------------------------------\n\nTITLE: Thread vs. Tunnel Comparison\nDESCRIPTION: This example compares using a thread (`<-`) with using a direct divert (`->`) for including content. Threads allow for choices and conditional logic, while tunnels execute the same block of content without player choice.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_98\n\nLANGUAGE: ink\nCODE:\n```\n<-\tchildhood_memories(-> next)\n*\t[Look out of the window]\n\t \tI daydreamed as we rolled along...\n-\t(next) Then the whistle blew...\n```\n\nLANGUAGE: ink\nCODE:\n```\n*\t[Remember my childhood]\n\t\t-> think_back ->\n*\t[Look out of the window]\n\t\tI daydreamed as we rolled along...\n-\t(next) Then the whistle blew...\n```\n\n----------------------------------------\n\nTITLE: List Example: Doctor's Surgery\nDESCRIPTION: This snippet provides a fuller example of using lists in ink, simulating a doctor's surgery. It includes functions for checking who is in the surgery and for doctors entering and leaving. The example shows how to manipulate and query lists to create dynamic game scenarios.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_121\n\nLANGUAGE: ink\nCODE:\n```\nLIST DoctorsInSurgery = (Adams), Bernard, Cartwright, (Denver), Eamonn\n\n-> waiting_room\n\n=== function whos_in_today()\n\tIn the surgery today are {DoctorsInSurgery}.\n\n=== function doctorEnters(who)\n\t{ DoctorsInSurgery !? who:\n\t\t~ DoctorsInSurgery += who\n\t\tDr {who} arrives in a fluster.\n\t}\n\n=== function doctorLeaves(who)\n\t{ DoctorsInSurgery ? who:\n\t\t~ DoctorsInSurgery -= who\n\t\tDr {who} leaves for lunch.\n\t}\n\n=== waiting_room\n\t{whos_in_today()}\n\t*\t[Time passes...]\n\t\t{doctorLeaves(Adams)} {doctorEnters(Cartwright)} {doctorEnters(Eamonn)}\n\t\t{whos_in_today()}\n```\n\n----------------------------------------\n\nTITLE: Labeling Options\nDESCRIPTION: This snippet illustrates how to label options within a weave, similar to labeling gather points. Label brackets come before conditions in the line. These addresses can be used in conditional tests, which can be useful for creating options unlocked by other options.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_51\n\nLANGUAGE: ink\nCODE:\n```\n\t=== meet_guard ===\n\tThe guard frowns at you.\n\n\t* \t(greet) [Greet him]\n\t\t'Greetings.'\n\t* \t(get_out) 'Get out of my way[.'],' you tell the guard.\n\n\t- \t'Hmm,' replies the guard.\n\n\t* \t{greet} \t'Having a nice day?' // only if you greeted him\n\n\t* \t'Hmm?'[] you reply.\n\n\t* \t{get_out} [Shove him aside] \t // only if you threatened him\n\t\tYou shove him sharply. He stares in reply, and draws his sword!\n\t\t-> fight_guard \t\t\t// this route diverts out of the weave\n\n\t- \t'Mff,' the guard replies, and then offers you a paper bag. 'Toffee?'\n```\n\n----------------------------------------\n\nTITLE: Alternatives with Nested Content (Ink)\nDESCRIPTION: This example demonstrates nesting alternatives to create more complex variations of text. Nested alternatives increase the possible combinations of output.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_40\n\nLANGUAGE: ink\nCODE:\n```\n\tThe Ratbear {&{wastes no time and |}swipes|scratches} {&at you|into your {&leg|arm|cheek}}.\n```\n\n----------------------------------------\n\nTITLE: Thread with Function for Boiling\nDESCRIPTION: This Ink script demonstrates using a thread with a function to boil objects. The `cook_with` knot takes the name of the object and a reference to the corresponding state variable. The `do_cooking` knot calls `cook_with` for each object.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_104\n\nLANGUAGE: ink\nCODE:\n```\nLIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold\nVAR potState = cold\nVAR microwaveState = cold\n\n=== cook_with(nameOfThing, ref thingToBoil)\n+\t{thingToBoil == cold} [Turn on {nameOfThing}]\n  \tThe {nameOfThing} begins to heat up.\n\t~ thingToBoil = boiling\n\t-> do_cooking.done\n\n=== do_cooking\n<-\tcook_with(\"kettle\", kettleState)\n<-\tcook_with(\"pot\", potState)\n<-\tcook_with(\"microwave\", microwaveState)\n- (done)\n```\n\n----------------------------------------\n\nTITLE: Define Knowledge System\nDESCRIPTION: Implements a system for tracking player knowledge, allowing facts to be revealed incrementally.  The `knowledgeState` variable stores known facts. `reached`, `between`, and `reach` functions are used to query and update the player's knowledge.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_145\n\nLANGUAGE: ink\nCODE:\n```\nVAR knowledgeState = ()\n\n=== function reached (x) \n   ~ return knowledgeState ? x \n\n=== function between(x, y) \n   ~ return knowledgeState? x && not (knowledgeState ^ y)\n\n=== function reach(statesToSet) \n   ~ temp x = pop(statesToSet)\n   {\n   - not x: \n      ~ return false \n\n   - not reached(x):\n      ~ temp chain = LIST_ALL(x)\n      ~ temp statesGained = LIST_RANGE(chain, LIST_MIN(chain), x)\n      ~ knowledgeState += statesGained\n      ~ reach (statesToSet) \t// set any other states left to set\n      ~ return true  \t       // and we set this state, so true\n \n    - else:\n      ~ return false || reach(statesToSet) \n    }\t\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple List Values\nDESCRIPTION: This snippet shows how to assign multiple values to an ink list at once.  The list is reassigned with the specified values. The empty list can be used to clear out a list.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_113\n\nLANGUAGE: ink\nCODE:\n```\n~ DoctorsInSurgery = (Adams, Bernard)\n~ DoctorsInSurgery = (Adams, Bernard, Eamonn)\n~ DoctorsInSurgery = ()\n```\n\n----------------------------------------\n\nTITLE: Game Loop and Move Post (Ink)\nDESCRIPTION: This snippet contains the main game loop and the logic for moving a ring between posts in the Tower of Hanoi game. The game loop presents options to regard the temples and initiates move sequences, using the can_move and move_ring functions to perform the move.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_133\n\nLANGUAGE: ink\nCODE:\n```\n=== gameloop\n\t    Staring down from the heavens you see your followers finishing construction of the last of the great temples, ready to begin the work.\n\t- (top)\n\t    +  [ Regard the temples]\n\t        You regard each of the temples in turn. On each is stacked the rings of stone. {describe_pillar(1)} {describe_pillar(2)} {describe_pillar(3)}\n\t    <- move_post(1, 2, post1, post2)\n\t    <- move_post(2, 1, post2, post1)\n\t    <- move_post(1, 3, post1, post3)\n\t    <- move_post(3, 1, post3, post1)\n\t    <- move_post(3, 2, post3, post2)\n\t    <- move_post(2, 3, post2, post3)\n\t    -> DONE\n\n\t= move_post(from_post_num, to_post_num, ref from_post_list, ref to_post_list)\n\t    +   { can_move(from_post_list, to_post_list) }\n\t        [ Move a ring from {name(from_post_num)} to {name(to_post_num)} ]\n\t        { move_ring(from_post_list, to_post_list) }\n\t        { stopping:\n\t        -   The priests far below construct a great harness, and after many years of work, the great stone ring is lifted up into the air, and swung over to the next of the temples.\n\t            The ropes are slashed, and in the blink of an eye it falls once more.\n\t        -   Your next decree is met with a great feast and many sacrifices. After the funeary smoke has cleared, work to shift the great stone ring begins in earnest. A generation grows and falls, and the ring falls into its ordained place.\n\t        -   {cycle:\n\t            - Years pass as the ring is slowly moved.\n\t            - The priests below fight a war over what colour robes to wear, but while they fall and die, the work is still completed.\n\t            }\n\t        }\n\t    -> top\n```\n\n----------------------------------------\n\nTITLE: Loops in a Weave\nDESCRIPTION: This snippet illustrates how to create loops inside weaves using labels. This is a standard pattern for asking questions of an NPC, and repeating dialogue until conditions are met.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_54\n\nLANGUAGE: ink\nCODE:\n```\n\t- (opts)\n\t\t* \t'Can I get a uniform from somewhere?'[] you ask the cheerful guard.\n\t\t\t'Sure. In the locker.' He grins. 'Don't think it'll fit you, though.'\n\t\t* \t'Tell me about the security system.'\n\t\t\t'It's ancient,' the guard assures you. 'Old as coal.'\n\t\t* \t'Are there dogs?'\n\t\t\t'Hundreds,' the guard answers, with a toothy grin. 'Hungry devils, too.'\n\t\t// We require the player to ask at least one question\n\t\t* \t{loop} [Enough talking]\n\t\t\t-> done\n\t- (loop)\n\t\t// loop a few times before the guard gets bored\n\t\t{ -> opts | -> opts | }\n\t\tHe scratches his head.\n\t\t'Well, can't stand around talking all day,' he declares.\n\t- (done)\n\t\tYou thank the guard, and move away.\n```\n\n----------------------------------------\n\nTITLE: Branching and Joining with Diverts (Ink)\nDESCRIPTION: This example shows how to branch and join the story flow using diverts in Ink.  Different choices lead to different intermediary knots (`hurry_outside`, `dragged_outside`) before converging on the `as_fast_as_we_could` knot.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_18\n\nLANGUAGE: Ink\nCODE:\n```\n=== back_in_london ===\n\nWe arrived into London at 9.45pm exactly.\n\n*\t\"There is not a moment to lose!\"[] I declared.\n\t\t-> hurry_outside\n\n*\t\"Monsieur, let us savour this moment!\"[] I declared.\n\t\tMy master clouted me firmly around the head and dragged me out of the door.\n\t\t-> dragged_outside\n\n*\t[We hurried home] -> hurry_outside\n\n\n=== hurry_outside ===\nWe hurried home to Savile Row -> as_fast_as_we_could\n\n\n=== dragged_outside ===\nHe insisted that we hurried home to Savile Row\n-> as_fast_as_we_could\n\n\n=== as_fast_as_we_could ===\n<> as fast as we could.\n```\n\n----------------------------------------\n\nTITLE: Whack-a-Mole Game Example (Ink)\nDESCRIPTION: This example demonstrates a complete knot implementing a simplified whack-a-mole game using alternatives, loops, and once-only options.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_43\n\nLANGUAGE: ink\nCODE:\n```\n\t=== whack_a_mole ===\n\t\t{I heft the hammer.|{~Missed!|Nothing!|No good. Where is he?|Ah-ha! Got him! -> END}}\n\t\tThe {&mole|{&nasty|blasted|foul} {&creature|rodent}} is {in here somewhere|hiding somewhere|still at large|laughing at me|still unwhacked|doomed}. <>\n\t\t{!I'll show him!|But this time he won't escape!}\n\t\t* \t[{&Hit|Smash|Try} top-left] \t-> whack_a_mole\n\t\t*  [{&Whallop|Splat|Whack} top-right] -> whack_a_mole\n\t\t*  [{&Blast|Hammer} middle] -> whack_a_mole\n\t\t*  [{&Clobber|Bosh} bottom-left] \t-> whack_a_mole\n\t\t*  [{&Nail|Thump} bottom-right] \t-> whack_a_mole\n\t\t*   ->\n        \t    Then you collapse from hunger. The mole has defeated you!\n\t            -> END\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Modified Shuffle Stopping system in Ink\nDESCRIPTION: Demonstrates the Shuffle Stopping alternative system where content is shuffled (except the last entry), and once its been played, it sticks on the last entry.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_80\n\nLANGUAGE: ink\nCODE:\n```\n{ shuffle stopping:\n\t- \tA silver BMW roars past.\n\t- A bright yellow Mustang takes the turn.\n\t- \tThere are like, cars, here.\n\t}\n```\n\n----------------------------------------\n\nTITLE: Check if move is valid (Ink)\nDESCRIPTION: This Ink function checks if a move from one list (representing a tower) to another is valid based on the rules of the Tower of Hanoi game.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_128\n\nLANGUAGE: ink\nCODE:\n```\n=== function can_move(from_list, to_list) ===\n\t    {\n\t    -   LIST_COUNT(from_list) == 0:\n\t        // no discs to move\n\t        ~ return false\n\t    -   LIST_COUNT(to_list) > 0 && LIST_MIN(from_list) > LIST_MIN(to_list):\n\t        // the moving disc is bigger than the smallest of the discs on the new tower\n\t        ~ return false\n\t    -   else:\n\t    \t // nothing stands in your way!\n\t        ~ return true\n\n\t    }\n```\n\n----------------------------------------\n\nTITLE: Performing Ink List Operations - C#\nDESCRIPTION: This code shows how to perform various list operations equivalent to Ink functions within C#. Operations like finding the min/max item, inverting, getting all items, union, intersect, without, and contains are demonstrated.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nlist.minItem \t// equivalent to calling LIST_MIN(list) in ink\nlist.maxItem \t// equivalent to calling LIST_MAX(list) in ink\nlist.inverse \t// equivalent to calling LIST_INVERT(list) in ink\nlist.all \t// equivalent to calling LIST_ALL(list) in ink\nlist.Union(otherList)      // equivalent to (list + otherList) in ink\nlist.Intersect(otherList)  // equivalent to (list ^ otherList) in ink\nlist.Without(otherList)    // equivalent to (list - otherList) in ink\nlist.Contains(otherList)   // equivalent to (list ? otherList) in ink\n```\n\n----------------------------------------\n\nTITLE: Advanced List Printing with Commas\nDESCRIPTION: This snippet demonstrates a function to print a list with commas for better readability. It handles different list sizes and provides an option for an empty list message. The function is recursive, handling lists of arbitrary length.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_122\n\nLANGUAGE: ink\nCODE:\n```\n=== function listWithCommas(list, if_empty)\n\t    {LIST_COUNT(list):\n\t    - 2:\n\t        \t{LIST_MIN(list)} and {listWithCommas(list - LIST_MIN(list), if_empty)}\n\t    - 1:\n\t        \t{list}\n\t    - 0:\n\t\t\t\t{if_empty}\n\t    - else:\n\t      \t\t{LIST_MIN(list)}, {listWithCommas(list - LIST_MIN(list), if_empty)}\n\t    }\n\n\tLIST favouriteDinosaurs = (stegosaurs), brachiosaur, (anklyosaurus), (pleiosaur)\n\n\tMy favourite dinosaurs are {listWithCommas(favouriteDinosaurs, \"all extinct\")}.\n\n```\n\n----------------------------------------\n\nTITLE: Alternatives: Sequence Example (Ink)\nDESCRIPTION: This example shows a sequence of alternative texts. Sequences display each element in order, and then repeat the last element if the content is visited more times than the sequence's length. This is useful when a piece of content is visited multiple times.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_35\n\nLANGUAGE: ink\nCODE:\n```\n\tThe radio hissed into life. {\"Three!\"|\"Two!\"|\"One!\"|There was the white noise racket of an explosion.|But it was just static.}\n\n\t{I bought a coffee with my five-pound note.|I bought a second coffee for my friend.|I didn't have enough money to buy any more coffee.}\n```\n\n----------------------------------------\n\nTITLE: Continue Method Structure in Ink C#\nDESCRIPTION: Demonstrates the basic structure of the `Continue()` method in the Ink runtime engine. This method drives the iteration of content and control commands.  The loop continues to step through content or follows default choices until no more content is available.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nwhile( Step () || TryFollowDefaultInvisibleChoice() ) {}\n```\n\n----------------------------------------\n\nTITLE: Threaded Choices: Organisation of Wide Choice Points\nDESCRIPTION: This Ink snippet demonstrates using threads to divide up choices in a game with many parallel options, such as interacting with different parts of a room. The `drawers`, `cupboards`, and `room_exits` knots are called as threads.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_99\n\nLANGUAGE: ink\nCODE:\n```\n=== the_kitchen\n- (top)\n\t<- drawers(-> top)\n\t<- cupboards(-> top)\n\t<- room_exits\n= drawers (-> goback)\n\t// choices about the drawers...\n\t...\n= cupboards(-> goback)\n\t// choices about cupboards\n\t...\n= room_exits\n\t// exits; doesn't need a \"return point\" as if you leave, you go elsewhere\n\t...\n```\n\n----------------------------------------\n\nTITLE: Function for boiling objects\nDESCRIPTION: This code demonstrates using a function to boil different objects (kettle, pot, microwave). The function takes a reference to a variable and the name of the object, updating the variable's value to 'boiling'.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_103\n\nLANGUAGE: ink\nCODE:\n```\nLIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold\nVAR potState = cold\nVAR microwaveState = cold\n\n=== function boilSomething(ref thingToBoil, nameOfThing)\n\tThe {nameOfThing} begins to heat up.\n\t~ thingToBoil = boiling\n\n=== do_cooking\n*\t{kettleState == cold} [Turn on kettle]\n\t{boilSomething(kettleState, \"kettle\")}\n*\t{potState == cold} [Light stove]\n\t{boilSomething(potState, \"pot\")}\n*\t{microwaveState == cold} [Turn on microwave]\n\t{boilSomething(microwaveState, \"microwave\")}\n```\n\n----------------------------------------\n\nTITLE: Presenting Choices in Ink Story\nDESCRIPTION: This C# snippet presents available choices to the player from an Ink story. It iterates through the `currentChoices` list, logging each choice's text and index to the console. It also shows how to select a choice using `ChooseChoiceIndex`.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nif( _inkStory.currentChoices.Count > 0 )\n    {\n        for (int i = 0; i < _inkStory.currentChoices.Count; ++i) {\n            Choice choice = _inkStory.currentChoices [i];\n            Debug.Log(\"Choice \" + (i + 1) + \". \" + choice.text);\n        }\n    }\n\n    //...and when the player provides input:\n\n        _inkStory.ChooseChoiceIndex (index);\n\n    //And now you're ready to return to step 1, and present content again.\n```\n\n----------------------------------------\n\nTITLE: List Example: Basic Knowledge Tracking\nDESCRIPTION: This snippet demonstrates using a multi-valued list for tracking game flags. It allows testing for multiple game flags in a single line, making it a tidy way to store and check for in-game states and knowledge.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_120\n\nLANGUAGE: ink\nCODE:\n```\nLIST Facts = (Fogg_is_fairly_odd), \tfirst_name_phileas, (Fogg_is_English)\n\n{Facts ? Fogg_is_fairly_odd:I smiled politely.|I frowned. Was he a lunatic?}\n'{Facts ? first_name_phileas:Phileas|Monsieur}, really!' I cried.\n\n{ Facts ? (Fogg_is_English, Fogg_is_fairly_odd):\n\t\t<> 'I know Englishmen are strange, but this is *incredible*!'\n}\n```\n\n----------------------------------------\n\nTITLE: Tunnel Definition and Usage in Ink\nDESCRIPTION: Illustrates the usage of tunnels for advanced flow control, allowing a section of story to be called from multiple locations and return to the appropriate point.  It shows how to define a tunnel and call it with a return point using `->`. \nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_96\n\nLANGUAGE: ink\nCODE:\n```\n=== crossing_the_date_line(-> return_to) ===\n...\n-  -> return_to\n\n...\n\n=== outside_honolulu ===\nWe arrived at the large island of Honolulu.\n- (postscript)\n\t-> crossing_the_date_line(-> done)\n- (done)\n\t-> END\n\n...\n\n=== outside_pitcairn_island ===\nThe boat sailed along the water towards the tiny island.\n- (postscript)\n\t-> crossing_the_date_line(-> done)\n- (done)\n\t-> END\n```\n\n----------------------------------------\n\nTITLE: List Testing for Exact Equality\nDESCRIPTION: This snippet demonstrates how to test if two ink lists are exactly equal using the `==` operator. Equality means that all entries are identical in both lists. Inequality (`!=`) works as expected, returning true if the lists are not identical.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_117\n\nLANGUAGE: ink\nCODE:\n```\n{ DoctorsInSurgery == (Adams, Bernard):\n\t\tDr Adams and Dr Bernard are having a loud argument in one corner.\n}\n\n{ DoctorsInSurgery != (Adams, Bernard):\n\t\tAt least Adams and Bernard aren't arguing.\n}\n```\n\n----------------------------------------\n\nTITLE: Diverting to Options\nDESCRIPTION: This snippet demonstrates how to divert to options, triggering the output as if the choice had been chosen. The content printed will ignore square bracketed text, and if the option is once-only, it will be marked as used up.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_55\n\nLANGUAGE: ink\nCODE:\n```\n\t- (opts)\n\t* \t[Pull a face]\n\t\tYou pull a face, and the soldier comes at you! -> shove\n\n\t* \t(shove) [Shove the guard aside] You shove the guard to one side, but he comes back swinging.\n\n\t* \t{shove} [Grapple and fight] -> fight_the_guard\n\n\t- \t-> opts\n```\n\n----------------------------------------\n\nTITLE: Ink Properties Example\nDESCRIPTION: This example illustrates using ink lists to represent properties with different states. The old state is removed, and the new state is added. The `?` and `!?` operators test the current state of the property.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_152\n\nLANGUAGE: ink\nCODE:\n```\nLIST OnOffState = on, off\nLIST ChargeState = uncharged, charging, charged\n\nVAR PhoneState = (off, uncharged)\n\n*   {PhoneState !? uncharged } [Plug in phone]\n\t\t~ PhoneState -= LIST_ALL(ChargeState)\n\t\t~ PhoneState += charging\n\t\tYou plug the phone into charge.\n*   { PhoneState ? (on, charged) } [ Call my mother ]\n```\n\n----------------------------------------\n\nTITLE: Temporary Variables: Calculation example in Ink\nDESCRIPTION: Shows how to use temporary variables for calculations that are local to a stitch. The value of the temporary variable is discarded when the stitch ends.  Counts the number of warm items.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_81\n\nLANGUAGE: ink\nCODE:\n```\n=== near_north_pole ===\n\t\t~ temp number_of_warm_things = 0\n\t\t{ blanket:\n\t\t\t~ number_of_warm_things++\n\t\t}\n\t\t{ ear_muffs:\n\t\t\t~ number_of_warm_things++\n\t\t}\n\t\t{ gloves:\n\t\t\t~ number_of_warm_things++\n\t\t}\n\t\t{ number_of_warm_things > 2:\n\t\t\tDespite the snow, I felt incorrigibly snug.\n\t\t- else:\n\t\t\tThat night I was colder than I have ever been.\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Turn on Television Example (Ink)\nDESCRIPTION: This example demonstrates the creation of a basic scene where the character attempts to watch television, highlighting how choices and loops are used to maintain state and control flow.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_44\n\nLANGUAGE: ink\nCODE:\n```\n\t=== turn_on_television ===\n\tI turned on the television {for the first time|for the second time|again|once more}, but there was {nothing good on, so I turned it off again|still nothing worth watching|even less to hold my interest than before|nothing but rubbish|a program about sharks and I don't like sharks|nothing on}.\n\t+\t[Try it again] \t\t-> turn_on_television\n\t*\\t[Go outside instead]\t-> go_outside_instead\n\n    === go_outside_instead ===\n    -> END\n```\n\n----------------------------------------\n\nTITLE: Sticky Choices (Ink)\nDESCRIPTION: This example introduces sticky choices in Ink, marked with a `+` bullet. Sticky choices remain available even after being selected, allowing players to repeat actions.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_29\n\nLANGUAGE: Ink\nCODE:\n```\n=== homers_couch ===\n\t\t+\t[Eat another donut]\n\t\t\tYou eat another donut. -> homers_couch\n\t\t*\t[Get off the couch]\n\t\t\tYou struggle up off the couch to go and compose epic poetry.\n\t\t\t-> END\n```\n\n----------------------------------------\n\nTITLE: ExportRuntime Method in Ink C#\nDESCRIPTION: Illustrates the `ExportRuntime` method, which is the top-level function that triggers the code generation process for the runtime story. It's called on the `Parsed.Story` object to initiate the creation of the runtime hierarchy.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic Runtime.Story ExportRuntime()\n```\n\n----------------------------------------\n\nTITLE: List Definition and Usage\nDESCRIPTION: This snippet shows how to define a list of states using the `LIST` keyword in Ink. It also demonstrates how to assign a value to a list variable, change the value, and query the current value using conditional logic.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_100\n\nLANGUAGE: ink\nCODE:\n```\nLIST kettleState = cold, boiling, recently_boiled\n\n~ kettleState = cold\n\n*\t[Turn on kettle]\n\tThe kettle begins to bubble and boil.\n\t~ kettleState = boiling\n\n*\t[Touch the kettle]\n\t{ kettleState == cold:\n\t\tThe kettle is cool to the touch.\n\t- else:\n\t \tThe outside of the kettle is very warm!\n\t}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Portion of the Full List\nDESCRIPTION: This snippet demonstrates how to retrieve a slice of the full list using the `LIST_RANGE` function. You can specify the range using integer values or the list values themselves. The range is inclusive, and if the specified values are not found, the function will return the closest possible range.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_126\n\nLANGUAGE: ink\nCODE:\n```\n{LIST_RANGE(LIST_ALL(primeNumbers), 10, 20)}\n```\n\n----------------------------------------\n\nTITLE: Basic Branching with Knots, Options, and Diverts (Ink)\nDESCRIPTION: This example demonstrates basic branching in Ink using knots, options, and diverts to create a choose-your-own-adventure style narrative. The `paragraph_1` knot presents the player with three choices, each leading to a different paragraph.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_17\n\nLANGUAGE: Ink\nCODE:\n```\n=== paragraph_1 ===\nYou stand by the wall of Analand, sword in hand.\n* [Open the gate] -> paragraph_2\n* [Smash down the gate] -> paragraph_3\n* [Turn back and go home] -> paragraph_4\n\n=== paragraph_2 ===\nYou open the gate, and step out onto the path.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Inline Function Call in Ink\nDESCRIPTION: Demonstrates how to call a function inline within a content line, where the return value (if any) is printed. This example uses the `describe_health` function to describe a character's health state based on a numerical value.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_90\n\nLANGUAGE: ink\nCODE:\n```\nMonsieur Fogg was looking {describe_health(health)}.\n\n=== function describe_health(x) ===\n{\n- x == 100:\n\t~ return \"spritely\"\n- x > 75:\n\t~ return \"chipper\"\n- x > 45:\n\t~ return \"somewhat flagging\"\n- else:\n\t~ return \"despondent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Knot Definition: Sum of 1 to 100 in Ink\nDESCRIPTION: Shows an example of a recursive knot definition to calculate the sum of numbers from 1 to 100.  Temporary variables are used safely in recursion.  Finally displays the sum and an interaction.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_83\n\nLANGUAGE: ink\nCODE:\n```\n-> add_one_to_one_hundred(0, 1)\n\n\t=== add_one_to_one_hundred(total, x) ===\n\t\t~ total = total + x\n\t\t{ x == 100:\n\t\t\t-> finished(total)\n\t\t- else:\n\t\t\t-> add_one_to_one_hundred(total, x + 1)\n\t\t}\n\n\t=== finished(total) ===\n\t\t\"The result is {total}!\" you announce.\n\t\tGauss stares at you in horror.\n\t\t-> END\n```\n\n----------------------------------------\n\nTITLE: Intersecting Lists (Ink)\nDESCRIPTION: This snippet demonstrates how to find the intersection of two lists in Ink, using the `^` operator.  The intersection returns a new list containing elements that are present in both input lists.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_135\n\nLANGUAGE: ink\nCODE:\n```\n\tLIST CoreValues = strength, courage, compassion, greed, nepotism, self_belief, delusions_of_godhood\n\tVAR desiredValues = (strength, courage, compassion, self_belief )\n\tVAR actualValues =  ( greed, nepotism, self_belief, delusions_of_godhood )\n\n\t{desiredValues ^ actualValues} // prints \"self_belief\"\n```\n\n----------------------------------------\n\nTITLE: Move Ring Function (Ink)\nDESCRIPTION: This Ink function moves a ring from one list to another, representing a move in the Tower of Hanoi game. It takes references to the 'from' and 'to' lists, modifies them by removing the smallest element from the 'from' list and adding it to the 'to' list.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_129\n\nLANGUAGE: ink\nCODE:\n```\n=== function move_ring( ref from, ref to ) ===\n\t    ~ temp whichRingToMove = LIST_MIN(from)\n\t    ~ from -= whichRingToMove\n\t    ~ to += whichRingToMove\n```\n\n----------------------------------------\n\nTITLE: Accessing Visit Counts in Ink - C#\nDESCRIPTION: This code snippet shows how to retrieve the number of times a knot or stitch has been visited using the `VisitCountAtPathString` method.  The method takes a string representing the path to the knot or stitch. It provides insights into the story's progression and player choices.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.state.VisitCountAtPathString(\"...\");\n```\n\n----------------------------------------\n\nTITLE: Knots and Stitches: Parameter Passing in Ink\nDESCRIPTION: Demonstrates how to pass parameters to knots, effectively turning them into reusable functions. The passed parameter 'who' is then used in dialogue.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_82\n\nLANGUAGE: ink\nCODE:\n```\n*\t[Accuse Hasting]\n\t\t\t-> accuse(\"Hastings\")\n\t* \t[Accuse Mrs Black]\n\t\t\t-> accuse(\"Claudia\")\n\t* \t[Accuse myself]\n\t\t\t-> accuse(\"myself\")\n\n\t=== accuse(who) ===\n\t\t\"I accuse {who}!\" Poirot declared.\n\t\t\"Really?\" Japp replied. \"{who == \\\"myself\\\":You did it?|{who}?}\"\n\t\t\"And why not?\" Poirot shot back.\n```\n\n----------------------------------------\n\nTITLE: Refreshing a List's Type\nDESCRIPTION: This snippet demonstrates how to create an empty list that knows its type. This is useful when you need an empty list of a specific type. Use the type name after the list's name when assigning to the empty list. For example, `ValueList()`.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_125\n\nLANGUAGE: ink\nCODE:\n```\nLIST ValueList = first_value, second_value, third_value\nVAR myList = ()\n\n~ myList = ValueList()\n\n{ LIST_ALL(myList) }\n```\n\n----------------------------------------\n\nTITLE: Stitch Definition Parsing in Ink\nDESCRIPTION: Demonstrates how stitch definitions are parsed in Ink using the StringParser. The `StitchDeclaration` rule is wrapped in a `Parse` call to allow rewinding if parsing fails, ensuring the parser returns to the correct state in the ink file.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected object StitchDefinition()\n{\n    // Wrap the 'StitchDeclaration' rule in a Parse(...) call,\n    // so that it will return to the correct point in the ink\n    // file if parsing fails.\n    var decl = Parse(StitchDeclaration);\n    if (decl == null)\n        return null;\n\n    //... (continue parsing the StitchDefinition)\n```\n\n----------------------------------------\n\nTITLE: Creating a List from Explicit Item Metadata - C#\nDESCRIPTION: This snippet shows how to create a new Ink list by explicitly specifying the metadata (origin name and int value) for each item. It retrieves two existing Ink lists (\"fruit\" and \"places\") from the story's variable state and merges them into a new list. This method is useful when combining lists from different origins.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar newList = new Ink.Runtime.InkList();\nvar fruit = story.variablesState[\"fruit\"] as Ink.Runtime.InkList;\nvar places = story.variablesState[\"places\"] as Ink.Runtime.InkList;\nforeach(var item in fruit) {\n    newList.Add(item.Key, item.Value);\n}\nforeach (var item in places) {\n    newList.Add(item.Key, item.Value);\n}\nstory.variablesState[\"myList\"] = newList;\n```\n\n----------------------------------------\n\nTITLE: Automated Testing in InkTestBed (C#)\nDESCRIPTION: This C# code snippet demonstrates how to automate the testing of a specific flow within the InkTestBed project. It compiles an Ink file, continues the story maximally, chooses options, and repeats the process. This allows for consistent and repeatable testing of Ink stories.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Run ()\n{\n    CompileFile();\n\n    ContinueMaximally ();\n    Choose(0);\n\n    ContinueMaximally ();\n    Choose(1);\n\n    ContinueMaximally ();\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Choice and Output Text in ink\nDESCRIPTION: This snippet shows how to divide option content using square brackets. Content before the brackets is printed in both choice and output, content inside only in choice, and content after only in output, providing alternative ways for a line to end.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_7\n\nLANGUAGE: ink\nCODE:\n```\nHello world!\n*\tHello [back!] right back to you!\n\t\tNice to hear from you!\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing Ink List - C#\nDESCRIPTION: This code demonstrates how to modify an existing Ink list retrieved from the story's variable state. It retrieves the InkList named \"fruit\", casts it, and then adds a new item to it. Assumes a variable called 'fruit' is defined in the ink story.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar fruit = story.variablesState[\"fruit\"] as Ink.Runtime.InkList;\nfruit.AddItem(\"Apple\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning a List with Items in Ink - C#\nDESCRIPTION: This code creates a new Ink list with items from a single origin, and assigns it to a variable within the story's variable state. It initializes an InkList with a specified origin name and then adds string items to the list before assigning it to a story variable.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar newList = new Ink.Runtime.InkList(\"fruit\", story);\nnewList.AddItem(\"Orange\");\nnewList.AddItem(\"Apple\");\nstory.variablesState[\"myList\"] = newList;\n```\n\n----------------------------------------\n\nTITLE: List Testing for Empty List Containment\nDESCRIPTION: This snippet explains that testing for the empty list using the `?` operator will always return false, regardless of whether the list being checked is empty or not. This behavior is useful for certain scenarios, such as checking if a player has any items.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_119\n\nLANGUAGE: ink\nCODE:\n```\nSomeList ? ()\n```\n\n----------------------------------------\n\nTITLE: Knot/Stitch Label Read Count Example (Ink)\nDESCRIPTION: This example demonstrates how knot/stitch labels are actually integer variables representing the number of times the content at the address has been seen.  It shows how to test if a knot/stitch has been seen, and how many times it has been seen.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_34\n\nLANGUAGE: ink\nCODE:\n```\n\t*\t{seen_clue} [Accuse Mr Jefferson]\n\t* {seen_clue > 3} [Flat-out arrest Mr Jefferson]\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Ink Story\nDESCRIPTION: This C# code shows how to implement an error handler for an Ink story.  It assigns a delegate to the `onError` event, which logs warnings for warning-level errors and errors for other error types, using the Unity Debug log.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory = new Story(inkAsset.text);\n\n_inkStory.onError += (msg, type) => {\n    if( type == Ink.ErrorType.Warning )\n        Debug.LogWarning(msg);\n    else\n        Debug.LogError(msg);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Ink Functions from C#\nDESCRIPTION: This snippet illustrates how to directly run ink functions from C# using the `EvaluationFunction` method. It takes the function name and parameters as input, executing the function within the ink story. It returns the function's return value and any generated text output.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar returnValue = _inkStory.EvaluationFunction(\"myFunctionName\", out textOutput, params);\n```\n\n----------------------------------------\n\nTITLE: Local Diverts within Knots (Ink)\nDESCRIPTION: This example demonstrates local diverts within a knot. You can divert to a stitch within the same knot without using the full address.  Knot and stitch names must be unique within a given scope.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_24\n\nLANGUAGE: Ink\nCODE:\n```\n-> the_orient_express\n\n=== the_orient_express ===\n= in_first_class\n\t\tI settled my master.\n\t\t*\t[Move to third class]\n\t\t\t-> in_third_class\n\n= in_third_class\n\t\tI put myself in third.\n```\n\n----------------------------------------\n\nTITLE: Using Glue to Avoid Line Breaks in ink\nDESCRIPTION: This snippet demonstrates the use of `<>` (glue) to prevent line breaks from being inserted between lines of content. This is useful for creating seamless phrases across diverts.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_16\n\nLANGUAGE: ink\nCODE:\n```\n=== hurry_home ===\nWe hurried home <>\n-> to_savile_row\n\n=== to_savile_row ===\nto Savile Row\n-> as_fast_as_we_could\n\n=== as_fast_as_we_could ===\n<> as fast as we could.\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Choices in ink\nDESCRIPTION: This snippet shows how to create multiple choices for the player by listing them with the `*` character.  The player can select any of the provided choices.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_9\n\nLANGUAGE: ink\nCODE:\n```\n\"What's that?\" my master asked.\n*\t\"I am somewhat tired[.],\" I repeated.\n\t\t\"Really,\" he responded. \"How deleterious.\"\n*\t\"Nothing, Monsieur!\"[] I replied.\n\t\t\"Very good, then.\"\n*\t  \"I said, this journey is appalling[.\"] and I want no more of it.\"\n\t\t\"Ah,\" he replied, not unkindly. \"I see you are feeling frustrated. Tomorrow, things will improve.\"\n```\n\n----------------------------------------\n\nTITLE: Content Outside Stitches (Ink)\nDESCRIPTION: This example highlights how you can include content at the top of a knot, outside of any stitch. However, you must explicitly divert out of this content to prevent the engine from getting stuck.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_23\n\nLANGUAGE: Ink\nCODE:\n```\n=== the_orient_express ===\n\nWe boarded the train, but where?\n*\t[First class] -> in_first_class\n*\t[Second class] -> in_second_class\n\n= in_first_class\n\t\t...\n= in_second_class\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocks: Context-relevant content in Ink\nDESCRIPTION: Demonstrates how to use conditional blocks to display context-relevant content based on game state, using read counts and boolean variables. Prioritized branching based on game state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_72\n\nLANGUAGE: ink\nCODE:\n```\n=== dream ===\n\t\t{\n\t\t\t- visited_snakes && not dream_about_snakes:\n\t\t\t\t~ fear++\n\t\t\t\t-> dream_about_snakes\n\n\t\t\t- visited_poland && not dream_about_polish_beer:\n\t\t\t\t~ fear--\n\t\t\t\t-> dream_about_polish_beer\n\n\t\t\t- else:\n\t\t\t\t// breakfast-based dreams have no effect\n\t\t\t\t-> dream_about_marmalade\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Binding External Functions in Ink - C#\nDESCRIPTION: This code snippet demonstrates how to bind C# functions to be called directly from ink using the `BindExternalFunction` method. It associates a function name with a C# delegate. This allows ink scripts to invoke game-specific logic written in C#.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.BindExternalFunction (\"playSound\", (string name) => {\n    _audioController.Play(name);\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling Ink Stories - C#\nDESCRIPTION: This code snippet demonstrates how to precompile Ink stories from C# using the Ink compiler. It initializes a new compiler instance with the Ink file contents and then compiles it into a Story object, which can then be continued.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// inkFileContents: linked TextAsset, or Resources.Load, or even StreamingAssets\nvar compiler = new Ink.Compiler(inkFileContents);\nInk.Runtime.Story story = compiler.Compile();\nDebug.Log(story.Continue());\n```\n\n----------------------------------------\n\nTITLE: Conditional Text Example (Ink)\nDESCRIPTION: This example demonstrates how to use conditional text within ink stories based on variable values.  It allows for different text to be displayed depending on the state of the game.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_45\n\nLANGUAGE: ink\nCODE:\n```\n\t{met_blofeld: \"I saw him. Only for a moment.\" }\n\tand\n\t\"His real name was {met_blofeld.learned_his_name: Franz|a secret}.\"\n\n\t{met_blofeld: \"I saw him. Only for a moment. His real name was {met_blofeld.learned_his_name: Franz|kept a secret}.\" | \"I missed him. Was he particularly evil?\" }\n```\n\n----------------------------------------\n\nTITLE: Define Knowledge Chains\nDESCRIPTION: Defines lists representing knowledge chains related to the bed, the knife, and the window.  Each element in the list is a state the player can 'reach', indicating an increase in knowledge.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_147\n\nLANGUAGE: ink\nCODE:\n```\nLIST BedKnowledge = neatly_made, crumpled_duvet, hastily_remade, body_on_bed, murdered_in_bed, murdered_while_asleep\n\nLIST KnifeKnowledge = prints_on_knife, joe_seen_prints_on_knife,joe_wants_better_prints, joe_got_better_prints\n\nLIST WindowKnowledge = steam_on_glass, fingerprints_on_glass, fingerprints_on_glass_match_knife\n```\n\n----------------------------------------\n\nTITLE: Tagging Content Lines in ink\nDESCRIPTION: This snippet shows how to tag lines of content using hashtags. Tags are not displayed to the user but can be read by the game engine for additional processing, such as applying specific formatting or triggering events.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_4\n\nLANGUAGE: ink\nCODE:\n```\nA line of normal game-text. # colour it blue\n```\n\n----------------------------------------\n\nTITLE: Command-line Inklecate Usage (Mac/Linux)\nDESCRIPTION: This command executes the inklecate command-line compiler in play mode, allowing immediate interaction with the compiled story. It requires the inklecate executable to be in the current directory and the `myStory.ink` file to exist. The `-p` flag enables play mode.\nSOURCE: https://github.com/inkle/ink/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./inklecate -p myStory.ink\n```\n\n----------------------------------------\n\nTITLE: List Value Ambiguity Resolution\nDESCRIPTION: This Ink script shows how to resolve ambiguity when list values share names across different lists. The `.` syntax is used to specify the list from which the value should be taken (e.g., `colours.blue`).\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_105\n\nLANGUAGE: ink\nCODE:\n```\nLIST colours = red, green, blue, purple\nLIST moods = mad, happy, blue\n\nVAR status = colours.blue\n```\n\n----------------------------------------\n\nTITLE: Function Without Return Value in Ink\nDESCRIPTION: Defines a function `harm` that modifies a variable `stamina` based on a conditional check. This shows that functions in ink do not necessarily need a return statement and can perform actions or side effects.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_89\n\nLANGUAGE: ink\nCODE:\n```\n=== function harm(x) ===\n{\n\tstamina < x:\n\t\t~ stamina = 0\n\t- else:\n\t\t~ stamina = stamina - x\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Diverts as Variables\nDESCRIPTION: This snippet demonstrates that a divert statement can be stored in a variable. This allows for dynamic story flow by changing where the story diverts to based on variable values.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_59\n\nLANGUAGE: ink\nCODE:\n```\n\tVAR \tcurrent_epilogue = -> everybody_dies\n\n\t=== continue_or_quit ===\n\tGive up now, or keep trying to save your Kingdom?\n\t*  [Keep trying!] \t-> more_hopeless_introspection\n\t*  [Give up] \t\t-> current_epilogue\n```\n\n----------------------------------------\n\nTITLE: Sending Divert Targets: Divert as Parameter in Ink\nDESCRIPTION: Demonstrates how to send divert targets as parameters to knots. Requires typing the parameter with `->` to prevent accidental passing of read counts instead of the divert target.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_84\n\nLANGUAGE: ink\nCODE:\n```\n=== sleeping_in_hut ===\n\t\tYou lie down and close your eyes.\n\t\t-> generic_sleep (-> waking_in_the_hut)\n\n\t===  generic_sleep (-> waking)\n\t\tYou sleep perchance to dream etc. etc.\n\t\t-> waking\n\n\t=== waking_in_the_hut\n\t\tYou get back to your feet, ready to continue your journey.\n```\n\n----------------------------------------\n\nTITLE: Initializing Ink Story from TextAsset\nDESCRIPTION: This C# snippet shows how to load and initialize an Ink story from a Unity TextAsset.  The code creates a new `Story` object by passing the text content of the `inkAsset` TextAsset to the Story constructor within the `Awake` lifecycle method.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Ink.Runtime;\n\n...\n\nvoid Awake()\n{\n    _inkStory = new Story(inkAsset.text);\n}\n```\n\n----------------------------------------\n\nTITLE: String Queries: Equality, Inequality, Substring in Ink\nDESCRIPTION: Shows how to perform basic string queries, including equality (==), inequality (!=), and substring check (?). These operators return true or false based on the string comparison.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_68\n\nLANGUAGE: ink\nCODE:\n```\n{ \"Yes, please.\" == \"Yes, please.\" }\n{ \"No, thank you.\" != \"Yes, please.\" }\n{ \"Yes, please\" ? \"ease\" }\n```\n\n----------------------------------------\n\nTITLE: ResolveReferences Method in Ink C#\nDESCRIPTION: Explains the `ResolveReferences` method, which is used to resolve references in the parsed hierarchy. This is done in a separate pass after the runtime hierarchy has been constructed.  The example shows how a divert target's runtime path is set.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void ResolveReferences(Story context)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nif (targetContent) {\n    runtimeDivert.targetPath = targetContent.runtimePath;\n}\n```\n\n----------------------------------------\n\nTITLE: came_from() Function Example (Ink)\nDESCRIPTION: This example demonstrates how to wrap the `TURNS_SINCE()` function into a user-defined function to check whether the player came from a particular stitch or knot in the current turn.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_48\n\nLANGUAGE: ink\nCODE:\n```\n\t=== function came_from(-> x)\n\t\t~ return TURNS_SINCE(x) == 0\n\n\t* {came_from(->  nice_welcome)} 'I'm happy to be here!'\n\t* {came_from(->  nasty_welcome)} 'Let's keep this quick.'\n```\n\n----------------------------------------\n\nTITLE: Creating Loops with Diverts (Ink)\nDESCRIPTION: This example demonstrates how to create a simple loop using diverts in Ink. The `round` knot diverts back to itself, creating an infinite loop.  It's mentioned as being legal but not a great idea.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_19\n\nLANGUAGE: Ink\nCODE:\n```\n=== round ===\nand\n-> round\n```\n\n----------------------------------------\n\nTITLE: Scope and Pathing to Labels\nDESCRIPTION: This snippet demonstrates how to reference labels within the same block of weave and from outside the block using paths. It shows accessing labels in different stitches within the same knot and in other knots.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_52\n\nLANGUAGE: ink\nCODE:\n```\n\t=== knot ===\n\t= stitch_one\n\t\t- (gatherpoint) Some content.\n\t= stitch_two\n\t\t* {stitch_one.gatherpoint} Option\n```\n\nLANGUAGE: ink\nCODE:\n```\n\t=== knot_one ===\n\t- \t(gather_one)\n\t\t* {knot_two.stitch_two.gather_two} Option\n\n\t=== knot_two ===\n\t= stitch_two\n\t\t- (gather_two)\n\t\t\t* {knot_one.gather_one} Option\n```\n\n----------------------------------------\n\nTITLE: Once-Only Choices (Ink)\nDESCRIPTION: This example demonstrates the default behavior of choices in Ink, where each choice can only be selected once.  After being chosen, the choice disappears on subsequent loops.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_26\n\nLANGUAGE: Ink\nCODE:\n```\n=== find_help ===\n\n\t\tYou search desperately for a friendly face in the crowd.\n\t\t*\tThe woman in the hat[?] pushes you roughly aside. -> find_help\n\t\t*\tThe man with the briefcase[?] looks disgusted as you stumble past him. -> find_help\n```\n\n----------------------------------------\n\nTITLE: List values as numbers\nDESCRIPTION: This ink script demonstrates treating list values as numbers and incrementing values. The `lecturersVolume` and `murmurersVolume` variables are compared, and incremented using the `++` operator.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_107\n\nLANGUAGE: ink\nCODE:\n```\nLIST volumeLevel = off, quiet, medium, loud, deafening\nVAR lecturersVolume = quiet\nVAR murmurersVolume = quiet\n\n{ lecturersVolume < deafening:\n\t~ lecturersVolume++\n\n\t{ lecturersVolume > murmurersVolume:\n\t\t~ murmurersVolume++\n\t\tThe murmuring gets louder.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Choice Text in ink\nDESCRIPTION: This snippet demonstrates how to suppress the choice text from being repeated in the output using square brackets `[]`. Only the content inside the brackets is displayed as the choice, while the output only shows the content after the choice.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_6\n\nLANGUAGE: ink\nCODE:\n```\nHello world!\n*\t[Hello back!]\n\t\tNice to hear from you!\n```\n\n----------------------------------------\n\nTITLE: Parameter Passing by Reference in Ink\nDESCRIPTION: Defines a function `alter` that takes a parameter by reference (`ref x`) and modifies the original variable passed to it. This demonstrates how functions can directly alter variables in the calling context.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_94\n\nLANGUAGE: ink\nCODE:\n```\n=== function alter(ref x, k) ===\n\t~ x = x + k\n```\n\n----------------------------------------\n\nTITLE: Alternatives in Choice Text (Ink)\nDESCRIPTION: This example shows how alternatives can be included within choice text. Note the need to escape the whitespace before '{' to avoid it being interpreted as a conditional.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_42\n\nLANGUAGE: ink\nCODE:\n```\n\t+\t\"Hello, {&Master|Monsieur Fogg|you|brown-eyes}!\"[] I declared.\n\t+\\ \t{&They headed towards the Sandlands|They set off for the desert|The party followed the old road South}\n```\n\n----------------------------------------\n\nTITLE: Get List for Tower (Ink)\nDESCRIPTION: This Ink function returns the list associated with a given tower number in the Tower of Hanoi game. The towerNum parameter determines which list (post1, post2, or post3) is returned.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_130\n\nLANGUAGE: ink\nCODE:\n```\n== function getListForTower(towerNum)\n\t    { towerNum:\n\t        - 1:    ~ return post1\n\t        - 2:    ~ return post2\n\t        - 3:    ~ return post3\n\t    }\n```\n\n----------------------------------------\n\nTITLE: Alternatives: Once-Only Example (Ink)\nDESCRIPTION: This example showcases once-only alternatives. Once-only alternatives display each element once, and then display nothing after all elements have been exhausted.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_37\n\nLANGUAGE: ink\nCODE:\n```\n\tHe told me a joke. {!I laughed politely.|I smiled.|I grimaced.|I promised myself to not react again.}\n```\n\n----------------------------------------\n\nTITLE: Diverting to Specific Stitches (Ink)\nDESCRIPTION: This example shows how to divert to specific stitches within a knot using their full address (knot name + stitch name). This allows for more precise control over the story flow.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_21\n\nLANGUAGE: Ink\nCODE:\n```\n*\t[Travel in third class]\n\t\t-> the_orient_express.in_third_class\n\n*\t[Travel in the guard's van]\n\t\t-> the_orient_express.in_the_guards_van\n```\n\n----------------------------------------\n\nTITLE: Numerical Types: Explicit Casting in Ink\nDESCRIPTION: Demonstrates explicit type casting using INT(), FLOOR(), and FLOAT() functions. This is used when implicit type handling is not desired, or when rounding is required.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_67\n\nLANGUAGE: ink\nCODE:\n```\n{INT(3.2)} is 3.\n{FLOOR(4.8)} is 4.\n{INT(-4.8)} is -4.\n{FLOOR(-4.8)} is -5.\n\n{FLOAT(4)} is, um, still 4.\n```\n\n----------------------------------------\n\nTITLE: Exponentiation Function Definition in Ink\nDESCRIPTION: Defines a function `exp` that calculates x to the power of e, where e is an integer, using recursion. This demonstrates a more complex function definition with recursion and conditional logic.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_92\n\nLANGUAGE: ink\nCODE:\n```\n=== function exp(x, e) ===\n\t// returns x to the power e where e is an integer\n{\n\te <= 0:\n\t\t~ return 1\n\t- else:\n\t\t~ return x * exp(x, e - 1)\n}\n```\n\n----------------------------------------\n\nTITLE: TURNS_SINCE() Function Example (Ink)\nDESCRIPTION: This example demonstrates how to use the `TURNS_SINCE()` function to check how many turns have passed since a particular knot or stitch was last visited.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_47\n\nLANGUAGE: ink\nCODE:\n```\n\t*\t{TURNS_SINCE(-> sleeping.intro) > 10} You are feeling tired... -> sleeping\n\t* \\t{TURNS_SINCE(-> laugh) == 0}  You try to stop laughing.\n```\n\n----------------------------------------\n\nTITLE: Tower of Hanoi Initialization and Game Loop (Ink)\nDESCRIPTION: This snippet initializes the game state for the Tower of Hanoi, defining lists for discs and posts, then starts the main game loop.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_127\n\nLANGUAGE: ink\nCODE:\n```\n\tLIST Discs = one, two, three, four, five, six, seven\n\tVAR post1 = ()\n\tVAR post2 = ()\n\tVAR post3 = ()\n\n\t~ post1 = LIST_ALL(Discs)\n\n\t-> gameloop\n```\n\n----------------------------------------\n\nTITLE: Diverting from Knot to Knot in ink\nDESCRIPTION: This snippet illustrates how to divert the story flow from one knot to another using `->`.  Diverts are invisible and happen without user input.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_14\n\nLANGUAGE: ink\nCODE:\n```\n=== back_in_london ===\n\nWe arrived into London at 9.45pm exactly.\n-> hurry_home\n\n=== hurry_home ===\nWe hurried home to Savile Row as fast as we could.\n```\n\n----------------------------------------\n\nTITLE: List Testing for Emptiness\nDESCRIPTION: This snippet demonstrates how to test if an ink list is empty. A list evaluates to true if it is not empty and false if it is empty. This allows for concise conditional logic based on the list's contents.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_116\n\nLANGUAGE: ink\nCODE:\n```\n{ DoctorsInSurgery: The surgery is open today. | Everyone has gone home. }\n```\n\n----------------------------------------\n\nTITLE: Advanced List Usage: List as Variable\nDESCRIPTION: This Ink code shows that a `LIST` creates both a list of values and a variable with the same name.  While possible, assigning non-list values to this variable is discouraged.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_106\n\nLANGUAGE: ink\nCODE:\n```\nLIST statesOfGrace = ambiguous, saintly, fallen\n\n~ statesOfGrace = 3.1415 // set the variable to a number not a list value\n\n~ temp anotherStateOfGrace = statesOfGrace.saintly\n```\n\n----------------------------------------\n\nTITLE: Using Choices in Dialogue in ink\nDESCRIPTION: This snippet demonstrates how to use choices in dialogue, suppressing only the punctuation from being displayed after the player makes a choice. This is achieved using square brackets.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_8\n\nLANGUAGE: ink\nCODE:\n```\n\"What's that?\" my master asked.\n*\t\"I am somewhat tired[.],\" I repeated.\n\t\t\"Really,\" he responded. \"How deleterious.\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Variables\nDESCRIPTION: This snippet demonstrates how to assign values to variables using the `~` markup symbol to indicate that a line of content is intended for numerical work.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_62\n\nLANGUAGE: ink\nCODE:\n```\n\t=== set_some_variables ===\n\t\t~ knows_about_wager = true\n\t\t~ x = (x * x) - (y * y) + c\n\t\t~ y = 2 * x * y\n```\n\n----------------------------------------\n\nTITLE: SEED_RANDOM() Function Example (Ink)\nDESCRIPTION: This example demonstrates how to use the `SEED_RANDOM()` function to seed the random number generator for testing purposes, ensuring the same sequence of outcomes each time the story is played.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_49\n\nLANGUAGE: ink\nCODE:\n```\n\t~ SEED_RANDOM(235)\n```\n\n----------------------------------------\n\nTITLE: Alternatives with Divert Statements (Ink)\nDESCRIPTION: This example shows that alternatives can include divert statements, allowing choices to branch to different parts of the story. This adds flexibility to the content variations.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_41\n\nLANGUAGE: ink\nCODE:\n```\n\tI {waited.|waited some more.|snoozed.|woke up and waited more.|gave up and left. -> leave_post_office}\n```\n\n----------------------------------------\n\nTITLE: Full Choice JSON Example\nDESCRIPTION: This example shows the complete JSON structure of an ink choice generated from `* Hello[.], world.`. It includes the evaluation of choice text, the ChoicePoint object itself, and named content for start and choice-chosen scenarios.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ink_JSON_runtime_format.md#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n// Outer container\n[\n\n  // Evaluate choice text.\n  // Starts by calling a \"function\" labelled\n  // 's', which is the start content for the choice.\n  // We use a small Container so that it can be\n  // be re-used, and so the visit counts will be correct.\n  \"ev\",\n  \"str\",\n  {\n    \"f()\": \".^.s\"\n  },\n  \"/str\",\n\n  // Evaluate content inside square brackets (simply '.')\n  \"str\",\n  \"^.\",\n  \"/str\",\n\n  // Evaluation of choice text complete\n  \"/ev\",\n\n  // ChoicePoint object itself:\n  //  - linked to own container named 'c'\n  //  - Flags 22 are:\n  //     * 0x2  - has start content\n  //     * 0x4  - has choice-only content\n  //     * 0x10 - once only\n  {\n    \"*\": \".^.c\",\n    \"flg\": 22\n  },\n\n  // Named content from outer container - 's' and 'c'\n  {\n    // Inner container for start content is labelled 's'\n    \"s\": [\n      \"^Hello\",\n      null\n    ],\n\n    // Inner container for content when choice is chosen\n    // First repeats the start content ('s'),\n    // before continuing.\n    \"c\": [\n      {\n        \"f()\": \"0.0.s\"\n      },\n      \"^, world.\",\n      \"\\n\",\n      \"\\n\",\n\n      // Container has all three counting flags:\n      //  - Visits are counted\n      //  - Turns-since is counted\n      //  - Counted from start only\n      {\n        \"#f\": 7\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sticky Fallback Choices (Ink)\nDESCRIPTION: This example demonstrates that fallback choices can also be sticky, allowing the game to repeatedly choose the fallback option if no other options are available.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_30\n\nLANGUAGE: Ink\nCODE:\n```\n=== conversation_loop\n\t\t*\t[Talk about the weather] -> chat_weather\n\t\t*\t[Talk about the children] -> chat_children\n\t\t+\t-> sit_in_silence_again\n```\n\n----------------------------------------\n\nTITLE: Reusing Lists for Multiple Objects\nDESCRIPTION: This example demonstrates reusing the same list of states (`heatedWaterStates`) for multiple variables (`kettleState`, `potState`). This allows managing the state of multiple objects with the same possible states.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_102\n\nLANGUAGE: ink\nCODE:\n```\nLIST daysOfTheWeek = Monday, Tuesday, Wednesday, Thursday, Friday\nVAR today = Monday\nVAR tomorrow = Tuesday\n```\n\nLANGUAGE: ink\nCODE:\n```\nLIST heatedWaterStates = cold, boiling, recently_boiled\nVAR kettleState = cold\nVAR potState = cold\n\n*\t{kettleState == cold} [Turn on kettle]\n\tThe kettle begins to boil and bubble.\n\t~ kettleState = boiling\n*\t{potState == cold} [Light stove]\n \tThe water in the pot begins to boil and bubble.\n \t~ potState = boiling\n```\n\n----------------------------------------\n\nTITLE: Numerical Types: Implicit Typing in Ink\nDESCRIPTION: Explains how numerical types are implicitly determined based on the input types. Integer division results in an integer, while floating-point division yields a floating-point result.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_66\n\nLANGUAGE: ink\nCODE:\n```\n~ x = 2 / 3\n~ y = 7 / 3\n~ z = 1.2 / 0.5\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Choices in ink\nDESCRIPTION: This snippet creates a simple choice for the player using the `*` character. When selected, the player sees the choice text and then the subsequent line of text.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_5\n\nLANGUAGE: ink\nCODE:\n```\nHello world!\n*\tHello back!\n\t\tNice to hear from you!\n```\n\n----------------------------------------\n\nTITLE: Seamless Diverts in ink\nDESCRIPTION: This snippet demonstrates how to create seamless diverts mid-sentence. The divert happens without inserting any extra line breaks, allowing for smoother transitions.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_15\n\nLANGUAGE: ink\nCODE:\n```\n=== hurry_home ===\nWe hurried home to Savile Row -> as_fast_as_we_could\n\n=== as_fast_as_we_could ===\nas fast as we could.\n```\n\n----------------------------------------\n\nTITLE: Diverting to a Knot in ink\nDESCRIPTION: This snippet demonstrates diverting the flow to a knot using the `->` arrow. This is necessary when using knots to structure content, as content outside knots is run automatically, but knots are not.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_12\n\nLANGUAGE: ink\nCODE:\n```\n-> top_knot\n\n=== top_knot ===\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Fallback Choices (Ink)\nDESCRIPTION: This example illustrates how to use fallback choices in Ink.  A fallback choice is a choice without text, used when all other choices have been exhausted. It prevents 'out of content' errors.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_27\n\nLANGUAGE: Ink\nCODE:\n```\n*\t-> out_of_options\n```\n\nLANGUAGE: Ink\nCODE:\n```\n* \t->\n\t\tMulder never could explain how he got out of that burning box car. -> season_2\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions in Choices (Ink)\nDESCRIPTION: This example demonstrates how to use multiple conditions within a single choice in Ink. All conditions must be true for the choice to be displayed.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_32\n\nLANGUAGE: Ink\nCODE:\n```\n*\t{ not visit_paris } \t[Go to Paris] -> visit_paris\n+\t{ visit_paris } { not bored_of_paris }\n\t\t[Return to Paris] -> visit_paris\n```\n\n----------------------------------------\n\nTITLE: Evaluating Strings\nDESCRIPTION: This snippet shows that a string defined in Ink can contain Ink, which will always evaluate to a string. Once evaluated, the value is 'sticky'.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_61\n\nLANGUAGE: ink\nCODE:\n```\n\tVAR a_colour = \"\"\n\n\t~ a_colour = \"{~red|blue|green|yellow}\"\n\n\t{a_colour}\n```\n\n----------------------------------------\n\nTITLE: Adding TODO Comments in ink\nDESCRIPTION: This snippet demonstrates the use of `TODO:` comments, which are used to remind the author of tasks to be completed. The compiler prints these out during compilation.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_3\n\nLANGUAGE: ink\nCODE:\n```\nTODO: Write this section properly!\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocks: Simple 'if' statement in Ink\nDESCRIPTION: Demonstrates a simple 'if' statement that executes code based on a condition. The code snippet also shows how to include an 'else' condition.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_69\n\nLANGUAGE: ink\nCODE:\n```\n{ x > 0:\n\t\t~ y = x - 1\n}\n\n{ x > 0:\n\t\t~ y = x - 1\n- else:\n\t\t~ y = x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Variables\nDESCRIPTION: This snippet illustrates how to print the value of a variable as content using an inline syntax similar to sequences and conditional text.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_60\n\nLANGUAGE: ink\nCODE:\n```\n\tVAR friendly_name_of_player = \"Jackie\"\n\tVAR age = 23\n\n\tMy name is Jean Passepartout, but my friends call me {friendly_name_of_player}. I'm {age} years old.\n```\n\n----------------------------------------\n\nTITLE: Including External Script Files (Ink)\nDESCRIPTION: This example shows how to include external Ink script files into the current file. Include statements must be at the top of the file, outside of any knots.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_25\n\nLANGUAGE: Ink\nCODE:\n```\nINCLUDE newspaper.ink\nINCLUDE cities/vienna.ink\nINCLUDE journeys/orient_express.ink\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Sequence alternative system in Ink\nDESCRIPTION: Demonstrates the Sequence alternative system where the alternatives are shown in order, and after the last one, it sticks on the last one.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_75\n\nLANGUAGE: ink\nCODE:\n```\n// Sequence: go through the alternatives, and stick on last\n\t{ stopping:\n\t\t- I entered the casino.\n\t\t- I entered the casino again.\n\t\t- Once more, I went inside.\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining a Knot in ink\nDESCRIPTION: This snippet defines a knot using two or more equals signs.  Knots are fundamental structural units of ink content.  The name needs to be a single word with no spaces.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_10\n\nLANGUAGE: ink\nCODE:\n```\n=== top_knot ===\n```\n\n----------------------------------------\n\nTITLE: Describe Pillar Function (Ink)\nDESCRIPTION: This Ink function describes a pillar (tower) in the Tower of Hanoi game based on the discs it contains. It uses LIST_COUNT to determine if the pillar is empty, contains one disc, or multiple discs, and then formats the output string accordingly.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_132\n\nLANGUAGE: ink\nCODE:\n```\n=== function describe_pillar(listNum) ==\n\t    ~ temp list = getListForTower(listNum)\n\t    {\n\t    - LIST_COUNT(list) == 0:\n\t        {Name(listNum)} is empty.\n\t    - LIST_COUNT(list) == 1:\n\t        The {list} ring lies on {name(listNum)}.\n\t    - else:\n\t        On {name(listNum)}, are the discs numbered {list}.\n\t    }\n```\n\n----------------------------------------\n\nTITLE: Labeling Options\nDESCRIPTION: This snippet shows how all options can be labeled and referenced, allowing you to test which option a player took to reach a particular outcome.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_53\n\nLANGUAGE: ink\nCODE:\n```\n\t=== fight_guard ===\n\t...\n\t= throw_something\n\t* \t(rock) [Throw rock at guard] -> throw\n\t* \t(sand) [Throw sand at guard] -> throw\n\n\t= throw\n\tYou hurl {throw_something.rock:a rock|a handful of sand} at the guard.\n```\n\n----------------------------------------\n\nTITLE: Labeling Gather Points\nDESCRIPTION: This snippet demonstrates how to label gather points within a weave using the `(label_name)` syntax. This allows the gather point to be diverted to or tested for in conditionals.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_50\n\nLANGUAGE: ink\nCODE:\n```\n\t-  (top)\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Once alternative system in Ink\nDESCRIPTION: Demonstrates the Once alternative system where each alternative is shown once, in turn, until all have been shown.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_78\n\nLANGUAGE: ink\nCODE:\n```\n// Once: show each, once, in turn, until all have been shown\n\t{ once:\n\t\t- Would my luck hold?\n\t\t- Could I win the hand?\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Return Value in Ink\nDESCRIPTION: Defines a simple function `say_yes_to_everything` that always returns `true`. This demonstrates the basic structure of a function definition with a return statement in ink.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_85\n\nLANGUAGE: ink\nCODE:\n```\n=== function say_yes_to_everything ===\n\t~ return true\n```\n\n----------------------------------------\n\nTITLE: Alternatives with Blank Elements Example (Ink)\nDESCRIPTION: This example demonstrates how to use blank elements within alternatives. This allows you to conditionally display content or to create pauses in a sequence.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_39\n\nLANGUAGE: ink\nCODE:\n```\n\tI took a step forward. {!||||Then the lights went out. -> eek}\n```\n\n----------------------------------------\n\nTITLE: List Initialization with Default Value\nDESCRIPTION: This Ink code demonstrates initializing a list with a default value enclosed in parentheses.  The `kettleState` is initialized, setting `boiling` as the default value.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_101\n\nLANGUAGE: ink\nCODE:\n```\nLIST kettleState = cold, (boiling), recently_boiled\n// at the start of the game, this kettle is switched on. Edgy, huh?\n```\n\n----------------------------------------\n\nTITLE: Read Count Example in Ink\nDESCRIPTION: This example demonstrates how to obtain the read count of a specific named knot or stitch in ink. It uses a variable reference to retrieve the count of a container at a given path.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ink_JSON_runtime_format.md#_snippet_1\n\nLANGUAGE: ink\nCODE:\n```\n* `{\"CNT?\": \"the_hall.light_switch\"}`\n```\n\n----------------------------------------\n\nTITLE: Subdividing Knots with Stitches (Ink)\nDESCRIPTION: This example illustrates how to subdivide knots into stitches in Ink. Stitches are marked with a single equals sign and provide a way to organize content within a knot.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_20\n\nLANGUAGE: Ink\nCODE:\n```\n=== the_orient_express ===\n= in_first_class\n\t\t...\n= in_third_class\n\t\t...\n= in_the_guards_van\n\t\t...\n= missed_the_train\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Gathers after Options\nDESCRIPTION: This snippet illustrates the use of a gather point directly after an option. This provides a handy place to divert other options.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_56\n\nLANGUAGE: ink\nCODE:\n```\n\t* \t\"Are you quite well, Monsieur?\"[] I asked.\n\t\t- - (quitewell) \"Quite well,\" he replied.\n\t* \t\"How did you do at the crossword, Monsieur?\"[] I asked.\n\t\t-> quitewell\n\t* \tI said nothing[] and neither did my Master.\n\t- \tWe fell into companionable silence once more.\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Modified Shuffle Once system in Ink\nDESCRIPTION: Demonstrates the Shuffle Once alternative system where content is shuffled, played through once, and then stops.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_79\n\nLANGUAGE: ink\nCODE:\n```\n{ shuffle once:\n\t- The sun was hot.\n\t- It was a hot day.\n\t}\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Shuffle alternative system in Ink\nDESCRIPTION: Demonstrates the Shuffle alternative system where one of the alternatives is shown at random.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_76\n\nLANGUAGE: ink\nCODE:\n```\n// Shuffle: show one at random\n\tAt the table, I drew a card. <>\n\t{ shuffle:\n\t\t- \tAce of Hearts.\n\t\t- \tKing of Spades.\n\t\t- \t2 of Diamonds.\n\t\t\t'You lose this time!' crowed the croupier.\n\t}\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Values\nDESCRIPTION: This Ink code demonstrates converting a number to a list value using the list's name as a function, passing the number as an argument.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_110\n\nLANGUAGE: ink\nCODE:\n```\nLIST Numbers = one, two, three\nVAR score = one\n~ score = Numbers(2) // score will be \"two\"\n```\n\n----------------------------------------\n\nTITLE: Top-Level JSON Structure\nDESCRIPTION: Defines the top-level structure of the Ink JSON file. It includes the inkVersion (an integer indicating the format version) and the root container, which encompasses the entire story.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ink_JSON_runtime_format.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"inkVersion\": 10,\n    \"root\": <root container>\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Ink Story State to JSON\nDESCRIPTION: This C# line shows how to save the current state of an Ink story to a JSON string using the `ToJson()` method of the story's state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstring savedJson = _inkStory.state.ToJson();\n```\n\n----------------------------------------\n\nTITLE: Loading Ink Story State from JSON\nDESCRIPTION: This C# line demonstrates how to load an Ink story's state from a JSON string using the `LoadJson()` method of the story's state.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/RunningYourInk.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n_inkStory.state.LoadJson(savedJson);\n```\n\n----------------------------------------\n\nTITLE: Define Item State Lists\nDESCRIPTION: Defines several lists to represent the possible states of items in the game. `OffOn` represents an on/off state, `SeenUnseen` represents whether something has been seen, `GlassState` describes the condition of the glass, `BedState` describes the condition of the bed.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_142\n\nLANGUAGE: ink\nCODE:\n```\nLIST OffOn = off, on\nLIST SeenUnseen = unseen, seen\n\nLIST GlassState = (none), steamed, steam_gone\nLIST BedState = (made_up), covers_shifted, covers_off, bloodstain_visible\n```\n\n----------------------------------------\n\nTITLE: Default Stitch Diversion (Ink)\nDESCRIPTION: This example explains that diverting to a knot without specifying a stitch will automatically divert to the first stitch within that knot. This provides a shorthand for diverting to the default entry point of a knot.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_22\n\nLANGUAGE: Ink\nCODE:\n```\n*\t[Travel in first class]\n\t\t\"First class, Monsieur. Where else?\"\n\t\t-> the_orient_express\n```\n\nLANGUAGE: Ink\nCODE:\n```\n*\t[Travel in first class]\n\t\t\"First class, Monsieur. Where else?\"\n\t\t-> the_orient_express.in_first_class\n```\n\n----------------------------------------\n\nTITLE: Writing Content Inside a Knot in ink\nDESCRIPTION: This snippet writes content inside a knot. The content that follows the knot header will be part of that knot.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_11\n\nLANGUAGE: ink\nCODE:\n```\n=== back_in_london ===\n\nWe arrived into London at 9.45pm exactly.\n```\n\n----------------------------------------\n\nTITLE: Ink Story Snippet\nDESCRIPTION: This is a snippet of ink code demonstrating a simple conversation with branching choices.  It shows the basic syntax for dialogue, choices, and conditional logic in ink. It serves as an example of how interactive narratives are structured using the ink language.\nSOURCE: https://github.com/inkle/ink/blob/master/README.md#_snippet_0\n\nLANGUAGE: ink\nCODE:\n```\n- I looked at Monsieur Fogg \n*   ... and I could contain myself no longer.\n    'What is the purpose of our journey, Monsieur?'\n    'A wager,' he replied.\n    * *     'A wager!'[] I returned.\n            He nodded. \n            * * *   'But surely that is foolishness!'\n            * * *  'A most serious matter then!'\n            - - -   He nodded again.\n            * * *   'But can we win?'\n                    'That is what we will endeavour to find out,' he answered.\n            * * *   'A modest wager, I trust?'\n                    'Twenty thousand pounds,' he replied, quite flatly.\n            * * *   I asked nothing further of him then[.], and after a final, polite cough, he offered nothing more to me. <>\n    * *     'Ah[.'],' I replied, uncertain what I thought.\n    - -     After that, <>\n*   ... but I said nothing[] and <>\n- we passed the day in silence.\n- -> END\n```\n\n----------------------------------------\n\nTITLE: Murder Scene Story Start\nDESCRIPTION: Starts the story at the murder scene. This initializes the player's investigation within the defined environment.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_140\n\nLANGUAGE: ink\nCODE:\n```\n-> murder_scene\n```\n\n----------------------------------------\n\nTITLE: Alternatives: Shuffle Example (Ink)\nDESCRIPTION: This example shows shuffled alternatives. Shuffles pick a random element from the list each time the content is visited, providing randomized output.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_38\n\nLANGUAGE: ink\nCODE:\n```\n\tI tossed the coin. {~Heads|Tails}.\n```\n\n----------------------------------------\n\nTITLE: Defining Numerical List Values\nDESCRIPTION: This shows how to define custom numerical values for list entries.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_111\n\nLANGUAGE: ink\nCODE:\n```\nLIST primeNumbers = two = 2, three = 3, five = 5\n```\n\nLANGUAGE: ink\nCODE:\n```\nLIST primeNumbers = two = 2, three, five = 5\n```\n\n----------------------------------------\n\nTITLE: List value Printing\nDESCRIPTION: This demonstrates how to print the string representation of a list value.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_108\n\nLANGUAGE: ink\nCODE:\n```\nThe lecturer's voice becomes {lecturersVolume}.\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Content in ink\nDESCRIPTION: This snippet demonstrates the simplest form of an ink script, which is just plain text.  When the script is run, the text will be output to the user.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_0\n\nLANGUAGE: ink\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Multiline Blocks: Cycle alternative system in Ink\nDESCRIPTION: Demonstrates the Cycle alternative system where each alternative is shown in turn, and then the cycle repeats.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_77\n\nLANGUAGE: ink\nCODE:\n```\n// Cycle: show each in turn, and then cycle\n\t{ cycle:\n\t\t- I held my breath.\n\t\t- I waited impatiently.\n\t\t- I paused.\n\t}\n```\n\n----------------------------------------\n\nTITLE: ChoicePoint JSON Structure\nDESCRIPTION: This JSON snippet illustrates the structure of a ChoicePoint object in an ink file. It showcases the path when chosen (`*`) and the flags (`flg`) which determine the behavior of the choice.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ink_JSON_runtime_format.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"*\": \"path.when.chosen\",\n    \"flg\": 18\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateRuntimeObject Method in Ink C#\nDESCRIPTION: Describes the `GenerateRuntimeObject` method, which is responsible for converting parsed objects into runtime objects.  Each `Parsed.Object` implements this method, which produces one or more `Runtime.Object` instances. This conversion is a core part of runtime code generation.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override Runtime.Object GenerateRuntimeObject () {...}\n```\n\n----------------------------------------\n\nTITLE: Inverting a List (Ink)\nDESCRIPTION: This Ink function demonstrates how to invert a list, effectively flipping the state of each element in the list. If the list is empty, it initializes the list to a default value.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_134\n\nLANGUAGE: ink\nCODE:\n```\n\tLIST GuardsOnDuty = (Smith), (Jones), Carter, Braithwaite\n\n\t=== function changingOfTheGuard\n\t\t~ GuardsOnDuty = LIST_INVERT(GuardsOnDuty)\n```\n\nLANGUAGE: ink\nCODE:\n```\n\t=== function changingOfTheGuard\n\t\t{!GuardsOnDuty: // \"is GuardsOnDuty empty right now?\"\n\t\t\t~ GuardsOnDuty = LIST_ALL(Smith)\n\t\t- else:\n\t\t\t~ GuardsOnDuty = LIST_INVERT(GuardsOnDuty)\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Interleave Method in StringParser C#\nDESCRIPTION: Illustrates the use of the `Interleave` method to parse patterns of the form ABABA, often used to interleave content with whitespace or separators. This example parses arguments to a flow (knot, stitch, function) as identifiers separated by commas.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar flowArguments = Interleave<FlowBase.Argument>(\n    Spaced(FlowDeclArgument),\n    Exclude (String(\",\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Building Ink Project (Command Line)\nDESCRIPTION: These commands demonstrate how to build the ink project from the command line using the .NET SDK. The first command changes the directory to the project you want to build. The second command builds the project in Release configuration. The third command runs the console app in Release configuration. The fourth command publishes the project as a self-contained executable for the specified runtime identifier (RID).\nSOURCE: https://github.com/inkle/ink/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd inklecate\ndotnet build -c Release\ndotnet run -c Release\ndotnet publish -r win-x64 -c Release --self-contained\n```\n\n----------------------------------------\n\nTITLE: OneOrMore Rule in StringParser C#\nDESCRIPTION: Shows how the `OneOrMore` method in `StringParser` can be used to parse one or more occurrences of a specific rule, similar to the `+` operator in regular expressions. This allows complex parsing rules to be built from simpler ones.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/ArchitectureAndDevOverview.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic List<object> OneOrMore(ParseRule rule)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nList<object> multipleConditions = OneOrMore (SingleMultilineCondition)\n```\n\n----------------------------------------\n\nTITLE: Basic List Queries\nDESCRIPTION: This snippet shows how to use `LIST_COUNT`, `LIST_MIN`, `LIST_MAX`, and `LIST_RANDOM` to get information about an ink list. These functions provide information about the current state of the list, not the full possible set of values.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_115\n\nLANGUAGE: ink\nCODE:\n```\nLIST DoctorsInSurgery = (Adams), Bernard, (Cartwright), Denver, Eamonn\n\n{LIST_COUNT(DoctorsInSurgery)} \t//  \"2\"\n{LIST_MIN(DoctorsInSurgery)} \t\t//  \"Adams\"\n{LIST_MAX(DoctorsInSurgery)} \t\t//  \"Cartwright\"\n{LIST_RANDOM(DoctorsInSurgery)} \t//  \"Adams\" or \"Cartwright\"\n```\n\n----------------------------------------\n\nTITLE: Tower Name Functions (Ink)\nDESCRIPTION: These Ink functions return the name of a tower based on its number, using helper functions to determine the name format.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_131\n\nLANGUAGE: ink\nCODE:\n```\n=== function name(postNum)\n\t    the {postToPlace(postNum)} temple\n\n\t=== function Name(postNum)\n\t    The {postToPlace(postNum)} temple\n\n\t=== function postToPlace(postNum)\n\t    { postNum:\n\t        - 1: first\n\t        - 2: second\n\t        - 3: third\n\t    }\n```\n\n----------------------------------------\n\nTITLE: Mathematics: POW function in Ink\nDESCRIPTION: Demonstrates the use of the POW function in ink to calculate exponents. The example shows how to calculate 3 to the power of 2 and 16 to the power of 0.5.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_64\n\nLANGUAGE: ink\nCODE:\n```\n{POW(3, 2)} is 9.\n{POW(16, 0.5)} is 4.\n```\n\n----------------------------------------\n\nTITLE: Commenting Code in ink\nDESCRIPTION: This snippet illustrates the use of single-line (`//`) and multi-line (`/* ... */`) comments within ink scripts. Comments are ignored by the compiler and are used to annotate the code for readability.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_2\n\nLANGUAGE: ink\nCODE:\n```\n\"What do you make of this?\" she asked.\n\n// Something unprintable...\n\n\"I couldn't possibly comment,\" I replied.\n\n/*\n\t\t... or an unlimited block of text\n\t*/\n```\n\n----------------------------------------\n\nTITLE: Command-line Inklecate Usage (Windows)\nDESCRIPTION: This command executes the inklecate command-line compiler in play mode on Windows. It requires the inklecate.exe executable to be in the current directory and the `myStory.ink` file to exist. The `-p` flag enables play mode.\nSOURCE: https://github.com/inkle/ink/blob/master/README.md#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\ninklecate.exe -p myStory.ink\n```\n\n----------------------------------------\n\nTITLE: Alternatives: Cycle Example (Ink)\nDESCRIPTION: This example demonstrates a cycle of alternative texts. Cycles are similar to sequences, but they loop back to the beginning of the content after reaching the end, providing continuous variations.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_36\n\nLANGUAGE: ink\nCODE:\n```\n\tIt was {&Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday} today.\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs with Newlines in ink\nDESCRIPTION: This snippet shows how to create multiple paragraphs by placing text on separate lines. The output will display each line as a new paragraph.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_1\n\nLANGUAGE: ink\nCODE:\n```\nHello, world!\nHello?\nHello, are you there?\n```\n\n----------------------------------------\n\nTITLE: Ending the Story Flow in ink\nDESCRIPTION: This snippet shows how to end the story flow using `-> END`. This tells the compiler that the story flow should now stop, resolving any loose end warnings.\nSOURCE: https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md#_snippet_13\n\nLANGUAGE: ink\nCODE:\n```\n=== top_knot ===\nHello world!\n-> END\n```"
  }
]