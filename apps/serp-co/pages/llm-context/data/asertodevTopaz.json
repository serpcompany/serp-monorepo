[
  {
    "owner": "aserto-dev",
    "repo": "topaz",
    "content": "TITLE: Topaz CLI Usage\nDESCRIPTION: Displays the usage information for the Topaz command-line interface (CLI). It shows the available commands and flags that can be used with the `topaz` command.  This includes information on running, starting, stopping, and managing the Topaz service.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntopaz --help\nUsage: topaz <command> [flags]\n\nTopaz CLI\n\nCommands:\n  run                run topaz in console mode\n  start              start topaz in daemon mode\n  stop               stop topaz instance\n  restart            restart topaz instance\n  status             status of topaz daemon process\n  manifest           manifest commands\n  templates          template commands\n  console            open console in the browser\n  directory (ds)     directory commands\n  authorizer (az)    authorizer commands\n  config             configure topaz service\n  certs              cert commands\n  install            install topaz container\n  uninstall          uninstall topaz container\n  update             update topaz container version\n  version            version information\n\nFlags:\n  -h, --help        Show context-sensitive help.\n  -N, --no-check    disable local container status check ($TOPAZ_NO_CHECK)\n  -L, --log         log level\n\nRun \"topaz <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Performing Authorization Check via Topaz REST API using cURL\nDESCRIPTION: Uses `curl` to send an HTTPS POST request to the Topaz authorization endpoint (`/api/v2/authz/is`) on `localhost:8383`. The request checks if the specified identity (`rick@the-citadel.com`) is allowed ('allowed' decision) to perform an action represented by the policy path (`todoApp.GET.todos`). The request body is JSON containing the identity and policy context. Requires a running Topaz instance configured with the relevant policy and data.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -k -X POST 'https://localhost:8383/api/v2/authz/is' \\\n-H 'Content-Type: application/json' \\\n-d '{\n     \"identity_context\": {\n          \"type\": \"IDENTITY_TYPE_SUB\",\n          \"identity\": \"rick@the-citadel.com\"\n     },\n     \"policy_context\": {\n          \"path\": \"todoApp.GET.todos\",\n          \"decisions\": [\"allowed\"]\n     }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth with API Key Authentication in Topaz\nDESCRIPTION: Example configuration for Topaz authentication settings. This snippet shows how to enable API key authentication with a specific key and configure path overrides to allow anonymous access to specific endpoints.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/config.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  keys:\n    - dc8a1524dec311eda1ff8bd042196110\n  options:\n    default:\n      enable_api_key: true\n      enable_anonymous: false\n    overrides:\n      paths:\n        - /aserto.authorizer.v2.Authorizer/Info\n      override:\n        enable_anonymous: true\n        enable_api_key: false\n```\n\n----------------------------------------\n\nTITLE: Running Topaz Container with Docker\nDESCRIPTION: Runs the latest Topaz container image from ghcr.io using Docker in interactive mode (`-it`) and removes the container after exit (`--rm`). The `--help` argument is passed to the Topaz entrypoint, causing it to display its command-line help. Requires Docker to be installed and running.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm ghcr.io/aserto-dev/topaz:latest --help\n```\n\n----------------------------------------\n\nTITLE: Installing Topaz using Go Install\nDESCRIPTION: Installs the Topaz command-line tool using the `go install` command. This fetches the source code for the command and compiles/installs the binary into the Go bin path. Requires a working Go development environment (version specified in the project, currently 1.22+) to be set up.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/aserto-dev/topaz/cmd/topaz@latest\n```\n\n----------------------------------------\n\nTITLE: Interact with Authorizer gRPC Endpoint\nDESCRIPTION: Instructions for interacting with the Topaz authorizer gRPC endpoint using grpcui.  It requires installing grpcui and pointing it to `localhost:8282`. The command uses the `--insecure` flag to disable SSL/TLS.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngrpcui --insecure localhost:8282\n```\n\n----------------------------------------\n\nTITLE: Interact with Directory gRPC Endpoint\nDESCRIPTION: Instructions for interacting with the Topaz directory gRPC endpoint using grpcui. It requires installing grpcui and pointing it to `localhost:9292`.  The command uses the `--insecure` flag to disable SSL/TLS.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngrpcui --insecure localhost:9292\n```\n\n----------------------------------------\n\nTITLE: Installing Topaz via Homebrew (macOS/Linux)\nDESCRIPTION: Installs the Topaz CLI using the Homebrew package manager. This command first adds the Aserto tap (a repository source) and then installs the 'topaz' formula from it. Requires Homebrew (macOS) or LinuxBrew (Linux) to be installed.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap aserto-dev/tap && brew install aserto-dev/tap/topaz\n```\n\n----------------------------------------\n\nTITLE: Installing the 'todo' Template using Topaz CLI\nDESCRIPTION: Uses the Topaz CLI to download and install a pre-defined template named 'todo'. This typically involves setting up configuration, importing a domain model manifest, loading sample directory data (objects/relations), and potentially starting Topaz with this configuration. Requires the Topaz CLI.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntopaz templates install todo\n```\n\n----------------------------------------\n\nTITLE: Using the Topaz Config Edit Command (Shell)\nDESCRIPTION: Demonstrates the `topaz config edit` command, which allows viewing and updating Topaz configuration files directly in a text editor. It can edit the currently active configuration, a specifically named configuration file, or the default Topaz CLI configuration (topaz.json).\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntopaz config edit [ config name | `defaults` ]\ntopaz config edit\ntopaz config <config-name>\ntopaz config defaults\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Prompt Mode in Topaz CLI\nDESCRIPTION: Example of enabling the prompt mode feature by setting the TOPAZ_FFLAG environment variable to 2 and then running a topaz directory check command. This will open an interactive TUI for constructing the request.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-prompt-mode.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TOPAZ_FFLAG=2\ntopaz directory check --insecure\n```\n\n----------------------------------------\n\nTITLE: Installing Topaz Authorizer Docker Image via CLI\nDESCRIPTION: Uses the Topaz CLI command `topaz install` to download and potentially configure the official Topaz authorizer Docker image. Requires the Topaz CLI to be installed first and Docker daemon to be running and accessible.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntopaz install\n```\n\n----------------------------------------\n\nTITLE: Configuring the Editor for Topaz Edit Mode (Shell)\nDESCRIPTION: Provides examples of how to set the `TOPAZ_EDITOR` environment variable to specify the desired text editor (e.g., nvim, VS Code, micro) to be used when invoking Topaz commands with the `--edit` flag. If `TOPAZ_EDITOR` is not set, the value of the `EDITOR` environment variable is used.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport TOPAZ_EDITOR=nvim\nexport TOPAZ_EDITOR='code --watch'\nexport TOPAZ_EDITOR=micro\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Topaz Feature Flags Environment Variable\nDESCRIPTION: This snippet describes how the TOPAZ_FFLAG environment variable is used to enable or disable specific features in Topaz by setting it to different integer values. It explains the use of bitmask values for toggling features and illustrates the process of setting these flags in a terminal session and passing them inline during command execution.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-fflag.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport TOPAZ_FFLAG=3\n\n```\n\nLANGUAGE: shell\nCODE:\n```\nTOPAZ_FFLAG=1 topaz directory get object --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Decision Logger in Topaz\nDESCRIPTION: Configuration for the Topaz decision logger which records authorization decisions. This example shows a file-based logger using lumberjack with settings for log file path, maximum file size, and rotation count.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/config.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndecision_logger:\n  type: \"file\"\n  config:\n    log_file_path: /tmp/mytopaz.log\n    max_file_size_mb: 50\n    max_file_count: 2\n```\n\n----------------------------------------\n\nTITLE: Building Topaz from Source using Make\nDESCRIPTION: Compiles the Topaz executable from the cloned source code repository using the `make build` command and then immediately executes the built binary. Requires Make and a Go development environment (v1.22+). The output binary path may vary based on the build environment.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake build && ./dist/build_linux_amd64/topaz\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller for Edge Topaz Authorizer\nDESCRIPTION: Configuration for connecting an edge Topaz authorizer to the Aserto Control Plane using mTLS. This enables policy and directory synchronization with an upstream instance.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/config.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  enabled: true\n  server:\n    address: relay.prod.aserto.com:8443\n    client_cert_path: <path to client certificate>\n    client_key_path: <path to client key>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Feature Flags Using Bitmask Values\nDESCRIPTION: This snippet shows how to combine multiple feature flags by performing a bitwise OR operation on their integer values, enabling several features simultaneously. It clarifies that flags like 1 activate the editor options and 2 activate the input prompter, and combining them with OR results in a combined flag value, such as 3.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-fflag.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Topaz Directory Commands Supporting Edit Mode (Shell)\nDESCRIPTION: Lists the `topaz directory` subcommands that support the `--edit` or `-e` flag for interactive payload construction using a text editor. This feature requires Topaz v0.32.6+ and the `TOPAZ_FFLAG=1` environment variable to be set.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n* `topaz directory get object [--edit | e]`\n* `topaz directory set object [--edit | e]`\n* `topaz directory delete object [--edit | e]`\n* `topaz directory list objects [--edit | e]`\n* `topaz directory get relation [--edit | e]`\n* `topaz directory set relation [--edit | e]`\n* `topaz directory delete relation [--edit | e]`\n* `topaz directory list relations [--edit | e]`\n* `topaz directory check [--edit | e]`\n* `topaz directory search [--edit | e]`\n```\n\n----------------------------------------\n\nTITLE: Topaz Authorizer Commands Supporting Edit Mode (Shell)\nDESCRIPTION: Lists the `topaz authorizer` subcommands that support the `--edit` or `-e` flag for interactive payload construction using a text editor. This feature requires Topaz v0.32.6+ and the `TOPAZ_FFLAG=1` environment variable to be set.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n* `topaz authorizer eval [--edit | e]`\n* `topaz authorizer query [--edit | e]`\n* `topaz authorizer decisiontree [--edit | e]`\n* `topaz authorizer get-policy [--edit | e]`\n* `topaz authorizer list-policies [--edit | e]`\n```\n\n----------------------------------------\n\nTITLE: Viewing Topaz Configuration Directory Structure\nDESCRIPTION: Displays the directory structure within the Topaz configuration directory (`$HOME/.config/topaz` or equivalent) using the `tree` command. This is useful for inspecting the files (like `todo.yaml`, manifest, data files) created after installing a template like 'todo'. Requires the `tree` utility to be installed.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntree $HOME/.config/topaz\n```\n\n----------------------------------------\n\nTITLE: Viewing Topaz Local Data Directory Structure\nDESCRIPTION: Displays the directory structure within the Topaz local data directory (`~/.local/share/topaz` or equivalent) using the `tree` command. This shows where generated certificates, embedded database files (`.db`), and template artifacts are stored. Requires the `tree` utility.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntree ~/.local/share/topaz\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA with Decision Log Plugin in Topaz\nDESCRIPTION: Example OPA configuration that enables the decision log plugin. This configuration specifies the policy information including registry service, image, and digest for the plugin to record decisions.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/config.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopa:\n instance_id: \"-\"\n graceful_shutdown_period_seconds: 2\n local_bundles:\n   paths: []\n   skip_verification: true\n config:\n   plugins:\n     aserto_decision_log:\n       enabled: true\n       policy_info:\n         registry_service: 'ghcr.io'\n         registry_image: 'aserto-policies/policy-peoplefinder-rbac'\n         digest: 'b36c9fac3c4f3a20e524ef4eca4ac3170e30281fe003b80a499591043299c898'\n```\n\n----------------------------------------\n\nTITLE: Executing Topaz Directory Command with Inline JSON (Shell)\nDESCRIPTION: Demonstrates a standard Topaz CLI command (`directory get object`) that accepts an inline JSON string as its payload. This is the method used *before* enabling edit mode.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntopaz directory get object '{\"object_type\":\"user\", \"object_id\":\"euang@acmecorp.com\"}' --insecure\n```\n\n----------------------------------------\n\nTITLE: Querying Loaded Policies via Topaz REST API using cURL\nDESCRIPTION: Uses the `curl` command to make an HTTPS GET request to the Topaz REST API endpoint (`/api/v2/policies`) hosted on `localhost:8383`. This retrieves the list of policies currently loaded by the running Topaz instance. The `-k` flag is used to bypass SSL certificate verification, necessary when using default self-signed certificates.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -k https://localhost:8383/api/v2/policies\n```\n\n----------------------------------------\n\nTITLE: Using Inline JSON Request with Topaz CLI\nDESCRIPTION: Example of using the traditional inline JSON request method with the topaz directory command to get an object. This is the original approach before prompt mode was introduced.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-prompt-mode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntopaz directory get object '{\"object_type\":\"user\", \"object_id\":\"euang@acmecorp.com\"}' --insecure\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Topaz Edit Mode (Shell)\nDESCRIPTION: Shows how to enable the Topaz edit mode by setting the `TOPAZ_FFLAG` environment variable to `1`. It then demonstrates invoking a command (`topaz directory check`) with the `--edit` flag, which will open the configured text editor to construct the request payload. Requires Topaz v0.32.6 or higher.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TOPAZ_FFLAG=1\ntopaz directory check --edit --insecure\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Topaz Command\nDESCRIPTION: Illustrates a typical JSON response structure received after executing a Topaz command, such as `topaz directory check`, showing a successful check result.\nSOURCE: https://github.com/aserto-dev/topaz/blob/main/docs/fflag/topaz-edit-mode.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"check\":  true,\n  \"trace\":  []\n}\n```"
  }
]