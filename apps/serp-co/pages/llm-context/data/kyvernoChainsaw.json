[
  {
    "owner": "kyverno",
    "repo": "chainsaw",
    "content": "TITLE: Using Namespace Binding in Chainsaw Template\nDESCRIPTION: This example demonstrates how to use the $namespace binding in a Chainsaw test to dynamically set the ConfigMap name and data values. The $namespace binding injects the ephemeral namespace name into multiple fields of the resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/templating.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - assert:\n      resource:\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: ($namespace)\n        data:\n          foo: ($namespace)\n```\n\n----------------------------------------\n\nTITLE: Assert Operation with Inline Resource\nDESCRIPTION: Example of using assert operation with an inline resource definition including custom assertions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/assert.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: Deployment\n          metadata:\n            name: foo\n          spec:\n            (replicas > 3): true\n```\n\n----------------------------------------\n\nTITLE: Using Catch Block to Collect Events on Failure in Chainsaw Test\nDESCRIPTION: Example of a Chainsaw test that uses a catch block to collect cluster events when operations in the try block fail. This pattern helps with failure diagnostics by automatically gathering relevant information when tests fail.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/try-catch.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # ...\n    - assert:\n        # ...\n    # collect events in the `catch` block\n    # will be executed only if an operation failed\n    catch:\n    - events: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Continue on Error in Chainsaw Tests\nDESCRIPTION: Demonstrates how to use the continueOnError field in a Chainsaw test to continue execution even if an operation fails. The example shows applying a ConfigMap while allowing the test to continue if the operation fails.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n      # in case of error the test will be marked as failed\n      # but the step will not stop execution and will\n      # continue executing the following operations\n    - continueOnError: true\n      apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Visualizing Chainsaw Inheritance Flow with Mermaid\nDESCRIPTION: Flowchart showing the inheritance hierarchy between Configuration, Test, Step, and Operation levels in Chainsaw. Demonstrates how configuration elements are passed down through each layer.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/inheritance.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Configuration -. Configuration elements are inherited in tests .-> Test\n    Test -. Test elements are inherited in test steps .-> Step\n    Step -. Step elements are inherited in step operations .-> Operation\n```\n\n----------------------------------------\n\nTITLE: Example Kyverno Test Flow in Markdown\nDESCRIPTION: Illustrates a typical test sequence for Kyverno using ordered list format, showing the standard steps for testing Kyverno policies in Kubernetes.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create a policy\n1. Create a resource\n1. Check that Kyverno acted as expected\n1. Cleanup and move to the next test\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw Tests with Default Configuration\nDESCRIPTION: Example output of running the 'chainsaw test' command with default configuration. The output shows test loading, execution, and results for a quick-start test, including resource creation, assertion, and cleanup steps.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/run-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> chainsaw test\n\nVersion: (devel)\nLoading default configuration...\n- Using test file: chainsaw-test.yaml\n- TestDirs [.]\n- SkipDelete false\n- FailFast false\n- ReportFormat ''\n- ReportName ''\n- Namespace ''\n- FullName false\n- IncludeTestRegex ''\n- ExcludeTestRegex ''\n- ApplyTimeout 5s\n- AssertTimeout 30s\n- CleanupTimeout 30s\n- DeleteTimeout 15s\n- ErrorTimeout 30s\n- ExecTimeout 5s\nLoading tests...\n- quick-start (.)\nRunning tests...\n=== RUN   chainsaw\n=== PAUSE chainsaw\n=== CONT  chainsaw\n=== RUN   chainsaw/quick-start\n=== PAUSE chainsaw/quick-start\n=== CONT  chainsaw/quick-start\n    | 10:44:26 | quick-start | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:26 | quick-start | step-1   | TRY       | RUN   |\n    | 10:44:26 | quick-start | step-1   | APPLY     | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | CREATE    | OK    | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | APPLY     | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | ASSERT    | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | ASSERT    | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | TRY       | DONE  |\n    | 10:44:26 | quick-start | @cleanup | DELETE    | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | OK    | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:26 | quick-start | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:31 | quick-start | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-immense-jay\n--- PASS: chainsaw (0.00s)\n    --- PASS: chainsaw/quick-start (5.25s)\nPASS\nTests Summary...\n- Passed  tests 1\n- Failed  tests 0\n- Skipped tests 0\nDone.\n```\n\n----------------------------------------\n\nTITLE: Basic Output Usage in Chainsaw Test\nDESCRIPTION: Demonstrates basic output usage in a Chainsaw test. Shows how to register outputs from script operations and reuse them in subsequent operations through bindings and environment variables.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        outputs:\n        - name: OUTPUT\n          value: ($stdout)\n        content: echo $GREETINGS\n    - script:\n        env:\n        - name: INPUT\n          value: ($OUTPUT)\n        content: echo $INPUT\n```\n\n----------------------------------------\n\nTITLE: Applying Resources from URL in Chainsaw\nDESCRIPTION: Example showing how to apply a Kubernetes resource from a remote URL using Chainsaw's Apply operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/apply.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/step/configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Kubernetes Resources in Chainsaw\nDESCRIPTION: Example demonstrating how to create a Kubernetes resource defined inline within the Chainsaw test definition. This approach allows defining resources directly in the test specification without requiring external files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/create.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Kubernetes Resources using Glob Patterns in Chainsaw\nDESCRIPTION: Example showing how to create multiple Kubernetes resources using glob patterns to match multiple files. This allows for batch creation of resources defined in multiple YAML files within a directory.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/create.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Test with Command-Line Flags\nDESCRIPTION: This example demonstrates how to invoke the `chainsaw test` command with various command-line flags. These flags override corresponding settings found in any specified configuration file, providing a way to customize test execution at runtime. The example shows how to set timeout, skip delete, fail fast, and parallel execution options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/flags.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test                         \\\n  path/to/test/dir                    \\\n  --config path/to/your/config.yaml   \\\n  --assert-timeout 45s                \\\n  --skip-delete false                 \\\n  --fail-fast true                    \\\n  --parallel 4                        \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Chainsaw Test Definition in YAML\nDESCRIPTION: Command to create a Chainsaw test definition file that applies and verifies a ConfigMap. The test consists of two operations: applying the ConfigMap and then asserting its existence with expected data.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/first-test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create test file\ncat > chainsaw-test.yaml << EOF\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: quick-start\nspec:\n  steps:\n  - try:\n    # first operation: create the config map\n    - apply:\n        # file is relative to the test folder\n        file: configmap.yaml\n    # second operation: verify the config map exists and contains the expected data\n    - assert:\n        # file is relative to the test folder\n        file: configmap.yaml\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap Manifest in YAML\nDESCRIPTION: Command to create a simple ConfigMap YAML file with a key-value pair. This manifest will be used in the test to create and verify a ConfigMap resource in Kubernetes.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/first-test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create a ConfigMap\ncat > configmap.yaml << EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\nEOF\n```\n\n----------------------------------------\n\nTITLE: Matching and Binding Resources in Chainsaw\nDESCRIPTION: Example showing how to apply resources from a file and conditionally bind a ConfigMap resource to an output variable. Demonstrates using match criteria for resource selection and accessing bound resource properties.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/operation-outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: ./resources.yaml\n        outputs:\n          # match the configmap resource and bind it to `$cm`\n        - match:\n            apiVersion: v1\n            kind: ConfigMap\n          name: cm\n          value: (@)\n    - script:\n        env:\n        - name: UID\n          value: ($cm.metadata.uid)\n        content: echo $UID\n```\n\n----------------------------------------\n\nTITLE: Defining Test Step Structure in YAML for Chainsaw Tests\nDESCRIPTION: This snippet shows the YAML structure for defining a test step in Chainsaw, including the required 'try' statement and optional 'catch', 'finally', and 'cleanup' statements that determine the actions Chainsaw will perform during test execution.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/step/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # `try` defines operations to execute in the step\n  - try: [...]\n    # `catch` defines operations to execute when the step fails\n    catch: [...]\n    # `finally` defines operations to execute at the end of the step\n    finally: [...]\n    # `cleanup` defines operations to execute at the end of the test\n    cleanup: [...]\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Output with Chainsaw\nDESCRIPTION: A Chainsaw test that verifies the exact content and formatting of kubectl version command output, including whitespace and line breaks.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl version\n        check:\n          # This check ensures the contents of stdout are exactly as shown.\n          # Any deviations will cause a failure.\n          ($stdout): |-\n            Client Version: v1.28.2\n            Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\n            Server Version: v1.27.4+k3s1\n```\n\n----------------------------------------\n\nTITLE: Basic Script Execution in Chainsaw Test\nDESCRIPTION: Demonstrates how to execute a simple script in a Chainsaw test step. The example shows a basic test configuration that outputs 'hello chainsaw'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/script.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          echo \"hello chainsaw\"\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw Without Cluster Using Flags - Bash\nDESCRIPTION: This code snippet demonstrates how to execute Chainsaw without connecting to a Kubernetes cluster using command-line flags. Running Chainsaw in this mode prevents creating ephemeral namespaces and may result in failures for operations that require a cluster. The command uses the \"--no-cluster\" flag to initiate this configuration.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/no-cluster.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --no-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Resources in Chainsaw Test YAML\nDESCRIPTION: This snippet demonstrates how to define resources inline within a Chainsaw test using the 'resource' field. The example shows a complete test that applies a ConfigMap and then asserts its existence with the same properties.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/inline.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Assertion in Chainsaw\nDESCRIPTION: Demonstrates a basic assertion checking for specific replica count in a CoreDNS deployment in the kube-system namespace.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/assertion-trees.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            name: coredns\n            namespace: kube-system\n          spec:\n            replicas: 2\n```\n\n----------------------------------------\n\nTITLE: Applying and Validating a Custom Resource Definition in Kubernetes YAML\nDESCRIPTION: This YAML snippet applies a Custom Resource Definition (CRD) as part of a test step in Kubernetes and verifies its accepted names and stored versions. It ensures that the CRD is properly acknowledged by the Kubernetes API before further use. The expected input is a valid CRD definition, and the output is confirmation of its status including accepted names and versions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/crds.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: apiextensions.k8s.io/v1\n          kind: CustomResourceDefinition\n          metadata:\n            name: issues.example.com\n          spec:\n            group: example.com\n            names:\n              kind: Issue\n              listKind: IssueList\n              plural: issues\n              singular: issue\n            scope: Namespaced\n            versions: ...\n    - assert:\n        resource:\n          apiVersion: apiextensions.k8s.io/v1\n          kind: CustomResourceDefinition\n          metadata:\n            name: issues.example.com\n          status:\n            acceptedNames:\n              kind: Issue\n              listKind: IssueList\n              plural: issues\n              singular: issue\n            storedVersions:\n            - v1alpha1\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Bindings at Different Levels in Chainsaw YAML Test\nDESCRIPTION: This example demonstrates how to declare bindings at test, step, and operation levels in a Chainsaw test. It shows how to combine bindings using the join function and assign the result to an environment variable.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # bindings can be declared at the test level\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n    # bindings can also be declared at the step level\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        # bindings can also be declared at the operation level\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n          # combined bindings together using the `join` functions and\n          # assign the result to the GREETINGS environment variable\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        content: echo $GREETINGS\n```\n\n----------------------------------------\n\nTITLE: Basic Command Execution in Chainsaw\nDESCRIPTION: Demonstrates a basic command execution in a Chainsaw test step using the echo command. Shows how to configure the command operation with entrypoint and arguments.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/command.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - command:\n        entrypoint: echo\n        args:\n        - hello chainsaw\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw GitHub Action\nDESCRIPTION: This snippet showcases how to use the Chainsaw GitHub Action within a GitHub workflow. It defines a job that runs on Ubuntu, installs Chainsaw using the action, and then verifies the installation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/cicd/gh-action.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nuses: kyverno/action-install-chainsaw@v0.1.0\nwith:\n  release: v0.1.0 # optional\n```\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Binding in Chainsaw Resource Templates\nDESCRIPTION: This example demonstrates how to inject the ephemeral namespace name into multiple fields of a ConfigMap using the $namespace binding. The binding is used in both the metadata.name and data.foo fields.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/resource-templating.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: ($namespace)\n          data:\n            foo: ($namespace)\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Kubernetes Cluster with Kind\nDESCRIPTION: Command to create a local Kubernetes cluster using kind with Kubernetes version 1.29.4. This step is necessary before running Chainsaw tests as Chainsaw requires an existing cluster.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/run-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create cluster\nkind create cluster --image \"kindest/node:v1.29.4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Resource in Chainsaw using YAML\nDESCRIPTION: Example of a Test resource definition in Chainsaw that demonstrates timeout configuration, parallel execution control, and multiple test steps including applying resources, assertions, error checking, and script execution. The test references external files for reusability and includes custom timeout settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/explicit.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # state that this test should not be executed in parallel with other tests\n  concurrent: false\n  # timeouts for this specific test\n  timeouts:\n    apply: 10s\n    assert: 10s\n    error: 10s\n  steps:\n  # step 1\n  # apply a configmap to the cluster\n  # the path to the configmap is relative to the folder\n  # containing the test, hence allow reusing manifests\n  # across multiple tests\n  - try:\n    - apply:\n        file: ../resources/configmap.yaml\n  # step 2\n  # execute assert statements against existing resources\n  # in the cluster\n  - try:\n    - assert:\n        file: ../resources/configmap-assert.yaml\n  # step 3\n  # execute error statements against existing resources\n  # in the cluster\n  - try:\n    - error:\n        file: ../resources/configmap-error.yaml\n  # step 4\n  # execute an arbitrary shell script\n  - try:\n    - script:\n        content: echo \"goodbye\"\n```\n\n----------------------------------------\n\nTITLE: Loading Resource with kubectl Output Binding in Chainsaw\nDESCRIPTION: Example demonstrating how to load a ConfigMap using kubectl, parse its JSON output, and bind it to a variable for subsequent assertions. Shows how to combine script operations with resource assertions using bindings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/operation-outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: kubectl get cm quick-start -n $NAMESPACE -o json\n        outputs:\n          # parse stdout json output and bind the result to `$cm`\n        - name: cm\n          value: (json_parse($stdout))\n    - assert:\n        resource:\n          ($cm):\n            metadata:\n              (uid != null): true\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Resources in Chainsaw\nDESCRIPTION: Example demonstrating how to apply a Kubernetes resource defined inline within the test configuration.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/apply.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Adding Kyverno Chainsaw Homebrew Tap\nDESCRIPTION: Command to add the Kyverno Chainsaw Homebrew tap repository for macOS installation. This is the first step before installing Chainsaw via Homebrew.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap kyverno/chainsaw https://github.com/kyverno/chainsaw\n```\n\n----------------------------------------\n\nTITLE: Multi-cluster Test Configuration in Chainsaw\nDESCRIPTION: Defines a Chainsaw test that creates a local kind cluster, performs operations on it, and includes cleanup steps. The test demonstrates cluster registration, resource application, and automatic cleanup procedures.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/multi-cluster.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    # create a local cluster\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    # register `cleanup` operations to delete the cluster\n    # at the end of the test\n    cleanup:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n    # register the `dynamic` cluster in this step\n  - clusters:\n      dynamic:\n        kubeconfig: ./dynamic\n    # and use the `dynamic` cluster for all operations in the step\n    cluster: dynamic\n    try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n            namespace: default\n          data:\n            foo: bar\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n            namespace: default\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Migrating KUTTL Configuration to Chainsaw\nDESCRIPTION: This command migrates a KUTTL test suite file to the corresponding Chainsaw Configuration. It generates a .chainsaw.yaml configuration file.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/kuttl-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw migrate kuttl config path/to/kuttl/testsuite --save --cleanup\n```\n\n----------------------------------------\n\nTITLE: Configuring Discovery with YAML\nDESCRIPTION: This snippet provides a YAML configuration for setting up Chainsaw's test discovery. Required dependencies include the Chainsaw application with this specific API version. Key parameters include 'testFile', 'fullName', 'includeTestRegex', and 'excludeTestRegex', which help in specifying file names and regex patterns for test inclusion/exclusion.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  discovery:\n    testFile: chainsaw-test\n    fullName: true\n    includeTestRegex: chainsaw/.*\n    excludeTestRegex: chainsaw/exclude-.*\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources with File Reference in Chainsaw\nDESCRIPTION: Example demonstrating how to create a Kubernetes resource from a specific file using the Chainsaw test framework. This snippet shows the basic structure of a Test resource with a create operation pointing to a specific YAML file.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/create.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use a specific file\n        file: my-configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Chainsaw from Source\nDESCRIPTION: Commands to build Chainsaw binaries from source code. This includes changing to the project directory, ensuring dependencies are in order, and running the build process.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd chainsaw\ngo mod tidy\nmake build\n```\n\n----------------------------------------\n\nTITLE: Using Simple Check Operation in Kyverno Chainsaw YAML\nDESCRIPTION: Example of a Kyverno Chainsaw test that uses a simple check to validate that a script operation is expected to fail. The check asserts that an error must be present for the test to be considered successful.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/checks.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          exit 1\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Update Operation with Error Checking\nDESCRIPTION: Demonstrates how to implement operation checks during an update operation, including matching criteria and error condition validation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/update.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Configuration Resource Definition in Kubernetes\nDESCRIPTION: Defines the main Configuration resource type that contains test configuration settings. Includes metadata, specification details and required API fields.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  # Standard object metadata\nspec:\n  # Configuration spec containing test settings\n  cleanup: {}\n  clusters: {}\n  deletion: {}\n  discovery: {}\n  error: {}\n  execution: {}\n  namespace: {}\n  report: {}\n  templating: {}\n  timeouts: {}\n```\n\n----------------------------------------\n\nTITLE: Describing All Pods in Test Namespace with Chainsaw\nDESCRIPTION: Example of using Chainsaw to describe all Pod resources in the test namespace during a catch block of a test step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/describe.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        # describe all pods in the test namespace\n        apiVersion: v1\n        kind: Pod\n```\n\n----------------------------------------\n\nTITLE: Assert Operation with File Path\nDESCRIPTION: Example of using assert operation with a specific file path to define assertions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/assert.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use a specific file\n        file: ../resources/deployment-assert.yaml\n```\n\n----------------------------------------\n\nTITLE: Patch Operation with Error Checking in Kubernetes\nDESCRIPTION: Example of implementing operation checks in patch operations to validate expected errors and resource matches.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/patch.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Testing Failed Resource Application in Chainsaw\nDESCRIPTION: This snippet shows how to test a scenario where applying Kubernetes resources is expected to fail. It uses the 'expect' field with a check that validates an error occurs during resource application.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/negative-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: resources.yaml\n        expect:\n          # check that applying the resource failed\n        - check:\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bindings in Chainsaw Test\nDESCRIPTION: Shows how to create and combine custom bindings at different levels (test, step, and operation) in a Chainsaw test, using the JMESPath join function to concatenate values.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # bindings can be declared at the test level\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n    # bindings can also be declared at the step level\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        # bindings can also be declared at the operation level\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n          # combined bindings together using the `join` functions and\n          # assign the result to the GREETINGS environment variable\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        content: echo $GREETINGS\n```\n\n----------------------------------------\n\nTITLE: Using Expect with Resource Matching in Kyverno Chainsaw YAML\nDESCRIPTION: Example of a Kyverno Chainsaw test that uses the 'expect' field with matching criteria to selectively apply checks. This test expects ConfigMap resources to fail during creation while other resources should succeed.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/checks.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        file: resources.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Defining Example Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates an example configuration for Chainsaw, specifying timeouts, cleanup options, and execution settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/file.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: chainsaw.kyverno.io/v1alpha2\\nkind: Configuration\\nmetadata:\\n  name: example\\nspec:\\n  timeouts:\\n    apply: 45s\\n    assert: 20s\\n    cleanup: 45s\\n    delete: 25s\\n    error: 10s\\n    exec: 45s\\n  cleanup:\\n    skipDelete: false\\n  execution:\\n    failFast: true\\n    parallel: 4\\n  # ...\"\n```\n\n----------------------------------------\n\nTITLE: Using Finally Block for Resource Cleanup in Chainsaw Test\nDESCRIPTION: Example of a Chainsaw test that creates a local cluster in the try block and guarantees cleanup using the finally block. The finally block ensures that cleanup scripts run regardless of test outcome, preventing resource leaks.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/try-catch.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # create a local cluster\n  - try:\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    - apply:\n        # ...\n    - assert:\n        # ...\n    # add cluster deletion script in the `finally` block\n    # to guarantee the cluster will be deleted after the test\n    finally:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n```\n\n----------------------------------------\n\nTITLE: Getting Pods with JSON Format Output in Chainsaw\nDESCRIPTION: Example of specifying the output format for the Get resource in Chainsaw. This configures the command to return results in JSON format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/get.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        format: json\n```\n\n----------------------------------------\n\nTITLE: Visualizing Test Execution Flow With Failure in Mermaid\nDESCRIPTION: A sequence diagram illustrating what happens when a test step fails, showing how execution stops and cleanup begins immediately from the failed step backward.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/spec/index.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant T as Test\n    participant S1 as Step 1\n    participant S2 as Step 2\n    participant S3 as Step 3\n\n    T  ->> S1: execute\n    S1 ->> S2: execute (fail)\n\n    Note left of S3: Step 3 is NOT executed\n\n    S2 -->> S1: cleanup\n    S1 -->> T: cleanup\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw with Go Install\nDESCRIPTION: Command to install Chainsaw directly using Go's module installation capabilities. This requires having Go already installed on the system.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/kyverno/chainsaw@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Test-Level Timeouts in Chainsaw YAML\nDESCRIPTION: Example showing how to configure timeouts at the test level that apply to all operations and steps unless overridden. Demonstrates setting apply and assert timeouts with a TempoStack resource example.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/timeouts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 5s\n    assert: 1m\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Cleanup Logs Example\nDESCRIPTION: This log output demonstrates the automatic cleanup process in Chainsaw. It shows the sequence of events where Chainsaw creates resources, executes test steps, and then automatically cleans up by deleting resources in reverse order of creation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/cleanup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    | 15:21:29 | quick-start | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:29 | quick-start | step-1   | TRY       | RUN   |\n    | 15:21:29 | quick-start | step-1   | APPLY     | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | CREATE    | OK    | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | APPLY     | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | ASSERT    | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | ASSERT    | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | TRY       | DONE  |\n    === step cleanup process start ===\n    | 15:21:29 | quick-start | step-1   | CLEANUP   | RUN   |\n    | 15:21:29 | quick-start | step-1   | DELETE    | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | DELETE    | OK    | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | DELETE    | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | CLEANUP   | DONE  |\n    === step cleanup process end ===\n    === test cleanup process start ===\n    | 15:21:29 | quick-start | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:29 | quick-start | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:34 | quick-start | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-cute-cod\n    === test cleanup process end ===\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Options with YAML\nDESCRIPTION: YAML configuration for Chainsaw test execution settings, allowing customization of fail-fast behavior, parallel test runs, repeat count, and forced termination grace period\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/execution.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  execution:\n    failFast: true\n    parallel: 8\n    repeatCount: 2\n    forceTerminationGracePeriod: 5s\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cleanup Operations in Chainsaw\nDESCRIPTION: This YAML example shows how to implement custom cleanup operations in a Chainsaw test. It creates a local Kind cluster in the test step and then defines custom cleanup operations to delete the cluster and remove its kubeconfig file after the test completes.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/cleanup.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # this step will create a local cluster\n  - try:\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    # at cleanup time, we want to delete the local cluster we created\n    # and remove the associated kubeconfig\n    cleanup:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n```\n\n----------------------------------------\n\nTITLE: Validating Error Messages in Script Execution in Chainsaw\nDESCRIPTION: This snippet demonstrates how to create a negative test case for script execution in Chainsaw. It runs a kubectl command expected to fail and validates both that an error occurs and that the error message matches the expected text.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/negative-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: kubectl get foo\n        check:\n          ($error != null): true\n          ($stderr): |-\n            error: the server doesn't have a resource type \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Getting Pods Using Label Selector with Chainsaw\nDESCRIPTION: Example of using a label selector to filter pods in a Chainsaw test. This retrieves pods that match the label 'app=my-app'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/get.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods using a label selector query\n        selector: app=my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw with Homebrew\nDESCRIPTION: Command to install Chainsaw using Homebrew on macOS. This must be done after adding the tap, and requires specifying the tap name to avoid installing the wrong tool.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install kyverno/chainsaw/chainsaw\n```\n\n----------------------------------------\n\nTITLE: Patching Resources with File Reference in Kubernetes\nDESCRIPTION: Example of patching Kubernetes resources using a specific file reference in the patch operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/patch.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use a specific file\n        file: my-configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Configuration with Foreground Propagation (YAML)\nDESCRIPTION: This snippet demonstrates configuring the deletion propagation policy to 'Foreground' within a Chainsaw Configuration resource using a YAML file. This ensures that dependent resources are deleted before the primary resource is deleted.  The configuration is set within the `spec.deletion` field.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/deletion.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  deletion:\n    propagation: Foreground\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pod Deletion\nDESCRIPTION: Example of waiting for pod deletion with a 1 minute timeout.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        timeout: 1m\n        for:\n          # wait for deletion\n          deletion: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts via YAML in Chainsaw\nDESCRIPTION: This YAML configuration snippet shows how to set specific timeouts for different operations in Chainsaw by defining a Configuration resource. The snippet lists timeouts for 'apply', 'assert', 'cleanup', 'delete', 'error', and 'exec' operations. Ensure to apply this YAML file to a Kubernetes cluster in which Chainsaw is running.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/timeouts.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 45s\n    assert: 20s\n    cleanup: 45s\n    delete: 25s\n    error: 10s\n    exec: 45s\n```\n\n----------------------------------------\n\nTITLE: Example Chainsaw Test Definition in YAML\nDESCRIPTION: A sample Chainsaw test definition that includes descriptions at various levels. This test creates and verifies a configmap with two operations in the try block.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/test-docs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\nspec:\n  description: This is a very simple test that creates a configmap and checks the content is as expected.\n  steps:\n  - description: This steps applies the configmap in the cluster and checks the configmap content.\n    try:\n    - description: Create the configmap.\n      apply:\n        file: configmap.yaml\n    - description: Check the configmap content.\n      assert:\n        file: configmap-assert.yaml\n```\n\n----------------------------------------\n\nTITLE: Command Execution with Operation Check\nDESCRIPTION: Shows how to implement operation checks in a command execution step. Includes error checking logic that validates the command's execution status.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/command.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - command:\n        entrypoint: echo\n        args:\n        - hello chainsaw\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pod Ready Condition in Test Namespace\nDESCRIPTION: Example of waiting for all pods in the test namespace to be in the Ready state with a 1 minute timeout.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    # wait all pods are ready in the test namespace\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Basic Events Configuration Examples in YAML\nDESCRIPTION: Demonstrates basic usage patterns for Events configuration including default namespace events, specific namespace events, and getting events by name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/events.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get all events in the test namespace\n    - events: {}\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get events in a specific namespace\n    - events:\n        namespace: foo\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get event by name\n    - events:\n        name: my-event\n```\n\n----------------------------------------\n\nTITLE: Basic Chainsaw Command Usage\nDESCRIPTION: The basic syntax for using the Chainsaw CLI tool with optional flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchainsaw [flags]\n```\n\n----------------------------------------\n\nTITLE: Patching Resources with Inline Configuration in Kubernetes\nDESCRIPTION: Example of patching Kubernetes resources using inline resource definition in the patch operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/patch.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Test with Foreground Propagation (CLI)\nDESCRIPTION: This snippet shows how to set the deletion propagation policy to 'Foreground' when running a Chainsaw test from the command line. The `--deletion-propagation-policy` flag is used to specify the desired policy.  This overrides any default or file-based configuration for the specific test execution.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/deletion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"chainsaw test --deletion-propagation-policy Foreground\"\n```\n\n----------------------------------------\n\nTITLE: Reading Chainsaw Values from a File\nDESCRIPTION: This command demonstrates how to run Chainsaw tests while providing values from a YAML file. The values defined in ./values.yaml will be available to tests via the $values binding.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/values.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --values ./values.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw with Docker\nDESCRIPTION: Example of running Chainsaw using Docker with volume mounts for test data and Kubernetes config. This setup maps local directories into the container for Chainsaw to access.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm                             \\\n    -v ./testdata/e2e/:/chainsaw/           \\\n    -v ${HOME}/.kube/:/etc/kubeconfig/      \\\n    -e KUBECONFIG=/etc/kubeconfig/config    \\\n    --network=host                          \\\n    ghcr.io/kyverno/chainsaw:<version>      \\\n    test /chainsaw --config /chainsaw/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Test Folder Structure in Bash\nDESCRIPTION: Commands to create and navigate to a folder for Chainsaw tests. This sets up the basic directory structure needed for organizing test files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/first-test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create test folder\nmkdir chainsaw-quick-start\n\n# enter test folder\ncd chainsaw-quick-start\n```\n\n----------------------------------------\n\nTITLE: Using Operation Checks with Create Operations in Chainsaw\nDESCRIPTION: Example demonstrating how to use operation checks to validate the results of a create operation. This shows how to conditionally check for errors, allowing tests to verify that operations fail under certain circumstances.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/create.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Glob Pattern Error Configuration in Chainsaw Test\nDESCRIPTION: Shows how to use glob patterns to specify multiple error definition files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/error.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use glob pattern\n        file: \"../errors/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Clusters via Command-Line Flags in Chainsaw\nDESCRIPTION: This snippet demonstrates how to configure multiple clusters using command-line flags when running Chainsaw tests. The `--cluster` flag is used to specify each cluster, including its name, kubeconfig path, and optionally a context. The format is `cluster-name=/path/to/kubeconfig[:context-name]`.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/clusters.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"chainsaw test                                               \\\n    --cluster cluster-1=/path/to/kubeconfig-1               \\\n    --cluster cluster-2=/path/to/kubeconfig-2:context-2\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Pod to be Ready\nDESCRIPTION: Example of waiting for a specific pod named 'my-pod' in the test namespace to be in the Ready state with a 1 minute timeout.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # wait a specific pod is ready in the test namespace\n        name: my-pod\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Label Selector Events Configuration in YAML\nDESCRIPTION: Shows how to use label selectors to filter events, with examples for both default and specific namespaces.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/events.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        # get events using a label selector query\n        selector: app=my-app\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        # get events using a label selector query\n        selector: app=my-app\n        namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Events Type Definition\nDESCRIPTION: Defines the Events type that specifies how to collect events. Includes fields for cluster configuration, formatting, object selection, and timeout settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha1.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Inline | Description |\n|---|---|---|---|---|\n| `ActionClusters` | `ActionClusters` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionFormat` | `ActionFormat` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionObjectSelector` | `ActionObjectSelector` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionTimeout` | `ActionTimeout` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup with YAML in Chainsaw\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify cleanup options in Chainsaw, particularly focusing on skipping resource deletion and setting a delay before cleanup using the Kyverno Chainsaw API. It expects a valid configuration file with the correct API version and kind. Key parameters include 'skipDelete' and 'delayBeforeCleanup', which control resource deletion and the timing of cleanup, respectively.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/cleanup.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  cleanup:\n    skipDelete: true\n    delayBeforeCleanup: 5s\n```\n\n----------------------------------------\n\nTITLE: Asserting on Kubernetes Events in Chainsaw Tests\nDESCRIPTION: This code snippet shows how to define a Chainsaw test that asserts on a specific Kubernetes event. The test looks for an event with reason 'Started' from the kubelet component, involving a Pod named 'my-pod'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/events.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: Event\n          reason: Started\n          source:\n            component: kubelet\n          involvedObject:\n            apiVersion: v1\n            kind: Pod\n            name: my-pod\n```\n\n----------------------------------------\n\nTITLE: Getting Pods by Name Pattern with Chainsaw\nDESCRIPTION: Example of retrieving pods that match a specific name pattern using Chainsaw's Get resource. This filters pods that have a name starting with 'my-pod'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/get.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods that have a name starting with the provided `my-pod`\n        name: my-pod\n```\n\n----------------------------------------\n\nTITLE: Implementing Version-Dependent Kubernetes Test with Chainsaw\nDESCRIPTION: A test configuration that fetches the Kubernetes server version and uses it to implement version-specific assertions. The test creates a Pod and verifies different annotation values based on the cluster's minor version, accommodating changes in kubeadm behavior across versions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/kube-version.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: version\n    value: (x_k8s_server_version($config))\n  - name: minorversion\n    value: (to_number($version.minor))\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: pod01\n          spec:\n            containers:\n            - name: busybox\n              image: busybox:1.35\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            annotations:\n              kyverno.io/created-by: (($minorversion < `29` && '{\"groups\":[\"system:masters\",\"system:authenticated\"],\"username\":\"kubernetes-admin\"}') || '{\"groups\":[\"kubeadm:cluster-admins\",\"system:authenticated\"],\"username\":\"kubernetes-admin\"}')\n            name: pod01\n```\n\n----------------------------------------\n\nTITLE: Test Execution Output\nDESCRIPTION: Shows the complete execution output of the multi-cluster test, including cluster creation, resource management, and cleanup operations with timestamps and status information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/multi-cluster.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n    | 10:44:53 | example | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:44:53 | example | step-1   | TRY       | RUN   |\n    | 10:44:53 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c kind create cluster --name dynamic --kubeconfig ./dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | LOG   |\n        === STDERR\n        Creating cluster \"dynamic\" ...\n         • Ensuring node image (kindest/node:v1.27.3) 🖼  ...\n         ✓ Ensuring node image (kindest/node:v1.27.3) 🖼\n         • Preparing nodes 📦   ...\n         ✓ Preparing nodes 📦 \n         • Writing configuration 📜  ...\n         ✓ Writing configuration 📜\n         • Starting control-plane 🕹️  ...\n         ✓ Starting control-plane 🕹️\n         • Installing CNI 🔌  ...\n         ✓ Installing CNI 🔌\n         • Installing StorageClass 💾  ...\n         ✓ Installing StorageClass 💾\n        Set kubectl context to \"kind-dynamic\"\n        You can now use your cluster with:\n        \n        kubectl cluster-info --context kind-dynamic --kubeconfig ./dynamic\n        \n        Thanks for using kind! 😊\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | TRY       | DONE  |\n    | 10:45:10 | example | step-2   | TRY       | RUN   |\n    | 10:45:10 | example | step-2   | APPLY     | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | CREATE    | OK    | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | APPLY     | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | ASSERT    | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | ASSERT    | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | TRY       | DONE  |\n    | 10:45:10 | example | step-2   | CLEANUP   | RUN   |\n    | 10:45:10 | example | step-2   | DELETE    | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | DELETE    | OK    | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | DELETE    | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | CLEANUP   | DONE  |\n    | 10:45:10 | example | step-1   | CLEANUP   | RUN   |\n    | 10:45:10 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c kind delete cluster --name dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | LOG   |\n        === STDERR\n        Deleting cluster \"dynamic\" ...\n        Deleted nodes: [\"dynamic-control-plane\"]\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c rm -f ./dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | CLEANUP   | DONE  |\n    | 10:45:10 | example | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:45:11 | example | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:45:16 | example | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-useful-seahorse\n```\n\n----------------------------------------\n\nTITLE: Setting Cleanup Flags with Bash in Chainsaw\nDESCRIPTION: This bash command illustrates using flags to configure cleanup options in Chainsaw from the command line. By using '--skip-delete' and '--cleanup-delay', users can manage resource cleanup after tests without modifying configuration files. This method requires Chainsaw to be installed and accessible via the command line.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/cleanup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test                   \\\n  --skip-delete                 \\\n  --cleanup-delay 5s\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Resources with x_k8s_get Function\nDESCRIPTION: Shows how to use the x_k8s_get function with a $client binding to retrieve a Kubernetes Deployment. The example demonstrates accessing a clustered resource by specifying the API version, resource kind, namespace, and resource name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/x_k8s_get.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_get($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n```\n\n----------------------------------------\n\nTITLE: Expectation Type Definition\nDESCRIPTION: Defines the Expectation type for checking operation results. Contains match and check fields using assertion trees for verification.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha1.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Inline | Description |\n|---|---|---|---|---|\n| `match` | `policy/v1alpha1.AssertionTree` |  |  | Match defines the matching statement. |\n| `check` | `policy/v1alpha1.AssertionTree` | :white_check_mark: |  | Check defines the verification statement. |\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Existence with Kyverno Chainsaw\nDESCRIPTION: This snippet demonstrates how to check if a Kubernetes resource exists using the x_k8s_resource_exists function with a Kubernetes client binding. The example checks if a Deployment resource from the apps/v1 API group exists.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/x_k8s_resource_exists.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_resource_exists($client, 'apps/v1', 'Deployment')\n```\n\n----------------------------------------\n\nTITLE: Script Operation with Error Check in Chainsaw\nDESCRIPTION: Shows how to implement operation checks in a script operation. This example includes error validation logic that expects the operation to fail.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/script.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          echo \"hello chainsaw\"\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation-Level Timeouts in Chainsaw YAML\nDESCRIPTION: Example showing how to configure timeouts at the individual operation level, which takes precedence over all other timeout configurations. Demonstrates timeout settings for both apply and assert operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/timeouts.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        timeout: 5s\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n    - assert:\n        timeout: 1m\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n```\n\n----------------------------------------\n\nTITLE: Using JMESPath Functions in Chainsaw Template\nDESCRIPTION: This example shows how to use JMESPath's join function to create a unique resource name in a Chainsaw test. The function combines the namespace name with 'cm' using a hyphen as separator.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/templating.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - apply:\n      resource:\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: (join('-', [$namespace, 'cm']))\n        data:\n          foo: bar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Resources with x_k8s_get\nDESCRIPTION: Example demonstrating how to use x_k8s_get function to retrieve a Deployment resource from the Kubernetes cluster. The function accepts a client binding, API version, resource kind, namespace, and resource name as parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_k8s_get.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_get($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Chainsaw\nDESCRIPTION: Demonstrates how to configure global error handling using a Chainsaw Configuration resource. Allows defining catch handlers for test steps when errors are encountered.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/error.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  error:\n    catch:\n    - events: {}\n    - describe:\n        resource: crds\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Kubernetes Deployment Resource\nDESCRIPTION: This snippet demonstrates how to use the x_k8s_exists function to check for the existence of a Deployment resource in a specific namespace. It utilizes a Kubernetes client binding and specifies the API version, resource type, namespace, and resource name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/x_k8s_exists.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_exists($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n```\n\n----------------------------------------\n\nTITLE: Adding Operation Descriptions in Chainsaw Tests\nDESCRIPTION: Shows how to add descriptive documentation to test operations using the description field. The example demonstrates adding a description to a sleep operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - description: Waits a couple of seconds\n      sleep:\n        duration: 3s\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Assert Command Options\nDESCRIPTION: Complete list of options available for the 'chainsaw assert' command, including Kubernetes authentication parameters, namespace configuration, resource specification, and timeout settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_assert.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --clustered                           Defines if the resource is clustered (only applies when resource is loaded from a file)\n  -f, --file string                         Path to the file to assert or '-' to read from stdin\n  -h, --help                                help for assert\n      --kube-as string                      Username to impersonate for the operation\n      --kube-as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                  UID to impersonate for the operation\n      --kube-certificate-authority string   Path to a cert file for the certificate authority\n      --kube-client-certificate string      Path to a client certificate file for TLS\n      --kube-client-key string              Path to a client key file for TLS\n      --kube-cluster string                 The name of the kubeconfig cluster to use\n      --kube-context string                 The name of the kubeconfig context to use\n      --kube-disable-compression            If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string               If present, the namespace scope for this CLI request\n      --kube-password string                Password for basic authentication to the API server\n      --kube-proxy-url string               If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                  The address and port of the Kubernetes API server\n      --kube-tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                   Bearer token for authentication to the API server\n      --kube-user string                    The name of the kubeconfig user to use\n      --kube-username string                Username for basic authentication to the API server\n      --namespace string                    Namespace to use (default \"default\")\n      --no-color                            Removes output colors\n  -r, --resource string                     Path to the file containing the resource\n      --timeout duration                    The assert timeout to use (default 30s)\n```\n\n----------------------------------------\n\nTITLE: Passing External Values to Chainsaw Test\nDESCRIPTION: Demonstrates how to pass an external YAML file containing values using the --values flag for Chainsaw tests. The values file can be used to provide dynamic configuration or test data.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/values.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --values ./values.yaml\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pods in a Specific Namespace\nDESCRIPTION: Example of waiting for all pods in the 'foo' namespace to be in the Ready state with a 1 minute timeout.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # wait all pods are ready in the namespace `foo`\n        namespace: foo\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Conditional Assertion in Chainsaw\nDESCRIPTION: Demonstrates using expressions for complex assertions, checking if replica count is within a specific range.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/assertion-trees.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            name: coredns\n            namespace: kube-system\n          spec:\n            (replicas > `1` && replicas < `4`): true\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources from URL in Chainsaw\nDESCRIPTION: Example showing how to create Kubernetes resources from a remote URL. This allows referencing resources hosted in external repositories or web servers during Chainsaw tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/create.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources with x_k8s_list Function\nDESCRIPTION: This code snippet demonstrates how to use the x_k8s_list function to list Deployment resources from the 'crossplane-system' namespace. It requires a Kubernetes client binding and specifies the API version, resource type, and namespace.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_k8s_list.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_list($client, 'apps/v1', 'Deployment', 'crossplane-system')\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Options with CLI Flags\nDESCRIPTION: Command-line interface flags for configuring Chainsaw test execution, providing options to set fail-fast mode, parallel test count, repeat iterations, and termination grace period\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/execution.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test                                   \\\n  --fail-fast                                   \\\n  --parallel 8                                  \\\n  --repeat-count 2                              \\\n  --force-termination-grace-period 5s\n```\n\n----------------------------------------\n\nTITLE: PodLogs with Tail Configuration\nDESCRIPTION: Example showing how to limit the number of log lines returned with the tail parameter in a Test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        tail: 30\n```\n\n----------------------------------------\n\nTITLE: Enabling Pause on Failure with CLI Flag\nDESCRIPTION: Command to configure Chainsaw to pause test execution when a failure occurs, allowing for interactive debugging and investigation of test failures\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/pause.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --pause-on-failure\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Test with Namespace Flag in Bash\nDESCRIPTION: This Bash command snippet illustrates how to run a Chainsaw test while specifying a namespace using command-line flags. The command allows users to override the default ephemeral namespace with a specified one. The expected input is a command-line invocation, while the output is the execution of the test within the designated namespace.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/namespace.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --namespace foo\n```\n\n----------------------------------------\n\nTITLE: Basic File Update Operation in Chainsaw\nDESCRIPTION: Example showing how to update a Kubernetes resource using a specific file path in Chainsaw.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/update.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # use a specific file\n        file: my-configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Namespace Binding in Chainsaw Test\nDESCRIPTION: Demonstrates how to use the built-in $namespace binding in a Chainsaw test by assigning it to an environment variable and echoing its value in a script operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        env:\n          # assign the value of the `$namespace` binding\n          # to the environment variable `FOO`\n        - name: FOO\n          value: ($namespace)\n        content: echo $FOO\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts via Command-Line Flags with Chainsaw\nDESCRIPTION: This Bash snippet demonstrates how to set custom timeouts for different Chainsaw operations using command-line flags. Each operation has a corresponding flag to specify the desired timeout. This method is convenient for dynamic or test environments where hardcoded configuration is not optimal.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/timeouts.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nchainsaw test               \\\n  --apply-timeout 45s       \\\n  --assert-timeout 45s      \\\n  --cleanup-timeout 45s     \\\n  --delete-timeout 45s      \\\n  --error-timeout 45s       \\\n  --exec-timeout 45s\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Migrate KUTTL Tests Command in Shell\nDESCRIPTION: This command migrates KUTTL tests to Chainsaw format. It can be run with optional flags to control the migration process.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchainsaw migrate kuttl tests [flags]\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Output Format for Wait Operation\nDESCRIPTION: Example of configuring the wait operation to use JSON output format when watching Pod resources.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        format: json\n```\n\n----------------------------------------\n\nTITLE: Generating Report with Command-Line Flags in Bash\nDESCRIPTION: This Bash command demonstrates how to generate a report using specific flags in the Chainsaw tool. It allows the user to specify the report format, name, and save path, enhancing flexibility in report generation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/report.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test                             \\\n  --report-format JSON                    \\\n  --report-name chainsaw-report           \\\n  --report-path /path/to/save/report\n\n```\n\n----------------------------------------\n\nTITLE: Using File References in Chainsaw Tests\nDESCRIPTION: Shows how to reference resources using the file field in Chainsaw tests. This example demonstrates referencing both a specific file and using glob patterns to reference multiple files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/references.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Referencing External Values in Chainsaw Test Definition\nDESCRIPTION: This YAML snippet demonstrates how to define a Chainsaw test that references an external value using the $values binding. The test expects $values.foo to be provided when Chainsaw is executed and asserts that its value matches 'bar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/values.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          ($values.foo): bar\n```\n\n----------------------------------------\n\nTITLE: Multi-File Update Using Glob Pattern\nDESCRIPTION: Demonstrates how to update multiple Kubernetes resources using a glob pattern to match multiple files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/update.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example-multi\nspec:\n  steps:\n  - try:\n    - update:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Migrating KUTTL Tests to Chainsaw\nDESCRIPTION: This command migrates KUTTL tests to Chainsaw format and overwrites original files with converted ones. It generates a chainsaw-test.yaml file for each discovered KUTTL test.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/kuttl-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw migrate kuttl tests path/to/kuttl/tests --save --cleanup\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace Options with YAML for Chainsaw\nDESCRIPTION: This YAML snippet defines a configuration for the Chainsaw tool, specifying the namespace to be used in tests. The configuration includes the namespace name and an optional template for creating the test namespace. The expected input is a valid YAML structure that conforms to the Chainsaw API version specified, while the output is a correctly allocated namespace during test execution.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/namespace.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  namespace:\n    name: foo\n    template:\n      metadata:\n        annotations:\n          from-config-file: hello\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Migrate Command in Shell\nDESCRIPTION: This snippet shows the basic usage of the 'chainsaw migrate' command. It is used to migrate resources to Chainsaw. The command can be run with additional flags for customization.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchainsaw migrate [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic PodLogs Usage in Chainsaw Test\nDESCRIPTION: Example showing basic usage of podLogs in a Test resource catch block to retrieve logs from all pods in the test namespace.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # all pods in the test namespace\n    - podLogs: {}\n```\n\n----------------------------------------\n\nTITLE: Describing Pods Using Label Selector with Chainsaw\nDESCRIPTION: Example of using Chainsaw to describe Pod resources matching a specific label selector query ('app=my-app') during a catch block of a test step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/describe.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods using a label selector query\n        selector: app=my-app\n```\n\n----------------------------------------\n\nTITLE: Patching Resources with Glob Pattern in Kubernetes\nDESCRIPTION: Example of patching Kubernetes resources using a glob pattern to match multiple configuration files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/patch.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Test Step Configuration for CRD Update\nDESCRIPTION: Defines a test step with multiple operations for testing CRD update scenarios, including apply, assertion, and error handling\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/update-crd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: step-1\n    try:\n      - apply\n      - assert\n      - apply\n      - update\n      - error\n      - assert\n```\n\n----------------------------------------\n\nTITLE: Chainsaw CLI Options\nDESCRIPTION: Available command-line options for the Chainsaw tool, currently only showing the help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for chainsaw\n```\n\n----------------------------------------\n\nTITLE: Inline Resource Update Definition\nDESCRIPTION: Example of updating a Kubernetes resource using an inline resource definition within the test specification.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/update.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Assert Operation with Glob Pattern\nDESCRIPTION: Example of using assert operation with a glob pattern to include multiple assertion files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/assert.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use glob pattern\n        file: \"../assertions/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings with as_string Function\nDESCRIPTION: Example demonstrating how to use the as_string function to convert a string value. The function takes any type as input and returns its string representation, preserving the original value if it's already a string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/as_string.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nas_string('foobar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw Tests with Command-line Options\nDESCRIPTION: This snippet shows the usage syntax and available flags for running tests with Chainsaw. It includes options for timeouts, cluster configuration, test selection, reporting, and various Kubernetes-related settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  test [flags]... [test directories]...\n\nFlags:\n      --apply-timeout duration                    The apply timeout to use as default for configuration (default 5s)\n      --assert-timeout duration                   The assert timeout to use as default for configuration (default 30s)\n      --cleanup-delay duration                    Adds a delay between the time a test ends and the time cleanup starts\n      --cleanup-timeout duration                  The cleanup timeout to use as default for configuration (default 30s)\n      --cluster strings                           Register cluster (format <cluster name>=<kubeconfig path>:[context name])\n      --config string                             Chainsaw configuration file\n      --default-compiler string                   If set, configures the default compiler (jp or cel)\n      --delete-timeout duration                   The delete timeout to use as default for configuration (default 15s)\n      --deletion-propagation-policy string        The deletion propagation policy (Foreground|Background|Orphan) (default \"Background\")\n      --error-timeout duration                    The error timeout to use as default for configuration (default 30s)\n      --exclude-test-regex string                 Regular expression to exclude tests\n      --exec-timeout duration                     The exec timeout to use as default for configuration (default 5s)\n      --fail-fast                                 Stop the test upon encountering the first failure\n      --force-termination-grace-period duration   If specified, overrides termination grace periods in applicable resources\n      --full-name                                 Use full test case folder path instead of folder name\n  -h, --help                                      help for test\n      --include-test-regex string                 Regular expression to include tests\n      --kube-as string                            Username to impersonate for the operation\n      --kube-as-group stringArray                 Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                        UID to impersonate for the operation\n      --kube-certificate-authority string         Path to a cert file for the certificate authority\n      --kube-client-certificate string            Path to a client certificate file for TLS\n      --kube-client-key string                    Path to a client key file for TLS\n      --kube-cluster string                       The name of the kubeconfig cluster to use\n      --kube-context string                       The name of the kubeconfig context to use\n      --kube-disable-compression                  If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify             If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string                     If present, the namespace scope for this CLI request\n      --kube-password string                      Password for basic authentication to the API server\n      --kube-proxy-url string                     If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string               The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                        The address and port of the Kubernetes API server\n      --kube-tls-server-name string               If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                         Bearer token for authentication to the API server\n      --kube-user string                          The name of the kubeconfig user to use\n      --kube-username string                      Username for basic authentication to the API server\n      --namespace string                          Namespace to use for tests\n      --no-cluster                                Runs without cluster\n      --no-color                                  Removes output colors\n      --parallel int                              The maximum number of tests to run at once\n      --pause-on-failure                          Pause test execution failure (implies no concurrency)\n      --remarshal                                 Remarshals tests yaml to apply anchors before parsing\n      --repeat-count int                          Number of times to repeat each test (default 1)\n      --report-format string                      Test report format (JSON|XML|JUNIT-TEST|JUNIT-STEP|JUNIT-OPERATION)\n      --report-name string                        The name of the report to create (default \"chainsaw-report\")\n      --report-path string                        The path of the report to create\n      --selector strings                          Selector (label query) to filter on\n      --shard-count int                           Number of shards\n      --shard-index --shard-count                 Current shard index (if --shard-count > 0)\n      --skip-delete                               If set, do not delete the resources after running the tests\n      --template                                  If set, resources will be considered for templating (default true)\n      --test-dir strings                          Directories containing test cases to run\n      --test-file string                          Name of the test file (default \"chainsaw-test\")\n      --values strings                            Values passed to the tests\n```\n\n----------------------------------------\n\nTITLE: Describing Pods with Events Display Control in Chainsaw\nDESCRIPTION: Example of using Chainsaw to describe Pod resources with the 'showEvents' option set to false, which disables the default behavior of showing events during a catch block of a test step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/describe.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        showEvents: false\n```\n\n----------------------------------------\n\nTITLE: Linting a Chainsaw Test Using Stdin\nDESCRIPTION: This example demonstrates how to use the 'chainsaw lint test' command with stdin to validate a test definition. The command reads a YAML test definition from standard input and checks if it's correctly formatted.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/lint.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw lint test -f - <<EOF\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: assertion-tree\nspec:\n  steps:\n  - try:\n    - assert:\n        file: assert.yaml\nEOF\n```\n\n----------------------------------------\n\nTITLE: Install Chainsaw from main via go install\nDESCRIPTION: This snippet illustrates how to install Chainsaw from the `main` branch using `go install`. It ensures that Go is installed before attempting to install Chainsaw, and sets the `release` input to `main`.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/cicd/gh-action.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw via go install\n    steps:\n      - name: Install go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          release: main\n      - name: Check install\n        run: chainsaw version\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Kubernetes Server Version\nDESCRIPTION: Example showing how to retrieve the Kubernetes server version using a client binding. The function takes a Kubernetes client as input and returns the version information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_k8s_server_version.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_server_version($client)\n```\n\n----------------------------------------\n\nTITLE: Install Chainsaw GitHub Action with Cosign Verification\nDESCRIPTION: This snippet shows how to install Chainsaw with cosign verification using the GitHub Action. It first installs cosign, then configures the Chainsaw action to verify the downloaded archive using cosign.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/cicd/gh-action.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Cosign\n        uses: sigstore/cosign-installer@v3.1.1\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          verify: true\n      - name: Check install\n        run: chainsaw version\n```\n```\n\n----------------------------------------\n\nTITLE: Array Filtering Assertion in Chainsaw\nDESCRIPTION: Shows how to filter and assert on array elements, specifically checking conditions in a TempoStack resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/assertion-trees.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n            ...\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n```\n\n----------------------------------------\n\nTITLE: Operation Check with Apply in Chainsaw\nDESCRIPTION: Example showing how to add operation checks to verify the success or failure of an Apply operation using match conditions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/apply.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Using JMESPath Functions in Chainsaw Resource Templates\nDESCRIPTION: This example shows how to use the JMESPath join function to create a unique resource name by combining the namespace with a string literal. The join function concatenates the namespace and 'cm' with a hyphen separator.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/resource-templating.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: (join('-', [$namespace, 'cm']))\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Converting Maps/Arrays using items() Function\nDESCRIPTION: Function signature showing how to use items() to convert a map/array to an array of objects where each key-value pair becomes an item. Takes an object or array as first argument followed by two string parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/items.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nitems(object|array, string, string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Clusters via Configuration File in Chainsaw\nDESCRIPTION: This snippet shows how to configure multiple clusters within a Chainsaw configuration file. Each cluster is defined by a name and specifies the path to its kubeconfig file.  Optionally, a specific context within the kubeconfig can be selected. The configuration file is written in YAML format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/clusters.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: custom-config\nspec:\n  clusters:\n    # this cluster will use the default (current) context\n    # configured in the kubeconfig file\n    cluster-1:\n      kubeconfig: /path/to/kubeconfig-1\n    # this cluster will use the context named `context-2`\n    # in the kubeconfig file\n    cluster-2:\n      kubeconfig: /path/to/kubeconfig-2\n      context: context-2\"\n```\n\n----------------------------------------\n\nTITLE: Inline Resource Error Configuration in Chainsaw Test\nDESCRIPTION: Shows how to define expected errors using inline resource definitions with custom conditions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/error.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: Deployment\n          metadata:\n            name: foo\n          spec:\n            (replicas > 3): true\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw tests with a label selector\nDESCRIPTION: This bash command demonstrates how to run Chainsaw tests with a label selector using the `--selector` flag. The `foo=bar` selector filters the tests based on the presence of the `foo` label with the value `bar`.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/label-selectors.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"chainsaw test --selector foo=bar\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Test Configuration and Results\nDESCRIPTION: This snippet shows the configuration settings for Chainsaw tests and the summary of test execution results. It includes timeout settings, test directories, report formats, and various execution parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/with_suppress.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nVersion: ---\nLoading default configuration...\n- Using test file: chainsaw-test\n- Timeout 30s\n- TestDirs [.]\n- SkipDelete false\n- FailFast false\n- ReportFormat ''\n- ReportName ''\n- Namespace ''\n- FullName false\n- IncludeTestRegex ''\n- ExcludeTestRegex ''\n- ApplyTimeout 5s\n- AssertTimeout 30s\n- CleanupTimeout 30s\n- DeleteTimeout 15s\n- ErrorTimeout 30s\n- ExecTimeout 5s\n- DeletionPropagationPolicy Background\n- Template true\n- NoCluster false\n- PauseOnFailure false\nLoading tests...\nLoading values...\nRunning tests...\nTests Summary...\n- Passed  tests 0\n- Failed  tests 0\n- Skipped tests 0\nDone.\n```\n\n----------------------------------------\n\nTITLE: Max Function Signature in Kyverno Chainsaw\nDESCRIPTION: Function signature for the max function which takes an array of numbers or strings as input and returns the highest element found in the array. Returns null for empty arrays.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/max.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`max(array[number]|array[string])`\n```\n\n----------------------------------------\n\nTITLE: Getting Pods from Specific Namespace with Chainsaw\nDESCRIPTION: Example of using Chainsaw's Get resource to retrieve pods from a specific namespace 'foo', rather than the default test namespace.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/get.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods in the namespace `foo`\n        namespace: foo\n```\n\n----------------------------------------\n\nTITLE: File-Based Error Configuration in Chainsaw Test\nDESCRIPTION: Demonstrates how to configure an error operation using a specific file path to define expected errors.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/error.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use a specific file\n        file: ../resources/deployment-error.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining the Merge Function Signature in Markdown\nDESCRIPTION: Shows the signature of the merge function that takes an object parameter and merges a list of objects together, returning the combined result.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/merge.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmerge(object)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String into Object\nDESCRIPTION: This code snippet demonstrates the usage of the json_parse function. It takes a JSON string as input and returns a parsed object. The example shows how to parse a simple JSON object with a key-value pair.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/json_parse.md#2025-04-21_snippet_0\n\nLANGUAGE: unspecified\nCODE:\n```\njson_parse('{\"foo\":\"bar\"}') == { foo: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: URL-Based Error Configuration in Chainsaw Test\nDESCRIPTION: Illustrates how to reference error definitions from a remote URL source.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/error.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use an URL\n        file: https://raw.githubusercontent.com/user/repo/branch/path/to/deployment-error.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Lint Command\nDESCRIPTION: Command syntax for running the chainsaw lint command. Supports linting either test or configuration files with optional flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_lint.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw lint [test|configuration] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Renovate Config Command\nDESCRIPTION: This snippet shows the basic usage of the 'chainsaw renovate config' command. It upgrades Chainsaw configuration to the latest version.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_renovate_config.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchainsaw renovate config [flags]\n```\n\n----------------------------------------\n\nTITLE: Summing Array of Integers in Go\nDESCRIPTION: This snippet shows the summation of an array containing two integer values. It demonstrates basic array summation functionality, likely used for testing or as an example in the Kyverno Chainsaw project.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/sum.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsum([`10`, `15`]) == `25`\n```\n\n----------------------------------------\n\nTITLE: Array Iteration Assertion in Chainsaw\nDESCRIPTION: Demonstrates how to iterate over array elements using the ~ modifier to validate each item individually.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/assertion-trees.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            labels:\n              k8s-app: kube-dns\n            namespace: kube-system\n          spec:\n            template:\n              spec:\n                ~.(containers):\n                  securityContext: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Concurrency in Chainsaw with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the concurrency of a specific test in Chainsaw. The `concurrent` field under the `spec` section determines whether the test will run in parallel with other tests. Setting it to `false` ensures the test runs sequentially.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/concurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # concurrency can be specified per test (`true` or `false`)\n  # default value is `true`\n  concurrent: false\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Asserting node count using x_k8s_list function in Chainsaw\nDESCRIPTION: This snippet demonstrates a Chainsaw test that uses the x_k8s_list function to query all nodes in the Kubernetes cluster and then asserts that exactly one node exists. This approach allows testing cluster-level properties rather than specific resources.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/non-resource-assertions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          (x_k8s_list($client, 'v1', 'Node')):\n            (length(items)): 1\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap with Automatic Namespace Injection in Chainsaw\nDESCRIPTION: This example demonstrates a namespaced ConfigMap resource without an explicit namespace specified. Chainsaw will automatically inject the test namespace name into this resource at runtime because it is a namespaced resource with no namespace configured.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/namespace.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\n  # there is no namespace configured and the resource\n  # is a namespaced one.\n  # Chainsaw will automatically inject the test namespace\ndata:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Adding Numbers with Kyverno Chainsaw\nDESCRIPTION: Demonstrates the addition of two integer values using the 'add' function. The function takes two string-formatted numbers as input and returns their sum.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/add.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nadd(`1`, `2`) == `3`\n```\n\n----------------------------------------\n\nTITLE: Using base64_decode Function to Decode a Base64-Encoded String\nDESCRIPTION: Demonstrates how to use the base64_decode function to convert a base64-encoded string 'Zm9vCg==' back to its original form 'foo'. The function takes a single string parameter and returns the decoded string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/base64_decode.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbase64_decode('Zm9vCg==') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Generating Completion Scripts for Different Shells\nDESCRIPTION: Commands to generate shell completion scripts for Bash, Zsh, Fish, and PowerShell using the chainsaw completion command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/completion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Bash\nchainsaw completion bash\n\n# For Zsh\nchainsaw completion zsh\n\n# For Fish\nchainsaw completion fish\n\n# For PowerShell\nchainsaw completion powershell\n```\n\n----------------------------------------\n\nTITLE: Verifying Chainsaw Installation\nDESCRIPTION: Command to verify that Chainsaw was successfully installed by checking its version. This should be run after installation to ensure everything works correctly.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./chainsaw version\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Renovate Command\nDESCRIPTION: This snippet shows the basic usage of the 'chainsaw renovate' command. It is used to upgrade Chainsaw resources. The command can be executed with optional flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_renovate.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchainsaw renovate [flags]\n```\n\n----------------------------------------\n\nTITLE: Subtracting Quantities in Kyverno Chainsaw\nDESCRIPTION: Illustrates subtraction of data quantities using the subtract function. The example shows how to subtract 1 mebibyte from 2 mebibytes to get a result of 1 mebibyte.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/subtract.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract('2Mi', '1Mi') == '1Mi'\n```\n\n----------------------------------------\n\nTITLE: Resource-Specific Error Matching in Chainsaw\nDESCRIPTION: This snippet demonstrates how to use the 'match' field to target specific resources when performing negative testing. It allows checking for failures only on resources that match certain criteria, useful when a file contains multiple resources but only some are expected to fail.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/negative-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: resources.yaml\n        expect:\n          # the check below only applies if the resource being checked\n          # matches the condition defined in the `match` field\n        - match:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              name: quick-start\n          check:\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Defining a Chainsaw Test with Labels in YAML\nDESCRIPTION: This YAML snippet shows how to define a Chainsaw test with metadata labels that can be used for filtering. The test has a 'foo: bar' label that can be targeted by the selector.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/label-selectors.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\n  labels:\n    foo: bar\nspec:\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with the concat Function in Kyverno Chainsaw\nDESCRIPTION: Demonstrates how to use the concat function to join two strings ('foo' and 'bar') together, resulting in a single combined string 'foobar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/concat.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nconcat('foo', 'bar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources Inline in Chainsaw Tests\nDESCRIPTION: Demonstrates how to define resources directly inline within a Chainsaw test definition. This approach is useful for short resource definitions or when file system access is limited.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/references.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Configuration File with JSON Schema in VS Code\nDESCRIPTION: Example demonstrating how to add a JSON schema reference to a Configuration resource YAML file for validation and autocompletion in VS Code. This schema helps validate timeout settings, cleanup options, and execution parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/json-schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/configuration-chainsaw-v1alpha2.json\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 45s\n    assert: 20s\n    cleanup: 45s\n    delete: 25s\n    error: 10s\n    exec: 45s\n  cleanup:\n    skipDelete: false\n  execution:\n    failFast: true\n    parallel: 4\n```\n\n----------------------------------------\n\nTITLE: Using the chainsaw create test Command\nDESCRIPTION: The basic syntax for creating a Chainsaw test using the CLI command. This command is used to create a new Chainsaw test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_create_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw create test [flags]\n```\n\n----------------------------------------\n\nTITLE: Loading PowerShell Completions\nDESCRIPTION: Command to load Chainsaw completions into the current PowerShell session using Out-String and Invoke-Expression.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_powershell.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nchainsaw completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: URL-based Resource Update\nDESCRIPTION: Shows how to update a Kubernetes resource by fetching it from a remote URL.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/update.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Settings in Chainsaw Tests\nDESCRIPTION: This YAML snippet demonstrates how to configure cleanup timeouts at both the test and step levels in a Chainsaw test definition. The test-level timeout is set to 30 seconds, while the step-level timeout is set to 2 minutes.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/cleanup.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  timeouts:\n    # cleanup timeout at the test level\n    cleanup: 30s\n  steps:\n  - timeouts:\n      # cleanup timeout at the step level\n      cleanup: 2m\n    try: ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Matching in Chainsaw Test\nDESCRIPTION: Shows how to use conditional output matching in Chainsaw tests. Demonstrates using the match field to conditionally assign output bindings based on evaluation results.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        outputs:\n        - name: OUTPUT\n          value: ($stdout)\n        - match:\n            ($OUTPUT): hello chainsaw is awesome\n          name: OUTPUT\n          value: YES! chainsaw is awesome\n        content: echo $GREETINGS\n    - script:\n        env:\n        - name: INPUT\n          value: ($OUTPUT)\n        content: echo $INPUT\n```\n\n----------------------------------------\n\nTITLE: Delete Operation with Validation Check in Chainsaw Test\nDESCRIPTION: An advanced example that includes operation checks to validate the delete operation's outcome. It uses a match statement to identify the resource and a check to verify that an error occurred during deletion.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/delete.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          namespace: default\n          name: my-test-pod\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: Pod\n            metadata:\n              namespace: default\n              name: my-test-pod\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n```\n\n----------------------------------------\n\nTITLE: Equal String Comparison Example\nDESCRIPTION: Demonstrates comparing two identical strings which returns 0 indicating equality.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/compare.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncompare('a', 'a') == `0`\n```\n\n----------------------------------------\n\nTITLE: Applying Resources from File in Chainsaw\nDESCRIPTION: Example showing how to apply a Kubernetes resource from a specific file using Chainsaw's Apply operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/apply.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use a specific file\n        file: my-configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Create Command\nDESCRIPTION: Command line syntax for using the Chainsaw create command and its subcommands. Includes the main create command, the test subcommand, and help flag options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/create/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw create [flags]\nchainsaw create [command]\n\nAvailable Commands:\n  test        Create a Chainsaw test\n\nFlags:\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Chainsaw - YAML\nDESCRIPTION: This YAML snippet shows the default configuration that Chainsaw uses when no custom configuration file is provided.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/file.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: chainsaw.kyverno.io/v1alpha2\\nkind: Configuration\\nmetadata:\\n  name: default\\nspec: {}\"\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Completion Command for Zsh\nDESCRIPTION: Command to generate the autocompletion script for the Zsh shell with Chainsaw. This command supports flags like --help and --no-descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion zsh [flags]\n```\n\n----------------------------------------\n\nTITLE: Using to_upper Function for String Conversion\nDESCRIPTION: Example demonstrating how to use the to_upper function to convert a string to uppercase. The function takes a single string parameter and returns the same string with all characters converted to uppercase.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_upper.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nupper('foobar') == 'FOOBAR'\n```\n\n----------------------------------------\n\nTITLE: Testing Exact Error Output with Chainsaw\nDESCRIPTION: A Chainsaw test that verifies the exact error output from an invalid kubectl command, including preserving special characters like tabs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl foo\n        check:\n          # This checks that the result of the content was an error.\n          ($error != null): true\n          # This checks that the output is exactly as intended.\n          ($stderr): \"error: unknown command \\\"foo\\\" for \\\"kubectl\\\"\\n\\nDid you mean this?\\n\\ttop\"\n```\n\n----------------------------------------\n\nTITLE: Defining Reporting Configuration in YAML\nDESCRIPTION: This YAML snippet outlines the configuration settings for the reporting options in Chainsaw, including the report format, name, and path. The specified parameters allow customization of the report generation for user-defined outputs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/report.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  report:\n    format: JSON\n    name: chainsaw-report\n    path: /home/chainsaw\n\n```\n\n----------------------------------------\n\nTITLE: Defining 'time_after' Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the 'time_after' function, which takes two string parameters representing times in RFC3339 format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_after.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_after(string, string)`\n```\n\n----------------------------------------\n\nTITLE: Applying Resources Using Glob Pattern in Chainsaw\nDESCRIPTION: Example demonstrating how to apply multiple Kubernetes resources using a glob pattern to match multiple files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/apply.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Build Commands\nDESCRIPTION: Shows the command structure and available options for the chainsaw build command. Includes the main command syntax, available subcommands like 'docs' for building test documentation, and help flag options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/build/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw build [flags]\nchainsaw build [command]\n\nAvailable Commands:\n  docs        Build tests documentation\n\nFlags:\n  -h, --help   help for build\n\nUse \"chainsaw build [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw with Nix on NixOS\nDESCRIPTION: Command to install Chainsaw using the Nix package manager on a NixOS system. This uses the nix-env command with the appropriate package identifier.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -iA nixos.kyverno-chainsaw\n```\n\n----------------------------------------\n\nTITLE: Using chainsaw docs Command in Bash\nDESCRIPTION: This command is used to generate reference documentation for the chainsaw tool. It supports options for including a timestamp, specifying output path, and generating website versions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trim_space Function to Remove Leading and Trailing Whitespace\nDESCRIPTION: This snippet shows the trim_space function being called with a string containing extra whitespace at both ends. It demonstrates how the function removes these spaces, resulting in a clean string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim_space.md#2025-04-21_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\ntrim_space('    foobar  ') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: PodLogs with Container Specification\nDESCRIPTION: Example demonstrating how to retrieve logs from a specific container within pods in a Test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        container: nginx\n```\n\n----------------------------------------\n\nTITLE: Describing Pods in Specific Namespace with Chainsaw\nDESCRIPTION: Example of using Chainsaw to describe Pod resources in a specific namespace ('foo') during a catch block of a test step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/describe.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods in the namespace `foo`\n        namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Step-Level Timeouts in Chainsaw YAML\nDESCRIPTION: Example showing how to configure timeouts at the step level that apply to all operations within that step unless overridden. Shows separate steps with different timeout configurations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/timeouts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - timeouts:\n      apply: 5s\n    try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n  - timeouts:\n      assert: 1m\n    try:\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n```\n\n----------------------------------------\n\nTITLE: Basic Delete Operation Example in Chainsaw Test\nDESCRIPTION: A simple example of using the delete operation to remove a Pod from the default namespace. The delete operation requires a reference to the resource to be deleted including apiVersion, kind, namespace, and name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/delete.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          namespace: default\n          name: my-test-pod\n```\n\n----------------------------------------\n\nTITLE: Dividing Durations in Kyverno Chainsaw\nDESCRIPTION: Example of using the divide function with time duration values. Demonstrates dividing one hour by two hours to yield 0.5.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/divide.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide('1h', '2h') == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Operation in Chainsaw Test\nDESCRIPTION: Example showing how to configure a sleep operation in a Chainsaw test step. The sleep operation is configured with a 30-second duration pause between test steps.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/sleep.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - sleep:\n        duration: 30s\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Configuration in YAML\nDESCRIPTION: This YAML snippet defines the configuration for Chainsaw, a tool in the Kyverno project. It specifies the API version, kind, metadata, and spec details including parallelism, templating, and timeouts for various operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/config/out.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/configuration-chainsaw-v1alpha1.json\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Configuration\nmetadata:\n  creationTimestamp: null\n  name: configuration\nspec:\n  parallel: 4\n  template: false\n  timeouts:\n    apply: 5m0s\n    assert: 5m0s\n    cleanup: 5m0s\n    delete: 5m0s\n    error: 5m0s\n    exec: 5m0s\n```\n\n----------------------------------------\n\nTITLE: Error Type Definition\nDESCRIPTION: Defines the Error type that represents anticipated error conditions during testing. Contains fields for action bindings, check references, clusters, and timeout configurations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Inline | Description |\n|---|---|---|---|---|\n| `ActionBindings` | `ActionBindings` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionCheckRef` | `ActionCheckRef` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionClusters` | `ActionClusters` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n| `ActionTimeout` | `ActionTimeout` | :white_check_mark: | :white_check_mark: | *No description provided.* |\n```\n\n----------------------------------------\n\nTITLE: Using the chainsaw create command\nDESCRIPTION: The basic syntax for using the 'chainsaw create' command to create Chainsaw resources. This is the parent command that has subcommands for creating specific resource types.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_create.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw create [flags]\n```\n\n----------------------------------------\n\nTITLE: Trimming Right Side of String with Specific Characters in Go\nDESCRIPTION: This snippet shows the trim_right function attempting to remove specific characters ('f', 'b', 'r') from the right side of the string ' foobar '. It demonstrates that when the rightmost character (space) is not in the trim set, no trimming occurs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim_right.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntrim_right(' foobar ', 'fbr') == ' foobar '\n```\n\n----------------------------------------\n\nTITLE: Describing Specific Pod by Name Pattern with Chainsaw\nDESCRIPTION: Example of using Chainsaw to describe Pod resources with names starting with 'my-pod' during a catch block of a test step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/describe.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods that have a name starting with the provided `my-pod`\n        name: my-pod\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Assert Command Usage\nDESCRIPTION: Primary command for performing resource assertions with multiple configuration flags for Kubernetes cluster interactions\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/assert/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw assert [flags] [FILE]\n```\n\n----------------------------------------\n\nTITLE: Multiplying Durations with Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates multiplying a duration value with a number using the multiply function. The function takes a duration and a number, returning a duration with the multiplied value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/multiply.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmultiply('1h', `2`) == '2h'\n```\n\n----------------------------------------\n\nTITLE: Getting Pods in Test Namespace with Chainsaw\nDESCRIPTION: Example of using the Get resource to retrieve all pods in the test namespace within a Chainsaw test's catch block.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/get.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get all pods in the test namespace\n    - get:\n        apiVersion: v1\n        kind: Pod\n```\n\n----------------------------------------\n\nTITLE: Available Subcommands for Chainsaw Renovate\nDESCRIPTION: The only available subcommand for the renovate command is 'config', which is used to upgrade Chainsaw configuration to the latest version.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/renovate/help.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw renovate config\n```\n\n----------------------------------------\n\nTITLE: Checking Array Containment in Chainsaw\nDESCRIPTION: These snippets show how to use the 'contains' function with arrays. It demonstrates checking for the presence of an element in an array, including a case where the element is present and one where it is not.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/contains.md#2025-04-21_snippet_1\n\nLANGUAGE: chainsaw\nCODE:\n```\ncontains(['foo', 'bar'], 'bar') == `true`\n```\n\nLANGUAGE: chainsaw\nCODE:\n```\ncontains(['foo', 'bar'], 'not') == `true`\n```\n\n----------------------------------------\n\nTITLE: Available options for chainsaw create command\nDESCRIPTION: Lists the available options for the 'chainsaw create' command. Currently, only the help flag is available, which displays help information for the command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_create.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Finding Last Occurrence of Substring\nDESCRIPTION: Examples of using find_last function to locate the last occurrence of a substring within a string. The function accepts the source string, search string, and optional start and end positions for the search range.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_last.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfind_last('subject string', 'string', `0`) == `8`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfind_last('subject string', 'string', `8`) == `8`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfind_last('subject string', 'string', `9`) == null\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfind_last('subject string', 'string', `0`, `14`) == `8`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfind_last('subject string', 'string', `0`, `13`) == null\n```\n\n----------------------------------------\n\nTITLE: Events Format Configuration in YAML\nDESCRIPTION: Demonstrates how to specify the output format for events, using JSON as an example format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/events.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        format: json\n```\n\n----------------------------------------\n\nTITLE: Reading Chainsaw Values from stdin\nDESCRIPTION: This command demonstrates how to pipe values directly to Chainsaw from stdin. The example pipes a simple YAML string that defines 'foo: bar', which will be available to tests via $values.foo.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/values.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"foo: bar\" | chainsaw test --values -\n```\n\n----------------------------------------\n\nTITLE: Testing Error Output Contains String with Chainsaw\nDESCRIPTION: A Chainsaw test that checks if an invalid kubectl command fails and its error output contains a specific string. Tests both error status and error content.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check bad kubectl command\n    try:\n    - script:\n        content: kubectl foo\n        check:\n          # This checks that the result of the content was an error.\n          ($error != null): true\n          # This check below ensures that the string 'top' is found in stderr or else fails\n          (contains($stderr, 'top')): true\n```\n\n----------------------------------------\n\nTITLE: Listing Deployments in Kubernetes Namespace\nDESCRIPTION: Demonstrates how to use x_k8s_list function to retrieve deployments from a specific namespace using a Kubernetes client binding. The function accepts the client, API version, resource type, and namespace as parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/x_k8s_list.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_list($client, 'apps/v1', 'Deployment', 'crossplane-system')\n```\n\n----------------------------------------\n\nTITLE: Converting Null to String\nDESCRIPTION: Illustrates how to_string converts null to the string 'null'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_string.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nto_string(null) == 'null'\n```\n\n----------------------------------------\n\nTITLE: PodLogs with Pod Name Filter\nDESCRIPTION: Example showing how to retrieve logs from pods with a specific name prefix in a Test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # pods that have a name starting with the provided `my-pod`\n        name: my-pod\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Version Command in Bash\nDESCRIPTION: Command syntax for displaying the version information of the Chainsaw tool. This command prints version details with no additional required parameters. The only available flag is -h or --help which provides help information for this command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/version/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw version [flags]\n```\n\n----------------------------------------\n\nTITLE: Using ends_with Function to Check String Suffix\nDESCRIPTION: Demonstrates how to use the ends_with function to check if a string ends with a specific suffix. The function returns true if the first string ends with the second string, and false otherwise.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/ends_with.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nends_with('foobar', 'bar') == `true`\n```\n\nLANGUAGE: go\nCODE:\n```\nends_with('foobar', 'foo') == `false`\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Migrate KUTTL Command Options in Bash\nDESCRIPTION: Shows the available options for the 'chainsaw migrate kuttl' command. Currently, it only includes a help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for kuttl\n```\n\n----------------------------------------\n\nTITLE: String Search from Specific Start Position\nDESCRIPTION: Searches for 'string' starting from position 8. Returns position 8 as the substring starts at that position.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_first.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfind_first('subject string', 'string', `8`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Markdown Test Configuration Structure\nDESCRIPTION: Structured markdown table defining a test step with try-catch blocks. Contains operation specifications for apply, assert, events, and describe commands with bindings and outputs tracking.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/catch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test: `catch`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 2 | 2 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n| 2 | `assert` | 0 | 0 | *No description* |\n\n#### Catch\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `events` | 0 | 0 | *No description* |\n| 2 | `describe` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram for Test Step Execution Flow with Failure\nDESCRIPTION: This diagram illustrates the execution flow of a test step when a failure occurs. It shows how operations in the 'try' block stop at the point of failure, followed by the execution of all operations in the 'catch' block, and then the 'finally' block.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/step/index.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n\n    participant S as Step N\n\n    box Try block\n    participant T1 as Op 1\n    participant T2 as Op N\n    end\n    box Catch block\n    participant C1 as Op 1\n    participant C2 as Op N\n    end\n    box Finally block\n    participant F1 as Op 1\n    participant F2 as Op N\n    end\n\n    S  -->> T1 : try\n    T1 ->>  T2 : success\n    T2 -->> S  : error\n    S  -->> C1 : catch\n    C1 ->>  C2 : done\n    C2 -->> S  : done\n    S  -->> F1 : finally\n    F1 ->>  F2 : done\n    F2 -->> S  : done\n```\n\n----------------------------------------\n\nTITLE: Trimming String Example without Spaces\nDESCRIPTION: Shows that trim operation does not remove spaces when they are not included in the trim character set\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntrim(' foobar ', 'fbr') == ' foobar '\n```\n\n----------------------------------------\n\nTITLE: PodLogs with Namespace Specification\nDESCRIPTION: Example showing how to retrieve logs from pods in a specific namespace in a Test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # pods in the namespace `foo`\n        namespace: foo\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap in Chainsaw Conventional Approach (YAML)\nDESCRIPTION: Shows a YAML manifest for creating a ConfigMap named 'chainsaw-quick-start' with a key-value pair. This file would be named '01-configmap.yaml' in the conventional approach.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/conventional.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trim_space Function Usage in Plaintext\nDESCRIPTION: This example shows how to use the trim_space function to remove leading and trailing spaces from a string. The function takes a string as input and returns the trimmed string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim_space.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrim_space('    foobar  ') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Migrate KUTTL Config Command Options\nDESCRIPTION: Lists the available options for the 'chainsaw migrate kuttl config' command, including cleanup and save flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl_config.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --cleanup   If set, delete converted files\n  -h, --help      help for config\n      --save      If set, converted files will be saved\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Function with Question Mark Pattern in Chainsaw\nDESCRIPTION: Example showing how to use the wildcard function to match a string against a pattern with a question mark wildcard. The function returns true when 'foobar' matches the pattern 'fooba?'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/wildcard.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwildcard('fooba?', 'foobar') == `true`\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Resource Existence with x_k8s_resource_exists\nDESCRIPTION: This code demonstrates how to use the x_k8s_resource_exists function to check if a Deployment resource type is available in a Kubernetes cluster. The function takes a Kubernetes client binding, API version, and resource type as parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_k8s_resource_exists.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_resource_exists($client, 'apps/v1', 'Deployment')\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Test Configuration in YAML\nDESCRIPTION: This YAML configuration defines a Chainsaw test with two steps. Each step includes try and catch blocks with various actions such as running scripts, executing commands, and deleting Kubernetes resources. The test is designed to perform operations and handle potential errors.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/tests/out.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  creationTimestamp: null\n  name: kuttl\nspec:\n  steps:\n  - catch:\n    - podLogs:\n        name: nginx\n    name: step-01\n    try:\n    - script:\n        content: echo \"hello world\"\n        skipLogOutput: true\n    - command:\n        args:\n        - hello world\n        entrypoint: echo\n        skipLogOutput: true\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          name: my-pod\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          labels:\n            app: nginx\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n    - script:\n        content: echo hello\n  - catch:\n    - script:\n        content: sleep 1\n    name: step-02\n    try:\n    - script:\n        content: echo \"hello world\"\n        skipLogOutput: true\n    - command:\n        args:\n        - hello world\n        entrypoint: echo\n        skipLogOutput: true\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          name: my-pod\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          labels:\n            app: nginx\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n    - script:\n        content: echo hello\n```\n\n----------------------------------------\n\nTITLE: Catch Statement Operations List - Markdown\nDESCRIPTION: List of supported operations that can be used within a catch statement block, including commands, delete operations, and various helper functions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/step/catch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Command](../operations/command.md)\n- [Delete](../operations/delete.md)\n- [Describe](../operations/helpers/describe.md)\n- [Events](../operations/helpers/events.md)\n- [Get](../operations/helpers/get.md)\n- [Pod logs](../operations/helpers/logs.md)\n- [Script](../operations/script.md)\n- [Sleep](../operations/sleep.md)\n- [Wait](../operations/helpers/wait.md)\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources via URL in Chainsaw Tests\nDESCRIPTION: Illustrates how to reference resources from a remote URL in Chainsaw tests. This uses the hashicorp/go-getter library to download content from remote services.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/general/references.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/step/configmap.yaml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trim_left Function without Spaces in Character Set\nDESCRIPTION: Example showing that trim_left only removes characters that match exactly with the second argument. Since the space character is not included in the second argument, no trimming occurs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim_left.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntrim_left(' foobar ', 'fbr') == ' foobar '\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Resource Existence with x_k8s_exists Function\nDESCRIPTION: This example demonstrates how to use the x_k8s_exists function to check if a Deployment resource exists in the crossplane-system namespace. It uses a Kubernetes client binding and specifies the API version, resource kind, namespace, and resource name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_k8s_exists.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_exists($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Test Execution Flow Without Failures in Mermaid\nDESCRIPTION: A sequence diagram showing the normal test execution flow where all steps execute successfully, followed by cleanup in reverse order of creation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/spec/index.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant T as Test\n    participant S1 as Step 1\n    participant S2 as Step 2\n    participant S3 as Step 3\n\n    T  ->> S1: execute\n    S1 ->> S2: execute\n    S2 ->> S3: execute\n\n    S3 -->> S2: cleanup\n    S2 -->> S1: cleanup\n    S1 -->> T: cleanup\n```\n\n----------------------------------------\n\nTITLE: Trimming Left Characters with Space in Character Set\nDESCRIPTION: This example demonstrates the trim_left function removing characters from the left side of a string when the space character is included in the character set to trim. It shows that 'fbr ' (including a space) as the second parameter successfully removes the leading space.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim_left.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntrim_left(' foobar ', 'fbr ') == 'oobar '\n```\n\n----------------------------------------\n\nTITLE: Available Options for Chainsaw Export Schemas Command\nDESCRIPTION: This snippet shows the available options for the 'chainsaw export schemas' command. Currently, it only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_export_schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for schemas\n```\n\n----------------------------------------\n\nTITLE: Matching String with Asterisk Wildcard\nDESCRIPTION: This snippet demonstrates the use of the wildcard function with an asterisk (*) wildcard. It checks if 'foobar' matches the pattern 'foo*'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/wildcard.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwildcard('foo*', 'foobar') == `true`\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw Tests with Label Selectors\nDESCRIPTION: This bash command demonstrates how to run Chainsaw tests filtered by a label selector. It will only execute tests that have the label 'foo=bar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/label-selectors.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --selector foo=bar\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention for Chainsaw Manifests\nDESCRIPTION: Demonstrates the required file naming pattern for Chainsaw manifest files. The pattern includes step index, operation type, and file extension.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/conventional.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<step index>-<name|assert|errors>.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Version Command\nDESCRIPTION: This command prints the version information for the Chainsaw tool. It can be run with optional flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_version.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchainsaw version [flags]\n```\n\n----------------------------------------\n\nTITLE: Patching Resources with URL Reference in Kubernetes\nDESCRIPTION: Example of patching Kubernetes resources using a URL reference to fetch the patch configuration.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/patch.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram for Successful Test Step Execution Flow\nDESCRIPTION: This diagram illustrates the sequential execution flow of a test step when no failures occur. It shows how operations in the 'try' block execute successfully, followed by the 'finally' block operations, before moving to the next step.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/step/index.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n\n    participant S as Step N\n\n    box Try block\n    participant T1 as Op 1\n    participant T2 as Op N\n    end\n    box Catch block\n    end\n    box Finally block\n    participant F1 as Op 1\n    participant F2 as Op N\n    end\n    participant S1 as Step N+1\n\n    S  -->> T1 : try\n    T1 ->>  T2 : success\n    T2 -->> S  : done\n    S  -->> F1 : finally\n    F1 ->>  F2 : done\n    F2 -->> S  : done\n    S  -->> S1 : next step\n```\n\n----------------------------------------\n\nTITLE: Trimming Left Characters without Space in Character Set\nDESCRIPTION: This example shows that trim_left does not remove the leading space when the space character is not included in the character set to trim. When using 'fbr' (without space) as the second parameter, the leading space remains.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim_left.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntrim_left(' foobar ', 'fbr') == ' foobar '\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Docs Command\nDESCRIPTION: Command syntax for generating reference documentation for the Chainsaw project. The command includes flags for controlling timestamp inclusion, output path, and generating a website version.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/docs/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Null Type Check in JavaScript\nDESCRIPTION: Shows how to verify if a value is of type null using the type operator.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/type.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype(null) == 'null'\n```\n\n----------------------------------------\n\nTITLE: Defining Lookup Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the lookup function, which takes an object or array as the first argument and a string or number as the second argument.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/lookup.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`lookup(object|array, string|number)`\n```\n\n----------------------------------------\n\nTITLE: Operation Type Definition in Kubernetes CRD\nDESCRIPTION: Defines the Operation type which specifies a single operation with common base fields and various operation-specific fields like apply, assert, command etc. Only one action is permitted per operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nOperation:\n  type: object\n  properties:\n    OperationBase:\n      type: object\n      x-kubernetes-inline: true\n    apply:\n      $ref: \"#/definitions/Apply\"\n    assert:\n      $ref: \"#/definitions/Assert\"\n    command:\n      $ref: \"#/definitions/Command\"\n    create:\n      $ref: \"#/definitions/Create\"\n    delete:\n      $ref: \"#/definitions/Delete\"\n    describe:\n      $ref: \"#/definitions/Describe\"\n    error:\n      $ref: \"#/definitions/Error\"\n    events:\n      $ref: \"#/definitions/Events\"\n    get:\n      $ref: \"#/definitions/Get\"\n    patch:\n      $ref: \"#/definitions/Patch\"\n    podLogs:\n      $ref: \"#/definitions/PodLogs\"\n    proxy:\n      $ref: \"#/definitions/Proxy\"\n    script:\n      $ref: \"#/definitions/Script\"\n    sleep:\n      $ref: \"#/definitions/Sleep\"\n    update:\n      $ref: \"#/definitions/Update\"\n    wait:\n      $ref: \"#/definitions/Wait\"\n```\n\n----------------------------------------\n\nTITLE: Using Heredoc to Provide Chainsaw Values\nDESCRIPTION: This command shows how to use a bash heredoc to provide multiple lines of YAML values to Chainsaw. The values defined between EOF markers will be available to tests via the $values binding.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/values.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --values - <<EOF\nfoo: bar\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Chainsaw Test Structure in YAML\nDESCRIPTION: Shows the basic structure of a Chainsaw test specification with metadata, configuration options, and steps. Includes settings for concurrency, bindings, timeouts, and different step types.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/spec/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # test configuration\n  concurrent: false\n  bindings:\n  - name: foo\n    value: bar\n  timeouts:\n    apply: 1s\n    assert: 2m\n    delete: 30s\n  ...\n  steps:\n  # step 1\n  - try: ...\n  # step 2\n  - try: ...\n    catch: ...\n  # step 3\n  - try: ...\n    catch: ...\n    finally: ...\n```\n\n----------------------------------------\n\nTITLE: Asserting ConfigMap in Chainsaw Conventional Approach (YAML)\nDESCRIPTION: Demonstrates an assertion statement for checking the content of the previously created ConfigMap. This file would be named '02-assert.yaml' in the conventional approach.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/conventional.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Testing Output Contains String with Chainsaw\nDESCRIPTION: A Chainsaw test that checks if the output of kubectl version contains the string '1.28'. Uses the contains() JMESPath filter to verify the presence of specific content.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl version\n        check:\n          # This check ensures that the string '1.28' is found\n          # in stdout or else fails\n          (contains($stdout, '1.28')): true\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Building and Pushing Images\nDESCRIPTION: This workflow builds and pushes Docker images for the Chainsaw project. It's triggered on push events to specific branches and tags. It uses custom actions for building multi-arch images and signing them.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/tests/out-save.txt#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and Push Images\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"release-*\"\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push-images:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Prepare\n        id: prep\n        run: |\n          VERSION=noop\n          if [[ $GITHUB_REF == refs/tags/* ]]; then\n            VERSION=${GITHUB_REF#refs/tags/}\n          elif [[ $GITHUB_REF == refs/heads/* ]]; then\n            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')\n            if [ \"${{ github.event.repository.default_branch }}\" = \"$VERSION\" ]; then\n              VERSION=latest\n            fi\n          fi\n          echo \"version=${VERSION}\" >> $GITHUB_OUTPUT\n          echo \"build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')\" >> $GITHUB_OUTPUT\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          file: ./Dockerfile\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            kyverno/chainsaw:${{ steps.prep.outputs.version }}\n            ghcr.io/kyverno/chainsaw:${{ steps.prep.outputs.version }}\n          labels: |\n            org.opencontainers.image.source=${{ github.event.repository.html_url }}\n            org.opencontainers.image.created=${{ steps.prep.outputs.build_date }}\n            org.opencontainers.image.revision=${{ github.sha }}\n\n      - name: Sign image\n        uses: ./.github/actions/sign-images\n        with:\n          registry: docker.io\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n          image: kyverno/chainsaw:${{ steps.prep.outputs.version }}\n```\n\n----------------------------------------\n\nTITLE: Comparing Uppercase String Transformation in Chainsaw\nDESCRIPTION: This code snippet demonstrates the use of the upper() function to convert a string to uppercase and then compares the result with an expected uppercase string. The equality operator (==) is used to check if the transformation was successful.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/upper.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nupper('foobar') == 'FOOBAR'\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Renovate Command\nDESCRIPTION: The renovate command is used to upgrade Chainsaw resources. It supports the 'config' subcommand specifically for upgrading Chainsaw configuration to the latest version. The -h or --help flag can be used to display help information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/renovate/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw renovate [flags]\nchainsaw renovate [command]\n```\n\n----------------------------------------\n\nTITLE: Equal String Comparison Example\nDESCRIPTION: Demonstrates comparing two equal strings ('a' and 'a') which returns 0\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/compare.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncompare('a', 'a') == `0`\n```\n\n----------------------------------------\n\nTITLE: Detailing Chainsaw Test Step Operations in Markdown\nDESCRIPTION: Markdown tables specifying the operations within the try and finally blocks of a Chainsaw test step. The try block includes apply and assert operations, while the finally block contains events and script operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/finally/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n| 2 | `assert` | 0 | 0 | *No description* |\n\n#### Finally\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `events` | 0 | 0 | *No description* |\n| 2 | `script` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zip Function Usage with String Arrays\nDESCRIPTION: Example showing how the zip function combines elements from two arrays into an array of arrays, where each inner array contains corresponding elements from the input arrays.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/zip.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nzip(['a', 'b'], [`1`, `2`]) == [['a', `1`], ['b', `2`]]\n```\n\n----------------------------------------\n\nTITLE: Test Steps Table in Markdown\nDESCRIPTION: Markdown table showing the test step structure with information about bindings, try/catch blocks, and cleanup operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 3 | 0 | 0 | 0 |\n```\n\n----------------------------------------\n\nTITLE: Pulling Chainsaw Docker Image\nDESCRIPTION: Command to pull the Chainsaw Docker image from GitHub Container Registry. Replace <version> with the specific version you want to use.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/kyverno/chainsaw:<version>\n```\n\n----------------------------------------\n\nTITLE: Dividing Duration Values in Kyverno Chainsaw\nDESCRIPTION: Shows how to divide time duration values using the divide function. This example divides 1 hour by 2 hours to get the ratio 0.5.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/divide.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide('1h', '2h') == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Converting Number to String in Chainsaw\nDESCRIPTION: This snippet demonstrates converting a numeric value to a string using the to_string function. It shows that the number 2 is converted to the string '2'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_string.md#2025-04-21_snippet_0\n\nLANGUAGE: chainsaw\nCODE:\n```\nto_string(`2`) == '2'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Chainsaw Tests\nDESCRIPTION: This workflow runs tests for the Chainsaw project. It sets up Go, checks out the code, runs tests, and uploads coverage reports. It's triggered on push and pull request events.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/tests/out-save.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Tests\non:\n  push:\n    branches:\n      - main\n      - release-*\n  pull_request:\n    branches:\n      - main\n      - release-*\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: 1.21.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          make test\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./cover.out\n          flags: unittests\n```\n\n----------------------------------------\n\nTITLE: Basic String Replacement with Two Occurrences\nDESCRIPTION: This example shows how to replace all occurrences of a substring ('oo') with another substring ('ii') in a string ('foobar'), resulting in 'fiibar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/replace.md#2025-04-21_snippet_0\n\nLANGUAGE: generic\nCODE:\n```\nreplace('foobar', 'oo', 'ii') == 'fiibar'\n```\n\n----------------------------------------\n\nTITLE: Function Signature for object_from_lists in Markdown\nDESCRIPTION: Defines the signature for the object_from_lists function that takes two array parameters and returns an object. The function combines arrays of keys and values into a key-value object.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/object_from_lists.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`object_from_lists(array, array)`\n```\n\n----------------------------------------\n\nTITLE: Cloning Chainsaw Repository\nDESCRIPTION: Command to clone the Chainsaw Git repository for building from source. This is the first step when compiling from source code.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/kyverno/chainsaw.git\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw with Nix on Non-NixOS\nDESCRIPTION: Command to install Chainsaw using the Nix package manager on non-NixOS systems. This uses the nix-env command with the nixpkgs package identifier.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -iA nixpkgs.kyverno-chainsaw\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Test File with JSON Schema in VS Code\nDESCRIPTION: Example showing how to add a JSON schema reference to a Test resource YAML file for validation and autocompletion in VS Code. The schema is referenced from GitHub and helps validate the structure of a Chainsaw test.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/json-schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\nspec:\n  steps:\n  - try:\n    - apply:\n        file: configmap.yaml\n    - assert:\n        file: configmap-assert.yaml\n```\n\n----------------------------------------\n\nTITLE: Step-3 Test Operations\nDESCRIPTION: Final test step with command execution and assertion\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/outputs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncommand\n```\n\nLANGUAGE: yaml\nCODE:\n```\nassert\n```\n\n----------------------------------------\n\nTITLE: Running chainsaw build docs Command in Bash\nDESCRIPTION: Command to build documentation for Chainsaw tests. It automatically discovers tests and documents steps and operations in try, catch, and finally statements.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/test-docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw build docs --test-dir path/to/chainsaw/tests\n```\n\n----------------------------------------\n\nTITLE: Multiplying Quantities in Chainsaw\nDESCRIPTION: This snippet illustrates multiplying a quantity (in this case, 1 mebibyte) by a number using the multiply function. It shows that multiplying 1Mi by 2 results in 2Mi.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/multiply.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmultiply('1Mi', `2`) == '2Mi'\n```\n\n----------------------------------------\n\nTITLE: Less Than String Comparison Example\nDESCRIPTION: Demonstrates comparing two strings where first is less than second ('a' and 'b') which returns -1\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/compare.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncompare('a', 'b') == `-1`\n```\n\n----------------------------------------\n\nTITLE: Loading Test Configuration Log\nDESCRIPTION: Console output showing version information and an attempt to load a configuration file with incorrect kind from a test data directory.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/wrong_kind_config.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion: ---\nLoading config (../../../testdata/commands/test/config/wrong_kind_config.yaml)...\n```\n\n----------------------------------------\n\nTITLE: Round Function Signature in Markdown\nDESCRIPTION: Defines the signature of the round function which takes two number parameters. The first parameter is the number to be rounded, and the second parameter specifies the decimal places to round to.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/round.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`round(number, number)`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bash Completion\nDESCRIPTION: Commands to enable Chainsaw shell completion in Bash, including options for current session, persistent configuration via .bashrc, and system-wide installation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource <(chainsaw completion bash)\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 'source <(chainsaw completion bash)' >> ~/.bashrc\n```\n\nLANGUAGE: bash\nCODE:\n```\n# On Linux\nchainsaw completion bash > /etc/bash_completion.d/chainsaw\n\n# On macOS with Homebrew\nchainsaw completion bash > $(brew --prefix)/etc/bash_completion.d/chainsaw\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Zipping Function in JavaScript\nDESCRIPTION: This snippet shows the expected behavior of a zip function that takes two arrays and returns a new array of paired elements. It illustrates that when arrays ['a', 'b'] and [`1`, `2`] are zipped together, the result is an array of pairs [['a', `1`], ['b', `2`]].\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/zip.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nzip(['a', 'b'], [`1`, `2`]) == [['a', `1`], ['b', `2`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Global Bindings in Kyverno Chainsaw Test\nDESCRIPTION: Sets up a global binding 'a' with a value of 1. This binding can be used throughout the test steps.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/bindings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\na: 1\n```\n\n----------------------------------------\n\nTITLE: Install Chainsaw GitHub Action (Pinned Version)\nDESCRIPTION: This snippet demonstrates how to install a specific version of Chainsaw using the GitHub Action. It specifies the action and the desired Chainsaw version in the `with` section.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/cicd/gh-action.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          release: v0.0.9\n      - name: Check install\n        run: chainsaw version\n```\n```\n\n----------------------------------------\n\nTITLE: Multiplying Numbers in Chainsaw\nDESCRIPTION: This snippet demonstrates how to multiply two numbers using the multiply function. It shows that multiplying 1 by 2 results in 2.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/multiply.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmultiply(`1`, `2`) == `2`\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from JavaScript Object\nDESCRIPTION: This snippet demonstrates how to extract values from a JavaScript object using a values() function. The function returns an array containing the values from the object in order, which is then compared to the expected output array.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/values.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvalues({bar:'bam',foo:'baz'}) == ['bam','baz']\n```\n\n----------------------------------------\n\nTITLE: Adding Quantities with Kyverno Chainsaw\nDESCRIPTION: Illustrates the addition of two quantities using the 'add' function. The function takes quantities in string format (e.g., '1Mi' for 1 Mebibyte) and returns the sum of the quantities.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/add.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nadd('1Mi', '2Mi') == '3Mi'\n```\n\n----------------------------------------\n\nTITLE: Defining the parse_json Function Signature in Markdown\nDESCRIPTION: Specifies the function signature for parse_json, which takes a string parameter and returns the parsed JSON value of appropriate type.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/parse_json.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`parse_json(string)`\n```\n\n----------------------------------------\n\nTITLE: Checking Null Type in JavaScript\nDESCRIPTION: This example shows how to use the 'type' function to check if a value is null.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/type.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype(null) == 'null'\n```\n\n----------------------------------------\n\nTITLE: Configuring Templating Options with YAML\nDESCRIPTION: This YAML snippet defines a configuration for the Chainsaw application, specifically setting the templating option. The configuration sets 'enabled' to false, which means that resources will not be considered for templating. It is part of the API version v1alpha2.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/templating.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  templating:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Install Chainsaw GitHub Action (Default Version)\nDESCRIPTION: This snippet demonstrates installing Chainsaw using the GitHub Action with the default version.  It uses the action without specifying a release version, so it will use the default version specified within the action itself.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/cicd/gh-action.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\njobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n      - name: Check install\n        run: chainsaw version\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Test Structure in YAML\nDESCRIPTION: Outlines the structure of a deployment test with a single step. The step includes two operations: apply and assert. This configuration is likely used by Chainsaw to execute Kubernetes deployment tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/deployment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `deployment`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 2 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n| 2 | `assert` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Defining Step Operations in Markdown Table\nDESCRIPTION: This snippet defines the operations for 'step-1' using a markdown table. It specifies a single assert operation with no bindings or outputs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/namespace-template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `assert` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Chainsaw Tests\nDESCRIPTION: This snippet shows the configuration settings and execution output for a Chainsaw test run. It includes parameters such as test file, directories, report settings, timeouts, and execution options. The output also shows the test loading process and results summary.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/all_flags.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nVersion: ---\nLoading default configuration...\n- Using test file: custom-test.yaml\n- TestDirs [.]\n- SkipDelete false\n- FailFast false\n- ReportFormat 'XML'\n- ReportName 'foo'\n- ReportPath '../../../.temp'\n- Namespace 'bar'\n- FullName true\n- IncludeTestRegex '^.*$'\n- ExcludeTestRegex '^.*$'\n- ApplyTimeout 1m40s\n- AssertTimeout 1m40s\n- CleanupTimeout 1m40s\n- DeleteTimeout 1m40s\n- ErrorTimeout 1m40s\n- ExecTimeout 1m40s\n- DeletionPropagationPolicy Background\n- Parallel 24\n- RepeatCount 12\n- ForceTerminationGracePeriod 5s\n- Template true\n- NoCluster false\n- PauseOnFailure false\nLoading tests...\nLoading values...\nRunning tests...\nTests Summary...\n- Passed  tests 0\n- Failed  tests 0\n- Skipped tests 0\nSaving report...\nDone.\n```\n\n----------------------------------------\n\nTITLE: Subtracting Time Durations in Kyverno Chainsaw\nDESCRIPTION: Shows how to subtract time durations using the subtract function. The example demonstrates subtracting one hour from two hours to get a result of one hour.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/subtract.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract('2h', '1h') == '1h'\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with String-Encoded Numbers in Markdown\nDESCRIPTION: This code snippet calculates the average of three string-encoded numeric values (10, 15, and 20) and compares the result to 15. It demonstrates string representation of numbers and average calculation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/avg.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\navg([`10`,`15`,`20`]) == `15`\n```\n\n----------------------------------------\n\nTITLE: Multiplying Two Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates multiplying two numeric values using the multiply function. The function takes two number arguments and returns their product.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/multiply.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmultiply(`1`, `2`) == `2`\n```\n\n----------------------------------------\n\nTITLE: x509_decode Function Signature in Markdown\nDESCRIPTION: Defines the function signature for x509_decode which takes a string parameter. The function converts X.509 certificate data into a structured object format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x509_decode.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`x509_decode(string)`\n```\n\n----------------------------------------\n\nTITLE: Step-2 Test Operations\nDESCRIPTION: Second test step involving script execution and assertion\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/outputs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript\n```\n\nLANGUAGE: yaml\nCODE:\n```\nassert\n```\n\n----------------------------------------\n\nTITLE: Defining the label_match Function Signature in Markdown\nDESCRIPTION: Specifies the signature for the label_match function that takes two object arguments. The function likely compares or matches labels between two Kubernetes objects.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/label_match.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`label_match(object, object)`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Test Step Configuration\nDESCRIPTION: Configures a test step with script and assert operations, specifying minimal bindings and outputs\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/test-info/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: step-1\n    try:\n      - script: ...\n      - assert: ...\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variable Value in Kyverno Chainsaw\nDESCRIPTION: This expression checks if the environment variable 'MY_ENV_VAR' equals the string 'foo'. This is commonly used in Kyverno Chainsaw tests to incorporate environment variables into test conditions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/env.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nenv('MY_ENV_VAR') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Testing String Concatenation with concat() Function in Kyverno\nDESCRIPTION: This snippet demonstrates how to use the concat() function to join two strings together and compare the result using the equality operator. It concatenates the strings 'foo' and 'bar' and compares the result to 'foobar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/concat.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nconcat('foo', 'bar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Function Signature for group_by Operation\nDESCRIPTION: Defines the function signature for the group_by operation that takes an array and an expression reference as parameters to group array elements.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/group_by.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngroup_by(array, expref)\n```\n\n----------------------------------------\n\nTITLE: Multiplying Durations in Chainsaw\nDESCRIPTION: This example shows how to multiply a duration by a number using the multiply function. It multiplies 1 hour by 2, resulting in 2 hours.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/multiply.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmultiply('1h', `2`) == '2h'\n```\n\n----------------------------------------\n\nTITLE: Exporting Chainsaw JSON Schemas Locally via Command Line\nDESCRIPTION: Command to export Chainsaw JSON schemas to a local directory if you prefer not to reference them from GitHub. This allows for offline schema validation and autocompletion.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/json-schemas.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw export schemas <local path>\n```\n\n----------------------------------------\n\nTITLE: Checking String Type in JavaScript\nDESCRIPTION: This example illustrates how to use the 'type' function to check if a value is of string type.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/type.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype('foobar') == 'string'\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Test Configuration and Execution Results\nDESCRIPTION: This snippet shows the configuration settings for a Chainsaw test run and the summary of test results. It includes various timeout settings, test selection criteria, and execution options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/with_test_dirs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion: ---\nLoading default configuration...\n- Using test file: chainsaw-test\n- TestDirs [.. .]\n- SkipDelete false\n- FailFast false\n- Namespace ''\n- FullName false\n- IncludeTestRegex ''\n- ExcludeTestRegex ''\n- ApplyTimeout 5s\n- AssertTimeout 30s\n- CleanupTimeout 30s\n- DeleteTimeout 15s\n- ErrorTimeout 30s\n- ExecTimeout 5s\n- DeletionPropagationPolicy Background\n- Template true\n- NoCluster false\n- PauseOnFailure false\nLoading tests...\nLoading values...\nRunning tests...\nTests Summary...\n- Passed  tests 0\n- Failed  tests 0\n- Skipped tests 0\nDone.\n```\n\n----------------------------------------\n\nTITLE: Assert Operation with URL\nDESCRIPTION: Example of using assert operation with a remote URL to fetch assertion definitions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/assert.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Test Structure in Markdown\nDESCRIPTION: Markdown table defining the structure of a Chainsaw test with a single step that includes try and finally blocks. The step contains apply and assert operations in the try block, and events and script operations in the finally block.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/finally/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 2 | 0 | 2 | 0 |\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Server Version Test in YAML\nDESCRIPTION: This YAML configuration defines a test named 'k8s-server-version'. It includes a binding for the server version and a single step with a script operation. The version is obtained using a custom function 'x_k8s_server_version'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/k8s-server-version/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `k8s-server-version`\n\n## Bindings\n\n| # | Name | Value |\n|:-:|---|---|\n| 1 | `version` | \"(x_k8s_server_version($config))\" |\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `script` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Matching String with Question Mark Wildcard\nDESCRIPTION: This snippet shows the use of the wildcard function with a question mark (?) wildcard. It verifies if 'foobar' matches the pattern 'fooba?'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/wildcard.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwildcard('fooba?', 'foobar') == `true`\n```\n\n----------------------------------------\n\nTITLE: Performing Modulo Operation in Kyverno\nDESCRIPTION: This snippet demonstrates the use of the modulo function in Kyverno to calculate the remainder of 10 divided by 3. The result is compared to 1 for equality.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/modulo.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nmodulo(`10`, `3`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Max_by Function Signature in Markdown\nDESCRIPTION: Defines the function signature for max_by, which takes an array and an expression reference (expref) as parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/max_by.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`max_by(array, expref)`\n```\n\n----------------------------------------\n\nTITLE: Using the abs Function in Kyverno Chainsaw\nDESCRIPTION: Demonstrates how to use the abs function to get the absolute value of a negative number. The function takes a numeric input and returns its absolute value, removing any negative sign.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/abs.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nabs(`-1`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Build Command Options\nDESCRIPTION: Available command line options for the chainsaw build command. Currently only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_build.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: Configuring Chainsaw Test Framework Settings\nDESCRIPTION: Defines a custom configuration for the Chainsaw test framework, including cleanup behavior, test discovery patterns, execution parameters, reporting format, and various timeout settings. The configuration uses schema validation and sets specific timeouts for different operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/renovate/config/v1alpha1-custom.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/configuration-chainsaw-v1alpha2.json\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: custom-config\nspec:\n  cleanup:\n    skipDelete: true\n  discovery:\n    excludeTestRegex: exclude-*\n    fullName: true\n    includeTestRegex: include-*\n    testFile: custom-test.yaml\n  execution:\n    failFast: true\n    forceTerminationGracePeriod: 10s\n    parallel: 4\n  report:\n    format: JSON\n    name: custom-report\n  timeouts:\n    assert: 10s\n    cleanup: 5s\n    delete: 5s\n    error: 10s\n    exec: 10s\n```\n\n----------------------------------------\n\nTITLE: Function Signature for from_items in Kyverno Chainsaw\nDESCRIPTION: The signature specifies that from_items takes an array of arrays as input parameter. This function converts an array of key-value pairs into an object format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/from_items.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`from_items(array[array])`\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Test Configuration and Results\nDESCRIPTION: This snippet shows the configuration settings for a Chainsaw test run, including test file, directories, timeouts, and other options. It also displays the summary of test results, indicating the number of passed, failed, and skipped tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/default.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion: ---\nLoading default configuration...\n- Using test file: chainsaw-test\n- TestDirs [.]\n- SkipDelete false\n- FailFast false\n- Namespace ''\n- FullName false\n- IncludeTestRegex ''\n- ExcludeTestRegex ''\n- ApplyTimeout 5s\n- AssertTimeout 30s\n- CleanupTimeout 30s\n- DeleteTimeout 15s\n- ErrorTimeout 30s\n- ExecTimeout 5s\n- DeletionPropagationPolicy Background\n- Template true\n- NoCluster false\n- PauseOnFailure false\nLoading tests...\nLoading values...\nRunning tests...\nTests Summary...\n- Passed  tests 0\n- Failed  tests 0\n- Skipped tests 0\nDone.\n```\n\n----------------------------------------\n\nTITLE: Reversing an Array with reverse() Function\nDESCRIPTION: Example showing how to reverse the order of elements in an array using the reverse() function. The function takes an array of strings and returns a new array with elements in reverse order.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/reverse.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreverse([`1`, `2`, `3`, `4`]) == [`4`, `3`, `2`, `1`]\n```\n\n----------------------------------------\n\nTITLE: Performing Ceiling Operation in Kyverno\nDESCRIPTION: This snippet demonstrates the use of the ceil function in Kyverno to round up a decimal number to the nearest integer. The example shows that ceil(1.9) equals 2.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/ceil.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nceil(`1.9`) == `2`\n```\n\n----------------------------------------\n\nTITLE: Defining the time_between Function Signature in Markdown\nDESCRIPTION: Function signature for time_between that takes three string parameters, representing a time to check, start time, and end time, all in RFC3339 format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_between.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_between(string, string, string)`\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variable Value\nDESCRIPTION: Demonstrates how to use the env() function to retrieve and compare an environment variable value. The function takes a string parameter representing the environment variable name and returns its value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/env.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenv('MY_ENV_VAR') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Build Command\nDESCRIPTION: Base command syntax for running chainsaw build with optional flags. Used for building components in the chainsaw e2e testing tool.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_build.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw build [flags]\n```\n\n----------------------------------------\n\nTITLE: String to Boolean Function Signature\nDESCRIPTION: Function signature for converting string values to boolean, accepting a string parameter and returning a boolean value. Handles various string representations like 'True', 'TruE', 'False', 'FAlse', 'faLSE' in a case-insensitive manner.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_boolean.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nto_boolean(string)\n```\n\n----------------------------------------\n\nTITLE: Available Options for chainsaw create test Command\nDESCRIPTION: The available flags and options for the 'chainsaw create test' command, including options to add descriptions, force overwrite existing tests, get help, and save the created test.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_create_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --description   If set, adds description when applicable (default true)\n      --force         If set, existing test will be deleted if needed\n  -h, --help          help for test\n      --save          If set, created test will be saved\n```\n\n----------------------------------------\n\nTITLE: Negating Output Contains Check with Chainsaw\nDESCRIPTION: Example showing how to check that command output does NOT contain a specific string. This test ensures kubectl version output does not contain '1.25'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- script:\n    content: kubectl version\n    check:\n      # This check ensures that the string '1.25' is NOT found\n      # in stdout or else fails\n      (contains($stdout, '1.25')): false\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration - Bash\nDESCRIPTION: This Bash command shows how to specify a custom configuration file when running Chainsaw, directing it to a specific YAML file.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/file.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"chainsaw test --config path/to/your/config.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Migrate Command Usage and Options\nDESCRIPTION: This snippet shows the usage instructions, available subcommands, and flags for the 'chainsaw migrate' command. It includes the main command syntax, the 'kuttl' subcommand for migrating KUTTL resources, and the help flag option.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw migrate [flags]\n  chainsaw migrate [command]\n\nAvailable Commands:\n  kuttl       Migrate KUTTL resources to Chainsaw\n\nFlags:\n  -h, --help   help for migrate\n\nUse \"chainsaw migrate [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: String Split Operation with Custom Delimiter\nDESCRIPTION: Example showing string split operation with '|-|' as delimiter and limit of 3. The function splits the string into an array with the specified delimiter while preserving remaining delimiters after reaching the limit.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/split.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsplit('average|-|min|-|max|-|mean|-|median', '|-|', `3`) == ['average', 'min', 'max', 'mean|-|median']\n```\n\n----------------------------------------\n\nTITLE: Absolute Value Calculation in Chainsaw\nDESCRIPTION: Shows how to calculate the absolute value of -1 using the abs() function with backtick notation for values.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/abs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nabs(`-1`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Defining path_canonicalize Function Signature in Markdown\nDESCRIPTION: Function signature for path_canonicalize which takes a string parameter and returns a normalized path by removing excess slashes.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/path_canonicalize.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npath_canonicalize(string)\n```\n\n----------------------------------------\n\nTITLE: Converting String to Number Example\nDESCRIPTION: Demonstrates converting a string representation of a number to its numeric value. The string '1.0' is parsed to the integer 1.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_number.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nto_number('1.0') == `1`\n```\n\n----------------------------------------\n\nTITLE: Available Options for Chainsaw Export Command\nDESCRIPTION: The options that can be used with the chainsaw export command. Currently only includes the help flag (-h or --help) which displays help information for the command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for export\n```\n\n----------------------------------------\n\nTITLE: Encoding and Comparing a String with Base64 in Bash\nDESCRIPTION: This snippet demonstrates using the base64_encode function to encode the string 'foo' and comparing the result with its expected base64 representation 'Zm9vCg=='. This pattern is commonly used for data encoding validation in shell scripts.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/base64_encode.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64_encode('foo') == 'Zm9vCg=='\n```\n\n----------------------------------------\n\nTITLE: Using keys() function to extract object keys in JMESPath\nDESCRIPTION: Demonstrates how to use the keys() function to extract all keys from a JSON object and return them as an array. The function takes an object as input and returns the keys in alphabetical order.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/keys.md#2025-04-21_snippet_0\n\nLANGUAGE: jmespath\nCODE:\n```\nkeys({bar:'bam',foo:'baz'}) == ['bar','foo']\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Configuration in YAML for Kyverno\nDESCRIPTION: This YAML snippet defines a Chainsaw configuration for Kyverno. It specifies the API version, kind, metadata, and report name. The configuration is set up as a default with a report named 'chainsaw-report'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/renovate/config/v1alpha1-default.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/configuration-chainsaw-v1alpha2.json\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: default\nspec:\n  report:\n    name: chainsaw-report\n```\n\n----------------------------------------\n\nTITLE: Testing Base64 Decode Operation\nDESCRIPTION: Tests whether base64 decoding of 'Zm9vCg==' equals the string 'foo'. Demonstrates basic string comparison after base64 decoding.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/base64_decode.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nbase64_decode('Zm9vCg==') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Extracting Object Keys in JavaScript\nDESCRIPTION: This snippet demonstrates extracting keys from a JavaScript object using a 'keys' function and comparing the resulting array with an expected array of keys. The keys are alphabetically sorted in the output.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/keys.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nkeys({bar:'bam',foo:'baz'}) == ['bar','foo']\n```\n\n----------------------------------------\n\nTITLE: Exact Position Search\nDESCRIPTION: Shows searching from the exact position where the substring occurs\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_last.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfind_last('subject string', 'string', `8`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sort Function Usage in Kyverno Chainsaw\nDESCRIPTION: This example shows how to use the 'sort' function to sort an array of strings in ascending order. The function accepts an array of strings or numbers and returns a new sorted array.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/sort.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nsort(['b', 'a', 'c']) == ['a', 'b', 'c']\n```\n```\n\n----------------------------------------\n\nTITLE: Running Chainsaw Fish Completion Command in Bash\nDESCRIPTION: The command to generate Fish shell autocompletion script for Chainsaw. This command accepts optional flags for help and to disable completion descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_fish.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion fish [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining time_utc Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the time_utc function, which takes a string parameter and returns a UTC time.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_utc.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_utc(string)`\n```\n\n----------------------------------------\n\nTITLE: Using contains() with strings for substring matching\nDESCRIPTION: Examples showing how to use the 'contains' function with string inputs. The function returns true if the first string contains the second string as a substring.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/contains.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontains('foobar', 'bar') == `true`\n```\n\nLANGUAGE: text\nCODE:\n```\ncontains('foobar', 'not') == `false`\n```\n\n----------------------------------------\n\nTITLE: PodLogs with Label Selector\nDESCRIPTION: Example demonstrating how to use label selectors to target specific pods for log retrieval in a Test resource.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/logs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # match pods using a label selector query\n        selector: app=my-app\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno Chainsaw Test Resource in YAML\nDESCRIPTION: This YAML snippet defines a Test resource for Kyverno Chainsaw. It includes metadata, a description, and a series of test steps with various operations such as apply, assert, error, delete, and script execution.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/create/test/out.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  creationTimestamp: null\n  name: test\nspec:\n  description: test description\n  steps:\n  - catch:\n    - description: sample events collector\n      events:\n        name: foo\n    - description: sample pod logs collector\n      podLogs:\n        selector: app=foo\n    description: sample step 1\n    finally:\n    - description: sample sleep operation\n      sleep:\n        duration: 5s\n    name: step 1\n    try:\n    - apply:\n        file: resources.yaml\n      description: sample apply operation\n    - assert:\n        file: assert.yaml\n      description: sample assert operation\n    - description: sample error operation\n      error:\n        file: error.yaml\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          name: foo\n      description: sample delete operation\n    - description: sample script operation\n      script:\n        content: echo \"test namespace = $NAMESPACE\"\n```\n\n----------------------------------------\n\nTITLE: String Comparison using as_string Function\nDESCRIPTION: Demonstrates a basic string equality comparison using the as_string function to compare 'foobar' with its string representation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/as_string.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nas_string('foobar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Adding Numbers in Kyverno Chainsaw\nDESCRIPTION: This snippet demonstrates adding two numbers using the add function. It shows that the function can handle string representations of numbers and return the correct sum.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/add.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd(`1`, `2`) == `3`\n```\n\n----------------------------------------\n\nTITLE: Time Function Signature for Retrieving Current UTC Time\nDESCRIPTION: Function signature for the time_now_utc utility that returns the current UTC time formatted according to RFC 3339 standard. This function takes no parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_now_utc.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntime_now_utc()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Bindings in Chainsaw\nDESCRIPTION: Creates a binding that generates a dynamic value using test metadata and string joining\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/test-info/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: \"(join('-', [$test.metadata.name, 'foo']))\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element in Kyverno\nDESCRIPTION: This example demonstrates how to use the 'at' function to retrieve an element from an array at a specified index. The function takes an array and a number as arguments, returning the element at the given index.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/at.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nat([`10`,`15`,`20`], `1`) == `15`\n```\n\n----------------------------------------\n\nTITLE: Loading Completions for Current Zsh Session\nDESCRIPTION: Command to load Chainsaw completions in the current Zsh shell session using source command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource <(chainsaw completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Example\nDESCRIPTION: Demonstrates the usage of base64_encode function by encoding the string 'foo' to its base64 representation\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/base64_encode.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbase64_encode('foo') == 'Zm9vCg=='\n```\n\n----------------------------------------\n\nTITLE: Generating Random Characters with Kyverno Random Function\nDESCRIPTION: Function signature for generating a random sequence of characters. Takes a string parameter and returns a random character sequence.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/random.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrandom(string)\n```\n\n----------------------------------------\n\nTITLE: Converting Object to JSON String in Chainsaw\nDESCRIPTION: This example demonstrates converting an object to a JSON string using the to_string function. The object {bar:'bam',foo:'baz'} is converted to the JSON string '{\"bar\":\"bam\",\"foo\":\"baz\"}'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_string.md#2025-04-21_snippet_3\n\nLANGUAGE: chainsaw\nCODE:\n```\nto_string({bar:'bam',foo:'baz'}) == '{\"bar\":\"bam\",\"foo\":\"baz\"}'\n```\n\n----------------------------------------\n\nTITLE: Calculating Length of Non-Empty Array in Kyverno Chainsaw\nDESCRIPTION: This snippet demonstrates using the length function to calculate the number of elements in a non-empty array. It shows that the length of an array with three string elements is 3.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/length.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nlength([`10`,`15`,`20`]) == `3`\n```\n\n----------------------------------------\n\nTITLE: Using time_diff Function to Calculate Time Difference in RFC3339 Format\nDESCRIPTION: The time_diff function takes two string parameters representing dates in RFC3339 format and calculates the time difference between them. It returns the duration between the start and end times.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_diff.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntime_diff(string, string)\n```\n\n----------------------------------------\n\nTITLE: Operation Details Table in Markdown\nDESCRIPTION: Markdown table detailing the operations within the test step, including apply, assert, and script operations with their respective bindings and outputs.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | Create the configmap. |\n| 2 | `assert` | 0 | 0 | Check the configmap content. |\n| 3 | `script` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Using find_first Function in Plaintext\nDESCRIPTION: Examples demonstrating the usage of the find_first function with various input parameters. The function returns the zero-based index of the first occurrence of a substring or null if not found.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_first.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfind_first('subject string', 'string', `0`) == `8`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfind_first('subject string', 'string', `8`) == `8`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfind_first('subject string', 'string', `9`) == null\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfind_first('subject string', 'string', `0`, `14`) == `8`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfind_first('subject string', 'string', `0`, `13`) == null\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw Completions on Linux\nDESCRIPTION: Command to permanently install Chainsaw completion script for Zsh on Linux systems by saving it to the appropriate fpath directory.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion zsh > \"${fpath[1]}/_chainsaw\"\n```\n\n----------------------------------------\n\nTITLE: Converting String to String in Chainsaw\nDESCRIPTION: This example shows that when a string is passed to the to_string function, it remains unchanged. The input 'foobar' is returned as the same string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_string.md#2025-04-21_snippet_1\n\nLANGUAGE: chainsaw\nCODE:\n```\nto_string('foobar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with avg Function in Kyverno Chainsaw\nDESCRIPTION: The avg function takes an array of numbers as input and returns their average. It handles string representations of numbers. If the input array is empty, the function returns null.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/avg.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\navg([`10`,`15`,`20`]) == `15`\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw with nix-shell\nDESCRIPTION: Command to temporarily use Chainsaw in a Nix shell environment without permanent installation. This is useful for trying out Chainsaw before deciding to install it permanently.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnix-shell -p kyverno-chainsaw\n```\n\n----------------------------------------\n\nTITLE: Running kubectl version Command\nDESCRIPTION: Example output from the kubectl version command showing client, kustomize, and server version information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl version\n\nClient Version: v1.28.2\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.27.4+k3s1\n```\n\n----------------------------------------\n\nTITLE: Using not_null Function with All Null Values\nDESCRIPTION: Shows the behavior of the not_null function when all provided arguments are null. The function returns null in this case.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/not_null.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnot_null(null, null) == null\n```\n\n----------------------------------------\n\nTITLE: String Lowercase Transformation and Comparison\nDESCRIPTION: Demonstrates the conversion of an uppercase string to lowercase using the 'lower' function, then compares the result with a lowercase string literal. This pattern is commonly used in conditional logic where case-insensitive comparison is needed.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_lower.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nlower('FOOBAR') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Defining Time to Cron Conversion Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the 'time_to_cron' function, which takes a string input and returns a string output. The input is expected to be in RFC 3339 time format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_to_cron.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_to_cron(string)`\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure for Field Validation in Markdown\nDESCRIPTION: This snippet outlines the structure of a field validation test using markdown tables. It includes a summary of steps and details for a single step with an 'apply' operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/field-validation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test: `field-validation`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Basic Substring Search\nDESCRIPTION: Demonstrates finding the last occurrence of 'string' in 'subject string' from position 0\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_last.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfind_last('subject string', 'string', `0`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Assert Command\nDESCRIPTION: Basic usage syntax for the 'chainsaw assert' command for evaluating assertions with optional path to file.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_assert.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw assert [flags] [FILE]\n```\n\n----------------------------------------\n\nTITLE: Dividing Numbers in Kyverno Chainsaw\nDESCRIPTION: Example of using the divide function with numeric values. Returns the result of dividing the first number by the second.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/divide.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide(`1`, `2`) == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Time Parse Function Signature Definition\nDESCRIPTION: Function signature for time_parse that takes two string parameters - a time value and its layout - and converts it to RFC 3339 format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_parse.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntime_parse(string, string)\n```\n\n----------------------------------------\n\nTITLE: Using not_null Function with Fallback Value\nDESCRIPTION: Demonstrates using the not_null function with multiple null values and a fallback string. The function returns the first non-null value, in this case 'foo'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/not_null.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnot_null(null, null, 'foo') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Array Length Example\nDESCRIPTION: Demonstrates calculating the length of a non-empty array containing string elements.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/length.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nlength([`10`,`15`,`20`]) == `3`\n```\n\n----------------------------------------\n\nTITLE: Using contains() with arrays for element matching\nDESCRIPTION: Examples showing how to use the 'contains' function with array inputs. The function returns true if the array contains the specified element.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/contains.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncontains(['foo', 'bar'], 'bar') == `true`\n```\n\nLANGUAGE: text\nCODE:\n```\ncontains(['foo', 'bar'], 'not') == `true`\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure in YAML for Chainsaw\nDESCRIPTION: This YAML structure defines the test configuration, including steps, operations, and metadata. It specifies a single step with an assert operation, but lacks specific assertion details.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/assertion-tree/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `assertion-tree`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `assert` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Search with End Boundary\nDESCRIPTION: Shows searching with both start and end position boundaries where match exists\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_last.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfind_last('subject string', 'string', `0`, `14`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw CLI Usage and Flags\nDESCRIPTION: This snippet shows the usage instructions and available flags for the Chainsaw command-line tool. It indicates that Chainsaw is used for e2e testing and provides basic command syntax.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/root/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw [flags]\n\nFlags:\n  -h, --help   help for chainsaw\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Numeric Input with to_number Function\nDESCRIPTION: Illustrates how the to_number function returns null when provided with a non-numeric input like 'false'. This shows the function's error handling for invalid number conversions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_number.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nto_number(`false`) == null\n```\n\n----------------------------------------\n\nTITLE: Dividing Quantities in Kyverno Chainsaw\nDESCRIPTION: Example of using the divide function with data quantities (Mi = Mebibytes). Shows dividing 1Mi by 2Mi to produce 0.5.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/divide.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide('1Mi', '2Mi') == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Label-based Resource Assertion in Chainsaw\nDESCRIPTION: Shows how to assert against resources using label selectors instead of explicit names.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/assertion-trees.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            labels:\n              k8s-app: kube-dns\n            namespace: kube-system\n          spec:\n            replicas: 2\n```\n\n----------------------------------------\n\nTITLE: Extracting Object Values in JavaScript\nDESCRIPTION: Demonstrates how to use the values() function to extract all values from an object into an array. The function takes an object as input and returns an array containing all the object's values in the order they appear.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/values.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvalues({bar:'bam',foo:'baz'}) == ['bam','baz']\n```\n\n----------------------------------------\n\nTITLE: Processing Empty Array in Chainsaw\nDESCRIPTION: Shows that to_array function correctly handles an empty array string representation and returns an actual empty array.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_array.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nto_array(`[]`) == []\n```\n\n----------------------------------------\n\nTITLE: Subtracting Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates how to perform arithmetic subtraction between two numbers using the subtract function.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/subtract.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract(`2`, `1`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Using join function with array and separator in Kyverno Chainsaw\nDESCRIPTION: Demonstrates how to use the join function to combine array elements into a single string with a specified separator. The example shows joining three string elements with a forward slash.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/join.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njoin('/', ['a', 'b', 'c']) == 'a/b/c'\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Test Steps in Markdown/YAML\nDESCRIPTION: This snippet outlines the structure of a Chainsaw test case using a combination of Markdown and YAML. It defines a single step named 'step-1' that includes a script operation in its 'Try' section.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/negative-testing/script/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test: `negative-script`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `script` | 0 | 0 | *No description* |\n\n---\n```\n\n----------------------------------------\n\nTITLE: String Suffix Check Example - False Case\nDESCRIPTION: Demonstrates using ends_with function to check if 'foobar' ends with 'foo', which returns false\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/ends_with.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nends_with('foobar', 'foo') == `false`\n```\n\n----------------------------------------\n\nTITLE: Available Subcommands for Chainsaw KUTTL Migration\nDESCRIPTION: Lists the available subcommands for the 'chainsaw kuttl' command, which include 'config' for migrating KUTTL config and 'tests' for migrating KUTTL tests to Chainsaw.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/help.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAvailable Commands:\n  config      Migrate KUTTL config to Chainsaw\n  tests       Migrate KUTTL tests to Chainsaw\n```\n\n----------------------------------------\n\nTITLE: Defining the equal_fold Function Signature in Chainsaw\nDESCRIPTION: Specifies the signature of the equal_fold function which takes two string parameters and is used for case-insensitive string comparison.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/equal_fold.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nequal_fold(string, string)\n```\n\n----------------------------------------\n\nTITLE: Converting Null to String in Chainsaw\nDESCRIPTION: This snippet illustrates how the to_string function handles null values. When null is passed, it is converted to the string 'null'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_string.md#2025-04-21_snippet_2\n\nLANGUAGE: chainsaw\nCODE:\n```\nto_string(null) == 'null'\n```\n\n----------------------------------------\n\nTITLE: Adding Durations in Kyverno Chainsaw\nDESCRIPTION: This example shows how the add function works with time durations. It adds two hour-based durations and returns the result in the same format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/add.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nadd('1h', '2h') == '3h'\n```\n\n----------------------------------------\n\nTITLE: Multiplying Quantities with Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates multiplying a quantity value with a number using the multiply function. The function takes a quantity (like '1Mi') and a number, returning a quantity with the multiplied value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/multiply.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmultiply('1Mi', `2`) == '2Mi'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trim_left Function with Space and Character Removal\nDESCRIPTION: Example showing how trim_left removes leading characters specified in the second argument from the first string argument. In this case, it removes any leading space, f, b, or r characters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim_left.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntrim_left(' foobar ', 'fbr ') == 'oobar '\n```\n\n----------------------------------------\n\nTITLE: Setting Up PowerShell Completion\nDESCRIPTION: Commands to enable Chainsaw shell completion in PowerShell, including options for the current session and persistent configuration via PowerShell profile.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/completion.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nchainsaw completion powershell | Out-String | Invoke-Expression\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Find the profile path\necho $PROFILE\n\n# Add the completion command to your profile\nchainsaw completion powershell | Out-String | Out-File -Append $PROFILE\n```\n\n----------------------------------------\n\nTITLE: Basic String Replacement Example\nDESCRIPTION: Demonstrates replacing all occurrences of 'oo' with 'ii' in the string 'foobar', resulting in 'fiibar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/replace.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreplace('foobar', 'oo', 'ii') == 'fiibar'\n```\n\n----------------------------------------\n\nTITLE: Flags for Chainsaw KUTTL Migration Command\nDESCRIPTION: Shows the available flags for the 'chainsaw kuttl' command, which currently only includes the help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/help.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nFlags:\n  -h, --help   help for kuttl\n```\n\n----------------------------------------\n\nTITLE: Trimming Characters from String with Space Character Included\nDESCRIPTION: Example showing the trim function removing the characters 'f', 'b', 'r', and space from both ends of the string ' foobar '. The function removes all occurrences of these characters from both ends until it encounters a character not in the trim set.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim.md#2025-04-21_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\ntrim(' foobar ', 'fbr ')\n```\n\n----------------------------------------\n\nTITLE: Greater Than String Comparison Example\nDESCRIPTION: Demonstrates comparing two strings where the first is lexicographically greater than the second, returning 1.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/compare.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncompare('b', 'a') == `1`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Lint Command Output\nDESCRIPTION: The output of the 'chainsaw lint test' command showing a successful validation of the test YAML. It processes the input and reports that the document is valid.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/guides/lint.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nProcessing input...\nThe document is valid\n```\n\n----------------------------------------\n\nTITLE: Demonstrating to_lower Function Usage\nDESCRIPTION: Shows an example of using the to_lower function to convert an uppercase string to lowercase. The function takes a string argument and returns the same string with all characters converted to lowercase.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_lower.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlower('FOOBAR') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Joining String Arrays with Separator in Go\nDESCRIPTION: Example showing the usage of a join function that combines array elements with a forward slash separator. This is commonly used for path manipulation in file systems or URL construction.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/join.md#2025-04-21_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\njoin('/', ['a', 'b', 'c']) == 'a/b/c'\n```\n\n----------------------------------------\n\nTITLE: Replace All Function Signature\nDESCRIPTION: Function signature for a utility that replaces all occurrences of a substring within a parent string with a new substring. Takes three string parameters: the parent string, the string to find, and the replacement string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/replace_all.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nreplace_all(string, string, string)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trim_right Function Usage in Chainsaw\nDESCRIPTION: These examples show how the trim_right function removes trailing characters from a string. The function takes two string arguments: the string to be trimmed and the set of characters to be removed from the end.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim_right.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrim_right(' foobar ', 'fbr ') == ' fooba'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntrim_right(' foobar ', 'fbr') == ' foobar '\n```\n\n----------------------------------------\n\nTITLE: Available Options for Chainsaw Build Docs Command in Bash\nDESCRIPTION: Configuration options for the 'chainsaw build docs' command. Options include specifying a catalog path, help flag, output README file name, test directories, and test file name.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_build_docs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --catalog string         Path to the built test catalog file\n  -h, --help                   help for docs\n      --readme-file string     Name of the built docs file (default \"README.md\")\n      --test-dir stringArray   Directories containing test cases to run\n      --test-file string       Name of the test file (default \"chainsaw-test\")\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON and Comparing with Object Literal in JavaScript\nDESCRIPTION: This snippet demonstrates how to parse a JSON string using the json_parse function and compare the result with an equivalent JavaScript object literal. The comparison checks for equality between the parsed JSON object and the object literal.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/json_parse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\njson_parse('{\"foo\":\"bar\"}') == { foo: 'bar' }\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Test Command\nDESCRIPTION: This snippet shows the usage and available flags for the 'chainsaw test' command. It allows users to create Chainsaw tests with options to add descriptions, force deletion of existing tests, and save created tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/create/test/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw test [flags]\n\nFlags:\n      --description   If set, adds description when applicable (default true)\n      --force         If set, existing test will be deleted if needed\n  -h, --help          help for test\n      --save          If set, created test will be saved\n```\n\n----------------------------------------\n\nTITLE: Defining pad_right Function Signature in Go\nDESCRIPTION: Specifies the signature of the pad_right function, which takes a string, a number, and another string as parameters. The function is intended to add characters to the end of a string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/pad_right.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npad_right(string, number, string)\n```\n\n----------------------------------------\n\nTITLE: Converting String to Number with to_number Function\nDESCRIPTION: Demonstrates converting a string '1.0' to a numeric value 1 using the to_number function. The function parses the decimal string and returns an integer value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_number.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nto_number('1.0') == `1`\n```\n\n----------------------------------------\n\nTITLE: Reversing a String with reverse() Function\nDESCRIPTION: Example showing how to reverse the order of characters in a string using the reverse() function. The function takes a string 'abcd' and returns 'dcba'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/reverse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreverse('abcd') == 'dcba'\n```\n\n----------------------------------------\n\nTITLE: Reversing a String Example in YAML\nDESCRIPTION: Demonstrates how to use the reverse function to reverse the order of characters in a string. The example shows reversing 'abcd' to produce 'dcba'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/reverse.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreverse('abcd') == 'dcba'\n```\n\n----------------------------------------\n\nTITLE: Trimming String Example with Spaces and Characters\nDESCRIPTION: Demonstrates trimming both ends of a string by removing specified characters including spaces, 'f', 'b', and 'r'\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntrim(' foobar ', 'fbr ') == 'ooba'\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Renovate Command Options\nDESCRIPTION: This snippet displays the available options for the 'chainsaw renovate' command. Currently, it only shows the help flag, which provides assistance for using the command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_renovate.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for renovate\n```\n\n----------------------------------------\n\nTITLE: Defining time_since Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the time_since function, which takes three string parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_since.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_since(string, string, string)`\n```\n\n----------------------------------------\n\nTITLE: Flags for Chainsaw Docs Command\nDESCRIPTION: Lists the available flags for the 'chainsaw docs' command, including options for specifying the catalog path, output file name, and test directories.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/build/docs/help.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFlags:\n      --catalog string         Path to the built test catalog file\n  -h, --help                   help for docs\n      --readme-file string     Name of the built docs file (default \"README.md\")\n      --test-dir stringArray   Directories containing test cases to run\n      --test-file string       Name of the test file (default \"chainsaw-test\")\n```\n\n----------------------------------------\n\nTITLE: Trimming Characters from String without Space Character\nDESCRIPTION: Example showing how the trim function behaves when the space character is not included in the trim set. Since spaces are not in the character set to remove, the original string ' foobar ' remains unchanged.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim.md#2025-04-21_snippet_1\n\nLANGUAGE: unknown\nCODE:\n```\ntrim(' foobar ', 'fbr')\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Export Command in Bash\nDESCRIPTION: The basic syntax for using the chainsaw export command. This command is used for exporting data and supports various flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw export [flags]\n```\n\n----------------------------------------\n\nTITLE: Verifying ConfigMap Errors in Chainsaw Conventional Approach (YAML)\nDESCRIPTION: Shows an error statement for verifying that the ConfigMap does not contain specific data. This file would be named '03-errors.yaml' in the conventional approach.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/test/conventional.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  lorem: ipsum\n```\n\n----------------------------------------\n\nTITLE: Limited String Replacement Example\nDESCRIPTION: Demonstrates replacing just one occurrence of 'o' with 'i' in the string 'foobar', resulting in 'fiobar'. This uses the optional fourth parameter to limit replacements.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/replace.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nreplace('foobar', 'o', 'i', `1`) == 'fiobar'\n```\n\n----------------------------------------\n\nTITLE: Checking String Containment in Chainsaw\nDESCRIPTION: These snippets demonstrate how to use the 'contains' function to check if a string contains a specific substring. It shows both a positive and negative case.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/contains.md#2025-04-21_snippet_0\n\nLANGUAGE: chainsaw\nCODE:\n```\ncontains('foobar', 'bar') == `true`\n```\n\nLANGUAGE: chainsaw\nCODE:\n```\ncontains('foobar', 'not') == `false`\n```\n\n----------------------------------------\n\nTITLE: Preserving Existing Array Example\nDESCRIPTION: Shows how the function preserves an existing array of string values without modification.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_array.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nto_array([`10`, `15`, `20`]) == [`10`, `15`, `20`]\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase Example\nDESCRIPTION: Demonstrates the usage of the upper() function by converting a lowercase string 'foobar' to uppercase 'FOOBAR'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/upper.md#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nupper('foobar') == 'FOOBAR'\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Configuration Migration Command\nDESCRIPTION: Specifies the command-line interface for the Chainsaw configuration migration tool. It includes the main command 'chainsaw config' along with available flags for cleanup and saving options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/config/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw config [flags]\n\nFlags:\n      --cleanup   If set, delete converted files\n  -h, --help      help for config\n      --save      If set, converted files will be saved\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Empty Array in Kyverno\nDESCRIPTION: This example demonstrates the behavior of the sum function when given an empty array. It shows that the sum of an empty array is equal to 0.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/sum.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsum(`[]`) == `0`\n```\n\n----------------------------------------\n\nTITLE: Test Step Configuration with Three Operations\nDESCRIPTION: Configures a test step with three sequential operations: apply, assert, and delete\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noperations:\n  - apply\n  - assert\n  - delete\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Version Command Options\nDESCRIPTION: This snippet shows the available options for the 'chainsaw version' command. Currently, it only includes a help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_version.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: String Type Check in JavaScript\nDESCRIPTION: Illustrates checking if a value is of type string using the type operator.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/type.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype('foobar') == 'string'\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment Template for Adding New Adopters\nDESCRIPTION: HTML comment containing the template for adding new organizations to the adopters list.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/ADOPTERS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| [name](URL) | brief description of how you are using Chainsaw |\n```\n\n----------------------------------------\n\nTITLE: Empty Array Handling Example\nDESCRIPTION: Demonstrates how the function handles an empty array input.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_array.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nto_array(`[]`) == []\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to Array Example\nDESCRIPTION: Demonstrates converting a boolean value to a single-element array.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_array.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nto_array(`true`) == [`true`]\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Config Command\nDESCRIPTION: Command syntax and flags for upgrading Chainsaw configuration. The command supports an optional --save flag to persist converted files, and -h/--help flag for displaying help information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/renovate/config/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw config [flags]\n\nFlags:\n  -h, --help   help for config\n      --save   If set, converted files will be saved\n```\n\n----------------------------------------\n\nTITLE: Summing Empty Array in Go\nDESCRIPTION: This snippet demonstrates summing an empty array, which results in zero. This is likely used to test edge cases or default behavior of a sum function.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/sum.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsum(`[]`) == `0`\n```\n\n----------------------------------------\n\nTITLE: Pull Request Finalization Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the process of finalizing a pull request, including review, discussion, and merging\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/community/making-a-pull-request.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  autonumber\n  participant chainsaw\n  participant PR\n  participant fork\n  participant local\n\n  activate PR\n  PR ->> PR: finalize PR\n  loop review\n    loop discuss\n      PR ->> PR: request review\n      PR ->> PR: discussion\n      local ->> fork: push further changes\n    end\n    PR ->> chainsaw: merge (and squash)\n    deactivate PR\n    fork ->> fork: delete branch\n    chainsaw ->> fork: pull\n    local ->> local: delete branch\n    fork ->> local: pull\n  end\n```\n\n----------------------------------------\n\nTITLE: Testing String Uppercase Comparison in Chainsaw\nDESCRIPTION: Tests string equality after converting 'foobar' to uppercase. Verifies that the uppercase version of 'foobar' equals 'FOOBAR' using Chainsaw's assertion syntax.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_upper.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nupper('foobar') == 'FOOBAR'\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Lint Command Options\nDESCRIPTION: Available command line options for the chainsaw lint command. Includes file specification option and help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_lint.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   Specify the file to lint or '-' for standard input\n  -h, --help          help for lint\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Server Version\nDESCRIPTION: Executes x_k8s_server_version function using a Kubernetes client binding to retrieve the server version information. The $client parameter represents a pre-configured Kubernetes client instance.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/x_k8s_server_version.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_server_version($client)\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String\nDESCRIPTION: Demonstrates converting an integer to its string representation using the to_string function.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_string.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nto_string(`2`) == '2'\n```\n\n----------------------------------------\n\nTITLE: trim_prefix Function Signature\nDESCRIPTION: Function signature showing trim_prefix takes two string parameters - the main string and the prefix to trim\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/trim_prefix.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntrim_prefix(string, string)\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to Array in Chainsaw\nDESCRIPTION: Shows how the to_array function converts a boolean value to a single-element array containing that boolean value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_array.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nto_array(`true`) == [`true`]\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Placeholders for Chainsaw Project\nDESCRIPTION: This snippet defines placeholders for key configuration elements: version, time, and Git commit ID. These are likely to be populated with actual values during a build or deployment process.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/version/out.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nVersion: ---\nTime: ---\nGit commit ID: ---\n```\n\n----------------------------------------\n\nTITLE: Handling Null Input in Length Function in Kyverno Chainsaw\nDESCRIPTION: This snippet illustrates the behavior of the length function when given a null input. It shows that attempting to calculate the length of null results in an error.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/length.md#2025-04-21_snippet_2\n\nLANGUAGE: kyverno\nCODE:\n```\nlength(null) -> error\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pods Matching a Label Selector\nDESCRIPTION: Example of waiting for pods that match the label selector 'app=foo' to be in the Ready state with a 1 minute timeout.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/operations/helpers/wait.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # match pods using a label selector query\n        selector: app=foo\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Creating Releases\nDESCRIPTION: This workflow automates the release process for the Chainsaw project. It's triggered on push events to tags starting with 'v'. It builds the project, creates a GitHub release, and uploads release assets.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/tests/out-save.txt#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Release\n\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: 1.21.x\n\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v4\n        with:\n          version: latest\n          args: release --clean\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Empty Array Length Example\nDESCRIPTION: Shows length calculation for an empty array returning zero.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/length.md#2025-04-21_snippet_1\n\nLANGUAGE: kyverno\nCODE:\n```\nlength([]) == `0`\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Function in Kyverno Templates\nDESCRIPTION: The truncate function takes a string and a number parameter to limit the length of the string. The length parameter must be enclosed in backticks when used in templates.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/truncate.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{request.object.metadata.name | truncate(@, `9`)}}\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric Value Example\nDESCRIPTION: Shows that passing a numeric value (already a number) will return the number itself, potentially converting from float to integer when appropriate.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_number.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nto_number(`1.0`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Pull Request Preparation Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the process of forking, cloning, and preparing changes for a pull request\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/community/making-a-pull-request.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  autonumber\n\n  participant chainsaw\n  participant PR\n  participant fork\n  participant local\n\n  chainsaw ->> fork: fork on GitHub\n  fork ->> local: clone to local\n  local ->> local: branch\n  loop prepare\n    loop push\n      loop edit\n        local ->> local: commit\n      end\n      local ->> fork: push\n    end\n    chainsaw ->> fork: merge in any changes\n    fork ->>+ PR: create draft PR\n    PR ->> PR: review your changes\n  end\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Array with Numbers in Kyverno\nDESCRIPTION: This example shows how the sum function calculates the total of an array containing two numbers. It demonstrates that the sum of 10 and 15 is 25.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/sum.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nsum([`10`, `15`]) == `25`\n```\n\n----------------------------------------\n\nTITLE: Sorting String Array Alphabetically in JavaScript\nDESCRIPTION: This code snippet demonstrates sorting an array of strings alphabetically using JavaScript's built-in sort() method. The example shows that sorting the array ['b', 'a', 'c'] results in the alphabetically ordered array ['a', 'b', 'c'].\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/sort.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsort(['b', 'a', 'c']) == ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Chainsaw KUTTL Migration Subcommands\nDESCRIPTION: Provides instructions on how to access detailed help information for specific subcommands of 'chainsaw kuttl'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/help.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nUse \"chainsaw kuttl [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure for CEL Operations in YAML\nDESCRIPTION: This YAML structure defines a test named 'cel' with global and step-specific bindings, and two steps each with 'try' operations. The first step uses an 'apply' operation, while the second uses an 'assert' operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/cel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `cel`\n\n*No description*\n\n## Bindings\n\n| # | Name | Value |\n|:-:|---|---|\n| 1 | `a` | 1 |\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 1 | 1 | 0 | 0 | 0 |\n| 2 | [step-2](#step-step-2) | 1 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Bindings\n\n| # | Name | Value |\n|:-:|---|---|\n| 1 | `b` | 2 |\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 1 | 0 | *No description* |\n\n### Step: `step-2`\n\n*No description*\n\n#### Bindings\n\n| # | Name | Value |\n|:-:|---|---|\n| 1 | `b` | 2 |\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `assert` | 1 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Split Function with Limit Parameter\nDESCRIPTION: Example showing how the split function divides a string into an array elements when the specified delimiter is found. The third parameter limits the number of splits to perform, resulting in only the first n-1 occurrences of the delimiter being processed.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/split.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsplit('average|-|min|-|max|-|mean|-|median', '|-|', `3`) == ['average', 'min', 'max', 'mean|-|median']\n```\n\n----------------------------------------\n\nTITLE: Using not_null Function with All Null Elements\nDESCRIPTION: Example showing the not_null function returning null when all provided elements are null values.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/not_null.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnot_null(null, null) == null\n```\n\n----------------------------------------\n\nTITLE: Converting String to String\nDESCRIPTION: Shows that applying to_string to a string returns the same string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_string.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nto_string('foobar') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML for Chainsaw Demonstration\nDESCRIPTION: HTML code for embedding a YouTube video about Kyverno Chainsaw. The iframe is centered using flexbox styles and displays a video titled 'Mastering Kubernetes Testing with Kyverno Chainsaw!'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/resources.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display: flex; justify-content: center; margin-top: 2rem;\">\n    <iframe width=\"960\" height=\"540\" src=\"https://www.youtube.com/embed/hQJWGzogIiI\"\n        title=\"Mastering Kubernetes Testing with Kyverno Chainsaw!\" frameborder=\"0\" allowfullscreen>\n    </iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Command Usage for Chainsaw Schema Export\nDESCRIPTION: Shows the command syntax and flags for exporting JSON schemas using the chainsaw CLI tool. The command supports a help flag (-h/--help) for displaying usage information.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/export/schemas/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nExport JSON schemas\n\nUsage:\n  chainsaw schemas [flags]\n\nFlags:\n  -h, --help   help for schemas\n```\n\n----------------------------------------\n\nTITLE: Null Length Error Example\nDESCRIPTION: Demonstrates that calling length() on null value results in an error.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/length.md#2025-04-21_snippet_2\n\nLANGUAGE: kyverno\nCODE:\n```\nlength(null) -> error\n```\n\n----------------------------------------\n\nTITLE: Function Signature for pad_left String Padding Operation\nDESCRIPTION: Function signature showing pad_left takes a string to pad, a number for padding length, and a string to pad with\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/pad_left.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npad_left(string, number, string)\n```\n\n----------------------------------------\n\nTITLE: Adding Chainsaw to NixOS Configuration\nDESCRIPTION: Nix configuration snippet to include Chainsaw in your NixOS system packages. This should be added to the NixOS configuration file to permanently install Chainsaw.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/install.md#2025-04-21_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nenvironment.systemPackages = [\n  pkgs.kyverno-chainsaw\n];\n```\n\n----------------------------------------\n\nTITLE: Trimming Right Side of String with Multiple Characters in Go\nDESCRIPTION: This snippet demonstrates the trim_right function removing multiple characters ('f', 'b', 'r', and space) from the right side of the string ' foobar '. It shows that the function trims characters until it encounters one not in the trim set.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/trim_right.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntrim_right(' foobar ', 'fbr ') == ' fooba'\n```\n\n----------------------------------------\n\nTITLE: Defining Min Function Signature in Kyverno Chainsaw\nDESCRIPTION: Specifies the signature of the 'min' function, which takes an array of numbers or strings as input.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/min.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`min(array[number]|array[string])`\n```\n\n----------------------------------------\n\nTITLE: String Prefix Check Example - False Case\nDESCRIPTION: Example showing starts_with function returning false when string does not start with given prefix.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/starts_with.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nstarts_with('foobar', 'bar') == `false`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Bash Completion Options\nDESCRIPTION: Available options when generating bash completion scripts. Includes help flag and an option to disable completion descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_bash.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Checking Boolean Type in JavaScript\nDESCRIPTION: This example demonstrates how to use the 'type' function to check if a value is of boolean type.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/type.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype(`false`) == 'boolean'\n```\n\n----------------------------------------\n\nTITLE: Calculating Length of Empty Array in Kyverno Chainsaw\nDESCRIPTION: This example shows the length function being used on an empty array. It demonstrates that the length of an empty array is 0.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/length.md#2025-04-21_snippet_1\n\nLANGUAGE: kyverno\nCODE:\n```\nlength([]) == `0`\n```\n\n----------------------------------------\n\nTITLE: String Search with Length Constraint - No Match\nDESCRIPTION: Searches for 'string' with start position 0 and length limit 13. Returns null as the substring extends beyond the length constraint.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_first.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfind_first('subject string', 'string', `0`, `13`) == null\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Lowercase Conversion in Kyverno\nDESCRIPTION: This example shows how to use the 'lower' function to convert a string to lowercase. The function takes a string as input and returns the same string with all Unicode letters mapped to their lower case equivalents.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/lower.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nlower('FOOBAR') == 'foobar'\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting JSON Schemas with Chainsaw CLI\nDESCRIPTION: This command is used to export JSON schemas using the Chainsaw CLI tool. It doesn't have any specific options besides the help flag.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_export_schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchainsaw export schemas [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Chainsaw Test Scenarios in YAML\nDESCRIPTION: This YAML configuration defines multiple test scenarios for Chainsaw. It includes steps for creating resources, asserting their state, and cleaning up after tests. The configuration covers scenarios like creating namespaces, deployments, and validating resource states.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/docs/invalid-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: step-01\n    try:\n    - apply:\n        file: test.yaml\n    - assert:\n        file: test.yaml\n  - name: step-02\n    try:\n    - apply:\n        file: good/00-namespace.yaml\n    - assert:\n        file: good/00-namespace.yaml\n  - name: step-03\n    try:\n    - apply:\n        file: good/01-deployment.yaml\n    - assert:\n        file: good/01-deployment.yaml\n  - name: step-04\n    try:\n    - error:\n        file: bad/00-namespace.yaml\n  - name: step-05\n    try:\n    - error:\n        file: bad/01-deployment.yaml\n  - name: step-06\n    try:\n    - delete:\n        file: good/01-deployment.yaml\n    - delete:\n        file: good/00-namespace.yaml\n    - delete:\n        file: test.yaml\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Fish Completion Options in Bash\nDESCRIPTION: Available flags for the chainsaw completion fish command. The --help flag displays help information, while --no-descriptions disables completion descriptions in the generated script.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_fish.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Available Options for chainsaw docs Command\nDESCRIPTION: List of available flags for the 'chainsaw docs' command, including options to control timestamp generation, output location, and documentation format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_docs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --autogenTag      Determines if the generated docs should contain a timestamp (default true)\n  -h, --help            help for docs\n  -o, --output string   Output path (default \".\")\n      --website         Website version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating starts_with Function for Prefix Detection\nDESCRIPTION: Examples showing how the starts_with function evaluates whether a string begins with a specified prefix. The function returns a boolean value indicating whether the first string starts with the second string argument.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/starts_with.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nstarts_with('foobar', 'foo') == `true`\n```\n\nLANGUAGE: expression\nCODE:\n```\nstarts_with('foobar', 'bar') == `false`\n```\n\n----------------------------------------\n\nTITLE: String Replacement with Occurrence Count Parameter\nDESCRIPTION: This example demonstrates how to replace only a specific occurrence of a character by providing a count parameter. It replaces only the first occurrence of 'o' with 'i' in 'foobar', resulting in 'fiobar'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/replace.md#2025-04-21_snippet_1\n\nLANGUAGE: generic\nCODE:\n```\nreplace('foobar', 'o', 'i', `1`) == 'fiobar'\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Migrate KUTTL Command in Bash\nDESCRIPTION: This command is used to migrate KUTTL resources to Chainsaw. It supports additional flags for customization.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw migrate kuttl [flags]\n```\n\n----------------------------------------\n\nTITLE: Greater Than String Comparison Example\nDESCRIPTION: Demonstrates comparing two strings where first is greater than second ('b' and 'a') which returns 1\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/compare.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncompare('b', 'a') == `1`\n```\n\n----------------------------------------\n\nTITLE: Dividing Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates how to divide two numeric values using the divide function. This example shows dividing 1 by 2 to get 0.5.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/divide.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide(`1`, `2`) == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Function Signature for time_add in Kyverno Chainsaw\nDESCRIPTION: Defines the signature for the time_add function which takes two string parameters: a time value and a duration. The function adds the specified duration to the time value and returns the result.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_add.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_add(string, string)`\n```\n\n----------------------------------------\n\nTITLE: Basic String Search with Zero Start Position\nDESCRIPTION: Demonstrates finding the first occurrence of 'string' in 'subject string' starting from position 0. Returns position 8.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_first.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfind_first('subject string', 'string', `0`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Dividing Quantity Values in Kyverno Chainsaw\nDESCRIPTION: Demonstrates division of computing resource quantities using the divide function. This example divides 1 mebibyte by 2 mebibytes to get the ratio 0.5.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/divide.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndivide('1Mi', '2Mi') == `0.5`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Migrate KUTTL Config Command Syntax\nDESCRIPTION: Shows the basic command syntax for migrating KUTTL configuration to Chainsaw format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl_config.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw migrate kuttl config [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Data\nDESCRIPTION: This snippet defines a string containing metrics data in Prometheus exposition format. It includes two metric families (mf1 and mf2) with different types and labels, along with associated values and timestamps.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/metrics-decode/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"# Only a quite simple scenario with two metric families.\\n# More complicated tests of the parser itself can be found in the text package.\\n# TYPE mf2 counter\\nmf2 3\\nmf1{label=\\\"value1\\\"} -3.14 123456\\nmf1{label=\\\"value2\\\"} 42\\nmf2 4\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with at() Function in JavaScript\nDESCRIPTION: Shows how to access array elements using the at() function with a specific index. The example demonstrates accessing the second element (index 1) from an array containing numbers 10, 15, and 20.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/at.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nat([`10`,`15`,`20`], `1`) == `15`\n```\n\n----------------------------------------\n\nTITLE: Subtracting Numbers in Kyverno Chainsaw\nDESCRIPTION: Demonstrates subtraction operation between two numeric values. This example shows how to use the subtract function with numeric string arguments.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/subtract.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract(`2`, `1`) == `1`\n```\n\n----------------------------------------\n\nTITLE: String Search with No Match\nDESCRIPTION: Attempts to find 'string' starting from position 9. Returns null as the search starts after the substring occurrence.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_first.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfind_first('subject string', 'string', `9`) == null\n```\n\n----------------------------------------\n\nTITLE: Displaying Kyverno Chainsaw Configuration Error\nDESCRIPTION: Error message showing a failed attempt to load configuration due to an invalid kind 'foo' not being found in the chainsaw.kyverno.io/v1alpha1 API group version.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/wrong_kind_config_err.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: failed to load configuration (failed to parse document (failed to retrieve validator: kind foo not found in chainsaw.kyverno.io/v1alpha1 groupversion))\n```\n\n----------------------------------------\n\nTITLE: Using Modulo Function with Integer Arguments\nDESCRIPTION: Example of the modulo function usage which returns the remainder after division. In this case, dividing 10 by 3 results in a remainder of 1. The function requires integer arguments and a non-zero divisor.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/modulo.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmodulo(`10`, `3`) == `1`\n```\n\n----------------------------------------\n\nTITLE: String Search with Length Constraint - Match Found\nDESCRIPTION: Searches for 'string' with start position 0 and length limit 14. Returns 8 as the substring is within the length constraint.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/find_first.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfind_first('subject string', 'string', `0`, `14`) == `8`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fish Completion\nDESCRIPTION: Command to enable Chainsaw shell completion in Fish shell by generating and saving the completion script to the appropriate directory.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/completion.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion fish > ~/.config/fish/completions/chainsaw.fish\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function with Decimal Value in Kyverno Chainsaw\nDESCRIPTION: Example demonstrating how the floor function rounds down a decimal number to the next lowest integer. In this case, the number 1.9 is rounded down to 1.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/floor.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfloor(`1.9`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Function with Asterisk Pattern in Chainsaw\nDESCRIPTION: Example showing how to use the wildcard function to match a string against a pattern with an asterisk wildcard. The function returns true when 'foobar' matches the pattern 'foo*'.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/wildcard.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwildcard('foo*', 'foobar') == `true`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Renovate Config Command Options\nDESCRIPTION: This snippet lists the available options for the 'chainsaw renovate config' command. It includes the help flag and a save option for converted files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_renovate_config.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for config\n      --save   If set, converted files will be saved\n```\n\n----------------------------------------\n\nTITLE: Defining time_now Function Signature\nDESCRIPTION: Specifies the signature of the time_now() function, which takes no parameters and returns the current time.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_now.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`time_now()`\n```\n\n----------------------------------------\n\nTITLE: Declaring x_metrics_decode Function Signature for Prometheus Metrics in Markdown\nDESCRIPTION: Defines the signature of the x_metrics_decode function, which takes a string parameter and is used to decode metrics in the Prometheus text format.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/x_metrics_decode.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Signature\n\n`x_metrics_decode(string)`\n```\n\n----------------------------------------\n\nTITLE: Installing Chainsaw Completions on macOS\nDESCRIPTION: Command to permanently install Chainsaw completion script for Zsh on macOS systems using Homebrew's site-functions directory.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion zsh > $(brew --prefix)/share/zsh/site-functions/_chainsaw\n```\n\n----------------------------------------\n\nTITLE: Adding Quantities in Kyverno Chainsaw\nDESCRIPTION: This snippet illustrates the addition of quantities, specifically using the 'Mi' unit (likely representing mebibytes). It shows that the add function preserves the unit in the result.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/add.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nadd('1Mi', '2Mi') == '3Mi'\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Check in JavaScript\nDESCRIPTION: Demonstrates checking if a value is of type boolean using the type operator.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/type.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype(`false`) == 'boolean'\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw PowerShell Completion Command\nDESCRIPTION: Command syntax for generating PowerShell autocompletion script with optional flags. The --no-descriptions flag can be used to disable completion descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_powershell.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchainsaw completion powershell [flags]\n```\n\n----------------------------------------\n\nTITLE: Less Than String Comparison Example\nDESCRIPTION: Demonstrates comparing two strings where the first is lexicographically less than the second, returning -1.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/compare.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncompare('a', 'b') == `-1`\n```\n\n----------------------------------------\n\nTITLE: Handling Existing Array in Chainsaw\nDESCRIPTION: Demonstrates that to_array function preserves arrays that are already properly formatted, returning the same array without modification.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_array.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nto_array([`10`, `15`, `20`]) == [`10`, `15`, `20`]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Completion Command Options\nDESCRIPTION: Available command line flags for the PowerShell completion generation command, including help and description toggle options.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_powershell.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric Literal to Number with to_number Function\nDESCRIPTION: Shows how to_number handles a numeric literal `1.0` and converts it to the integer value 1. This demonstrates that the function normalizes decimal values without fractional parts.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/to_number.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nto_number(`1.0`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Test Command\nDESCRIPTION: Basic syntax for running tests with the chainsaw test command. The command can be followed by flags and test directory specifications.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test [flags]... [test directories]...\n```\n\n----------------------------------------\n\nTITLE: Generating Chainsaw Bash Completion Script\nDESCRIPTION: Command to generate the autocompletion script for bash shell. This generates bash completion definitions that can be sourced or installed system-wide.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_bash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw completion bash\n```\n\n----------------------------------------\n\nTITLE: String Lowercase Comparison in Chainsaw\nDESCRIPTION: Converts a string to lowercase and compares it with a lowercase literal value. Used for case-insensitive string comparison in test assertions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/lower.md#2025-04-21_snippet_0\n\nLANGUAGE: chainsaw\nCODE:\n```\nlower('FOOBAR') == 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Completion Zsh Command Options\nDESCRIPTION: Available options for the 'chainsaw completion zsh' command, including help flag and option to disable completion descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n```\n\n----------------------------------------\n\nTITLE: Adding Durations with Kyverno Chainsaw\nDESCRIPTION: Shows how to add two time durations using the 'add' function. The function accepts durations in string format (e.g., '1h' for 1 hour) and returns the combined duration.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/add.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nadd('1h', '2h') == '3h'\n```\n\n----------------------------------------\n\nTITLE: Reversing an Array Example in YAML\nDESCRIPTION: Demonstrates how to use the reverse function to reverse the order of elements in an array. The example shows reversing an array of strings [`1`, `2`, `3`, `4`] to produce [`4`, `3`, `2`, `1`].\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/reverse.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreverse([`1`, `2`, `3`, `4`]) == [`4`, `3`, `2`, `1`]\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Migrate Command Options in Shell\nDESCRIPTION: This snippet shows the available options for the 'chainsaw migrate' command. Currently, it only includes the help flag (-h or --help) which displays help information for the command.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for migrate\n```\n\n----------------------------------------\n\nTITLE: Defining time_truncate Function Signature in Kyverno Chainsaw\nDESCRIPTION: Specifies the function signature for time_truncate which takes two string parameters. The function is used to round time down to a multiple of duration.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/time_truncate.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntime_truncate(string, string)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Completion\nDESCRIPTION: Command to enable shell completion in Zsh environment by adding the autoload directive to the Zsh configuration file.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion_zsh.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Disabling Templating with Command-Line Flags\nDESCRIPTION: This bash command demonstrates how to disable templating options for the Chainsaw application using command-line flags. The 'test' command is called with the '--template=false' flag to override the default settings.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/templating.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test --template=false\n```\n\n----------------------------------------\n\nTITLE: Using the Chainsaw Build Docs Command in Bash\nDESCRIPTION: The command syntax for building test documentation with chainsaw. This command generates documentation for chainsaw tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_build_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw build docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in Kyverno Chainsaw\nDESCRIPTION: This code demonstrates the use of the floor function to round down a floating-point number. The example shows that applying floor to 1.9 results in 1, effectively removing the decimal part.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/jp/examples/floor.md#2025-04-21_snippet_0\n\nLANGUAGE: kyverno\nCODE:\n```\nfloor(`1.9`) == `1`\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Completion Command Options\nDESCRIPTION: Basic command line options for the chainsaw completion command. Shows the help flag option.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_completion.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Error Output from Invalid kubectl Command\nDESCRIPTION: Example output from an invalid kubectl command showing the error message and suggestion.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/examples/test-output.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl foo\n\nerror: unknown command \"foo\" for \"kubectl\"\n\nDid you mean this?\n        top\n```\n\n----------------------------------------\n\nTITLE: String Suffix Check Example - True Case\nDESCRIPTION: Demonstrates using ends_with function to check if 'foobar' ends with 'bar', which returns true\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/ends_with.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nends_with('foobar', 'bar') == `true`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zsh Completion\nDESCRIPTION: Commands to enable Chainsaw shell completion in Zsh, including options for current session, persistent configuration via .zshrc, and custom completion directory setup.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/quick-start/completion.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource <(chainsaw completion zsh)\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 'source <(chainsaw completion zsh)' >> ~/.zshrc\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Create a directory for completions if it doesn't exist\nmkdir -p ~/.zsh/completion\n# Generate and save the completion script\nchainsaw completion zsh > ~/.zsh/completion/_chainsaw\n\n# Make sure the directory is in your fpath by adding to ~/.zshrc:\necho 'fpath=(~/.zsh/completion $fpath)' >> ~/.zshrc\necho 'autoload -U compinit; compinit' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Search with No Match\nDESCRIPTION: Demonstrates searching from a position after the substring, returning null\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_last.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfind_last('subject string', 'string', `9`) == null\n```\n\n----------------------------------------\n\nTITLE: Search with Restrictive End Boundary\nDESCRIPTION: Demonstrates searching with an end boundary that excludes the substring match\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/find_last.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfind_last('subject string', 'string', `0`, `13`) == null\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure in Markdown for Kyverno Chainsaw\nDESCRIPTION: This snippet outlines the structure of a test case using Markdown tables. It defines a single step with an 'apply' operation and provides metadata about bindings, outputs, and descriptions.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/negative-testing/resource/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test: `negative-resource`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Defining Semver Comparison Function Signature in Markdown\nDESCRIPTION: Specifies the signature of the semver_compare function, which takes two string parameters representing semantic version numbers.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/semver_compare.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nsemver_compare(string, string)\n```\n```\n\n----------------------------------------\n\nTITLE: Chainsaw API Type Specifications\nDESCRIPTION: Markdown documentation detailing the API types and fields for the Chainsaw testing framework, including their relationships, requirements and specifications.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/apis/chainsaw.v1alpha1.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Type | Required | Inline | Description |\n|---|---|---|---|---|\n| `apply` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Apply defines the timeout for the apply operation</p> |\n| `assert` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Assert defines the timeout for the assert operation</p> |\n| `cleanup` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Cleanup defines the timeout for the cleanup operation</p> |\n| `delete` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Delete defines the timeout for the delete operation</p> |\n| `error` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Error defines the timeout for the error operation</p> |\n| `exec` | [`meta/v1.Duration`] | :white_check_mark: |  | <p>Exec defines the timeout for exec operations</p> |\n```\n\n----------------------------------------\n\nTITLE: Usage of Chainsaw Docs Command\nDESCRIPTION: Displays the usage syntax for the 'chainsaw docs' command, which is used to generate documentation for Chainsaw tests.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/build/docs/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Subtracting Quantities in Kyverno Chainsaw\nDESCRIPTION: Demonstrates subtracting data storage quantities using the subtract function with memory units.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/subtract.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract('2Mi', '1Mi') == '1Mi'\n```\n\n----------------------------------------\n\nTITLE: String Prefix Check Example - True Case\nDESCRIPTION: Example showing starts_with function returning true when string starts with given prefix.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/starts_with.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarts_with('foobar', 'foo') == `true`\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of a test case for namespace template configuration. It includes a step table and an operation table for the assert action.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/namespace-template-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test: `namespace-template-config`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `assert` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Using not_null Function with Non-null Element\nDESCRIPTION: Example showing the not_null function returning the first non-null element 'foo' when provided with multiple null values followed by a string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/not_null.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnot_null(null, null, 'foo') == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Running Test Discovery with Bash\nDESCRIPTION: This Bash command configures Chainsaw to run test discovery with specified parameters. It uses flags to set the test file name, test inclusion regex, and exclusion regex. Dependencies include a Unix-like shell and the Chainsaw command-line tool installed. Inputs are specified through command-line arguments.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/configuration/options/discovery.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchainsaw test                                   \\\n  --test-file chainsaw-test                     \\\n  --full-name                                   \\\n  --include-test-regex 'chainsaw/.*'            \\\n  --exclude-test-regex 'chainsaw/exclude-.*'\n```\n\n----------------------------------------\n\nTITLE: Subtracting Durations in Kyverno Chainsaw\nDESCRIPTION: Shows how to subtract time durations using the subtract function with time units.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/subtract.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsubtract('2h', '1h') == '1h'\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Test Step in Markdown\nDESCRIPTION: This snippet defines a test step for a delete operation in Markdown format. It includes a table structure for the step details and operations within the try block.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/delete/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n| 2 | `delete` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Converting Object to JSON String\nDESCRIPTION: Demonstrates converting a JavaScript object to its JSON string representation using to_string.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_string.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nto_string({bar:'bam',foo:'baz'}) == '{\"bar\":\"bam\",\"foo\":\"baz\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Chainsaw Test Configuration\nDESCRIPTION: Configures a test scenario with a single step and an assert operation\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/values/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `values`\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n```\n\n----------------------------------------\n\nTITLE: Using Chainsaw Tests Command\nDESCRIPTION: This snippet shows the usage syntax for the 'chainsaw tests' command, which is used to migrate KUTTL tests to Chainsaw. It includes the command structure and available flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/tests/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage:\n  chainsaw tests [flags]\n\nFlags:\n      --cleanup   If set, delete converted files\n  -h, --help      help for tests\n      --save      If set, converted files will be saved\n```\n\n----------------------------------------\n\nTITLE: Step-1 Test Operations\nDESCRIPTION: Initial test step with a single apply operation\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/outputs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napply\n```\n\n----------------------------------------\n\nTITLE: Defining Test Steps in Markdown Table\nDESCRIPTION: This snippet defines the test steps using a markdown table. It specifies a single step named 'step-1' with no bindings and one try operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/namespace-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 1 | 0 | 0 | 0 |\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Chainsaw KUTTL Migration Command\nDESCRIPTION: Demonstrates the basic usage syntax for the 'chainsaw kuttl' command, including the option to use flags or subcommands.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/migrate/kuttl/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchainsaw kuttl [flags]\nchainsaw kuttl [command]\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno Chainsaw Test Structure in YAML\nDESCRIPTION: This YAML structure outlines a Kyverno Chainsaw test named 'jmespath-label-condition'. It defines a single step with two operations: 'apply' and 'assert'. The test structure includes placeholders for bindings, try/catch/finally blocks, and cleanup operations.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/jmespath-label-condition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Test: `jmespath-label-condition`\n\n*No description*\n\n## Steps\n\n| # | Name | Bindings | Try | Catch | Finally | Cleanup |\n|:-:|---|:-:|:-:|:-:|:-:|:-:|\n| 1 | [step-1](#step-step-1) | 0 | 2 | 0 | 0 | 0 |\n\n### Step: `step-1`\n\n*No description*\n\n#### Try\n\n| # | Operation | Bindings | Outputs | Description |\n|:-:|---|:-:|:-:|---|\n| 1 | `apply` | 0 | 0 | *No description* |\n| 2 | `assert` | 0 | 0 | *No description* |\n```\n\n----------------------------------------\n\nTITLE: Defining Kyverno Chainsaw Test Steps in YAML\nDESCRIPTION: This YAML configuration defines a Kyverno Chainsaw test with multiple steps. It includes try-catch blocks for applying resources, collecting logs and events, running commands, and executing scripts. The test also includes assertion and cleanup steps.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/lint/test/txt.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test-1\nspec:\n  steps:\n  - try:\n    - apply:\n        file: foo.yaml\n    catch:\n    - podLogs:\n        namespace: foo\n        name: bar\n    - events:\n        namespace: foo\n        name: bar\n    - command:\n        entrypoint: time\n    - script:\n        content: echo \"hello\"\n  - try:\n    - assert:\n        file: bar.yaml\n    finally:\n    - podLogs:\n        namespace: foo\n        name: bar\n    - events:\n        namespace: foo\n        name: bar\n    - command:\n        entrypoint: time\n    - script:\n        content: echo \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Step 2 in Kyverno Chainsaw Test\nDESCRIPTION: Sets up the second step of the test with a local binding 'b' (value 2) and an 'assert' operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/bindings/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nb: 2\n\nassert:\n```\n\n----------------------------------------\n\nTITLE: Defining Template Binding for Namespace\nDESCRIPTION: Creates a template binding for 'foo' that joins the namespace with 'foo' using a hyphen\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n(join('-', [$namespace, 'foo']))\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Test Command Options\nDESCRIPTION: Comprehensive list of available options for the chainsaw test command, including timeout configurations, cluster settings, Kubernetes authentication options, test filtering, and report formatting parameters.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --apply-timeout duration                    The apply timeout to use as default for configuration (default 5s)\n      --assert-timeout duration                   The assert timeout to use as default for configuration (default 30s)\n      --cleanup-delay duration                    Adds a delay between the time a test ends and the time cleanup starts\n      --cleanup-timeout duration                  The cleanup timeout to use as default for configuration (default 30s)\n      --cluster strings                           Register cluster (format <cluster name>=<kubeconfig path>:[context name])\n      --config string                             Chainsaw configuration file\n      --default-compiler string                   If set, configures the default compiler (jp or cel)\n      --delete-timeout duration                   The delete timeout to use as default for configuration (default 15s)\n      --deletion-propagation-policy string        The deletion propagation policy (Foreground|Background|Orphan) (default \"Background\")\n      --error-timeout duration                    The error timeout to use as default for configuration (default 30s)\n      --exclude-test-regex string                 Regular expression to exclude tests\n      --exec-timeout duration                     The exec timeout to use as default for configuration (default 5s)\n      --fail-fast                                 Stop the test upon encountering the first failure\n      --force-termination-grace-period duration   If specified, overrides termination grace periods in applicable resources\n      --full-name                                 Use full test case folder path instead of folder name\n  -h, --help                                      help for test\n      --include-test-regex string                 Regular expression to include tests\n      --kube-as string                            Username to impersonate for the operation\n      --kube-as-group stringArray                 Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                        UID to impersonate for the operation\n      --kube-certificate-authority string         Path to a cert file for the certificate authority\n      --kube-client-certificate string            Path to a client certificate file for TLS\n      --kube-client-key string                    Path to a client key file for TLS\n      --kube-cluster string                       The name of the kubeconfig cluster to use\n      --kube-context string                       The name of the kubeconfig context to use\n      --kube-disable-compression                  If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify             If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string                     If present, the namespace scope for this CLI request\n      --kube-password string                      Password for basic authentication to the API server\n      --kube-proxy-url string                     If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string               The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                        The address and port of the Kubernetes API server\n      --kube-tls-server-name string               If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                         Bearer token for authentication to the API server\n      --kube-user string                          The name of the kubeconfig user to use\n      --kube-username string                      Username for basic authentication to the API server\n      --namespace string                          Namespace to use for tests\n      --no-cluster                                Runs without cluster\n      --no-color                                  Removes output colors\n      --parallel int                              The maximum number of tests to run at once\n      --pause-on-failure                          Pause test execution failure (implies no concurrency)\n      --remarshal                                 Remarshals tests yaml to apply anchors before parsing\n      --repeat-count int                          Number of times to repeat each test (default 1)\n      --report-format string                      Test report format (JSON|XML|JUNIT-TEST|JUNIT-STEP|JUNIT-OPERATION)\n      --report-name string                        The name of the report to create (default \"chainsaw-report\")\n      --report-path string                        The path of the report to create\n      --selector strings                          Selector (label query) to filter on\n      --shard-count int                           Number of shards\n      --shard-index --shard-count                 Current shard index (if --shard-count > 0)\n      --skip-delete                               If set, do not delete the resources after running the tests\n      --template                                  If set, resources will be considered for templating (default true)\n      --test-dir strings                          Directories containing test cases to run\n      --test-file string                          Name of the test file (default \"chainsaw-test\")\n      --values strings                            Values passed to the tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Step 1 in Kyverno Chainsaw Test\nDESCRIPTION: Defines the first step of the test, including a local binding 'b' with value 2 and an 'apply' operation.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/e2e/examples/bindings/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nb: 2\n\napply:\n```\n\n----------------------------------------\n\nTITLE: Invalid Number Conversion Example\nDESCRIPTION: Illustrates that attempting to convert a non-numeric value (like boolean false) to a number results in null, indicating conversion failure.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/to_number.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nto_number(`false`) == null\n```\n\n----------------------------------------\n\nTITLE: Chainsaw Test Configuration and Execution Log\nDESCRIPTION: A log output showing the configuration loading process and test execution results from Chainsaw. The configuration includes test directories, timeout settings, report formatting options, namespace settings, and test filtering parameters. The execution summary shows test results statistics.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/test/config_all_fields.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nVersion: ---\nLoading config (../../../testdata/commands/test/config/config_all_fields.yaml)...\n- Using test file: chainsaw-test\n- TestDirs [.]\n- SkipDelete true\n- FailFast true\n- ReportFormat 'JSON'\n- ReportName 'custom-chainsaw-report'\n- ReportPath '../../../.temp'\n- Namespace 'test-namespace'\n- FullName true\n- IncludeTestRegex '^include-.*'\n- ExcludeTestRegex '^exclude-.*'\n- ApplyTimeout 5s\n- AssertTimeout 10s\n- CleanupTimeout 5s\n- DeleteTimeout 5s\n- ErrorTimeout 10s\n- ExecTimeout 10s\n- DeletionPropagationPolicy Background\n- Parallel 5\n- Template true\n- NoCluster false\n- PauseOnFailure false\nLoading tests...\nLoading values...\nRunning tests...\nTests Summary...\n- Passed  tests 0\n- Failed  tests 0\n- Skipped tests 0\nSaving report...\nDone.\n```\n\n----------------------------------------\n\nTITLE: Displaying Chainsaw Export Command Usage in CLI\nDESCRIPTION: This snippet shows the usage instructions and available subcommands for the 'chainsaw export' command. It includes the main command syntax, available subcommands, and flags.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/export/help.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nExport commands\n\nUsage:\n  chainsaw export [flags]\n  chainsaw export [command]\n\nAvailable Commands:\n  schemas     Export JSON schemas\n\nFlags:\n  -h, --help   help for export\n\nUse \"chainsaw export [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Copyright Notice for Kubernetes\nDESCRIPTION: This code snippet contains the copyright notice and license information for the Kubernetes project. It specifies that the software is licensed under Apache License 2.0, outlining the permissions and conditions for using, modifying, and distributing the software.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/hack/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nCopyright The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Clustered Resource Assertion Flag\nDESCRIPTION: Flag to specify if a resource is clustered, applicable only when loading resources from a file\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/testdata/commands/assert/help.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--clustered\n```\n\n----------------------------------------\n\nTITLE: Using the Ceil Function in Kyverno Chainsaw\nDESCRIPTION: Example showing how to use the ceil function to round up a decimal number to the next highest integer. The function takes a number as input and returns the ceiling value.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/jp/examples/ceil.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nceil(`1.9`) == `2`\n```\n\n----------------------------------------\n\nTITLE: Available Options for Chainsaw Migrate KUTTL Tests Command\nDESCRIPTION: This snippet lists the available options for the 'chainsaw migrate kuttl tests' command. It includes flags for cleaning up converted files, displaying help information, and saving converted files.\nSOURCE: https://github.com/kyverno/chainsaw/blob/main/website/docs/reference/commands/chainsaw_migrate_kuttl_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --cleanup   If set, delete converted files\n  -h, --help      help for tests\n      --save      If set, converted files will be saved\n```"
  }
]