[
  {
    "owner": "pmndrs",
    "repo": "leva",
    "content": "TITLE: Basic usage of useControls hook in React components\nDESCRIPTION: Demonstrates how to use the useControls hook from Leva in various React components to create GUI controls. It shows examples of numeric, string, and boolean inputs.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\n\nfunction MyComponent() {\n  const { myValue } = useControls({ myValue: 10 })\n  return myValue\n}\n\nfunction AnotherComponent() {\n  const { anotherValue } = useControls({ anotherValue: 'alive!!' })\n\n  return <div>Hey, I'm {anotherValue}</div>\n}\n\nfunction UnmountedComponent() {\n  const { barValue } = useControls({ barValue: false })\n\n  return barValue ? <div>Hello!</div> : null\n}\n\nfunction MyApp() {\n  return (\n    <>\n      <MyComponent />\n      <AnotherComponent />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leva Component in React\nDESCRIPTION: This snippet shows how to import and use the Leva component in a React application. It demonstrates various configuration options such as theme, fill, flat, oneLineLabels, hideTitleBar, collapsed, and hidden.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/configuration.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Leva } from 'leva'\n\nexport default function MyApp() {\n  return (\n    <>\n      <Leva\n        theme={myTheme} // you can pass a custom theme (see the styling section)\n        fill // default = false,  true makes the pane fill the parent dom node it's rendered in\n        flat // default = false,  true removes border radius and shadow\n        oneLineLabels // default = false, alternative layout for labels, with labels and fields on separate rows\n        hideTitleBar // default = false, hides the GUI header\n        collapsed // default = false, when true the GUI is collpased\n        hidden // default = false, when true the GUI is hidden\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering of Leva controls\nDESCRIPTION: Shows how to conditionally render Leva controls based on the values of other controls using the render property and get function.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nuseControls({\n  check: false,\n  myNumber: 4,\n  color: { value: '#ffffffff', render: (get) => get('check') && get('myNumber') > 5 },\n})\n```\n\n----------------------------------------\n\nTITLE: Combining set and onChange for Bidirectional Binding\nDESCRIPTION: Shows how to combine `set` and `onChange` to create bidirectional binding with external APIs. This allows updating Leva from external events and vice versa.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/advanced/controlled-inputs.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [, set] = useControls(() => ({\n  position: {\n    value: { x: 0, y: 0 },\n    onChange: (value) => {\n      // imperatively update the world after Leva input changes\n    },\n  },\n}))\n\nconst targetRef = useRef()\nuseDrag(({ offset: [x, y] }) => set({ position: { x, y } }), { target: targetRef })\n```\n\n----------------------------------------\n\nTITLE: Using the useControls Hook in React\nDESCRIPTION: A basic example showing how to use the useControls hook from Leva in a React component. It demonstrates creating text and number controls that update the component's UI.\nSOURCE: https://github.com/pmndrs/leva/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\n\nfunction MyComponent() {\n  const { name, aNumber } = useControls({ name: 'World', aNumber: 0 })\n\n  return (\n    <div>\n      Hey {name}, hello! {aNumber}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Number Input in Leva (React)\nDESCRIPTION: Creates a single numerical input using Leva's useControls hook. Supports arrow key navigation, drag interactions, and automatic step calculation.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { myNumber } = useControls({\n  myNumber: 4,\n})\n```\n\n----------------------------------------\n\nTITLE: Using onChange to Listen for Leva Value Changes\nDESCRIPTION: Shows how to use the `onChange` callback to react to value changes in Leva. By default, inputs with `onChange` don't cause React rerenders, making them efficient for frequently changing values.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/advanced/controlled-inputs.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst divRef = React.useRef(null)\nconst data = useControls({\n  color: {\n    value: '#f00',\n    onChange: (v) => {\n      // imperatively update the world after Leva input changes\n      divRef.current.style.color = v\n    },\n  },\n})\n\n// `data.color` is undefined\n```\n\n----------------------------------------\n\nTITLE: Using set to Update Leva Values Externally\nDESCRIPTION: Demonstrates how to use the `set` function from useControls to update Leva values from outside the GUI. This approach returns both the current values and a setter function.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/advanced/controlled-inputs.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [{ text }, set] = useControls(() => ({ text: 'my string' }))\n\nreturn <input type=\"text\" value={text} onChange={(e) => set({ text: e.target.value })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input in Leva (React)\nDESCRIPTION: Sets up a number input with an additional range slider by specifying min and max values. Includes options for initial value and step size.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { myNumber } = useControls({\n  myNumber: {\n    value: 4,\n    min: 0,\n    max: 10,\n    step: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a simple folder structure in Leva\nDESCRIPTION: Demonstrates how to create a simple folder structure in Leva by providing a folder name as the first argument to useControls.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nuseControls('My folder', {\n  showLighting: true,\n  showStats: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating nested folders in Leva using the folder function\nDESCRIPTION: Shows how to create nested folders in Leva using the folder function. It also explains how the returned state is structured regardless of folder nesting.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { folder, useControls } from 'leva'\n\nconst { showLighting, showStats } = useControls('My folder', {\n  lighting: folder({\n    showLighting: true,\n  }),\n  'Show stats': folder({\n    showStats: false,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Color Inputs in Leva (React)\nDESCRIPTION: Demonstrates how to create color picker inputs using different color formats. Supports hexadecimal and RGBA object representations.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst colors = useControls({\n  myFooColor: '#fff',\n  myBarColor: { r: 200, b: 125, g: 106, a: 0.4 },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Boolean Toggle in Leva (React)\nDESCRIPTION: Creates a simple toggle input for boolean values using Leva's useControls hook.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { toggle } = useControls({ toggle: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval Input in Leva (React)\nDESCRIPTION: Sets up an interval input for two numerical values with specified min and max bounds. Useful for range selection.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { myInterval } = useControls({\n  myInterval: {\n    min: 0,\n    max: 10,\n    // initial value of 4, 5\n    value: [4, 5],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Select Dropdown in Leva (React)\nDESCRIPTION: Implements a dropdown select input with a list of predefined options and an optional default value.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst presetColor = useControls({\n  options: ['red', 'green', 'blue', 'yellow'],\n  value: 'red',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Leva Bezier Plugin in React\nDESCRIPTION: Example showing different ways to initialize and use the bezier plugin in a React component. Demonstrates default initialization, array-based initialization, preset-based initialization, and configuration object initialization. Also shows how to evaluate the curve and use it in CSS animations.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-bezier/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\nimport { bezier } from '@leva-ui/plugin-bezier'\n\nfunction MyComponent() {\n  const { curve } = useControls({ curve: bezier() })\n  // or\n  const { curve } = useControls({ curve: bezier([0.54, 0.05, 0.6, 0.98]) })\n  // or\n  const { curve } = useControls({ curve: bezier('in-out-quadratic') })\n  // or\n  const { curve } = useControls({ curve: bezier({ handles: [0.54, 0.05, 0.6, 0.98], graph: false }) })\n\n  // built-in function evaluation\n  console.log(curve.evaluate(0.3))\n\n  // inside a css like animation-timing-function\n  return <div style={{ animationTimingFunction: value.cssEasing }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Controls in React Component using Leva\nDESCRIPTION: Example React component that demonstrates how to use the spring plugin with Leva's useControls hook. It creates UI controls for spring animation parameters (tension, friction, and mass) and renders the spring value as a string.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-spring/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\nimport { spring } from '@leva-ui/plugin-spring'\n\nfunction MyComponent() {\n  const { mySpring } = useControls({ mySpring: spring({ tension: 100, friction: 30, mass: 1 }) })\n  return mySpring.toString()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Leva Plot Plugin in React Component\nDESCRIPTION: Example showing how to use the plot plugin with the Leva controls system. The plot function creates a mathematical function based on the provided expression, with options for displaying a graph and setting boundary values for x and y axes.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-plot/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\nimport { plot } from '@leva-ui/plugin-plot'\n\nfunction MyComponent() {\n  const { y } = useControls({ y: plot({ expression: 'cos(x)', graph: true, boundsX: [-10, 10], boundsY: [0, 100] }) })\n  return y(Math.PI)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Leva GUI in React Application\nDESCRIPTION: This snippet demonstrates how to disable the Leva GUI by setting the 'hidden' prop to false. It shows the usage of useControls hook and how it's affected by the Leva component's configuration.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/configuration.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Leva } from 'leva'\n\nfunction MyComponent() {\n  const { myValue } = useControls({ myValue: 10 }) // Won't be visible because the panel will not render.\n\n  return myValue\n}\n\nexport default function MyApp() {\n  return (\n    <>\n      <Leva {...config} hidden={false} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using onChange with transient:false to Access Input Values\nDESCRIPTION: Demonstrates how to use `onChange` while still retrieving the input value by setting `transient: false`. This allows both reacting to changes and accessing the current value.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/advanced/controlled-inputs.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst divRef = React.useRef(null)\nconst data = useControls({\n  color: { value: '#f00', onChange: (v) => {}, transient: false },\n})\n\n// `data.color` will be defined\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector2 Input in Leva (React)\nDESCRIPTION: Creates a compound input for two numerical values, supporting both object and array formats. Includes joystick control options.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst { position } = useControls({\n  position: { x: 0, y: 0 },\n  boxSize: [10, 20],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector2 Joystick in Leva (React)\nDESCRIPTION: Demonstrates how to customize the joystick behavior for Vector2 inputs, including inversion and disabling options.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst { position } = useControls({\n  position: {\n    value: { x: 0, y: 0 },\n    joystick: 'invertY',\n  },\n  boxSize: {\n    value: [10, 20],\n    joystick: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Vector2 Step in Leva (React)\nDESCRIPTION: Shows how to set the step value for Vector2 inputs, affecting joystick resistance and keyboard control sensitivity.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst { position } = useControls({\n  position: {\n    value: { x: 0, y: 0 },\n    step: 0.1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Bezier Plugin in JavaScript with Leva\nDESCRIPTION: Example of how to import and use the bezier plugin from @leva-ui/plugin-bezier with the useControls hook to create a bezier curve control with default points.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-bezier/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bezier } from '@leva-ui/plugin-bezier'\nuseControls({ curve: bezier([0.25, 0.1, 0.25, 1]) })\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Vector2 Coordinates in Leva (React)\nDESCRIPTION: Demonstrates how to set options separately for each coordinate in a Vector2 input, allowing for fine-grained control.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nuseControls({\n  vec2: {\n    value: {\n      x: 0,\n      y: 0,\n    },\n    x: {\n      step: 0.1,\n    },\n    y: {\n      step: 1,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector3 Input in Leva (React)\nDESCRIPTION: Creates a compound input for three numerical values (x, y, z), supporting both object and array formats. Similar to Vector2 but without joystick option.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/inputs.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nuseControls({\n  vec3: {\n    x: 0,\n    y: 2,\n    z: 1.5,\n  },\n  anotherVec3: [3, 1, 1],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with Leva in React\nDESCRIPTION: This snippet demonstrates how to create a simple button using the Leva library's useControls hook. The button, when clicked, logs a message to the console.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/special-inputs.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst button = useControls({\n  foo: button(() => console.log('clicked')),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding 'get' Function to useControls Hook Return in Leva\nDESCRIPTION: Enhances the useControls hook in Leva to return a 'get' function, allowing users to retrieve current control values programmatically.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- 466f307: feat: `useControls` returns a `get` function\n```\n\n----------------------------------------\n\nTITLE: Adding Drag Callbacks and Improving Interval Setting in Leva\nDESCRIPTION: Introduces new callbacks for drag events on the Leva panel and allows setting intervals externally using a number array.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- fd8b07f: feat: add `onDrag` / `onDragStart` / `onDragEnd` callbacks when dragging Leva panel.\n- 81acf37: fix: allow interval to be set externally with [number, number]\n```\n\n----------------------------------------\n\nTITLE: Adding Pointer Lock API for Number Input in Leva\nDESCRIPTION: Adds support for using the Pointer Lock API with Number inputs in Leva. This allows for more precise control when adjusting numeric values.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- b9c6376: feat: use Pointer Lock API for Number input\n```\n\n----------------------------------------\n\nTITLE: Adding Support for React 18 and 19 in Leva\nDESCRIPTION: Adds compatibility for React versions 18 and 19 in Leva. This is a potentially breaking change that updates the library to work with newer React versions.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- 3d4a620: feat!: React 18 and 19 support\n```\n\n----------------------------------------\n\nTITLE: Installing Leva via npm\nDESCRIPTION: Command to install the Leva package using npm package manager.\nSOURCE: https://github.com/pmndrs/leva/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i leva\n```\n\n----------------------------------------\n\nTITLE: Installing Leva using npm\nDESCRIPTION: Command to install Leva package using npm package manager.\nSOURCE: https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i leva\n```\n\n----------------------------------------\n\nTITLE: Installing Leva Bezier Plugin\nDESCRIPTION: Command to install the Leva Bezier plugin using npm package manager\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-bezier/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @leva-ui/plugin-bezier\n```\n\n----------------------------------------\n\nTITLE: Installing Leva Spring Plugin via npm\nDESCRIPTION: Command to install the Leva Spring plugin package from npm.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-spring/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @leva-ui/plugin-spring\n```\n\n----------------------------------------\n\nTITLE: Installing Leva Plot Plugin via npm\nDESCRIPTION: This command installs the Leva Plot plugin using npm. It adds the @leva-ui/plugin-plot package to your project dependencies.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-dates/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @leva-ui/plugin-plot\n```\n\n----------------------------------------\n\nTITLE: Using Leva Plot Plugin in a React Component\nDESCRIPTION: This snippet demonstrates how to use the Leva Plot plugin within a React component. It imports necessary functions, sets up a plot control with specific parameters, and uses the resulting function in the component render.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-dates/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useControls } from 'leva'\nimport { plot } from '@leva-ui/plugin-plot'\n\nfunction MyComponent() {\n  const { y } = useControls({ y: plot({ expression: 'cos(x)', graph: true, boundsX: [-10, 10], boundsY: [0, 100] }) })\n  return y(Math.PI)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Bezier Plugin in JavaScript\nDESCRIPTION: Example showing how to import the bezier plugin from @leva-ui/plugin-bezier and use it with useControls to create a bezier curve control.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-plot/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bezier } from '@leva-ui/plugin-bezier'\nuseControls({ curve: bezier([0.25, 0.1, 0.25, 1]) })\n```\n\n----------------------------------------\n\nTITLE: Importing Leva Components with New Export Pattern\nDESCRIPTION: Demonstrates the change in how components are exported from leva/plugin, showing both the previous and current approach for importing UI components.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-plot/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// before\nimport { Row, Label, String } from 'leva/plugin'\n\n// after\nimport { Components } from 'leva/plugin'\nconst { Row, Label, String } = Components\n```\n\n----------------------------------------\n\nTITLE: Using the Plot Plugin in JavaScript\nDESCRIPTION: Example showing how to import and use the plot plugin to create a visual graph of a mathematical expression with configurable bounds.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-plot/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plot } from '@leva-ui/plugin-plot'\nuseControls({ y: plot({ expression: 'cos(x)', graph: true, boundsX: [-10, 10], boundsY: [0, 100] }) })\n```\n\n----------------------------------------\n\nTITLE: Installing @leva-ui/plugin-spring Package\nDESCRIPTION: Example of how to import and use the bezier plugin from @leva-ui/plugin-bezier package in a React component using the useControls hook.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-spring/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bezier } from '@leva-ui/plugin-bezier'\nuseControls({ curve: bezier([0.25, 0.1, 0.25, 1]) })\n```\n\n----------------------------------------\n\nTITLE: Importing Components from leva/plugin\nDESCRIPTION: Demonstrates the change in how components are exported and imported from the leva/plugin package after a breaking change.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-spring/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nimport { Row, Label, String } from 'leva/plugin'\n\n// after\nimport { Components } from 'leva/plugin'\nconst { Row, Label, String } = Components\n```\n\n----------------------------------------\n\nTITLE: Using Plot Plugin from @leva-ui/plugin-plot\nDESCRIPTION: Example of how to import and use the plot plugin from @leva-ui/plugin-plot package in a React component using the useControls hook.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-spring/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plot } from '@leva-ui/plugin-plot'\nuseControls({ y: plot({ expression: 'cos(x)', graph: true, boundsX: [-10, 10], boundsY: [0, 100] }) })\n```\n\n----------------------------------------\n\nTITLE: Pinning Dependencies for Joystick and Color Picker in Leva\nDESCRIPTION: Fixes an issue by pinning the versions of dependencies related to joystick and color picker functionality in Leva.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- b613ceb: fix(deps): pin joystick and color picker\n```\n\n----------------------------------------\n\nTITLE: Updating Radix UI for Peer Dependencies in Leva\nDESCRIPTION: Updates the Radix UI library version used for peer dependencies in Leva, addressing potential compatibility issues.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- d658bf0: fix(leva): update radiux-ui for peer deps\n```\n\n----------------------------------------\n\nTITLE: Fixing Scrolling Issues for Long Panels in Leva\nDESCRIPTION: Resolves a problem with scrolling in Leva when dealing with long panels, improving usability for larger control sets.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- 8b21a5c: fix: scrolling long panels\n```\n\n----------------------------------------\n\nTITLE: Disabling Development Warning in Leva\nDESCRIPTION: Turns off a development-related warning message in Leva, potentially reducing noise in the development console.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- 01eb144: fix(Leva): disable dev warning\n```\n\n----------------------------------------\n\nTITLE: Adding Option to Set Order of Inputs and Folders in Leva\nDESCRIPTION: Introduces a new feature allowing users to specify the order of inputs and folders in the Leva interface, providing more control over the layout.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- 33b2d99: option to set order of inputs and folders\n```\n\n----------------------------------------\n\nTITLE: Using Bezier Plugin in Leva UI\nDESCRIPTION: Example showing how to import and use the Bezier plugin to create curve controls\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bezier } from '@leva-ui/plugin-bezier'\nuseControls({ curve: bezier([0.25, 0.1, 0.25, 1]) })\n```\n\n----------------------------------------\n\nTITLE: Updated Component Import Pattern for Leva Plugins\nDESCRIPTION: Shows the new way to import and use Leva plugin components after breaking change\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// before\nimport { Row, Label, String } from 'leva/plugin'\n\n// after\nimport { Components } from 'leva/plugin'\nconst { Row, Label, String } = Components\n```\n\n----------------------------------------\n\nTITLE: Installing Leva Plot Plugin with npm\nDESCRIPTION: Command to install the Leva Plot plugin package via npm.\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/plugin-plot/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @leva-ui/plugin-plot\n```\n\n----------------------------------------\n\nTITLE: Updated Normalize Function Signature\nDESCRIPTION: Shows the updated normalize function signature with new path and data parameters\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @path the path of the input\n * @data the data available in the store\n */\nconst normalize = (input: Input, path: string, data: Data)\n```\n\n----------------------------------------\n\nTITLE: Updated Sanitize Function Signature\nDESCRIPTION: Shows the updated sanitize function signature with new path and store parameters\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @path the path of the input\n * @store the store\n */\nconst sanitize = (\n  value: any,\n  settings: Settings,\n  prevValue: any,\n  path: string,\n  store: StoreType\n)\n```\n\n----------------------------------------\n\nTITLE: Using Plot Plugin in Leva UI\nDESCRIPTION: Example showing how to import and use the Plot plugin to create graph controls\nSOURCE: https://github.com/pmndrs/leva/blob/main/packages/leva/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plot } from '@leva-ui/plugin-plot'\nuseControls({ y: plot({ expression: 'cos(x)', graph: true, boundsX: [-10, 10], boundsY: [0, 100] }) })\n```"
  }
]