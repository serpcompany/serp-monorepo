[
  {
    "owner": "dc7290",
    "repo": "next-export-optimize-images",
    "content": "TITLE: Configuring Next.js for Static Export with Image Optimization\nDESCRIPTION: Sets up next.config.js to enable image optimization during build time while using static export. This configuration enables both build-time image optimization through next-export-optimize-images and on-demand optimization through next/image.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/06-examples.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst withExportImages = require('next-export-optimize-images')\n\nmodule.exports = withExportImages({\n  output: 'export',\n  images: {\n    loader: 'default',\n  },\n  // write your next.js configuration values.\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Multiple Plugins\nDESCRIPTION: Advanced configuration showing how to combine next-export-optimize-images with other plugins like bundle-analyzer.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst withExportImages = require('next-export-optimize-images')\nconst withAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\nmodule.exports = withExportImages(\n  withAnalyzer({\n    output: 'export',\n    // write your next.js configuration values.\n  })\n)\n// Or\nmodule.exports = async () => {\n  const config = await withExportImages({\n    output: 'export',\n    // write your next.js configuration values.\n  })\n\n  return withAnalyzer(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Next.js with Export Images\nDESCRIPTION: Basic configuration setup for next-export-optimize-images in next.config.js file.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst withExportImages = require('next-export-optimize-images')\n\nmodule.exports = withExportImages({\n  output: 'export',\n  // write your next.js configuration values.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Configuration for Next Export Optimize Images in JavaScript\nDESCRIPTION: This snippet shows how to create a basic configuration file for the next-export-optimize-images library. It demonstrates the structure of the config object and how to export it.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/04-Configurations/01-basic-configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next-export-optimize-images').Config}\n */\nconst config = {\n  // your configuration values.\n}\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Adding Blur Placeholder to Optimized Images\nDESCRIPTION: Shows how to add a blur placeholder effect to images using the next-export-optimize-images component. This improves user experience by showing a blurred version of the image while the full image is loading.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/06-examples.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"/img.png\" width={1280} height={640} alt=\"\" placeholder=\"blur\" />\n```\n\n----------------------------------------\n\nTITLE: Using Both next/image and Custom Image Components\nDESCRIPTION: Demonstrates how to use both the native Next.js image component and the optimized Image component from next-export-optimize-images in the same component. This approach allows handling both remote images via next/image and local images via the optimized component.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/06-examples.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport NextImage from 'next/image'\nimport Image from 'next-export-optimize-images/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <NextImage src=\"https://example.com/img.png\" width={1280} height={640} alt=\"\" />\n      <Image src=\"/img.png\" width={1280} height={640} alt=\"\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Width in Next.js Config for Optimization\nDESCRIPTION: Reduces build time by limiting the number of image sizes generated by next/image. This configuration specifies fewer device sizes to generate, resulting in fewer image variations that need processing.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/07-qa.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withExportImages({\n  images: {\n    deviceSizes: [640, 960, 1280, 1600, 1920],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Sharp Image Processing Options\nDESCRIPTION: Reduces build time by lowering the compression effort levels for PNG, WebP and AVIF formats. Lower effort values sacrifice some image optimization quality for faster processing times.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/07-qa.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  sharpOptions: {\n    png: {\n      effort: 1,\n    },\n    webp: {\n      effort: 0,\n    },\n    avif: {\n      effort: 0,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Mode in Next Export Optimize Images\nDESCRIPTION: Sets up the configuration file to enable build mode in next-export-optimize-images. This allows pre-optimization of images while still running the application on the Next.js server.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/03-build-mode.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next-export-optimize-images').Config}\n */\nconst config = {\n  mode: 'build',\n}\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup with Remote Images\nDESCRIPTION: Example of export-images.config.js configuration file setup for defining remote images, along with component usage combining both Image and RemoteImage components.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/02-remote-image-component.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('next-export-optimize-images').Config}\n */\nconst config = {\n  remoteImages: ['https://example.com/image01.jpg', 'https://example.com/image02.jpg'],\n}\n\nmodule.exports = config\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next-export-optimize-images/image'\nimport RemoteImage from 'next-export-optimize-images/remote-image'\n\nfunction Component() {\n  return (\n    <>\n      <Image src=\"https://example.com/image01.jpg\" alt=\"\" />\n      <Image src=\"https://example.com/image02.jpg\" alt=\"\" />\n      <RemoteImage src=\"https://example.com/image03.jpg\" alt=\"\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Picture Component in React/Next.js\nDESCRIPTION: Basic implementation of the Picture component from next-export-optimize-images to support multiple image formats in a React component. Can be used with image paths or imported image files.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/01-picture-component.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Picture from 'next-export-optimize-images/picture'\n\nfunction Component() {\n  return (\n    <>\n      <Picture src=\"/images/img.png\" width={1920} height={1280} alt=\"\" />\n      {/* \n        Or import as follows\n        import img from './img.png'\n        <Picture src={img} alt=\"\" />\n      */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: RemotePicture Component Implementation with WebP Support\nDESCRIPTION: Shows how to use the RemotePicture component which includes built-in WebP format support for better image optimization.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/02-remote-image-component.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport RemotePicture from 'next-export-optimize-images/remote-picture'\n\nfunction Component() {\n  return (\n    <>\n      <RemotePicture src=\"https://example.com/image01.jpg\" alt=\"\" />\n      {/* \n        Or use dynamic values with variables\n        const id = 'image01'\n        <RemotePicture src={`https://example.com/${id}.jpg`} alt=\"\" />\n      */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js using ES Modules\nDESCRIPTION: ES Modules configuration setup for next-export-optimize-images in next.config.mjs file.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport withExportImages from 'next-export-optimize-images'\n\nexport default withExportImages({\n  output: 'export',\n  // write your next.js configuration values.\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Source Image Parsing in JavaScript\nDESCRIPTION: This snippet shows how to implement a custom sourceImageParser function to handle non-standard image URLs. It demonstrates parsing a URL with fileId and extension parameters to extract the necessary information.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/04-Configurations/01-basic-configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next-export-optimize-images').Config}\n */\nconst config = {\n  sourceImageParser: ({ src, defaultParser }) => {\n    const regExpMatches = src.match(/^.*\\?fileId=(.*)&extension=(\\w*).*$/)\n    if (!regExpMatches) {\n      return defaultParser(src)\n    }\n\n    // if the src has fileId and extension in its route then it\n    // must be a non-standard image, so parse it differently for all intents\n    // and purposes\n    return {\n      pathWithoutName: '', // maybe there is no path, or you can supply an arbitrary one for filename processing\n      name: regExpMatches[1] || '',\n      extension: regExpMatches[2] || '',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Format Conversion in JavaScript\nDESCRIPTION: This example shows how to configure the convertFormat option to convert images from one format to another. It demonstrates converting PNG to WebP and JPG to AVIF formats.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/04-Configurations/01-basic-configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  convertFormat: [\n    ['png', 'webp'],\n    ['jpg', 'avif'],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Image Formats in export-images.config.js\nDESCRIPTION: Configuration example for enabling AVIF format support in addition to WebP. This is set in the export-images.config.js file by specifying the generateFormats array with desired formats.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/01-picture-component.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('next-export-optimize-images').Config}\n */\nconst config = {\n  generateFormats: ['avif', 'webp'],\n}\n\nmodule.exports = config\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Images\nDESCRIPTION: Configuration file setup for handling external images, including both static URL array and async function approaches.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/05-external-images.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  remoteImages: ['https://next-export-optimize-images.vercel.app/og.png'],\n  // remoteImages: async () => {\n  //   const imageUrls = await getImageUrls() // get image urls from CMS, etc.\n  //   return imageUrls\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Device Sizes for Responsive Images\nDESCRIPTION: Configures the deviceSizes array in next.config.js to control the breakpoints at which different image sizes are generated. This allows for more precise control over the responsive image sizes created during the build process.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/06-examples.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = withExportImages({\n  images: {\n    deviceSizes: [640, 960, 1280, 1600, 1920],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Image with getOptimizedImageProps in Next.js\nDESCRIPTION: Example of using getOptimizedImageProps to set background image styling on a div element. The function extracts image properties including src, width, and height for optimal display.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/04-get-props.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { getOptimizedImageProps } from 'next-export-optimize-images/image'\n\nimport src from '../images/sample.png'\n\nexport default function BackgroundImage() {\n  const props = getOptimizedImageProps({ src, alt: '' }).props\n\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${props.src})`,\n        width: props.width,\n        height: props.height,\n      }}\n    ></div>\n  )\n}\n\nexport default WithPropsComponent\n```\n\n----------------------------------------\n\nTITLE: Implementing Art Direction with getOptimizedImageProps in Next.js\nDESCRIPTION: Demonstrates how to implement responsive images using the picture element with getOptimizedImageProps. Shows setup for different image sources based on screen size using desktop and mobile variants.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/04-get-props.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { getOptimizedImageProps } from 'next-export-optimize-images/image'\n\nimport srcDesktop from '../images/sample-desktop.png'\nimport srcMobile from '../images/sample-mobile.png'\n\nexport default function BackgroundImage() {\n  const propsDesktop = getOptimizedImageProps({ src: srcDesktop, alt: '' }).props\n  const propsMobile = getOptimizedImageProps({ src: srcMobile, alt: '' }).props\n\n  return (\n    <picture>\n      <source\n        srcSet={propsMobile.srcSet}\n        width={propsMobile.width}\n        height={propsMobile.height}\n        media=\"(max-width: 768px)\"\n      />\n      <img {...propsDesktop} />\n    </picture>\n  )\n}\n\nexport default WithPropsComponent\n```\n\n----------------------------------------\n\nTITLE: Basic RemoteImage Component Usage in TSX\nDESCRIPTION: Demonstrates how to import and use the RemoteImage component for handling remote images, including both static and dynamic URL implementations.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/02-remote-image-component.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport RemoteImage from 'next-export-optimize-images/remote-image'\n\nfunction Component() {\n  return (\n    <>\n      <RemoteImage src=\"https://example.com/image01.jpg\" alt=\"\" />\n      {/* \n        Or use dynamic values with variables\n        const id = 'image01'\n        <RemoteImage src={`https://example.com/${id}.jpg`} alt=\"\" />\n      */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optimized Image Component\nDESCRIPTION: Examples of using the Image component from next-export-optimize-images with different import methods.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Image from 'next-export-optimize-images/image'\n\n<Image src=\"/images/img.png\" width={1920} height={1280} alt=\"\" />\n// Or import as follows\nimport img from './img.png'\n<Image src={img} alt=\"\" />\n// Or require as follows\n<Image src={require('./img.png')} alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Image Component\nDESCRIPTION: Examples of using the legacy Image component from next-export-optimize-images with different import methods.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Image from 'next-export-optimize-images/legacy/image'\n\n<Image src=\"/images/img.png\" width={1920} height={1280} alt=\"\" />\n// Or import as follows\nimport img from './img.png'\n<Image src={img} alt=\"\" />\n// Or require as follows\n<Image src={require('./img.png')} alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Using Image Component with External Source\nDESCRIPTION: Example of using the Next.js Image component with an external image URL.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/05-external-images.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"https://next-export-optimize-images.vercel.app/og.png\" width=\"1280\" height=\"640\" alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Picture Component\nDESCRIPTION: The HTML structure generated by the Picture component, showing how it creates a picture element with source tags for different formats and resolutions. It includes webp format with responsive srcset attributes.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/01-picture-component.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    type=\"image/webp\"\n    srcset=\"/_next/static/chunks/images/img_1920_75.webp 1x, /_next/static/chunks/images/img_3840_75.webp 2x\"\n  />\n  <img\n    src=\"/_next/static/chunks/images/img_3840_75.png\"\n    srcset=\"/_next/static/chunks/images/img_1920_75.png 1x, /_next/static/chunks/images/img_3840_75.png 2x\"\n    width=\"1920\"\n    height=\"1280\"\n    loading=\"lazy\"\n    decoding=\"async\"\n    alt=\"\"\n  />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Customizing Filename Generation for Optimized Images in JavaScript\nDESCRIPTION: This example demonstrates how to customize the filename generation for optimized images using the filenameGenerator configuration option. It shows how to create a function that generates filenames based on path, name, width, and extension.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/04-Configurations/01-basic-configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  filenameGenerator: ({ path, name, width, extension }) =>\n    `${path.replace(/^\\//, '').replace(/\\//g, '-')}-${name}.${width}.${extension}`,\n}\n```\n\n----------------------------------------\n\nTITLE: Production Image Rendering\nDESCRIPTION: Example of how external images are rendered in production with srcset for responsive images.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/05-external-images.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  srcset=\"/_next/static/chunks/images/og_1920_75.png 1x, /_next/static/chunks/images/og_3840_75.png 2x\"\n  src=\"/_next/static/chunks/images/og_3840_75.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Development Image Rendering\nDESCRIPTION: Example of how external images are rendered during development without optimization.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/05-external-images.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  srcset=\"https://next-export-optimize-images.vercel.app/og.png?width=1920 1x, https://next-export-optimize-images.vercel.app/og.png?width=3840 2x\"\n  src=\"https://next-export-optimize-images.vercel.app/og.png?width=3840\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Build Script\nDESCRIPTION: Required modification to the build script in package.json to include image optimization step.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n-  \"build\": \"next build\",\n+  \"build\": \"next build && next-export-optimize-images\",\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Build Commands with Image Optimization\nDESCRIPTION: Shows the command line sequence to build a Next.js application and then optimize images using the configured build mode.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/03-Features/03-build-mode.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnext build && next-export-optimize-images\n```\n\n----------------------------------------\n\nTITLE: Installing next-export-optimize-images via NPM\nDESCRIPTION: Command to install the next-export-optimize-images package as a development dependency.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/02-getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D next-export-optimize-images\n```\n\n----------------------------------------\n\nTITLE: Installing Next Export Optimize Images Package\nDESCRIPTION: Command to install the next-export-optimize-images package using npm package manager. This package is required to enable image optimization features for Next.js static exports.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-export-optimize-images\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server which provides live preview and hot reloading capabilities\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Building Static Website\nDESCRIPTION: Command to generate static website content in the build directory for production deployment\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using npm package manager\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: Commit Types Table in Markdown\nDESCRIPTION: A markdown table defining the different types of commits allowed in the project and their descriptions. Used to standardize commit messages using git-cz.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| type     | description                                              |\n| -------- | -------------------------------------------------------- |\n| feat     | A new feature                                            |\n| fix      | A bug fix                                                |\n| sec      | A vulnerability fix                                      |\n| perf     | A code change that improves performance                  |\n| refactor | A code change that neither fixes a bug or adds a feature |\n| docs     | Documentation only changes                               |\n| release  | Create a release commit                                  |\n| style    | Markup, white-space, formatting, missing semi-colons...  |\n| test     | Adding missing tests                                     |\n| ci       | CI related changes                                      |\n| chore    | Build process or auxiliary tool changes                  |\n```\n\n----------------------------------------\n\nTITLE: Documentation Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter defining page metadata including description and draft status.\nSOURCE: https://github.com/dc7290/next-export-optimize-images/blob/main/docs/docs/08-planned-features.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: This page is to introduce examples of use.\ndraft: true\n---\n```"
  }
]