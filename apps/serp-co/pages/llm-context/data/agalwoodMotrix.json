[
  {
    "owner": "agalwood",
    "repo": "motrix",
    "content": "TITLE: Installing Motrix Dependencies with Yarn\nDESCRIPTION: These commands install the necessary dependencies for the Motrix project.  First, changes the current directory to the cloned Motrix directory. Then runs `yarn` to install the project dependencies specified in the `package.json` file. Yarn needs to be installed.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd Motrix\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies - Bash\nDESCRIPTION: These commands navigate to the Motrix directory and install the project's dependencies using Yarn. `cd Motrix` changes the current directory to the Motrix project directory, and `yarn` installs the dependencies listed in the `package.json` file. Yarn needs to be installed globally.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd Motrix\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running the application in development mode - Bash\nDESCRIPTION: This command starts the Motrix application in development mode using Yarn.  `yarn run dev` executes the 'dev' script defined in the project's `package.json` file, typically starting a development server with hot reloading and debugging capabilities.  The project dependencies must be installed before running this command.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Running Motrix in Development Mode\nDESCRIPTION: This command starts Motrix in development mode using `yarn`. It runs the script specified as `dev` in the `package.json` file, which typically starts a development server and enables hot-reloading. Yarn needs to be installed.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix using Flatpak - Bash\nDESCRIPTION: These commands install and run Motrix on Linux using Flatpak, a universal package manager. `flatpak install flathub net.agalwood.Motrix` installs Motrix from the Flathub repository, and `flatpak run net.agalwood.Motrix` runs the installed application. Flatpak must be installed and the Flathub repository added to the system before these commands can be used.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# 安装\nflatpak install flathub net.agalwood.Motrix\n\n# 运行\nflatpak run net.agalwood.Motrix\n```\n\n----------------------------------------\n\nTITLE: Cloning Motrix Repository\nDESCRIPTION: This command clones the Motrix repository from GitHub. This is the first step for local development, creating a local copy of the project. Git needs to be installed.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:agalwood/Motrix.git\n```\n\n----------------------------------------\n\nTITLE: Building Motrix Release\nDESCRIPTION: This command builds a release version of Motrix using `yarn`. It executes the `build` script defined in `package.json`, which compiles the source code and packages it for distribution.  Yarn needs to be installed.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Building the application for production - Bash\nDESCRIPTION: This command builds the Motrix application for production using Yarn.  `yarn run build` executes the 'build' script defined in the project's `package.json` file, typically performing tasks such as bundling the code, optimizing assets, and creating distributable packages. The project dependencies must be installed and correctly configured before running this command.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix using Chocolatey - Bash\nDESCRIPTION: These commands install and upgrade Motrix on Windows using Chocolatey, a package manager.  The `choco install motrix` command installs the application, while `choco upgrade motrix` updates it to the latest version.  Chocolatey must be installed on the system to use these commands.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 安装\nchoco install motrix\n\n# 升级\nchoco upgrade motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix via Chocolatey (Windows)\nDESCRIPTION: These commands are used to install or upgrade Motrix on Windows using Chocolatey package manager. The `choco install motrix` command installs the Motrix package, while `choco upgrade motrix` upgrades the package to the latest version if it's already installed. Chocolatey needs to be installed beforehand.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install\nchoco install motrix\n\n# Upgrade\nchoco upgrade motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix via Scoop (Windows)\nDESCRIPTION: These commands install Motrix on Windows using the Scoop package manager. It first adds the 'extras' bucket to Scoop and then installs Motrix from that bucket. Scoop requires Windows 7 or later and must be installed and configured beforehand.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscoop bucket add extras\nscoop install motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix using scoop - Bash\nDESCRIPTION: These commands install Motrix on Windows using scoop, a command-line installer.  The `scoop bucket add extras` command adds the 'extras' bucket to scoop.  The `scoop install motrix` command installs Motrix from the 'extras' bucket.  Scoop must be installed and configured correctly before running these commands.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscoop bucket add extras\nscoop install motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix using brew - Bash\nDESCRIPTION: This command installs Motrix on macOS using brew, a package manager for macOS. The `brew update` command updates the brew package list, and `brew install motrix` installs Motrix. Brew needs to be installed and configured correctly before running this command.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew install motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix via Brew (macOS)\nDESCRIPTION: This command installs Motrix on macOS using the Brew package manager. `brew update` updates the Brew package lists and `brew install motrix` installs Motrix. Brew needs to be pre-installed on the system.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew update && brew install motrix\n```\n\n----------------------------------------\n\nTITLE: Cloning the Motrix repository - Bash\nDESCRIPTION: This command clones the Motrix Git repository from GitHub. `git clone git@github.com:agalwood/Motrix.git` downloads the source code to a local directory named 'Motrix'. Git must be installed and configured on the system for this command to work.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:agalwood/Motrix.git\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Motrix via Flatpak (Linux)\nDESCRIPTION: These commands install and run Motrix on Linux using Flatpak. The `flatpak install flathub net.agalwood.Motrix` command installs Motrix from Flathub, and `flatpak run net.agalwood.Motrix` starts the application. Flatpak must be installed and configured beforehand.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install\nflatpak install flathub net.agalwood.Motrix\n\n# Run\nflatpak run net.agalwood.Motrix\n```\n\n----------------------------------------\n\nTITLE: Building Apple Silicon version - Bash\nDESCRIPTION: This command builds the Motrix application specifically for Apple Silicon (M1/M2) processors using Yarn. `yarn run build:applesilicon` executes the 'build:applesilicon' script defined in the project's `package.json` file. This generates a version optimized for ARM-based Macs.  The project dependencies must be installed and configured properly before using this command.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build:applesilicon\n```\n\n----------------------------------------\n\nTITLE: Building Motrix for Apple Silicon\nDESCRIPTION: This command builds a release version of Motrix specifically for Apple Silicon (ARM64) Macs. It executes the `build:applesilicon` script defined in `package.json`, which configures the build process to target the ARM64 architecture. Yarn needs to be installed.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build:applesilicon\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix via AUR (Arch Linux)\nDESCRIPTION: This command installs Motrix on Arch Linux using an AUR helper like `yay`. The `yay -S motrix` command installs Motrix from the Arch User Repository.  An AUR helper must be installed beforehand.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyay -S motrix\n```\n\n----------------------------------------\n\nTITLE: Installing Motrix using AUR (Arch Linux) - Bash\nDESCRIPTION: This command installs Motrix on Arch Linux using `yay`, an AUR helper. `yay -S motrix` downloads and installs Motrix from the Arch User Repository (AUR).  `yay` (or another AUR helper) and the base-devel group must be installed on the system for this to work.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyay -S motrix\n```\n\n----------------------------------------\n\nTITLE: Import Element UI Locale\nDESCRIPTION: This code snippet demonstrates how to import Element UI locale files in the `src/shared/locales/all.js` file.  It imports the English and Chinese locale files. The language pack file corresponds to the locale and used by Element UI components.\nSOURCE: https://github.com/agalwood/motrix/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport eleLocaleEn from 'element-ui/lib/locale/lang/en'\nimport eleLocaleZhCN from 'element-ui/lib/locale/lang/zh-CN'\n```\n\n----------------------------------------\n\nTITLE: Importing Element UI locales in Javascript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import Element UI locale files into the `src/shared/locales/all.js` file for internationalization. It imports English and simplified Chinese locales as examples. The locale names should be consistent with Element UI's locale naming conventions.\nSOURCE: https://github.com/agalwood/motrix/blob/master/CONTRIBUTING-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport eleLocaleEn from 'element-ui/lib/locale/lang/en'\nimport eleLocaleZhCN from 'element-ui/lib/locale/lang/zh-CN'\n```\n\n----------------------------------------\n\nTITLE: Fix broken apt installations - Bash\nDESCRIPTION: This command fixes broken package installations on Debian-based Linux distributions using apt. The command `sudo apt --fix-broken install` attempts to resolve dependency issues and complete the installation of any partially installed packages. It requires sudo privileges.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt --fix-broken install\n```\n\n----------------------------------------\n\nTITLE: Fixing Broken Installation on Deepin Linux\nDESCRIPTION: This command addresses installation issues on Deepin 20 Beta, by repairing broken dependencies. The `sudo apt --fix-broken install` command attempts to correct dependency issues and complete the installation process.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt --fix-broken install\n```\n\n----------------------------------------\n\nTITLE: Configuring npm and environment variables for Chinese mirrors - Bash\nDESCRIPTION: These commands configure npm and environment variables to use Chinese mirrors for faster downloads in China.  It sets the npm registry to `https://registry.npmmirror.com` for both yarn and npm. It also defines `ELECTRON_MIRROR` and `SASS_BINARY_SITE` to use the Taobao mirrors for Electron and node-sass binaries, respectively.\nSOURCE: https://github.com/agalwood/motrix/blob/master/README-CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn config set registry 'https://registry.npmmirror.com'\nnpm config set registry 'https://registry.npmmirror.com'\nexport ELECTRON_MIRROR='https://npm.taobao.org/mirrors/electron/'\nexport SASS_BINARY_SITE='https://npm.taobao.org/mirrors/node-sass'\n```"
  }
]