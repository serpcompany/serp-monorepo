[
  {
    "owner": "cloudposse",
    "repo": "atmos",
    "content": "TITLE: Define a Simple Atmos Workflow in YAML\nDESCRIPTION: This YAML snippet defines a simple Atmos workflow named `eks-up` that consists of three steps. Each step executes a `terraform apply` command for different Atmos Components related to setting up an EKS cluster. The workflow automates the process of bringing up the EKS cluster by applying Terraform configurations in a specific order.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  eks-up:\n    description: |\n      Bring up the EKS cluster.\n    steps:\n      - command: terraform apply vpc -auto-approve\n      - command: terraform apply eks/cluster -auto-approve\n      - command: terraform apply eks/alb-controller -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Override S3 Terraform Backend for Remote State (orgs/_defaults.yaml)\nDESCRIPTION: This YAML snippet demonstrates how to override specific attributes of the S3 Terraform backend for remote state access. It focuses on using a read-only IAM role for accessing remote state while maintaining the read-write role for state updates. This example also shows how to configure `remote_state_backend_type`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/state-backend.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3  # s3, remote, vault, azurerm, gcs, cloud\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      bucket: \"your-s3-bucket-name\"\n      dynamodb_table: \"your-dynamodb-table-name\"\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n      role_arn: \"arn:aws:iam::xxxxxxxx:role/terraform-backend-read-write\"\n\n  remote_state_backend_type: s3 # s3, remote, vault, azurerm, gcs, cloud, static\n  remote_state_backend:\n    s3:\n      role_arn: \"arn:aws:iam::xxxxxxxx:role/terraform-backend-read-only\"\n      # Override the other attributes from the `backend.s3` section as needed\n```\n\n----------------------------------------\n\nTITLE: Atmos Directory Structure\nDESCRIPTION: Shows the directory structure for centralized stacks and components configuration in Atmos, including catalogs for VPC and VPC flow logs bucket, and Terraform components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration (stack manifests)\n   ├── stacks\n   │   └── catalog  # component-specific defaults\n   │       ├── vpc\n   │       │   ├── defaults.yaml\n   │       │   ├── disabled.yaml\n   │       │   ├── dev.yaml\n   │       │   ├── prod.yaml\n   │       │   ├── staging.yaml\n   │       │   ├── ue2.yaml\n   │       │   └── uw2.yaml\n   │       └── vpc-flow-logs-bucket\n   │           ├── defaults.yaml\n   │           └── disabled.yaml\n   │   # Centralized components configuration\n   └── components\n       └── terraform  # Terraform components (a.k.a Terraform \"root\" modules)\n           ├── vpc\n           └── vpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Run Atmos Workflow with Stack Parameter\nDESCRIPTION: This command demonstrates how to execute the `terraform-plan-all-test-components` workflow, specifying the stack using the `-s` flag. The `-f` flag specifies the workflow file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\natmos workflow terraform-plan-all-test-components -f workflow1 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Team DevOps Stack Manifest - YAML\nDESCRIPTION: Example of a stack manifest for the `devops` team that imports a Terraform component. This manifest shows how a team manages a set of components defined in other stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `devops` Team manages all the components defined in the following stack manifests:\n  - catalog/terraform/top-level-component1\n```\n\n----------------------------------------\n\nTITLE: Read Terraform Outputs with !terraform.output YAML Function\nDESCRIPTION: This snippet illustrates how to read Terraform outputs of components directly in Atmos stack manifests using the `!terraform.output` YAML function. It reads the `vpc_id` output of the `vpc` component in the current stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: !terraform.output vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration with Static Backend\nDESCRIPTION: This configuration demonstrates how to use the `atmos.Component` function with a 'static' remote state backend. Instead of executing `terraform output`, Atmos returns static values from the `remote_state_backend.static` section. The example shows how to define the `static-backend` component and then refer to its static outputs in the `eks-cluster` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Component `static-backend` is configured with the remote state backend of type `static`\n    static-backend:\n      remote_state_backend_type: static\n      remote_state_backend:\n        static:\n          region: \"us-west-2\"\n          cluster_name: \"production-cluster\"\n          vpc_cidr: \"10.0.0.0/16\"\n          database:\n            type: \"postgresql\"\n            version: \"12.7\"\n            storage_gb: 100\n          allowed_ips:\n            - \"192.168.1.0/24\"\n            - \"10.1.0.0/16\"\n          tags:\n            Environment: \"production\"\n            Owner: \"infra-team\"\n\n    eks-cluster:\n      vars:\n        region: '{{ (atmos.Component \"static-backend\" .stack).outputs.region }}'\n        cluster_name: '{{ (atmos.Component \"static-backend\" .stack).outputs.cluster_name }}'\n        vpc_cidr: '{{ (atmos.Component \"static-backend\" .stack).outputs.vpc_cidr }}'\n        db_type: '{{ (atmos.Component \"static-backend\" .stack).outputs.database.type }}'\n        db_storage: '{{ (atmos.Component \"static-backend\" .stack).outputs.database.storage_gb }}'\n        # Use the `!template` YAML function to correctly handle the outputs of types map and list\n        allowed_ips: !template '{{ (atmos.Component \"static-backend\" .stack).outputs.allowed_ips }}'\n        tags: !template '{{ (atmos.Component \"static-backend\" .stack).outputs.tags }}'\n\n```\n\n----------------------------------------\n\nTITLE: Including Remote Files and Variables in Atmos Stack YAML\nDESCRIPTION: This snippet shows including remote files using `go-getter` and assigning a specific section from the remote file to the `settings` section.  It also demonstrates including different types of variables from local files (JSON, YAML, TFVARS) and how to reference them in Atmos `stack.yaml` files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# The `config` folder is relative to the `base_path` setting in `atmos.yaml`\nimport: !include config/import.yaml\n\n# Download the remote file using `go-getter` and assign the `components.terraform.component-1.settings` section\n# from the file to the `settings` section in the current stack\nsettings: !include https://raw.githubusercontent.com/cloudposse/atmos/main/tests/fixtures/scenarios/stack-templates-2/stacks/deploy/nonprod.yaml .components.terraform.component-1.settings\n\ncomponents:\n  terraform:\n    component-1:\n      vars:\n        # The `config` folder is relative to the `base_path` setting in `atmos.yaml`\n        string_var: !include config/vars.json .string_var\n        boolean_var: !include config/vars.yaml .boolean_var\n        list_var: !include config/vars.tfvars .list_var\n        map_var: !include config/vars.tfvars .map_var\n\n    component-2:\n      vars: !include config/vars.tfvars\n\n    component-3:\n      vars: !include config/vars.json\n\n    component-4:\n      vars: !include config/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform S3 Backend for Dev Environment (YAML)\nDESCRIPTION: This YAML snippet configures the Terraform S3 backend for the 'dev' environment, overriding or extending organization-level defaults. It specifies the S3 bucket name, DynamoDB table name for state locking, and IAM role ARN.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-dev-s3-bucket-name\"\n      dynamodb_table: \"your-dev-dynamodb-table-name\"\n      role_arn: \"IAM Role with permissions to access the 'dev' Terraform backend\"\n```\n\n----------------------------------------\n\nTITLE: Using Remote State Outputs in Terraform Resource (HCL)\nDESCRIPTION: This code snippet shows how to consume the remote state outputs fetched by the `remote-state` module. It accesses the `vpc_id` output of the `vpc` module and uses it in the configuration of an `aws_network_acl` resource. The resource then utilizes the output as if it were provisioned in the same component, `myapp`. This example typically resides in `main.tf`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_network_acl\" \"default\" {\n\n  vpc_id = module.vpc.vpc_id\n\n  ingress {\n    protocol   = \"tcp\"\n    rule_no    = 100\n    action     = \"allow\"\n    cidr_block = \"0.0.0.0/0\"\n    from_port  = 80\n    to_port    = 80\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Atlantis Workflows Server-Side\nDESCRIPTION: This YAML snippet demonstrates how to define Atlantis workflows in the server-side configuration (e.g., `server.yaml`). The `workflows` section lists available workflows, each with defined `plan` and `apply` steps. The `workflow` attribute under `repos` then specifies which workflow should be used for matching repositories.  `allowed_overrides` defines which keys in a repository's `atlantis.yaml` can override the server-side configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - id: /.*/\n    branch: /.*/\n\n    # 'workflow' sets the workflow for all repos that match.\n    # This workflow must be defined in the workflows section.\n    workflow: custom\n\n    # allowed_overrides specifies which keys can be overridden by this repo in\n    # its atlantis.yaml file.\n    allowed_overrides: [apply_requirements, workflow, delete_source_branch_on_merge, repo_locking]\n\n    # allowed_workflows specifies which workflows the repos that match\n    # are allowed to select.\n    allowed_workflows: [custom]\n\n    # allow_custom_workflows defines whether this repo can define its own\n    # workflows. If false (default), the repo can only use server-side defined\n    # workflows.\n    allow_custom_workflows: true\n\n# workflows lists server-side custom workflows\nworkflows:\n  custom:\n    plan:\n      steps:\n        - init\n        - plan\n    apply:\n      steps:\n        - run: echo applying\n        - apply\n```\n\n----------------------------------------\n\nTITLE: Generate Planfile with Template Processing Disabled\nDESCRIPTION: Example demonstrating how to disable Go template processing using the `--process-templates=false` flag. By default, template processing is enabled.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos Templating\nDESCRIPTION: This YAML configuration enables Go templates within Atmos stack manifests. It sets the number of evaluations to 2, defines template delimiters, configures environment variables for data sources, enables Sprig functions, and enables Gomplate functions and data sources with a 5-second timeout.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://pkg.go.dev/text/template\ntemplates:\n  settings:\n    # Enable `Go` templates in Atmos stack manifests\n    enabled: true\n    # Number of evaluations/passes to process `Go` templates\n    # If not defined, `evaluations` is automatically set to `1`\n    evaluations: 2\n    # Optional template delimiters\n    # The `{{ }}` delimiters are the default, no need to specify/redefine them\n    delimiters: [\"{{\", \"}}\"]\n    # Environment variables passed to data sources when evaluating templates\n    # https://docs.gomplate.ca/datasources/#using-awssmp-datasources\n    # https://docs.gomplate.ca/functions/aws/#configuring-aws\n    # https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html\n    env:\n      AWS_PROFILE: \"<AWS profile>\"\n      AWS_TIMEOUT: 2000\n    # https://masterminds.github.io/sprig\n    sprig:\n      # Enable Sprig functions in `Go` templates in Atmos stack manifests\n      enabled: true\n    # https://docs.gomplate.ca\n    # https://docs.gomplate.ca/functions\n    gomplate:\n      # Enable Gomplate functions and data sources in `Go` templates in Atmos stack manifests\n      enabled: true\n      # Timeout in seconds to execute the data sources\n      timeout: 5\n      datasources: {}\n```\n\n----------------------------------------\n\nTITLE: Read Data with !store YAML Function from Another Stack\nDESCRIPTION: This snippet shows how to use the `!store` YAML function to access the configuration of a component in a different stack. It reads the `vpc_id` output of the `vpc` component in the `staging` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: !store ssm/prod staging vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Team Testing Stack Manifest - YAML\nDESCRIPTION: Example of a stack manifest for the `testing` team that imports two Terraform components. This manifest illustrates how a team manages a collection of components through imports.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `testing` Team manages all the components defined in the following stack manifests:\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override\n```\n\n----------------------------------------\n\nTITLE: Include Local YAML File (Relative Path) in Atmos\nDESCRIPTION: Demonstrates including a local YAML file using a relative path with the `!include` function in an Atmos manifest.  The path is relative to the location of the current Atmos manifest file.  The contents of `vars.yaml` are injected into the `vars` section.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include ../config/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings in Atmos\nDESCRIPTION: This YAML snippet configures global settings for the Atmos CLI, including list merge strategy and terminal settings.  The `list_merge_strategy` specifies how lists are merged in Atmos stack manifests. The `terminal` section customizes terminal output. `inject_github_token` enables automatic injection of the GitHub token. Requires Atmos CLI to interpret the configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  # `list_merge_strategy` specifies how lists are merged in Atmos stack manifests.\n  # Can also be set using 'ATMOS_SETTINGS_LIST_MERGE_STRATEGY' environment variable, or '--settings-list-merge-strategy' command-line argument\n  # The following strategies are supported:\n  # `replace`: Most recent list imported wins (the default behavior).\n  # `append`:  The sequence of lists is appended in the same order as imports.\n  # `merge`:   The items in the destination list are deep-merged with the items in the source list.\n  #            The items in the source list take precedence.\n  #            The items are processed starting from the first up to the length of the source list (the remaining items are not processed).\n  #            If the source and destination lists have the same length, all items in the destination lists are\n  #            deep-merged with all items in the source list.\n  list_merge_strategy: replace\n\n  # Terminal settings for displaying content\n  terminal:\n    max_width: 120  # Maximum width for terminal output\n    pager: true     # Use pager for long output\n  inject_github_token: true # Adds the GITHUB_TOKEN as a Bearer token for GitHub API requests.\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration\nDESCRIPTION: This configuration shows how to use the `atmos.Component` function in an Atmos stack manifest to access the outputs, settings, and metadata of other components. It defines several components and demonstrates how to retrieve values from the 'test1' and 'test' components' settings, metadata and outputs.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Global `settings` section\n# It will be added and deep-merged to the `settings` section of all components\nsettings:\n  test: true\n\ncomponents:\n  terraform:\n    test:\n      metadata:\n        # Point to the Terraform/OpenTofu component\n        component: \"test\"\n      vars:\n        name: \"test\"\n\n    test1:\n      metadata:\n        # Point to the Terraform/OpenTofu component\n        component: \"test1\"\n      vars:\n        name: \"test1\"\n\n    test2:\n      metadata:\n        # Point to the Terraform/OpenTofu component\n        component: \"test2\"\n      vars:\n        name: \"test2\"\n        # Use the `atmos.Component` function to get the outputs of the Atmos component `test1`\n        # The `test1` component must be already provisioned and its outputs stored in the Terraform/OpenTofu state\n        # Atmos will execute `terraform output` on the `test1` component in the same stack to read its outputs\n        test1_id: '{{ (atmos.Component \"test1\" .stack).outputs.test1_id }}'\n        tags:\n          # Get the `settings.test` field from the `test` component in the same stack\n          test: '{{ (atmos.Component \"test\" .stack).settings.test }}'\n          # Get the `metadata.component` field from the `test` component in the same stack\n          test_terraform_component: '{{ (atmos.Component \"test\" .stack).metadata.component }}'\n          # Get the `vars.name` field from the `test1` component in the same stack\n          test1_name: '{{ (atmos.Component \"test1\" .stack).vars.name }}'\n\n```\n\n----------------------------------------\n\nTITLE: Read Data with atmos.Store from Another Stack\nDESCRIPTION: This snippet shows how to use the `atmos.Store` template function to access the configuration of a component in a different stack. It reads the `vpc_id` output of the `vpc` component in the `staging` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: '{{ atmos.Store \"ssm\" \"staging\" \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: Using !template with toJson for List/Map Outputs (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to handle outputs containing lists or maps from the `atmos.Component` function using the `!template` Atmos YAML function along with `toJson`.  The `!template` function correctly handles JSON returned from `toJson` and converts it to YAML lists or maps.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my_lambda_component:\n      vars:\n        vpc_config:\n          security_group_ids: ['{{ (atmos.Component \"security-group/lambda\" .stack).outputs.id }}']\n\n          # Output of type list from the `atmos.Component` template function\n          subnet_ids: !template '{{ toJson (atmos.Component \"vpc\" .stack).outputs.private_subnet_ids }}'\n\n          # Output of type map from the `atmos.Component` template function\n          config_map: !template '{{ toJson (atmos.Component \"config\" .stack).outputs.config_map }}'\n```\n\n----------------------------------------\n\nTITLE: Atlantis Pre-Workflow Hook Configuration\nDESCRIPTION: This snippet configures a pre-workflow hook in Atlantis to dynamically generate the repo configuration using a shell script. The `run` command executes the script before Atlantis parses the configuration.  It requires the `repo-config-generator.sh` script to be present in the repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - id: /.*/\n    pre_workflow_hooks:\n      - run: \"./repo-config-generator.sh\"\n        description: \"Generating configs\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Command\nDESCRIPTION: This command applies the Terraform configuration for the 'vpc' component in the 'us2-dev' environment using the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/stacks.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform apply vpc -s us2-dev\n```\n\n----------------------------------------\n\nTITLE: Define VPC Component in Atmos Catalog YAML\nDESCRIPTION: This snippet defines an abstract VPC component in the Atmos catalog. The `vpc-defaults` component is marked as abstract, making it non-deployable and intended for inheritance by other components. It defines default variables that can be overridden in derived components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-defaults:\n      metadata:\n        # Setting `metadata.type: abstract` makes the component `abstract`,\n        # explicitly prohibiting the component from being deployed.\n        # `atmos terraform apply` will fail with an error.\n        # If `metadata.type` attribute is not specified, it defaults to `real`.\n        # `real` components can be provisioned by `atmos` and CI/CD like Spacelift and Atlantis.\n        type: abstract\n      # Default variables, which will be inherited and can be overridden in the derived components\n      vars:\n        public_subnets_enabled: false\n        nat_gateway_enabled: false\n        nat_instance_enabled: false\n        max_subnet_count: 3\n        vpc_flow_logs_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Define Atmos Workflow with Inline Stack\nDESCRIPTION: This workflow executes `terraform plan` on a specific component across multiple stacks. The stack is specified inline within each command using the `-s` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  terraform-plan-test-component-override-2-all-stacks:\n    description: Run 'terraform plan' on 'test/test-component-override-2' component in all stacks\n    steps:\n      - command: terraform plan test/test-component-override-2 -s tenant1-ue2-dev\n      - command: terraform plan test/test-component-override-2 -s tenant1-ue2-staging\n      - command: terraform plan test/test-component-override-2 -s tenant1-ue2-prod\n      - command: terraform plan test/test-component-override-2 -s tenant2-ue2-dev\n      - command: terraform plan test/test-component-override-2 -s tenant2-ue2-staging\n      - command: terraform plan test/test-component-override-2 -s tenant2-ue2-prod\n      - type: shell\n        command: echo \"All done!\"\n```\n\n----------------------------------------\n\nTITLE: Using printf Format Function with !terraform.output in YAML\nDESCRIPTION: Demonstrates constructing stack names using the `printf` template function with static strings and dynamic identifiers in the `!terraform.output` function.  This is useful for overriding parts of the stack name based on variables or settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !terraform.output vpc {{ printf \"net-%s-%s\" .vars.environment .vars.stage }} vpc_id\n```\n\n----------------------------------------\n\nTITLE: Inherit and Customize VPC Component\nDESCRIPTION: This YAML configuration file, `stacks/orgs/acme/plat/prod/us-east-2.yaml`, configures the `vpc` component within an Atmos stack, inheriting from the `vpc/defaults` base component defined in `stacks/catalog/vpc/defaults.yaml`. It imports default configurations and overrides specific variables like `name`, `vpc_flow_logs_enabled`, and `ipv4_primary_cidr_block` to customize the component for the specific environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-inheritance.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  import:\n    - orgs/acme/plat/prod/_defaults\n    - mixins/region/us-east-2\n    # Import the `vpc/defaults` component from the `catalog/vpc/defaults.yaml` manifest\n    - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc`\n    vpc:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit from the `vpc/defaults` Atmos base component\n        # This is Single Inheritance: the Atmos component inherits from one base Atmos component\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc` component\n      vars:\n        name: my-vpc\n        vpc_flow_logs_enabled: false\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Configure Component Using Go Templates in YAML\nDESCRIPTION: This snippet demonstrates how to configure an Atmos component using Go templates within a YAML file. It showcases various Atmos sections that support Go templates, including `vars`, `settings`, `env`, `providers`, `overrides`, `backend`, `backend_type`, `metadata`, `component`, and `command` sections. It leverages built-in and custom data sources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponent:\n  terraform:\n    vpc:\n      settings:\n        setting1: 1\n        setting2: 2\n        setting3: \"{{ .vars.var3 }}\"\n        setting4: \"{{ .settings.setting1 }}\"\n        component: vpc\n        backend_type: s3\n        region: \"us-east-2\"\n        assume_role: \"<role-arn>\"\n      backend_type: \"{{ .settings.backend_type }}\"\n      metadata:\n        component: \"{{ .settings.component }}\"\n      providers:\n        aws:\n          region: \"{{ .settings.region }}\"\n          assume_role: \"{{ .settings.assume_role }}\"\n      env:\n        ENV1: e1\n        ENV2: \"{{ .settings.setting1 }}-{{ .settings.setting2 }}\"\n      vars:\n        var1: \"{{ .settings.setting1 }}\"\n        var2: \"{{ .settings.setting2 }}\"\n        var3: 3\n        # Add the tags to all the resources provisioned by this Atmos component\n        tags:\n          atmos_component: \"{{ .atmos_component }}\"\n          atmos_stack: \"{{ .atmos_stack }}\"\n          atmos_manifest: \"{{ .atmos_stack_file }}\"\n          region: \"{{ .vars.region }}\"\n          terraform_workspace: \"{{ .workspace }}\"\n          assumed_role: \"{{ .providers.aws.assume_role }}\"\n          description: \"{{ .atmos_component }} component provisioned in {{ .atmos_stack }} stack by assuming IAM role {{ .providers.aws.assume_role }}\"\n          # Examples of using the Sprig and Gomplate functions and datasources\n          # https://masterminds.github.io/sprig/os.html\n          provisioned_by_user: '{{ env \"USER\" }}'\n          # https://docs.gomplate.ca/functions/strings\n          atmos_component_description: \"{{ strings.Title .atmos_component }} component {{ .vars.name | strings.Quote }} provisioned in the stack {{ .atmos_stack | strings.Quote }}\"\n          # https://docs.gomplate.ca/datasources\n          provisioned_by_ip: '{{ (datasource \\\"ip\\\").ip }}'\n          config1_tag: '{{ (datasource \\\"config-1\\\").tag }}'\n          config2_service_name: '{{ (datasource \\\"config-2\\\").service.name }}'\n          config3_team_name: '{{ (datasource \\\"config-3\\\").team.name }}'\n```\n\n----------------------------------------\n\nTITLE: Generate Varfile with Dry Run\nDESCRIPTION: Performs a dry run of the `atmos terraform generate varfile` command, simulating the varfile generation without actually creating or modifying any files. Useful for testing the command's behavior before executing it.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Importing Region Mixin in YAML\nDESCRIPTION: This YAML snippet shows how to import the `us-east-1` region mixin into a stack configuration. By including `mixins/region/us-east-1` in the `imports` section, the stack will inherit the settings defined in the mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/mixins.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n- mixins/region/us-east-1\n\nterraform:\n  components:\n    vpc:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Workflow-Level Stack Attribute\nDESCRIPTION: Example of specifying the stack at the workflow level using the `stack` attribute.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  my-workflow:\n    stack: tenant1-ue2-dev\n    steps:\n      - command: terraform plan test/test-component\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Stores in Atmos YAML\nDESCRIPTION: This YAML snippet demonstrates how to define multiple Redis stores in the Atmos configuration. It specifies the store type, connection URL, and leverages environment variables for configuration. The `prefix` option allows for namespacing keys stored in Redis.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/stores.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstores:\n  dev/redis:\n    type: redis\n    options:\n      url: redis://localhost:6379\n\n  stage/redis:\n    type: redis\n    options:\n      url: !env ATMOS_STAGE_REDIS_URL\n\n  prod/redis:\n    type: redis\n    # The ATMOS_REDIS_URL environment variable will be used if no URL is specified in the options\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Example 1\nDESCRIPTION: Example usage of the `atmos terraform shell` command for a top-level component in a specific stack. This command will open a shell configured for the `top-level-component1` component in the `tenant1-ue2-dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell top-level-component1 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration for 'dev' Environment\nDESCRIPTION: This snippet demonstrates the environment-specific configuration for the 'dev' environment, located in `stacks/deploy/dev.yaml`. It imports the baseline configuration from `catalog/station.yaml` and overrides specific variables for the 'dev' environment, such as the `stage` and the component-specific location and language settings. The imports section specifies which other configurations to merge.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - catalog/station\n\nvars:\n  stage: dev\n\ncomponents:\n  terraform:\n    station:\n      vars:\n        location:\n          latitude: '34.0522'\n          longitude: '-118.2437'\n        language: es-ES\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Plan Command in Console\nDESCRIPTION: This code snippet shows the command to run `atmos terraform plan` for a specific component (vpc) and stack (plat-ue2-prod) with trace logs enabled. The command generates provider override and variable files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n> atmos terraform plan vpc -s plat-ue2-prod --logs-level=Trace\n\nVariables for the component 'vpc' in the stack 'plat-ue2-prod':\n  environment: ue2\n  max_subnet_count: 3\n  name: common\n  namespace: cp\n  region: us-east-2\n  stage: prod\n  tenant: plat\n\nWriting the variables to file:\ncomponents/terraform/vpc/plat-ue2-prod.terraform.tfvars.json\n\nWriting the provider overrides to file:\ncomponents/terraform/vpc/providers_override.tf.json\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Multiple VPC Components\nDESCRIPTION: This YAML snippet defines two Atmos components, `vpc/1` and `vpc/2`, both pointing to the same Terraform component `vpc`. It specifies unique variables for each component, ensuring separate VPC instances. Atmos will create Terraform workspaces `ue2-dev-vpc-1` and `ue2-dev-vpc-2` respectively when provisioned.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  # Context variables that define the Atmos stack `ue2-dev`\n  environment: ue2\n  stage: dev\n\ncomponents:\n  terraform:\n    # Atmos component `vpc/1`\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/1` component\n      vars:\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.9.0.0/18\n\n    # Atmos component `vpc/2`\n    vpc/2:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/2` component\n      vars:\n        name: vpc-2\n        ipv4_primary_cidr_block: 10.10.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy with Stack\nDESCRIPTION: This command deploys the `top-level-component1` using the configuration specified in the `tenant1-ue2-dev` stack.  The stack defines the environment and region settings for the deployment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy top-level-component1 --stack tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Remote State in VPC Terraform Module (HCL)\nDESCRIPTION: This HCL code configures the `remote-state` Terraform module to obtain remote state outputs for the `vpc-flow-logs-bucket-1` Atmos component. The module dynamically includes the remote state based on whether VPC flow logs are enabled.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_flow_logs_bucket\" {\n  count = local.vpc_flow_logs_enabled ? 1 : 0\n\n  source  = \"cloudposse/stack-config/yaml//modules/remote-state\"\n  version = \"1.5.0\"\n\n  # Specify the Atmos component name (defined in YAML stack config files)\n  # for which to get the remote state outputs\n  component = var.vpc_flow_logs_bucket_component_name\n\n  # `context` input is a way to provide the information about the stack (using the context\n  # variables `namespace`, `tenant`, `environment`, `stage` defined in the stack config)\n  context = module.this.context\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Artifactory Store in Atmos YAML\nDESCRIPTION: This YAML snippet configures two Artifactory stores (dev and prod) in the `atmos.yaml` file. It specifies the store type, URL, repository name, and an optional access token (using the `!env` function for secure handling of sensitive information).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/stores.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nstores:\n  dev/artifactory:\n    type: artifactory\n    options:\n      url: https://mydevartifactory.jfrog.io/artifactory\n      repo_name: tfsharedstore\n\n  prod/artifactory:\n    type: artifactory\n    options:\n      url: https://myprodartifactory.jfrog.io/artifactory\n      repo_name: tfsharedstore\n      access_token: !env PROD_JFROG_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform S3 Backend for Prod Environment (YAML)\nDESCRIPTION: This YAML snippet configures the Terraform S3 backend for the 'prod' environment, overriding or extending organization-level defaults. It specifies the S3 bucket name, DynamoDB table name for state locking, and IAM role ARN.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-prod-s3-bucket-name\"\n      dynamodb_table: \"your-prod-dynamodb-table-name\"\n      role_arn: \"IAM Role with permissions to access the 'prod' Terraform backend\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Completion Examples\nDESCRIPTION: Examples of running the `atmos completion` command for bash, zsh, fish, and powershell shells. These commands generate the completion scripts that are then sourced to enable tab completion in the respective shells.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos completion bash\natmos completion zsh\natmos completion fish\natmos completion powershell\n```\n\n----------------------------------------\n\nTITLE: Configure S3 Backend in _defaults.yaml (Dev Account)\nDESCRIPTION: This snippet configures the S3 backend specifically for the `dev` account in the `_defaults.yaml` manifest. It overrides the organization-level settings for the S3 bucket, DynamoDB table, and IAM role ARN to use account-specific resources. This allows for isolation and security between different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-dev-s3-bucket-name\"\n      dynamodb_table: \"your-dev-dynamodb-table-name\"\n      role_arn: \"<IAM Role with permissions to access the `dev` Terraform backend>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Manifests YAML\nDESCRIPTION: This YAML snippet demonstrates how to import environment manifests and mixins into a top-level stack configuration file within the Atmos framework. The `import` section specifies the paths to the files that will be merged into the current stack definition.  It includes a default configuration, a region-specific mixin, and a component catalog entry for a VPC.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org2/core/dev/_defaults\n  - mixins/region/us-east-2\n  - catalog/vpc/org2-core-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Escaping Go Templates in Stack Manifests\nDESCRIPTION: This console code shows the syntax required to exclude Go templates from processing by Atmos. By using `{{``{{` instead of `{{` and `}}``}}` instead of `}}`, Atmos will not interpret the content between the braces as a Go template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n{{`{{  instead of  {{\n\n}}`}}  instead of  }}\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration - atmos.yaml\nDESCRIPTION: This YAML configuration shows how to set `auto_generate_backend_file` to `true` in the `atmos.yaml` file to automatically generate backend files for Terraform components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: true\n```\n\n----------------------------------------\n\nTITLE: Manual backend.tf Configuration for S3 Backend\nDESCRIPTION: This HCL snippet demonstrates the manual configuration of the Terraform S3 backend using a `backend.tf` file. It defines the S3 bucket, DynamoDB table, region, role ARN, workspace key prefix, and encryption settings.  The role ARN is required for the role that has permissions to access the Terraform backend.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    acl                  = \"bucket-owner-full-control\"\n    bucket               = \"your-s3-bucket-name\"\n    dynamodb_table       = \"your-dynamodb-table-name\"\n    encrypt              = true\n    key                  = \"terraform.tfstate\"\n    region               = \"your-aws-region\"\n    role_arn             = \"arn:aws:iam::<your account ID>:role/<IAM Role with permissions to access the Terraform backend>\"\n    workspace_key_prefix = \"<component name, e.g. `vpc` or `vpc-flow-logs-bucket`>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Workspace Key Prefix in Component Manifest\nDESCRIPTION: This snippet configures an optional `workspace_key_prefix` for a specific Terraform component (`vpc` in this example) within the component's manifest file. This allows isolating state files for different components within the same S3 bucket. If `workspace_key_prefix` is not specified, Atmos will use the component name as the prefix.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # `vpc` is the Atmos component name\n    vpc:\n      # Optional backend configuration for the component\n      backend:\n        s3:\n          workspace_key_prefix: vpc\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings: {}\n      vars: {}\n      env: {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Custom Command in Atmos (YAML)\nDESCRIPTION: This YAML snippet defines a custom command named `hello` for the Atmos CLI. When executed, it will simply print \"Hello world!\". This is a basic example to demonstrate the structure of custom commands in Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: hello\n    description: This command says Hello world\n    steps:\n      - \"echo Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Importing Hierarchical Templated Components with Context in YAML\nDESCRIPTION: This snippet demonstrates importing a hierarchical templated component and passing context to parameterize both the component and its imported dependencies. The context includes variables for the component itself (flavor, enabled, etc.) and variables for the hierarchical imports (tenant, region, environment, stage).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n\n  # This import with the provided hierarchical context will dynamically generate\n  # a new Atmos component `eks-blue/cluster` in the `tenant1-uw1-test1` stack\n  - path: \"catalog/terraform/eks_cluster_hierarchical.yaml.tmpl\"\n    context:\n      # Context variables for the EKS component\n      flavor: \"blue\"\n      enabled: true\n      service_1_name: \"blue-service-1\"\n      service_2_name: \"blue-service-2\"\n      # Context variables for the hierarchical imports\n      # `catalog/terraform/eks_cluster_hierarchical.yaml.tmpl` imports other parameterized configurations\n      tenant: \"tenant1\"\n      region: \"us-west-1\"\n      environment: \"uw1\"\n      stage: \"test1\"\n\n  # This import with the provided hierarchical context will dynamically generate\n  # a new Atmos component `eks-green/cluster` in the `tenant1-uw1-test1` stack\n  - path: \"catalog/terraform/eks_cluster_hierarchical.yaml.tmpl\"\n    context:\n      # Context variables for the EKS component\n      flavor: \"green\"\n      enabled: false\n      service_1_name: \"green-service-1\"\n      service_2_name: \"green-service-2\"\n      # Context variables for the hierarchical imports\n      # `catalog/terraform/eks_cluster_hierarchical.yaml.tmpl` imports other parameterized configurations\n      tenant: \"tenant1\"\n      region: \"us-west-1\"\n      environment: \"uw1\"\n      stage: \"test1\"\n```\n\n----------------------------------------\n\nTITLE: Terraform S3 Backend Configuration - backend.tf\nDESCRIPTION: This snippet demonstrates a `backend.tf` file configuration for the S3 backend, including bucket details, DynamoDB table for locking, encryption, and role ARN for permissions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n    backend \"s3\" {\n        acl                  = \"bucket-owner-full-control\"\n        bucket               = \"your-s3-bucket-name\"\n        dynamodb_table       = \"your-dynamodb-table-name\"\n        encrypt              = true\n        key                  = \"terraform.tfstate\"\n        region               = \"your-aws-region\"\n        role_arn             = \"arn:aws:iam::xxxxxxxx:role/IAM Role with permissions to access the Terraform backend\"\n        workspace_key_prefix = \"component name, e.g. `vpc` or `vpc-flow-logs-bucket`\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Cloud Backend in _defaults.yaml (YAML)\nDESCRIPTION: This snippet configures the Terraform Cloud backend for Terraform state management in the `_defaults.yaml` file within Atmos. It specifies the organization and hostname to be used for Terraform Cloud.  The `terraform.backend_type` is set to `cloud` to indicate the use of Terraform Cloud.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: cloud\n  backend:\n    cloud:\n      organization: \"my-org\"\n      hostname: \"app.terraform.io\"\n      workspaces:\n        # Parameters for workspaces\n```\n\n----------------------------------------\n\nTITLE: Defining vpc Defaults in Atmos Catalog (YAML)\nDESCRIPTION: This snippet defines the default settings for the `vpc` Atmos component in the `stacks/catalog/vpc/defaults.yaml` file. It configures metadata, validation rules using JSON Schema and OPA policies, and defines variables such as `enabled`, `name`, `max_subnet_count`, `map_public_ip_on_launch`, `assign_generated_ipv6_cidr_block`, `nat_gateway_enabled`, and `ipv4_primary_cidr_block`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings:\n        # Validation\n        # Supports JSON Schema and OPA policies\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            # 'schema_path' can be an absolute path or a path relative to 'schemas.jsonschema.base_path' defined in `atmos.yaml`\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            # 'schema_path' can be an absolute path or a path relative to 'schemas.opa.base_path' defined in `atmos.yaml`\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            # An array of filesystem paths (folders or individual files) to the additional modules for schema validation\n            # Each path can be an absolute path or a path relative to `schemas.opa.base_path` defined in `atmos.yaml`\n            # In this example, we have the additional Rego modules in `stacks/schemas/opa/catalog/constants`\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n            # Set `disabled` to `true` to skip the validation step\n            # `disabled` is set to `false` by default, the step is allowed if `disabled` is not declared\n            disabled: false\n            # Validation timeout in seconds\n            timeout: 10\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply with Skip Init Flag\nDESCRIPTION: Demonstrates how to use the `--skip-init` flag with `atmos terraform apply` to skip running `terraform init`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform apply <component> -s <stack> --skip-init\n```\n\n----------------------------------------\n\nTITLE: Atmos Component YAML Configuration\nDESCRIPTION: This YAML code snippet demonstrates how to define a 'components' section within an Atmos stack configuration, showcasing the structure for specifying various infrastructure components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/stacks.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  sometool: # \"sometool\" can be any tool\n    somecomponent: # \"somecomponent\" can be the name of any \"sometool\" component\n      vars: # etc...\n```\n\n----------------------------------------\n\nTITLE: Component Configuration with Inheritance in stacks/orgs YAML\nDESCRIPTION: This YAML snippet configures the `vpc` Atmos component in the `stacks/orgs/acme/plat/prod/us-east-2.yaml` top-level stack. It imports configurations, sets `metadata.type` to `real` to allow provisioning, specifies the Terraform component path, inherits from the `vpc/defaults` abstract base component, and defines/overrides variables specific to this component.  It demonstrates single inheritance.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/abstract-component.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  import:\n    - orgs/acme/plat/prod/_defaults\n    - mixins/region/us-east-2\n    # Import the `vpc/defaults` component from the `catalog/vpc/defaults.yaml` manifest\n    - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc`\n    vpc:\n      metadata:\n        # `metadata.type` can be `abstract` or `real`\n        # `real` is the default and can be omitted\n        # Real components can be provisioned\n        type: real\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit from the `vpc/defaults` Atmos base component\n        # This is Single Inheritance: the Atmos component inherits from one base Atmos component\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc` component\n      vars:\n        name: my-vpc\n        vpc_flow_logs_enabled: false\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Reading Simple Value from Store (YAML)\nDESCRIPTION: Reads a simple value (string, number, boolean) from a remote store using the `atmos.Store` template function. The function retrieves the value based on the provided store name, stack, component, and key.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: '{{ atmos.Store \"<store_name>\" \"<stack>\" \"<component>\" \"<key>\" }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema in atmos.yaml\nDESCRIPTION: This YAML configuration shows how to specify the path to the Atmos Manifest JSON Schema in the `atmos.yaml` file. This allows Atmos to validate manifests against a custom schema instead of the default embedded schema. The path can be absolute, relative to the `base_path`, or a URL.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/validate.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # JSON Schema to validate Atmos manifests\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line arguments\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n    # Also supports URLs\n    # manifest: \"https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Gomplate Datasources in YAML\nDESCRIPTION: This YAML snippet defines several Gomplate datasources, including an HTTP datasource ('ip') and file datasources ('config-1' and 'config-2').  It specifies the URL for each datasource, enabling Gomplate to retrieve data from these sources during template processing.  The 'ip' datasource uses a remote URL, while 'config-1' and 'config-2' reference local files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nip:\n  url: \"https://api.ipify.org?format=json\"\n  # https://docs.gomplate.ca/datasources/#sending-http-headers\n  # https://docs.gomplate.ca/usage/#--datasource-header-h\n  headers:\n    accept:\n      - \"application/json\"\n# 'file' datasources\n# https://docs.gomplate.ca/datasources/#using-file-datasources\nconfig-1:\n  url: \"./config1.json\"\nconfig-2:\n  url: \"file:///config2.json\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace with Skipped Functions\nDESCRIPTION: Executes the `atmos terraform workspace` command with the `--skip` flag to skip specific YAML functions (e.g., `eval`, `include`, `terraform.output`) during Atmos stack manifest processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace <component> -s <stack> --skip=eval --skip=include\natmos terraform workspace <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Planfile\nDESCRIPTION: Generates a Terraform planfile for a specified Atmos component in a stack. The command executes `terraform plan` and `terraform show` to create and format the planfile. The output format can be specified as JSON or YAML.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack> [options]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for VPC Component in ue2-dev Stack\nDESCRIPTION: This YAML snippet defines a Terraform component `vpc` within the `ue2-dev` stack. It specifies metadata, including the component path, and defines variables specific to this VPC instance, such as name and CIDR block. This stack will be provisioned into a Terraform workspace named `ue2-dev` by default.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  # Context variables that define the Atmos stack `ue2-dev`\n  environment: ue2\n  stage: dev\n\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n      # Define the variables specific to this component\n      vars:\n        name: my-vpc\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Validate Atmos Component\nDESCRIPTION: This command validates an Atmos component within a specified stack using JSON Schema and OPA policies. The component and stack are required arguments.  Options allow specifying the schema path, schema type (jsonschema or opa), module paths for OPA policies, and a timeout value.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-component.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component <component> -s <stack> [options]\n```\n\n----------------------------------------\n\nTITLE: Examples of using !env in Atmos stack manifests (YAML)\nDESCRIPTION: Examples demonstrating how to use the `!env` function in an Atmos stack manifest to retrieve environment variables and assign them to variables. If the specified environment variable is not set, either `null` or the provided default value will be used.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/env.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nvars:\n  # `api_key` will be set to `null` if the environment variable `API_KEY` is not present in the environment\n  api_key: !env API_KEY\n  # `app_name` will be set to the default value `my-app` if the environment variable `APP_NAME` is not present in the environment\n  app_name: !env APP_NAME my-app\n\nsettings:\n  # `provisioned_by_user` will be set to `null` if the environment variable `ATMOS_USER` is not present in the environment\n  provisioned_by_user: !env ATMOS_USER\n```\n\n----------------------------------------\n\nTITLE: Generating a varfile for a helmfile component using atmos\nDESCRIPTION: This command generates a varfile for a `helmfile` component within a specified stack using the `atmos` CLI. The component and stack must be defined in the Atmos configuration. Optionally, a specific filename for the varfile can be provided.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/helmfile-generate-varfile.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile generate varfile <component> -s <stack> [options]\n```\n\n----------------------------------------\n\nTITLE: Read Data with atmos.Store Template Function\nDESCRIPTION: This snippet demonstrates how to use the `atmos.Store` template function to read the `vpc_id` output of the `vpc` component in the current stack from the SSM Parameter Store.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: '{{ atmos.Store \"ssm\" .stack \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Atmos Terraform Apply\nDESCRIPTION: This workflow demonstrates how to trigger the atmos-terraform-apply action on certain events (manual dispatch, pull request events). It defines the permissions needed for assuming roles in AWS and executes the 'atmos terraform apply' command for a specified component and stack. The component and stack are hardcoded in this example, but in practice, these are usually derived from another action. The workflow file name is `atmos-terraform-apply.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-apply.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-terraform-apply.yaml\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy with Init\nDESCRIPTION: Enables or disables running `terraform init` before executing the deploy command. This ensures that the Terraform environment is properly initialized before applying the configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --deploy-run-init\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Backend Configuration (JSON) - Deep Merged\nDESCRIPTION: This snippet shows the deep-merged Terraform backend configuration for the `vpc` component in the `dev` account. It combines settings from both the organization-level and the `dev` account-level `_defaults.yaml` manifests, along with the `workspace_key_prefix`. This demonstrates Atmos's ability to automatically merge configurations from different scopes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Derived VPC Components in Atmos Stack YAML\nDESCRIPTION: This snippet configures two derived VPC components (`vpc/1` and `vpc/2`) in an Atmos stack, importing the base `vpc-defaults` component from the catalog. The derived components inherit settings and variables from the base component and override specific variables to customize their configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the base component configuration from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n# File extensions are optional (if not specified, `.yaml` is used by default).\nimport:\n  - catalog/vpc\n\ncomponents:\n  terraform:\n\n    vpc/1:\n      metadata:\n        component: infra/vpc # Point to the Terraform component in `components/terraform` folder\n        inherits:\n          - vpc-defaults # Inherit all settings and variables from the `vpc-defaults` base component\n      vars:\n        # Define variables that are specific for this component\n        # and are not set in the base component\n        name: vpc-1\n        # Override the default variables from the base component\n        public_subnets_enabled: true\n        nat_gateway_enabled: true\n        vpc_flow_logs_enabled: false\n\n    vpc/2:\n      metadata:\n        component: infra/vpc # Point to the same Terraform component in `components/terraform` folder\n        inherits:\n          - vpc-defaults # Inherit all settings and variables from the `vpc-defaults` base component\n      vars:\n        # Define variables that are specific for this component\n        # and are not set in the base component\n        name: vpc-2\n        # Override the default variables from the base component\n        max_subnet_count: 2\n        vpc_flow_logs_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Define Atlantis Workflows in Repo-Level Config\nDESCRIPTION: This YAML snippet illustrates how to define Atlantis workflows within the `atlantis.yaml` file at the repository level. The `workflows` section defines custom workflows, and the `workflow` attribute within a project specifies which workflow to use for that project. This allows for project-specific workflows within the same repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nprojects:\n  - name: my-project-name\n    branch: /main/\n    dir: .\n    workspace: default\n    workflow: myworkflow\nworkflows:\n  myworkflow:\n    plan:\n      steps:\n        - init\n        - plan\n    apply:\n      steps:\n        - run: echo applying\n        - apply\n```\n\n----------------------------------------\n\nTITLE: Abstract Base Component Configuration in defaults.yaml\nDESCRIPTION: This YAML snippet configures the abstract base component `vpc/defaults` in the `stacks/catalog/vpc/defaults.yaml` manifest.  It sets `metadata.type` to `abstract` to prevent provisioning, defines validation steps using JSON schema and OPA policies, and configures default variables for the VPC component. The component uses jsonschema and OPA for validation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/abstract-component.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      metadata:\n        # Abstract components can't be provisioned, they just serve as base components (blueprints) for real components\n        # `metadata.type` can be `abstract` or `real`\n        # `real` is the default and can be omitted\n        type: abstract\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.0.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Using !template to Process List Output YAML\nDESCRIPTION: This snippet demonstrates how to use the `!template` function to process the output of type list from the `atmos.Component` template function in the provided stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: !template '{{ toJson (atmos.Component \"<component>\" \"<stack>\").outputs.test_list }}'\n```\n\n----------------------------------------\n\nTITLE: Terraform S3 Backend Configuration - _defaults.yaml\nDESCRIPTION: This snippet shows the YAML configuration in `_defaults.yaml` to configure the S3 backend for the entire organization, including bucket, DynamoDB table, region, and role ARN.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      bucket: \"your-s3-bucket-name\"\n      dynamodb_table: \"your-dynamodb-table-name\"\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n      role_arn: \"arn:aws:iam::xxxxxxxx:role/IAM Role with permissions to access the Terraform backend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend in Terraform\nDESCRIPTION: This code snippet shows how to configure Terraform to use an S3 backend for storing state files. It includes the bucket name, key, region, encryption settings, and DynamoDB table for state locking.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n    backend \"s3\" {\n        acl            = \"bucket-owner-full-control\"\n        bucket         = \"your-s3-bucket-name\"\n        key            = \"path/to/terraform.tfstate\"\n        region         = \"your-aws-region\"\n        encrypt        = true\n        dynamodb_table = \"terraform_locks\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Ingress Restrictions YAML\nDESCRIPTION: This snippet demonstrates using `!template` to apply ingress restrictions from the global `allowed_ingress_cidrs` setting to an EKS cluster component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# EKS cluster\n# Allow ingress only from the allowed CIDR blocks\nallowed_cidr_blocks: !template '{{ toJson .settings.allowed_ingress_cidrs }}'\n```\n\n----------------------------------------\n\nTITLE: Configure Terraform S3 Backend in backend.tf\nDESCRIPTION: This HCL snippet configures the Terraform S3 backend, specifying the bucket name, key path, AWS region, encryption settings, and DynamoDB table for state locking. It demonstrates the essential settings needed for Terraform to store its state remotely in an S3 bucket, enabling collaboration and preventing concurrent modifications.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    acl            = \"bucket-owner-full-control\"\n    bucket         = \"your-s3-bucket-name\"\n    key            = \"path/to/terraform.tfstate\"\n    region         = \"your-aws-region\"\n    encrypt        = true\n    dynamodb_table = \"terraform_locks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Deploy with Atmos CLI\nDESCRIPTION: This command executes `terraform apply -auto-approve` to provision components in stacks without user interaction. It uses the `atmos terraform deploy eks -s ue2-dev` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/terraform.mdx#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\natmos terraform deploy eks -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generated Atlantis Repo Config YAML\nDESCRIPTION: This YAML snippet presents an example of an Atlantis repo configuration file generated by the Atmos CLI using the specified config and project templates.  It defines projects with specific names, workspaces, directories, and workflows, as well as configurations for autoplan and apply requirements. It configures workflows with terraform init, workspace select and plan/apply commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nautomerge: true\ndelete_source_branch_on_merge: true\nparallel_plan: true\nparallel_apply: true\nallowed_regexp_prefixes:\n  - dev/\n  - staging/\n  - prod/\nprojects:\n  - name: tenant1-ue2-staging-test-test-component-override-3\n    workspace: test-component-override-3-workspace\n    workflow: workflow-1\n    dir: tests/fixtures/scenarios/complete/components/terraform/test/test-component\n    terraform_version: v1.8\n    delete_source_branch_on_merge: true\n    autoplan:\n      enabled: true\n      when_modified:\n        - '**/*.tf'\n        - varfiles/$PROJECT_NAME.tfvars\n      apply_requirements:\n        - approved\n  - name: tenant1-ue2-staging-infra-vpc\n    workspace: tenant1-ue2-staging\n    workflow: workflow-1\n    dir: tests/fixtures/scenarios/complete/components/terraform/infra/vpc\n    terraform_version: v1.8\n    delete_source_branch_on_merge: true\n    autoplan:\n      enabled: true\n      when_modified:\n        - '**/*.tf'\n        - varfiles/$PROJECT_NAME.tfvars\n      apply_requirements:\n        - approved\nworkflows:\n  workflow-1:\n    apply:\n      steps:\n        - run: terraform apply $PLANFILE\n    plan:\n      steps:\n        - run: terraform init -input=false\n        - run: terraform workspace select $WORKSPACE\n        - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Command with Positional Argument (Shell)\nDESCRIPTION: These shell commands demonstrate how to execute the `greet` command defined in the Atmos configuration, both with and without providing the positional argument `name`. When the argument is provided, it will use the given name. When the argument is omitted, it will default to \"John Doe\".\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos greet Alice\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos greet\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy Skip Functions\nDESCRIPTION: Skips processing a specific Atmos YAML function in Atmos stacks manifests when executing terraform commands. Multiple `--skip` flags, or a comma-separated list, can be used to skip multiple functions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --skip=eval --skip=include\natmos terraform deploy <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform S3 Backend Defaults at Organization Level (YAML)\nDESCRIPTION: This YAML snippet defines the default Terraform S3 backend configuration settings at the organization level. These settings are inherited by all stacks within the organization. It includes settings such as ACL, encryption, state file name and AWS region.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n```\n\n----------------------------------------\n\nTITLE: Default VPC Flow Logs Bucket Configuration\nDESCRIPTION: This YAML snippet defines the default configuration for the `vpc-flow-logs-bucket` Terraform component in the `stacks/defaults/vpc-flow-logs-bucket.yaml` manifest. It sets the component metadata, enables the component, and configures default variables such as name, traffic type, and force destroy.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      metadata:\n        # Point to the Terraform component\n        component: vpc-flow-logs-bucket\n      vars:\n        enabled: true\n        name: \"vpc-flow-logs\"\n        traffic_type: \"ALL\"\n        force_destroy: true\n        lifecycle_rule_enabled: false\n```\n\n----------------------------------------\n\nTITLE: VPC Flow Logs Bucket Defaults in YAML\nDESCRIPTION: This YAML configuration sets the default settings for the `vpc-flow-logs-bucket` component in Atmos.  It specifies that the component is a Terraform module, enables the component, and configures settings for the bucket, including traffic type and force destroy.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      metadata:\n        # Point to the Terraform component\n        component: vpc-flow-logs-bucket\n      vars:\n        enabled: true\n        name: \"vpc-flow-logs\"\n        traffic_type: \"ALL\"\n        force_destroy: true\n        lifecycle_rule_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Importing Defaults and Mixins in Atmos YAML for us-west-2\nDESCRIPTION: This YAML snippet demonstrates importing default configurations and a region mixin for `us-west-2`. It shows how to use the `import` directive to include reusable configurations, enabling modular and maintainable stack definitions. It also overrides the `vpc` component configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `prod` by importing the `catalog/vpc/prod` manifest\n  - catalog/vpc/prod\n```\n\n----------------------------------------\n\nTITLE: Provisioning vpc-flow-logs-bucket with Atmos\nDESCRIPTION: This shell script provisions the `vpc-flow-logs-bucket` Atmos component across multiple stacks in different regions, OUs and accounts. It uses the `atmos terraform apply` command with the `-s` flag to specify the target stack. The stacks are defined by organization unit (OU), account and region.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/provision.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# `plat` OU, `dev` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-dev\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-dev\n\n# `plat` OU, `staging` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-staging\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-staging\n\n# `plat` OU, `prod` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-prod\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Using !terraform.output in Atmos stack.yaml\nDESCRIPTION: An example `stack.yaml` file demonstrating the usage of `!terraform.output` function to read Terraform outputs of different types (string, list, map) including using YQ expressions to access elements inside complex output types. It showcases how to configure vars for `my_lambda_component` using outputs from `security-group/lambda`, `vpc` and `config` components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my_lambda_component:\n      vars:\n        vpc_config:\n          # Output of type string\n          security_group_id: !terraform.output security-group/lambda id\n          security_group_id2: !terraform.output security-group/lambda2 {{ .stack }} id\n          security_group_id3: !terraform.output security-group/lambda3 {{ .atmos_stack }} id\n          # Output of type list\n          subnet_ids: !terraform.output vpc private_subnet_ids\n          # Use a YQ expression to get an item from the list\n          subnet_id1: !terraform.output vpc .private_subnet_ids[0]\n          # Output of type map\n          config_map: !terraform.output config {{ .stack }} config_map\n          # Use a YQ expression to get a value from the map\n          username: !terraform.output config .config_map.username\n```\n\n----------------------------------------\n\nTITLE: Including Local and Remote Files in Atmos Stack YAML\nDESCRIPTION: This snippet demonstrates how to use the `!include` directive in an Atmos `stack.yaml` file to include various local and remote files. It showcases including YAML, HCL, Markdown, and text files, as well as querying specific values from these files using YQ syntax.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      vars:\n        # Include a local file with the path relative to the current Atmos manifest\n        values: !include ./values.yaml\n        # Include a local file with the path relative to the current Atmos manifest and query the `vars.ipv4_primary_cidr_block` value from the file using YQ\n        ipv4_primary_cidr_block: !include ./vpc_config.yaml .vars.ipv4_primary_cidr_block\n        # Include a local file relative to the `base_path` setting in `atmos.yaml`\n        vpc_defaults: !include stacks/catalog/vpc/defaults.yaml\n        # Include a local file in HCL format\n        hcl_values: !include ./values.hcl\n        # Include a local varfile in HCL format\n        tfvars_values: !include ../components/terraform/vpc/vpc.tfvars\n        # Include a local Markdown file\n        description: !include ./description.md\n        # Include a local text file\n        text: !include a.txt\n        # Include a local text file with spaces in the file name\n        text2: !include '\"my config.txt\"'\n        # Include a local text file on Windows with spaces in the file name, and get the `config.tests` value from the file\n        tests: !include '\"~/My Documents/dev/tests.yaml\" .config.tests'\n        # Download and include a remote YAML file using HTTPS protocol, and query the `vars` section from the file\n        region_values: !include https://raw.githubusercontent.com/cloudposse/atmos/refs/heads/main/examples/quick-start-advanced/stacks/mixins/region/us-east-2.yaml .vars\n        # Download and include a remote JSON file and query the `api` section from the file\n        allowed_ips: !include https://api.github.com/meta .api\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy with Custom Planfile Path\nDESCRIPTION: Specifies the path to a planfile to use for the deployment. The `--planfile` flag should be used instead of the planfile argument in the native `terraform apply <planfile>` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply <component> -s <stack> --planfile <planfile>\n```\n\n----------------------------------------\n\nTITLE: Show Component Info in Atmos (YAML)\nDESCRIPTION: This YAML snippet defines a `show component` command within the `show` command group. It showcases how to access component configurations using Go templates, leveraging the `component_config` section to automatically generate the config for the component in the specified stack. It provides access to environment variables and other configuration settings during command execution.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: show\n    description: Execute 'show' commands\n    # subcommands\n    commands:\n      - name: component\n        description: Execute 'show component' command\n        arguments:\n          - name: component\n            description: Name of the component\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n        # ENV var values support Go templates and have access to {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables\n        env:\n          - key: ATMOS_COMPONENT\n            value: \"{{ .Arguments.component }}\"\n          - key: ATMOS_STACK\n            value: \"{{ .Flags.stack }}\"\n          - key: ATMOS_TENANT\n            value: \"{{ .ComponentConfig.vars.tenant }}\"\n          - key: ATMOS_STAGE\n            value: \"{{ .ComponentConfig.vars.stage }}\"\n          - key: ATMOS_ENVIRONMENT\n            value: \"{{ .ComponentConfig.vars.environment }}\"\n        # If a custom command defines 'component_config' section with 'component' and 'stack', 'atmos' generates the config for the component in the stack\n        # and makes it available in {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables,\n        # exposing all the component sections (which are also shown by 'atmos describe component' command)\n        component_config:\n          component: \"{{ .Arguments.component }}\"\n          stack: \"{{ .Flags.stack }}\"\n        # Steps support using Go templates and can access all configuration settings (e.g. {{ .ComponentConfig.xxx.yyy.zzz }})\n        # Steps also have access to the ENV vars defined in the 'env' section of the 'command'\n        steps:\n          - 'echo Atmos component from argument: \"{{ .Arguments.component }}\"'\n          - 'echo ATMOS_COMPONENT: \"$ATMOS_COMPONENT\"'\n          - 'echo Atmos stack: \"{{ .Flags.stack }}\"'\n          - 'echo Terraform component: \"{{ .ComponentConfig.component }}\"'\n          - 'echo Backend S3 bucket: \"{{ .ComponentConfig.backend.bucket }}\"'\n          - 'echo Terraform workspace: \"{{ .ComponentConfig.workspace }}\"'\n          - 'echo Namespace: \"{{ .ComponentConfig.vars.namespace }}\"'\n          - 'echo Tenant: \"{{ .ComponentConfig.vars.tenant }}\"'\n          - 'echo Environment: \"{{ .ComponentConfig.vars.environment }}\"'\n          - 'echo Stage: \"{{ .ComponentConfig.vars.stage }}\"'\n          - 'echo Dependencies: \"{{ .ComponentConfig.deps }}\"'\n```\n\n----------------------------------------\n\nTITLE: EKS cluster config in YAML template\nDESCRIPTION: This is a placeholder for a YAML template file used to define an EKS cluster. The actual content of the template would contain configuration details specific to the cluster setup. The complete YAML template for the EKS cluster can be found in the original documentation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendoring from OCI Registry (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Atmos to vendor components from an OCI registry.  It uses the `oci://` scheme to specify the repository and tag, and defines target paths for the downloaded artifacts.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# This is an example of how to download a Terraform component from an OCI registry (https://opencontainers.org), e.g. AWS Public ECR\n\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config\n  description: Atmos vendoring manifest\nspec:\n  sources:\n    - component: \"vpc\"\n      source: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/{{ .Component }}:{{ .Version }}\"\n      version: \"latest\"\n      targets:\n        - \"components/terraform/{{ .Component }}\"\n      included_paths:\n        - \"**/*.tf\"\n        - \"**/*.tfvars\"\n        - \"**/*.md\"\n      excluded_paths: []\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration Imports (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to import other CLI configurations into an Atmos configuration file. Imports can be from remote URLs, specific paths, or wildcard globs. Imported configurations are deep-merged in order.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Load the Atmos configuration from the main branch of the 'cloudposse/atmos' repository\n  - \"https://raw.githubusercontent.com/cloudposse/atmos/refs/heads/main/atmos.yaml\"\n  # Then merge the configs\n  - \"configs.d/**/*\"\n  # Finally, override some logging settings\n  - \"./logs.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Describe Component ENV Variables - YAML\nDESCRIPTION: This snippet shows the output of the `atmos describe component` command for the environment variables of a component, including the final value and the stack dependencies, which represent the inheritance chain and override history of the variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  env:\n    TEST_ENV_VAR1:\n      final_value: val1-override-3\n      name: TEST_ENV_VAR1\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.env\n          variable_value: val1-override-3\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-2\n          stack_file_section: components.terraform.env\n          variable_value: val1-override-2\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override\n          stack_file_section: components.terraform.env\n          variable_value: val1-override\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.env\n          variable_value: val1\n    TEST_ENV_VAR2:\n      final_value: val2-override-3\n      name: TEST_ENV_VAR2\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.env\n          variable_value: val2-override-3\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-2\n          stack_file_section: components.terraform.env\n          variable_value: val2-override-2\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.env\n          variable_value: val2\n    TEST_ENV_VAR3:\n      final_value: val3-override-3\n      name: TEST_ENV_VAR3\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.env\n          variable_value: val3-override-3\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override\n          stack_file_section: components.terraform.env\n          variable_value: val3-override\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.env\n          variable_value: val3\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Example 2\nDESCRIPTION: Example usage of the `atmos terraform shell` command for an infrastructure component in a specific stack. This command will open a shell configured for the `infra/vpc` component in the `tenant1-ue2-staging` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell infra/vpc -s tenant1-ue2-staging\n```\n\n----------------------------------------\n\nTITLE: Include Remote File (SCP/SFTP) in Atmos\nDESCRIPTION: Demonstrates including remote files from an SSH server using SCP or SFTP with the `!include` function. Requires SSH access to the remote server. The file content is injected into the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include scp://user@remote-server:/path/to/vars.yaml\nsettings: !include sftp://user@remote-server:/path/to/settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack YAML Configuration\nDESCRIPTION: This YAML configuration file defines a stack with imports, global variables, and component configurations for Terraform and Helmfile. It demonstrates how to configure different components with specific settings and dependencies within a stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/stacks.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Configurations that should get deep-merged into this one\nimport:\n  # each import is a \"Stack\" file. The `.yaml` extension is optional, and we do not recommend using it.\n  - ue2-globals\n\n# Top-level variables that are inherited by every single component.\n# Use these wisely. Too many global vars will pollute the variable namespace.\nvars:\n  # Variables can be anything you want. They can be scalars, lists, and maps. Whatever is supported by YAML.\n  stage: dev\n\n# There can then be global variables for each type of component.\n# Here we set global variables for any \"terraform\" component.\nterraform:\n  vars: {}\n\n# Here we set global variables for any \"helmfile\" component.\nhelmfile:\n  vars: {}\n\n# Components are the building blocks of reusable infrastructure.\n# They can be anything. Atmos natively supports \"terraform\" and \"helmfile\".\ncomponents:\n  terraform:\n    vpc:\n      command: \"/usr/bin/terraform-0.15\"\n      backend:\n        s3:\n          workspace_key_prefix: \"vpc\"\n      vars:\n        cidr_block: \"10.102.0.0/18\"\n    eks:\n      backend:\n        s3:\n          workspace_key_prefix: \"eks\"\n      vars: {}\n\n  helmfile:\n    nginx-ingress:\n      vars:\n        installed: true\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote State with Terraform Module (HCL)\nDESCRIPTION: This code snippet demonstrates how to use the `cloudposse/stack-config/yaml//modules/remote-state` Terraform module to fetch the remote state outputs of another component named `vpc`. It specifies the component name and uses the `context` variable to provide stack information. This configuration is typically placed in a `remote-state.tf` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source  = \"cloudposse/stack-config/yaml//modules/remote-state\"\n  version = \"1.5.0\"\n\n  # Specify the Atmos component name (defined in YAML stack config files) for which to get the remote state outputs\n  component = \"vpc\"\n\n  # `context` input is a way to provide the information about the stack (using the context\n  # variables `namespace`, `tenant`, `environment`, `stage` defined in the stack config)\n  context = module.this.context\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Referencing Data Sources in Manifests\nDESCRIPTION: Demonstrates how to use the defined data sources in Atmos stack manifests to populate variables within Terraform components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n vars:\n   tags:\n     tag1: '{{ (datasource \"config-1\").tag }}'\n     service_name2: '{{ (datasource \"config-2\").service.name }}'\n     service_name3: '{{ (datasource \"s3-config\").config.service_name }}'\n\ncomponents:\n  terraform:\n    vpc-1:\n      settings:\n        provisioned_by_ip: '{{ (datasource \"ip\").ip }}'\n        secret-1: '{{ (datasource \"secret-1\").secret1.value }}'\n      vars:\n        enabled: '{{ (datasource \"config-2\").config.enabled }}'\n```\n\n----------------------------------------\n\nTITLE: Stack Manifest YAML with Atmos Functions\nDESCRIPTION: This YAML snippet demonstrates the usage of various Atmos YAML functions within a stack manifest file. It includes examples for executing shell scripts, templating, accessing Terraform outputs, retrieving environment variables, and including local/remote files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/yaml-functions.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    component2:\n      settings:\n        s1: !exec echo 's1'\n      env:\n        ENV_VAR_1: !template '{{ (atmos.Component \"component3\" .stack).settings.env.ENV_VAR_1 }}'\n      vars:\n        # Handle the output of type list from the `atmos.Component` template function\n        test_1: !template '{{ toJson (atmos.Component \"component1\" \"plat-ue2-dev\").outputs.test_list }}'\n\n        # Handle the output of type map from the `atmos.Component` template function\n        test_2: !template '{{ toJson (atmos.Component \"component1\" .stack).outputs.test_map }}'\n\n        # Execute the shell script and assign the result to the `test_3` variable\n        test_3: !exec echo 42\n\n        # Execute the shell script to get the `test_label_id` output from the `component1` component in the stack `plat-ue2-dev`\n        test_4: !exec atmos terraform output component1 -s plat-ue2-dev --skip-init -- -json test_label_id\n\n        # Execute the shell script to get the `test_map` output from the `component1` component in the current stack\n        test_5: !exec atmos terraform output component1 -s {{ .stack }} --skip-init -- -json test_map\n\n        # Execute the shell script to get the `test_list` output from the `component1` component in the current stack\n        test_6: !exec atmos terraform output component1 -s {{ .stack }} --skip-init -- -json test_list\n\n        # Get the `test_label_id` output of type string from the `component1` component in the stack `plat-ue2-dev`\n        test_7: !terraform.output component1 plat-ue2-dev test_label_id\n\n        # Get the `test_label_id` output of type string from the `component1` component in the current stack\n        test_8: !terraform.output component1 {{ .stack }} test_label_id\n\n        # Get the `test_list` output of type list from the `component1` component in the current stack\n        test_9: !terraform.output component1 {{ .stack }} test_list\n\n        # Get the `test_map` output of type map from the `component1` component in the current stack\n        test_10: !terraform.output component1 {{ .stack }} test_map\n\n        # Retrieve the value of an environment variable\n        api_key: !env API_KEY\n\n        # Include a local file\n        config: !include ./dev-config.yaml\n\n        # Download a remote file, query data from the file using a YQ expression, and assign the result to the variable\n        allowed_ips: !include https://api.github.com/meta .api\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Networking\nDESCRIPTION: Defines networking components in Atmos through a partial stack manifest. It imports defaults, region mixins, and the VPC component catalog defaults for network configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/vpc/defaults\n  # Import other Networking components\n```\n\n----------------------------------------\n\nTITLE: Multi-Cloud Filesystem Layout\nDESCRIPTION: This code snippet shows a filesystem layout for components organized by cloud provider (AWS, GCP, and Azure) within a Terraform directory. Each cloud provider has its own subdirectory under `components/terraform/`, which contains the Terraform configuration files. This layout is useful for managing infrastructure in multi-cloud environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/component-library.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n└── components/\n    └── terraform/\n        ├── aws/                   # Components for Amazon Web Services (AWS)\n        │   └── example/\n        │       ├── main.tf\n        │       ├── outputs.tf\n        │       └── variables.tf\n        ├── gcp/                   # Components for Google Cloud (GCP)\n        │   └── example/\n        │       ├── main.tf\n        │       ├── outputs.tf\n        │       └── variables.tf\n        └── azure/                 # Components for Microsoft Azure (Azure)\n            └── example/\n                ├── main.tf\n                ├── outputs.tf\n                └── variables.tf\n```\n\n----------------------------------------\n\nTITLE: Setting Atmos Manifest Schema via Environment Variable or CLI\nDESCRIPTION: These shell commands demonstrate how to override the default Atmos Manifest JSON Schema using the `ATMOS_SCHEMAS_ATMOS_MANIFEST` environment variable or the `--schemas-atmos-manifest` command-line flag. This provides flexibility in specifying the schema path without modifying the `atmos.yaml` configuration file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/validate.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nATMOS_SCHEMAS_ATMOS_MANIFEST=stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json atmos validate stacks\natmos validate stacks --schemas-atmos-manifest stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\natmos validate stacks --schemas-atmos-manifest https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration in atmos.yaml\nDESCRIPTION: This YAML snippet demonstrates the minimal configuration required in the `atmos.yaml` CLI configuration file. It defines the base paths for Terraform components and stacks, the stack name pattern, and included/excluded paths for stack manifests.  It also configures base paths for JSON schema and OPA policy definitions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/abstract-component.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Override AWS Provider Configuration for a Component in Atmos YAML\nDESCRIPTION: This code snippet demonstrates how to override the AWS provider configuration for a specific component (vpc) in an Atmos stack manifest using YAML. This allows for component-specific configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      providers:\n        aws:\n          assume_role:\n            role_arn: \"IAM Role ARN for VPC\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component Dependencies in Atmos with YAML\nDESCRIPTION: This YAML snippet demonstrates how to define dependencies between components using the `settings.depends_on` section. The `depends_on` section allows you to specify dependencies on components within the same stack or in different stacks by specifying the `component`, and optionally `stage`, `tenant`, and `environment` attributes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/dependencies.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component1:\n      settings:\n        depends_on:\n          1:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test-component-override\"\n          2:\n            # This component (in any stage) depends on `test/test-component`\n            # from the `dev` stage (in any `environment` and any `tenant`)\n            component: \"test/test-component\"\n            stage: \"dev\"\n          3:\n            # This component depends on `my-component`\n            # from the `tenant1-ue2-staging` Atmos stack\n            component: \"my-component\"\n            tenant: \"tenant1\"\n            environment: \"ue2\"\n            stage: \"staging\"\n      vars:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Dev Stack Configuration\nDESCRIPTION: This YAML snippet configures the `stacks/dev.yaml` top-level stack manifest. It imports the default `vpc` component configuration and customizes the `vpc` component's variables for the `dev` environment, specifically setting `max_subnet_count` to 2 and disabling `vpc_flow_logs_enabled`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: dev\n\n# Import the component default configurations\nimport:\n  - defaults/vpc\n\ncomponents:\n  terraform:\n    # Customize the `vpc` component for the `dev` account\n    # You can define variables or override the imported defaults\n    vpc:\n      vars:\n        max_subnet_count: 2\n        vpc_flow_logs_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configure AWS SSM Parameter Store in Atmos YAML\nDESCRIPTION: This YAML snippet configures an AWS SSM Parameter Store in the `atmos.yaml` file. It includes the store type, AWS region, and optional IAM role ARNs for read and write operations. The `read_role_arn` and `write_role_arn` allow Atmos to assume roles for accessing SSM parameters.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/stores.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nstores:\n  prod/ssm:\n    type: aws-ssm-parameter-store\n    options:\n      region: us-east-2\n      read_role_arn: \"arn:aws:iam::123456789012:role/ssm-read-role\"  # Optional role ARN for read operations\n      write_role_arn: \"arn:aws:iam::123456789012:role/ssm-write-role\"  # Optional role ARN for write operations\n```\n\n----------------------------------------\n\nTITLE: atmos.Store Examples (YAML)\nDESCRIPTION: Shows various examples of using the `atmos.Store` function to read values from a Redis store. Includes examples using static stack names, the `.stack` identifier, and the `.vars.stage` attribute.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: nonprod\n\ncomponents:\n  terraform:\n    component-1:\n      vars:\n        # Use the static (hardcoded) stack name `prod`\n        cidr: '{{ atmos.Store \"redis\" \"prod\" \"vpc\" \"cidr\" }}'\n        # Using the template identifier `.stack` allows specifying the current stack name `nonprod` w/o hardcoding it\n        instance_count: '{{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").instance_count }}'\n        # Use the Atmos section `.vars.stage` for the stack name\n        subnets_count: '{{ (atmos.Store \"redis\" .vars.stage \"config\" \"config_map\").vpc_config.subnets_count }}'\n        # The `!template` YAML function converts the JSON-encoded string into a map\n        defaults: !template '{{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").defaults | toJSON }}'\n        lambda_environment:\n          # Example of using the `atmos.Store` template function in a multi-line string\n          ENGINE_CONFIG_JSON: |\n            {\n              \"cidr\": {{ atmos.Store \"redis\" \"prod\" \"vpc\" \"cidr\" | quote }},\n              \"defaults\": {{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").defaults | toJSON }},\n              \"subnets_count\": {{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").vpc_config.subnets_count }}\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining EKS Cluster Configuration Template (Second Pass)\nDESCRIPTION: This YAML template defines the configuration for an EKS cluster, but uses double curly braces + backtick + double curly braces for the `tags` to prevent premature processing during the initial import pass. This ensures the tokens are correctly replaced during the second processing pass.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    eks/cluster:\n      metadata:\n        component: eks/cluster\n      vars:\n        enabled: \"{{ .enabled }}\"\n        name: \"{{ .name }}\"\n        tags:\n          atmos_component: \"{{\"`{{ .atmos_component }}`\"}}\"\n          atmos_stack: \"{{\"`{{ .atmos_stack }}`\"}}\"\n          terraform_workspace: \"{{\"`{{ .workspace }}`\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Cloud Workspace using Token in _defaults.yaml (YAML)\nDESCRIPTION: This snippet configures the Terraform Cloud backend, utilizing the `{terraform_workspace}` token in the `_defaults.yaml` file. This token allows Atmos to dynamically set the Terraform workspace name for each component, promoting a DRY configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: cloud\n  backend:\n    cloud:\n      organization: \"my-org\"\n      hostname: \"app.terraform.io\"\n      workspaces:\n        # The token `{terraform_workspace}` will be automatically replaced with the\n        # Terraform workspace for each Atmos component\n        name: \"{terraform_workspace}\"\n```\n\n----------------------------------------\n\nTITLE: Implement Terraform outputs.tf\nDESCRIPTION: Defines the outputs of the Terraform module. Outputs are used to pass state between modules. The `EmbedFile` component is used to include the contents of the `examples/quick-start-simple/components/terraform/weather/outputs.tf` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/write-components.mdx#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n<EmbedFile filePath=\"examples/quick-start-simple/components/terraform/weather/outputs.tf\" />\n```\n\n----------------------------------------\n\nTITLE: Generated Atlantis Configuration\nDESCRIPTION: This YAML snippet shows an example of a generated `atlantis.yaml` file after executing the `atmos atlantis generate repo-config` command with specified config and project templates. It defines projects with names, workspaces, and associated workflows, along with the steps for the `plan` and `apply` phases of the specified workflow. Note the use of `$PLANFILE` and `$WORKSPACE` variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nprojects:\n  - name: tenant1-ue2-dev-infra-vpc\n    workspace: tenant1-ue2-dev\n    workflow: workflow-1\n\nworkflows:\n  workflow-1:\n    apply:\n      steps:\n        - run: terraform apply $PLANFILE\n    plan:\n      steps:\n        - run: terraform init -input=false\n        - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n        - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\n```\n\n----------------------------------------\n\nTITLE: Define Base VPC Component in Atmos\nDESCRIPTION: This YAML configuration file, `stacks/catalog/vpc/defaults.yaml`, defines the base configuration for the `vpc/defaults` component in Atmos. It includes settings for validation using JSON schema and OPA policies, as well as default variable values such as `enabled`, `name`, `max_subnet_count`, and various VPC settings. This base component is intended to be inherited by other VPC components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-inheritance.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.0.0.0/18\n```\n\n----------------------------------------\n\nTITLE: VPC Defaults Configuration in YAML\nDESCRIPTION: This YAML configuration defines the default settings for the `vpc` component in Atmos. It includes metadata pointing to the Terraform component, defines validation steps using JSON Schema and OPA policies, and sets variables such as enabling the VPC, configuring its name, subnet counts, and CIDR blocks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Configure OPA Validation in stack.yaml\nDESCRIPTION: This snippet demonstrates how to add a `validation` section to a component manifest in `stack.yaml` to specify the OPA policy file for validating the component. The `schema_path` points to the OPA policy file, and the `schema_type` is set to `opa`. The `timeout` parameter defines the maximum time allowed for the validation check.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/terraform-variables.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          check-template-functions-test-component-with-opa-policy:\n            schema_type: opa\n            # 'schema_path' can be an absolute path or a path relative to 'schemas.opa.base_path' defined in `atmos.yaml`\n            schema_path: \"my-component/validate-my-component.rego\"\n            description: Check 'my-component' component using OPA policy\n            # Validation timeout in seconds\n            timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Read Component Config with atmos.Component from Another Stack\nDESCRIPTION: This snippet demonstrates how to use the `atmos.Component` template function to access the configuration of a component in a different stack. It reads the `vpc_id` output of the `vpc` component in the `staging` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: '{{ (atmos.Component \"vpc\" \"staging\").outputs.vpc_id }}'\n```\n\n----------------------------------------\n\nTITLE: Access Component Variables in Terraform Module\nDESCRIPTION: This HCL snippet shows how to access variables for a given component from within a Terraform module using the `cloudposse/stack-config/yaml` module.  It specifies the stack configuration path, stack name, component type, and component name. It relies on the `cloudposse/terraform-provider-utils` provider to read the YAML Stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/terraform.mdx#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vars\" {\n  source = \"cloudposse/stack-config/yaml//modules/vars\"\n  # version     = \"x.x.x\"\n\n  stack_config_local_path = \"./stacks\"\n  stack                   = \"my-stack\"\n  component_type          = \"terraform\"\n  component               = \"my-vpc\"\n\n  context = module.this.context\n}\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Plan GitHub Action Workflow\nDESCRIPTION: This YAML workflow configures the `cloudposse/github-action-atmos-terraform-plan` GitHub Action. It's triggered on workflow dispatch or pull request events on the main branch. The job hardcodes the component and stack (foobar and plat-ue2-sandbox), though in practice these would be derived from another action.  It defines the steps necessary to create and run the terraform plan and produce a job summary.  It requires permissions to assume AWS roles.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-plan.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-terraform-plan.yaml\n```\n\n----------------------------------------\n\nTITLE: Drift Detection and Remediation Workflow\nDESCRIPTION: This diagram illustrates the workflow for detecting and remediating Terraform drift using Atmos and GitHub Actions. The detection workflow is triggered on a schedule, plans Terraform configurations, and creates GitHub issues for any detected drift. The remediation workflow is triggered by labeling an issue, applies the necessary changes, and closes the issue upon successful application.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-drift-detection.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \n title: Atmos Terraform Drift Detection \n--- \nstateDiagram-v2\n  direction LR\n  [*] --> detection : Scheduled Workflow (cron)\n  detection --> remediate : Labeled Issue triggers workflow\n\n  state \"Atmos Terraform Drift Detection\" as detection {\n    [*] --> gather\n    gather --> plan\n    plan --> issue : if changes\n    issue --> [*]\n\n    state \"Gather every component and stack\" as gather\n    state \"Atmos Terraform Plan\" as plan\n    state \"Create GitHub Issue\" as issue \n  }\n\n  state \"Atmos Terraform Drift Remediation\" as remediate {\n    [*] --> fetch\n    fetch --> apply\n    apply --> close\n    close --> [*]\n\n    state \"Retrieve Terraform Plan\" as fetch\n    state \"Atmos Terraform Apply\" as apply\n    state \"Close GitHub Issue\" as close\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Terraform Component in Atmos\nDESCRIPTION: This snippet demonstrates how to define a Terraform component within an Atmos stack configuration. It shows how to specify the component path relative to the `components.base_path` defined in `atmos.yaml`. Setting the `metadata.component` property to the component's directory path ensures Atmos uses the correct component for deployment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    station:\n      metadata:\n        component: weather\n```\n\n----------------------------------------\n\nTITLE: Implement Terraform versions.tf\nDESCRIPTION: Defines provider version pinning to increase the stability of the component and ensure consistency between deployments.  The `EmbedFile` component is used to include the contents of the `examples/quick-start-simple/components/terraform/weather/versions.tf` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/write-components.mdx#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n<EmbedFile filePath=\"examples/quick-start-simple/components/terraform/weather/versions.tf\" />\n```\n\n----------------------------------------\n\nTITLE: Override Configuration Schema - Terraform/Helmfile Scopes - YAML\nDESCRIPTION: Defines the schema for the `overrides` section at the Terraform and Helmfile levels. Illustrates how to override environment variables, hooks, settings, variables, providers, and command within the Terraform or Helmfile context.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  overrides:\n    env: {}\n    hooks: {}\n    settings: {}\n    vars: {}\n    providers: {}\n    command: \"<command to execute>\"\n\nhelmfile:\n  overrides:\n    env: {}\n    settings: {}\n    vars: {}\n    command: \"<command to execute>\"\n```\n\n----------------------------------------\n\nTITLE: YAML Data Sources Configuration\nDESCRIPTION: Shows how to define various Gomplate data sources in the global `settings` section of an Atmos stack manifest. This includes configuring `http`, `file`, `aws+smp`, `aws+sm`, and `s3` data sources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  templates:\n    settings:\n      gomplate:\n        # Timeout in seconds to execute the data sources\n        timeout: 5\n        # https://docs.gomplate.ca/datasources\n        datasources:\n          # 'http' data source\n          # https://docs.gomplate.ca/datasources/#using-file-datasources\n          ip:\n            url: \"https://api.ipify.org?format=json\"\n            # https://docs.gomplate.ca/datasources/#sending-http-headers\n            # https://docs.gomplate.ca/usage/#--datasource-header-h\n            headers:\n              accept:\n                - \"application/json\"\n          # 'file' data sources\n          # https://docs.gomplate.ca/datasources/#using-file-datasources\n          config-1:\n            url: \"./config1.json\"\n          config-2:\n            url: \"file:///config2.json\"\n          # `aws+smp` AWS Systems Manager Parameter Store data source\n          # https://docs.gomplate.ca/datasources/#using-awssmp-datasources\n          secret-1:\n            url: \"aws+smp:///path/to/secret\"\n          # `aws+sm` AWS Secrets Manager datasource\n          # https://docs.gomplate.ca/datasources/#using-awssm-data source\n          secret-2:\n            url: \"aws+sm:///path/to/secret\"\n          # `s3` datasource\n          # https://docs.gomplate.ca/datasources/#using-s3-data sources\n          s3-config:\n            url: \"s3://mybucket/config/config.json\"\n```\n\n----------------------------------------\n\nTITLE: Define Terraform Lifecycle Hook at Terraform Level in Atmos\nDESCRIPTION: This YAML snippet demonstrates configuring a Terraform lifecycle hook at the Terraform level within Atmos.  It specifies the store name 'prod/ssm' for the 'store-outputs' hook.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/hooks.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# stacks/orgs/acme/plat/prod/_defaults.yaml (terraform)\nterraform:\n  hooks:\n    store-outputs:\n      name: prod/ssm\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Shell\nDESCRIPTION: This command configures the environment for an Atmos component in a stack and starts a new shell suitable for executing all terraform commands natively without going through Atmos.  It requires the `component` and `stack` arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Define Custom CLI Commands in Atmos YAML\nDESCRIPTION: Defines custom CLI commands in the `atmos.yaml` configuration file. The configuration includes commands to retrieve the current public IP and GitHub status. The commands use `curl` and `jq` to fetch and parse data from external sources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/add-custom-commands.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n- name: ip\n  description: Return my current IP\n  steps:\n    - curl -s https://ifconfig.me\n    - echo\n\n# Use Nested Custom Commands\n- name: \"github\"\n  commands:\n  - name: \"status\"\n    description: This command returns the number of stargazers for a GitHub repository\n    steps:\n      - curl -s https://www.githubstatus.com/api/v2/status.json | jq -r .status.description\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends\nDESCRIPTION: This command generates backend config files for all Atmos Terraform components in all stacks using the `atmos terraform generate backends` command. Several options allow for customization of the output format, file template, target stacks, and components. The file template option allows specifying the location and naming convention of the generated files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends [options]\n```\n\n----------------------------------------\n\nTITLE: Default Atmos CLI Configuration (YAML)\nDESCRIPTION: This YAML snippet shows the default CLI configuration for Atmos, defining base paths for components, stacks, and workflows. It also includes settings for Terraform and Helmfile components, stack naming patterns, logging configurations, schema paths, and template settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbase_path: \".\"\nvendor:\n  base_path: \"./vendor.yaml\"\ncomponents:\n  terraform:\n    base_path: components/terraform\n    apply_auto_approve: false\n    deploy_run_init: true\n    init_run_reconfigure: true\n    auto_generate_backend_file: true\n    init:\n      pass_vars: false\n  helmfile:\n    base_path: components/helmfile\n    use_eks: true\n    kubeconfig_path: /dev/shm\n    helm_aws_profile_pattern: '{namespace}-{tenant}-gbl-{stage}-helm'\n    cluster_name_pattern: '{namespace}-{tenant}-{environment}-{stage}-eks-cluster'\nstacks:\n  base_path: stacks\n  included_paths:\n    - \"orgs/**/*\"\n  excluded_paths:\n    - \"**/_defaults.yaml\"\n  # To define Atmos stack naming convention, use either `name_pattern` or `name_template`.\n  # `name_template` has higher priority (if `name_template` is specified, `name_pattern` will be ignored).\n  # `name_pattern` uses the predefined context tokens {namespace}, {tenant}, {environment}, {stage}.\n  # `name_pattern` can also be set using 'ATMOS_STACKS_NAME_PATTERN' ENV var\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  # `name_template` is a Golang template.\n  # For the template tokens, and you can use any Atmos sections and attributes that the Atmos command\n  # `atmos describe component <component> -s <stack>` generates (refer to https://atmos.tools/cli/commands/describe/component).\n  # `name_template` can also be set using 'ATMOS_STACKS_NAME_TEMPLATE' ENV var\n  # name_template: \"{{.vars.tenant}}-{{.vars.environment}}-{{.vars.stage}}\"\nworkflows:\n  base_path: stacks/workflows\nlogs:\n  # Can also be set using 'ATMOS_LOGS_FILE' ENV var, or '--logs-file' command-line argument\n  # File or standard file descriptor to write logs to\n  # Logs can be written to any file or any standard file descriptor, including `/dev/stdout`, `/dev/stderr` and `/dev/null`\n  file: \"/dev/stderr\"\n  # Supported log levels: Trace, Debug, Info, Warning, Off\n  # Can also be set using 'ATMOS_LOGS_LEVEL' ENV var, or '--logs-level' command-line argument\n  level: Info\nschemas:\n  jsonschema:\n    base_path: stacks/schemas/jsonschema\n  opa:\n    base_path: stacks/schemas/opa\n# https://atmos.tools/core-concepts/stacks/templates\n# https://pkg.go.dev/text/template\ntemplates:\n  settings:\n    enabled: true\n    # https://masterminds.github.io/sprig\n    sprig:\n      enabled: true\n    # https://docs.gomplate.ca\n    gomplate:\n      enabled: true\nsettings:\n  list_merge_strategy: replace\n  terminal:\n    max_width: 120  # Maximum width for terminal output\n    pager: true     # Use pager for long output\n```\n\n----------------------------------------\n\nTITLE: EKS Update Kubeconfig with Component, Stack, and Overrides\nDESCRIPTION: This snippet shows how to use the `atmos aws eks update-kubeconfig` command with a component, stack, and overrides. This allows overriding the kubeconfig path and region from the command line.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig <component> -s <stack> --kubeconfig=<path_to_kubeconfig> --region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Importing stack configurations in YAML\nDESCRIPTION: This YAML snippet demonstrates how to import multiple stack configurations from the catalog in Atmos.  Each imported file is deep-merged on top of the previous one. The base path for imports is specified in `atmos.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/file1 # First import \"file1\" from the catalog\n  - catalog/file2 # Second import \"file2\" from the catalog, deep merging on top of the first import\n  - catalog/file3 # Third import \"file3\" from the catalog, deep merging on top of the preceeding imports\n```\n\n----------------------------------------\n\nTITLE: Staging Stack Configuration\nDESCRIPTION: This YAML snippet configures the `stacks/staging.yaml` top-level stack manifest. It imports the default configurations for both `vpc-flow-logs-bucket` and `vpc` components and then customizes the `vpc` component for the `staging` environment. Specifically, it sets `map_public_ip_on_launch` to `false` and `vpc_flow_logs_traffic_type` to `REJECT`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: staging\n\n# Import the component default configurations\nimport:\n  - defaults/vpc-flow-logs-bucket\n  - defaults/vpc\n\ncomponents:\n  terraform:\n    # Customize the `vpc` component for the `staging` account\n    # You can define variables or override the imported defaults\n    vpc:\n      vars:\n        map_public_ip_on_launch: false\n        vpc_flow_logs_traffic_type: \"REJECT\"\n```\n\n----------------------------------------\n\nTITLE: AWS Provider Configuration in Atmos YAML\nDESCRIPTION: This code snippet shows how to define the AWS provider configuration in an Atmos stack manifest using YAML. It sets the region and configures an assumed role. This configuration can be defined at the global scope or overridden at different levels.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nterraform:\n  providers:\n    aws:\n      region: \"us-east-2\"\n      assume_role:\n        role_arn: \"IAM Role ARN\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy with Custom Planfile\nDESCRIPTION: This command deploys `top-level-component1` using the execution plan file located at `<path_to_planfile>`. The `-s` flag specifies the `tenant1-ue2-dev` stack, and `--planfile` specifies the path to the plan file. This is used to deploy a specific plan that has been previously generated.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy top-level-component1 -s tenant1-ue2-dev --planfile <path_to_planfile>\n```\n\n----------------------------------------\n\nTITLE: Using !terraform.output with two parameters in YAML\nDESCRIPTION: Shows how to get the `output` of the `component` in the current stack using the `!terraform.output` YAML function with two parameters. This function reads the remote state of a specified component's output in the current stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Get the `output` of the `component` in the current stack\n!terraform.output <component> <output>\n```\n\n----------------------------------------\n\nTITLE: Using !terraform.output with static remote state backend in YAML\nDESCRIPTION: Demonstrates using `!terraform.output` to read attributes from a `static` remote state backend. This setup is often employed in brownfield scenarios where attributes are pre-defined.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Component `static-backend` is configured with the remote state backend of type `static`\n    static-backend:\n      remote_state_backend_type: static\n      remote_state_backend:\n        static:\n          region: \"us-west-2\"\n          cluster_name: \"production-cluster\"\n          vpc_cidr: \"10.0.0.0/16\"\n          database:\n            type: \"postgresql\"\n            version: \"12.7\"\n            storage_gb: 100\n          allowed_ips:\n            - \"192.168.1.0/24\"\n            - \"10.1.0.0/16\"\n          tags:\n            Environment: \"production\"\n            Owner: \"infra-team\"\n\n    eks-cluster:\n      vars:\n        region: !terraform.output static-backend region\n        cluster_name: !terraform.output static-backend cluster_name\n        vpc_cidr: !terraform.output static-backend vpc_cidr\n        db_type: !terraform.output static-backend database.type\n        db_storage: !terraform.output static-backend database.storage_gb\n        allowed_ips: !terraform.output static-backend allowed_ips\n        tags: !terraform.output static-backend tags\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow Step Schema Definition\nDESCRIPTION: This YAML snippet details the schema for individual steps within an Atmos workflow. Each step can include attributes such as `command` (the command to execute), `name` (an optional identifier for the step), `type` (specifying whether the command is an `atmos` command or a `shell` script), and `stack` (an Atmos stack to execute the command against).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  workflow-1:\n    description: \"Description of Workflow #1\"\n    stack: <Atmos stack> # optional\n    steps:\n      - command: <Atmos command to execute>\n        name: <step name>>  # optional\n        type: atmos  # optional\n        stack: <Atmos stack> # optional\n      - command: <Atmos command to execute>\n        name: <step name>>  # optional\n        stack: <Atmos stack> # optional\n      - command: <shell script>\n        name: <step name>>  # optional\n        type: shell  # required for the steps of type `shell`\n```\n\n----------------------------------------\n\nTITLE: Defining Atmos Components vpc/1 and vpc/2 in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define two Atmos components, `vpc/1` and `vpc/2`, that both point to the same Terraform component `vpc`. It includes importing default configurations, specifying metadata such as the Terraform component and inheritance, and defining variables specific to each component. The purpose is to provision multiple instances of the same Terraform component with different settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/final-notes.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the defaults for all VPC components\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc/1`\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/1` component\n      vars:\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.9.0.0/18\n\n    # Atmos component `vpc/2`\n    vpc/2:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/2` component\n      vars:\n        name: vpc-2\n        ipv4_primary_cidr_block: 10.10.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Basic Atmos Terraform Deploy\nDESCRIPTION: This command deploys the specified Atmos component to the specified stack. It assumes a standard deployment process with auto-approval enabled by Atmos. It targets a stack, which defines the environment and region settings for the deployment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Importing Template with Context Variables\nDESCRIPTION: This YAML imports the `eks_cluster.tmpl` template, providing context variables for the `enabled` and `name` parameters.  Variables not defined in the context will be rendered as \"<no value>\" in the first pass.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"catalog/eks/eks_cluster.tmpl\"\n    context:\n      enabled: true\n      name: prod-eks\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Atmos CLI\nDESCRIPTION: This command generates a Terraform plan for the `eks` component within the `ue2-dev` stack. It uses the `atmos terraform plan` command to show the changes that will be applied to the infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/terraform.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\natmos terraform plan eks --stack=ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Provisioning vpc with Atmos\nDESCRIPTION: This shell script provisions the `vpc` Atmos component across multiple stacks in different regions, OUs and accounts. It uses the `atmos terraform apply` command with the `-s` flag to specify the target stack. The stacks are defined by organization unit (OU), account and region. The vpc component depends on the vpc-flow-logs-bucket component being provisioned first.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/provision.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# `plat` OU, `dev` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc -s plat-ue2-dev\natmos terraform apply vpc -s plat-uw2-dev\n\n# `plat` OU, `staging` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc -s plat-ue2-staging\natmos terraform apply vpc -s plat-uw2-staging\n\n# `plat` OU, `prod` account, `us-east-2` and `us-west-2` regions\natmos terraform apply vpc -s plat-ue2-prod\natmos terraform apply vpc -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Atlantis Pre-Workflow Hook Configuration\nDESCRIPTION: This YAML snippet configures Atlantis to run Atmos commands as pre-workflow hooks. These hooks dynamically generate Terraform variable files and the Atlantis repo configuration file before Atlantis processes the workflow.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/pkg/atlantis/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - id: /.*/\n    pre_workflow_hooks:\n      - run: |\n          atmos terraform generate varfiles --file-template=varfiles/{tenant}-{environment}-{stage}-{component}.tfvars.json\n          atmos atlantis generate repo-config --config-template config-1 --project-template project-1\n```\n\n----------------------------------------\n\nTITLE: Environment Manifest Assembly: org1-plat-ue2-dev.yaml\nDESCRIPTION: This YAML snippet assembles the environment manifest `org1-plat-ue2-dev.yaml` by importing the corresponding mixins in a specific order. The order of imports is important as later imports override configurations from earlier imports.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The imports are processed in the order they are defined.\n  # The next imported manifest will override the configurations from the previously imported manifests\n  - catalog/vpc/mixins/defaults\n  - catalog/vpc/mixins/org1\n  - catalog/vpc/mixins/plat\n  - catalog/vpc/mixins/ue2\n  - catalog/vpc/mixins/dev\n```\n\n----------------------------------------\n\nTITLE: Override Firewalls Configuration\nDESCRIPTION: This YAML file configures a 'firewalls' layer in Atmos. It imports default configurations for network firewall and WAF components.  It then overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/network-firewall/defaults\n  - catalog/waf/defaults\n  # Import other Firewall components\n\n# Override the configurations of all the components in this layer\n```\n\n----------------------------------------\n\nTITLE: Directory Structure - Atmos Configuration\nDESCRIPTION: This snippet outlines the file system structure for Atmos configuration. It shows how stacks, mixins, orgs, and components are organized in directories. The file system structure provides a hierarchical way to manage configurations for different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n│   # Centralized stacks configuration\n│   ├── stacks\n│   │   ├── catalog\n│   │   │    ├── vpc\n│   │   │    │   ├── defaults.yaml\n│   │   │    │   ├── disabled.yaml\n│   │   │    │   ├── prod.yaml\n│   │   │    │   ├── ue2.yaml\n│   │   │    │   └── uw2.yaml\n│   │   │    └── vpc-flow-logs-bucket\n│   │   │        ├── defaults.yaml\n│   │   │        └── disabled.yaml\n│   │   ├── mixins\n│   │   │    ├── tenant\n│   │   │    │   ├── core.yaml\n│   │   │    │   └── plat.yaml\n│   │   │    ├── region\n│   │   │    │   ├── us-east-2.yaml\n│   │   │    │   └── us-west-2.yaml\n│   │   │    └── stage\n│   │   │        ├── dev.yaml\n│   │   │        ├── prod.yaml\n│   │   │        └── staging.yaml\n│   │   └── orgs\n│   │        └── acme\n│   │            ├── _defaults.yaml\n│   │            └── plat\n│   │                 ├── _defaults.yaml\n│   │                 ├── dev\n│   │                 │   ├── _defaults.yaml\n│   │                 │   ├── us-east-2.yaml\n│   │                 │   └── us-west-2.yaml\n│   │                 ├── prod\n│   │                 │   ├── _defaults.yaml\n│   │                 │   ├── us-east-2.yaml\n│   │                 │   └── us-west-2.yaml\n│   │                 └── staging\n│   │                     ├── _defaults.yaml\n│   │                     ├── us-east-2.yaml\n│   │                     └── us-west-2.yaml\n│   │  \n│   # Centralized components configuration. Components are broken down by tool\n│   └── components\n│       └── terraform   # Terraform components (Terraform root modules)\n│           ├── vpc\n│           └── vpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-Generate Backend File in Atmos YAML\nDESCRIPTION: This snippet enables the automatic generation of the Terraform backend file in the `atmos.yaml` configuration file. Setting `auto_generate_backend_file` to `true` allows Atmos to create the `backend.tf.json` file based on the configurations defined in the stack manifests. This eliminates the need for manual backend file creation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: true\n```\n\n----------------------------------------\n\nTITLE: Cleaning Terraform Working Directory\nDESCRIPTION: This command deletes the `.terraform` folder, the folder that `TF_DATA_DIR` ENV var points to, `.terraform.lock.hcl` file, `varfile` and `planfile` for a component in a stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform clean\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command Example\nDESCRIPTION: Example usage of the `atmos terraform apply` command to apply a Terraform configuration for a specific component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform apply test/test-component-override-3 -s tenant1-ue2-dev\natmos terraform apply test/test-component-override-2 -s tenant1-ue2-dev --redirect-stderr /dev/stdout\natmos terraform apply test/test-component-override -s tenant1-ue2-dev --redirect-stderr ./errors.txt\n```\n\n----------------------------------------\n\nTITLE: Using !store function with store, stack, component, key, and YQ query\nDESCRIPTION: Demonstrates how to retrieve a specific value from a complex data structure in a different stack using the `!store` function in combination with a YQ query.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> <stack> <component> <key> | query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/prod/us-west-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `prod` account, and `us-west-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/prod/_defaults\n  - mixins/region/us-west-2\n```\n\n----------------------------------------\n\nTITLE: Atmos S3 Bucket Component Configuration\nDESCRIPTION: This YAML snippet configures an S3 bucket for storing Terraform planfiles using the `s3-bucket` component within an Atmos stack configuration. The bucket name is `gitops-plan-storage` and uses default settings from the `s3-bucket/defaults` catalog. Planfiles may contain secrets, so it's important to lock down the bucket.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-plan.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/s3-bucket/defaults\n\ncomponents:\n  terraform:\n    # S3 Bucket for storing Terraform Plans\n    gitops/s3-bucket:\n      metadata:\n        component: s3-bucket\n        inherits:\n          - s3-bucket/defaults\n      vars:\n        name: gitops-plan-storage\n        allow_encrypted_uploads_only: false\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components (All Stacks)\nDESCRIPTION: This command lists all Atmos components without specifying a stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-components.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list components\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos Manifest Schema\nDESCRIPTION: This YAML snippet shows how to configure the Atmos manifest schema location within the `atmos.yaml` file.  It sets the `manifest` property under `schemas.atmos` to the relative path of the JSON schema file. This allows the `atmos validate stacks` command to validate Atmos manifests against the specified schema.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-validation.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line arguments\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Inheritance Configuration\nDESCRIPTION: Defines a component inheriting from multiple other components and mixins. The `metadata.inherits` section specifies the order in which base component configurations are deep-merged. The `import` section ensures the base components are defined.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Import all the base components and mixins we want to inherit from.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\nimport:\n  - catalog/terraform/test/test-component-override\n  - catalog/terraform/test/test-component-override-2\n  - catalog/terraform/mixins/test-*.*\n\ncomponents:\n  terraform:\n    test/test-component-override-3:\n      vars: {}\n      metadata:\n        # `real` is implicit, you don't need to specify it.\n        # `abstract` makes the component protected from being deployed.\n        type: real\n        # Terraform component. Must exist in `components/terraform` folder.\n        # If not specified, it's assumed that this component `test/test-component-override-3`\n        # is also a Terraform component in\n        # `components/terraform/test/test-component-override-3` folder.\n        component: \"test/test-component\"\n        # Multiple inheritance.\n        # It's a down-top/left-right matrix similar to Method Resolution Order (MRO) in Python.\n        inherits:\n          - \"test/test-component-override\"\n          - \"test/test-component-override-2\"\n          - \"mixin/test-1\"\n          - \"mixin/test-2\"\n```\n\n----------------------------------------\n\nTITLE: Override Notifications Configuration\nDESCRIPTION: This YAML file configures a 'notifications' layer in Atmos. It imports default configurations for SES and SNS topic components.  It then overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/ses/defaults\n  - catalog/sns-topic/defaults\n  # Import other Notification components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: notifications\n        Team: Notification managers\n```\n\n----------------------------------------\n\nTITLE: Atmos: Verifying Component Configuration Without Overrides (terraform)\nDESCRIPTION: This snippet shows a component configuration in an Atmos stack where the 'command' setting is set to 'terraform' and there are no overrides applied. This verifies that the components managed by a specific team are not affected by the overrides defined for another team.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# The `command` is not overridden\ncommand: terraform\n\n# The component does not get the `overrides` section since it's not defined\n# for the components managed by the `devops` Team\noverrides: {}\n\nvars:\n  <variables for 'top-level-component1' in the stack 'tenant1-uw2-dev'>\n\nenv:\n  <ENV variables for 'top-level-component1' in the stack 'tenant1-uw2-dev'>\n\nsettings:\n  <settings for 'top-level-component1' in the stack 'tenant1-uw2-dev'>\n```\n\n----------------------------------------\n\nTITLE: Atmos: Importing Overrides in a Stack Manifest (yaml)\nDESCRIPTION: This snippet shows how to import override configurations from another stack manifest into a new one. The order of import statements is important as it determines which overrides are applied to which components. Overrides defined in the stack manifest take precedence over imported overrides.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `testing` Team manages all the components defined in this stack manifest and imported from the catalog\n  - catalog/terraform/test-component-2\n  # The `overrides` in `teams/testing-overrides` will affect all the components in this stack manifest\n  # and all the components that are imported AFTER the `overrides` from `teams/testing-overrides`.\n  # It will affect the components imported from `catalog/terraform/test-component-2`.\n  # The `overrides` defined in this manifest will affect all the imported components, including `catalog/terraform/test-component-2`.\n  - teams/testing-overrides\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override\n\n# The `overrides` in this stack manifest take precedence over the `overrides` imported from `teams/testing-overrides`\n\n# Global overrides\n# Override the variables, env, command and settings ONLY in the components managed by the `testing` Team.\noverrides:\n  env:\n    # This ENV variable will be added or overridden in all the components managed by the `testing` Team\n    TEST_ENV_VAR1: \"test-env-var1-overridden-2\"\n  settings: {}\n  vars: {}\n\n# Terraform overrides\n# Override the variables, env, command and settings ONLY in the Terraform components managed by the `testing` Team.\n# The Terraform `overrides` are deep-merged with the global `overrides`\n# and takes higher priority (it will override the same keys from the global `overrides`).\nterraform:\n  overrides:\n    vars:\n      # This variable will be added or overridden in all the Terraform components managed by the `testing` Team\n      test_1: 2\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Stack Manifest (us-west-2)\nDESCRIPTION: This YAML snippet demonstrates importing layers (groups of components) into a top-level stack manifest for `us-west-2`. The stack manifest includes default configurations, region-specific mixins, and predefined layers such as load balancers, data, DNS, logs, notifications, firewalls, networking, and EKS.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-west-2` manifests\n  # define the top-level Atmos stack `plat-uw2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-west-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: Define base and derived Atmos components in stack.yaml\nDESCRIPTION: This YAML snippet defines several Atmos components, including abstract base components and derived components that inherit from them. It shows how to define inheritance relationships using the `inherits` metadata field and how variables are inherited based on the hierarchy.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n\n    base-component-1:\n      metadata:\n        type: abstract\n      vars:\n        hierarchical_inheritance_test: \"base-component-1\"\n\n    base-component-2:\n      metadata:\n        type: abstract\n      vars:\n        hierarchical_inheritance_test: \"base-component-2\"\n\n    derived-component-1:\n      metadata:\n        component: \"test/test-component\"\n        inherits:\n          - base-component-1\n      vars: {}\n\n    derived-component-2:\n      metadata:\n        component: \"test/test-component\"\n        inherits:\n          - base-component-2\n          - derived-component-1\n      vars: {}\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles in JSON format\nDESCRIPTION: Generates Terraform varfiles in JSON format with a specified file template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --format json --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Execute Terraform Workspace Command\nDESCRIPTION: Executes the `atmos terraform workspace` command for a given component and stack. It calculates the Terraform workspace, initializes Terraform, and selects the workspace. If the workspace doesn't exist, it creates a new one.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Configure Templates in Atmos Stack Manifest YAML\nDESCRIPTION: This snippet configures templating settings within an Atmos stack manifest. It defines environment variables and Gomplate data sources, including file-based data sources. It is located in `stacks/orgs/acme/_defaults.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  templates:\n    settings:\n      # Environment variables passed to data sources when evaluating templates\n      # https://docs.gomplate.ca/datasources/#using-awssmp-datasources\n      # https://docs.gomplate.ca/functions/aws/#configuring-aws\n      # https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html\n      env:\n        AWS_PROFILE: \"<AWS profile>\"\n        AWS_TIMEOUT: 2000\n      gomplate:\n        # 7 seconds timeout to execute the data sources\n        timeout: 7\n        # https://docs.gomplate.ca/datasources\n        datasources:\n          # 'file' data sources\n          # https://docs.gomplate.ca/datasources/#using-file-datasources\n          config-1:\n            url: \"./my-config1.json\"\n          config-3:\n            url: \"file:///config3.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlantis Integration in Atmos\nDESCRIPTION: This YAML snippet configures the Atlantis integration for Atmos. It defines the path to the Atlantis configuration file, config templates, project templates, and workflow templates. The `path` setting specifies the location of the Atlantis config.  The templates allow for customization of Atlantis behavior. Requires Atmos CLI and Atlantis.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Integrations\nintegrations:\n\n  # Atlantis integration\n  # https://www.runatlantis.io/docs/repo-level-atlantis-yaml.html\n  atlantis:\n    # Path and name of the Atlantis config file 'atlantis.yaml'\n    # Supports absolute and relative paths\n    # All the intermediate folders will be created automatically (e.g. 'path: /config/atlantis/atlantis.yaml')\n    # Can be overridden on the command line by using '--output-path' command-line argument in 'atmos atlantis generate repo-config' command\n    # If not specified (set to an empty string/omitted here, and set to an empty string on the command line), the content of the file will be dumped to 'stdout'\n    # On Linux/macOS, you can also use '--output-path=/dev/stdout' to dump the content to 'stdout' without setting it to an empty string in 'atlantis.path'\n    path: \"atlantis.yaml\"\n\n    # Config templates\n    # Select a template by using the '--config-template <config_template>' command-line argument in 'atmos atlantis generate repo-config' command\n    config_templates:\n      config-1:\n        version: 3\n        automerge: true\n        delete_source_branch_on_merge: true\n        parallel_plan: true\n        parallel_apply: true\n        allowed_regexp_prefixes:\n          - dev/\n          - staging/\n          - prod/\n\n    # Project templates\n    # Select a template by using the '--project-template <project_template>' command-line argument in 'atmos atlantis generate repo-config' command\n    project_templates:\n      project-1:\n        # generate a project entry for each component in every stack\n        name: \"{tenant}-{environment}-{stage}-{component}\"\n        workspace: \"{workspace}\"\n        dir: \"{component-path}\"\n        terraform_version: v1.2\n        delete_source_branch_on_merge: true\n        autoplan:\n          enabled: true\n          when_modified:\n            - \"**/*.tf\"\n            - \"varfiles/$PROJECT_NAME.tfvars.json\"\n        apply_requirements:\n          - \"approved\"\n\n    # Workflow templates\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-init-plan-apply-commands\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-run-command\n    workflow_templates:\n      workflow-1:\n        plan:\n          steps:\n            - run: terraform init -input=false\n            # When using workspaces, you need to select the workspace using the $WORKSPACE environment variable\n            - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n            # You must output the plan using '-out $PLANFILE' because Atlantis expects plans to be in a specific location\n            - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\n        apply:\n          steps:\n            - run: terraform apply $PLANFILE\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Defaults Configuration\nDESCRIPTION: This snippet defines the default configuration for the `eks/cluster` component within Atmos.  It sets metadata, points to the Terraform component, and defines default variables for the EKS cluster, including node group settings, AMI type, instance types, and scaling parameters.  This YAML file acts as a baseline configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-component-configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    eks/cluster:\n      metadata:\n        # Point to the Terraform component in `components/terraform/eks/cluster`\n        component: eks/cluster\n      vars:\n        name: eks\n        availability_zones: [] # Use the VPC subnet AZs\n        managed_node_groups_enabled: true\n        node_groups:\n          # will create 1 node group for each item in map\n          main:\n            # EKS AMI version to use, e.g. \"1.16.13-20200821\" (no \"v\").\n            ami_release_version: null\n            # Type of Amazon Machine Image (AMI) associated with the EKS Node Group\n            ami_type: AL2_x86_64\n            # Whether to enable Node Group to scale its AutoScaling Group\n            cluster_autoscaler_enabled: false\n            # Configure storage for the root block device for instances in the Auto Scaling Group\n            block_device_map:\n              \"/dev/xvda\":\n                ebs:\n                  encrypted: true\n                  volume_size: 200 # GB\n                  volume_type: \"gp3\"\n            # Set of instance types associated with the EKS Node Group\n            instance_types:\n              - c6a.large\n            # Desired number of worker nodes when initially provisioned\n            desired_group_size: 2\n            max_group_size: 3\n            min_group_size: 2\n```\n\n----------------------------------------\n\nTITLE: Default VPC Configuration\nDESCRIPTION: This YAML snippet defines the default configuration for the `vpc` Terraform component in the `stacks/defaults/vpc.yaml` manifest. It includes settings for validation using JSON Schema and OPA policies, along with default variable settings for the VPC.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            # An array of filesystem paths (folders or individual files) to the additional modules for schema validation\n            # Each path can be an absolute path or a path relative to `schemas.opa.base_path` defined in `atmos.yaml`\n            # In this example, we have the additional Rego modules in `stacks/schemas/opa/catalog/constants`\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Hardcoded stack name with !store\nDESCRIPTION: Demonstrates specifying a hardcoded stack name when using the `!store` function to retrieve a value from a specific stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !store prod/ssm plat-ue2-prod vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Configure Terraform CLI in atmos.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure Terraform CLI settings within the `atmos.yaml` file. It includes settings for the Terraform command path, base path for Terraform components, and various flags to control Terraform's behavior, such as auto-approval, initialization, and backend file generation. Environment variables can also override these settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/terraform.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # The executable to be called by `atmos` when running Terraform commands\n    command: \"/usr/bin/terraform-1\"\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_BASE_PATH' ENV var, or '--terraform-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"components/terraform\"\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPLY_AUTO_APPROVE' ENV var\n    apply_auto_approve: false\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_DEPLOY_RUN_INIT' ENV var, or '--deploy-run-init' command-line argument\n    deploy_run_init: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_RUN_RECONFIGURE' ENV var, or '--init-run-reconfigure' command-line argument\n    init_run_reconfigure: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: false\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPEND_USER_AGENT' ENV var, or '--append-user-agent' command-line argument\n    append_user_agent: \"Acme/1.0 (Build 1234; arm64)\"\n    init:\n      # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_PASS_VARS' ENV var, or '--init-pass-vars' command-line argument\n      pass_vars: false\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Dependencies in Atmos YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify dependencies on external folders within an Atmos component configuration. The `folder` attribute in the `settings.depends_on` map is used to define the dependency. If any file within the specified folder is modified, the component will be marked as affected by the `atmos describe affected` command. It requires the `atmos` CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component3:\n      metadata:\n        component: \"top-level-component1\"\n      settings:\n        depends_on:\n          1:\n            file: \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n          2:\n            folder: \"tests/fixtures/scenarios/complete/components/helmfile/infra/infra-server\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Manifest with Template Settings\nDESCRIPTION: This YAML defines the `settings` and `components` in an Atmos stack manifest, which utilizes the `evaluations` setting to perform multiple template processing passes and combine results from each step. It showcases the usage of nested templates.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  test: \"{{ .atmos_component }}\"\n  test2: \"{{ .settings.test }}\"\n\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        tags:\n          tag1: \"{{ .settings.test }}-{{ .settings.test2 }}\"\n          tag2: \"{{\"{{`{{ .atmos_component }}`}}\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Define Atmos Workflow with Step-Level Stack\nDESCRIPTION: This workflow executes `terraform plan` on a specific component across multiple stacks. The stack is specified within the `stack` attribute for each step.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  terraform-plan-test-component-override-3-all-stacks:\n    description: Run 'terraform plan' on 'test/test-component-override-3' component in all stacks\n    steps:\n      - command: terraform plan test/test-component-override-3\n        stack: tenant1-ue2-dev\n      - command: terraform plan test/test-component-override-3\n        stack: tenant1-ue2-staging\n      - command: terraform plan test/test-component-override-3\n        stack: tenant1-ue2-prod\n      - command: terraform plan test/test-component-override-3\n        stack: tenant2-ue2-dev\n      - command: terraform plan test/test-component-override-3\n        stack: tenant2-ue2-staging\n      - command: terraform plan test/test-component-override-3\n        stack: tenant2-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Tags Using Go Templates in Atmos\nDESCRIPTION: This YAML snippet illustrates how to define a standard set of tags for all resources in the infrastructure by adding configuration to the `_defaults.yaml` Org-level stack manifest. It leverages Go templates to inject dynamic values like `atmos_component`, `atmos_stack`, `atmos_stack_file`, and `workspace` into the tags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  vars:\n    tags:\n      atmos_component: \"{{ .atmos_component }}\"\n      atmos_stack: \"{{ .atmos_stack }}\"\n      atmos_manifest: \"{{ .atmos_stack_file }}\"\n      terraform_workspace: \"{{ .workspace }}\"\n      # Examples of using the Gomplate and Sprig functions\n      # https://docs.gomplate.ca/functions/strings\n      atmos_component_description: \"{{ strings.Title .atmos_component }} component {{ .vars.name | strings.Quote }} provisioned in the stack {{ .atmos_stack | strings.Quote }}\"\n      # https://masterminds.github.io/sprig/os.html\n      provisioned_by_user: '{{ env \"USER\" }}'\n```\n\n----------------------------------------\n\nTITLE: Define CLI Command Aliases in Atmos YAML Configuration\nDESCRIPTION: This snippet demonstrates how to define aliases for Atmos CLI commands within the `atmos.yaml` configuration file.  Aliases provide shortcuts for frequently used commands, improving usability and reducing typing. This example includes aliases for native Atmos commands (like `terraform`) and custom commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/configuration.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI command aliases\naliases:\n  # Aliases for Atmos native commands\n  tf: terraform\n  tp: terraform plan\n  up: terraform apply\n  down: terraform destroy\n  ds: describe stacks\n  dc: describe component\n  # Aliases for Atmos custom commands\n  ls: list stacks\n  lc: list components\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Terraform Backend Configuration for vpc/2 (JSON)\nDESCRIPTION: This JSON snippet shows the auto-generated `backend.tf.json` file for the `vpc/2` component. The workspace_key_prefix is set to 'vpc-2' based on the component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc-2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing an Atmos component with JSON format\nDESCRIPTION: This command describes the configuration of an Atmos component and outputs the result in JSON format. The `-s` flag specifies the stack, and `--format json` specifies the output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component infra/vpc -s tenant1-ue2-dev --format json\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Root Modules with Atmos\nDESCRIPTION: Applies Terraform configurations for root modules using the Atmos CLI. Shows examples with a stack specified, auto-approve flag, and with a planfile.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply $component --stack $stack\natmos terraform apply $component --stack $stack -auto-approve\natmos terraform apply $component --stack $stack $planfile\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backends with Specified Output Format\nDESCRIPTION: This command specifies the output format for the generated Terraform backend files. Supported formats include 'hcl' (HashiCorp Configuration Language), 'json' (JSON format), and 'backend-config' (Terraform backend configuration format). This option controls the structure and syntax of the generated backend files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_backends_usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform generate backends --format=hcl|json|backend-config\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Varfile\nDESCRIPTION: This command generates a varfile (`.tfvar`) for a specified Atmos Terraform component within an Atmos stack, pre-populating variables for Terraform.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform generate varfile\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply (Short Args) with Atmos CLI\nDESCRIPTION: This command applies the Terraform configuration for the `eks` component within the `ue2-dev` stack, using short command-line arguments. It uses the `atmos terraform apply eks -s ue2-dev` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/terraform.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\natmos terraform apply eks -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Backend in _defaults.yaml (YAML)\nDESCRIPTION: This snippet configures the Azure Blob Storage backend for Terraform state management in the `_defaults.yaml` file within Atmos. It specifies the resource group name, storage account name, and container name to be used for storing Terraform state. The `terraform.backend_type` is set to `azurerm` to indicate the use of Azure Blob Storage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: azurerm\n  backend:\n    azurerm:\n      resource_group_name: \"StorageAccount-ResourceGroup\"\n      storage_account_name: \"abcd1234\"\n      container_name: \"tfstate\"\n      # Other parameters\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Cloud Backend Config (JSON)\nDESCRIPTION: This snippet shows the generated `backend.tf.json` file for Terraform Cloud when `auto_generate_backend_file` is enabled. It merges the default backend configuration from `_defaults.yaml` with any component-specific overrides. The `workspaces.name` parameter reflects the component-specific workspace name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"cloud\": {\n      \"hostname\": \"app.terraform.io\",\n      \"organization\": \"my-org\",\n      \"workspaces\": {\n        \"name\": \"my-component-workspace\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Terraform Backend Configuration for vpc/1 (JSON)\nDESCRIPTION: This JSON snippet shows the auto-generated `backend.tf.json` file for the `vpc/1` component. The workspace_key_prefix is set to 'vpc-1' based on the component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc-1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Google Secret Manager Store in Atmos YAML\nDESCRIPTION: This YAML snippet configures Google Secret Manager stores in the `atmos.yaml` file. It sets the store type, Google Cloud project ID, an optional prefix, and credentials loaded from an environment variable using `!env`. It also shows using an alias `gsm` for `google-secret-manager`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/stores.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nstores:\n  dev/gsm:\n    type: google-secret-manager\n    options:\n      project_id: my-project-id\n      prefix: atmos/dev\n      credentials: !env GOOGLE_CREDENTIALS_JSON  # Optional: JSON credentials string\n\n  prod/gsm:\n    type: gsm  # Alias for google-secret-manager\n    options:\n      project_id: my-prod-project\n      prefix: atmos/prod\n      # Uses Application Default Credentials\n```\n\n----------------------------------------\n\nTITLE: Atmos Configuration YAML\nDESCRIPTION: This YAML configuration defines the structure for Atmos to work with GitHub, specifying settings for GitOps, Terraform version, Infracost integration, artifact storage details (region, bucket, table, IAM role), and IAM roles for plan and apply actions. It also configures a matrix for sorting and grouping stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-drift-remediation.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nintegrations:\n  github:\n    gitops:\n      terraform-version: 1.5.2\n      infracost-enabled: false\n      artifact-storage:\n        region: us-east-2\n        bucket: cptest-core-ue2-auto-gitops\n        table: cptest-core-ue2-auto-gitops-plan-storage\n        role: arn:aws:iam::xxxxxxxxxxxx:role/cptest-core-ue2-auto-gitops-gha\n      role:\n        plan: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n        apply: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n      matrix:\n        sort-by: .stack_slug\n        group-by: .stack_slug | split(\"-\") | [.[0], .[2]] | join(\"-\")\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy Dry Run\nDESCRIPTION: Executes a dry run of the `atmos terraform deploy` command. This will show what changes would be made without actually applying them.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Override Data Configuration\nDESCRIPTION: This YAML file configures a 'data' layer in Atmos. It imports default configurations for Aurora Postgres, MSK, and EFS components and then overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/aurora-postgres/defaults\n  - catalog/msk/defaults\n  - catalog/efs/defaults\n  # Import other Data components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: data\n        Team: Data managers\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration YAML\nDESCRIPTION: This snippet shows the configuration in the `atmos.yaml` file required to specify the location of the Atmos Manifest JSON Schema for validating Atmos stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/schemas.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # JSON Schema to validate Atmos manifests\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line arguments\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Disabling a Terraform Component (YAML)\nDESCRIPTION: Shows how to disable a Terraform component in a specific environment using the `metadata.enabled` flag in the Atmos stack configuration. Setting `metadata.enabled` to `false` prevents the component from being provisioned.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Disable a component in a specific environment\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        type: real\n        enabled: false\n      vars:\n        name: primary-vpc\n```\n\n----------------------------------------\n\nTITLE: Describing a component and querying results with yq\nDESCRIPTION: This command describes a component and then queries the results using `yq` expressions to extract specific data, such as tags or settings. The `-q` or `--query` flag specifies the `yq` expression.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s plat-ue2-prod --query .vars.tags\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s plat-ue2-prod -q .settings\n```\n\n----------------------------------------\n\nTITLE: Prod Stack Configuration\nDESCRIPTION: This YAML snippet configures the `stacks/prod.yaml` top-level stack manifest. It imports the default configurations for both `vpc-flow-logs-bucket` and `vpc` components. It then customizes the `vpc` component for the `prod` environment by setting `map_public_ip_on_launch` to `false`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: prod\n\n# Import the component default configurations\nimport:\n  - defaults/vpc-flow-logs-bucket\n  - defaults/vpc\n\ncomponents:\n  terraform:\n    # Customize the `vpc` component for the `prod` account\n    # You can define variables or override the imported defaults\n    vpc:\n      vars:\n        map_public_ip_on_launch: false\n```\n\n----------------------------------------\n\nTITLE: Helmfile Component Schema in Atmos Stack (YAML)\nDESCRIPTION: Defines the schema for configuring a Helmfile component within an Atmos stack.  It includes metadata for component type, component path, inheritance, and a vars section for Helmfile variables that get deep-merged into the Helmfile configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  helmfile:\n    # the slug of the component\n    example:\n\n      # configuration specific to atmos\n      metadata:\n        # Components can be of type \"real\" (default) or \"abstract\"\n        type: real\n\n        # This is the directory path of the component.\n        # In this example, we're referencing a component in the `components/terraform/stable/example` folder.\n        component: stable/example\n\n        # We can leverage multiple inheritance to sequentially deep merge multiple configurations\n        inherits:\n          - example-defaults\n\n      # Define the Helmfile variables, which will get deep-merged into the Helmfile configuration.\n      vars:\n        enabled: true\n        release_name: my-release\n        chart_version: \"1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Components using Atmos CLI\nDESCRIPTION: These commands demonstrate how to apply Terraform components using the Atmos CLI. The commands specify the component to apply (e.g., `vpc-flow-logs-bucket`, `vpc`) and the stack to apply it to (e.g., `org1-plat-ue2-dev`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n# `dev` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-ue2-dev\natmos terraform apply vpc -s org1-plat-ue2-dev\n\n# `dev` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-uw2-dev\natmos terraform apply vpc -s org1-plat-uw2-dev\n\n# `staging` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-ue2-staging\natmos terraform apply vpc -s org1-plat-ue2-staging\n\n# `staging` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-uw2-staging\natmos terraform apply vpc -s org1-plat-uw2-staging\n\n# `prod` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-ue2-prod\natmos terraform apply vpc -s org1-plat-ue2-prod\n\n# `prod` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org1-plat-uw2-prod\natmos terraform apply vpc -s org1-plat-uw2-prod\n```\n\nLANGUAGE: shell\nCODE:\n```\n# `dev` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-ue2-dev\natmos terraform apply vpc -s org2-plat-ue2-dev\n\n# `dev` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-uw2-dev\natmos terraform apply vpc -s org2-plat-uw2-dev\n\n# `staging` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-ue2-staging\natmos terraform apply vpc -s org2-plat-ue2-staging\n\n# `staging` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-uw2-staging\natmos terraform apply vpc -s org2-plat-uw2-staging\n\n# `prod` account, `us-east-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-ue2-prod\natmos terraform apply vpc -s org2-plat-ue2-prod\n\n# `prod` account, `us-west-2` region\natmos terraform apply vpc-flow-logs-bucket -s org2-plat-uw2-prod\natmos terraform apply vpc -s org2-plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Component - Enabled Variable YAML\nDESCRIPTION: This YAML snippet focuses on the `enabled` variable of a component. It shows the inheritance chain through different stack manifests, highlighting how the final value is determined by the last processed value. The example demonstrates how a variable can be overridden in various sections of the stack manifest (e.g., `vars`, `terraform.vars`, `components.terraform.vars`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  vars:\n    enabled:\n      final_value: true\n      name: enabled\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.vars\n          variable_value: true\n        - dependency_type: inline\n          stack_file: orgs/cp/tenant1/dev/us-east-2\n          stack_file_section: terraform.vars\n          variable_value: false\n        - dependency_type: inline\n          stack_file: orgs/cp/tenant1/dev/us-east-2\n          stack_file_section: vars\n          variable_value: true\n```\n\n----------------------------------------\n\nTITLE: Validating Atmos Stacks\nDESCRIPTION: This command validates Atmos stack manifests and checks for YAML errors, imports, schema, and misconfiguration of components in stacks. It ensures that the configurations are correct and consistent across multiple stack manifest files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks\n```\n\n----------------------------------------\n\nTITLE: Default VPC Component Configuration\nDESCRIPTION: This YAML configuration defines the default settings for the `vpc` Terraform component, including validation rules, component name, and variables like `enabled`, `name`, `max_subnet_count`, `map_public_ip_on_launch`, and networking parameters. It enables VPC flow logs and configures their destination.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Plan Matrix GitHub Action Workflow\nDESCRIPTION: This YAML workflow configures the `cloudposse/github-action-atmos-terraform-plan` GitHub Action inside a matrix. It's triggered on workflow dispatch or pull request events on the main branch. The job runs multiple stacks in parallel with affected-stacks to plan all affected stacks. It defines the steps necessary to create and run the terraform plan and produce a job summary. It requires permissions to assume AWS roles.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-plan.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-terraform-plan-matrix.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backend Configs for all components\nDESCRIPTION: This command generates Terraform backend config files for all Atmos terraform components in all stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform generate backends\n```\n\n----------------------------------------\n\nTITLE: Appending CIDRs with !template YAML\nDESCRIPTION: This snippet demonstrates how to append additional CIDRs to the global `allowed_ingress_cidrs` using the `concat` and `list` functions within the `!template` expression.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nallowed_cidr_blocks: !template '{{ toJson (concat .settings.allowed_ingress_cidrs (list \"172.20.0.0/16\")) }}'\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration in YAML\nDESCRIPTION: This YAML configuration sets the base paths for Terraform components and stacks in Atmos. It includes paths to search for stack manifests, exclude default files, and defines the name pattern for stacks, including configurations for jsonschema, opa and atmos schemas.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that all `_defaults.yaml` files are not top-level stack manifests\n    - \"**/_defaults.yaml\"\n  # If you are using multiple organizations (namespaces), use the following `name_pattern`:\n  name_pattern: \"{namespace}-{tenant}-{environment}-{stage}\"\n  # If you are using a single organization (namespace), use the following `name_pattern`:\n  # name_pattern: \"{tenant}-{environment}-{stage}\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple VPC Component Instances in stack.yaml\nDESCRIPTION: This YAML configuration defines two Atmos components, `vpc/1` and `vpc/2`, which both point to the same Terraform component `vpc`. Each component has its own specific variables and an optional backend configuration. The `workspace_key_prefix` is set for each to ensure Terraform state is managed separately.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the defaults for all VPC components\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc/1`\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define variables specific to this `vpc/1` component\n      vars:\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.9.0.0/18\n      # Optional backend configuration for the component\n      # If not specified, the Atmos component name `vpc/1` will be used (`/` will be replaced with `-`)\n      backend:\n        s3:\n          workspace_key_prefix: vpc-1\n\n    # Atmos component `vpc/2`\n    vpc/2:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define variables specific to this `vpc/2` component\n      vars:\n        name: vpc-2\n        ipv4_primary_cidr_block: 10.10.0.0/18\n      # Optional backend configuration for the component\n      # If not specified, the Atmos component name `vpc/2` will be used (`/` will be replaced with `-`)\n      backend:\n        s3:\n          workspace_key_prefix: vpc-2\n```\n\n----------------------------------------\n\nTITLE: Helmfile Namespace Variable Example (YAML)\nDESCRIPTION: Illustrates the optional `vars.namespace` attribute within a Helmfile component's configuration in an Atmos stack. This demonstrates how to define the namespace for all stacks, which is typically the organization's namespace, following the `terraform-null-label` convention.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  namespace: acme\n```\n\n----------------------------------------\n\nTITLE: Define S3 Terraform Backend Configuration (orgs/_defaults.yaml)\nDESCRIPTION: This YAML snippet defines the default S3 backend configuration for Terraform state within an organization. It includes settings for ACL, encryption, bucket name, DynamoDB table, state file key, region, and IAM role ARN with read-write access.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/state-backend.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      bucket: \"your-s3-bucket-name\"\n      dynamodb_table: \"your-dynamodb-table-name\"\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n      role_arn: \"arn:aws:iam::xxxxxxxx:role/terraform-backend-read-write\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of !template YAML\nDESCRIPTION: This snippet demonstrates the correct usage of the `!template` function to handle complex outputs, converting JSON strings to list and map YAML types.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: !template '{{ toJson (atmos.Component \"<component>\" \"<stack>\").outputs.test_list }}'\nvar2: !template '{{ toJson (atmos.Component \"component1\" .stack).outputs.test_map }}'\n```\n\n----------------------------------------\n\nTITLE: Configure Plat Tenant Mixin - YAML\nDESCRIPTION: This YAML snippet configures the plat tenant mixin. It defines the 'tenant' variable as 'plat'. This configuration is used to set defaults for the 'plat' tenant/OU.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  tenant: plat\n\n# Other defaults for the `plat` tenant/OU\n```\n\n----------------------------------------\n\nTITLE: Output in different formats in atmos\nDESCRIPTION: This command demonstrates how to output the listed variables in different formats such as JSON, YAML, CSV, and TSV. The format option is useful for machine processing, configuration files, spreadsheet compatibility, and tab-delimited output, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# JSON format for machine processing\natmos list vars vpc --format json\n\n# YAML format for configuration files\natmos list vars vpc --format yaml\n\n# CSV format for spreadsheet compatibility\natmos list vars vpc --format csv\n\n# TSV format with tab delimiters\natmos list vars vpc --format tsv\n```\n\n----------------------------------------\n\nTITLE: Stack Schema Example\nDESCRIPTION: Demonstrates a basic Atmos stack schema configuration using YAML, including imports, variables, and component-specific configurations within the `terraform` section.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimport:\n- catalog/something\nvars:\n  key: value\ncomponents:\n  terraform:\n    $component:\n      vars:\n        foo: \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Development Stack (us-west-2) - YAML\nDESCRIPTION: This snippet imports the required layers into the `stacks/orgs/acme/plat/dev/us-west-2.yaml` top-level stack manifest. It shows the import of layers such as `load-balancers`, `data`, `dns`, `logs`, `notifications`, `firewalls`, `networking`, and `eks` into the stack configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-west-2` manifests\n  # define the top-level Atmos stack `plat-uw2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-west-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles for specific stacks\nDESCRIPTION: Generates Terraform varfiles for specified stacks using comma-separated values. This allows you to target specific stacks rather than generating varfiles for all stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --stacks orgs/cp/tenant1/staging/us-east-2,orgs/cp/tenant2/dev/us-east-2\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Atmos Terraform Apply with Matrix\nDESCRIPTION: This workflow extends the previous one by using a matrix to plan all affected stacks in parallel. It addresses the limitation of 256 matrix jobs in a single GitHub Actions workflow by using reusable workflows.  The workflow file name is `atmos-terraform-apply-matrix.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-apply.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-terraform-apply-matrix.yaml\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Example 2\nDESCRIPTION: This example generates a Terraform backend for the `infra/vpc` component in the `tenant1-ue2-staging` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend infra/vpc -s tenant1-ue2-staging\n```\n\n----------------------------------------\n\nTITLE: Display CLI Configuration with Atmos\nDESCRIPTION: The `atmos describe config` command displays the final, deep-merged CLI configuration from all `atmos.yaml` files. Options include specifying the output format as YAML or JSON, and querying the results using `yq` expressions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-config.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe config [options]\n```\n\n----------------------------------------\n\nTITLE: Read Terraform Outputs with !terraform.output from Another Stack\nDESCRIPTION: This snippet shows how to use the `!terraform.output` YAML function to access the configuration of a component in a different stack. It reads the `vpc_id` output of the `vpc` component in the `prod` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: !terraform.output vpc prod vpc_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Hierarchical Imports in Atmos (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use the `imports` key in a `vendor.yaml` file to split the main manifest into smaller, more manageable files for different infrastructure layers.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - \"layers/networking\"\n  - \"layers/security\"\n  - \"layers/data\"\n  - \"layers/analytics\"\n  - \"layers/firewalls\"\n  - \"layers/cicd\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Pro Stack Lock Example with Message\nDESCRIPTION: An example of using the `atmos pro lock` command to lock the `vpc` component in the `plat-ue2-dev` stack with a TTL of 300 seconds and a message indicating it's locked by a GitHub run.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/pro/pro-lock.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos pro lock --component vpc --stack plat-ue2-dev --ttl 300 --message \"Locked by $GITHUB_RUN_ID\"\n```\n\n----------------------------------------\n\nTITLE: us-east-2 Region Mixin Configuration in YAML\nDESCRIPTION: This YAML configuration defines settings for the `us-east-2` region in Atmos.  It imports default component configurations for `vpc-flow-logs-bucket` and `vpc`, and sets variables for the region and environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # All accounts (stages) in `us-east-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n  # All accounts (stages) in `us-east-2` region will have the `vpc` component\n  - catalog/vpc/defaults\n\nvars:\n  region: us-east-2\n  environment: ue2\n```\n\n----------------------------------------\n\nTITLE: Atmos Manifest for tfstate-backend Component\nDESCRIPTION: This YAML snippet provides an example of an Atmos manifest to configure the `tfstate-backend` Terraform component. It showcases how to enable server-side encryption, set the component's enabled status, configure force destroy, define the name, and enforce prevention of unencrypted uploads. This configuration ensures that the Terraform state backend is securely provisioned with Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tfstate-backend:\n      vars:\n        enable_server_side_encryption: true\n        enabled: true\n        force_destroy: false\n        name: tfstate\n        prevent_unencrypted_uploads: true\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Configuration Example\nDESCRIPTION: Example of the directory structure for the Atmos stack and component configurations to provision the `vpc` and `vpc-flow-logs-bucket` components into a multi-org, multi-tenant, multi-account, multi-region environment. This includes the stacks directory containing catalog, mixins, and orgs, as well as the components directory with Terraform modules.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration (stack manifests)\n   ├── stacks\n   │   ├── catalog  # component-specific defaults\n   │   │   ├── vpc-flow-logs-bucket\n   │   │   │   └── defaults.yaml\n   │   │   └── vpc\n   │   │       └── defaults.yaml\n   │   ├── mixins\n   │   │   ├── tenant  # tenant-specific defaults\n   │   │   │   ├── core.yaml\n   │   │   │   └── plat.yaml\n   │   │   ├── region  # region-specific defaults\n   │   │   │   ├── global-region.yaml\n   │   │   │   ├── us-east-2.yaml\n   │   │   │   └── us-west-2.yaml\n   │   │   └── stage  # stage-specific defaults\n   │   │       ├── audit.yaml\n   │   │       ├── automation.yaml\n   │   │       ├── identity.yaml\n   │   │       ├── root.yaml\n   │   │       ├── dev.yaml\n   │   │       ├── staging.yaml\n   │   │       └── prod.yaml\n   │   └── orgs  # Organizations\n   │       ├── org1\n   │       │   ├── _defaults.yaml\n   │       │   ├── core  # 'core' represents the \"Core\" OU (a.k.a tenant)\n   │       │   │   ├── _defaults.yaml\n   │       │   │   ├── audit\n   │       │   │   │   ├── _defaults.yaml\n   │       │   │   │   ├── global-region.yaml\n   │       │   │   │   ├── us-east-2.yaml\n   │       │   │   │   └── us-west-2.yaml\n   │       │   │   ├── automation\n   │       │   │   │   ├── _defaults.yaml\n   │       │   │   │   ├── global-region.yaml\n   │       │   │   │   ├── us-east-2.yaml\n   │       │   │   │   └── us-west-2.yaml\n   │       │   │   ├── identity\n   │       │   │   │   ├── _defaults.yaml\n   │       │   │   │   ├── global-region.yaml\n   │       │   │   │   ├── us-east-2.yaml\n   │       │   │   │   └── us-west-2.yaml\n   │       │   │   └── root\n   │       │   │       ├── _defaults.yaml\n   │       │   │       ├── global-region.yaml\n   │       │   │       ├── us-east-2.yaml\n   │       │   │       └── us-west-2.yaml\n   │       │   └── plat  # 'plat' represents the \"Platform\" OU (a.k.a tenant)\n   │       │       ├── _defaults.yaml\n   │       │       ├── dev\n   │       │       │   ├── _defaults.yaml\n   │       │       │   ├── global-region.yaml\n   │       │       │   ├── us-east-2.yaml\n   │       │       │   └── us-west-2.yaml\n   │       │       ├── staging\n   │       │       │   ├── _defaults.yaml\n   │       │       │   ├── global-region.yaml\n   │       │       │   ├── us-east-2.yaml\n   │       │       │   └── us-west-2.yaml\n   │       │       └── prod\n   │       │           ├── _defaults.yaml\n   │       │           ├── global-region.yaml\n   │       │           ├── us-east-2.yaml\n   │       │           └── us-west-2.yaml\n   │       └── org2\n   │           ├── _defaults.yaml\n   │           ├── core  # 'core' represents the \"Core\" OU (a.k.a tenant)\n   │           │   ├── _defaults.yaml\n   │           │   ├── audit\n   │           │   ├── automation\n   │           │   ├── identity\n   │           │   └── root\n   │           └── plat  # 'plat' represents the \"Platform\" OU (a.k.a tenant)\n   │               ├── _defaults.yaml\n   │               ├── dev\n   │               ├── staging\n   │               └── prod\n   │  \n   │   # Centralized components configuration\n   └── components\n       └── terraform  # Terraform components (a.k.a Terraform \"root\" modules)\n           ├── vpc\n           ├── vpc-flow-logs-bucket\n           ├── < other components >\n```\n\n----------------------------------------\n\nTITLE: List all metadata using atmos\nDESCRIPTION: This command lists all metadata for components across all stacks configured in atmos. It displays the data in a tabular format, showing stacks as columns and metadata keys as rows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-metadata.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list metadata\n```\n\n----------------------------------------\n\nTITLE: Override Load Balancer Configuration\nDESCRIPTION: This YAML file configures a 'load-balancers' layer in Atmos. It imports default configurations for Application Load Balancer (ALB) components and then overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/alb/defaults\n  # Import other Load Balancer components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: load-balancers\n        Team: Load balancer managers\n```\n\n----------------------------------------\n\nTITLE: Atmos Configuration (atmos.yaml) for GitHub Actions\nDESCRIPTION: This YAML snippet shows the structure of the `atmos.yaml` file required for Atmos GitHub Actions with atmos version `>= 1.63.0`.  It configures the `integrations.github.gitops` section with settings for Terraform version, Infracost enablement, artifact storage (region, bucket, table, role), and IAM roles for planning and applying. It defines a matrix for sorting and grouping stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/github-actions.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nintegrations:\n  github:\n    gitops:\n      terraform-version: 1.5.2\n      infracost-enabled: false\n      artifact-storage:\n        region: us-east-2\n        bucket: cptest-core-ue2-auto-gitops\n        table: cptest-core-ue2-auto-gitops-plan-storage\n        role: arn:aws:iam::xxxxxxxxxxxx:role/cptest-core-ue2-auto-gitops-gha\n      role:\n        plan: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n        apply: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n      matrix:\n        sort-by: .stack_slug\n        group-by: .stack_slug | split(\"-\") | [.[0], .[2]] | join(\"-\")\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos Stacks in atmos.yaml\nDESCRIPTION: This YAML configuration defines how Atmos locates and manages stack configurations. It includes settings for base path, included paths, excluded paths, and stack naming patterns, using either `name_pattern` or `name_template`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/stacks.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstacks:\n  # Can also be set using 'ATMOS_STACKS_BASE_PATH' ENV var, or '--config-dir' and '--stacks-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks\"\n\n  # Can also be set using 'ATMOS_STACKS_INCLUDED_PATHS' ENV var (comma-separated values string)\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n\n  # Can also be set using 'ATMOS_STACKS_EXCLUDED_PATHS' ENV var (comma-separated values string)\n  excluded_paths:\n    # Tell Atmos that all `_defaults.yaml` files are not top-level stack manifests\n    - \"**/_defaults.yaml\"\n\n  # To define Atmos stack naming convention, use either `name_pattern` or `name_template`.\n  # `name_template` has higher priority (if `name_template` is specified, `name_pattern` will be ignored).\n  # `name_pattern` uses the predefined context tokens {namespace}, {tenant}, {environment}, {stage}.\n  # `name_pattern` can also be set using 'ATMOS_STACKS_NAME_PATTERN' ENV var\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  # `name_template` is a Golang template.\n  # For the template tokens, and you can use any Atmos sections and attributes that the Atmos command\n  # `atmos describe component <component> -s <stack>` generates (refer to https://atmos.tools/cli/commands/describe/component).\n  # `name_template` can also be set using 'ATMOS_STACKS_NAME_TEMPLATE' ENV var\n  # name_template: \"{{.vars.tenant}}-{{.vars.environment}}-{{.vars.stage}}\"\n```\n\n----------------------------------------\n\nTITLE: Resulting tags after two evaluations\nDESCRIPTION: Demonstrates the final tags after two evaluation steps. The tags are added to all AWS resources provisioned by the `vpc` Terraform component in the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\natmos_component: vpc/1\natmos_stack: plat-ue2-dev\nterraform_component: vpc\nterraform_workspace: plat-ue2-dev-vpc-1\ndevops_team: dev_networking\nbilling_team: billing_net\nservice: net\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace Examples\nDESCRIPTION: Demonstrates various examples of using the `atmos terraform workspace` command with different components and stacks, showcasing the flexibility in targeting different environments and components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace top-level-component1 -s tenant1-ue2-dev\natmos terraform workspace infra/vpc -s tenant1-ue2-staging\natmos terraform workspace test/test-component -s tenant1-ue2-dev\natmos terraform workspace test/test-component-override-2 -s tenant2-ue2-prod\natmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Go Template for EKS IAM Role Defaults\nDESCRIPTION: This Go template defines the default configuration for an EKS IAM role. It leverages template variables such as `app_name`, `service_account_name`, and `service_account_namespace` to dynamically generate Terraform component configurations. It also demonstrates the use of Sprig functions for conditional configuration based on the presence of `iam_managed_policy_arns`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-template.mdx#_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\ncomponents:\n  terraform:\n    eks/iam-role/{{ .app_name }}:\n      metadata:\n        # Point to the Terraform component\n        component: eks/iam-role\n      vars:\n        enabled: true\n        tags:\n          Service: {{ .app_name }}\n        service_account_name: {{ .service_account_name }}\n        service_account_namespace: {{ .service_account_namespace }}\n        # Example of using the Sprig functions in `Go` templates.\n        # Refer to https://masterminds.github.io/sprig for more details.\n        {{ if hasKey . \"iam_managed_policy_arns\" }}\n        iam_managed_policy_arns:\n          {{ range $i, $iam_managed_policy_arn := .iam_managed_policy_arns }}\n          - '{{ $iam_managed_policy_arn }}'\n          {{ end }}\n        {{ - end }}\n```\n\n----------------------------------------\n\nTITLE: Validating Atmos Stacks with Local Schema\nDESCRIPTION: This command validates Atmos stacks using a JSON Schema file located on the local filesystem. It overrides the default (embedded) JSON Schema with the specified file path to validate the stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks --schemas-atmos-manifest schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC Components with Atmos CLI\nDESCRIPTION: This snippet demonstrates how to provision the configured VPC components using the Atmos CLI. It shows the `atmos terraform apply` command targeting each component instance (`vpc/1` and `vpc/2`) within a specific stack (`plat-ue2-prod`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/multiple-component-instances.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc/1 -s plat-ue2-prod\natmos terraform apply vpc/2 -s plat-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Configure Spacelift Stack Dependencies in Atmos (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define Spacelift stack dependencies in Atmos component configurations using the `settings.depends_on` section. Each dependency specifies a component and optionally a namespace, tenant, environment, and stage. This allows components to depend on other components within the same or different Atmos stacks. The `component` attribute is required, and the others provide context variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/spacelift.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component1:\n      settings:\n        depends_on:\n          1:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test-component-override\"\n          2:\n            # This component (in any stage) depends on `test/test-component`\n            # from the `dev` stage (in any `environment` and any `tenant`)\n            component: \"test/test-component\"\n            stage: \"dev\"\n          3:\n            # This component depends on `my-component`\n            # from the `tenant1-ue2-staging` Atmos stack\n            component: \"my-component\"\n            tenant: \"tenant1\"\n            environment: \"ue2\"\n            stage: \"staging\"\n      vars:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Include Remote YAML File (HTTP/HTTPS) in Atmos\nDESCRIPTION: Demonstrates including a remote YAML file using an HTTP or HTTPS URL with the `!include` function. Requires the file to be publicly accessible. The contents of `vars.yaml` will be injected into the `vars` section of the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include https://raw.githubusercontent.com/org/repo/main/path/to/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC Component with Atmos CLI (Shell)\nDESCRIPTION: These shell commands demonstrate how to provision the `vpc/1` Atmos component into the `ue2-dev` stack using the `atmos terraform plan` and `atmos terraform apply` commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan vpc/1 -s ue2-dev\natmos terraform apply vpc/1 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Schemas in atmos.yaml\nDESCRIPTION: This YAML snippet shows how to configure validation schemas in the `atmos.yaml` file for JSON Schema and OPA policies. It defines the `base_path` for both schema types and the path to the Atmos manifest schema.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-validation.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # https://json-schema.org\n  jsonschema:\n    # Can also be set using 'ATMOS_SCHEMAS_JSONSCHEMA_BASE_PATH' ENV var, or '--schemas-jsonschema-dir' command-line arguments\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/jsonschema\"\n  # https://www.openpolicyagent.org\n  opa:\n    # Can also be set using 'ATMOS_SCHEMAS_OPA_BASE_PATH' ENV var, or '--schemas-opa-dir' command-line arguments\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/opa\"\n  # JSON Schema to validate Atmos manifests\n  # https://atmos.tools/cli/schemas/\n  # https://atmos.tools/cli/commands/validate/stacks/\n  # https://atmos.tools/quick-start/advanced/configure-validation/\n  # https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n  # https://json-schema.org/draft/2020-12/release-notes\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line arguments\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Generating Helmfile Varfile\nDESCRIPTION: This command generates a varfile for a helmfile component in an Atmos stack, pre-populating values for Helm chart deployments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\natmos helmfile generate varfile\n```\n\n----------------------------------------\n\nTITLE: Updating EKS Kubeconfig\nDESCRIPTION: This command downloads the `kubeconfig` from an EKS cluster and saves it to a file, facilitating access to the Kubernetes cluster.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\natmos aws eks update-kubeconfig\n```\n\n----------------------------------------\n\nTITLE: Vendoring from Private Git Repo with Token\nDESCRIPTION: This snippet shows how to configure the `source` attribute to pull from a private Git repository by prepending the URI with `git::` and using an environment variable to pass the GitHub token. This allows Atmos to authenticate with the private repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsource: \"git::https://{{env \\\"GITHUB_TOKEN\\\"}}@github.com/some-org/some-private-repo/terraform/vpc.git?ref={{.Version}}\"\n```\n\n----------------------------------------\n\nTITLE: Workflow for VPC Provisioning\nDESCRIPTION: This workflow defines steps to deploy VPC components in different stacks, providing examples of naming steps for workflow resume.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  provision-vpcs:\n    description: \"Deploy vpc components\"\n    steps:\n      - command: terraform plan vpc -s plat-ue2-dev\n        name: step-1\n      - command: terraform plan vpc -s plat-ue2-staging\n        name: step-2\n      - command: terraform plan vpc -s plat-ue2-prod\n        name: step-3\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos CLI: atmos.yaml\nDESCRIPTION: This code snippet configures the Atmos command-line interface (CLI) by defining base paths for components and stacks, specifying included and excluded paths for stack manifests, and setting the naming pattern for stacks. The `components.terraform.base_path` specifies the directory where Terraform components are located. `stacks.base_path` sets the base path for stack manifests, while `included_paths` and `excluded_paths` define which files should be considered as top-level stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that all `_defaults.yaml` files are not top-level stack manifests\n    - \"**/_defaults.yaml\"\n  # If you are using multiple organizations (namespaces), use the following `name_pattern`:\n  name_pattern: \"{namespace}-{tenant}-{environment}-{stage}\"\n  # If you are using a single organization (namespace), use the following `name_pattern`:\n  # name_pattern: \"{tenant}-{environment}-{stage}\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles in HCL format\nDESCRIPTION: Generates Terraform varfiles in HCL format with a specified file template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --format hcl --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Reading Complex Object from Store (YAML)\nDESCRIPTION: Reads a complex object (e.g., map) from a remote store using the `atmos.Store` template function and retrieves a specific attribute from the object. The function fetches the object and then accesses the specified attribute.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvar2: '{{ (atmos.Store \"<store_name>\" \"<stack>\" \"<component>\" \"<key>\").<attribute> }}'\n```\n\n----------------------------------------\n\nTITLE: Query specific settings paths with atmos\nDESCRIPTION: These commands show how to use the `--query` flag to filter settings by a dot-notation path. This allows you to target specific configuration values within the component settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-settings.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Query template settings\natmos list settings --query '.settings.templates'\n\n# Query validation settings\natmos list settings --query '.settings.validation'\n\n# Query specific template configurations\natmos list settings --query '.settings.templates.gomplate'\n```\n\n----------------------------------------\n\nTITLE: Hierarchical imports in Atmos with context in YAML\nDESCRIPTION: This example showcases hierarchical imports in Atmos using Go templates. The `eks_cluster_hierarchical.yaml.tmpl` imports other configurations and uses `context` to provide values for Go templates within the imported files and the component itself. This allows for parameterizing the entire chain of stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Use `region.yaml.tmpl` `Go` template and provide `context` for it.\n  # This can also be done by using `Go` templates in the import path itself.\n  # - path: \"mixins/region/{{ .region }}\"\n  - path: \"mixins/region/region.yaml.tmpl\"\n    # `Go` templates in `context`\n    context:\n      region: \"{{ .region }}\"\n      environment: \"{{ .environment }}\"\n\n  # `Go` templates in the import path\n  - path: \"orgs/cp/{{ .tenant }}/{{ .stage }}/_defaults\"\n\ncomponents:\n  terraform:\n    # Parameterize Atmos component name\n    \"eks-{{ .flavor }}/cluster\":\n      metadata:\n        component: \"test/test-component\"\n      vars:\n        # Parameterize variables\n        enabled: \"{{ .enabled }}\"\n        name: \"eks-{{ .flavor }}\"\n        service_1_name: \"{{ .service_1_name }}\"\n        service_2_name: \"{{ .service_2_name }}\"\n        tags:\n          flavor: \"{{ .flavor }}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Data Component Defaults in Layer\nDESCRIPTION: This YAML snippet configures the `data.yaml` layer to import defaults from aurora-postgres, msk and efs components. This ensures these data-related components use the specified default configurations when the `data` layer is included in a stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/aurora-postgres/defaults\n  - catalog/msk/defaults\n  - catalog/efs/defaults\n  # Import other Data components\n```\n\n----------------------------------------\n\nTITLE: AWS Provider Configuration in Terraform HCL\nDESCRIPTION: This code snippet demonstrates how to configure the AWS provider in a Terraform configuration file (providers.tf). It sets the region and configures an assumed role for authentication.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-2\"\n  assume_role {\n    role_arn: \"IAM Role ARN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends with HCL Format\nDESCRIPTION: This command generates backend config files with a specified file template and uses the `--format hcl` option to produce files in HashiCorp Configuration Language (HCL) format. It customizes the output file path using the provided template and ensures the generated files are in the HCL syntax.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template backends/{tenant}/{environment}/{region}/{component}.tf --format hcl\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --format hcl --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Generated Google Cloud Storage Backend Config (JSON)\nDESCRIPTION: This snippet shows the generated `backend.tf.json` file when `auto_generate_backend_file` is enabled for GCS. It merges the default backend configuration from `_defaults.yaml` with any component-specific overrides. The `prefix` parameter reflects the component name, ensuring unique state file prefixes per component within the shared bucket.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"gcp\": {\n        \"bucket\": \"tf-state\",\n        \"prefix\": \"my-component\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Config Files in Atmos CLI (Bash)\nDESCRIPTION: This bash snippet demonstrates how to specify multiple configuration files and paths to the Atmos CLI using the `--config` and `--config-path` flags. Configurations are deep-merged in the order provided, with the last specified config having the highest priority.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natmos --config /path/to/config1.yaml --config /path/to/config2.yaml --config-path /path/first/config/ -config-path /path/second/config/ ...\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command Example\nDESCRIPTION: Example usage of the `atmos terraform destroy` command to destroy Terraform resources for a specific component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform destroy test/test-component-override-3 -s tenant1-ue2-dev\natmos terraform destroy test/test-component-override-2 -s tenant1-ue2-dev --redirect-stderr /dev/stdout\natmos terraform destroy test/test-component-override -s tenant1-ue2-dev --redirect-stderr /dev/null\n```\n\n----------------------------------------\n\nTITLE: Generate Atlantis Repo Config\nDESCRIPTION: This shell script within the GitHub Action generates the atlantis.yaml file using Atmos. It uses the specified config and project templates. It requires Atmos to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1\n```\n\n----------------------------------------\n\nTITLE: EKS Update Kubeconfig Command Usage\nDESCRIPTION: This snippet shows the basic usage of the `atmos aws eks update-kubeconfig` command. It demonstrates the general syntax for executing the command from the command line.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig [options]\n```\n\n----------------------------------------\n\nTITLE: Using !terraform.output with three parameters in YAML\nDESCRIPTION: Shows how to get the `output` of the `component` in the specified `stack` using the `!terraform.output` YAML function with three parameters. This function reads the remote state of a specified component's output from a specific stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Get the `output` of the `component` in the provided stack\n!terraform.output <component> <stack> <output>\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Command with Flags (Shell)\nDESCRIPTION: These shell commands demonstrate executing the Atmos `hello` command using both the long flag `--name` and the shorthand flag `-n` to provide the name to greet.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos hello --name world\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos hello -n world\n```\n\n----------------------------------------\n\nTITLE: Networking & Logging Workflows in networking.yaml\nDESCRIPTION: This YAML snippet defines several Atmos workflows in the `networking.yaml` file for managing VPCs and VPC Flow Logs. It includes workflows for planning and applying Terraform configurations across multiple stacks and components, automating infrastructure deployments. Each workflow consists of a series of commands executed sequentially.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-workflows.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Networking & Logging\ndescription: Atmos workflows for managing VPCs and VPC Flow Logs\n\nworkflows:\n\n  plan-all-vpc-flow-logs:\n    description: |\n      Run 'terraform plan' on all 'vpc-flow-logs-bucket' components in all stacks\n    steps:\n      - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-dev\n      - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-dev\n      - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-staging\n      - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-staging\n      - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-prod\n      - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-prod\n\n  plan-all-vpc:\n    description: |\n      Run 'terraform plan' on all 'vpc' components in all stacks\n    steps:\n      - command: terraform plan vpc -s plat-ue2-dev\n      - command: terraform plan vpc -s plat-uw2-dev\n      - command: terraform plan vpc -s plat-ue2-staging\n      - command: terraform plan vpc -s plat-uw2-staging\n      - command: terraform plan vpc -s plat-ue2-prod\n      - command: terraform plan vpc -s plat-uw2-prod\n\n  apply-all-components:\n    description: |\n      Run 'terraform apply' on all components in all stacks\n    steps:\n      - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-dev -auto-approve\n      - command: terraform apply vpc -s plat-ue2-dev -auto-approve\n      - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-dev -auto-approve\n      - command: terraform apply vpc -s plat-uw2-dev -auto-approve\n      - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-staging -auto-approve\n      - command: terraform apply vpc -s plat-ue2-staging -auto-approve\n      - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-staging -auto-approve\n      - command: terraform apply vpc -s plat-uw2-staging -auto-approve\n      - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-prod -auto-approve\n      - command: terraform apply vpc -s plat-ue2-prod -auto-approve\n      - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-prod -auto-approve\n      - command: terraform apply vpc -s plat-uw2-prod -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Defining Atmos Vendor Manifest in YAML\nDESCRIPTION: Defines a vendoring manifest in YAML format for Atmos. This manifest specifies the sources of components to be vendored, their versions, target locations, included/excluded paths, and associated tags. The manifest also demonstrates importing other vendor configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config\n  description: Atmos vendoring manifest\nspec:\n  # `imports` or `sources` (or both) must be defined in a vendoring manifest\n  imports:\n    - \"vendor/vendor2\"\n    - \"vendor/vendor3.yaml\"\n\n  sources:\n    # `source` supports the following protocols: local paths (absolute and relative), OCI (https://opencontainers.org),\n    # Git, Mercurial, HTTP, HTTPS, Amazon S3, Google GCP,\n    # and all URL and archive formats as described in https://github.com/hashicorp/go-getter.\n    # In 'source' and 'targets', Golang templates are supported  https://pkg.go.dev/text/template.\n    # Currently the fields '{{.Component}}' and '{{.Version}}' are supported.\n    # Download the component from the AWS public ECR registry (https://docs.aws.amazon.com/AmazonECR/latest/public/public-registries.html).\n    - component: \"vpc\"\n      source: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n      version: \"latest\"\n      targets:\n        - \"components/terraform/infra/vpc3\"\n      # Only include the files that match the 'included_paths' patterns.\n      # If 'included_paths' is not specified, all files will be matched except those that match the patterns from 'excluded_paths'.\n      # 'included_paths' support POSIX-style Globs for file names/paths (double-star `**` is supported).\n      # https://en.wikipedia.org/wiki/Glob_(programming)\n      # https://github.com/bmatcuk/doublestar#patterns\n      included_paths:\n        - \"**/*.tf\"\n        - \"**/*.tfvars\"\n        - \"**/*.md\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags test`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n        - networking\n    - component: \"vpc-flow-logs-bucket\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n      version: \"1.323.0\"\n      targets:\n        - \"components/terraform/infra/{{.Component}}/{{.Version}}\"\n      excluded_paths:\n        - \"**/*.yaml\"\n        - \"**/*.yml\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags networking,storage`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n        - storage\n    - component: \"vpc-mixin-1\"\n      source: \"https://raw.githubusercontent.com/cloudposse/terraform-null-label/0.25.0/exports/context.tf\"\n      targets:\n        - \"components/terraform/infra/vpc3\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags test`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n    - component: \"vpc-mixin-2\"\n      # Copy a local file into a local folder (keeping the same file name)\n      # This `source` is relative to the current folder\n      source: \"components/terraform/mixins/context.tf\"\n      targets:\n        - \"components/terraform/infra/vpc3\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags test`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n    - component: \"vpc-mixin-3\"\n      # Copy a local folder into a local folder\n      # This `source` is relative to the current folder\n      source: \"components/terraform/mixins\"\n      targets:\n        - \"components/terraform/infra/vpc3\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags test`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n    - component: \"vpc-mixin-4\"\n      # Copy a local file into a local file with a different file name\n      # This `source` is relative to the current folder\n      source: \"components/terraform/mixins/context.tf\"\n      targets:\n        - \"components/terraform/infra/vpc3/context-copy.tf\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags test`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - test\n```\n\n----------------------------------------\n\nTITLE: Generate Atmos Terraform Varfile\nDESCRIPTION: Generates a Terraform variable file for an Atmos component within a specified stack. The command requires the component name and stack name as arguments.  It creates a `.tfvar` file which can then be used in conjunction with Terraform.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Backend Config for vpc/1\nDESCRIPTION: This JSON configuration is the auto-generated Terraform backend configuration file (`backend.tf.json`) for the `vpc/1` Atmos component. It specifies the S3 backend settings, including the bucket name, DynamoDB table, encryption, region, and the `workspace_key_prefix` set to `vpc-1`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc-1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CLI Commands in atmos.yaml (YAML)\nDESCRIPTION: This YAML snippet configures custom CLI commands for the Atmos CLI using the `atmos.yaml` file. It demonstrates how to define commands with subcommands, arguments, flags, environment variables, and steps to execute, allowing you to extend the Atmos CLI with custom functionalities.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/commands.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: tf\n    description: Execute 'terraform' commands\n\n    # subcommands\n    commands:\n      - name: plan\n        description: This command plans terraform components\n        arguments:\n          - name: component\n            description: Name of the component\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n        env:\n          - key: ENV_VAR_1\n            value: ENV_VAR_1_value\n          - key: ENV_VAR_2\n            # 'valueCommand' is an external command to execute to get the value for the ENV var\n            # Either 'value' or 'valueCommand' can be specified for the ENV var, but not both\n            valueCommand: echo ENV_VAR_2_value\n        # steps support Go templates\n        steps:\n          - atmos terraform plan {{ .Arguments.component }} -s {{ .Flags.stack }}\n\n  - name: terraform\n    description: Execute 'terraform' commands\n\n    # subcommands\n    commands:\n      - name: provision\n        description: This command provisions terraform components\n        arguments:\n          - name: component\n            description: Name of the component\n\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n\n        # ENV var values support Go templates\n        env:\n          - key: ATMOS_COMPONENT\n            value: \"{{ .Arguments.component }}\"\n          - key: ATMOS_STACK\n            value: \"{{ .Flags.stack }}\"\n        steps:\n          - atmos terraform plan $ATMOS_COMPONENT -s $ATMOS_STACK\n          - atmos terraform apply $ATMOS_COMPONENT -s $ATMOS_STACK\n\n  - name: show\n    description: Execute 'show' commands\n\n    # subcommands\n    commands:\n      - name: component\n        description: Execute 'show component' command\n        arguments:\n          - name: component\n            description: Name of the component\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n\n        # ENV var values support Go templates and have access to {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables\n        env:\n          - key: ATMOS_COMPONENT\n            value: \"{{ .Arguments.component }}\"\n          - key: ATMOS_STACK\n            value: \"{{ .Flags.stack }}\"\n          - key: ATMOS_TENANT\n            value: \"{{ .ComponentConfig.vars.tenant }}\"\n          - key: ATMOS_STAGE\n            value: \"{{ .ComponentConfig.vars.stage }}\"\n          - key: ATMOS_ENVIRONMENT\n            value: \"{{ .ComponentConfig.vars.environment }}\"\n          - key: ATMOS_IS_PROD\n            value: \"{{ .ComponentConfig.settings.config.is_prod }}\"\n\n        # If a custom command defines 'component_config' section with 'component' and 'stack', 'atmos' generates the config for the component in the stack\n        # and makes it available in {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables,\n        # exposing all the component sections (which are also shown by 'atmos describe component' command)\n        component_config:\n          component: \"{{ .Arguments.component }}\"\n          stack: \"{{ .Flags.stack }}\"\n        # Steps support using Go templates and can access all configuration settings (e.g. {{ .ComponentConfig.xxx.yyy.zzz }})\n        # Steps also have access to the ENV vars defined in the 'env' section of the 'command'\n        steps:\n          - 'echo Atmos component from argument: \"{{ .Arguments.component }}\"'\n          - 'echo ATMOS_COMPONENT: \"$ATMOS_COMPONENT\"'\n          - 'echo Atmos stack: \"{{ .Flags.stack }}\"'\n          - 'echo Terraform component: \"{{ .ComponentConfig.component }}\"'\n          - 'echo Backend S3 bucket: \"{{ .ComponentConfig.backend.bucket }}\"'\n          - 'echo Terraform workspace: \"{{ .ComponentConfig.workspace }}\"'\n          - 'echo Namespace: \"{{ .ComponentConfig.vars.namespace }}\"'\n          - 'echo Tenant: \"{{ .ComponentConfig.vars.tenant }}\"'\n          - 'echo Environment: \"{{ .ComponentConfig.vars.environment }}\"'\n          - 'echo Stage: \"{{ .ComponentConfig.vars.stage }}\"'\n          - 'echo settings.spacelift.workspace_enabled: \"{{ .ComponentConfig.settings.spacelift.workspace_enabled }}\"'\n          - 'echo Dependencies: \"{{ .ComponentConfig.deps }}\"'\n          - 'echo settings.config.is_prod: \"{{ .ComponentConfig.settings.config.is_prod }}\"'\n          - 'echo ATMOS_IS_PROD: \"$ATMOS_IS_PROD\"'\n\n  - name: list\n    description: Execute 'atmos list' commands\n    # subcommands\n    commands:\n      - name: stacks\n        description: |\n          List all Atmos stacks.\n        steps:\n          - >\n            atmos describe stacks --process-templates=false --sections none | grep -e \"^\\S\" | sed s/://g\n      - name: components\n        description: |\n          List all Atmos components in all stacks or in a single stack.\n\n          Example usage:\n            atmos list components\n            atmos list components -s tenant1-ue1-dev\n            atmos list components --stack tenant2-uw2-prod\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: false\n        steps:\n          - >\n            {{ if .Flags.stack }}\n            atmos describe stacks --stack {{ .Flags.stack }} --format json --sections none | jq \".[].components.terraform\" | jq -s add | jq -r \"keys[]\"\n            {{ else }}\n            atmos describe stacks --format json --sections none | jq \".[].components.terraform\" | jq -s add | jq -r \"keys[]\"\n            {{ end }}\n\n  - name: set-eks-cluster\n    description: |\n      Download 'kubeconfig' and set EKS cluster.\n\n      Example usage:\n        atmos set-eks-cluster eks/cluster -s tenant1-ue1-dev -r admin\n        atmos set-eks-cluster eks/cluster -s tenant2-uw2-prod --role reader\n    verbose: false  # Set to `true` to see verbose outputs\n    arguments:\n      - name: component\n        description: Name of the component\n    flags:\n      - name: stack\n        shorthand: s\n        description: Name of the stack\n        required: true\n      - name: role\n        shorthand: r\n        description: IAM role to use\n        required: true\n    # If a custom command defines 'component_config' section with 'component' and 'stack',\n    # Atmos generates the config for the component in the stack\n    # and makes it available in {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables,\n    # exposing all the component sections (which are also shown by 'atmos describe component' command)\n    component_config:\n      component: \"{{ .Arguments.component }}\"\n      stack: \"{{ .Flags.stack }}\"\n    env:\n      - key: KUBECONFIG\n        value: /dev/shm/kubecfg.{{ .Flags.stack }}-{{ .Flags.role }}\n    steps:\n      - >\n        aws\n        --profile {{ .ComponentConfig.vars.namespace }}-{{ .ComponentConfig.vars.tenant }}-gbl-{{ .ComponentConfig.vars.stage }}-{{ .Flags.role }}\n        --region {{ .ComponentConfig.vars.region }}\n        eks update-kubeconfig\n        --name={{ .ComponentConfig.vars.namespace }}-{{ .Flags.stack }}-eks-cluster\n        --kubeconfig=\"${KUBECONFIG}\"\n        > /dev/null\n      - chmod 600 ${KUBECONFIG}\n      - echo ${KUBECONFIG}\n\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles for multiple stacks\nDESCRIPTION: Generates Terraform varfiles for specific stacks identified by their names. This command shows how to specify multiple stacks to generate varfiles for.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --stacks tenant1-ue2-staging,tenant1-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components Example 1\nDESCRIPTION: This is an example of listing Atmos components without specifying a stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-components.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos list components\n```\n\n----------------------------------------\n\nTITLE: Hardcoding Stack Name in !terraform.output YAML Function\nDESCRIPTION: Illustrates hardcoding a stack name in the `!terraform.output` function to retrieve an output from a specific stack.  This is used to retrieve the `vpc_id` output from the `vpc` component in the `plat-ue2-prod` stack for the `tgw` component in the `plat-ue2-dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !terraform.output vpc plat-ue2-prod vpc_id\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles for specific components and file template\nDESCRIPTION: Generates Terraform varfiles for specified components and utilizes a file template for customized file creation. The components are comma-separated, and the file template provides the structure and naming for the generated varfiles.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --components <component1>,<component2> --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Example Incorrect Multiline Output Results YAML\nDESCRIPTION: This snippet shows the incorrect results when handling complex outputs with multiline strings. The outputs are still JSON-encoded strings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: |\n  [\"item_1\",\"item_2\",\"item_3\"]\n\nvar2: |\n  {\"a\":1,\"b\":2,\"c\":3}\n```\n\n----------------------------------------\n\nTITLE: Configure Dev us-west-2 Stack - YAML\nDESCRIPTION: This YAML snippet configures the top-level Atmos stack for the 'dev' account in the 'us-west-2' region. It imports the 'dev' account defaults, the 'us-west-2' region mixin, and overrides the 'vpc' component configuration for 'dev'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `dev` by importing the `catalog/vpc/dev` manifest\n  - catalog/vpc/dev\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Vendor Pull with Component (Shell)\nDESCRIPTION: This shell snippet shows how to execute the Atmos vendor pull operation with a specific component. The `-c` flag specifies the component to be vendored.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull -c vpc\n```\n\n----------------------------------------\n\nTITLE: Running atmos describe stacks command\nDESCRIPTION: The `atmos describe stacks` command shows the configuration for stacks and components within those stacks. You can filter results by stack, components, sections, and more.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-stacks.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe stacks [options]\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack Manifest - YAML\nDESCRIPTION: Example of a top-level stack manifest that imports mixins, defaults, and team-specific manifests. This shows how different components and configurations are aggregated to create a complete stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - mixins/region/us-west-2\n  - orgs/cp/tenant1/dev/_defaults\n  # Import all components that the `devops` Team manages\n  - teams/devops\n  # Import all components managed by the `testing` Team\n  - teams/testing\n```\n\n----------------------------------------\n\nTITLE: Generating varfile examples with atmos\nDESCRIPTION: These examples demonstrate how to use the `atmos helmfile generate varfile` command with different options, including specifying the stack, component, and output file. The generated varfile will contain configuration values specific to the component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/helmfile-generate-varfile.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile generate varfile echo-server -s tenant1-ue2-dev\natmos helmfile generate varfile echo-server -s tenant1-ue2-dev\natmos helmfile generate varfile echo-server -s tenant1-ue2-dev -f vars.yaml\natmos helmfile generate varfile echo-server --stack tenant1-ue2-dev --file=vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/staging/us-east-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `staging` account, and `us-east-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/staging/_defaults\n  - mixins/region/us-east-2\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Production Stack - YAML\nDESCRIPTION: This snippet shows how to import required layers into a production stack manifest (`stacks/orgs/acme/plat/prod/us-east-2.yaml`). The imported layers define groups of components such as load balancers, data stores, DNS configurations, logging, notifications, firewalls, networking, and EKS.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/prod/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-prod`\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: Importing EKS Defaults in Layer\nDESCRIPTION: This YAML snippet showcases importing the `eks` component defaults into the `eks.yaml` layer manifest. This ensures that the EKS layer utilizes the default configurations defined for the EKS component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/eks/defaults\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration: core.yaml\nDESCRIPTION: This YAML snippet defines tenant-specific configurations for the `vpc` component in the `core` tenant. It overrides the default `vpc_flow_logs_traffic_type` variable, setting the VPC Flow Logs traffic type to `REJECT`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `vpc_flow_logs_traffic_type` from the defaults\n        # In `core` tenant, set VPC Flow Logs traffic type to `REJECT`\n        vpc_flow_logs_traffic_type: \"REJECT\"\n```\n\n----------------------------------------\n\nTITLE: Default VPC Flow Logs Bucket Configuration\nDESCRIPTION: This YAML configuration defines the default settings for the `vpc-flow-logs-bucket` Terraform component. It specifies the component name, enables the bucket, sets a name, configures traffic type, enables force destroy, and disables the lifecycle rule.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      metadata:\n        # Point to the Terraform component\n        component: vpc-flow-logs-bucket\n      vars:\n        enabled: true\n        name: \"vpc-flow-logs\"\n        traffic_type: \"ALL\"\n        force_destroy: true\n        lifecycle_rule_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell with Dry Run\nDESCRIPTION: Example of running the `atmos terraform shell` command with the `--dry-run` flag enabled. This allows you to see what actions Atmos would take without actually executing them.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Helmfile Component Behavior in Atmos\nDESCRIPTION: This YAML snippet configures Helmfile component behavior within Atmos using the `atmos.yaml` file. It sets the command to use when running Helmfile, the base path for Helmfile components, and EKS-related configurations, including whether to use EKS, the kubeconfig path, and patterns for AWS profile and cluster name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/components.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  helmfile:\n    # Optional `command` specifies the executable to be called by `atmos` when running Helmfile commands\n    # If not defined, `helmfile` is used\n    # Examples:\n    # command: helmfile\n    # command: /usr/local/bin/helmfile\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_COMMAND' ENV var, or '--helmfile-command' command-line argument\n    command: helmfile\n\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_BASE_PATH' ENV var, or '--helmfile-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"components/helmfile\"\n\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_USE_EKS' ENV var\n    # If not specified, defaults to 'true'\n    use_eks: true\n\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_KUBECONFIG_PATH' ENV var\n    kubeconfig_path: \"/dev/shm\"\n\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_HELM_AWS_PROFILE_PATTERN' ENV var\n    helm_aws_profile_pattern: \"{namespace}-{tenant}-gbl-{stage}-helm\"\n\n    # Can also be set using 'ATMOS_COMPONENTS_HELMFILE_CLUSTER_NAME_PATTERN' ENV var\n    cluster_name_pattern: \"{namespace}-{tenant}-{environment}-{stage}-eks-cluster\"\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for affected components only and output to stdout\nDESCRIPTION: Combines the `--affected-only` and `--output-path` flags to generate configurations for only affected components and direct the result to standard output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --output-path /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Configuration: Gomplate Datasource with atmos.GomplateDatasource\nDESCRIPTION: Demonstrates a complete YAML configuration example that defines a Gomplate datasource and uses `atmos.GomplateDatasource` to access the data. It illustrates the settings for defining a gomplate datasource and how to use it in Atmos component vars, showcasing datasource caching.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.GomplateDatasource.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  templates:\n    settings:\n      gomplate:\n        timeout: 5\n        datasources:\n          ip:\n            url: \"https://api.ipify.org?format=json\"\n            headers:\n              accept:\n                - \"application/json\"\ncomponents:\n  terraform:\n    test:\n      vars:\n        tags:\n          test1: '{{ (datasource \"ip\").ip }}'\n          test2: '{{ (atmos.GomplateDatasource \"ip\").ip }}'\n          test3: '{{ (atmos.GomplateDatasource \"ip\").ip }}'\n          test4: '{{ (atmos.GomplateDatasource \"ip\").ip }}'\n```\n\n----------------------------------------\n\nTITLE: Component Vendor Configuration YAML for Modules\nDESCRIPTION: This YAML snippet shows how to vendor a Terraform module as a component by specifying the module's Git repository and including relevant files. The `uri` uses `///` to specify the root of the repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/components-manifest.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: ComponentVendorConfig\nmetadata:\n  name: ec2-instance\n  description: Source for vendoring of 'ec2-instance' module as a component\nspec:\n  source:\n    # To vendor a module from a Git repo, use the following format: 'github.com/cloudposse/terraform-aws-ec2-instance.git///?ref={{.Version}}\n    uri: github.com/cloudposse/terraform-aws-ec2-instance.git///?ref={{.Version}}\n    version: 0.47.1\n\n    # Only include the files that match the 'included_paths' patterns\n    # 'included_paths' support POSIX-style Globs for file names/paths (double-star/globstar `**` is supported)\n    included_paths:\n      - \"**/*.tf\"\n      - \"**/*.tfvars\"\n      - \"**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos CLI\nDESCRIPTION: This YAML snippet configures the Atmos command-line interface (CLI). It defines the base paths for Terraform components and stacks, specifies a naming pattern for stacks, and includes/excludes paths for stack manifest discovery.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Executing an Atmos Terraform output command with !exec\nDESCRIPTION: Executes an `atmos terraform output` command to retrieve a Terraform output named `test_label_id` from a specified component and stack.  `--skip-init` flag is used. The output is expected to be JSON-formatted.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvar3: !exec atmos terraform output <component> -s <stack> --skip-init -- -json test_label_id\n```\n\n----------------------------------------\n\nTITLE: Deploy Static Site with Atmos\nDESCRIPTION: This command deploys the `static-site` component using Atmos. It plans and applies the Terraform configuration defined for the specified stack (`uw2-dev`) in the `stacks/uw2-dev.yaml` file. The command triggers the Terraform workflow to create or update infrastructure resources in AWS based on the component's definition and the stack configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform deploy static-site --stack uw2-dev\n```\n\n----------------------------------------\n\nTITLE: Describing another Atmos component in staging\nDESCRIPTION: This command describes the configuration for another Atmos component (`echo-server`) in a staging environment (`tenant1-ue2-staging`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component echo-server -s tenant1-ue2-staging\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Root Modules with Atmos\nDESCRIPTION: Generates a Terraform plan for a specified Atmos component and stack. It allows specifying an output file for the plan.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan $component --stack $stack\natmos terraform plan $component --stack $stack -out $planfile\n```\n\n----------------------------------------\n\nTITLE: Importing Networking Defaults in Layer\nDESCRIPTION: This YAML snippet illustrates importing the `vpc` component defaults into the `networking.yaml` layer manifest. It enables the networking layer to use the configurations specified in the VPC's default file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/vpc/defaults\n  # Import other Networking components\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Usage in Atmos Component (HCL)\nDESCRIPTION: This HCL code shows how a Terraform module defined in a local directory is used within an Atmos component. It illustrates how Atmos tracks dependencies on local Terraform modules to detect changes. This setup is critical for understanding how Atmos identifies 'component.module' as an 'affected' component due to changes in the local module.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"label\" {\n  source  = \"cloudposse/label/null\"\n  version = \"0.25.0\"\n  context = module.this.context\n}\n\noutput \"label\" {\n  value       = module.label\n  description = \"Label outputs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant Configuration: plat.yaml\nDESCRIPTION: This YAML snippet defines tenant-specific configurations for the `vpc` component in the `plat` tenant. It overrides the default `nat_eip_aws_shield_protection_enabled` variable, enabling NAT EIP shield protection.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `nat_eip_aws_shield_protection_enabled` from the defaults\n        # In `plat` tenant, enable NAT EIP shield protection\n        nat_eip_aws_shield_protection_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configure S3 Backend in _defaults.yaml (Organization)\nDESCRIPTION: This snippet configures the Terraform S3 backend at the organization level in the `_defaults.yaml` manifest.  It sets the `backend_type` to `s3` and defines the S3 bucket, DynamoDB table, encryption settings, key, region, and IAM role ARN.  This configuration applies to all OUs, accounts, and regions within the organization, unless overridden.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      bucket: \"your-s3-bucket-name\"\n      dynamodb_table: \"your-dynamodb-table-name\"\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n      role_arn: \"arn:aws:iam::<your account ID>:role/<IAM Role with permissions to access the Terraform backend>\"\n```\n\n----------------------------------------\n\nTITLE: Atmos: Defining Global and Terraform Overrides (yaml)\nDESCRIPTION: This snippet demonstrates how to define global and Terraform overrides in a separate stack manifest for an Atmos project. Global overrides affect all components managed by a specific team, while Terraform overrides specifically target Terraform components. Terraform overrides take precedence over global overrides.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Global overrides\n# Override the variables, env, command and settings ONLY in the components managed by the `testing` Team.\noverrides:\n  env:\n    # This ENV variable will be added or overridden in all the components managed by the `testing` Team\n    TEST_ENV_VAR1: \"test-env-var1-overridden\"\n  settings: {}\n  vars: {}\n\n# Terraform overrides\n# Override the variables, env, command and settings ONLY in the Terraform components managed by the `testing` Team.\n# The Terraform `overrides` are deep-merged with the global `overrides`\n# and takes higher priority (it will override the same keys from the global `overrides`).\nterraform:\n  overrides:\n    settings:\n      spacelift:\n        # All the components managed by the `testing` Team will have the Spacelift stacks auto-applied\n        # if the planning phase was successful and there are no plan policy warnings\n        # https://docs.spacelift.io/concepts/stack/stack-settings#autodeploy\n        autodeploy: true\n    vars:\n      # This variable will be added or overridden in all the Terraform components managed by the `testing` Team\n      test_1: 1\n    # The `testing` Team uses `tofu` instead of `terraform`\n    # https://opentofu.org\n    # The commands `atmos terraform <sub-command> ...` will execute the `tofu` binary\n    command: tofu\n```\n\n----------------------------------------\n\nTITLE: Define Terraform Component Level Lifecycle Hook in Atmos\nDESCRIPTION: This YAML snippet shows how to define a Terraform lifecycle hook at the component level in Atmos.  It configures the 'store-outputs' hook to store the 'id' output of the 'vpc' component as 'vpc_id'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/hooks.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# stacks/orgs/acme/plat/prod/us-east-2.yaml (component)\ncomponents:\n  terraform:\n    vpc:\n      hooks:\n        store-outputs:\n          outputs:\n            vpc_id: .id\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Skipping Functions\nDESCRIPTION: Example usage of the `atmos terraform shell` command with the `--skip` flag.  This skips processing the `eval` and `include` YAML functions in the Atmos stack manifests when executing terraform commands. Multiple flags are used to specify multiple skipped functions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack> --skip=eval --skip=include\n```\n\n----------------------------------------\n\nTITLE: Override an Existing Terraform Command in Atmos (YAML)\nDESCRIPTION: This YAML snippet overrides the existing `terraform apply` command in Atmos. It demonstrates how to customize the behavior of existing Atmos commands by defining a new command with the same name. This particular override adds `-auto-approve` to the terraform apply command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: terraform\n    description: Execute 'terraform' commands\n    # subcommands\n    commands:\n      - name: apply\n        description: This command executes 'terraform apply -auto-approve' on terraform components\n        arguments:\n          - name: component\n            description: Name of the component\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n        steps:\n          - atmos terraform apply {{ .Arguments.component }} -s {{ .Flags.stack }} -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Helmfile Apply (Short Syntax) with Atmos CLI\nDESCRIPTION: This command applies the changes defined in the `nginx-ingress` Helmfile component to the `ue2-dev` stack using the short syntax for command line arguments. It uses `atmos helmfile apply` command with short argument `-s` for stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/helmfile.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile apply nginx-ingress -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Stage Mixin in YAML\nDESCRIPTION: This YAML snippet shows how to import the `prod` stage mixin into a stack configuration. By including `mixins/stage/prod` in the `imports` section, the stack will inherit the settings defined in the mixin, ensuring it is properly configured for the production stage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/mixins.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n- mixins/stage/prod\n\nterraform:\n  components:\n    rds-cluster:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Configuration for Terraform Plan Metadata in Atmos\nDESCRIPTION: This YAML snippet configures a DynamoDB table for storing metadata about Terraform plans.  It defines a Terraform component named 'gitops/dynamodb' within an Atmos stack configuration. The table is configured with a hash key 'id', a global secondary index 'pr-createdAt-index', and attributes for 'createdAt' and 'pr'. The `dynamodb` component from the Cloud Posse Terraform AWS components library is required.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/github-actions.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimport:\n  - catalog/dynamodb/defaults\n\ncomponents:\n  terraform:\n    # DynamoDB table used to store metadata for Terraform Plans\n    gitops/dynamodb:\n      metadata:\n        component: dynamodb\n        inherits:\n          - dynamodb/defaults\n      vars:\n        name: gitops-plan-storage\n        # This key (case-sensitive) is required for the cloudposse/github-action-terraform-plan-storage action\n        hash_key: id\n        range_key: \"\"\n        # Only these 2 attributes are required for creating the GSI,\n        # but there will be several other attributes on the table itself\n        dynamodb_attributes:\n          - name: 'createdAt'\n            type: 'S'\n          - name: 'pr'\n            type: 'N'\n        # This GSI is used to Query the latest plan file for a given PR.\n        global_secondary_index_map:\n          - name: pr-createdAt-index\n            hash_key: pr\n            range_key: createdAt\n            projection_type: ALL\n            non_key_attributes: []\n            read_capacity: null\n            write_capacity: null\n        # Auto delete old entries\n        ttl_enabled: true\n        ttl_attribute: ttl\n```\n\n----------------------------------------\n\nTITLE: Run OpenTofu Commands via Atmos CLI\nDESCRIPTION: These shell commands demonstrate how to run `tofu plan` and `tofu apply` using the Atmos CLI, assuming `tofu` is an alias for the `terraform` command. The example shows how to provision a Terraform component named 'eks' within the 'ue2-dev' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/opentofu.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos tofu plan eks --stack=ue2-dev\natmos tofu apply eks --stack=ue2-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos tofu plan eks -s ue2-dev\natmos tofu apply eks -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for specific components\nDESCRIPTION: This example uses the `--components` flag to filter and generate a configuration only for specific components (comma separated).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1 --components <component1, component2>\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Development Stack - YAML\nDESCRIPTION: This snippet imports the necessary layers into the `stacks/orgs/acme/plat/dev/us-east-2.yaml` stack manifest.  It includes layers for load balancers, data, DNS, logs, notifications, firewalls, networking, and EKS.  These layers define the components provisioned in the `plat-ue2-dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: Configure VPC Flow Logs in VPC Terraform Module (HCL)\nDESCRIPTION: This HCL code configures the `aws_flow_log` resource to use the `vpc_flow_logs_bucket_arn` output from the remote state of the `vpc-flow-logs-bucket-1` Atmos component. It uses the remote state output to specify the destination bucket for the flow logs.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  enabled               = module.this.enabled\n  vpc_flow_logs_enabled = local.enabled && var.vpc_flow_logs_enabled\n}\n\nresource \"aws_flow_log\" \"default\" {\n  count = local.vpc_flow_logs_enabled ? 1 : 0\n\n  # Use the remote state output `vpc_flow_logs_bucket_arn` of the `vpc_flow_logs_bucket` component\n  log_destination = module.vpc_flow_logs_bucket[0].outputs.vpc_flow_logs_bucket_arn\n\n  log_destination_type = var.vpc_flow_logs_log_destination_type\n  traffic_type         = var.vpc_flow_logs_traffic_type\n  vpc_id               = module.vpc.vpc_id\n\n  tags = module.this.tags\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Example 3\nDESCRIPTION: Example usage of the `atmos terraform shell` command for a test component with overrides in a specific stack. This command will open a shell configured for the `test/test-component-override-3` component in the `tenant2-ue2-prod` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell test/test-component-override-3 -s tenant2-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Set EKS Cluster Command in Atmos (YAML)\nDESCRIPTION: This YAML snippet defines a command `set-eks-cluster` to download `kubeconfig` and set the EKS cluster. It uses arguments and flags to obtain the component, stack and IAM role.  It uses `component_config` to get the component's configuration.  Finally it executes steps to update the `kubeconfig` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: set-eks-cluster\n    description: |\n      Download 'kubeconfig' and set EKS cluster.\n\n      Example usage:\n        atmos set-eks-cluster eks/cluster -s plat-ue1-dev -r admin\n        atmos set-eks-cluster eks/cluster -s plat-uw2-prod --role reader\n    verbose: false  # Set to `true` to see verbose outputs\n    arguments:\n      - name: component\n        description: Name of the component\n    flags:\n      - name: stack\n        shorthand: s\n        description: Name of the stack\n        required: true\n      - name: role\n        shorthand: r\n        description: IAM role to use\n        required: true\n    # If a custom command defines 'component_config' section with 'component' and 'stack',\n    # Atmos generates the config for the component in the stack\n    # and makes it available in {{ .ComponentConfig.xxx.yyy.zzz }} Go template variables,\n    # exposing all the component sections (which are also shown by 'atmos describe component' command)\n    component_config:\n      component: \"{{ .Arguments.component }}\"\n      stack: \"{{ .Flags.stack }}\"\n    env:\n      - key: KUBECONFIG\n        value: /dev/shm/kubecfg.{{ .Flags.stack }}-{{ .Flags.role }}\n    steps:\n      - >\n        aws\n        --profile {{ .ComponentConfig.vars.namespace }}-{{ .ComponentConfig.vars.tenant }}-gbl-{{ .ComponentConfig.vars.stage }}-{{ .Flags.role }}\n        --region {{ .ComponentConfig.vars.region }}\n        eks update-kubeconfig\n        --name={{ .ComponentConfig.vars.namespace }}-{{ .Flags.stack }}-eks-cluster\n        --kubeconfig=\"${KUBECONFIG}\"\n        > /dev/null\n      - chmod 600 ${KUBECONFIG}\n      - echo ${KUBECONFIG}\n```\n\n----------------------------------------\n\nTITLE: Configure Staging us-west-2 Stack - YAML\nDESCRIPTION: This YAML snippet configures the top-level Atmos stack for the 'staging' account in the 'us-west-2' region. It imports the 'staging' account defaults, the 'us-west-2' region mixin, and overrides the 'vpc' component configuration for 'staging'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/staging/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `staging` by importing the `catalog/vpc/staging` manifest\n  - catalog/vpc/staging\n```\n\n----------------------------------------\n\nTITLE: Example Helmfile Configuration in atmos.yaml\nDESCRIPTION: This configuration example in `atmos.yaml` sets up Helmfile to work with AWS EKS. It defines the base path for Helmfile components, enables EKS integration, specifies the kubeconfig path, and sets patterns for AWS CLI profile and cluster name. The patterns use variables that will be substituted during runtime.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/helmfile.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  helmfile:\n    base_path: components/helmfile\n    use_eks: true\n    kubeconfig_path: /dev/shm\n    helm_aws_profile_pattern: '{namespace}-{tenant}-gbl-{stage}-helm'\n    cluster_name_pattern: '{namespace}-{tenant}-{environment}-{stage}-eks-cluster'\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration: dev.yaml\nDESCRIPTION: This YAML snippet defines environment-specific configurations for the `vpc` component in the `dev` environment. It overrides the default `ipv4_primary_cidr_block`, `max_subnet_count`, and `vpc_flow_logs_enabled` variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `ipv4_primary_cidr_block`, `max_subnet_count` and `vpc_flow_logs_enabled` from the defaults\n        ipv4_primary_cidr_block: 10.7.0.0/18\n        # In `dev`, use only 2 subnets\n        max_subnet_count: 2\n        # In `dev`, disable the VPC flow logs\n        vpc_flow_logs_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Read Component Config with atmos.Component Template Function\nDESCRIPTION: This snippet illustrates how to read all configurations, including outputs, of an Atmos component using the `atmos.Component` template function. It reads the `vpc_id` output of the `vpc` component in the current stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: '{{ (atmos.Component \"vpc\" .stack).outputs.vpc_id }}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files for a specific component and stack\nDESCRIPTION: This command deletes Terraform-related files for the 'top-level-component1' component in the 'tenant1-ue2-dev' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean top-level-component1 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Current Stack Name in atmos.Component (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to reference the current stack name using `.stack` (or `.atmos_stack`) when using the `atmos.Component` function.  This allows referencing a component from the same stack. For example, fetching a `vpc_id` from the `vpc` component in the same stack as the `tgw` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{ (atmos.Component \"<component>\" .stack).<section>.<attribute> }}\n{{ (atmos.Component \"<component>\" .atmos_stack).<section>.<attribute> }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ (atmos.Component \"vpc\" .stack).outputs.vpc_id }}'\n```\n\n----------------------------------------\n\nTITLE: Executing a Simple Atmos Custom Command (Shell)\nDESCRIPTION: This shell command executes the custom `hello` command defined in the Atmos configuration. It demonstrates how to invoke a custom command through the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos hello\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Configuration for Terraform Plans in Atmos\nDESCRIPTION: This YAML snippet configures an S3 bucket to store Terraform plan files. It defines a Terraform component named 'gitops/s3-bucket' within an Atmos stack configuration. The configuration sets the bucket name to 'gitops-plan-storage' and disables encrypted uploads. It depends on the `s3-bucket` component from the Cloud Posse Terraform AWS components library.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/github-actions.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nimport:\n  - catalog/s3-bucket/defaults\n\ncomponents:\n  terraform:\n    # S3 Bucket for storing Terraform Plans\n    gitops/s3-bucket:\n      metadata:\n        component: s3-bucket\n        inherits:\n          - s3-bucket/defaults\n      vars:\n        name: gitops-plan-storage\n        allow_encrypted_uploads_only: false\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Skip Function Processing\nDESCRIPTION: Demonstrates how to skip processing specific Atmos YAML functions using the `--skip` flag with `atmos terraform plan`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan <component> -s <stack> --skip=eval --skip=include\natmos terraform apply <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Validating Atmos Stacks with Remote Schema\nDESCRIPTION: This command validates Atmos stacks using a JSON Schema file located at a remote URL. This allows for using a centrally managed schema to validate stack manifests across different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks --schemas-atmos-manifest https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Validation Workflows in validation.yaml\nDESCRIPTION: This YAML snippet defines Atmos workflows in the `validation.yaml` file for validating VPCs and VPC Flow Logs. It contains workflows to validate component configurations across various stacks, ensuring compliance and proper setup.  Each validation workflow includes steps to execute the `validate component` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-workflows.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Validation\ndescription: Atmos workflows for VPCs and VPC Flow Logs validation\n\nworkflows:\n\n  validate-all-vpc-flow-logs:\n    description: \"Validate all VPC Flow Logs bucket components in all stacks\"\n    steps:\n      - command: validate component vpc-flow-logs-bucket -s plat-ue2-dev\n      - command: validate component vpc-flow-logs-bucket -s plat-uw2-dev\n      - command: validate component vpc-flow-logs-bucket -s plat-ue2-staging\n      - command: validate component vpc-flow-logs-bucket -s plat-uw2-staging\n      - command: validate component vpc-flow-logs-bucket -s plat-ue2-prod\n      - command: validate component vpc-flow-logs-bucket -s plat-uw2-prod\n\n  validate-all-vpc:\n    description: \"Validate all VPC components in all stacks\"\n    steps:\n      - command: validate component vpc -s plat-ue2-dev\n      - command: validate component vpc -s plat-uw2-dev\n      - command: validate component vpc -s plat-ue2-staging\n      - command: validate component vpc -s plat-uw2-staging\n      - command: validate component vpc -s plat-ue2-prod\n      - command: validate component vpc -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Define Terraform Lifecycle Hook Schema in Atmos\nDESCRIPTION: This YAML snippet defines the schema for a Terraform lifecycle hook in Atmos.  It configures a 'store-outputs' hook to run after a Terraform apply event, using the 'store' command to write the 'vpc_id' output to a store named 'prod/ssm'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/hooks.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  store-outputs:\n    events:\n      - after-terraform-apply\n    command: store\n    name: prod/ssm\n    outputs:\n      vpc_id: .id\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Output\nDESCRIPTION: This is the expected output after successfully deploying the static site component with Terraform. It shows the number of resources added, changed, or destroyed. It also includes key outputs such as the domain name for the CloudFront distribution and the S3 bucket name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\nApply complete! Resources: 7 added, 0 changed, 0 destroyed.\n\nOutputs:\n\ndomain_name = \"CLOUDFRONT_ID.cloudfront.net\"\ns3_bucket_name = \"acme-uw2-dev-static-site-RANDOM_PET-origin\"\n```\n\n----------------------------------------\n\nTITLE: Configure Account Defaults in YAML (org1/plat/prod)\nDESCRIPTION: This YAML configuration defines default settings for the `org1` organization, `plat` tenant, and `prod` account. It imports the tenant defaults and the `prod` stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/_defaults\n  - mixins/stage/prod\n```\n\n----------------------------------------\n\nTITLE: Stack Overrides Configuration\nDESCRIPTION: Illustrates how to override default settings within a stack configuration for Terraform components, including environment variables, settings, variables, and the command to use (e.g., \"opentofu\").\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nterraform:\n  overrides:\n    env: {}\n    settings: {}\n    vars: {}\n    command: \"opentofu\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Configuration - Weather Component\nDESCRIPTION: This YAML snippet configures the 'weather' Terraform component within an Atmos stack.  It defines the values for variables such as stage, location, display options, output format, language, and units, which are used by the Terraform module to fetch and display weather data. The component is named 'weather' and is located within the 'terraform' section of the 'components' configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/demo-library/weather/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    weather:\n      vars:\n        stage: dev\n        location: New York\n        options: 0T\n        format: v2\n        lang: en\n        units: m\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Load Balancers\nDESCRIPTION: Defines a partial stack manifest for load balancers in Atmos. It imports default settings, mixins, and component catalogs to configure load balancer components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/alb/defaults\n  # Import other Load Balancer components\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for dev/us-east-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-east-2`, and overrides the VPC configuration by importing the `dev` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `dev` by importing the `catalog/vpc/dev` manifest\n  - catalog/vpc/dev\n```\n\n----------------------------------------\n\nTITLE: Vendoring Source from GitHub\nDESCRIPTION: This example demonstrates how to specify a source for vendoring from a GitHub repository, including a specific version using the `ref` query parameter. The `{{.Version}}` template parameter ensures the correct version of the artifact is downloaded.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsource: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Evaluations in Atmos\nDESCRIPTION: This YAML snippet demonstrates how to configure the number of template evaluation passes within the `atmos.yaml` configuration file. The `templates.settings.evaluations` parameter specifies the number of times Go templates should be processed. If the parameter is not defined, it defaults to 1.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  settings:\n    # Enable `Go` templates in Atmos stack manifests\n    enabled: true\n    # Number of evaluations/passes to process `Go` templates\n    # If not defined, `evaluations` is automatically set to `1`\n    evaluations: 2\n```\n\n----------------------------------------\n\nTITLE: Define Named Steps in an Atmos Workflow\nDESCRIPTION: This YAML snippet demonstrates how to define named steps within an Atmos workflow.  Each step is assigned a `name` attribute, which can be used with the `--from-step` command-line flag to start the workflow execution from that specific step. The `type: shell` attribute specifies that the commands are shell scripts.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  test-1:\n    description: \"Test workflow\"\n    steps:\n      - command: echo Command 1\n        name: step1\n        type: shell\n      - command: echo Command 2\n        name: step2\n        type: shell\n      - command: echo Command 3\n        name: step3\n        type: shell\n      - command: echo Command 4\n        type: shell\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Example 3\nDESCRIPTION: This example generates a Terraform backend for the `test/test-component` component in the `tenant1-ue2-dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend test/test-component -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command with Atmos\nDESCRIPTION: This command shows how to apply the `eks/cluster` Terraform component using Atmos in the `plat-ue2-prod` stack. It triggers Atmos to import the component configuration and provision the resources defined in the Terraform component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-component-configuration.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply eks/cluster -s plat-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Kubernetes Version Mixin (k8s-1-27)\nDESCRIPTION: This snippet defines a mixin for a specific Kubernetes version (1.27) for the `eks/cluster` component in Atmos. It sets the `cluster_kubernetes_version` variable and configures add-ons such as vpc-cni, kube-proxy, coredns, and aws-ebs-csi-driver. The `resolve_conflicts_on_create` and `resolve_conflicts_on_update` attributes are set to OVERWRITE to handle potential conflicts during add-on installation and updates.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-component-configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    eks/cluster:\n      vars:\n        cluster_kubernetes_version: \"1.27\"\n\n        # https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html\n        # https://docs.aws.amazon.com/eks/latest/userguide/managing-add-ons.html#creating-an-add-on\n        addons:\n          # https://docs.aws.amazon.com/eks/latest/userguide/cni-iam-role.html\n          # https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html\n          # https://docs.aws.amazon.com/eks/latest/userguide/cni-iam-role.html#cni-iam-role-create-role\n          # https://aws.github.io/aws-eks-best-practices/networking/vpc-cni/#deploy-vpc-cni-managed-add-on\n          vpc-cni:\n            addon_version: \"v1.12.6-eksbuild.2\" # set `addon_version` to `null` to use the latest version\n            # Set default resolve_conflicts to OVERWRITE because it is required on initial installation of\n            # add-ons that have self-managed versions installed by default (e.g. vpc-cni, coredns), and\n            # because any custom configuration that you would want to preserve should be managed by Terraform.\n            resolve_conflicts_on_create: \"OVERWRITE\"\n            resolve_conflicts_on_update: \"OVERWRITE\"\n          # https://docs.aws.amazon.com/eks/latest/userguide/managing-kube-proxy.html\n          kube-proxy:\n            addon_version: \"v1.27.1-eksbuild.1\" # set `addon_version` to `null` to use the latest version\n            resolve_conflicts_on_create: \"OVERWRITE\"\n            resolve_conflicts_on_update: \"OVERWRITE\"\n          # https://docs.aws.amazon.com/eks/latest/userguide/managing-coredns.html\n          coredns:\n            addon_version: \"v1.10.1-eksbuild.1\" # set `addon_version` to `null` to use the latest version\n            resolve_conflicts_on_create: \"OVERWRITE\"\n            resolve_conflicts_on_update: \"OVERWRITE\"\n          # https://docs.aws.amazon.com/eks/latest/userguide/csi-iam-role.html\n          # https://aws.amazon.com/blogs/containers/amazon-ebs-csi-driver-is-now-generally-available-in-amazon-eks-add-ons\n          # https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html#csi-iam-role\n          # https://github.com/kubernetes-sigs/aws-ebs-csi-driver\n          aws-ebs-csi-driver:\n            addon_version: \"v1.23.0-eksbuild.1\" # set `addon_version` to `null` to use the latest version\n            resolve_conflicts_on_create: \"OVERWRITE\"\n            resolve_conflicts_on_update: \"OVERWRITE\"\n            # This disables the EBS driver snapshotter sidecar and reduces the amount of logging\n            # https://github.com/aws/containers-roadmap/issues/1919\n            configuration_values: '{\"sidecars\":{\"snapshotter\":{\"forceEnable\":false}}}'\n```\n\n----------------------------------------\n\nTITLE: Include Remote YAML File (GCS) in Atmos\nDESCRIPTION: Demonstrates including a remote YAML file from Google Cloud Storage using the `!include` function. Requires valid Google Cloud credentials. The contents of `vars.yaml` will be injected into the `vars` section of the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include gcs::gs://my-bucket/path/to/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Locking a Terraform Component (YAML)\nDESCRIPTION: Shows how to lock a Terraform component to prevent modifications using the `metadata.locked` flag in the Atmos stack configuration. Setting `metadata.locked` to `true` prevents `terraform apply` operations, while still allowing `terraform plan`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Lock a production database component to prevent accidental changes\ncomponents:\n  terraform:\n    rds:\n      metadata:\n        locked: true\n      vars:\n        name: production-database\n```\n\n----------------------------------------\n\nTITLE: Configure Tenant Defaults in YAML (org2/plat)\nDESCRIPTION: This YAML configuration defines default settings for the `org2` organization and `plat` tenant. It imports the organization defaults and the `plat` tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org2/_defaults\n  - mixins/tenant/plat\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for vpc-flow-logs-bucket-1 Component in ue2-dev Stack\nDESCRIPTION: Configures the `vpc-flow-logs-bucket-1` component in the `ue2-dev` stack by importing the base component configuration from `catalog/vpc-flow-logs-bucket.yaml`. It overrides the `traffic_type` variable and defines a component-specific `name` variable. This configuration is added to the `stacks/ue2-dev.yaml` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# Import the base Atmos component configuration from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n# File extensions are optional (if not specified, `.yaml` is used by default).\nimport:\n  - catalog/vpc-flow-logs-bucket\n\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket-1:\n      metadata:\n        # Point to the Terraform component in `components/terraform` folder\n        component: infra/vpc-flow-logs-bucket\n        inherits:\n          # Inherit all settings and variables from the\n          # `vpc-flow-logs-bucket/defaults` base Atmos component\n          - vpc-flow-logs-bucket/defaults\n      vars:\n        # Define variables that are specific for this component\n        # and are not set in the base component\n        name: vpc-flow-logs-bucket-1\n        # Override the default variables from the base component\n        traffic_type: \"REJECT\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gomplate Datasource Headers in YAML\nDESCRIPTION: This code snippet demonstrates how to configure HTTP headers for a Gomplate datasource in YAML. It defines an 'ip' datasource with a URL and specifies the 'accept' header with the value 'application/json'. This ensures the datasource sends the correct header when making HTTP requests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nheaders:\n  accept:\n    - \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Environment Manifest Assembly: org1-plat-ue2-prod.yaml\nDESCRIPTION: This YAML snippet assembles the environment manifest `org1-plat-ue2-prod.yaml` by importing the corresponding mixins in a specific order. The order of imports is important as later imports override configurations from earlier imports.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The imports are processed in the order they are defined.\n  # The next imported manifest will override the configurations from the previously imported manifests\n  - catalog/vpc/mixins/defaults\n  - catalog/vpc/mixins/org1\n  - catalog/vpc/mixins/plat\n  - catalog/vpc/mixins/ue2\n  - catalog/vpc/mixins/prod\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for vpc-flow-logs-bucket Component\nDESCRIPTION: Defines the default configuration for the `vpc-flow-logs-bucket` component in the `stacks/catalog/vpc-flow-logs-bucket.yaml` file.  It sets metadata to `abstract` to prevent direct deployment and defines default variables for the component.  Variables include `force_destroy`, `lifecycle_rule_enabled`, and `traffic_type`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket/defaults:\n      metadata:\n        # `metadata.type: abstract` makes the component `abstract`,\n        # explicitly prohibiting the component from being deployed.\n        # `atmos terraform apply` will fail with an error.\n        # If `metadata.type` attribute is not specified, it defaults to `real`.\n        # `real` components can be provisioned by `atmos` and CI/CD like Spacelift and Atlantis.\n        type: abstract\n      # Default variables, which will be inherited and can be overridden in the derived components\n      vars:\n        force_destroy: false\n        lifecycle_rule_enabled: false\n        traffic_type: \"ALL\"\n```\n\n----------------------------------------\n\nTITLE: Override Atlantis templates in stack config\nDESCRIPTION: This YAML snippet showcases how to override Atlantis templates directly within a specific stack configuration file (`tenant1/dev/us-east-2.yaml`).  The `config_template` and `project_template` attributes allow for specifying the full template definition, overriding any templates referenced by name or defined in the `atmos.yaml` file. This provides the highest level of control over Atlantis configuration for specific stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  atlantis:\n\n    # For this `tenant1-ue2-dev` stack, override the org-wide config template\n    # specified in `stacks/orgs/cp/_defaults.yaml`\n    # in the `settings.atlantis.config_template_name` section\n    config_template:\n      version: 3\n      automerge: false\n      delete_source_branch_on_merge: false\n      parallel_plan: true\n      parallel_apply: false\n      allowed_regexp_prefixes:\n        - dev/\n\n    # For this `tenant1-ue2-dev` stack, override the org-wide project template\n    # specified in `stacks/orgs/cp/_defaults.yaml`\n    # in the `settings.atlantis.project_template_name` section\n    project_template:\n      # generate a project entry for each component in every stack\n      name: \"{tenant}-{environment}-{stage}-{component}\"\n      workspace: \"{workspace}\"\n      workflow: \"workflow-1\"\n      dir: \"{component-path}\"\n      terraform_version: v1.8\n      delete_source_branch_on_merge: false\n      autoplan:\n        enabled: true\n        when_modified:\n          - \"**/*.tf\"\n          - \"varfiles/$PROJECT_NAME.tfvars.json\"\n      apply_requirements:\n        - \"approved\"\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles with file template\nDESCRIPTION: Generates Terraform varfiles using a custom file template to specify the output path and naming convention. The `--file-template` flag defines the path and filename pattern, using context tokens like `{component-path}`, `{environment}`, and `{stage}`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --file-template {component-path}/{environment}-{stage}.tfvars.json\n```\n\n----------------------------------------\n\nTITLE: Defining Stage Mixin in YAML\nDESCRIPTION: This YAML snippet defines a mixin for the `prod` stage. It sets the `stage` variable and defines a `CostCenter` tag. This mixin can be imported into production stacks to ensure they have the correct stage setting and required tags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/mixins.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: prod\n  tags:\n    CostCenter: 12345\n```\n\n----------------------------------------\n\nTITLE: YAML Enabling Gomplate\nDESCRIPTION: Demonstrates how to enable `Go` templates and Gomplate data sources in the Atmos CLI configuration file (`atmos.yaml`). This is necessary to use data sources in Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  settings:\n    # Enable `Go` templates in Atmos stack manifests\n    enabled: true\n    gomplate:\n      # Enable Gomplate functions and data sources in `Go` templates in Atmos stack manifests\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: List all variables for a component in atmos\nDESCRIPTION: This command lists all variables for a specified component across all stacks where the component is used. It provides a tabular view showing the variable values for each stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list vars vpc\n```\n\n----------------------------------------\n\nTITLE: Configure Prod Account Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'prod' account. It imports the 'plat' OU defaults and the 'prod' stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/_defaults\n  - mixins/stage/prod\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Commands\nDESCRIPTION: These are example `atmos terraform apply` commands to provision the `vpc-flow-logs-bucket` and `vpc` components in the `dev` stack.  The `-s dev` flag specifies the target stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-configuration.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# `dev` stack\natmos terraform apply vpc-flow-logs-bucket -s dev\natmos terraform apply vpc -s dev\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends with Default Format\nDESCRIPTION: This command generates backend config files with a specified file template without specifying format option, which uses the default format. It customizes the output file path using the provided template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template backends/{tenant}-{environment}-{stage}-{component}.tf\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template /{tenant}/{stage}/{region}/{component}.tf\n```\n\n----------------------------------------\n\nTITLE: Terraform Namespace Variable Example (YAML)\nDESCRIPTION: Illustrates the optional `vars.namespace` attribute within a Terraform component's configuration in an Atmos stack.  This example demonstrates how to define the namespace for all stacks, which is typically the organization's namespace, following the `terraform-null-label` convention.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  namespace: acme\n```\n\n----------------------------------------\n\nTITLE: Configure us-west-2 Region Mixin - YAML\nDESCRIPTION: This YAML snippet configures the us-west-2 region mixin. It imports vpc configuration for the us-west-2 region and vpc-flow-logs-bucket defaults. It defines variables for region and environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the `uw2` manifest with `vpc` configuration for `us-west-2` region\n  - catalog/vpc/uw2\n  # All accounts (stages) in `us-west-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n\nvars:\n  region: us-west-2\n  environment: uw2\n\n# Other defaults for the `us-west-2` region\n```\n\n----------------------------------------\n\nTITLE: Generate Varfile without YAML Functions Processing\nDESCRIPTION: Generates a Terraform varfile while disabling YAML functions processing in Atmos stack manifests. This prevents the execution of any YAML functions during the varfile generation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: YAML Stack Manifest Example\nDESCRIPTION: Demonstrates referencing data sources in a stack manifest to populate Terraform variables with values fetched from external sources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  vars:\n    tags:\n      provisioned_by_ip: '{{ (datasource \"ip\").ip }}'\n      config1_tag: '{{ (datasource \"config-1\").tag }}'\n      config2_service_name: '{{ (datasource \"config-2\").service.name }}'\n```\n\n----------------------------------------\n\nTITLE: Mise configuration file example\nDESCRIPTION: This snippet shows an example `.mise.toml` file specifying the Atmos version.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\natmos = '<LatestRelease />'\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Commands\nDESCRIPTION: These shell commands show how to provision the components for the `dev`, `staging`, and `prod` stacks using `atmos terraform apply`. The `-s` flag specifies the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# `dev` stack\natmos terraform apply vpc -s dev\n\n# `staging` stack\natmos terraform apply vpc-flow-logs-bucket -s staging\natmos terraform apply vpc -s staging\n\n# `prod` stack\natmos terraform apply vpc-flow-logs-bucket -s prod\natmos terraform apply vpc -s prod\n```\n\n----------------------------------------\n\nTITLE: Describing an Atmos component with YAML format\nDESCRIPTION: This command describes the configuration of an Atmos component and outputs the result in YAML format. The `-s` flag specifies the stack, and `-f yaml` specifies the output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component infra/vpc -s tenant1-ue2-dev -f yaml\n```\n\n----------------------------------------\n\nTITLE: Update Kubeconfig with Profile and Cluster Name (Atmos)\nDESCRIPTION: This command updates the kubeconfig file using the provided AWS profile and EKS cluster name.  It requires the `atmos` CLI to be installed and configured with appropriate AWS credentials. The `<profile>` and `<cluster_name>` placeholders should be replaced with the actual AWS profile name and EKS cluster name, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_aws_eks_update_kubeconfig_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name>\n```\n\n----------------------------------------\n\nTITLE: Define Atlantis config and project templates in atmos.yaml\nDESCRIPTION: This YAML snippet shows how to define Atlantis config and project templates within the `integrations.atlantis` section of the `atmos.yaml` file.  These templates can be referenced by name in the stack configurations, allowing for centralized management of Atlantis configurations. The `path` attribute specifies the path to the Atlantis configuration file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nintegrations:\n  atlantis:\n    path: \"atlantis.yaml\"\n\n    # Config templates\n    config_templates:\n      config-1:\n        version: 3\n        automerge: true\n        delete_source_branch_on_merge: true\n        parallel_plan: true\n        parallel_apply: true\n        allowed_regexp_prefixes:\n          - dev/\n          - staging/\n          - prod/\n\n    # Project templates\n    project_templates:\n      project-1:\n        # generate a project entry for each component in every stack\n        name: \"{tenant}-{environment}-{stage}-{component}\"\n        workspace: \"{workspace}\"\n        dir: \"{component-path}\"\n        terraform_version: v1.8\n        delete_source_branch_on_merge: true\n        autoplan:\n          enabled: true\n          when_modified:\n            - \"**/*.tf\"\n            - \"varfiles/$PROJECT_NAME.tfvars.json\"\n        apply_requirements:\n          - \"approved\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Process Functions Flag\nDESCRIPTION: Shows how to disable YAML functions processing using the `--process-functions` flag with `atmos terraform plan` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Configure Acme Organization Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'acme' organization.  It sets the 'namespace' variable to 'acme'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  namespace: acme\n```\n\n----------------------------------------\n\nTITLE: Overriding Azure Blob Storage Key in Component (YAML)\nDESCRIPTION: This snippet demonstrates how to override the Azure Blob Storage `key` parameter for a specific component in its manifest. It's used to customize the name of the Terraform state file within the storage container. This allows component-specific state management within the shared backend.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      # Optional backend configuration for the component\n      backend:\n        azurerm:\n          key: \"my-component\"\n```\n\n----------------------------------------\n\nTITLE: Executing Helmfile Commands with Atmos\nDESCRIPTION: This code snippet demonstrates how to execute Helmfile commands using the Atmos CLI, specifying a component and stack. The `stack` flag or `-s` alias is required. The component argument is also required to generate variables for the component in the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile <command> <component> -s <stack> [options]\natmos helmfile <command> <component> --stack <stack> [options]\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Stack Manifest\nDESCRIPTION: This YAML snippet shows how to import layers (groups of components) into a top-level stack manifest. The stack manifest imports default configurations and region-specific mixins, as well as predefined layers like load balancers, data, DNS, logs, notifications, firewalls, networking, and EKS.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: EKS Update Kubeconfig with Component and Stack\nDESCRIPTION: This snippet shows how to use the `atmos aws eks update-kubeconfig` command with a component and stack. It uses the `atmos.yaml` CLI config and stack's context to derive cluster name, profile, and kubeconfig path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Overriding vpc Variables for ue2 Environment (YAML)\nDESCRIPTION: This snippet overrides the default `vpc` component settings for the `ue2` (us-east-2) environment in the `stacks/catalog/vpc/ue2.yaml` file. It imports the default settings from `catalog/vpc/defaults` and then specifies the availability zones for this environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-east-2a\n          - us-east-2b\n          - us-east-2c\n```\n\n----------------------------------------\n\nTITLE: Configure us-east-2 Region Mixin - YAML\nDESCRIPTION: This YAML snippet configures the us-east-2 region mixin. It imports vpc configuration for the us-east-2 region and vpc-flow-logs-bucket defaults.  It defines variables for region and environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the `ue2` manifest with `vpc` configuration for `us-east-2` region\n  - catalog/vpc/ue2\n  # All accounts (stages) in `us-east-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n\nvars:\n  region: us-east-2\n  environment: ue2\n\n# Other defaults for the `us-east-2` region\n```\n\n----------------------------------------\n\nTITLE: List specific variables using query in atmos\nDESCRIPTION: This command lists specific variables for a component using a YQ expression to filter the results. It allows targeting nested variables within the component's configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# List specific variable\natmos list vars vpc --query .vars.tags\n\n# List a nested variable\natmos list vars vpc --query .vars.settings.vpc\n```\n\n----------------------------------------\n\nTITLE: Reference Atlantis templates in stack config defaults\nDESCRIPTION: This YAML snippet demonstrates referencing pre-defined Atlantis config and project templates within the `settings.atlantis` section of a stack configuration file (`_defaults.yaml`).  The `config_template_name` and `project_template_name` attributes specify which templates to use, as defined in the `atmos.yaml` file. This enables inheriting and overriding settings at different levels of the stack configuration hierarchy.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  atlantis:\n    # Select a config template defined in `atmos.yaml` in\n    # the `integrations.atlantis.config_templates` section\n    config_template_name: \"config-1\"\n\n    # Select a project template defined in `atmos.yaml` in\n    # the `integrations.atlantis.project_templates` section\n    project_template_name: \"project-1\"\n```\n\n----------------------------------------\n\nTITLE: Read Data with !store YAML Function\nDESCRIPTION: This snippet demonstrates how to use the `!store` YAML function to read the `vpc_id` output of the `vpc` component in the current stack from the SSM Parameter Store configured in `atmos.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    cluster:\n      vars:\n        vpc_id: !store ssm/prod vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Using !store function with store, component, key, and YQ query\nDESCRIPTION: Demonstrates how to retrieve a specific value from a complex data structure using the `!store` function in combination with a YQ query.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> <component> <key> | query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: Component Vendor Configuration YAML\nDESCRIPTION: This YAML snippet shows the schema for a `component.yaml` file used for vendoring components.  It specifies the source URI, version, included paths, and excluded paths.  Golang templates are supported in the URI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/components-manifest.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: ComponentVendorConfig\nmetadata:\n  name: vpc-flow-logs-bucket-vendor-config\n  description: Source and mixins config for vendoring of 'vpc-flow-logs-bucket' component\nspec:\n  source:\n    # Source 'uri' supports the following protocols: OCI (https://opencontainers.org), Git, Mercurial, HTTP, HTTPS, Amazon S3, Google GCP,\n    # and all URL and archive formats as described in https://github.com/hashicorp/go-getter\n    # In 'uri', Golang templates are supported  https://pkg.go.dev/text/template\n    # If 'version' is provided, '{{.Version}}' will be replaced with the 'version' value before pulling the files from 'uri'\n    # To vendor a module from a Git repo, use the following format: 'github.com/cloudposse/terraform-aws-ec2-instance.git///?ref={{.Version}}\n    uri: github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\n    version: 1.398.0\n\n    # Only include the files that match the 'included_paths' patterns\n    # If 'included_paths' is not specified, all files will be matched except those that match the patterns from 'excluded_paths'\n    # 'included_paths' support POSIX-style Globs for file names/paths (double-star/globstar `**` is supported)\n    # https://en.wikipedia.org/wiki/Glob_(programming)\n    # https://github.com/bmatcuk/doublestar#patterns\n    included_paths:\n      - \"**/*.tf\"\n      - \"**/*.tfvars\"\n      - \"**/*.md\"\n\n    # Exclude the files that match any of the 'excluded_paths' patterns\n    # Note that we are excluding 'context.tf' since a newer version of it will be downloaded using 'mixins'\n    # 'excluded_paths' support POSIX-style Globs for file names/paths (double-star/globstar `**` is supported)\n    excluded_paths:\n      - \"**/context.tf\"\n\n  # Mixins override files from 'source' with the same 'filename' (e.g. 'context.tf' will override 'context.tf' from the 'source')\n  # All mixins are processed in the order they are declared in the list.\n  mixins:\n    # https://github.com/hashicorp/go-getter/issues/98\n    - uri: https://raw.githubusercontent.com/cloudposse/terraform-null-label/0.25.0/exports/context.tf\n      filename: context.tf\n    - uri: https://raw.githubusercontent.com/cloudposse/terraform-aws-components/{{.Version}}/modules/datadog-agent/introspection.mixin.tf\n      version: 1.398.0\n      filename: introspection.mixin.tf\n```\n\n----------------------------------------\n\nTITLE: Validating Atmos Stacks\nDESCRIPTION: This command validates all Atmos stack configurations, ensuring they adhere to defined schemas and policies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\natmos validate stacks\n```\n\n----------------------------------------\n\nTITLE: Overriding vpc Variables for dev Environment (YAML)\nDESCRIPTION: This snippet overrides the default `vpc` component settings for the `dev` environment in the `stacks/catalog/vpc/dev.yaml` file. It specifies the `ipv4_primary_cidr_block` and disables `vpc_flow_logs_enabled`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.7.0.0/18\n        vpc_flow_logs_enabled: false\n```\n\n----------------------------------------\n\nTITLE: List metadata for specific stacks in atmos\nDESCRIPTION: This command filters the metadata listing to show only the metadata for stacks matching the provided pattern. The stack pattern supports glob matching, allowing for flexible filtering.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-metadata.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# List metadata for dev stacks\natmos list metadata --stack '*-dev-*'\n\n# List metadata for production stacks\natmos list metadata --stack 'prod-*'\n```\n\n----------------------------------------\n\nTITLE: Import configuration in YAML with templates\nDESCRIPTION: This YAML snippet shows how to import configurations with Go templates. The `path` specifies the template file, `context` provides variables for template rendering, `skip_templates_processing` disables template processing, `ignore_missing_template_values` skips missing template values, and `skip_if_missing` ignores missing import files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"catalog/something.yaml.tmpl\" # Path to the imported file with the required .tmpl extension for Go templates\n      context:\n        foo: bar\n        baz: qux\n      skip_templates_processing: false\n      ignore_missing_template_values: false\n      skip_if_missing: false\n  - path: \"catalog/something.yaml.tmpl\"\n      context: {}\n      skip_templates_processing: false\n      ignore_missing_template_values: true\n      skip_if_missing: true\n```\n\n----------------------------------------\n\nTITLE: Validating Stacks with Command Line Flag\nDESCRIPTION: This example demonstrates how to validate Atmos stacks using the `--schemas-atmos-manifest` command line flag, specifying a local path to the schema file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks --schemas-atmos-manifest stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Helmfile Apply Command using Atmos\nDESCRIPTION: These examples show how to use the `atmos helmfile apply` command to apply the changes to a component in a specific stack. The `redirect-stderr` option is used to redirect standard error to a file or `/dev/stdout`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile apply echo-server -s tenant1-ue2-dev\natmos helmfile apply echo-server -s tenant1-ue2-dev --redirect-stderr /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Describe Atmos Config (JSON/YAML)\nDESCRIPTION: This command retrieves and outputs the Atmos configuration. The `-f` flag specifies the output format, which can be either `json` or `yaml`. This is useful for inspecting the current configuration and integrating it with other systems.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_config_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos describe config -f json|yaml\n```\n\n----------------------------------------\n\nTITLE: Using !store function with store, component, and key\nDESCRIPTION: Demonstrates how to retrieve a value using the `!store` function with the store name, component name, and key, assuming the current stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> <component> <key>\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files (with confirmation)\nDESCRIPTION: This command deletes all Terraform-related files for all components, prompting for confirmation before proceeding.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean\n```\n\n----------------------------------------\n\nTITLE: Filesystem Layout Example in Atmos\nDESCRIPTION: This snippet demonstrates a basic filesystem layout for Atmos stacks, including the atmos.yaml configuration file, components directory (with a weather component), and stacks directory (with catalog and deploy subdirectories).  The catalog directory contains reusable component configurations, and the deploy directory contains environment-specific stack configurations (dev.yaml, prod.yaml, staging.yaml).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n├── atmos.yaml\n├── components/\n│   └── terraform/\n│       └── weather/\n│           ├── README.md\n│           ├── main.tf\n│           ├── outputs.tf\n│           ├── variables.tf\n│           └── versions.tf\n│\n│   # Centralized stacks configuration\n└── stacks/\n    ├── catalog/\n    │   └── station.yaml\n    └── deploy/\n        ├── dev.yaml\n        ├── prod.yaml\n        └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Describe Component Output in YAML\nDESCRIPTION: This snippet shows the output of the command `atmos describe component vpc -s plat-ue2-dev` after processing Go templates. It illustrates how template tokens are resolved to generate the final configuration for the component in the specified stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  setting1: 1\n  setting2: 2\n  setting3: 3\n  setting4: 1\n  component: vpc\n  backend_type: s3\n  region: us-east-2\n  assume_role: <role-arn>\nbackend_type: s3\nmetadata:\n  component: vpc\nproviders:\n  aws:\n    region: us-east-2\n    assume_role: <role-arn>\nenv:\n  ENV1: e1\n  ENV2: 1-2\nvars:\n  var1: 1\n  var2: 2\n  var3: 3\n  tags:\n    assumed_role: <role-arn>\n    atmos_component: vpc\n    atmos_component_description: Vpc component \"common\" provisioned in the stack \"plat-ue2-dev\"\n    atmos_manifest: orgs/acme/plat/dev/us-east-2\n    atmos_stack: plat-ue2-dev\n    config1_tag: test1\n    config2_service_name: service1\n    config3_team_name: my-team\n    description: vpc component provisioned in plat-ue2-dev stack by assuming IAM role <role-arn>\n    provisioned_by_user: <user>\n    provisioned_by_ip: 167.38.132.237\n    region: us-east-2\n    terraform_workspace: plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generate Varfile Examples\nDESCRIPTION: Shows different examples of generating varfiles for various components and stacks, including one example using a `-f` to specify an override `vars.json` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile top-level-component1 -s tenant1-ue2-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile infra/vpc -s tenant1-ue2-staging\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile test/test-component -s tenant1-ue2-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile test/test-component-override-2 -s tenant2-ue2-prod\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile test/test-component-override-3 -s tenant1-ue2-dev -f vars.json\n```\n\n----------------------------------------\n\nTITLE: Importing templated Atmos component with context\nDESCRIPTION: This example demonstrates importing a templated Atmos component definition (`eks_cluster.yaml.tmpl`) into a stack configuration using the `import` section. The `context` provides values for the Go templates within the component definition, allowing for dynamic generation of components such as `eks-blue/cluster` and `eks-green/cluster`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"mixins/region/us-west-2\"\n  - path: \"orgs/cp/tenant1/test1/_defaults\"\n\n  # This import with the provided context will dynamically generate\n  # a new Atmos component `eks-blue/cluster` in the current stack\n  - path: \"catalog/terraform/eks_cluster.yaml.tmpl\"\n    context:\n      flavor: \"blue\"\n      enabled: true\n      service_1_name: \"blue-service-1\"\n      service_2_name: \"blue-service-2\"\n\n  # This import with the provided context will dynamically generate\n  # a new Atmos component `eks-green/cluster` in the current stack\n  - path: \"catalog/terraform/eks_cluster.yaml.tmpl\"\n    context:\n      flavor: \"green\"\n      enabled: false\n      service_1_name: \"green-service-1\"\n      service_2_name: \"green-service-2\"\n```\n\n----------------------------------------\n\nTITLE: Configure Staging us-east-2 Stack - YAML\nDESCRIPTION: This YAML snippet configures the top-level Atmos stack for the 'staging' account in the 'us-east-2' region. It imports the 'staging' account defaults, the 'us-east-2' region mixin, and overrides the 'vpc' component configuration for 'staging'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/staging/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `staging` by importing the `catalog/vpc/staging` manifest\n  - catalog/vpc/staging\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Settings in atmos.yaml\nDESCRIPTION: This snippet configures the template settings within the `atmos.yaml` file, enabling template processing and specifying the number of evaluation steps to perform for Go templates. It also enables Gomplate for datasource integration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  settings:\n    enabled: true\n    # Number of evaluations to process `Go` templates\n    evaluations: 2\n    gomplate:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Tags after first evaluation\nDESCRIPTION: Shows the tags after the first evaluation, where the datasource templates are not yet resolved.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndevops_team: '{{ (datasource \"s3-tags\").tags.devops_team }}'\nbilling_team: '{{ (datasource \"s3-tags\").tags.billing_team }}'\nservice: '{{ (datasource \"s3-tags\").tags.service }}'\n```\n\n----------------------------------------\n\nTITLE: Configure vpc-flow-logs-bucket Component YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure the `vpc-flow-logs-bucket` component to use a `static` remote state backend.  This allows Atmos to use an existing S3 bucket for VPC Flow Logs by specifying its ARN. The `vpc_flow_logs_bucket_arn` attribute is defined as an output for the `vpc` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket/defaults:\n      metadata:\n        type: abstract\n      # Use `static` remote state to configure the attributes for an existing\n      # S3 bucket for VPC Flow Logs\n      remote_state_backend_type: static\n      remote_state_backend:\n        static:\n          # ARN of the existing S3 bucket\n          # `vpc_flow_logs_bucket_arn` is used as an input for the `vpc` component\n          vpc_flow_logs_bucket_arn: \"arn:aws:s3:::my-vpc-flow-logs-bucket\"\n```\n\n----------------------------------------\n\nTITLE: Define Atmos Workflow with Shell Steps\nDESCRIPTION: This workflow defines a series of steps, including shell commands and `terraform plan` commands, to be executed in sequence. The stack is specified on the command line during workflow execution. The workflow includes shell commands to print messages and pause execution.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  terraform-plan-all-test-components:\n    description: |\n      Run 'terraform plan' on 'test/test-component' and all its derived components.\n      The stack must be provided on the command line:\n      `atmos workflow terraform-plan-all-test-components -f workflow1 -s <stack>`\n    steps:\n      # Inline scripts are also supported\n      # Refer to https://yaml-multiline.info for more details\n      - type: shell\n        command: |\n          echo \"Starting the workflow execution...\"\n          read -p \"Press any key to continue... \" -n1 -s\n      - command: terraform plan test/test-component\n      - command: terraform plan test/test-component-override\n      - command: terraform plan test/test-component-override-2\n      - command: terraform plan test/test-component-override-3\n      - type: shell\n        command: >-\n          echo \"All done!\"\n```\n\n----------------------------------------\n\nTITLE: Spacelift Admin Stack Selector in Atmos Stack YAML\nDESCRIPTION: This YAML configures the Spacelift admin stack selector in an Atmos stack. The `admin_stack_selector` specifies the component, tenant, environment, and stage of the Spacelift admin stack that manages the current stack. It's used with the `--include-spacelift-admin-stacks=true` flag of the `atmos describe affected` command to identify the affected Spacelift admin stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  spacelift:\n    # All Spacelift child stacks for the `tenant1` tenant are managed by the\n    # `tenant1-ue2-prod-infrastructure-tenant1` Spacelift admin stack.\n    # The `admin_stack_selector` attribute is used to find the affected Spacelift\n    # admin stack for each affected Atmos stack\n    # when executing the command\n    # `atmos describe affected --include-spacelift-admin-stacks=true`\n    admin_stack_selector:\n      component: infrastructure-tenant1\n      tenant: tenant1\n      environment: ue2\n      stage: prod\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for prod Environment\nDESCRIPTION: This YAML configuration imports the default VPC configuration and overrides the `ipv4_primary_cidr_block` and `map_public_ip_on_launch` variables for the `prod` environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.8.0.0/18\n        # In `prod`, don't map public IPs on launch\n        # Override `map_public_ip_on_launch` from the defaults\n        map_public_ip_on_launch: false\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Disable Function Processing\nDESCRIPTION: This command disables YAML functions processing in Atmos stack manifests when executing terraform commands. The `--process-functions=false` flag disables YAML function processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Running Automatic Installer for Atmos\nDESCRIPTION: This snippet shows how to run the automatic installer for Atmos by piping the install script to bash. This installer attempts to determine the best installation method automatically.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://atmos.tools/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Describe Dependents Output Schema (JSON)\nDESCRIPTION: This JSON schema describes the structure of the output returned by the `atmos describe dependents` command. It includes fields such as component name, type, path, namespace, tenant, environment, stage, stack, stack slug, Spacelift stack, and Atlantis project.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"component\": \"....\",\n  \"component_type\": \"....\",\n  \"component_path\": \"....\",\n  \"namespace\": \"....\",\n  \"tenant\": \"....\",\n  \"environment\": \"....\",\n  \"stage\": \"....\",\n  \"stack\": \"....\",\n  \"stack_slug\": \"\",\n  \"spacelift_stack\": \".....\",\n  \"atlantis_project\": \".....\"\n}\n```\n\n----------------------------------------\n\nTITLE: Override DNS Configuration\nDESCRIPTION: This YAML file configures a 'dns' layer in Atmos. It imports the default configuration for DNS components and overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/dns/defaults\n  # Import other DNS components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: dns\n        Team: DNS managers\n```\n\n----------------------------------------\n\nTITLE: Configure Organization Defaults in YAML (org1)\nDESCRIPTION: This YAML configuration defines the default settings for the `org1` organization. It sets the `namespace` variable to `org1`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  namespace: org1\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backend Config\nDESCRIPTION: This command generates a Terraform backend configuration file for a specified Atmos Terraform component within an Atmos stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform generate backend\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration Example\nDESCRIPTION: This snippet shows a minimal `atmos.yaml` configuration file. It defines the base paths for Terraform components, stacks, and schemas (jsonschema, opa, and atmos manifest).  It is used to tell atmos where to find your components and stack manifests. The `name_pattern` defines how stack names are constructed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-configuration.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{stage}\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Configure Tenant Defaults in YAML (org2/core)\nDESCRIPTION: This YAML configuration defines default settings for the `org2` organization and `core` tenant. It imports the organization defaults and the `core` tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org2/_defaults\n  - mixins/tenant/core\n```\n\n----------------------------------------\n\nTITLE: Example stack.yaml configuration using !store function\nDESCRIPTION: Example demonstrating the use of the `!store` function within a `stack.yaml` file to retrieve configuration values. It showcases different ways of referencing stores and applying YQ queries.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my_lambda_component:\n      vars:\n        vpc_config:\n          security_group_id: !store prod/ssm security-group/lambda id\n          security_group_id2: !store prod/ssm {{ .stack }} security-group/lambda2 id\n          security_group_id3: !store prod/ssm {{ .atmos_stack }} security-group/lambda3 id\n        kms_key_arn: !store prod/ssm kms config | query .arn\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration YAML\nDESCRIPTION: This YAML configuration file is used to configure the Atmos CLI. It defines the base paths for components, stacks, and workflows, as well as settings for Terraform components, stacks, logging, and custom commands. It specifies the directory structure, auto-approval settings, and stack name patterns. It also configures logging to stderr and defines included/excluded paths for stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-cli.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI config is loaded from the following locations (from lowest to highest priority):\n# system dir ('/usr/local/etc/atmos' on Linux, '%LOCALAPPDATA%/atmos' on Windows)\n# home dir (~/.atmos)\n# current directory\n# ENV vars\n# Command-line arguments\n#\n# It supports POSIX-style Globs for file names/paths (double-star '**' is supported)\n# https://en.wikipedia.org/wiki/Glob_(programming)\n\n# Base path for components, stacks and workflows configurations.\n# Can also be set using 'ATMOS_BASE_PATH' ENV var, or '--base-path' command-line argument.\n# Supports both absolute and relative paths.\n# If not provided or is an empty string, 'components.terraform.base_path', 'components.helmfile.base_path', 'stacks.base_path'\n# and 'workflows.base_path' are independent settings (supporting both absolute and relative paths).\n# If 'base_path' is provided, 'components.terraform.base_path', 'components.helmfile.base_path', 'stacks.base_path'\n# and 'workflows.base_path' are considered paths relative to 'base_path'.\nbase_path: \"\"\n\ncomponents:\n  terraform:\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_BASE_PATH' ENV var, or '--terraform-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"components/terraform\"\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPLY_AUTO_APPROVE' ENV var\n    apply_auto_approve: false\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_DEPLOY_RUN_INIT' ENV var, or '--deploy-run-init' command-line argument\n    deploy_run_init: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_RUN_RECONFIGURE' ENV var, or '--init-run-reconfigure' command-line argument\n    init_run_reconfigure: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: true\n    init:\n      # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_PASS_VARS' ENV var, or '--init-pass-vars' command-line argument\n      pass_vars: false\n\nstacks:\n  # Can also be set using 'ATMOS_STACKS_BASE_PATH' ENV var, or '--config-dir' and '--stacks-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks\"\n  # Can also be set using 'ATMOS_STACKS_INCLUDED_PATHS' ENV var (comma-separated values string)\n  included_paths:\n    - \"orgs/**/*\"\n  # Can also be set using 'ATMOS_STACKS_EXCLUDED_PATHS' ENV var (comma-separated values string)\n  excluded_paths:\n    - \"**/_defaults.yaml\"\n  # Can also be set using 'ATMOS_STACKS_NAME_PATTERN' ENV var\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n\nworkflows:\n  # Can also be set using 'ATMOS_WORKFLOWS_BASE_PATH' ENV var, or '--workflows-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks/workflows\"\n\nlogs:\n  # Can also be set using 'ATMOS_LOGS_FILE' ENV var, or '--logs-file' command-line argument\n  # File or standard file descriptor to write logs to\n  # Logs can be written to any file or any standard file descriptor, including `/dev/stdout`, `/dev/stderr` and `/dev/null`\n  file: \"/dev/stderr\"\n  # Supported log levels: Trace, Debug, Info, Warning, Off\n  # Can also be set using 'ATMOS_LOGS_LEVEL' ENV var, or '--logs-level' command-line argument\n  level: Info\n\n# Custom CLI commands\ncommands: []\n\n# Integrations\nintegrations: {}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files for another test component override and stack\nDESCRIPTION: This command deletes Terraform-related files for the 'test/test-component-override-3' component in the 'tenant1-ue2-dev' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure an Atmos component with a stable `workspace_key_prefix` for the S3 backend, ensuring seamless upgrades between different versions of the component without losing state. It is important to set the `workspace_key_prefix` without the version number in the path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # `vpc` is the Atmos component name\n    vpc:\n      # Backend configuration for the component\n      backend:\n        s3:\n          # Ensure the path in the bucket is stable across versions\n          # IMPORTANT: If not explicitly set, the `workspace_key_prefix` will include the version\n          #            This will cause the state to be lost when upgrading between versions.\n          workspace_key_prefix: vpc\n      metadata:\n        # Point to the Terraform component on the filesystem\n        component: vpc/1.2.3\n```\n\n----------------------------------------\n\nTITLE: Helmfile Destroy Command using Atmos\nDESCRIPTION: These examples show how to use the `atmos helmfile destroy` command to destroy a component in a specific stack. The `--stack` flag is used, and the `redirect-stderr` option is used to redirect standard error to `/dev/stdout`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile destroy echo-server --stack=tenant1-ue2-dev\natmos helmfile destroy echo-server --stack=tenant1-ue2-dev --redirect-stderr /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: YAML: Matching Multiple File Extensions\nDESCRIPTION: This YAML snippet demonstrates how to use curly braces `{...}` to match multiple file extensions in a glob pattern. It includes all `.tf` and `.md` files within the `demo-library` directory and its subdirectories.  This provides a more concise way to specify multiple file types.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nincluded_paths:\n  - \"**/demo-library/**/*.{tf,md}\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Native Arguments Example\nDESCRIPTION: Example using double-dash to pass native Terraform arguments and flags to the `atmos terraform plan` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan test/test-component -s tenant1-ue2-dev -- -refresh=false -lock=false\n```\n\n----------------------------------------\n\nTITLE: Overriding vpc Variables for prod Environment (YAML)\nDESCRIPTION: This snippet overrides the default `vpc` component settings for the `prod` environment in the `stacks/catalog/vpc/prod.yaml` file. It specifies the `ipv4_primary_cidr_block` and overrides `map_public_ip_on_launch` to `false`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.8.0.0/18\n        # In `prod`, don't map public IPs on launch\n        # Override `map_public_ip_on_launch` from the defaults\n        map_public_ip_on_launch: false\n```\n\n----------------------------------------\n\nTITLE: Terraform Environment Variable Example (YAML)\nDESCRIPTION: Illustrates the optional `vars.environment` attribute within a Terraform component's configuration in an Atmos stack. This shows how to define the environment (location where things run), adhering to the `terraform-null-label` convention.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  # us-east-1\n  environment: ue1\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends for Specific Components\nDESCRIPTION: This command generates backend files only for the specified Atmos components, passed as a comma-separated list via the `--components` flag. It limits the generation process to the specified components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --components <component1>,<component2> --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Validate Atmos Component Examples\nDESCRIPTION: These examples demonstrate various ways to use the `atmos validate component` command, including specifying different schema paths, schema types (jsonschema and opa), module paths, and timeout values.  The examples cover validating 'infra/vpc' component in 'tenant1-ue2-dev' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-component.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component infra/vpc -s tenant1-ue2-dev\natmos validate component infra/vpc -s tenant1-ue2-dev --schema-path vpc/validate-infra-vpc-component.json --schema-type jsonschema\natmos validate component infra/vpc -s tenant1-ue2-dev --schema-path vpc/validate-infra-vpc-component.rego --schema-type opa\natmos validate component infra/vpc -s tenant1-ue2-dev --schema-path vpc/validate-infra-vpc-component.rego --schema-type opa --module-paths catalog/constants\natmos validate component infra/vpc -s tenant1-ue2-dev --schema-path vpc/validate-infra-vpc-component.rego --schema-type opa --module-paths catalog\natmos validate component infra/vpc -s tenant1-ue2-dev --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Configure Stage Mixin in YAML (staging)\nDESCRIPTION: This YAML configuration defines a mixin for the `staging` stage. It sets the `stage` variable to `staging`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: staging\n\n# Other defaults for the `staging` stage/account\n```\n\n----------------------------------------\n\nTITLE: Executing a multi-line inline shell script with !exec in YAML\nDESCRIPTION: Executes a multi-line inline shell script using the `|` YAML syntax along with `!exec`. The script calculates the sum of numbers from 1 to 3 and prints the result. The result (6) will be assigned to `var6`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvar6: |\n  !exec\n    foo=0\n    for i in 1 2 3; do\n      foo+=$i\n    done\n    echo $foo\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Plan Workflow Example\nDESCRIPTION: This example demonstrates how to use the Atmos Affected Stacks GitHub Action in a workflow to generate Terraform plans for affected stacks. It retrieves the workflow configuration from a remote file and displays it.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/affected-stacks.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n<RemoteFile source=\"https://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-terraform-plan.yaml\" />\n```\n\n----------------------------------------\n\nTITLE: Counting Stacks using Atmos in Shell\nDESCRIPTION: This shell snippet uses the `atmos describe stacks` command to get a list of stacks that include a specific component (`vpc`). It then uses `grep`, `grep -oP`, and `wc -l` to count the number of stacks. The `--sections=components` argument limits the output to only the component section of the stack configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n⨠ atmos describe stacks --components=vpc --sections=components | grep -oP '^[a-z0-9-]+' | wc -l\n17\n```\n\n----------------------------------------\n\nTITLE: List all component values in Atmos\nDESCRIPTION: This command lists all values for a specified component. It retrieves all available configuration data associated with the component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component>\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Terraform output with templating in !exec\nDESCRIPTION: Executes an `atmos terraform output` command similar to the previous example, but uses Atmos stack manifest templating to dynamically set the stack name using `{{ .stack }}`. `--skip-init` flag is used. The output is expected to be JSON-formatted.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvar4: !exec atmos terraform output <component> -s {{ .stack }} --skip-init -- -json test_map\n```\n\n----------------------------------------\n\nTITLE: Overriding vpc Variables for staging Environment (YAML)\nDESCRIPTION: This snippet overrides the default `vpc` component settings for the `staging` environment in the `stacks/catalog/vpc/staging.yaml` file. It specifies the `ipv4_primary_cidr_block` and disables `vpc_flow_logs_enabled`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.9.0.0/18\n        vpc_flow_logs_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Deploying a Terraform Component with Atmos using Bash\nDESCRIPTION: Executes a Terraform deploy (init, plan, and apply) for a specified component using Atmos.  The `--stack` parameter specifies the stack configuration to use. This effectively applies the changes described in the Terraform configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform deploy fetch-location --stack=example\n```\n\n----------------------------------------\n\nTITLE: Include TFVAR File in Atmos Stack (dev)\nDESCRIPTION: Includes a `.tfvars` file for the `dev` environment into the `app` component within the `terraform` section of an Atmos stack configuration. This allows using existing Terraform variable files directly within Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    app:\n      vars: !include config/dev.tfvars\n```\n\n----------------------------------------\n\nTITLE: Configure VPC Component in ue2-dev YAML\nDESCRIPTION: This YAML snippet shows how to import the base VPC component configuration from the catalog in the `ue2-dev` stack config file. It establishes a base configuration point.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the base component configuration from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow Schema Definition\nDESCRIPTION: This YAML snippet defines the schema for Atmos workflow files.  It shows the required structure, including the `workflows` top-level section with a map of workflow definitions. Each workflow definition includes a `description` and a `steps` list, where each step defines a command to execute.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n\n  workflow-1:\n    description: \"Description of Workflow #1\"\n    steps: []\n\n  workflow-2:\n    description: \"Description of Workflow #2\"\n    steps: []\n```\n\n----------------------------------------\n\nTITLE: Listing All Atmos Stacks\nDESCRIPTION: This command lists all available Atmos stacks. It does not require any specific dependencies and is a core functionality of the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-stacks.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list stacks\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/dev/us-east-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `dev` account, and `us-east-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/dev/_defaults\n  - mixins/region/us-east-2\n```\n\n----------------------------------------\n\nTITLE: Examples of using atmos describe affected\nDESCRIPTION: Examples of running the `atmos describe affected` command with different options. These examples demonstrate how to specify a Git reference, format the output, provide an SSH key, and more.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos describe affected\natmos describe affected --verbose=true\natmos describe affected --ref refs/heads/main\natmos describe affected --ref refs/heads/my-new-branch --verbose=true\natmos describe affected --ref refs/heads/main --format json\natmos describe affected --ref refs/tags/v1.16.0 --file affected.yaml --format yaml\natmos describe affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073 --file affected.json\natmos describe affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\natmos describe affected --ssh-key <path_to_ssh_key>\natmos describe affected --ssh-key <path_to_ssh_key> --ssh-key-password <password>\natmos describe affected --repo-path <path_to_already_cloned_repo>\natmos describe affected --include-spacelift-admin-stacks=true\natmos describe affected --clone-target-ref=true\natmos describe affected --include-dependents=true\natmos describe affected --include-settings=true\natmos describe affected --stack=plat-ue2-prod\natmos describe affected --upload=true\natmos describe affected --query <yq-expression>\natmos describe affected --process-templates=false\natmos describe affected --process-functions=false\natmos describe affected --skip=terraform.output\natmos describe affected --skip=terraform.output --skip=include\natmos describe affected --skip=include,eval\n```\n\n----------------------------------------\n\nTITLE: Configure Atlantis Integration in atmos.yaml\nDESCRIPTION: This YAML snippet shows how to configure Atlantis integration settings within the `integrations.atlantis` section of the `atmos.yaml` file. It includes configurations for file paths, config templates, project templates, and workflow templates. It supports deep merging with stack config files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# atmos.yaml CLI config\n\n# Integrations\nintegrations:\n\n  # Atlantis integration\n  # https://www.runatlantis.io/docs/repo-level-atlantis-yaml.html\n  atlantis:\n    # Path and name of the Atlantis config file `atlantis.yaml`\n    # Supports absolute and relative paths\n    # All the intermediate folders will be created automatically (e.g. `path: /config/atlantis/atlantis.yaml`)\n    # Can be overridden on the command line by using `--output-path` command-line argument in `atmos atlantis generate repo-config` command\n    # If not specified (set to an empty string/omitted here, and set to an empty string on the command line), the content of the file will be dumped to `stdout`\n    # On Linux/macOS, you can also use `--output-path=/dev/stdout` to dump the content to `stdout` without setting it to an empty string in `atlantis.path`\n    path: \"atlantis.yaml\"\n\n    # Config templates\n    # Select a template by using the `--config-template <config_template>` command-line argument in `atmos atlantis generate repo-config` command\n    config_templates:\n      config-1:\n        version: 3\n        automerge: true\n        delete_source_branch_on_merge: true\n        parallel_plan: true\n        parallel_apply: true\n        allowed_regexp_prefixes:\n          - dev/\n          - staging/\n          - prod/\n\n    # Project templates\n    # Select a template by using the `--project-template <project_template>` command-line argument in `atmos atlantis generate repo-config` command\n    project_templates:\n      project-1:\n        # generate a project entry for each component in every stack\n        name: \"{tenant}-{environment}-{stage}-{component}\"\n        workspace: \"{workspace}\"\n        dir: \"{component-path}\"\n        terraform_version: v1.8\n        delete_source_branch_on_merge: true\n        autoplan:\n          enabled: true\n          when_modified:\n            - \"**/*.tf\"\n            - \"varfiles/$PROJECT_NAME.tfvars\"\n          apply_requirements:\n            - \"approved\"\n\n    # Workflow templates\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-init-plan-apply-commands\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-run-command\n    workflow_templates:\n      workflow-1:\n        plan:\n          steps:\n            - run: terraform init -input=false\n            # When using workspaces, you need to select the workspace using the $WORKSPACE environment variable\n            - run: terraform workspace select $WORKSPACE\n            # You must output the plan using `-out $PLANFILE` because Atlantis expects plans to be in a specific location\n            - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars\n        apply:\n          steps:\n            - run: terraform apply $PLANFILE\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamically Generated Components with Atmos CLI\nDESCRIPTION: This code snippet shows how to use the Atmos CLI to apply the dynamically generated components after hierarchical imports. This provisions the infrastructure defined by those components using Terraform, taking the context and hierarchical imports into account.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply eks-blue/cluster -s tenant1-uw1-test-1\natmos terraform apply eks-green/cluster -s tenant1-uw1-test-1\n```\n\n----------------------------------------\n\nTITLE: Environment Manifest Assembly: org2-core-ue2-dev.yaml\nDESCRIPTION: This YAML snippet assembles the environment manifest `org2-core-ue2-dev.yaml` by importing the corresponding mixins in a specific order. The order of imports is important as later imports override configurations from earlier imports.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The imports are processed in the order they are defined.\n  # The next imported manifest will override the configurations from the previously imported manifests\n  - catalog/vpc/mixins/defaults\n  - catalog/vpc/mixins/org2\n  - catalog/vpc/mixins/core\n  - catalog/vpc/mixins/ue2\n  - catalog/vpc/mixins/dev\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Commands for Multiple Components\nDESCRIPTION: These shell commands execute the `terraform apply` command for the `vpc/1` and `vpc/2` components within the `ue2-dev` stack using Atmos. Atmos automatically selects (or creates) the Terraform workspaces named `ue2-dev-vpc-1` and `ue2-dev-vpc-2`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc/1 -s ue2-dev\natmos terraform apply vpc/2 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Atmos commands for describing and applying components\nDESCRIPTION: These commands use the Atmos CLI to describe and apply the dynamically generated EKS components. `atmos describe component` retrieves the configuration of a component, while `atmos terraform apply` provisions the component using Terraform. The `-s` flag specifies the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component eks-blue/cluster -s tenant1-uw2-test-1\natmos describe component eks-green/cluster -s tenant1-uw2-test-1\n\natmos terraform apply eks-blue/cluster -s tenant1-uw2-test-1\natmos terraform apply eks-green/cluster -s tenant1-uw2-test-1\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Example 1\nDESCRIPTION: This example generates a Terraform backend for the `top-level-component1` component in the `tenant1-ue2-dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend top-level-component1 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: EKS Update Kubeconfig Examples\nDESCRIPTION: This snippet shows various examples of how to use the `atmos aws eks update-kubeconfig` command with different options, including component, stack, profile, cluster name, kubeconfig path, region, role ARN, alias, dry-run, and verbose mode.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig <component> -s <stack>\natmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name>\natmos aws eks update-kubeconfig <component> -s <stack> --kubeconfig=<path_to_kubeconfig> --region=<region>\natmos aws eks update-kubeconfig --role-arn <ARN>\natmos aws eks update-kubeconfig --alias <cluster context name alias>\natmos aws eks update-kubeconfig --dry-run=true\natmos aws eks update-kubeconfig --verbose=true\n```\n\n----------------------------------------\n\nTITLE: Generated Azure Blob Storage Backend Config (JSON)\nDESCRIPTION: This snippet shows the generated `backend.tf.json` file when `auto_generate_backend_file` is enabled. It merges the default backend configuration from `_defaults.yaml` with any component-specific overrides. The `key` parameter reflects the component name, ensuring unique state files per component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"azurerm\": {\n        \"resource_group_name\": \"StorageAccount-ResourceGroup\",\n        \"storage_account_name\": \"abcd1234\",\n        \"container_name\": \"tfstate\",\n        \"key\": \"my-component.terraform.tfstate\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Data Source in atmos.yaml\nDESCRIPTION: This snippet shows how to configure a data source in the `atmos.yaml` file to fetch the public IP address from an external API.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  templates:\n    settings:\n      gomplate:\n        timeout: 5\n        datasources:\n          network_egress:\n            url: \"https://api.ipify.org?format=json\"\n            headers:\n              accept:\n                - \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Disable Template Processing\nDESCRIPTION: Example usage of the `atmos terraform shell` command with the `--process-templates` flag disabled. This disables Go template processing in Atmos stack manifests when executing terraform commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Example: referencing current stack using .stack\nDESCRIPTION: Example demonstrating how to use the `.stack` template identifier with the `!store` function to get a value from the same stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !store prod/ssm {{ .stack }} vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Update Stack Configuration (YAML)\nDESCRIPTION: This YAML configuration defines the variables, Terraform settings, Helmfile settings, and components for a stack named 'example'. It includes settings for fetching location and weather data, as well as an 'output-results' component with a disabled local-exec output. The 'workflows' section defines a 'deploy-all' workflow that executes Terraform deployments in a specific order.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvars: {}\n\nterraform:\n  vars: {}\n\nhelmfile:\n  vars: {}\n\ncomponents:\n  terraform:\n    fetch-location:\n      vars: {}\n\n    fetch-weather:\n      vars:\n        # Let's get the weather for a particular day.\n        # Feel free to update to a date more relevant to you!\n        date: 2021/03/28\n\n    output-results:\n      vars:\n        print_users_weather_enabled: false # We disable outputting via our Terraform local-exec.\n\n  helmfile: {}\n\nworkflows:\n  deploy-all:\n    description: Deploy terraform projects in order\n    steps:\n      - command: terraform deploy fetch-location\n      - command: terraform deploy fetch-weather\n      - command: terraform deploy output-results\n```\n\n----------------------------------------\n\nTITLE: Starting a Terraform Shell\nDESCRIPTION: This command starts a new shell environment configured with the environment for an Atmos component in a stack, allowing the execution of native Terraform commands without Atmos-specific arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform shell\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration: prod.yaml\nDESCRIPTION: This YAML snippet defines environment-specific configurations for the `vpc` component in the `prod` environment. It overrides the default `ipv4_primary_cidr_block`, `map_public_ip_on_launch`, and `assign_generated_ipv6_cidr_block` variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `ipv4_primary_cidr_block`, `map_public_ip_on_launch` and `assign_generated_ipv6_cidr_block` from the defaults\n        ipv4_primary_cidr_block: 10.8.0.0/18\n        # In `prod`, don't map public IPs on launch\n        map_public_ip_on_launch: false\n        # In `prod`, use IPv6\n        assign_generated_ipv6_cidr_block: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Schemas in Atmos\nDESCRIPTION: This YAML snippet configures the paths for JSON Schema and OPA files used to validate Atmos stack manifests and components. It defines base paths for JSON Schema and OPA, and the manifest path for Atmos manifest validation. Requires Atmos CLI and appropriate schema files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # https://json-schema.org\n  jsonschema:\n    # Can also be set using 'ATMOS_SCHEMAS_JSONSCHEMA_BASE_PATH' ENV var, or '--schemas-jsonschema-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/jsonschema\"\n  # https://www.openpolicyagent.org\n  opa:\n    # Can also be set using 'ATMOS_SCHEMAS_OPA_BASE_PATH' ENV var, or '--schemas-opa-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/opa\"\n  # JSON Schema to validate Atmos manifests\n  # https://atmos.tools/cli/schemas/\n  # https://atmos.tools/cli/commands/validate/stacks/\n  # https://atmos.tools/quick-start/advanced/configure-validation/\n  # https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n  # https://json-schema.org/draft/2020-12/release-notes\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line argument\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Examples of listing Stacks\nDESCRIPTION: This shows examples listing Stacks with and without filtering for a specific component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-stacks.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos list stacks\natmos list stacks -c vpc\n```\n\n----------------------------------------\n\nTITLE: Validate Planfile with Checkov\nDESCRIPTION: This example shows how to generate a Terraform planfile and then validate it using Checkov. It requires Checkov to be installed and configured.  It assumes the default planfile name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack>\ncheckov --file components/terraform/<component>/<stack>-<component>.planfile.json --framework terraform_plan\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflow with File (Shell)\nDESCRIPTION: This command executes an Atmos workflow specified in a file.  `<workflow-name>` is the name of the workflow to execute and `<file>` is the path to the workflow definition file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/workflow.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file>\n```\n\n----------------------------------------\n\nTITLE: Terraform Remote State Configuration\nDESCRIPTION: This Terraform code snippet configures a remote state backend to fetch outputs from the `vpc-flow-logs-bucket` component. It uses the `cloudposse/stack-config/yaml//modules/remote-state` module and specifies the component name and optional context overrides for locating the remote state.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/vendor-components.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_flow_logs_bucket\" {\n  count = local.vpc_flow_logs_enabled ? 1 : 0\n\n  source  = \"cloudposse/stack-config/yaml//modules/remote-state\"\n  version = \"1.5.0\"\n\n  # Specify the Atmos component name (defined in YAML stack config files)\n  # for which to get the remote state outputs\n  component = \"vpc-flow-logs-bucket\"\n\n  # Override the context variables to point to a different Atmos stack if the\n  # `vpc-flow-logs-bucket` Atmos component is provisioned in another AWS account, OU or region\n  stage       = try(coalesce(var.vpc_flow_logs_bucket_stage_name, module.this.stage), null)\n  tenant      = try(coalesce(var.vpc_flow_logs_bucket_tenant_name, module.this.tenant), null)\n  environment = try(coalesce(var.vpc_flow_logs_bucket_environment_name, module.this.environment), null)\n\n  # `context` input is a way to provide the information about the stack (using the context\n  # variables `namespace`, `tenant`, `environment`, `stage` defined in the stack config)\n  context = module.this.context\n}\n```\n\n----------------------------------------\n\nTITLE: Generate and Source Bash Completion Script\nDESCRIPTION: Generates the bash completion script, saves it to a temporary file, and then sources the file to enable tab completion. This is one method of installing bash completions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos completion bash > /tmp/completion\nsource /tmp/completion\n```\n\n----------------------------------------\n\nTITLE: atmos.Store in YAML Multi-line Strings (YAML)\nDESCRIPTION: Demonstrates the use of the `atmos.Store` function inside a YAML multi-line string. The retrieved values are formatted as JSON and included within the string.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    component-1:\n      vars:\n        lambda_environment:\n          ENGINE_CONFIG_JSON: |\n            {\n                \"cidr\": {{ atmos.Store \"redis\" \"prod\" \"vpc\" \"cidr\" | quote }},\n                \"defaults\": {{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").defaults | toJSON }},\n                \"subnets_count\": {{ (atmos.Store \"redis\" .stack \"config\" \"config_map\").vpc_config.subnets_count }}\n            }\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for dev Environment\nDESCRIPTION: This YAML configuration imports the default VPC configuration and overrides the `ipv4_primary_cidr_block` variable for the `dev` environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.7.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Overriding Terraform Cloud Workspace Name in Component (YAML)\nDESCRIPTION: This snippet demonstrates how to override the Terraform Cloud `workspaces.name` parameter for a specific component in its manifest. It's used to customize the Terraform Cloud workspace name. This allows component-specific workspace assignment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      # Optional backend configuration for the component\n      backend:\n        cloud:\n          workspaces:\n            name: \"my-component-workspace\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Component in `ue2-dev.yaml` (YAML)\nDESCRIPTION: This YAML code configures the `vpc/1` Atmos component in the `ue2-dev` stack. It imports the base component configuration from the `catalog`, points to the Terraform component in `components/terraform`, inherits settings from `vpc/defaults`, and defines/overrides variables specific to this component, including enabling VPC flow logs and specifying the flow logs bucket component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the base component configuration from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n# File extensions are optional (if not specified, `.yaml` is used by default).\nimport:\n  - catalog/vpc\n\ncomponents:\n  terraform:\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform` folder\n        component: infra/vpc\n        inherits:\n          # Inherit all settings and variables from the `vpc/defaults` base Atmos component\n          - vpc/defaults\n      vars:\n        # Define variables that are specific for this component\n        # and are not set in the base component\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.8.0.0/18\n        # Override the default variables from the base component\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"REJECT\"\n\n        # Specify the name of the Atmos component that provides configuration\n        # for the `infra/vpc-flow-logs-bucket` Terraform component\n        vpc_flow_logs_bucket_component_name: vpc-flow-logs-bucket-1\n\n        # Override the context variables to point to a different Atmos stack if the\n        # `vpc-flow-logs-bucket-1` Atmos component is provisioned in another AWS account, OU or region.\n\n        # If the bucket is provisioned in a different AWS account,\n        # set `vpc_flow_logs_bucket_stage_name`\n        # vpc_flow_logs_bucket_stage_name: prod\n\n        # If the bucket is provisioned in a different AWS OU,\n        # set `vpc_flow_logs_bucket_tenant_name`\n        # vpc_flow_logs_bucket_tenant_name: core\n\n        # If the bucket is provisioned in a different AWS region,\n        # set `vpc_flow_logs_bucket_environment_name`\n        # vpc_flow_logs_bucket_environment_name: uw2\n```\n\n----------------------------------------\n\nTITLE: Planning the tfstate-backend with Atmos and Terraform\nDESCRIPTION: Uses Atmos to plan the tfstate-backend Terraform component, targeting the ue2-root stack.  This step prepares to create the S3 bucket and DynamoDB table that will store the terraform state.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform plan tfstate-backend --stack ue2-root\n```\n\n----------------------------------------\n\nTITLE: Defining Component Dependencies in Atmos Component YAML\nDESCRIPTION: This YAML snippet demonstrates defining dependencies on other Atmos components within a stack, and across different stacks, using the `settings.depends_on` section. The example includes dependencies within the same stack, a specific stage, and a fully qualified stack (tenant, environment, stage).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component1:\n      settings:\n        depends_on:\n          1:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test-component-override\"\n          2:\n            # This component (in any stage) depends on `test/test-component`\n            # from the `dev` stage (in any `environment` and any `tenant`)\n            component: \"test/test-component\"\n            stage: \"dev\"\n          3:\n            # This component depends on `my-component`\n            # from the `tenant1-ue2-staging` Atmos stack\n            component: \"my-component\"\n            tenant: \"tenant1\"\n            environment: \"ue2\"\n            stage: \"staging\"\n      vars:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configure VS Code Settings for Atmos (JSON)\nDESCRIPTION: This JSON snippet configures Visual Studio Code settings for optimal Atmos development. It sets git repository behavior, default editor, terminal configuration, and YAML schema validation. The configuration ensures that YAML files are validated against the Atmos schema.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"git.openRepositoryInParentFolders\": \"always\",\n    \"git.autofetch\": true,\n    \"git.showProgress\": true,\n    \"workbench.startupEditor\": \"readme\",\n    \"workbench.editor.autoLockGroups\": {\n        \"readme\": \"/welcome.md\"\n    },\n    \"workbench.editorAssociations\": {\n        \"*.md\": \"vscode.markdown.preview.editor\"\n    },\n    \"terminal.integrated.tabs.title\": \"Atmos (${process})\",\n    \"terminal.integrated.tabs.description\": \"${task}${separator}${local}${separator}${cwdFolder}\",\n    \"terminal.integrated.shell.linux\": \"/bin/zsh\",\n    \"terminal.integrated.allowWorkspaceConfiguration\": true,\n    \"yaml.schemaStore.enable\": true,\n    \"yaml.schemas\": {\n        \"https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\": [\n        \"**/stacks/**/*.yaml\",\n        \"!**/stacks/workflows/**/*.yaml\",\n        \"!**/stacks/schemas/**/*.yaml\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Atmos List Variables Alias\nDESCRIPTION: Lists all variables for the `vpc` component using the `vars` alias of the `values` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos list vars vpc\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends for Specific Stacks\nDESCRIPTION: This command generates backend config files for the specified stacks using the `--stacks` option. It takes a comma-separated list of stack names and applies the generation process only to those stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --stacks orgs/cp/tenant1/staging/us-east-2,orgs/cp/tenant2/dev/us-east-2 --file-template <file_template>\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --stacks tenant1-ue2-staging,tenant1-ue2-prod --file-template <file_template>\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --stacks orgs/cp/tenant1/staging/us-east-2,tenant1-ue2-prod --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Importing DNS Defaults in Layer\nDESCRIPTION: This YAML snippet shows how to import the DNS component defaults into the `dns.yaml` layer manifest. It allows the DNS component to be configured using the settings defined in the `catalog/dns/defaults` file when the `dns` layer is included.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/dns/defaults\n  # Import other DNS components\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration in atmos.yaml\nDESCRIPTION: This snippet configures the Atmos CLI, defining base paths for Terraform components, stacks, and schemas.  It also specifies naming patterns for stacks and includes/excludes paths for stack manifest discovery. It's essential for Atmos to locate and process components and stacks correctly.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-component-configuration.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Output metadata in different formats with atmos\nDESCRIPTION: This command changes the output format of the metadata listing. Supported formats include JSON, YAML, CSV, and TSV, making the output suitable for machine processing, configuration files, or spreadsheet applications.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-metadata.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# JSON format for machine processing\natmos list metadata --format json\n\n# YAML format for configuration files\natmos list metadata --format yaml\n\n# CSV format for spreadsheet compatibility\natmos list metadata --format csv\n\n# TSV format with tab delimiters\natmos list metadata --format tsv\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values in JSON Format\nDESCRIPTION: Outputs the component values in JSON format using the `--format json` flag.  This is useful for machine processing or when dealing with nested objects.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# JSON format for machine processing\natmos list values vpc --format json\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos CLI\nDESCRIPTION: This YAML configuration file configures the Atmos CLI tool, defining base paths for Terraform components and stacks, a naming pattern for stacks, and paths to include and exclude when searching for stack manifests. It also defines base paths for JSON schema and OPA policies used for validating Atmos configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Target Templating with Component Name\nDESCRIPTION: This code shows how to use the `{{ .Component }}` template parameter in the `targets` attribute to dynamically create target paths based on the component name.  This is useful for organizing vendored components by their name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  - \"components/terraform/{{ .Component }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Backend in _defaults.yaml (YAML)\nDESCRIPTION: This snippet configures the Google Cloud Storage (GCS) backend for Terraform state management in the `_defaults.yaml` file within Atmos. It specifies the GCS bucket to be used for storing Terraform state. The `terraform.backend_type` is set to `gcs` to indicate the use of Google Cloud Storage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: gcs\n  backend:\n    gcs:\n      bucket: \"tf-state\"\n      # Other parameters\n```\n\n----------------------------------------\n\nTITLE: Atmos Configuration (atmos.yaml)\nDESCRIPTION: This snippet demonstrates the basic Atmos configuration file (`atmos.yaml`) settings for defining the base paths for Terraform components, stacks, schemas, and the stack name pattern, enabling Atmos to locate component and stack definitions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/multiple-component-instances.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos CLI Config Path in Workflow (atmos.yaml)\nDESCRIPTION: This example illustrates how to configure the `ATMOS_CLI_CONFIG_PATH` environment variable in a GitHub Actions workflow to specify the location of the `atmos.yaml` file if it's not in the root directory. It shows the necessary `env` configuration within the workflow file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/component-updater.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n  - name: Update Atmos Components\n    uses: cloudposse/github-action-atmos-component-updater@v1\n    env:\n      # Directory containing the `atmos.yaml` file\n      ATMOS_CLI_CONFIG_PATH: ${{ github.workspace }}/rootfs/usr/local/etc/atmos/\n    with:\n      github-access-token: ${{ secrets.GITHUB_TOKEN }}\n      max-number-of-prs: 5\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for us-east-2 Region\nDESCRIPTION: This YAML configuration imports the default VPC configuration and overrides the `availability_zones` variable for the `us-east-2` region.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-east-2a\n          - us-east-2b\n          - us-east-2c\n```\n\n----------------------------------------\n\nTITLE: Atmos Affected with Dependents JSON Output\nDESCRIPTION: This JSON represents the output of the `atmos describe affected --include-dependents=true` command.  It demonstrates how the command identifies components affected by changes and includes their dependent components in a hierarchical structure. The `dependents` property lists the components that depend on the current component. Requires the `atmos` CLI and a properly configured Atmos environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"component-1\",\n    \"stack\": \"plat-ue2-dev\",\n    \"stack_slug\": \"plat-ue2-dev-component-1\",\n    \"included_in_dependents\": false,\n    \"dependents\": [\n      {\n        \"component\": \"component-2\",\n        \"stack\": \"plat-ue2-dev\",\n        \"stack_slug\": \"plat-ue2-dev-component-2\",\n        \"dependents\": [\n          {\n            \"component\": \"component-3\",\n            \"stack\": \"plat-ue2-dev\",\n            \"stack_slug\": \"plat-ue2-dev-component-3\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"component\": \"component-2\",\n    \"stack\": \"plat-ue2-dev\",\n    \"stack_slug\": \"plat-ue2-dev-component-2\",\n    \"included_in_dependents\": true,\n    \"dependents\": [\n      {\n        \"component\": \"component-3\",\n        \"stack\": \"plat-ue2-dev\",\n        \"stack_slug\": \"plat-ue2-dev-component-3\"\n      }\n    ]\n  },\n  {\n    \"component\": \"component-3\",\n    \"stack\": \"plat-ue2-dev\",\n    \"stack_slug\": \"plat-ue2-dev-component-3\",\n    \"included_in_dependents\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enable Atmos CLI Completion in Zsh\nDESCRIPTION: Configures Zsh shell for Atmos CLI completion by initializing the completion system and sourcing the generated completion script.  It requires zsh shell and atmos cli installed. Add the following lines to your `~/.zshrc` file and then source the file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n# Initialize Zsh completion system\nautoload -Uz compinit && compinit\n\n# Enable Atmos CLI completion\nsource <(atmos completion zsh)\n\n# Improve completion behavior\nzstyle ':completion:*' menu select      # Enable menu selection\nzstyle ':completion:*' force-list always # Force vertical menu listing\n\n# Ensure the Tab key triggers autocompletion\nbindkey '\\t' expand-or-complete\n```\n\n----------------------------------------\n\nTITLE: Region Configuration: ue2.yaml\nDESCRIPTION: This YAML snippet configures the availability zones for the `vpc` component in the `us-east-2` (ue2) region.  It overrides the default configuration to specify the desired availability zones for the VPC.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-east-2a\n          - us-east-2b\n          - us-east-2c\n```\n\n----------------------------------------\n\nTITLE: Applying the tfstate-backend with Atmos and Terraform\nDESCRIPTION: Uses Atmos to apply the tfstate-backend Terraform component, targeting the ue2-root stack. This creates the S3 bucket and DynamoDB table, using local state initially. Assumes the plan executed cleanly.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform apply tfstate-backend --stack ue2-root\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Logs\nDESCRIPTION: Defines a partial stack manifest for logging components within Atmos, incorporating defaults, region mixins, and component catalog defaults for network firewall and VPC flow logs buckets.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/network-firewall-logs-bucket/defaults\n  - catalog/vpc-flow-logs-bucket/defaults\n  # Import other Logs components\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Terraform output with templating for lists in !exec\nDESCRIPTION: Executes an `atmos terraform output` command similar to the previous examples, but this is to get the output as a list. Uses Atmos stack manifest templating to dynamically set the stack name using `{{ .stack }}`. `--skip-init` flag is used. The output is expected to be JSON-formatted.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvar5: !exec atmos terraform output <component> -s {{ .stack }} --skip-init -- -json test_list\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration with Inheritance in YAML\nDESCRIPTION: This YAML snippet shows how to configure an Atmos component using the `metadata.inherits` key. It defines a base component `vpc/defaults` with common settings and then a specific component `vpc` that inherits from the base component.  The base component is marked as `abstract` and spacelift is configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      metadata:\n        type: abstract\n      # spacelift can now be enabled in the catalog\n      settings:\n        spacelift:\n          workspace_enabled: true\n      vars:\n        enabled: true\n        # ...etc...\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos Logs to Stderr in YAML\nDESCRIPTION: This YAML snippet configures Atmos to log at the Trace level, but directs the log output to standard error (/dev/stderr). This allows the standard output to be used for parsing JSON or other data, while debugging messages are sent to stderr.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  file: \"/dev/stderr\"\n  level: Trace\n```\n\n----------------------------------------\n\nTITLE: Configure S3 Backend in _defaults.yaml (Organization - Partial)\nDESCRIPTION: This snippet shows a partial S3 backend configuration defined at the organization level in `_defaults.yaml`. It includes settings that are common across all environments, such as ACL, encryption, key, and region. Account-specific settings (bucket, DynamoDB table, IAM role) are defined in the environment-specific `_defaults.yaml` files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      acl: \"bucket-owner-full-control\"\n      encrypt: true\n      key: \"terraform.tfstate\"\n      region: \"your-aws-region\"\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform S3 Backend for Staging Environment (YAML)\nDESCRIPTION: This YAML snippet configures the Terraform S3 backend for the 'staging' environment, overriding or extending organization-level defaults. It specifies the S3 bucket name, DynamoDB table name for state locking, and IAM role ARN.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-staging-s3-bucket-name\"\n      dynamodb_table: \"your-staging-dynamodb-table-name\"\n      role_arn: \"IAM Role with permissions to access the 'staging' Terraform backend\"\n```\n\n----------------------------------------\n\nTITLE: Validating VPC Component with OPA Policy (Shell)\nDESCRIPTION: This snippet shows how to use the `atmos validate component` command to validate a 'vpc' component using an OPA policy.  It demonstrates different ways to specify the schema path, stack, and additional module paths. It showcases how to invoke the command with and without specifying optional arguments like `--timeout`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/opa.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Validate 'vpc' component using OPA policy in the 'plat-ue2-prod' stack\natmos validate component vpc -s plat-ue2-prod --schema-path vpc/validate-vpc-component.rego --schema-type opa\n\n# Validate 'vpc' component using OPA policy in the 'plat-ue2-dev' stack with additional module paths 'catalog/constants'\natmos validate component vpc -s plat-ue2-dev --schema-path vpc/validate-vpc-component.rego --schema-type opa --module-paths catalog/constants\n\n# Validate 'vpc' component using OPA policy in the 'plat-ue2-dev' stack with additional module paths 'catalog'\natmos validate component vpc -s plat-ue2-dev --schema-path vpc/validate-vpc-component.rego --schema-type opa --module-paths catalog\n\n# Validate 'vpc' component in the 'plat-ue2-prod' stack\natmos validate component vpc -s plat-ue2-prod\n\n# Validate 'vpc' component in the 'plat-ue2-dev' stack\natmos validate component vpc -s plat-ue2-dev\n\n# Validate 'vpc' component in the 'plat-ue2-dev' stack with a timeout of 15 seconds\natmos validate component vpc -s plat-ue2-dev --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Filter by stack and specific variables in atmos\nDESCRIPTION: This command combines filtering by stack pattern and querying for specific variables.  It allows for a highly targeted view of component configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos list vars vpc --stack '*-ue2-*' --query .vars.region\n```\n\n----------------------------------------\n\nTITLE: VPC Component Configuration YAML\nDESCRIPTION: Defines the configuration for the vpc/1 Atmos component, including metadata (component path and inheritance), and variables (name, CIDR block, flow logs settings, and bucket component name). It demonstrates overriding default variables and specifying dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/vpc\n\ncomponents:\n  terraform:\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform` folder\n        component: infra/vpc\n        inherits:\n          # Inherit all settings and variables from the `vpc/defaults` base Atmos component\n          - vpc/defaults\n      vars:\n        # Define variables that are specific for this component\n        # and are not set in the base component\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.8.0.0/18\n        # Override the default variables from the base component\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"REJECT\"\n\n        # Specify the name of the Atmos component that provides configuration\n        # for the `infra/vpc-flow-logs-bucket` Terraform component\n        vpc_flow_logs_bucket_component_name: vpc-flow-logs-bucket-1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Flow Log Resource (HCL)\nDESCRIPTION: This HCL code configures the `aws_flow_log` resource to use the remote state output `vpc_flow_logs_bucket_arn` from the `vpc-flow-logs-bucket-1` Atmos component. It sets the log destination, log destination type, traffic type, and VPC ID.  The resource is conditionally created based on the `vpc_flow_logs_enabled` variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  enabled               = module.this.enabled\n  vpc_flow_logs_enabled = local.enabled && var.vpc_flow_logs_enabled\n}\n\nresource \"aws_flow_log\" \"default\" {\n  count = local.vpc_flow_logs_enabled ? 1 : 0\n\n  # Use the remote state output `vpc_flow_logs_bucket_arn` of the `vpc_flow_logs_bucket` component\n  log_destination = module.vpc_flow_logs_bucket[0].outputs.vpc_flow_logs_bucket_arn\n\n  log_destination_type = var.vpc_flow_logs_log_destination_type\n  traffic_type         = var.vpc_flow_logs_traffic_type\n  vpc_id               = module.vpc.vpc_id\n\n  tags = module.this.tags\n}\n```\n\n----------------------------------------\n\nTITLE: Describing EKS Component Provisioning Steps\nDESCRIPTION: This script section provides instructions on how to provision the EKS component with the new Kubernetes version. It outlines setting the `kubernetes_version` variable, applying changes using `atmos terraform apply`, and verifying the upgrade using `kubectl` and `helm` commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\nAfter the Pods, Helm releases and EKS add-ons are configured and ready, do the following:\\n\n                  - Set the variable ${color_cyan}kubernetes_version${color_reset} to ${color_cyan}${next_k8s_version}${color_reset} for the EKS component ${color_cyan}{{ .Arguments.component }}${color_reset} in the stack ${color_cyan}{{ .Flags.stack }}${color_reset}\n                  - Run the command ${color_cyan}atmos terraform apply {{ .Arguments.component }} -s {{ .Flags.stack }}${color_reset} to provision the component\n                  - Run the command ${color_cyan}kubectl get pods -A${color_reset} to check the status of all Pods after the upgrade\n                  - Run the command ${color_cyan}helm list -A -a${color_reset} to check the status of all Helm releases after the upgrade\n                \"\n```\n\n----------------------------------------\n\nTITLE: Atmos Hello World Command\nDESCRIPTION: This command executes a simple 'hello world' example to demonstrate adding basic commands to Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/demo-custom-command/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos hello\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration with Caching\nDESCRIPTION: This configuration demonstrates the caching mechanism of the `atmos.Component` function. It shows how multiple calls to the function for the same component within a stack only execute the function once, improving performance. The example retrieves the `outputs.id` from 'test' component multiple times.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    test2:\n      vars:\n        tags:\n          test: '{{ (atmos.Component \"test\" .stack).outputs.id }}'\n          test2: '{{ (atmos.Component \"test\" .stack).outputs.id }}'\n          test3: '{{ (atmos.Component \"test\" .stack).outputs.id }}'\n\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy Targeting Stages\nDESCRIPTION: This demonstrates how Atmos can be used to deploy infrastructure components, specifying the stack to ensure the deployment occurs within the correct environment and configuration context. Multiple examples show the flexibility of targeting different components and stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy infra/vpc -s tenant1-ue2-staging\natmos terraform deploy test/test-component -s tenant1-ue2-dev\natmos terraform deploy test/test-component-override-2 -s tenant2-ue2-prod\natmos terraform deploy test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows (Map Output)\nDESCRIPTION: Demonstrates the use of the `atmos describe workflows` command with the `--output map` flag.  The command returns a map of workflow manifest files to the lists of workflows defined in each manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows -o map\n```\n\n----------------------------------------\n\nTITLE: GitHub App Permissions\nDESCRIPTION: This code snippet shows the required permissions for the GitHub App used with the Atmos Component Updater. It specifies the necessary read and write access for contents and pull requests, as well as read-only access for metadata.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/component-updater.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ Contents: Read and write\n+ Pull Requests: Read and write\n+ Metadata: Read-only\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution with Atmos in Shell\nDESCRIPTION: This shell snippet demonstrates how to execute a terraform plan for an Atmos component using the atmos command-line tool. It specifies the component name (`vpc`) and the stack (`plat-ue2-dev`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n⨠ atmos terraform plan vpc --stack plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Stack Configuration with Component Imports\nDESCRIPTION: This YAML snippet demonstrates how to import the `defaults.tmpl` Go template into a top-level stack configuration. It uses the `context` object to provide different values for template variables, effectively generating multiple Atmos components (e.g., `eks/iam-role/admin-ui`, `eks/iam-role/auth`, `eks/iam-role/payment-processing`) with unique configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-template.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n\n  # This import will dynamically generate a new Atmos component `eks/iam-role/admin-ui`\n  - path: catalog/eks/iam-role/defaults.tmpl\n    context:\n      app_name: \"admin-ui\"\n      service_account_name: \"admin-ui\"\n      service_account_namespace: \"admin\"\n      iam_managed_policy_arns: [ \"<arn1>\", \"<arn2>\" ]\n\n  # This import will dynamically generate a new Atmos component `eks/iam-role/auth`\n  - path: catalog/eks/iam-role/defaults.tmpl\n    context:\n      app_name: \"auth\"\n      service_account_name: \"auth\"\n      service_account_namespace: \"auth\"\n      iam_managed_policy_arns: [ \"<arn3>\" ]\n\n  # This import will dynamically generate a new Atmos component `eks/iam-role/payment-processing`\n  - path: catalog/eks/iam-role/defaults.tmpl\n    context:\n      app_name: \"payment-processing\"\n      service_account_name: \"payment-processing\"\n      service_account_namespace: \"payments\"\n      iam_managed_policy_arns: [ \"<arn4>\", \"<arn5>\" ]\n\n  # Add new application configurations here\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Backend Configuration - backend.tf.json\nDESCRIPTION: This JSON configuration shows the automatically generated `backend.tf.json` file in the component's folder, including the S3 backend configuration with bucket, DynamoDB table, region, role ARN, and workspace key prefix.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"arn:aws:iam::xxxxxxxx:role/IAM Role with permissions to access the Terraform backend\",\n        \"workspace_key_prefix\": \"vpc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using !store function to retrieve the first item from a list\nDESCRIPTION: Example of using a YQ expression to retrieve the first item from a list stored in a remote store.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsubnet_id1: !store <store_name> <stack> <component> <key> | query .private_subnet_ids[0]\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack Import: us-east-2.yaml (dev)\nDESCRIPTION: This YAML snippet imports the `org1-plat-ue2-dev.yaml` environment manifest into the `stacks/orgs/org1/plat/dev/us-east-2.yaml` top-level stack. It also imports default configurations and region-specific configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/dev/_defaults\n  - mixins/region/us-east-2\n  - catalog/vpc/org1-plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Deploy Terraform Root Modules with Atmos\nDESCRIPTION: Deploys Terraform configurations for root modules using the Atmos CLI, including specifying a component, stack, planfile, and variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply\natmos terraform apply $component --stack $stack -out $planfile\natmos terraform apply $component --stack $stack -var \"key=value\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Stacks Configuration Example\nDESCRIPTION: This YAML snippet shows an example of how to include the Terraform weather component in an Atmos Stacks configuration file. It defines the component's variables, such as stage, location, options, format, lang, and units.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/demo-stacks/components/terraform/myapp/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    weather:\n      vars:\n        stage: dev\n        location: New York\n        options: 0T\n        format: v2\n        lang: en\n        units: m\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config by cloning target ref\nDESCRIPTION: Clone the target reference with which to compare the current branch. Only used when `--affected-only=true`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --clone-target-ref=true\n```\n\n----------------------------------------\n\nTITLE: Executing atmos describe affected in GitHub Actions\nDESCRIPTION: This snippet shows how to execute the `atmos describe affected` command in a GitHub Actions workflow. It uses the `--repo-path` flag and the `GITHUB_WORKSPACE` environment variable to specify the path to the cloned repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\natmos describe affected --repo-path $GITHUB_WORKSPACE\n```\n\n----------------------------------------\n\nTITLE: Validating Component Configuration with Schema\nDESCRIPTION: This command validates a component's configuration against a specified schema. It requires the component name, stack name, schema path, and schema type (jsonschema or opa) as input parameters. The command checks if the component's configuration adheres to the defined schema.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_validate_component_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos validate component <component> -s <stack> --schema-path <schema_path> --schema-type <jsonschema|opa>\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack Import: us-east-2.yaml (prod)\nDESCRIPTION: This YAML snippet imports the `org1-plat-ue2-prod.yaml` environment manifest into the `stacks/orgs/org1/plat/prod/us-east-2.yaml` top-level stack. It also imports default configurations and region-specific configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/prod/_defaults\n  - mixins/region/us-east-2\n  - catalog/vpc/org1-plat-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Terraform Clean\nDESCRIPTION: This command deletes Terraform-related files for a specified component and stack. It supports options to skip deleting the lock file and force deletion without confirmation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean <component> -s <stack> [--skip-lock-file] [--everything] [--force]\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for affected components only\nDESCRIPTION: This example uses the `--affected-only` flag to generate configurations only for components that have been changed. By default, compares against the `HEAD` of the current branch.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true\n```\n\n----------------------------------------\n\nTITLE: Generating the Terraform Backend Configuration with Atmos\nDESCRIPTION: Uses Atmos to generate the backend configuration for the tfstate-backend component, targeting the ue2-root stack. This creates a `backend.tf.json` file in the component's directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform generate backend tfstate-backend --stack ue2-root\n```\n\n----------------------------------------\n\nTITLE: Import configuration in YAML without templates\nDESCRIPTION: This YAML snippet illustrates importing stack configurations as a list of strings representing file paths. This format is used when the imported files do not require Go template processing. These files are merged to create stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - mixins/region/us-east-2\n  - orgs/cp/tenant1/test1/_defaults\n  - catalog/terraform/top-level-component1\n  - catalog/terraform/test-component\n  - catalog/terraform/vpc\n  - catalog/helmfile/echo-server\n```\n\n----------------------------------------\n\nTITLE: Run Atmos Workflow\nDESCRIPTION: This command executes the `terraform-plan-test-component-override-2-all-stacks` workflow, where the stack is defined inline within each command. The `-f` flag specifies the workflow file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\natmos workflow terraform-plan-test-component-override-2-all-stacks -f workflow1\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values for a Component\nDESCRIPTION: Lists all values for the `vpc` component across different stacks.  No specific flags are used, so the default table format will be displayed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos list values vpc\n```\n\n----------------------------------------\n\nTITLE: Helm Cluster Name Pattern Example\nDESCRIPTION: This is an example of `cluster_name_pattern`. It shows how to format cluster name patterns.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/components.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{namespace}-{tenant}-{environment}-{stage}-eks-cluster`\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Command Alias in Console\nDESCRIPTION: This console snippet demonstrates executing a command alias defined in Atmos. The `atmos ls` command is an alias for `list stacks`, and executing it lists the available stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n> atmos ls\n\nplat-ue2-dev\nplat-ue2-prod\nplat-ue2-staging\nplat-uw2-dev\nplat-uw2-prod\nplat-uw2-staging\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Dependents Command Output Example (JSON)\nDESCRIPTION: This JSON snippet represents the output of the `atmos describe dependents` command, showing the components that depend on `test/test-component` in the `tenant1-ue2-test-1` stack. The output includes details about each dependent component, such as its type, path, and the stack it belongs to.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component1\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"namespace\": \"cp\",\n    \"tenant\": \"tenant1\",\n    \"environment\": \"ue2\",\n    \"stage\": \"test-1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-dev-top-level-component1\",\n    \"spacelift_stack\": \"tenant1-ue2-test-1-top-level-component1\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component1\"\n  },\n  {\n    \"component\": \"top-level-component2\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"namespace\": \"cp\",\n    \"tenant\": \"tenant1\",\n    \"environment\": \"ue2\",\n    \"stage\": \"test-1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component2\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component2\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generate Varfile Skipping YAML Functions\nDESCRIPTION: Generates a Terraform varfile while skipping the processing of specific YAML functions in Atmos stack manifests.  Allows for selective skipping of function processing during varfile generation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack> --skip=eval --skip=include\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflows All Output (YAML) - Validation\nDESCRIPTION: Shows an example of the YAML output for `atmos describe workflows --output all` for the `validation.yaml` file. This demonstrates the structure for defining validation workflows, including descriptions and steps.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation.yaml:\n  name: Validation\n  description: Atmos workflows for VPCs and VPC Flow Logs validation\n  workflows:\n    validate-all-vpc:\n      description: Validate all VPC components in all stacks\n      steps:\n        - command: validate component vpc -s plat-ue2-dev\n        - command: validate component vpc -s plat-uw2-dev\n        - command: validate component vpc -s plat-ue2-staging\n        - command: validate component vpc -s plat-uw2-staging\n        - command: validate component vpc -s plat-ue2-prod\n        - command: validate component vpc -s plat-uw2-prod\n    validate-all-vpc-flow-logs:\n      description: Validate all VPC Flow Logs bucket components in all stacks\n      steps:\n        - command: validate component vpc-flow-logs-bucket -s plat-ue2-dev\n        - command: validate component vpc-flow-logs-bucket -s plat-uw2-dev\n        - command: validate component vpc-flow-logs-bucket -s plat-ue2-staging\n        - command: validate component vpc-flow-logs-bucket -s plat-uw2-staging\n        - command: validate component vpc-flow-logs-bucket -s plat-ue2-prod\n        - command: validate component vpc-flow-logs-bucket -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Describing an Atmos component\nDESCRIPTION: This command describes the complete configuration for an Atmos component in a specified Atmos stack. It takes the component name and stack name as arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Referencing Current Stack Name in atmos.Store (YAML)\nDESCRIPTION: Demonstrates how to reference the current stack name using `.stack` or `.atmos_stack` with the `atmos.Store` function. This allows retrieving values from components within the same stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{ atmos.Store \"<store_name>\" .stack \"<component>\" \"<key>\" }}\n{{ atmos.Store \"<store_name>\" .atmos_stack \"<component>\" \"<key>\" }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ atmos.Store \"prod/ssm\" .stack \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Highlighting in Atmos\nDESCRIPTION: This code snippet shows how to configure syntax highlighting for terminal output in the `atmos.yaml` file.  It includes options for enabling/disabling syntax highlighting, setting the formatter and theme, showing line numbers, and wrapping long lines.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/terminal.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  terminal:\n    syntax_highlighting:\n      enabled: true                 # Enable/disable syntax highlighting\n      formatter: terminal           # Output formatter\n      theme: dracula                # Color scheme to use\n      line_numbers: false           # Show line numbers\n      wrap: false                   # Wrap long lines\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with SSH key for private repos\nDESCRIPTION: Specifies an SSH key to authenticate and clone the git repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --ssh-key <path_to_ssh_key>\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for specific stacks and components\nDESCRIPTION: This example uses the `--stacks` and `--components` flags to generate configuration for specific stacks and components (comma separated).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1 --stacks <stack1> --components <component1, component2>\n```\n\n----------------------------------------\n\nTITLE: Output Atmos workflows in YAML format\nDESCRIPTION: This command outputs the list of Atmos workflows in YAML format, commonly used for configuration files. This allows the workflow list to be easily incorporated into other YAML-based configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows --format yaml\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for staging Environment\nDESCRIPTION: This YAML configuration imports the default VPC configuration and overrides the `ipv4_primary_cidr_block` variable for the `staging` environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend\nDESCRIPTION: This command generates a backend config file for an Atmos terraform component in a stack. The `<component>` argument specifies the Atmos terraform component, and the `-s <stack>` flag specifies the Atmos stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Component Instances in Atmos (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define multiple instances of the same Terraform component (vpc) in Atmos. It shows two component definitions, vpc/1 and vpc/2, that both point to the same Terraform component but have different configurations and workspace key prefixes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the defaults for all VPC components\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc/1`\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define variables specific to this `vpc/1` component\n      vars:\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.9.0.0/18\n      # Optional backend configuration for the component\n      # If not specified, the Atmos component name `vpc/1` will be used (`/` will be replaced with `-`)\n      backend:\n        s3:\n          workspace_key_prefix: vpc-1\n\n    # Atmos component `vpc/2`\n    vpc/2:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define variables specific to this `vpc/2` component\n      vars:\n        name: vpc-2\n        ipv4_primary_cidr_block: 10.10.0.0/18\n      # Optional backend configuration for the component\n      # If not specified, the Atmos component name `vpc/2` will be used (`/` will be replaced with `-`)\n      backend:\n        s3:\n          workspace_key_prefix: vpc-2\n```\n\n----------------------------------------\n\nTITLE: Importing ALB Defaults in Layer\nDESCRIPTION: This YAML snippet shows how to import the ALB component defaults into a layer manifest within Atmos. This configuration allows the `load-balancers` layer to inherit the default settings defined for the ALB component, promoting reusability and consistency.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/alb/defaults\n  # Import other Load Balancer components\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for specific stacks\nDESCRIPTION: This example uses the `--stacks` flag to filter and generate a configuration only for specific stacks (comma separated).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1 --stacks <stack1, stack2>\n```\n\n----------------------------------------\n\nTITLE: Generate Planfile Examples\nDESCRIPTION: Examples of using the `atmos terraform generate planfile` command with different options for specifying the component, stack, output format, and output file. Demonstrates how to generate planfiles for different stacks and components, and how to specify the output format as JSON or YAML.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile component1 -s plat-ue2-dev\natmos terraform generate planfile component1 -s plat-ue2-prod --format=json\natmos terraform generate planfile component1 -s plat-ue2-prod --format=yaml\natmos terraform generate planfile <component> -s <stack> --file=planfile.json\natmos terraform generate planfile <component> -s <stack> --format=yaml --file=planfiles/planfile.yaml\natmos terraform generate planfile <component> -s <stack> --file=/Users/me/Documents/atmos/infra/planfile.json\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backend Config\nDESCRIPTION: This command generates backend config files with a specified file template and uses the `--format backend-config` option, which produce files in backend-config format. It customizes the output file path using the provided template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template backends/{tenant}-{environment}-{stage}-{component}.tfbackend --format backend-config\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --format backend-config --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Referencing Current Stack Name in !terraform.output YAML Function\nDESCRIPTION: Shows how to use the `.stack` or `.atmos_stack` template identifier to reference the current stack name in the `!terraform.output` function. This is helpful when the component needs to fetch outputs from another component within the same stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !terraform.output vpc {{ .stack }} vpc_id\n```\n\n----------------------------------------\n\nTITLE: Generating Varfile with Specific Format\nDESCRIPTION: This example illustrates how to specify the output format of the generated Terraform variable file using the `--format` option.  Supported formats are HCL, JSON, and backend-config.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_varfiles_usage.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos terraform generate varfile --format=hcl|json|backend-config\n```\n\n----------------------------------------\n\nTITLE: Describe Component: Skip YAML Function Execution\nDESCRIPTION: This command describes a component within a specified stack and skips the execution of a specific YAML function.  The `<component>` and `<stack>` parameters are required. The `--skip` flag is used to specify the function to skip (e.g., `terraform.output`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_component_usage.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe component <component> -s <stack> --skip=terraform.output\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with a custom tag\nDESCRIPTION: Specifies a custom git tag to compare against when using `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --ref refs/tags/v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Pull Command Examples\nDESCRIPTION: Demonstrates various uses of the `atmos vendor pull` command, including pulling all vendored artifacts, specifying components, filtering by tags, and performing dry runs. It highlights how to pull components of a specific type (helmfile).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull \natmos vendor pull --everything\natmos vendor pull --component vpc\natmos vendor pull -c vpc-flow-logs-bucket\natmos vendor pull -c echo-server --type helmfile\natmos vendor pull --tags dev,test\natmos vendor pull --tags networking --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Name Pattern in Atmos YAML\nDESCRIPTION: This YAML snippet demonstrates how to define the `name_pattern` in the `atmos.yml` configuration file. The `name_pattern` specifies the structure for stack names, typically including tenant, environment, and stage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/troubleshoot/errors.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstacks:\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Varfile for Specific Stacks\nDESCRIPTION: This example shows how to generate Terraform variable files for specific stacks by using the `--stacks` option. The stacks are provided as comma-separated values, either as top-level stack manifest paths or as derived Atmos stack names.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_varfiles_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos terraform generate varfile --stacks orgs/cp/tenant1/staging/us-east-2,orgs/cp/tenant2/dev/us-east-2\n```\n\n----------------------------------------\n\nTITLE: Validate Stacks with Schema Path\nDESCRIPTION: These shell commands demonstrate how to validate Atmos stacks using the `atmos validate stacks` command. They use the `ATMOS_SCHEMAS_ATMOS_MANIFEST` environment variable and the `--schemas-atmos-manifest` command-line argument to specify the path to the Atmos manifest JSON schema file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-validation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nATMOS_SCHEMAS_ATMOS_MANIFEST=stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json atmos validate stacks\natmos validate stacks --schemas-atmos-manifest stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Force deleting Terraform files (no confirmation)\nDESCRIPTION: This command force-deletes all Terraform-related files for all components without prompting for confirmation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean --force\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflow to Apply All Components\nDESCRIPTION: This command executes the `apply-all-components` workflow defined in the `networking` workflow manifest. This workflow is designed to provision all components across all defined stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/provision.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Execute the workflow `apply-all-components` from the workflow manifest `networking`\natmos workflow apply-all-components -f networking\n```\n\n----------------------------------------\n\nTITLE: Excluding Templates from Atmos Processing\nDESCRIPTION: This YAML snippet demonstrates how to prevent Atmos from processing Go templates by using double curly braces + backtick + double curly braces instead of just double curly braces. This is useful when providing Go templates to external systems like ArgoCD or Datadog verbatim. The snippet configures ArgoCD chart values, ensuring that the Go templates inside the `body` are not processed by Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n\n    eks/argocd:\n      metadata:\n        component: \"eks/argocd\"\n      vars:\n        enabled: true\n        name: \"argocd\"\n        chart_repository: \"https://argoproj.github.io/argo-helm\"\n        chart_version: 5.46.0\n\n        chart_values:\n          template-github-commit-status:\n            message: |\n              Application {{`{{ .app.metadata.name }}`}} is now running new version.\n            webhook:\n              github-commit-status:\n                method: POST\n                path: \"/repos/{{`{{ call .repo.FullNameByRepoURL .app.metadata.annotations.app_repository }}`}}/statuses/{{`{{ .app.metadata.annotations.app_commit }}`}}\"\n                body: |\n                  {\n                    {{`{{ if eq .app.status.operationState.phase \\\"Running\\\" }}`}} \\\"state\\\": \\\"pending\\\"{{`{{end}}`}}\n                    {{`{{ if eq .app.status.operationState.phase \\\"Succeeded\\\" }}`}} \\\"state\\\": \\\"success\\\"{{`{{end}}`}}\n                    {{`{{ if eq .app.status.operationState.phase \\\"Error\\\" }}`}} \\\"state\\\": \\\"error\\\"{{`{{end}}`}}\n                    {{`{{ if eq .app.status.operationState.phase \\\"Failed\\\" }}`}} \\\"state\\\": \\\"error\\\"{{`{{end}}`}},\n                    \\\"description\\\": \\\"ArgoCD\\\",\n                    \\\"target_url\\\": \\\"{{`{{ .context.argocdUrl }}`}}/applications/{{`{{ .app.metadata.name }}`}}\\\",\n                    \\\"context\\\": \\\"continuous-delivery/{{`{{ .app.metadata.name }}`}}\\\"\n                  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos CLI\nDESCRIPTION: This YAML configuration file, `atmos.yaml`, sets up the Atmos CLI. It defines the base path for Terraform components, stack configurations, naming patterns for stacks, included and excluded paths for stack manifests, and base paths for JSON schema and OPA policy definitions. It configures Atmos to locate and process stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-inheritance.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Dependencies YAML Configuration\nDESCRIPTION: This YAML snippet illustrates how component dependencies are configured in Atmos. The `depends_on` section within the `settings` block defines which components a given component relies on.  The example shows how `component-3` depends on `component-2`, which in turn depends on `component-1`.  This configuration is used by the `atmos describe affected` command with the `--include-dependents=true` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    component-1:\n      metadata:\n        component: \"terraform-component-1\"\n      vars: {}\n\n    component-2:\n      metadata:\n        component: \"terraform-component-2\"\n      vars: {}\n      settings:\n        depends_on:\n          1:\n            component: \"component-1\"\n\n    component-3:\n      metadata:\n        component: \"terraform-component-3\"\n      vars: {}\n      settings:\n        depends_on:\n          1:\n            component: \"component-2\"\n```\n\n----------------------------------------\n\nTITLE: Run Atmos Workflow\nDESCRIPTION: This command executes the `terraform-plan-test-component-override-3-all-stacks` workflow, where the stack is defined at step level.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\natmos workflow terraform-plan-test-component-override-3-all-stacks -f workflow1\n```\n\n----------------------------------------\n\nTITLE: VPC Defaults Configuration (defaults.yaml)\nDESCRIPTION: This snippet shows the default configuration for the VPC component in `stacks/catalog/vpc/defaults.yaml`. It defines metadata, settings (including validation using JSON schema and OPA policies), and variables, and marks the component as abstract to be inherited by other components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/multiple-component-instances.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      metadata:\n        # Abstract components can't be provisioned and serve as base components (blueprints) for real components\n        type: abstract\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.0.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA Validation Schemas in atmos.yaml\nDESCRIPTION: This snippet shows how to configure OPA validation schemas in the `atmos.yaml` file. It defines the `schemas.opa.base_path` which specifies the base path for OPA policy files. This base path can also be set using the `ATMOS_SCHEMAS_OPA_BASE_PATH` environment variable or the `--schemas-opa-dir` command-line argument.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/opa.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas for OPA for validating atmos stacks and components\nschemas:\n  # https://www.openpolicyagent.org\n  opa:\n    # Can also be set using `ATMOS_SCHEMAS_OPA_BASE_PATH` ENV var, or `--schemas-opa-dir` command-line arguments\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/opa\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Component YAML Configuration\nDESCRIPTION: This YAML configuration shows how to define a Terraform component named 'vpc' within the 'components' section of an Atmos stack, using 'vars' to configure specific settings for the VPC.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/stacks.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars: # etc...\n```\n\n----------------------------------------\n\nTITLE: Describing an Atmos component and writing to a file\nDESCRIPTION: This command describes the configuration of an Atmos component and writes the output to a specified file. The `-s` flag specifies the stack, and `--file component.yaml` specifies the output file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component infra/vpc -s tenant1-ue2-dev --file component.yaml\n```\n\n----------------------------------------\n\nTITLE: Configure Dev us-east-2 Stack - YAML\nDESCRIPTION: This YAML snippet configures the top-level Atmos stack for the 'dev' account in the 'us-east-2' region. It imports the 'dev' account defaults, the 'us-east-2' region mixin, and overrides the 'vpc' component configuration for 'dev'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `dev` by importing the `catalog/vpc/dev` manifest\n  - catalog/vpc/dev\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration (atmos.yaml)\nDESCRIPTION: Configures the Atmos CLI by defining base paths for Terraform components and stacks, setting the name pattern for stacks, and including/excluding paths for stack manifests. It also specifies base paths for JSON schema and OPA policy validation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Dependency in Atmos Component YAML\nDESCRIPTION: This YAML snippet demonstrates defining a dependency on an external folder within an Atmos component's `settings.depends_on` section. The `folder` attribute specifies the path to the dependency folder.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component3:\n      metadata:\n        component: \"top-level-component1\"\n      settings:\n        depends_on:\n          1:\n            file: \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n          2:\n            folder: \"tests/fixtures/scenarios/complete/components/helmfile/infra/infra-server\"\n```\n\n----------------------------------------\n\nTITLE: Planning tfstate-backend after Backend Configuration\nDESCRIPTION: Runs a plan against the `tfstate-backend` component after a backend config file has been generated. This plan is used to migrate the Terraform state from local to the S3 backend.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform plan tfstate-backend --stack ue2-root\n```\n\n----------------------------------------\n\nTITLE: Configure OPA Base Path in atmos.yaml\nDESCRIPTION: This snippet shows how to configure the base path for OPA policies in the `atmos.yaml` configuration file. The `base_path` can be an absolute path or a path relative to the `atmos.yaml` file. This setting is used by Atmos to locate the OPA policy files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/terraform-variables.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas\nschemas:\n  # https://www.openpolicyagent.org\n  opa:\n    # Can also be set using `ATMOS_SCHEMAS_OPA_BASE_PATH` ENV var, or `--schemas-opa-dir` command-line arguments\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/opa\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Config - Main vendor.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates the main `vendor.yaml` file with imports and sources. It shows how to define dependencies on other vendor manifests and specify source components to be vendored with versioning and target paths.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config\n  description: Atmos vendoring manifest\nspec:\n  imports:\n    - \"vendor/vendor2\"\n    - \"vendor/vendor3\"\n\n  sources:\n    - component: \"vpc\"\n      source: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n      version: \"latest\"\n      targets:\n        - \"components/terraform/infra/vpc3\"\n    - component: \"vpc-flow-logs-bucket\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n      version: \"1.323.0\"\n      targets:\n        - \"components/terraform/infra/vpc-flow-logs-bucket/{{.Version}}\"\n```\n\n----------------------------------------\n\nTITLE: Configure Atlantis Workflow Templates (YAML)\nDESCRIPTION: This YAML snippet shows how to configure Atlantis workflow templates within the `settings.atlantis.workflow_templates` section of a stack configuration file (e.g., `stacks/orgs/cp/_defaults.yaml`). This allows defining custom workflows for Atlantis to use.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  atlantis:\n    workflow_templates:\n      workflow-1:\n        apply:\n          steps:\n            - run: terraform apply $PLANFILE\n        plan:\n          steps:\n            - run: terraform init\n            - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n            - run: terraform plan -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\n```\n\n----------------------------------------\n\nTITLE: Updating Stack Files with Random Names in Bash\nDESCRIPTION: Runs the `bin/random-pet.sh` script to generate random pet names and update stack files to include those uniquely generated names. Requires `yq` to be installed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/random-pet.sh\n```\n\n----------------------------------------\n\nTITLE: Executing an Atmos Workflow with Bash\nDESCRIPTION: Invokes a predefined Atmos workflow using the `atmos workflow` command. The `-f` option specifies the stack configuration file, and the `-s` option specifies the stack to use.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\natmos workflow deploy-all -f example.yaml -s example\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Component Behavior in Atmos\nDESCRIPTION: This YAML snippet shows how to configure Terraform component behavior in Atmos using the `atmos.yaml` file. It defines the command to use when running Terraform, the base path for Terraform components, and various other settings such as auto-approval for apply commands and whether to run init with reconfigure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/components.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Optional `command` specifies the executable to be called by `atmos` when running Terraform commands\n    # If not defined, `terraform` is used\n    # Examples:\n    # command: terraform\n    # command: /usr/local/bin/terraform\n    # command: /usr/local/bin/terraform-1.8\n    # command: tofu\n    # command: /usr/local/bin/tofu-1.7.1\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_COMMAND' ENV var, or '--terraform-command' command-line argument\n    command: terraform\n\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_BASE_PATH' ENV var, or '--terraform-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"components/terraform\"\n\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPLY_AUTO_APPROVE' ENV var\n    apply_auto_approve: false\n\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_DEPLOY_RUN_INIT' ENV var, or '--deploy-run-init' command-line argument\n    deploy_run_init: true\n\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_RUN_RECONFIGURE' ENV var, or '--init-run-reconfigure' command-line argument\n    init_run_reconfigure: true\n\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: true\n    init:\n      # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_PASS_VARS' ENV var, or '--init-pass-vars' command-line argument\n      pass_vars: false\n```\n\n----------------------------------------\n\nTITLE: Git over HTTPS Source Example\nDESCRIPTION: Example demonstrating the use of HTTPS for vendoring from Git repositories.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/cloudposse/terraform-null-label.git?ref={{ .Version }}\n```\n\n----------------------------------------\n\nTITLE: Example vendor.yaml configuration\nDESCRIPTION: This is an example of a complete `vendor.yaml` file. It shows how to define sources, versions, targets, and included paths for a component.  It vendors the `vpc-flow-logs-bucket` component from a GitHub repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sources:\n    - component: \"vpc-flow-logs-bucket\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n      version: \"1.323.0\"\n      targets:\n        - \"components/terraform/vpc-flow-logs-bucket\"\n      included_paths:\n        - \"**/**\"\n        # If the component's folder has the `modules` sub-folder, it needs to be explicitly defined\n        - \"**/modules/**\"\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with YAML Function Processing (bash)\nDESCRIPTION: This command describes the components affected by changes and enables/disables YAML functions processing in Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace Management in Shell\nDESCRIPTION: These shell snippets demonstrates how to navigate to a terraform component directory, initialize terraform, and list available workspaces.  The command `terraform init` initializes the working directory, and `terraform workspace list` displays all existing workspaces for the project.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n⨠ cd components/terraform/vpc\n⨠ terraform init\n⨠ terraform workspace list\ndefault\n* plat-gbl-sandbox\n  plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Logs Defaults in Layer\nDESCRIPTION: This YAML snippet imports `network-firewall-logs-bucket` and `vpc-flow-logs-bucket` component defaults into the `logs.yaml` layer. This allows the logs layer to inherit default settings for managing network firewall and VPC flow logs, facilitating consistent logging configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/network-firewall-logs-bucket/defaults\n  - catalog/vpc-flow-logs-bucket/defaults\n  # Import other Logs components\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Append User Agent\nDESCRIPTION: Example of appending a custom User-Agent string to the Terraform requests with the `atmos terraform plan` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan test/test-component -s tenant1-ue2-dev --append-user-agent \"Acme/1.0 (Build 1234; arm64)\"\n```\n\n----------------------------------------\n\nTITLE: Component Vendor Configuration YAML from OCI Registry\nDESCRIPTION: This YAML snippet shows how to vendor a Terraform component from an OCI registry, such as AWS Public ECR. The `uri` uses the `oci://` scheme to specify the OCI repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/components-manifest.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# This is an example of how to download a Terraform component from an OCI registry (https://opencontainers.org), e.g. AWS Public ECR\n\n# 'component.yaml' in the component folder is processed by the 'atmos' commands:\n# 'atmos vendor pull -c infra/vpc' or 'atmos vendor pull --component infra/vpc'\n\napiVersion: atmos/v1\nkind: ComponentVendorConfig\nmetadata:\n  name: stable/aws/vpc\n  description: Config for vendoring of the 'stable/aws/vpc' component\nspec:\n  source:\n    # Source 'uri' supports the following protocols: OCI (https://opencontainers.org), Git, Mercurial, HTTP, HTTPS, Amazon S3, Google GCP,\n    # and all URL and archive formats as described in https://github.com/hashicorp/go-getter\n    # In 'uri', Golang templates are supported  https://pkg.go.dev/text/template\n    # If 'version' is provided, '{{.Version}}' will be replaced with the 'version' value before pulling the files from 'uri'\n    # Download the component from the AWS public ECR registry (https://docs.aws.amazon.com/AmazonECR/latest/public/public-registries.html)\n    uri: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n    version: \"latest\"\n    # Only include the files that match the 'included_paths' patterns\n    # If 'included_paths' is not specified, all files will be matched except those that match the patterns from 'excluded_paths'\n    # 'included_paths' support POSIX-style Globs for file names/paths (double-star `**` is supported)\n    # https://en.wikipedia.org/wiki/Glob_(programming)\n    # https://github.com/bmatcuk/doublestar#patterns\n    included_paths:\n      - \"**/*.*\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Terraform Configuration\nDESCRIPTION: This command executes `terraform apply -auto-approve` on an Atmos component within a specific Atmos stack, applying the Terraform configuration automatically.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform deploy\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Manifest Example\nDESCRIPTION: This snippet shows an example `stacks/dev.yaml` stack manifest file. It defines the `stage` variable and configures two Terraform components: `vpc-flow-logs-bucket` and `vpc`.  It includes component metadata (pointing to the Terraform component) and variables specific to the `dev` stage.  It also demonstrates validation configurations using jsonschema and OPA policies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: dev\n\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      metadata:\n        # Point to the Terraform component\n        component: vpc-flow-logs-bucket\n      vars:\n        enabled: true\n        name: \"vpc-flow-logs\"\n        traffic_type: \"ALL\"\n        force_destroy: true\n        lifecycle_rule_enabled: false\n\n    vpc:\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings:\n        # All validation steps must succeed to allow the component to be provisioned\n        validation:\n          validate-vpc-component-with-jsonschema:\n            schema_type: jsonschema\n            schema_path: \"vpc/validate-vpc-component.json\"\n            description: Validate 'vpc' component variables using JSON Schema\n          check-vpc-component-config-with-opa-policy:\n            schema_type: opa\n            schema_path: \"vpc/validate-vpc-component.rego\"\n            # An array of filesystem paths (folders or individual files) to the additional modules for schema validation\n            # Each path can be an absolute path or a path relative to `schemas.opa.base_path` defined in `atmos.yaml`\n            # In this example, we have the additional Rego modules in `stacks/schemas/opa/catalog/constants`\n            module_paths:\n              - \"catalog/constants\"\n            description: Check 'vpc' component configuration using OPA policy\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Describe Component Output - YAML\nDESCRIPTION: Expected output from the `atmos describe component` command, showing the deep-merged overrides. It reflects how global and Terraform overrides are combined to configure a component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Final deep-merged `overrides` from all the global `overrides` and Terraform `overrides` sections\noverrides:\n  command: tofu\n  env:\n    TEST_ENV_VAR1: test-env-var1-overridden\n  settings:\n    spacelift:\n      autodeploy: true\n  vars:\n    test_1: 1\n```\n\n----------------------------------------\n\nTITLE: Generated Atlantis Config with Workflow Templates (YAML)\nDESCRIPTION: This YAML snippet shows the resulting `atlantis.yaml` file after executing `atmos atlantis generate repo-config`, incorporating the workflow templates defined in the stack configuration. This demonstrates how the `settings.atlantis.workflow_templates` section is used to configure Atlantis workflows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nworkflows:\n  workflow-1:\n    apply:\n      steps:\n        - run: terraform apply $PLANFILE\n    plan:\n      steps:\n        - run: terraform init\n        - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n        - run: terraform plan -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars\n```\n\n----------------------------------------\n\nTITLE: Component Schema YAML\nDESCRIPTION: Defines the schema for `components/$component/component.yaml`, which configures source and mixins for vendoring a component.  It specifies the source URI, version, included/excluded paths, and mixins (URI and filename).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/vendoring.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: atmos/v1\nkind: ComponentVendorConfig\nmetadata:\n  name: vpc-flow-logs-bucket-vendor-config\n  description: Source and mixins config for vendoring of 'vpc-flow-logs-bucket' component\nspec:\n  source:\n    uri: github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\n    version: 1.398.0\n    included_paths: [\"**/*.tf\"]\n    excluded_paths: [\"**/context.tf\"]\n  mixins:\n    - uri: https://raw.githubusercontent.com/cloudposse/terraform-null-label/0.25.0/exports/context.tf\n      filename: context.tf\n```\n\n----------------------------------------\n\nTITLE: Filter by stack pattern in atmos\nDESCRIPTION: This command filters the listed variables by a stack pattern. The stack pattern supports glob matching, allowing for specifying environment types such as 'dev' or 'production'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# List variables for dev stacks\natmos list vars vpc --stack '*-dev-*'\n\n# List variables for production stacks\natmos list vars vpc --stack 'prod-*'\n```\n\n----------------------------------------\n\nTITLE: Output Atmos settings in different formats\nDESCRIPTION: Demonstrates how to output the settings list in different formats: JSON, YAML, CSV, and TSV. This allows for easier parsing and integration with other tools.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --format json\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --format yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --format csv\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --format tsv\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends with Specified Format and File Template\nDESCRIPTION: These commands demonstrates the usage of both `--format` and `--file-template` flags to specify the output format and the file template for the generated backend files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --format json --file-template <file_template>\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --format hcl --file-template <file_template>\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --format backend-config --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Labels as Tags Set\nDESCRIPTION: This snippet shows the default value for `labels_as_tags`.  This set defines which labels (ID elements) should be included as tags in the `tags` output. The `name` tag's value will be the `id`, not the `name` input.  The initial setting cannot be changed in later modules.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/fixtures/scenarios/complete/components/terraform/infra/vpc-flow-logs-bucket/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[\n  \"default\"\n]</pre>\n```\n\n----------------------------------------\n\nTITLE: Configure Workflows Base Path in atmos.yaml\nDESCRIPTION: This YAML snippet shows how to configure the base path for Atmos workflows in the `atmos.yaml` CLI configuration file. The `workflows.base_path` setting specifies the directory where Atmos workflow files are located, relative to the root of the repository. This configuration allows Atmos to locate and execute workflow definitions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Base path for components, stacks and workflows configurations.\n# Can also be set using 'ATMOS_BASE_PATH' ENV var, or '--base-path' command-line argument.\n# Supports both absolute and relative paths.\n# If not provided or is an empty string, 'components.terraform.base_path', 'components.helmfile.base_path', 'stacks.base_path'\n# and 'workflows.base_path' are independent settings (supporting both absolute and relative paths).\n# If 'base_path' is provided, 'components.terraform.base_path', 'components.helmfile.base_path', 'stacks.base_path'\n# and 'workflows.base_path' are considered paths relative to 'base_path'.\nbase_path: \"\"\n\nworkflows:\n  # Can also be set using 'ATMOS_WORKFLOWS_BASE_PATH' ENV var, or '--workflows-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks/workflows\"\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles with YAML format and file template\nDESCRIPTION: Generates Terraform varfiles using YAML format and a specified file template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --file-template /{tenant}/{stage}/{region}/{component}.yaml\n```\n\n----------------------------------------\n\nTITLE: List all workflows in Atmos\nDESCRIPTION: This command lists all available Atmos workflows defined in the project. It displays the file, workflow name, and description in a tabular format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows\n```\n\n----------------------------------------\n\nTITLE: Clone with SSH Key (Bash)\nDESCRIPTION: This command uses a PEM-encoded private key to clone private repositories using SSH.  The path to the SSH key is specified using the `--ssh-key` flag and `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only --ssh-key <path_to_ssh_key>\n```\n\n----------------------------------------\n\nTITLE: Vendor Specific Atmos Component with Type\nDESCRIPTION: This command pulls the specified component from the remote repository, filtering by the specified type. The `<component>` parameter specifies the component name, and the `<terraform|helmfile>` parameter defines the type of component to vendor.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_pull_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor pull --component <component> --type <terraform|helmfile>\n```\n\n----------------------------------------\n\nTITLE: Referencing current stack name with !store using .stack\nDESCRIPTION: Demonstrates referencing the current stack name using the `.stack` template identifier within the `!store` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> {{ .stack }} <component> <key>\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backends for Specific Stacks\nDESCRIPTION: This command generates Terraform backend files for a comma-separated list of specified stacks. The stacks can be defined by their top-level stack manifest paths or derived Atmos stack names.  This allows for selective generation of backend files for specific environments and components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_backends_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform generate backends --stacks orgs/cp/tenant1/staging/us-east-2,orgs/cp/tenant2/dev/us-east-2\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - DNS\nDESCRIPTION: Configures DNS components in Atmos using a partial stack manifest. It includes importing defaults, region mixins, and DNS component catalog defaults.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/dns/defaults\n  # Import other DNS components\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for staging/us-west-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-west-2`, and overrides the VPC configuration by importing the `staging` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/staging/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `staging` by importing the `catalog/vpc/staging` manifest\n  - catalog/vpc/staging\n```\n\n----------------------------------------\n\nTITLE: Retrieving a list item from Terraform output using YQ in YAML\nDESCRIPTION: Demonstrates retrieving the first item from a list output using a YQ expression with `!terraform.output`. This assumes that the `private_subnet_ids` output of the `vpc` component is a list.  The YQ expression `[0]` retrieves the first element of the list.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsubnet_id1: !terraform.output vpc .private_subnet_ids[0]\n```\n\n----------------------------------------\n\nTITLE: Configure Plat OU Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'plat' OU. It imports the 'acme' organization defaults and the 'plat' tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/_defaults\n  - mixins/tenant/plat\n```\n\n----------------------------------------\n\nTITLE: Terraform Stage Variable Example (YAML)\nDESCRIPTION: Illustrates the optional `vars.stage` attribute within a Terraform component's configuration in an Atmos stack. This demonstrates how to define the stage where workloads run, adhering to the `terraform-null-label` convention.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  # Production stage\n  stage: prod\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows (Basic Usage)\nDESCRIPTION: Demonstrates the basic usage of the `atmos describe workflows` command to list configured workflows. This command outputs a list of objects containing the workflow manifest file name and the workflow name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows [options]\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Data Components\nDESCRIPTION: Defines a partial stack manifest for data components in Atmos, importing defaults, mixins, and component catalogs for Aurora Postgres, MSK, and EFS components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/aurora-postgres/defaults\n  - catalog/msk/defaults\n  - catalog/efs/defaults\n  # Import other Data components\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/prod/us-east-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `prod` account, and `us-east-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/prod/_defaults\n  - mixins/region/us-east-2\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration Examples\nDESCRIPTION: These are example commands using the Atmos CLI to describe the config with different options, such as specifying yaml or json output formats and querying the config.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-config.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos describe config\natmos describe config -f yaml\natmos describe config --format yaml\natmos describe config -f json\natmos describe config --query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: VPC Component Instances Configuration\nDESCRIPTION: This snippet shows the configuration for two VPC component instances (`vpc/1` and `vpc/2`) in the `stacks/orgs/acme/plat/prod/us-east-2.yaml` stack manifest. Each instance inherits from the `vpc/defaults` and overrides specific variables such as `name` and `ipv4_primary_cidr_block`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/multiple-component-instances.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  import:\n    - orgs/acme/plat/prod/_defaults\n    - mixins/region/us-east-2\n    # Import the defaults for all VPC components\n    - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    # Atmos component `vpc/1`\n    vpc/1:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/1` component\n      vars:\n        name: vpc-1\n        ipv4_primary_cidr_block: 10.9.0.0/18\n\n    # Atmos component `vpc/2`\n    vpc/2:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n        # Inherit the defaults for all VPC components\n        inherits:\n          - vpc/defaults\n      # Define/override variables specific to this `vpc/2` component\n      vars:\n        name: vpc-2\n        ipv4_primary_cidr_block: 10.10.0.0/18\n        map_public_ip_on_launch: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags in Networking Layer - YAML\nDESCRIPTION: This snippet configures the `networking` layer in Atmos to include 'Layer' and 'Team' tags for Terraform components. It imports component manifests and overrides variables to add the specified tags. This configuration is placed in the `stacks/layers/networking.yaml` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/vpc/defaults\n  # Import other Networking components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: networking\n        Team: Networking managers\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow Examples\nDESCRIPTION: Provides examples of how to use the `atmos workflow` command with different options and arguments. These examples demonstrate how to execute workflows, specify workflow files, perform dry runs, and start from specific steps.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/workflow.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow\natmos workflow plan-all-vpc --file networking\natmos workflow apply-all-components -f networking --dry-run\natmos workflow test-1 -f workflow1 --from-step step2\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Completion Command\nDESCRIPTION: Executes the `atmos completion` command to generate completion scripts for various shells.  The shell type is specified as an argument.  Example usage for bash, zsh, fish, and powershell are provided.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos completion [bash|zsh|fish|powershell]\n```\n\n----------------------------------------\n\nTITLE: Setup Atmos Workflow\nDESCRIPTION: This workflow demonstrates how to use the `cloudposse/github-action-setup-atmos` GitHub Action to install Atmos in a GitHub Actions workflow. It checks out the repository, sets up Atmos, and allows specifying the Atmos version. The workflow triggers on workflow dispatch and pull requests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/setup-atmos.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  workflow_dispatch:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Atmos\n        uses: cloudposse/github-action-setup-atmos\n        with:\n          # Version can be pinned but defaults to latest if not specified\n          atmos-version: 1.88.0\n```\n\n----------------------------------------\n\nTITLE: Query specific metadata with JMESPath using atmos\nDESCRIPTION: This command uses JMESPath queries to extract and display specific metadata fields. It allows for precise selection of metadata attributes like component names, types, or versions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-metadata.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Query component names\natmos list metadata --query '.metadata.component'\n\n# Query component types\natmos list metadata --query '.metadata.type'\n\n# Query component versions\natmos list metadata --query '.metadata.version'\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles in YAML format\nDESCRIPTION: Generates Terraform varfiles in YAML format with a specified file template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --format yaml --file-template <file_template>\n```\n\n----------------------------------------\n\nTITLE: VPC Configuration for us-west-2 Region\nDESCRIPTION: This YAML configuration imports the default VPC configuration and overrides the `availability_zones` variable for the `us-west-2` region.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-west-2a\n          - us-west-2b\n          - us-west-2c\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for prod/us-west-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-west-2`, and overrides the VPC configuration by importing the `prod` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `prod` by importing the `catalog/vpc/prod` manifest\n  - catalog/vpc/prod\n```\n\n----------------------------------------\n\nTITLE: Describe Component: Disable YAML Function Processing\nDESCRIPTION: This command describes a component within a specified stack and disables YAML function processing.  The `<component>` and `<stack>` parameters are required. The `--process-functions` flag is set to `false` to disable YAML function processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_component_usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe component <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Configure Account Defaults in YAML (org2/plat/prod)\nDESCRIPTION: This YAML configuration defines default settings for the `org2` organization, `plat` tenant, and `prod` account. It imports the tenant defaults and the `prod` stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org2/plat/_defaults\n  - mixins/stage/prod\n```\n\n----------------------------------------\n\nTITLE: Overriding Terraform Workspace Name in YAML\nDESCRIPTION: This YAML snippet shows how to override the default terraform workspace by setting the `terraform_workspace` property in the metadata for a component in a root stack configuration.  This is used when renaming components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# root stack: plat-ue2-dev\nimport:\n  - catalog/vpc\n\ncomponents:\n  terraform:\n    vpc1:\n      metadata:\n        terraform_workspace: plat-ue2-dev\n        component: vpc\n        inherits:\n          - vpc/defaults\n      vars:\n        name: vpc\n```\n\n----------------------------------------\n\nTITLE: Using !store function with default value\nDESCRIPTION: Demonstrates how to provide a default value to the `!store` function, which will be returned if the key is not found in the store.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> <stack> <component> <key> | default <default-value>\n```\n\n----------------------------------------\n\nTITLE: Output Atmos workflows in CSV format\nDESCRIPTION: This command outputs the list of Atmos workflows in CSV format, which is compatible with spreadsheet applications. The default delimiter is a comma.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows --format csv\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for staging/us-east-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-east-2`, and overrides the VPC configuration by importing the `staging` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/staging/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `staging` by importing the `catalog/vpc/staging` manifest\n  - catalog/vpc/staging\n```\n\n----------------------------------------\n\nTITLE: Overriding Variables in Atmos Component\nDESCRIPTION: This YAML snippet demonstrates how to override all variables inherited from a base component in Atmos. The `derived-component-3` imports and inherits from `base-component-4` but overrides all of its variables, effectively breaking the direct dependency for the `deps` output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the base component config\nimport:\n  - catalog/terraform/base-component-4\n\ncomponents:\n  terraform:\n    derived-component-3:\n      metadata:\n        component: \"test/test-component\"  # Point to the Terraform/OpenTofu component\n        inherits:\n          # Inherit all the values from the base component\n          - base-component-4\n      vars:\n        # Override all the variables from the base component\n```\n\n----------------------------------------\n\nTITLE: Vendoring Components with Specific Tags using Atmos\nDESCRIPTION: Downloads and vendors components and artifacts tagged with the specified tags. This allows for filtering components based on their tags when vendoring.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull --tags <tag1>,<tag2>\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands with Atmos\nDESCRIPTION: This command allows the execution of arbitrary `terraform` commands through the Atmos CLI, providing a wrapper for Terraform operations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Docs Help\nDESCRIPTION: Displays the help information for the `atmos docs` subcommand, used to generate documentation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\natmos docs --help\n```\n\n----------------------------------------\n\nTITLE: Running Atmos CLI\nDESCRIPTION: Starts the interactive UI of the Atmos CLI.  This UI allows selection of Atmos commands, components, and stacks to execute commands against. No dependencies are required, assumes the Atmos CLI is installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/cli.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos\n```\n\n----------------------------------------\n\nTITLE: Using !template to Process Map Output YAML\nDESCRIPTION: This snippet demonstrates how to use the `!template` function to process the output of type map from the `atmos.Component` template function in the current stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvar2: !template '{{ toJson (atmos.Component \"component1\" .stack).outputs.test_map }}'\n```\n\n----------------------------------------\n\nTITLE: Configure Validation Schemas - YAML\nDESCRIPTION: This YAML snippet shows how to configure the `schemas` section in `atmos.yaml` to enable JSON Schema validation.  It defines the base path where JSON schema files are located, which can be an absolute or relative path and can also be set by environment variable `ATMOS_SCHEMAS_JSONSCHEMA_BASE_PATH`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/json-schema.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # https://json-schema.org\n  jsonschema:\n    # Can also be set using `ATMOS_SCHEMAS_JSONSCHEMA_BASE_PATH` ENV var, or `--schemas-jsonschema-dir` command-line arguments\n    # Supports both absolute and relative paths\n    base_path: \"stacks/schemas/jsonschema\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Pro Stack Lock Command\nDESCRIPTION: Locks an Atmos stack in Atmos Pro to prevent concurrent planning or applying. The command requires the component and stack names and allows setting a TTL (time-to-live) and a message to display to other users.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/pro/pro-lock.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos pro lock --component <component> --stack <stack> --ttl <ttl> --message <message>\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with verbose output to stdout for affected components\nDESCRIPTION: Combines `--affected-only`, `--output-path`, and `--verbose` for detailed output of affected components to stdout.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --output-path /dev/stdout --verbose=true\n```\n\n----------------------------------------\n\nTITLE: Describe Component Settings - YAML\nDESCRIPTION: This snippet shows the output of the `atmos describe component` command for the settings of a component, including the final value and the stack dependencies, which represent the inheritance chain and override history of the settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  settings:\n    spacelift:\n      final_value:\n        protect_from_deletion: true\n        stack_destructor_enabled: false\n        stack_name_pattern: '{tenant}-{environment}-{stage}-new-component'\n        workspace_enabled: false\n      name: spacelift\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.settings\n          variable_value:\n            workspace_enabled: false\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-2\n          stack_file_section: components.terraform.settings\n          variable_value:\n            stack_name_pattern: '{tenant}-{environment}-{stage}-new-component'\n            workspace_enabled: true\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.settings\n          variable_value:\n            workspace_enabled: true\n        - dependency_type: import\n          stack_file: catalog/terraform/spacelift-and-backend-override-1\n          stack_file_section: settings\n          variable_value:\n            protect_from_deletion: true\n            stack_destructor_enabled: false\n            workspace_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Vendor Pull Command\nDESCRIPTION: This snippet shows the output of the `atmos vendor pull` command, demonstrating how Atmos fetches and stores the vendored components into the specified directories. The command processes the `vendor.yaml` config file, pulling sources from remote repositories based on the defined configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/vendor-components.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nProcessing vendor config file 'vendor.yaml'\n\nPulling sources for the component 'vpc'\nfrom 'github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref=1.343.1'\ninto 'components/terraform/vpc'\n\nPulling sources for the component 'vpc-flow-logs-bucket'\nfrom 'github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref=1.343.1'\ninto 'components/terraform/vpc-flow-logs-bucket/1.343.1'\n```\n\n----------------------------------------\n\nTITLE: Example: Compare plan with current config\nDESCRIPTION: Compares an existing Terraform plan (`orig.plan`) with a new plan generated using the current configuration for the `myapp` component in the `dev` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-plan-diff.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan-diff myapp -s dev --orig=orig.plan\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Vendor Pull Command\nDESCRIPTION: Downloads all the remote artifacts defined in the `vendor.yaml` manifest. This command is typically executed in the root of the infrastructure repository, or where the `base_path` setting points in the `atmos.yaml` CLI configuration file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Pull Command Examples\nDESCRIPTION: Illustrates different variations of the `atmos vendor pull` command. These examples demonstrate how to pull all artifacts, pull by component name, and pull by tags. They are used after creating the `vendor.yaml` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# atmos vendor pull \n# atmos vendor pull --everything\n# atmos vendor pull --component vpc-mixin-1\n# atmos vendor pull -c vpc-mixin-2\n# atmos vendor pull -c vpc-mixin-3\n# atmos vendor pull -c vpc-mixin-4\n# atmos vendor pull --tags test\n# atmos vendor pull --tags networking,storage\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration for 'staging' Environment\nDESCRIPTION: This snippet shows the environment-specific configuration for the 'staging' environment, located in `stacks/deploy/staging.yaml`.  It imports the baseline configuration and overrides the location and language variables for the staging environment. The `stage` variable is set globally, and the `latitude`, `longitude`, and `language` settings are specific to the `station` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - catalog/station\n\nvars:\n  stage: staging\n\ncomponents:\n  terraform:\n    station:\n      vars:\n        location:\n          latitude: '37.7749'\n          longitude: '-122.4194'\n        language: fr-CA\n```\n\n----------------------------------------\n\nTITLE: Using Gomplate Datasources in Terraform Variables (YAML)\nDESCRIPTION: This snippet shows how to use Gomplate datasources within Terraform variables defined in a YAML configuration file. It demonstrates accessing the 'ip', 'config-1', and 'config-2' datasources to populate Terraform variables with values retrieved from these datasources. The `datasource` function is used to fetch data within the Go template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nterraform:\n  vars:\n    tags:\n      provisioned_by_ip: '{{ (datasource \"ip\").ip }}'\n      config1_tag: '{{ (datasource \"config-1\").tag }}'\n      config2_service_name: '{{ (datasource \"config-2\").service.name }}'\n```\n\n----------------------------------------\n\nTITLE: Terraform Deploy Root Modules with Atmos\nDESCRIPTION: Deploys Terraform configurations using Atmos, allowing specifying a component, stack, plan file, and variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy\natmos terraform deploy $component --stack $stack -out $planfile\natmos terraform deploy $component --stack $stack -var \"key=value\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Configuration Directory Structure\nDESCRIPTION: This example shows the directory structure of Atmos stack configurations, including component-specific defaults, tenant-specific defaults (mixins), region-specific defaults (mixins), stage-specific defaults (mixins), and organization-specific configurations.  It illustrates how Atmos organizes stack configurations for different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-inheritance.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration (stack manifests)\n   │   ├── stacks\n   │   │   ├── catalog  # component-specific defaults\n   │   │   │   └── vpc\n   │   │   │       └── defaults.yaml\n   │   │   ├── mixins\n   │   │   │   ├── tenant  # tenant-specific defaults\n   │   │   │   │   └── plat.yaml\n   │   │   │   ├── region  # region-specific defaults\n   │   │   │   │   ├── us-east-2.yaml\n   │   │   │   │   └── us-west-2.yaml\n   │   │   │   └── stage  # stage-specific defaults\n   │   │   │       ├── dev.yaml\n   │   │   │       ├── staging.yaml\n   │   │   │       └── prod.yaml\n   │   └── orgs  # Organizations\n   │       └── acme\n   │           ├── _defaults.yaml\n   │           └── plat  # 'plat' represents the \"Platform\" OU (a.k.a tenant)\n   │               ├── _defaults.yaml\n   │               ├── dev\n   │               │   ├── _defaults.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               ├── staging\n   │               │   ├── _defaults.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               └── prod\n   │                   ├── _defaults.yaml\n   │                   ├── us-east-2.yaml\n   │                   └── us-west-2.yaml\n   │   # Centralized library of reusable components\n   └── components\n       └── terraform  # Terraform components (a.k.a. Terraform \"root\" modules)\n           └── vpc\n```\n\n----------------------------------------\n\nTITLE: Fetching and Updating Component in Shell\nDESCRIPTION: This shell snippet shows how to fetch a component configuration using `wget`, update a string in the component using `sed`, and vendor the component using `atmos vendor pull`. The example targets the `vpc` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n⨠ wget https://raw.githubusercontent.com/cloudposse/atmos/main/examples/quick-start-advanced/components/terraform/vpc/component.yaml -O components/terraform/vpc/component.yaml\n⨠ sed -i 's,infra/vpc-flow-logs-bucket,vpc,g' components/terraform/vpc/component.yaml\n⨠ atmos vendor pull -c vpc\n```\n\n----------------------------------------\n\nTITLE: Validating All Stacks using Atmos CLI\nDESCRIPTION: This command validates all Stack configurations and YAML syntax. It checks for YAML errors, import validity, schema correctness, and misconfiguration of components across all stack manifest files in the Atmos project. No arguments are required.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/validate.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Overriding Availability Zones\nDESCRIPTION: These YAML snippets demonstrate how availability zones can be configured, first globally in a global region file and then within the catalog in the `vpc.yaml` file. The global region configuration utilizes the full names including the region, and the catalog configuration uses shortened names to allow the same definition across multiple regions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvpc:\n  availability_zones:\n    - us-east-1a\n    - us-east-1b\n    - us-east-1c\n```\n\nLANGUAGE: yaml\nCODE:\n```\navailability_zones:\n  - a\n  - b\n  - c\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Flags in Atmos (YAML)\nDESCRIPTION: This YAML snippet configures a `hello` command that accepts a flag `-n` or `--name`. This flag specifies the name to greet. This is an example showcasing how to use flags in Atmos custom commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# subcommands\ncommands:\n  - name: hello\n    description: This command says hello to the provided name\n    flags:\n      - name: name\n        shorthand: n\n        description: Name to greet\n        required: true\n    steps:\n      - \"echo Hello {{ .Flags.name }}!\"\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Component and Workspace in Shell\nDESCRIPTION: This shell snippet demonstrates how to describe an Atmos component using the `atmos describe component` command and then filters the output to retrieve the workspace information using `grep`.  It specifies the component name (`vpc`) and stack (`plat-ue2-dev`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n⨠ atmos describe component vpc --stack plat-ue2-dev | grep ^workspace\nworkspace: plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Tenant Defaults in YAML (org1/plat)\nDESCRIPTION: This YAML configuration defines default settings for the `org1` organization and `plat` tenant. It imports the organization defaults and the `plat` tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/_defaults\n  - mixins/tenant/plat\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Description in YAML\nDESCRIPTION: This YAML snippet represents the complete description of an Atmos component. It includes information about the Atlantis project, Atmos CLI configuration, component details, dependencies, environment variables, imports, inheritance, metadata, remote state backend, settings, sources of configuration values, and variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\natlantis_project: tenant1-ue2-dev-test-test-component-override-3\natmos_cli_config:\n  base_path: ./tests/fixtures/scenarios/complete\n  components:\n    terraform:\n      base_path: components/terraform\n      apply_auto_approve: false\n      deploy_run_init: true\n      init_run_reconfigure: true\n      auto_generate_backend_file: false\n  stacks:\n    base_path: stacks\n    included_paths:\n      - orgs/**/*\n    excluded_paths:\n      - '**/_defaults.yaml'\n    name_pattern: '{tenant}-{environment}-{stage}'\n  workflows:\n    base_path: stacks/workflows\natmos_component: test/test-component-override-3\natmos_stack: tenant1-ue2-dev\natmos_stack_file: orgs/cp/tenant1/dev/us-east-2\nbackend:\n  bucket: cp-ue2-root-tfstate\n  dynamodb_table: cp-ue2-root-tfstate-lock\n  key: terraform.tfstate\n  region: us-east-2\n  workspace_key_prefix: test-test-component\nbackend_type: s3\ncommand: terraform\ncomponent: test/test-component\ncomponent_info:\n  component_path: tests/fixtures/scenarios/complete/components/terraform/test/test-component\n  component_type: terraform\n  terraform_config:\n    path: tests/fixtures/scenarios/complete/components/terraform/test/test-component\n    variables:\n      enabled:\n        name: enabled\n        type: bool\n        description: Set to false to prevent the module from creating any resources\n        default: null\n        required: false\n        sensitive: false\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/context.tf\n          line: 97\n      name:\n        name: name\n        type: string\n        description: |\n          ID element. Usually the component or solution name, e.g. 'app' or 'jenkins'.\n          This is the only ID element not also included as a `tag`.\n          The \"name\" tag is set to the full `id` string. There is no tag with the value of the `name` input.\n        default: null\n        required: false\n        sensitive: false\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/context.tf\n          line: 127\n      service_1_name:\n        name: service_1_name\n        type: string\n        description: Service 1 name\n        default: null\n        required: true\n        sensitive: false\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/variables.tf\n          line: 6\n    outputs:\n      service_1_id:\n        name: service_1_id\n        description: Service 1 ID\n        sensitive: false\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/outputs.tf\n          line: 1\n      service_2_id:\n        name: service_2_id\n        description: Service 2 ID\n        sensitive: false\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/outputs.tf\n          line: 6\n    modulecalls:\n      service_1_label:\n        name: service_1_label\n        source: cloudposse/label/null\n        version: 0.25.0\n        pos:\n          filename: tests/fixtures/scenarios/complete/components/terraform/test/test-component/main.tf\n          line: 1\n    diagnostics: []\ndeps:\n  - catalog/terraform/mixins/test-2\n  - catalog/terraform/services/service-1-override-2\n  - catalog/terraform/services/service-2-override-2\n  - catalog/terraform/spacelift-and-backend-override-1\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override-3\n  - mixins/region/us-east-2\n  - mixins/stage/dev\n  - orgs/cp/_defaults\n  - orgs/cp/tenant1/_defaults\n  - orgs/cp/tenant1/dev/us-east-2\ndeps_all:\n  - catalog/terraform/mixins/test-1\n  - catalog/terraform/mixins/test-2\n  - catalog/terraform/services/service-1\n  - catalog/terraform/services/service-1-override\n  - catalog/terraform/services/service-1-override-2\n  - catalog/terraform/services/service-2\n  - catalog/terraform/services/service-2-override\n  - catalog/terraform/services/service-2-override-2\n  - catalog/terraform/spacelift-and-backend-override-1\n  - catalog/terraform/tenant1-ue2-dev\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override\n  - catalog/terraform/test-component-override-2\n  - catalog/terraform/test-component-override-3\n  - mixins/region/us-east-2\n  - mixins/stage/dev\n  - orgs/cp/_defaults\n  - orgs/cp/tenant1/_defaults\n  - orgs/cp/tenant1/dev/us-east-2\nenv:\n  TEST_ENV_VAR1: val1-override-3\n  TEST_ENV_VAR2: val2-override-3\n  TEST_ENV_VAR3: val3-override-3\n  TEST_ENV_VAR4: null\nimports:\n  - catalog/terraform/mixins/test-1\n  - catalog/terraform/mixins/test-2\n  - catalog/terraform/services/service-1\n  - catalog/terraform/services/service-1-override\n  - catalog/terraform/services/service-1-override-2\n  - catalog/terraform/services/service-2\n  - catalog/terraform/services/service-2-override\n  - catalog/terraform/services/service-2-override-2\n  - catalog/terraform/services/top-level-service-1\n  - catalog/terraform/services/top-level-service-2\n  - catalog/terraform/spacelift-and-backend-override-1\n  - catalog/terraform/tenant1-ue2-dev\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override\n  - catalog/terraform/test-component-override-2\n  - catalog/terraform/test-component-override-3\n  - catalog/terraform/top-level-component1\n  - catalog/terraform/vpc\n  - mixins/region/us-east-2\n  - mixins/stage/dev\n  - orgs/cp/_defaults\n  - orgs/cp/tenant1/_defaults\n  - orgs/cp/tenant1/dev/_defaults\ninheritance:\n  - mixin/test-2\n  - mixin/test-1\n  - test/test-component-override-2\n  - test/test-component-override\n  - test/test-component\nmetadata:\n  component: test/test-component\n  inherits:\n    - test/test-component-override\n    - test/test-component-override-2\n    - mixin/test-1\n    - mixin/test-2\n  terraform_workspace: test-component-override-3-workspace\nremote_state_backend:\n  bucket: cp-ue2-root-tfstate\n  dynamodb_table: cp-ue2-root-tfstate-lock\n  region: us-east-2\n  workspace_key_prefix: test-test-component\nremote_state_backend_type: s3\nsettings:\n  config:\n    is_prod: false\n  spacelift:\n    protect_from_deletion: true\n    stack_destructor_enabled: false\n    stack_name_pattern: '{tenant}-{environment}-{stage}-new-component'\n    workspace_enabled: false\nsources:\n  backend:\n    bucket:\n      final_value: cp-ue2-root-tfstate\n      name: bucket\n      stack_dependencies:\n        - stack_file: catalog/terraform/spacelift-and-backend-override-1\n          stack_file_section: terraform.backend.s3\n          dependency_type: import\n          variable_value: cp-ue2-root-tfstate\n        - stack_file: orgs/cp/_defaults\n          stack_file_section: terraform.backend.s3\n          dependency_type: import\n          variable_value: cp-ue2-root-tfstate\n    dynamodb_table:\n      final_value: cp-ue2-root-tfstate-lock\n      name: dynamodb_table\n      stack_dependencies:\n        - stack_file: catalog/terraform/spacelift-and-backend-override-1\n          stack_file_section: terraform.backend.s3\n          dependency_type: import\n          variable_value: cp-ue2-root-tfstate-lock\n        - stack_file: orgs/cp/_defaults\n          stack_file_section: terraform.backend.s3\n          dependency_type: import\n          variable_value: cp-ue2-root-tfstate-lock\n  env:\n    TEST_ENV_VAR1:\n      final_value: val1-override-3\n      name: TEST_ENV_VAR1\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.env\n          variable_value: val1-override-3\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-2\n          stack_file_section: components.terraform.env\n          variable_value: val1-override-2\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override\n          stack_file_section: components.terraform.env\n          variable_value: val1-override\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.env\n          variable_value: val1\n  settings:\n    spacelift:\n      final_value:\n        protect_from_deletion: true\n        stack_destructor_enabled: false\n        stack_name_pattern: '{tenant}-{environment}-{stage}-new-component'\n        workspace_enabled: false\n      name: spacelift\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-3\n          stack_file_section: components.terraform.settings\n          variable_value:\n            workspace_enabled: false\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component-override-2\n          stack_file_section: components.terraform.settings\n          variable_value:\n            stack_name_pattern: '{tenant}-{environment}-{stage}-new-component'\n            workspace_enabled: true\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.settings\n          variable_value:\n            workspace_enabled: true\n        - dependency_type: import\n          stack_file: catalog/terraform/spacelift-and-backend-override-1\n          stack_file_section: settings\n          variable_value:\n            protect_from_deletion: true\n            stack_destructor_enabled: false\n            workspace_enabled: true\n  vars:\n    enabled:\n      final_value: true\n      name: enabled\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.vars\n          variable_value: true\n        - dependency_type: inline\n          stack_file: orgs/cp/tenant1/dev/us-east-2\n          stack_file_section: terraform.vars\n          variable_value: false\n    # Other variables are omitted for clarity\nvars:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining Gomplate S3 Datasource and Tags in Atmos Stack Manifest\nDESCRIPTION: This configuration shows how to define environment variables, the `s3-tags` Gomplate datasource, and the `terraform.vars.tags` section within an Atmos stack manifest. The `url` uses a Go template to dynamically construct the S3 bucket path based on the stage, enabling environment-specific tag retrieval.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the default configuration for all VPCs in the infrastructure\n  - catalog/vpc/defaults\n\n# Global settings\nsettings:\n  templates:\n    settings:\n      # Environment variables passed to data sources when evaluating templates\n      # https://docs.gomplate.ca/functions/aws/#configuring-aws\n      # https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html\n      env:\n        # AWS profile with permissions to access the S3 bucket\n        AWS_PROFILE: \"<AWS profile>\"\n      gomplate:\n        # Timeout in seconds to execute the data sources\n        timeout: 5\n        # https://docs.gomplate.ca/datasources\n        datasources:\n          # `s3` datasource\n          # https://docs.gomplate.ca/datasources/#using-s3-datasources\n          s3-tags:\n            # The `url` uses a `Go` template with the delimiters `${ }`,\n            # which is processed as first step in the template processing pipeline\n            url: \"s3://mybucket/{{ .vars.stage }}/tags.json\"\n\n# Global Terraform config\nterraform:\n  # Global variables that are used by all Atmos components\n  vars:\n    tags:\n      atmos_component: \"{{ .atmos_component }}\"\n      atmos_stack: \"{{ .atmos_stack }}\"\n      terraform_component: \"{{ .component }}\"\n      terraform_workspace: \"{{ .workspace }}\"\n      devops_team: '{{`{{ (datasource \\\"s3-tags\\\").tags.devops_team }}`}}'\n      billing_team: '{{`{{ (datasource \\\"s3-tags\\\").tags.billing_team }}`}}'\n      service: '{{`{{ (datasource \\\"s3-tags\\\").tags.service }}`}}'\n\n# Atmos component configurations\ncomponents:\n  terraform:\n    vpc/1:\n      metadata:\n        component: vpc  # Point to the Terraform component in `components/terraform/vpc` folder\n        inherits:\n          # Inherit from the `vpc/defaults` base Atmos component, which defines the default\n          # configuration for all VPCs in the infrastructure.\n          # The `vpc/defaults` base component is defined in the `catalog/vpc/defaults`\n          # manifest (which is imported above).\n          # This inheritance makes the `vpc/1` Atmos component config DRY.\n          - \"vpc/defaults\"\n      vars:\n        name: \"vpc-1\"\n```\n\n----------------------------------------\n\nTITLE: List Components with Atmos\nDESCRIPTION: Lists all available components using the Atmos CLI. This command requires the Atmos CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos list components\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration to Override Terraform Workspaces\nDESCRIPTION: This YAML snippet demonstrates overriding Terraform workspaces for Atmos components using `metadata.terraform_workspace` and `metadata.terraform_workspace_pattern`. `vpc/1`'s workspace is explicitly set, while `vpc/2`'s workspace is generated using a pattern.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  environment: ue2\n  stage: dev\n\ncomponents:\n  terraform:\n    vpc/1:\n      metadata:\n        component: vpc\n        # Override Terraform workspace\n        terraform_workspace: \"vpc-1-workspace-override\"\n\n    vpc/2:\n      metadata:\n        component: vpc\n        # Override Terraform workspace\n        terraform_workspace_pattern: \"{environment}-{stage}-{component}-workspace-override\"\n```\n\n----------------------------------------\n\nTITLE: Use Data Source in stack.yaml\nDESCRIPTION: This snippet demonstrates how to use a configured data source in a stack configuration file to fetch the public IP and use it as a tag for Terraform resources. It assumes the Terraform component accepts a `tags` variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/share-data.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  vars:\n    tags:\n      provisioned_by_ip: '{{ (datasource \"ip\").ip }}'\n```\n\n----------------------------------------\n\nTITLE: Generate Atlantis Projects for Specified Stacks (Bash)\nDESCRIPTION: This command generates Atlantis projects for the stacks specified using the `--stacks` flag. The stacks are provided as comma-separated values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --config-template <config_template> --project-template <project_template> --stacks <stack1>,<stack2>\n$ atmos atlantis generate repo-config --config-template <config_template> --project-template <project_template> --stacks orgs/cp/tenant1/staging/us-east-2,orgs/cp/tenant2/dev/us-east-2\n$ atmos atlantis generate repo-config --config-template <config_template> --project-template <project_template> --stacks tenant1-ue2-staging,tenant1-ue2-prod\n$ atmos atlantis generate repo-config --config-template <config_template> --project-template <project_template> --stacks orgs/cp/tenant1/staging/us-east-2,tenant1-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Vendor All Atmos Components\nDESCRIPTION: This command vendors all available components from the remote repository. The `--everything` flag indicates that all components should be pulled, regardless of any specific filters or configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_pull_usage.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor pull --everything\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command Example\nDESCRIPTION: Example usage of the `atmos terraform plan` command to generate a Terraform plan for a specific component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan test/test-component-override-3 -s tenant1-ue2-dev\natmos terraform plan test/test-component-override-3 -s tenant1-ue2-dev --skip-lock-file\natmos terraform plan test/test-component-override-2 -s tenant1-ue2-dev --redirect-stderr /dev/stdout\natmos terraform plan test/test-component-override -s tenant1-ue2-dev --redirect-stderr ./errors.txt\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC with Atmos CLI\nDESCRIPTION: These Atmos commands are used to provision the `vpc/1` component in the `ue2-dev` stack. The `terraform plan` command generates an execution plan, and the `terraform apply` command applies the changes to create or modify the infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan vpc/1 -s ue2-dev\natmos terraform apply vpc/1 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Git SSH SCP-style Source Example\nDESCRIPTION: Example demonstrating the use of SCP-style sources for vendoring from non-public Git repositories using SSH.  Atmos rewrites the URL to include the ssh:// scheme.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit::git@github.com:cloudposse/terraform-null-label.git?ref={{.Version}}\n```\n\n----------------------------------------\n\nTITLE: Include abstract components in atmos\nDESCRIPTION: This command includes abstract components in the listing. Abstract components are typically base configurations that are inherited by other components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos list vars vpc --abstract\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backends with File Template and JSON Format\nDESCRIPTION: This command generates backend config files using the `--file-template` option to specify the output file path and naming convention, and the `--format json` option to generate files in JSON format. This example demonstrates how to customize the output location and the file format of the generated backend configuration files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backends.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template {component-path}/{tenant}/{environment}-{stage}.tf.json --format json\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --file-template {component-path}/backends/{tenant}-{environment}-{stage}.tf.json --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring General Terminal Settings in Atmos\nDESCRIPTION: This code snippet demonstrates how to configure general terminal settings in the `atmos.yaml` file. It shows settings for maximum width, pager, colored output, and Unicode character usage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/terminal.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  terminal:\n    max_width: 120        # Maximum width for terminal output\n    pager: true          # Pager setting for all terminal output\n    colors: true          # Enable colored output\n    unicode: true         # Use Unicode characters in output\n```\n\n----------------------------------------\n\nTITLE: Atmos Command in GitHub Action\nDESCRIPTION: This snippet demonstrates how to execute the `atmos atlantis generate repo-config` command with the `--affected-only=true` and `--repo-path` flags within a GitHub Action.  It assumes the target repository has already been cloned using the `checkout` action and uses the `$GITHUB_WORKSPACE` environment variable to specify the path to the cloned repository.  Requires the `atmos` CLI tool to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --repo-path $GITHUB_WORKSPACE\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config and output to stdout\nDESCRIPTION: This example uses the `--output-path` flag to print generated configuration to standard output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --output-path /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Simple Atmos Project Layout\nDESCRIPTION: This is a simplified folder structure for Atmos projects with three deployments (dev, staging, prod). It shows the basic arrangement of components and stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/layout.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── components/          # Folder containing all your components, usually organized by toolchain\n│   └── terraform/       # Folder for all Terraform \"root modules\"\n└── stacks/\n    ├── deploy/          # Folder for deployable stacks\n    │   ├── dev/         # Folder for development environment configurations\n    │   ├── staging/     # Folder for staging environment configurations\n    │   └── prod/        # Folder for production environment configurations\n    ├── catalog/         # Folder for the service catalog\n    ├── schemas/         # Folder for the schema validations\n    └── workflows/       # Folder for workflows that operate on top of stacks\n```\n\n----------------------------------------\n\nTITLE: Atmos Directory Structure\nDESCRIPTION: This code represents a directory structure of an Atmos project, showcasing the organization of stacks, components, and configurations. It illustrates the file paths for component defaults, layer definitions, mixins, and organizational settings within the Atmos framework.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration (stack manifests)\n   ├── stacks\n   │   ├── catalog  # component-specific defaults\n   │   │   ├── alb\n   │   │   │   └── defaults.yaml\n   │   │   ├── aurora-postgres\n   │   │   │   └── defaults.yaml\n   │   │   ├── dns\n   │   │   │   └── defaults.yaml\n   │   │   ├── eks\n   │   │   │   └── defaults.yaml\n   │   │   ├── efs\n   │   │   │   └── defaults.yaml\n   │   │   ├── msk\n   │   │   │   └── defaults.yaml\n   │   │   ├── ses\n   │   │   │   └── defaults.yaml\n   │   │   ├── sns-topic\n   │   │   │   └── defaults.yaml\n   │   │   ├── network-firewall\n   │   │   │   └── defaults.yaml\n   │   │   ├── network-firewall-logs-bucket\n   │   │   │   └── defaults.yaml\n   │   │   ├── waf\n   │   │   │   └── defaults.yaml\n   │   │   ├── vpc\n   │   │   │   └── defaults.yaml\n   │   │   └── vpc-flow-logs-bucket\n   │   │       └── defaults.yaml\n   │   ├── layers  # grouping of components by category/function\n   │   │   ├── load-balancers.yaml\n   │   │   ├── data.yaml\n   │   │   ├── dns.yaml\n   │   │   ├── logs.yaml\n   │   │   ├── notifications.yaml\n   │   │   ├── firewalls.yaml\n   │   │   ├── networking.yaml\n   │   │   └── eks.yaml\n   │   ├── mixins\n   │   │   ├── tenant  # tenant-specific defaults\n   │   │   │   └── plat.yaml\n   │   │   ├── region  # region-specific defaults\n   │   │   │   ├── us-east-2.yaml\n   │   │   │   └── us-west-2.yaml\n   │   │   └── stage  # stage-specific defaults\n   │   │       ├── dev.yaml\n   │   │       ├── staging.yaml\n   │   │       └── prod.yaml\n   │   └── orgs  # Organizations\n   │       └── acme\n   │           ├── _defaults.yaml\n   │           └── plat  # 'plat' represents the \"Platform\" OU (a.k.a tenant)\n   │               ├── _defaults.yaml\n   │               ├── dev\n   │               │   ├── _defaults.yaml\n   │               │   ├── global-region.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               ├── staging\n   │               │   ├── _defaults.yaml\n   │               │   ├── global-region.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               └── prod\n   │                   ├── _defaults.yaml\n   │                   ├── global-region.yaml\n   │                   ├── us-east-2.yaml\n   │                   └── us-west-2.yaml\n   │   # Centralized components configuration\n   └── components\n       └── terraform  # Terraform components (a.k.a Terraform \"root\" modules)\n           ├── alb\n           ├── aurora-postgres\n           ├── dns\n           ├── eks\n           ├── efs\n           ├── msk\n           ├── ses\n           ├── sns-topic\n           ├── network-firewall\n           ├── network-firewall-logs-bucket\n           ├── waf\n           ├── vpc\n           └── vpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Describing a component with overrides in production\nDESCRIPTION: This command describes the configuration for a component with overrides (`test/test-component-override`) in a production environment (`tenant2-ue2-prod`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component test/test-component-override -s tenant2-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Excluding Templates in Atmos\nDESCRIPTION: This YAML snippet presents alternative syntaxes using the `printf` template function to achieve the same result as using backticks to exclude templates from Atmos processing. It demonstrates different ways to embed Go template expressions within strings, ensuring that Atmos does not process them. This provides flexibility in managing template rendering for external systems.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nchart_values:\n  template-github-commit-status:\n    message: >-\n      Application {{`{{ .app.metadata.name }}`}} is now running new version.\n```\n\nLANGUAGE: yaml\nCODE:\n```\nchart_values:\n  template-github-commit-status:\n    message: \"Application {{`{{ .app.metadata.name }}`}} is now running new version.\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nchart_values:\n  template-github-commit-status:\n    message: >-\n      {{ printf \"Application {{ .app.metadata.name }} is now running new version.\" }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nchart_values:\n  template-github-commit-status:\n    message: '{{ printf \"Application {{ .app.metadata.name }} is now running new version.\" }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA Policy Validation for Atmos\nDESCRIPTION: This snippet illustrates the configuration for OPA (Open Policy Agent) policy validation within Atmos. It specifies the base path where OPA policy files are located. The `base_path` can be set using the `ATMOS_SCHEMAS_OPA_BASE_PATH` environment variable or the `--schemas-opa-dir` command-line argument. Paths can be absolute or relative.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-cli.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nschemas:\n  opa:\n    base_path: \"stacks/schemas/opa\"\n```\n\n----------------------------------------\n\nTITLE: List specific variables using query with Atmos CLI\nDESCRIPTION: This command lists specific variables for a component using a JMESPath query. Replace `<component>` with the actual component name, and `.vars.tags` with the appropriate JMESPath query to select the desired variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --query .vars.tags\n```\n\n----------------------------------------\n\nTITLE: Region Mixin for us-east-2\nDESCRIPTION: Imports the `ue2` manifest for VPC configuration and the default VPC flow logs bucket configuration. It also sets the `region` and `environment` variables to `us-east-2` and `ue2`, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the `ue2` manifest with `vpc` configuration for `us-east-2` region\n  - catalog/vpc/ue2\n  # All accounts (stages) in `us-east-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n\nvars:\n  region: us-east-2\n  environment: ue2\n\n# Other defaults for the `us-east-2` region\n```\n\n----------------------------------------\n\nTITLE: Atmos Glob Patterns - Include and Exclude Paths (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use glob patterns to include and exclude specific files and directories during Atmos vendoring. The `included_paths` and `excluded_paths` directives use glob patterns to control which files are vendored.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nincluded_paths:\n  - \"**/demo-library/**\"\nexcluded_paths:\n  - \"**/demo-library/**/stargazers/**\"\n```\n\n----------------------------------------\n\nTITLE: Configure Prod Stage Mixin - YAML\nDESCRIPTION: This YAML snippet configures the prod stage mixin. It defines the 'stage' variable as 'prod'. This configuration is used to set defaults for the 'prod' stage/account.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: prod\n\n# Other defaults for the `prod` stage/account\n```\n\n----------------------------------------\n\nTITLE: Vendor Specific Atmos Component\nDESCRIPTION: This command pulls the specified component from the remote repository. It vendors only the defined component. The `<component>` parameter specifies the name of the component to be vendored.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_pull_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor pull --component <component>\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Config - vendor2.yaml (YAML)\nDESCRIPTION: This YAML snippet shows a nested `vendor2.yaml` manifest that is imported by the main `vendor.yaml` file. It defines additional sources and imports to be processed during vendoring.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config-2\n  description: Atmos vendoring manifest\nspec:\n  imports:\n    - \"vendor/vendor4\"\n\n  sources:\n    - component: \"my-vpc1\"\n      source: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n      version: \"1.0.2\"\n      targets:\n        - \"components/terraform/infra/my-vpc1\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Schema\nDESCRIPTION: Shows the schema for Atmos stack files, including imports, vars, and components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nimport:\n-\tcatalog/something\nvars:\n  key: value\ncomponents:\n  terraform:\n    $component:\n      vars:\n        foo: \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Component Using Local Module (HCL)\nDESCRIPTION: This HCL code demonstrates a Terraform component that sources a module from a relative path in the file system. When changes are made to the module source directory, Atmos detects this as `affected: component.module` for this component. The context is inherited and passed into the module.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"service_2_label\" {\n  source  = \"../../../modules/label\"\n  context = module.this.context\n}\n\noutput \"service_2_id\" {\n  value       = module.service_2_label.label.id\n  description = \"Service 2 ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describe Affected Resources with Atmos\nDESCRIPTION: Describes resources affected by changes using the Atmos CLI, with options for verbosity, git ref, SHA, output format, SSH key, repository path, and spacelift admin stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natmos describe affected\natmos describe affected --verbose=true\natmos describe affected --ref refs/heads/main\natmos describe affected --ref refs/heads/my-new-branch --verbose=true\natmos describe affected --ref refs/heads/main --format json\natmos describe affected --ref refs/tags/v1.16.0 --file affected.yaml --format yaml\natmos describe affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073 --file affected.json\natmos describe affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\natmos describe affected --ssh-key <path_to_ssh_key>\natmos describe affected --ssh-key <path_to_ssh_key> --ssh-key-password <password>\natmos describe affected --repo-path <path_to_already_cloned_repo>\natmos describe affected --include-spacelift-admin-stacks=true\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Component (After Renaming) in Shell\nDESCRIPTION: This shell snippet demonstrates how to describe an Atmos component using the `atmos describe component` command after a component rename (from `vpc` to `vpc1`). It filters the output to retrieve the workspace information. It specifies the new component name (`vpc1`) and stack (`plat-ue2-dev`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n⨠ atmos describe component vpc1 --stack plat-ue2-dev | grep ^workspace\nworkspace: plat-ue2-dev-vpc1\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Trailing Arguments in Atmos (YAML)\nDESCRIPTION: This YAML snippet configures the `ansible run` command within Atmos, allowing users to pass trailing arguments to the `ansible-playbook` command. The `playbook` argument specifies the Ansible playbook to run, with a default of `site.yml`, and any arguments after `--` will be passed through to `ansible-playbook`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: ansible run\n  description: \"Runs an Ansible playbook, allowing extra arguments after --.\"\n  arguments:\n    - name: playbook\n      description: \"The Ansible playbook to run\"\n      default: site.yml\n      required: true\n  steps:\n    - \"ansible-playbook {{ .Arguments.playbook }} {{ .TrailingArgs }}\"\n```\n\n----------------------------------------\n\nTITLE: Deep-merged Terraform S3 Backend Configuration Example (JSON)\nDESCRIPTION: This JSON snippet shows the final deep-merged Terraform S3 backend configuration after Atmos combines the organization-level defaults and the 'dev' environment-specific settings. It includes all necessary parameters for the S3 backend, including the workspace key prefix which is set dynamically by Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Atmos Affected Component JSON Example (component.module)\nDESCRIPTION: This JSON snippet shows the output of `atmos describe affected` when a local Terraform module used by a component has changed. The `affected` property is set to `component.module`, indicating that the component is affected by changes in the local module. This includes information such as component name, type, path, stack, and Atlantis project.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component1\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"stack\": \"tenant1-ue2-staging\",\n    \"stack_slug\": \"tenant1-ue2-staging-top-level-component1\",\n    \"spacelift_stack\": \"tenant1-ue2-staging-top-level-component1\",\n    \"atlantis_project\": \"tenant1-ue2-staging-top-level-component1\",\n    \"affected\": \"component.module\"\n  },\n  {\n    \"component\": \"top-level-component1\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"stack\": \"tenant2-ue2-staging\",\n    \"stack_slug\": \"tenant2-ue2-staging-top-level-component1\",\n    \"spacelift_stack\": \"tenant2-ue2-staging-top-level-component1\",\n    \"atlantis_project\": \"tenant2-ue2-staging-top-level-component1\",\n    \"affected\": \"component.module\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Correct Output Results YAML\nDESCRIPTION: This snippet illustrates the correct results when using `!template` to handle complex outputs. The outputs are correctly converted to YAML list and map types.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nvar1:\n  - item_1\n  - item_2\n  - item_3\n\nvar2:\n  a: 1\n  b: 2\n  c: 3\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Backend Config for vpc/2\nDESCRIPTION: This JSON configuration is the auto-generated Terraform backend configuration file (`backend.tf.json`) for the `vpc/2` Atmos component.  It specifies the S3 backend settings, including the bucket name, DynamoDB table, encryption, region, and the `workspace_key_prefix` set to `vpc-2`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-dev-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dev-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"<IAM Role with permissions to access the `dev` Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc-2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Config - vendor4.yaml (YAML)\nDESCRIPTION: This YAML snippet shows a nested `vendor4.yaml` manifest that is imported by the `vendor2.yaml` file.  It defines additional sources and imports to be processed during vendoring, creating a hierarchy.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config-4\n  description: Atmos vendoring manifest\nspec:\n  imports:\n    - \"vendor/vendor5\"\n\n  sources:\n    - component: \"my-vpc4\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref={{.Version}}\"\n      version: \"1.319.0\"\n      targets:\n        - \"components/terraform/infra/my-vpc4\"\n```\n\n----------------------------------------\n\nTITLE: Configure Dev Stage Mixin - YAML\nDESCRIPTION: This YAML snippet configures the dev stage mixin. It defines the 'stage' variable as 'dev'. This configuration is used to set defaults for the 'dev' stage/account.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: dev\n\n# Other defaults for the `dev` stage/account\n```\n\n----------------------------------------\n\nTITLE: Environment Manifest Assembly: org1-plat-uw2-staging.yaml\nDESCRIPTION: This YAML snippet assembles the environment manifest `org1-plat-uw2-staging.yaml` by importing the corresponding mixins in a specific order. The order of imports is important as later imports override configurations from earlier imports.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The imports are processed in the order they are defined.\n  # The next imported manifest will override the configurations from the previously imported manifests\n  - catalog/vpc/mixins/defaults\n  - catalog/vpc/mixins/org1\n  - catalog/vpc/mixins/plat\n  - catalog/vpc/mixins/uw2\n  - catalog/vpc/mixins/staging\n```\n\n----------------------------------------\n\nTITLE: Specify delimiter for CSV output\nDESCRIPTION: This command outputs the list of Atmos workflows in CSV format, but allows to specify a custom delimiter. The example uses a comma as a delimiter.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows --format csv --delimiter ','\n```\n\n----------------------------------------\n\nTITLE: Validating a Component in a Stack using Atmos CLI\nDESCRIPTION: This command validates an Atmos component within a specific stack. It ensures that the component's configuration adheres to the defined schemas and policies. The command requires the component name and the stack name as arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/validate.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component <component> --stack <stack>\n```\n\n----------------------------------------\n\nTITLE: Unlock Atmos Pro Stack\nDESCRIPTION: Unlocks a specified Atmos component and stack in Atmos Pro. This command is used to release a lock previously acquired using `atmos pro lock`, allowing other processes to interact with the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/pro/pro-unlock.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos pro unlock --component <component> --stack <stack>\n```\n\n----------------------------------------\n\nTITLE: Defining allowed_ingress_cidrs YAML\nDESCRIPTION: This snippet shows how to define a list of allowed CIDR blocks in the global settings section of the YAML configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  allowed_ingress_cidrs:\n    - \"10.20.0.0/20\"  # VPN 1\n    - \"10.30.0.0/20\"  # VPN 2\n```\n\n----------------------------------------\n\nTITLE: Defining vpc-flow-logs-bucket Defaults in Atmos Catalog (YAML)\nDESCRIPTION: This snippet defines the default settings for the `vpc-flow-logs-bucket` Atmos component in the `stacks/catalog/vpc-flow-logs-bucket/defaults.yaml` file. It includes metadata to point to the Terraform component and specifies variables such as `enabled`, `name`, `traffic_type`, `force_destroy`, and `lifecycle_rule_enabled`. This catalog is used for inheriting these defaults into other stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      metadata:\n        # Point to the Terraform component\n        component: vpc-flow-logs-bucket\n      vars:\n        enabled: true\n        name: \"vpc-flow-logs\"\n        traffic_type: \"ALL\"\n        force_destroy: true\n        lifecycle_rule_enabled: false\n```\n\n----------------------------------------\n\nTITLE: Disable YAML functions processing when listing vars with Atmos CLI\nDESCRIPTION: This command disables YAML functions processing when listing variables for a component. Replace `<component>` with the component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Stack Usage Example in YAML\nDESCRIPTION: Defines a 'mock' component under the 'terraform' section within the 'components' block in a YAML configuration file. It sets default values for the 'foo', 'bar', and 'baz' variables. This snippet is used to demonstrate how to configure and use the mock component within Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/fixtures/scenarios/basic/components/terraform/mock/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    mock:\n      vars:\n        foo: \"default value\"\n        bar: \"default value\"\n        baz: \"default value\"\n```\n\n----------------------------------------\n\nTITLE: Generating Atmos CLI Completion Scripts\nDESCRIPTION: This command generates completion scripts for different shells such as Bash, Zsh, Fish, and PowerShell, enabling tab completion for Atmos commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\natmos completion\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values in TSV Format\nDESCRIPTION: Outputs the component values in TSV (Tab Separated Values) format using the `--format tsv` flag. This is useful for importing the data into spreadsheets or other applications that support tab-delimited data.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# TSV format with tab delimiters\natmos list values vpc --format tsv\n```\n\n----------------------------------------\n\nTITLE: Importing Layers in Stack Manifest (prod/us-east-2)\nDESCRIPTION: This YAML snippet details importing layers (groups of components) into a top-level stack manifest for a production environment in `us-east-2`. The stack manifest integrates default configurations, region-specific mixins, and predefined layers including load balancers, data, DNS, logs, notifications, firewalls, networking, and EKS.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/prod/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-prod`\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n  # Import the layers (groups of components)\n  - layers/load-balancers\n  - layers/data\n  - layers/dns\n  - layers/logs\n  - layers/notifications\n  - layers/firewalls\n  - layers/networking\n  - layers/eks\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy from Plan\nDESCRIPTION: Deploys `top-level-component1` based on a previously generated execution plan. The `-s` flag specifies the `tenant1-ue2-dev` stack, and `--from-plan` indicates that the deploy should proceed with the plan that was previously created, ensuring that the deployment matches the plan's specifications.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy top-level-component1 -s tenant1-ue2-dev --from-plan\n```\n\n----------------------------------------\n\nTITLE: Describe Affected Output (JSON)\nDESCRIPTION: This JSON snippet is the output of the `atmos describe affected` command, demonstrating how Atlantis projects are identified as affected by component changes. The `atlantis_project` field indicates the Atlantis project name generated based on the component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n      \"component\": \"infra/vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"components/terraform/infra/vpc\",\n      \"stack\": \"tenant1-ue2-dev\",\n      \"atlantis_project\": \"tenant1-ue2-dev-infra-vpc\",\n      \"affected\": \"component\"\n   },\n   {\n      \"component\": \"infra/vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"components/terraform/infra/vpc\",\n      \"stack\": \"tenant1-ue2-prod\",\n      \"atlantis_project\": \"tenant1-ue2-prod-infra-vpc\",\n      \"affected\": \"component\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Configure Stage Mixin in YAML (prod)\nDESCRIPTION: This YAML configuration defines a mixin for the `prod` stage.  It sets the `stage` variable to `prod`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: prod\n\n# Other defaults for the `prod` stage/account\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Repository Path (bash)\nDESCRIPTION: This command describes the components affected by changes compared to the specified repository path. The repository must already be cloned to the specified path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --repo-path <path_to_already_cloned_repo>\n```\n\n----------------------------------------\n\nTITLE: Execute Terraform Plan with Atmos\nDESCRIPTION: This command executes a Terraform plan for a given component within a specified stack using the Atmos CLI. Replace `<component-name>` with the name of the Terraform component and `<stack-name>` with the name of the stack you want to plan. Ensure Atmos is installed and configured correctly.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_plan_usage.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n$ atmos terraform plan <component-name> -s <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values with Custom Path Query\nDESCRIPTION: Demonstrates querying specific component values using the `--query` flag with dot notation to filter the output. Requires the `vpc` component to be configured and available in the Atmos configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Query specific variables\natmos list values vpc --query .vars.enabled\n\n# Query environment settings\natmos list values vpc --query .vars.environment\n\n# Query network configuration\natmos list values vpc --query .vars.ipv4_primary_cidr_block\n```\n\n----------------------------------------\n\nTITLE: Use Already Cloned Repo (Bash)\nDESCRIPTION: This command uses an already cloned repository specified by `--repo-path` to compare with the current branch. The `--affected-only` flag is used.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only --repo-path <path_to_already_cloned_repo>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output\nDESCRIPTION: Example of JSON output when listing values that contain nested objects. It shows the complete nested structure for the `dev-ue1` environment. The command `atmos list values vpc --format json` would produce similar output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dev-ue1\": {\n    \"cidr_block\": \"10.0.0.0/16\",\n    \"tags\": {\n      \"Environment\": \"dev\",\n      \"Team\": \"devops\"\n    },\n    \"subnets\": [\n      \"10.0.1.0/24\",\n      \"10.0.2.0/24\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Invalid Atmos Component Configuration\nDESCRIPTION: This is an example of output that indicates a misconfiguration when validating stacks. It shows that the same Atmos component is defined in more than one stack manifest file with different configurations. To resolve this, ensure that the component is defined only once or has a unique name if multiple instances are required.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/validate.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nThe Atmos component 'vpc' in the stack 'plat-ue2-dev' is defined in more than one\ntop-level stack manifest file: orgs/acme/plat/dev/us-east-2-extras, orgs/acme/plat/dev/us-east-2.\n\nThe component configurations in the stack manifest are different.\n\nTo check and compare the component configurations in the stack manifests, run the following commands:\n- atmos describe component vpc -s orgs/acme/plat/dev/us-east-2-extras\n- atmos describe component vpc -s orgs/acme/plat/dev/us-east-2\n\nYou can use the '--file' flag to write the results of the above commands to files\n(refer to https://atmos.tools/cli/commands/describe/component).\n\nYou can then use the Linux 'diff' command to compare the files line by line and show the differences\n(refer to https://man7.org/linux/man-pages/man1/diff.1.html)\n\nWhen searching for the component 'vpc' in the stack 'plat-ue2-dev', Atmos can't decide which\nstack manifest file to use to get the configuration for the component. This is a stack misconfiguration.\n\nConsider the following solutions to fix the issue:\n\n- Ensure that the same instance of the Atmos 'vpc' component in the stack 'plat-ue2-dev'\nis only defined once (in one YAML stack manifest file)\n\n- When defining multiple instances of the same component in the stack,\n  ensure each has a unique name\n\n- Use multiple-inheritance to combine multiple configurations together\n  (refer to https://atmos.tools/core-concepts/stacks/inheritance)\n```\n\n----------------------------------------\n\nTITLE: Generate Helmfile Variables File with Atmos\nDESCRIPTION: This command uses the Atmos CLI to generate a variable file for a specific Helmfile component within a given stack.  It requires the component name, stack name, and the desired output file path. The generated variables will be written to the specified file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_helmfile_generate_varfile_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos helmfile generate varfile <component> -s <stack> -f <file>\n```\n\n----------------------------------------\n\nTITLE: Describe Component Output with Atlantis Settings (YAML)\nDESCRIPTION: This snippet shows the output of the `atmos describe component` command, displaying the configured Atlantis integration settings within the `settings.atlantis` section of a stack configuration.  It includes configuration for `config_template`, `project_template`, and `workflow_templates`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\natmos_component: test/test-component-override\natmos_stack: tenant1-ue2-dev\ncomponent: test/test-component\nsettings:\n  atlantis:\n    config_template:\n      allowed_regexp_prefixes:\n      - dev/\n      automerge: false\n      delete_source_branch_on_merge: false\n      parallel_apply: false\n      parallel_plan: true\n      version: 3\n    config_template_name: config-1\n    project_template:\n      apply_requirements:\n      - approved\n      autoplan:\n        enabled: true\n        when_modified:\n        - '**/*.tf'\n        - varfiles/$PROJECT_NAME.tfvars.json\n      delete_source_branch_on_merge: false\n      dir: '{component-path}'\n      name: '{tenant}-{environment}-{stage}-{component}'\n      terraform_version: v1.8\n      workflow: workflow-1\n      workspace: '{workspace}'\n    project_template_name: project-1\n    workflow_templates:\n      workflow-1:\n        apply:\n          steps:\n          - run: terraform apply $PLANFILE\n        plan:\n          steps:\n          - run: terraform init\n          - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n          - run: terraform plan -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\nvars:\n  enabled: true\n  environment: ue2\n  namespace: cp\n  region: us-east-2\n  stage: dev\n  tenant: tenant1\nworkspace: test-component-override-workspace-override\n```\n\n----------------------------------------\n\nTITLE: Implement Terraform variables.tf\nDESCRIPTION: Defines the input variables for the Terraform module. Making modules reusable involves accepting parameters, allowing them to be deployed multiple times without conflicts.  The `EmbedFile` component is used to include the contents of the `examples/quick-start-simple/components/terraform/weather/variables.tf` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/write-components.mdx#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n<EmbedFile filePath=\"examples/quick-start-simple/components/terraform/weather/variables.tf\" />\n```\n\n----------------------------------------\n\nTITLE: Organization Configuration: org2.yaml\nDESCRIPTION: This YAML snippet defines organization-specific configurations for the `vpc` component in `org2`. It overrides the default `subnet_type_tag_key` variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `subnet_type_tag_key` from the defaults\n        subnet_type_tag_key: \"org2/subnet/type\"\n```\n\n----------------------------------------\n\nTITLE: List Atmos Workflows in JSON Format\nDESCRIPTION: This command lists all Atmos workflows and outputs the result in JSON format. This is useful for programmatically parsing the workflow information.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_workflows_usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list workflows --format json\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config using custom config and project templates\nDESCRIPTION: This example uses the `--config-template` and `--project-template` flags to specify custom configuration templates.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1\n```\n\n----------------------------------------\n\nTITLE: Validate Components with Atmos\nDESCRIPTION: Validates a component against a stack using the Atmos CLI, with options for schema type (JSON Schema, OPA) and schema path.  Also shows how to set a timeout.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component $component -s $stack\natmos validate component $component -s $stack --schema-type jsonschema --schema-path $component.json\natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego \natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego  --module-paths catalog\natmos validate component $component -s $stack --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Validate VPC Component (Console)\nDESCRIPTION: These snippets demonstrate the output when validating the VPC component in different stacks ('plat-ue2-prod' and 'plat-ue2-dev') using OPA policies. The output shows error messages if the component configuration does not meet the policy requirements. It highlights the use of 'atmos validate component' to check the component before provisioning.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/opa.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nMapping public IPs on launch is not allowed in 'prod'. Set 'map_public_ip_on_launch' variable to 'false'\n\nexit status 1\n```\n\nLANGUAGE: console\nCODE:\n```\nIn 'dev', only 2 Availability Zones are allowed\nVPC name must be a valid string from 2 to 20 alphanumeric chars\n\nexit status 1\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values in CSV Format\nDESCRIPTION: Outputs the component values in CSV (Comma Separated Values) format using the `--format csv` flag.  This is useful for importing the data into spreadsheets.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# CSV format for spreadsheet compatibility\natmos list values vpc --format csv\n```\n\n----------------------------------------\n\nTITLE: Checking EKS Add-ons Versions\nDESCRIPTION: This script block checks and updates EKS add-on versions for compatibility with a specified Kubernetes version.  It retrieves add-on configurations, iterates through each add-on, queries the AWS API for compatible versions, and updates the add-on versions in a template.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\naddons=$(atmos describe component {{ .Arguments.component }} -s {{ .Flags.stack }} --format json | jq -r '.vars.addons')\naddons_count=$(echo ${addons} | jq -r '. | keys | length')\nif [[ \"$addons_count\" = 0 ]]; then\n  echo -e \"${color_yellow}\n      \\rCould not detect the 'addons' variable for the component '{{ .Arguments.component }}' in the stack '{{ .Flags.stack }}'.\n      \\rMake sure that EKS add-ons are configured and provisioned on the EKS cluster.\n      \\rRefer to https://docs.aws.amazon.com/eks/latest/userguide/eks-add-ons.html for more details.\n      ${color_reset}\"\nelse\n  echo -e \"\\nThere are currently ${addons_count} add-on(s) configured for the EKS component ${color_cyan}{{ .Arguments.component }}${color_reset} in the stack ${color_cyan}{{ .Flags.stack }}${color_reset} in the variable ${color_cyan}addons${color_reset}:\\n\"\n  echo ${addons} | yq --prettyPrint '.'\n  echo -e \"\\nKubernetes ${next_k8s_version} requires the following versions of the EKS add-ons:\\n\"\n\n  # Detect the latest supported versions of the EKS add-ons\n  addons_template=$(atmos describe component {{ .Arguments.component }} -s {{ .Flags.stack }} --format json | jq -r '.vars.addons')\n  for ((i=0; i<${addons_count}; i++)); do\n    addon_name=$(echo ${addons} | jq -r '(keys)['$i']')\n    addon_version=$(aws eks describe-addon-versions --kubernetes-version ${next_k8s_version} --addon-name ${addon_name} --query 'addons[].addonVersions[?compatibilities[0].defaultVersion].addonVersion' --output text)\n    addons_template=$(jq --arg addon_name \"${addon_name}\" --arg addon_version \"${addon_version}\" '.[$addon_name].addon_version = $addon_version' <<< \"${addons_template}\")\n  done\n\n  # Print the add-ons configuration for the desired Kubernetes version\n  echo ${addons_template} | yq --prettyPrint '.'\nfi\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan and Apply Commands for Abstract Component\nDESCRIPTION: These shell commands demonstrate the attempt to provision the `vpc/defaults` abstract base component, and the expected error message.  The Atmos CLI prevents provisioning of components with `metadata.type: abstract`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/abstract-component.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan vpc/defaults -s plat-ue2-prod\natmos terraform apply vpc/defaults -s plat-ue2-prod\n```\n\nLANGUAGE: console\nCODE:\n```\nabstract component 'vpc/defaults' cannot be provisioned since it's explicitly prohibited from\nbeing deployed by 'metadata.type: abstract' attribute\n```\n\n----------------------------------------\n\nTITLE: Configure Dev Account Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'dev' account. It imports the 'plat' OU defaults and the 'dev' stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/_defaults\n  - mixins/stage/dev\n```\n\n----------------------------------------\n\nTITLE: Configure Organization Defaults in YAML (org2)\nDESCRIPTION: This YAML configuration defines the default settings for the `org2` organization. It sets the `namespace` variable to `org2`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  namespace: org2\n```\n\n----------------------------------------\n\nTITLE: Using !store function to read a key from a map\nDESCRIPTION: Example of using a YQ expression to read a specific key from a map stored in a remote store.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nusername: !store <store_name> <stack> <component> <key> | query .config_map.username\n```\n\n----------------------------------------\n\nTITLE: Terraform Tenant Variable Example (YAML)\nDESCRIPTION: Illustrates the optional `vars.tenant` attribute within a Terraform component's configuration in an Atmos stack. This shows how to define the tenant in a multi-tenant configuration, adhering to the `terraform-null-label` convention where each tenant typically has its own Organizational Unit (OU).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  tenant: platform\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Commands with Atmos\nDESCRIPTION: Executes Terraform commands using the Atmos CLI. Requires the component and stack arguments to generate variables and backend configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform <command> <component> -s <stack> [options]\natmos terraform <command> <component> --stack <stack> [options]\n```\n\n----------------------------------------\n\nTITLE: Format atmos settings output\nDESCRIPTION: These commands demonstrate how to format the output of the `atmos list settings` command using the `--format` flag. Supported formats include JSON, YAML, CSV, and TSV for different use cases such as machine processing or spreadsheet compatibility.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-settings.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# JSON format for machine processing\natmos list settings --format json\n\n# YAML format for configuration files\natmos list settings --format yaml\n\n# CSV format for spreadsheet compatibility\natmos list settings --format csv\n\n# TSV format with tab delimiters\natmos list settings --format tsv\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Component to Stacks using Atmos\nDESCRIPTION: These commands provision the `station` Atmos component into the `dev`, `staging`, and `prod` stacks using `atmos terraform apply`. The `-s` flag specifies the target stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/provision.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply station -s dev\n\natmos terraform apply station -s staging\n\natmos terraform apply station -s prod\n```\n\n----------------------------------------\n\nTITLE: Validating Stacks with Remote Schema URL\nDESCRIPTION: This example shows how to validate Atmos stacks using the `--schemas-atmos-manifest` command line flag, pointing to a schema located at a remote URL.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks --schemas-atmos-manifest https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files, skipping lock file\nDESCRIPTION: This command deletes Terraform-related files for the 'infra/vpc' component in the 'tenant1-ue2-staging' stack, but skips deleting the `.terraform.lock.hcl` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean infra/vpc -s tenant1-ue2-staging --skip-lock-file\n```\n\n----------------------------------------\n\nTITLE: Common Atmos Commands\nDESCRIPTION: This section showcases a variety of `atmos` commands for version checking, stack validation, component description, Terraform shell access, and Terraform plan and apply operations. These commands are used to interact with and manage cloud resources through Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/quick-start-advanced/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos version\natmos validate stacks\natmos describe stacks\n\natmos terraform shell vpc -s plat-ue2-dev\natmos terraform shell vpc-flow-logs-bucket -s plat-ue2-dev\n\natmos describe component vpc -s plat-ue2-dev\natmos describe component vpc -s plat-ue2-staging\natmos describe component vpc -s plat-ue2-dev\n\natmos describe component vpc -s plat-uw2-dev\natmos describe component vpc -s plat-uw2-staging\natmos describe component vpc -s plat-uw2-dev\n\natmos describe component vpc-flow-logs-bucket -s plat-ue2-dev\natmos describe component vpc-flow-logs-bucket -s plat-ue2-staging\natmos describe component vpc-flow-logs-bucket -s plat-ue2-dev\n\natmos terraform plan vpc -s plat-ue2-dev\natmos terraform plan vpc -s plat-ue2-staging\natmos terraform plan vpc -s plat-ue2-prod\n\natmos terraform apply vpc -s plat-ue2-dev\natmos terraform apply vpc -s plat-ue2-staging\natmos terraform apply vpc -s plat-ue2-prod\n\natmos terraform apply vpc -s plat-uw2-dev\natmos terraform apply vpc -s plat-uw2-staging\natmos terraform apply vpc -s plat-uw2-prod\n\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-dev\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-staging\natmos terraform apply vpc-flow-logs-bucket -s plat-ue2-prod\n\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-dev\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-staging\natmos terraform apply vpc-flow-logs-bucket -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Importing Firewalls Defaults in Layer\nDESCRIPTION: This YAML snippet shows how to import `network-firewall` and `waf` component defaults into the `firewalls.yaml` layer manifest. By doing this, the firewall layer can inherit configurations defined in the default files for network firewall and WAF components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/network-firewall/defaults\n  - catalog/waf/defaults\n  # Import other Firewall components\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands in atmos.yaml\nDESCRIPTION: This YAML snippet defines custom CLI commands for Atmos to list stacks and components. It includes the command names, descriptions, flags (for the 'components' command), and the steps to execute. The 'steps' use 'atmos describe' command with different flags and jq for JSON processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/add-custom-commands.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: list\n    description: Execute 'atmos list' commands\n    # subcommands\n    commands:\n      - name: stacks\n        description: |\n          List all Atmos stacks.\n        steps:\n          - >\n            atmos describe stacks --process-templates=false --sections none | grep -e \"^\\S\" | sed s/://g\n      - name: components\n        description: |\n          List all Atmos components in all stacks or in a single stack.\n\n          Example usage:\n            atmos list components\n            atmos list components -s plat-ue2-dev\n            atmos list components --stack plat-uw2-prod\n            atmos list components -s plat-ue2-dev --type abstract\n            atmos list components -s plat-ue2-dev -t enabled\n            atmos list components -s plat-ue2-dev -t disabled\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: false\n          - name: type\n            shorthand: t\n            description: Component types - abstract, enabled, or disabled\n            required: false\n        steps:\n          - >\n            {{ if .Flags.stack }}\n              {{ if eq .Flags.type \"enabled\" }}\n                atmos describe stacks --stack {{ .Flags.stack }} --format json | jq '.[].components.terraform | to_entries[] | select(.value.vars.enabled == true)' | jq -r .key\n              {{ else if eq .Flags.type \"disabled\" }}\n                atmos describe stacks --stack {{ .Flags.stack }} --format json | jq '.[].components.terraform | to_entries[] | select(.value.vars.enabled == false)' | jq -r .key\n              {{ else if eq .Flags.type \"abstract\" }}\n                atmos describe stacks --stack {{ .Flags.stack }} --format json | jq '.[].components.terraform | to_entries[] | select(.value.metadata.type == \"abstract\")' | jq -r .key\n              {{ else }}\n                atmos describe stacks --stack {{ .Flags.stack }} --format json --sections none | jq \".[].components.terraform\" | jq -s add | jq -r \"keys[]\"\n              {{ end }}\n            {{ else }}\n              {{ if eq .Flags.type \"enabled\" }}\n                atmos describe stacks --format json | jq '.[].components.terraform | to_entries[] | select(.value.vars.enabled == true)' | jq -r '[.key]' | jq -s 'add' | jq 'unique | sort' | jq -r \"values[]\"\n              {{ else if eq .Flags.type \"disabled\" }}\n                atmos describe stacks --format json | jq '.[].components.terraform | to_entries[] | select(.value.vars.enabled == false)' | jq -r '[.key]' | jq -s 'add' | jq 'unique | sort' | jq -r \"values[]\"\n              {{ else if eq .Flags.type \"abstract\" }}\n                atmos describe stacks --format json | jq '.[].components.terraform | to_entries[] | select(.value.metadata.type == \"abstract\")' | jq -r '[.key]' | jq -s 'add' | jq 'unique | sort' | jq -r \"values[]\"\n              {{ else }}\n                atmos describe stacks --format json --sections none | jq \".[].components.terraform\" | jq -s add | jq -r \"keys[]\"\n              {{ end }}\n            {{ end }}\n\n```\n\n----------------------------------------\n\nTITLE: Add Regenerated Snapshots (Shell)\nDESCRIPTION: This command adds the regenerated golden snapshots to the Git repository. It ensures that the changes are tracked and included in the next commit.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add tests/snapshots/*\n```\n\n----------------------------------------\n\nTITLE: Atmos Pro Stack Lock Example\nDESCRIPTION: An example of using the `atmos pro lock` command to lock the `vpc` component in the `plat-ue2-dev` stack with a TTL of 300 seconds. The message defaults to 'Locked by Atmos'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/pro/pro-lock.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos pro lock --component vpc --stack plat-ue2-dev --ttl 300\n```\n\n----------------------------------------\n\nTITLE: Payload Schema for atmos describe affected --upload=true\nDESCRIPTION: This JSON snippet shows the payload schema of the HTTP POST request when the `--upload=true` command-line flag is passed to the `atmos describe affected` command. It contains information about the affected components, stacks, their dependencies, settings, and the Git repository details.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"base_sha\": \"6746ba4df9e87690c33297fe740011e5ccefc1f9\",\n   \"head_sha\": \"5360d911d9bac669095eee1ca1888c3ef5291084\",\n   \"repo_url\": \"https://github.com/cloudposse/atmos\",\n   \"repo_host\": \"github.com\",\n   \"repo_name\": \"atmos\",\n   \"repo_owner\": \"cloudposse\",\n   \"stacks\": [\n      {\n        \"component\": \"vpc\",\n        \"component_type\": \"terraform\",\n        \"component_path\": \"examples/quick-start-advanced/components/terraform/vpc\",\n        \"stack\": \"plat-ue2-dev\",\n        \"stack_slug\": \"plat-ue2-dev-vpc\",\n        \"affected\": \"stack.vars\",\n        \"included_in_dependents\": false,\n        \"dependents\": [],\n        \"settings\": {}\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos CLI for Terraform with Terragrunt\nDESCRIPTION: This snippet describes how to configure the Atmos CLI to use Terragrunt for Terraform components, enabling a gradual transition to Atmos methodologies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/introduction/faq.mdx#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n1. Set the default the `command` to call in the Atmos CLI Configuration for Terraform components.\n2. Override the `command` in the `settings` section for each component definition in the stack configuration (this respects inheritances, so the [`mixin`](/core-concepts/stacks/inheritance/mixins) pattern can be used.)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema Validation for Atmos\nDESCRIPTION: This snippet shows the configuration for JSON Schema validation within Atmos. It specifies the base path where JSON schema files are located. The `base_path` can be set using the `ATMOS_SCHEMAS_JSONSCHEMA_BASE_PATH` environment variable or the `--schemas-jsonschema-dir` command-line argument. Paths can be absolute or relative.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-cli.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n```\n\n----------------------------------------\n\nTITLE: List Stacks with Atmos\nDESCRIPTION: Lists all available stacks using the Atmos CLI. This command requires the Atmos CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list stacks\n```\n\n----------------------------------------\n\nTITLE: Validate Component using JSON Schema - Shell\nDESCRIPTION: This command validates a 'vpc' component in the 'plat-ue2-prod' stack using a JSON Schema defined at 'vpc/validate-vpc-component.json'. It uses the jsonschema schema type.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/json-schema.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Validate 'vpc' component using JSON Schema in the 'plat-ue2-prod' stack\natmos validate component vpc -s plat-ue2-prod --schema-path vpc/validate-vpc-component.json --schema-type jsonschema\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Varfiles for all components\nDESCRIPTION: This command generates the terraform varfiles (`.tfvar`) for all Atmos terraform components in all stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform generate varfiles\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values Including Abstract Components\nDESCRIPTION: Lists values for the `vpc` component, including abstract components in the output using the `--abstract` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos list values vpc --abstract\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration for 'prod' Environment\nDESCRIPTION: This snippet provides the environment-specific configuration for the 'prod' environment, located in `stacks/deploy/prod.yaml`. It imports the baseline configuration from `catalog/station.yaml` and overrides the location and language variables specific to the production environment. The configuration focuses on the component-specific settings while inheriting the base configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - catalog/station\n\nvars:\n  stage: prod\n\ncomponents:\n  terraform:\n    station:\n      vars:\n        location:\n          latitude: '48.8566'\n          longitude: '2.3522'\n        language: en-GB\n```\n\n----------------------------------------\n\nTITLE: Include Local YAML File (Absolute Path) in Atmos\nDESCRIPTION: Demonstrates how to include a local YAML file using an absolute path with the `!include` function in an Atmos manifest. The contents of `vars.yaml` will be injected into the `vars` section of the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include /Users/me/Documents/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Filesystem Layout Example with Atmos\nDESCRIPTION: Illustrates the recommended directory structure for an Atmos project, including the `atmos.yaml` configuration file, the `stacks/` directory for stack configurations, and the `components/` directory for component configurations, specifically Terraform root modules.  This snippet represents a typical setup for managing infrastructure using Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-project.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Atmos CLI configuration\n   ├── atmos.yaml\n   │  \n   │   # Centralized stacks configuration\n   ├── stacks/\n   │   ├── <stack_1>.yaml\n   │   ├── <stack_2>.yaml\n   │   └── <stack_3>.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   └── components/\n       └── terraform/   # Terraform root modules\n           └── myapp/\n```\n\n----------------------------------------\n\nTITLE: Istio Ingress Gateway Ingress Restrictions YAML\nDESCRIPTION: This snippet demonstrates how to apply ingress restrictions to an Istio Ingress Gateway using `!template` and the globally defined `allowed_ingress_cidrs`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Istio Ingress Gateway\n# Allow ingress only from the allowed CIDR blocks\nsecurity_group_ingress_cidrs: !template '{{ toJson .settings.allowed_ingress_cidrs }}'\n```\n\n----------------------------------------\n\nTITLE: Generate Atlantis Projects for Changed Components (Bash)\nDESCRIPTION: This command generates Atlantis projects only for the Atmos components that have changed between two Git commits. It uses the `--affected-only` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only\n```\n\n----------------------------------------\n\nTITLE: Region Configuration: uw2.yaml\nDESCRIPTION: This YAML snippet configures the availability zones for the `vpc` component in the `us-west-2` (uw2) region.  It overrides the default configuration to specify the desired availability zones for the VPC.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-west-2a\n          - us-west-2b\n          - us-west-2c\n```\n\n----------------------------------------\n\nTITLE: Atmos DynamoDB Component Configuration\nDESCRIPTION: This YAML configures a DynamoDB table to store metadata for Terraform plans. It uses the `dynamodb` component and defines attributes like `hash_key`, `range_key`, and a global secondary index (`pr-createdAt-index`) for querying the latest plan file for a given pull request. The `ttl_enabled` and `ttl_attribute` parameters configure auto-deletion of old entries.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-plan.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/dynamodb/defaults\n\ncomponents:\n  terraform:\n    # DynamoDB table used to store metadata for Terraform Plans\n    gitops/dynamodb:\n      metadata:\n        component: dynamodb\n        inherits:\n          - dynamodb/defaults\n      vars:\n        name: gitops-plan-storage\n        # This key (case-sensitive) is required for the cloudposse/github-action-terraform-plan-storage action\n        hash_key: id\n        range_key: \"\"\n        # Only these 2 attributes are required for creating the GSI, \n        # but there will be several other attributes on the table itself\n        dynamodb_attributes:\n          - name: 'createdAt'\n            type: 'S'\n          - name: 'pr'\n            type: 'N'\n        # This GSI is used to Query the latest plan file for a given PR.\n        global_secondary_index_map:\n          - name: pr-createdAt-index\n            hash_key: pr\n            range_key: createdAt\n            projection_type: ALL\n            non_key_attributes: []\n            read_capacity: null\n            write_capacity: null\n        # Auto delete old entries\n        ttl_enabled: true\n        ttl_attribute: ttl\n```\n\n----------------------------------------\n\nTITLE: Enable OpenTofu Support Globally in Atmos (YAML)\nDESCRIPTION: This YAML snippet shows how to configure Atmos to use OpenTofu globally for Spacelift. Setting `terraform_workflow_tool` to `OPEN_TOFU` in the top-level stack manifest configures all Spacelift stacks to use OpenTofu. This setting can be overridden at the component level.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/spacelift.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  spacelift:\n    # Use OpenTofu\n    terraform_workflow_tool: OPEN_TOFU\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Stack Name in atmos.Component (YAML)\nDESCRIPTION: This YAML snippet shows how to specify a hardcoded stack name when using the `atmos.Component` function. This is useful for fetching outputs from a well-known, static stack.  For example, fetching a `vpc_id` from the `plat-ue2-prod` stack from the `vpc` component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ (atmos.Component \"vpc\" \"plat-ue2-prod\").outputs.vpc_id }}'\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Base Path Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the base path for components, stacks, workflows, and validation configurations in Atmos. The base path can be set using the `ATMOS_BASE_PATH` environment variable or the `--base-path` command-line argument.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbase_path: \".\"\n```\n\n----------------------------------------\n\nTITLE: Include File from OCI Image in Atmos\nDESCRIPTION: Demonstrates including a file from an OCI image using the `!include` function. The file must be exposed as a layer in the image. Requires a registry that supports OCI artifact downloads.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include oci://ghcr.io/my-org/my-image:path/to/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Unlock Specific Atmos Pro Stack\nDESCRIPTION: An example of unlocking a specific Atmos component (vpc) and stack (plat-ue2-dev) in Atmos Pro.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/pro/pro-unlock.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos pro unlock --component vpc --stack plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Atmos Helmfile Command with Global Options Example\nDESCRIPTION: Demonstrates how to use `--global-options` flag with atmos helmfile command to pass options such as `--no-color` and `--namespace` to the underlying helmfile command. These options are applied globally during helmfile execution.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile <command> <component> -s <stack> [command options] [arguments] --global-options=\"--no-color --namespace=test\"\n```\n\n----------------------------------------\n\nTITLE: Override Logs Configuration\nDESCRIPTION: This YAML file configures a 'logs' layer in Atmos. It imports default configurations for network firewall logs bucket and VPC flow logs bucket components.  It then overrides the Terraform component configurations by adding 'Layer' and 'Team' tags to all the components in the layer.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/network-firewall-logs-bucket/defaults\n  - catalog/vpc-flow-logs-bucket/defaults\n  # Import other Logs components\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: logs\n        Team: Log managers\n```\n\n----------------------------------------\n\nTITLE: Displaying Atmos AWS Help\nDESCRIPTION: This snippet displays the help information for the `atmos aws` command, showing available options and subcommands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/usage.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\natmos aws --help\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Workflow from a Named Step\nDESCRIPTION: This shell command shows how to execute an Atmos workflow starting from a specific named step using the `--from-step` flag. It invokes the `atmos workflow` command, specifies the workflow name (`test-1`), the workflow definition file (`workflow1`), and the step to start from (`step3`). This command skips the initial steps and begins execution from the designated step.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow test-1 -f workflow1 --from-step step3\n```\n\n----------------------------------------\n\nTITLE: Workflow Example (atmos-components-updater.yml)\nDESCRIPTION: This snippet demonstrates a workflow example for the Atmos Component Updater GitHub Action. It shows how to set up the workflow to automatically update Atmos components in a repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/component-updater.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://raw.githubusercontent.com/cloudposse/docs/master/examples/snippets/.github/workflows/atmos-components-updater.yml\n```\n\n----------------------------------------\n\nTITLE: Simulate Component Diff with Atmos (Dry Run)\nDESCRIPTION: Simulates the comparison of differences between the local and vendored versions of the specified component without making any changes. Replace `<component>` with the actual component name. This command is useful for previewing the differences before applying them.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_diff_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor diff --component <component> --dry-run\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Git Reference (bash)\nDESCRIPTION: This command describes the components affected by changes compared to the specified Git reference.  This can be a branch name, tag, or a full ref.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --ref refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Example Usage of atmos describe stacks\nDESCRIPTION: These examples showcase various ways to use the `atmos describe stacks` command with different options for filtering stacks, components, and sections, as well as specifying input files and output formats.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-stacks.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos describe stacks\natmos describe stacks -s tenant1-ue2-dev\natmos describe stacks --file=stacks.yaml\natmos describe stacks --file=stacks.json --format=json\natmos describe stacks --components=infra/vpc\natmos describe stacks --components=echo-server,infra/vpc\natmos describe stacks --components=echo-server,infra/vpc --sections=none\natmos describe stacks --components=echo-server,infra/vpc --sections=none\natmos describe stacks --components=none --sections=metadata\natmos describe stacks --components=echo-server,infra/vpc --sections=vars,settings,metadata\natmos describe stacks --components=test/test-component-override-3 --sections=vars,settings,component,deps,inheritance --file=stacks.yaml\natmos describe stacks --components=test/test-component-override-3 --sections=vars,settings --format=json --file=stacks.json\natmos describe stacks --components=test/test-component-override-3 --sections=deps,vars -s=tenant2-ue2-staging\natmos describe stacks --process-templates=false\natmos describe stacks --process-functions=false\natmos describe stacks --skip=terraform.output\natmos describe stacks --skip=terraform.output --skip=include\natmos describe stacks --skip=include,eval\natmos describe stacks --query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: Define Datasources in Atmos Stack Manifest YAML\nDESCRIPTION: This snippet showcases the final data sources map after deep-merging configurations from the `atmos.yaml` CLI config file and the `stacks/orgs/acme/_defaults.yaml` stack manifest. It displays a collection of data sources including HTTP, AWS Secrets Manager, S3, and file based data sources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngomplate:\n  timeout: 7\n  datasources:\n    ip:\n      url: \"https://api.ipify.org?format=json\"\n      headers:\n        accept:\n          - \"application/json\"\n    random:\n      url: \"http://www.randomnumberapi.com/api/v1.0/randomstring?min=${ .settings.random.min }&max=${ .settings.random.max }&count=1\"\n    secret-1:\n      url: \"aws+smp:///path/to/secret\"\n    secret-2:\n      url: \"aws+sm:///path/to/secret\"\n    s3-config:\n      url: \"s3://mybucket/config/config.json\"\n    config-1:\n      url: \"./my-config1.json\"\n    config-2:\n      url: \"file:///config2.json\"\n    config-3:\n      url: \"file:///config3.json\"\n```\n\n----------------------------------------\n\nTITLE: Include TFVAR File in Atmos Stack (staging)\nDESCRIPTION: Includes a `.tfvars` file for the `staging` environment into the `app` component within the `terraform` section of an Atmos stack configuration. This allows using existing Terraform variable files directly within Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    app:\n      vars: !include config/staging.tfvars\n```\n\n----------------------------------------\n\nTITLE: Running Atmos Describe Dependents Command (JSON Output)\nDESCRIPTION: This JSON snippet shows the output of the `atmos describe dependents` command when executed against the `test/test-component` in the `tenant1-ue2-dev` stack. It lists the components that depend on the specified component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component1\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"namespace\": \"cp\",\n    \"tenant\": \"tenant1\",\n    \"environment\": \"ue2\",\n    \"stage\": \"dev\",\n    \"stack\": \"tenant1-ue2-dev\",\n    \"stack_slug\": \"tenant1-ue2-dev-top-level-component1\",\n    \"spacelift_stack\": \"tenant1-ue2-dev-top-level-component1\",\n    \"atlantis_project\": \"tenant1-ue2-dev-top-level-component1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Atmos GitHub Status Command\nDESCRIPTION: This command checks the status of GitHub from the command line, providing an easy way to monitor GitHub's availability.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/demo-custom-command/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos github status\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Backend Configuration (JSON)\nDESCRIPTION: This snippet demonstrates the generated `backend.tf.json` file, showing the final deep-merged configuration after Atmos processes the `_defaults.yaml` and component manifests. It includes settings from both files, such as the S3 bucket, DynamoDB table, encryption, key, region, IAM role ARN, and workspace key prefix. This file is automatically generated by Atmos before executing Terraform commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"backend\": {\n      \"s3\": {\n        \"acl\": \"bucket-owner-full-control\",\n        \"bucket\": \"your-s3-bucket-name\",\n        \"dynamodb_table\": \"your-dynamodb-table-name\",\n        \"encrypt\": true,\n        \"key\": \"terraform.tfstate\",\n        \"region\": \"your-aws-region\",\n        \"role_arn\": \"arn:aws:iam::<your account ID>:role/<IAM Role with permissions to access the Terraform backend>\",\n        \"workspace_key_prefix\": \"vpc\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Depends On Slice Error\nDESCRIPTION: This snippet shows the error message when `depends_on` is incorrectly defined as a slice (list) instead of a map under `settings` directly. This error occurs because the updated `depends_on` configuration requires a map structure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/troubleshoot/errors.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndecoding: depends_on expected a map, got slice\n```\n\n----------------------------------------\n\nTITLE: Filesystem Layout by Toolchain\nDESCRIPTION: This code snippet illustrates a simple filesystem layout for components organized by toolchain (Docker, Helmfile, and Terraform). Each toolchain has its own directory within the `components/` folder, containing the relevant configuration files.  The terraform directory shows the layout for terraform modules, including submodules within the component folder.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/component-library.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n└── components/\n    ├── docker/\n    │   └── Dockerfile\n    ├── helmfile/\n    │   └── example-app\n    │       └── helmfile.yaml\n    └── terraform/\n        └── example/                  # This is a terraform \"root\" module\n            ├── main.tf\n            ├── outputs.tf\n            ├── modules/              # You can include submodules inside the component folder,\n            │   ├── bar/              # and then reference them inside the of your root module.\n            │   └── foo/              # e.g.\n            │       ├── main.tf       # module \"foo\" {\n            │       ├── outputs.tf    #   source = \"./modules/foo\"\n            │       └── variables.tf  #   ...\n            └── variables.tf          # }\n```\n\n----------------------------------------\n\nTITLE: Helmfile Diff Command using Atmos\nDESCRIPTION: These examples show how to use the `atmos helmfile diff` command to display the differences between the current state and the desired state of a component in a specific stack. The `redirect-stderr` option is used to redirect standard error to a file or `/dev/null`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile diff echo-server -s tenant1-ue2-dev\natmos helmfile diff echo-server -s tenant1-ue2-dev --redirect-stderr /dev/null\n```\n\n----------------------------------------\n\nTITLE: Describing a component without function processing\nDESCRIPTION: This command describes a component's configuration without processing Atmos YAML functions. `--process-functions=false` disables function processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s tenant1-ue2-dev --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Generate Planfile with Skipped YAML Functions\nDESCRIPTION: Example demonstrating how to skip specific YAML functions during the planfile generation using the `--skip` flag. Multiple functions can be skipped by providing multiple `--skip` flags or by separating the function names with a comma.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack> --skip=eval --skip=include\natmos terraform generate planfile <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Dependents (bash)\nDESCRIPTION: This command describes the components affected by changes and includes the dependent components and stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --include-dependents=true\n```\n\n----------------------------------------\n\nTITLE: Displaying Atmos CLI Help\nDESCRIPTION: This snippet demonstrates the various ways to access the help documentation for the Atmos CLI using the `help`, `--help`, and `-h` flags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/help.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos help\natmos --help\natmos -h\n```\n\n----------------------------------------\n\nTITLE: Validating Stacks with ENV Variable\nDESCRIPTION: This example shows how to set the `ATMOS_SCHEMAS_ATMOS_MANIFEST` environment variable to point to the Atmos manifest schema file and validate stacks.  It uses a local path for the schema location.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nATMOS_SCHEMAS_ATMOS_MANIFEST=stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json atmos validate stacks\n```\n\n----------------------------------------\n\nTITLE: Require Terraform Variable with OPA (Rego)\nDESCRIPTION: This snippet provides an OPA policy written in Rego that enforces a specific Terraform variable (`name`) to be specified on the command line. The policy checks if the `name` variable is present in the `input.tf_cli_vars` section. If the variable is missing, the policy returns an error message.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/terraform-variables.mdx#_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\n# 'package atmos' is required in all `atmos` OPA policies\npackage atmos\n\n# Atmos looks for the 'errors' (array of strings) output from all OPA policies.\n# If the 'errors' output contains one or more error messages, Atmos considers the policy failed.\n\nerrors[\"for the 'my-component' component, the variable 'name' must be provided on the command line using the '-var' flag\"] {\n    not input.tf_cli_vars.name\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos Logs in YAML\nDESCRIPTION: This YAML snippet configures the Atmos logging file and level. The `file` parameter specifies the destination for log output (e.g., /dev/stderr), and the `level` parameter sets the verbosity of the logs (e.g., Info, Trace).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  # Can also be set using 'ATMOS_LOGS_FILE' ENV var, or '--logs-file' command-line argument\n  # File or standard file descriptor to write logs to\n  # Logs can be written to any file or any standard file descriptor, including `/dev/stdout`, `/dev/stderr` and `/dev/null`\n  file: \"/dev/stderr\"\n  # Supported log levels: Trace, Debug, Info, Warning, Off\n  # Can also be set using 'ATMOS_LOGS_LEVEL' ENV var, or '--logs-level' command-line argument\n  level: Info\n```\n\n----------------------------------------\n\nTITLE: YAML: Excluding Multiple Directories\nDESCRIPTION: This YAML snippet demonstrates how to use curly braces `{...}` to exclude multiple directories in a glob pattern. It excludes both `stargazers` and `archive` directories and their contents within the `demo-library` directory. This avoids the need for writing separate exclusion rules for each directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\nexcluded_paths:\n  - \"**/demo-library/**/{stargazers,archive}/**\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Illustrates a sample directory structure for Atmos configurations, including the locations of `atmos.yaml`, components, and stack definitions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n├── atmos.yaml\n├── components\n│   └── myapp\n│       ├── main.tf\n│       ├── outputs.tf\n│       └── variables.tf\n└── stacks\n    ├── catalog\n    │   └── myapp.yaml\n    └── deploy\n        ├── dev.yaml\n        ├── prod.yaml\n        └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Helmfile Components Configuration\nDESCRIPTION: This snippet shows the basic structure for configuring Helmfile components within the `atmos.yaml` file. The subsequent settings are defined under this `components.helmfile` section.  These settings control how Atmos interacts with Helmfile.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/helmfile.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  helmfile:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Describe Component: Disable Go Template Processing\nDESCRIPTION: This command describes a component within a specified stack and disables Go template processing.  The `<component>` and `<stack>` parameters are required. The `--process-templates` flag is set to `false` to disable template processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_component_usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe component <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow Configuration with YAML\nDESCRIPTION: Defines a stack configuration in YAML format, including variables, Terraform and Helmfile settings, component definitions, and a workflow named `deploy-all` to orchestrate Terraform deployments in a specific order.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvars: {}\n\nterraform:\n  vars: {}\n\nhelmfile:\n  vars: {}\n\ncomponents:\n  terraform:\n    fetch-location:\n      vars: {}\n\n    fetch-weather:\n      vars: {}\n\n    output-results:\n      vars:\n        print_users_weather_enabled: true\n\n  helmfile: {}\n\nworkflows:\n  deploy-all:\n    description: Deploy terraform projects in order\n    steps:\n      - command: terraform deploy fetch-location\n      - command: terraform deploy fetch-weather\n      - command: terraform deploy output-results\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration with Inheritance (Child Component) in YAML\nDESCRIPTION: This YAML snippet defines a child component `vpc` that inherits settings from `vpc/defaults`. It includes the component's metadata and overrides specific variables such as the component's name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvpc:\n  metadata:\n    component: vpc\n    inherits:\n      - vpc/defaults\n  vars:\n    name: vpc\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files for a test component override and stack\nDESCRIPTION: This command deletes Terraform-related files for the 'test/test-component-override-2' component in the 'tenant2-ue2-prod' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean test/test-component-override-2 -s tenant2-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backends with File Template (JSON)\nDESCRIPTION: This command generates Terraform backend files using a specified file template. The file template defines the naming convention and location for the generated backend files. The `--format json` option ensures the output is in JSON format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_backends_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform generate backends --file-template {component-path}/{tenant}/{environment}-{stage}.tf.json --format json\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Configuration Example\nDESCRIPTION: This YAML snippet shows an example of an Atmos stack configuration file. It includes sections for importing other configuration files, defining variables, and configuring Terraform and Helmfile components, including backend and specific variable settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-example-infra.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/cp/tenant1/staging/_defaults\n\nvars:\n  stage: dev\n\nterraform:\n  vars: {}\n\nhelmfile:\n  vars: {}\n\ncomponents:\n  terraform:\n    vpc:\n      command: \"/usr/bin/terraform-0.15\"\n      backend:\n        s3:\n          workspace_key_prefix: \"vpc\"\n      vars:\n        cidr_block: \"10.102.0.0/18\"\n    eks:\n      backend:\n        s3:\n          workspace_key_prefix: \"eks\"\n      vars: {}\n\n  helmfile:\n    nginx-ingress:\n      vars:\n        installed: true\n```\n\n----------------------------------------\n\nTITLE: Configure Terraform Command per Component\nDESCRIPTION: This YAML snippet demonstrates how to override Terraform settings for specific components in Atmos. By defining component-specific settings within the `components.terraform._component_` section of a Stack configuration, you can customize the Terraform command used for legacy components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/terraform.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      command: \"/usr/local/bin/terraform-0.13\"\n```\n\n----------------------------------------\n\nTITLE: Configure vpc-flow-logs-bucket Component in ue2-dev YAML\nDESCRIPTION: This YAML snippet shows how to import and configure the `vpc-flow-logs-bucket-1` Atmos component within the `ue2-dev` stack. It inherits settings from the `vpc-flow-logs-bucket/defaults` base Atmos component and points to the Terraform component definition.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the base Atmos component configuration from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n# File extensions are optional (if not specified, `.yaml` is used by default).\nimport:\n  - catalog/vpc-flow-logs-bucket\n\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket-1:\n      metadata:\n        # Point to the Terraform component in `components/terraform` folder\n        component: infra/vpc-flow-logs-bucket\n        inherits:\n          # Inherit all settings and variables from the\n          # `vpc-flow-logs-bucket/defaults` base Atmos component\n          - vpc-flow-logs-bucket/defaults\n```\n\n----------------------------------------\n\nTITLE: Suggesting Helm Release Fix with mapkubeapis\nDESCRIPTION: This multi-line string explains how to fix Helm releases that contain removed Kubernetes APIs before upgrading the cluster. It describes the process of identifying the latest chart versions, updating the charts, and using the `helm mapkubeapis` plugin to update release manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndescribe_how_to_fix_helm_releases=\"\n                    \\nBefore upgrading the cluster to Kubernetes ${next_k8s_version}, the Helm releases need to be fixed.\n\n                    - For the Helm releases identified, you need to check for the latest version of the Chart (which has supported API versions) \n                      or update the Chart yourself. Then deploy the updated Chart\n\n                    - If the cluster was already upgraded to a new Kubernetes version without auditing for the removed API versions, it might be already running \n                      with the removed API versions. When trying to redeploy the Helm Chart, you might encounter an error similar to the following:\n\n                          Error: UPGRADE FAILED: current release manifest contains removed kubernetes api(s)\n                          for this kubernetes version and it is therefore unable to build the kubernetes\n                          objects for performing the diff. \n                          Error from Kubernetes: unable to recognize \\\"\\\": no matches for kind \\\"Deployment\\\" in version \\\"apps/v1beta1\\\"\n\n                      Helm fails in this scenario because it attempts to create a diff patch between the current deployed release \n                      (which contains the Kubernetes APIs that are removed) against the Chart you are passing with the updated/supported API versions.\n\n                      To fix this, you need to edit the release manifests that are stored in the cluster to use the supported API versions.\n                      You can use the Helm 'mapkubeapis' plugin to update/patch the Helm releases to supported APIs.\n                      Execute the following commands to patch the releases identified above:\n\n                          helm plugin install https://github.com/helm/helm-mapkubeapis\n                          helm mapkubeapis <NAME> -n <NAMESPACE>\n\n                    NOTE: The best practice is to upgrade Helm releases that are using deprecated API versions to supported API versions \n                          prior to upgrading to a Kubernetes version that removes those APIs.\n\n                    For more information, refer to:\n                      - https://helm.sh/docs/topics/kubernetes_apis\n                      - https://github.com/helm/helm-mapkubeapis\n                  \"\necho -e \"${describe_how_to_fix_helm_releases}\"\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with a custom SHA\nDESCRIPTION: Specifies a custom git commit SHA to compare against when using `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Pull Command Usage Examples\nDESCRIPTION: Examples demonstrating the basic usage of the `atmos vendor pull` command with different options, including pulling all sources, a specific component, or components with specific tags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull\natmos vendor pull --everything\natmos vendor pull --component <component> [options]\natmos vendor pull -c <component> [options]\natmos vendor pull --tags <tag1>,<tag2> [options]\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Stacks YAML Output\nDESCRIPTION: This YAML code snippet shows an example output of the `atmos describe stacks` command. It details the configuration for the 'plat-ue2-dev' stack, including component settings and variables for Terraform components like 'vpc' and 'vpc-flow-logs-bucket'.  The configuration includes backend settings, command details, inheritance, metadata, overrides, remote state configuration, settings, variables, and workspace information.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/describe/stacks.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplat-ue2-dev:\n  components:\n    terraform:\n      vpc:\n        backend: {}\n        backend_type: s3\n        command: terraform\n        component: vpc\n        env: {}\n        inheritance: []\n        metadata:\n          component: vpc\n        overrides: {}\n        remote_state_backend: {}\n        remote_state_backend_type: \"\"\n        settings:\n          validation:\n            check-vpc-component-config-with-opa-policy:\n              description: Check 'vpc' component configuration using OPA policy\n              disabled: false\n              module_paths:\n                - catalog/constants\n              schema_path: vpc/validate-vpc-component.rego\n              schema_type: opa\n              timeout: 10\n            validate-vpc-component-with-jsonschema:\n              description: Validate 'vpc' component variables using JSON Schema\n              schema_path: vpc/validate-vpc-component.json\n              schema_type: jsonschema\n        vars:\n          availability_zones:\n            - us-east-2a\n            - us-east-2b\n            - us-east-2c\n          enabled: true\n          environment: ue2\n          map_public_ip_on_launch: true\n          max_subnet_count: 3\n          name: common\n          namespace: acme\n          nat_gateway_enabled: true\n          nat_instance_enabled: false\n          region: us-east-2\n          stage: dev\n          tenant: plat\n          vpc_flow_logs_enabled: true\n          vpc_flow_logs_log_destination_type: s3\n          vpc_flow_logs_traffic_type: ALL\n        workspace: plat-ue2-dev\n      vpc-flow-logs-bucket:\n        backend: {}\n        backend_type: s3\n        command: terraform\n        component: vpc-flow-logs-bucket\n        env: {}\n        inheritance: []\n        metadata:\n          component: vpc-flow-logs-bucket\n        overrides: {}\n        remote_state_backend: {}\n        remote_state_backend_type: \"\"\n        settings: {}\n        vars:\n          enabled: true\n          environment: ue2\n          force_destroy: true\n          lifecycle_rule_enabled: false\n          name: vpc-flow-logs\n          namespace: acme\n          region: us-east-2\n          stage: dev\n          tenant: plat\n          traffic_type: ALL\n        workspace: plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: EKS Update Kubeconfig with Profile and Cluster Name\nDESCRIPTION: This snippet shows how to use the `atmos aws eks update-kubeconfig` command with explicit profile and cluster name.  It executes the command without requiring the `atmos.yaml` CLI config and context.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/aws/aws-eks-update-kubeconfig.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name>\n```\n\n----------------------------------------\n\nTITLE: Atmos Filesystem Layout Example (Stacks and Components)\nDESCRIPTION: This example illustrates a basic filesystem layout for an Atmos project, including the `stacks`, `components`, and `atmos.yaml` files. The `components` directory is further organized by tool, such as `terraform` and `helmfile`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-repository.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration\n   ├── stacks/\n   │   ├── <stack_1>.yaml\n   │   ├── <stack_2>.yaml\n   │   └── <stack_3>.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   ├── components/\n   │   ├── terraform/   # Terraform components (Terraform root modules)\n   │   │   ├── <terraform_component_1>/\n   │   │   ├── <terraform_component_2>/\n   │   │   └── <terraform_component_3>/\n   │   └── helmfile/  # Helmfile components are organized by Helm chart\n   │       ├── <helmfile_component_1>/\n   │       ├── <helmfile_component_2>/\n   │       └── <helmfile_component_3>/\n   │\n   │   # Atmos CLI configuration\n   ├── atmos.yaml\n   │   # Atmos vendoring configuration\n   └── vendor.yaml\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles with custom file template\nDESCRIPTION: Generates Terraform varfiles using a different file template, allowing customization of the output path and filename based on tenant, environment, and stage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --file-template /configs/{tenant}/{environment}/{stage}/{component}.json\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Go Template Processing (Shell)\nDESCRIPTION: This command enables or disables Go template processing in Atmos stack manifests. The `--process-templates` flag is set to either `true` or `false`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: This example shows a directory structure for configuring Atmos components and stacks. It shows how components are organized, how defaults are defined, and how layers are grouped.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration (stack manifests)\n   ├── stacks\n   │   ├── catalog  # component-specific defaults\n   │   │   ├── alb\n   │   │   │   └── defaults.yaml\n   │   │   ├── aurora-postgres\n   │   │   │   └── defaults.yaml\n   │   │   ├── dns\n   │   │   │   └── defaults.yaml\n   │   │   ├── eks\n   │   │   │   └── defaults.yaml\n   │   │   ├── efs\n   │   │   │   └── defaults.yaml\n   │   │   ├── msk\n   │   │   │   └── defaults.yaml\n   │   │   ├── ses\n   │   │   │   └── defaults.yaml\n   │   │   ├── sns-topic\n   │   │   │   └── defaults.yaml\n   │   │   ├── network-firewall\n   │   │   │   └── defaults.yaml\n   │   │   ├── network-firewall-logs-bucket\n   │   │   │   └── defaults.yaml\n   │   │   ├── waf\n   │   │   │   └── defaults.yaml\n   │   │   ├── vpc\n   │   │   │   └── defaults.yaml\n   │   │   └── vpc-flow-logs-bucket\n   │   │       └── defaults.yaml\n   │   ├── layers  # grouping of components by category/function\n   │   │   ├── load-balancers.yaml\n   │   │   ├── data.yaml\n   │   │   ├── dns.yaml\n   │   │   ├── logs.yaml\n   │   │   ├── notifications.yaml\n   │   │   ├── firewalls.yaml\n   │   │   ├── networking.yaml\n   │   │   └── eks.yaml\n   │   ├── mixins\n   │   │   ├── tenant  # tenant-specific defaults\n   │   │   │   └── plat.yaml\n   │   │   ├── region  # region-specific defaults\n   │   │   │   ├── us-east-2.yaml\n   │   │   │   └── us-west-2.yaml\n   │   │   └── stage  # stage-specific defaults\n   │   │       ├── dev.yaml\n   │   │       ├── staging.yaml\n   │   │       └── prod.yaml\n   │   └── orgs  # Organizations\n   │       └── acme\n   │           ├── _defaults.yaml\n   │           └── plat  # 'plat' represents the \"Platform\" OU (a.k.a tenant)\n   │               ├── _defaults.yaml\n   │               ├── dev\n   │               │   ├── _defaults.yaml\n   │               │   ├── global-region.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               ├── staging\n   │               │   ├── _defaults.yaml\n   │               │   ├── global-region.yaml\n   │               │   ├── us-east-2.yaml\n   │               │   └── us-west-2.yaml\n   │               └── prod\n   │                   ├── _defaults.yaml\n   │                   ├── global-region.yaml\n   │                   ├── us-east-2.yaml\n   │                   └── us-west-2.yaml\n   │   # Centralized components configuration\n   └── components\n       └── terraform  # Terraform components (a.k.a Terraform \"root\" modules)\n           ├── alb\n           ├── aurora-postgres\n           ├── dns\n           ├── eks\n           ├── efs\n           ├── msk\n           ├── ses\n           ├── sns-topic\n           ├── network-firewall\n           ├── network-firewall-logs-bucket\n           ├── waf\n           ├── vpc\n           └── vpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Get Atmos CLI Version\nDESCRIPTION: This command is used to retrieve the installed version of the Atmos CLI. Executing this command will display the current version of the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/version.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos version\n```\n\n----------------------------------------\n\nTITLE: Customizing Pull Request Details in Workflow (atmos.yaml)\nDESCRIPTION: This example demonstrates how to customize the pull request title, body, and labels generated by the Atmos Component Updater GitHub Action. It shows how to use the `pr-title`, `pr-body`, and `pr-labels` parameters within the workflow configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/component-updater.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n  - name: Update Atmos Components\n    uses: cloudposse/github-action-atmos-component-updater@v1\n    with:\n      github-access-token: ${{ secrets.GITHUB_TOKEN }}\n      max-number-of-prs: 5\n      pr-title: 'Update Atmos Component \\`{{ component_name }}\\` to {{ new_version }}'\n      pr-body: |\n        ## what\n        Component \\`{{ component_name }}\\` was updated [{{ old_version }}]({{ old_version_link }}) → [{{ old_version }}]({{ old_version_link }}).\n\n        ## references\n        - [{{ source_name }}]({{ source_link }})\n      pr-labels: |\n        component-update\n        automated\n        atmos\n```\n\n----------------------------------------\n\nTITLE: Plan Terraform Root Modules with Atmos\nDESCRIPTION: Executes a Terraform plan for root modules using the Atmos CLI.  Requires Atmos CLI, Terraform, and a valid Atmos project.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos Logs for Trace Level in YAML\nDESCRIPTION: This YAML snippet configures Atmos to log at the Trace level, directing all output to standard output. Setting the log level to Trace enables verbose logging for debugging purposes. This can be used to inspect all internal operations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  file: \"/dev/stdout\"\n  level: Trace\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files for a test component and stack\nDESCRIPTION: This command deletes Terraform-related files for the 'test/test-component' component in the 'tenant1-ue2-dev' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean test/test-component -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Account Defaults in YAML (org2/plat/dev)\nDESCRIPTION: This YAML configuration defines default settings for the `org2` organization, `plat` tenant, and `dev` account. It imports the tenant defaults and the `dev` stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org2/plat/_defaults\n  - mixins/stage/dev\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Vendor Pull Help\nDESCRIPTION: Displays the help information for the `atmos vendor pull` command, used for pulling vendored dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull --help\n```\n\n----------------------------------------\n\nTITLE: Configure Account Defaults in YAML (org1/plat/dev)\nDESCRIPTION: This YAML configuration defines default settings for the `org1` organization, `plat` tenant, and `dev` account. It imports the tenant defaults and the `dev` stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/_defaults\n  - mixins/stage/dev\n```\n\n----------------------------------------\n\nTITLE: Apply Bash Configuration Changes\nDESCRIPTION: Applies the changes made to the `.bashrc` or `.bash_profile` file by sourcing it. This ensures that the new shell settings, including the Atmos CLI completion, are loaded into the current shell session.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos list components Command\nDESCRIPTION: This console snippet shows the output of the `atmos list components -s plat-ue2-dev` command. The output is a list of component names present in the stack 'plat-ue2-dev'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/add-custom-commands.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nvpc\nvpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Handling default values with spaces in !env (YAML)\nDESCRIPTION: Illustrates how to provide default values containing spaces when using the `!env` function. Double quotes are used to enclose the default value and single quotes surround the entire expression.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/env.mdx#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# `app_name` will be set to the default value `my app` if the environment variable `APP_NAME` is not present in the environment\napp_name: !env 'APP_NAME \"my app\"'\n\n# `app_description` will be set to the default value `my app description` if the environment variable `APP_DESCRIPTION` is not present in the environment\napp_description: !env 'APP_DESCRIPTION \"my app description\"'\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration in atmos.yaml\nDESCRIPTION: This YAML snippet configures the Atmos CLI, specifying base paths for Terraform components and stacks, a naming pattern for stacks, and paths to include and exclude when searching for stack manifests. It also defines the base paths for JSON schema and OPA policy files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-template.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Define Atmos Components in YAML\nDESCRIPTION: This YAML configuration defines two Atmos components, `station/1` and `station/2`, which both point to the same Terraform component `components/terraform/weather`. It demonstrates how to use inheritance to merge baseline configurations and how to define/override variables specific to each component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/add-another-component.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the baseline for all station components\n  - catalog/station\n\ncomponents:\n  terraform:\n  # Atmos component `station/1`\n  station/1:\n    metadata:\n    # Point to the Terraform component in `components/terraform/weather`\n    component: weather\n    # Inherit the defaults for all station components\n    inherits:\n      - station\n    # Define/override variables specific to this `station/1` component\n    vars:\n      name: station-1\n\n  # Atmos component `station/2`\n  station/2:\n    metadata:\n    # Point to the Terraform component in `components/terraform/weather`\n    component: weather\n    # Inherit the defaults for all station components\n    inherits:\n      - station\n    # Define/override variables specific to this `station/2` component\n    vars:\n      name: station-2\n```\n\n----------------------------------------\n\nTITLE: Terraform State Management (Workspace Selection) in Shell\nDESCRIPTION: These shell snippets demonstrates how to select an existing terraform workspace, dump the terraform state to a local file, create a new workspace and push the state to the new workspace.  The command `terraform workspace select` selects an existing workspace, `terraform state pull` downloads the current state to a file, `terraform workspace new` creates a new workspace, and `terraform state push` uploads the local state file to the currently active workspace.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n⨠ terraform workspace select plat-ue2-dev\n```\n\nLANGUAGE: sh\nCODE:\n```\n⨠ terraform state pull > plat-ue2-dev.tfstate\n```\n\nLANGUAGE: sh\nCODE:\n```\n⨠ terraform workspace select plat-ue2-dev-vpc1\n⨠ terraform workspace new plat-ue2-dev-vpc1\nCreated and switched to workspace \"plat-ue2-dev-vpc1\"!\n```\n\nLANGUAGE: sh\nCODE:\n```\n⨠ terraform state push plat-ue2-dev.tfstate\nReleasing state lock. This may take a few moments...\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace with Dry Run\nDESCRIPTION: Executes the `atmos terraform workspace` command with the `--dry-run` flag, which allows previewing the actions without actually executing them.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Organizations Filesystem Layout Example\nDESCRIPTION: This example demonstrates a filesystem layout based on organizational units (OUs) and accounts within an AWS environment. It illustrates how to structure stack configurations to mirror the hierarchical structure of AWS infrastructure, facilitating organizational management of cloud resources via Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/catalogs.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n└── stacks/\n    └── orgs/\n        └── acme/\n            ├── ou1/\n            │   ├── account1/\n            │   │   ├── global-region.yaml\n            │   │   └── us-east-2.yaml\n            │   ├── account2/\n            │   │   ├── global-region.yaml\n            │   │   └── us-east-2.yaml\n            │   └── account3/\n            │       ├── global-region.yaml\n            │       └── us-east-2.yaml\n            └── ou2/\n                ├── dev/\n                │   ├── global-region.yaml\n                │   └── us-east-2.yaml\n                ├── prod/\n                │   ├── global-region.yaml\n                │   └── us-east-2.yaml\n                └── staging/\n                    ├── global-region.yaml\n                    └── us-east-2.yaml\n```\n\n----------------------------------------\n\nTITLE: Helmfile Diff with Atmos CLI\nDESCRIPTION: This command shows the differences between the current state and the desired state of the `nginx-ingress` Helmfile component in the `ue2-dev` stack. It uses the `atmos helmfile diff` command with the component name and stack name as arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/helmfile.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile diff nginx-ingress --stack=ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Dry Run\nDESCRIPTION: This command performs a dry run to generate the Terraform backend config file for an Atmos terraform component in a stack without actually creating it. The `--dry-run=true` flag enables the dry run.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Execute Terraform varfiles generation\nDESCRIPTION: Executes the `terraform generate varfiles` command to generate Terraform varfiles for all Atmos terraform components in all stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles [options]\n```\n\n----------------------------------------\n\nTITLE: Regenerate Snapshots for All Tests (Shell)\nDESCRIPTION: This command regenerates all golden snapshots for the Atmos tests. After regenerating, it's important to review the differences using `git diff tests/snapshots` to ensure the changes are expected.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit diff tests/snapshots\n```\n\n----------------------------------------\n\nTITLE: Resume Atmos Workflow from Step\nDESCRIPTION: This command shows how to resume a failed workflow from a specific step using the `--from-step` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\natmos workflow provision-vpcs -f networking --from-step step-2\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Settings (bash)\nDESCRIPTION: This command describes the components affected by changes and includes the 'settings' section for each affected component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --include-settings=true\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Atmos Components and Stacks\nDESCRIPTION: This command generates a list of affected Atmos components and stacks based on two provided Git commits. It's useful for identifying changes in infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe affected\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Token Default Value\nDESCRIPTION: This snippet defines the default value for the `token` input parameter of the GitHub Action. It conditionally sets the token based on whether the action is running on github.com or a GHES instance.  When running on GHES, a personal access token for github.com may be used to avoid rate limiting.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-drift-remediation.mdx#_snippet_1\n\nLANGUAGE: string\nCODE:\n```\n${{ github.server_url == 'https://github.com' && github.token || '' }}\n```\n\n----------------------------------------\n\nTITLE: Describing Component Dependents to a File\nDESCRIPTION: This command uses the Atmos CLI to describe the dependents of a specified component within a particular stack. The `--file` flag directs the command to write the output to a file named `dependents.yaml`. Requires atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_dependents_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe dependents <component> -s <stack> --file dependents.yaml\n```\n\n----------------------------------------\n\nTITLE: Create a basic Atmos workflow definition in YAML\nDESCRIPTION: This code snippet demonstrates how to define an Atmos workflow in a YAML file. The workflow includes two workflows, `plan-all` and `apply-all`, each consisting of multiple steps to run `terraform plan` and `terraform apply` commands for different environments (dev, staging, prod).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/create-workflows.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Workflows for Weather Station\ndescription: Atmos workflows for managing Weather Station\n\nworkflows:\n\n  plan-all:\n    description: |\n      Run 'terraform plan' on all 'station' components in all stacks\n    steps:\n      - command: terraform plan station -s dev\n      - command: terraform plan station -s staging\n      - command: terraform plan station -s prod\n\n  apply-all:\n    description: |\n      Run 'terraform apply' on all 'station' components in all stacks\n    steps:\n      - command: terraform apply station -auto-approve -s dev\n      - command: terraform apply station -auto-approve -s staging\n      - command: terraform apply station -auto-approve -s prod\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Verbose Output (bash)\nDESCRIPTION: This command describes the components affected by changes and enables verbose output during Git repository cloning and checkout processes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --verbose=true\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Command\nDESCRIPTION: This shell command executes the `terraform apply` command for the `vpc` component within the `ue2-dev` stack using Atmos. Atmos will automatically select (or create) the Terraform workspace corresponding to the stack name (`ue2-dev`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows (List Output)\nDESCRIPTION: Illustrates the `atmos describe workflows` command with the `--output list` option.  The output is a list of workflow objects, each containing the 'file' (workflow manifest file name) and 'workflow' (workflow name).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows\natmos describe workflows -o list\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Backend Configuration for static-site\nDESCRIPTION: Uses Atmos to generate the backend configuration for the static-site component, targeting the uw2-dev stack. This creates a `backend.tf.json` file in the component's directory so that component will always utilize the correct S3 backend.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform generate backend static-site --stack uw2-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Config in YAML format with syntax highlighting\nDESCRIPTION: This bash command demonstrates how to display the configuration in YAML format with syntax highlighting using the `atmos describe config` command with the `-f yaml` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/terminal.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Display config in YAML format with syntax highlighting\natmos describe config -f yaml\n```\n\n----------------------------------------\n\nTITLE: Teams Filesystem Layout Example\nDESCRIPTION: This code snippet illustrates a directory structure organized around teams and their applications. It shows how to structure stack configurations based on teams, applications, microservices, and environments, enabling team-based management of infrastructure using Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/catalogs.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n└── stacks/\n    └── teams/\n        └── frontend/\n            └── ecom-store/\n                ├── checkout/\n                │    ├── prod.yaml\n                │    ├── dev.yaml\n                │    └── staging.yaml\n                └── cart/\n                    ├── prod.yaml\n                    ├── dev.yaml\n                    └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Clone with SSH Key and Password (Bash)\nDESCRIPTION: This command uses a PEM-encoded private key with a password to clone private repositories using SSH.  The path to the SSH key is specified using the `--ssh-key` flag, the password using the `--ssh-key-password` flag and `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$  atmos atlantis generate repo-config --affected-only --ssh-key <path_to_ssh_key> --ssh-key-password <password>\n```\n\n----------------------------------------\n\nTITLE: Overriding Google Cloud Storage Prefix in Component (YAML)\nDESCRIPTION: This snippet demonstrates how to override the Google Cloud Storage `prefix` parameter for a specific component in its manifest. It's used to customize the prefix within the GCS bucket where the Terraform state file is stored. This allows component-specific state management within the shared bucket.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      # Optional backend configuration for the component\n      backend:\n        gcp:\n          prefix: \"my-component\"\n```\n\n----------------------------------------\n\nTITLE: Output Atmos workflows in TSV format\nDESCRIPTION: This command outputs the list of Atmos workflows in TSV (Tab-Separated Values) format, suitable for data processing and analysis. The delimiter is a tab character.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows --format tsv\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Validate Stacks Help\nDESCRIPTION: Displays help for `atmos validate stacks`, validating stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks --help\n```\n\n----------------------------------------\n\nTITLE: Disabling Syntax Highlighting when Piping Output\nDESCRIPTION: This bash command demonstrates that syntax highlighting is automatically disabled when the output of `atmos describe config` is piped to another command, such as `grep`. This ensures compatibility when piping output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/terminal.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Syntax highlighting is disabled when piping\natmos describe config | grep base_path\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Dependents Examples\nDESCRIPTION: Provides a series of example commands for using `atmos describe dependents` with various options, including specifying the stack, output format, and query.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos describe dependents test/test-component -s tenant1-ue2-test-1\natmos describe dependents test/test-component -s tenant1-ue2-dev --format yaml\natmos describe dependents test/test-component -s tenant1-ue2-test-1 -f yaml\natmos describe dependents test/test-component -s tenant1-ue2-test-1 --file dependents.json\natmos describe dependents test/test-component -s tenant1-ue2-test-1 --format yaml --file dependents.yaml\natmos describe dependents test/test-component -s tenant1-ue2-test-1 --query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: Helmfile Diff (Short Syntax) with Atmos CLI\nDESCRIPTION: This command shows the differences between the current state and the desired state of the `nginx-ingress` Helmfile component in the `ue2-dev` stack using the short syntax for command line arguments. It uses `atmos helmfile diff` command with short argument `-s` for stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/helmfile.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile diff nginx-ingress -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Modified Atmos component definition in stack.yaml\nDESCRIPTION: This YAML snippet shows the modified `derived-component-2` component definition with a different order in the `inherits` list. This change affects the inheritance of variables and demonstrates the importance of inheritance order in Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n\n    derived-component-2:\n      metadata:\n        component: \"test/test-component\"\n        inherits:\n          - derived-component-1\n          - base-component-2\n      vars: {}\n```\n\n----------------------------------------\n\nTITLE: Example atmos list metadata output\nDESCRIPTION: This is an example output from the command `atmos list metadata`. It shows the component, type, and version metadata for the `dev-ue1`, `staging-ue1`, and `prod-ue1` stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-metadata.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> atmos list metadata\n┌──────────────┬──────────────┬──────────────┬──────────────┐\n│              │   dev-ue1    │  staging-ue1 │   prod-ue1   │\n├──────────────┼──────────────┼──────────────┼──────────────┤\n│ component    │ vpc          │ vpc          │ vpc          │\n│ type         │ terraform    │ terraform    │ terraform    │\n│ version      │ 1.0.0        │ 1.0.0        │ 1.0.0        │\n└──────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Generate varfiles for a list of stacks\nDESCRIPTION: Generate Terraform varfiles for a list of stacks specified as comma separated values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfiles.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --stacks orgs/cp/tenant1/staging/us-east-2,tenant1-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Component - YAML Output\nDESCRIPTION: This YAML snippet shows the output of `atmos describe component test/test-component-override-3 -s tenant1-ue2-dev`. It illustrates how Atmos resolves component variables by merging values from multiple stack manifests. The `sources.vars` section details the origin and inheritance of each variable, showing the final value and the stack manifests that contributed to it.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  vars:\n    enabled:\n      final_value: true\n      name: enabled\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/test-component\n          stack_file_section: components.terraform.vars\n          variable_value: true\n        - dependency_type: inline\n          stack_file: orgs/cp/tenant1/dev/us-east-2\n          stack_file_section: terraform.vars\n          variable_value: false\n        - dependency_type: inline\n          stack_file: orgs/cp/tenant1/dev/us-east-2\n          stack_file_section: vars\n          variable_value: true\n    environment:\n      final_value: ue2\n      name: environment\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: mixins/region/us-east-2\n          stack_file_section: vars\n          variable_value: ue2\n    namespace:\n      final_value: cp\n      name: namespace\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: orgs/cp/_defaults\n          stack_file_section: vars\n          variable_value: cp\n    region:\n      final_value: us-east-2\n      name: region\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: mixins/region/us-east-2\n          stack_file_section: vars\n          variable_value: us-east-2\n    service_1_map:\n      final_value:\n        a: 1\n        b: 6\n        c: 7\n        d: 8\n      name: service_1_map\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/services/service-1-override-2\n          stack_file_section: components.terraform.vars\n          variable_value:\n            b: 6\n            c: 7\n            d: 8\n        - dependency_type: import\n          stack_file: catalog/terraform/services/service-1-override\n          stack_file_section: components.terraform.vars\n          variable_value:\n            a: 1\n            b: 2\n            c: 3\n    service_1_name:\n      final_value: mixin-2\n      name: service_1_name\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: catalog/terraform/mixins/test-2\n          stack_file_section: components.terraform.vars\n          variable_value: mixin-2\n        - dependency_type: import\n          stack_file: catalog/terraform/mixins/test-1\n          stack_file_section: components.terraform.vars\n          variable_value: mixin-1\n        - dependency_type: import\n          stack_file: catalog/terraform/services/service-1-override-2\n          stack_file_section: components.terraform.vars\n          variable_value: service-1-override-2\n        - dependency_type: import\n          stack_file: catalog/terraform/tenant1-ue2-dev\n          stack_file_section: components.terraform.vars\n          variable_value: service-1-override-2\n        - dependency_type: import\n          stack_file: catalog/terraform/services/service-1-override\n          stack_file_section: components.terraform.vars\n          variable_value: service-1-override\n        - dependency_type: import\n          stack_file: catalog/terraform/services/service-1\n          stack_file_section: components.terraform.vars\n          variable_value: service-1\n    stage:\n      final_value: dev\n      name: stage\n      stack_dependencies:\n        - dependency_type: import\n          stack_file: mixins/stage/dev\n          stack_file_section: vars\n          variable_value: dev\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace Command Examples\nDESCRIPTION: Examples demonstrating the use of `atmos terraform workspace` command to manage Terraform workspaces, with options for redirecting standard error.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev\natmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev --redirect-stderr /dev/null\natmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev --redirect-stderr /dev/stdout\natmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev --redirect-stderr ./errors.txt\n```\n\n----------------------------------------\n\nTITLE: GitHub Job Matrices Workflow\nDESCRIPTION: This diagram illustrates how to handle the GitHub Actions matrix limitation of 256 jobs by using reusable workflows. The top-level workflow calls multiple reusable workflows, each of which then calls the Atmos Terraform Plan Composite Action for a subset of components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-drift-detection.mdx#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n--- \n title: GitHub Job Matrices\n---\nstateDiagram-v2\n  direction LR\n  [*] --> top\n  top --> reusable1\n  top --> reusable2\n  top --> reusable3\n  reusable1 --> component1\n  reusable1 --> component2\n  reusable1 --> component3\n  reusable2 --> component4\n  reusable2 --> component5\n  reusable2 --> component6\n  reusable3 --> component7\n  reusable3 --> component8\n  reusable3 --> component9\n\n  state \"Atmos Terraform Plan (Top Level Workflow)\" as top\n  state \"Atmos Terraform Plan Matrix (Reusable Workflow) - Group A\" as reusable1\n  state \"Atmos Terraform Plan Matrix (Reusable Workflow) - Group B\" as reusable2\n  state \"Atmos Terraform Plan Matrix (Reusable Workflow) - Group C\" as reusable3\n  state \"Atmos Terraform Plan (Composite Action) - Component 1\" as component1\n  state \"Atmos Terraform Plan (Composite Action) - Component 2\" as component2\n  state \"Atmos Terraform Plan (Composite Action) - Component 3\" as component3\n  state \"Atmos Terraform Plan (Composite Action) - Component 4\" as component4\n  state \"Atmos Terraform Plan (Composite Action) - Component 5\" as component5\n  state \"Atmos Terraform Plan (Composite Action) - Component 6\" as component6\n  state \"Atmos Terraform Plan (Composite Action) - Component 7\" as component7\n  state \"Atmos Terraform Plan (Composite Action) - Component 8\" as component8\n  state \"Atmos Terraform Plan (Composite Action) - Component 9\" as component9\n```\n\n----------------------------------------\n\nTITLE: List Atmos Workflows in CSV Format with Delimiter\nDESCRIPTION: This command lists all Atmos workflows and outputs the result in CSV format using the specified delimiter. The example uses a comma (,) as the delimiter.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_workflows_usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list workflows --format csv --delimiter ','\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Example 4\nDESCRIPTION: This example generates a Terraform backend for the `test/test-component-override-2` component in the `tenant2-ue2-prod` stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend test/test-component-override-2 -s tenant2-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: List settings for specific stacks in atmos\nDESCRIPTION: These commands demonstrate how to filter the list of settings by specifying a stack pattern. This is useful for focusing on specific environments like development or production.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-settings.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# List settings for dev stacks\natmos list settings --stack '*-dev-*'\n\n# List settings for production stacks\natmos list settings --stack 'prod-*'\n```\n\n----------------------------------------\n\nTITLE: Output of atmos describe affected --verbose=true\nDESCRIPTION: Example output from running the `atmos describe affected` command with the `--verbose=true` option. This output shows the cloning process, changed files, and a list of affected components and stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> atmos describe affected --verbose=true\n\nCloning repo 'https://github.com/cloudposse/atmos' into the temp dir '/var/folders/g5/lbvzy_ld2hx4mgrgyp19bvb00000gn/T/16710736261366892599'\n\nChecking out the HEAD of the default branch ...\n\nEnumerating objects: 4215, done.\nCounting objects: 100% (1157/1157), done.\nCompressing objects: 100% (576/576), done.\nTotal 4215 (delta 658), reused 911 (delta 511), pack-reused 3058\n\nChecked out Git ref 'refs/heads/main'\n\nCurrent HEAD: 7d37c1e890514479fae404d13841a2754be70cbf refs/heads/describe-affected\nBASE: 40210e8d365d3d88ac13c0778c0867b679bbba69 refs/heads/main\n\nChanged files:\n\ntests/fixtures/scenarios/complete/components/terraform/infra/vpc/main.tf\ninternal/exec/describe_affected.go\nwebsite/docs/cli/commands/describe/describe-affected.md\n\nAffected components and stacks:\n\n[\n   {\n      \"component\": \"infra/vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"components/terraform/infra/vpc\",\n      \"stack\": \"tenant1-ue2-dev\",\n      \"stack_slug\": \"tenant1-ue2-dev-infra-vpc\",\n      \"spacelift_stack\": \"tenant1-ue2-dev-infra-vpc\",\n      \"atlantis_project\": \"tenant1-ue2-dev-infra-vpc\",\n      \"affected\": \"component\"\n   },\n   {\n      \"component\": \"infra/vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"components/terraform/infra/vpc\",\n      \"stack\": \"tenant1-ue2-prod\",\n      \"stack_slug\": \"tenant1-ue2-prod-infra-vpc\",\n      \"spacelift_stack\": \"tenant1-ue2-prod-infra-vpc\",\n      \"atlantis_project\": \"tenant1-ue2-prod-infra-vpc\",\n      \"affected\": \"component\"\n   },\n   {\n      \"component\": \"infra/vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"components/terraform/infra/vpc\",\n      \"stack\": \"tenant1-ue2-staging\",\n      \"stack_slug\": \"tenant1-ue2-staging-infra-vpc\",\n      \"spacelift_stack\": \"tenant1-ue2-staging-infra-vpc\",\n      \"atlantis_project\": \"tenant1-ue2-staging-infra-vpc\",\n      \"affected\": \"component\"\n   },\n     {\n    \"component\": \"top-level-component3\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"components/terraform/top-level-component1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"affected\": \"file\",\n    \"file\": \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n  },\n  {\n    \"component\": \"top-level-component3\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"components/terraform/top-level-component1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"affected\": \"folder\",\n    \"folder\": \"tests/fixtures/scenarios/complete/components/helmfile/infra/infra-server\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Aqua\nDESCRIPTION: This snippet initializes aqua in your project\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\naqua init\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Template Processing (bash)\nDESCRIPTION: This command describes the components affected by changes and enables/disables Go template processing in Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Terraform Init Command Example\nDESCRIPTION: Example usage of the `atmos terraform init` command to initialize a Terraform working directory for a specific component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform init test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Combined Conventions Filesystem Layout\nDESCRIPTION: This code snippet shows an example of combining multiple conventions for structuring stack configurations. It integrates organizations, organizational units, stages, and regions into a single directory structure, demonstrating a flexible approach for organizing complex infrastructure deployments using Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/catalogs.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n└── orgs/\n    └── acme/\n        └── platform/\n            ├── prod/\n            │   ├── us-east-1/\n            │   │    ├── networking.yaml\n            │   │    ├── compliance.yaml\n            │   │    ├── backing-services.yaml\n            │   │    └── teams.yaml\n            │   └── us-west-2/\n            │       ├── networking.yaml\n            │       ├── compliance.yaml                        \n            │       ├── backing-services.yaml\n            │       └── teams.yaml\n            ├── staging/\n            │   └── us-west-1/\n            │       ├── networking.yaml\n            │       ├── compliance.yaml   \n            │       ├── backing-services.yaml\n            │       └── teams.yaml\n            └── dev/\n                └── us-west-2/\n                    ├── networking.yaml\n                    ├── backing-services.yaml\n                    └── teams.yaml                  \n                 \n```\n\n----------------------------------------\n\nTITLE: Terraform Component Schema in Atmos Stack (YAML)\nDESCRIPTION: Defines the schema for configuring a Terraform component within an Atmos stack.  It includes metadata for component type, component path, inheritance, settings, and the vars section for Terraform variables. These variables are deep-merged and exported to a `.tfvars` file by Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/define-components.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # the slug of the component\n    example:\n\n      # configuration specific to atmos\n      metadata:\n        # Components can be of type \"real\" (default) or \"abstract\"\n        type: real\n        # This is the directory path of the component.\n        # In this example, we're referencing a component in the `components/terraform/stable/example` folder.\n        component: stable/example\n\n        # We can leverage multiple inheritance to sequentially deep merge multiple configurations\n        inherits:\n          - example-defaults\n\n        # Settings are where we store configuration related to integrations.\n        # It's a freeform map; anything can be placed here.\n        settings:\n          spacelift: {}\n\n      # Define the terraform variables, which will get deep-merged and exported to a `.tfvars` file by atmos.\n      vars:\n        enabled: true\n        name: superduper\n        nodes: 10\n```\n\n----------------------------------------\n\nTITLE: Helmfile Sync Command using Atmos\nDESCRIPTION: These examples show how to use the `atmos helmfile sync` command to synchronize the state of a component in a specific stack. The `--stack` flag is used, and the `redirect-stderr` option is used to redirect standard error to a file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/helmfile/usage.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile sync echo-server --stack tenant1-ue2-dev\natmos helmfile sync echo-server --stack tenant1-ue2-dev --redirect-stderr ./errors.txt\n```\n\n----------------------------------------\n\nTITLE: Describing an Atmos Component\nDESCRIPTION: This command describes the complete configuration for a specified Atmos component within a particular Atmos stack, displaying its configuration settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe component\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflow with Stack Override (Shell)\nDESCRIPTION: This command executes an Atmos workflow with a stack override.  `<workflow-name>` is the name of the workflow, `<file>` is the path to the workflow file, and `<stack>` specifies the stack to use for the workflow execution, overriding the default stack configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/workflow.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file> --stack <stack>\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows with Output Option\nDESCRIPTION: This command retrieves workflow information and controls the level of detail in the output. The `--output` flag can be set to `list`, `map`, or `all` to specify the amount of information displayed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_workflows_usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos describe workflows --output=<list|map|all>\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflows All Output (YAML) - Networking\nDESCRIPTION: Provides an example of the YAML output for `atmos describe workflows --output all` for the `networking.yaml` file, showing the workflow definitions including name, description, and steps.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnetworking.yaml:\n  name: Networking & Logging\n  description: Atmos workflows for managing VPCs and VPC Flow Logs\n  workflows:\n    apply-all-components:\n      description: |\n        Run 'terraform apply' on all components in all stacks\n      steps:\n        - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-dev -auto-approve\n        - command: terraform apply vpc -s plat-ue2-dev -auto-approve\n        - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-dev -auto-approve\n        - command: terraform apply vpc -s plat-uw2-dev -auto-approve\n        - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-staging -auto-approve\n        - command: terraform apply vpc -s plat-ue2-staging -auto-approve\n        - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-staging -auto-approve\n        - command: terraform apply vpc -s plat-uw2-staging -auto-approve\n        - command: terraform apply vpc-flow-logs-bucket -s plat-ue2-prod -auto-approve\n        - command: terraform apply vpc -s plat-ue2-prod -auto-approve\n        - command: terraform apply vpc-flow-logs-bucket -s plat-uw2-prod -auto-approve\n        - command: terraform apply vpc -s plat-uw2-prod -auto-approve\n    plan-all-vpc:\n      description: |\n        Run 'terraform plan' on all 'vpc' components in all stacks\n      steps:\n        - command: terraform plan vpc -s plat-ue2-dev\n        - command: terraform plan vpc -s plat-uw2-dev\n        - command: terraform plan vpc -s plat-ue2-staging\n        - command: terraform plan vpc -s plat-uw2-staging\n        - command: terraform plan vpc -s plat-ue2-prod\n        - command: terraform plan vpc -s plat-uw2-prod\n    plan-all-vpc-flow-logs:\n      description: |\n        Run 'terraform plan' on all 'vpc-flow-logs-bucket' components in all stacks\n      steps:\n        - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-dev\n        - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-dev\n        - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-staging\n        - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-staging\n        - command: terraform plan vpc-flow-logs-bucket -s plat-ue2-prod\n        - command: terraform plan vpc-flow-logs-bucket -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Filter Atmos Metadata by Stack Pattern\nDESCRIPTION: This command filters metadata based on a specified stack pattern. The `--stack` flag is used to define the pattern, allowing retrieval of metadata associated with stacks matching the pattern. Stack patterns support glob matching.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata --stack '*-dev-*'\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Firewalls\nDESCRIPTION: Configures firewall settings in Atmos with a partial stack manifest. Includes imports for defaults, region mixins, and component catalog defaults for network firewall and WAF components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/network-firewall/defaults\n  - catalog/waf/defaults\n  # Import other Firewall components\n```\n\n----------------------------------------\n\nTITLE: Configuring Depends On as a Map in Atmos YAML\nDESCRIPTION: This YAML snippet shows the correct way to configure `depends_on` as a map under the `settings` section within a component definition. The keys in the map represent dependency IDs, and the values define the dependent components using `component`, `file`, or `folder` directives. This configuration allows specifying component dependencies for tools like Spacelift and GitHub Actions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/troubleshoot/errors.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component2:\n      metadata:\n        component: \"top-level-component1\"\n      settings:\n        spacelift:\n          workspace_enabled: false\n        depends_on:\n          1:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test-component\"\n          2:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test2/test-component-2\"\n          3:\n            file: \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n          4:\n            folder: \"tests/fixtures/scenarios/complete/components/helmfile/infra/infra-server\"\n      vars:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Atmos command output with modified inheritance order\nDESCRIPTION: This console output shows the effect of changing the inheritance order in the `inherits` list for `derived-component-2`. The `hierarchical_inheritance_test` variable is now inherited from `base-component-2` because it's processed after `base-component-1`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nVariables for the component 'derived-component-2' in the stack 'tenant1-ue2-test-1':\nenvironment: ue2\nhierarchical_inheritance_test: base-component-2\nnamespace: cp\nregion: us-east-2\nstage: test-1\ntenant: tenant1\n\nCommand info:\nTerraform binary: terraform\nTerraform command: plan\nComponent: derived-component-2\nTerraform component: test/test-component\nInheritance: derived-component-2 -> base-component-2 -> derived-component-1 -> base-component-1\n```\n\n----------------------------------------\n\nTITLE: Custom query with stack pattern in Atmos\nDESCRIPTION: This command applies a custom query to filter the output and filters by a stack pattern. The '--query' option specifies the query to apply, and '--stack' filters by the stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --query .vars.tags --stack '*-ue2-*'\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply with Atmos CLI\nDESCRIPTION: This command applies the Terraform configuration for the `eks` component within the `ue2-dev` stack. It executes the `atmos terraform apply` command to provision or update the infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/terraform.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\natmos terraform apply eks --stack=ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generating Varfile for Specific Components\nDESCRIPTION: This example demonstrates how to generate Terraform variable files only for specified Atmos components. The `--components` option takes comma-separated values of the components for which to generate the files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_varfiles_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos terraform generate varfile --file-template <file_template> --components <component1>,<component2>\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Spacelift Admin Stacks (bash)\nDESCRIPTION: This command describes the components affected by changes and includes Spacelift admin stacks of any affected stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --include-spacelift-admin-stacks=true\n```\n\n----------------------------------------\n\nTITLE: List All Atmos Workflows\nDESCRIPTION: This command lists all available Atmos workflows. It provides a basic overview of the configured workflows in the Atmos environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_workflows_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list workflows\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos via apt on Debian/Ubuntu\nDESCRIPTION: This snippet shows how to add the Cloud Posse package repository to Debian/Ubuntu and install Atmos using apt-get.  It requires apt-utils and curl to be installed beforehand.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Add the Cloud Posse package repository hosted by Cloudsmith\napt-get update && apt-get install -y apt-utils curl\ncurl -1sLf 'https://dl.cloudsmith.io/public/cloudposse/packages/cfg/setup/bash.deb.sh' │ bash\n\n# Install atmos\napt-get install atmos@=\"${ATMOS_VERSION}-*\"\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Deploy Help\nDESCRIPTION: Displays the help information for `atmos terraform deploy`, used for deploying Terraform configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy --help\n```\n\n----------------------------------------\n\nTITLE: Dry Run Example\nDESCRIPTION: This command demonstrates a dry run of the `atmos terraform clean` command for a specified component and stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Reading Atmos Component Section Attribute (YAML)\nDESCRIPTION: This YAML snippet demonstrates the basic syntax for using the `atmos.Component` template function to read a section and attribute from an Atmos component within a stack. It specifies the component name, stack name, section, and attribute to retrieve.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{ (atmos.Component \"<component>\" \"<stack>\").<section>.<attribute> }}\n```\n\n----------------------------------------\n\nTITLE: Compare Component Differences with Atmos\nDESCRIPTION: Compares the differences between the local and vendored versions of the specified component. Replace `<component>` with the actual component name. This command shows the differences directly.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_diff_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor diff --component <component>\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Positional Arguments (YAML)\nDESCRIPTION: This YAML snippet configures the `greet` command within Atmos. The command accepts a positional argument `name` with a default value of \"John Doe\".  It then utilizes this argument to print a greeting message.  If the argument is not provided, the default value is used.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# subcommands\ncommands:\n  - name: greet\n    description: This command says hello to the provided name\n    arguments:\n      - name: name\n        description: Name to greet\n        required: true\n        default: John Doe\n    steps:\n      - \"echo Hello {{ .Arguments.name }}!\"\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Disable Template Processing\nDESCRIPTION: This command disables Go template processing in Atmos stack manifests when executing terraform commands. The `--process-templates=false` flag disables template processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Using !store function with store, stack, component, and key\nDESCRIPTION: Demonstrates how to retrieve a value using the `!store` function with the store name, stack name, component name, and key, when the component is in a different stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> <stack> <component> <key>\n```\n\n----------------------------------------\n\nTITLE: Running Atmos CLI with Interactive UI\nDESCRIPTION: This command starts an interactive user interface, allowing the user to select an Atmos command, component, and stack. Upon selecting, pressing 'Enter' executes the command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\natmos\n```\n\n----------------------------------------\n\nTITLE: Component Vendor Configuration YAML with Explicit Paths\nDESCRIPTION: This YAML snippet shows an example of `component.yaml` with explicit path definitions, especially when sub-folders need to be included when vendoring components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/components-manifest.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  source:\n    uri: github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\n    version: 1.398.0\n    included_paths:\n      - \"**/**\"\n      # If the component's folder has the `modules` sub-folder, it needs to be explicitly defined\n      - \"**/modules/**\"\n```\n\n----------------------------------------\n\nTITLE: Atlantis Configuration with Affected-Only Generation\nDESCRIPTION: This snippet configures Atlantis to dynamically generate the repo configuration using the `atmos atlantis generate repo-config` command with the `--affected-only=true` flag.  This flag ensures that Atlantis projects are generated only for the Atmos components that have changed between two Git commits. Requires the `atmos` CLI tool to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - id: /.*/\n    pre_workflow_hooks:\n      - run: \"atmos atlantis generate repo-config --affected-only=true\"\n        description: \"Generating configs\"\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflows\nDESCRIPTION: This command performs sequential execution of `atmos` and `shell` commands defined as workflow steps, automating complex tasks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\natmos workflow\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy Disable Templates\nDESCRIPTION: Enables or disables Go template processing in Atmos stack manifests when executing terraform commands. Template processing is enabled by default if the flag is not passed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Run Atmos workflow using the CLI command\nDESCRIPTION: This snippet showcases how to execute Atmos workflows using the `atmos workflow` CLI command. It demonstrates running the `plan-all` and `apply-all` workflows defined in the `weather.yaml` manifest file. The `-f` flag specifies the workflow manifest file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/create-workflows.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Execute the workflow `plan-all-vpc-flow-logs` from the workflow manifest `weather.yaml`\natmos workflow plan-all -f weather\n\n# Execute the workflow `apply-all-components` from the workflow manifest `weather.yaml`\natmos workflow apply-all -f weather\n```\n\n----------------------------------------\n\nTITLE: Atmos Affected Component JSON Example (file)\nDESCRIPTION: This JSON shows the output of the `atmos describe affected` command when an external file dependency has changed. The `affected` property is set to `file`, and the `file` property specifies the path to the modified file. This indicates that the component is affected because a file it depends on has been modified.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component3\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"components/terraform/top-level-component1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"affected\": \"file\",\n    \"file\": \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for dev/us-west-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-west-2`, and overrides the VPC configuration by importing the `dev` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-west-2\n  # Override the `vpc` component configuration for `dev` by importing the `catalog/vpc/dev` manifest\n  - catalog/vpc/dev\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Pull Command: Executing Component Pull\nDESCRIPTION: This shell snippet shows the output of the `atmos vendor pull` command, which processes the `vendor.yaml` file and pulls the specified component from the remote source into the local filesystem.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/vendor-components.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nProcessing vendor config file 'vendor.yaml'\n\nPulling sources for the component 'ipinfo'\nfrom 'github.com/cloudposse/atmos.git//examples/demo-library/ipinfo?ref=main'\ninto 'components/terraform/ipinfo'\n```\n\n----------------------------------------\n\nTITLE: Helmfile Deploy with Atmos CLI\nDESCRIPTION: This command executes both `diff` and `apply` operations on the `nginx-ingress` Helmfile component in the `ue2-dev` stack. It uses the `atmos helmfile deploy` command, which combines the functionality of `diff` and `apply`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/helmfile.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile deploy nginx-ingress -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Atmos Vendor Config YAML\nDESCRIPTION: This snippet shows the structure and content of a `vendor.yaml` file, which is used by Atmos to define the sources of components to be vendored. It specifies the component name, source repository, version, target directory, included and excluded paths, and tags. Golang templates are supported in the source.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/vendor-components.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config\n  description: Atmos vendoring manifest\nspec:\n  # `imports` or `sources` (or both) must be defined in a vendoring manifest\n  imports: []\n\n  sources:\n    # `source` supports the following protocols: local paths (absolute and relative), OCI (https://opencontainers.org),\n    # Git, Mercurial, HTTP, HTTPS, Amazon S3, Google GCP,\n    # and all URL and archive formats as described in https://github.com/hashicorp/go-getter.\n    # In 'source', Golang templates are supported  https://pkg.go.dev/text/template.\n    # If 'version' is provided, '{{.Version}}' will be replaced with the 'version' value before pulling the files from 'source'.\n    - component: \"vpc\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref={{.Version}}\"\n      version: \"1.398.0\"\n      targets:\n        - \"components/terraform/vpc\"\n      # Only include the files that match the 'included_paths' patterns.\n      # If 'included_paths' is not specified, all files will be matched except those that match the patterns from 'excluded_paths'.\n      # 'included_paths' support POSIX-style Globs for file names/paths (double-star `**` is supported).\n      # https://en.wikipedia.org/wiki/Glob_(programming)\n      # https://github.com/bmatcuk/doublestar#patterns\n      included_paths:\n        - \"**/*.tf\"\n      excluded_paths:\n        - \"**/providers.tf\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags networking`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - networking\n    - component: \"vpc-flow-logs-bucket\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n      version: \"1.398.0\"\n      targets:\n        - \"components/terraform/vpc-flow-logs-bucket\"\n      included_paths:\n        - \"**/*.tf\"\n      excluded_paths:\n        - \"**/providers.tf\"\n      # Tags can be used to vendor component that have the specific tags\n      # `atmos vendor pull --tags networking,storage`\n      # Refer to https://atmos.tools/cli/commands/vendor/pull\n      tags:\n        - storage\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack Configuration Importing Defaults and Mixins\nDESCRIPTION: This snippet demonstrates how to import default configurations and Kubernetes version-specific mixins into a top-level Atmos stack configuration file.  It imports the default EKS cluster configuration and the `k8s-1-27` mixin, enabling the component to utilize both default settings and the specific settings related to Kubernetes version 1.27. The imports are deep-merged by Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-component-configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n\n  # EKS cluster configuration\n  - catalog/eks/clusters/defaults\n  # Import the mixin for the required Kubernetes version to define the k8s version and addon versions for the EKS cluster in this stack.\n  # This is an example of partial component configuration in Atmos where the config for the component is split across many Atmos stack manifests (stack config files).\n  # It's similar to Partial Classes in C# (https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods).\n  # This is not the same as 'Atmos Component Inheritance' (https://atmos.tools/core-concepts/stacks/inheritance)\n  # where more than one Atmos component participates in the inheritance chain.\n  - catalog/eks/clusters/mixins/k8s-1-27\n```\n\n----------------------------------------\n\nTITLE: Outputting Specific Sections of Atmos Stack Description (Shell)\nDESCRIPTION: This command outputs only the specified sections of the stack description. The `--sections` flag is used to specify a comma-separated list of sections, such as vars or settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --sections=vars,settings\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components and Writing to File (bash)\nDESCRIPTION: This command describes the components affected by changes compared to the specified Git tag and writes the output to a specified file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --ref refs/tags/v1.75.0 --file affected.json\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Handling Complex Outputs (List and Map) YAML\nDESCRIPTION: This snippet shows the attempt to handle complex outputs (list and map) using `toJson` but without the `!template` function, resulting in JSON-encoded strings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: '{{ toJson (atmos.Component \"<component>\" \"<stack>\").outputs.test_list }}'\nvar2: '{{ toJson (atmos.Component \"component1\" \"<stack>\").outputs.test_map }}'\n```\n\n----------------------------------------\n\nTITLE: Display Atmos AWS EKS Update-Kubeconfig Help\nDESCRIPTION: Displays help information for `atmos aws eks update-kubeconfig`, used to update the kubeconfig file for accessing an EKS cluster.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks update-kubeconfig --help\n```\n\n----------------------------------------\n\nTITLE: Running Atmos Example Commands\nDESCRIPTION: These commands detail how to execute the example in a terminal. They include navigating to the example directory and executing a `make all` command, which will build the Docker image, build the CLI tool, and start the container.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-example-infra.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n- cd example\n- make all\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow Dry Run Example\nDESCRIPTION: This is an example of using the `--dry-run` flag with the `atmos workflow` command to preview the steps that would be executed without actually performing them. This allows for verification of workflow steps before execution.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-workflows.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nExecuting the workflow 'plan-all-vpc' from 'stacks/workflows/networking.yaml'\n\nExecuting workflow step: terraform plan vpc -s plat-ue2-dev\nExecuting workflow step: terraform plan vpc -s plat-uw2-dev\nExecuting workflow step: terraform plan vpc -s plat-ue2-staging\nExecuting workflow step: terraform plan vpc -s plat-uw2-staging\nExecuting workflow step: terraform plan vpc -s plat-ue2-prod\nExecuting workflow step: terraform plan vpc -s plat-uw2-prod\n```\n\n----------------------------------------\n\nTITLE: Components Folder Structure\nDESCRIPTION: Illustrates the directory structure for Atmos components, stacks, and configuration files, showing where component definitions, stack configurations, and environment-specific overrides are typically located.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── atmos.yaml\n├── components\n│   └── myapp\n│       ├── main.tf\n│       ├── outputs.tf\n│       └── variables.tf\n└── stacks\n    ├── catalog\n    │   └── myapp.yaml\n    └── deploy\n        ├── dev.yaml\n        ├── prod.yaml\n        └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Formatting Atmos Stack Description Output (Shell)\nDESCRIPTION: This command specifies the output format for the stack description. The `--format` flag can be used to output in either YAML or JSON format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --format=yaml|json\n```\n\n----------------------------------------\n\nTITLE: Source Bash Completion Script Directly\nDESCRIPTION: An alternative method of sourcing the bash completion script directly from the output of the `atmos completion bash` command, without saving it to a file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsource <(atmos completion bash)\n```\n\n----------------------------------------\n\nTITLE: Example atmos list settings output\nDESCRIPTION: This is an example of the table format output of the `atmos list settings` command, showing how settings are displayed across different stacks. The output is truncated in this example, indicated by the `{...}` values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-settings.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> atmos list settings\n┌──────────────┬──────────────┬──────────────┬──────────────┐\n│              │   dev-ue1    │  staging-ue1 │   prod-ue1   │\n├──────────────┼──────────────┼──────────────┼──────────────┤\n│ templates    │ {...}        │ {...}        │ {...}        │\n│ validation   │ {...}        │ {...}        │ {...}        │\n└──────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Include Remote YAML File (S3) in Atmos\nDESCRIPTION: Demonstrates including a remote YAML file from Amazon S3 using the `!include` function. Requires AWS permissions and credentials to be configured correctly. The contents of `vars.yaml` will be injected into the `vars` section of the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include s3::https://my-bucket.s3.amazonaws.com/path/to/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos Schema in atmos.yaml\nDESCRIPTION: This YAML configuration demonstrates how to specify the Atmos manifest JSON schema within the `atmos.yaml` file. The path to the schema can be either a local file path or a remote URL.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-stacks.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Validation schemas (for validating atmos stacks and components)\nschemas:\n  # JSON Schema to validate Atmos manifests\n  atmos:\n    # Can also be set using 'ATMOS_SCHEMAS_ATMOS_MANIFEST' ENV var, or '--schemas-atmos-manifest' command-line arguments\n    # Supports both absolute and relative paths (relative to the `base_path` setting in `atmos.yaml`)\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n    # Also supports URLs\n    # manifest: \"https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Vendor Atmos Components by Tag\nDESCRIPTION: This command vendors components based on the specified tags. The `--tags` parameter accepts a comma-separated list of tags. Only components with matching tags will be vendored.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_pull_usage.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor pull --tags <dev,test>\n```\n\n----------------------------------------\n\nTITLE: Atmos GitOps Configuration Example\nDESCRIPTION: This YAML configuration provides an example of the settings used by the GitHub Action, including the Atmos configuration path and version, AWS region, IAM role ARNs for Terraform planning and state access, bucket and table names for state storage, and the Terraform version.  It also includes configurations to enable infracost and the grouping/sorting logic.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/github-actions/atmos-terraform-plan.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  # .github/config/atmos-gitops.yaml\n  atmos-config-path: ./rootfs/usr/local/etc/atmos/\\n  atmos-version: 1.65.0\n  aws-region: us-east-2\n  enable-infracost: false\n  group-by: .stack_slug | split(\"-\") | [.[0], .[2]] | join(\"-\")\n  sort-by: .stack_slug\n  terraform-apply-role: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n  terraform-plan-role: arn:aws:iam::yyyyyyyyyyyy:role/cptest-core-gbl-identity-gitops\n  terraform-state-bucket: cptest-core-ue2-auto-gitops\n  terraform-state-role: arn:aws:iam::xxxxxxxxxxxx:role/cptest-core-ue2-auto-gitops-gha\n  terraform-state-table: cptest-core-ue2-auto-gitops\n  terraform-version: 1.65.0\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration\nDESCRIPTION: This YAML snippet shows the minimal `atmos.yaml` configuration required to specify the base paths for components and stacks, define the stack naming pattern, and exclude the `defaults` folder from being treated as a top-level stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/inline-component-customization.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{stage}\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Affected Command Output with Stderr in Console\nDESCRIPTION: This console output shows the result of running `atmos describe affected` with `logs.level` set to Trace and `logs.file` set to `/dev/stderr`.  The debug messages are printed to `/dev/stderr`, while the clean JSON output is printed to `/dev/stdout`, enabling proper parsing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# NOTE: These messages are printed to `/dev/stderr`\n\nChecking out Git ref 'refs/remotes/origin/HEAD' ...\nChecked out Git ref 'refs/remotes/origin/HEAD'\nCurrent HEAD: ffd2154e1daa32357b75460b9f45d268922b51e1 refs/heads/update-logs\nBASE: f7aa382aa8b3d48be8f06cfdb27aad344b89aff4 HEAD\n\n\n# NOTE: This JSON output is printed to `/dev/stdout`\n\n[\n   {\n      \"component\": \"vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"examples/quick-start-advanced/components/terraform/vpc\",\n      \"stack\": \"plat-uw2-prod\",\n      \"stack_slug\": \"plat-uw2-prod-vpc\",\n      \"affected\": \"stack.vars\"\n   },\n   {\n      \"component\": \"vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"examples/quick-start-advanced/components/terraform/vpc\",\n      \"stack\": \"plat-ue2-prod\",\n      \"stack_slug\": \"plat-ue2-prod-vpc\",\n      \"affected\": \"stack.vars\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: List All Atmos Components (Shell)\nDESCRIPTION: This command lists all the components available within the Atmos configuration. It provides a comprehensive overview of deployable units managed by Atmos. It does not require any specific dependencies, but expects a properly configured Atmos environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_components_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list components\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Workflow Definition (Atlantis with Atmos)\nDESCRIPTION: Defines a GitHub Actions workflow named 'atmos' that triggers on workflow dispatch, issue comments, and pull requests. The workflow generates Terraform varfiles, backend config files, and atlantis.yaml, then calls Atlantis via a webhook.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nname: atmos\n\non:\n  workflow_dispatch:\n\n  issue_comment:\n    types:\n      - created\n\n  pull_request:\n    types:\n      - opened\n      - edited\n      - synchronize\n      - closed\n    branches: [ main ]\n\nenv:\n  ATMOS_VERSION: 1.173.0\n  ATMOS_CLI_CONFIG_PATH: ./\n\njobs:\n  generate-atlantis-yaml:\n    name: Generate varfiles, backend config and atlantis.yaml\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        if: github.event.pull_request.state == 'open' || ${{ github.event.issue.pull_request }}\n        with:\n          ref: ${{ github.event.pull_request.head.ref }}\n          fetch-depth: 2\n\n      # Install Atmos and generate tfvars and backend config files\n      - name: Generate TF var files and backend configs\n        if: github.event.pull_request.state == 'open' || ${{ github.event.issue.pull_request }}\n        shell: bash\n        run: |\n          wget -q https://github.com/cloudposse/atmos/releases/download/v${ATMOS_VERSION}/atmos_${ATMOS_VERSION}_linux_amd64 && \\\n          mv atmos_${ATMOS_VERSION}_linux_amd64 /usr/local/bin/atmos && \\\n          chmod +x /usr/local/bin/atmos\n          atmos terraform generate varfiles --file-template={component-path}/varfiles/{namespace}-{environment}-{component}.tfvars.json\n          atmos terraform generate backends --format=backend-config --file-template={component-path}/backends/{namespace}-{environment}-{component}.backend\n\n      # Commit changes (if any) to the PR branch\n      - name: Commit changes to the PR branch\n        if: github.event.pull_request.state == 'open' || ${{ github.event.issue.pull_request }}\n        shell: bash\n        run: |\n          untracked=$(git ls-files --others --exclude-standard)\n          changes_detected=$(git diff --name-only)\n          if [ -n \"$untracked\" ] || [ -n \"$changes_detected\" ]; then\n            git config --global user.name github-actions\n            git config --global user.email github-actions@github.com\n            git add -A *\n            git commit -m \"Committing generated autogenerated var files\"\n            git push\n          fi\n\n      # Generate atlantis.yaml with atmos\n      - name: Generate Dynamic atlantis.yaml file\n        if: github.event.pull_request.state == 'open' || ${{ github.event.issue.pull_request }}\n        shell: bash\n        run: |\n          atmos atlantis generate repo-config --config-template config-1 --project-template project-1\n\n      # Commit changes (if any) to the PR branch\n      - name: Commit changes to the PR branch\n        if: github.event.pull_request.state == 'open' || ${{ github.event.issue.pull_request }}\n        shell: bash\n        run: |\n          yaml_changes=$(git diff --name-only)\n          untracked=$(git ls-files --others --exclude-standard atlantis.yaml)\n          if [ -n \"$yaml_changes\" ] || [ -n \"$untracked\" ]; then\n            git config --global user.name github-actions\n            git config --global user.email github-actions@github.com\n            git add -A *\n            git commit -m \"Committing generated atlantis.yaml\"\n            git push\n          fi\n\n  call-atlantis:\n    if: ${{ always() }}\n    needs: generate-atlantis-yaml\n    name: Sending data to Atlantis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Invoke deployment hook\n        uses: distributhor/workflow-webhook@v2\n        env:\n          webhook_type: 'json-extended'\n          webhook_url: ${{ secrets.WEBHOOK_URL }}\n          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}\n          verbose: false\n```\n\n----------------------------------------\n\nTITLE: Commit Generated Atlantis YAML\nDESCRIPTION: This shell script within the GitHub Action commits the generated atlantis.yaml file to the PR branch. It checks for changes before committing. It relies on `git` commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nyaml_changes=$(git diff --name-only)\nuntracked=$(git ls-files --others --exclude-standard atlantis.yaml)\nif [ -n \"$yaml_changes\" ] || [ -n \"$untracked\" ]; then\n  git config --global user.name github-actions\n  git config --global user.email github-actions@github.com\n  git add -A *\n  git commit -m \"Committing generated atlantis.yaml\"\n  git push\nfi\n```\n\n----------------------------------------\n\nTITLE: Team Testing Stack Manifest with Overrides - YAML\nDESCRIPTION: Example of a stack manifest with global, Terraform, and Helmfile overrides. This demonstrates how to modify the configurations of components managed by the `testing` team, including environment variables, settings, variables, and command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `testing` Team manages all the components defined in the following stack manifests:\n  - catalog/terraform/test-component\n  - catalog/terraform/test-component-override\n\n# Global overrides.\n# Override the variables, env, command and settings ONLY in the components managed by the `testing` Team.\noverrides:\n  env:\n    # This ENV variable will be added or overridden in all the components managed by the `testing` Team\n    TEST_ENV_VAR1: \"test-env-var1-overridden\"\n  settings: {}\n  vars: {}\n\n# Terraform overrides.\n# Override the variables, env, command and settings ONLY in the Terraform components managed by the `testing` Team.\n# The Terraform `overrides` are deep-merged with the global `overrides`\n# and takes higher priority (it will override the same keys from the global `overrides`).\nterraform:\n  overrides:\n    settings:\n      spacelift:\n        # All the components managed by the `testing` Team will have the Spacelift stacks auto-applied\n        # if the planning phase was successful and there are no plan policy warnings\n        # https://docs.spacelift.io/concepts/stack/stack-settings#autodeploy\n        autodeploy: true\n    vars:\n      # This variable will be added or overridden in all the Terraform components managed by the `testing` Team\n      test_1: 1\n    # The `testing` Team uses `tofu` instead of `terraform`\n    # https://opentofu.org\n    # The commands `atmos terraform <sub-command> ...` will execute the `tofu` binary\n    command: tofu\n\n# Helmfile overrides.\n# Override the variables, env, command and settings ONLY in the Helmfile components managed by the `testing` Team.\n# The Helmfile `overrides` are deep-merged with the global `overrides`\n# and takes higher priority (it will override the same keys from the global `overrides`).\nhelmfile:\n  overrides:\n    env:\n      # This ENV variable will be added or overridden in all the Helmfile components managed by the `testing` Team\n      TEST_ENV_VAR2: \"test-env-var2-overridden\"\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components\nDESCRIPTION: Lists all available components within the Atmos configuration.  This command provides a quick overview of the defined components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos list components\n```\n\n----------------------------------------\n\nTITLE: Pulling Component using Atmos CLI\nDESCRIPTION: This command pulls a remote component specified in the component.yaml manifest using the Atmos CLI.  The `-c` flag specifies the path to the component directory.  It uses `atmos vendor pull` command to download the component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/components-manifest.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull -c components/terraform/vpc\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform and Backend Configs\nDESCRIPTION: This shell script within the GitHub Action installs Atmos, generates Terraform variable files and backend configuration files using Atmos commands. It requires `wget` and uses environment variables for the Atmos version.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nwget -q https://github.com/cloudposse/atmos/releases/download/v${ATMOS_VERSION}/atmos_${ATMOS_VERSION}_linux_amd64 && \\\nmv atmos_${ATMOS_VERSION}_linux_amd64 /usr/local/bin/atmos && \\\nchmod +x /usr/local/bin/atmos\natmos terraform generate varfiles --file-template={component-path}/varfiles/{namespace}-{environment}-{component}.tfvars.json\natmos terraform generate backends --format=backend-config --file-template={component-path}/backends/{namespace}-{environment}-{component}.backend\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Git Commit SHA (bash)\nDESCRIPTION: This command describes the components affected by changes compared to the specified Git commit SHA.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\n```\n\n----------------------------------------\n\nTITLE: Configure YAML Schema Validation (JSON)\nDESCRIPTION: This JSON snippet configures YAML schema validation in Visual Studio Code to ensure that YAML files are validated against the Atmos schema. This helps catch configuration errors early.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"yaml.schemas\": {\n        \"https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\": [\n            \"**/stacks/**/*.yaml\",\n            \"!**/stacks/workflows/**/*.yaml\",\n            \"!**/stacks/schemas/**/*.yaml\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Completion Help\nDESCRIPTION: Displays the help information for the `atmos completion` subcommand, used for generating shell completion scripts.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natmos completion --help\n```\n\n----------------------------------------\n\nTITLE: YAML: Non-Recursive Pattern Example\nDESCRIPTION: This YAML snippet demonstrates a non-recursive glob pattern for including files.  It includes immediate children of the `demo-library` directory but not nested files or subdirectories. This example shows the limitations of using `*` for single-segment matching.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nincluded_paths:\n  - \"**/demo-library/*\"\nexcluded_paths:\n  - \"**/demo-library/**/stargazers/**\"\n```\n\n----------------------------------------\n\nTITLE: Output Atmos workflows in JSON format\nDESCRIPTION: This command outputs the list of Atmos workflows in JSON format, which is suitable for machine processing and integration with other tools.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows --format json\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Backends Help\nDESCRIPTION: Displays help information for `atmos terraform generate backends`, used to generate multiple Terraform backend configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backends --help\n```\n\n----------------------------------------\n\nTITLE: Filter Atmos Workflows by File\nDESCRIPTION: This command filters the Atmos workflows based on the specified file. Replace `<file>` with the actual file path to filter the workflow list.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_workflows_usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list workflows -f <file>\n```\n\n----------------------------------------\n\nTITLE: Disable YAML functions processing\nDESCRIPTION: Disables the processing of YAML functions when listing settings. This allows to see the functions as they are defined in the YAML configuration files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Filter by stack pattern in Atmos\nDESCRIPTION: This command filters the component values based on a stack pattern. The '--stack' option specifies the stack pattern to filter by.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --stack '*-ue2-*'\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflows List Output (YAML)\nDESCRIPTION: Shows an example of the YAML output when using `atmos describe workflows` with the default list output.  It displays a list of workflow objects, each containing the 'file' and 'workflow' properties.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- file: compliance.yaml\n  workflow: deploy/aws-config/global-collector\n- file: compliance.yaml\n  workflow: deploy/aws-config/superadmin\n- file: compliance.yaml\n  workflow: destroy/aws-config/global-collector\n- file: compliance.yaml\n  workflow: destroy/aws-config/superadmin\n- file: datadog.yaml\n  workflow: deploy/datadog-integration\n- file: helpers.yaml\n  workflow: save/docker-config-json\n- file: networking.yaml\n  workflow: apply-all-components\n- file: networking.yaml\n  workflow: plan-all-vpc\n- file: networking.yaml\n  workflow: plan-all-vpc-flow-logs\n```\n\n----------------------------------------\n\nTITLE: Execute Deploy Dev Script\nDESCRIPTION: Executes the `deploy-dev.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/deploy-dev.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Help Subcommand\nDESCRIPTION: This example shows how to execute the 'help' subcommand to display comprehensive help information for the Atmos CLI. This provides users with a detailed overview of available commands and options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/help.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\natmos help\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack Import: us-west-2.yaml (staging)\nDESCRIPTION: This YAML snippet imports the `org1-plat-uw2-staging.yaml` environment manifest into the `stacks/orgs/org1/plat/staging/us-west-2.yaml` top-level stack. It also imports default configurations and region-specific configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/staging/_defaults\n  - mixins/region/us-west-2\n  - catalog/vpc/org1-plat-uw2-staging\n```\n\n----------------------------------------\n\nTITLE: Atmos Validate Editorconfig Examples\nDESCRIPTION: Demonstrates various usages of the `atmos validate editorconfig` command with different flags to control the validation process, such as setting the logs level, disabling color output, and performing a dry run.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-editorconfig.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig --logs-level Trace\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig --no-color\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig --dry-run\n```\n\n----------------------------------------\n\nTITLE: Atmos Folder Structure\nDESCRIPTION: Shows the directory structure for Atmos configuration files including atmos.yaml, components, and stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n├── atmos.yaml\n├── components\n│   └── myapp\n│       ├── main.tf\n│       ├── outputs.tf\n│       └── variables.tf\n└── stacks\n    ├── catalog\n    │   └── myapp.yaml\n    └── deploy\n        ├── dev.yaml\n        ├── prod.yaml\n        └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Running the cloudposse/tutorials Docker Image in Bash\nDESCRIPTION: Runs the cloudposse/tutorials Docker image with interactive terminal access, removes the container upon exit (--rm), mounts the home directory to /localhost and the current working directory to /tutorials. This assumes Docker is installed and running.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n          --rm \\\n          --volume \"$HOME\":/localhost \\\n          --volume \"$PWD\":/tutorials \\\n          --name sweetops-tutorials \\\n          cloudposse/tutorials:latest;\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with SSH Key and Password (bash)\nDESCRIPTION: This command describes the components affected by changes, providing a PEM-encoded private key and its password, used when the key is password-encrypted.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --ssh-key <path_to_ssh_key> --ssh-key-password <password>\n```\n\n----------------------------------------\n\nTITLE: Vendoring a Specific Component using Atmos\nDESCRIPTION: Downloads and vendors a specific component as defined in the `vendor.yaml` manifest.  The `-c` flag specifies the name of the component to be vendored.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor pull -c <component>\n```\n\n----------------------------------------\n\nTITLE: Configure Global Terraform Lifecycle Hook in Atmos\nDESCRIPTION: This YAML snippet shows how to define a global Terraform lifecycle hook in Atmos.  It specifies that the 'store' command should run after a Terraform apply event for all components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/hooks.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# stacks/catalog/vpc/_defaults.yaml (global)\nhooks:\n  store-outputs:\n    events:\n      - after-terraform-apply\n    command: store\n```\n\n----------------------------------------\n\nTITLE: Describing a Component using Atmos CLI\nDESCRIPTION: This command describes the final configuration of a component within a specific stack using the `atmos describe component` command.  It requires the component name and the stack name as arguments. The output is displayed in YAML format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/describe/components.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Provisioning Components with Atmos CLI\nDESCRIPTION: These commands show how to use the `atmos` CLI to provision the two stations into the `dev` environment. `atmos terraform apply` is used to deploy the Terraform component, specifying the component name and stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/add-another-component.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Provision the first weather station\natmos terraform apply station/1 -s dev\n# Provision the second weather station\natmos terraform apply station/2 --stack dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Information\nDESCRIPTION: This example demonstrates how to display usage information after encountering a missing required argument. The output includes a clear error message followed by a concise usage statement showing the correct command syntax.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/help.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Missing required argument `--stack`.\nUsage:\n    atmos terraform plan --stack <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - Notifications\nDESCRIPTION: Configures notifications within Atmos via a partial stack manifest. It imports defaults, region mixins, and SES and SNS topic component catalog defaults.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/ses/defaults\n  - catalog/sns-topic/defaults\n  # Import other Notification components\n```\n\n----------------------------------------\n\nTITLE: Opening Atmos Documentation\nDESCRIPTION: This command opens the Atmos documentation in a web browser, allowing users to easily access the official documentation.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\natmos docs\n```\n\n----------------------------------------\n\nTITLE: Generating Atlantis Repo Config\nDESCRIPTION: This command generates repository configuration for Atlantis, an open-source Terraform pull request automation tool.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\natmos atlantis generate repo-config\n```\n\n----------------------------------------\n\nTITLE: Filtering Atmos Stack Description by Component Type (Shell)\nDESCRIPTION: This command filters the stack description to only include specific component types. The `--component-types` flag is used to specify a comma-separated list of component types, such as terraform or helmfile.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --component-types=terraform|helmfile\n```\n\n----------------------------------------\n\nTITLE: Resume Atmos Workflow from Step\nDESCRIPTION: This snippet shows how to resume an Atmos workflow from a specific step. This is useful for restarting interrupted workflows or for debugging specific parts of a workflow.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_workflow_usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file> --from-step <step>\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Configuration (Bash)\nDESCRIPTION: These snippets demonstrate how to apply terraform configurations using the atmos command. The configurations are applied to different stacks (plat-ue2-prod and plat-ue2-dev) using the vpc component. In the described scenario, the OPA validation prevents provisioning due to policy violations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/opa.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform apply vpc -s plat-ue2-prod\natmos terraform apply vpc -s plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Inline Stack in Command\nDESCRIPTION: Example of specifying the stack inline within a workflow command using the `-s` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - command: terraform plan test/test-component-override-2 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Output Atmos Metadata in Different Formats\nDESCRIPTION: These commands demonstrate how to output metadata in various formats. The `--format` flag is used to specify the desired output format, including JSON, YAML, CSV, and TSV.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata --format json\n$ atmos list metadata --format yaml\n$ atmos list metadata --format csv\n$ atmos list metadata --format tsv\n```\n\n----------------------------------------\n\nTITLE: Render Hubspot Form using React Component\nDESCRIPTION: Renders the Hubspot form using the imported HubspotForm component.  It configures the form with the portal ID, region, and form ID. It also defines functions to be executed on form submission and when the form is ready.  A loading indicator is displayed while the form is loading.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/community/office-hours.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<HubspotForm\n    portalId='2197148'\n    region=\"na1\"\n    formId='bbcd46fe-0b11-43aa-9214-33f319e52a01'\n    onSubmit={() => console.log('Submit!')}\n    onReady={(form) => console.log('Form ready!')}\n    loading={<div>Loading...</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Core Tenant Mixin Configuration in YAML\nDESCRIPTION: This YAML configuration sets the `tenant` variable to `core` within the `stacks/mixins/tenant/core.yaml` file. This mixin is designed to provide default settings specific to the 'core' tenant or organizational unit (OU).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  tenant: core\n\n# Other defaults for the `core` tenant/OU\n```\n\n----------------------------------------\n\nTITLE: Example Stack Usage YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the mock Terraform component within an Atmos stack configuration. It defines input variables `foo`, `bar`, and `baz` with their default values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/fixtures/components/terraform/mock/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    mock:\n      vars:\n        foo: \"default value\"\n        bar: \"default value\"\n        baz: \"default value\"\n```\n\n----------------------------------------\n\nTITLE: Filesystem Layout\nDESCRIPTION: Illustrates the basic directory structure for Atmos component vendoring, showing the location of configuration files and components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/vendoring.mdx#_snippet_0\n\nLANGUAGE: \nCODE:\n```\n├── atmos.yaml\n├── vendor.yaml\n└── components\n    └── myapp\n       ├── main.tf\n       ├── outputs.tf\n       └── variables.tf\n```\n\n----------------------------------------\n\nTITLE: Regenerate Zsh Completion Cache\nDESCRIPTION: Regenerates the Zsh completion cache by removing the old cache file and re-initializing the completion system. This is useful if completions are not working as expected.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nrm -f ~/.zcompdump && compinit\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos with Go\nDESCRIPTION: This snippet shows how to install Atmos using `go install`. It allows installing the latest version or a specific version using the `@` syntax.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/cloudposse/atmos\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/cloudposse/atmos@latest\n```\n\n----------------------------------------\n\nTITLE: Run Atmos IP Command\nDESCRIPTION: Executes the custom `ip` command defined in `atmos.yaml` using the Atmos CLI. The command retrieves and displays the current public IP address.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/add-custom-commands.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\natmos ip\n```\n\nLANGUAGE: console\nCODE:\n```\n13.37.13.37\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy Disable Functions\nDESCRIPTION: Enables or disables YAML functions processing in Atmos stack manifests when executing terraform commands. YAML function processing is enabled by default if the flag is not passed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Configure OpenTofu Command in Atmos CLI\nDESCRIPTION: This YAML snippet configures the Atmos CLI to use OpenTofu as the default Terraform executable. It specifies the path to the `tofu` binary and the base path for OpenTofu components, along with various flags like auto-approve, init reconfigure and other command-line options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/opentofu.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # The executable to be called by `atmos` when running Terraform commands\n    command: \"/usr/bin/tofu\"  # or just `tofu`\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_BASE_PATH' ENV var, or '--terraform-dir' command-line argument\n    # Supports both absolute and relative paths\n    base_path: \"components/tofu\"\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPLY_AUTO_APPROVE' ENV var\n    apply_auto_approve: false\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_DEPLOY_RUN_INIT' ENV var, or '--deploy-run-init' command-line argument\n    deploy_run_init: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_RUN_RECONFIGURE' ENV var, or '--init-run-reconfigure' command-line argument\n    init_run_reconfigure: true\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_AUTO_GENERATE_BACKEND_FILE' ENV var, or '--auto-generate-backend-file' command-line argument\n    auto_generate_backend_file: false\n    # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_APPEND_USER_AGENT' ENV var, or '--append-user-agent' command-line argument\n    append_user_agent: \"Acme/1.0 (Build 1234; arm64)\"\n    init:\n      # Can also be set using 'ATMOS_COMPONENTS_TERRAFORM_INIT_PASS_VARS' ENV var, or '--init-pass-vars' command-line argument\n      pass_vars: true\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Handling Complex Outputs with Multiline Strings YAML\nDESCRIPTION: This snippet demonstrates an attempt to use YAML multiline strings to handle complex outputs, which still results in JSON-encoded strings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: >-\n  {{ toJson (atmos.Component \"<component>\" \"<stack>\").outputs.test_list }}\n\nvar2: >-\n  {{ toJson (atmos.Component \"component1\" \"<stack>\").outputs.test_map }}\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace with Template Processing Disabled\nDESCRIPTION: Executes the `atmos terraform workspace` command with the `--process-templates` flag set to `false`, disabling Go template processing in Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Root Modules with Atmos\nDESCRIPTION: Applies a Terraform configuration for a given Atmos component and stack, with options for auto-approval and using a pre-existing plan file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply $component --stack $stack\natmos terraform apply $component --stack $stack -auto-approve\natmos terraform apply $component --stack $stack $planfile\n```\n\n----------------------------------------\n\nTITLE: Initializing Context Object\nDESCRIPTION: This snippet shows the default structure of the `context` input variable. It is a single object that can set the entire context for the module. Individual variable settings will override context object settings, except for attributes, tags, and additional_tag_map, which are merged.  It is written in Terraform configuration language.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/fixtures/scenarios/complete/components/terraform/infra/vpc-flow-logs-bucket/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>{\n  \"additional_tag_map\": {},\n  \"attributes\": [],\n  \"delimiter\": null,\n  \"descriptor_formats\": {},\n  \"enabled\": true,\n  \"environment\": null,\n  \"id_length_limit\": null,\n  \"label_key_case\": null,\n  \"label_order\": [],\n  \"label_value_case\": null,\n  \"labels_as_tags\": [\n    \"unset\"\n  ],\n  \"name\": null,\n  \"namespace\": null,\n  \"regex_replace_chars\": null,\n  \"stage\": null,\n  \"tags\": {},\n  \"tenant\": null\n}</pre>\n```\n\n----------------------------------------\n\nTITLE: Checking Terraform and Atmos Versions with Bash\nDESCRIPTION: Verifies that Terraform and Atmos are installed correctly by printing their versions to the console using `terraform -v` and `atmos version`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform -v # Should return: Terraform vX.X.X\n\natmos version # Should return a simple Semver number.\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos via yum on RedHat/CentOS\nDESCRIPTION: This snippet shows how to add the Cloud Posse package repository to RedHat/CentOS and install Atmos using yum. It requires curl to be installed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -1sLf 'https://dl.cloudsmith.io/public/cloudposse/packages/setup.rpm.sh' │ sudo -E bash\n\n# Install atmos\nsudo yum install atmos-${ATMOS_VERSION}.x86_64\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: This code snippet represents the frontmatter configuration for a Markdown document.  It defines metadata such as the page title, sidebar position and label, a custom CSS class name for the sidebar, the page description, and a unique identifier for the page.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/contribute/contributing.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Contributing\nsidebar_position: 4\nsidebar_label: Contributing\nsidebar_class_name: hidden\ndescription: Contributing\nid: contributing\n---\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan (Short Args) with Atmos CLI\nDESCRIPTION: This command generates a Terraform plan for the `eks` component within the `ue2-dev` stack using short command-line arguments. It utilizes the `atmos terraform plan eks -s ue2-dev` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/terraform.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\natmos terraform plan eks -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Terminal Shell (JSON)\nDESCRIPTION: This JSON snippet sets the default terminal shell to Zsh in Visual Studio Code. This provides an improved command-line experience for Atmos development.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"terminal.integrated.shell.linux\": \"/bin/zsh\"\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Stacks Help\nDESCRIPTION: Displays help information for `atmos describe stacks`, used to describe stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\natmos describe stacks --help\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values Command Usage\nDESCRIPTION: Shows the basic usage of the `atmos list values` command with the component name and optional flags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list values [component] [flags]\n```\n\n----------------------------------------\n\nTITLE: Atmos Help Command\nDESCRIPTION: This command displays the help menu for Atmos, including a list of available custom commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/demo-custom-command/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos --help\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This shell command demonstrates how to provision the `vpc` component into the `plat-ue2-prod` top-level stack using the `atmos terraform apply` command.  It requires the Atmos CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/abstract-component.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc -s plat-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Import HubspotForm React Component\nDESCRIPTION: Imports the HubspotForm component from the 'react-hubspot-form' library. This component is used to render the Hubspot form on the page.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/community/office-hours.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport HubspotForm from 'react-hubspot-form'\n```\n\n----------------------------------------\n\nTITLE: Override Update Kubeconfig Parameters (Atmos)\nDESCRIPTION: This command updates the kubeconfig file, allowing overrides for profile, cluster name, kubeconfig path, and AWS region. It requires the `atmos` CLI. Replace placeholders with actual values: `<profile>`, `<cluster_name>`, `<path_to_kubeconfig>` should be substituted with actual values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_aws_eks_update_kubeconfig_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name> --kubeconfig=<path_to_kubeconfig> --region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Usage: atmos terraform plan-diff\nDESCRIPTION: Shows the usage of the `atmos terraform plan-diff` command with its arguments and options. The command takes a component name, stack name, original plan file, and optionally a new plan file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-plan-diff.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan-diff <component> -s <stack> --orig=<original-plan-file> [--new=<new-plan-file>] [options]\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan and Apply Commands with Atmos CLI\nDESCRIPTION: Executes `terraform plan` and `terraform apply` for the `vpc-flow-logs-bucket-1` component in the `ue2-dev` stack using the Atmos CLI.  This snippet shows how to deploy a specific component in a defined stack environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan vpc-flow-logs-bucket-1 -s ue2-dev\natmos terraform apply vpc-flow-logs-bucket-1 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Git SSH Explicit Source Example\nDESCRIPTION: Example demonstrating the use of explicit SSH sources for vendoring from non-public Git repositories using SSH.  The URL is used as provided and no rewriting occurs.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit::ssh://git@github.com/cloudposse/terraform-null-label.git?ref={{ .Version }}\n```\n\n----------------------------------------\n\nTITLE: Example EditorConfig Validation Output\nDESCRIPTION: This example shows the output of the `atmos validate editorconfig` command when formatting violations are detected. It specifies the file and line number where the violation occurs, along with a description of the issue.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/editorconfig.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nscenarios/complete/modules/label/context.tf:\n        267: Wrong amount of left-padding spaces(want multiple of 2)\n        268: Wrong amount of left-padding spaces(want multiple of 2)\n\n2 errors found\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Dependents Usage\nDESCRIPTION: Shows the basic usage of the `atmos describe dependents` command in the shell.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos describe dependents [options]\n```\n\n----------------------------------------\n\nTITLE: LogTrace Example 2\nDESCRIPTION: This example demonstrates how to use LogTrace to log HTTP request headers.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"HTTP request headers: %v\"\n```\n\n----------------------------------------\n\nTITLE: Opening Atmos Docs via Shell\nDESCRIPTION: This shell snippet demonstrates how to open the Atmos documentation using the `atmos docs` command. It can be used to open the main documentation page or to display information about specific components like 'vpc' or 'eks/cluster'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/docs.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos docs\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos docs vpc\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos docs eks/cluster\n```\n\n----------------------------------------\n\nTITLE: Running Atmos Validate Editorconfig\nDESCRIPTION: Executes the `atmos validate editorconfig` command to validate files against the formatting rules specified in the .editorconfig file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/validate/validate-editorconfig.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig\n```\n\n----------------------------------------\n\nTITLE: Set OpenTofu as Default Command in Atmos\nDESCRIPTION: This YAML snippet shows how to configure `atmos.yaml` to use `tofu` (OpenTofu) when the `terraform` command is called. This ensures that Atmos executes OpenTofu instead of Terraform when users run `atmos terraform`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/opentofu.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Use the `tofu` command when calling \"terraform\" in Atmos.\n    command: \"/usr/bin/tofu\"  # or just `tofu`\n\n    # Optionally, specify a different path for OpenTofu components\n    base_path: \"components/tofu\"\n```\n\n----------------------------------------\n\nTITLE: Resuming Atmos Workflow from Step (Shell)\nDESCRIPTION: This command resumes an Atmos workflow from a specific step. `<workflow-name>` is the workflow name, `<file>` is the workflow definition file, and `<step>` indicates the step number or identifier from which to resume execution.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/workflow.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file> --from-step <step>\n```\n\n----------------------------------------\n\nTITLE: Advanced Atmos Vendor Config YAML\nDESCRIPTION: This snippet demonstrates an advanced configuration for the `vendor.yaml` file, specifically addressing the inclusion of sub-folders within a component. It highlights that the double-star `**` in `included_paths` does not inherently include sub-folders, necessitating their explicit definition.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/vendor-components.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  sources:\n    - component: \"vpc-flow-logs-bucket\"\n      source: \"github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref={{.Version}}\"\n      version: \"1.398.0\"\n      targets:\n        - \"components/terraform/vpc-flow-logs-bucket\"\n      included_paths:\n        - \"**/*.tf\"\n        # If the component's folder has the `modules` sub-folder, it needs to be explicitly defined\n        - \"**/modules/**\"\n```\n\n----------------------------------------\n\nTITLE: Execute Deploy Prod Script\nDESCRIPTION: Executes the `deploy-prod.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/deploy-prod.sh\n```\n\n----------------------------------------\n\nTITLE: Defining File Dependency in Atmos Component YAML\nDESCRIPTION: This YAML snippet shows how to define a dependency on an external file within an Atmos component's `settings.depends_on` section. The `file` attribute specifies the path to the dependency file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component3:\n      metadata:\n        component: \"top-level-component1\"\n      settings:\n        depends_on:\n          1:\n            file: \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n```\n\n----------------------------------------\n\nTITLE: Configure Prod us-east-2 Stack - YAML\nDESCRIPTION: This YAML snippet shows the start of the configuration for the top-level Atmos stack for the 'prod' account in the 'us-east-2' region.  It references the import of tenant and region mixins, and defaults for the components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# Import the tenant and region mixins, and the defaults for the components from the `catalog`.\n# `import` supports POSIX-style Globs for file names/paths (double-star `**` is supported).\n```\n\n----------------------------------------\n\nTITLE: Building Atmos from Source\nDESCRIPTION: This snippet provides the commands to build Atmos from source using `make build` or `go build` with specific ldflags to set the version.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmake build\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o build/atmos -v -ldflags \"-X 'github.com/cloudposse/atmos/pkg/version.Version=$version'\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Atmos Stack Description by Component (Shell)\nDESCRIPTION: This command filters the stack description to only include specific components. The `--components` flag is used to specify a comma-separated list of component names.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --components=<component1>,<component2>\n```\n\n----------------------------------------\n\nTITLE: Terralith Architecture Diagram (Mermaid)\nDESCRIPTION: This Mermaid diagram illustrates the architecture of a Terralith, a monolithic Terraform root module, which manages the entire infrastructure including the network, cluster, load balancer, database, cache, and object storage. It shows how applications within the cluster interact with other modules.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/glossary/terralith.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Anatomy of a Terralith\n---\ngraph TD\n    subgraph TerraformRootModule[Terraform Root Module]\n        subgraph Network[Network VPC]\n            subgraph Cluster[Kubernetes Cluster]\n                App1(Application 1)\n                App2(Application 2)\n            end\n            LB[(Load Balancer Module)]\n            DB[(Database Module)]\n            Cache[(Cache Module)]\n            ObjectStorage[(Object Storage Module)]\n        end\n        LB --> App1\n        LB --> App2\n        App1 --> DB\n        App1 --> Cache\n        App2 --> ObjectStorage\n    end\n```\n\n----------------------------------------\n\nTITLE: Example Test Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a test case for Atmos, specifying the test name, description, whether it's enabled, conditions for skipping, and whether to use golden snapshots. It also defines the working directory, environment variables, command to run, arguments, and expected outputs and exit code.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# yaml-language-server: $schema=schema.json\n\ntests:\n  - name: atmos circuit-breaker\n    description: >                            # Friendly description of what this test is verifying\n      Ensure atmos breaks the infinite loop when shell depth exceeds maximum (10).\n\n    enabled: true                             # Whether or not to enable this check\n    skip:                                     # Conditions when to skip\n      os: !not windows                        # Do not run on Windows (e.g. PTY not supported)\n                                              # Use \"darwin\" for macOS\n                                              # Use \"linux\" for Linux ;)\n\n    snapshot: true                            # Enable golden snapshot. Use together with `expect.diff`\n\n    clean: true                               # Whether or not to remove untracked files from workdir\n    workdir: \"fixtures/scenarios/complete/\"   # Location to execute command\n    env:\n      SOME_ENV: true                          # Set an environment variable called \"SOME_ENV\"\n    command: \"atmos\"                          # Command to run\n    args:                                     # Arguments or flags passed to command\n      - \"help\"\n\n    expect:                                   # Assertions\n      timeout: 1m                             # Maximum time it should take to run this test\n      diff: []                                # List of expected differences\n      stdout:                                 # Expected output to stdout or TTY. All TTY output is directed to stdout\n      stderr:                                 # Expected output to stderr;\n        - \"^$\"                                # Expect no output\n      exit_code: 0                            # Expected exit code\n```\n\n----------------------------------------\n\nTITLE: Checking Atmos Version with CLI\nDESCRIPTION: This command is used to check if Atmos is properly installed and to verify the installed version. It outputs the Atmos version to the console.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-cli.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natmos version\n```\n\n----------------------------------------\n\nTITLE: Atmos command output for derived-component-2\nDESCRIPTION: This console output shows the variables and inheritance information for the `derived-component-2` component after running the `atmos terraform plan` command. It illustrates how the `hierarchical_inheritance_test` variable is inherited from `base-component-1` due to the inheritance order.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nVariables for the component 'derived-component-2' in the stack 'tenant1-ue2-test-1':\nenvironment: ue2\nhierarchical_inheritance_test: base-component-1\nnamespace: cp\nregion: us-east-2\nstage: test-1\ntenant: tenant1\n\nCommand info:\nTerraform binary: terraform\nTerraform command: plan\nComponent: derived-component-2\nTerraform component: test/test-component\nInheritance: derived-component-2 -> derived-component-1 -> base-component-1 -> base-component-2\n```\n\n----------------------------------------\n\nTITLE: Preamble to the Apache License\nDESCRIPTION: This snippet displays the preamble to the Apache 2.0 License. It explains that the software is licensed under the Apache License, Version 2.0, and provides a link to the full license. It highlights that the software is distributed on an 'AS IS' BASIS without warranties or conditions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n  https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n```\n\n----------------------------------------\n\nTITLE: External File Dependency in Atmos Component (YAML)\nDESCRIPTION: This YAML configuration defines a dependency on an external file for an Atmos component using the `settings.depends_on` map. If the specified file is modified, the component will be included in the output of `atmos describe affected` with `affected: file`. This allows tracking changes to files outside of the component's directory that influence its configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component3:\n      metadata:\n        component: \"top-level-component1\"\n      settings:\n        depends_on:\n          1:\n            file: \"tests/fixtures/scenarios/complete/components/terraform/mixins/introspection.mixin.tf\"\n```\n\n----------------------------------------\n\nTITLE: Templatizing Targets with Version\nDESCRIPTION: This example demonstrates how to use Go templates and Sprig functions within the `targets` attribute to create versioned folders for vendored components. It extracts the major and minor versions from the `{{ .Version }}` attribute to generate the target path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  # Vendor a component into a major-minor versioned folder like 1.2\n  - \"components/terraform/infra/vpc-flow-logs-bucket/{{ (first 2 (splitList \\\".\\\" .Version)) | join \\\".\\\" }}\"\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/staging/us-west-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `staging` account, and `us-west-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/staging/_defaults\n  - mixins/region/us-west-2\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList component in Markdown\nDESCRIPTION: This code snippet imports the DocCardList component from the '@theme/DocCardList' module. This component is likely used to display a list of documentation cards on the page.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/contribute/contributing.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList'\n```\n\n----------------------------------------\n\nTITLE: Disable Go Template Processing in Atmos\nDESCRIPTION: This command disables Go template processing during metadata retrieval. The `--process-templates=false` flag prevents the evaluation of Go templates within the metadata.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Output: Plan differences\nDESCRIPTION: Demonstrates the output format when differences are found between the two Terraform plans. It shows differences in variables, resources, and outputs, using `+` for additions, `-` for removals, and `~` for changes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-plan-diff.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nDiff Output\n=========\n\nVariables:\n----------\n+ added_var: \"new value\"\n- removed_var: \"old value\"\n~ changed_var: \"old value\" => \"new value\"\n\nResources:\n-----------\n+ aws_s3_bucket.new_bucket\n- aws_instance.removed_instance\n~ aws_security_group.modified_group\n  ~ ingress.cidr_blocks: [\"10.0.0.0/16\"] => [\"10.0.0.0/8\"]\n  + egress.port: 443\n\nOutputs:\n--------\n+ new_output: \"value\"\n- removed_output: \"value\"\n~ changed_output: \"old\" => \"new\"\n```\n\n----------------------------------------\n\nTITLE: Spacelift Settings Configuration\nDESCRIPTION: Shows an example of how to configure Spacelift settings for a Terraform component within an Atmos stack.  It includes settings like `autodeploy` and `workspace_enabled`, which can be overridden from the `terraform.overrides.settings.spacelift` section.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nterraform:\n  components:\n    $component:\n      settings:\n        spacelift:\n          # The `autodeploy` setting was overridden with the value \n          # from `terraform.overrides.settings.spacelift.autodeploy`\n          autodeploy: true\n          workspace_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Configuration: Defining Component Source\nDESCRIPTION: This YAML snippet defines an Atmos vendor configuration to pull the 'ipinfo' component from a remote Git repository. It specifies the source repository, version, target directory, and included file paths for the component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/vendor-components.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: my-vendor-config\n  description: Example Atmos vendoring manifest\nspec:\n  sources:\n    - component: \"ipinfo\"\n      source: \"github.com/cloudposse/atmos.git//examples/demo-library/ipinfo?ref={{.Version}}\"\n      version: \"main\"\n      targets:\n        - \"components/terraform/{{.Component}}\"\n      included_paths:\n        - \"**/*.tf\"\n        # If the component's folder has the `modules` sub-folder, it needs to be explicitly defined\n        - \"**/modules/**\"\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Vendor Help\nDESCRIPTION: Displays the help information for the `atmos vendor` subcommand, used for managing vendored dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\natmos vendor --help\n```\n\n----------------------------------------\n\nTITLE: Atmos: Overriding Component Configuration (tofu)\nDESCRIPTION: This snippet demonstrates how to override the 'command' setting of a component in an Atmos stack using the 'terraform.overrides.command' configuration. This allows the 'tofu' command to be used instead of 'terraform'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncommand: tofu\n\nenv:\n  # The `TEST_ENV_VAR1` ENV variable was overridden with the value from `overrides.env.TEST_ENV_VAR1`\n  TEST_ENV_VAR1: test-env-var1-overridden\n  TEST_ENV_VAR2: val2\n\nsettings:\n  spacelift:\n    # The `autodeploy` setting was overridden with the value\n    # from `terraform.overrides.settings.spacelift.autodeploy`\n    autodeploy: true\n    workspace_enabled: true\n\nvars:\n  environment: uw2\n  namespace: cp\n  region: us-west-2\n  stage: dev\n  tenant: tenant1\n  # The `test_1` variable was overridden with the value from `terraform.overrides.vars.test_1`\n  test_1: 1\n```\n\n----------------------------------------\n\nTITLE: Update Kubeconfig with Atmos Workspace (Atmos)\nDESCRIPTION: This command updates the kubeconfig file using the Atmos workspace (component and stack).  It requires the `atmos` CLI to be installed and configured. The `<component>` and `<stack>` placeholders need to be substituted with their actual values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_aws_eks_update_kubeconfig_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos aws eks update-kubeconfig <component> -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Filter component variables by stack and specific variables with Atmos CLI\nDESCRIPTION: This command combines stack filtering with a JMESPath query to retrieve specific variables from a component within a specific stack. Replace `<component>` with the actual component name, `'*-ue2-*'` with the desired stack pattern and `.vars.region` with the JMESPath query to select the region variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --stack '*-ue2-*' --query .vars.region\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Version\nDESCRIPTION: Displays the version of the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\natmos version\n```\n\n----------------------------------------\n\nTITLE: Alias Terraform to Tofu in Atmos\nDESCRIPTION: This YAML snippet defines an alias in the `atmos.yaml` configuration file. This alias allows users to run `atmos tofu` instead of `atmos terraform`. This only changes the CLI invocation and does not affect the underlying command Atmos executes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/opentofu.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  tofu: terraform\n```\n\n----------------------------------------\n\nTITLE: Installing Nerd Font via Homebrew\nDESCRIPTION: This snippet shows how to install a Nerd Font (Fira Code) using Homebrew. This font provides icons that Atmos uses.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap homebrew/cask-fonts     # You only need to do this once!\nbrew search nerd-font            # Search for font packages\n\n# Install the NerdFont version of Fira Code\nbrew install --cask font-fira-code-nerd-font\n```\n\n----------------------------------------\n\nTITLE: Filtering Atmos Stack Description by Stack Name (Shell)\nDESCRIPTION: This command filters the stack description to only include a specific stack. The `-s` flag is used to specify the stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Command Line Stack Specification\nDESCRIPTION: Example of specifying the stack on the command line using the `-s` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\natmos workflow my-workflow -f workflow1 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Generated Atlantis Configuration Example\nDESCRIPTION: This YAML snippet provides an example of the Atlantis configuration generated by Atmos, showing the projects and workflows that are created based on the configured templates. It demonstrates how Atmos configures Atlantis projects for different components and stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/pkg/atlantis/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nautomerge: true\ndelete_source_branch_on_merge: true\nparallel_plan: true\nparallel_apply: true\nallowed_regexp_prefixes:\n  - dev/\n  - staging/\n  - prod/\nprojects:\n  - name: tenant1-ue2-staging-test-test-component-override-3\n    workspace: test-component-override-3-workspace\n    workflow: workflow-1\n    dir: tests/fixtures/scenarios/complete/components/terraform/test/test-component\n    terraform_version: v1.2\n    delete_source_branch_on_merge: true\n    autoplan:\n      enabled: true\n      when_modified:\n        - '**/*.tf'\n        - varfiles/tenant1-ue2-staging-test-test-component-override-3.tfvars.json\n    apply_requirements:\n      - approved\n  - name: tenant1-ue2-staging-infra-vpc\n    workspace: tenant1-ue2-staging\n    workflow: workflow-1\n    dir: tests/fixtures/scenarios/complete/components/terraform/infra/vpc\n    terraform_version: v1.2\n    delete_source_branch_on_merge: true\n    autoplan:\n      enabled: true\n      when_modified:\n        - '**/*.tf'\n        - varfiles/tenant1-ue2-staging-infra-vpc.tfvars.json\n    apply_requirements:\n      - approved\nworkflows:\n  workflow-1:\n    apply:\n      steps:\n        - run: terraform apply $PLANFILE\n    plan:\n      steps:\n        - run: terraform init -input=false\n        - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n        - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\n```\n\n----------------------------------------\n\nTITLE: Create Terraform Component Directory\nDESCRIPTION: Creates a directory for storing the Terraform component's code. This directory will be located under `components/terraform/<component_name>`. The `-p` flag ensures that parent directories are created if they don't exist.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/write-components.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p components/terraform/weather\n```\n\n----------------------------------------\n\nTITLE: List component settings in Atmos for a stack\nDESCRIPTION: This command lists the settings for a specific component within a specified stack. The '--query .settings' option filters the output to show only the 'settings' section, and '--stack' filters by the stack name using glob patterns.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --query .settings --stack 'plat-ue2-*'\n```\n\n----------------------------------------\n\nTITLE: Output Atmos values in different formats\nDESCRIPTION: These commands demonstrate how to output the component values in various formats such as JSON, YAML, CSV, and TSV. The '--format' option specifies the desired output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --format json\n$ atmos list values <component> --format yaml\n$ atmos list values <component> --format csv\n$ atmos list values <component> --format tsv\n```\n\n----------------------------------------\n\nTITLE: Caching atmos.Store Results (YAML)\nDESCRIPTION: Illustrates how Atmos caches the results of `atmos.Store` template functions to improve performance. Subsequent calls to the function with the same parameters will use the cached result.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    test2:\n      vars:\n        tags:\n          test: '{{ atmos.Store \"prod/ssm\" .stack \"vpc\" \"vpc_id\" }}'\n          test2: '{{ atmos.Store \"prod/ssm\" .stack \"vpc\" \"vpc_id\" }}'\n          test3: '{{ atmos.Store \"prod/ssm\" .stack \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos via Homebrew\nDESCRIPTION: This snippet shows how to install Atmos using Homebrew on macOS. It allows for quick installation and management of Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install atmos\n```\n\n----------------------------------------\n\nTITLE: Running EditorConfig Validation with Trace Logs\nDESCRIPTION: This command validates all files in the current project using the rules defined in the project's `.editorconfig` file and outputs detailed trace logs for troubleshooting. The `--logs-level trace` flag enables verbose logging, providing more information about the validation process and any errors encountered.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/editorconfig.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos validate editorconfig --logs-level trace\n```\n\n----------------------------------------\n\nTITLE: Filter stacks and include abstract components in Atmos\nDESCRIPTION: This command filters stacks using a glob pattern and includes abstract components in the listing. The '--stack' option filters by the stack name, and '--abstract' includes abstract components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --stack '*-prod-*' --abstract\n```\n\n----------------------------------------\n\nTITLE: Generate Varfile without Template Processing\nDESCRIPTION: Generates a Terraform varfile while disabling Go template processing in Atmos stack manifests.  This is useful when template processing is not desired or when the templates contain errors.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-varfile.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Describing Component Dependents with JSON/YAML Output\nDESCRIPTION: This command uses the Atmos CLI to describe the dependents of a specific component in a given stack. The `--format` flag specifies the output format, which can be either JSON or YAML.  The output is printed to standard output. Requires atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_dependents_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe dependents <component> -s <stack> --format=json|yaml\n```\n\n----------------------------------------\n\nTITLE: Example Filesystem Layout\nDESCRIPTION: This shows the directory structure used in the Atmos example infrastructure. It includes directories for stacks, Terraform components, Helmfile components, and configuration files like `atmos.yaml` and `Dockerfile`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-example-infra.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   │  \n   │   # Centralized stacks configuration\n   ├── stacks/\n   │   │\n   │   └── <stack_1>.yaml\n   │   └── <stack_2>.yaml\n   │   └── <stack_3>.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   ├── components/\n   │   │\n   │   ├── terraform/   # Terraform components (Terraform root modules)\n   │   │   ├── infra/\n   │   │   ├── mixins/\n   │   │   ├── test/test-component/\n   │   │   └── top-level-component1/\n   │   │\n   │   └── helmfile/  # Helmfile components are organized by Helm chart\n   │       ├── echo-server/\n   │       └── infra/infra-server\n   │  \n   │   # Root filesystem for the Docker image (see `Dockerfile`)\n   ├── rootfs/\n   │\n   │   # Makefile for building the CLI\n   ├── Makefile\n   │   # Atmos CLI configuration\n   ├── atmos.yaml\n   │  \n   │   # Docker image for shipping the CLI and all dependencies\n   └── Dockerfile (optional)\n```\n\n----------------------------------------\n\nTITLE: Interactive Atmos Workflow\nDESCRIPTION: This snippet demonstrates how to launch the Atmos workflow in interactive mode. This mode likely provides a user interface to guide the user through the workflow execution process.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_workflow_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow\n```\n\n----------------------------------------\n\nTITLE: Interactive Atmos Workflow Execution\nDESCRIPTION: Starts the interactive UI for viewing, searching, and executing configured Atmos workflows.  This command allows users to navigate through available workflows, filter them, and execute them step-by-step using a terminal-based interface. It supports keyboard navigation and filtering.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/workflow.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow\n```\n\n----------------------------------------\n\nTITLE: List component variables in Atmos\nDESCRIPTION: This command lists only the variables for a given component.  The '--query .vars' option filters the output to show only the 'vars' section of the component's configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --query .vars\n```\n\n----------------------------------------\n\nTITLE: Filter Atmos settings by stack pattern\nDESCRIPTION: Filters the list of settings based on a stack pattern.  The example provided filters settings for stacks matching the pattern `*-dev-*`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --stack '*-dev-*'\n```\n\n----------------------------------------\n\nTITLE: Validate Atmos Components\nDESCRIPTION: Shows various commands for validating Atmos components. These commands validate components against different schema types (JSON Schema, OPA) and allow specifying timeout and module paths.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\natmos validate component $component -s $stack\natmos validate component $component -s $stack --schema-type jsonschema --schema-path $component.json\natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego \natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego  --module-paths catalog\natmos validate component $component -s $stack --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Displaying Stack Name Pattern Tenant Error\nDESCRIPTION: This console output shows the error when a `name_pattern` includes a `tenant` but the stack configuration lacks a tenant definition. It highlights a mismatch between the pattern and the stack's variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/troubleshoot/errors.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nThe stack name pattern '{tenant}-{environment}-{stage}' specifies 'tenant', but the stack ue1-prod does not have a tenant defined\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows\nDESCRIPTION: This command shows the configured Atmos workflows, which define sequences of commands to be executed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe workflows\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Source\nDESCRIPTION: This example shows how to access environment variables within the `source` attribute of the `vendor.yaml` file. It demonstrates using the `env` function to retrieve the `GITHUB_TOKEN` environment variable for authenticating with a private Git repository.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsource: \"git::https://{{env \\\"GITHUB_TOKEN\\\"}}@github.com/some-org/some-private-repo/terraform/{{ .Component }}/{{ .Version }}.git?ref={{.Version}}\"\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config for affected components with verbose output\nDESCRIPTION: Uses the `--verbose` flag to print more detailed output, combined with `--affected-only` for filtering.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --verbose=true\n```\n\n----------------------------------------\n\nTITLE: Atmos Stacks Configuration Example\nDESCRIPTION: This YAML snippet demonstrates how to include the weather module in Atmos Stacks configuration. It defines the `weather` component under the `terraform` category and sets values for input variables like `stage`, `location`, `options`, `format`, `lang`, and `units`. These variables customize the weather data retrieval and display.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/quick-start-simple/components/terraform/weather/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    weather:\n      vars:\n        stage: dev\n        location: New York\n        options: 0T\n        format: v2\n        lang: en\n        units: m\n```\n\n----------------------------------------\n\nTITLE: Atmos Final Filesystem Layout Example\nDESCRIPTION: This example presents a final filesystem layout where the `atmos.yaml` file is placed at `/usr/local/etc/atmos/atmos.yaml`. The `components` directory is organized by tool and contains `vpc` and `vpc-flow-logs-bucket` subdirectories.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-repository.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration\n   ├── stacks/\n   │   ├── <stack_1>.yaml\n   │   ├── <stack_2>.yaml\n   │   └── <stack_3>.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   └── components/\n       └── terraform/   # Terraform components (Terraform root modules)\n           ├── vpc/\n           └── vpc-flow-logs-bucket/\n```\n\n----------------------------------------\n\nTITLE: Describing a component with skipped functions\nDESCRIPTION: This command describes a component, skipping specified Atmos YAML functions. `--skip` flags are used to exclude `terraform.output` and `include` functions from processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s tenant1-ue2-dev --skip=terraform.output\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s tenant1-ue2-dev --skip=terraform.output --skip=include\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s tenant1-ue2-dev --skip=include,eval\n```\n\n----------------------------------------\n\nTITLE: Enable OpenTofu Support for a Component in Atmos (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a specific component in Atmos to use OpenTofu for Spacelift. Setting `terraform_workflow_tool` to `OPEN_TOFU` within the component's `spacelift` settings overrides the global configuration, if any. This is useful for specific components that require OpenTofu, while others may use Terraform.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/spacelift.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my-component:\n      settings:\n        spacelift:\n          # Use OpenTofu\n          terraform_workflow_tool: OPEN_TOFU\n```\n\n----------------------------------------\n\nTITLE: Generating Varfile with File Template\nDESCRIPTION: This example demonstrates how to generate a Terraform variable file using a custom file template. The `--file-template` option specifies the path, name, and extension of the generated file based on component, tenant, environment, and stage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_varfiles_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos terraform generate varfile --file-template {component-path}/{tenant}/{environment}-{stage}.tf.json --format json\n```\n\n----------------------------------------\n\nTITLE: Example Incorrect Complex Output Results YAML\nDESCRIPTION: This snippet illustrates the incorrect results when handling complex outputs without `!template`. The outputs are JSON-encoded strings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: '[\"item_1\",\"item_2\",\"item_3\"]'\nvar2: '{\"a\":1,\"b\":2,\"c\":3}'\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Configuration: Using Vendored Component\nDESCRIPTION: This YAML snippet demonstrates how to configure a vendored component (ipinfo) within an Atmos stack configuration. It defines the component metadata and variables for the ipinfo component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/vendor-components.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  components:\n    ipinfo:\n      metadata:\n        component: ipinfo\n      vars: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State for VPC Flow Logs Bucket (HCL)\nDESCRIPTION: This HCL code configures the remote-state Terraform module to obtain the remote state for the `vpc-flow-logs-bucket-1` Atmos component. It specifies the component name and allows overriding context variables to point to a different Atmos stack if needed. The module is conditionally enabled based on the `vpc_flow_logs_enabled` variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_flow_logs_bucket\" {\n  count = local.vpc_flow_logs_enabled ? 1 : 0\n\n  source  = \"cloudposse/stack-config/yaml//modules/remote-state\"\n  version = \"1.5.0\"\n\n  # Specify the Atmos component name (defined in YAML stack config files)\n  # for which to get the remote state outputs\n  component = var.vpc_flow_logs_bucket_component_name\n\n  # Override the context variables to point to a different Atmos stack if the\n  # `vpc-flow-logs-bucket-1` Atmos component is provisioned in another AWS account, OU or region\n  stage       = try(coalesce(var.vpc_flow_logs_bucket_stage_name, module.this.stage), null)\n  tenant      = try(coalesce(var.vpc_flow_logs_bucket_tenant_name, module.this.tenant), null)\n  environment = try(coalesce(var.vpc_flow_logs_bucket_environment_name, module.this.environment), null)\n\n  # `context` input is a way to provide the information about the stack (using the context\n  # variables `namespace`, `tenant`, `environment`, `stage` defined in the stack config)\n  context = module.this.context\n}\n```\n\n----------------------------------------\n\nTITLE: Define a New Terraform Command in Atmos (YAML)\nDESCRIPTION: This YAML snippet defines a new `terraform provision` command within the `terraform` command group in Atmos. It showcases how to define nested commands, arguments, flags, and environment variables. The steps use the defined arguments and flags to execute `atmos terraform plan` and `atmos terraform apply`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom CLI commands\ncommands:\n  - name: terraform\n    description: Execute 'terraform' commands\n    # subcommands\n    commands:\n      - name: provision\n        description: This command provisions terraform components\n        arguments:\n          - name: component\n            description: Name of the component\n        flags:\n          - name: stack\n            shorthand: s\n            description: Name of the stack\n            required: true\n        # ENV var values support Go templates\n        env:\n          - key: ATMOS_COMPONENT\n            value: \"{{ .Arguments.component }}\"\n          - key: ATMOS_STACK\n            value: \"{{ .Flags.stack }}\"\n        steps:\n          - atmos terraform plan $ATMOS_COMPONENT -s $ATMOS_STACK\n          - atmos terraform apply $ATMOS_COMPONENT -s $ATMOS_STACK\n```\n\n----------------------------------------\n\nTITLE: Partial Stack Manifest - EKS\nDESCRIPTION: Configures an EKS cluster within Atmos using a partial stack manifest. It imports necessary defaults, region mixins, and the EKS component catalog defaults.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # The `orgs/acme/plat/dev/_defaults` and `mixins/region/us-east-2` manifests\n  # define the top-level Atmos stack `plat-ue2-dev`\n  - orgs/acme/plat/dev/_defaults\n  - mixins/region/us-east-2\n  # Import the related component manifests into this partial stack manifest\n  - catalog/eks/defaults\n```\n\n----------------------------------------\n\nTITLE: Invalid Git SSH Source Example\nDESCRIPTION: Example of an invalid Git SSH source configuration. go-getter misinterprets `github.com:` as a URL scheme.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com:cloudposse/terraform-null-label.git?ref={{ .Version }}\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backends for Specific Components\nDESCRIPTION: This command generates Terraform backend files only for the specified Atmos components, which are provided as a comma-separated list.  The file template dictates the output file's structure, while `--components` narrows down the target set of components to process.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_generate_backends_usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform generate backends --file-template <file_template> --components <component1>,<component2>\n```\n\n----------------------------------------\n\nTITLE: Configure Tenant Defaults in YAML (org1/core)\nDESCRIPTION: This YAML configuration defines default settings for the `org1` organization and `core` tenant. It imports the organization defaults and the `core` tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/_defaults\n  - mixins/tenant/core\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Configuration with Atmos CLI\nDESCRIPTION: These commands demonstrate how to use the Atmos CLI to apply the Terraform configuration for the `vpc/1` and `vpc/2` components in the `ue2-dev` stack.  The `atmos terraform apply` command is used to provision the infrastructure defined in the Terraform configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc/1 -s ue2-dev\natmos terraform apply vpc/2 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Execute Deploy Script\nDESCRIPTION: Executes the `deploy.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Directory structure for Basic Layout\nDESCRIPTION: This snippet displays the directory structure of a project using the Basic Layout, including `stacks` and `components` directories with catalog files and environment-specific stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration\n   ├── stacks\n   │   ├── catalog\n   │   │    ├── vpc.yaml\n   │   │    └── vpc-flow-logs-bucket.yaml\n   │   ├── ue2-dev.yaml\n   │   ├── ue2-staging.yaml\n   │   ├── ue2-prod.yaml\n   │   ├── uw2-dev.yaml\n   │   ├── uw2-staging.yaml\n   │   └── uw2-prod.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   └── components\n       └── terraform   # Terraform components (Terraform root modules)\n           ├── vpc\n           └── vpc-flow-logs-bucket\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Command Output JSON Schema\nDESCRIPTION: This JSON schema defines the structure of the objects returned by the `atmos describe` command. It includes properties like component name, type, path, affected stack, and settings. This schema provides information about the affected components, their type (Terraform or Helmfile), and their dependency relationships.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"component\": \"....\",\n  \"component_type\": \"....\",\n  \"component_path\": \"....\",\n  \"stack\": \"....\",\n  \"stack_slug\": \"....\",\n  \"spacelift_stack\": \".....\",\n  \"atlantis_project\": \".....\",\n  \"affected\": \".....\",\n  \"file\": \".....\",\n  \"folder\": \".....\",\n  \"dependents\": [],\n  \"included_in_dependents\": \"true | false\",\n  \"settings\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos with asdf\nDESCRIPTION: This snippet demonstrates installing Atmos using asdf, a version manager. It involves adding the asdf-atmos plugin, and then installing Atmos using `asdf install`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\napt-get update && apt-get install -y bash curl tar\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add atmos https://github.com/cloudposse/asdf-atmos.git\n```\n\n----------------------------------------\n\nTITLE: Limit displayed stacks in Atmos\nDESCRIPTION: This command limits the number of stacks displayed. The '--max-columns' option is used to restrict the number of stacks shown in the output.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --max-columns 3\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform files for another specific component and stack\nDESCRIPTION: This command deletes Terraform-related files for the 'infra/vpc' component in the 'tenant1-ue2-staging' stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-clean.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean infra/vpc -s tenant1-ue2-staging\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Workflow from CLI\nDESCRIPTION: This shell command demonstrates how to execute a defined Atmos workflow from the command line.  It invokes the `atmos workflow` command, specifies the workflow name (`eks-up`), the workflow definition file (`workflow1`), and the Atmos stack (`tenant1-ue2-dev`) to provision the components into. This command triggers the execution of all the steps defined in the `eks-up` workflow within the specified stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow eks-up -f workflow1 --stack tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Using !env to retrieve environment variables in YAML\nDESCRIPTION: The `!env` function retrieves environment variables for use in Atmos stack manifests. It can accept one argument (environment variable name) or two arguments (environment variable name and default value). If the environment variable is not found and no default value is provided, `null` is assigned.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/env.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Get the value of an environment variable.\n# If the environment variable is not present in the environment, `null` will be assigned\n!env <env-var-name>\n\n# Get the value of an environment variable.\n# If the environment variable is not present in the environment, the `default-value` will be assigned\n!env <env-var-name> <default-value>\n```\n\n----------------------------------------\n\nTITLE: Complex Atmos Project Layout\nDESCRIPTION: This shows a complex folder structure for a larger Atmos project, broken down into multiple organizations, organizational units (OUs), and environments. It is designed for enterprise-scale architectures.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/layout.mdx#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n├── components/                  # Folder containing all your components, usually organized by toolchain\n│   └── terraform/               # Folder for all Terraform \"root modules\"\n└── stacks/\n    ├── orgs/                    # Folder for deployable stacks\n    │   └── acme/                # Folder for the Acme organization\n    │       ├── core/            # OU for core services\n    │       │   ├── security/    # Folder for security-related configurations\n    │       │   ├── audit/       # Folder for audit-related configurations\n    │       │   ├── identity/    # Folder for identity management configurations\n    │       │   └── network/     # Folder for networking-related configurations\n    │       └── plat/            # OU for platform environments\n    │           ├── dev/         # Folder for development environment configurations\n    │           ├── staging/     # Folder for staging environment configurations\n    │           └── prod/        # Folder for production environment configurations\n    ├── catalog/                 # Folder for the service catalog\n    ├── schemas/                 # Folder for the schema validations\n    └── workflows/               # Folder for workflows that operate on top of stacks\n```\n\n----------------------------------------\n\nTITLE: Apply Zsh Configuration Changes\nDESCRIPTION: Applies the changes made to the `.zshrc` file by sourcing it. This ensures that the new shell settings, including the Atmos CLI completion, are loaded into the current shell session.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Atmos Affected Component JSON Output Example\nDESCRIPTION: This JSON snippet shows the output of the `atmos describe affected` command, demonstrating how components are identified as affected based on modifications in files or folders.  Each entry in the JSON array represents an affected component, including its type, path, stack, and the reason for being considered affected. The `atmos describe affected` command needs to be executed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component3\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"components/terraform/top-level-component1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component3\",\n    \"affected\": \"folder\",\n    \"folder\": \"tests/fixtures/scenarios/complete/components/helmfile/infra/infra-server\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Atmos Stacks for a Component\nDESCRIPTION: This command lists all Atmos stacks associated with a specific component. The `-c` flag specifies the component to filter by. Requires Atmos CLI to be configured and the specified component to exist in the Atmos configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-stacks.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos list stacks -c <component>\n```\n\n----------------------------------------\n\nTITLE: Import Slides Component\nDESCRIPTION: This code snippet demonstrates how to import a React component named `Slides` from a specified module path. It's assumed the component is defined elsewhere in the project. It's a necessary step to use the `Slides` component within the current file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/reference/slides.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Slides from \"@site/src/components/Slides\";\n```\n\n----------------------------------------\n\nTITLE: Disable Go template processing in Atmos\nDESCRIPTION: This command disables Go template processing. The '--process-templates=false' option prevents Go templates from being processed during value retrieval.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: YAML: Matching Multiple File Extensions Expanded\nDESCRIPTION: This YAML snippet demonstrates the expanded equivalent of using curly braces `{...}` to match multiple file extensions. It includes all `.tf` and `.md` files within the `demo-library` directory and its subdirectories using separate entries. This example clarifies the behavior of the previous snippet.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\nincluded_paths:\n  - \"**/demo-library/**/*.tf\"\n  - \"**/demo-library/**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: Example Output Table\nDESCRIPTION: Example output of the `atmos list vars vpc` command, showing the component values in a table format across different environments (dev-ue1, staging-ue1, prod-ue1).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> atmos list vars vpc\n┌──────────────┬──────────────┬──────────────┬──────────────┐\n│              │   dev-ue1    │  staging-ue1 │   prod-ue1   │\n├──────────────┼──────────────┼──────────────┼──────────────┤\n│ enabled      │ true         │ true         │ true         │\n│ name         │ dev-vpc      │ staging-vpc  │ prod-vpc     │\n│ cidr_block   │ 10.0.0.0/16  │ 10.1.0.0/16  │ 10.2.0.0/16  │\n│ environment  │ dev          │ staging      │ prod         │\n│ namespace    │ example      │ example      │ example      │\n│ stage        │ dev          │ staging      │ prod         │\n│ region       │ us-east-1    │ us-east-1    │ us-east-1    │\n└──────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Listing Stacks by Component - Atmos CLI\nDESCRIPTION: This command lists all Atmos stacks that contain the specified component. Replace `<component>` with the name of the component you want to search for. The command requires the Atmos CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_stacks_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list stacks -c <component>\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflows with CLI\nDESCRIPTION: This shell script demonstrates how to execute Atmos workflows using the `atmos workflow` CLI command.  It shows examples of running workflows defined in different YAML manifests, specifying the workflow name and the manifest file. These commands trigger the execution of the defined steps within each workflow.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-workflows.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Execute the workflow `plan-all-vpc-flow-logs` from the workflow manifest `networking.yaml`\natmos workflow plan-all-vpc-flow-logs -f networking\n\n# Execute the workflow `plan-all-vpc` from the workflow manifest `networking.yaml`\natmos workflow plan-all-vpc -f networking\n\n# Execute the workflow `apply-all-components` from the workflow manifest `networking.yaml`\natmos workflow apply-all-components -f networking\n\n# Execute the workflow `validate-all-vpc-flow-logs` from the workflow manifest `validation.yaml`\natmos workflow validate-all-vpc-flow-logs -f validation\n\n# Execute the workflow `validate-all-vpc` from the workflow manifest `validation.yaml`\natmos workflow validate-all-vpc -f validation\n```\n\n----------------------------------------\n\nTITLE: List All Atmos Metadata\nDESCRIPTION: This command retrieves and displays all metadata available within the Atmos environment. No specific query or filter is applied, resulting in a comprehensive output of all metadata entries.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata\n```\n\n----------------------------------------\n\nTITLE: Redis Store Configuration (YAML)\nDESCRIPTION: Configures a Redis store in `atmos.yaml`. This includes specifying the store type and any necessary options like the Redis URL (which can also be provided via an environment variable).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstores:\n  redis:\n    type: redis\n    # The ATMOS_REDIS_URL environment variable will be used if\n    # no URL is specified in the options\n```\n\n----------------------------------------\n\nTITLE: List all Atmos settings\nDESCRIPTION: Lists all available settings in the Atmos environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Helmfile Generate Varfile Help\nDESCRIPTION: Displays the help information for the `atmos helmfile generate varfile` command, used to generate variable files for helmfile.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile generate varfile --help\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Disable Functions Processing\nDESCRIPTION: Example usage of the `atmos terraform shell` command with the `--process-functions` flag disabled.  This disables YAML functions processing in Atmos stack manifests when executing terraform commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Example of Atmos Workflow Execution Output\nDESCRIPTION: This terminal output demonstrates an example execution of an Atmos workflow. It illustrates how Atmos automatically generates names for steps where the `name` attribute is omitted (e.g., `step4`). The output shows the execution of the workflow starting from `step4`, demonstrating the functionality of the `--from-step` flag and the automatic step naming.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nExecuting the workflow 'test-1' from 'stacks/workflows/workflow1.yaml'\n\ndescription: Test workflow\nsteps:\n- name: step1\n  command: echo Command 1\n  type: shell\n- name: step2\n  command: echo Command 2\n  type: shell\n- name: step3\n  command: echo Command 3\n  type: shell\n- name: step4\n  command: echo Command 4\n  type: shell\n\nExecuting workflow step: echo Command 4\n\nExecuting command: echo Command 4\nCommand 4\n\nExecuting workflow step: echo Command 5\n\nExecuting command: echo Command 5\nCommand 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflows Base Path in atmos.yaml\nDESCRIPTION: This YAML snippet configures the base path for Atmos workflows within the `atmos.yaml` file.  The `base_path` specifies the directory where workflow manifests are located. This setting can also be configured using the `ATMOS_WORKFLOWS_BASE_PATH` environment variable or the `--workflows-dir` command-line argument.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-workflows.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  # Can also be set using 'ATMOS_WORKFLOWS_BASE_PATH' ENV var, or '--workflows-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks/workflows\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Atmos Repository with Git\nDESCRIPTION: This code snippet demonstrates how to clone the Atmos repository from GitHub using Git. It then navigates to the examples directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Clone this repo\ngit clone git@github.com:cloudposse/atmos.git\n\n# Try the examples: https://github.com/cloudposse/atmos/tree/main/examples\ncd examples/\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Shell Help\nDESCRIPTION: Displays the help information for `atmos terraform shell`, which provides a shell environment configured for Terraform.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell --help\n```\n\n----------------------------------------\n\nTITLE: Output: Identical planfiles\nDESCRIPTION: Illustrates the output when the two plan files being compared are identical. The command simply prints the message 'The planfiles are identical'.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-plan-diff.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThe planfiles are identical\n```\n\n----------------------------------------\n\nTITLE: Terraform Command with Dry Run Flag\nDESCRIPTION: Shows how to use the `--dry-run` flag with `atmos terraform`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform <command> <component> -s <stack> --dry-run=true\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos on NixOS\nDESCRIPTION: This snippet shows how to install Atmos on NixOS using nix-env and nix-shell. It might require updating the Nix config to include \"unstable\" packages for the latest version.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -iA nixpkgs.atmos\n```\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell -p atmos\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Backend Help\nDESCRIPTION: Displays help for `atmos terraform generate backend`, generating Terraform backend configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend --help\n```\n\n----------------------------------------\n\nTITLE: Filtering Helm Releases with JQ\nDESCRIPTION: This snippet filters a list of Helm releases using `jq` based on a given pattern.  It extracts the first segment of the release name (split by `/`) and joins them with `|` to form a filter string.  The filter string is then used in a `helm list` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm_list_filter=$(echo ${releases_with_removed_versions} | jq -r '[ (.[].name | split(\"/\"))[0] ] | join(\"|\")')\nhelm list -A -a -f ${helm_list_filter}\n```\n\n----------------------------------------\n\nTITLE: Using Format Function to Specify Stack Name (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use the `printf` template function to construct stack names dynamically. This is useful when stack names are based on context variables. For example, constructing the stack name based on tenant, environment, and stage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{ (atmos.Component \"<component>\" (printf \"%s-%s-%s\" .vars.tenant .vars.environment .vars.stage)).<section>.<attribute> }}\n\n{{ (atmos.Component \"<component>\" (printf \"plat-%s-prod\" .vars.environment)).<section>.<attribute> }}\n\n{{ (atmos.Component \"<component>\" (printf \"%s-%s-%s\" .settings.context.tenant .settings.context.region .settings.context.account)).<section>.<attribute> }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ (atmos.Component \"vpc\" (printf \"net-%s-%s\" .vars.environment .vars.stage)).outputs.vpc_id }}'\n```\n\n----------------------------------------\n\nTITLE: Generate Bash Completion Script\nDESCRIPTION: Generates a Bash completion script for the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natmos completion bash\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Version Information\nDESCRIPTION: This command executes the `atmos about` command in the terminal. It is used to display the version, build date, and other relevant information about the installed Atmos CLI tool. It is a basic command with no specific dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_about_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos about\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos via apk on Alpine Linux\nDESCRIPTION: This snippet shows how to add the Cloud Posse package repository to Alpine Linux and install Atmos using apk. It requires curl to be installed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Install the Cloud Posse package repository hosted by Cloudsmith\ncurl -fsSL 'https://dl.cloudsmith.io/public/cloudposse/packages/setup.alpine.sh' │ bash\n\n# Install atmos\napk add atmos@cloudposse\n```\n\n----------------------------------------\n\nTITLE: LogDebug Example 2\nDESCRIPTION: This example demonstrates how to use LogDebug to log the status of a feature toggle.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"Feature toggle '%s' enabled.\"\n```\n\n----------------------------------------\n\nTITLE: Plat Tenant Mixin Configuration in YAML\nDESCRIPTION: This YAML configuration sets the `tenant` variable to `plat` within the `stacks/mixins/tenant/plat.yaml` file. This mixin is designed to provide default settings specific to the 'plat' tenant or organizational unit (OU).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  tenant: plat\n\n# Other defaults for the `plat` tenant/OU\n```\n\n----------------------------------------\n\nTITLE: Include File with Spaces (Windows)\nDESCRIPTION: Demonstrates how to include a file with spaces in its path on Windows, using double quotes around the file path. YQ Expression is optional.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  values: !include '\"~/My Documents/dev/values.yaml\"'\n  config: !include '\"~/My Documents/dev/config.json\" \"<yq-expression-with-spaces>\"'\n```\n\n----------------------------------------\n\nTITLE: Component Vendor Config YAML example\nDESCRIPTION: Example of a `ComponentVendorConfig` YAML file used to download the `vpc` component from an AWS public ECR registry. This example demonstrates vendoring from OCI registries.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/vendor/vendor-pull.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: ComponentVendorConfig\nmetadata:\n  name: vpc-vendor-config\n  description: Config for vendoring of 'vpc' component\nspec:\n  source:\n    # Download the component from the AWS public ECR registry (https://docs.aws.amazon.com/AmazonECR/latest/public/public-registries.html)\n    uri: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n    version: \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Running the `atmos atlantis generate repo-config` command\nDESCRIPTION: This command generates a repository configuration (`atlantis.yaml`) for Atlantis. It can be used with various options to customize the configuration generation process, such as specifying config and project templates, stacks, components, and filtering by affected components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config [options]\n```\n\n----------------------------------------\n\nTITLE: List specific Atmos settings\nDESCRIPTION: Lists specific settings by querying the configuration using a JMESPath expression. In this case, it lists settings under the `.terraform` path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --query '.terraform'\n```\n\n----------------------------------------\n\nTITLE: Example Output of atmos list vars\nDESCRIPTION: This displays example output from the command, including column headers and row values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-vars.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> atmos list vars vpc\n┌─────────────┬──────────────┬──────────────┬──────────────┐\n│             │   dev-ue1    │  staging-ue1 │   prod-ue1   │\n├─────────────┼──────────────┼──────────────┼──────────────┤\n│ name        │ platform-vpc │ platform-vpc │ platform-vpc │\n│ region      │ us-east-1    │ us-east-1    │ us-east-1    │\n│ environment │ dev          │ staging      │ prod         │\n└─────────────┴──────────────┴──────────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Handling String Output YAML\nDESCRIPTION: This snippet demonstrates the case where the output is a simple string type, which is correctly handled in YAML without the need for `!template`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: '{{ (atmos.Component \"<component>\" \"<stack>\").outputs.test_string }}'\n```\n\n----------------------------------------\n\nTITLE: Helm AWS Profile Pattern Example\nDESCRIPTION: This is an example of `helm_aws_profile_pattern`. It shows how to format AWS profile patterns.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/components.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{namespace}-{tenant}-{gbl}-{stage}-helm\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components Example 2\nDESCRIPTION: This is an example of listing Atmos components for a specific stack named `tenant1-ue2-dev`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-components.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos list components -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Disable Go template processing\nDESCRIPTION: Disables the processing of Go templates when listing settings. This is useful when you want to see the raw template content without it being evaluated.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_settings_usage.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list settings --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPCs Using Atmos CLI Commands\nDESCRIPTION: These shell commands demonstrate how to provision the two VPCs defined in the YAML snippet using the Atmos CLI. `atmos terraform apply vpc/1 -s plat-ue2-dev` applies the configuration for `vpc/1` to the `plat-ue2-dev` stack, and `atmos terraform apply vpc/2 --stack plat-ue2-dev` applies the configuration for `vpc/2` to the same stack. The purpose is to deploy multiple VPC instances with their respective configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/final-notes.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc/1 -s plat-ue2-dev\natmos terraform apply vpc/2 --stack plat-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Manifest Templates in YAML\nDESCRIPTION: This YAML snippet shows where Atmos stack manifests can define templates.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  file: \"/dev/stderr\"\n  level: Trace\n```\n\n----------------------------------------\n\nTITLE: Terraform Component Configuration - vpc.yaml\nDESCRIPTION: This YAML configuration shows how to add `workspace_key_prefix` to a component manifest to specify the prefix for the Terraform workspace key in the S3 bucket.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/backends.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # `vpc` is the Atmos component name\n    vpc:\n      # Optional backend configuration for the component\n      backend:\n        s3:\n          workspace_key_prefix: vpc\n      metadata:\n        # Point to the Terraform component\n        component: vpc\n      settings: {}\n      vars: {}\n      env: {}\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Workflows Help\nDESCRIPTION: Displays help information for `atmos describe workflows`, which describes available workflows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows --help\n```\n\n----------------------------------------\n\nTITLE: Executing a simple shell command with !exec in YAML\nDESCRIPTION: Executes the `echo 42` shell command and assigns the result to the `var1` variable in the Atmos stack manifest. The result is a simple string.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: !exec echo 42\n```\n\n----------------------------------------\n\nTITLE: Generate Fish Completion Script\nDESCRIPTION: Generates a Fish completion script for the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\natmos completion fish\n```\n\n----------------------------------------\n\nTITLE: Generate Atlantis Projects for Specified Components (Bash)\nDESCRIPTION: This command generates Atlantis projects for the components specified using the `--components` flag.  The components are provided as comma-separated values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --config-template <config_template> --project-template <project_template> --components <component1>,<component2>\n```\n\n----------------------------------------\n\nTITLE: LogFatal Example 2\nDESCRIPTION: This example demonstrates how to use LogFatal to log a fatal error, specifically a database connection failure, causing the application to shut down.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"Fatal error: Database connection failed. Application shutting down.\"\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Atlantis Help\nDESCRIPTION: Displays the help information for the `atmos atlantis` subcommand, which is used for interacting with Atlantis, a Terraform workflow automation tool.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis --help\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos with Mise\nDESCRIPTION: This snippet demonstrates how to install Atmos using Mise. It uses the `mise use` command to install a specified version.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmise use atmos@<LatestRelease />\n```\n\n----------------------------------------\n\nTITLE: Create Post-Create Script (Bash)\nDESCRIPTION: This bash script is an optional post-create script that can be used to run additional setup commands after the DevContainer is created. It provides an example of installing custom tools or setting up environment variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\n# Example: Install custom tools or set up environment variables\necho \"Post-create script running...\"\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Commands with Custom Stack Name\nDESCRIPTION: This shell snippet shows example Atmos commands that use a custom stack naming convention defined using the `name_template` configuration, allowing for flexible stack naming based on variables like division, account, and region.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/stacks.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan <component> -s <division-account-region>\natmos terraform apply <component> -s <division-account-region>\natmos describe component <component> -s <division-account-region>\n```\n\n----------------------------------------\n\nTITLE: Parameterized Atmos component definition in YAML\nDESCRIPTION: This code snippet defines an Atmos component with parameters using Go templates. The component name, enabled flag, and other variables are parameterized, allowing for dynamic generation based on context variables. The `{{ .flavor }}` syntax denotes Go template placeholders.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    \"eks-{{ .flavor }}/cluster\":\n      metadata:\n        component: \"test/test-component\"\n      vars:\n        enabled: \"{{ .enabled }}\"\n        name: \"eks-{{ .flavor }}\"\n        service_1_name: \"{{ .service_1_name }}\"\n        service_2_name: \"{{ .service_2_name }}\"\n        tags:\n          flavor: \"{{ .flavor }}\"\n```\n\n----------------------------------------\n\nTITLE: Filesystem Layout Example\nDESCRIPTION: This code snippet shows an example of how Stack imports might be organized on disk. It demonstrates the directory structure for storing mixins, teams, and catalogs, illustrating a common approach for managing reusable configurations in Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/catalogs.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n└── stacks/\n    ├── mixins/\n    │   └── region/\n    │       ├── us-east-1.yaml\n    │       ├── us-west-2.yaml\n    │       └── eu-west-1.yaml    \n    │   └── stage/\n    ├── teams/\n    │   └── frontend/\n    │       └── example-application/\n    │           └── microservice/\n    │               ├── prod.yaml\n    │               ├── dev.yaml\n    │               └── staging.yaml\n    └── catalogs/\n        ├── vpc/\n        │   └── baseline.yaml\n        └── database/\n            ├── baseline.yaml\n            ├── small.yaml\n            ├── medium.yaml\n            └── large.yaml\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Process Templates Flag\nDESCRIPTION: Demonstrates how to disable Go template processing using the `--process-templates` flag with the `atmos terraform plan` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform plan <component> -s <stack> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Validate Component Help\nDESCRIPTION: Displays help information for `atmos validate component`, used for validating components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component --help\n```\n\n----------------------------------------\n\nTITLE: Render Slides Component\nDESCRIPTION: This code snippet renders the imported `Slides` component. This inserts the component's content and functionality into the page. It relies on the successful import of the Slides component as shown above.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/reference/slides.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Slides/>\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Configuration: Importing Other Configurations\nDESCRIPTION: This YAML snippet demonstrates how to import other vendoring configurations in Atmos. It defines an `imports` section in the `vendor.yaml` file, specifying a glob pattern to include additional YAML files from the `vendor/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/vendor-components.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: my-vendor-config\n  description: Example Atmos vendoring manifest\nspec:\n  imports: vendor/**.yaml\n```\n\n----------------------------------------\n\nTITLE: Implement Terraform main.tf\nDESCRIPTION: Defines the main logic of the Terraform module.  The example uses a local variable to construct a URL based on input variables and uses a data source to make an HTTP request to retrieve the weather. The `EmbedFile` component is used to include the contents of the `examples/quick-start-simple/components/terraform/weather/main.tf` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/write-components.mdx#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n<EmbedFile filePath=\"examples/quick-start-simple/components/terraform/weather/main.tf\" />\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Dependents Help\nDESCRIPTION: Displays help for `atmos describe dependents`, showing resources that depend on other resources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\natmos describe dependents --help\n```\n\n----------------------------------------\n\nTITLE: Restrict Terraform Variable with OPA (Rego)\nDESCRIPTION: This snippet presents an OPA policy, written in Rego, that restricts a Terraform variable (`name`) from being provided on the command line. The policy checks if the `name` variable exists within the `input.tf_cli_vars` section. If it exists, an error message is returned, preventing the component from being provisioned.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/terraform-variables.mdx#_snippet_3\n\nLANGUAGE: rego\nCODE:\n```\npackage atmos\n\nerrors[\"for the 'my-component' component, the variable 'name' cannot be overridden on the command line using the '-var' flag\"] {\n    input.tf_cli_vars.name\n}\n```\n\n----------------------------------------\n\nTITLE: Define CLI Command Aliases in Atmos YAML\nDESCRIPTION: This YAML snippet defines several CLI command aliases for Atmos. Aliases provide shorthand names for frequently used commands, simplifying command-line interactions. This improves efficiency by reducing typing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# CLI command aliases\naliases:\n  # Aliases for Atmos native commands\n  tf: terraform\n  tp: terraform plan\n  up: terraform apply\n  down: terraform destroy\n  ds: describe stacks\n  dc: describe component\n  # Aliases for Atmos custom commands\n  ls: list stacks\n  lc: list components\n```\n\n----------------------------------------\n\nTITLE: Simulate Atmos Component Vendoring\nDESCRIPTION: This command simulates pulling the specified component from the remote repository without actually making any changes. The `--dry-run` flag allows for testing the vendoring process without affecting the local environment. The `<component>` parameter specifies the component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_pull_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$  atmos vendor pull --component <component> --dry-run\n```\n\n----------------------------------------\n\nTITLE: Displaying Config in JSON format with syntax highlighting\nDESCRIPTION: This bash command demonstrates how to display the configuration in JSON format with syntax highlighting using the `atmos describe config` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/terminal.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Display config in JSON format with syntax highlighting\natmos describe config\n```\n\n----------------------------------------\n\nTITLE: Run Atmos GitHub Status Command\nDESCRIPTION: Executes the custom `github status` command defined in `atmos.yaml` using the Atmos CLI. This command fetches and displays the current status of GitHub services.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/add-custom-commands.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\natmos github status\n```\n\nLANGUAGE: console\nCODE:\n```\nAll Systems Operational\n```\n\n----------------------------------------\n\nTITLE: Configure Core Tenant Mixin - YAML\nDESCRIPTION: This YAML snippet configures the core tenant mixin. It defines the 'tenant' variable as 'core'. This configuration is used to set defaults for the 'core' tenant/OU.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  tenant: core\n\n# Other defaults for the `core` tenant/OU\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Tutorial in Bash\nDESCRIPTION: Navigates to the specific tutorial directory within the tutorials repository inside the container.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /tutorials/03-first-aws-environment\n```\n\n----------------------------------------\n\nTITLE: LogTrace Example\nDESCRIPTION: This example demonstrates how to use LogTrace to log the entry point of a function and its arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"Entering function 'ProcessRequest' with args: %v\"\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Workspace Help\nDESCRIPTION: Displays the help information for `atmos terraform workspace`, used for managing Terraform workspaces.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace --help\n```\n\n----------------------------------------\n\nTITLE: Setting TERM Environment Variable\nDESCRIPTION: This snippet shows how to set the TERM environment variable to `xterm-256color`, which may be required for Atmos to display colors correctly in some terminals. This should be added to your shell's RC file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport TERM=xterm-256color\n```\n\n----------------------------------------\n\nTITLE: Enable Atmos CLI Completion in Bash\nDESCRIPTION: Configures Bash shell for Atmos CLI completion by sourcing the generated completion script.  It requires bash shell and atmos cli installed. Add the following line to your `~/.bashrc` or `~/.bash_profile` file and then source the file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/completion.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Enable Atmos CLI completion\nsource <(atmos completion bash)\n```\n\n----------------------------------------\n\nTITLE: Configure Stage Mixin in YAML (dev)\nDESCRIPTION: This YAML configuration defines a mixin for the `dev` stage.  It sets the `stage` variable to `dev`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: dev\n\n# Other defaults for the `dev` stage/account\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Command\nDESCRIPTION: This command applies a specific Atmos component to a specified stack. It triggers Atmos to process the component's configuration and its inheritance chain before executing the Terraform apply command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/inheritance.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Commit Generated Terraform Files\nDESCRIPTION: This shell script within the GitHub Action commits the generated Terraform varfiles and backend config files to the PR branch. It checks for untracked files or changes before committing. It relies on `git` commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nuntracked=$(git ls-files --others --exclude-standard)\nchanges_detected=$(git diff --name-only)\nif [ -n \"$untracked\" ] || [ -n \"$changes_detected\" ]; then\n  git config --global user.name github-actions\n  git config --global user.email github-actions@github.com\n  git add -A *\n  git commit -m \"Committing generated autogenerated var files\"\n  git push\nfi\n```\n\n----------------------------------------\n\nTITLE: Install HTML Snippets to Website Directory with Make\nDESCRIPTION: This `make` command installs the generated HTML snippets into the `../../website/static/screengrabs` directory.  It assumes that the snippets have already been built using the `make all` command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Build Colorized HTML Snippets with Make\nDESCRIPTION: This `make` command builds all colorized HTML snippets of command output by executing the `all` target defined in the `Makefile`. It assumes that `commands.txt` exists and contains a list of commands to generate snippets for.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Including Stacks with No Components (Shell)\nDESCRIPTION: This command includes stacks that have no components in the output. The `--include-empty-stacks` flag is used to include these stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --include-empty-stacks\n```\n\n----------------------------------------\n\nTITLE: Validate Atmos Component\nDESCRIPTION: Validates an Atmos component against a specified stack and schema, with options for JSON Schema or OPA (Rego) validation.  It supports custom schema paths, module paths for OPA, and timeout configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/components.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos validate component $component -s $stack\natmos validate component $component -s $stack --schema-type jsonschema --schema-path $component.json\natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego \natmos validate component $component -s $stack --schema-type opa --schema-path $component.rego  --module-paths catalog\natmos validate component $component -s $stack --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Compare with Git Reference (Bash)\nDESCRIPTION: This command compares the current branch with a specific Git reference, provided using the `--ref` flag, in conjunction with `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only --ref refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Minimal Filesystem Layout Example with Atmos\nDESCRIPTION: Demonstrates the minimal directory structure required for an Atmos project to function, showcasing the `stacks/` directory for stack configurations, the `components/` directory for Terraform components, and the `atmos.yaml` configuration file.  This structure provides the necessary components for managing infrastructure with Atmos, with the flexibility to expand as needed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-project.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n   │   # Centralized stacks configuration\n   ├── stacks/\n   │   ├── <stack_1>.yaml\n   │   ├── <stack_2>.yaml\n   │   └── <stack_3>.yaml\n   │  \n   │   # Centralized components configuration. Components are broken down by tool\n   ├── components/\n   │   └── terraform/   # Terraform root modules\n   │       ├── <terraform_root_module_1>/\n   │       ├── <terraform_root_module_2>/\n   │       └── <terraform_root_module_3>/\n   │\n   │   # Atmos CLI configuration\n   ├── atmos.yaml\n   │\n   │   # Atmos vendoring configuration\n   └── vendor.yaml\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration: staging.yaml\nDESCRIPTION: This YAML snippet defines environment-specific configurations for the `vpc` component in the `staging` environment. It overrides the default `ipv4_primary_cidr_block`, `max_subnet_count`, and `map_public_ip_on_launch` variables.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `ipv4_primary_cidr_block`, `max_subnet_count` and `map_public_ip_on_launch` from the defaults\n        ipv4_primary_cidr_block: 10.9.0.0/18\n        # In `staging`, use only 2 subnets\n        max_subnet_count: 2\n        # In `staging`, don't map public IPs on launch\n        map_public_ip_on_launch: false\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows (All Output)\nDESCRIPTION: Illustrates the usage of `atmos describe workflows` with the `--output all` option.  The output is a map of workflow manifest files to the maps of all workflow definitions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows -o all\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components\nDESCRIPTION: Demonstrates the command to list all available components in Atmos. This command can be used to get a quick overview of all managed components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/stacks.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\natmos list components\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Image with Bash\nDESCRIPTION: Runs a Docker container from the `cloudposse/tutorials` image, mounting the home directory and current working directory to the container. The `--rm` flag ensures the container is removed upon exit.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run our docker image\ndocker run -it \\\n          --rm \\\n          --volume \"$HOME\":/localhost \\\n          --volume \"$PWD\":/tutorials \\\n          --name sweetops-tutorials \\\n          cloudposse/tutorials:latest;\n```\n\n----------------------------------------\n\nTITLE: LogDebug Example\nDESCRIPTION: This example demonstrates how to use LogDebug to log the execution of a database query.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"Database query executed: %s\"\n```\n\n----------------------------------------\n\nTITLE: Override Configuration Schema - Global Scope - YAML\nDESCRIPTION: Defines the schema for the `overrides` section at the global scope in an Atmos stack manifest. It shows how to override environment variables, hooks, settings, variables, providers configuration for Terraform components, and the command to execute for components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/overrides.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverrides:\n  # Override the ENV variables for the components in the current stack manifest and all its imports\n  env: {}\n  # Override the hooks for the components in the current stack manifest and all its imports\n  hooks: {}\n  # Override the settings for the components in the current stack manifest and all its imports\n  settings: {}\n  # Override the variables for the components in the current stack manifest and all its imports\n  vars: {}\n  # Override the providers configuration section for the Terraform components in the current stack manifest and all its imports\n  # Note: this applies only to Terraform components in the `terraform.providers` and `component.terraform.<component>.providers` sections\n  providers: {}\n  # Override the command to execute for the components in the current stack manifest and all its imports\n  command: \"<command to execute>\"\n```\n\n----------------------------------------\n\nTITLE: Atmos Component Configuration (Deprecated Method) in YAML\nDESCRIPTION: This YAML snippet demonstrates the older method of defining a component using the `component` key in Atmos. It shows configurations in the stack catalog and global/platform stacks, highlighting the limitations of enabling spacelift workspace in the older method.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-component-migrations-in-yaml.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# stacks/catalog/vpc.yaml\ncomponents:\n  terraform:\n    vpc:\n      # This cannot be enabled here in the older method due to the global\n      # AZ fragment importation\n      settings:\n        spacelift:\n          workspace_enabled: false\n      vars:\n        enabled: true\n        # ...etc...\n\n# stacks/gbl-ue2.yaml\ncomponents:\n  terraform:\n    vpc:\n      # This is the AZ fragment importation that's imported across all stacks\n      # even stacks without a vpc.\n      availability_zones:\n        - us-east-1a\n        - us-east-1b\n        - us-east-1c\n\n# stacks/plat-ue2-dev.yaml\nimport:\n  - gbl-ue2\n  - catalog/vpc\n\ncomponents:\n  terraform:\n    vpc:\n      component: vpc\n      # This is where spacelift has to be enabled\n      settings:\n        spacelift:\n          workspace_enabled: true\n      vars:\n        name: vpc\n        # ...etc...\n\n    vpc1:\n      component: vpc\n      # This is where spacelift has to be enabled\n      settings:\n        spacelift:\n          workspace_enabled: true\n      vars:\n        name: vpc1\n        # ...etc...\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos list stacks Command\nDESCRIPTION: This console snippet shows the output of the `atmos list stacks` command. The output is a list of stack names in the infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/add-custom-commands.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nplat-gbl-dev\nplat-gbl-prod\nplat-gbl-staging\nplat-ue2-dev\nplat-ue2-prod\nplat-ue2-staging\nplat-uw2-dev\nplat-uw2-prod\nplat-uw2-staging\n```\n\n----------------------------------------\n\nTITLE: Generate Powershell Completion Script\nDESCRIPTION: Generates a Powershell completion script for the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\natmos completion powershell\n```\n\n----------------------------------------\n\nTITLE: Define DevContainer Environment (Dockerfile)\nDESCRIPTION: This Dockerfile defines the environment for the DevContainer. It installs dependencies such as curl, unzip, git, zsh, Terraform, and Atmos. It also sets Zsh as the default shell.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/devcontainers/base:ubuntu\n\n# Install dependencies\nRUN apt-get update && \\\n    apt-get install -y curl unzip git zsh && \\\n    curl -Lo /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.5.6/terraform_1.5.6_linux_amd64.zip && \\\n    unzip /tmp/terraform.zip -d /usr/local/bin/ && \\\n    rm /tmp/terraform.zip && \\\n    curl -Lo /usr/local/bin/atmos https://github.com/cloudposse/atmos/releases/latest/download/atmos-linux-amd64 && \\\n    chmod +x /usr/local/bin/atmos\n\n# Install Zsh and set as default shell\nRUN chsh -s /bin/zsh\n```\n\n----------------------------------------\n\nTITLE: Importing Defaults and Mixins in Atmos YAML\nDESCRIPTION: This YAML snippet demonstrates how to import default configurations and region mixins into an Atmos stack configuration. It uses the `import` directive to include reusable configurations, allowing for modular and maintainable stack definitions. It also shows how to override component configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `prod` by importing the `catalog/vpc/prod` manifest\n  - catalog/vpc/prod\n```\n\n----------------------------------------\n\nTITLE: Describe Dependents Output Example (JSON)\nDESCRIPTION: This is an example JSON output from the `atmos describe dependents` command.  It shows a list of two dependent components, their types (terraform), paths, and other relevant information like namespace, tenant, environment, stack, and project names. The example demonstrates how the command can be used to retrieve information about component dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"top-level-component2\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"namespace\": \"cp\",\n    \"tenant\": \"tenant1\",\n    \"environment\": \"ue2\",\n    \"stage\": \"test-1\",\n    \"stack\": \"tenant1-ue2-test-1\",\n    \"stack_slug\": \"tenant1-ue2-dev-top-level-component2\",\n    \"atlantis_project\": \"tenant1-ue2-test-1-top-level-component2\"\n  },\n  {\n    \"component\": \"top-level-component1\",\n    \"component_type\": \"terraform\",\n    \"component_path\": \"tests/fixtures/scenarios/complete/components/terraform/top-level-component1\",\n    \"namespace\": \"cp\",\n    \"tenant\": \"tenant1\",\n    \"environment\": \"ue2\",\n    \"stage\": \"dev\",\n    \"stack\": \"tenant1-ue2-dev\",\n    \"stack_slug\": \"tenant1-ue2-test-1-top-level-component1\",\n    \"spacelift_stack\": \"tenant1-ue2-dev-top-level-component1\",\n    \"atlantis_project\": \"tenant1-ue2-dev-top-level-component1\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configure VPC Defaults Component YAML\nDESCRIPTION: This YAML snippet defines the default configuration for the `vpc/defaults` Atmos component.  It sets `metadata.type` to `abstract` to prevent direct deployment and configures default variable values, which can be overridden in derived components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/brownfield.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      metadata:\n        # `metadata.type: abstract` makes the component `abstract`,\n        # explicitly prohibiting the component from being deployed.\n        # `atmos terraform apply` will fail with an error.\n        # If `metadata.type` attribute is not specified, it defaults to `real`.\n        # `real` components can be provisioned by `atmos` and CI/CD like Spacelift and Atlantis.\n        type: abstract\n      # Default variables, which will be inherited and can be overridden in the derived components\n      vars:\n        public_subnets_enabled: false\n        nat_gateway_enabled: false\n        nat_instance_enabled: false\n        max_subnet_count: 3\n        vpc_flow_logs_enabled: false\n        vpc_flow_logs_log_destination_type: s3\n        vpc_flow_logs_traffic_type: \"ALL\"\n```\n\n----------------------------------------\n\nTITLE: Spacelift Stack Configuration in Atmos (YAML)\nDESCRIPTION: This YAML snippet demonstrates the configuration of a Spacelift stack within Atmos. It includes settings such as enabling the workspace, enabling auto-deployment, defining commands to run before init, specifying the component root, enabling stack destructor, and configuring policies. The `workspace_enabled` parameter enables the stack in Spacelift, while `autodeploy` enables auto-deployment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/spacelift.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    example:\n      settings:\n        spacelift:\n          # enable the stack in Spacelift\n          workspace_enabled: true\n\n          administrative: true\n\n          # auto deploy this stack\n          autodeploy: true\n\n          # commands to run before init\n          before_init: []\n\n          # Specify which component directory to use\n          component_root: components/terraform/example\n\n          description: Example component\n\n          # whether to auto destroy resources if the stack is deleted\n          stack_destructor_enabled: false\n\n          worker_pool_name: null\n\n          # Do not add normal set of child policies to admin stacks\n          policies_enabled: []\n\n          # set explicitly below\n          administrative_trigger_policy_enabled: false\n\n          # policies to enable\n          policies_by_id_enabled:\n            - trigger-administrative-policy\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Timeout\nDESCRIPTION: This command sets a timeout for the component validation process. It requires the component name, stack name, and timeout value in seconds as input parameters. The command ensures that the validation process does not exceed the specified timeout duration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_validate_component_usage.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos validate component <component> -s <stack> --timeout 15\n```\n\n----------------------------------------\n\nTITLE: Terraform Clean Command Examples\nDESCRIPTION: Demonstrates how to clean up Terraform artifacts using the `atmos terraform clean` command, with options for specific components, stacks, and forced deletion.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/usage.mdx#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform clean\n\n# Clean a specific component\natmos terraform clean vpc\n\n# Clean a specific component in a stack\natmos terraform clean vpc --stack dev\n\n# Clean without confirmation prompt\natmos terraform clean --force\natmos terraform clean test/test-component-override-3 -s tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Helmfile Apply with Atmos CLI\nDESCRIPTION: This command applies the changes defined in the `nginx-ingress` Helmfile component to the `ue2-dev` stack. It uses the `atmos helmfile apply` command with the component name and stack name as arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/helmfile.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile apply nginx-ingress --stack=ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Clean Help\nDESCRIPTION: Displays help information for `atmos terraform clean`, used for cleaning up Terraform-related files or states.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform clean --help\n```\n\n----------------------------------------\n\nTITLE: Configure S3 Backend in _defaults.yaml (Staging Account)\nDESCRIPTION: This snippet configures the S3 backend specifically for the `staging` account in the `_defaults.yaml` manifest. It overrides the organization-level settings for the S3 bucket, DynamoDB table, and IAM role ARN to use account-specific resources. This allows for isolation and security between different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-staging-s3-bucket-name\"\n      dynamodb_table: \"your-staging-dynamodb-table-name\"\n      role_arn: \"<IAM Role with permissions to access the `staging` Terraform backend>\"\n```\n\n----------------------------------------\n\nTITLE: Configure S3 Backend in _defaults.yaml (Prod Account)\nDESCRIPTION: This snippet configures the S3 backend specifically for the `prod` account in the `_defaults.yaml` manifest. It overrides the organization-level settings for the S3 bucket, DynamoDB table, and IAM role ARN to use account-specific resources. This allows for isolation and security between different environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-terraform-backend.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nterraform:\n  backend_type: s3\n  backend:\n    s3:\n      bucket: \"your-prod-s3-bucket-name\"\n      dynamodb_table: \"your-prod-dynamodb-table-name\"\n      role_arn: \"<IAM Role with permissions to access the `prod` Terraform backend>\"\n```\n\n----------------------------------------\n\nTITLE: LogWarn Example\nDESCRIPTION: This example demonstrates how to use LogWarn to indicate a potentially harmful situation, specifically retrying a database connection.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"Retrying connection to database. Attempt 3 of 5.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Region Mixin in YAML\nDESCRIPTION: This YAML snippet defines a mixin for the `us-east-1` region. It sets the `region` variable and defines a list of `availability_zones`. This mixin can be imported into stacks deployed in the `us-east-1` region to ensure consistent settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/inheritance/mixins.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  region: us-east-1   # the canonical cloud region\n  availability_zones: # the designated availability zones to use in this region\n  - us-east-1a\n  - us-east-1b\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Configuration\nDESCRIPTION: Configures Atmos CLI by specifying base paths for Terraform components, stacks, and schemas. It also defines name patterns and include/exclude paths for stack manifest discovery.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/partial-stack-configuration.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    base_path: \"components/terraform\"\n\nstacks:\n  base_path: \"stacks\"\n  name_pattern: \"{tenant}-{environment}-{stage}\"\n  included_paths:\n    # Tell Atmos to search for the top-level stack manifests in the `orgs` folder and its sub-folders\n    - \"orgs/**/*\"\n  excluded_paths:\n    # Tell Atmos that the `defaults` folder and all sub-folders don't contain top-level stack manifests\n    - \"defaults/**/*\"\n\nschemas:\n  jsonschema:\n    base_path: \"stacks/schemas/jsonschema\"\n  opa:\n    base_path: \"stacks/schemas/opa\"\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Overriding vpc Variables for uw2 Environment (YAML)\nDESCRIPTION: This snippet overrides the default `vpc` component settings for the `uw2` (us-west-2) environment in the `stacks/catalog/vpc/uw2.yaml` file. It imports the default settings from `catalog/vpc/defaults` and then specifies the availability zones for this environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/vpc/defaults\n\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        availability_zones:\n          - us-west-2a\n          - us-west-2b\n          - us-west-2c\n```\n\n----------------------------------------\n\nTITLE: Baseline Configuration for Weather Station Component\nDESCRIPTION: This snippet shows the baseline configuration for a weather station component in Atmos, located in `stacks/catalog/station.yaml`. This configuration includes the component's metadata (component path), variables (name, region, location, language), and backend configuration.  This is the default configuration inherited by other environments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/configure-stacks.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    station:\n      metadata:\n        component: weather\n      vars:\n        name: weather\n        region: us-east-1\n        location:\n          latitude: '40.7128'\n          longitude: '-74.0060'\n        language: en-US\n      backend:\n        s3:\n          bucket: \"eg-office365-terraform-state\"\n          key_prefix: \"terraform-up-quick-start/weather\"\n```\n\n----------------------------------------\n\nTITLE: Defining VPC Defaults: defaults.yaml\nDESCRIPTION: This YAML snippet defines the default configuration for the `vpc` component in Atmos. It specifies the component's metadata, including the path to the Terraform component, and sets default values for various VPC variables such as `enabled`, `name`, `max_subnet_count`, `map_public_ip_on_launch`, `assign_generated_ipv6_cidr_block`, `nat_gateway_enabled`, and `ipv4_primary_cidr_block`.  It also sets the default values for VPC Flow Logs and NAT EIP AWS Shield protection.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      metadata:\n        # Point to the Terraform component in `components/terraform/vpc`\n        component: vpc\n      vars:\n        enabled: true\n        name: \"common\"\n        max_subnet_count: 3\n        map_public_ip_on_launch: true\n        assign_generated_ipv6_cidr_block: false\n        nat_gateway_enabled: true\n        nat_instance_enabled: false\n        vpc_flow_logs_enabled: true\n        vpc_flow_logs_traffic_type: \"ALL\"\n        vpc_flow_logs_log_destination_type: \"s3\"\n        nat_eip_aws_shield_protection_enabled: false\n        subnet_type_tag_key: \"acme/subnet/type\"\n        ipv4_primary_cidr_block: 10.9.0.0/18\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with Output Format (bash)\nDESCRIPTION: This command describes the components affected by changes and specifies the output format (JSON or YAML).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --format=json|yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing current stack name with !store using .atmos_stack\nDESCRIPTION: Demonstrates referencing the current stack name using the `.atmos_stack` template identifier within the `!store` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> {{ .atmos_stack }} <component> <key>\n```\n\n----------------------------------------\n\nTITLE: LogFatal Example\nDESCRIPTION: This example demonstrates how to use LogFatal to log a critical failure that prevents the application from continuing, specifically when a required configuration cannot be loaded.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"Critical failure: Unable to load required configuration. Exiting.\"\n```\n\n----------------------------------------\n\nTITLE: Defining EKS Cluster Configuration Template (First Pass)\nDESCRIPTION: This YAML template defines the configuration for an EKS cluster, including component metadata and variables. It uses double curly braces for template tokens, which will be processed during the first import pass.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    eks/cluster:\n      metadata:\n        component: eks/cluster\n      vars:\n        enabled: \"{{ .enabled }}\"\n        name: \"{{ .name }}\"\n        tags:\n          atmos_component: \"{{ .atmos_component }}\"\n          atmos_stack: \"{{ .atmos_stack }}\"\n          terraform_workspace: \"{{ .workspace }}\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Include Variables in Atmos Component Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to dynamically include variables in an Atmos component configuration using the `hasKey` Sprig function. The `iam_managed_policy_arns` and `iam_source_policy_documents` variables are included only if the `context` object has the corresponding fields. This ensures that only necessary variables are added, keeping configurations clean and efficient. Dependencies: Sprig functions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    eks/iam-role/{{ .app_name }}/{{ .service_environment }}:\n      metadata:\n        component: eks/iam-role\n      settings:\n        spacelift:\n          workspace_enabled: true\n      vars:\n        enabled: {{ .enabled }}\n        tags:\n          Service: {{ .app_name }}\n        service_account_name: {{ .app_name }}\n        service_account_namespace: {{ .service_account_namespace }}\n        {{ if hasKey . \"iam_managed_policy_arns\" }}\n        iam_managed_policy_arns:\n          {{ range $i, $iam_managed_policy_arn := .iam_managed_policy_arns }}\n          - '{{ $iam_managed_policy_arn }}'\n          {{ end }}\n        {{- end }}\n        {{ if hasKey . \"iam_source_policy_documents\" }}\n        iam_source_policy_documents:\n          {{ range $i, $iam_source_policy_document := .iam_source_policy_documents }}\n          - '{{ $iam_source_policy_document }}'\n          {{ end }}\n        {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Compare with Git Commit SHA (Bash)\nDESCRIPTION: This command compares the current branch with a specific Git commit SHA, provided using the `--sha` flag, along with `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\n```\n\n----------------------------------------\n\nTITLE: Region Mixin for us-west-2\nDESCRIPTION: Imports the `uw2` manifest for VPC configuration and the default VPC flow logs bucket configuration. It also sets the `region` and `environment` variables to `us-west-2` and `uw2`, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the `uw2` manifest with `vpc` configuration for `us-west-2` region\n  - catalog/vpc/uw2\n  # All accounts (stages) in `us-west-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n\nvars:\n  region: us-west-2\n  environment: uw2\n\n# Other defaults for the `us-west-2` region\n```\n\n----------------------------------------\n\nTITLE: Atmos CLI Help Example Output\nDESCRIPTION: This example showcases the expected output when the `help` command is invoked, providing a summary of available commands, options, and example usage scenarios for the Atmos CLI.  The help output provides a general overview of the CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/help.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAtmos CLI - Version 1.0.0\n\nUsage:\n    atmos <command> [options]\n\nAvailable Commands:\n    terraform    Manage Terraform workflows\n    helmfile     Manage Helmfile workflows\n    help         Show this help message\n\nOptions:\n    -v, --version    Show the Atmos version\n    -h, --help       Show help for a command\n\nExamples:\n\n- Display the current atmos version\n\n  $ atmos version\n\n- Display the help for the terraform subcommand\n\n  $ atmos terraform --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags in EKS Layer - YAML\nDESCRIPTION: This snippet configures the `eks` layer in Atmos to include 'Layer' and 'Team' tags for Terraform components. It imports the EKS defaults catalog and sets the tag overrides. This configuration is placed in the `stacks/layers/eks.yaml` file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-overrides.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/eks/defaults\n\n# Override the configurations of all the components in this layer\n# All Terraform components in this layer will get the 'Layer' and 'Team' tags\nterraform:\n  overrides:\n    vars:\n      tags:\n        Layer: eks\n        Team: EKS cluster managers\n```\n\n----------------------------------------\n\nTITLE: Atmos List Help Command\nDESCRIPTION: Displays the help information for the `atmos list` command. This includes a list of available options, arguments, and a brief description of the command's functionality. Useful for understanding how to use the `atmos list` command effectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/usage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natmos list --help\n```\n\n----------------------------------------\n\nTITLE: Adjusting Delimiters and Using toRawJson for List/Map Outputs (YAML)\nDESCRIPTION: This YAML snippet shows how to adjust the template delimiters in `atmos.yaml` and use the `toRawJson` or `toJson` function to serialize complex types into JSON. This is an alternative method for handling list or map outputs from the `atmos.Component` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  settings:\n    # Note the deliberate use of single quotes around the braces to avoid YAML parsing issues\n    delimiters: [\"'{{\", \"}}'\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    my_lambda_component:\n      vars:\n        vpc_config:\n          security_group_ids: ['{{ (atmos.Component \"security-group/lambda\" .stack).outputs.id }}']\n          subnet_ids: '{{ toRawJson ((atmos.Component \"vpc\" .stack).outputs.private_subnet_ids) }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Defaults in `vpc.yaml` (YAML)\nDESCRIPTION: This YAML code defines the default configuration for the `vpc/defaults` Atmos component. It sets the component type to `abstract`, preventing deployment. It also defines default variables for public subnets, NAT gateway, NAT instance, max subnet count, VPC flow logs, log destination type, and traffic type.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/share-data/remote-state.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc/defaults:\n      metadata:\n        # `metadata.type: abstract` makes the component `abstract`,\n        # explicitly prohibiting the component from being deployed.\n        # `atmos terraform apply` will fail with an error.\n        # If `metadata.type` attribute is not specified, it defaults to `real`.\n        # `real` components can be provisioned by `atmos` and CI/CD like Spacelift and Atlantis.\n        type: abstract\n      # Default variables, which will be inherited and can be overridden in the derived components\n      vars:\n        public_subnets_enabled: false\n        nat_gateway_enabled: false\n        nat_instance_enabled: false\n        max_subnet_count: 3\n        vpc_flow_logs_enabled: false\n        vpc_flow_logs_log_destination_type: s3\n        vpc_flow_logs_traffic_type: \"ALL\"\n```\n\n----------------------------------------\n\nTITLE: Target Templating with Component and Version\nDESCRIPTION: This code demonstrates using both the `{{ .Component }}` and `{{ .Version }}` template parameters in the `targets` attribute to create versioned component directories. This is useful for managing different versions of the same component.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  - \"components/terraform/{{ .Component }}/{{ .Version }}\"\n```\n\n----------------------------------------\n\nTITLE: List all component settings using atmos\nDESCRIPTION: This command lists all component settings across all available stacks. It provides a table view comparing settings across different environments, which is useful for verifying configurations and understanding configuration patterns.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-settings.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos list settings\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflows Map Output (YAML)\nDESCRIPTION: Presents an example of the YAML output for `atmos describe workflows` when using the `--output map` option.  The output is a map of workflow manifest filenames to lists of workflows within each file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncompliance.yaml:\n  - deploy/aws-config/global-collector\n  - deploy/aws-config/superadmin\n  - destroy/aws-config/global-collector\n  - destroy/aws-config/superadmin\ndatadog.yaml:\n  - deploy/datadog-integration\nhelpers.yaml:\n  - save/docker-config-json\nnetworking.yaml:\n  - apply-all-components\n  - plan-all-vpc\n  - plan-all-vpc-flow-logs\n```\n\n----------------------------------------\n\nTITLE: Running EditorConfig Validation with Atmos\nDESCRIPTION: This command validates all files in the current project using the rules defined in the project's `.editorconfig` file. It checks for formatting inconsistencies and reports any violations of the defined styles.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/editorconfig.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Validate all files in the current project using EditorConfig\natmos validate editorconfig\n```\n\n----------------------------------------\n\nTITLE: Importing Notifications Defaults in Layer\nDESCRIPTION: This YAML snippet demonstrates importing `ses` and `sns-topic` component defaults into the `notifications.yaml` layer manifest. This configuration sets up the notification layer to use default settings for SES and SNS topics, simplifying notification management.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/layered-stack-configuration.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Import the related component manifests into this layer manifest\n  - catalog/ses/defaults\n  - catalog/sns-topic/defaults\n  # Import other Notification components\n```\n\n----------------------------------------\n\nTITLE: Executing Helmfile Commands\nDESCRIPTION: This command enables execution of arbitrary `helmfile` commands through the Atmos CLI, facilitating Helm chart deployments and management.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\natmos helmfile\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Commands with Help Flag\nDESCRIPTION: This snippet demonstrates how to use the `--help` flag with specific Atmos commands to get help for those commands. It shows examples for `atlantis`, `aws`, `completion`, `describe`, `helmfile`, `terraform`, `validate`, `vendor`, and `workflow` commands.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/help.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos help               # Starts an interactive help UI in the terminal\natmos --help             # Shows help for all Atmos CLI commands\natmos -h                 # Shows help for all Atmos CLI commands\natmos atlantis --help    # Executes 'atlantis' commands\natmos aws --help         # Executes 'aws' commands\natmos completion --help  # Executes 'completion' commands\natmos describe --help    # Executes 'describe' commands\natmos helmfile --help    # Executes 'helmfile' commands\natmos terraform --help   # Executes 'terraform' commands\natmos validate --help    # Executes 'validate' commands\natmos vendor --help      # Executes 'vendor' commands\natmos workflow --help    # Executes 'workflow' commands\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmos Manifest Validation Schema\nDESCRIPTION: This snippet configures the JSON schema to validate Atmos manifests.  The `manifest` specifies the path to the schema file.  This path can be configured using the `ATMOS_SCHEMAS_ATMOS_MANIFEST` environment variable or the `--schemas-atmos-manifest` command-line argument. The path is relative to the `base_path` setting in `atmos.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/configure-cli.mdx#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nschemas:\n  atmos:\n    manifest: \"stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Multiple AWS Provider Configurations with Aliases in Atmos YAML\nDESCRIPTION: This code snippet demonstrates how to define multiple AWS provider configurations with aliases in an Atmos stack manifest using YAML. This enables the use of multiple AWS accounts or regions within the same Terraform configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      providers:\n        aws:\n          - region: us-west-2\n            assume_role:\n              role_arn: \"role-1\"\n          - region: us-west-2\n            alias: \"account-2\"\n            assume_role:\n              role_arn: \"role-2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Base Path in Atmos\nDESCRIPTION: This YAML snippet defines the base path for Atmos workflows. The `base_path` setting specifies the directory where workflow definitions are located. It supports both absolute and relative paths. Requires the Atmos CLI to resolve the workflows in specified path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  # Can also be set using 'ATMOS_WORKFLOWS_BASE_PATH' ENV var, or '--workflows-dir' command-line argument\n  # Supports both absolute and relative paths\n  base_path: \"stacks/workflows\"\n```\n\n----------------------------------------\n\nTITLE: EditorConfig File Example\nDESCRIPTION: This example shows a `.editorconfig` file that defines coding styles for a project, including indentation, line endings, character encoding, and whitespace handling.  It uses the ini format to set configuration options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/validate/editorconfig.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# EditorConfig is awesome: https://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Command with HTTP Backend\nDESCRIPTION: This shell command executes the `terraform apply` command for the `vpc` component within the `ue2-dev` stack using Atmos. When Atmos detects that you're using an HTTP backend, it automatically disables workspaces for the affected components, regardless of other configuration settings.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram: Infrastructure Components of a Typical Website\nDESCRIPTION: This Mermaid diagram visualizes the infrastructure components of a typical website, including a network, cluster, applications, database, cache, and object storage. It illustrates the relationships between these components, showing how they interact within the overall architecture.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/mindset.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Infrastructure Components of a Typical Website\n---\n\ngraph TD\n\tsubgraph Network\n\t\tstyle Network fill:none\n\t\tsubgraph Cluster\n\t\t\tstyle Cluster fill:#ffffff15\n\t\t\tApp1(Application 1)\n\t\t\tApp2(Application 2)\n\t\tend\n\t\tLB[[Load Balancer]]\n\t\tDB[(Database)]\n\t\tCache[(Cache)]\n\t\tObjectStorage[(Object Storage)]\n\tend\n\tLB --> App1\n\tLB --> App2\n\tApp1 --> DB\n\tApp1 --> Cache\n\tApp2 --> ObjectStorage\n```\n\n----------------------------------------\n\nTITLE: Atmos Workflow with Stack Override\nDESCRIPTION: This snippet demonstrates executing an Atmos workflow with a stack override.  This allows you to execute the workflow using a specific stack configuration, overriding the default or configured stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_workflow_usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file> --stack <stack>\n```\n\n----------------------------------------\n\nTITLE: List Workflows with Atmos\nDESCRIPTION: Lists available workflows using the Atmos CLI.  Requires Atmos CLI and configured workflows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows\n```\n\n----------------------------------------\n\nTITLE: Generate Planfile with Format Option\nDESCRIPTION: Examples showcasing the usage of the `--format` flag to specify the output format of the generated planfile. The format can be either `json` or `yaml`. The default format is `json` if the flag is not provided.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack> --format=json\natmos terraform generate planfile <component> -s <stack> --format=yaml\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Provider Override JSON\nDESCRIPTION: This code snippet displays the generated `providers_override.tf.json` file that Atmos creates based on the provider configurations in the stack manifests. It shows how the provider configuration is structured in JSON format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/providers.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"provider\": {\n      \"aws\": {\n        \"assume_role\": {\n          \"role_arn\": \"IAM Role ARN for VPC\"\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spacelift Workspace Enabled Configuration (YAML)\nDESCRIPTION: This YAML configures the `workspace_enabled` flag for a Spacelift workspace. It enables the Spacelift integration for the specified Atmos component. The `settings.spacelift.workspace_enabled` flag must be set to `true` for the Spacelift admin stack to be included when using the `--include-spacelift-admin-stacks=true` flag with `atmos describe affected`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    infrastructure-tenant1:\n      metadata:\n        component: spacelift\n        inherits:\n          - spacelift-defaults\n      settings:\n        spacelift:\n          workspace_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Atmos List Values with Limited Columns\nDESCRIPTION: Limits the number of columns displayed in the output to 5 using the `--max-columns` flag. This is useful when the data is too wide for the terminal.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-values.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos list values vpc --max-columns 5\n```\n\n----------------------------------------\n\nTITLE: Using Format Function in atmos.Store (YAML)\nDESCRIPTION: Demonstrates how to use the `printf` template function to construct stack names dynamically within the `atmos.Store` function. This is helpful for overriding identifiers in the stack name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{ atmos.Store \"<store_name>\" (printf \"%s-%s-%s\" .vars.tenant .vars.environment .vars.stage) \"<component>\" \"<key>\" }}\n\n{{ atmos.Store \"<store_name>\" (printf \"plat-%s-prod\" .vars.environment) \"<component>\" \"<key>\" }}\n\n{{ atmos.Store \"<store_name>\" (printf \"%s-%s-%s\" .settings.context.tenant .settings.context.region .settings.context.account) \"<component>\" \"<key>\" }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ atmos.Store \"prod/ssm\" (printf \"net-%s-%s\" .vars.environment .vars.stage) \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: Using the --help Flag\nDESCRIPTION: This example demonstrates how to use the `--help` flag with a specific command (in this case, 'terraform') to display help information for that command. This allows users to get detailed information about a particular command's usage and options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/help.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform --help\n```\n\n----------------------------------------\n\nTITLE: Describe Component: Format Output (YAML/JSON)\nDESCRIPTION: This command describes a component within a specified stack and formats the output as either YAML or JSON.  The `<component>` and `<stack>` parameters are required. The `--format` flag determines the output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_component_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe component <component> -s <stack> --format=yaml|json\n```\n\n----------------------------------------\n\nTITLE: Validate Atmos Stacks with Schema\nDESCRIPTION: Validates Atmos stacks using the provided atmos manifest schema. This command checks if the stack configurations adhere to the structure defined in the schema. The `--schemas-atmos-manifest` argument specifies the path to the JSON schema file.  Requires Atmos CLI to be installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_validate_stacks_usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos validate stacks --schemas-atmos-manifest <path-to-atmos-json-schema>\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform .tfvars Files with Atmos\nDESCRIPTION: This snippet describes how Atmos generates .tfvars files from deep-merged configurations, and how those files can then be used with standard Terraform commands. This allows for seamless integration with vanilla Terraform and GitOps workflows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/introduction/faq.mdx#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nAtmos can [generate `.tfvar` files](/cli/commands/terraform/generate-varfiles) from the deep-merged configurations for any given stack, or all stacks at once.\n- Commit those `.tfvar`, then run Terraform as normal, passing the appropriate `.tfvar` file to the `terraform` command with the `-vars` argument.\n```\n\n----------------------------------------\n\nTITLE: Importing files with explicit extensions in YAML\nDESCRIPTION: This YAML snippet shows how to explicitly specify file extensions when importing stack configurations. While possible, it is not the recommended approach. Atmos automatically appends `.yaml` if no extension is provided.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - catalog/file1.yml   # Expicitly load a file with a .yml extension\n  - catalog/file2.yaml  # Expicitly load a file with a .yaml extension\n  - catalog/file3.YAML  # Expicitly load a file with a .YAML extension\n```\n\n----------------------------------------\n\nTITLE: Filter Atmos workflows by file\nDESCRIPTION: This command filters and lists Atmos workflows based on the specified file name. Only workflows defined in the provided file will be displayed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-workflows.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos list workflows -f networking.yaml\n```\n\n----------------------------------------\n\nTITLE: Organization Configuration: org1.yaml\nDESCRIPTION: This YAML snippet defines organization-specific configurations for the `vpc` component in `org1`. It overrides the default `subnet_type_tag_key` variable.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-with-mixins.mdx#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      vars:\n        # Override `subnet_type_tag_key` from the defaults\n        subnet_type_tag_key: \"org1/subnet/type\"\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with no options\nDESCRIPTION: This example shows how to run the basic command to generate `atlantis.yaml` configuration using default configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config\n```\n\n----------------------------------------\n\nTITLE: Run Atmos Docker Image\nDESCRIPTION: This command builds and runs the Atmos Docker image using the `make` utility. This step is essential for initializing the Atmos environment and preparing it for further operations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/examples/quick-start-advanced/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflow Interactively (Shell)\nDESCRIPTION: This command starts the Atmos workflow in interactive UI mode, allowing users to step through the workflow and provide input as needed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/workflow.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow\n```\n\n----------------------------------------\n\nTITLE: Output component variables in different formats with Atmos CLI\nDESCRIPTION: These commands list variables for a component in various formats such as JSON, YAML, CSV, and TSV. Replace `<component>` with the component name to list the component's variables in the desired output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --format json\n$ atmos list vars <component> --format yaml\n$ atmos list vars <component> --format csv\n$ atmos list vars <component> --format tsv\n```\n\n----------------------------------------\n\nTITLE: Generating Atlantis Repo Config with Atmos CLI\nDESCRIPTION: These commands use the Atmos CLI to generate Terraform variable files and the Atlantis repo configuration file. The variable files are generated based on a specified template, and the Atlantis configuration is created using config and project templates.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/pkg/atlantis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform generate varfiles --file-template=varfiles/{tenant}-{environment}-{stage}-{component}.tfvars.json\natmos atlantis generate repo-config --config-template config-1 --project-template project-1\n```\n\n----------------------------------------\n\nTITLE: YAML Environment Variables Configuration\nDESCRIPTION: Shows how to configure environment variables that are passed to data sources, which is useful when executing data sources that need to authenticate to cloud APIs.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  templates:\n    settings:\n      # Environment variables passed to `datasources` when evaluating templates\n      # https://docs.gomplate.ca/datasources/#using-awssmp-datasources\n      # https://docs.gomplate.ca/functions/aws/#configuring-aws\n      # https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html\n      env:\n        AWS_PROFILE: \"<AWS profile>\"\n        AWS_TIMEOUT: 2000\n```\n\n----------------------------------------\n\nTITLE: Example: Compare two plan files\nDESCRIPTION: Compares two existing Terraform plan files, `orig.plan` and `new.plan`, for the `myapp` component in the `dev` stack. The `--orig` and `--new` flags specify the paths to the original and new plan files, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-plan-diff.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform plan-diff myapp -s dev --orig=orig.plan --new=new.plan\n```\n\n----------------------------------------\n\nTITLE: Usage: atmos.GomplateDatasource in YAML\nDESCRIPTION: Shows the basic syntax for using the `atmos.GomplateDatasource` template function in a YAML configuration file.  It demonstrates how to specify the datasource alias and access an attribute from the datasource.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.GomplateDatasource.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  {{ (atmos.GomplateDatasource \"<alias>\").<attribute> }}\n```\n\n----------------------------------------\n\nTITLE: Generate Atlantis Repo Config using CLI\nDESCRIPTION: This shell command demonstrates how to generate the Atlantis repo configuration file using the `atmos atlantis generate repo-config` command. It utilizes the `--config-template` and `--project-template` flags to specify the templates defined in the `atmos.yaml` file. The output will be either printed to the standard output or to the file specified in the `path` config. For example, using `--output-path=/dev/stdout` on Linux/macOS.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/integrations/atlantis.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --config-template config-1 --project-template project-1\n```\n\n----------------------------------------\n\nTITLE: Atmos Manifest Validation Command\nDESCRIPTION: These commands demonstrate how to validate Atmos stacks using the `atmos validate stacks` command, specifying the schema path via environment variable and command-line argument.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/schemas.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nATMOS_SCHEMAS_ATMOS_MANIFEST=stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json atmos validate stacks\natmos validate stacks --schemas-atmos-manifest stacks/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Component Output\nDESCRIPTION: This terminal output shows the result of running the `atmos describe component eks-cluster -s <stack>` command. It displays the resolved variables for the `eks-cluster` component, populated with values from the `static-backend` component's static configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Component.mdx#_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\nvars:\n  region: us-west-2\n  cluster_name: production-cluster\n  vpc_cidr: 10.0.0.0/16\n  db_type: postgresql\n  db_storage: 100\n  allowed_ips:\n    - 192.168.1.0/24\n    - 10.1.0.0/16\n  tags:\n    Environment: production\n    Owner: infra-team\n\n```\n\n----------------------------------------\n\nTITLE: Include and Filter with YQ (Map Key)\nDESCRIPTION: Demonstrates using a YQ expression to retrieve a specific value (value of `username` key in `config_map`) from a file included via `!include`. The included file must contain a map called `config_map` with a key `username`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nusername: !include <file-path> .config_map.username\n```\n\n----------------------------------------\n\nTITLE: Configure Region Mixin in YAML\nDESCRIPTION: This YAML configuration defines the mixin for the `us-west-2` region.  It imports default configurations for `vpc-flow-logs-bucket` and `vpc` components. It also sets variables for the region and environment.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # All accounts (stages) in `us-west-2` region will have the `vpc-flow-logs-bucket` component\n  - catalog/vpc-flow-logs-bucket/defaults\n  # All accounts (stages) in `us-east-2` region will have the `vpc` component\n  - catalog/vpc/defaults\n\nvars:\n  region: us-west-2\n  environment: uw2\n\n# Other defaults for the `us-west-2` region\n```\n\n----------------------------------------\n\nTITLE: YAML Headers Configuration\nDESCRIPTION: Illustrates how to configure HTTP headers for the `http` data source, specifically setting the `accept` header to `application/json`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/datasources.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  accept:\n    - \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Output (Bash)\nDESCRIPTION: This command enables verbose output during the cloning and checkout process of the Git repository, using the `--verbose` flag in combination with `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$  atmos atlantis generate repo-config --affected-only --verbose\n```\n\n----------------------------------------\n\nTITLE: Override OpenTofu Command for a Specific Component\nDESCRIPTION: This YAML snippet shows how to override the OpenTofu command for a specific component within a stack configuration. This allows projects to use different OpenTofu versions or even HashiCorp Terraform for particular components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/configuration/opentofu.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc:\n      command: \"/usr/local/bin/tofu-1.7\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration to Disable Terraform Workspaces\nDESCRIPTION: This YAML snippet shows how to disable Terraform workspaces entirely by setting `components.terraform.workspaces_enabled` to `false` in the `atmos.yaml` file. This will cause Atmos to use the default workspace for all Terraform operations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    # Disable workspaces for all Terraform components\n    workspaces_enabled: false\n    # Other Terraform configuration...\n```\n\n----------------------------------------\n\nTITLE: Include YAML File Relative to base_path in Atmos\nDESCRIPTION: Demonstrates including a local YAML file using a path relative to the `base_path` configured in the `atmos.yaml` CLI config file. The contents of `stacks/catalog/vpc/vars.yaml` will be injected into the `vars` section of the manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvars: !include stacks/catalog/vpc/vars.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing an Atmos Workflow\nDESCRIPTION: This shell script executes a configured Atmos workflow to provision all components in all stacks. It uses the `atmos workflow` command with the `apply-all-components` workflow and the `-f` flag to specify the workflow manifest file (`networking`).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/provision.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Execute the workflow `apply-all-components` from the workflow manifest `networking`\natmos workflow apply-all-components -f networking\n```\n\n----------------------------------------\n\nTITLE: Retrieving a map value from Terraform output using YQ in YAML\nDESCRIPTION: Demonstrates retrieving a value from a map output using a YQ expression with `!terraform.output`. This assumes that the `config_map` output of the `config` component is a map and retrieves the value associated with the `username` key.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/terraform.output.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nusername: !terraform.output config .config_map.username\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Stack Name in atmos.Store (YAML)\nDESCRIPTION: Demonstrates how to use a hardcoded stack name with the `atmos.Store` function. This is useful for retrieving values from components in other well-known stacks.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/functions/atmos.Store.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    tgw:\n      vars:\n        vpc_id: '{{ atmos.Store \"prod/ssm\" \"plat-ue2-prod\" \"vpc\" \"vpc_id\" }}'\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Component\nDESCRIPTION: This command applies changes to a specified Terraform component using Atmos. The component and stack names must be provided. Ensure that the Atmos CLI is installed and configured correctly to interact with your Terraform infrastructure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_apply_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform apply <component-name> -s <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Top-Level Stack for prod/us-east-2\nDESCRIPTION: This YAML configuration imports the defaults, region mixin for `us-east-2`, and overrides the VPC configuration by importing the `prod` manifest.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/prod/_defaults\n  - mixins/region/us-east-2\n  # Override the `vpc` component configuration for `prod` by importing the `catalog/vpc/prod` manifest\n  - catalog/vpc/prod\n```\n\n----------------------------------------\n\nTITLE: Filter component variables by stack pattern with Atmos CLI\nDESCRIPTION: This command filters the listed variables by a specified stack pattern using glob matching. Replace `<component>` with the actual component name and `'*-dev-*'` with the desired stack pattern.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --stack '*-dev-*'\n```\n\n----------------------------------------\n\nTITLE: Configure Atmos workflows base path in atmos.yaml\nDESCRIPTION: This snippet shows how to configure the base path for Atmos workflows in the `atmos.yaml` configuration file. This setting tells Atmos where to find the workflow definition files, either using an absolute or relative path.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/create-workflows.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  # Can also be set using 'ATMOS_WORKFLOWS_BASE_PATH' ENV var, or '--workflows-dir' command-line arguments\n  # Supports both absolute and relative paths\n  base_path: \"stacks/workflows\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Missing Stack Name Pattern Error\nDESCRIPTION: This snippet shows the error message when the `name_pattern` is missing in `atmos.yml` or the `ATMOS_STACKS_NAME_PATTERN` environment variable is not set. It indicates that Atmos cannot resolve stack names without a defined pattern.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/troubleshoot/errors.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nstack name pattern must be provided in 'stacks.name_pattern' config or 'ATMOS_STACKS_NAME_PATTERN' ENV variable\n```\n\n----------------------------------------\n\nTITLE: Validate Stacks with Atmos\nDESCRIPTION: Validates Atmos stacks using the Atmos CLI.  Requires Atmos CLI and valid stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos validate stacks\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows with Examples\nDESCRIPTION: Shows different ways to use the `atmos describe workflows` command with various options for output format and filtering. These commands provide ways to tailor the output using formats like `map`, `list`, `all`, `json`, and `yaml` and the ability to query using `yq`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-workflows.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos describe workflows\natmos describe workflows --output map\natmos describe workflows -o list\natmos describe workflows -o all\natmos describe workflows -o list --format json\natmos describe workflows -o all -f yaml\natmos describe workflows -f json\natmos describe workflows --query <yq-expression>\n```\n\n----------------------------------------\n\nTITLE: Terraform Workspace with YAML Function Processing Disabled\nDESCRIPTION: Executes the `atmos terraform workspace` command with the `--process-functions` flag set to `false`, disabling YAML functions processing in Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-workspace.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform workspace <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with SSH Key (bash)\nDESCRIPTION: This command describes the components affected by changes and specifies the path to a PEM-encoded private key for cloning private repositories using SSH.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --ssh-key <path_to_ssh_key>\n```\n\n----------------------------------------\n\nTITLE: Planning a Terraform Component with Atmos using Bash\nDESCRIPTION: Executes a Terraform plan for a specified component using Atmos. The `--stack` parameter specifies the stack configuration to use. This command initializes Terraform, then generates the plan.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\natmos terraform plan fetch-location --stack=example\n```\n\n----------------------------------------\n\nTITLE: Executing an external shell script with !exec in YAML\nDESCRIPTION: Executes the `get-data.sh` shell script and assigns the result to the `var2` variable.  The script is assumed to be executable and available in the system's PATH or a relative/absolute path provided.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/exec.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvar2: !exec get-data.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorials Repository in Bash\nDESCRIPTION: Clones the cloudposse/tutorials repository and changes the directory into it. This assumes Git is installed and configured.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/first-aws-environment.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:cloudposse/tutorials.git\n\ncd tutorials\n```\n\n----------------------------------------\n\nTITLE: Configure Staging Account Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'staging' account. It imports the 'plat' OU defaults and the 'staging' stage mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/plat/_defaults\n  - mixins/stage/staging\n```\n\n----------------------------------------\n\nTITLE: Vendor Schema YAML\nDESCRIPTION: Defines the schema for `vendor.yaml`, an Atmos vendoring manifest. It specifies imports, sources (component, source URL, version, targets, included paths, and tags).\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/vendoring.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: atmos/v1\nkind: AtmosVendorConfig\nmetadata:\n  name: example-vendor-config\n  description: Atmos vendoring manifest\nspec:\n  imports:\n    - \"vendor/something\"\n  sources:\n    - component: \"vpc\"\n      source: \"oci://public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:{{.Version}}\"\n      version: \"latest\"\n      targets: [\"components/terraform/infra/vpc/{{.Version}}\"]\n      included_paths: [\"**/*.tf\"]\n      tags:\n        - test\n        - networking\n```\n\n----------------------------------------\n\nTITLE: Validating Component Configuration with OPA Policies\nDESCRIPTION: This command validates a component's configuration using OPA (Open Policy Agent) policies. It takes the component name, stack name, schema path, schema type (opa), and module paths (catalog) as parameters. The command checks the component's configuration against the defined OPA policies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_validate_component_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos validate component <component> -s <stack> --schema-path <schema_path> --schema-type opa --module-paths catalog\n```\n\n----------------------------------------\n\nTITLE: Force Atmos Version Check\nDESCRIPTION: This command forces Atmos to check for a new version, overriding the configured update check frequency. This is useful for immediately checking for updates regardless of the settings in `atmos.yaml`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/version.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos version --check\n```\n\n----------------------------------------\n\nTITLE: Atmos Vendor Pull Commands\nDESCRIPTION: Illustrates various `atmos vendor pull` commands used to fetch vendored components. Options include pulling everything, specific components, or components based on tags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/vendoring.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\natmos vendor pull \natmos vendor pull --everything\natmos vendor pull --component vpc-mixin-1\natmos vendor pull -c vpc-mixin-2\natmos vendor pull -c vpc-mixin-3\natmos vendor pull -c vpc-mixin-4\natmos vendor pull --tags test\natmos vendor pull --tags networking,storage\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Deploy from Plan Flag\nDESCRIPTION: Specifies that the deployment should use a previously generated planfile. The planfile name is in the format supported by Atmos and is saved to the component's folder.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-deploy.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform deploy <component> -s <stack> --from-plan\n```\n\n----------------------------------------\n\nTITLE: Generate Terraform Backend - Skip Functions\nDESCRIPTION: This command skips processing specific Atmos YAML functions in Atmos stacks manifests when executing terraform commands. Multiple `--skip` flags or a comma-separated list can be used to skip multiple functions.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-backend.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack> --skip=eval --skip=include\n```\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate backend <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: RDS Cluster Ingress Restrictions YAML\nDESCRIPTION: This snippet shows how to use `!template` to apply ingress restrictions to an RDS cluster, referencing the global `allowed_ingress_cidrs` setting.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# RDS cluster\n# Allow ingress only from the allowed CIDR blocks\ncidr_blocks: !template '{{ toJson .settings.allowed_ingress_cidrs }}'\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository with Bash\nDESCRIPTION: Clones the `cloudposse/tutorials` repository from GitHub to the local machine using `git clone` and navigates into the cloned directory with `cd`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:cloudposse/tutorials.git\n\ncd tutorials\n```\n\n----------------------------------------\n\nTITLE: Running atmos describe affected command\nDESCRIPTION: This command shows a list of the affected Atmos components and stacks given two Git commits. Run `atmos describe affected --help` to see all the available options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-affected.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos describe affected [options]\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows with Format Option\nDESCRIPTION: This command retrieves workflow information and formats the output as either YAML or JSON. The `--format` flag specifies the desired output format.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_workflows_usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos describe workflows --format=<yaml|json>\n```\n\n----------------------------------------\n\nTITLE: Writing Atmos Stack Description to File (Shell)\nDESCRIPTION: This command writes the description of all stacks to a YAML file named `stacks.yaml`. The `--file` flag specifies the output file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --file=stacks.yaml\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with SSH key and password for private repos\nDESCRIPTION: Specifies an SSH key and password to authenticate and clone the git repository when the key is password protected.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --ssh-key <path_to_ssh_key> --ssh-key-password <password>\n```\n\n----------------------------------------\n\nTITLE: Managing Terraform Workspace\nDESCRIPTION: This command calculates the Terraform workspace for an Atmos component, initializes Terraform with `-reconfigure`, and then selects the workspace using `terraform workspace select`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\natmos terraform workspace\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Workflows\nDESCRIPTION: This command retrieves and displays information about available Atmos workflows. It shows the default behavior of the command without any specific formatting or output options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_workflows_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos describe workflows\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Stacks JSON Output with Filters\nDESCRIPTION: This JSON code snippet demonstrates the output of the `atmos describe stacks` command with the `--components vpc` and `--sections metadata` flags, formatted as JSON. It shows the 'metadata' section for the 'vpc' component in multiple stacks ('plat-ue2-dev', 'plat-ue2-prod', 'plat-ue2-staging', 'plat-uw2-dev', 'plat-uw2-prod', 'plat-uw2-staging'). This example illustrates how to filter the output to focus on specific components and sections.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/describe/stacks.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plat-ue2-dev\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  },\n  \"plat-ue2-prod\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  },\n  \"plat-ue2-staging\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  },\n  \"plat-uw2-dev\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  },\n  \"plat-uw2-prod\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  },\n  \"plat-uw2-staging\": {\n    \"components\": {\n      \"terraform\": {\n        \"vpc\": {\n          \"metadata\": {\n            \"component\": \"vpc\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Include and Filter with YQ (List Index)\nDESCRIPTION: Demonstrates using a YQ expression to retrieve a specific item (first item in a list) from a file included via `!include`.  The `private_subnet_ids` must be a list in the included file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsubnet_id1: !include <file-path> .private_subnet_ids[0]\n```\n\n----------------------------------------\n\nTITLE: Describe Component: Write to File\nDESCRIPTION: This command describes a component within a specified stack and writes the output to a specified file.  The `<component>` and `<stack>` parameters are required. The `--file` flag specifies the file path to write the output to.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_component_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe component <component> -s <stack> --file component.yaml\n```\n\n----------------------------------------\n\nTITLE: Configure Top-Level Stack in YAML (org1/plat/dev/us-west-2)\nDESCRIPTION: This YAML configuration defines a top-level Atmos stack for the `org1` organization, `plat` tenant, `dev` account, and `us-west-2` region. It imports the account defaults and the region mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/organizational-structure-configuration.mdx#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/org1/plat/dev/_defaults\n  - mixins/region/us-west-2\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Commands\nDESCRIPTION: These shell commands demonstrate how to apply the dynamically generated Atmos components using the `atmos terraform apply` command, specifying the component name and the stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/design-patterns/component-catalog-template.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply eks/iam-role/admin-ui --stack plat-ue2-prod\natmos terraform apply eks/iam-role/auth --stack plat-ue2-prod\natmos terraform apply eks/iam-role/payment-processing --stack plat-ue2-prod\n```\n\n----------------------------------------\n\nTITLE: Atmos Terraform Apply Commands with Workspace Overrides\nDESCRIPTION: These shell commands execute `terraform apply` for components with overridden Terraform workspaces. Atmos will use the specified workspaces (`vpc-1-workspace-override` and `ue2-dev-vpc-2-workspace-override`) instead of the default naming scheme.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/components/terraform/workspaces.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform apply vpc/1 -s ue2-dev\natmos terraform apply vpc/2 -s ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Configuration\nDESCRIPTION: This command shows the final, deep-merged CLI configuration from all `atmos.yaml` files, providing a comprehensive view of the overall configuration.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe config\n```\n\n----------------------------------------\n\nTITLE: Describing Dependents of an Atmos Component\nDESCRIPTION: This command lists all Atmos components within Atmos stacks that depend on a specified Atmos component, useful for understanding dependencies.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe dependents\n```\n\n----------------------------------------\n\nTITLE: List all variables for a component with Atmos CLI\nDESCRIPTION: This command lists all variables defined for a specific component using the Atmos CLI. Replace `<component>` with the actual component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component>\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components and Cloning Target Ref (bash)\nDESCRIPTION: This command describes the affected components and clones the target reference to which the current branch is compared.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --clone-target-ref=true\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Help\nDESCRIPTION: Displays the help information for the `atmos describe` subcommand, which is used for describing components, stacks, and other resources.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\natmos describe --help\n```\n\n----------------------------------------\n\nTITLE: Include abstract components in Atmos listing\nDESCRIPTION: This command includes abstract components in the list of values. The '--abstract' flag ensures that values from abstract components are also displayed.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --abstract\n```\n\n----------------------------------------\n\nTITLE: Disable Go template processing when listing vars with Atmos CLI\nDESCRIPTION: This command disables Go template processing when listing variables for a component. Replace `<component>` with the component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Validating an Atmos Component\nDESCRIPTION: This command validates a specified Atmos component within a stack using JSON Schema and OPA policies, ensuring configuration correctness.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\natmos validate component\n```\n\n----------------------------------------\n\nTITLE: Atmos Stack Imports Schema\nDESCRIPTION: Shows the schema for Atmos stack imports, including path, context, and skip flags.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/common.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nimport:\n-\tcatalog/something\n-\tpath: \"catalog/something/else\"\n\t\tcontext:\n\t\t\tkey: value\n\t\tskip_templates_processing: false\n\t\tignore_missing_template_values: false\n\t\tskip_if_missing: false\n```\n\n----------------------------------------\n\nTITLE: Include abstract components when listing vars with Atmos CLI\nDESCRIPTION: This command includes abstract components when listing variables. Replace `<component>` with the actual component name.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_vars_usage.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list vars <component> --abstract\n```\n\n----------------------------------------\n\nTITLE: Disable YAML Functions Processing in Atmos\nDESCRIPTION: This command disables YAML functions processing during metadata retrieval. The `--process-functions=false` flag prevents the evaluation of YAML functions within the metadata.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Make Post-Create Script Executable (Bash)\nDESCRIPTION: This bash command makes the post-create script executable. This is required for the script to be run after the DevContainer is created.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nchmod +x .devcontainer/post-create.sh\n```\n\n----------------------------------------\n\nTITLE: Display Atmos AWS EKS Help\nDESCRIPTION: Displays help information for `atmos aws eks`, which is used to manage AWS Elastic Kubernetes Service (EKS) clusters.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos aws eks --help\n```\n\n----------------------------------------\n\nTITLE: Pulling Sources and Mixins for Components\nDESCRIPTION: This command pulls sources and mixins from remote repositories for Terraform and Helmfile components and other artifacts.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\natmos vendor pull \n```\n\n----------------------------------------\n\nTITLE: Define DevContainer Configuration (JSON)\nDESCRIPTION: This JSON snippet defines the configuration for a DevContainer for Atmos development. It specifies the container's name, forwarded ports, security settings, build configuration, resource requirements, post-creation command, features, workspace folder, and VS Code customizations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"Atmos DevContainer\",\n    \"forwardPorts\": [80, 443],\n    \"portsAttributes\": {\n        \"80\": { \"label\": \"Ingress\" },\n        \"443\": { \"label\": \"Ingress (TLS)\" }\n    },\n    \"security.workspace.trust.emptyWindow\": true,\n    \"security.workspace.trust.untrustedFiles\": \"prompt\",\n    \"security.workspace.trust.domain\": {\n        \"*.github.com\": true,\n        \"*.app.github.dev\": true,\n        \"localhost\": true\n    },\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\",\n        \"context\": \".\"\n    },\n    \"hostRequirements\": {\n        \"cpus\": 4,\n        \"memory\": \"8gb\",\n        \"storage\": \"16gb\"\n    },\n    \"runArgs\": [\"-v\", \"/var/run/docker.sock:/var/run/docker.sock\"],\n    \"postCreateCommand\": \"/workspace/.devcontainer/post-create.sh\",\n    \"features\": {\n        \"ghcr.io/devcontainers/features/docker-outside-of-docker\": {}\n    },\n    \"workspaceFolder\": \"/workspace\",\n    \"workspaceMount\": \"source=${localWorkspaceFolder},target=/workspace,type=bind\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"ms-azuretools.vscode-docker\",\n                \"bierner.github-markdown-preview\",\n                \"tomasdahlqvist.markdown-admonitions\",\n                \"HashiCorp.terraform\",\n                \"redhat.vscode-yaml\",\n                \"casualjim.gotemplate\",\n                \"EditorConfig.EditorConfig\"\n            ],\n            \"settings\": {\n                \"git.openRepositoryInParentFolders\": \"always\",\n                \"git.autofetch\": true,\n                \"workbench.startupEditor\": \"readme\",\n                \"yaml.schemas\": {\n                    \"https://atmos.tools/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json\": [\n                        \"**/stacks/**/*.yaml\",\n                        \"!**/stacks/workflows/**/*.yaml\",\n                        \"!**/stacks/schemas/**/*.yaml\"\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Include TFVAR File in Atmos Stack (prod)\nDESCRIPTION: Includes a `.tfvars` file for the `prod` environment into the `app` component within the `terraform` section of an Atmos stack configuration. This allows using existing Terraform variable files directly within Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    app:\n      vars: !include config/prod.tfvars\n```\n\n----------------------------------------\n\nTITLE: Execute Terraform Subcommand with Atmos\nDESCRIPTION: This command executes a specified terraform subcommand for a given component and stack using the Atmos CLI.  It requires the Atmos CLI to be installed and configured. The subcommand, component name, and stack name must be provided as arguments.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_terraform_usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos terraform [subcommand] <component-name> -s <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Apply a custom query in Atmos\nDESCRIPTION: This command applies a custom query to filter the output. The '--query' option specifies the query to apply to the component's values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --query '.vars.region'\n```\n\n----------------------------------------\n\nTITLE: Query Specific Atmos Metadata\nDESCRIPTION: This command retrieves specific metadata based on the provided query.  The `--query` flag is used to specify the field to retrieve, in this case, the 'component' field. The output will only contain the values of the 'component' field for each metadata entry.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_metadata_usage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atmos list metadata --query '.component'\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with a custom repository path\nDESCRIPTION: Specifies a custom repository path to compare against when using `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --repo-path <path_to_cloned_target_repo>\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components and Uploading (bash)\nDESCRIPTION: This command describes the components affected by changes and uploads the results to a specified HTTP endpoint. The specific endpoint is likely configured elsewhere.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --upload\n```\n\n----------------------------------------\n\nTITLE: Regenerate Snapshot for Specific Test (Shell)\nDESCRIPTION: This command regenerates the golden snapshot for a specific test case. Replace `TestCLICommands/check_atmos_--help_in_empty-dir` with the name of the test to regenerate the snapshot for that test only.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./tests -v -run 'TestCLICommands/check_atmos_--help_in_empty-dir' -timeout 2m -regenerate-snapshots\n```\n\n----------------------------------------\n\nTITLE: Display Atmos AWS Help\nDESCRIPTION: Displays the help information for the `atmos aws` subcommand, used for interacting with AWS services.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natmos aws --help\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Varfile Help\nDESCRIPTION: Displays help information for `atmos terraform generate varfile`, used to generate a Terraform variable file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfile --help\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Planfile Help\nDESCRIPTION: Displays help information for `atmos terraform generate planfile`, used to generate Terraform plan files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile --help\n```\n\n----------------------------------------\n\nTITLE: Display Atmos General Help\nDESCRIPTION: Displays the general help information for the Atmos CLI, providing a list of available commands and options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natmos --help\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with a custom ref\nDESCRIPTION: Specifies a custom git ref to compare against when using `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --ref refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: This code snippet represents the frontmatter configuration for the markdown file.  It sets the page title to an empty string, hides the table of contents, and configures the sidebar position and label. These configurations control how the page is displayed and organized within the documentation site.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/reference/slides.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: \"\"\nhide_table_of_contents: true\nsidebar_position: 2\nsidebar_label: Slides\n---\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Workflow\nDESCRIPTION: Executes an Atmos workflow specified by its name and file path.  This command is used to run a sequence of steps defined in a workflow file. The workflow name and file are required.  Optional flags like `--stack`, `--from-step`, and `--dry-run` provide additional control.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/workflow.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow <workflow_name> --file <workflow_file> [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring vpc-flow-logs-bucket component in YAML\nDESCRIPTION: This snippet demonstrates how to configure the `vpc-flow-logs-bucket` component within a stack using YAML. It sets variables for bucket name, object version expirations and storage class transitions. The component relies on an existing `aws_flow_log` resource.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/fixtures/scenarios/complete/components/terraform/infra/vpc-flow-logs-bucket/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    vpc-flow-logs-bucket:\n      vars:\n        name: \"vpc-flow-logs\"\n        noncurrent_version_expiration_days: 180\n        noncurrent_version_transition_days: 30\n        standard_transition_days: 60\n        glacier_transition_days: 180\n        expiration_days: 365\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling YAML Functions Processing (Shell)\nDESCRIPTION: This command enables or disables YAML functions processing in Atmos stack manifests. The `--process-functions` flag is set to either `true` or `false`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Execute Atmos Workflow\nDESCRIPTION: This snippet shows how to execute a specific Atmos workflow using the `atmos workflow` command. It requires specifying the workflow name and the file containing the workflow definition.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_workflow_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos workflow <workflow-name> --file <file>\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Affected Help\nDESCRIPTION: Displays help information for `atmos describe affected`, which is used to describe resources affected by changes.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\natmos describe affected --help\n```\n\n----------------------------------------\n\nTITLE: Atmos Manifest Validation Error Output\nDESCRIPTION: This snippet shows an example of the output when `atmos validate stacks` encounters validation errors in Atmos manifests, including YAML syntax errors and JSON Schema validation failures.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/schemas.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAtmos manifest JSON Schema validation error in the\nfile 'catalog/invalid-yaml-and-schema/invalid-import-5.yaml':\n{\n  \"valid\": false,\n  \"errors\": [\n    {\n      \"keywordLocation\": \"\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#\",\n      \"instanceLocation\": \"\",\n      \"error\": \"doesn't validate with tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#\"\n    },\n    {\n      \"keywordLocation\": \"/properties/import/$ref\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#/properties/import/$ref\",\n      \"instanceLocation\": \"/import\",\n      \"error\": \"doesn't validate with '/definitions/import'\"\n    },\n    {\n      \"keywordLocation\": \"/properties/import/$ref/type\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#/definitions/import/type\",\n      \"instanceLocation\": \"/import\",\n      \"error\": \"expected array, but got object\"\n    }\n  ]\n}\n\nAtmos manifest JSON Schema validation error in the\nfile 'catalog/invalid-yaml-and-schema/invalid-schema-8.yaml':\n{\n  \"valid\": false,\n  \"errors\": [\n    {\n      \"keywordLocation\": \"\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#\",\n      \"instanceLocation\": \"\",\n      \"error\": \"doesn't validate with tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#\"\n    },\n    {\n      \"keywordLocation\": \"/properties/env/$ref\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#/properties/env/$ref\",\n      \"instanceLocation\": \"/env\",\n      \"error\": \"doesn't validate with '/definitions/env'\"\n    },\n    {\n      \"keywordLocation\": \"/properties/env/$ref/type\",\n      \"absoluteKeywordLocation\": \"tests/fixtures/scenarios/complete/schemas/atmos/atmos-manifest/1.0/atmos-manifest.json#/definitions/env/type\",\n      \"instanceLocation\": \"/env\",\n      \"error\": \"expected object, but got array\"\n    }\n  ]\n}\n\nno matches found for the import 'globals/tenant1-globals-does-not-exist' in the\nfile 'catalog/invalid-yaml-and-schema/invalid-import-1.yaml'\n\ninvalid import in the file 'catalog/invalid-yaml-and-schema/invalid-import-2.yaml'\nThe file imports itself in 'catalog/invalid-yaml-and-schema/invalid-import-2'\n\ninvalid stack manifest 'catalog/invalid-yaml-and-schema/invalid-yaml-1.yaml'\nyaml: line 15: found unknown directive name\n\ninvalid stack manifest 'catalog/invalid-yaml-and-schema/invalid-yaml-3.yaml'\nyaml: line 13: did not find expected key\n\ninvalid stack manifest 'catalog/invalid-yaml-and-schema/invalid-yaml-5.yaml'\nyaml: mapping values are not allowed in this context\n\ninvalid stack manifest 'catalog/invalid-yaml-and-schema/invalid-yaml-6.yaml'\nyaml: line 2: block sequence entries are not allowed in this context\n\ninvalid stack manifest 'catalog/invalid-yaml-and-schema/invalid-yaml-7.yaml'\nyaml: line 4: could not find expected ':'\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components (Specific Stack)\nDESCRIPTION: This command lists Atmos components for a specific stack, specified using the `-s` flag.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/list/list-components.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos list components -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Installing Atmos via Scoop on Windows\nDESCRIPTION: This snippet shows how to install Atmos using Scoop on Windows. It requires Scoop to be installed first.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nscoop install atmos\n```\n\n----------------------------------------\n\nTITLE: Step-Level Stack Attribute\nDESCRIPTION: Example of specifying the stack at the step level using the `stack` attribute.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/workflows/workflows.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - command: terraform plan test/test-component\n    stack: tenant1-ue2-dev\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Workflow Help\nDESCRIPTION: Displays help for `atmos workflow`, showing workflow-related commands and options.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\natmos workflow --help\n```\n\n----------------------------------------\n\nTITLE: LogError Example\nDESCRIPTION: This example demonstrates how to use LogError to indicate a failure in persisting user data.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"Failed to persist user data: %v\"\n```\n\n----------------------------------------\n\nTITLE: Getting Atmos CLI Version\nDESCRIPTION: This command retrieves and displays the current version of the Atmos CLI tool.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\natmos version\n```\n\n----------------------------------------\n\nTITLE: Example: formatting stack name with printf\nDESCRIPTION: Example demonstrating how to use the `printf` template function to dynamically generate the stack name when using the `!store` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    terraform:\n      tgw:\n        vars:\n          vpc_id: !store prod/ssm {{ printf \"net-%s-%s\" .vars.environment .vars.stage }} vpc vpc_id\n```\n\n----------------------------------------\n\nTITLE: Disable YAML functions processing in Atmos\nDESCRIPTION: This command disables YAML functions processing. The '--process-functions=false' option prevents YAML functions from being processed when retrieving values.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Command with Trailing Arguments (Bash)\nDESCRIPTION: This bash command shows how to use the `ansible run` Atmos command with trailing arguments. The `--` separates Atmos-specific arguments from those passed directly to `ansible-playbook`. In this case, `--limit web` is passed to the Ansible command.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/custom-commands/custom-commands.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos ansible run -- --limit web\nRunning: ansible-playbook site.yml --limit web\n\nPLAY [web] *********************************************************************\n```\n\n----------------------------------------\n\nTITLE: LogWarn Example 2\nDESCRIPTION: This example demonstrates how to use LogWarn to indicate the use of a default configuration value due to a missing value.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"Configuration value missing, using default.\"\n```\n\n----------------------------------------\n\nTITLE: Set GitHub Token Environment Variable (Shell)\nDESCRIPTION: This command sets the `GITHUB_TOKEN` environment variable using the `gh` CLI to avoid API rate limits. It assumes that the `gh` CLI is already installed and the user is logged in.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_TOKEN=$(gh auth token)\n```\n\n----------------------------------------\n\nTITLE: Generate Planfile with YAML Functions Processing Disabled\nDESCRIPTION: Example demonstrating how to disable YAML functions processing using the `--process-functions=false` flag.  YAML function processing is enabled by default.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-generate-planfile.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate planfile <component> -s <stack> --process-functions=false\n```\n\n----------------------------------------\n\nTITLE: Dry run an Atmos workflow using the CLI command\nDESCRIPTION: This snippet illustrates how to use the `--dry-run` flag with the `atmos workflow` CLI command to preview the steps of a workflow without actually executing them. It demonstrates running a dry run of the `plan-all` workflow defined in the `weather.yaml` manifest file.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/simple/extra-credit/create-workflows.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nExecuting the workflow 'plan-all' from 'stacks/workflows/weather.yaml'\n\nExecuting workflow step: terraform plan station -s dev\nExecuting workflow step: terraform plan station -s staging\nExecuting workflow step: terraform plan station -s prod\n```\n\n----------------------------------------\n\nTITLE: Combined import configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates a combination of importing files with and without templates.  It allows for a mix of simple file imports and templated imports with context, enabling flexible configuration management.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/imports.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - mixins/region/us-east-2\n  - orgs/cp/tenant1/test1/_defaults\n  - path: \"<path_to_atmos_manifest1>\"\n  - path: \"<path_to_atmos_manifest2>\"\n      context: {}\n      skip_templates_processing: false\n      ignore_missing_template_values: true\n```\n\n----------------------------------------\n\nTITLE: Adding atmos to Aqua\nDESCRIPTION: This snippet adds atmos to aqua.yaml\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/install-atmos.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\naqua g -i cloudposse/atmos\n```\n\n----------------------------------------\n\nTITLE: Display Directory Tree\nDESCRIPTION: Displays the directory tree structure.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ntree\n```\n\n----------------------------------------\n\nTITLE: Displaying Atmos CLI Help\nDESCRIPTION: This command displays help information for all Atmos CLI commands, providing a list of available commands and their usage.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\natmos help\n```\n\n----------------------------------------\n\nTITLE: Atmos Configuration for Atlantis Integration\nDESCRIPTION: This YAML snippet shows the configuration of the Atlantis integration within the Atmos configuration file (atmos.yaml). It defines the path to the Atlantis configuration file, as well as templates for Atlantis configs, projects, and workflows.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/pkg/atlantis/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# atmos.yaml CLI config\n\n# Integrations\nintegrations:\n\n  # Atlantis integration\n  # https://www.runatlantis.io/docs/repo-level-atlantis-yaml.html\n  atlantis:\n    # Path and name of the Atlantis config file `atlantis.yaml`\n    # Supports absolute and relative paths\n    # All the intermediate folders will be created automatically (e.g. `path: /config/atlantis/atlantis.yaml`)\n    # Can be overridden on the command line by using `--output-path` command-line argument in `atmos atlantis generate repo-config` command\n    # If not specified (set to an empty string/omitted here, and set to an empty string on the command line), the content of the file will be dumped to `stdout`\n    # On Linux/macOS, you can also use `--output-path=/dev/stdout` to dump the content to `stdout` without setting it to an empty string in `atlantis.path`\n    path: \"atlantis.yaml\"\n\n    # Config templates\n    # Select a template by using the `--config-template <config_template>` command-line argument in `atmos atlantis generate repo-config` command\n    config_templates:\n      config-1:\n        version: 3\n        automerge: true\n        delete_source_branch_on_merge: true\n        parallel_plan: true\n        parallel_apply: true\n        allowed_regexp_prefixes:\n          - dev/\n          - staging/\n          - prod/\n\n    # Project templates\n    # Select a template by using the `--project-template <project_template>` command-line argument in `atmos atlantis generate repo-config` command\n    project_templates:\n      project-1:\n        # generate a project entry for each component in every stack\n        name: \"{tenant}-{environment}-{stage}-{component}\"\n        workspace: \"{workspace}\"\n        dir: \"{component-path}\"\n        terraform_version: v1.2\n        delete_source_branch_on_merge: true\n        autoplan:\n          enabled: true\n          when_modified:\n            - \"**/*.tf\"\n            - \"varfiles/$PROJECT_NAME.tfvars.json\"\n        apply_requirements:\n          - \"approved\"\n\n    # Workflow templates\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-init-plan-apply-commands\n    # https://www.runatlantis.io/docs/custom-workflows.html#custom-run-command\n    workflow_templates:\n      workflow-1:\n        plan:\n          steps:\n            - run: terraform init -input=false\n            # When using workspaces, you need to select the workspace using the $WORKSPACE environment variable\n            - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE\n            # You must output the plan using `-out $PLANFILE` because Atlantis expects plans to be in a specific location\n            - run: terraform plan -input=false -refresh -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json\n        apply:\n          steps:\n            - run: terraform apply $PLANFILE\n```\n\n----------------------------------------\n\nTITLE: Limit columns in Atmos values listing\nDESCRIPTION: This command limits the number of columns displayed in the output. The '--max-columns' option sets the maximum number of columns to be shown.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_values_usage.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list values <component> --max-columns 5\n```\n\n----------------------------------------\n\nTITLE: Using printf to format stack names with !store\nDESCRIPTION: Demonstrates using the `printf` template function to construct stack names dynamically within the `!store` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/store.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> {{ printf \"%s-%s-%s\" .vars.tenant .vars.environment .vars.stage }} <component> <key>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> {{ printf \"plat-%s-prod\" .vars.environment }} <component> <key>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n!store <store_name> {{ printf \"%s-%s-%s\" .settings.context.tenant .settings.context.region .settings.context.account }} <component> <key>\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Atlantis Generate Help\nDESCRIPTION: Displays help information for `atmos atlantis generate`, used to generate Atlantis configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate --help\n```\n\n----------------------------------------\n\nTITLE: Describing Affected Components with YAML Function Skipping (bash)\nDESCRIPTION: This command describes the components affected by changes and skips the execution of a specific YAML function when processing Atmos stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_affected_usage.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos describe affected --skip=terraform.output\n```\n\n----------------------------------------\n\nTITLE: Skipping YAML Function Execution (Shell)\nDESCRIPTION: This command skips the execution of a specific YAML function in the Atmos stack manifests. The `--skip` flag is used to specify the function to skip, for instance, `terraform.output`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_describe_stacks_usage.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos describe stacks --skip=terraform.output\n```\n\n----------------------------------------\n\nTITLE: Describing a component without template processing\nDESCRIPTION: This command describes a component's configuration without processing Go templates. This allows inspecting the configuration before template rendering. `--process-templates=false` disables template processing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-component.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component vpc -s tenant1-ue2-dev --process-templates=false\n```\n\n----------------------------------------\n\nTITLE: Atmos Templates Settings Example\nDESCRIPTION: This example showcases defining multiple evaluations to process `Go` templates in Atmos. It demonstrates the use of `settings` block and how the template is processed in multiple phases.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/templates/templates.mdx#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  settings:\n    enabled: true\n    # Number of evaluations to process `Go` templates\n    evaluations: 3\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Varfiles Help\nDESCRIPTION: Displays help information for `atmos terraform generate varfiles`, used to generate multiple Terraform variable files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate varfiles --help\n```\n\n----------------------------------------\n\nTITLE: Invalid YAML Example\nDESCRIPTION: Demonstrates an invalid YAML configuration where curly braces are used without proper quoting or the `!template` function, causing a parsing error.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: {{ toJson (atmos.Component \"<component>\" \"<stack>\").outputs.test_list }}\nvar2: {{ toJson (atmos.Component \"component1\" \"<stack>\").outputs.test_map }}\n```\n\n----------------------------------------\n\nTITLE: List Atmos Components Filtered by Stack (Shell)\nDESCRIPTION: This command lists components, filtered by a specific stack. Replacing `<stack>` with the name of the target stack is necessary. It requires a configured Atmos environment and allows for focused component retrieval based on the stack context.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_list_components_usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ atmos list components -s <stack>\n```\n\n----------------------------------------\n\nTITLE: Compare Component Differences by Type with Atmos\nDESCRIPTION: Compares the differences between the local and vendored versions of the specified component, filtering by type (terraform or helmfile). Replace `<component>` with the actual component name and choose either `terraform` or `helmfile` for the `--type` option.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_vendor_diff_usage.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos vendor diff --component <component> --type (terraform|helmfile)\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Helmfile Generate Help\nDESCRIPTION: Displays the help information for the `atmos helmfile generate` subcommand, which is used for generating helmfile configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile generate --help\n```\n\n----------------------------------------\n\nTITLE: Executing Atmos Vendor Pull (Shell)\nDESCRIPTION: This shell snippet shows the command to execute the Atmos vendor pull operation, which processes the vendor configuration files and downloads the specified components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/vendor/vendor-manifest.mdx#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n> atmos vendor pull\n\nProcessing vendor config file 'vendor.yaml'\nPulling sources for the component 'my-vpc6' from 'github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref=1.315.0' into 'components/terraform/infra/my-vpc6'\nPulling sources for the component 'my-vpc5' from 'github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref=1.317.0' into 'components/terraform/infra/my-vpc5'\nPulling sources for the component 'my-vpc4' from 'github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref=1.319.0' into 'components/terraform/infra/my-vpc4'\nPulling sources for the component 'my-vpc1' from 'public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:1.0.2' into 'components/terraform/infra/my-vpc1'\nPulling sources for the component 'my-vpc2' from 'github.com/cloudposse/terraform-aws-components.git//modules/vpc?ref=1.320.0' into 'components/terraform/infra/my-vpc2'\nPulling sources for the component 'vpc' from 'public.ecr.aws/cloudposse/components/terraform/stable/aws/vpc:latest' into 'components/terraform/infra/vpc3'\nPulling sources for the component 'vpc-flow-logs-bucket' from 'github.com/cloudposse/terraform-aws-components.git//modules/vpc-flow-logs-bucket?ref=1.323.0' into 'components/terraform/infra/vpc-flow-logs-bucket/1.323.0'\n```\n\n----------------------------------------\n\nTITLE: Import and Use Screengrab Component in MDX\nDESCRIPTION: This snippet shows how to import and use the `Screengrab` component in an MDX documentation file. The `Screengrab` component is expected to be located at `@site/src/components/Screengrab`. The `title` and `slug` props are used to specify the title and filename (without extension) of the screengrab, respectively.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/README.md#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport Screengrab from '@site/src/components/Screengrab'\n\n<Screengrab title=\"atmos help\" slug=\"atmos--help\" />\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Component Help\nDESCRIPTION: Displays the help information for `atmos describe component`, which is used for describing components.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\natmos describe component --help\n```\n\n----------------------------------------\n\nTITLE: LogError Example 2\nDESCRIPTION: This example demonstrates how to use LogError to log an unexpected nil pointer dereference.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/docs/logging.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"Unexpected nil pointer dereference at line 42.\"\n```\n\n----------------------------------------\n\nTITLE: Display Directory Tree with Flags\nDESCRIPTION: Displays the directory tree structure with `-CAF --gitignore` flags.  `-C` enables colorization, `-A` prints all files, `--gitignore` excludes files matched by .gitignore. `-F` appends a file type indicator.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\ntree -CAF --gitignore\n```\n\n----------------------------------------\n\nTITLE: Configure Stack Name Template in atmos.yaml\nDESCRIPTION: This YAML snippet demonstrates how to use the `name_template` option within the `stacks` section of `atmos.yaml` to define a custom stack naming convention using Go templates and variables defined in stack manifests.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/stacks.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstacks:\n  name_template: \"{{.vars.division}}-{{.vars.account}}-{{.vars.region}}\"\n```\n\n----------------------------------------\n\nTITLE: Configure Core OU Defaults - YAML\nDESCRIPTION: This YAML snippet configures the defaults for the 'core' OU. It imports the 'acme' organization defaults and the 'core' tenant mixin.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - orgs/acme/_defaults\n  - mixins/tenant/core\n```\n\n----------------------------------------\n\nTITLE: Atmos Describe Affected Command Output in Console\nDESCRIPTION: This console output shows the result of running `atmos describe affected` with `logs.level` set to Trace and `logs.file` set to `/dev/stdout`. The output includes debug messages intermixed with the JSON response, which can be problematic for parsing.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/configuration/configuration.mdx#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nChecking out Git ref 'refs/remotes/origin/HEAD' ...\nChecked out Git ref 'refs/remotes/origin/HEAD'\n\nCurrent HEAD: ffd2154e1daa32357b75460b9f45d268922b51e1 refs/heads/update-logs\nBASE: f7aa382aa8b3d48be8f06cfdb27aad344b89aff4 HEAD\n\nChanged files:\n\nexamples/quick-start-advanced/Dockerfile\nexamples/quick-start-advanced/atmos.yaml\n\nAffected components and stacks:\n\n[\n   {\n      \"component\": \"vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"examples/quick-start-advanced/components/terraform/vpc\",\n      \"stack\": \"plat-uw2-prod\",\n      \"stack_slug\": \"plat-uw2-prod-vpc\",\n      \"affected\": \"stack.vars\"\n   },\n   {\n      \"component\": \"vpc\",\n      \"component_type\": \"terraform\",\n      \"component_path\": \"examples/quick-start-advanced/components/terraform/vpc\",\n      \"stack\": \"plat-ue2-prod\",\n      \"stack_slug\": \"plat-ue2-prod-vpc\",\n      \"affected\": \"stack.vars\"\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Help\nDESCRIPTION: Displays the help information for the `atmos terraform` subcommand, used for managing Terraform configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform --help\n```\n\n----------------------------------------\n\nTITLE: Terraform Shell Skipping Functions Comma Separated\nDESCRIPTION: Example usage of the `atmos terraform shell` command with the `--skip` flag.  This skips processing the `terraform.output` and `include` YAML functions in the Atmos stack manifests when executing terraform commands. The skipped functions are comma separated.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/terraform/terraform-shell.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform shell <component> -s <stack> --skip=terraform.output,include\n```\n\n----------------------------------------\n\nTITLE: Defining Component Dependencies within Same Atmos Stack (YAML)\nDESCRIPTION: This YAML snippet illustrates defining dependencies on other Atmos components within the same stack using `settings.depends_on`. The context variables like `namespace`, `tenant`, `environment`, and `stage` are omitted, implying the same stack.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/describe/describe-dependents.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  terraform:\n    top-level-component2:\n      metadata:\n        # Point to Terraform component\n        component: \"top-level-component1\"\n      settings:\n        depends_on:\n          1:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test-component\"\n          2:\n            # If the `context` (namespace, tenant, environment, stage) is not provided,\n            # the `component` is from the same Atmos stack as this component\n            component: \"test/test2/test-component-2\"\n      vars:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Generate Zsh Completion Script\nDESCRIPTION: Generates a Zsh completion script for the Atmos CLI.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\natmos completion zsh\n```\n\n----------------------------------------\n\nTITLE: Configure Staging Stage Mixin - YAML\nDESCRIPTION: This YAML snippet configures the staging stage mixin. It defines the 'stage' variable as 'staging'. This configuration is used to set defaults for the 'staging' stage/account.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/quick-start/advanced/create-atmos-stacks.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  stage: staging\n\n# Other defaults for the `staging` stage/account\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Validate Help\nDESCRIPTION: Displays the help information for the `atmos validate` subcommand, used for validating configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\natmos validate --help\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Terraform Generate Help\nDESCRIPTION: Displays the help information for `atmos terraform generate`, used for generating Terraform configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\natmos terraform generate --help\n```\n\n----------------------------------------\n\nTITLE: Use to Clone Target (Bash)\nDESCRIPTION: This command uses `--clone-target-ref` along with `--affected-only` to clone the target.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/cmd/markdown/atmos_atlantis_generate_repo_config_usage.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ atmos atlantis generate repo-config --affected-only --clone-target-ref\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Describe Config Help\nDESCRIPTION: Displays the help information for `atmos describe config`, which is used for describing configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\natmos describe config --help\n```\n\n----------------------------------------\n\nTITLE: Include File with Spaces (macOS/Linux)\nDESCRIPTION: Demonstrates including a file with spaces in its name or using a YQ expression with spaces on macOS and Linux, using double quotes around the file name or YQ expression and single quotes around the whole expression.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/include.mdx#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nvars:\n  values: !include './values.yaml \"<yq-expression-with-spaces>\"'\n  description: !include '\"component description.md\"'\n```\n\n----------------------------------------\n\nTITLE: Example String Output Result YAML\nDESCRIPTION: This snippet shows the resulting YAML when handling a string output from the `atmos.Component` function.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/stacks/yaml-functions/template.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvar1: test\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Helmfile Help\nDESCRIPTION: Displays the help information for the `atmos helmfile` subcommand. This is useful for understanding the available options and usage of helmfile within Atmos.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natmos helmfile --help\n```\n\n----------------------------------------\n\nTITLE: Create DevContainer Directory (Bash)\nDESCRIPTION: This bash command creates a `.devcontainer` directory in the root of the infrastructure repository. This directory will store the DevContainer configuration files.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/core-concepts/projects/setup-editor.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir .devcontainer\n```\n\n----------------------------------------\n\nTITLE: Describing Atmos Stacks\nDESCRIPTION: This command displays the fully deep-merged configuration for all Atmos stacks and the components within those stacks, providing a complete view of stack configurations.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cheatsheets/commands.mdx#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\natmos describe stacks\n```\n\n----------------------------------------\n\nTITLE: Execute Deploy Staging Script\nDESCRIPTION: Executes the `deploy-staging.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/deploy-staging.sh\n```\n\n----------------------------------------\n\nTITLE: Configuration Import Flowchart using Mermaid\nDESCRIPTION: This Mermaid flowchart visualizes the configuration import process. It illustrates how configuration files are loaded, and how imports are processed from remote URLs, specific paths, or wildcard globs, involving recursive calls and deep merges.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/pkg/config/README.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n    A[\"Load Configuration File\"] --> B{\"Import Section Exists?\"}\n    \n    B -- Yes --> C[\"Process Imports in Order\"]\n    C --> D{\"Import Type?\"}\n    D --> E[\"Remote URL\"]\n    D --> F[\"Specific Path\"]\n    D --> G[\"Wildcard Globs\"]\n    \n    E --> H[\"Fetch Config from Remote URL\"]\n    F --> I[\"Read Config from Filesystem\"]\n    G --> I[\"Read Config from Filesystem\"]\n    \n    H --> J[\"Call Load Configuration File (Recursively)\"]\n    I --> J[\"Call Load Configuration File (Recursively)\"]\n    \n    J --> L[\"Deep Merge with Current Config in Memory\"]\n    L --> K{\"More Imports to Process?\"}\n    K -- Yes --> C\n    K -- No --> M[\"Configuration Processing Complete\"]\n    \n    %% Loopback for recursion\n    J -.-> A\n\n    %% Styling for clarity\n    style A fill:#A8DADC,stroke:#1D3557,stroke-width:2px,color:#000000\n    style B fill:#F4A261,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style C fill:#457B9D,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style D fill:#A8DADC,stroke:#1D3557,stroke-width:2px,color:#000000\n    style E fill:#E63946,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style F fill:#E63946,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style G fill:#E63946,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style H fill:#A8DADC,stroke:#1D3557,stroke-width:2px,color:#000000\n    style I fill:#A8DADC,stroke:#1D3557,stroke-width:2px,color:#000000\n    style J fill:#F4A261,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style L fill:#457B9D,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style K fill:#F4A261,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    style M fill:#1D3557,stroke:#1D3557,stroke-width:2px,color:#FFFFFF\n    \n    classDef recursion stroke-dasharray: 5 5;\n```\n\n----------------------------------------\n\nTITLE: Execute Define Your Stacks Script\nDESCRIPTION: Executes the `define-your-stacks.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/define-your-stacks.sh\n```\n\n----------------------------------------\n\nTITLE: Execute Write Your Components Script\nDESCRIPTION: Executes the `write-your-components.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/write-your-components.sh\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Pro Unlock Help\nDESCRIPTION: Displays help information for the `atmos pro unlock` command, which likely relates to unlocking resources in a professional context.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\natmos pro unlock --help\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Atlantis Generate Repo-Config Help\nDESCRIPTION: Displays help for `atmos atlantis generate repo-config`, which generates repository configurations for Atlantis.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --help\n```\n\n----------------------------------------\n\nTITLE: Execute Start Your Project Script\nDESCRIPTION: Executes the `start-your-project.sh` shell script in the `scripts/demo-stacks/` directory.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nscripts/demo-stacks/start-your-project.sh\n```\n\n----------------------------------------\n\nTITLE: Generate repo-config with a custom ref and sha\nDESCRIPTION: Specifies a custom git ref and commit SHA to compare against when using `--affected-only`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/cli/commands/atlantis/atlantis-generate-repo-config.mdx#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\natmos atlantis generate repo-config --affected-only=true --ref refs/tags/v1.2.0 --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073\n```\n\n----------------------------------------\n\nTITLE: Display Atmos Pro Lock Help\nDESCRIPTION: Displays help information for the `atmos pro lock` command, which likely relates to locking resources in a professional context.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/demo/screengrabs/demo-stacks.txt#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\natmos pro lock --help\n```\n\n----------------------------------------\n\nTITLE: Changing Directory with Bash\nDESCRIPTION: Changes the current directory inside the Docker container to `/tutorials/02-atmos`.\nSOURCE: https://github.com/cloudposse/atmos/blob/main/website/docs/tutorials/atmos-getting-started.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /tutorials/02-atmos\n```"
  }
]