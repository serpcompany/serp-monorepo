[
  {
    "owner": "hammerspoon",
    "repo": "hammerspoon.github.io",
    "content": "TITLE: Binding Hello World Alert to Hotkey in Lua\nDESCRIPTION: Creates a simple hotkey binding that displays a \"Hello World\" alert when Command+Alt+Ctrl+W is pressed. Uses hs.hotkey.bind to create the keyboard shortcut and hs.alert.show to display the message.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"W\", function()\n  hs.alert.show(\"Hello World!\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Resizing Windows to Right Half of Screen in Hammerspoon (Lua)\nDESCRIPTION: This snippet binds a hotkey to resize the focused window to occupy the right half of the screen. It uses hs.hotkey.bind and hs.window functions to achieve this.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"Right\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n  local screen = win:screen()\n  local max = screen:frame()\n\n  f.x = max.x + (max.w / 2)\n  f.y = max.y\n  f.w = max.w / 2\n  f.h = max.h\n  win:setFrame(f)\nend)\n```\n\n----------------------------------------\n\nTITLE: Resizing Windows to Left Half of Screen in Hammerspoon (Lua)\nDESCRIPTION: This snippet binds a hotkey to resize the focused window to occupy the left half of the screen. It uses hs.hotkey.bind and hs.window functions to achieve this.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"Left\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n  local screen = win:screen()\n  local max = screen:frame()\n\n  f.x = max.x\n  f.y = max.y\n  f.w = max.w / 2\n  f.h = max.h\n  win:setFrame(f)\nend)\n```\n\n----------------------------------------\n\nTITLE: Applying Multi-Window Layouts in Hammerspoon (Lua)\nDESCRIPTION: This snippet demonstrates how to use hs.layout to create and apply a multi-window layout. It positions windows of different applications on the screen according to specified coordinates and sizes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal laptopScreen = \"Color LCD\"\nlocal windowLayout = {\n    {\"Safari\",  nil,          laptopScreen, hs.layout.left50,    nil, nil},\n    {\"Mail\",    nil,          laptopScreen, hs.layout.right50,   nil, nil},\n    {\"iTunes\",  \"iTunes\",     laptopScreen, hs.layout.maximized, nil, nil},\n    {\"iTunes\",  \"MiniPlayer\", laptopScreen, nil, nil, hs.geometry.rect(0, -48, 400, 48)},\n}\nhs.layout.apply(windowLayout)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Configuration Reloading in Hammerspoon (Lua)\nDESCRIPTION: This snippet binds a hotkey to reload the Hammerspoon configuration and display an alert. It uses hs.hotkey.bind, hs.reload, and hs.alert.show functions.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"R\", function()\n  hs.reload()\nend)\nhs.alert.show(\"Config loaded\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Caffeine-like Menubar Item with Hammerspoon (Lua)\nDESCRIPTION: This snippet creates a menubar item that toggles between 'AWAKE' and 'SLEEPY' states, mimicking the functionality of the Caffeine app. It uses hs.menubar and hs.caffeinate to manage the menubar item and control the display sleep behavior.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\ncaffeine = hs.menubar.new()\nfunction setCaffeineDisplay(state)\n    if state then\n        caffeine:setTitle(\"AWAKE\")\n    else\n        caffeine:setTitle(\"SLEEPY\")\n    end\nend\n\nfunction caffeineClicked()\n    setCaffeineDisplay(hs.caffeinate.toggle(\"displayIdle\"))\nend\n\nif caffeine then\n    caffeine:setClickCallback(caffeineClicked)\n    setCaffeineDisplay(hs.caffeinate.get(\"displayIdle\"))\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Configuration Reloading in Hammerspoon (Lua)\nDESCRIPTION: This snippet demonstrates how to use the pathwatcher extension to automatically reload the Hammerspoon configuration when any Lua file in the .hammerspoon directory changes. It includes error handling and user feedback.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction reloadConfig(files)\n    doReload = false\n    for _,file in pairs(files) do\n        if file:sub(-4) == \".lua\" then\n            doReload = true\n        end\n    end\n    if doReload then\n        hs.reload()\n    end\nend\nmyWatcher = hs.pathwatcher.new(os.getenv(\"HOME\") .. \"/.hammerspoon/\", reloadConfig):start()\nhs.alert.show(\"Config loaded\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Window Movement with Nethack Keys in Lua\nDESCRIPTION: Creates a comprehensive window movement system using nethack-style directional keys (Y,K,U,H,L,B,J,N). Each hotkey moves the window in a different direction by 10 pixels.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"Y\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x - 10\n  f.y = f.y - 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"K\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.y = f.y - 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"U\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x + 10\n  f.y = f.y - 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"H\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x - 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"L\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x + 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"B\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x - 10\n  f.y = f.y + 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"J\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.y = f.y + 10\n  win:setFrame(f)\nend)\n\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"N\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x + 10\n  f.y = f.y + 10\n  win:setFrame(f)\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Application Events with Hammerspoon (Lua)\nDESCRIPTION: This example demonstrates how to use hs.application.watcher to react to application events. Specifically, it brings all Finder windows to the front when Finder is activated. The watcher is created, started, and can be stopped if needed.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nfunction applicationWatcher(appName, eventType, appObject)\n    if (eventType == hs.application.watcher.activated) then\n        if (appName == \"Finder\") then\n            -- Bring all Finder windows forward when one gets activated\n            appObject:selectMenuItem({\"Window\", \"Bring All to Front\"})\n        end\n    end\nend\nappWatcher = hs.application.watcher.new(applicationWatcher)\nappWatcher:start()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Volume Based on WiFi Network Changes with Hammerspoon (Lua)\nDESCRIPTION: This snippet uses hs.wifi.watcher to detect changes in the connected WiFi network. It adjusts the system volume when transitioning between a home network and other networks, demonstrating how to react to WiFi events and control audio settings.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nwifiWatcher = nil\nhomeSSID = \"MyHomeNetwork\"\nlastSSID = hs.wifi.currentNetwork()\n\nfunction ssidChangedCallback()\n    newSSID = hs.wifi.currentNetwork()\n\n    if newSSID == homeSSID and lastSSID ~= homeSSID then\n        -- We just joined our home WiFi network\n        hs.audiodevice.defaultOutputDevice():setVolume(25)\n    elseif newSSID ~= homeSSID and lastSSID == homeSSID then\n        -- We just departed our home WiFi network\n        hs.audiodevice.defaultOutputDevice():setVolume(0)\n    end\n\n    lastSSID = newSSID\nend\n\nwifiWatcher = hs.wifi.watcher.new(ssidChangedCallback)\nwifiWatcher:start()\n```\n\n----------------------------------------\n\nTITLE: Sending Automated Messages Based on WiFi Location with Hammerspoon in Lua\nDESCRIPTION: This snippet monitors WiFi network connections and automatically sends iMessage and SMS notifications when connecting to a specific network. It uses hs.wifi.watcher to detect network changes and hs.messages to send the communications when arriving at a defined location.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\ncoffeeShopWifi = \"Baristartisan_Guest\"\nlastSSID = hs.wifi.currentNetwork()\nwifiWatcher = nil\n\nfunction ssidChanged()\n    newSSID = hs.wifi.currentNetwork()\n\n    if newSSID == coffeeShopWifi and lastSSID ~= coffeeShopWifi then\n        -- We have arrived at the coffee shop\n        hs.messages.iMessage(\"iphonefriend@hipstermail.com\", \"Hey! I'm at Baristartisan's, come join me!\")\n        hs.messages.SMS(\"+1234567890\", \"Hey, you don't have an iPhone, but you should still come for a coffee\")\n    end\n\n    lastSSID = newSSID\nend\n\nwifiWatcher = hs.wifi.watcher.new(ssidChanged)\nwifiWatcher:start()\n```\n\n----------------------------------------\n\nTITLE: Creating URL Event Handlers in Hammerspoon with Lua\nDESCRIPTION: This snippet demonstrates how to create custom URL handlers in Hammerspoon. It binds a URL event named 'someAlert' that displays an alert message when triggered. This allows external applications to trigger Hammerspoon actions via URL schemes (hammerspoon://).\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nhs.urlevent.bind(\"someAlert\", function(eventName, params)\n    hs.alert.show(\"Received someAlert\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Paste Blocking with Keyboard Emulation in Lua\nDESCRIPTION: This snippet creates a hotkey binding that emulates keyboard typing of the clipboard contents, effectively bypassing paste blocking mechanisms in applications and websites. It uses hs.eventtap.keyStrokes to simulate typing the contents retrieved from the clipboard.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\"}, \"V\", function() hs.eventtap.keyStrokes(hs.pasteboard.getContents()) end)\n```\n\n----------------------------------------\n\nTITLE: Basic Window Movement in Lua\nDESCRIPTION: Implements basic window movement functionality by binding Command+Alt+Ctrl+H to move the focused window 10 pixels to the left. Uses hs.window to manipulate window frames.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"H\", function()\n  local win = hs.window.focusedWindow()\n  local f = win:frame()\n\n  f.x = f.x - 10\n  win:setFrame(f)\nend)\n```\n\n----------------------------------------\n\nTITLE: Loading and Starting the ReloadConfiguration Spoon in Hammerspoon (Lua)\nDESCRIPTION: This snippet shows how to load and start the ReloadConfiguration Spoon, which provides smart configuration reloading functionality for Hammerspoon. It assumes the Spoon has been downloaded and installed in the appropriate directory.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nhs.loadSpoon(\"ReloadConfiguration\")\nspoon.ReloadConfiguration:start()\n```\n\n----------------------------------------\n\nTITLE: Reacting to USB Events with Hammerspoon in Lua\nDESCRIPTION: This snippet demonstrates how to detect when specific USB devices are connected or disconnected and take appropriate actions. In this example, it launches ScanSnap Manager when a ScanSnap S1300i scanner is connected and kills the application when the scanner is disconnected.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nusbWatcher = nil\n\nfunction usbDeviceCallback(data)\n    if (data[\"productName\"] == \"ScanSnap S1300i\") then\n        if (data[\"eventType\"] == \"added\") then\n            hs.application.launchOrFocus(\"ScanSnap Manager\")\n        elseif (data[\"eventType\"] == \"removed\") then\n            app = hs.appfinder.appFromName(\"ScanSnap Manager\")\n            app:kill()\n        end\n    end\nend\n\nusbWatcher = hs.usb.watcher.new(usbDeviceCallback)\nusbWatcher:start()\n```\n\n----------------------------------------\n\nTITLE: Creating Visual Mouse Pointer Highlight with Hammerspoon in Lua\nDESCRIPTION: This snippet creates a function that temporarily highlights the mouse pointer position with a red circle. It gets the current mouse position, draws a circle around it, and sets a timer to remove the highlight after 3 seconds. The function is bound to a hotkey combination.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nmouseCircle = nil\nmouseCircleTimer = nil\n\nfunction mouseHighlight()\n    -- Delete an existing highlight if it exists\n    if mouseCircle then\n        mouseCircle:delete()\n        if mouseCircleTimer then\n            mouseCircleTimer:stop()\n        end\n    end\n    -- Get the current co-ordinates of the mouse pointer\n    mousepoint = hs.mouse.absolutePosition()\n    -- Prepare a big red circle around the mouse pointer\n    mouseCircle = hs.drawing.circle(hs.geometry.rect(mousepoint.x-40, mousepoint.y-40, 80, 80))\n    mouseCircle:setStrokeColor({[\"red\"]=1,[\"blue\"]=0,[\"green\"]=0,[\"alpha\"]=1})\n    mouseCircle:setFill(false)\n    mouseCircle:setStrokeWidth(5)\n    mouseCircle:show()\n\n    -- Set a timer to delete the circle after 3 seconds\n    mouseCircleTimer = hs.timer.doAfter(3, function()\n      mouseCircle:delete()\n      mouseCircle = nil\n    end)\nend\nhs.hotkey.bind({\"cmd\",\"alt\",\"shift\"}, \"D\", mouseHighlight)\n```\n\n----------------------------------------\n\nTITLE: Creating Window Filters for Pasteboard Cleaning in Hammerspoon (Lua)\nDESCRIPTION: This snippet creates a window filter to clean the pasteboard when switching to Messages app. It uses hs.window.filter and hs.pasteboard to achieve this functionality.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal function cleanPasteboard()\n  local pb = hs.pasteboard.contentTypes()\n  local contains = hs.fnutils.contains\n  if contains(pb, \"com.apple.webarchive\") and contains(pb, \"public.rtf\") then\n    hs.pasteboard.setContents(hs.pasteboard.getContents())\n  end\nend\n\nlocal messagesWindowFilter = hs.window.filter.new(false):setAppFilter('Messages')\nmessagesWindowFilter:subscribe(hs.window.filter.windowFocused, cleanPasteboard)\n```\n\n----------------------------------------\n\nTITLE: Controlling iTunes and Spotify with Hammerspoon in Lua\nDESCRIPTION: This snippet shows how to control music playback by pausing iTunes, playing Spotify, and displaying the current track information. It utilizes the hs.itunes and hs.spotify modules to interact with these music applications.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nhs.itunes.pause()\nhs.spotify.play()\nhs.spotify.displayCurrentTrack()\n```\n\n----------------------------------------\n\nTITLE: Creating Native macOS Notification in Lua\nDESCRIPTION: Demonstrates how to create a native macOS notification using hs.notify when Command+Alt+Ctrl+W is pressed. The notification includes a title and informative text.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"W\", function()\n  hs.notify.new({title=\"Hammerspoon\", informativeText=\"Hello World\"}):send()\nend)\n```\n\n----------------------------------------\n\nTITLE: Executing AppleScript from Hammerspoon in Lua\nDESCRIPTION: This snippet demonstrates how to execute AppleScript commands from within Hammerspoon. It requests the artist name of the currently playing track in iTunes and displays it using hs.alert.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nok,result = hs.applescript('tell Application \"iTunes\" to artist of the current track as string')\nhs.alert.show(result)\n```\n\n----------------------------------------\n\nTITLE: Loading and Using AClock Spoon in Lua\nDESCRIPTION: Shows how to load the AClock Spoon plugin and bind it to a hotkey (Command+Alt+Ctrl+C) to toggle its display. Demonstrates Spoon installation and basic usage.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nhs.loadSpoon(\"AClock\")\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, \"C\", function()\n  spoon.AClock:toggleShow()\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Window Filters in Hammerspoon (Lua)\nDESCRIPTION: This snippet demonstrates how to create a complex window filter using a predicate function. It filters windows based on their standard status, application, and screen.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal wf = hs.window.filter.new(function(win)\n    local fw = hs.window.focusedWindow()\n    return (\n      win:isStandard() and\n      win:application() == fw:application() and\n      win:screen() == fw:screen()\n    )\n  end)\n```\n\n----------------------------------------\n\nTITLE: Cycling Safari User Agent Strings with Hammerspoon (Lua)\nDESCRIPTION: This function demonstrates how to interact with Safari's menu items to cycle between different User Agent strings. It uses hs.application, hs.appfinder, and hs.alert to manage the application, find menu items, and provide user feedback.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/getting-started.md#2025-04-16_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction cycle_safari_agents()\n    hs.application.launchOrFocus(\"Safari\")\n    local safari = hs.appfinder.appFromName(\"Safari\")\n\n    local str_default = {\"Develop\", \"User Agent\", \"Default (Automatically Chosen)\"}\n    local str_edge = {\"Develop\", \"User Agent\", \"Microsoft Edge — macOS\"}\n    local str_chrome = {\"Develop\", \"User Agent\", \"Google Chrome — Windows\"}\n\n    local default = safari:findMenuItem(str_default)\n    local edge = safari:findMenuItem(str_edge)\n    local chrome = safari:findMenuItem(str_chrome)\n\n    if (default and default[\"ticked\"]) then\n        safari:selectMenuItem(str_edge)\n        hs.alert.show(\"Edge\")\n    end\n    if (edge and edge[\"ticked\"]) then\n        safari:selectMenuItem(str_chrome)\n        hs.alert.show(\"Chrome\")\n    end\n    if (chrome and chrome[\"ticked\"]) then\n        safari:selectMenuItem(str_default)\n        hs.alert.show(\"Safari\")\n    end\nend\nhs.hotkey.bind({\"cmd\", \"alt\", \"ctrl\"}, '7', cycle_safari_agents)\n```\n\n----------------------------------------\n\nTITLE: Adding New Hammerspoon Extensions\nDESCRIPTION: Several new extensions have been added to Hammerspoon, including hs.axuielement for accessibility features, hs.serial for serial port communication, and hs.websocket for WebSocket functionality.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- New extensions added:\nhs.axuielement\nhs.serial\nhs.websocket\n```\n\n----------------------------------------\n\nTITLE: Window Operation Timeout Setting\nDESCRIPTION: New API method for setting timeouts on window operations using hs.window.timeout(). Enables timeout control for window-related operations.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2019-12-27-0.9.77.md#2025-04-16_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nhs.window.timeout()\n```\n\n----------------------------------------\n\nTITLE: Updating Lua Version in Hammerspoon Core\nDESCRIPTION: The core Hammerspoon functionality has been updated to use Lua version 5.4.0. This update allows Hammerspoon to work with Lua coroutines, enhancing its scripting capabilities.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- Lua 5.4.0 is now used in Hammerspoon core\n```\n\n----------------------------------------\n\nTITLE: Adding New Methods to Existing Hammerspoon Modules\nDESCRIPTION: New methods have been added to existing Hammerspoon modules, enhancing their functionality. These include setting an application as frontmost, checking screen recording state, and working with window lists.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nhs.application:setFrontmost()\nhs.screenRecordingState()\nhs.window.list()\nhs.pasteboard.watcher()\nhs.relaunch()\nhs.coroutineApplicationYield()\n```\n\n----------------------------------------\n\nTITLE: Adding hs.relaunch() function in Hammerspoon\nDESCRIPTION: New function added in version 0.9.78 that allows Hammerspoon to be relaunched programmatically.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-01-13-0.9.78.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Added: hs.relaunch()\n```\n\n----------------------------------------\n\nTITLE: Creating hs.color Objects from HTML Hex Strings in Lua\nDESCRIPTION: This update enables the creation of hs.color objects using HTML hex color strings, providing an additional method for specifying colors in Hammerspoon scripts.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2017-04-24-0.9.53.md#2025-04-16_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nhs.color.fromHexString(\"#RRGGBB\")\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Image Loading from URL\nDESCRIPTION: Enhanced API method for loading images from URLs with asynchronous capability using hs.image.imageFromURL(). Now supports callback-based asynchronous operation.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2019-12-27-0.9.77.md#2025-04-16_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nhs.image.imageFromURL()\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Device Management in Hammerspoon\nDESCRIPTION: New methods added to hs.audiodevice for managing default effect devices. hs.audiodevice.defaultEffectDevice() retrieves the current default effect device, and setDefaultEffectDevice() allows setting a new default effect device.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2021-04-10-0.9.87.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhs.audiodevice.defaultEffectDevice()\nhs.audiodevice:setDefaultEffectDevice()\n```\n\n----------------------------------------\n\nTITLE: Documenting application frontmost status API fix in Hammerspoon\nDESCRIPTION: Documents the fix for the hs.application:isFrontmost() method in Hammerspoon, which restores functionality for checking if an application is currently the frontmost window.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2021-03-04-0.9.84.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhs.application:isFrontmost()\n```\n\n----------------------------------------\n\nTITLE: Screen Origin Manipulation in Hammerspoon\nDESCRIPTION: New API method for manipulating screen position using hs.screen:setOrigin(). Allows programmatic control of screen positioning.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2019-12-27-0.9.77.md#2025-04-16_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nhs.screen:setOrigin()\n```\n\n----------------------------------------\n\nTITLE: Checking Event Flags in Lua with Hammerspoon\nDESCRIPTION: New methods 'contains()' and 'containExactly()' have been added to check which flags are set in hs.eventtap.event:getFlags() values, allowing for more precise event flag checking.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2017-04-24-0.9.53.md#2025-04-16_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\neventFlags:contains(flagsToCheck)\neventFlags:containExactly(flagsToCheck)\n```\n\n----------------------------------------\n\nTITLE: Updated Function Reference\nDESCRIPTION: New and modified function references added to Hammerspoon, including hs.printf(), hs.setLogLevel(), and various media control methods for iTunes and Spotify.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2016-01-15-0.9.44.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhs.printf()\nhs.setLogLevel()\nhs.timer.doAt()\nhs.timer.delayed()\nhs.timer.localTime()\nhs.itunes.getVolume()\nhs.itunes.setVolume()\nhs.itunes.volumeUp()\nhs.itunes.volumeDown()\nhs.itunes.getPosition()\nhs.itunes.setPosition()\nhs.itunes.ff()\nhs.itunes.rw()\nhs.spotify.getVolume()\nhs.spotify.setVolume()\nhs.spotify.volumeUp()\nhs.spotify.volumeDown()\nhs.spotify.getPosition()\nhs.spotify.setPosition()\nhs.spotify.ff()\nhs.spotify.rw()\n```\n\n----------------------------------------\n\nTITLE: Accessing Canvas Elements with Alphanumeric IDs in Lua\nDESCRIPTION: This change allows direct access to canvas elements that have an alphanumeric 'id' attribute. Elements can now be accessed directly from the canvas object using their 'id'.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2017-04-24-0.9.53.md#2025-04-16_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ncanvasObject.elementId\n```\n\n----------------------------------------\n\nTITLE: Adding Mathematical Utility Functions in Hammerspoon\nDESCRIPTION: New mathematical utility functions have been added to the hs.math module, allowing for checks on NaN, finite, and infinite values.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nhs.math.isNan()\nhs.math.isFinite()\nhs.math.isInfinite()\n```\n\n----------------------------------------\n\nTITLE: Hammerspoon 0.9.56 Release Notes in Markdown\nDESCRIPTION: Structured release notes document for Hammerspoon 0.9.56, detailing minimum OS requirements, core fixes, and extensive extension updates including new features, bug fixes, and functionality changes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2017-09-15-0.9.56.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.56\npermalink: /releasenotes/0.9.56.html\n---\n\nMinimum OS X version: 10.10\n\n## Core\n * *Fixed*: Lua copyright dates are now correct\n\n## Extensions\n\n * *Fixed*: hs.base64.encode() should no longer crash when fed invalid input\n * *Fixed*: hs.eventtap middle/other mouse button event synthesis should now work again\n * *Added*: hs.streamdeck\n * *Added*: hs.dialog\n * *Added*: hs.fs.xattr\n * *Added*: hs.eventtap.event:timestamp()\n * *Added*: hs.timer.absoluteTime()\n * *Added*: hs.hotkey.assignable() and hs.hotkey.systemAssigned()\n * *Added*: hs.window:focusTab()\n * *Added*: hs.fs.displayName()\n * *Added*: dark mode support to hs.webview, Preferences window and Console window\n * *Added*: hs.host.gpuVRAM()\n * *Added*: hs.battery.otherBatteryInfo() (provides battery charge level for compatible Bluetooth devices)\n * *Added*: hs.mouse.scrollDirection()\n * *Added*: hs.settings.watchKey()\n * *Added*: hs.urlevent.openURL()\n * *Changed*: hs.ipc has been completely rewritten\n * *Changed*: hs.grid no longer places double-width margins between windows\n * *Changed*: hs.plist can now handle paths with ~ in them\n * *Changed*: hs.network.configuration:setLocation() can now accept UUIDs as well as names\n * *Changed*: hs.notify.warnAboutMissingFunctionTag can now be a function\n * *Changed*: The window entry in hs.layout tables can now also be a window object, or a function that returns a list of window objects\n```\n\n----------------------------------------\n\nTITLE: Fixing Bugs in Hammerspoon Extensions\nDESCRIPTION: Various bugs have been fixed in Hammerspoon extensions, including memory leaks, icon display issues, and functionality improvements in modules like hs.socket.udp() and hs.webview.toolbar.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- Fixed: Potential memory leak in hs.eventtap.event:getUnicodeString()\n-- Fixed: hs.chooser now shows icons correctly\n-- Fixed: hs.socket.udp() can now send binary data\n-- Fixed: delay in hs.webview.toolbar\n```\n\n----------------------------------------\n\nTITLE: Checking Secure Input Status in Lua using Hammerspoon\nDESCRIPTION: This function allows Hammerspoon to check if secure input is enabled in macOS. Secure input mode prevents keyboard monitoring when entering sensitive information like passwords.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2018-10-19-0.9.73.md#2025-04-16_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhs.eventtap.isSecureInputEnabled()\n```\n\n----------------------------------------\n\nTITLE: PList String Reading Operation\nDESCRIPTION: New API method for reading string values from property lists using hs.plist.readString(). Provides functionality for accessing plist data.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2019-12-27-0.9.77.md#2025-04-16_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nhs.plist.readString()\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - Hammerspoon 0.9.51\nDESCRIPTION: Release notes document listing core changes and extension updates including crash fixes, API improvements, and new features across various Hammerspoon modules.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2016-12-25-0.9.51.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.51\npermalink: /releasenotes/0.9.51.html\n---\n\nMinimum OS X version: 10.10\n\n## Core\n * Objective C exceptions that happen inside Lua callbacks should no longer cause Hammerspoon to exit.\n * Fixed a potential crash in the About window (seriously)\n * The `rebuild.sh` script documented in CONTRIBUTING.md, for doing self-signed local builds of Hammerspoon, is now included in the `scripts/` directory\n\n## Extensions\n\n * *Fixed*: Fixed a potential crash in hs.application.getMenuStructure()\n * *Fixed*: Fixed a potential crash in hs.styledtext\n * *Fixed*: Fixed a potential crash in hs.keycodes\n * *Fixed*: Fixed a potential crash in hs.webview\n * *Fixed*: hs.drawing should be more resistant against crashing when given impossible sizeRect arguments\n * *Fixed*: hs.chooser should be more resistant against crashing when receiving unusual events\n * *Fixed*: hs.chooser should no longer crash when no rows are displayed, but a selection event occurs\n * *Fixed*: hs.chooser should no longer leak Lua function references\n * *Fixed*: hs.application.getMenuStructure() now correctly reports the enabled state of menu items\n * *Fixed*: Fixed a crash in hs.audiodevice watchers that only occurred with certain third party audio hardware\n * *Changed*: hs.eventtap functions now have a configurable delay between sending events\n * *Changed*: hs.chooser now looks better when a choice has no subText\n * *Changed*: hs.chooser:selectedRow() can now be use to manually select a row\n * *Changed*: hs.chooser now logs Lua callback exceptions to the Hammerspoon Console\n * *Changed*: hs.chooser right click callbacks now receive an argument containing the row that was clicked on\n * *Changed*: hs.chooser will now update its search results if you use the API to change the search query or choices)\n * *Changed*: hs.wifi has been modernised to newer macOS APIs and now allows watchers to know when many more wireless properties change (e.g. roaming between BSSIDs, link quality changes, etc.\n * *Added*: hs.spotlight\n * *Added*: hs.network.ping\n * *Added*: hs.deezer\n * *Added*: hs.watchable\n * *Added*: hs.canvas\n * *Added*: hs.caffeinate.sessionProperties()\n * *Added*: hs.alert style can now specify the corner radius\n * *Added*: hs.webview windows can now have shadows\n * *Added*: hs.chooser:selectedRowContents()\n * *Added*: hs.screen.accessibilitySettings()\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Hammerspoon 0.9.24\nDESCRIPTION: Changelog documenting improvements to hs.drawing API functionality, new rectangle support, crash logging capabilities, and window management enhancements.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2015-02-28-0.9.24.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.24\npermalink: /releasenotes/0.9.24.html\n---\n\nMinimum OS X version: 10.8\n\n## Core\n\n## Extensions\n * *Fixed*: hs.drawing stroke/fill API calls should now perform more like they claim to\n * *Added*: hs.drawing now supports rectangles\n * *Added*: hs.crash.dumpCLIBS() and hs.crash.crashLog() to allow Lua code to leave logging breadcrumbs in Crashalytics reports\n * *Added*: hs.window:zoomButtonRect() to make it possible to easily find an area of titlebar to synthesise mouse events onto\n```\n\n----------------------------------------\n\nTITLE: Changing Existing Hammerspoon Functionality\nDESCRIPTION: Some existing Hammerspoon functionality has been changed or improved, including moving the WebSocket implementation and adding support for additional StreamDeck models.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2020-09-20-0.9.79.md#2025-04-16_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- hs.http.websocket is now hs.websocket\n-- hs.streamdeck now supports XL and Mini decks\n-- MJConfigFile preference option now resolves symlinks\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Number Generation in Lua Environment\nDESCRIPTION: Default initialization of random number generation in Hammerspoon's Lua environment using math.randomseed(). This update removes the need for manual random seed initialization in user configurations.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2019-12-27-0.9.77.md#2025-04-16_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nmath.randomseed()\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Hammerspoon 0.9.35 Release Notes\nDESCRIPTION: YAML frontmatter for a Jekyll-based website post, specifying the layout, title, and permalink for the Hammerspoon 0.9.35 release notes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2015-07-20-0.9.35.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.35\npermalink: /releasenotes/0.9.35.html\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Front Matter in YAML\nDESCRIPTION: YAML front matter configuration for a Jekyll blog post, defining the layout, title and permalink for the 0.9.18 release notes page.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2015-01-18-0.9.18.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.18\npermalink: /releasenotes/0.9.18.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Jekyll Post in Markdown\nDESCRIPTION: YAML front matter block defining metadata for a Jekyll blog post, including layout, title, and permalink.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2015-11-17-0.9.43.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.43\npermalink: /releasenotes/0.9.43.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Jekyll in Markdown\nDESCRIPTION: This code snippet defines the YAML front matter for a Jekyll blog post. It specifies the layout, title, and permalink for the page.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2014-12-22-0.9.13.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.13\npermalink: /releasenotes/0.9.13.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter for Hammerspoon Release Notes\nDESCRIPTION: This YAML front matter sets up the Jekyll page layout, title, and permalink for the Hammerspoon 0.9.8 release notes.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2014-10-31-0.9.8.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.8\npermalink: /releasenotes/0.9.8.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Post Metadata\nDESCRIPTION: YAML front matter block defining the Jekyll post layout, title and permalink for the release notes page.\nSOURCE: https://github.com/Hammerspoon/hammerspoon.github.io/blob/master/_posts/2014-11-06-0.9.10.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: post\ntitle: 0.9.10\npermalink: /releasenotes/0.9.10.html\n---\n```"
  }
]