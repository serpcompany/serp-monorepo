[
  {
    "owner": "teableio",
    "repo": "teable",
    "content": "TITLE: Starting Teable Development Server\nDESCRIPTION: Commands to navigate to the backend directory and start the development server which runs both frontend and backend with hot reload.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/nestjs-backend\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Teable Development Server\nDESCRIPTION: Commands to start the development server for Teable, focusing on the backend which automatically starts the frontend server.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/nestjs-backend\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Commands for Teable Project\nDESCRIPTION: Commands to enable the package manager and install project dependencies for the Teable project.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Enable the Package Manager\ncorepack enable\n\n# Install project dependencies\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Teable Development Environment\nDESCRIPTION: Steps to set up the development environment for Teable, including enabling corepack and installing project dependencies using pnpm.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Enabling the Help Management Package Manager\ncorepack enable\n\n# Install project dependencies\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Prisma in Teable Project\nDESCRIPTION: This command navigates to the db-main-prisma package directory and runs the Prisma database push command to initialize or update the database schema.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/db-main-prisma/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/db-main-prisma\nyarn prisma-db-push\n```\n\n----------------------------------------\n\nTITLE: Initializing Database for Teable Project\nDESCRIPTION: This command uses Prisma to push the database schema to the configured database, creating or updating tables as needed.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/db-main-prisma/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn prisma-db-push\n```\n\n----------------------------------------\n\nTITLE: Database Migration Workflow Commands\nDESCRIPTION: Series of commands for managing database schema changes using Prisma ORM, including generating schemas and creating migration files.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake gen-prisma-schema\n```\n\n----------------------------------------\n\nTITLE: Starting Teable Plugin Development Server\nDESCRIPTION: Steps to build packages and start the plugin development server for previewing and developing plugins.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# build packages\npnpm build:packages\n\n# start plugin development server\ncd plugins\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating Teable Development Environment\nDESCRIPTION: Commands to update dependencies and database schema after pulling the latest code.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Update dependencies to latest versions\npnpm install\n\n# Update database schema to latest version\nmake switch-db-mode\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Database Service for Teable Project\nDESCRIPTION: This command starts the database service defined in the docker-compose.yml file, which is used for local development of the Teable project.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/db-main-prisma/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up database\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Teable Frontend\nDESCRIPTION: Commands to create a local environment configuration file for the Next.js frontend application.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/nextjs-app\ncp .env.development .env.development.local\n```\n\n----------------------------------------\n\nTITLE: Deploying Teable with Docker Compose\nDESCRIPTION: Commands to deploy Teable using Docker Compose. It involves changing to the docker examples directory and running docker-compose up.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd dockers/examples/standalone/\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Database Mode Selection for Teable\nDESCRIPTION: Command to switch between SQLite and PostgreSQL database modes in the Teable project.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Switch between SQLite and PostgreSQL\nmake switch-db-mode\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Files\nDESCRIPTION: Command to create migration files after modifying Prisma schema.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake db-migration\n```\n\n----------------------------------------\n\nTITLE: Defining Base Data Structures in TypeScript\nDESCRIPTION: Core interfaces defining the structure for topological sorting items and field types, including dependencies and link relationships.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ITopologicalItem {\n  id: string;\n  dependencies: string[];\n}\n\ninterface IField {\n  type: \"other\" | \"link\";\n}\n\ntype IFieldMap = { [id: string]: IField };\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Types for Teable Project\nDESCRIPTION: This command generates TypeScript types based on the Prisma schema, which are used for type-safe database operations in the Teable project.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/db-main-prisma/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn prisma generate\n```\n\n----------------------------------------\n\nTITLE: Switching Database Mode in Teable\nDESCRIPTION: Command to switch between supported databases (sqlite and postgres) during development.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake switch-db-mode\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Command to apply database migrations after creating migration files.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake switch-db-mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Metadata and Settings\nDESCRIPTION: TypeScript configuration for a plugin, defining its ID, name, description, supported positions, internationalization options, and visual assets.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginPosition } from '@teable/openapi';\nimport type { IOfficialPluginConfig } from './types';\n\nexport const myPluginConfig: IOfficialPluginConfig = {\n  id: 'plg-my-plugin',\n  name: 'My Plugin',\n  description: 'Plugin description',\n  detailDesc: `Detailed description with markdown support`,\n  helpUrl: 'https://help.teable.io',\n  positions: [PluginPosition.Dashboard],\n  i18n: {\n    zh: {\n      name: '我的插件',\n      helpUrl: 'https://help.teable.cn',\n      description: '插件描述',\n      detailDesc: '详细描述',\n    },\n  },\n  logoPath: 'static/plugin/my-plugin.png',\n  pluginUserId: 'plgmypluginuser',\n  avatarPath: 'static/plugin/my-plugin.png',\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Environment Variables for Teable\nDESCRIPTION: Optional steps to create a local environment file for custom configurations in the NextJS app.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/nextjs-app\ncp .env.development .env.development.local\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Bridge Methods\nDESCRIPTION: TypeScript implementation of bridge methods that enable communication between the plugin and the main application, handling actions like record expansion and storage updates.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst methods: IParentBridgeMethods = {\n  expandRecord: (recordIds) => {\n    console.log('expandRecord', recordIds);\n  },\n  updateStorage: (storage) => {\n    return updateDashboardPluginStorage(baseId, positionId, pluginInstallId, storage).then(\n      (res) => res.data.storage ?? {}\n    );\n  },\n  getAuthCode: () => {\n    return pluginGetAuthCode(pluginId, baseId).then((res) => res.data);\n  },\n  expandPlugin: () => {\n    onExpand?.();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Teable\nDESCRIPTION: Commands for setting up and running end-to-end tests in the NestJS backend.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# First-time setup\npnpm pre-test-e2e\n\n# Run all E2E tests\npnpm test-e2e\n\n# Run specific test file\npnpm test-e2e [test-file]\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Page Structure in Next.js\nDESCRIPTION: TypeScript implementation of a plugin's main page component showing how to set up metadata, internationalization, and query client providers.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Metadata } from 'next';\nimport { EnvProvider } from '../../components/EnvProvider';\nimport { I18nProvider } from '../../components/I18nProvider';\nimport QueryClientProvider from '../../components/QueryClientProvider';\nimport { PageType } from '../../components/types';\nimport enCommonJson from '../../locales/chart/en.json';\nimport zhCommonJson from '../../locales/chart/zh.json';\nimport { Pages } from './components/Pages';\n\nexport async function generateMetadata({ searchParams }: Props): Promise<Metadata> {\n  const lang = searchParams.lang;\n  return {\n    title: lang === 'zh' ? '图表' : 'Chart',\n    icons: icon.src,\n  };\n}\n\nexport default async function Home(props: { searchParams: IPageParams }) {\n  return (\n    <main className=\"flex h-screen flex-col items-center justify-center\">\n      <EnvProvider>\n        <I18nProvider\n          lang={props.searchParams.lang}\n          resources={resources}\n          defaultNS=\"common\"\n          pageType={PageType.Chart}\n        >\n          <QueryClientProvider>\n            <Pages {...props.searchParams} />\n          </QueryClientProvider>\n        </I18nProvider>\n      </EnvProvider>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Teable\nDESCRIPTION: Commands for running unit tests across all packages or in specific packages.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Run all unit tests\npnpm g:test-unit\n\n# Run tests in specific package\ncd packages/[package-name]\npnpm test-unit\n\n# Run specific test file\npnpm test-unit [test-file]\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin Bridge in SDK\nDESCRIPTION: TypeScript function to initialize the plugin bridge, creating a communication channel between the plugin and the main application.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const initializeBridge = async () => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const pluginBridge = new PluginBridge();\n  const bridge = await pluginBridge.init();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any)._teable_plugin_bridge = bridge;\n  return bridge;\n};\n```\n\n----------------------------------------\n\nTITLE: Table Data Structures\nDESCRIPTION: Example data structures for tables A, B, and C showing relationships and foreign keys.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { id: \"idA1\", fieldA: \"A1\" },\n  { id: \"idA2\", fieldA: \"A2\" }\n];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { id: \"idB1\", fieldB: \"B1\", fieldLinkA: \"A1\", __fk_fieldLinkA: \"idA1\" },\n  { id: \"idB2\", fieldB: \"B2\", fieldLinkA: \"A1\", __fk_fieldLinkA: \"idA1\" }\n];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { id: \"idC1\", fieldC: \"C1\", fieldLinkB: \"A1\", __fk_fieldLinkB: \"idB1\" },\n  { id: \"idC2\", fieldC: \"C2\", fieldLinkB: \"A1\", __fk_fieldLinkB: \"idB1\" },\n  { id: \"idC3\", fieldC: \"C3\", fieldLinkB: \"A1\", __fk_fieldLinkB: \"idB2\" }\n];\n```\n\n----------------------------------------\n\nTITLE: Record Reference Example\nDESCRIPTION: Example showing how records reference each other through link fields.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrecordA1[fieldBLinkB] = recordB1[fieldB];\nrecordA2[fieldBLinkB] = recordB1[fieldB];\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Positions in TypeScript\nDESCRIPTION: Enum definition of supported plugin positions in the Teable application. Plugins can be integrated into either dashboard or view positions.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum PluginPosition {\n  Dashboard = 'dashboard',\n  View = 'view',\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Services with Script\nDESCRIPTION: Commands for deploying services using a deploy script, viewing current services, and configuring application updates.\nSOURCE: https://github.com/teableio/teable/blob/develop/dockers/examples/docker-swarm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Syntax: ./deploy.sh [service_type] [stack_name]\n./deploy.sh - example\n\n# To view the current services:\ndocker service ls\n\n# To deploy and configure updates for your application:\n./deploy.sh app example\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: Commands to initialize a Docker Swarm environment, with an optional advertise address specification.\nSOURCE: https://github.com/teableio/teable/blob/develop/dockers/examples/docker-swarm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker swarm init\n# Or specify the advertise address manually if needed:\n# docker swarm init --advertise-addr 192.168.99.100\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Teable\nDESCRIPTION: Commands for building Docker images locally for the Teable application, with options for specific platforms.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Build the main application image\ndocker build -f dockers/teable/Dockerfile -t teable:latest .\n\n# Build for a specific platform (e.g., amd64)\ndocker build --platform linux/amd64 -f dockers/teable/Dockerfile -t teable:latest .\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Directory Structure\nDESCRIPTION: Bash command showing the recommended directory structure for a new plugin, including components, main page file, and favicon.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsrc/app/my-plugin/\n├── components/\n├── page.tsx\n└── favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Topological Sort Structure\nDESCRIPTION: Data structure for topological sorting with table relationships and dependencies.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst topologicalOrder = [\n  { tableName: \"A\", fieldName: \"fieldA\", dependencies: [] },\n  {\n    tableName: \"B\",\n    fieldName: \"fieldLinkA\",\n    targetLinkField: \"__fk_fieldLinkA\",\n    linkedTable: \"A\",\n    dependencies: [\"fieldA\"]\n  },\n  {\n    tableName: \"C\",\n    fieldName: \"fieldLinkB\",\n    targetLinkField: \"__fk_fieldLinkB\",\n    linkedTable: \"B\",\n    dependencies: [\"fieldLinkA\"]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Complex Dependency Chain\nDESCRIPTION: Extended dependency chain showing multiple field relationships and their dependencies.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { id: \"fieldB\", dependencies: [], recordId: [\"b1\"] },\n  { id: \"fieldLinkB\", dependencies: [\"fieldB\"], recordId: [\"b1\"], targetRecordId: [\"a1\", \"a2\"] },\n  { id: \"fieldA\", dependencies: [\"fieldLinkB\"], recordId: [\"a1\", \"a2\"] },\n  { id: \"fieldLinkA\", dependencies: [\"fieldA\"], recordId: [\"a1\", \"a2\"], targetRecordId: [\"b1\"] }\n];\n```\n\n----------------------------------------\n\nTITLE: Simple Dependency Chain Example\nDESCRIPTION: Demonstrates a simple field dependency chain with record IDs and target records.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { id: \"fieldB\", dependencies: [], recordId: [\"b1\"] },\n  { id: \"fieldLinkB\", dependencies: [\"fieldB\"], recordId: [\"b1\"], targetRecordId: [\"a1\", \"a2\"] }\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Rolling Updates\nDESCRIPTION: Command to force a re-deployment of the current configuration for rolling updates.\nSOURCE: https://github.com/teableio/teable/blob/develop/dockers/examples/docker-swarm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker service update --force example_teable\n```\n\n----------------------------------------\n\nTITLE: Pushing Teable Docker Images to Docker Hub\nDESCRIPTION: Commands for tagging, logging in, and pushing Teable Docker images to Docker Hub.\nSOURCE: https://github.com/teableio/teable/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Tag your local image\ndocker tag teable:latest your-username/teable:latest\n\n# Login to Docker Hub\ndocker login\n\n# Push the image\ndocker push your-username/teable:latest\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Implementation\nDESCRIPTION: Implementation of one-to-many relationships with reverse references and relationship types.\nSOURCE: https://github.com/teableio/teable/blob/develop/apps/nestjs-backend/src/features/calculation/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst topoOrder = [\n  {\n    dbTableName: \"B\",\n    fieldName: \"oneToManyC\",\n    foreignKeyField: \"__fk_manyToOneB\",\n    relationship: Relationship.OneMany,\n    linkedTable: \"C\"\n  },\n  {\n    dbTableName: \"A\",\n    fieldName: \"oneToManyB\",\n    foreignKeyField: \"__fk_manyToOneA\",\n    relationship: Relationship.OneMany,\n    linkedTable: \"B\"\n  },\n  {\n    dbTableName: \"C\",\n    fieldName: \"manyToOneB\",\n    foreignKeyField: \"__fk_manyToOneB\",\n    relationship: Relationship.ManyOne,\n    linkedTable: \"B\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Shutdown Containers\nDESCRIPTION: Command to remove containers that are in a shutdown state within a specific stack.\nSOURCE: https://github.com/teableio/teable/blob/develop/dockers/examples/docker-swarm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm $(docker stack ps --no-trunc -f \"desired-state=shutdown\" --format \"{{.Name}}.{{.ID}}\" example)\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Swarm Service\nDESCRIPTION: Command to remove a deployed service stack from Docker Swarm.\nSOURCE: https://github.com/teableio/teable/blob/develop/dockers/examples/docker-swarm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack rm example\n```\n\n----------------------------------------\n\nTITLE: Plugin Project Directory Structure Overview\nDESCRIPTION: Bash representation of the plugin project directory structure showing how plugins are organized within a Next.js application.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nplugins/\n├── src/\n│   ├── app/\n│   │   ├── chart/              # Chart plugin\n│   │   │   ├── components/\n│   │   │   ├── page.tsx\n│   │   │   └── favicon.ico\n│   │   ├── sheet-form/         # Sheet Form plugin\n│   │   │   ├── components/\n│   │   │   ├── page.tsx\n│   │   │   └── favicon.ico\n│   ├── components/             # Shared components\n│   ├── locales/               # i18n translations\n│   │   ├── chart/\n│   │   │   ├── en.json\n│   │   │   └── zh.json\n│   │   └── sheet-form/\n│   │       ├── en.json\n│   │       └── zh.json\n│   └── types.ts\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Status Workflow\nDESCRIPTION: TypeScript enum defining the possible states of a plugin in its lifecycle, from development to publication.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum PluginStatus {\n  Developing = 'developing',\n  Reviewing = 'reviewing',\n  Published = 'published',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalization JSON for Plugins\nDESCRIPTION: JSON configuration showing how to structure translations for a plugin, with key-value pairs for UI elements in Chinese.\nSOURCE: https://github.com/teableio/teable/blob/develop/plugins/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"我的插件\",\n  \"description\": \"插件描述\",\n  \"actions\": {\n    \"save\": \"保存\",\n    \"cancel\": \"取消\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Markdown\nDESCRIPTION: Shows the directory structure of the Teable project, including apps, packages, and plugins directories with their respective licenses.\nSOURCE: https://github.com/teableio/teable/blob/develop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n.\n├── apps (AGPL 3.0)\n│   ├── nextjs-app          (front-end)\n│   └── nestjs-backend      (backend)\n├── packages (MIT)\n│   ├── common-i18n         (locales)\n│   ├── core                (share code and interface)\n│   ├── sdk                 (sdk for extensions)\n│   ├── db-main-prisma      (schema, migrations, prisma client)\n│   ├── eslint-config-bases (to shared eslint configs)\n│   └── ui-lib              (ui component)\n└── plugins (AGPL 3.0)      (custom plugins)\n```\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Storybook Introduction Page\nDESCRIPTION: Defines the styling for the introduction page including responsive layouts, link items, typography, and visual effects. Includes media queries for responsive design across different screen sizes.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/ui-lib/src/_stories/Introduction.stories.mdx#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n  .subheading {\n    --mediumdark: '#999999';\n    font-weight: 900;\n    font-size: 13px;\n    color: #999;\n    letter-spacing: 6px;\n    line-height: 24px;\n    text-transform: uppercase;\n    margin-bottom: 12px;\n    margin-top: 40px;\n  }\n\n  .link-list {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n    row-gap: 10px;\n  }\n\n  @media (min-width: 620px) {\n    .link-list {\n      row-gap: 20px;\n      column-gap: 20px;\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n\n  @media all and (-ms-high-contrast:none) {\n  .link-list {\n      display: -ms-grid;\n      -ms-grid-columns: 1fr 1fr;\n      -ms-grid-rows: 1fr 1fr;\n    }\n  }\n\n  .link-item {\n    display: block;\n    padding: 20px 30px 20px 15px;\n    border: 1px solid #00000010;\n    border-radius: 5px;\n    transition: background 150ms ease-out, border 150ms ease-out, transform 150ms ease-out;\n    color: #333333;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .link-item:hover {\n    border-color: #1EA7FD50;\n    transform: translate3d(0, -3px, 0);\n    box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n  }\n\n  .link-item:active {\n    border-color: #1EA7FD;\n    transform: translate3d(0, 0, 0);\n  }\n\n  .link-item strong {\n    font-weight: 700;\n    display: block;\n    margin-bottom: 2px;\n  }\n  \n  .link-item img {\n    height: 40px;\n    width: 40px;\n    margin-right: 15px;\n    flex: none;\n  }\n\n  .link-item span {\n    font-size: 14px;\n    line-height: 20px;\n  }\n\n  .tip {\n    display: inline-block;\n    border-radius: 1em;\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 700;\n    background: #E7FDD8;\n    color: #66BF3C;\n    padding: 4px 12px;\n    margin-right: 10px;\n    vertical-align: top;\n  }\n\n  .tip-wrapper {\n    font-size: 13px;\n    line-height: 20px;\n    margin-top: 40px;\n    margin-bottom: 40px;\n  }\n\n  .tip-wrapper code {\n    font-size: 12px;\n    display: inline-block;\n  }\n```\n\n----------------------------------------\n\nTITLE: Storybook Metadata Configuration\nDESCRIPTION: Sets up the Storybook metadata with a title of 'Introduction' using the Meta component.\nSOURCE: https://github.com/teableio/teable/blob/develop/packages/ui-lib/src/_stories/Introduction.stories.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Introduction\" />\n```"
  }
]