[
  {
    "owner": "commercetools",
    "repo": "commercetools-api-reference",
    "content": "TITLE: Creating POST Endpoint Definition\nDESCRIPTION: Example of a RAML POST endpoint definition for orders resource with request/response bodies.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: raml\nCODE:\n```\ntype:\n  baseDomain:\n    resourceType: Order\n    resourceQueryType: OrderPagedQueryResponse\n    resourceDraft: OrderFromCartDraft\n    whereExample: 'customerEmail = \"john.doe@example.com\"'\n    sortExample: createdAt asc\n(updateable): Order\n(deleteable): Order\n(createable): OrderFromCartDraft\ndescription:\n  An order can be created from a order, usually after a checkout process has\n  been completed.\npost:\n  securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]\n  is:\n    - conflicting\n  description: |\n    Creates an order from a Cart.\n    The cart must have a shipping address set before creating an order.\n    When using the Platform TaxMode, the shipping address is used for tax calculation.\n  body:\n    application/json:\n      example: !include ../examples/order-create.example.json\n  responses:\n    201:\n      body:\n        application/json:\n          example: !include ../examples/order.example.json\n```\n\n----------------------------------------\n\nTITLE: RAML Trait Usage Example\nDESCRIPTION: Example showing how to use traits in RAML for price selection functionality.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_29\n\nLANGUAGE: raml\nCODE:\n```\nget:\n  is:\n    - priceSelecting\n```\n\n----------------------------------------\n\nTITLE: Creating Query Endpoint Definition\nDESCRIPTION: Example of a RAML query endpoint definition for carts resource with query parameters and response types.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: raml\nCODE:\n```\ntype:\n  baseDomain:\n    resourceType: Cart\n    resourceQueryType: CartPagedQueryResponse\n    resourceDraft: CartDraft\n    whereExample: 'customerEmail = \"john.doe@example.com\"'\n    sortExample: createdAt asc\n(updateable): Cart\n(deleteable): Cart\n(createable): CartDraft\ndescription: A shopping cart holds product variants and can be ordered.\nget:\n  securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]\n  queryParameters:\n    customerId?:\n      type: string\n  responses:\n    200:\n      body:\n        application/json:\n          example: !include ../examples/carts.example.json\n```\n\n----------------------------------------\n\nTITLE: Defining Number Field in RAML\nDESCRIPTION: Example of defining a number field with validation constraints for access token validity duration.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: raml\nCODE:\n```\naccessTokenValiditySeconds?:\n  type: number\n  format: int32\n  minimum: 3600\n  maximum: 604800\n  default: 172800\n```\n\n----------------------------------------\n\nTITLE: Creating Update Endpoint Definition\nDESCRIPTION: Example of a RAML update endpoint definition using URI parameters for cart resources.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: raml\nCODE:\n```\n/{ID}:\n  (methodName): withId\n  type:\n    baseResource:\n      uriParameterName: ID\n      resourceType: Cart\n      resourceUpdateType: CartUpdate\n  post:\n    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]\n    body:\n      application/json:\n        example: !include ../examples/cart-update.example.json\n    responses:\n      200:\n        body:\n          application/json:\n            example: !include ../examples/cart.example.json\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Types with Discriminators in RAML\nDESCRIPTION: Demonstrates the proper setup of polymorphic types in RAML using discriminators. Shows a valid implementation with Foo/SubFoo using a discriminator property, and an invalid implementation with InvalidBar/SubBar lacking proper discriminator configuration.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_56\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: object\n    discriminator: type\n    properties:\n      type: string\n  SubFoo:\n    discriminatorValue: sub\n    type: Foo\n  InvalidBar:\n    type: object\n    description: InvalidBar\n    properties:\n      name: string\n  SubBar:\n    description: SubBar\n    type: InvalidBar\n  SubBar2:\n    type: InvalidBar\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in HTTP API RAML\nDESCRIPTION: Shows how to use annotations in the HTTP API RAML spec (api-specs/api folder). Annotations are used to provide additional metadata for API elements.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_20\n\nLANGUAGE: raml\nCODE:\n```\n  (placeholderParam):\nor\n  (markDeprecated): true\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URI in RAML\nDESCRIPTION: Defines the base URI pattern and available regions for the API endpoint.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: raml\nCODE:\n```\nbaseUri: https://api.{region}.commercetools.com  // This is the general baseUri\nbaseUriParameters:\n  region:\n    type: string\n    enum:             // here below are listed all of the regions available\n      - us-east-2.aws\n      - europe-west1.gcp\n```\n\n----------------------------------------\n\nTITLE: RAML Security Scheme Configuration\nDESCRIPTION: Security scheme configuration for OAuth2 authentication including authorization URIs and scope definitions.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_28\n\nLANGUAGE: raml\nCODE:\n```\nsettings:\n  authorizationUri: https://auth.europe-west1.gcp.commercetools.com/oauth/token\n  accessTokenUri: https://auth.europe-west1.gcp.commercetools.com/oauth/token\n  authorizationGrants: [client_credentials]\n  scopes:\n    - 'manage_project:{projectKey}'\n    - 'manage_products:{projectKey}'\n    - 'view_products:{projectKey}'\n```\n\n----------------------------------------\n\nTITLE: Creating Method Endpoint in RAML\nDESCRIPTION: Example of defining a new API method endpoint with password token validation, including resource type definition and HTTP GET response specification.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: raml\nCODE:\n```\n/password-token={passwordToken}:\n  (methodName): withPasswordToken\n  type:\n    baseResource:\n      uriParameterName: passwordToken\n      resourceType: Customer\n  get:\n    displayName: Get customer by password verification token\n    securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]\n    responses:\n      200:\n        body:\n          application/json:\n            example: !include ../examples/customer.example.json\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in Connect API RAML\nDESCRIPTION: Shows how to use annotations in other API specs like Connect API. It demonstrates importing annotation types and using them with the appropriate namespace.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_21\n\nLANGUAGE: raml\nCODE:\n```\nuses:\n  annotations: annotationTypes/annotations.raml\n  postman: annotationTypes/postman.raml\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Endpoint Definition\nDESCRIPTION: Example of a RAML delete endpoint definition using key as URI parameter for cart resources.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: raml\nCODE:\n```\n/key={key}:\n  (methodName): withKey\n  type:\n    baseResource:\n      uriParameterName: key\n      resourceType: Cart\n      resourceUpdateType: CartUpdate\n  delete:\n    is:\n      - dataErasure\n    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]\n    responses:\n      200:\n        body:\n          application/json:\n            example: !include ../examples/cart.example.json\n```\n\n----------------------------------------\n\nTITLE: Adding Scope to OAuth2 Settings in RAML\nDESCRIPTION: Shows how to add a new scope to the OAuth2 security scheme settings. This defines which scopes are available for the authorization server.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_19\n\nLANGUAGE: raml\nCODE:\n```\nsettings:\n  authorizationUri: https://auth.europe-west1.gcp.commercetools.com/oauth/token\n  accessTokenUri: https://auth.europe-west1.gcp.commercetools.com/oauth/token\n  authorizationGrants: [client_credentials]\n  scopes:\n    - 'manage_project:{projectKey}'\n    - 'manage_products:{projectKey}'\n    - 'view_products:{projectKey}'\n    - 'manage_orders:{projectKey}'\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Set Custom Field Action\nDESCRIPTION: JSON example showing the structure of a setCustomField update action. It includes the action type, field name, and field value.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"setCustomField\",\n  \"name\": \"ExampleStringTypeField\",\n  \"value\": \"TextString\"\n}\n```\n\n----------------------------------------\n\nTITLE: RAML Endpoint Deprecation Example\nDESCRIPTION: Demonstrates how to mark endpoints, methods and parameters as deprecated using the markDeprecated annotation in RAML.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_27\n\nLANGUAGE: raml\nCODE:\n```\n(markDeprecated): true\n/attributes:\n  (markDeprecated): true\n  post:\n    (markDeprecated): true\n    body:\n      application/json:\n        type: missing-data.MissingAttributesSearchRequest\n    responses:\n      202:\n        body:\n          application/json:\n            type: common.TaskToken\n            example: !include ../examples/missing-data-token.json\n  /status:\n    (markDeprecated): true\n    /{taskId}:\n      (markDeprecated): true\n      (methodName): withTaskId\n      uriParameters:\n        taskId:\n        type: string\n      get:\n        (markDeprecated): true\n        responses:\n          200:\n            body:\n              application/json:\n                type: missing-data.MissingDataTaskStatus\n                example: !include ../examples/missing-data-response.json\n```\n\n----------------------------------------\n\nTITLE: Adding Scope to HTTP Method in RAML\nDESCRIPTION: Shows how to add a new scope to an HTTP method in the resource domain file. This defines which OAuth scopes are required to access the endpoint.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_18\n\nLANGUAGE: raml\nCODE:\n```\nget:\n  securedBy:\n    [\n      oauth_2_0:\n        {\n          scopes:\n            [\n              'manage_project:{projectKey}',\n              'view_products:{projectKey}',\n              'view_categories:{projectKey}',\n            ],\n        },\n```\n\n----------------------------------------\n\nTITLE: Defining Set Custom Field Update Action in RAML\nDESCRIPTION: Defines the RAML data type for the Set Custom Field update action. This type extends the base update action type and includes properties for the field name and value.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_12\n\nLANGUAGE: raml\nCODE:\n```\n#%RAML 1.0 DataType\n(package): <Resource>\ntype: <Resource>UpdateAction\ndisplayName: <Resource>Set<embeddedObject>CustomFieldAction\ndiscriminatorValue: <id for the update action>\nexample: !include ../../../examples/<Resource>/<Resource>Set<embeddedObject>CustomFieldAction.json\nproperties:\n  name:\n    type: string\n  value?:\n    type: CustomFieldValue\n```\n\n----------------------------------------\n\nTITLE: Defining Set Custom Type Update Action in RAML\nDESCRIPTION: Defines the RAML data type for the Set Custom Type update action. This action allows setting the type and fields of a custom field container.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_13\n\nLANGUAGE: raml\nCODE:\n```\n#%RAML 1.0 DataType\n(package): <Resource>\ntype: <Resource>UpdateAction\ndisplayName: <Resource>Set<embeddedObject>CustomTypeAction\ndiscriminatorValue: <id for the update action>\nexample: !include ../../../examples/<Resource>/<Resource>Set<embeddedObject>CustomTypeAction.json\nproperties:\n  type?:\n    type: TypeResourceIdentifier\n  fields?:\n    type: FieldContainer\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Set Custom Type Action\nDESCRIPTION: JSON example showing the structure of a setCustomType update action. It includes type reference with ID and fields definition.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"setCustomType\",\n  \"type\": {\n    \"id\": \"{{type-id}}\",\n    \"typeId\": \"type\"\n  },\n  \"fields\": {\n    \"exampleStringTypeField\": \"TextString\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Type ID to Enumeration in RAML\nDESCRIPTION: Shows how to add a new resource type ID to the enumeration in ResourceTypeId.raml file, including enum values and descriptions with documentation links.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nenum:\n  - <resourceTypeID_1>\n  - <resourceTypeID_2>\n(enumDescriptions):\n  <resourceTypeID_1>: |\n    [<Resource>](ctp:api:type:<Resource>)\n  <resourceTypeID_2>: |\n    [<Object>](ctp:api:type:Object) on [<Resource>](ctp:api:type:<Resource>)\n```\n\n----------------------------------------\n\nTITLE: Creating Message Payload in RAML\nDESCRIPTION: Definition of a message payload type for category creation events, extending the base MessagePayload type with category-specific properties.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: raml\nCODE:\n```\n#%RAML 1.0 DataType\n(package): Message\ntype: MessagePayload\ndisplayName: CategoryCreatedMessagePayload\ndiscriminatorValue: CategoryCreated\nproperties:\n  category:\n    type: Category\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Resource with Custom Fields\nDESCRIPTION: JSON example showing how custom fields appear in a resource. It includes the type reference and field values.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n  \"custom\": {\n    \"type\": {\n      \"typeId\": \"type\",\n      \"id\": \"3ae9bcca-df23-443e-bd22-0c592f9694fa\"\n    },\n    \"fields\": {\n      \"offer_name\": \"SuperMax\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Message Type in RAML\nDESCRIPTION: Definition of a new message type for category creation events, extending the base Message type with category-specific properties.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: raml\nCODE:\n```\n#%RAML 1.0 DataType\n(package): Message\ntype: Message\ndisplayName: CategoryCreatedMessage\ndiscriminatorValue: CategoryCreated\nproperties:\n  category:\n    type: Category\n```\n\n----------------------------------------\n\nTITLE: Defining String Field in RAML\nDESCRIPTION: Example of defining a string field with pattern matching and length constraints.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_9\n\nLANGUAGE: raml\nCODE:\n```\nkey?:\n  type: string\n  pattern: ^[A-Za-z0-9_-]+$\n  minLength: 2\n  maxLength: 256\n```\n\n----------------------------------------\n\nTITLE: Defining Object Field in RAML\nDESCRIPTION: Example of defining an object field for geographical location data using GeoJSON type.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_10\n\nLANGUAGE: raml\nCODE:\n```\ngeoLocation?:\n  type: GeoJson\n  description: |\n    GeoJSON geometry object encoding the geo location.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to Resource Type Definition in RAML\nDESCRIPTION: Defines a custom field in a resource type definition file using RAML. The field is marked as optional with a type of CustomFields and includes a description placeholder.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_11\n\nLANGUAGE: raml\nCODE:\n```\n  custom?:\n    type: CustomFields\n    description: Custom Fields of this <object>.\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryParameterPlaceholderAnnotationRule for Parameter Templates\nDESCRIPTION: Demonstrates how to define query parameters with placeholders using the placeholderParam annotation. This rule ensures proper template definitions.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_46\n\nLANGUAGE: raml\nCODE:\n```\nqueryParameters:\n  /text\\.[a-z]{2}(-[A-Z]{2})?/:\n    (placeholderParam):\n      paramName: text\n      template: text.<locale>\n      placeholder: locale\n```\n\n----------------------------------------\n\nTITLE: RAML Update Action Definition\nDESCRIPTION: Definition of update actions and properties for cart discount updates.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_30\n\nLANGUAGE: raml\nCODE:\n```\n(package): CartDiscount\ntype: object\ndisplayName: CartDiscountUpdate\nproperties:\n  version:\n    type: number\n    format: int64\n  actions:\n    type: array\n    items: CartDiscountUpdateAction\n```\n\n----------------------------------------\n\nTITLE: RAML Common Type Definition\nDESCRIPTION: Definition of a common localized string type with regex validation for language codes.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_31\n\nLANGUAGE: raml\nCODE:\n```\n(package): Common\ndisplayName: LocalizedString\ntype: object\n(asMap):\n  key: string\n  value: string\nproperties:\n  /^[a-z]{2}(-[A-Z]{2})?$/:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Using asMap Annotation for Key-Value Mapping in RAML\nDESCRIPTION: Shows how to use the asMap annotation for key-value mapping, especially for properties with regex patterns like localized fields.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_26\n\nLANGUAGE: raml\nCODE:\n```\n(asMap):\n  key: string\n  value: string\nproperties:\n  /^[a-z]{2}(-[A-Z]{2})?$/:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Implementing NestedTypeRule for Type Structure\nDESCRIPTION: Shows how to properly define object and array types without nesting, as nested types are forbidden. This rule ensures clean type definitions.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_41\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  FooObject:\n    type: object\n    properties:\n      meta:\n        type: object\n        description: valid\n  Bar:\n    type: object\n    properties:\n      valid: string\n      validBaz: Baz\n  FooArray:\n    type: object\n    properties:\n      validArr:\n        type: string[]\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Parameter Annotation in RAML\nDESCRIPTION: Shows how to define a query parameter with a regex pattern using the placeholderParam annotation. This is useful for parameters like localized text fields.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_25\n\nLANGUAGE: raml\nCODE:\n```\nqueryParameters:\n  /text\\.[a-z]{2}(-[A-Z]{2})?/:\n    (placeholderParam):\n      paramName: text\n      template: text.<locale>\n      placeholder: locale\n```\n\n----------------------------------------\n\nTITLE: Using Identifier Annotation in RAML\nDESCRIPTION: Shows how to specify a field as the main identifier using the identifier annotation. This is typically used on the id field.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_23\n\nLANGUAGE: raml\nCODE:\n```\n  id:\n    (identifier): true\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Using Element Identifier Annotation in RAML\nDESCRIPTION: Shows how to use the elementIdentifier annotation in combination with the identifier annotation when the key is not identical to the id.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_24\n\nLANGUAGE: raml\nCODE:\n```\n  name:\n    (identifier): true\n    (elementIdentifier): true\n    type: string\n    description: ''\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertyPluralRule for Array Properties\nDESCRIPTION: Demonstrates that array property names should be in plural form according to English grammar rules. This ensures consistent naming of collection properties.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_44\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: object\n    properties:\n      validItems: string[]\n      money: string[]\n```\n\n----------------------------------------\n\nTITLE: Running Generate Postman Command Locally\nDESCRIPTION: Command to generate Postman Collections locally from the commercetools-docs repository. This bash command creates collection.json and template.json files for various commercetools APIs.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/generate-a-postman-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn run generate-postman\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Postman Collection Generation\nDESCRIPTION: Commands to resolve errors when generating Postman Collections locally. First installs necessary dependencies with yarn install, then runs the generate-postman script.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/generate-a-postman-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n\nyarn run generate-postman\n```\n\n----------------------------------------\n\nTITLE: Implementing NamedBodyTypeRule for API Method Bodies\nDESCRIPTION: Demonstrates how to define body types for both requests and responses in API methods. This rule ensures all bodies are properly typed.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_39\n\nLANGUAGE: raml\nCODE:\n```\nget:\n  body:\n    application/json:\n      example: !include ../examples/cart-create.example.json\n  responses:\n    201:\n      body:\n        application/json:\n          example: !include ../examples/cart.example.json\n```\n\n----------------------------------------\n\nTITLE: Implementing PostBodyRule for POST Method Bodies\nDESCRIPTION: Shows how to properly define request bodies for POST methods, complementing the NamedBodyType rule. This ensures proper request typing.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_43\n\nLANGUAGE: raml\nCODE:\n```\n/categories:\n  get:\n  post:\n    body:\n      application/json:\n        type: object\n```\n\n----------------------------------------\n\nTITLE: Implementing SdkBaseUriRule for API Configuration\nDESCRIPTION: Demonstrates the requirement to define an sdkBaseUri annotation alongside the baseUri. This ensures proper SDK configuration.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_50\n\nLANGUAGE: raml\nCODE:\n```\nannotationTypes:\n  sdkBaseUri: string\n\nbaseUri: https://api.{region}.commercetools.com\n(sdkBaseUri): https://api.europe-west1.commercetools.com\nbaseUriParameters:\n```\n\n----------------------------------------\n\nTITLE: Implementing SuccessBodyRule for API Response Bodies\nDESCRIPTION: Demonstrates the requirement to define body types for successful responses in API methods. This ensures all success responses are properly typed.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_52\n\nLANGUAGE: raml\nCODE:\n```\n/categories:\n  get:\n    responses:\n      200:\n        body:\n          application/json:\n            type: object\n  post:\n    responses:\n      201:\n        body:\n          application/json:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Implementing UriParameterDeclaredRule for Resource Parameters\nDESCRIPTION: Shows the requirement to declare URI parameters in resources. This rule ensures all path parameters are properly documented.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_55\n\nLANGUAGE: raml\nCODE:\n```\nresourceTypes:\n    base:\n        uriParameters:\n            <<uriParameterName>>:\n                type: string\n        get:\n```\n\n----------------------------------------\n\nTITLE: Defining Float Properties in RAML\nDESCRIPTION: Shows how to properly define float number properties in RAML specifications. This approach ensures correct parsing by the RAML transformer.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/history/README.md#2025-04-23_snippet_0\n\nLANGUAGE: raml\nCODE:\n```\nproperties:\n  floatProperty?: number\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Properties in RAML\nDESCRIPTION: Demonstrates the proper way to define integer properties in RAML with type and format specifications. This approach ensures compatibility with RAML transformation tools.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/history/README.md#2025-04-23_snippet_1\n\nLANGUAGE: raml\nCODE:\n```\nproperties:\n  integerProperty:\n    description: integer description\n    type: integer\n    format: int64\n```\n\n----------------------------------------\n\nTITLE: Example of Using Namespace-Prefixed Annotations\nDESCRIPTION: Shows how to use annotations with their namespace prefix in APIs where namespaces are defined in the api.raml file.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_22\n\nLANGUAGE: raml\nCODE:\n```\n  (annotations.placeholderParam):\nor\n  (annotations.markDeprecated): true\n```\n\n----------------------------------------\n\nTITLE: Implementing AsMapRule for RAML Type Validation\nDESCRIPTION: Shows how to properly annotate properties with 'asMap' when the property name starts and ends with '/'. This rule ensures map-like properties are correctly identified.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_32\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  LocalizedString:\n    type: object\n    (asMap):\n        key: string\n        value: string\n    properties:\n      /^[a-z]{2}$/: string\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscriminatorNameRule for Object Type Discrimination\nDESCRIPTION: Demonstrates how to properly set up a discriminator value for object types. This rule verifies the discriminator is set and contains the correct value.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_36\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  FooUpdateAction:\n    type: object\n    discriminator: type\n    properties:\n      type: string\n  BarFoo:\n    type: FooUpdateAction\n    discriminatorValue: bar\n```\n\n----------------------------------------\n\nTITLE: Implementing DiscriminatorParentRule for Type Discrimination\nDESCRIPTION: Illustrates that discriminator type must be set at the attribute level and not as a parent. The rule ensures discriminator types are properly defined.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_37\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: object\n    discriminator: type\n    properties:\n      type: string\n  Baz:\n    type: object\n    properties:\n      type: string\n  FooBar:\n    discriminator: type\n    properties:\n      type: string\n  FooBaz:\n    discriminator: type\n    type: Foos\n    properties:\n      type: string\n  Foos:\n    properties:\n      id: string\n```\n\n----------------------------------------\n\nTITLE: Implementing FilenameRule for Type Inclusion\nDESCRIPTION: Shows how new RAML files must be included in types.raml with the proper domain/package structure. This ensures consistent organization of type definitions.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_38\n\nLANGUAGE: raml\nCODE:\n```\nFoo: !include foo/FooBar.raml\n```\n\n----------------------------------------\n\nTITLE: Implementing NamedStringEnumRule for String Type Validation\nDESCRIPTION: Shows that string types without a pattern must have enum values defined. This rule ensures string values are properly constrained in the API.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_40\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: string\n    description: foo\n    enum:\n      - bar\n  Bar:\n    type: string\n    pattern: /a-z/\n```\n\n----------------------------------------\n\nTITLE: Implementing PackageDefinedRule for Library Definition\nDESCRIPTION: Demonstrates the requirement to define a package annotation when creating a new library. This ensures proper organization of API components.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_42\n\nLANGUAGE: raml\nCODE:\n```\n(package): Cart\ndisplayName: Cart\n(updateType): CartUpdate\ntype: BaseResource\nproperties:\n  id:\n    (identifier): true\n    type: string\n    description: The unique ID of the cart.\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceLowerCaseHyphenRule for Resource Naming\nDESCRIPTION: Demonstrates that resource names should be lowercase and hyphen-separated. This ensures consistent naming of API resources.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_48\n\nLANGUAGE: raml\nCODE:\n```\n/{projectKey}:\n  /valid:\n    /key={key}:\n    /{id}:\n  /valid-resource:\n    /{id}:\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourcePluralRule for Resource Naming\nDESCRIPTION: Shows that resource names should generally be plural, with specific exceptions. This rule ensures consistent naming of API resource collections.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_49\n\nLANGUAGE: raml\nCODE:\n```\n/{projectKey}:\n  /categories:\n  /inventory:\n  /login:\n  /me:\n  /in-store:\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateActionNameRule for Action Type Naming\nDESCRIPTION: Demonstrates that update action types must follow naming conventions that reference UpdateAction. This ensures consistent action type naming.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_54\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  UpdateAction:\n    type: object\n  ValidAction:\n    type: UpdateAction\n```\n\n----------------------------------------\n\nTITLE: Implementing CamelCaseRule for Property Naming\nDESCRIPTION: Defines how property names should follow camelCase convention, avoiding hyphens at the property level. This ensures consistent property naming throughout the API.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_34\n\nLANGUAGE: raml\nCODE:\n```\n    properties:\n      /a-z/: string\n      camelCase: string\n```\n\n----------------------------------------\n\nTITLE: Implementing BooleanPropertyNameRule for Property Naming\nDESCRIPTION: Demonstrates the naming convention for boolean properties, which should not have 'is' as a prefix. This rule enforces consistent naming patterns for boolean fields.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_33\n\nLANGUAGE: raml\nCODE:\n```\n  Invalid:\n    type: object\n    properties:\n      isBad: boolean\n  Valid:\n    type: object\n    properties:\n      /a-z/: boolean\n      good: boolean\n      isolated: boolean\n      isFine: string\n```\n\n----------------------------------------\n\nTITLE: Implementing DatetimeRule for DateTime Properties\nDESCRIPTION: Shows naming conventions for DateTime, TimeOnly, and DateOnly properties, which must end with 'At', 'From', 'To', or 'Until'. Date ranges require matching 'From' and 'To/Until' property pairs.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_35\n\nLANGUAGE: raml\nCODE:\n```\n  FooAtDateTime:\n    type: object\n    properties:\n      fooAt: datetime\n  FooRangeDateTime:\n    type: object\n    properties:\n      fooFrom: datetime\n      fooTo: datetime\n  ValidDateRange:\n    type: object\n    properties:\n      validFrom: date-only\n      validUntil: date-only\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryParameterCamelCaseRule for Query Parameter Naming\nDESCRIPTION: Shows that query parameter names must be alphanumeric, dot-separated, and in lower camelCase. This rule ensures consistent query parameter naming.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_45\n\nLANGUAGE: raml\nCODE:\n```\nqueryParameters:\n  customerId?:\n    type: string\n  filter.query?: string\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceCatchAllRule for API Path Definition\nDESCRIPTION: Shows how to avoid ambiguity in catch-all resource paths by using clear path segments. This rule ensures routes are distinguishable and unambiguous.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_47\n\nLANGUAGE: raml\nCODE:\n```\n/{projectKey}:\n  /categories:\n    /key={key}:\n    /{id}:\n```\n\n----------------------------------------\n\nTITLE: Implementing StringPropertySingularRule for Property Naming\nDESCRIPTION: Shows that non-array property names should be singular according to English grammar rules. This ensures consistent naming of singular properties.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_51\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: object\n    properties:\n      validItem: string\n      /a-z/: string\n      maxApplications: number\n      hasChanges: boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing UnionTypePropertyRule for Property Type Definition\nDESCRIPTION: Shows that union types are not allowed for property definitions. This rule ensures property types are clearly defined without unions.\nSOURCE: https://github.com/commercetools/commercetools-api-reference/blob/main/api-specs/readme.md#2025-04-23_snippet_53\n\nLANGUAGE: raml\nCODE:\n```\ntypes:\n  Foo:\n    type: object\n    properties:\n      validItems: string\n      invalidItem: string | number\n      invalidItemDesc:\n        description: test\n        type: string | number\n      /invalid[a-z]/: string | number\n```"
  }
]