[
  {
    "owner": "opral",
    "repo": "monorepo",
    "content": "TITLE: Defining createChange Function in TypeScript\nDESCRIPTION: This snippet defines the createChange function, which creates a change in the database. It takes arguments for authors, entityId, fileId, lix, pluginKey, schemaKey, snapshotContent, and version. An optional parameter for updating version changes is also included.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createChange.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateChange(args, options?): Promise<{ \n  created_at: string; \n  entity_id: string; \n  file_id: string; \n  id: string; \n  plugin_key: string; \n  schema_key: string; \n  snapshot_id: string; \n}>\n```\n\n----------------------------------------\n\nTITLE: Using isAvailableLanguageTag Function in JavaScript\nDESCRIPTION: Example of how to use the isAvailableLanguageTag function exported by Paraglide JS runtime to check for valid language tags while maintaining type safety.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { isAvailableLanguageTag } from \"./paraglide/runtime\";\n\nif (isAvailableLanguageTag(params.lang)) {\n\treturn renderSite(params.lang);\n} else {\n\treturn 404;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Changes Using Lix SDK in TypeScript\nDESCRIPTION: Example showing how to select leaf changes from a database and apply them using the applyChanges function. The function queries changes from the lix database where changes match the current version and applies them using the plugin system.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/applyChanges.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  const changes = await lix.db.selectFrom(\"change\")\n     .where(changeIsLeafInVersion(currentVersion))\n     .selectAll()\n     .execute();\n\n  await applyChanges({ lix, changes });\n```\n\n----------------------------------------\n\nTITLE: Extending Paraglide Compiler with Low-level API\nDESCRIPTION: Advanced example demonstrating how to use the lower-level compileProject function for more control over the compilation process. This approach loads the project directly and allows access to the compilation output.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/compiling-messages.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compileProject } from \"@inlang/paraglide-js\";\nimport { loadProjectFromDirectory } from \"@inlang/sdk\";\n\nconst inlangProject = await loadProjectFromDirectory({\n\tpath: \"./project.inlang\",\n});\n\nconst output = await compileProject({\n\tproject: inlangProject,\n});\n\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Snapshot in TypeScript using Lix SDK\nDESCRIPTION: Demonstrates how to create or retrieve a content-addressed snapshot using the createSnapshot function. The function returns a promise containing the snapshot content and ID. It takes an optional content object and requires a Lix database instance.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createSnapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await createSnapshot({ lix, content });\n```\n\n----------------------------------------\n\nTITLE: Getting Current Locale in TypeScript\nDESCRIPTION: Example of using the getLocale() function to check the current locale and perform locale-specific actions.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (getLocale() === 'de') {\n    console.log('Germany 🇩🇪');\n  } else if (getLocale() === 'nl') {\n    console.log('Netherlands 🇳🇱');\n  }\n```\n\n----------------------------------------\n\nTITLE: Loading an Inlang Project in TypeScript\nDESCRIPTION: Example of how to load an Inlang project in memory using TypeScript. It demonstrates importing necessary functions and creating a new project.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadProjectInMemory, newProject } from \"@inlang/sdk\";\n\nconst project = await loadProjectInMemory({\n  blob: await newProject()\n});\n\n// query the project\nproject.*\n```\n\n----------------------------------------\n\nTITLE: Using Paraglide Messages in JavaScript\nDESCRIPTION: Example showing how to import and use Paraglide message functions, including passing parameters, changing locales, and retrieving the current locale.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/getting-started/vanilla-js-ts.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Import your message functions\nimport { m } from \"./src/paraglide/messages.js\";\nimport { getLocale, setLocale } from \"./src/paraglide/runtime.js\";\n\n// Use a message (with parameters if needed)\nconsole.log(m.greeting({ name: \"World\" })); // \"Hello World!\"\n\n// Change the locale\nsetLocale(\"de\");\n\nconsole.log(m.greeting({ name: \"Welt\" })); // \"Hallo Welt!\"\n\n// Get the current locale\nconsole.log(getLocale()); // \"de\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform and Gender Variants in inlang Messages\nDESCRIPTION: This snippet demonstrates how to create conditional message variants based on platform type and user gender. The example shows different message formats for Android male users, iOS female users, and a fallback message for all other combinations using wildcards (*).\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/variants.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"jojo_mountain_day\": [{\n\t\t\"match\": {\n\t\t\t\"platform=android, userGender=male\": \"{username} has to download the app on his phone from the Google Play Store.\",\n\t\t\t\"platform=ios, userGender=female\": \"{username} has to download the app on her iPhone from the App Store.\",\n\t\t\t\"platform=*, userGender=*\": \"The person has to download the app.\"\n\t\t}\n\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot with Lix SDK in TypeScript\nDESCRIPTION: Example showing how to create a content-addressed snapshot using the createSnapshot function from the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst snapshot = await createSnapshot({ lix, content });\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in inlang Messages\nDESCRIPTION: This snippet shows how to implement pluralization in inlang messages using the Intl.PluralRules standard. It defines an input variable 'count', creates a local plural variable 'countPlural', and uses it as a selector to match different message variants for singular and plural cases.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/variants.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"some_happy_cat\": [{\n    \"declarations\": [\"input count\", \"local countPlural = count: plural\"],\n    \"selectors\": [\"countPlural\"],\n    \"match\": {\n      \"countPlural=one\": \"There is one cat.\",\n      \"countPlural=other\": \"There are many cats.\",\n    },\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Account with @lix-js/sdk in TypeScript\nDESCRIPTION: This function creates a new account using the Lix SDK. It takes an object with 'lix' and 'name' properties as arguments and returns a Promise that resolves to an object containing the new account's 'id' and 'name'.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAccount(args): Promise<{ id: string; name: string; }>\n```\n\n----------------------------------------\n\nTITLE: Compiling Messages Programmatically with Paraglide\nDESCRIPTION: Example of using the compile function to programmatically invoke the Paraglide compiler. This approach requires specifying the project file path and output directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/compiling-messages.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from \"@inlang/paraglide-js\";\n\nawait compile({\n\tproject: \"./project.inlang\",\n\toutdir: \"./src/paraglide\",\n});\n```\n\n----------------------------------------\n\nTITLE: Querying an Inlang Project in TypeScript\nDESCRIPTION: Example of how to query an Inlang project for settings, plugins, and messages using TypeScript. It demonstrates accessing project properties and using SQL-like queries.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessing settings and plugins\nconst settings = await project.settings.get();\nconst plugins = await project.plugins.get();\n\n// Querying messages\nconst messages = await project.db\n  .selectFrom(\"message\")\n  .selectAll()\n  .execute();\n\nconsole.log(messages);\n```\n\n----------------------------------------\n\nTITLE: Compiling Paraglide Messages\nDESCRIPTION: Command to compile internationalization message files from the project configuration into TypeScript/JavaScript files that can be imported into the application.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/getting-started/vanilla-js-ts.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js compile --project ./project.inlang --outdir ./src/paraglide\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON File into Lix\nDESCRIPTION: Example of inserting a JSON file into the Lix system using the database API\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = {\n\tname: \"Hello World\",\n\tversion: \"1.0.0\",\n\tsettings: {\n\t\tenableFeatureX: true,\n\t\tmaxUsers: 10,\n\t},\n};\n\n// Insert the file \nconst file = await lix.db\n\t.insertInto(\"file\")\n\t.values({\n\t\tpath: \"/example.json\",\n\t\tdata: new TextEncoder().encode(JSON.stringify(json)),\n\t})\n\t.returningAll()\n\t.executeTakeFirstOrThrow();\n\nconsole.log(\"JSON file inserted with ID:\", file.id);\n```\n\n----------------------------------------\n\nTITLE: Creating New Lix File with TypeScript\nDESCRIPTION: Function declaration for creating a new Lix file that returns a Promise resolving to a Blob. The function is designed to generate a file that can be saved by the application to various storage locations including local computer, cloud storage, or browser's Origin Private File System (OPFS).\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/newLixFile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnewLixFile(): Promise<Blob>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Inlang Project in TypeScript\nDESCRIPTION: Example of how to create a new Inlang project and write it to a file using TypeScript. It uses the newProject function from the SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { newProject } from \"@inlang/sdk\";\n\n// Create a new project\nconst file = await newProject();\n\n// write the file anywhere you want\nawait fs.writeFile(\"./project.inlang\", file);\n```\n\n----------------------------------------\n\nTITLE: Defining Glob Pattern Example in TypeScript\nDESCRIPTION: Example showing how to define glob patterns for detecting changes in specific file types using the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n\"**/*.json\" for all JSON files\n  \"**/*.inlang\" for all inlang files\n```\n\n----------------------------------------\n\nTITLE: Installing Paraglide JS in SvelteKit\nDESCRIPTION: Command to initialize Paraglide JS in a SvelteKit project. This sets up the basic configuration for internationalization.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining NewCurrentVersion Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called NewCurrentVersion that uses the Insertable type with a CurrentVersionTable generic parameter. This type is likely used for creating new records in the CurrentVersionTable within the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewCurrentVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewCurrentVersion** = `Insertable`\\<`CurrentVersionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting incorrect locale handling with paraglideMiddleware\nDESCRIPTION: Example demonstrating common mistake of calling getLocale() outside the paraglideMiddleware scope. The middleware establishes correct request-specific locale context, so locale functions should only be called within its scope.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"*\", async (request) => {\n  // ❌ don't call `getLocale()` outside of `paraglideMiddleware`\n  const locale = getLocale()\n  \n  return paraglideMiddleware(request, async ({ request, locale }) => {\n    // ✅ call `getLocale()` inside of `paraglideMiddleware`\n    const locale = getLocale()\n    \n    // Your request handling logic here\n    return Response(html(request));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Paraglide JS\nDESCRIPTION: Diff showing how to add the Paraglide JS Vite plugin to the Vite configuration file. This includes importing the plugin and adding it to the plugins array with necessary options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/vite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from \"vite\";\n+import { paraglideVitePlugin } from \"@inlang/paraglide-js\";\n\nexport default defineConfig({\n  plugins: [\n+    paraglideVitePlugin({\n+      project: \"./project.inlang\",\n+      outdir: \"./src/paraglide\",\n+    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins in an Inlang Project\nDESCRIPTION: Example of how to install plugins in an Inlang project. It demonstrates retrieving project settings, adding a new plugin module, and updating the settings.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst settings = await project.settings.get();\n\nsettings.modules.push(\n  \"https://cdn.jsdelivr.net/npm/@inlang/plugin-i18next@latest/dist/index.js\"\n)\n\nawait project.settings.set(settings)\n```\n\n----------------------------------------\n\nTITLE: Version Management in Lix\nDESCRIPTION: Example of creating and switching between different versions in Lix\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst versionB = await createVersion({ lix, name: \"B\" });\n\n// Create a new version based on the parent version\nawait switchVersion({ lix, to: versionB });\n\nconsole.log(\"New version created:\", versionB.id);\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing Inlang Project in TypeScript\nDESCRIPTION: Example of how to load an existing Inlang project from a file using TypeScript. It demonstrates reading the file and using loadProjectInMemory function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadProjectInMemory } from \"@inlang/sdk\";\n\nconst file = await fs.readFile(\"./project.inlang\");\n\n// Load a project from a directory\nconst project = await loadProjectInMemory({\n  blob: file\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Locale Switcher Component in React/Vue/Svelte\nDESCRIPTION: Example showing how to implement a locale switcher UI component that allows users to switch between available languages. It uses deLocalizeHref to remove locale prefixes before localizing to the new language.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In a React/Vue/Svelte component\nconst LocaleSwitcher = ({ href }) => {\n  // Remove locale prefix before switching\n  const baseHref = deLocalizeHref(href);\n  return locales.map(locale =>\n    <a href={localizeHref(baseHref, { locale })}>\n      Switch to {locale}\n    </a>\n  );\n};\n\n// Examples:\ndeLocalizeHref(\"/de/about\")  // => \"/about\"\ndeLocalizeHref(\"/fr/store\")  // => \"/store\"\n\n// Cross-origin links remain absolute\ndeLocalizeHref(\"https://example.com/de/about\")\n// => \"https://example.com/about\"\n```\n\n----------------------------------------\n\nTITLE: Saving an Inlang Project in TypeScript\nDESCRIPTION: Example of how to save an Inlang project to a file using TypeScript. It demonstrates converting the project to a blob and writing it to a file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst newFile = await project.toBlob();\n\nawait fs.writeFile(\"./project.inlang\", newFile);\n```\n\n----------------------------------------\n\nTITLE: Defining changeIsLowestCommonAncestorOf Function in TypeScript\nDESCRIPTION: This function filters changes that are the lowest common ancestor of the given changes. It takes an array of change objects and returns an ExpressionWrapper for use in database queries.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLowestCommonAncestorOf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeIsLowestCommonAncestorOf(changes: Pick<{ created_at: string; entity_id: string; file_id: string; id: string; plugin_key: string; schema_key: string; snapshot_id: string; }, \"id\">[]): ExpressionWrapper<LixDatabaseSchema, \"change\", SqlBool>\n```\n\n----------------------------------------\n\nTITLE: Using translations in server-side TypeScript files\nDESCRIPTION: Example of how to handle translations in server-side TypeScript files by passing the i18n function as a parameter.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-const doSomething = (projects: string[]) => {\n+const doSomething = (i18n, projects: string[]) => {\n  // ...\n\n- return `Added ${projects.length} projects`\n+ return i18n.projects.added(projects.length)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentalInferType Type Alias in TypeScript\nDESCRIPTION: A type alias that infers the snapshot content type from a schema. This utility type conditionally resolves to different types based on the properties of the ChangeSchema parameter, using the FromSchema utility type for schema objects.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ExperimentalInferType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nExperimentalInferType<ChangeSchema> = ChangeSchema extends object ? FromSchema<ChangeSchema[\"schema\"]> : ChangeSchema extends object ? any : ChangeSchema extends object ? ArrayBuffer : never\n```\n\n----------------------------------------\n\nTITLE: Adding invisible anchor tags for static site generation in React\nDESCRIPTION: React component implementation that adds invisible anchor tags in the root layout to help static site generators discover all localized URLs. These anchor tags ensure that all localized versions of pages are generated during build time.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { locales, localizeHref } from \"./paraglide/runtime.js\";\n\n// in the root layout\nfunction Layout({ children }) {\n  return (\n    <div>{children}</div>\n    // add invisible anchor tags for the currently visible page in each locale\n    <div style=\"display: none\">\n      {locales.map((locale) => (\n        <a href={localizeHref(`/about`, { locale })}></a>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML with invisible anchor tags for localized URLs\nDESCRIPTION: Diff showing the HTML output with invisible anchor tags for localized URLs. These hidden links are used by static site generators to discover and generate all localized versions of pages during build time.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<div>\n  <p>My Cool Website\n</div>\n+<div style=\"display: none\">\n+  <a href=\"/de/about\"></a>\n+  <a href=\"/fr/about\"></a>\n+</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an Inlang Plugin in TypeScript\nDESCRIPTION: Example of how to create a custom Inlang plugin by implementing the InlangPlugin type. It includes placeholders for import and export file logic.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin: InlangPlugin = {\n  key: \"my-plugin\",\n  importFiles: () => {\n    // Import files logic\n  },\n  exportFiles: () => {\n    // Export files logic\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Multi-Tenant i18n in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure URL patterns for multi-tenant internationalization using the compile function. It sets up different localization strategies for specific domains and a default strategy for other domains.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait compile({\n\tproject: \"./project.inlang\",\n\tstrategy: [\"url\"],\n\turlPatterns: [\n\t\t// 1) customer1.fr => root locale is fr, sub-locale is /en/\n\t\t{\n\t\t\tpattern: \"https://customer1.fr/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"fr\", \"https://customer1.fr/:path(.*)?\"],\n\t\t\t\t[\"en\", \"https://customer1.fr/en/:path(.*)?\"],\n\t\t\t],\n\t\t},\n\t\t// 2) customer2.com => root locale is en, sub-locale is /fr/\n\t\t{\n\t\t\tpattern: \"https://customer2.com/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"en\", \"https://customer2.com/:path(.*)?\"],\n\t\t\t\t[\"fr\", \"https://customer2.com/fr/:path(.*)?\"],\n\t\t\t],\n\t\t},\n\t\t// 3) Any other domain => path-based for en/fr\n\t\t{\n\t\t\tpattern: \"https://:domain(.*)/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"en\", \"https://:domain(.*)/en/:path(.*)?\"],\n\t\t\t\t[\"fr\", \"https://:domain(.*)/fr/:path(.*)?\"],\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Paraglide Middleware in hooks.server.ts\nDESCRIPTION: TypeScript code for adding the Paraglide middleware to SvelteKit's server hooks. This handles locale detection and HTML transformation for the lang attribute.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Handle } from '@sveltejs/kit';\nimport { paraglideMiddleware } from '$lib/paraglide/server';\n\n// creating a handle to use the paraglide middleware\nconst paraglideHandle: Handle = ({ event, resolve }) =>\n\tparaglideMiddleware(event.request, ({ request: localizedRequest, locale }) => {\n\t\tevent.request = localizedRequest;\n\t\treturn resolve(event, {\n\t\t\ttransformPageChunk: ({ html }) => {\n\t\t\t\treturn html.replace('%lang%', locale);\n\t\t\t}\n\t\t});\n\t});\n\nexport const handle: Handle = paraglideHandle;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Message Calling\nDESCRIPTION: Demonstrates how to dynamically call messages while preserving tree-shaking capabilities.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { m } from \"./paraglide/messages.js\";\n\nconst messages = {\n\tgreeting: m.greeting,\n\tgoodbye: m.goodbye,\n};\n\nlet messageKey = \"greeting\";\n\nconsole.log(messages[messageKey]());\n// \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Assertion in TypeScript\nDESCRIPTION: Demonstrates how to use the assertUsage function to check a condition on a function argument. If the condition is false, an error is thrown during development, helping to ensure correct usage of the function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/assert-usage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x(argument: string) {\n\tassertUsage(\n\t\targument.startsWith(\"hello\"),\n\t\t\"The argument must start with 'hello'. Otherwise, the function crashes.\"\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling AsyncLocalStorage in Paraglide Vite plugin\nDESCRIPTION: Configuration for disabling AsyncLocalStorage in environments with isolated request contexts such as Cloudflare Workers or Vercel Edge Functions. This should only be used in environments that guarantee request isolation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nparaglideVitePlugin({\n  // ...\n  disableAsyncLocalStorage: true // ⚠️ Use with caution\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Lix Server Protocol Handler in TypeScript\nDESCRIPTION: This function creates a handler for the Lix server protocol. It takes an arguments object with an environment property of type LspEnvironment and returns a Promise that resolves to a LixServerProtocolHandler.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createServerProtocolHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateServerProtocolHandler(`args`): `Promise`\\<`LixServerProtocolHandler`\\>\n```\n\n----------------------------------------\n\nTITLE: Querying Leaf Changes for All Versions in TypeScript\nDESCRIPTION: This example demonstrates how to use the changeIsLeafOf() function to query for the leaf change across all versions in the database. It uses the lix.db.selectFrom method to build and execute the query.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeafOf.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n   .where(changeIsLeafOf(someChange))\n   .selectAll()\n   .execute();\n```\n\n----------------------------------------\n\nTITLE: Implementing locale handling in Next.js Edge Middleware\nDESCRIPTION: Example of handling localization in Next.js Edge Middleware by overriding the locale and URL origin for each request. This approach uses Next.js-specific request handling while leveraging Paraglide's overwrite functions.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Next.js Edge Middleware\nimport { NextResponse } from 'next/server';\n\nexport function middleware(request) {\n  const locale = getLocaleFromCookie(request);\n  \n  overwriteGetLocale(() => locale);\n  overwriteGetUrlOrigin(() => request.nextUrl.origin);\n\n  return NextResponse.next();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of URL Strategy Within Request Context\nDESCRIPTION: This example shows the correct way to use the 'url' strategy within a request context, ensuring proper locale resolution in an Express-like application.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// hello.ts\nimport { m } from \"./paraglide/messages.js\";\n\napp.use(paraglideMiddleware);\n\n// ✅ this will work\napp.get(\"/\", (req, res) => {\n\tconsole.log(m.hello());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Locale Switching in Client-Side Routing\nDESCRIPTION: This snippet demonstrates the correct way to switch locales using setLocale() and highlights issues with using localized hrefs in client-side routing scenarios.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setLocale } from \"./paraglide/runtime.js\";\n\n// ✅ this will work\nsetLocale(\"de\");\n\n// ❌ this will not work in client side routing\n<a href={localizeHref(\"/page\", { locale: \"de\" })}>Deutsch</a>\n\n// 🟠 your framework might expose a reload attribute which \n//    would make locale switching via links work\n<a\n  href={localizeHref(\"/page\", { locale: \"de\" })}\n  reload={true}\n>Deutsch</a>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Paraglide Architecture with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the architecture of Paraglide, showing the relationships between the compiler, inlang project, runtime, messages, and the application. It visualizes how message functions interact with the locale management and strategy components.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    INLANG_PROJECT[INLANG PROJECT]\n\n    COMPILER[COMPILER]\n\n    subgraph RUNTIME[runtime.js]\n        GET_LOCALE[\"getLocale()\"]\n        SET_LOCALE[\"setLocale()\"]\n        STRATEGY\n    end\n\n    subgraph MESSAGES[messages.js]\n        M[\"m.hello_world()\"]\n    end\n\n    COMPILER -->|Opens| INLANG_PROJECT\n    M --> GET_LOCALE\n    MESSAGES --> COMPILER\n    RUNTIME --> COMPILER\n    APP[Your App] --> M\n    MESSAGE[\"'Hello World!'\"] -->|renders| APP[Your App]\n    APP --> SET_LOCALE\n    GET_LOCALE --> STRATEGY\n    SET_LOCALE --> STRATEGY\n\n    classDef plainText stroke-width:0,fill-opacity:0,color:black;\n    class X plainText\n```\n\n----------------------------------------\n\nTITLE: Creating Version without Reference\nDESCRIPTION: Creates a new version instance without cloning from an existing version. Returns a promise with the new version's id and name.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst version = await createVersion({ lix });\n```\n\n----------------------------------------\n\nTITLE: Implementing Paraglide Middleware\nDESCRIPTION: Implementation of NextJS middleware for handling Paraglide localization including request headers setup.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { paraglideMiddleware } from \"./paraglide/server\";\n\nexport function middleware(request: NextRequest) {\n\treturn paraglideMiddleware(request, ({ request, locale }) => {\n\t\trequest.headers.set(\"x-paraglide-locale\", locale);\n\t\trequest.headers.set(\"x-paraglide-request-url\", request.url);\n\t\treturn NextResponse.rewrite(request.url, request);\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Messages with Paraglide CLI\nDESCRIPTION: Command to compile messages using the Paraglide CLI. This command requires specifying the project file path and output directory where the compiled files will be saved.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/compiling-messages.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js compile --project ./project.inlang --outdir ./src/paraglide\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for JSON Object Projection (SQLite)\nDESCRIPTION: This snippet shows the SQL generated by Kysely for the TypeScript query above. It selects a person's ID and constructs a JSON object for their favorite pet using SQLite's json_object function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nselect \"id\", (\n  select json_object(\n    'pet_id', \"obj\".\"pet_id\",\n    'name', \"obj\".\"name\"\n  ) from (\n    select \"pet\".\"id\" as \"pet_id\", \"pet\".\"name\"\n    from \"pet\"\n    where \"pet\".\"owner_id\" = \"person\".\"id\"\n    and \"pet\".\"is_favorite\" = ?\n  ) as obj\n) as \"favorite_pet\"\nfrom \"person\";\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Config for Paraglide JS 2.0\nDESCRIPTION: Demonstrates how to update the Vite configuration to use the new Paraglide Vite plugin from Paraglide JS 2.0.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// vite.config.js\n-import { paraglide } from \"@inlang/paraglide-vite\";\n+import { paraglideVitePlugin } from \"@inlang/paraglide-js\";\n\n\nexport default defineConfig({\n\tplugins: [\n-\t\tparaglide({\n+\t\tparaglideVitePlugin({\n\t\t\tproject: \"./project.inlang\",\n\t\t\toutdir: \"./src/paraglide\",\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Settings Type Definition\nDESCRIPTION: TypeScript type definition for the plugin settings, specifying available configuration options including pathPattern, variableReferencePattern, and sourceLanguageFilePath.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/next-intl/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PluginSettings = {\n\tpathPattern: string\n\tvariableReferencePattern?: [string] | [string, string]\n\tsourceLanguageFilePath?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Overwrites in React App Entry Point\nDESCRIPTION: This example demonstrates how to properly implement overwriteGetLocale and overwriteSetLocale functions at the root of a React application to ensure correct locale handling.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { overwriteGetLocale, overwriteSetLocale } from \"./paraglide/runtime.js\";\n\n// Call the overwrites before your app starts rendering.\noverwriteGetLocale(() => \"en\");\noverwriteSetLocale((locale) => console.log(`Set locale to ${locale}`));\n\n// Your app rendering entrypoint.\nexport default function App() {\n\treturn (\n\t\t<div>\n\t\t\t<p>Hello world</p>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Version Based on Another Version in TypeScript\nDESCRIPTION: Example showing how to create a new version based on an existing version using the from parameter with the createVersion function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst version = await createVersion({ lix, from: otherVersion });\n```\n\n----------------------------------------\n\nTITLE: Using Optional Language Tag in Message Functions\nDESCRIPTION: Example of how to use the optional options argument in message functions to force a specific language tag, regardless of the currently set language.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as m from \"./paraglide/messages\";\nconst msg = m.hello({ name: \"John\" }, { languageTag: \"de\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro with Paraglide JS Vite Plugin\nDESCRIPTION: Modifications to astro.config.mjs to add the Paraglide JS Vite plugin, set the output mode to server, and configure the Node adapter for SSR support.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/astro/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from \"astro/config\";\n+import { paraglideVitePlugin } from \"@inlang/paraglide-js\";\n+import node from \"@astrojs/node\";\n\nexport default defineConfig({\n  // ... other\n+\tvite: {\n+\t\tplugins: [\n+\t\t\tparaglideVitePlugin({\n+\t\t\t\tproject: \"./project.inlang\",\n+\t\t\t\toutdir: \"./src/paraglide\",\n+\t\t\t}),\n+\t\t],\n\t},\n+  output: \"server\",\n+  adapter: node({ mode: \"standalone\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Changes Example in TypeScript\nDESCRIPTION: Demonstrates how to apply leaf changes from the current version using the applyChanges function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes = await lix.db.selectFrom(\"change\")\n   .where(changeIsLeafInVersion(currentVersion))\n   .selectAll()\n   .execute();\n\nawait applyChanges({ lix, changes });\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading Git Operations in JavaScript\nDESCRIPTION: Example implementation showing lazy loading API for git operations that only fetches required files and their history rather than entire repositories.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/git-sdk-requirements/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * An example lazy loading implementation API.\n */\n\n// does not clone the entire repository.\n// only metadata that enable other git commands to run\nawait clone(\"https://github.com/opral/monorepo\", fs);\n\n// lazy fetches the file and git commit history of README.md\nconst commitHistory = await history(\"/README.md\", fs);\n\n// lazy fetches xyz file\nconst readme = await fs.readFile(\"/xyz.md\");\n```\n\n----------------------------------------\n\nTITLE: Changing strategy precedence to disable automatic redirects\nDESCRIPTION: Diff showing how to modify the compile configuration to disable automatic redirects by changing strategy precedence. Putting 'url' before 'cookie' prioritizes the URL's locale over the cookie's locale.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  project: \"./project.inlang\",\n  outdir: \"./src/paraglide\",\n-  strategy: ['cookie', 'url'],\n+  strategy: ['url', 'cookie'],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Message Parameters\nDESCRIPTION: Demonstrates how to use parameterized messages by passing an object with parameter values.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// messages/en.json\n// { \"greeting\": \"Hello {name}!\" }\n\nimport { m } from \"./paraglide/messages.js\";\n\n// Pass parameters as an object\nconsole.log(m.greeting({ name: \"Samuel\" })); // \"Hello Samuel!\"\n```\n\n----------------------------------------\n\nTITLE: Querying Lowest Common Ancestor in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the changeIsLowestCommonAncestorOf function to query the lowest common ancestor of multiple changes in the Lix database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst lowestCommonAncestor = await lix.db.selectFrom(\"change\")\n   .where(changeIsLowestCommonAncestorOf([change1, change2, change3]))\n   .selectAll()\n   .executeTakeFirst();\n```\n\n----------------------------------------\n\nTITLE: Breaking Change for Complex Messages with Variants\nDESCRIPTION: Demonstrates the required change to wrap complex messages with variants in an array to distinguish them from nested keys.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n//messages/en.json\n{\n  \"hello_world\": \"Hello World!\",\n+  \"complex_message\": [\n    {\n      \"declarations\": [\"input count\", \"local countPlural = count: plural\"],\n      \"selectors\": [\"countPlural\"],\n      \"match\": {\n        \"countPlural=one\": \"There is one item\",\n        \"countPlural=other\": \"There are {count} items\"\n      }\n    }\n+  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Plugin Settings\nDESCRIPTION: Basic configuration for the JSON plugin in project settings, specifying source language and target languages along with module path.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"sourceLanguageTag\": \"en\",\n\t\"languageTags\": [\"en\", \"de\"],\n\t\"modules\": [\"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@latest/dist/index.js\"],\n\t\"plugin.inlang.json\": {\n\t\t\"pathPattern\": \"./resources/{languageTag}.json\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Existing Version with LIX SDK\nDESCRIPTION: Example showing how to switch to an existing version using the switchVersion function. The target version must already exist in the system.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/switchVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait switchVersion({ lix, to: otherVersion });\n```\n\n----------------------------------------\n\nTITLE: Implementing Paraglide Middleware in Metaframeworks\nDESCRIPTION: Demonstrates basic usage of paraglideMiddleware in metaframeworks like NextJS, SvelteKit, Astro, and Nuxt. The middleware is applied to the handle function, processing the event request and resolving it within the framework.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/server/-internal-.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = async ({ event, resolve }) => {\n  return serverMiddleware(event.request, ({ request, locale }) => {\n    // let the framework further resolve the request\n    return resolve(request);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Inlang Configuration with Plugins Property in TypeScript\nDESCRIPTION: Example of a configuration function that imports and initializes various plugins. This demonstrates the proposed pattern for defining and using plugins in an Inlang project configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function defineConfig(env) {\n  const pluginJson = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/samuelstroschein/inlang-plugin-json@1/dist/index.js\",\n  );\n  const sdk = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/opral/inlang@1/dist/sdk-js/index.js\",\n  );\n\n  const standardLintRules = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/opral/inlang@1/dist/sdk-js/index.js\",\n  );\n\n  return {\n    sourceLanguageTag: \"en\",\n    plugins: [\n      // @ivanhofer @jannesblobel the \"collection\" discussion is resolved with this approach.\n      // just use standardLintRules as plugin 🎉\n      standardLintRules(),\n      pluginJson({\n        pathPattern: \"./languages/{language}.json\",\n      }),\n      sdk({\n        languageNegotiation: {\n          strategies: [{ type: \"localStorage\" }, { type: \"navigator\" }],\n        },\n      }),\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Translation Files in TypeScript\nDESCRIPTION: Example of how to import and export translation files using an Inlang plugin. It demonstrates reading a JSON file, importing it into the project, and then exporting it back.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = await fs.readFile(\"./en.json\");\n\n// Import files\nawait project.importFiles({\n  pluginKey: \"plugin.inlang.messageFormat\",\n  files: [\n    { locale: \"en\", content: file },\n  ],\n});\n\n// Export files\nconst files = await project.exportFiles({\n  pluginKey: \"plugin.inlang.messageFormat\"\n});\n\nawait fs.writeFile(\"./en.json\", files[0].content);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sherlock Project Settings in JSON\nDESCRIPTION: This snippet shows how to set up the project.inlang/settings.json file for Sherlock. It includes configuration for the base locale, supported locales, and required modules.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://inlang.com/schema/project-settings\",\n\t\"baseLocale\": \"en\",\n\t\"locales\": [\"en\", \"de\"],\n\t\"modules\": [\"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@4/dist/index.js\"],\n\t\"settings\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Paraglide JS in TypeScript\nDESCRIPTION: Examples of how messages are extracted using the Paraglide JS syntax in TypeScript code. These patterns are recognized by the plugin for inline display and translation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/m-function-matcher/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nm.myMessage()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nm.another_message()\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Handling in Next.js Root Layout\nDESCRIPTION: Shows how to implement locale handling in the root layout of a Next.js application. This includes generating static parameters for SSG, scoping the locale per request, and overwriting the getLocale function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssg/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// needed for SSG\nexport function generateStaticParams() {\n\treturn [{ locale: \"en\" }, { locale: \"de\" }];\n}\n\n// scopes the locale per request\nlet ssrLocale = cache(() => ({\n\tlocale: baseLocale,\n}));\n\n// overwrite the getLocale function to use the locale from the request\noverwriteGetLocale(() => assertIsLocale(ssrLocale().locale));\n\nexport default async function RootLayout({\n\tchildren,\n\tparams,\n}: {\n\tchildren: any;\n\tparams: any;\n}) {\n\t// can't use async params because the execution order get's screwed up.\n\t// this is something nextjs has to fix\n\tssrLocale().locale = params.locale;\n\treturn (\n\t\t<html lang={getLocale()}>\n\t\t\t<body>\n\t\t\t\t{children}\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Format Structure in JSON\nDESCRIPTION: Example showing basic message format structure with translations in English and German, demonstrating simple key-value pairs and variable usage with {name} placeholder.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n//messages/en.json\n{\n  \"hello_world\": \"Hello World!\",\n  \"greeting\": \"Good morning {name}!\"\n}\n\n//messages/de.json\n{\n  //the $schema key is automatically ignored\n  \"hello_world\": \"Hallo Welt!\",\n  \"greeting\": \"Guten Tag {name}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Change Set with Labels in TypeScript\nDESCRIPTION: This example illustrates how to create a change set with associated labels using the createChangeSet function in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes = await lix.db.selectFrom(\"change\").selectAll().execute();\nconst changeSet = await createChangeSet({ db: lix.db, changes });\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a change set with labels\nconst labels = await lix.db.selectFrom(\"label\").selectAll().execute();\nconst changeSet = await createChangeSet({\n  lix,\n  changes: [],\n  labels\n});\n```\n\n----------------------------------------\n\nTITLE: Fluent Syntax Example\nDESCRIPTION: Example showing how complex localization rules for plurals and gender are expressed in Mozilla's Fluent syntax.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexample =\n    {$userName} {$photoCount ->\n        [one] added a new photo\n       *[other] added {$photoCount} new photos\n    } to {$userGender ->\n        [male] his stream\n        [female] her stream\n       *[other] their stream\n    }.\n```\n\n----------------------------------------\n\nTITLE: Setting Active Locale\nDESCRIPTION: Demonstrates how to change the current locale using setLocale function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocale } from \"./paraglide/runtime.js\";\n\n// Change locale to German\nsetLocale(\"de\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Paraglide Vite Plugin\nDESCRIPTION: Example configuration for integrating Paraglide JS with Vite using the paraglide-js Vite plugin. This shows how to set up the plugin with project path and output directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/compiling-messages.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport { paraglideVitePlugin } from \"@inlang/paraglide-js\";\n\nexport default defineConfig({\n\tplugins: [\n\t\tparaglideVitePlugin({\n\t\t\tproject: \"./project.inlang\",\n\t\t\toutdir: \"./src/paraglide\",\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Validating File Paths in TypeScript for @lix-js/sdk\nDESCRIPTION: This function checks if a given string is a valid file path. It takes a string parameter 'path' and returns a boolean indicating whether the path is valid or not.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/isValidFilePath.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisValidFilePath(path: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Paraglide with Routing Strategies\nDESCRIPTION: Shows how to configure Paraglide with multiple routing strategies, including URL, cookie, and preferred language.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nparaglide({\n\tstrategy: [\n    \"url\",\n    \"cookie\",\n    \"preferredLanguage\",\n    \"...\"\n  ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Server Middleware for URL Delocalization in Node.js\nDESCRIPTION: Example server middleware that extracts and normalizes localized URLs. This demonstrates how to use deLocalizeUrl in a server context to store the base URL for later use in request processing.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Server middleware example\napp.use((req, res, next) => {\n  const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);\n  const baseUrl = deLocalizeUrl(url);\n\n  // Store the base URL for later use\n  req.baseUrl = baseUrl;\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Using doc-callout Element in HTML for Various Alert Types\nDESCRIPTION: Example usage of the doc-callout custom element with different type attributes to create information boxes, tips, warnings, and danger notifications. The type attribute determines the styling and purpose of the callout.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-callout.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-callout type=\"info\">This is an information.</doc-callout>\n<doc-callout type=\"tip\">This is a tip.</doc-callout>\n<doc-callout type=\"warning\">This is a warning.</doc-callout>\n<doc-callout type=\"danger\">This is dangerous.</doc-callout>\n```\n\n----------------------------------------\n\nTITLE: Implementing paraglideMiddleware for request handling in TypeScript\nDESCRIPTION: Basic implementation of the paraglideMiddleware function that handles request-scoped locale management automatically. The middleware manages async local storage context, handles URL localization, and ensures locale state isolation between requests.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { paraglideMiddleware } from './paraglide/server.js';\n\napp.get(\"*\", async (request) => {\n  return paraglideMiddleware(request, async ({ request, locale }) => {\n    // Your request handling logic here\n    return Response(html(request));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-tenant Application URL Pattern Configuration\nDESCRIPTION: Example configuration for a multi-tenant application with specific product, category, and general routes across multiple languages.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/strategy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncompile({\n  project: \"./project.inlang\",\n  outdir: \"./src/paraglide\",\n  strategy: [\"url\", \"cookie\"],\n  urlPatterns: [\n    // Specific product routes first\n    {\n      pattern: \"https://:tenant.example.com/products/:id\",\n      localized: [\n        [\"en\", \"https://:tenant.example.com/products/:id\"],\n        [\"de\", \"https://:tenant.example.com/produkte/:id\"],\n        [\"fr\", \"https://:tenant.example.com/produits/:id\"]\n      ],\n    },\n    // Specific category routes next\n    {\n      pattern: \"https://:tenant.example.com/categories/:name\",\n      localized: [\n        [\"en\", \"https://:tenant.example.com/categories/:name\"],\n        [\"de\", \"https://:tenant.example.com/kategorien/:name\"],\n        [\"fr\", \"https://:tenant.example.com/categories/:name\"]\n      ],\n    },\n    // General wildcard pattern last\n    {\n      pattern: \"https://:tenant.example.com/:path(.*)?\",\n      localized: [\n        [\"en\", \"https://:tenant.example.com/:path(.*)?\"],\n        [\"de\", \"https://:tenant.example.com/de/:path(.*)?\"],\n        [\"fr\", \"https://:tenant.example.com/fr/:path(.*)?\"]\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Change Conflicts by Selection in TypeScript\nDESCRIPTION: This function allows resolving conflicts by selecting one of two changes in a conflict. It takes arguments containing the conflict details (change_set_id, id, key), the Lix instance, and the selected change data with relevant identifiers.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/resolveChangeConflictBySelecting.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nresolveChangeConflictBySelecting(`args`): `Promise`\\<`void`\\>\n```\n\n----------------------------------------\n\nTITLE: Change Version Query Example in TypeScript\nDESCRIPTION: Shows how to query changes within a specific version.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes = await lix.db.selectFrom(\"change\")\n   .where(changeInVersion(currentVersion))\n   .selectAll()\n   .execute();\n```\n\n----------------------------------------\n\nTITLE: Using Lix Server Protocol Handler with Server Framework in TypeScript\nDESCRIPTION: This example demonstrates how to use the createServerProtocolHandler with a server framework like Hono. It creates a handler and sets it up to handle requests to the '/lsp/*' route.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createServerProtocolHandler.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// any server framework goes\n// here, like express, polka, etc.\n// frameworks that do not use\n// web standard Request and Response\n// objects will need to be mapped.\nconst app = new Hono();\n\nconst lspHandler = createServerProtocolHandler({ storage });\n\napp.use('/lsp/*', async (req) => {\n   await lspHandler(req);\n});\n```\n\n----------------------------------------\n\nTITLE: Change Ancestry Query Examples in TypeScript\nDESCRIPTION: Demonstrates querying leaf changes of a specific change across all versions or within a specific version.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n   .where(changeIsLeafOf(someChange))\n   .selectAll()\n   .execute();\n\nawait lix.db.selectFrom(\"change\")\n  .where(changeIsLeafOf(someChange))\n  .where(changeInVersion(someVersion))\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Message Saving Implementation in TypeScript\nDESCRIPTION: Shows how messages can be saved using the proposed config.saveMessages() method.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/message-first-architecture/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait config.saveMessages(messages);\n```\n\n----------------------------------------\n\nTITLE: Initializing Lix File with JSON Plugin\nDESCRIPTION: Creates and opens a new Lix file in memory with JSON plugin support\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { newLixFile, openLixInMemory } from \"@lix-js/sdk\";\nimport { plugin as jsonPlugin } from \"@lix-js/plugin-json\";\n\n// Create a new empty Lix file\nconst lixFile = await newLixFile();\n\n// Open the Lix file in memory\nconst lix = await openLixInMemory({\n\tblob: lixFile,\n\tprovidePlugins: [jsonPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering for Leaf Changes in TypeScript using @lix-js/sdk\nDESCRIPTION: The changeIsLeafOf() function creates a filter to select the last descendant of a specified change. It returns an ExpressionWrapper for use in database queries. The function takes a change object as a parameter, which must include an 'id' property.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeafOf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchangeIsLeafOf(`change`): ExpressionWrapper<LixDatabaseSchema, \"change\", SqlBool>\n```\n\n----------------------------------------\n\nTITLE: Implementing locale handling in Cloudflare Worker\nDESCRIPTION: Example of handling localization in a Cloudflare Worker environment by overriding the locale and URL origin for each request. This approach is suitable for serverless environments where each request is isolated.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Cloudflare Worker example\nexport default {\n  async fetch(request: Request) {\n    // Determine locale from request\n    const locale = getLocaleFromURL(request.url);\n    \n    // Override per-request\n    overwriteGetLocale(() => locale);\n    overwriteGetUrlOrigin(() => new URL(request.url).origin);\n\n    return handleRequest(request);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Localizing URLs for Other Domains in JavaScript\nDESCRIPTION: This snippet shows how to localize URLs for domains not specifically configured, using a path-based localization strategy for English and French.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocalizeHref(\"https://example.com/about\", { locale: \"fr\" })\n// Output: \"https://example.com/fr/about\"\n\nlocalizeHref(\"https://example.com/fr/about\", { locale: \"en\" })\n// Output: \"https://example.com/en/about\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Messages\nDESCRIPTION: Shows how to import and use messages from the generated messages file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Import all messages at once\nimport { m } from \"./paraglide/messages.js\";\n\n// Use a message\nconsole.log(m.hello_world()); // \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Protocol Handler with Hono in TypeScript\nDESCRIPTION: Example showing how to use createServerProtocolHandler with a Hono server framework. The handler processes requests to the /lsp/* endpoint.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// any server framework goes\n// here, like express, polka, etc.\n// frameworks that do not use\n// web standard Request and Response\n// objects will need to be mapped.\nconst app = new Hono();\n\nconst lspHandler = createServerProtocolHandler({ storage });\n\napp.use('/lsp/*', async (req) => {\n   await lspHandler(req);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Leaf Changes for a Specific Version in TypeScript\nDESCRIPTION: This example shows how to combine the changeIsLeafOf() function with changeInVersion() to query for the leaf change in a specific version. It demonstrates chaining multiple where clauses in the database query.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeafOf.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n  .where(changeIsLeafOf(someChange))\n  .where(changeInVersion(someVersion))\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern Order for Localization\nDESCRIPTION: Demonstrates correct and incorrect ordering of URL patterns for localization, showing how specific patterns should precede general patterns to ensure proper routing.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/strategy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nurlPatterns: [\n  // ❌ INCORRECT ORDER: The wildcard pattern will match everything, \n  // so the specific pattern will never be reached\n  {\n    pattern: \"https://example.com/:path(.*)?\", // This will match ANY path\n    localized: [\n      [\"en\", \"https://example.com/:path(.*)?\"],\n      [\"de\", \"https://example.com/de/:path(.*)?\"]\n    ],\n  },\n  {\n    pattern: \"https://example.com/blog/:id\", // This will never be reached\n    localized: [\n      [\"en\", \"https://example.com/blog/:id\"],\n      [\"de\", \"https://example.com/de/blog/:id\"]\n    ],\n  }\n]\n\n// ✅ CORRECT ORDER: Specific patterns first, then more general patterns\nurlPatterns: [\n  {\n    pattern: \"https://example.com/blog/:id\", // Specific pattern first\n    localized: [\n      [\"en\", \"https://example.com/blog/:id\"],\n      [\"de\", \"https://example.com/de/blog/:id\"]\n    ],\n  },\n  {\n    pattern: \"https://example.com/:path(.*)?\", // General pattern last\n    localized: [\n      [\"en\", \"https://example.com/:path(.*)?\"],\n      [\"de\", \"https://example.com/de/:path(.*)?\"]\n    ],\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Change Set with Changes\nDESCRIPTION: Example showing how to create a change set by selecting all changes from the database and passing them to createChangeSet function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createChangeSet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes = await lix.db.selectFrom(\"change\").selectAll().execute();\nconst changeSet = await createChangeSet({ db: lix.db, changes });\n```\n\n----------------------------------------\n\nTITLE: Browser Integration with Markdown Web Components\nDESCRIPTION: Shows how to embed markdown-wc content in a webpage using the markdown-wc-embed element.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@opral/markdown-wc/dist/markdown-wc-embed.js\"></script>\n  <body>\n    <markdown-wc-embed src=\"https://my-markdown-url.com/markdown.md\"></markdown-wc-embed>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Detecting Change Conflicts Using Lix SDK in TypeScript\nDESCRIPTION: Example showing how to use the detectChangeConflicts function to find conflicts between different versions of changes. The function takes a lix instance and an array of changes as arguments, returning a Promise of detected conflicts.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/detectChangeConflicts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst detectedConflicts = await detectChangeConflicts({\n       lix: lix,\n       changes: diffingChages,\n  });\n```\n\n----------------------------------------\n\nTITLE: Updating HTML lang attribute in SvelteKit app.html\nDESCRIPTION: Modification to the app.html file to dynamically set the HTML lang attribute for SEO purposes. Uses a placeholder that gets replaced during server processing.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<!DOCTYPE html>\n-<html lag=\"en\">\n+<html lang=\"%lang%\">\n\t<head>%sveltekit.head%</head>\n\t<body><div id=\"svelte\">%sveltekit.body%</div></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Strategy Configuration for API Requests\nDESCRIPTION: This diff shows how to modify the strategy configuration to include 'cookie' and 'baseLocale' alongside 'url', ensuring locale resolution for both document and API requests.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-strategy: [\"url\"]\n+strategy: [\"url\", \"cookie\", \"baseLocale\"]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition - createComment\nDESCRIPTION: Function signature for creating comments in discussions. Takes arguments including content, lix database instance, and optional parent comment reference. Returns a promise with the created comment's details including content, discussion ID, comment ID, and parent ID if applicable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createComment.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateComment(args): Promise<{ \n  content: string; \n  discussion_id: string; \n  id: string; \n  parent_id: null | string; \n}>\n```\n\n----------------------------------------\n\nTITLE: Disabling Reload on Locale Change\nDESCRIPTION: Shows how to change locale without triggering a page reload by passing additional options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Change locale without reloading the page\nsetLocale(\"de\", { reload: false });\n```\n\n----------------------------------------\n\nTITLE: Localizing URLs in TypeScript\nDESCRIPTION: Examples of using the localizeHref() function to localize URLs in different scenarios, including relative paths and cross-origin links.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// In a React/Vue/Svelte component\nconst NavLink = ({ href }) => {\n  // Automatically uses current locale, keeps path relative\n  return <a href={localizeHref(href)}>...</a>;\n};\n\n// Examples:\nlocalizeHref(\"/about\")\n// => \"/de/about\" (if current locale is \"de\")\nlocalizeHref(\"/store\", { locale: \"fr\" })\n// => \"/fr/store\" (explicit locale)\n\n// Cross-origin links remain absolute\nlocalizeHref(\"https://other-site.com/about\")\n// => \"https://other-site.com/de/about\"\n```\n\n----------------------------------------\n\nTITLE: Localized Pattern Order Configuration\nDESCRIPTION: Shows how to properly order localized patterns within URL configurations, particularly for path-based localization with prefixes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/strategy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ INCORRECT ORDER: The first pattern is too general\n{\n  pattern: \"https://example.com/:path(.*)?\",\n  localized: [\n    [\"en\", \"https://example.com/:path(.*)?\"]\n    [\"en\", \"https://example.com/en/blog/:id\"]\n  ],\n}\n\n// ✅ CORRECT ORDER: Specific patterns first, then more general patterns\n{\n  pattern: \"https://example.com/:path(.*)?\",\n  localized: [\n    [\"en\", \"https://example.com/en/blog/:id\"],\n    [\"en\", \"https://example.com/:path(.*)?\"]\n  ],\n}\n\n// ❌ INCORRECT ORDER FOR DELOCALIZATION: Generic pattern first will cause problems\n{\n  pattern: \"/:path(.*)?\",\n  localized: [\n    [\"en\", \"/:path(.*)?\"]\n    [\"de\", \"/de/:path(.*)?\"]\n  ],\n}\n\n// ✅ CORRECT ORDER: More specific patterns with prefixes should come first\n{\n  pattern: \"/:path(.*)?\",\n  localized: [\n    [\"de\", \"/de/:path(.*)?\"]\n    [\"en\", \"/:path(.*)?\"]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Support in root.tsx\nDESCRIPTION: Server-side rendering configuration for Paraglide in React Router's root component, including locale context and loader setup\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/react-router/README.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n\tassertIsLocale,\n\tbaseLocale,\n\tgetLocale,\n\tisLocale,\n\toverwriteGetLocale,\n} from \"./paraglide/runtime\";\n\n+export function loader(args: Route.LoaderArgs) {\n+\treturn {\n+\t\tlocale: isLocale(args.params.locale) ? args.params.locale : baseLocale,\n+\t};\n}\n\n+const LocaleContextSSR = createContext(baseLocale);\n+if (import.meta.env.SSR) {\n+\toverwriteGetLocale(() => assertIsLocale(useContext(LocaleContextSSR)));\n+}\n\nexport default function App(props: Route.ComponentProps) {\n\treturn (\n+\t\t<LocaleContextSSR.Provider value={props.loaderData.locale}>\n\t\t\t<Outlet />\n+\t\t</LocaleContextSSR.Provider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n in SvelteKit hooks.server.ts\nDESCRIPTION: Modifications to the SvelteKit hooks.server.ts file to detect language, load resources, and attach i18n functionality to each request. This is the entry point for all requests in a SvelteKit application.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport type { Handle } from '@sveltejs/kit'\n+import { loadAllResources, detectLanguage, createLookupFunctionForLanguage } from '$i18n'\n\n// load ´Resources` of all languages into memory\n+loadAllResources()\n\nexport const handle = (async ({ event, resolve }) => {\n  // detect the language depending on some strategy\n+ const language = detectLanguage(event)\n\n  // initialize the lookup function for the selected language\n+ const i18n = createLookupFunctionForLanguage(language)\n\n  // attach the language information to the request\n+ event.locals.language = language\n  // attach the i18n function to the request\n+ event.locals.i18n = i18n\n\n- return resolve(event)\n  // when the request was completed, replace the HTML lang attribute with the language\n+ return resolve(event, { transformPageChunk: ({ html }) => html.replace('%lang%', language) })\n}) satisfies Handle\n```\n\n----------------------------------------\n\nTITLE: Using translations in server-side load functions\nDESCRIPTION: Example of how to use translations in server-side load functions by accessing the i18n function from locals.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nimport type { LayoutLoad } from './$types'\n\n-export const load = (() => {\n+export const load = (({ locals }) => {\n- return { pageTitle: 'Home' }\n+ return { pageTitle: locals.i18n.home.pageTitle() }\n}) satisfies LayoutLoad\n```\n\n----------------------------------------\n\nTITLE: Querying Changes in Lix\nDESCRIPTION: Shows how to query and retrieve changes made to a specific file in the Lix system\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all changes for this file\nconst changes = await lix.db\n\t.selectFrom(\"change\")\n\t.where(\"file_id\", \"=\", file.id)\n\t.innerJoin(\"snapshot\", \"snapshot.id\", \"change.snapshot_id\")\n\t.execute();\n\nconsole.log(\"Changes for the JSON file:\", changes);\n```\n\n----------------------------------------\n\nTITLE: Localizing and De-localizing URLs for Customer 1 in JavaScript\nDESCRIPTION: This snippet shows examples of localizing and de-localizing URLs for Customer 1's domain, demonstrating how to switch between French and English locales.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocalizeHref(\"https://customer1.fr/about\", { locale: \"fr\" })\n// Output: \"https://customer1.fr/about\"\n\nlocalizeHref(\"https://customer1.fr/about\", { locale: \"en\" })\n// Output: \"https://customer1.fr/en/about\"\n\ndeLocalizeHref(\"https://customer1.fr/en/about\");\n// Output: \"https://customer1.fr/about\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown Files within Markdown\nDESCRIPTION: Example of using markdown-wc-embed to include other markdown files within a markdown document.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimports:\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc/dist/markdown-wc-embed.js\n---\n\n# Hello World\n\nThis is a markdown file that embeds another markdown file 🤯\n\n<markdown-wc-embed src=\"https://cdn.jsdelivr.net/gh/opral/monorepo@latest/packages/markdown-wc/README.md\"></markdown-wc-embed>\n```\n\n----------------------------------------\n\nTITLE: Creating In-Memory LSP Environment in TypeScript\nDESCRIPTION: This function creates an in-memory storage environment for Language Server Protocol (LSP). It's useful for testing or quick prototyping. The function returns an LspEnvironment object.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createLspInMemoryEnvironment.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateLspInMemoryEnvironment(): LspEnvironment\n```\n\n----------------------------------------\n\nTITLE: Using jsonArrayFrom for Nested Queries\nDESCRIPTION: Example demonstrating how to use jsonArrayFrom to create a nested JSON array result from a subquery, showing a relationship between person and pets tables.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonArrayFrom.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await db\n  .selectFrom('person')\n  .select((eb) => [\n    'id',\n    jsonArrayFrom(\n      eb.selectFrom('pet')\n        .select(['pet.id as pet_id', 'pet.name'])\n        .whereRef('pet.owner_id', '=', 'person.id')\n        .orderBy('pet.name')\n    ).as('pets')\n  ])\n  .execute()\n\nresult[0].id\nresult[0].pets[0].pet_id\nresult[0].pets[0].name\n```\n\n----------------------------------------\n\nTITLE: Change Leaf Query Example in TypeScript\nDESCRIPTION: Demonstrates querying leaf changes (changes without children).\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n  .where(changeIsLeaf())\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Waiting for File Queue Settlement in Lix SDK in TypeScript\nDESCRIPTION: Example demonstrating how to use the fileQueueSettled function to wait until the file processing queue is settled before proceeding.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait fileQueueSettled({ lix });\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Configuration Example in TypeScript\nDESCRIPTION: Simplified example showing the basic structure of the plugins property in the configuration object. This demonstrates the minimal implementation of adding a JSON plugin to the configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  sourceLanguageTag: \"en\",\n  plugins: [\n    // pluginJson\n    pluginJson({\n      pathPattern: \"./languages/{language}.json\",\n    }),\n  ],\n}`;\n```\n\n----------------------------------------\n\nTITLE: Adding Pathname Support in Paraglide JS Config\nDESCRIPTION: Demonstrates the new pathnames API configuration that allows creating custom pathname patterns using path-to-regexp syntax\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  strategy: [\"pathname\", \"cookie\", \"baseLocale\"],\n+ pathnames: {\n+   \"{*path}\": {\n+     \"de\": \"/de{/*path}\",\n+     \"en\": \"/en{/*path}\",\n}\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant-Specific Locale Switcher in JavaScript\nDESCRIPTION: This snippet shows how to implement a tenant-specific locale switcher that only displays supported locales for the current tenant, preventing users from accessing unsupported locales.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of filtering locales for a language switcher\nfunction getTenantSupportedLocales(hostname) {\n  // Determine which tenant we're on based on hostname\n  if (hostname.includes('customer1.com')) {\n    // Customer1 only supports English and German\n    return ['en', 'de'];\n  } else if (hostname.includes('customer2.com')) {\n    // Customer2 only supports French and Spanish\n    return ['fr', 'es'];\n  } else if (hostname.includes('customer3.com')) {\n    // Customer3 supports all locales\n    return ['en', 'de', 'fr', 'es'];\n  }\n}\n\n// In your language switcher component\nfunction LanguageSwitcher() {\n  const hostname = window.location.hostname;\n  const supportedLocales = getTenantSupportedLocales(hostname);\n  \n  return (\n    <div className=\"language-switcher\">\n      {supportedLocales.map(locale => (\n        <a \n          key={locale} \n          href={localizeHref(window.location.href, { locale })}\n        >\n          {locale.toUpperCase()}\n        </a>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Paraglide Vite Plugin to vite.config.js\nDESCRIPTION: Modifications to add the paraglideVitePlugin to the Vite configuration file. This sets up the project path, output directory, and strategy for handling locales.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { defineConfig } from 'vite';\n+import { paraglideVitePlugin } from '@inlang/paraglide-js';\n\nexport default defineConfig({\n\tplugins: [\n\t\tsveltekit(),\n+\t\tparaglideVitePlugin({\n+\t\t\tproject: './project.inlang',\n+\t\t\toutdir: './src/lib/paraglide',\n+\t\t\tstrategy: ['url', 'cookie', 'baseLocale'],\n+\t\t})\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Paraglide Middleware in Express or Hono\nDESCRIPTION: Shows how to use paraglideMiddleware in frameworks like Express JS or Hono. The middleware is applied as a route handler, processing the request and passing control to the next middleware if no redirect occurs.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/server/-internal-.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (req, res, next) => {\n  const result = await serverMiddleware(req, ({ request, locale }) => {\n    // If a redirect happens this won't be called\n    return next(request);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Leaf Query Example in TypeScript\nDESCRIPTION: Shows how to query leaf changes within a specific version.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n  .where(changeIsLeafInVersion(currentVersion))\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Using changeSetElementInSymmetricDifference in a Database Query\nDESCRIPTION: This example demonstrates how to use the changeSetElementInSymmetricDifference function in a database query to select all elements in the symmetric difference of two change sets.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeSetElementInSymmetricDifference.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set_element\")\n  .where(changeSetElementInSymmetricDifference(a: changeSetA, b: changeSetB))\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Adding Locales in Settings Configuration\nDESCRIPTION: Shows how to add a new locale to the project settings file by modifying the locales array.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// project.inlang/settings.json\n\n{\n  \"baseLocale\": \"en\",\n+ \"locales\": [\"en\", \"de\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Page Rendering with Vike (TypeScript)\nDESCRIPTION: Client-side rendering configuration file that defines how pages are rendered in the browser using Vike's rendering system.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/renderer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n_default.page.client.tsx\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Custom Components for Inlang Editor Documentation\nDESCRIPTION: This code snippet imports various components from Storybook's blocks module and a custom InlangBundle module. These imports are typically used to create interactive documentation and stories for the Inlang Editor Component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/inlang-bundle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  Meta,\n  Primary,\n  Controls,\n  Story,\n  Canvas,\n  ArgTypes,\n  Source,\n} from \"@storybook/blocks\";\nimport * as InlangBundle from \"./stories/inlang-bundle.stories\";\n```\n\n----------------------------------------\n\nTITLE: Defining changeSetElementInSymmetricDifference Function in TypeScript\nDESCRIPTION: This function returns the symmetric difference between two change sets. It takes two parameters 'a' and 'b', representing the change sets, and returns a function that can be used in a database query to filter elements in the symmetric difference.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeSetElementInSymmetricDifference.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nchangeSetElementInSymmetricDifference(`a`, `b`): (`eb`) => `ExpressionWrapper`<[`LixDatabaseSchema`](../type-aliases/LixDatabaseSchema.md), `\"change_set_element\"`, `SqlBool`>\n```\n\n----------------------------------------\n\nTITLE: Using translations in client-side TypeScript files\nDESCRIPTION: Example of how to use translations within a TypeScript file on the client side by retrieving the i18n context.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n+ import { getContext } from 'svelte/store'\n\nconst doSomething = (projects: string[]) => {\n  // ...\n\n- return `Added ${projects.length} projects`\n+ const { i18n } = getContext('i18n')\n+ return i18n.projects.added(projects.length)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Valid Locale in TypeScript\nDESCRIPTION: Demonstrates how to use the isLocale() function to validate a locale and set it accordingly.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nif (isLocale(params.locale)) {\n    setLocale(params.locale);\n  } else {\n    setLocale('en');\n  }\n```\n\n----------------------------------------\n\nTITLE: Correcting Empty Strategy Array in Paraglide JS Configuration\nDESCRIPTION: This snippet shows how to fix an empty strategy array in the Paraglide JS configuration, which can cause locale resolution failures.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-strategy: []\n+strategy: [\"cookie\", \"baseLocale\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Base Locale Condition in TypeScript\nDESCRIPTION: Example showing how to conditionally execute code based on whether the current locale matches the base locale. This pattern is useful for implementing locale-specific logic in internationalized applications.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (locale === baseLocale) {\n    // do something\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing I18nWrapper Component for SvelteKit Internationalization\nDESCRIPTION: This snippet defines the I18nWrapper component used in the layout. It sets up the internationalization context using Svelte's setContext and creates a lookup function for the current language.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { page } from '$app/stores'\n  import { setContext } from 'svelte'\n  import { createLookupFunctionForLanguage } from '$i18n'\n\n  export let data: LayoutData\n  const i18n = createLookupFunctionForLanguage($page.data.inlangLanguage)\n\n  setContext('inlang', { language: data.language, i18n })\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Multiple PathPattern Configuration\nDESCRIPTION: Advanced configuration example showing how to specify multiple path patterns for fallback scenarios.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// project.inlang/settings.json\n{\n  \"modules\": [ ... ],\n  \"plugin.inlang.messageFormat\": {\n    \"pathPattern\": [\"./defaults/{locale}.json\", \"./customer1/{locale}.json\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading language resources in SvelteKit layout.ts\nDESCRIPTION: Modification to the shared layout.ts file to load the resource for the current language asynchronously before rendering begins.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport type { LayoutLoad } from './$types'\n+import { loadResourceAsync } from '$i18n'\n\n-export const load = (() => {\n+export const load = (async ({ data }) => {\n+ await loadResourceAsync(data.language)\n+ return { language: data.language }\n}) satisfies LayoutLoad\n```\n\n----------------------------------------\n\nTITLE: Using changeIsLeaf Function in TypeScript Query\nDESCRIPTION: This example demonstrates how to use the changeIsLeaf function in a database query to select all leaf changes from the 'change' table in the Lix database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeaf.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n  .where(changeIsLeaf())\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeUpdate Type Alias in TypeScript\nDESCRIPTION: Defines the VersionChangeUpdate type alias as an Updateable version of the VersionChangeTable. This type is used in the database schema to represent update operations for version changes.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/VersionChangeUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**VersionChangeUpdate** = `Updateable`\\<`VersionChangeTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Adding Paraglide JS Middleware to Astro\nDESCRIPTION: Modifications to the middleware.ts file to integrate Paraglide JS server middleware for handling internationalized routes and requests in Astro.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/astro/README.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport { paraglideMiddleware } from \"./paraglide/server.js\";\n\nexport const onRequest = defineMiddleware((context, next) => {\n+\treturn paraglideMiddleware(context.request, () => next());\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Inlang Settings Story in Storybook Canvas\nDESCRIPTION: This snippet demonstrates how to render an example of the Inlang Settings component using Storybook's Canvas and Story components.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/src/inlang-settings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas>\n    <Story of={InlangSettings.Props} />\n</Canvas>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mermaid Diagrams in Markdown\nDESCRIPTION: Example of how to add mermaid diagrams within markdown using code blocks with the mermaid language identifier. This feature was added in version 0.4.0.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph TD;\nA-->B;\nA-->C;\nB-->D;\nC-->D;\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Inlang Project Configuration\nDESCRIPTION: Shows how to validate an Inlang project configuration using the CLI, specifying a custom project path.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx @inlang/cli validate --project ./path/to/{project-name}.inlang\n```\n\n----------------------------------------\n\nTITLE: Overwriting setLocale Function in TypeScript\nDESCRIPTION: Example of using overwriteSetLocale() to customize how the locale is set, such as modifying a cookie.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\noverwriteSetLocale((newLocale) => {\n    // set the locale in a cookie\n    return Cookies.set('locale', newLocale)\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with JSON Object Projection in Kysely (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use Kysely's jsonObjectFrom method to create a nested JSON object in a SQL query. It selects a person's ID and their favorite pet as a JSON object.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await db\n  .selectFrom('person')\n  .select((eb) => [\n    'id',\n    jsonObjectFrom(\n      eb.selectFrom('pet')\n        .select(['pet.id as pet_id', 'pet.name'])\n        .whereRef('pet.owner_id', '=', 'person.id')\n        .where('pet.is_favorite', '=', true)\n    ).as('favorite_pet')\n  ])\n  .execute()\n\nresult[0].id\nresult[0].favorite_pet.pet_id\nresult[0].favorite_pet.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Plugin in Next.js\nDESCRIPTION: Demonstrates how to add and configure the Paraglide Webpack plugin in the Next.js configuration file. This setup includes URL patterns for localization and strategy settings.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssg/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { paraglideWebpackPlugin } from \"@inlang/paraglide-js\";\n\n/**\n * @type {import('next').NextConfig}\n */\nexport default {\n\twebpack: (config) => {\n\t\tconfig.plugins.push(\n\t\t\tparaglideWebpackPlugin({\n\t\t\t\toutdir: \"./src/paraglide\",\n\t\t\t\tproject: \"./project.inlang\",\n       strategy: [\"url\", \"cookie\", \"baseLocale\"],\n\t\t\t\turlPatterns: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: 'https://:domain(.*)/:path*',\n\t\t\t\t\t\tlocalized: [\n\t\t\t\t\t\t\t['de', 'https://:domain(.*)/de/:path*'],\n\t\t\t\t\t\t\t['en', 'https://:domain(.*)/:path*'],\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t);\n\t\treturn config;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Locale Resolution Implementation\nDESCRIPTION: Shows how to implement dynamic locale resolution using document attributes on the client side and AsyncLocalStorage on the server side.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/strategy.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m } from \"./paraglide/messages.js\";\nimport { overwriteGetLocale } from \"./paraglide/runtime.js\";\n\noverwriteGetLocale(() => document.documentElement.lang /** en */);\n\nm.orange_dog_wheel(); // Hello world!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m } from \"./paraglide/messages.js\";\nimport {overwriteGetLocale, baseLocale } from \"./paraglide/runtime.js\";\nimport { AsyncLocalStorage } from \"node:async_hooks\";\nconst localeStorage = new AsyncLocalStorage();\n\noverwriteGetLocale(() => {\n  //any calls to getLocale() in the async local storage context will return the stored locale\n  return localeStorage.getStore() ?? baseLocale;\n});\n\nexport function onRequest(request, next) {\n  const locale = detectLocale(request); //parse the locale from headers, cookies, etc.\n  // set the async locale storage for the current request\n  // to the detected locale and let the request continue\n  // in that context \n  return localeStorage.run(locale, async () => await next());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sherlock project settings in JSON\nDESCRIPTION: This snippet shows how to create a project.inlang/settings.json file in the root of your project to configure the Sherlock extension. It includes settings for the base locale, supported locales, and required modules.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t// official schema ensures that your project file is valid\n\t\"$schema\": \"https://inlang.com/schema/project-settings\",\n\t// the \"source\" language tag that is used in your project\n\t\"baseLocale\": \"en\",\n\t// all the language tags you want to support in your project\n\t\"locales\": [\"en\", \"de\"],\n\t\"modules\": [\"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@4/dist/index.js\"], // or use another storage module: https://inlang.com/c/plugins (i18next, json, inlang message format)\n\t\"settings\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discussion with Initial Comment in TypeScript\nDESCRIPTION: Demonstrates how to create a new discussion with a first comment using the createDiscussion function. The function requires a Lix instance, changeSet object, and the content for the first comment. Returns a promise resolving to the created discussion object.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createDiscussion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  const changeSet = await createChangeSet({ lix, changes: [\"change1\", \"change2\"] });\n  const discussion = await createDiscussion({ lix, changeSet, firstComment: { content: \"first comment\" } });\n```\n\n----------------------------------------\n\nTITLE: Defining Paraglide Runtime Type Interface in TypeScript\nDESCRIPTION: Type declaration for the Paraglide runtime API object that defines various locale-related functions and configuration properties. Located in runtime/type.ts.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  assertIsLocale: assertIsLocale,\n  baseLocale: baseLocale,\n  cookieMaxAge: cookieMaxAge,\n  cookieName: cookieName,\n  deLocalizeHref: deLocalizeHref,\n  deLocalizeUrl: deLocalizeUrl,\n  disableAsyncLocalStorage: disableAsyncLocalStorage,\n  experimentalMiddlewareLocaleSplitting: experimentalMiddlewareLocaleSplitting,\n  extractLocaleFromCookie: extractLocaleFromCookie,\n  extractLocaleFromRequest: extractLocaleFromRequest,\n  extractLocaleFromUrl: extractLocaleFromUrl,\n  generateStaticLocalizedUrls: generateStaticLocalizedUrls,\n  getLocale: getLocale,\n  getUrlOrigin: getUrlOrigin,\n  isLocale: isLocale,\n  isServer: isServer,\n  locales: locales,\n  localizeHref: localizeHref,\n  localizeUrl: localizeUrl,\n  overwriteGetLocale: overwriteGetLocale,\n  overwriteGetUrlOrigin: overwriteGetUrlOrigin,\n  overwriteServerAsyncLocalStorage: overwriteServerAsyncLocalStorage,\n  overwriteSetLocale: overwriteSetLocale,\n  serverAsyncLocalStorage: serverAsyncLocalStorage,\n  setLocale: setLocale,\n  strategy: strategy,\n  trackMessageCall: trackMessageCall,\n  urlPatterns: urlPatterns\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NewVersionChange Type Alias for Database Schema in TypeScript\nDESCRIPTION: Creates a type alias called NewVersionChange that represents the structure of data needed to insert a new record into the VersionChangeTable. It uses the Insertable utility type to make the table type appropriate for insertion operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewVersionChange.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**NewVersionChange** = `Insertable`<`VersionChangeTable`>\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory Database with Kysely in TypeScript\nDESCRIPTION: Creates an in-memory database and initializes a Kysely instance with the appropriate dialect. The code connects the Kysely query builder to the in-memory database through a custom dialect configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/sqlite-wasm-kysely/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = createInMemoryDatabase();\n\nconst kysely = new Kysely<DB>({\n  dialect: createDialect({\n    database: db,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Locale Support\nDESCRIPTION: Setting up React Router routes with optional locale parameter prefix for internationalization\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/react-router/README.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n\ttype RouteConfig,\n\tindex,\n\tprefix,\n\troute,\n} from \"@react-router/dev/routes\";\n\nexport default [\n+\t...prefix(\":locale?\", [\n\t\tindex(\"routes/home.tsx\"),\n\t\troute(\"about\", \"routes/about.tsx\"),\n+\t]),\n] satisfies RouteConfig;\n```\n\n----------------------------------------\n\nTITLE: Library Usage for Server-Side Rendering\nDESCRIPTION: Demonstrates how to use the library programmatically for parsing markdown and handling web component imports.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse } from '@opral/markdown-wc';\n\nconst markdown = `\n\n# Hello World\n\n// This is a web component\n<doc-card>\n  <h1>Card Title</h1>\n  <p>Card content</p>\n</doc-card>\n`;\n\n// Parse markdown\nconst parsed = parse(markdown);\n\n// Register web components\nfor (const url of parsed.frontmatter.imports ?? []) {\n  // optionally sanitize the imported imported here\n  // by, for example, only trusting a specific domain\n  await import(url)\n}\n\n// render HTML\nrender(parsed.html);\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveAccount Type Alias in TypeScript\nDESCRIPTION: Defines the ActiveAccount type alias using the Selectable type applied to the ActiveAccountTable. This type is likely used for querying or manipulating active account data in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ActiveAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActiveAccount = Selectable<ActiveAccountTable>\n```\n\n----------------------------------------\n\nTITLE: Querying File Content\nDESCRIPTION: Demonstrates how to query and retrieve file content from the current version\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = await lix.db\n  .selectFrom(\"file\")\n  .where(\"path\", \"=\", \"/example.json\")\n  .selectAll()\n  .executeTakeFirstOrThrow();\n\nconsole.log(file)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Files in Paraglide JS Compiler\nDESCRIPTION: Demonstrates how to use the additionalFiles option to include extra files in the output directory during compilation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  project: \"./project.inlang\",\n  outdir: \"./src/paraglide\",\n  additionalFiles: [\n+    \"my-file.js\": \"console.log('hello')\"\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Aggregating Subquery Results into JSON Array with Kysely in TypeScript\nDESCRIPTION: Example demonstrating how to use jsonArrayFrom helper to aggregate subquery results into a JSON array in SQLite using the Kysely query builder.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await db\n  .selectFrom('person')\n  .select((eb) => [\n    'id',\n    jsonArrayFrom(\n      eb.selectFrom('pet')\n        .select(['pet.id as pet_id', 'pet.name'])\n        .whereRef('pet.owner_id', '=', 'person.id')\n        .orderBy('pet.name')\n    ).as('pets')\n  ])\n  .execute()\n\nresult[0].id\nresult[0].pets[0].pet_id\nresult[0].pets[0].name\n```\n\n----------------------------------------\n\nTITLE: Validating User-Selected Locale in TypeScript\nDESCRIPTION: Example demonstrating how to check if a user-selected locale is included in the project's supported locales list. This validation is important before applying locale preferences.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (locales.includes(userSelectedLocale) === false) {\n    throw new Error('Locale is not available');\n  }\n```\n\n----------------------------------------\n\nTITLE: Disabling AsyncLocalStorage for Serverless Environments\nDESCRIPTION: Configuration diff showing how to disable AsyncLocalStorage when deploying to edge environments like Vercel Edge or Cloudflare Pages where Node.js dependencies might not be available.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineConfig({\n\tplugins: [\n\t\tsveltekit(),\n\t\tparaglideVitePlugin({\n\t\t\tproject: './project.inlang',\n\t\t\toutdir: './src/lib/paraglide',\n+\t\t\tdisableAsyncLocalStorage: true\n\t\t})\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Files in Lix\nDESCRIPTION: Demonstrates how to update an existing JSON file in the Lix system with new values\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// updating the json from the previous example\njson[\"version\"] = \"1.1.0\";\njson[\"settings\"][\"maxUsers\"] = 20;\n\n// Update the file\nawait lix.db\n\t.updateTable(\"file\")\n\t.set({\n\t\tdata: new TextEncoder().encode(JSON.stringify(updatedJson)),\n\t})\n\t.where(\"path\", \"=\", \"/example.json\")\n\t.execute();\n\n```\n\n----------------------------------------\n\nTITLE: Installing Inlang SDK via npm\nDESCRIPTION: Command to install the Inlang SDK using npm package manager.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @inlang/sdk\n```\n\n----------------------------------------\n\nTITLE: Server-side URL Localization in TypeScript\nDESCRIPTION: Examples of using the localizeUrl() function for server-side URL localization, including middleware usage and domain-based localization.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Server middleware example\napp.use((req, res, next) => {\n  const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);\n  const localized = localizeUrl(url, { locale: \"de\" });\n\n  if (localized.href !== url.href) {\n    return res.redirect(localized.href);\n  }\n  next();\n});\n\n// Using with URL patterns\nconst url = new URL(\"https://example.com/about\");\nlocalizeUrl(url, { locale: \"de\" });\n// => URL(\"https://example.com/de/about\")\n\n// Using with domain-based localization\nconst url = new URL(\"https://example.com/store\");\nlocalizeUrl(url, { locale: \"de\" });\n// => URL(\"https://de.example.com/store\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Kysely with ParseJSONResultsPlugin for SQLite\nDESCRIPTION: Demonstrates how to set up the Kysely database instance with the required ParseJSONResultsPlugin for proper JSON parsing in SQLite queries.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonObjectFrom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new Kysely({\n  dialect: new SqliteDialect(config),\n  plugins: [new ParseJSONResultsPlugin()]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Changes in Version using Lix SDK (TypeScript)\nDESCRIPTION: The updateChangesInVersion function updates the changes that are part of a version by updating the change_set_element table in the database. It takes an object with changes array, lix instance, and version ID as parameters and returns a Promise.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/updateChangesInVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**updateChangesInVersion**(`args`): `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout for Locale Handling\nDESCRIPTION: Implementation of locale handling in the NextJS root layout component with SSR support and locale overwriting.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+import {\n+\tassertIsLocale,\n+\tbaseLocale,\n+\tgetLocale,\n+\tLocale,\n+\toverwriteGetLocale,\n+} from \"../paraglide/runtime\";\nimport React, { cache } from \"react\";\nimport { headers } from \"next/headers\";\n\n+const ssrLocale = cache(() => ({ locale: baseLocale, origin: \"http://localhost\" }));\n\n// overwrite the getLocale function to use the locale from the request\n+overwriteGetLocale(() => assertIsLocale(ssrLocale().locale));\n+overwriteGetUrlOrigin(() => ssrLocale().origin);\n\nexport default async function RootLayout({\n\tchildren,\n}) {\n\t// @ts-expect-error - headers must be sync\n\t// https://github.com/opral/inlang-paraglide-js/issues/245#issuecomment-2608727658\n+\tssrLocale().locale = headers().get(\"x-paraglide-locale\") as Locale;\n  // @ts-expect-error - headers must be sync\n\tssrLocale().origin = new URL(headers().get(\"x-paraglide-request-url\")).origin; \n\n\treturn (\n\t\t<html lang={getLocale()}>\n\t\t\t<body>\n\t\t\t\t{children}\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin\nDESCRIPTION: ESLint configuration setup that incorporates React-specific rules and settings. Includes React version specification, plugin integration, and recommended rule sets.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/src/utilities/editor/sherlock-editor-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\"\n\nexport default tseslint.config({\n\t// Set the react version\n\tsettings: { react: { version: \"18.3\" } },\n\tplugins: {\n\t\t// Add the react plugin\n\t\treact,\n\t},\n\trules: {\n\t\t// other rules...\n\t\t// Enable its recommended rules\n\t\t...react.configs.recommended.rules,\n\t\t...react.configs[\"jsx-runtime\"].rules,\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex InlangBundle Example in JSX\nDESCRIPTION: Displays a complex example of the InlangBundle component using Storybook's Canvas component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/inlang-bundle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={InlangBundle.Complex} />\n```\n\n----------------------------------------\n\nTITLE: Setting up i18n context in SvelteKit layout.svelte\nDESCRIPTION: Modifications to the root layout.svelte file to initialize the lookup function and add it to Svelte's context for use in other components.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n<script lang=\"ts\">\n  import type { LayoutData } from './$types'\n+ import { setContext } from 'svelte'\n+ import { createLookupFunctionForLanguage } from '$i18n'\n\n  export let data: LayoutData\n+ const i18n = createLookupFunctionForLanguage(data.language)\n\n+ setContext('i18n', { language: data.language, i18n })\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Localizing and De-localizing URLs for Customer 2 in JavaScript\nDESCRIPTION: This snippet demonstrates localizing and de-localizing URLs for Customer 2's domain, showing how to switch between English and French locales.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocalizeHref(\"https://customer2.com/about\", { locale: \"en\" })\n// Output: \"https://customer2.com/about\"\n\nlocalizeHref(\"https://customer2.com/about\", { locale: \"fr\" })\n// Output: \"https://customer2.com/fr/about\"\n\ndeLocalizeHref(\"https://customer2.com/fr/about\");\n// Output: \"https://customer2.com/about\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Operations in TypeScript\nDESCRIPTION: Demonstrates the proposed simplified CRUD operations for message handling in the new message-first architecture.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/message-first-architecture/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmessages = messages.create({\n  id: \"hello\",\n  languageTag: \"en-US\",\n  body: \"how are you?\",\n});\n\nconst message = messages.get({\n  id: \"hello\",\n  languageTag: \"en-US\",\n  body: \"how are you?\",\n});\n\nmessages = messages.update({\n  id: \"hello\",\n  languageTag: \"en-US\",\n  body: \"how are you doing?\",\n});\n\nmessages = messages.delete({\n  id: \"hello\",\n  languageTag: \"en-US\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sherlock settings in JSON\nDESCRIPTION: This snippet demonstrates how to configure the settings.json file for Sherlock in the project.inlang directory. It specifies the base locale, supported locales, and includes a JSON plugin for managing translation files.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/_switch_to_sherlock.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://inlang.com/schema/project-settings\",\n\t\"baseLocale\": \"en\",\n\t\"locales\": [\"en\", \"de\"],\n\t\"modules\": [\"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@4/dist/index.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Invisible Anchors for Static Page Generation\nDESCRIPTION: Diff showing how to add invisible anchor tags to layout.svelte. These help SvelteKit crawl and generate all pages for each locale during build time.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n<script>\n\timport { page } from '$app/state';\n+\timport { locales, localizeHref } from '$lib/paraglide/runtime';\n</script>\n\n<slot></slot>\n\n+<div style=\"display:none\">\n+\t{#each locales as locale}\n+\t\t<a href={localizeHref(page.url.pathname, { locale })}>{locale}</a>\n+\t{/each}\n+</div>\n```\n\n----------------------------------------\n\nTITLE: Testing request isolation in parallel requests\nDESCRIPTION: Example code for testing if locale isolation works correctly by making parallel requests to different localized routes. This helps verify that AsyncLocalStorage is working properly and locale state doesn't leak between concurrent requests.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Test that locale doesn't leak between requests\nawait Promise.all([\n  fetch('/fr/about'),\n  fetch('/de/contact')\n])\n```\n\n----------------------------------------\n\nTITLE: Generating Localized URLs for Static Site Generation\nDESCRIPTION: Example demonstrating how to generate all localized versions of URLs for static site generation or sitemap creation. This is especially useful for frameworks like NextJS that need to pre-render pages for all supported locales.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst urls = generateStaticLocalizedUrls([\n  \"https://example.com/about\",\n  \"https://example.com/blog\",\n]);\nurls[0].href // => \"https://example.com/about\"\nurls[1].href // => \"https://example.com/blog\"\nurls[2].href // => \"https://example.com/de/about\"\nurls[3].href // => \"https://example.com/de/blog\"\n...\n```\n\n----------------------------------------\n\nTITLE: Change Conflict Query Example in TypeScript\nDESCRIPTION: Shows how to query conflicts within a specific version using the changeConflictInVersion filter.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst conflicts = await lix.db.selectFrom(\"change_conflict\")\n   .where(changeConflictInVersion(currentVersion))\n   .selectAll()\n   .execute();\n```\n\n----------------------------------------\n\nTITLE: Filtering Changes by Label in Lix Database\nDESCRIPTION: Examples of using the changeHasLabel function to select changes with a specific label from the Lix database. The first example demonstrates basic filtering for changes with a 'checkpoint' label, while the second example shows how to negate the filter to find changes without that label.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeHasLabel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n   .where(changeHasLabel(\"checkpoint\"))\n   .selectAll()\n   .execute();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n\t\t.where((eb) => eb.not(changeHasLabel(\"checkpoint\")))\n\t\t.selectAll()\n\t\t.execute();\n```\n\n----------------------------------------\n\nTITLE: Adding URL Rerouting Hook in hooks.ts\nDESCRIPTION: TypeScript code for the reroute function in hooks.ts. This is essential for URL handling and must be exported from hooks.ts, not hooks.server.ts.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Reroute } from '@sveltejs/kit';\nimport { deLocalizeUrl } from '$lib/paraglide/runtime';\n\nexport const reroute: Reroute = (request) => {\n\treturn deLocalizeUrl(request.url).pathname;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Next-intl Plugin Configuration in JSON\nDESCRIPTION: Initial configuration setup for the next-intl plugin in project.inlang/settings.json, including source language and supported language tags.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/next-intl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"sourceLanguageTag\": \"en\",\n\t\"languageTags\": [\"en\", \"de\"], \n\t\"modules\": [\n\t\t\"https://cdn.jsdelivr.net/npm/@inlang/plugin-next-intl@1/dist/index.js\",\n  \t],\n\t\"plugin.inlang.nextIntl\": {\n    \t\"pathPattern\": \"./messages/{languageTag}.json\"\n  \t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Records with Prisma\nDESCRIPTION: This code example shows how to query related records in a database using Prisma's include functionality. It retrieves a user and includes their related posts and profile information in a single query.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/110-discussion.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst userWithRelations = await prisma.user.findUnique({\n  where: { id: userId },\n  include: {\n    posts: {\n      where: { published: true },\n      orderBy: { createdAt: 'desc' },\n      take: 5\n    },\n    profile: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Paraglide Vite Plugin with Cookie Domain\nDESCRIPTION: Demonstrates how to add a domain property to cookie options when configuring the Paraglide Vite plugin.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nparaglideVitePlugin({\n  project: './project.inlang',\n  outdir: \"./src/paraglide\",\n+ cookieDomain: 'example.com'\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant i18n with Disabled Locales in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure multi-tenant internationalization with disabled locales for specific tenants, redirecting unsupported locales to a 404 page.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/multi-tenancy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait compile({\n\tproject: \"./project.inlang\",\n\tstrategy: [\"url\"],\n\turlPatterns: [\n\t\t// Define 404 pages for each tenant\n\t\t{\n\t\t\tpattern: \"https://customer1.com/404\",\n\t\t\tlocalized: [\n\t\t\t\t[\"en\", \"https://customer1.com/404\"],\n\t\t\t\t[\"de\", \"https://customer1.com/de/404\"],\n\t\t\t\t// No fr pattern - will use the en pattern as fallback\n\t\t\t],\n\t\t},\n\t\t// Customer1 - only supports en and de\n\t\t{\n\t\t\tpattern: \"https://customer1.com/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"en\", \"https://customer1.com/:path(.*)?\"],\n\t\t\t\t[\"de\", \"https://customer1.com/de/:path(.*)?\"],\n\t\t\t\t[\"fr\", \"https://customer1.com/404\"],  // Redirect fr to 404\n\t\t\t\t[\"es\", \"https://customer1.com/404\"],  // Redirect es to 404\n\t\t\t],\n\t\t},\n\t\t// Customer2 - only supports fr and es\n\t\t{\n\t\t\tpattern: \"https://customer2.com/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"fr\", \"https://customer2.com/:path(.*)?\"],\n\t\t\t\t[\"es\", \"https://customer2.com/es/:path(.*)?\"],\n\t\t\t\t[\"en\", \"https://customer2.com/404\"],  // Redirect en to 404\n\t\t\t\t[\"de\", \"https://customer2.com/404\"],  // Redirect de to 404\n\t\t\t],\n\t\t},\n\t\t// Customer3 - supports all locales\n\t\t{\n\t\t\tpattern: \"https://customer3.com/:path(.*)?\",\n\t\t\tlocalized: [\n\t\t\t\t[\"en\", \"https://customer3.com/:path(.*)?\"],\n\t\t\t\t[\"de\", \"https://customer3.com/de/:path(.*)?\"],\n\t\t\t\t[\"fr\", \"https://customer3.com/fr/:path(.*)?\"],\n\t\t\t\t[\"es\", \"https://customer3.com/es/:path(.*)?\"],\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Linting System Implementation in TypeScript\nDESCRIPTION: Demonstrates the simplified linting flow in the new message-first architecture.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/message-first-architecture/RFC.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [lints, errorsDuringLinting] = await lint({ messages, config });\n\nlints.reports.filter((report) => report.level === \"error\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Paraglide Middleware in Serverless Environments\nDESCRIPTION: Demonstrates usage of paraglideMiddleware in serverless environments like Cloudflare Workers. It includes a warning about disabling AsyncLocalStorage, which should only be done in serverless contexts to prevent cross-request pollution in traditional server environments.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/server/-internal-.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  fetch: async (request) => {\n    return serverMiddleware(\n      request,\n      ({ request, locale }) => handleRequest(request, locale),\n      { disableAsyncLocalStorage: true }\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Key Names in Paraglide\nDESCRIPTION: Shows how to use arbitrary key names, including nested messages and emojis, in Paraglide 2.0.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Paraglide 1.0\nm.some_message(); // ✅ Works\nm.nested.message(); // 💥 Error\n\n// Paraglide 2.0\nm.some_message(); // ✅ Works\nm[\"nested.message\"](); // ✅ Works\n\n// Even emojis are supported\nm[\"🍌\"]();\n```\n\n----------------------------------------\n\nTITLE: Using URL Patterns with Domain-Based Localization\nDESCRIPTION: Examples of deLocalizeUrl with both path-based and domain-based localization. This shows how the function handles different URL localization patterns when extracting the base URL.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Using with URL patterns\nconst url = new URL(\"https://example.com/de/about\");\ndeLocalizeUrl(url); // => URL(\"https://example.com/about\")\n\n// Using with domain-based localization\nconst url = new URL(\"https://de.example.com/store\");\ndeLocalizeUrl(url); // => URL(\"https://example.com/store\")\n```\n\n----------------------------------------\n\nTITLE: Example English Translation File\nDESCRIPTION: Sample English language JSON file containing translation messages with variable placeholders.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"hello\": \"Hello {name}!\",\n\t\"loginButton\": \"Login\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Example in JSON\nDESCRIPTION: Sample JSON resource file showing how translation messages are stored with placeholders.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example\": \"Welcome {$name} to this example.\",\n  \"info\": \"Click the button to continue.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with jsonObjectFrom() in Kysely for SQLite\nDESCRIPTION: Illustrates how to use the jsonObjectFrom() function in a Kysely query to fetch a person's ID along with their favorite pet as a nested JSON object.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonObjectFrom.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await db\n  .selectFrom('person')\n  .select((eb) => [\n    'id',\n    jsonObjectFrom(\n      eb.selectFrom('pet')\n        .select(['pet.id as pet_id', 'pet.name'])\n        .whereRef('pet.owner_id', '=', 'person.id')\n        .where('pet.is_favorite', '=', true)\n    ).as('favorite_pet')\n  ])\n  .execute()\n\nresult[0].id\nresult[0].favorite_pet.pet_id\nresult[0].favorite_pet.name\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Paraglide JS Plugin in Inlang Settings\nDESCRIPTION: Instructions for manually installing the Paraglide JS plugin by adding it to the modules array in the Inlang project settings file. This allows the plugin to be loaded and used by the Inlang VSCode extension.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/m-function-matcher/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// project.inlang/settings.json\n{\n  \"modules\" : [\n+    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-m-function-matcher@latest/dist/index.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Storage in SolidJS Component using Context\nDESCRIPTION: Demonstrates how to access localStorage within a SolidJS component using the useLocalStorage context hook. This approach ensures consistent access to localStorage across the application.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/local-storage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Component() {\n\tconst [localStorage] = useLocalStorage();\n}\n```\n\n----------------------------------------\n\nTITLE: Namespaced Path Pattern Configuration\nDESCRIPTION: Advanced path pattern configuration with namespaces for organizing translations by section.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"plugin.inlang.json\": {\n\t\"pathPattern\": {\n\t\t\"website\": \"./resources/{languageTag}/website.json\",\n\t\t\"app\": \"./resources/{languageTag}/app.json\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Changes in Specific Version\nDESCRIPTION: Shows how to query changes specific to a particular version using the changeInVersion filter\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createChange } from \"@lix-js/sdk\";\n\nconst changes = await lix.db\n\t.selectFrom(\"change\")\n\t.where(\"file_id\", \"=\", file.id)\n  .where(changeInVersion(versionB))\n\t.innerJoin(\"snapshot\", \"snapshot.id\", \"change.snapshot_id\")\n\t.execute();\n\nconsole.log(\n  `Changes for the JSON file in version ${versionB.name}:`, changes\n);\n```\n\n----------------------------------------\n\nTITLE: Current vs Proposed Lint Rule Implementation in TypeScript\nDESCRIPTION: Compares the current and proposed approaches for implementing lint rules, showing the simplified message-first approach.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/message-first-architecture/RFC.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const missingTranslation = createLintRule({\n  id: \"inlang.missingTranslation\",\n  message: ({ message, messages, config }) => {\n    if (message.languageTag !== config.referenceLanguageTag) {\n      return;\n    }\n    const result: LintReport[] = [];\n    for (const languageTag of config.languageTags) {\n      // messages is performance optimized with an index. thus, this (should be) fast.\n      const translation = messages.get({ id: message.id, languageTag });\n      if (translation === undefined) {\n        result.push({\n          messageId: message.id,\n          languageTag,\n          message: `Missing translation for message '${message.id}' in language '${languageTag}'.`,\n        });\n      }\n    }\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration Structure\nDESCRIPTION: Example configuration structure for inlang SDK showing adapter settings and language detection options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  sdk: {\n    adapter: {\n      SvelteKit: {\n        // ... SvelteKit specific options if there are any\n      },\n    },\n    alternateLinks: false, // turn feature off\n    languageDetection: [\n      {\n        type: \"rootSlug\",\n      },\n      {\n        type: \"cookie\",\n        // can / needs to be configured\n        name: \"lang\",\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Opening Lix with Account Example\nDESCRIPTION: Example showing how to open Lix with an account retrieved from localStorage\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/openLix.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = localStorage.getItem(\"account\")\n  const lix = await openLix({ account })\n```\n\n----------------------------------------\n\nTITLE: Initializing Paraglide JS with NPX\nDESCRIPTION: Command to initialize Paraglide JS in a project using NPX. This is the first step in setting up Paraglide JS for a Vite project.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/vite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: API Comparison Example in TypeScript\nDESCRIPTION: Compares the current resource-first API with the proposed message-first approach for retrieving messages.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/message-first-architecture/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// For comparison, here is the current API:\n\nconst refResource = resources.find(\n  (resource) => resource.languageTag.name === \"en-US\",\n);\nconst message = query(refResource).get({\n  id: \"hello.login\",\n});\n\n// -------------------\n\n// this proposal\nconst message = messages.get({ id: \"hello.login\", languageTag: \"en-US\" });\n```\n\n----------------------------------------\n\nTITLE: Pluralization Example\nDESCRIPTION: Example showing how to implement pluralization using count variable and plural selector.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"some_happy_cat\": [\n\t\t{\n\t\t\t\"declarations\": [\"input count\", \"local countPlural = count: plural\"],\n\t\t\t\"selectors\": [\"countPlural\"],\n\t\t\t\"match\": {\n\t\t\t\t\"countPlural=one\": \"There is one cat.\",\n\t\t\t\t\"countPlural=other\": \"There are many cats.\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to One Active Account in TypeScript\nDESCRIPTION: This example demonstrates how to use the switchAccount function to switch to a single active account. It requires the lix object and an array containing the new account.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/switchAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait switchAccount({ lix, to: [otherAccount] });\n```\n\n----------------------------------------\n\nTITLE: Adding Message Definitions\nDESCRIPTION: Demonstrates how to add message definitions with parameters in the locale-specific JSON file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// messages/en.json\n{\n+ \t\"greeting\": \"Hello {name}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LixReadonly Type Alias in TypeScript\nDESCRIPTION: Type alias that creates a read-only version of the Lix interface, picking only the 'plugin' property and adding a db object with selectFrom and withRecursive capabilities. This allows for database querying without modification permissions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixReadonly.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nLixReadonly = Pick<Lix, \"plugin\"> & object\n```\n\n----------------------------------------\n\nTITLE: Initial Plugin Data Setup\nDESCRIPTION: Sets and retrieves initial plugin data with a setTimeout check\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfigma.setPluginData('create_test_online', 'Created by user2');\nconsole.log('create_test_online: ' + figma.getPluginData('create_test_online'));\nsetTimeout(10000, () => console.log('create_test_online: with delay:' + figma.getPluginData('create_test_online')))\n```\n\n----------------------------------------\n\nTITLE: Basic T-Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating the basic usage of t-functions for message extraction, showing both simple key and namespaced key patterns.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/t-function-matcher/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nt('name')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nt('start-page:title')\n```\n\n----------------------------------------\n\nTITLE: Updating Link Localization in HTML\nDESCRIPTION: Shows the change from using href attributes to using setLocale() function for locale switching.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-<a href=\"/de\">Deutsch</a>\n+<button onclick=\"setLocale('de')\">Deutsch</button>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration for Resource Handling in Inlang\nDESCRIPTION: Pseudocode demonstrating how JavaScript can be used as a configuration format to implement custom resource reading and writing functions, giving developers flexibility to adapt to their codebase's specific needs.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport function readResources(filesystem) {\n  // developers can specify how resources\n  // are read from the source code/files.\n  const resources = filesystem.readFile(...)\n  return resources // as AST;\n}\n\nexport function writeResources(filesystem, resources) {\n  // developers can specify how resources\n  // are written to the source code/files.\n  filesystem.writeFile(resources)\n}\n\n// The config can also be used to export\n// variables or objects.\nexport const metadata = {\n  language: \"DE\",\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Basic Change Graph Structure in Mermaid\nDESCRIPTION: A Mermaid diagram showing the basic structure of a Change Graph with multiple changes (A through G) and their dependencies. This illustrates how changes relate to each other in a graph structure.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/30-change-graph.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    G[\"Change G\"] --> F[\"Change D\"]\n    F --> B[\"Change B\"]\n    F --> C[\"Change C\"]\n    B --> A[\"Change A\"]\n    C --> A\n```\n\n----------------------------------------\n\nTITLE: Plugin Settings Type Definition\nDESCRIPTION: TypeScript type definition for plugin settings, including pathPattern, variableReferencePattern, and ignore options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PluginSettings = {\n\tpathPattern: string | { [key: string]: string }\n\tvariableReferencePattern?: [string] | [string, string]\n\tignore?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Paraglide JS with NPX\nDESCRIPTION: Command to initialize Paraglide JS in a project using NPX. This is the first step in setting up Paraglide for internationalization.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Message Retrieval Example\nDESCRIPTION: Code example showing how to retrieve and format a translated message using a typical i18n library.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport translate from \"i18n-library\";\n\nconsole.log(translate(\"example\", { name: \"Samuel\" }));\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Storage Outside SolidJS Components\nDESCRIPTION: Shows how to access localStorage outside of SolidJS components using the getLocalStorage utility function. This method provides a way to interact with localStorage in non-component code.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/local-storage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst localStorage = getLocalStorage();\n```\n\n----------------------------------------\n\nTITLE: Getting Current Locale\nDESCRIPTION: Shows how to retrieve the currently active locale.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLocale } from \"./paraglide/runtime.js\";\n\nconsole.log(getLocale()); // \"de\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plugins with a Utility Function in TypeScript\nDESCRIPTION: Example of how to use a setupPlugins utility function to merge configurations from all plugins. This function would wrap the defineConfig call to process all plugin configurations.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await setupPlugins(defineConfig(env));\n```\n\n----------------------------------------\n\nTITLE: Defining LixFileUpdate Type Alias in TypeScript\nDESCRIPTION: A type alias that represents an updateable version of the LixFileTable. This type is used to specify the shape of data when performing updates on file records in the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixFileUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**LixFileUpdate** = `Updateable`<`LixFileTable`>\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Type Alias in TypeScript\nDESCRIPTION: Type alias declaration that defines Snapshot as a Selectable type wrapping the SnapshotTable structure. Used for database operations in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Snapshot = Selectable<SnapshotTable>\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Redis Container\nDESCRIPTION: Command line instructions for building and running a Redis Docker container with specific port mapping.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-redis-image .\ndocker run -p 6379:6379 my-redis-image\n```\n\n----------------------------------------\n\nTITLE: Initiating Machine Translation with Inlang CLI\nDESCRIPTION: Demonstrates how to use the Inlang CLI to initiate machine translation for all resources.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @inlang/cli machine translate\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Sets by Label in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the changeSetHasLabel function to select change sets with a specific label in the Lix database. It also shows how to negate the filter using eb.not().\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set\")\n   .where(changeSetHasLabel(\"checkpoint\"))\n   .selectAll()\n   .execute();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set\")\n\t\t.where((eb) => eb.not(changeSetHasLabel(\"checkpoint\")))\n\t\t.selectAll()\n\t\t.execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Plugin in NextJS\nDESCRIPTION: Adds Paraglide webpack plugin configuration to next.config.js for handling localization with URL pattern support.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { paraglideWebpackPlugin } from \"@inlang/paraglide-js\";\n\n/**\n * @type {import('next').NextConfig}\n */\nexport default {\n+\twebpack: (config) => {\n+\t\tconfig.plugins.push(\n+\t\t\tparaglideWebpackPlugin({\n+\t\t\t\toutdir: \"./src/paraglide\",\n+\t\t\t\tproject: \"./project.inlang\",\n+       strategy: [\"url\", \"cookie\", \"baseLocale\"],\n+\t\t\t})\n+\t\t);\n+\t\treturn config;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Dockerfile with Custom Configuration\nDESCRIPTION: An advanced Dockerfile example that copies custom configuration files and sets up additional environment variables. It demonstrates how to customize the container startup process.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM postgres:14.4\n\n# Copy custom postgresql.conf\nCOPY ./postgresql.conf /etc/postgresql/postgresql.conf\n\n# Environment Variables\nENV POSTGRES_PASSWORD=custom_password\nENV POSTGRES_USER=custom_user\nENV POSTGRES_DB=custom_db\n\n# Command to start PostgreSQL with custom config\nCMD [\"postgres\", \"-c\", \"config_file=/etc/postgresql/postgresql.conf\"]\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Locale from Server Request\nDESCRIPTION: Example showing how to extract the locale from a server request. This pattern is used to determine the user's language preference on the server side during request processing.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst locale = extractLocaleFromRequest(request);\n```\n\n----------------------------------------\n\nTITLE: Installing Paraglide JS in a Vanilla Project\nDESCRIPTION: Command to initialize a Paraglide JS project, which sets up the necessary configuration and creates example message files.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/getting-started/vanilla-js-ts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Declaring LixPlugin Properties in TypeScript\nDESCRIPTION: Declares the properties of the LixPlugin type, including key, detectChangesGlob, detectChanges, diffUiComponent, detectConflicts, and applyChanges. Each property has specific types and purposes within the Lix plugin system.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey: string;\n\ndetectChangesGlob?: string;\n\ndetectChanges?: (args: {\n  before?: LixFile;\n  after: LixFile;\n  lix: LixReadonly;\n}) => Promise<DetectedChange[]>;\n\ndiffUiComponent?: CustomElementConstructor;\n\ndetectConflicts?: (args: {\n  changes: Change[];\n  lix: LixReadonly;\n}) => Promise<DetectedConflict[]>;\n\napplyChanges?: (args: {\n  changes: Change[];\n  file: Omit<LixFile, \"data\"> & { data?: string };\n  lix: LixReadonly;\n}) => Promise<{ fileData: LixFile[\"data\"] }>;\n```\n\n----------------------------------------\n\nTITLE: Change Label Query Examples in TypeScript\nDESCRIPTION: Demonstrates querying changes with specific labels and using negation filters.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change\")\n   .where(changeHasLabel(\"checkpoint\"))\n   .selectAll()\n   .execute();\n\nawait lix.db.selectFrom(\"change\")\n\t\t.where((eb) => eb.not(changeHasLabel(\"checkpoint\")))\n\t\t.selectAll()\n\t\t.execute();\n```\n\n----------------------------------------\n\nTITLE: Validating File Paths in the Lix SDK (TypeScript)\nDESCRIPTION: This function validates if a given file path is valid. It takes a string path parameter and throws an error if the path is invalid. The function returns void and is defined in the validate-file-path.ts file.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/validateFilePath.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**validateFilePath**(`path`): `void`\n```\n\n----------------------------------------\n\nTITLE: Configuring Inlang Plugin Marketplace Manifest\nDESCRIPTION: Example JSON configuration for an inlang plugin marketplace manifest. Specifies plugin metadata including ID, icons, publisher information, license, display name, description, documentation pages, and keywords. Used to define how the plugin appears and functions in the inlang marketplace.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://inlang.com/schema/marketplace-manifest\",\n\t\"id\": \"plugin.inlang.mFunctionMatcher\",\n\t\"icon\": \"./assets/m.png\",\n\t\"publisherName\": \"inlang\",\n\t\"publisherIcon\": \"https://inlang.com/favicon/safari-pinned-tab.svg\",\n\t\"license\": \"Apache-2.0\",\n\t\"displayName\": {\n\t\t\"en\": \"m-function-matcher\"\n\t},\n\t\"description\": {\n\t\t\"en\": \"Enables the inlang Visual Studio Code extension (Sherlock) to work with paraglide\"\n\t},\n\t\"pages\": {\n\t\t\"/\": \"./README.md\",\n\t\t\"/changelog\": \"./CHANGELOG.md\"\n\t},\n\t\"keywords\": [\n    \"example\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Change Conflicts in Lix SDK in TypeScript\nDESCRIPTION: Example demonstrating how to detect conflicts between changes using the detectChangeConflicts function from the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst detectedConflicts = await detectChangeConflicts({\n       lix: lix,\n       changes: diffingChages,\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Paraglide Compiler API\nDESCRIPTION: Demonstrates how to use the exposed Paraglide compiler API for advanced workflows and CI/CD pipelines.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compile } from \"@inlang/paraglide-js\";\n\nawait compile({\n\tproject: \"./project.inlang\",\n\toutdir: \"./src/paraglide\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Inlang CLI with Yarn\nDESCRIPTION: Shows the command to install the Inlang CLI as a development dependency using Yarn package manager.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev @inlang/cli\n```\n\n----------------------------------------\n\nTITLE: Querying Changes in an Inlang Project using Lix\nDESCRIPTION: Example of how to query changes in an Inlang project using the Lix API. It demonstrates using SQL-like queries to retrieve change data.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst changes = await project.lix.db\n  .selectFrom(\"change\")\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Variable Reference Pattern Configuration\nDESCRIPTION: Configuration for defining variable placeholder patterns in translation strings.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"plugin.inlang.json\": {\n\t\"variableReferencePattern\": [\"{\", \"}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Lix with Key Values Example\nDESCRIPTION: Example demonstrating how to open Lix with specific key-value configurations\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/openLix.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst lix = await openLix({ keyValues: [{ key: \"lix_sync\", value: \"false\" }] })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PostgreSQL Dockerfile\nDESCRIPTION: Basic Dockerfile example that shows how to configure a PostgreSQL image with specific settings including the volume, port and environment variables.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM postgres:14.4\n\n# Set a Volume for the data directory\nVOLUME [\"/var/lib/postgresql/data\"]\n\n# Set the default port for postgres\nEXPOSE 5432\n\n# Environment Variables for PostgreSQL\nENV POSTGRES_PASSWORD=postgres\nENV POSTGRES_USER=postgres\nENV POSTGRES_DB=postgres\n\n```\n\n----------------------------------------\n\nTITLE: Example German Translation File\nDESCRIPTION: Sample German language JSON file containing corresponding translations with variable placeholders.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"hello\": \"Hallo {name}!\",\n\t\"loginButton\": \"Anmelden\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PathPattern Configuration\nDESCRIPTION: Configuration example showing the basic pathPattern setup in settings.json.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// project.inlang/settings.json\n{\n  \"modules\": [ ... ],\n  \"plugin.inlang.messageFormat\": {\n\t\t\"pathPattern\": \"./messages/{locale}.json\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Change Conflict in TypeScript using @lix-js/sdk\nDESCRIPTION: This function creates a new change conflict with the given conflicting changes. It takes an object with conflictingChangeIds, key, lix, and version as parameters. The function returns a Promise that resolves to an object containing change_set_id, id, and key.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createChangeConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateChangeConflict(args: {\n  conflictingChangeIds: Set<string>;\n  key: string;\n  lix: Pick<Lix, \"db\">;\n  version: Pick<{ id: string; name: string; }, \"id\">;\n}): Promise<{ change_set_id: string; id: string; key: string; }>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Colors for Sherlock Annotations\nDESCRIPTION: This code snippet shows how to customize the colors for Sherlock's inline annotations in the VS Code settings.json file, including separate configurations for info and error states.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.editorColors\": {\n\t\"info\": {\n\t\t\"foreground\": \"#color\",\n\t\t\"background\": \"rgba(number, number, number, 0.2)\",\n\t\t\"border\": \"#color\"\n\t},\n\t\"error\": {\n\t\t\"foreground\": \"#color\",\n\t\t\"background\": \"rgba(number, number, number, 0.2)\",\n\t\t\"border\": \"#color\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining closeLix Function in TypeScript\nDESCRIPTION: Declaration of the closeLix function that accepts args containing a db property from a Lix object and returns a Promise that resolves to void. This function is responsible for safely closing Lix resources.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/closeLix.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**closeLix**(`args`): `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Example Input and Output of Plugin Setup in TypeScript\nDESCRIPTION: Demonstration of the input and expected output from the setupPlugins function. Shows how the function transforms a simple plugins array into a fully configured object with plugin metadata and functions.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sourceLanguageTag: \"en\",\n  plugins: [\n    [Function: myPlugin]\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sourceLanguageTag: \"en\",\n  languages: [\"en\", \"de\"],\n  readResources: [Function: readResources],\n  writeResources: [Function: writeResources],\n  plugins: [\n    {\n      id: \"samuelstroschein.plugin-json\",\n      defineConfig: [Function: defineConfig]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Change Set with Labels\nDESCRIPTION: Example demonstrating how to create a change set with labels by selecting labels from the database and passing both empty changes array and labels to createChangeSet function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createChangeSet.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst labels = await lix.db.selectFrom(\"label\").selectAll().execute();\nconst changeSet = await createChangeSet({\n  lix,\n  changes: [],\n  labels\n});\n```\n\n----------------------------------------\n\nTITLE: Generated SQLite Query for JSON Array Aggregation\nDESCRIPTION: The SQL query generated by the jsonArrayFrom helper, showing how it uses json_group_array and json_object to create the nested JSON structure.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonArrayFrom.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect \"id\", (\n  select coalesce(json_group_array(json_object(\n    'pet_id', \"agg\".\"pet_id\",\n    'name', \"agg\".\"name\"\n  )), '[]') from (\n    select \"pet\".\"id\" as \"pet_id\", \"pet\".\"name\"\n    from \"pet\"\n    where \"pet\".\"owner_id\" = \"person\".\"id\"\n    order by \"pet\".\"name\"\n  ) as \"agg\"\n) as \"pets\"\nfrom \"person\"\n```\n\n----------------------------------------\n\nTITLE: Task Scheduling Function Implementation\nDESCRIPTION: Implements a scheduling function that executes tasks at specific time intervals for different users\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction schedule(user, taskName, minutes, seconds, millis, func) {\n    if (user === currentUser) {\n        if (typeof minutes !== 'number') {\n            throw new Error('Minutes should be a number.');\n        }\n\n        if (minutes <= 0) {\n            throw new Error('Minutes should be a positive number.');\n        }\n\n        const currentTime = new Date();\n        const currentMinutes = currentTime.getMinutes();\n        const remainingMinutes = minutes - (currentMinutes % minutes);\n\n        const targetMinutes = currentMinutes + remainingMinutes;\n        const targetTime = new Date(\n            currentTime.getFullYear(),\n            currentTime.getMonth(),\n            currentTime.getDate(),\n            currentTime.getHours(),\n            targetMinutes,\n            seconds,\n            millis,\n        );\n\n        console.log(taskname + ' scheduled for ' + targetTime);\n\n        const timeDifference = targetTime - currentTime;\n        setTimeout(func, timeDifference);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling i18next Messages with Paraglide JS CLI\nDESCRIPTION: Command to compile i18next messages using the Paraglide JS CLI tool. The command takes a project file as input and generates compiled translations in the specified output directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/i18next/example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js compile --project ./project.inlang --outdir ./output\n```\n\n----------------------------------------\n\nTITLE: Implementing Sherlock Extension Recommendation\nDESCRIPTION: Example implementation showing how to use the shouldRecommend and add functions to check for and add VSCode extension recommendations. The code demonstrates checking if an extension is adopted and handling user confirmation before adding the recommendation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/recommendations/recommend-sherlock/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shouldRecommend, add } from '@inlang/recommend-sherlock';\nimport { NodeishFilesystem } from '@lix-js/fs';\n\nasync function addSherlock(fs: NodeishFilesystem) {\n  const isExtensionAdopted = await shouldRecommend(fs);\n\n  if (!isExtensionAdopted) {\n    // prompt for user confirmation\n    const userConfirmed = await promptUser();\n\n    if (userConfirmed) {\n      await add(fs);\n      console.log('Extension recommendation added.');\n    } else {\n      console.log('User declined to add extension recommendation.');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposal 2: Config Wrapping Pattern Implementation\nDESCRIPTION: Demonstrates a wrapped configuration approach that maintains backwards compatibility but becomes complex with nested plugins and lacks clear execution order.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function defineConfig(env) {\n\tconst { withJson } = await env.$import(\n\t\t\"https://cdn.jsdelivr.net/gh/samuelstroschein/inlang-plugin-json@1/dist/index.js\",\n\t)\n\tconst { withSdk } = await env.$import(\n\t\t\"https://cdn.jsdelivr.net/gh/opral/inlang1/dist/sdk-js/index.js\",\n\t)\n\n\treturn\n    withJson(\n      withSdk(\n        withIdeExtension({\n          {\n            sourceLanguageTag: \"en\",\n            sdk: {\n              languageNegotiation: {\n                strategies: [{ type: \"localStorage\" }, { type: \"navigator\" }],\n              },\n            }\n          }\n        }),\n      )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version in Lix SDK (Without Reference) in TypeScript\nDESCRIPTION: Example demonstrating how to create a new version without referencing an existing version using the createVersion function.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst version = await createVersion({ lix });\n```\n\n----------------------------------------\n\nTITLE: Configuring Opral Package Manager\nDESCRIPTION: Example of the Opral configuration file structure showing the repository URL and access token settings. This configuration is used for authenticating with the Opral registry.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\nurl = \"https://registry.opral.io\"\ntoken = \"<your-access-token>\"\n```\n\n----------------------------------------\n\nTITLE: Converting Lix to Blob in TypeScript\nDESCRIPTION: This function converts a Lix object to a Blob. It takes an argument object with a 'lix' property of type Pick<Lix, 'db' | 'sqlite'>. The function returns a Promise that resolves to a Blob.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/toBlob.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst blob = await toBlob({ lix })\n```\n\n----------------------------------------\n\nTITLE: Extending Lint Rules with Custom Plugins\nDESCRIPTION: Shows how to extend lint rules by adding custom plugins to the linting configuration in the inlang.config.js file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/@inlang_core_lint/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tlinting: {\n\t\tplugins: [myCustomLintPlugin],\n\t\trules: {\n\t\t\tmissing_key: false, // disable this specific lint rule\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to New Version with LIX SDK Transaction\nDESCRIPTION: Example demonstrating how to create a new version and immediately switch to it within a database transaction. This ensures atomicity of the create and switch operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/switchVersion.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.transaction().execute(async (trx) => {\n   const newVersion = await createVersion({ lix: { db: trx }, parent: currentVersion });\n   await switchVersion({ lix: { db: trx }, to: newVersion });\n});\n```\n\n----------------------------------------\n\nTITLE: Ignore Pattern Configuration\nDESCRIPTION: Configuration for specifying patterns to ignore certain files or directories during processing.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"plugin.inlang.json\": {\n\t\"ignore\": [\"node_modules\", \"dist\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Paraglide JS Runtime in JavaScript\nDESCRIPTION: Example of how to import Paraglide JS runtime functions after the compilation change in version 1.0.0-prerelease.6. This snippet shows the updated import statements for setLanguageTag, languageTag, and messages.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setLanguageTag, languageTag } from '../../paraglide-js/runtime';\nimport * as m from \"../../paraglide-js/messages\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Extension Colors in VS Code Settings\nDESCRIPTION: Configuration options for customizing the colors of inline annotations including foreground, background, and border colors for info and error states.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.editorColors\": {\n\t\"info\": {\n\t\t\"foreground\": \"#color\",\n\t\t\"background\": \"rgba(number, number, number, 0.2)\", // needs transparency\n\t\t\"border\": \"#color\"\n\t},\n\t\"error\": {\n\t\t\"foreground\": \"#color\",\n\t\t\"background\": \"rgba(number, number, number, 0.2)\", // needs transparency\n\t\t\"border\": \"#color\"\n\t}\n}\n\n// or (for all extensions)\n\n\"workbench.colorCustomizations\": {\n\t\"editorError.foreground\": \"#color\",\n\t\"editorError.background\": \"#color\",\n\t\"editorError.border\": \"#color\",\n\t\"editorInfo.foreground\": \"#color\",\n\t\"editorInfo.background\": \"#color\",\n\t\"editorInfo.border\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NewversionChangeConflict Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the NewversionChangeConflict type alias as an Insertable type based on the VersionChangeConflictTable. It is used for handling version change conflicts in the @lix-js/sdk package.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewversionChangeConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewversionChangeConflict = Insertable<VersionChangeConflictTable>\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entry\nDESCRIPTION: Command to create a changelog entry using changesets for version bumping.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Running Package Commands in Monorepo with PNPM\nDESCRIPTION: Example of how to run commands for specific packages in the monorepo using PNPM's workspace flag (-w). This pattern allows developers to execute package scripts while maintaining the root directory as the current working directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev -w <package-name>\npnpm dev -w @inlang/ast\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Rendering Flag in Paraglide JS Compiler\nDESCRIPTION: Demonstrates how to set the isServer flag for tree-shaking in server-side rendering environments.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite\n  isServer: \"import.meta.env.SSR\"\n```\n\n----------------------------------------\n\nTITLE: Plugin-based approach for hooks.server.ts\nDESCRIPTION: Example of a plugin-based approach to inject i18n functionality into the SvelteKit hooks.server.ts file with minimal developer effort.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nimport type { Handle } from '@sveltejs/kit'\n+import { wrapHandle } from '$i18n'\n\n-export const handle = (async ({ event, resolve }) => {\n+export const handle = wrapHandle(async ({ event, resolve }) => {\n  return resolve(event)\n}) satisfies Handle\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record with Nested Relations in Prisma\nDESCRIPTION: This code snippet shows how to create a new record with Prisma Client while simultaneously creating related records. It demonstrates the creation of a user with associated posts and profile in a single transaction.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/110-discussion.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.user.create({\n  data: {\n    email: 'user@example.com',\n    name: 'John Doe',\n    posts: {\n      create: [\n        { title: 'My first post', published: true },\n        { title: 'Draft post', published: false }\n      ]\n    },\n    profile: {\n      create: { bio: 'I am a new user' }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Inlang Project Path in Paraglide JS Compiler\nDESCRIPTION: Shows how to set the path to the inlang project file using the project option.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n+ project: \"./project.inlang\",\n  outdir: \"./src/paraglide\"\n})\n```\n\n----------------------------------------\n\nTITLE: Passing language data in SvelteKit layout.server.ts\nDESCRIPTION: Modification to the layout.server.ts file to pass the detected language from server to shared runtime code via the load function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport type { LayoutLoad } from './$types'\n\n-export const load = (() => {\n+export const load = (({ locals }) => {\n+ return { language: locals.language }\n}) satisfies LayoutLoad\n```\n\n----------------------------------------\n\nTITLE: Creating Version from Existing Version\nDESCRIPTION: Creates a new version by cloning from an existing version specified in the 'from' parameter. Returns a promise with the new version's id and name.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createVersion.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst version = await createVersion({ lix, from: otherVersion });\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronous Database Queries with Lix SDK in TypeScript\nDESCRIPTION: Example showing how to execute a synchronous database query using the executeSync function, which returns raw SQL results.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = lix.db.selectFrom(\"key_value\").selectAll();\nconst result = executeSync({ lix, query }) as KeyValue[];\n```\n\n----------------------------------------\n\nTITLE: Defining AccountTable Type Alias in TypeScript\nDESCRIPTION: This snippet defines the AccountTable type alias as an object with two properties: 'id' of type Generated<string> and 'name' of type string. It represents the structure of an account in the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/AccountTable.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AccountTable = object {\n  id: Generated<string>;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint Behavior in Inlang Config\nDESCRIPTION: Demonstrates how to configure lint behavior in the inlang.config.js file, including disabling rules, setting warning levels, and configuring specific rules.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/@inlang_core_lint/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import(\"@inlang/core/config\").DefineConfig}\n */\nexport async function defineConfig(env) {\n  \treturn {\n   \tsourceLanguageTag: 'en',\n   \tlanguages: ['en', 'de'],\n\t\tlinting: {\n\t\t\tmissing_key: false, // disable this specific lint rule\n\t\t\tmissing_key: 'warn', // override the level\n\t\t\tmissing_key: { 'error', { ignore: ['test-key'] }}, // configure the linting behavior where needed\n\t\t}\n  \t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeConflict Type Alias in TypeScript\nDESCRIPTION: Type alias declaration for VersionChangeConflict which is defined as a Selectable of VersionChangeConflictTable. This type is likely used for handling version conflicts in the Lix SDK database operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/VersionChangeConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**VersionChangeConflict** = `Selectable`\\<`VersionChangeConflictTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeConflictUpdate Type Alias in TypeScript\nDESCRIPTION: Creates a type alias that represents the updatable fields of a version change conflict by applying the Updateable utility type to the VersionChangeConflictTable type.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/VersionChangeConflictUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype VersionChangeConflictUpdate = Updateable<VersionChangeConflictTable>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monorepo Project Settings in JSON\nDESCRIPTION: This JSON configuration defines the structure and settings for a monorepo project. It specifies workspaces, dependencies, and various project-specific configurations such as package manager, TypeScript setup, and linting rules.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/30-plugins/10-introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://turbo.build/schema.json\",\n  \"globalDependencies\": [\"**/.env.*local\"],\n  \"pipeline\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"dist/**\", \".next/**\", \"!.next/cache/**\"]\n    },\n    \"lint\": {},\n    \"dev\": {\n      \"cache\": false,\n      \"persistent\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Change Sets with Label Filter in TypeScript\nDESCRIPTION: Example showing how to use changeSetHasLabel to filter change sets that have a specific label. The function is used within a database select query to filter records.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeSetHasLabel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set\")\n   .where(changeSetHasLabel(\"checkpoint\"))\n   .selectAll()\n   .execute();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Paraglide JS Pipeline using Mermaid\nDESCRIPTION: This diagram illustrates the relationship between the Inlang Project, Paraglide Compiler, Inlang Plugins, and Translation Files. It shows how data flows from translation files through plugins to the compiler.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/file-formats.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n    \n    subgraph \"Pipeline\"\n        A[Inlang Project] -->|Opened by| B[Paraglide Compiler]\n        B -->|Compiles| C[Code]\n    end\n\n    A <-.->|Imports & Exports| D[Inlang Plugin]\n    D <-.->|Reads & Writes| E[Translation File]\n```\n\n----------------------------------------\n\nTITLE: Implementing New Strategy API in Paraglide JS\nDESCRIPTION: Demonstrates the new strategy API for defining locale getting and setting behavior\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n+  strategy: [\"pathname\", \"cookie\", \"baseLocale\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Complete changelog documentation showing version updates, dependency changes, bug fixes and improvements across multiple releases of @inlang/sdk\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/sdk\n\n## 2.4.8\n\n### Patch Changes\n\n- 56acb22: fix: loading plugins from cache in directory mode https://github.com/opral/inlang-paraglide-js/issues/498\n- Updated dependencies [aa4d69e]\n  - @lix-js/sdk@0.4.7\n\n## 2.4.7\n\n### Patch Changes\n\n- bd2c366: improve: sample telemetry event to reduce number of events\n- Updated dependencies [f634538]\n  - @lix-js/sdk@0.4.6\n\n## 2.4.6\n\n### Patch Changes\n\n- 49a7880: improve: forward telemetry settings to lix\n\n## 2.4.5\n\n### Patch Changes\n\n- 083ff1f: fix: `loadProjectFromDirectory()` should return errors from `loadProject()`\n- Updated dependencies [275d87e]\n- Updated dependencies [dc92f56]\n- Updated dependencies [c1ed545]\n  - @lix-js/sdk@0.4.5\n```\n\n----------------------------------------\n\nTITLE: Negating Label Filter in Change Set Query\nDESCRIPTION: Example demonstrating how to negate the changeSetHasLabel filter using eb.not() to select change sets that don't have a specific label.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeSetHasLabel.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set\")\n\t\t.where((eb) => eb.not(changeSetHasLabel(\"checkpoint\")))\n\t\t.selectAll()\n\t\t.execute();\n```\n\n----------------------------------------\n\nTITLE: Example Inlang Configuration in JSON\nDESCRIPTION: A basic JSON configuration for inlang showing the pattern-based approach to specify language resource file paths, using a path pattern with language code placeholder.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pathPattern\": \"./resources/{languageCode}.ftl\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Lix in Memory with TypeScript\nDESCRIPTION: This function opens a Lix instance in memory. It takes an object as an argument with properties for account, keyValues, and providePlugins. The database property is omitted from the args type. The function returns a Promise that resolves to a Lix instance.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/openLixInMemory.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nopenLixInMemory(args: object & Omit<{ \n  account: { id: string; name: string; }; \n  database: SqliteWasmDatabase; \n  keyValues: object & object[]; \n  providePlugins: LixPlugin[]; \n}, \"database\">): Promise<Promise<Lix>>\n```\n\n----------------------------------------\n\nTITLE: Version Switching and Merging\nDESCRIPTION: Examples of switching between versions and merging changes from one version to another\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait switchVersion({ lix, to: versionA })\n\nconsole.log(\"Switched to version: main\");\n\n// Get the file data in this version\nconst originalFile = lix.db\n\t.selectFrom(\"file\")\n\t.where(\"path\", \"=\", \"/example.json\")\n\t.selectAll()\n\t.executeTakeFirstOrThrow();\n\nconst originalContent = JSON.parse(originalFile.content);\nconsole.log(\"Original content in main version:\", originalContent);\n```\n\n----------------------------------------\n\nTITLE: Defining UiDiffComponentProps Type Alias in TypeScript\nDESCRIPTION: This TypeScript code defines a type alias called UiDiffComponentProps that represents the properties for a UI diff component. It includes a 'diffs' property that extends the Change type with specific fields and additional object properties.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/UiDiffComponentProps.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**UiDiffComponentProps** = `object`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n**diffs**: `Pick`\\<[`Change`](Change.md), `\"entity_id\"` \\| `\"plugin_key\"` \\| `\"schema_key\"`\\> & `object`[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Inlang Plugins\nDESCRIPTION: This example shows how to configure multiple plugins in the project settings.json file. It demonstrates adding both the message-format and i18next plugins to enable working with different file formats.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/file-formats.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"baseLocale\": \"en\",\n  \"locales\": [\"en\", \"de\"],\n  \"modules\": [\n     \"other plugins...\",\n+     \"https://cdn.jsdelivr.net/npm/@inlang/plugin-message-format@latest/dist/index.js\"\n+     \"https://cdn.jsdelivr.net/npm/@inlang/plugin-i18next@latest/dist/index.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Account Type Alias in TypeScript\nDESCRIPTION: This type alias defines the Account type as a Selectable of the AccountTable. It represents the structure of an account in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Account = Selectable<AccountTable>\n```\n\n----------------------------------------\n\nTITLE: Implementing a doc-slider component with image URLs and looping behavior in HTML\nDESCRIPTION: This example demonstrates how to use the <doc-slider> element to create an image slider. It shows how to provide multiple image URLs via the items attribute and enable looping behavior with the looping attribute.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-slider.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-slider items=\"https://picsum.photos/id/259/300/200,https://picsum.photos/id/217/300/200,https://picsum.photos/id/17/300/200\" looping></doc-slider>\n```\n\n----------------------------------------\n\nTITLE: Manual Plugin Installation Configuration\nDESCRIPTION: JSON configuration example showing how to manually install the t-function matcher plugin by adding it to the project.inlang/settings.json file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/t-function-matcher/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// project.inlang/settings.json\n{\n  \"modules\" : [\n+    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-t-function-matcher@latest/dist/index.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Lix Server Protocol Handler in TypeScript\nDESCRIPTION: This example shows how to test the createServerProtocolHandler function. It creates a handler, constructs a test request, and then calls the handler with the request, allowing for assertions on the response.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/createServerProtocolHandler.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst lspHandler = createServerProtocolHandler({ storage });\nconst request = new Request('/lsp/new', {\n  method: 'POST',\n  body: new Blob(['...']),\n});\n\nconst response = await lspHandler(request);\n\nexpect(response).to(...);\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSet Type Alias in TypeScript\nDESCRIPTION: Defines a ChangeSet type alias that represents a selectable structure from a ChangeSetTable in the database schema. This type is used for type-safe database operations within the lix-js SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ChangeSet** = `Selectable`\\<`ChangeSetTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Installing Lix SDK via NPM\nDESCRIPTION: Command to install the Lix SDK package using npm package manager\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lix-js/sdk\n```\n\n----------------------------------------\n\nTITLE: Using InlangMessage Component in a Bundle\nDESCRIPTION: This example shows how to use the InlangMessage component within a bundle component by slotting it as a 'message'.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/message/inlang-message.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangMessage.MessageInBundle} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Paraglide JS with NPX\nDESCRIPTION: Command to initialize Paraglide JS in your project using npx. This is the first step in setting up internationalization with Paraglide JS.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/astro/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining LixFile Type Alias in TypeScript\nDESCRIPTION: Defines the LixFile type alias as a Selectable version of the LixFileTable, which is likely used for database operations in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixFile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**LixFile** = `Selectable`\\<`LixFileTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ExperimentalChangeSchema in TypeScript\nDESCRIPTION: This example demonstrates how to use the ExperimentalChangeSchema type alias to define a schema for a CSV plugin. It shows the recommended practice of using 'as const' to narrow types and 'satisfies ChangeSchema' for autocompletion.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ExperimentalChangeSchema.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooV1 = {\n     key: \"csv-plugin-foo-v1\",\n     type: \"json\",\n     schema: jsonSchema,\n  } as const satisfies ChangeSchema;\n```\n\n----------------------------------------\n\nTITLE: Using translations in Svelte components\nDESCRIPTION: Example of how to use translations in a Svelte component by retrieving the i18n lookup function from the context.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+<script lang=\"ts\">\n+ import { getContext } from 'svelte/store'\n\n+ const { i18n } = getContext('i18n')\n+</script>\n\n-<h1>Welcome to Inlang, SvelteKit</h1>\n+<h1>{i18n.welcome({ name: 'SvelteKit' })}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using doc-accordion Custom Element in HTML\nDESCRIPTION: This example demonstrates how to use the doc-accordion element in HTML, specifying the heading and text attributes.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-accordion.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<doc-accordion \n  heading=\"Accordion Heading\" \n  text=\"This is the content of the accordion.\">\n</doc-accordion>\n```\n\n----------------------------------------\n\nTITLE: Alternative approach for client-side TypeScript translations\nDESCRIPTION: Alternative approach for using translations in TypeScript files when Svelte context might not be accessible.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n+ import { getLookupFunctionForCurrentLanguage } from '$i18n'\n\nconst doSomething = (projects: string[]) => {\n  // ...\n\n- return `Added ${projects.length} projects`\n+ const i18n = getLookupFunctionForCurrentLanguage()\n+ return i18n.projects.added(projects.length)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Properties of ActiveAccountTable in TypeScript\nDESCRIPTION: This code snippet details the properties of the ActiveAccountTable type. It includes an 'id' and a 'name' property, both of type string.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ActiveAccountTable.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nid: string;\nname: string;\n```\n\n----------------------------------------\n\nTITLE: LixReadonly Type Declaration with DB Interface\nDESCRIPTION: The detailed type declaration for LixReadonly, specifically defining the db property which contains selectFrom and withRecursive methods inherited from the Lix interface's db property.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixReadonly.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndb: {\n  selectFrom: Lix[\"db\"][\"selectFrom\"];\n  withRecursive: Lix[\"db\"][\"withRecursive\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentVersion Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias named CurrentVersion. It uses the Selectable utility type with CurrentVersionTable as its argument, likely representing a selectable version of the current version table in a database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/CurrentVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CurrentVersion = Selectable<CurrentVersionTable>\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for jsonObjectFrom() Query in SQLite\nDESCRIPTION: Shows the SQL query generated by Kysely when using the jsonObjectFrom() function to fetch a person's favorite pet as a JSON object.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonObjectFrom.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect \"id\", (\n  select json_object(\n    'pet_id', \"obj\".\"pet_id\",\n    'name', \"obj\".\"name\"\n  ) from (\n    select \"pet\".\"id\" as \"pet_id\", \"pet\".\"name\"\n    from \"pet\"\n    where \"pet\".\"owner_id\" = \"person\".\"id\"\n    and \"pet\".\"is_favorite\" = ?\n  ) as obj\n) as \"favorite_pet\"\nfrom \"person\";\n```\n\n----------------------------------------\n\nTITLE: Defining AccountUpdate Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the AccountUpdate type alias using the Updateable utility type applied to the AccountTable type. It's part of the account database schema in the @lix-js/sdk package.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/AccountUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AccountUpdate = Updateable<AccountTable>\n```\n\n----------------------------------------\n\nTITLE: Core Function Reference - JavaScript\nDESCRIPTION: Reference to the new loadProject function that serves as the main entry point for the Inlang SDK, providing query, linting, and module resolution capabilities\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/inlang-refactor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nloadProject\n```\n\n----------------------------------------\n\nTITLE: Applying Key-Value Database Schema to SQLite in TypeScript\nDESCRIPTION: This function applies a key-value database schema to a SQLite database. It takes a SqliteWasmDatabase object as input and returns the modified database. The function is defined in the key-value/database-schema.ts file of the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/applyKeyValueDatabaseSchema.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyKeyValueDatabaseSchema(sqlite: SqliteWasmDatabase): SqliteWasmDatabase\n```\n\n----------------------------------------\n\nTITLE: Defining Lix Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for Lix as an object with properties for database, plugin, and SQLite instance.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Lix = object\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing Example with DetectedChange in TypeScript\nDESCRIPTION: Example demonstrating how to narrow types with a change schema when using the DetectedChange type. This shows the definition of a FooV1Schema and how to access properties from a DetectedChange with the narrowed type.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/DetectedChange.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooV1Schema = {\n  key: \"plugin-name-foo-v1\",\n  type: \"json\",\n  schema: {\n    type: \"object\",\n    properties: {\n      name: { type: \"string\" },\n\t   }\n  }\n} as const satisfies ChangeSchema;\n\nconst detectedChange: DetectedChange<typeof FooV1Schema>\n\ndetectedChange.snapshot.name // string\n```\n\n----------------------------------------\n\nTITLE: Implementing doc-hero Custom Element in HTML\nDESCRIPTION: This snippet demonstrates how to use the <doc-hero> element in HTML. It shows all available attributes including title, description, button texts and links, tag, and company logos.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-hero.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-hero \n  title=\"Hero Title\" \n  description=\"Hero Description\" \n  primary-text=\"Primary Button\" \n  primary-link=\"https://example.com\" \n  secondary-text=\"Secondary Button\" \n  secondary-link=\"https://example.com\" \n  tag=\"Tag Text\" \n  companies='[\"company1.png\", \"company2.png\"]'>\n</doc-hero>\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeSet Type Alias in TypeScript\nDESCRIPTION: Type alias definition that creates a new type NewChangeSet based on the Insertable generic type using ChangeSetTable as the base table type. This type is used for representing new changeset entries that can be inserted into the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeSet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNewChangeSet = Insertable<ChangeSetTable>\n```\n\n----------------------------------------\n\nTITLE: Reading Items with Prisma Using Filtering and Pagination\nDESCRIPTION: This snippet demonstrates how to use Prisma Client to read data from the database with filtering, selection, ordering, and pagination. It shows how to structure a query that retrieves items with specific conditions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/110-discussion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.items.findMany({\n  where: {\n    published: true,\n    OR: [\n      { title: { contains: searchTerm } },\n      { description: { contains: searchTerm } }\n    ]\n  },\n  select: {\n    id: true,\n    title: true,\n    createdAt: true,\n    author: { select: { name: true } }\n  },\n  orderBy: { createdAt: 'desc' },\n  skip: (page - 1) * pageSize,\n  take: pageSize\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Type Alias in TypeScript for Lix SDK Database Schema\nDESCRIPTION: This code defines the Comment type alias as a Selectable of CommentTable. This type represents the structure of comment records that can be selected from the database in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Comment.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nComment = `Selectable`<`CommentTable`>\n```\n\n----------------------------------------\n\nTITLE: Implementing doc-header Component in HTML\nDESCRIPTION: This example demonstrates how to use the <doc-header> element to create a header section with a title, description, and a linked button. The component accepts four attributes that control its appearance and functionality.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-header.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-header \n  title=\"Header Title\" \n  description=\"Header Description\" \n  button=\"Button Text\" \n  link=\"https://example.com\">\n</doc-header>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyValueTable Type Alias in TypeScript\nDESCRIPTION: Defines the KeyValueTable type alias as an object with properties for key, value, and skip_change_control. The key property uses the KeyValueKeys type, value is a string, and skip_change_control is a generated boolean.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/KeyValueTable.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nKeyValueTable = object\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Messages in Paraglide JS\nDESCRIPTION: This snippet shows how to render a message containing HTML by using the innerHTML attribute. It passes the parameter 'name' to the message function and renders the resulting HTML content directly in the div element.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/limitations.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div innerHTML={m.my_cool_message({name: \"John\"})}></div>\n```\n\n----------------------------------------\n\nTITLE: Querying Leaf Changes in Version using TypeScript\nDESCRIPTION: Demonstrates how to use the changeIsLeafInVersion function to select changes that are leaf nodes within a specified version. The function takes a version object with an id property and returns a query expression wrapper.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeafInVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  await lix.db.selectFrom(\"change\")\n    .where(changeIsLeafInVersion(currentVersion))\n    .selectAll()\n    .execute();\n```\n\n----------------------------------------\n\nTITLE: Modifying SvelteKit Layout Load Function for Internationalization\nDESCRIPTION: This snippet shows how to modify the load function in the SvelteKit layout file to wrap it with internationalization functionality using the wrapLayoutJs function.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nimport type { LayoutLoad } from './$types'\n+import { wrapLayoutJs } from '$i18n'\n\n-export const load = (() => {\n+export const load = wrapLayoutJs(() => {\n}) satisfies LayoutLoad\n```\n\n----------------------------------------\n\nTITLE: Defining LixPlugin Type Alias in TypeScript\nDESCRIPTION: Defines the LixPlugin type alias as an object with various optional methods and properties for handling file changes, conflicts, and UI rendering in the Lix system.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LixPlugin = object\n```\n\n----------------------------------------\n\nTITLE: Defining NewAccount Type Alias in TypeScript\nDESCRIPTION: Type definition for creating new account records in the database. NewAccount is defined as an Insertable of the AccountTable type, which means it represents the structure needed when inserting a new account record.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewAccount** = `Insertable`<[`AccountTable`](AccountTable.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChange Type in TypeScript\nDESCRIPTION: Type alias definition for VersionChange, which represents a selectable version of the VersionChangeTable, likely used for database operations in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/VersionChange.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionChange** = `Selectable`\\<`VersionChangeTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Data Structure JSON\nDESCRIPTION: JSON structure showing the format for storing translation keys and their associated data in Figma's shared plugin data, including key name, tags, plurals and translations.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    key_name: string,\n    tags: string[],\n    plurals: ['other', 'zero', ...],\n    translations: {\n        'de': {\n            'other': string, // default string always the fallback\n            'zero': string, \n            'one': string,\n            'two': string,\n            'few': string, // not supported for now\n            'many': string, // not supported for now\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Inlang Plugin using CLI\nDESCRIPTION: Command to build an Inlang plugin using the Inlang CLI tool. This prepares the plugin for deployment.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/cli plugin build --entry ./src/plugin.js\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Database Snapshots in TypeScript\nDESCRIPTION: A utility function that takes a content object and returns a mock database snapshot object with an auto-generated ID. Used for testing purposes to simulate database responses.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/mockJsonSnapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmockJsonSnapshot(content): object {\n  id: string;\n  content: null | Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Prisma Client\nDESCRIPTION: This snippet demonstrates how to update records using Prisma Client. It shows how to update all posts by a specific author to be published and how to perform other update operations with conditions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/110-discussion.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait prisma.post.updateMany({\n  where: {\n    author: { email: 'user@example.com' },\n    published: false\n  },\n  data: {\n    published: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Proposal 1: Spreading Pattern Implementation\nDESCRIPTION: Shows a spreading-based approach for plugin configuration that allows simple plugin integration but lacks error handling and config extension capabilities.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function defineConfig(env) {\n  const jsonPlugin = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/samuelstroschein/inlang-plugin-json@1/dist/index.js\",\n  );\n  const sdk = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/opral/inlang1/dist/sdk-js/index.js\",\n  );\n  const ideExtension = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/opral/inlang1/dist/sdk-js/index.js\",\n  );\n\n  return {\n    sourceLanguageTag: \"en\",\n    ...jsonPlugin({\n      pathPattern: \"./languages/{language}.json\",\n    }),\n    ...sdk({\n      languageNegotiation: {\n        strategies: [{ type: \"localStorage\" }, { type: \"navigator\" }],\n      },\n    }),\n    ...ideExtension({\n      // ...\n    }),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying SvelteKit Layout Component for Internationalization Wrapper\nDESCRIPTION: This snippet shows how to modify the SvelteKit layout component to include the I18nWrapper component, which provides internationalization context to child components.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n+<script>\n+ import { I18nWrapper } from '$i18n'\n+</script>\n\n-<slot />\n+<I18nWrapper>\n+ <slot />\n+</I18nWrapper>\n```\n\n----------------------------------------\n\nTITLE: Defining LabelUpdate Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the LabelUpdate type alias as an Updateable<LabelTable>. It's part of the database schema in the Lix SDK, likely used for updating label entries in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LabelUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LabelUpdate = Updateable<LabelTable>\n```\n\n----------------------------------------\n\nTITLE: Current Status Quo Implementation in TypeScript\nDESCRIPTION: Shows the current implementation without a proper plugin API, demonstrating issues with bloated config and leaking of app-specific configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function defineConfig(env) {\n  const pluginJson = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/samuelstroschein/inlang-plugin-json@1/dist/index.js\",\n  );\n\n  const pluginConfig = {\n    pathPattern: \"./languages/{language}.json\",\n  };\n\n  return {\n    sourceLanguageTag: \"en\",\n    languageTags: await pluginJson.getLanguages({ ...env, pluginConfig }),\n    readResources: (args) =>\n      pluginJson.readResources({ ...args, ...env, pluginConfig }),\n    writeResources: (args) =>\n      pluginJson.writeResources({ ...args, ...env, pluginConfig }),\n    // bad. the SDK config shouldn't be defined as part of the core config\n    sdk: {\n      languageNegotiation: {\n        strategies: [{ type: \"navigator\" }, { type: \"localStorage\" }],\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing InlangMessage Component in Storybook\nDESCRIPTION: This snippet shows how to import the InlangMessage component stories in a Storybook environment using the @storybook/blocks package.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/message/inlang-message.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\n \nimport * as InlangMessage from './inlang-message.stories.ts';\n \n<Meta of={InlangMessage} />\n```\n\n----------------------------------------\n\nTITLE: Complex Messages with Variants\nDESCRIPTION: Example of complex message format with variants, including declarations and selectors for pluralization.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"simple\": \"This is a simple message\",\n  \"count\": [\n    {\n      \"declarations\": [\"input count\", \"local countPlural = count: plural\"],\n      \"selectors\": [\"countPlural\"],\n      \"match\": {\n        \"countPlural=one\": \"There is one item\",\n        \"countPlural=other\": \"There are {count} items\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Human ID Generation\nDESCRIPTION: Configuration setting to disable automatic generation of human IDs in the Sherlock extension.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/customization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.extract.autoHumanId.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Querying Change Conflicts by Version in TypeScript\nDESCRIPTION: Example showing how to use the changeConflictInVersion function to filter and select change conflicts for a specific version from the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeConflictInVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst conflicts = await lix.db.selectFrom(\"change_conflict\")\n   .where(changeConflictInVersion(currentVersion))\n   .selectAll()\n   .execute();\n```\n\n----------------------------------------\n\nTITLE: Defining LixServerProtocolHandlerContext Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias for LixServerProtocolHandlerContext, which is an object containing request, environment, and optional parameters properties. It's used to provide context for server protocol handlers in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixServerProtocolHandlerContext.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nLixServerProtocolHandlerContext = object\n```\n\n----------------------------------------\n\nTITLE: Disabling Sherlock Inline Annotations in VS Code Settings\nDESCRIPTION: This snippet shows how to disable Sherlock's inline annotations by setting the appropriate flag in the VS Code settings.json file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.inlineAnnotations.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Querying Symmetric Difference of Change Sets in TypeScript\nDESCRIPTION: This example shows how to use the changeSetElementInSymmetricDifference function to find the symmetric difference between two change sets in the Lix database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait lix.db.selectFrom(\"change_set_element\")\n  .where(changeSetElementInSymmetricDifference(a: changeSetA, b: changeSetB))\n  .selectAll()\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeConflictUpdate Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called ChangeConflictUpdate. It utilizes the Updateable type and applies it to the ChangeConflictTable, likely representing the structure for updating change conflicts in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeConflictUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeConflictUpdate = Updateable<ChangeConflictTable>\n```\n\n----------------------------------------\n\nTITLE: Examples of KeyValueTable Value Property in TypeScript\nDESCRIPTION: Shows examples of the 'value' property in the KeyValueTable type. The value must be a string, which can include JSON strings.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/KeyValueTable.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"some value\"\n  \"{ \\\"foo\\\": \\\"bar\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Defining UiDiffComponentProps Interface in TypeScript\nDESCRIPTION: Defines a type alias for UI diff component properties. It includes diffs property with an array of Change objects, containing entity_id, plugin_key, and schema_key fields.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\n**UiDiffComponentProps** = `object`\n\n## Properties\n\n### diffs\n\n> **diffs**: `Pick`<[`Change`](Change.md), `\"entity_id\"` | `\"plugin_key\"` | `\"schema_key\"`> & `object`[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Doc-Link Custom Element\nDESCRIPTION: Example usage of the doc-link custom element showing how to create a styled link with a title, description, icon and URL. The element requires four attributes: title for the link text, description for additional context, icon for displaying an icon (using MDI format), and href for the destination URL.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-link.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-link title=\"Link Title\" description=\"Link Description\" icon=\"mdi:link\" href=\"https://example.com\"></doc-link>\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSetLabel Type Alias in TypeScript\nDESCRIPTION: Declaration of the ChangeSetLabel type alias which uses the Selectable generic type with a ChangeSetLabelTable parameter. This type is used in the database schema of the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSetLabel.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ChangeSetLabel** = `Selectable`\\<`ChangeSetLabelTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Future Plugin Type Definition in TypeScript\nDESCRIPTION: Proposed TypeScript type definition for plugins that could support more complex use cases in the future. Includes fields for plugin ID, configuration function, and resolved configuration handling.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Plugin = {\n  id: string;\n  config: () => MaybePromise<Partial<Config>>;\n  // anything else we need in the future like resolvedConfig for example\n  resolvedConfig: (config: Config) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Human ID Generation in Sherlock\nDESCRIPTION: This code snippet demonstrates how to disable the automatic generation of human IDs in Sherlock by configuring the VS Code settings.json file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.extract.autoHumanId.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Modifying SvelteKit Component for Internationalization Usage\nDESCRIPTION: This snippet demonstrates how to modify a SvelteKit component to use the internationalization context instead of importing the i18n function directly, improving developer experience.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n<script lang=\"ts\">\n- import i18n from '$i18n'\n+ import { getContext } from 'svelte/store'\n\n+ const { i18n } = getContext('inlang')\n</script>\n\n<h1>{i18n.welcome({ name: 'SvelteKit' })}</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Sherlock Package with PNPM\nDESCRIPTION: Command to include the Sherlock recommendation package as a workspace dependency in package.json\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/recommendations/recommend-sherlock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"@inlang/recommend-sherlock\": \"workspace:*\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Paraglide CLI\nDESCRIPTION: Command to display all available options for the Paraglide CLI compile command.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/compiling-messages.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js compile --help\n```\n\n----------------------------------------\n\nTITLE: Defining FileQueueEntryUpdate Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named FileQueueEntryUpdate that uses the Updateable utility type with FileQueueTable. This type is used to specify the format of update operations for entries in the FileQueueTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/FileQueueEntryUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FileQueueEntryUpdate = Updateable<FileQueueTable>\n```\n\n----------------------------------------\n\nTITLE: Git SDK Core API Methods Discussion\nDESCRIPTION: Discussion example showing potential core API methods needed for the git SDK implementation, including elementary operations, branch management, and change tracking.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/git-sdk-requirements/RFC.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// DISCUSSION: What APIs are required?\n\n// elementary\nclone();\ncommit();\npush();\npull();\n\n// branch related\ncurrentBranch();\ncreateBranch();\nrenameBranch();\nswitchBranch();\ndeleteBranch();\n\n// change related\n// (3 API different \"changes\" concepts...)\nunstagedChanges();\nuncommittedChanges();\nunpushedChanges();\n\n// host like GitHub or GitLab dependent\nsignIn();\nsignOut();\ncreateFork();\nsyncFork();\nopenPullRequest();\n```\n\n----------------------------------------\n\nTITLE: Installing Inlang CLI with npm\nDESCRIPTION: Demonstrates how to install the Inlang CLI as a development dependency using npm.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @inlang/cli\n```\n\n----------------------------------------\n\nTITLE: Defining VersionUpdate Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias 'VersionUpdate' as an 'Updateable' generic type applied to 'VersionTable'. This type specifies the structure for version update operations in the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/VersionUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionUpdate** = `Updateable`\\<`VersionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Running Inlang CLI Commands with npx (Recommended)\nDESCRIPTION: Illustrates the recommended way to run Inlang CLI commands using npx, ensuring the latest version is always used.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx @inlang/cli [command]\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: URL Resolution in Marketplace Manifest\nDESCRIPTION: Shows the change in how relative URLs are resolved from the marketplace manifest. Now only HTTPS links are allowed, and relative paths are resolved from the manifest location instead of from a repository root.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-registry/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-  \"readme\": \"./<repo>/x.md\",\n// paths are now resolved from the marketplace manifest\n+  \"readme\": \"./x.md\",\n```\n\n----------------------------------------\n\nTITLE: Example of Potential Locale Context Issue\nDESCRIPTION: TypeScript example showing a potential issue when calling messages outside of request contexts where the locale cannot be determined from the URL.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// hello.ts\nimport { m } from './paraglide/messages.js';\n\n// 💥 there is no url in this context to retrieve\n//    the locale from.\nconsole.log(m.hello());\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSetLabelUpdate Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias named ChangeSetLabelUpdate which uses the Updateable utility type with the ChangeSetLabelTable type parameter. This allows for partial updates to changeset label records in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSetLabelUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeSetLabelUpdate = Updateable<ChangeSetLabelTable>\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Flow Diagram with Mermaid\nDESCRIPTION: Flowchart illustrating how JavaScript configuration connects resources with various components (Library, Dev Tools, CI/CD, Editor) through read and write callbacks, serving as business logic.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\n    subgraph Components\n      Library\n      DT[Dev Tools]\n      CICD[CI/CD]\n      Editor\n    end\n\n    Config <--> |read & write callbacks| Resources\n    Config <--> |uses config functions as business logic| Components\n```\n\n----------------------------------------\n\nTITLE: Using changeIsLowestCommonAncestorOf in a Database Query\nDESCRIPTION: This example demonstrates how to use the changeIsLowestCommonAncestorOf function in a database query to find the lowest common ancestor of multiple changes.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLowestCommonAncestorOf.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst lowestCommonAncestor = await lix.db.selectFrom(\"change\")\n   .where(changeIsLowestCommonAncestorOf([change1, change2, change3]))\n   .selectAll()\n   .executeTakeFirst();\n```\n\n----------------------------------------\n\nTITLE: Implementing wrapLayoutJs Function for SvelteKit Internationalization\nDESCRIPTION: This snippet defines the wrapLayoutJs function used to wrap the layout load function. It loads language resources asynchronously and merges the result with the callback's output.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wrapLayoutJs = (callback) => async (args) => {\n  const { data } = await loadResourceAsync(data.inlangLanguage);\n\n  const result = await callback(args);\n\n  return { ...result, inlangLanguage: data.inlangLanguage };\n};\n```\n\n----------------------------------------\n\nTITLE: Waiting for File Queue to Settle in TypeScript\nDESCRIPTION: This function waits until the file queue is settled. It takes an object argument with a 'lix' property of type Pick<Lix, 'db'>. The function returns a Promise that resolves to void.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/fileQueueSettled.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait fileQueueSettled({ lix });\n```\n\n----------------------------------------\n\nTITLE: Basic Path Pattern Configuration\nDESCRIPTION: Simple path pattern configuration without namespaces for language-specific files.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/json/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"plugin.inlang.json\": {\n\t\"pathPattern\": \"./resources/{languageTag}.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DiscussionUpdate Type Alias in TypeScript\nDESCRIPTION: Defines the DiscussionUpdate type alias using the Updateable utility type applied to the DiscussionTable type. This type represents the fields that can be updated in a discussion record.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/DiscussionUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDiscussionUpdate = Updateable<DiscussionTable>\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronous SQL Query in Lix Database with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the executeSync function to perform a synchronous SQL query on the Lix database. It selects all columns from the 'key_value' table and casts the result to the KeyValue type.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/executeSync.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = lix.db.selectFrom(\"key_value\").selectAll();\nconst result = executeSync({ lix, query }) as KeyValue[];\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific Locale\nDESCRIPTION: Shows how to override the default locale by passing a locale option.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/basics.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { m } from \"./paraglide/messages.js\";\n\n// Force the message to be in German\nconsole.log(m.greeting({ name: \"Samuel\" }, { locale: \"de\" })); // \"Hallo Samuel!\"\n```\n\n----------------------------------------\n\nTITLE: Defining CommentUpdate Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the CommentUpdate type alias which is based on the Updateable utility type applied to the CommentTable type. It is used to specify the structure for update operations on comments in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/CommentUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**CommentUpdate** = `Updateable`\\<`CommentTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory in Paraglide JS Compiler\nDESCRIPTION: Shows how to specify the output directory for the compiled files using the outdir option.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  project: \"./project.inlang\",\n+ outdir: \"./src/paraglide\"\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet demonstrates the structure of a changelog entry in Markdown format. It includes the version number, change type, and a description of the changes made.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/recommendations/recommend-sherlock/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.2.1\n\n### Patch Changes\n\n- added mit license\n```\n\n----------------------------------------\n\nTITLE: Defining NewLixFile Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the LixFileTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewLixFile** = `Insertable`<`LixFileTable`>\n```\n\n----------------------------------------\n\nTITLE: Extending JavaScript Configuration with Business Logic\nDESCRIPTION: Pseudocode showing how JavaScript configuration can be extended to customize business logic of components, such as machine translation services and editor behavior, demonstrating the flexibility of a programmatic config approach.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// pseudocode that illustrates the possbility to\n// adjust how messages are machine translated.\nexport async function onMachineTranslate(message) {\n  // or DeepL, Yandex, etc.\n  const googleTranslate = await import(\"google-translate\");\n  return googleTranslate(message);\n}\n\n// pseudocode that illustrates the possiblity to adjust\n// the business logic of the editor.\nexport const editor = {\n  // what should happen when a translator pressed \"Save\"\n  // (edited a message).\n  onSave: async (message) => {\n    // the message could be committed.\n    return commit(message);\n    // or a pull request can be opened.\n    return openPullRequest(message);\n    // or something else can happen\n    return somethingElse(message);\n  },\n  // and more...\n};\n```\n\n----------------------------------------\n\nTITLE: Traditional Solutions with Data Silo Architecture\nDESCRIPTION: A mermaid flowchart showing how existing localization solutions create data silos by maintaining separate states in git repositories and databases, requiring complex synchronization between them.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/notes-on-git-based-architecture.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\t\tDevelopers<-->Git\n    TF1<-.->|synchronization|Database\n\t\tDatabase<-->Pipeline\n\t\tTranslators<-->Database\n    subgraph Database\n        direction LR\n\t\t\t\tsubgraph Layer[Git Replication Layer]\n\t\t\t\t\tdirection RL\n\t\t\t\t\tVersion[Version Control]\n\t\t\t\t\tBranching\n\t\t\t\tend\n    end\n    subgraph Git[Git Repository]\n    TF1[Translation Files]-->|validate|Code\n    Code-->|extract|TF1\n    end\n\t\tsubgraph Pipeline\n            direction TB\n            create-->review\n            review-->approve\n            approve-->maintain\n            maintain-->review\n        end\n```\n\n----------------------------------------\n\nTITLE: Using translations in shared load functions\nDESCRIPTION: Example of how to use translations in shared layout or page load functions, handling parallel load execution.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nimport type { LayoutLoad } from './$types'\n+import { createLookupFunctionForLanguage } from '$i18n'\n\n-export const load = (() => {\n+export const load = (async ({ parent, data }) => {\n+ await parent()\n+ const i18n = createLookupFunctionForLanguage(data.language)\n- return { pageTitle: 'Home' }\n+ return { pageTitle: i18n.home.pageTitle() }\n}) satisfies LayoutLoad\n```\n\n----------------------------------------\n\nTITLE: Defining withSkipOwnChangeControl Function in TypeScript\nDESCRIPTION: This function wraps a database operation to skip own change control. It takes a Kysely database instance and an operation function as parameters, and returns a Promise of the operation's result.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nwithSkipOwnChangeControl<T>(db: Kysely<LixDatabaseSchema>, operation: (trx) => Promise<T>): Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Platform and Gender Variant Example\nDESCRIPTION: Complex message example showing platform and gender-based message variants with fallback options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"jojo_mountain_day\": [\n\t\t{\n\t\t\t\"match\": {\n\t\t\t\t\"platform=android, userGender=male\": \"{username} has to download the app on his phone from the Google Play Store.\",\n\t\t\t\t\"platform=ios, userGender=female\": \"{username} has to download the app on her iPhone from the App Store.\",\n\t\t\t\t\"platform=*, userGender=*\": \"The person has to download the app.\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeConflictResolution Type Alias in TypeScript\nDESCRIPTION: Definition of a TypeScript type alias that represents selectable fields from a ChangeConflictResolutionTable. This type is likely used for resolving conflicts in data changes within the database operations of the lix-js SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeConflictResolution.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ChangeConflictResolution** = `Selectable`\\<`ChangeConflictResolutionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Initializing Kysely with ParseJSONResultsPlugin\nDESCRIPTION: Example showing how to initialize a Kysely database instance with the ParseJSONResultsPlugin required for proper JSON array handling.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/jsonArrayFrom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new Kysely({\n  dialect: new SqliteDialect(config),\n  plugins: [new ParseJSONResultsPlugin()]\n})\n```\n\n----------------------------------------\n\nTITLE: Building Inlang Plugin with CLI\nDESCRIPTION: Illustrates how to use the Inlang CLI to build a plugin, specifying entry point and output directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx @inlang/cli plugin build --entry ./path/to/index.ts --outdir ./path/to/dist\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeConflict Type Alias in TypeScript for Lix SDK\nDESCRIPTION: This code snippet defines the ChangeConflict type alias using the Selectable type applied to the ChangeConflictTable. It is part of the Lix SDK's database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeConflict = Selectable<ChangeConflictTable>\n```\n\n----------------------------------------\n\nTITLE: Defining NewKeyValue Type Alias in TypeScript for Key-Value Database Schema\nDESCRIPTION: This code snippet defines a TypeScript type alias called NewKeyValue which uses the Insertable generic type to create a type for inserting new records into the KeyValueTable. This type alias is part of the Lix SDK's key-value database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewKeyValue.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewKeyValue = Insertable<KeyValueTable>\n```\n\n----------------------------------------\n\nTITLE: Applying Account Database Schema in TypeScript\nDESCRIPTION: This function takes a SQLite database instance and applies the account database schema to it. It returns the modified SQLite database instance.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/applyAccountDatabaseSchema.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyAccountDatabaseSchema(sqlite: SqliteWasmDatabase): SqliteWasmDatabase\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin in Settings.json\nDESCRIPTION: Installation instructions showing how to add the plugin to project.inlang/settings.json with required pathPattern configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// project.inlang/settings.json\n{\n  \"modules\" : [\n+    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-message-format@latest/dist/index.js\"\n  ],\n+ \"plugin.inlang.messageFormat\": {\n+   \"pathPattern\": \"./messages/{locale}.json\"\n+ }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Stories in TypeScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the stories for the InlangAddVariable component. It's used to set up the documentation and examples.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/add-variable/inlang-add-variable.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Canvas, Meta } from \"@storybook/blocks\";\n\nimport * as InlangAddInput from \"./inlang-add-variable.stories.ts\";\n\n<Meta of={InlangAddInput} />;\n```\n\n----------------------------------------\n\nTITLE: Library Component Flow\nDESCRIPTION: Mermaid flowchart illustrating the data flow through the i18n library from resources to formatted output.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph Resources\n      direction LR\n      EN\n      DE\n    end\n\n    subgraph Library\n        direction LR\n        Language[Language detection]\n        Formatting\n    end\n\n    Resources-->Library-->Output\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in TypeScript\nDESCRIPTION: Examples of using the setLocale() function to change the current locale, with and without page reload.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocale('en');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetLocale('en', { reload: false });\n```\n\n----------------------------------------\n\nTITLE: Implementation of wrapHandle function\nDESCRIPTION: Example implementation of the wrapHandle function that would be provided by the SDK to handle i18n setup for SvelteKit applications.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wrapHandle = (callback) => async (args) => {\n  const { event } = args;\n\n  loadAllResources();\n\n  const language = detectLanguage(event);\n  const i18n = createLookupFunctionForLanguage(language);\n\n  event.locals.inlang = {\n    language,\n    i18n,\n  };\n\n  return callback(args);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the NewChangeConflictResolution Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias named NewChangeConflictResolution which extends the Insertable generic type applied to a ChangeConflictResolutionTable. This type is likely used for creating new records in a conflict resolution table within the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeConflictResolution.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNewChangeConflictResolution = `Insertable`<`ChangeConflictResolutionTable`>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Message Keys in JSON\nDESCRIPTION: Example showing the structure for nested message keys in messages/en.json, including basic messages and nested objects.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"hello_world\": \"Hello World!\",\n\t\"greeting\": \"Good morning {name}!\",\n\t\"nested\": {\n\t\t\"key\": \"Nested key\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NewSnapshot Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the SnapshotTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewSnapshot** = `Insertable`<`SnapshotTable`>\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Data Behavior in Online Mode (JavaScript)\nDESCRIPTION: JavaScript code snippets to test how plugin data behaves in online mode when modified by multiple users simultaneously. It sets and retrieves plugin data, logging the results immediately and after a delay.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n() => {\n    figma.setPluginData('modify_test_online', 'Created by user1');\n    figma.setPluginData('modify_test_online', 'Updated by user1');\n\n    console.log('modify_test_online: ' + figma.getPluginData('modify_test_online'));\n    setTimeout(10000, () => console.log('modify_test_online: with delay:' + figma.getPluginData('modify_test_online')));\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfigma.setPluginData('modify_test_online', 'Updated by user2');\nconsole.log('modify_test_online: ' + figma.getPluginData('modify_test_online'));\nsetTimeout(10000, () => console.log('modify_test_online: with delay:' + figma.getPluginData('modify_test_online')));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfigma.setPluginData('create_test_online', 'Created by user1');\nconsole.log('create_test_online: ' + figma.getPluginData('create_test_online'));\nsetTimeout(10000, () => console.log('create_test_online: with delay:' + figma.getPluginData('create_test_online')))\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveAccountUpdate Type Alias in TypeScript\nDESCRIPTION: This code defines the ActiveAccountUpdate type alias as an Updateable version of the ActiveAccountTable. It allows specifying which fields of an ActiveAccountTable record can be updated in database operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ActiveAccountUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ActiveAccountUpdate** = `Updateable`<[`ActiveAccountTable`](ActiveAccountTable.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining NewDiscussion Type Alias in TypeScript\nDESCRIPTION: Creates a type alias called 'NewDiscussion' using the 'Insertable' generic type applied to a 'DiscussionTable' type. This type represents the structure required when inserting new discussion records into the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewDiscussion.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewDiscussion** = `Insertable`\\<`DiscussionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Global CSS with Tailwind Integration\nDESCRIPTION: Global CSS file that primarily handles Tailwind CSS imports and any application-wide styling rules.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/renderer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\napp.css\n```\n\n----------------------------------------\n\nTITLE: Customizing Sherlock Preview Language in VS Code Settings\nDESCRIPTION: This snippet demonstrates how to set a custom preview language for Sherlock in the VS Code settings.json file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.previewLanguageTag\": \"de\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Doc Elements in Markdown\nDESCRIPTION: Example showing how to import and use a documentation element (doc-figure) from the package using JSDelivr CDN. The code demonstrates the import declaration in the frontmatter and element usage in markdown.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimports:\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-figure.js\n---\n\n<doc-figure src=\"https://example.com/image.png\"></doc-figure>\n```\n\n----------------------------------------\n\nTITLE: Creating a Discussion with Initial Comment in TypeScript\nDESCRIPTION: This snippet shows how to create a new discussion with an initial comment using the createDiscussion function in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst changeSet = await createChangeSet({ lix, changes: [\"change1\", \"change2\"] });\nconst discussion = await createDiscussion({ lix, changeSet, firstComment: { content: \"first comment\" } });\n```\n\n----------------------------------------\n\nTITLE: Defining NewSnapshot Type Alias in TypeScript\nDESCRIPTION: Creates a type alias NewSnapshot that uses the Insertable utility type to define the structure for new snapshot records that can be inserted into the SnapshotTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewSnapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NewSnapshot = Insertable<SnapshotTable>\n```\n\n----------------------------------------\n\nTITLE: Creating Change Sets with Labels in TypeScript\nDESCRIPTION: Demonstrates the improved createChangeSet() API that now accepts labels to associate with change sets. Shows both before and after implementation.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait createChangeSet({\n\tlix,\n\tchanges: [],\n\t// ❌ no way to add labels\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Get existing labels\nconst labels = await lix.db.selectFrom(\"label\").selectAll().execute();\n\nawait createChangeSet({\n\tlix,\n\tchanges: [],\n\t// ✅ associate labels with the change set\n\tlabels,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeConflict Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that defines the structure for new change conflict records using Insertable type with ChangeConflictTable. This type is used for ensuring type safety when creating new change conflict entries in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNewChangeConflict = Insertable<ChangeConflictTable>\n```\n\n----------------------------------------\n\nTITLE: Publishing a Plugin to the OpenRA Registry\nDESCRIPTION: Command to publish a plugin to the OpenRA registry. This example shows how to publish a plugin named 'example-plugin' from the current directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopral publish example-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining NewActiveAccount Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called NewActiveAccount. It uses the Insertable utility type with ActiveAccountTable as its parameter, likely for creating new entries in the active accounts database table.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewActiveAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewActiveAccount = Insertable<ActiveAccountTable>\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar React Component with Customizable Props\nDESCRIPTION: This code snippet defines a React functional component called Avatar. It accepts props for user data, size, and border styling. The component renders either an image or text initials based on the user data provided.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/changelog-35.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Avatar({ user, size = \"md\", border = false }) {\n  const sizeClasses = {\n    xs: \"h-6 w-6\",\n    sm: \"h-8 w-8\",\n    md: \"h-10 w-10\",\n    lg: \"h-12 w-12\",\n    xl: \"h-14 w-14\",\n    \"2xl\": \"h-16 w-16\",\n  };\n\n  return (\n    <div\n      className={`relative inline-block ${sizeClasses[size]} ${\n        border ? \"ring-2 ring-white\" : \"\"\n      }`}\n    >\n      {user?.profilePicture ? (\n        <img\n          src={user.profilePicture}\n          alt={`${user.firstName} ${user.lastName}`}\n          className=\"h-full w-full rounded-full object-cover\"\n        />\n      ) : (\n        <div\n          className={`flex h-full w-full items-center justify-center rounded-full bg-gray-300 text-gray-600`}\n        >\n          <span className=\"text-xs font-medium\">\n            {user?.firstName?.[0]}{\n              user?.lastName ? user.lastName[0] : user?.firstName?.[1]\n            }\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Link Href Localization\nDESCRIPTION: Shows the change to using localizeHref() function for link localization.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-<a href=\"/page\"></a>\n+<a href={localizeHref(\"/page\")}\n```\n\n----------------------------------------\n\nTITLE: Defining NewVersionChange Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the VersionChangeTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewVersionChange** = `Insertable`<`VersionChangeTable`>\n```\n\n----------------------------------------\n\nTITLE: Defining Change Type Alias in TypeScript for Database Schema\nDESCRIPTION: Creates a type alias named 'Change' that represents a selectable version of the 'ChangeTable' from the database schema. This allows for type-safe database operations when working with the Change entity.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Change.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**Change** = `Selectable`\\<`ChangeTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Importing InlangBundle Stories in TypeScript\nDESCRIPTION: Imports all exports from the inlang-bundle.stories.ts file, which likely contains story definitions for the InlangBundle component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/inlang-bundle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as InlangBundle from './inlang-bundle.stories.ts';\n```\n\n----------------------------------------\n\nTITLE: Rendering InlangBundleAction in Bundle Example in JSX\nDESCRIPTION: This snippet shows how to render the InlangBundleAction component within a bundle using Storybook's Canvas component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/bundle-action/inlang-bundle-action.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangBundleAction.ActionInBundle} />\n```\n\n----------------------------------------\n\nTITLE: Using doc-copy HTML Element\nDESCRIPTION: Example showing how to use the doc-copy custom element to create a copy button. The text attribute specifies what text will be copied to clipboard when the button is clicked.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-copy.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-copy text=\"Copy this text\"></doc-copy>\n```\n\n----------------------------------------\n\nTITLE: Defining NewFileQueueEntry Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the FileQueueTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewFileQueueEntry** = `Insertable`<`FileQueueTable`>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using markdown-wc-embed Web Component in Markdown\nDESCRIPTION: This snippet demonstrates how to import the markdown-wc-embed component and use it to embed markdown content from a specified URL. It includes the necessary import statement and an example of the component usage with the 'src' attribute.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/src/markdown-wc-embed.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimports:\n  doc-embed: 'link/to/markdown-wc-embed.js'\n---\n\n<markdown-wc-embed \n  src=\"https://my-cool-markdown-wc-url.com/cool-markdown-wc.md\">\n</markdown-wc-embed>\n```\n\n----------------------------------------\n\nTITLE: Testing a Server Protocol Handler in TypeScript\nDESCRIPTION: Example demonstrating how to test the createServerProtocolHandler function by creating a Request object and verifying the response.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst lspHandler = createServerProtocolHandler({ storage });\nconst request = new Request('/lsp/new', {\n  method: 'POST',\n  body: new Blob(['...']),\n});\n\nconst response = await lspHandler(request);\n\nexpect(response).to(...);\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeSetLabel Type in TypeScript\nDESCRIPTION: Type alias definition that represents the structure for inserting new change set labels into the database. It uses a generic Insertable type wrapped around the ChangeSetLabelTable type.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeSetLabel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNewChangeSetLabel = Insertable<ChangeSetLabelTable>\n```\n\n----------------------------------------\n\nTITLE: Defining LixPlugin Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for LixPlugin as an object with an optional applyChanges method.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LixPlugin = object\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Max Age in Paraglide JS Compiler\nDESCRIPTION: Demonstrates the default value for the cookieMaxAge option, which sets the expiration time of the cookie in seconds.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n60 * 60 * 24 * 400\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Inlang Services\nDESCRIPTION: Shows the standard directory layout for services, including the src directory for implementation and separate index files for client-side, server-side, and shared code.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── src (contains the implementation of the service)/\n│ ├── ...\n│ ├── ...\n│ └── ...\n├── index.ts (exports that work on both client and server)\n├── index.client.ts (exports that only work on the client)\n└── index.server.ts (exports that only work on the server)\n```\n\n----------------------------------------\n\nTITLE: Defining Newversion Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the VersionTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n**Newversion** = `Insertable`<`VersionTable`>\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeAuthor Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias named ChangeAuthor that represents a selectable form of the ChangeAuthorTable. This type is used for database operations where change author information needs to be retrieved.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeAuthor.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nChangeAuthor = `Selectable`\\<`ChangeAuthorTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with doc-video Element\nDESCRIPTION: Example showing how to use the doc-video element to embed a YouTube video. The src attribute points to a YouTube video URL.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-video.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-video src=\"https://youtu.be/vJ3jGgCrz2I\"></doc-video>\n```\n\n----------------------------------------\n\nTITLE: Declaring sql Variable in TypeScript\nDESCRIPTION: Declares a constant 'sql' variable of type 'Sql'. This is likely imported from the Kysely library and used for building SQL queries.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n`const` **sql**: `Sql`\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin from the OpenRA Registry\nDESCRIPTION: Command to install a plugin from the OpenRA registry. This example demonstrates installing a plugin called 'example-plugin' from the 'johndoe' namespace.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopral install johndoe/example-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSetElement Type in TypeScript\nDESCRIPTION: Type definition for ChangeSetElement, which uses the Selectable generic type with a ChangeSetElementTable parameter. This type likely represents database records or objects for changeset elements.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSetElement.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ChangeSetElement** = `Selectable`\\<`ChangeSetElementTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining NewLixFile Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the NewLixFile type alias as an Insertable<LixFileTable>. It's used to represent the structure of a new file entry that can be inserted into the LixFileTable in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewLixFile.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewLixFile = Insertable<LixFileTable>\n```\n\n----------------------------------------\n\nTITLE: Removing Paraglide Providers\nDESCRIPTION: Shows how to remove the Paraglide provider wrapper, which is no longer required in Paraglide JS 2.0.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// app.tsx, layout.svelte, etc.\n-import { ParaglideProvider } from \"@inlang/paraglide-{framework}\";\n\nfunction App() {\n  return (\n-    <ParaglideProvider>\n      <YourApp />\n-    </ParaglideProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration Structure\nDESCRIPTION: Demonstrates a valid JSON configuration structure showing common configuration patterns including API credentials, project settings, and user preferences. The structure illustrates proper JSON formatting with nested objects.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-plugin-json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"apiKey\": \"your-api-key-here\",\n    \"projectId\": \"your-project-id-here\",\n    \"settings\": {\n        \"notifications\": true,\n        \"theme\": \"dark\",\n        \"autoUpdate\": false\n    },\n    \"userPreferences\": {\n        \"language\": \"en\",\n        \"timezone\": \"UTC\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ES2022 as Default Target in TypeScript Configuration\nDESCRIPTION: This diff shows the addition of 'ES2022' target in the TypeScript configuration to avoid unnecessary old JS code like 'use strict' statements, enable easier debugging of distribution files, and add support for top-level await.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/tsconfig/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n+   \"target\": \"ES2022\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Path Patterns\nDESCRIPTION: Shows how to configure multiple file paths for message patterns in the settings.json file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// settings.json\n\n{\n  \"plugin.inlang.messageFormat\": {\n+    pathPattern: [\"/defaults/{locale}.json\", \"/translations/{locale}.json\"],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for selecting entries from the SnapshotTable. This uses the Selectable generic type to create a type for row selections.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\n**Snapshot** = `Selectable`<`SnapshotTable`>\n```\n\n----------------------------------------\n\nTITLE: Defining Label Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named Label using the Selectable type with LabelTable as its parameter. It's part of the database schema in the lix-js/sdk package.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Label.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Label = Selectable<LabelTable>\n```\n\n----------------------------------------\n\nTITLE: Defining mergeVersion Function in TypeScript\nDESCRIPTION: This snippet defines the mergeVersion function, which takes an object with lix, sourceVersion, and targetVersion properties as arguments. It returns a Promise that resolves to void.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/mergeVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmergeVersion(args): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Custom Colors for VS Code Extensions\nDESCRIPTION: This snippet demonstrates how to set custom colors for all VS Code extensions, including Sherlock, using the workbench.colorCustomizations setting.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workbench.colorCustomizations\": {\n\t\"editorError.foreground\": \"#color\",\n\t\"editorError.background\": \"#color\",\n\t\"editorError.border\": \"#color\",\n\t\"editorInfo.foreground\": \"#color\",\n\t\"editorInfo.background\": \"#color\",\n\t\"editorInfo.border\": \"#color\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SQL Constant Type in TypeScript\nDESCRIPTION: Defines a constant named 'sql' with type 'Sql' from the Kysely query builder library. This is a core component used for building SQL queries in a type-safe manner.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/variables/sql.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sql: Sql\n```\n\n----------------------------------------\n\nTITLE: Opening Lix with Custom Plugins Example\nDESCRIPTION: Example showing how to open Lix in memory with custom plugins for specific file formats\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/openLix.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst lix = await openLixInMemory({ providePlugins: [myPlugin] })\n```\n\n----------------------------------------\n\nTITLE: Example of ChangeSchema definition\nDESCRIPTION: Shows how to define a change schema with a unique key and JSON schema structure.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooV1 = {\n  key: \"csv-plugin-foo-v1\",\n  type: \"json\",\n  schema: jsonSchema,\n} as const satisfies ChangeSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining Newversion Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called 'Newversion' which is equivalent to 'Insertable<VersionTable>'. This type is used for inserting new version records into the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Newversion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**Newversion** = `Insertable`\\<`VersionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Removing Experimental TypeScript Emit Option\nDESCRIPTION: Shows the removal of the experimentalEmitTs option due to maintenance overhead\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n- experimentalEmitTs: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing doc-links Grid Component with Link Items\nDESCRIPTION: Example showing how to implement a grid of documentation links using the doc-links container element with nested doc-link elements. Each doc-link includes a title, description, icon from Material Symbols, and href attribute.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-links.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-links>\n  <doc-link title=\"Title 1\" description=\"Description 1\" icon=\"material-symbols:attach-file-rounded\" href=\"https://example.com\"></doc-link>\n  <doc-link title=\"Title 2\" description=\"Description 2\" icon=\"material-symbols:360\" href=\"https://example.com\"></doc-link>\n</doc-links>\n```\n\n----------------------------------------\n\nTITLE: Task List in Markdown Format\nDESCRIPTION: Extensive checklist of project tasks including completed items and pending features for the Parrot localization plugin. Covers areas like language handling, UI components, window management, and key management functionality.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Todos: \n\n - [x] specify languages for file\n - [x] specfify base language\n - [x] show baselanguage in localized key always on top\n...\n```\n\n----------------------------------------\n\nTITLE: Using i18next and Paraglide JS together (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use both i18next and Paraglide JS in the same JavaScript file. It imports both libraries and shows example usage of translation functions from each.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/incremental-migration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Existing i18next code\nimport i18next from 'i18next';\nimport { m } from './paraglide/messages.js';\n\nconsole.log(i18next.t('greeting', { name: 'World' }));\nconsole.log(m.greeting({ name: 'World' }));\n```\n\n----------------------------------------\n\nTITLE: Defining DetectedConflict Type Alias in TypeScript\nDESCRIPTION: Definition of the DetectedConflict type alias which is an object with properties for tracking conflicts between changes. It includes a 'key' property (string) and 'conflictingChangeIds' property (a Set containing change IDs).\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/DetectedConflict.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DetectedConflict = object\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Opral Web Pages\nDESCRIPTION: This HTML template sets up the basic structure for Opral's web pages. It includes necessary meta tags, viewport settings, and placeholders for content and scripts. The template ensures consistency across different pages in the monorepo.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/40-design-principles/20-target-platform-browser.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Opral</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentalChangeSchema Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the ExperimentalChangeSchema type alias, which can be either a JSON schema with a key and schema, or a blob type with just a key. It's used to represent the schema of a detected change in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ExperimentalChangeSchema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExperimentalChangeSchema = { key: string; schema: JSONSchema; type: \"json\"; } | { key: string; schema: undefined; type: \"blob\"; }\n```\n\n----------------------------------------\n\nTITLE: Overwriting getLocale Function in TypeScript\nDESCRIPTION: Example of using overwriteGetLocale() to customize how the locale is resolved, such as from a cookie.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/runtime/-internal-.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\noverwriteGetLocale(() => {\n    // resolve the locale from a cookie. fallback to the base locale.\n    return Cookies.get('locale') ?? baseLocale\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Paraglide JS\nDESCRIPTION: Command to initialize Paraglide JS in a project\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/react-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining NewLabel Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the LabelTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewLabel** = `Insertable`<`LabelTable`>\n```\n\n----------------------------------------\n\nTITLE: Example of KeyValueTable Key Property in TypeScript\nDESCRIPTION: Demonstrates the usage of the 'key' property in the KeyValueTable type. The key is of type KeyValueKeys and is prefixed with 'lix-' to avoid conflicts with user-defined keys.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/KeyValueTable.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"namespace-cool-key\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Dockerfile\nDESCRIPTION: Dockerfile example for setting up a Redis server with volume configuration and port exposure.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM redis:6.2.5\n\n# Set a Volume for the data directory\nVOLUME [\"/data\"]\n\n# Expose the Redis port\nEXPOSE 6379\n\n```\n\n----------------------------------------\n\nTITLE: Version History Data Structure Example\nDESCRIPTION: Example showing how version history is stored for translations across multiple languages, demonstrating the versioning system for tracking changes over time.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"de - other \\\"Hallo wie gehts?\\\"\",\n    \"en - other \\\"Hello how are you?\\\"\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating project.inlang settings for i18next plugin (JSON)\nDESCRIPTION: This snippet shows how to modify the project.inlang configuration file to include the i18next plugin. It adds the plugin URL and specifies the path pattern for localization files.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/incremental-migration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseLocale\": \"en\",\n  \"locales\": [\"en\", \"de\", \"fr\"],\n  \"modules\": [\n    \"https://cdn.jsdelivr.net/npm/@inlang/message-format-plugin@latest/dist/index.js\",\n+    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-i18next@latest/dist/index.js\"\n  ],\n+  \"plugin.inlang.i18next\": {\n+    \"pathPattern\": \"./locales/{locale}.json\"\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileQueueEntry Type Alias in TypeScript\nDESCRIPTION: Creates a type alias FileQueueEntry that represents a selectable row from the FileQueueTable. This type is likely used for database operations involving file queue entries in the lix-js SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/FileQueueEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**FileQueueEntry** = `Selectable`\\<`FileQueueTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Configuring compile strategy for automatic redirects in Paraglide\nDESCRIPTION: Diff showing how to modify the compile configuration to control the precedence of locale detection strategies. Setting 'cookie' before 'url' causes automatic redirects based on the cookie's locale, while placing 'url' first prevents the automatic redirects.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/server-side-rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  project: \"./project.inlang\",\n  outdir: \"./src/paraglide\",\n+  strategy: ['cookie', 'url'],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Discussion Type Alias in TypeScript\nDESCRIPTION: Defines the Discussion type alias as a Selectable of the DiscussionTable type, likely used for type-safe database operations in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Discussion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**Discussion** = `Selectable`\\<`DiscussionTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Querying Changes by Version in TypeScript\nDESCRIPTION: Example of using the changeInVersion filter function to select all changes associated with a specific version from the database. The function accepts a version object with an id property and returns an ExpressionWrapper for use in database queries.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeInVersion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  const changes = await lix.db.selectFrom(\"change\")\n     .where(changeInVersion(currentVersion))\n     .selectAll()\n     .execute();\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies\nDESCRIPTION: Command to install all project dependencies using pnpm package manager.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChange Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for selecting entries from the VersionChangeTable. This uses the Selectable generic type to create a type for row selections.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionChange** = `Selectable`<`VersionChangeTable`>\n```\n\n----------------------------------------\n\nTITLE: Empty Change Set Handling in TypeScript\nDESCRIPTION: Shows the improvement in createChangeSet() to handle empty lists of changes without throwing FOREIGN KEY CONSTRAINT violations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait createChangeSet({\n\tlix,\n\t// 💥 throws FOREIGN KEY CONSTRAINT violation\n\tchanges: [],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait createChangeSet({\n\tlix,\n\t// ✅ does not throw\n\tchanges: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NewChange Type Alias in TypeScript for Lix SDK Database Schema\nDESCRIPTION: This code snippet defines a type alias called NewChange. It uses the Insertable utility type applied to the ChangeTable, likely representing the structure for inserting a new change into the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChange.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewChange = Insertable<ChangeTable>\n```\n\n----------------------------------------\n\nTITLE: Running CDN Update Script with Node.js\nDESCRIPTION: Command to execute the purgeRegistry.js script that updates the CDN for the inlang Marketplace.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-registry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode purgeRegistry.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Site Generation in layout.ts\nDESCRIPTION: Diff showing how to enable pre-rendering in SvelteKit by adding the prerender flag to the routes/+layout.ts file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// routes/+layout.ts\n+export const prerender = true;\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeEdge Type Alias in TypeScript\nDESCRIPTION: Defines the NewChangeEdge type alias as an Insertable<ChangeEdgeTable> type. This represents the structure required when inserting a new edge in the change graph of the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeEdge.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**NewChangeEdge** = `Insertable`\\<`ChangeEdgeTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Installing Paraglide JS\nDESCRIPTION: Command to initialize Paraglide JS in a NextJS project.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/paraglide-js@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining HTML in Message Strings with JSON for Paraglide JS\nDESCRIPTION: This snippet demonstrates a workaround for the lack of native component support in Paraglide JS messages by writing HTML directly in the message string. The example defines a message with HTML formatting that includes a placeholder.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/limitations.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_cool_message\": \"Hello <strong>{name}</strong>!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeConflictResolutionUpdate Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias called ChangeConflictResolutionUpdate. It uses the Updateable utility type applied to ChangeConflictResolutionTable, likely representing the structure for updating conflict resolution data.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeConflictResolutionUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeConflictResolutionUpdate = Updateable<ChangeConflictResolutionTable>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Paraglide\nDESCRIPTION: Adding Paraglide Vite plugin configuration to vite.config.ts for React Router integration\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/react-router/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { reactRouter } from \"@react-router/dev/vite\";\nimport { defineConfig } from \"vite\";\n+import { paraglideVitePlugin } from \"@inlang/paraglide-js\";\n\nexport default defineConfig({\n\tplugins: [\n\t\treactRouter(),\n+\t\tparaglideVitePlugin({\n+\t\t\tproject: \"./project.inlang\",\n+\t\t\toutdir: \"./app/paraglide\",\n+\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Major Changes in Markdown Changelog\nDESCRIPTION: Documents major changes in version 2.0.0, including updates for Sherlock v2 & SDK v2 compatibility. Explains the changes, upgrade process, and potential breaking changes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/t-function-matcher/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0\n\n### Major Changes\n\n- 75de822: # Update plugins to support Sherlock v2 & SDK v2 compatibility\n\n  The plugin now uses the new API for message extraction (`bundleId` instead of `messageId`).\n\n  ## Upgrading to Sherlock v2\n\n  **There is no action needed** to upgrade to Sherlock v2. The plugin is now compatible with the new version and if you linked the plugin with `@latest`as we advise in the documentation.\n\n  You should be able to use the plugin with Sherlock v2 without any issues. If there are any issues, please let us know via Discord/GitHub.\n\n  ### Want to keep Sherlock v1 and the old plugin version?\n\n  If you still want to use Sherlock v1, please use the previous major version of the plugin. For Sherlock itself, [please pin the version to `1.x.x`](https://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_91.md#extension-install-options) in the VS Code extension settings.\n\n  ### Breaking changes\n\n  - Lint rules are now polyfilled (and therefore may work different), as we are currently reworking how lint rules are working with [Lix Validation Rules](https://lix.opral.com).\n  - The `messageId` parameter in the `extractMessages` function has been renamed to `bundleId`. This change is due to the new API in Sherlock v2. If you are using the `extractMessages` function, please update the parameter name to `bundleId`.\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeUpdate Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for updating entries in the VersionChangeTable. This uses the Updateable generic type to create a type for row updates.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionChangeUpdate** = `Updateable`<`VersionChangeTable`>\n```\n\n----------------------------------------\n\nTITLE: Importing InlangVariant Stories\nDESCRIPTION: Imports necessary components from Storybook blocks and InlangVariant stories for documentation purposes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/variant/inlang-variant.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\n\nimport * as InlangVariant from './inlang-variant.stories.ts';\n```\n\n----------------------------------------\n\nTITLE: Defining Account Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Account type alias using the Selectable type applied to the AccountTable. It's located in the database-schema.ts file within the account folder of the lix-sdk package.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Account.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Account = Selectable<AccountTable>\n```\n\n----------------------------------------\n\nTITLE: Disabling Inline Annotations\nDESCRIPTION: Setting to disable inline annotations in the Sherlock extension. Can be toggled through settings or command palette.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/customization.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.inlineAnnotations.enabled\": false\n```\n\n----------------------------------------\n\nTITLE: Adding Language Attribute to app.html\nDESCRIPTION: Diff showing how to add the dynamic %lang% placeholder to the HTML lang attribute in app.html, which will be replaced with the correct locale at runtime.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/sveltekit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<!doctype html>\n-<html lang=\"en\">\n+<html lang=\"%lang%\">\n\t...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSet Type Alias in TypeScript\nDESCRIPTION: This type alias defines the ChangeSet type as a Selectable of the ChangeSetTable. It represents the structure of a changeset in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeSet = Selectable<ChangeSetTable>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of URL Strategy Outside Request Context\nDESCRIPTION: This snippet illustrates an incorrect usage of the 'url' strategy where messages are called outside of a request context, leading to locale resolution failures.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// hello.ts\nimport { m } from \"./paraglide/messages.js\";\n\n// 💥 there is no url in this context to retrieve\n//    the locale from.\nconsole.log(m.hello());\n```\n\n----------------------------------------\n\nTITLE: Defining NewLabel Type Alias in TypeScript\nDESCRIPTION: Type alias that uses the Insertable utility type to define the structure for new label records that can be inserted into the LabelTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewLabel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NewLabel = Insertable<LabelTable>\n```\n\n----------------------------------------\n\nTITLE: Incrementally Migrating to Paraglide JS\nDESCRIPTION: Demonstrates how to use both i18next and Paraglide JS together, enabling incremental migration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\nimport { m } from \"./paraglide/messages.js\";\n\nconsole.log(i18next.t(\"greeting\", { name: \"World\" }));\nconsole.log(m.greeting({ name: \"World\" }));\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Tailwind Color Classes in React Components\nDESCRIPTION: This snippet demonstrates how to use dynamic color classes in React components with Tailwind CSS. The tailwind config is set up to detect and process these dynamic classes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/interface/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Using dynamic colors like `bg-${props.color}`\n\nThe tailwind config is set up to detect dynamic color classes like `bg-${color}` or `bg-${props.color}`. See [/source-code/website/tailwind.config.cjs](/source-code/website/tailwind.config.cjs).\n```\n\n----------------------------------------\n\nTITLE: Defining KeyValueUpdate Type Alias in TypeScript\nDESCRIPTION: Defines the KeyValueUpdate type alias as an Updateable version of the KeyValueTable type in the Lix JavaScript SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/KeyValueUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**KeyValueUpdate** = `Updateable`<[`KeyValueTable`](KeyValueTable.md)>\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple InlangBundle Example in JSX\nDESCRIPTION: Displays a simple example of the InlangBundle component using Storybook's Canvas component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/inlang-bundle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={InlangBundle.Example} />\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeEdge Type using Selectable in TypeScript\nDESCRIPTION: Declaration of the ChangeEdge type alias that uses the Selectable generic type with ChangeEdgeTable as its parameter. This type is likely used for database operations in the Lix SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeEdge.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ChangeEdge** = `Selectable`\\<`ChangeEdgeTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.14\nDESCRIPTION: Documents Sherlock v2 bugfixes and improvements along with dependency update\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/src/utilities/editor/sherlock-editor-app/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.14\n\n### Patch Changes\n\n- 0dbca1e: Sherlock v2 bugfixes & improvements\n- Updated dependencies [0dbca1e]\n  - @inlang/editor-component@4.0.8\n```\n\n----------------------------------------\n\nTITLE: Flattening Compiler Options in Paraglide JS\nDESCRIPTION: Shows the change from nested compiler options to flat configuration structure\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n- compilerOptions: {\n-  emitPrettierIgnore: false,\n- },\n+ emitPrettierIgnore: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining LixFileUpdate Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for LixFileUpdate using the Updateable utility type with LixFileTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LixFileUpdate = Updateable<LixFileTable>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Domain in Paraglide JS Compiler\nDESCRIPTION: Shows the default value for the cookieDomain option, which determines the host to which the cookie will be sent.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/compiler-options.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.location.hostname\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeSetElement Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the NewChangeSetElement type alias as an Insertable of ChangeSetElementTable. It's used for creating new change set elements in the database schema of the lix-js SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeSetElement.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NewChangeSetElement = Insertable<ChangeSetElementTable>\n```\n\n----------------------------------------\n\nTITLE: Working with Unpacked Inlang Files in TypeScript\nDESCRIPTION: Example of how to load and save unpacked Inlang files (directories) using TypeScript. It demonstrates using specific functions for directory-based operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sdk/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    loadProjectFromDirectory, \n    saveProjectToDirectory \n} from \"@inlang/sdk\";\n\nconst project = await loadProjectFromDirectory({\n    \"path\": \"./project.inlang\"\n});\n\n// modify the project\n\nawait saveProjectToDirectory({\n    \"project\": project,\n    \"path\": \"./project.inlang\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting NPM Script Shell on Windows\nDESCRIPTION: Command to configure npm to use Git Bash as the script shell on Windows systems. This is required for executing package scripts.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm config set script-shell \"C:\\\\Program Files\\\\git\\\\bin\\\\bash.exe\"\n```\n\n----------------------------------------\n\nTITLE: Defining NewComment Type Alias in TypeScript\nDESCRIPTION: Creates a type alias NewComment using the Insertable utility type applied to the CommentTable type. This defines the structure for new comment records that can be inserted into the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewComment.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NewComment = Insertable<CommentTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering InlangBundleAction Example in JSX\nDESCRIPTION: This code demonstrates how to render the InlangBundleAction example using Storybook's Canvas component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/bundle-action/inlang-bundle-action.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangBundleAction.Example} />\n```\n\n----------------------------------------\n\nTITLE: Using <doc-icon> Element in HTML\nDESCRIPTION: This snippet demonstrates how to use the <doc-icon> element in HTML. It shows the usage of the 'icon' and 'size' attributes to display a home icon with a specific size.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-icon.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-icon icon=\"mdi:home\" size=\"24px\"></doc-icon>\n```\n\n----------------------------------------\n\nTITLE: Defining LixDatabaseSchema Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for LixDatabaseSchema as an object containing various database table definitions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LixDatabaseSchema = object\n```\n\n----------------------------------------\n\nTITLE: Using generateStaticLocalizedUrls API\nDESCRIPTION: Example of using the new generateStaticLocalizedUrls() API for generating localized URLs.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nconst localizedUrls = generateStaticLocalizedUrls([\n  \"/example\",\n  \"/page/blog\",\n  \"/123/hello\"\n])\n\nconsole.log(localizedUrls.map(url => url.pathnames))\n>> /de/example\n>> /fr/example\n>> ...\n```\n\n----------------------------------------\n\nTITLE: Defining NewKeyValue Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the KeyValueTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewKeyValue** = `Insertable`<[`KeyValueTable`](KeyValueTable.md)>\n```\n\n----------------------------------------\n\nTITLE: Core Requirement Table in Markdown\nDESCRIPTION: Markdown table comparing different architectural approaches (Monolith, Separated, Embeddable) across development speed, maintenance effort, and potential extension dimensions.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/tech-stack/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            | Development speed | Maintenance effort | Potential extension |\n| ---------- | ----------------- | ------------------ | ------------------- |\n| Monolith   | +                 | +                  | o                   |\n| Separated  | o                 | o                  | o                   |\n| Embeddable | -                 | o                  | +                   |\n```\n\n----------------------------------------\n\nTITLE: Defining LixDatabaseSchema Type Alias in TypeScript\nDESCRIPTION: A comprehensive TypeScript type definition for the LixDatabaseSchema, which maps all database tables in the Lix system. This type alias includes references to various table types that make up the complete database structure.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixDatabaseSchema.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nLixDatabaseSchema = object\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeConflict Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for selecting entries from the VersionChangeConflictTable. This uses the Selectable generic type to create a type for row selections.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionChangeConflict** = `Selectable`<`VersionChangeConflictTable`>\n```\n\n----------------------------------------\n\nTITLE: Updating AsyncLocalStorage Configuration\nDESCRIPTION: Shows the migration of AsyncLocalStorage configuration to compiler options.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-  serverMiddleware(req, resolve, { disableAsyncLocalStorage: true })\n+  serverMiddleware(req, resolve)\n\nparaglideVitePlugin({\n   // ...\n+  disableAsyncLocalStorage: true\n})\n```\n\n----------------------------------------\n\nTITLE: Properties of LixServerProtocolHandlerContext Type in TypeScript\nDESCRIPTION: This code snippet shows the properties of the LixServerProtocolHandlerContext type: request of type Request, environment of type LspEnvironment, and an optional params property that is a record of string keys and string or undefined values.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/LixServerProtocolHandlerContext.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nrequest: Request\nenvironment: LspEnvironment\nparams?: Record<string, string | undefined>\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Documentation for Settings Component\nDESCRIPTION: Command to launch the Storybook documentation for the settings component from the project root directory using pnpm package manager.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @inlang/settings-component run storybook\n```\n\n----------------------------------------\n\nTITLE: Using doc-features Element with Feature Cards\nDESCRIPTION: Demonstrates how to use the doc-features container element with multiple doc-feature child elements. Each feature card can be customized with a title, icon, background color, and text color.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-features.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-features>\n  <doc-feature title=\"Feature 1\" icon=\"mdi:star\" color=\"#f0f0f0\" text-color=\"#000\"></doc-feature>\n  <doc-feature title=\"Feature 2\" icon=\"mdi:heart\" color=\"#e0e0e0\" text-color=\"#111\"></doc-feature>\n</doc-features>\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentVersionUpdate Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named CurrentVersionUpdate. It uses the Updateable utility type applied to the CurrentVersionTable, likely for type-safe updates to the current version information in the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/CurrentVersionUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CurrentVersionUpdate = Updateable<CurrentVersionTable>\n```\n\n----------------------------------------\n\nTITLE: Defining LixFile Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for LixFile using the Selectable utility type with LixFileTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LixFile = Selectable<LixFileTable>\n```\n\n----------------------------------------\n\nTITLE: Using Language-Specific Message Imports in JavaScript\nDESCRIPTION: Example of how to import and use language-specific message files after the change in version 1.0.0-prerelease.8. This allows for splitting messages by language.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as en from \"./paraglide/messages/en\";\nimport * as de from \"./paraglide/messages/de\";\n\nen.hello();\nde.hello();\n```\n\n----------------------------------------\n\nTITLE: Defining VersionChangeConflictUpdate Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for updating entries in the VersionChangeConflictTable. This uses the Updateable generic type to create a type for row updates.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionChangeConflictUpdate** = `Updateable`<`VersionChangeConflictTable`>\n```\n\n----------------------------------------\n\nTITLE: Adding PathnameBase Support in Paraglide JS\nDESCRIPTION: Shows how to configure the pathnameBase property in the compile options\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nawait compile({\n  strategy: [\"pathname\", \"cookie\", \"baseLocale\"],\n+ pathnameBase: \"/base\"\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.0\nDESCRIPTION: Shows minor changes for version 1.3.0, including the addition of a guide as a template literal.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.0\n\n### Minor Changes\n\n- f49fd7027: feat: guide added as template literal\n```\n\n----------------------------------------\n\nTITLE: Defining changeIsLeaf Function in TypeScript\nDESCRIPTION: This function returns an expression wrapper for selecting leaf changes in the Lix database schema. It's important to note that this filter is not specific to any version, and for version-specific filtering, changeIsLeafInversion should be used.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/changeIsLeaf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchangeIsLeaf(): (eb) => ExpressionWrapper<LixDatabaseSchema, \"change\", SqlBool>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.15\nDESCRIPTION: Documents dependency update to @inlang/editor-component version 4.0.9\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/src/utilities/editor/sherlock-editor-app/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# sherlock-editor-app\n\n## 0.0.15\n\n### Patch Changes\n\n- @inlang/editor-component@4.0.9\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Lint Rules Configuration\nDESCRIPTION: Demonstrates the removal of lint rules from project modules configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nmodules: [\n-  \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-missing-translation@latest/dist/index.js\",\n-\t \"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-empty-pattern@latest/dist/index.js\"\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSV Snapshot Format for a Single Row\nDESCRIPTION: This example shows how a snapshot is represented for a single row in a CSV file. It illustrates the format before and after a change is made to the 'age' field.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/22-snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n1, John, 25\n```\n\nLANGUAGE: csv\nCODE:\n```\n1, John, 26\n```\n\n----------------------------------------\n\nTITLE: Displaying Valid CSV Structure with Unique Column in Markdown\nDESCRIPTION: This snippet shows an example of a valid CSV structure with a header row and a unique column (Email) using a markdown table format. It demonstrates the required layout for CSV files supported by the Lix CSV plugin.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-plugin-csv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Email (unique column)     | Name           | Age |\n|---------------------------|----------------|-----|\n| hans@example.com          | Hans Müller    | 30  |\n| mull@example.com          | Hans Müller    | 83  |\n| lisa@example.com          | Lisa Schneider | 25  |\n| karl@example.com          | Karl Meier     | 28  |\n```\n\n----------------------------------------\n\nTITLE: Using doc-pricing Web Component in HTML\nDESCRIPTION: Example of how to implement the doc-pricing element to display pricing information. The component takes two attributes: 'heading' for the pricing section title and 'content' for the pricing details.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-pricing.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-pricing heading=\"Pricing Heading\" content=\"This is the pricing content.\"></doc-pricing>\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveAccountTable Type in TypeScript\nDESCRIPTION: This code snippet defines the ActiveAccountTable type alias as an object with 'id' and 'name' properties. It's part of the database schema for the account module in the lix-js SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ActiveAccountTable.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ActiveAccountTable = object\n```\n\n----------------------------------------\n\nTITLE: Visualizing Component Relationships with Mermaid\nDESCRIPTION: Flowchart showing the relationship between core components of the localization system including Syntax, Library, Dev Tools, Automation and Editor.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n    Syntax[Human Language Syntax]\n    Library\n    DT[Dev Tools]\n    Automation\n    Editor\n```\n\n----------------------------------------\n\nTITLE: Visualizing Complete Change History in Mermaid\nDESCRIPTION: A Mermaid diagram showing the full history where Change G is the result of all previous changes (D, B, C, and A). This illustrates the complete graph structure of changes and their relationships.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/30-change-graph.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    G[\"Change G\"] --> F[\"Change D\"]\n    F[\"Change D\"]\n    F --> B[\"Change B\"]\n    F --> C[\"Change C\"]\n    B --> A[\"Change A\"]\n    C --> A\n```\n\n----------------------------------------\n\nTITLE: Defining Lint Information Type in TypeScript\nDESCRIPTION: Defines a TypeScript type for lint information, including the type of lint rule and an error message.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/@inlang_core_lint/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LintInformation = {\n  type: LintRule; // which rule emitted the error\n  message: string; // a string that informs what is wrong\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.4.1\nDESCRIPTION: Shows patch changes for version 1.4.1, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.1\n\n### Patch Changes\n\n- Updated dependencies [c92bde5]\n  - @inlang/project-settings@2.4.1\n```\n\n----------------------------------------\n\nTITLE: Visualizing Merges Between Changes in Mermaid\nDESCRIPTION: A Mermaid diagram showing how Change C results from merging Change A and Change B. The diagram uses reduced opacity for non-focal nodes to highlight the merge relationship.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/30-change-graph.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    G[\"Change G\"]:::unhighlight --> F[\"Change D\"]\n    F[\"Change D\"]\n    F --> B[\"Change B\"]\n    F --> C[\"Change C\"]\n    B --> A[\"Change A\"]\n    C --> A:::unhighlight\n  \nclassDef unhighlight, opacity:0.5;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown Changelog\nDESCRIPTION: Updates the dependency version for @inlang/sdk in the changelog. This pattern is repeated throughout the file to document dependency updates across versions.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/t-function-matcher/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [56acb22]\n  - @inlang/sdk@2.4.8\n```\n\n----------------------------------------\n\nTITLE: Defining Change Type Alias in TypeScript\nDESCRIPTION: This type alias defines the Change type as a Selectable of the ChangeTable. It represents the structure of a change in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Change = Selectable<ChangeTable>\n```\n\n----------------------------------------\n\nTITLE: Inlang's Git-Based Translation Workflow\nDESCRIPTION: A mermaid flowchart depicting inlang's architecture where both developers and translators interact with a git repository containing translation files and code, with an integrated pipeline for the translation process.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/notes-on-git-based-architecture.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\t\tDevelopers<-->Git\n    Translators<-->Git\n\t\tTF1<-->Pipeline\n\t\tsubgraph Git[Git Repository]\n\t\t\t direction LR\n\t\t\t\tTF1[Translation Files]-->|validate|Code\n\t\t    Code-->|extract|TF1\n\t\tend\n\t\tsubgraph Pipeline[Pipeline]\n        direction TB\n          create-->review\n          review-->approve\n          approve-->maintain\n          maintain-->review\n\t\tend\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.5\nDESCRIPTION: Shows patch changes for version 1.3.5, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.5\n\n### Patch Changes\n\n- Updated dependencies [4837297]\n  - @inlang/project-settings@2.4.0\n```\n\n----------------------------------------\n\nTITLE: Variant in Message Canvas Display\nDESCRIPTION: Shows how to use the InlangVariant component within a Message component context.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/variant/inlang-variant.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangVariant.VariantInMessage} />\n```\n\n----------------------------------------\n\nTITLE: Using doc-figure HTML Component\nDESCRIPTION: Example usage of the doc-figure custom element to display an image with a caption. The component accepts src, alt, and caption attributes to configure the image display.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-figure.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-figure \n  src=\"https://my-image-url.com/image.png\" \n  alt=\"Go global mockups\" \n  caption=\"This is a caption for the image.\">\n</doc-figure>\n```\n\n----------------------------------------\n\nTITLE: Type narrowing example with FooV1Schema\nDESCRIPTION: Demonstrates type narrowing with a change schema using ChangeSchema type and DetectedChange interface.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst FooV1Schema = {\n  key: \"plugin-name-foo-v1\",\n  type: \"json\",\n  schema: {\n    type: \"object\",\n    properties: {\n      name: { type: \"string\" },\n    }\n  }\n} as const satisfies ChangeSchema;\n\nconst detectedChange: DetectedChange<typeof FooV1Schema>\n\ndetectedChange.snapshot.name // string\n```\n\n----------------------------------------\n\nTITLE: Adding ID Field Requirement to Entity in Diff Format\nDESCRIPTION: A diff example showing the addition of a required ID field to an Entity type definition. This illustrates the kind of stable identifier that Lix requires for optimal operation.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/40-design-principles/30-optimize-for-file-formats-with-ids.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nEntity Foo { \n+  id: string\n  text: string\n}\n```\n\n----------------------------------------\n\nTITLE: Updating URL Pattern Configuration\nDESCRIPTION: Shows the migration from named groups to tuple-based localized array in URL pattern configuration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pattern\": \"https://:domain(.*)/:path*\",\n  \"localized\": [\n    [\"fr\", \"https://:domain(.*)/fr/:path*\"],\n    [\"de\", \"https://:domain(.*)/de/:path*\"]\n    [\"en\", \"https://:domain(.*)/:path*\"],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Changelog entries showing version updates and dependency changes for the SDK example server protocol handler package, including updates to @lix-js/sdk dependency across multiple versions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/examples/server-protocol-handler-hono/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @lix-js/sdk-example-server-protocol-handler-hono\n\n## 0.0.4\n\n### Patch Changes\n\n- Updated dependencies [657bdc4]\n- Updated dependencies [0de2866]\n- Updated dependencies [48fac78]\n- Updated dependencies [03e746d]\n  - @lix-js/sdk@0.2.0\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [85eb03e]\n- Updated dependencies [2d3ab95]\n- Updated dependencies [d78a1bf]\n- Updated dependencies [6b14433]\n- Updated dependencies [9f1765a]\n- Updated dependencies [c494dca]\n- Updated dependencies [4d9d980]\n- Updated dependencies [cc93bd9]\n- Updated dependencies [fc5a5dd]\n- Updated dependencies [8c4ac57]\n- Updated dependencies [8629faa]\n- Updated dependencies [de6d717]\n- Updated dependencies [be9effa]\n- Updated dependencies [b74e982]\n- Updated dependencies [5eecc61]\n  - @lix-js/sdk@0.1.0\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [400db21]\n  - @lix-js/sdk@0.0.1\n```\n\n----------------------------------------\n\nTITLE: Loading PATH Configuration in Current Terminal Session\nDESCRIPTION: Command to reload the bash configuration file in the current terminal session. This applies the PATH changes without requiring a terminal restart.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Adding OpenRA Plugin Manager to PATH on Linux and macOS\nDESCRIPTION: Command to add the OpenRA plugin manager installation directory to the system PATH in the bash shell configuration file. This enables running the 'opral' command from any directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=\"$HOME/.local/share/opral/bin:$PATH\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Defining LabelUpdate Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for LabelUpdate using the Updateable utility type with LabelTable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LabelUpdate = Updateable<LabelTable>\n```\n\n----------------------------------------\n\nTITLE: Database-Centric Architecture for Collaboration\nDESCRIPTION: A mermaid flowchart illustrating a centralized database approach where all collaborators connect to a single database instead of directly with each other.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/notes-on-git-based-architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n   Database[(Database)]\n   A[Person A]<-->Database\n   B[Person B]<-->Database\n   C[Person C]<-->Database\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.2.0\nDESCRIPTION: Shows minor changes for version 1.2.0, including removal of an unpublished dependency and updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.0\n\n### Minor Changes\n\n- 973858c6: chore(fix): remove unpublished dependency which lead to installation failing\n\n### Patch Changes\n\n- Updated dependencies [973858c6]\n  - @inlang/project-settings@1.2.0\n  - @inlang/translatable@1.1.0\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and InlangAddSelector Stories\nDESCRIPTION: This snippet imports necessary components from Storybook and the InlangAddSelector stories for documentation purposes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/add-selector/inlang-add-selector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Canvas, Meta } from \"@storybook/blocks\";\n\nimport * as InlangAddSelector from \"./inlang-add-selector.stories.ts\";\n```\n\n----------------------------------------\n\nTITLE: Using doc-comments Element in HTML\nDESCRIPTION: This snippet demonstrates how to use the <doc-comments> element to create a container for multiple <doc-comment> elements. Each <doc-comment> element represents an individual comment with text and author attributes.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-comments.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-comments>\n  <doc-comment text=\"This is a comment.\" author=\"Author 1\"></doc-comment>\n  <doc-comment text=\"This is another comment.\" author=\"Author 2\"></doc-comment>\n</doc-comments>\n```\n\n----------------------------------------\n\nTITLE: Translation Function Usage Example\nDESCRIPTION: Example showing how to use the lookup function for translation with parameters.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/sdk-js/RFC.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ni(\"welcome\", { name: \"Inlang\" });\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Docker Container\nDESCRIPTION: Command line instructions for building a Docker image with a specific tag and running it with port mapping.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/10-getting-started/10-introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-postgres-image .\ndocker run -p 5432:5432 my-postgres-image\n```\n\n----------------------------------------\n\nTITLE: Major Version Update Description\nDESCRIPTION: Details about updating to Sherlock v2 and SDK v2 compatibility changes\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/i18next/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Update plugins to support Sherlock v2 & SDK v2 compatibility\n\nThe plugin now uses the new API for message extraction (`bundleId` instead of `messageId`).\n\n## Upgrading to Sherlock v2\n\n**There is no action needed** to upgrade to Sherlock v2. The plugin is now compatible with the new version and if you linked the plugin with `@latest`as we advise in the documentation.\n\nYou should be able to use the plugin with Sherlock v2 without any issues. If there are any issues, please let us know via Discord/GitHub.\n\n### Want to keep Sherlock v1 and the old plugin version?\n\nIf you still want to use Sherlock v1, please use the previous major version of the plugin. For Sherlock itself, [please pin the version to `1.x.x`](https://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_91.md#extension-install-options) in the VS Code extension settings.\n\n### Breaking changes\n\n- Lint rules are now polyfilled (and therefore may work different), as we are currently reworking how lint rules are working with [Lix Validation Rules](https://lix.opral.com).\n- The `messageId` parameter in the `extractMessages` function has been renamed to `bundleId`. This change is due to the new API in Sherlock v2. If you are using the `extractMessages` function, please update the parameter name to `bundleId`.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.0\nDESCRIPTION: This changelog entry documents a minor version change where doc-important is replaced with doc-callout.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- fd48b2d: replace doc-important with doc-callout\n```\n\n----------------------------------------\n\nTITLE: Installing OpenRA Plugin Manager on Windows\nDESCRIPTION: Command to install the OpenRA plugin manager using cargo on Windows systems. This installs the plugin manager directly from the GitHub repository.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/opral/opral opral\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Resource File Pattern in Localization\nDESCRIPTION: Example file structure showing the common pattern of storing localization messages in dedicated resource files, with language-specific files organized in a resources directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── resources/\n│   ├── de.ftl\n│   └── en.ftl\n├── App.jsx\n└── project.inlang.json\n```\n\n----------------------------------------\n\nTITLE: Package Version Update Markdown\nDESCRIPTION: Changelog entries showing version updates, dependency changes and bug fixes. Notable changes include machine translation fixes, CORS fixes, and improvements to message handling.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/rpc/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/rpc\n\n## 0.3.50\n\n### Patch Changes\n\n- Updated dependencies [56acb22]\n  - @inlang/sdk@2.4.8\n```\n\n----------------------------------------\n\nTITLE: Save Messages Implementation Reference\nDESCRIPTION: Reference to existing message saving implementation in InlangMessageStoreFigmaRoot.ts\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/Parrot V2 beta.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/opral/monorepo/blob/798dc07e2254015c7921debdf4dc5930bb2dc2a1/inlang/packages/parrot-figma/src/lib/message/store/InlangMessageStoreFigmaRoot.ts#L134\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.0\nDESCRIPTION: This changelog entry notes minor changes including a refactor for dual bundle dist output and index exports, and the separation of markdown-wc-doc-elements from the markdown-wc package.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- 1f50c49: refactor: dual bundle dist output and index exports\n\n  the output of the dist folder now includes bundled components that can be imported in the browser as well as the index.js file that exports the components for apps that are responsible for bundling the components themselves.\n\n- 015da74: Separate the markdown-wc-doc-elements package from the markdown-wc package. This package provides a set of custom elements that can be used to write (technical) documentation.\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Component in JSX\nDESCRIPTION: Sets up the Storybook Meta component to associate the documentation with the InlangBundle stories.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/inlang-bundle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={InlangBundle} />\n```\n\n----------------------------------------\n\nTITLE: Using doc-comment Element in HTML\nDESCRIPTION: This example demonstrates how to use the <doc-comment> element in HTML. It shows the element with all its available attributes: text, author, and icon.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-comment.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<doc-comment \n  text=\"This is a comment.\" \n  author=\"Author Name\" \n  icon=\"mdi:account\">\n</doc-comment>\n```\n\n----------------------------------------\n\nTITLE: Defining NewversionChangeConflict Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for inserting new entries into the VersionChangeConflictTable. This uses the Insertable generic type to create a type for new row insertions.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewversionChangeConflict** = `Insertable`<`VersionChangeConflictTable`>\n```\n\n----------------------------------------\n\nTITLE: Switching to Multiple Active Accounts in TypeScript\nDESCRIPTION: This example shows how to use the switchAccount function to switch to multiple active accounts simultaneously. It requires the lix object and an array containing the new accounts.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/switchAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait switchAccount({ lix, to: [account1, account2] });\n```\n\n----------------------------------------\n\nTITLE: Importing InlangPatternEditor Stories\nDESCRIPTION: Import statements for Storybook documentation components and InlangPatternEditor stories.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/pattern-editor/inlang-pattern-editor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\n\nimport * as InlangPatternEditor from './inlang-pattern-editor.stories';\n\n<Meta of={InlangPatternEditor} />\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown Documentation in HTML for Paraglide Examples\nDESCRIPTION: HTML code that embeds external markdown documentation for Paraglide JS implementation examples with Next.js. It includes imports for custom web components and embeds README files from GitHub repositories.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/getting-started/next-js.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://cdn.jsdelivr.net/gh/opral/monorepo@latest/inlang/packages/paraglide/paraglide-js/docs/getting-started/next-js-banner.png\" alt=\"i18n library for next js\" width=\"10000000px\" />\n\n<markdown-wc-embed src=\"https://cdn.jsdelivr.net/gh/opral/monorepo@latest/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md\"></markdown-wc-embed>\n\n<markdown-wc-embed src=\"https://cdn.jsdelivr.net/gh/opral/monorepo@latest/inlang/packages/paraglide/paraglide-js/examples/next-js-ssg/README.md\"></markdown-wc-embed>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.4\nDESCRIPTION: This changelog entry notes patch changes that fix the video component and icon component.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.4\n\n### Patch Changes\n\n- fixes the video component and icon component\n```\n\n----------------------------------------\n\nTITLE: Illustrating the Collaboration Problem with Person-to-Person Communication\nDESCRIPTION: A mermaid flowchart showing how multiple people need to communicate with each other directly to collaborate, creating a complex network of connections.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/notes-on-git-based-architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A[Person A]-->B\n   A-->C\n   B[Person B]-->A\n   B-->C\n   C[Person C]-->A\n   C-->B\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.1\nDESCRIPTION: Shows patch changes for version 1.3.1, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.1\n\n### Patch Changes\n\n- @inlang/project-settings@2.2.1\n- @inlang/translatable@1.2.1\n```\n\n----------------------------------------\n\nTITLE: Version Number Block (Markdown)\nDESCRIPTION: Example of a version changelog entry showing version number, change type and description\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.0.11\n\n### Patch Changes\n\n- Updated dependencies [56acb22]\n  - @inlang/sdk@2.4.8\n```\n\n----------------------------------------\n\nTITLE: Running CI Checks\nDESCRIPTION: Command to run all tests and checks before submitting a PR.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run ci\n```\n\n----------------------------------------\n\nTITLE: Using doc-feature Element in HTML\nDESCRIPTION: Example of how to implement the doc-feature element to display a feature card. The element accepts attributes for title, icon, image, background color, and text color to customize the appearance of the feature card.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-feature.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<doc-feature \n  title=\"Feature Title\" \n  icon=\"mdi:star\" \n  image=\"https://cdn.jsdelivr.net/gh/opral/monorepo/inlang/documentation/sdk/assets/sdkDocStorage.png\" \n  color=\"#f0f0f0\" \n  text-color=\"#000\">\n</doc-feature>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Highlights with doc-features Component\nDESCRIPTION: HTML markup using the doc-features and doc-feature components to display three key features of Fink: visual message editing, version control collaboration, and quality assurance with lint rules. Each feature includes a title, styling properties, and an image.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/fink/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<doc-features>\n  <doc-feature text-color=\"#0F172A\" color=\"#E1EFF7\" title=\"Edit messages visually\" image=\"https://cdn.jsdelivr.net/gh/opral/monorepo/inlang/packages/fink/assets/editor01.png\"></doc-feature>\n  <doc-feature text-color=\"#0F172A\" color=\"#E1EFF7\" title=\"Collaborate using version control\" image=\"https://cdn.jsdelivr.net/gh/opral/monorepo/inlang/packages/fink/assets/editor02.png\"></doc-feature>\n  <doc-feature text-color=\"#0F172A\" color=\"#E1EFF7\" title=\"Ensure quality with lint rules\" image=\"https://cdn.jsdelivr.net/gh/opral/monorepo/inlang/packages/fink/assets/editor03.png\"></doc-feature>\n</doc-features>\n```\n\n----------------------------------------\n\nTITLE: Importing doc-comment Element in HTML\nDESCRIPTION: This code snippet shows how to import the doc-comment element from a JavaScript file. It's typically used at the beginning of an HTML file or in the head section.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-comment.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n---\nimports:\n  - \"../dist/doc-comment.js\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining NewFileQueueEntry Type Alias in TypeScript\nDESCRIPTION: A type alias definition for entries that can be inserted into the FileQueueTable. It uses the Insertable generic type to specify fields required for insertion operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewFileQueueEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NewFileQueueEntry = Insertable<FileQueueTable>\n```\n\n----------------------------------------\n\nTITLE: Defining ServerRuntime Type in TypeScript\nDESCRIPTION: Type declaration for the ServerRuntime object that contains the Paraglide middleware functionality. Located in server/type.ts file at line 4.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/server/type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServerRuntime {\n  paraglideMiddleware: paraglideMiddleware\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Meta Component\nDESCRIPTION: This code sets up the Storybook Meta component to associate the documentation with the InlangAddSelector stories.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/add-selector/inlang-add-selector.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={InlangAddSelector} />;\n```\n\n----------------------------------------\n\nTITLE: Using createParaglide API\nDESCRIPTION: Example of using the new createParaglide() API for runtime access to Paraglide's compiled APIs.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = await fs.readFile(\"./project.inlang\");\n\nconst paraglide = await createParaglideModule({\n\tproject,\n\tcompilerOptions: {\n\t\tstrategy: [\"url\"],\n\t},\n});\n\n// Use runtime functions\nparaglide.localizeUrl(\"https://example.com\", { locale: \"de\" });\n\n// Use server middleware\napp.use(paraglide.paraglideMiddleware());\n```\n\n----------------------------------------\n\nTITLE: Importing Components via Frontmatter in Markdown\nDESCRIPTION: Example of how to import external components in markdown documents using the frontmatter import property. This feature ensures interoperability and portability of documents.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ntitle: \"Hello World\"\n+import:\n+  - \"https://example.com/doc-card.js\"\n+  - \"https://example.com/doc-button.js\"\n---\n\n# Hello World\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.1\nDESCRIPTION: Documentation of patch to intercept and mute OPFS warnings for in-memory SQLite operations.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/sqlite-wasm-kysely/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n### Patch Changes\n\n- 7046bc3: We intercept SQLite's logging to mute OPFS warnings. Since we explicitly run SQLite in memory on the main thread, there is no need for OPFS.\n```\n\n----------------------------------------\n\nTITLE: Git-Based Distributed Collaboration Architecture\nDESCRIPTION: A mermaid flowchart showing how git enables peer-to-peer collaboration where each person has their own repository that can sync with others.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/blog/notes-on-git-based-architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   A[(Person A)]<-->B\n   A<-->C\n   B[(Person B)]\n   B<-->C\n   C[(Person C)]\n```\n\n----------------------------------------\n\nTITLE: Example Markdown File Prefix\nDESCRIPTION: Demonstrates the file naming convention using numerical prefixes for ordering documentation files\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n01-\n```\n\n----------------------------------------\n\nTITLE: Embedding Loom Video with doc-video Element\nDESCRIPTION: Example showing how to use the doc-video element to embed a Loom video. The src attribute points to a Loom share URL.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-video.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<doc-video src=\"https://www.loom.com/share/cc29f05291d2414c9f134d68bfe7b8f1\"></doc-video>\n```\n\n----------------------------------------\n\nTITLE: Importing doc-accordion Custom Element in HTML\nDESCRIPTION: This code snippet shows how to import the doc-accordion custom element JavaScript file using an imports statement.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/src/doc-accordion.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - \"../dist/doc-accordion.js\"\n```\n\n----------------------------------------\n\nTITLE: CSS Link Class Component Reference\nDESCRIPTION: Reference to the .link CSS class component that is part of the design system.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/tailwind-color-plugin/src/components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/design-system/components\n```\n\n----------------------------------------\n\nTITLE: Defining Version Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named Version using the Selectable type applied to VersionTable. It's likely used for type-safe database operations in the SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/Version.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Version = Selectable<VersionTable>\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Language in Sherlock Extension\nDESCRIPTION: Configuration setting to customize the preview language for translations using a language tag.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/docs/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"sherlock.previewLanguageTag\": \"de\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Dependency Updates in Markdown\nDESCRIPTION: This snippet shows the format used to document dependency updates in a changelog. It includes version numbers, dependency names, and the corresponding version changes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## null\n\n### Patch Changes\n\n- Updated dependencies [3b2e0a6]\n  - @lix-js/client@2.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining KeyValue Type Alias in TypeScript\nDESCRIPTION: Creates a type alias named KeyValue that represents a selectable entity from the KeyValueTable. This type is used for database operations in the key-value storage system.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/KeyValue.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**KeyValue** = `Selectable`<[`KeyValueTable`](KeyValueTable.md)>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.2\nDESCRIPTION: This changelog entry notes a patch change to include the readme in files to use jsdelivr for referencing the readme.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.2\n\n### Patch Changes\n\n- include readme in files to use jsdelivr to reference the readme\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Web Component Documentation Elements\nDESCRIPTION: YAML configuration block defining CDN imports for various documentation-related web components used throughout the page\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-feature.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-features.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-link.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-links.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-comment.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-comments.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-callout.js\n```\n\n----------------------------------------\n\nTITLE: Installing i18next Plugin Package\nDESCRIPTION: Example showing the package name for installing the i18next plugin\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/i18next/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/plugin-i18next\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.3\nDESCRIPTION: Shows patch changes for version 1.3.3, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.3\n\n### Patch Changes\n\n- @inlang/project-settings@2.2.3\n- @inlang/translatable@1.3.1\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Documentation (Markdown)\nDESCRIPTION: Example of documenting breaking changes in the changelog with code diff\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- 4b710df: Upgrade to the inlang SDK v2.\n\n  BREAKING:\n\n  - The `inlang lint` command has been removed. Please upvote https://github.com/opral/lix-sdk/issues/239 to re-introduce linting in a future release.\n\n  ```diff\n  - inlang lint\n  ```\n\n  - Machine translate now takes `locales` instead of `languageTags` as argument\n\n  ```diff\n  - inlang machine-translate --languageTags en,de\n  + inlang machine-translate --locales en,de\n  ```\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Process Flowchart using Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the translation process, showing the interaction between developers and translators, and the pipeline for creating, reviewing, approving, and maintaining translations. It includes subgraphs for Developers, Translators, and a Legend explaining the automation levels.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/assets/graphs.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    TF1<--->|hand off|TF2\n    subgraph Translators\n        direction LR\n        TF2[Translation Files]<-->Pipeline\n        subgraph Pipeline\n            direction TB\n            create-->review\n            review-->approve\n            approve-->maintain\n            maintain-->review\n        end\n    end\n    subgraph Developers\n    TF1[Translation Files]-->|reference|Code\n    Code-->|extract|TF1\n    end\n    subgraph Legend\n      direction LR\n      start1[ ] --->|fully automatable| stop1[ ]\n      style start1 height:0px;\n      style stop1 height:0px;\n      start2[ ] --->|highly automatable| stop2[ ]\n      style start2 height:0px;\n      style stop2 height:0px;\n    end\n    linkStyle 0 stroke:red;\n    linkStyle 2 stroke:red;\n    linkStyle 3 stroke:orange;\n    linkStyle 4 stroke:orange;\n    linkStyle 5 stroke:orange;\n    linkStyle 6 stroke:red;\n    linkStyle 7 stroke:red;\n    linkStyle 8 stroke:red;\n    linkStyle 9 stroke:orange;\n```\n\n----------------------------------------\n\nTITLE: InlangPatternEditor Canvas Example\nDESCRIPTION: Storybook canvas component displaying an example of the InlangPatternEditor.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/pattern-editor/inlang-pattern-editor.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangPatternEditor.Example} />\n```\n\n----------------------------------------\n\nTITLE: Defining NewChangeAuthor Type in TypeScript\nDESCRIPTION: Type alias definition for NewChangeAuthor which is an Insertable type of ChangeAuthorTable. This type is used for creating new change author records in the database schema.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/NewChangeAuthor.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**NewChangeAuthor** = `Insertable`\\<`ChangeAuthorTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Nested Simple Messages Structure\nDESCRIPTION: Example of nested message organization showing hierarchical structure for better translation management.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/inlang-message-format/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"hello\": \"world\",\n\t\"navigation\": {\n\t\t\"home\": \"Home\",\n\t\t\"about\": \"About\",\n\t\t\"contact\": {\n\t\t\t\"email\": \"Email\",\n\t\t\t\"phone\": \"Phone\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running CI Checks and Tests\nDESCRIPTION: Command to run all tests and checks as part of the continuous integration process.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run ci\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.1\nDESCRIPTION: This changelog entry notes a patch change that fixes documentation for doc-links.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1\n\n### Patch Changes\n\n- bdb333a: fix documentation for doc-links\n```\n\n----------------------------------------\n\nTITLE: Running Package Commands\nDESCRIPTION: Command to run specific commands like dev or test for a package using pnpm filter.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter <package-name> dev|test|...\n```\n\n----------------------------------------\n\nTITLE: Importing LoginDialog Component in TypeScript\nDESCRIPTION: This snippet shows the import statement for the LoginDialog component used in the authentication process. The LoginDialog is likely responsible for initiating the OAuth flow with GitHub.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginDialog } from \"./src/components/LoginDialog.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dependencies Between Changes in Mermaid\nDESCRIPTION: A Mermaid diagram highlighting a dependency relationship where Change B depends on Change A. Non-relevant nodes are shown with reduced opacity to emphasize the dependency relationship.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/30-change-graph.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    G[\"Change G\"]:::unhighlight --> F[\"Change D\"]\n    F[\"Change D\"]:::unhighlight\n    F --> B[\"Change B\"]\n    F --> C[\"Change C\"]:::unhighlight\n    B --> A[\"Change A\"]\n    C --> A\n  \nclassDef unhighlight, opacity:0.5;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Inlang Project Dependencies with Mermaid\nDESCRIPTION: This mermaid flowchart illustrates the dependency relationships between various components of the inlang project. It shows how the core packages (ast, config, validation, query) interact with external configurations, git-sdk, and applications.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Applications\n    subgraph Packages\n        subgraph Hosts\n                GitHub\n                Azure\n                GitLab\n                Other[etc...]\n        end\n        subgraph \"git-sdk\"\n            git[git-sdk/api]\n            Host[git-sdk/host]\n        end\n        subgraph core\n            validation[core/validation]\n            ast[core/ast]\n            query[core/query]\n            config[core/config]\n        end\n        Hosts-.-Host\n    end\n    subgraph External[inlang.config.js]\n        direction LR\n        Parsing[Read & write / AST]\n        Workflow[Business logic]\n        Other2[And more...]\n    end\n    Community[Community code]-->|can be imported|External\n    config-->External\n    External-->Applications\n    Host-->Applications\n    validation-->Applications\n    git-->Applications\n    ast-->config\n    ast-->validation\n    ast-->query\n    query-->Applications\n```\n\n----------------------------------------\n\nTITLE: Displaying InlangMessage Example in Storybook Canvas\nDESCRIPTION: This code snippet demonstrates how to display an example of the InlangMessage component within a Storybook Canvas component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/message/inlang-message.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangMessage.Example} />\n```\n\n----------------------------------------\n\nTITLE: Defining AccountTable Type Alias in TypeScript\nDESCRIPTION: This type alias defines the structure of the AccountTable, including properties for id and name. It represents the schema of the account table in the database.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AccountTable = {\n  id: Generated<string>;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the @inlang/message-bundle-component package. Shows patch and minor version changes along with their corresponding @inlang/sdk dependency updates.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/message-bundle-component\n\n## 4.0.9\n\n### Patch Changes\n\n- Updated dependencies [56acb22]\n  - @inlang/sdk@2.4.8\n```\n\n----------------------------------------\n\nTITLE: Reverting NPM Script Shell Configuration\nDESCRIPTION: Command to remove the custom script shell configuration and revert to default npm behavior.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm config delete script-shell\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Paraglide JS 2.0\nDESCRIPTION: Shows the necessary changes in package.json to remove old adapters and add the new Paraglide JS 2.0 dependency.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n-    \"@inlang/paraglide-sveltekit\": \"^1.0.0\",\n-    \"@inlang/paraglide-next\": \"^1.0.0\",\n-    \"@inlang/paraglide-astro\": \"^1.0.0\",\n-    \"@inlang/paraglide-vite\": \"^1.0.0\",\n+    \"@inlang/paraglide-js\": \"^2.0.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.2\nDESCRIPTION: Shows patch changes for version 1.3.2, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.2\n\n### Patch Changes\n\n- Updated dependencies [244442698]\n  - @inlang/translatable@1.3.0\n  - @inlang/project-settings@2.2.2\n```\n\n----------------------------------------\n\nTITLE: Rendering InlangAddVariable Example in Storybook Canvas\nDESCRIPTION: This snippet demonstrates how to render an example of the InlangAddVariable component using Storybook's Canvas component. It references the Example story from the imported stories file.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/add-variable/inlang-add-variable.mdx#2025-04-21_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Canvas of={InlangAddInput.Example} />\n```\n\n----------------------------------------\n\nTITLE: Referencing Implementation File in Markdown\nDESCRIPTION: This snippet shows how to reference a TypeScript file in Markdown, specifically pointing to the implementation of the color token generation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/tailwind-color-plugin/src/color-system/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe implemenation can be found in (./generateTokens.cts)[./generateTokens.cts].\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Web Component Usage Example\nDESCRIPTION: Demonstrates how to use web components in markdown files by importing components and using them directly in markdown content.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimports: \n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc/dist/walking-dinosaur.js\n---\n\n# Opral Markdown WC \n\nEnables writing documentation with web components in markdown.\n\n<walking-dinosaur></walking-dinosaur>\n<doc-video src=\"https://youtu.be/IMjJ1jvKsZU\"></doc-video>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components in TypeScript\nDESCRIPTION: Imports the Canvas and Meta components from Storybook's blocks module for documentation purposes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/inlang-bundle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.1\nDESCRIPTION: This changelog entry documents a patch fix to import doc-icon for the doc-link element.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1\n\n### Patch Changes\n\n- caea2f6: fix: import doc-icon for doc-link element\n```\n\n----------------------------------------\n\nTITLE: Building Paraglide-js Dependencies\nDESCRIPTION: Example command to build dependencies for the @inlang/paraglide-js package.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @inlang/paraglide-js... build\n```\n\n----------------------------------------\n\nTITLE: Rendering InlangAddSelector Example in Storybook Canvas\nDESCRIPTION: This snippet renders the Example story of the InlangAddSelector component within a Storybook Canvas for interactive demonstration.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/add-selector/inlang-add-selector.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={InlangAddSelector.Example} />\n```\n\n----------------------------------------\n\nTITLE: Code Reference to Isomorphic-git Checkout Implementation\nDESCRIPTION: Reference to the checkout implementation file in isomorphic-git that demonstrates performance optimization issues.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/git-sdk-requirements/RFC.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsrc/commands/checkout.js\n```\n\n----------------------------------------\n\nTITLE: Building Paraglide JS Dependencies\nDESCRIPTION: Command to build the dependencies for Paraglide JS using PNPM with filtering.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @inlang/paraglide-js... build\n```\n\n----------------------------------------\n\nTITLE: Importing InlangBundleAction Stories in TypeScript\nDESCRIPTION: This snippet shows how to import the InlangBundleAction stories for use in Storybook documentation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/actions/bundle-action/inlang-bundle-action.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as InlangBundleAction from './inlang-bundle-action.stories.ts';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Inlang Settings\nDESCRIPTION: This snippet sets up the Storybook Meta component for the Inlang Settings documentation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/src/inlang-settings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Meta of={InlangSettings} />\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.0\nDESCRIPTION: Documentation of fix for multiple SQLite database instances interfering with each other, removing global variable dependency.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/sqlite-wasm-kysely/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- 31e8fb8: fix: multiple sqlite database instances interfering\n\n  Closes https://github.com/opral/inlang-paraglide-js/issues/320\n\n  Multiple sqlite database instances were interfering with each other upon closing one of them. The bug was mitigated by avoiding a globally set variable for the sqlite module.\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Disabling AsyncLocalStorage for Serverless Environments\nDESCRIPTION: Configuration option to disable AsyncLocalStorage when using Paraglide JS in serverless environments. This modification is only safe in environments where each request has its own isolated runtime context.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/astro/README.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n\tvite: {\n\t\tplugins: [\n\t\t\tparaglideVitePlugin({\n\t\t\t\tproject: \"./project.inlang\",\n\t\t\t\toutdir: \"./src/paraglide\",\n+\t\t\t\tdisableAsyncLocalStorage: true,\n\t\t\t}),\n\t\t],\n\t},\n```\n\n----------------------------------------\n\nTITLE: Installing OpenRA Plugin Manager on Linux and macOS\nDESCRIPTION: Commands to install the OpenRA plugin manager from the terminal on Linux and macOS systems. It shows both installation from pre-built binaries and building from source code.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Pre-built binaries\ncurl -fsSL https://opral.io/install.sh | sh\n\n# or build from source\ncargo install --git https://github.com/opral/opral opral\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Inlang Settings Documentation\nDESCRIPTION: This snippet imports necessary components from Storybook blocks and the Inlang Settings stories for documentation purposes.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/src/inlang-settings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Primary, Controls, Story, Canvas, ArgTypes, Source } from '@storybook/blocks';\nimport * as InlangSettings from './stories/inlang-settings.stories';\n```\n\n----------------------------------------\n\nTITLE: Server-Side Page Rendering with Vike (TypeScript)\nDESCRIPTION: Server-side rendering configuration file that defines how pages are pre-rendered on the server using Vike's SSR capabilities.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/renderer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n_default.page.server.tsx\n```\n\n----------------------------------------\n\nTITLE: Load Messages Implementation Reference\nDESCRIPTION: Reference to existing message loading implementation in InlangMessageStoreFigmaRoot.ts\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/Parrot V2 beta.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/opral/monorepo/blob/798dc07e2254015c7921debdf4dc5930bb2dc2a1/inlang/packages/parrot-figma/src/lib/message/store/InlangMessageStoreFigmaRoot.ts#L164-L165\n```\n\n----------------------------------------\n\nTITLE: Illustrating Localization DX Issues in JSX\nDESCRIPTION: Example JSX code demonstrating common developer experience issues with traditional i18n libraries, including the disconnect between hardcoded strings and resource files, and the cumbersome implementation of translated components.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/core-architecture/RFC.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport translate from \"i18n-library\";\nimport Translated from 'i18n-library';\n\n// What is info referring to?\n<p>{translate('info')}</p>\n\n// 1. Ugh ... do I need to wrap every element in a Translated component now?\n// 2. Okay, I see what `info` is referring to now, but\n//    changing the text \"Click the button...\" will not\n//    be reflected in the resource! I still have to manually\n//    edit the resource file!\n<Translated id=\"info\">\n  <p>Click the button to continue.</p>\n</Translated>\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSetElementUpdate Type Alias in TypeScript\nDESCRIPTION: Type alias that defines the updateable properties of a ChangeSetElementTable using the Updateable utility type. This is used for database operations when updating change set elements.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSetElementUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nChangeSetElementUpdate = `Updateable`<`ChangeSetElementTable`>\n```\n\n----------------------------------------\n\nTITLE: Displaying Inlang Settings ArgTypes in Storybook\nDESCRIPTION: This snippet shows how to display the ArgTypes for the Inlang Settings component in the Storybook documentation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/src/inlang-settings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ArgTypes/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TSESLint Parser Options\nDESCRIPTION: Configuration for enabling type-aware lint rules by setting up parser options in TSESLint config. Specifies TypeScript configuration files and root directory.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/sherlock/src/utilities/editor/sherlock-editor-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n\tlanguageOptions: {\n\t\t// other options...\n\t\tparserOptions: {\n\t\t\tproject: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n\t\t\ttsconfigRootDir: import.meta.dirname,\n\t\t},\n\t},\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenRA Plugin Manager Installation\nDESCRIPTION: Command to verify that the OpenRA plugin manager is correctly installed and configured by displaying its version information. This helps confirm the installation was successful.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopral --version\n```\n\n----------------------------------------\n\nTITLE: Creating Startup Configuration File for Bash\nDESCRIPTION: Command to create or modify a .bashrc startup file if none exists. This is a preparatory step for configuring the PATH environment variable.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/docs/20-concepts/80-change-proposal.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Web Components\nDESCRIPTION: Imports various web components for documentation from the @opral/markdown-wc-doc-elements package using CDN links. These components include doc-hero, doc-features, doc-pricing, doc-feature, and doc-callout.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/fink/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nimports:\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-hero.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-features.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-pricing.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-feature.js\n  - https://cdn.jsdelivr.net/npm/@opral/markdown-wc-doc-elements/dist/doc-callout.js\n---\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeSetUpdate Type Alias in TypeScript\nDESCRIPTION: Type alias definition that creates an updateable version of the ChangeSetTable type, used for database operations in the Lix JS SDK.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/type-aliases/ChangeSetUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ChangeSetUpdate** = `Updateable`\\<`ChangeSetTable`\\>\n```\n\n----------------------------------------\n\nTITLE: Building Package Dependencies\nDESCRIPTION: Command to build dependencies for a specific package using pnpm filter syntax.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter <package-name>... build\n```\n\n----------------------------------------\n\nTITLE: Concurrent Update Test Implementation\nDESCRIPTION: Testing concurrent updates between multiple users with scheduled tasks and offline/online state management\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/parrot-figma/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runTest(currentUser, testRunPrefix) {\n    // Online simultaneous updates\n    schedule('user1', 'Online Update at same time test:', 1, 0, 0, () => {\n        figma.setPluginData(testRunPrefix + 'modify_test_online', 'Created by user1');\n        figma.setPluginData(testRunPrefix + 'modify_test_online', 'Updated by user1');\n        return 'modify_test_online: ' + figma.getPluginData(testRunPrefix + 'modify_test_online');\n    });\n\n    // Offline sync tests and other scheduled operations...\n    schedule('user2', 'Online Update test at same time:', 1, 0, () => {\n        figma.setPluginData(testRunPrefix + 'modify_test_online', 'Updated by user2');\n        return 'modify_test_online: ' + figma.getPluginData(testRunPrefix + 'modify_test_online');\n    });\n\n    // Additional scheduled operations...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Paraglide-js Development\nDESCRIPTION: Example command to run development mode for the @inlang/paraglide-js package.\nSOURCE: https://github.com/opral/monorepo/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @inlang/paraglide-js dev\n```\n\n----------------------------------------\n\nTITLE: Proposal 3: Use API Pattern Implementation\nDESCRIPTION: Presents a 'use' API pattern that allows plugins to read and modify previous configs, but requires more complex setup and introduces multiple API concepts.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function setup({ defineConfig, env }) {\n  const pluginJson = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/samuelstroschein/inlang-plugin-json@1/dist/index.js\",\n  );\n  const sdk = await env.$import(\n    \"https://cdn.jsdelivr.net/gh/opral/inlang@1/dist/sdk-js/index.js\",\n  );\n\n  return defineConfig({\n    sourceLanguageTag: \"en\",\n  })\n    .use(\n      pluginJson({\n        pathPattern: \"./languages/{language}.json\",\n      }),\n    )\n    .use(\n      sdk({\n        languageNegotiation: {\n          strategies: [{ type: \"localStorage\" }, { type: \"navigator\" }],\n        },\n      }),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Canvas Display\nDESCRIPTION: Displays the basic example of the InlangVariant component usage in Storybook.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/variant/inlang-variant.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={InlangVariant.Example} />\n```\n\n----------------------------------------\n\nTITLE: Defining VersionUpdate Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for updating entries in the VersionTable. This uses the Updateable generic type to create a type for row updates.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\n**VersionUpdate** = `Updateable`<`VersionTable`>\n```\n\n----------------------------------------\n\nTITLE: HTML Custom Element Implementation for Benchmark Visualization\nDESCRIPTION: An HTML custom element import used to visualize benchmark results from a JSON data source. The visualization component is loaded from an external CDN source.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/benchmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<benchmark-visualization src=\"https://cdn.jsdelivr.net/gh/opral/monorepo@main/inlang/packages/paraglide/paraglide-js/benchmark/benchmark-results.json\"></benchmark-visualization>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.2\nDESCRIPTION: This changelog entry documents a patch change that wraps slot children in a div within the doc callout to avoid flex styling issues.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.2\n\n### Patch Changes\n\n- 41a7580: doc callout wraps slot children in div to avoid flex styling\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.3.4\nDESCRIPTION: Shows patch changes for version 1.3.4, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.4\n\n### Patch Changes\n\n- Updated dependencies [0c272619a]\n  - @inlang/project-settings@2.3.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.0\nDESCRIPTION: Documentation of SQLite dependency update to version 3.48.0-build2.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/sqlite-wasm-kysely/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- b87f8a8: update sqlite dependency to 3.48.0-build2\n```\n\n----------------------------------------\n\nTITLE: Referencing Router Component in TypeScript\nDESCRIPTION: This snippet indicates the location of the router.ts file, which handles the server-side operations of the OAuth process, including exchanging the interim code for an encrypted JWT and storing the access token in a cookie session.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/website/src/services/auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { router } from \"./src/router.ts\"\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Documentation for Message Bundle Component\nDESCRIPTION: Command to launch the Storybook documentation interface for the message bundle component using pnpm workspace filtering.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @inlang/message-bundle-component run storybook\n```\n\n----------------------------------------\n\nTITLE: Adding an Inlang Plugin to settings.json\nDESCRIPTION: This code snippet demonstrates how to add an inlang plugin to your project's settings.json file. It shows a diff of adding the message-format plugin to the modules array.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs/file-formats.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"baseLocale\": \"en\",\n  \"locales\": [\"en\", \"de\"],\n  \"modules\": [\n     \"other plugins...\",\n+    \"https://cdn.jsdelivr.net/npm/@inlang/plugin-message-format@latest/dist/index.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for withSkipOwnChangeControl in TypeScript\nDESCRIPTION: The withSkipOwnChangeControl function takes a Kysely database instance and an operation function, and returns a Promise of type T. It allows executing database operations while bypassing own change tracking mechanisms.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/functions/withSkipOwnChangeControl.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nwithSkipOwnChangeControl<T>(db: Kysely<LixDatabaseSchema>, operation: (trx) => Promise<T>): Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Using doc-callout Component for Information\nDESCRIPTION: Implementation of the doc-callout web component to display information about upvoting an issue to prioritize a full release of Fink on the inlang sdk v2.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/fink/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<doc-callout type=\"info\">Upvote issue [#72](https://github.com/opral/inlang-fink/issues/72) to prioritize a full release of Fink on the inlang sdk v2.</doc-callout>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: A changelog documenting version changes and dependency updates for @inlang/settings-component, showing version progression from 1.0.0 to 5.0.0 with corresponding dependency updates.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/settings-component/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @inlang/settings-component\\n\\n## 5.0.0\\n\\n### Minor Changes\\n\\n- f01927c: bugfixing\\n\\n### Patch Changes\\n\\n- Updated dependencies [f01927c]\\n  - @inlang/sdk@2.4.0\n```\n\n----------------------------------------\n\nTITLE: Plugin Consumption Example in TypeScript\nDESCRIPTION: Simple example of how plugins would be consumed in the configuration. Shows the familiar function call pattern with options object for configuring the plugin.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/rfcs/plugin-api/RFC.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\npluginJson({\n  pathPattern: \"./languages/{language}.json\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Changelog with Changeset\nDESCRIPTION: Command to create a changelog and trigger a version bump using the Changeset tool.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Defining Version Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for selecting entries from the VersionTable. This uses the Selectable generic type to create a type for row selections.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/lix-sdk/api-docs/README.md#2025-04-21_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n**Version** = `Selectable`<`VersionTable`>\n```\n\n----------------------------------------\n\nTITLE: Next-intl Usage Example with Namespaces\nDESCRIPTION: Example showing how to use next-intl translations with namespaces in a React component using the useTranslations hook.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/plugins/next-intl/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useTranslations} from 'next-intl';\n \nfunction About() {\n  const t = useTranslations('About');\n  return <h1>{t('title')}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.4.0\nDESCRIPTION: Shows minor changes for version 1.4.0, including deprecation of readme and addition of pages and pageRedirects.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.0\n\n### Minor Changes\n\n- 52c1646: Depricated readme, added pages and pageRedirects\n```\n\n----------------------------------------\n\nTITLE: Executing Inlang CLI Commands with npx\nDESCRIPTION: Shows how to run Inlang CLI commands using npx, which allows users to execute the CLI without global installation.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @inlang/cli [command]\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.4.2\nDESCRIPTION: Shows patch changes for version 1.4.2, including updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.4.2\n\n### Patch Changes\n\n- Updated dependencies [bc17d0c]\n  - @inlang/project-settings@2.4.2\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.3\nDESCRIPTION: This changelog entry documents a patch change to use remote component link for portability.\nSOURCE: https://github.com/opral/monorepo/blob/main/packages/markdown-wc-doc-elements/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.3\n\n### Patch Changes\n\n- use remote component link for portability\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware File Structure\nDESCRIPTION: Shows the file structure change needed to add Paraglide middleware.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/examples/next-js-ssr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\napp/\n  - index.tsx\n+ - middleware.ts\n  - about.tsx\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Sets up the Storybook documentation metadata for the InlangVariant component.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/ui-components/editor-component/src/stories/variant/inlang-variant.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={InlangVariant} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.1.0\nDESCRIPTION: Shows minor changes for version 1.1.0, including the addition of typesafety via JSON schema and updated dependencies.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/marketplace-manifest/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0\n\n### Minor Changes\n\n- 713385d3: add typesafety via JSON schema\n\n### Patch Changes\n\n- Updated dependencies [713385d3]\n  - @inlang/project-settings@1.1.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Module Navigation Links\nDESCRIPTION: Set of markdown links directing to different documentation modules within the project structure.\nSOURCE: https://github.com/opral/monorepo/blob/main/inlang/packages/paraglide/paraglide-js/docs-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [compiler-options](compiler-options.md)\n- [runtime/type](runtime/type.md)\n- [server/type](server/type.md)\n```"
  }
]