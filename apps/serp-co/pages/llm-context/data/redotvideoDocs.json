[
  {
    "owner": "redotvideo",
    "repo": "docs",
    "content": "TITLE: Installing Revideo Project\nDESCRIPTION: Command to initialize a new revideo project using npm.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @revideo@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Animation with Revideo Components\nDESCRIPTION: Complete example of a revideo animation script using Video, Audio, and Img components with animations like scaling and rotation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Audio, Img, Video, makeScene2D} from '@revideo/2d';\nimport {all, chain, createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const logoRef = createRef<Img>();\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/stars.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n      <Audio\n        src={'https://revideo-example-assets.s3.amazonaws.com/chill-beat.mp3'}\n        play={true}\n        time={17.0}\n      />\n    </>,\n  );\n\n  yield* waitFor(1);\n\n  view.add(\n    <Img\n      width={'1%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield* chain(\n    all(logoRef().scale(40, 2), logoRef().rotation(360, 2)),\n    logoRef().scale(60, 1),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Animations with Three.js and Revideo in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a 3D scene using Three.js and integrate it with Revideo's 2D components. It creates a rotating cube, adds text, and animates multiple elements using Revideo's animation functions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/3d-animations-with-threejs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Three} from '../components/Three';\nimport {makeScene2D, Txt} from '@revideo/2d';\nimport {\n  tween,\n  waitFor,\n  delay,\n  createRef,\n  all,\n  chain,\n  linear,\n} from '@revideo/core';\nimport * as THREE from 'three';\n\nfunction setup3DScene() {\n  const threeScene = new THREE.Scene();\n\n  const geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);\n  const material = new THREE.MeshNormalMaterial();\n\n  const mesh = new THREE.Mesh(geometry, material);\n  threeScene.add(mesh);\n\n  const camera = new THREE.PerspectiveCamera(90);\n\n  mesh.position.set(0, 0, 0);\n  mesh.scale.set(1, 1, 1);\n  camera.rotation.set(0, 0, 0);\n  camera.position.set(0, 0, 0.5);\n\n  return {threeScene, camera, mesh};\n}\n\nexport default makeScene2D(function* (view) {\n  const {threeScene, camera, mesh} = setup3DScene();\n\n  const threeRef = createRef<Three>();\n  const txtRef = createRef<Txt>();\n\n  yield view.add(\n    <>\n      <Three\n        width={1920}\n        height={1080}\n        camera={camera}\n        scene={threeScene}\n        opacity={0}\n        fontWeight={900}\n        ref={threeRef}\n      />\n    </>,\n  );\n\n  yield view.add(\n    <Txt fill={'black'} fontFamily={'Lexend'} ref={txtRef} fontSize={80} />,\n  );\n\n  yield* chain(\n    txtRef().text('Revideo x 3D with Three.js', 1),\n    all(txtRef().position.y(-300, 1), delay(0.5, threeRef().opacity(1, 0.5))),\n  );\n\n  yield tween(4, value => {\n    mesh.rotation.set(0, linear(value, 0, 2 * 3.14), 0);\n  });\n\n  yield* waitFor(2);\n\n  yield addRotatingCube(threeRef().scene(), 0.1, 0.3, -0.2, 0.1);\n  yield addRotatingCube(threeRef().scene(), 0.1, -0.3, -0.2, 0.1);\n\n  yield* waitFor(2);\n});\n\nfunction* addRotatingCube(\n  threeScene: THREE.Scene,\n  size: number,\n  x: number,\n  y: number,\n  z: number,\n) {\n  const geometry = new THREE.BoxGeometry(size, size, size);\n  const material = new THREE.MeshNormalMaterial();\n  const mesh = new THREE.Mesh(geometry, material);\n\n  mesh.position.set(x, y, z);\n  mesh.scale.set(1, 1, 1);\n\n  threeScene.add(mesh);\n\n  yield* tween(4, value => {\n    mesh.rotation.set(0, linear(value, 0, 2 * 3.14), 0);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Node Positions Using Absolute Transform in Motion Canvas (TSX)\nDESCRIPTION: This example demonstrates how to match the positions of two circle nodes that have different parent nodes. It uses the absolutePosition method to ensure both circles appear at the same location in world space.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/positioning.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst circleA = createRef<Node>();\nconst circleB = createRef<Node>();\n\nview.add(\n  <>\n    <Node position={[200, 100]}>\n      <Circle\n        position={[0, 100]}\n        ref={circleA}\n        width={20}\n        height={20}\n        fill={'white'}\n      />\n    </Node>\n    <Circle ref={circleB} width={10} height={10} fill={'red'} />\n  </>,\n);\n\ncircleB().absolutePosition(circleA().absolutePosition());\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Code Animation Scene in ReVideo\nDESCRIPTION: Demonstrates how to set up a scene with animated code transformations including replacing text, adding function wrappers, and selection animations. This example shows the core mechanics of code animation in ReVideo.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    ,\n  );\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code.replace(code().findFirstRange('number'), 'variable', 0.6),\n    code().code.prepend(0.6)`function example() {\\n  `,\n    code().code.append(0.6)`\\n}`,\n  );\n\n  yield* waitFor(0.6);\n  yield* code().selection(code().findFirstRange('variable'), 0.6);\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code('const number = 7;', 0.6),\n    code().selection(DEFAULT, 0.6),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using the edit Method for Visual Code Editing\nDESCRIPTION: Demonstrates the edit method which provides a more visual way to define code transitions using helper functions like replace, insert, and remove within a template string.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    ,\n  );\n\n  yield* code().code.edit(0.6)`\\\nfunction example() {\n  ${insert(`// This is a comment\n  `)}console.log(\"${replace('Hello!', 'Goodbye!')}\")\n${remove(`  return 7;\n`)}}`;\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Express.js Server for Single-Process Revideo Rendering in TypeScript\nDESCRIPTION: This TypeScript code sets up a basic Express.js server to handle video rendering requests using the `@revideo/renderer` package. It defines a POST endpoint `/render` that accepts rendering variables, invokes the `renderVideo` function, saves the output with a unique ID generated by `uuid`, and returns the rendered video file. This setup is suitable for scenarios where parallelization is not required or videos are short.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/deploy-rendering-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {renderVideo} from '@revideo/renderer';\nimport {v4 as uuidv4} from 'uuid';\nimport * as express from 'express';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst app = express();\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.status(200).send(`Hello World!`);\n});\n\napp.post('/render', async (req, res) => {\n  try {\n    const {variables} = req.body;\n    const jobId = uuidv4();\n\n    console.log('Rendering video...');\n    await renderVideo({\n      projectFile: './src/project.ts',\n      variables,\n      settings: {outFile: `${jobId}.mp4`, logProgress: true},\n    });\n    console.log('Finished rendering');\n\n    const outputFilePath = path.join(process.cwd(), `./output/${jobId}.mp4`);\n\n    if (fs.existsSync(outputFilePath)) {\n      res.sendFile(outputFilePath); // alternatively (and recommended), upload file to a bucket\n    } else {\n      res.status(500).send('Rendered video not found');\n    }\n  } catch (err) {\n    console.error('Error rendering video:', err);\n    res.status(500).send('Error rendering video');\n  }\n});\n\nconst port = parseInt(process.env.PORT) || 8000;\napp.listen(port, () => {\n  console.log(`listening on port ${port}`);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Contrasting Yielded Promises and Frame Generation in Revideo (TSX)\nDESCRIPTION: Illustrates the difference between yielding a promise (like `view.add` with an image) which awaits the operation without rendering a frame immediately, and yielding multiple empty values (using a loop or `waitFor`) which explicitly generates multiple frames over time.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<Img src={'img.png'} />); // yielded promise, we await it and dont render a frame.\n\n// we yield 30 empty values, corresponding to 30 frames (or 1 second of video in case of 30fps). This is the same as calling yield* waitFor(1);\nfor (let i = 0; i < 30; i++) {\n  yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Revideo Project with Multiple Scenes\nDESCRIPTION: This code demonstrates how to define a Revideo project by importing scenes and configuring project variables. It shows how to organize multiple scenes that will play sequentially.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\nimport example2 from './scenes/example2?scene';\n\nexport default makeProject({\n  scenes: [example, example2],\n  variables: {\n    video: 'https://revideo-example-assets.s3.amazonaws.com/beach.mp4',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Animation Sequence in a Revideo Scene (TSX)\nDESCRIPTION: Provides a practical TSX example of a Revideo scene using a generator function. It demonstrates adding a Circle, animating its position using `yield*` with a timing function, removing the element, and pausing execution with `yield* waitFor`. This illustrates translating sequential animation steps into Revideo code.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Circle, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const circleRef = createRef<Circle>();\n\n  // At first, a red circle should appear in the center of my video\n  yield view.add(<Circle fill={'red'} size={100} ref={circleRef} />);\n\n  // The circle should move to the right by 200 pixels within two seconds\n  yield* circleRef().position.x(200, 2);\n\n  // Then, the circle disappears from the video\n  circleRef().remove();\n\n  // Afterwards, nothing happens for one second\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 2D Scene in Motion Canvas\nDESCRIPTION: This code demonstrates how to create a basic 2D scene in Motion Canvas using the makeScene2D function. It sets up a generator function for animation flow.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@revideo/2d';\n\nexport default makeScene2D(function* (view) {\n  // animation\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Rectangles with Motion Canvas\nDESCRIPTION: Creates and animates multiple rectangles using range and map functions, demonstrating how to manage multiple objects in a Motion Canvas scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@revideo/2d';\nimport {all, waitFor, makeRef, range} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rects: Rect[] = [];\n\n  // Create some rects\n  view.add(\n    range(5).map(i => (\n      <Rect\n        ref={makeRef(rects, i)}\n        width={100}\n        height={100}\n        x={-250 + 125 * i}\n        fill=\"#88C0D0\"\n        radius={10}\n      />\n    )),\n  );\n\n  yield* waitFor(1);\n\n  // Animate them\n  yield* all(\n    ...rects.map(rect => rect.position.y(100, 1).to(-100, 2).to(0, 1)),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Code in ReVideo\nDESCRIPTION: Demonstrates how to create a basic Code component with a simple string value. This is the most straightforward way to display code in ReVideo.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@revideo/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    // prettier-ignore\n    <Code\n      fontSize={28}\n      code={'const number = 7;'}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Node References Stored in `createRefMap` (TSX)\nDESCRIPTION: Demonstrates how to retrieve and use the node instances stored via `createRefMap`. The references are accessed using the same keys used for assignment (e.g., `labels.a`), and invoking the reference function (`labels.a()`) returns the node instance for animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nyield * labels.a().text('A changes', 0.3);\nyield * labels.b().text('B changes', 0.3);\nyield * labels.c().text('C changes', 0.3);\n```\n\n----------------------------------------\n\nTITLE: Creating a Video Scene with tsx in Revideo\nDESCRIPTION: This snippet shows how to create a scene file that defines a video element. It imports necessary components, creates a scene with makeScene2D, and adds a video that plays for 10 seconds.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const videoFile = useScene().variables.get(\n    'video',\n    'https://revideo-example-assets.s3.amazonaws.com/stars.mp4',\n  )();\n\n  yield view.add(<Video src={videoFile} size={['100%', '100%']} play={true} />);\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Frame Rendering with Different Yield Statements in Revideo\nDESCRIPTION: Illustrates how yield statements affect frame rendering, showing a scenario with a yielded promise for adding a view and a loop that yields 30 empty values to create 30 frames of animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/understanding-scene-flow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(); // yielded promise, we await it and dont render a frame.\n\n// we yield 30 empty values, corresponding to 30 frames (or 1 second of video in case of 30fps). This is the same as calling yield* waitFor(1);\nfor (let i = 0; i < 30; i++) {\n  yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Object Property Reference with makeRef() in Motion Canvas\nDESCRIPTION: Simplified version of assigning a node reference to an object property using the makeRef() function, which handles the callback creation automatically.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef} from '@revideo/core';\n\n// ...\n\nconst circle = {instance: null as Circle};\nview.add(\n  <Circle ref={makeRef(circle, 'instance')} />,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Videos with renderVideo Function in Node.js (TSX)\nDESCRIPTION: This code demonstrates how to use the renderVideo function within a Node.js process, providing an example of rendering a video with various customizable settings such as workers, output file, and rendering range. The snippet also illustrates how to pass a callback for progress logging and how to configure FFmpeg and Puppeteer integration. Dependencies include Node.js, renderVideo library, FFmpeg, and Puppeteer, with key inputs being the projectFile path, variable overrides, and RenderSettings object. The progressCallback parameter allows for real-time progress updates per worker; the output is a string path to the final video file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/renderer/renderVideo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nfunction logProgressToConsole(id: number, progress: number) {\n  console.log(`[${id}] Progress: ${(progress * 100).toFixed(1)}%`);\n}\n\nrenderVideo({\n  projectFile: './src/project.ts',\n  variables: {color: 'white'},\n  settings: {\n    outFile: 'video.mp4',\n    workers: 1,\n    range: [1, 3],\n    dimensions: [1080, 1792],\n    logProgress: true,\n    ffmpeg: {\n      ffmpegLogLevel: 'error',\n      ffmpegPath: 'ffmpeg',\n    },\n    puppeteer: {\n      args: ['--no-sandbox'],\n    }\n    progressCallback: logProgressToConsole\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Signal in TypeScript\nDESCRIPTION: Demonstrates how to create a basic signal using createSignal() function for primitive types.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createSignal} from '@revideo/core';\n\nconst signal = createSignal(0);\n```\n\n----------------------------------------\n\nTITLE: Animating a Rectangle with Text using Revideo 2D in TypeScript\nDESCRIPTION: This TypeScript (TSX) code defines a Revideo 2D scene using `makeScene2D`. It creates a blue rectangle with white text inside, references the rectangle using `createRef`, and then animates it. The animation sequence includes waiting, moving the rectangle diagonally, moving it back to the center, scaling it up, and finally increasing its corner radius to make it appear circular. It utilizes `waitFor` for pauses and `all` to run position changes concurrently.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/moving-objects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {Rect, Txt, makeScene2D} from '@revideo/2d';\nimport {all, waitFor, createRef, easeInBounce, easeInExpo} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rectRef = createRef<Rect>();\n\n  yield view.add(\n    <Rect fill={'blue'} size={[100, 100]} ref={rectRef}>\n      <Txt fontSize={30} fontFamily={'Sans-Serif'} fill={'white'}>\n        Hi!\n      </Txt>\n    </Rect>,\n  );\n\n  yield* waitFor(0.5); // do nothing for 0.5s\n  yield* all(rectRef().position.x(200, 1), rectRef().position.y(50, 1)); // move the rectangle to [200, 50] in 1s\n  yield* all(rectRef().position.x(0, 2), rectRef().position.y(0, 2)); // move the rectangle to [0,0] (center) in 2s\n\n  yield* rectRef().scale(2, 1); // scale the rectangle by 2 in 1s\n  yield* rectRef().radius(100, 1); // increase the radius to 100 in 1s\n  yield* waitFor(1); // do nothing for 1s\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Simplified Property Tweening\nDESCRIPTION: Shows a simplified way to tween a circle's color using the SignalTween signature, which automatically handles interpolation from the current value to the specified new value.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().color('#e13238', 2);\n```\n\n----------------------------------------\n\nTITLE: Animating Logo with References and Chains\nDESCRIPTION: Code snippet showing how to animate an image using references, chains, and the all function in Revideo.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Img\n    width={'1%'}\n    ref={logoRef}\n    src={\n      'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n    }\n  />,\n);\n\nyield *\n  chain(\n    all(logoRef().scale(40, 2), logoRef().rotation(360, 2)),\n    logoRef().scale(60, 1),\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-process Video Rendering with Express in TypeScript\nDESCRIPTION: This code snippet demonstrates a simple Express server implementation for rendering videos using Revideo. It includes endpoints for a health check and video rendering, handles file output, and provides basic error handling. The server uses the renderVideo function from Revideo to process video rendering requests.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/deploy-rendering-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express();\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.status(200).send(`Hello World!`);\n});\n\napp.post('/render', async (req, res) => {\n  try {\n    const {variables} = req.body;\n    const jobId = uuidv4();\n\n    console.log('Rendering video...');\n    await renderVideo({\n      projectFile: './src/project.ts',\n      variables,\n      settings: {outFile: `${jobId}.mp4`, logProgress: true},\n    });\n    console.log('Finished rendering');\n\n    const outputFilePath = path.join(process.cwd(), `./output/${jobId}.mp4`);\n\n    if (fs.existsSync(outputFilePath)) {\n      res.sendFile(outputFilePath); // alternatively (and recommended), upload file to a bucket\n    } else {\n      res.status(500).send('Rendered video not found');\n    }\n  } catch (err) {\n    console.error('Error rendering video:', err);\n    res.status(500).send('Error rendering video');\n  }\n});\n\nconst port = parseInt(process.env.PORT) || 8000;\napp.listen(port, () => {\n  console.log(`listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Revideo's Frame Rendering Logic (Pseudocode)\nDESCRIPTION: Presents pseudocode demonstrating how Revideo processes yielded values from a scene generator. It shows that frames are rendered only when the yielded value is falsy; promises are awaited, and other truthy values are generally ignored (triggering a warning).\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nlet result = scene.next();\n\n// we don't draw a frame while the yield is not empty\nwhile (result.value) {\n  // promises get awaited\n  if (isPromise(result.value)) {\n    result = await result.value;\n\n    // the yielded value should be a promise; you shouldn't do something like `yield 5;` inside your scene\n  } else {\n    console.warn('Invalid value yielded by the scene.');\n  }\n\n  result = scene.next();\n}\n\n// when the result is empty (while loop passed), we render a frame\ndrawFrame();\n```\n\n----------------------------------------\n\nTITLE: Implementing Three.js Scene with Revideo Components\nDESCRIPTION: A complete implementation showing how to create 3D animations using Three.js integrated with Revideo. The code demonstrates scene setup, camera configuration, mesh creation, and animation sequences using tweening. It includes both the main scene setup and a helper function for adding rotating cubes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/3d-animations-with-threejs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Three} from '../components/Three';\nimport {makeScene2D, Txt} from '@revideo/2d';\nimport {\n  tween,\n  waitFor,\n  delay,\n  createRef,\n  all,\n  chain,\n  linear,\n} from '@revideo/core';\nimport * as THREE from 'three';\n\nfunction setup3DScene() {\n  const threeScene = new THREE.Scene();\n\n  const geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);\n  const material = new THREE.MeshNormalMaterial();\n\n  const mesh = new THREE.Mesh(geometry, material);\n  threeScene.add(mesh);\n\n  const camera = new THREE.PerspectiveCamera(90);\n\n  mesh.position.set(0, 0, 0);\n  mesh.scale.set(1, 1, 1);\n  camera.rotation.set(0, 0, 0);\n  camera.position.set(0, 0, 0.5);\n\n  return {threeScene, camera, mesh};\n}\n\nexport default makeScene2D(function* (view) {\n  const {threeScene, camera, mesh} = setup3DScene();\n\n  const threeRef = createRef<Three>();\n  const txtRef = createRef<Txt>();\n\n  yield view.add(\n    <>\n      <Three\n        width={1920}\n        height={1080}\n        camera={camera}\n        scene={threeScene}\n        opacity={0}\n        fontWeight={900}\n        ref={threeRef}\n      />\n    </>,\n  );\n\n  yield view.add(\n    <Txt fill={'black'} fontFamily={'Lexend'} ref={txtRef} fontSize={80} />,\n  );\n\n  yield* chain(\n    txtRef().text('Revideo x 3D with Three.js', 1),\n    all(txtRef().position.y(-300, 1), delay(0.5, threeRef().opacity(1, 0.5))),\n  );\n\n  yield tween(4, value => {\n    mesh.rotation.set(0, linear(value, 0, 2 * 3.14), 0);\n  });\n\n  yield* waitFor(2);\n\n  yield addRotatingCube(threeRef().scene(), 0.1, 0.3, -0.2, 0.1);\n  yield addRotatingCube(threeRef().scene(), 0.1, -0.3, -0.2, 0.1);\n\n  yield* waitFor(2);\n});\n\nfunction* addRotatingCube(\n  threeScene: THREE.Scene,\n  size: number,\n  x: number,\n  y: number,\n  z: number,\n) {\n  const geometry = new THREE.BoxGeometry(size, size, size);\n  const material = new THREE.MeshNormalMaterial();\n  const mesh = new THREE.Mesh(geometry, material);\n\n  mesh.position.set(x, y, z);\n  mesh.scale.set(1, 1, 1);\n\n  threeScene.add(mesh);\n\n  yield* tween(4, value => {\n    mesh.rotation.set(0, linear(value, 0, 2 * 3.14), 0);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Scene Hierarchy in Motion Canvas using JSX\nDESCRIPTION: This example demonstrates how to create a basic scene hierarchy with a Circle and Layout containing a Rectangle and Text node using JSX syntax.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using renderPartialVideo for Distributed Rendering in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use the `renderPartialVideo` function from `@revideo/renderer` to render a specific segment of a video. It shows importing the function, providing essential arguments like `projectFile`, `numWorkers`, `workerId`, optional `variables`, and `settings` (including dimensions, logging, FFmpeg, and Puppeteer configurations). The function returns paths to the generated partial audio and video files, intended for later combination.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/renderer/renderPartialVideo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderPartialVideo} from '@revideo/renderer';\n\nconst {audioFile, videoFile} = renderPartialVideo({\n  projectFile: './src/project.ts',\n  variables: {color: 'white'},\n  numWorkers: 10,\n  workerId: 3,\n  settings: {\n    dimensions: [1080, 1792],\n    logProgress: true,\n    fmpeg: {\n      ffmpegLogLevel: 'error',\n      ffmpegPath: 'ffmpeg',\n    },\n    puppeteer: {\n      args: ['--no-sandbox'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Tween Using easeInOutCubic Timing Function\nDESCRIPTION: Creates a tween that animates a circle's x position from -300 to 300 over 2 seconds using the easeInOutCubic timing function for a natural motion effect.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nyield *\n  tween(2, value => {\n    circle().position.x(map(-300, 300, easeInOutCubic(value)));\n  });\n```\n\n----------------------------------------\n\nTITLE: Streaming Text with Duration using .text() in Revideo (TSX)\nDESCRIPTION: This snippet demonstrates how to create a text streaming effect where the entire text appears gradually over a specified duration. It uses the `makeScene2D` function to define a scene, creates a `Txt` component referenced by `createRef`, adds it to the view, and then calls the `.text()` method on the reference, passing the text content and the duration (2 seconds) for the animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/streaming-text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  yield* textRef().text('This is a text', 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using insert, replace, and remove for Code Animation\nDESCRIPTION: Shows how to modify code at specific points using insert, replace, and remove methods, allowing for more granular control over code animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    ,\n  );\n\n  // insert code at line 2, column 0\n  yield* code().code.insert([2, 0], '  return 7;\\n', 0.6);\n\n  // replace the word \"Hello!\" with \"Goodbye!\"\n  yield* code().code.replace(word(1, 15, 6), 'Goodbye!', 0.6);\n\n  // remove line 2\n  yield* code().code.remove(lines(2), 0.6);\n\n  // animate multiple changes at the same time\n  yield* all(\n    code().code.replace(word(0, 9, 7), 'greet', 0.6),\n    code().code.replace(word(1, 15, 8), 'Hello!', 0.6),\n  );\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Using a for Loop with all() for Animation\nDESCRIPTION: Demonstrates how to create animations using a for loop to collect generator functions, then running them all at once using the all() flow generator.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst generators = [];\nfor (const rect of rects) {\n  // No yield here, just store the generators.\n  generators.push(rect.position.y(100, 1).to(-100, 2).to(0, 1));\n}\n\n// Run all of the generators.\nyield * all(...generators);\n```\n\n----------------------------------------\n\nTITLE: Populating an Array of Node References using `makeRef` (TSX)\nDESCRIPTION: Demonstrates a practical use case for `makeRef`: populating an array (`circles`) with references to multiple nodes created within a loop (`range(10).map`). `makeRef(circles, index)` assigns each new Circle instance to the corresponding index in the array.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst circles: Circle[] = [];\nview.add(\n  <Layout>\n    {range(10).map(index => (\n      // highlight-next-line\n      <Circle ref={makeRef(circles, index)} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Object Pool for Performance Optimization in Motion Canvas (TSX)\nDESCRIPTION: This snippet shows how to use an object pool to improve performance when working with a large number of reactive children. It creates a pool of circles and uses a slice of the pool based on the count signal.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/spawners.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nconst pool = range(64).map(i => (\n  <Circle x={i * 32} width={32} height={32} fill={'lightseagreen'} />\n));\n\nconst layout = createRef<Layout>();\nview.add(\n  <Layout layout ref={layout}>\n    {() => pool.slice(0, count())}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Audio with Video using FFmpeg in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the mergeAudioWithVideo function from the @revideo/ffmpeg library in TypeScript. The function takes three arguments: audioPath, videoPath, and outputPath, corresponding to the input audio file, input video file, and the destination for the merged file. The snippet shows a minimal example of usage; the function requires the @revideo/ffmpeg package as a dependency and expects file paths as string parameters. The function synchronously merges the audio and video content and saves the result as specified.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/revideo-ffmpeg/merge-audio-with-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {mergeAudioWithVideo} from '@revideo/ffmpeg';\n\nmergeAudioWithVideo('audio.wav', 'visuals.mp4', 'out.mp4');\n```\n\n----------------------------------------\n\nTITLE: Rendering Parameterized Video with TypeScript using @revideo/renderer\nDESCRIPTION: Example showing how to use the renderVideo function to generate a video with custom settings including progress logging, video dimensions, worker configuration, and FFmpeg options. The function demonstrates setting up video rendering with parameterized variables and custom progress tracking.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/renderer/renderVideo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nfunction logProgressToConsole(id: number, progress: number) {\n  console.log(`[${id}] Progress: ${(progress * 100).toFixed(1)}%`);\n}\n\nrenderVideo({\n  projectFile: './src/project.ts',\n  variables: {color: 'white'},\n  settings: {\n    outFile: 'video.mp4',\n    workers: 1,\n    range: [1, 3],\n    dimensions: [1080, 1792],\n    logProgress: true,\n    ffmpeg: {\n      ffmpegLogLevel: 'error',\n      ffmpegPath: 'ffmpeg',\n    },\n    puppeteer: {\n      args: ['--no-sandbox'],\n    }\n    progressCallback: logProgressToConsole\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Signals in TypeScript\nDESCRIPTION: Shows different ways to interact with signals: retrieving value, updating value, and creating tweens.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = signal();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsignal(3);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nyield * signal(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Signal Operations in TypeScript\nDESCRIPTION: Demonstrates the three main operations with signals: retrieving value, updating value, and creating tweens.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = signal();\nsignal(3);\nyield * signal(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Custom Transition Template in Motion Canvas\nDESCRIPTION: Provides a template for creating custom transitions using useTransition function. The template shows how to modify both current and previous scene contexts and implement proper transition flow.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/transitions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// set up the transition\nconst endTransition = useTransition(\n  currentContext => {\n    // modify the context of the current scene\n  },\n  previousContext => {\n    // modify the context of the previous scene\n  },\n);\n\n// perform animations\n\n// finish the transition\nendTransition();\n```\n\n----------------------------------------\n\nTITLE: Using for Loop and all for Parallel Animations\nDESCRIPTION: An alternative approach to animating multiple objects in parallel, using a for loop to collect generators in an array before running them with all().\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst generators = [];\nfor (const rect of rects) {\n  // No yield here, just store the generators.\n  generators.push(rect.position.y(100, 1).to(-100, 2).to(0, 1));\n}\n\n// Run all of the generators.\nyield * all(...generators);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic Generator Function Behavior in TypeScript\nDESCRIPTION: Demonstrates a simple TypeScript generator function (`example`) that yields sequential numbers. Calling `.next().value` on the generator instance retrieves the yielded values one by one, showcasing the fundamental sequential execution pattern used in Revideo scenes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = example();\n\nconsole.log(generator.next().value); // 1;\nconsole.log(generator.next().value); // 2;\nconsole.log(generator.next().value); // 3;\n```\n\n----------------------------------------\n\nTITLE: Animating Circle Size with Signals in reVideo\nDESCRIPTION: Creates an animation scene with a circle whose size changes from 50 to 200 over 2 seconds using signals. The scene includes a text display showing the current size value and demonstrates the use of createSignal for dynamic value management.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/changing-object-size-over-time-with-signals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Circle, Txt, makeScene2D} from '@revideo/2d';\nimport {createSignal} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const circleSize = createSignal(50); // initial size of 50\n\n  yield view.add(\n    <>\n      <Circle fill={'green'} size={circleSize} />\n      <Txt fontSize={40} x={-300}>\n        {() => `size: ${circleSize().toFixed(1)}`}\n      </Txt>\n    </>,\n  );\n\n  yield* circleSize(200, 2); // change size to 200 over two seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Language Highlighters in TypeScript React\nDESCRIPTION: Demonstrates how to configure different syntax highlighters for multiple programming languages in a single project. Shows creating a custom RustCode component with default highlighting.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst RustHighlighter = new LezerHighlighter(parser);\n\n// ...\n\nview.add(\n  <Code code={`console.log('Hello from JavaScript!');`} />\n);\n\nview.add(\n  <Code\n    highlighter={RustHighlighter}\n    code={`println!(\"Hello from Rust!\");`}\n  />\n);\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter, withDefaults} from '@revideo/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\nexport const RustCode = withDefaults(Code, {\n  highlighter: RustHighlighter,\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nview.add(\n  <RustCode code={`println!(\"Hello from Rust!\");`} />\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Signals in TypeScript\nDESCRIPTION: Shows how to animate a signal to create dynamic scene updates.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nyield * radius(4, 2).to(3, 2);\n```\n\n----------------------------------------\n\nTITLE: Continuing Animation During Transitions with finishScene\nDESCRIPTION: Demonstrates how to use the finishScene function to trigger a transition early while allowing animation to continue during the transition process.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/transitions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  yield* animationOne();\n  // trigger the transition early:\n  finishScene();\n  // continue animating:\n  yield* animationTwo();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Selection in TypeScript React\nDESCRIPTION: Shows how to use the selection property to visually highlight parts of the code. Demonstrates selecting multiple instances, a single line, and resetting the selection.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code ref={code} code={`function hello() {\n  console.log('Hello, world!');\n  return 'Hello';\n}`} />\n  );\n\n  // select all instances of \"hello\" (case-insensitive)\n  yield* code().selection(code().findAllRanges(/hello/gi), 0.6);\n  yield* waitFor(0.3);\n\n  // select line 1\n  yield* code().selection(lines(1), 0.6);\n  yield* waitFor(0.3);\n\n  // reset the selection\n  yield* code().selection(DEFAULT, 0.6);\n  yield* waitFor(0.3);\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Scene with createRef() in Motion Canvas\nDESCRIPTION: Example of using createRef() in a more complex scene structure with multiple nodes, maintaining both readable hierarchy and access to individual nodes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = createRef<Rect>();\nconst rectB = createRef<Rect>();\nconst circle = createRef<Circle>();\nview.add(\n  <Layout>\n    <Circle ref={circle}>\n      <Rect ref={rectA} />\n    </Circle>\n    <Rect ref={rectB} />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Spawners with Object Pooling in Revideo (TSX)\nDESCRIPTION: This snippet demonstrates using an object pool (`pool`) to improve performance when a spawner generates many nodes or updates frequently. Instead of creating new `Circle` nodes each time, the spawner function slices a pre-created array of nodes, reusing existing ones.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/spawners.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nconst pool = range(64).map(i => (\n  <Circle x={i * 32} width={32} height={32} fill={'lightseagreen'} />\n));\n\nconst layout = createRef<Layout>();\nview.add(\n  <Layout layout ref={layout}>\n    {() => pool.slice(0, count())}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using mapRefs() with Reference Map in Motion Canvas\nDESCRIPTION: Using the mapRefs() method of a reference map to perform the same animation on all nodes in the map, similar to Array.prototype.map but for references.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nyield * all(...labels.mapRefs(label => label.fill('white', 0.3)));\n```\n\n----------------------------------------\n\nTITLE: Extracting Animation Logic to Reusable Generator Functions\nDESCRIPTION: Demonstrates how to refactor animation code into reusable generator functions using yield* to delegate yielding, creating more maintainable and modular animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ThreadGenerator} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  yield* flicker(circle());\n});\n\nfunction* flicker(circle: Circle): ThreadGenerator {\n  circle.fill('red');\n  yield;\n  circle.fill('blue');\n  yield;\n  circle.fill('red');\n  yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Component Class Structure\nDESCRIPTION: Shows the basic structure of a component class extending Node with its props interface.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  // properties\n}\n\nexport class Switch extends Node {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generator Functions for Basic Yielding in TypeScript\nDESCRIPTION: Demonstrates how generator functions work in JavaScript/TypeScript by yielding multiple values that can be accessed one at a time, forming the foundation of Motion Canvas animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = example();\n\nconsole.log(generator.next().value); // 1;\nconsole.log(generator.next().value); // 2;\nconsole.log(generator.next().value); // 3;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over References in `createRefMap` using `mapRefs` (TypeScript)\nDESCRIPTION: Illustrates the use of the `mapRefs` method, available on objects created by `createRefMap`. This method allows iterating over all existing references in the map, applying a function to each (similar to `Array.prototype.map`), and potentially combining resulting operations (e.g., using `all` for parallel animations).\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nyield * all(...labels.mapRefs(label => label.fill('white', 0.3)));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Signal Computation in TypeScript\nDESCRIPTION: Illustrates how to create signals that compute their value dynamically based on other signals.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => Math.PI * radius() * radius());\n\nconsole.log(area()); // 3.141592653589793\nradius(2);\nconsole.log(area()); // 12.566370614359172\n```\n\n----------------------------------------\n\nTITLE: Animating Code Signals in TypeScript React\nDESCRIPTION: Demonstrates how to create and animate code signals using the makeScene2D function. It shows updating message and body signals with animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const message = Code.createSignal(`Hello, world!`);\n  const body = Code.createSignal(CODE`console.log('${message}');`);\n\n  view.add(\n    <Code code={body} />\n  );\n\n  yield* waitFor(0.3);\n  // prettier-ignore\n  yield* all(\n    message('Goodbye, world!', 0.6),\n    body.append(0.6)`\\n  return 7;`,\n  );\n  yield* waitFor(0.3);\n});\n```\n\n----------------------------------------\n\nTITLE: Positioning and Aligning Nodes in Motion Canvas (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create and position nodes using refs in Motion Canvas. Two Circle nodes are created: one is nested and assigned a position relative to a parent Node, and the other is positioned absolutely by setting its absolute position to match the world-space absolute position of the first. Dependencies: Motion Canvas core API, JSX/TSX support, Node and Circle components, and createRef utility. Key parameters include positions, references, and visual properties like width, height, and fill. The output is that circleB overlays circleA precisely in world space. Note: Proper absolute positioning requires distinguishing between local and world spaces even for root-level children.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/positioning.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst circleA = createRef<Node>();\nconst circleB = createRef<Node>();\n\nview.add(\n  <>\n    <Node position={[200, 100]}>\n      <Circle\n        position={[0, 100]}\n        ref={circleA}\n        width={20}\n        height={20}\n        fill={'white'}\n      />\n    </Node>\n    <Circle ref={circleB} width={10} height={10} fill={'red'} />\n  </>,\n);\n\ncircleB().absolutePosition(circleA().absolutePosition());\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Code Snippets with Template Strings\nDESCRIPTION: Demonstrates how to include JavaScript variables in code snippets using template string interpolation, allowing for dynamic code generation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nconst name = 'number';\n\nview.add(\n  ,\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Player with Remote Path\nDESCRIPTION: The snippet shows how to embed the Revideo player using a remote path after copying the build output to a public directory on a server. It requires React to render the component and the '@revideo/player-react' package.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/player-react/player.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"https://example.com/outDir\" />;\n```\n\n----------------------------------------\n\nTITLE: Using the ref Property with Callback in Motion Canvas\nDESCRIPTION: Basic usage of the 'ref' property with a callback function that provides access to the node instance after creation, allowing for reference storage and later animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet circle: Circle;\nview.add(\n  <Circle\n    ref={instance => {\n      circle = instance;\n    }}\n  />,\n);\n\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Using renderPartialVideo for Partial Rendering in TypeScript\nDESCRIPTION: This example demonstrates how to import and use the `renderPartialVideo` function from `@revideo/renderer`. It shows passing essential parameters like the project file path (`projectFile`), dynamic variables (`variables`), the total number of workers (`numWorkers`), the current worker's ID (`workerId`), and optional rendering settings (like dimensions, logging, FFmpeg, and Puppeteer options). The function returns paths to the generated partial audio and video files, which need to be concatenated separately later.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/renderer/renderPartialVideo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderPartialVideo} from '@revideo/renderer';\n\nconst {audioFile, videoFile} = renderPartialVideo({\n  projectFile: './src/project.ts',\n  variables: {color: 'white'},\n  numWorkers: 10,\n  workerId: 3,\n  settings: {\n    dimensions: [1080, 1792],\n    logProgress: true,\n    fmpeg: {\n      ffmpegLogLevel: 'error',\n      ffmpegPath: 'ffmpeg',\n    },\n    puppeteer: {\n      args: ['--no-sandbox'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with renderVideo() Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the renderVideo() function to render a video from a project file. It sets up an asynchronous function that calls renderVideo() with the project file path and optional settings, then logs the path of the rendered output file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/rendering-videos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function render() {\n  console.log('Rendering video...');\n\n  // This is the main function that renders the video\n  const file = await renderVideo({\n    projectFile: './src/project.ts',\n    settings: {logProgress: true},\n  });\n\n  console.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Creating Node Reference with `createRef` Utility (TSX)\nDESCRIPTION: Introduces the preferred `createRef()` utility function from `@revideo/core`. It creates a signal-like function (`circle`) which is passed to the `ref` prop. The actual node instance is accessed later by invoking this function (`circle()`). Requires importing `createRef`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRef} from '@revideo/core';\n\n// ...\n\nconst circle = createRef<Circle>();\nview.add(<Circle ref={circle} />);\n\nyield * circle().scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Animating Circle Size with Signals using TSX\nDESCRIPTION: This TSX snippet demonstrates creating a 2D scene using `makeScene2D`. It initializes a signal `circleSize` with a value of 50 using `createSignal`. Although the view addition block (`<></>`) is empty in this example, it subsequently animates the `circleSize` signal to a value of 200 over a duration of 2 seconds using `yield* circleSize(200, 2);`. This pattern is used for time-based animations of properties.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/changing-object-size-over-time-with-signals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const circleSize = createSignal(50); // initial size of 50\n\n  yield view.add(\n    <>\n      </>,\n  );\n\n  yield* circleSize(200, 2); // change size to 200 over two seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Transition Template in Motion Canvas\nDESCRIPTION: Basic template for creating a custom transition using the useTransition function, which allows modification of both current and previous scene contexts.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/transitions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// set up the transition\nconst endTransition = useTransition(\n  currentContext => {\n    // modify the context of the current scene\n  },\n  previousContext => {\n    // modify the context of the previous scene\n  },\n);\n\n// perform animations\n\n// finish the transition\nendTransition();\n```\n\n----------------------------------------\n\nTITLE: Embedding Revideo Player with Custom Path\nDESCRIPTION: React code snippet demonstrating how to embed the Revideo Player component with a custom path to the built project files on a web server.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"https://example.com/outDir/\" />;\n```\n\n----------------------------------------\n\nTITLE: Defining Project Variables in HTML\nDESCRIPTION: Shows how to pass project variables to the revideo-player component as a stringified JSON object. This approach allows setting variables directly in HTML markup.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/project-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<revideo-player\n  src=\"/path/to/project.js\"\n  variables='{\"circleFill\":\"red\"}'\n></revideo-player>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Generator Functions in Revideo Scene (TSX)\nDESCRIPTION: This snippet demonstrates how to use custom generator functions to separate different parts of a scene, improving code organization.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield addText(view, 'Hello World!');\n\n  yield* waitFor(5);\n});\n\nfunction* addText(view: View2D, displayText: string) {\n  yield view.add(<Txt fill=\"red\" y={300} text={displayText} />);\n\n  yield* waitFor(5);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Duration with useDuration\nDESCRIPTION: Shows how to use the useDuration function to retrieve the duration of an event and apply it to an animation, allowing for dynamic timing control.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/time-events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().scale(2, useDuration('event'));\n```\n\n----------------------------------------\n\nTITLE: Using createRef() for Node References in Motion Canvas\nDESCRIPTION: Using the createRef() function to create a reference to a node, which returns a signal-like function that can be used to access the node instance.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRef} from '@revideo/core';\n\n// ...\n\nconst circle = createRef<Circle>();\nview.add(<Circle ref={circle} />);\n\nyield * circle().scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Tweening Color Using Color.lerp\nDESCRIPTION: Animates a circle's fill color from yellow to red over 2 seconds using Color.lerp for interpolation between color values and easeInOutCubic for timing.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// import { Color } from \"@revideo/core\";\nyield *\n  tween(2, value => {\n    circle().fill(\n      Color.lerp(\n        new Color('#e6a700'),\n        new Color('#e13238'),\n        easeInOutCubic(value),\n      ),\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Assigning Node Reference to Object Property via `ref` Callback (TSX)\nDESCRIPTION: Illustrates using the raw `ref` callback to assign the created node instance to a specific property (`instance`) of an external object (`circle`). This pattern is common when grouping related refs or managing refs within components.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = {instance: null as Circle};\nview.add(\n  <Circle\n    // highlight-start\n    ref={instance => {\n      circle.instance = instance;\n    }}\n    // highlight-end\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Word-by-Word with Custom Timing in Revideo (TSX)\nDESCRIPTION: This snippet illustrates how to achieve word-by-word text streaming with precise control over the timing of each word's appearance, useful for captions or timed effects. It defines an array of words and corresponding appearance delays. Inside a loop, it adds each word (wrapped in its own `<Txt>` tag for spacing) to the main `Txt` component using the `.add()` method and then pauses execution for the specified duration using `yield* waitFor()` before proceeding to the next word.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/streaming-text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  const words = ['This', 'is', 'a', 'text'];\n  const secondsToAppear = [0.3, 0.6, 0.4, 0.2, 0.5];\n\n  for (let i = 0; i < words.length; i++) {\n    textRef().add(<Txt>{words[i]} </Txt>);\n    yield* waitFor(secondsToAppear[i]);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Simple for Loop for Sequential Animation\nDESCRIPTION: Shows how to animate objects sequentially using a basic for loop, yielding each animation and then waiting for a fixed duration to complete the sequence.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfor (const rect of rects) {\n  // Note the absence of a * after this yield\n  yield rect.position.y(100, 1).to(-100, 2).to(0, 1);\n}\n\n// Wait for the duration of the above generators\nyield * waitFor(4);\n```\n\n----------------------------------------\n\nTITLE: Querying the Scene Hierarchy in Motion Canvas\nDESCRIPTION: A complete scene example demonstrating how to query the hierarchy to find specific nodes (in this case, all text nodes) and animate their properties. Uses the findAll method with is() helper function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Txt, Circle, Rect, is} from '@revideo/2d';\nimport {all} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Layout layout gap={20} alignItems={'center'}>\n      <Txt fill={'white'}>Example</Txt>\n      <Rect fill={'#f3303f'} padding={20} gap={20}>\n        <Txt fill={'white'}>42</Txt>\n        <Circle size={60} fill={'#FFC66D'} />\n        <Txt fill={'white'}>!!!</Txt>\n      </Rect>\n    </Layout>,\n  );\n\n  const texts = view.findAll(is(Txt));\n\n  yield* all(...texts.map(text => text.fill('#FFC66D', 1).back(1)));\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Variables with useScene Function in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to access scene variables within a Motion Canvas scene using the useScene function. It retrieves the circleFill variable, providing a default value of 'blue' if not previously set. This approach ensures variables are dynamically updated throughout the animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/project-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circleFill = useScene().variables.get('circleFill', 'blue');\n```\n\n----------------------------------------\n\nTITLE: Basic Revideo Scene with Image Display\nDESCRIPTION: Demonstrates a minimal Revideo scene that displays an image for 5 seconds using makeScene2D and generator functions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, makeScene2D, View2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Using makeRefs() for Type Inference in Motion Canvas\nDESCRIPTION: Using the makeRefs() function to eliminate type redundancy by extracting the type from a component declaration and creating an object that matches it.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef, makeRefs} from '@revideo/core';\n\n// ...\n\nfunction Label({\n  refs,\n  children,\n}: {\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\nconst label = makeRefs<typeof Label>();\nview.add(<Label refs={label}>HELLO</Label>);\n```\n\n----------------------------------------\n\nTITLE: Signal-based Code Animation\nDESCRIPTION: Example demonstrating code animation using signals and the CODE tag function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, CODE} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    <Code\n      fontSize={28}\n      code={CODE`const ${nameSignal} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: JSX vs Non-JSX Scene Creation Comparison in Motion Canvas\nDESCRIPTION: This shows a comparison between using JSX syntax and direct node instantiation to create the same scene hierarchy, demonstrating the more readable nature of JSX.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// JSX\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// No JSX\nview.add([\n  new Circle({}),\n  new Layout({\n    children: [\n      // highlight-start\n      new Rect({}),\n      new Txt({text: 'Hi'}),\n    ],\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Restoring Node State with Custom Timing Function\nDESCRIPTION: Shows how to restore a node to a saved state using a custom timing function (linear) instead of the default easing function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().restore(1, linear);\n```\n\n----------------------------------------\n\nTITLE: Optimized Subtitle Implementation in Revideo Using Node Isolation\nDESCRIPTION: This improved version separates the text container from the video element, preventing the video from being reloaded when subtitle text changes. This technique significantly improves performance by isolating frequently changing nodes from static content.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/performance/node-parent-reloading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, Video, Layout, makeScene2D} from '@revideo/2d';\nimport {useScene, waitFor, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textContainer = createRef<Layout>();\n  const words = [\n    'Here',\n    'are',\n    'some',\n    'subtitles',\n    'added',\n    'to',\n    'the',\n    'video',\n  ];\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/beach-3.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n      <Layout size={['100%', '100%']} ref={textContainer} />\n    </>,\n  );\n\n  for (const w of words) {\n    const textRef = createRef<Txt>();\n    yield textContainer().add(\n      <Txt\n        fontFamily={'Sans-Serif'}\n        fill={'white'}\n        fontSize={40}\n        ref={textRef}\n        text={w}\n      />,\n    );\n    yield* waitFor(0.3);\n    textRef().remove();\n  }\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Custom Component View in Motion Canvas\nDESCRIPTION: Shows how to add elements to the view of a custom component using this.add() method.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    // ...\n    this.add(\n      <Rect>\n        <Circle />\n      </Rect>,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Method in Custom Component for Motion Canvas\nDESCRIPTION: Demonstrates how to implement a method for animating a custom component, using a generator function and tween animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  // ...\n  public *toggle(duration: number) {\n    yield* all(\n      tween(duration, value => {\n        // ...\n      }),\n      tween(duration, value => {\n        // ...\n      }),\n    );\n    this.isOn = !this.isOn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Property Definitions with Decorators\nDESCRIPTION: Illustrates how to define component properties using @initial and @signal decorators with proper typing.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  @initial(false)\n  @signal()\n  public declare readonly initialState: SimpleSignal<boolean, this>;\n\n  @initial('#68ABDF')\n  @colorSignal()\n  public declare readonly accent: ColorSignal<this>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Children with Spawner in Motion Canvas (TSX)\nDESCRIPTION: This snippet shows how to create a reactive layout using a spawner function. The number of circles will update when the count signal changes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/spawners.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Animating a Rectangle's Position, Scale, and Radius using Revideo in TypeScript\nDESCRIPTION: This snippet demonstrates creating a 2D scene using `makeScene2D` from `@revideo/2d`. It initializes a blue `Rect` containing white `Txt`, obtains a reference using `createRef`, and then animates the rectangle's position, scale, and corner radius over time. The `yield*` keyword is used with `waitFor` for pauses and `all` for running animations concurrently. Specific easing functions like `easeInBounce` and `easeInExpo` are imported but not used in this example.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/moving-objects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Rect, Txt, makeScene2D} from '@revideo/2d';\nimport {all, waitFor, createRef, easeInBounce, easeInExpo} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rectRef = createRef<Rect>();\n\n  yield view.add(\n    <Rect fill={'blue'} size={[100, 100]} ref={rectRef}>\n      <Txt fontSize={30} fontFamily={'Sans-Serif'} fill={'white'}>\n        Hi!\n      </Txt>\n    </Rect>,\n  );\n\n  yield* waitFor(0.5); // do nothing for 0.5s\n  yield* all(rectRef().position.x(200, 1), rectRef().position.y(50, 1)); // move the rectangle to [200, 50] in 1s\n  yield* all(rectRef().position.x(0, 2), rectRef().position.y(0, 2)); // move the rectangle to [0,0] (center) in 2s\n\n  yield* rectRef().scale(2, 1); // scale the rectangle by 2 in 1s\n  yield* rectRef().radius(100, 1); // increase the radius to 100 in 1s\n  yield* waitFor(1); // do nothing for 1s\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Node Reference in Variable (TSX)\nDESCRIPTION: Demonstrates the basic approach of creating a JSX node (Circle), assigning it to a variable (`circle`), and then adding that variable to the view. This allows the stored reference to be used later for operations like animation (e.g., `circle.scale`).\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\nview.add(circle);\n\n// we can now animate our circle:\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil for Event-Based Timing\nDESCRIPTION: Shows how to use the waitUntil function to create adjustable timing events that can be modified through the editor interface.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/time-events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitUntil('event'); // wait for an event called \"event\"\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Multiple Animation Approaches in Motion Canvas\nDESCRIPTION: A complete scene example showing how to create and animate multiple rectangle objects. The scene demonstrates creating references, adding objects to the view, and animating their positions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@revideo/2d';\nimport {all, waitFor, makeRef, range} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rects: Rect[] = [];\n\n  // Create some rects\n  view.add(\n    range(5).map(i => (\n      <Rect\n        ref={makeRef(rects, i)}\n        width={100}\n        height={100}\n        x={-250 + 125 * i}\n        fill=\"#88C0D0\"\n        radius={10}\n      />\n    )),\n  );\n\n  yield* waitFor(1);\n\n  // Animate them\n  yield* all(\n    ...rects.map(rect => rect.position.y(100, 1).to(-100, 2).to(0, 1)),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using the is() Helper Function to Find Nodes by Type\nDESCRIPTION: Example showing how to use Motion Canvas's is() utility function to create a predicate that checks for nodes of a specific type, which is cleaner than using instanceof.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {is} from '@revideo/2d';\n// ...\nconst texts = view.findAll(is(Txt));\n```\n\n----------------------------------------\n\nTITLE: Color Animation Using Tween Function\nDESCRIPTION: Demonstrates animating a circle's color from yellow to red over 2 seconds using the tween function with Color.lerp for interpolation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nyield *\n  tween(2, value => {\n    circle().color(\n      Color.lerp(\n        new Color('#e6a700'),\n        new Color('#e13238'),\n        easeInOutCubic(value),\n      ),\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Applying Filters with Property Method in Motion Canvas\nDESCRIPTION: This snippet demonstrates how to use the `filters` property in Motion Canvas to apply blur effects to a node. It utilizes the `makeScene2D` function to create a scene and modify an image by accessing its `filters` property. The snippet requires the '@revideo/2d' and '@revideo/core' libraries.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/filters-and-effects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// snippet Filters Property\nimport {Img, makeScene2D} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  view.fill('#141414');\n\n  const iconRef = createRef<Img>();\n  yield view.add(<Img src={'/img/logo_dark.svg'} size={200} ref={iconRef} />);\n  // Modification happens by accessing the `filters` property.\n  // Individual filters don't need to be initialized. If a filter you set doesn't\n  // exists, it will be automatically created and added to the list of filters.\n  // If you have multiple filters of the same type, this will only\n  // modify the first instance (you can use the array method for more control).\n  yield* iconRef().filters.blur(10, 1);\n  yield* iconRef().filters.blur(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor in Custom Component for Motion Canvas\nDESCRIPTION: Demonstrates how to implement a constructor in a custom component, including passing props to the superclass.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    super({\n      // If you wanted to ensure that layout was always\n      // true for this component, you could add it here\n      // as such:\n      // layout: true\n      ...props,\n    });\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Slide Transition Implementation in Motion Canvas\nDESCRIPTION: Complete implementation of a custom slide transition function that animates the movement between scenes using vectors and context manipulation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/transitions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function* slideTransition(\n  direction: Direction = Direction.Top,\n  duration = 0.6,\n): ThreadGenerator {\n  const size = useScene().getSize();\n  const position = size.getOriginOffset(direction).scale(2);\n  const previousPosition = Vector2.createSignal();\n  const currentPosition = Vector2.createSignal(position);\n\n  // set up the transition\n  const endTransition = useTransition(\n    // modify the context of the current scene\n    ctx => ctx.translate(currentPosition.x(), currentPosition.y()),\n    // modify the context of the previous scene\n    ctx => ctx.translate(previousPosition.x(), previousPosition.y()),\n  );\n\n  // perform animations\n  yield* all(\n    previousPosition(position.scale(-1), duration),\n    currentPosition(Vector2.zero, duration),\n  );\n\n  // finish the transition\n  endTransition();\n}\n```\n\n----------------------------------------\n\nTITLE: Clean Node Structure without Variables in Motion Canvas\nDESCRIPTION: Cleaner approach to building a scene structure without storing references in variables, making the hierarchy more readable but losing direct access to the nodes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Layout>\n    <Circle>\n      <Rect />\n    </Circle>\n    <Rect />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Signal in TypeScript\nDESCRIPTION: Shows how to create a signal for complex types using static createSignal() method.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Vector2} from '@revideo/core';\n\nconst signal = Vector2.createSignal(Vector2.up);\n```\n\n----------------------------------------\n\nTITLE: Color Interpolation Tweening\nDESCRIPTION: Shows how to animate color transitions using Color.lerp with easing functions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/tweening.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield * tween(2, value => {\n  circle().fill(\n    Color.lerp(\n      new Color('#e6a700'),\n      new Color('#e13238'),\n      easeInOutCubic(value),\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Animated Curved Path Using Vector2.arcLerp\nDESCRIPTION: Creates an animation where a circle follows a curved path between two points over 2 seconds, using the Vector2.arcLerp method for arc-based interpolation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nyield *\n  tween(2, value => {\n    circle().position(\n      // highlight-next-line\n      Vector2.arcLerp(\n        new Vector2(-300, 200),\n        new Vector2(300, -200),\n        easeInOutCubic(value),\n      ),\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Inverting Fragment Shader in GLSL\nDESCRIPTION: A simple GLSL fragment shader that inverts the colors of a node by sampling the source texture and subtracting RGB values from 1.0.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/shaders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision highp float;\n\n#include \"@revideo/core/shaders/common.glsl\"\n\nvoid main() {\n    outColor = texture(sourceTexture, sourceUV);\n    outColor.rgb = 1.0 - outColor.rgb;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Nodes in Motion Canvas (TSX)\nDESCRIPTION: This snippet demonstrates how to apply filters to nodes in Motion Canvas using the 'filters' property. It shows two methods: declaring the filters array directly and using the 'filters' property to configure individual filters.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/filters-and-effects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  view.fill('#141414');\n\n  const iconRef = createRef\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Node References with `createRef` (TSX)\nDESCRIPTION: Applies the `createRef` approach to the more complex nested scene. Separate refs (`rectA`, `rectB`, `circle`) are created using `createRef` and assigned within the JSX structure, providing access to individual nodes while maintaining readability.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = createRef<Rect>();\nconst rectB = createRef<Rect>();\nconst circle = createRef<Circle>();\nview.add(\n  <Layout>\n    <Circle ref={circle}>\n      <Rect ref={rectA} />\n    </Circle>\n    <Rect ref={rectB} />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Methods\nDESCRIPTION: Shows how to implement animation methods using generators and tweens for component interactions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  // ...\n  public *toggle(duration: number) {\n    yield* all(\n      tween(duration, value => {\n        // ...\n      }),\n      tween(duration, value => {\n        // ...\n      }),\n    );\n    this.isOn = !this.isOn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Node States\nDESCRIPTION: Demonstrates saving a node's state, animating it, and then restoring it to the saved state with a timed transition, which is useful for creating complex animations that return to previous states.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\ncircle().save();\nyield * circle().position(new Vector2(300, -200), 2);\n// highlight-next-line\nyield * circle().restore(1);\n```\n\n----------------------------------------\n\nTITLE: Nested Layout Structure in Motion Canvas (TSX)\nDESCRIPTION: Shows a nested layout structure where only the outermost Rect becomes the layout root, while inner components are treated as layout children.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/layouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child, NOT a layout root */}\n  <Rect layout>\n    {/* ↓ layout child */}\n    <Circle width={320} height={320} />\n  </Rect>\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Positioning Nodes with Cardinal Directions in Motion Canvas (TSX)\nDESCRIPTION: Illustrates the use of cardinal direction properties to position Rect components relative to each other, including rotation and reference handling.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/layouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rect = createRef<Rect>();\n\n  view.add(\n    <>\n      <Rect\n        ref={rect}\n        width={200}\n        height={100}\n        rotation={-10}\n        fill={'#333333'}\n      />\n      <Rect\n        size={50}\n        fill={'#e6a700'}\n        rotation={rect().rotation}\n        // Try changing \"right\" to \"top\"\n        right={rect().left}\n      />\n      <Rect\n        size={100}\n        fill={'#e13238'}\n        rotation={10}\n        bottomLeft={rect().bottomRight}\n      />\n    </>,\n  );\n\n  yield* rect().rotation(10, 1).to(-10, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scene Hierarchy with JSX\nDESCRIPTION: Demonstrates creating a simple scene hierarchy using JSX syntax with Circle, Layout, Rect and Text components.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/hierarchy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Signals with Node Properties in TSX\nDESCRIPTION: Demonstrates how to use signals with node properties and reset them to default values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst text = createRef<Txt>();\nview.add(\n  <Txt lineHeight={'150%'} ref={text}>\n    Hello world!\n  </Txt>,\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntext().lineHeight(DEFAULT);\n```\n\n----------------------------------------\n\nTITLE: Integrating Rive Animation in Revideo Scene\nDESCRIPTION: This code snippet demonstrates how to use the <Rive/> component to add a Rive animation to a Revideo scene. It imports necessary components, creates a scene, adds the Rive animation, and waits for 5 seconds.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/rive-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Rive, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Rive\n      src={'https://revideo-example-assets.s3.amazonaws.com/emoji.riv'}\n      animationId={1}\n      size={[600, 600]}\n    />,\n  );\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Reactive Children based on a Signal in Revideo (TSX)\nDESCRIPTION: This snippet demonstrates an initial, non-reactive approach where child components (Circles) are generated based on the initial value of a signal (`count`). Changing the signal's value later will not update the number of circles in the `Layout`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/spawners.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {range(count()).map(() => (\n      <Circle size={32} fill={'white'} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Project Variables in TypeScript\nDESCRIPTION: Demonstrates how to set project variables using the makeProject() function in TypeScript. This method allows integration of variables directly in the project configuration.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/project-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  scenes: [example],\n  variables: {circleFill: 'red'},\n});\n```\n\n----------------------------------------\n\nTITLE: Overlaying Transparent Video on Background Image in Revideo\nDESCRIPTION: This code snippet demonstrates how to add a transparent video overlay on top of a background image using Revideo. It imports necessary components, creates references for the video and background image, adds them to the view, and waits for the video duration before ending the scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/transparent-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Video, makeScene2D} from '@revideo/2d';\nimport {waitFor, createRef, useScene} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const avatarRef = createRef<Video>();\n  const backgroundRef = createRef<Img>();\n\n  yield view.add(\n    <>\n      <Img\n        src={'https://revideo-example-assets.s3.amazonaws.com/mountains.jpg'}\n        width={'100%'}\n        ref={backgroundRef}\n      />\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/avatar.webm'}\n        play={true}\n        height={'100%'}\n        ref={avatarRef}\n      />\n    </>,\n  );\n\n  yield* waitFor(avatarRef().getDuration());\n});\n```\n\n----------------------------------------\n\nTITLE: Yielding a Tween Animation in a Scene Generator - TypeScript\nDESCRIPTION: Shows how to yield a completed animation (tween) within a generator-based scene, causing execution to pause until the property change finishes. This pattern requires generator support for yielding animation instructions in Motion Canvas scenes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1);\n```\n\n----------------------------------------\n\nTITLE: Signal Behavior Demonstration in TypeScript\nDESCRIPTION: Demonstrates the laziness, caching, and dependency tracking aspects of signals.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => {\n  console.log('area recalculated!');\n  return Math.PI * radius() * radius();\n});\n\narea(); // area recalculated!\narea();\nradius(2);\narea(); // area recalculated!\nradius(3);\nradius(4);\narea(); // area recalculated!\n```\n\n----------------------------------------\n\nTITLE: Using Code Ranges in TypeScript React\nDESCRIPTION: Demonstrates how to use findFirstRange method to locate and replace text within a Code component. Uses createRef and makeScene2D to set up the scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code ref={code} code={`function example() {\n  console.log('Hello, world!');\n}`} />\n  );\n\n  yield* code().code.replace(\n    // find the range of \"example\" and replace it with \"greet\"\n    code().findFirstRange('example'),\n    'greet',\n    0.6,\n  );\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Default Uniforms Available in Motion Canvas Shaders\nDESCRIPTION: Lists the standard uniforms that are automatically available in all Motion Canvas shaders, including time variables, resolution, and textures.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/shaders.mdx#2025-04-22_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nin vec2 screenUV;\nin vec2 sourceUV;\nin vec2 destinationUV;\n\nout vec4 outColor;\n\nuniform float time;\nuniform float deltaTime;\nuniform float framerate;\nuniform int frame;\nuniform vec2 resolution;\nuniform sampler2D sourceTexture;\nuniform sampler2D destinationTexture;\nuniform mat4 sourceMatrix;\nuniform mat4 destinationMatrix;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Circle Animation in Motion Canvas\nDESCRIPTION: Shows how to create a simple animation where a circle flickers between red and blue colors by yielding between color changes, demonstrating the fundamental animation concept in Motion Canvas.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  circle().fill('red');\n  yield;\n  circle().fill('blue');\n  yield;\n  circle().fill('red');\n  yield;\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to renderVideo() in Re:do Video (TypeScript)\nDESCRIPTION: This snippet demonstrates how to pass variables to the renderVideo() function in Re:do Video. It shows how to specify the project file and set variables for use in the video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/parameterized-video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nrenderVideo({\n  projectFile: './src/project.ts',\n  variables: {username: 'Mike'},\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Property Tweens\nDESCRIPTION: Demonstrates how to chain multiple tweens together using the to() method, animating a circle's color from its current value to red and then to yellow.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().color('#e13238', 2).to('#e6a700', 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Reactive Children in Motion Canvas (TSX)\nDESCRIPTION: This snippet demonstrates creating a non-reactive layout with a fixed number of circles based on a signal value. The number of circles won't change if the signal changes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/spawners.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {range(count()).map(() => (\n      <Circle size={32} fill={'white'} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil with Time Events\nDESCRIPTION: Demonstrates how to use the waitUntil function to create an adjustable event that can be modified in the editor instead of hard-coding wait times.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/time-events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitUntil('event'); // wait for an event called \"event\"\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Using edit Method for Code Transitions\nDESCRIPTION: Shows how to use the edit() method with helper functions for more visual code modifications.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, replace, insert, remove} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n    />,\n  );\n\n  yield* code().code.edit(0.6)`\\\nfunction example() {\n  ${insert(`// This is a comment\n  `)}console.log(\"${replace('Hello!', 'Goodbye!')}\")\n${remove(`  return 7;\n`)}}\";\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating a Property in Sequence - Motion Canvas with TypeScript\nDESCRIPTION: Demonstrates back-to-back sequential animation of a node property (such as 'fill') by yielding separate animations. Each yield completes before the next begins, enabling stepwise transitions in scene flows.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1);\\nyield * myCircle().fill('#e13238', 1);\n```\n\n----------------------------------------\n\nTITLE: Color Inversion Shader Implementation in GLSL\nDESCRIPTION: A basic GLSL shader that inverts the colors of the rendered node using texture sampling and color manipulation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/shaders.mdx#2025-04-22_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision highp float;\n\n#include \"@revideo/core/shaders/common.glsl\"\n\nvoid main() {\n    outColor = texture(sourceTexture, sourceUV);\n    outColor.rgb = 1.0 - outColor.rgb;\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Animation with Chain\nDESCRIPTION: Demonstrates sequential animation execution using chain function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nyield * chain(displaySubtitles(), displayImages());\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Function Example in TypeScript\nDESCRIPTION: Demonstrates the fundamental behavior of generator functions by yielding sequential values and showing how they can be accessed one at a time using next().\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/understanding-scene-flow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = example();\n\nconsole.log(generator.next().value); // 1;\nconsole.log(generator.next().value); // 2;\nconsole.log(generator.next().value); // 3;\n```\n\n----------------------------------------\n\nTITLE: Using append and prepend for Code Animation\nDESCRIPTION: Demonstrates how to add code at the beginning or end of a snippet using the append and prepend methods, with both immediate and animated changes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    ,\n  );\n\n  // append immediately\n  code().code.append(`const one = 1;`);\n\n  // animate using the signal signature\n  yield* code().code.append('\\nconst two = 2;', 0.6);\n\n  // animate using the template tag signature\n  yield* code().code.append(0.6)`\nconst three = 3;`;\n\n  // prepend works analogically\n  yield* code().code.prepend('// example\\n', 0.6);\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Shader in Motion Canvas with TSX\nDESCRIPTION: Demonstrates how to import and apply a custom shader to a Circle node in Motion Canvas using the shaders property.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/shaders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    // highlight-next-line\n    shaders={myShader}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Positioning Layout Nodes with Cardinal Directions in Redotvideo (TSX)\nDESCRIPTION: This snippet showcases the use of cardinal direction properties (like `right`, `left`, `bottomLeft`, `bottomRight`) available on Layout nodes. It demonstrates positioning a yellow square relative to the left edge of a gray rectangle and a red square relative to the bottom-right corner of the same rectangle within a Redotvideo scene. It depends on `@revideo/2d` and `@revideo/core`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/layouts.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const rect = createRef<Rect>();\n\n  view.add(\n    <>\n      <Rect\n        ref={rect}\n        width={200}\n        height={100}\n        rotation={-10}\n        fill={'#333333'}\n      />\n      <Rect\n        size={50}\n        fill={'#e6a700'}\n        rotation={rect().rotation}\n        // Try changing \"right\" to \"top\"\n        right={rect().left}\n      />\n      <Rect\n        size={100}\n        fill={'#e13238'}\n        rotation={10}\n        bottomLeft={rect().bottomRight}\n      />\n    </>,\n  );\n\n  yield* rect().rotation(10, 1).to(-10, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Slide Transition in Motion Canvas\nDESCRIPTION: Shows a complete implementation of a custom slide transition function in Motion Canvas. The function uses useTransition to modify scene contexts and performs vector animations to create the sliding effect.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/transitions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function* slideTransition(\n  direction: Direction = Direction.Top,\n  duration = 0.6,\n): ThreadGenerator {\n  const size = useScene().getSize();\n  const position = size.getOriginOffset(direction).scale(2);\n  const previousPosition = Vector2.createSignal();\n  const currentPosition = Vector2.createSignal(position);\n\n  // set up the transition\n  const endTransition = useTransition(\n    // modify the context of the current scene\n    ctx => ctx.translate(currentPosition.x(), currentPosition.y()),\n    // modify the context of the previous scene\n    ctx => ctx.translate(previousPosition.x(), previousPosition.y()),\n  );\n\n  // perform animations\n  yield* all(\n    previousPosition(position.scale(-1), duration),\n    currentPosition(Vector2.zero, duration),\n  );\n\n  // finish the transition\n  endTransition();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Highlighter in ReVideo Project\nDESCRIPTION: Sets up the default code highlighter for a ReVideo project using the Lezer JavaScript parser. This configuration enables syntax highlighting for all Code components in the project.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\n\n// highlight-start\nimport {Code, LezerHighlighter} from '@revideo/2d';\nimport {parser} from '@lezer/javascript';\n\nCode.defaultHighlighter = new LezerHighlighter(parser);\n// highlight-end\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing a Node Property Value - TypeScript\nDESCRIPTION: Illustrates how to retrieve the current value of a property (here, 'fill' color) from a referenced Motion Canvas node. The function call returns the current value (e.g., a color string) synchronously. Dependency is an existing reference 'myCircle' to a visual node.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst fill = myCircle().fill(); // '#e13238'\n```\n\n----------------------------------------\n\nTITLE: Nesting Code Signals in TypeScript React\nDESCRIPTION: Shows how to nest code signals within template strings and demonstrates their reactivity after animation. Uses createRef and makeScene2D to set up the scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    <Code ref={code} />\n  );\n\n  const body = Code.createSignal(CODE`console.log('Hello!');`);\n  yield* waitFor(0.3);\n  // Notice how the CODE tag is not used here because\n  // \"append\" already supports nested signals:\n  yield* code().code.append(0.6)`\nfunction hello() {\n  ${body}\n}`;\n\n  // The \"body\" signal remains reactive after the append animation:\n  yield* body(`console.log('Goodbye!');`, 0.6);\n  yield* waitFor(0.3);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Local Fonts with @font-face\nDESCRIPTION: CSS configuration for loading both web and local fonts using @import and @font-face declarations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-font.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n\n@font-face {\n  font-family: 'Cascadia Code';\n  src:\n    local('Cascadia Code'),\n    url(public/fonts/CASCADIACODE.TTF) format('truetype');\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Node References with Variables in Motion Canvas\nDESCRIPTION: Basic approach to storing a reference to a node by assigning it to a variable before adding it to the scene. This allows the node to be animated later in the code.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\nview.add(circle);\n\n// we can now animate our circle:\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers in TypeScript using Motion Canvas\nDESCRIPTION: This snippet demonstrates how to use the useRandom() function from Motion Canvas to generate random integers. It creates a random number generator for the current scene and uses it to generate an integer between 0 and 10.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/random.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRandom} from '@revideo/core';\n\nconst random = useRandom();\nconst integer = random.nextInt(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Rendering Videos with renderVideo() Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to render videos programmatically using the renderVideo() function. It imports the function from the @revideo/renderer package, sets up a rendering configuration with a project file path and progress logging, and outputs the path to the rendered video file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/rendering-videos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nasync function render() {\n  console.log('Rendering video...');\n\n  // This is the main function that renders the video\n  const file = await renderVideo({\n    projectFile: './src/project.ts',\n    settings: {logProgress: true},\n  });\n\n  console.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Node Syntax Highlighting in Revideo (TSX)\nDESCRIPTION: This snippet shows how to set different syntax highlighters for individual Code components in Revideo. It demonstrates using the default highlighter for JavaScript and a custom Rust highlighter.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Code, LezerHighlighter} from '@revideo/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\n// ...\n\nview.add(\n  <Code\n    // this node uses the default parser\n    offsetX={-1}\n    x={-400}\n    code={`\nfunction hello() {\n  console.log('Hello!');\n}\n`}\n  />,\n);\n\nview.add(\n  <Code\n    // this node uses the Rust parser\n    highlighter={RustHighlighter}\n    offsetX={1}\n    x={400}\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Assigning Node Reference to Object Property with `makeRef` (TSX)\nDESCRIPTION: Introduces the `makeRef()` utility from `@revideo/core` as a simplification for assigning a node reference to an object's property. `makeRef(circle, 'instance')` achieves the same result as the manual callback in the previous example but with less boilerplate. Requires importing `makeRef`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef} from '@revideo/core';\n\n// ...\n\nconst circle = {instance: null as Circle};\nview.add(\n  // highlight-next-line\n  <Circle ref={makeRef(circle, 'instance')} />,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Code Animation with ReVideo\nDESCRIPTION: Demonstrates a basic code animation sequence using ReVideo's Code component with selection and code replacement animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@revideo/2d';\nimport {all, createRef, DEFAULT, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono, monospace'}\n      offsetX={-1}\n      x={-400}\n      code={'const number = 7;'}\n    />,\n  );\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code.replace(code().findFirstRange('number'), 'variable', 0.6),\n    code().code.prepend(0.6)`function example() {\\n  `,\n    code().code.append(0.6)`\\n}`,\n  );\n\n  yield* waitFor(0.6);\n  yield* code().selection(code().findFirstRange('variable'), 0.6);\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code('const number = 7;', 0.6),\n    code().selection(DEFAULT, 0.6),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Render Job via Curl\nDESCRIPTION: Example curl command to start a render job by sending a POST request to the /render endpoint. It includes variables for the video and render settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"settings\": { \"workers\": 2 }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Differentiating `yield` and `yield*` in Revideo Scenes (TSX)\nDESCRIPTION: Highlights the distinction between `yield` and `yield*`. `yield` is used for single, potentially asynchronous operations (like `view.add`) that don't inherently produce multiple frames, while `yield*` is used to delegate to another generator (like `waitFor`) that yields multiple values, corresponding to multiple frames or animation steps.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<Img src={'img.png'} />); // doesn't produce a frame\n\nyield * waitFor(1); // takes time, produces multiple frames\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Fonts in Layout Components\nDESCRIPTION: TSX code demonstrating how to apply both web-hosted and local fonts to multiple Text components within a Layout container.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} alignItems={'center'} layout>\n  <Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n  <Txt fontFamily={'Cascadia Code'}>Cascadia Code</Txt>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Code Signal Manipulation Example\nDESCRIPTION: Demonstrates using code signals for reactive code animations and nested templates.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, CODE} from '@revideo/2d';\nimport {all, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const message = Code.createSignal(`Hello, world!`);\n  const body = Code.createSignal(CODE`console.log('${message}');`);\n\n  view.add(\n    <Code\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={CODE`\\\nfunction hello() {\n  ${body}\n}`}\n    />,\n  );\n\n  yield* waitFor(0.3);\n  // prettier-ignore\n  yield* all(\n    message('Goodbye, world!', 0.6),\n    body.append(0.6)`\\n  return 7;`,\n  );\n  yield* waitFor(0.3);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Nodes from Reference Map in Motion Canvas\nDESCRIPTION: Example of retrieving and animating nodes stored in a reference map created with createRefMap(), using the same keys that were used to store them.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nyield * labels.a().text('A changes', 0.3);\nyield * labels.b().text('B changes', 0.3);\nyield * labels.c().text('C changes', 0.3);\n```\n\n----------------------------------------\n\nTITLE: Creating Signals in TypeScript\nDESCRIPTION: Demonstrates how to create signals for primitive and complex types using createSignal() function and static methods.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createSignal} from '@revideo/core';\n\nconst signal = createSignal(0);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Vector2} from '@revideo/core';\n\nconst signal = Vector2.createSignal(Vector2.up);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\n\nconst signal = circle.fill;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Animating Spawned Children in Motion Canvas (TSX)\nDESCRIPTION: This snippet demonstrates how to access and animate spawned children using the parent object's helper methods. It scales all spawned circles.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/spawners.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet spawnedCircles = layout().childrenAs<Circle>();\nyield * all(...spawnedCircles.map(circle => circle.scale(1.5, 1).to(1, 1)));\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Motion Canvas Project Configuration\nDESCRIPTION: This code snippet shows how to enable experimental features in a Motion Canvas project by setting the experimentalFeatures flag to true in the project configuration object.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/experimental.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  // highlight-next-line\n  experimentalFeatures: true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Render Request With Callback URL\nDESCRIPTION: This JSON snippet illustrates the structure of the POST request sent to the provided callback URL after rendering is complete. It contains the resultUrl of the rendered video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/platform/render-endpoint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resultUrl\": \"https://<revideo-storage-url>.com/<your-video-id>.mp4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Interpolation Function in Property Tweening\nDESCRIPTION: Demonstrates using a custom interpolation function (Vector2.arcLerp) to animate a circle's position along a curved path instead of a straight line.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nyield *\n  circle().position(\n    new Vector2(300, -200),\n    2,\n    easeInOutCubic,\n    // highlight-next-line\n    Vector2.arcLerp,\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Tweens to Animate Circle Fill Color\nDESCRIPTION: Shows how to use the fill tween function to animate a circle's color over time, demonstrating a common animation pattern in Motion Canvas.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Revideo Projects\nDESCRIPTION: This snippet shows the default Vite configuration for Revideo projects. It includes the essential Revideo plugin setup needed for the visual editor and server communication.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Code Range Helper Functions\nDESCRIPTION: Examples of using helper functions word() and lines() to create code ranges.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// a range starting at line 1, column 3,\n// spanning 3 characters:\nword(1, 3, 3);\n\n// a range starting at line 1, column 3,\n// spanning until the end of the line:\nword(1, 3);\n\n// a range containing lines from 1 to 3 (inclusive):\nlines(1, 3);\n\n// a range containing line 2\nlines(2);\n```\n\n----------------------------------------\n\nTITLE: Using makeRef() in Custom Components for Multiple References\nDESCRIPTION: Using makeRef() in a custom component to return multiple references, allowing access to different parts of a composite component for animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Label({\n  refs,\n  children,\n}: {\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\nconst label = {rect: null as Rect, text: null as Txt};\nview.add(<Label refs={label}>HELLO</Label>);\n\n// we can now animate both the Rect and the Text of our label:\nyield * label.rect.opacity(2, 0.3);\nyield * label.text.fontSize(24, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scene with Emoji Text in ReVideo\nDESCRIPTION: This TypeScript code creates a 2D scene in ReVideo that displays text with an emoji. It uses the imported fonts to ensure consistent rendering of both text and emojis.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/emojis.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Txt text={'Hello 🚀'} fontFamily={\"Lexend, 'Noto Color Emoji'\"} />,\n  );\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Node References with `createRefArray` (TSX)\nDESCRIPTION: Introduces the `createRefArray` helper function from `@revideo/core` as a more direct way to collect references created in a loop. The created array-like object (`circles`) is passed to the `ref` prop, and each referenced node is automatically appended to the collection. Requires importing `createRefArray`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefArray, range} from '@revideo/core';\n\n// ...\n\nconst circles = createRefArray<Circle>();\nview.add(\n  <Layout>\n    {range(10).map(() => (\n      <Circle ref={circles} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Syntax Highlighting in TypeScript\nDESCRIPTION: Shows how to create a custom HighlightStyle for syntax highlighting and apply it to a LezerHighlighter. Demonstrates setting colors for different code tokens.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter} from '@revideo/2d';\nimport {HighlightStyle} from '@codemirror/language';\nimport {tags} from '@lezer/highlight';\nimport {parser} from '@lezer/javascript';\n\nconst MyStyle = HighlightStyle.define([\n  {tag: tags.keyword, color: 'red'},\n  {tag: tags.function(tags.variableName), color: 'yellow'},\n  {tag: tags.number, color: 'blue'},\n  {tag: tags.string, color: 'green'},\n  // ...\n]);\n\nCode.defaultHighlighter = new LezerHighlighter(parser, MyStyle);\n```\n\n----------------------------------------\n\nTITLE: Merging Audio and Video Files with FFmpeg in TypeScript\nDESCRIPTION: Demonstrates how to use the mergeAudioWithVideo function to combine an audio file (WAV) with a video file (MP4) into a single output MP4 file. The function takes three parameters: the audio file path, video file path, and the desired output file path.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/revideo-ffmpeg/merge-audio-with-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {mergeAudioWithVideo} from '@revideo/ffmpeg';\n\nmergeAudioWithVideo('audio.wav', 'visuals.mp4', 'out.mp4');\n```\n\n----------------------------------------\n\nTITLE: Using createRefMap() for Grouped References in Motion Canvas\nDESCRIPTION: Using the createRefMap() helper function to create a map of references that can be accessed by keys, useful for organizing multiple related nodes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefMap} from '@revideo/core';\n\n// ...\n\nconst labels = createRefMap<Txt>();\nview.add(\n  <>\n    <Txt ref={labels.a}>A</Txt>\n    <Txt ref={labels.b}>B</Txt>\n    <Txt ref={labels.c}>C</Txt>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Seed for Random Number Generation in Motion Canvas\nDESCRIPTION: This snippet shows how to provide a custom seed to the useRandom() function in Motion Canvas. Using a custom seed allows for finding a specific sequence of random numbers that best suits the animation needs.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/random.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = useRandom(123);\n```\n\n----------------------------------------\n\nTITLE: Adding Variables with makeProject in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to add project variables during the initialization of a Motion Canvas project using the makeProject function. The example sets a default variable configuration for scenes, which can be accessed and modified during animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/project-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  scenes: [example],\n  variables: {circleFill: 'red'},\n});\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Expressions in Code Snippets\nDESCRIPTION: Shows how to use JavaScript expressions within template string interpolation to dynamically generate parts of the code snippet.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nconst isRed = true;\n\nview.add(\n  ,\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Reactive Children with a Spawner in Revideo (TSX)\nDESCRIPTION: This complete scene example demonstrates a spawner function in action. A `count` signal is animated, causing the spawner function to re-run and change the number of `Circle` components rendered within the `Layout` over time. It requires `@revideo/2d` and `@revideo/core` dependencies.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/spawners.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Circle} from '@revideo/2d';\nimport {createSignal, linear, range} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const count = createSignal(10);\n\n  view.add(\n    <Layout layout>\n      {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n    </Layout>,\n  );\n\n  yield* count(3, 2, linear).wait(1).back(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Code Ranges in JavaScript\nDESCRIPTION: Explains the structure of CodeRange and provides examples of creating ranges using line and column numbers. Includes examples of using helper functions 'word' and 'lines'.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// prettier-ignore\n[[startLine, startColumn], [endLine, endColumn]];\n```\n\nLANGUAGE: js\nCODE:\n```\n// prettier-ignore\n[[1, 0], [1, 3]];\n```\n\nLANGUAGE: ts\nCODE:\n```\n// a range starting at line 1, column 3,\n// spanning 3 characters:\nword(1, 3, 3);\n\n// a range starting at line 1, column 3,\n// spanning until the end of the line:\nword(1, 3);\n\n// a range containing lines from 1 to 3 (inclusive):\nlines(1, 3);\n\n// a range containing line 2\nlines(2);\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Definition for Code Highlighting\nDESCRIPTION: Shows how to create and apply custom syntax highlighting themes using HighlightStyle.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter} from '@revideo/2d';\nimport {HighlightStyle} from '@codemirror/language';\nimport {tags} from '@lezer/highlight';\nimport {parser} from '@lezer/javascript';\n\nconst MyStyle = HighlightStyle.define([\n  {tag: tags.keyword, color: 'red'},\n  {tag: tags.function(tags.variableName), color: 'yellow'},\n  {tag: tags.number, color: 'blue'},\n  {tag: tags.string, color: 'green'},\n  // ...\n]);\n\nCode.defaultHighlighter = new LezerHighlighter(parser, MyStyle);\n```\n\n----------------------------------------\n\nTITLE: Callback Response for Render Job (Error) - Bash\nDESCRIPTION: This example represents an error callback response sent to the callback URL if a video render job fails, including an error message for reviewing the cause of the failure. It requires monitoring the callback URL for updates.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST <callbackUrl> \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"jobId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"error\",\n  \"error\": \"<error message>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Using yield vs yield* in Revideo Scenes (TSX)\nDESCRIPTION: These snippets illustrate the difference between using yield and yield* when calling generator functions in Revideo scenes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nyield displaySubtitles();\n// rest of your scene code, will get displayed at the same time as subtitles\n```\n\nLANGUAGE: tsx\nCODE:\n```\nyield * displaySubtitles(); // wait for displaySubtitles to finish\n// rest of your scene code, will get displayed after subtitles\n```\n\nLANGUAGE: tsx\nCODE:\n```\nyield displaySubtitles();\nyield displayImages();\n```\n\nLANGUAGE: tsx\nCODE:\n```\nyield * all(displaySubtitles(), displayImages());\n```\n\nLANGUAGE: tsx\nCODE:\n```\nyield * displaySubtitles();\nyield * displayImages();\n```\n\nLANGUAGE: tsx\nCODE:\n```\nyield * chain(displaySubtitles(), displayImages());\n```\n\n----------------------------------------\n\nTITLE: Grouping Node References by Type using `createRefMap` (TSX)\nDESCRIPTION: Introduces `createRefMap` from `@revideo/core` for grouping multiple references, often of the same type (`Txt`), under arbitrary keys (`a`, `b`, `c`). Accessing a property on the map (`labels.a`) implicitly creates a ref, which is then assigned via the `ref` prop. Requires importing `createRefMap`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefMap} from '@revideo/core';\n\n// ...\n\nconst labels = createRefMap<Txt>();\nview.add(\n  <>\n    <Txt ref={labels.a}>A</Txt>\n    <Txt ref={labels.b}>B</Txt>\n    <Txt ref={labels.c}>C</Txt>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Code with Diffing in ReVideo\nDESCRIPTION: Shows how to animate changes to code using the diffing method, which automatically identifies and animates the differences between the old and new code snippets.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    ,\n  );\n\n  yield* code().code('const nine = 9;', 0.6).wait(0.6).back(0.6).wait(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Variables in a Scene\nDESCRIPTION: Shows how to access project variables inside a scene using the useScene() function. This example also demonstrates providing a default value ('blue') if the variable isn't defined.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/project-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circleFill = useScene().variables.get('circleFill', 'blue');\n```\n\n----------------------------------------\n\nTITLE: Initializing Layout Root in Motion Canvas (TSX)\nDESCRIPTION: Demonstrates how to set up a layout root using the 'layout' property on a Rect component, with a Circle as a child element.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/layouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child */}\n  <Circle width={320} height={320} />\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Using Local Media Files in Revideo\nDESCRIPTION: This example shows how to reference and use local media files stored in the public directory of a Revideo project. It creates a scene that plays a locally stored video at full size.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Video src={'/my-video.mp4'} size={['100%', '100%']} play={true} />,\n  );\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Animations on a Single Property - Motion Canvas with TypeScript\nDESCRIPTION: Illustrates chainable animation where a node property transitions through multiple values by chaining '.to()' calls. This facilitates compact sequential tweening within a single yield statement. Requires the property API to support chaining.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1).to('#e13238', 1);\n```\n\n----------------------------------------\n\nTITLE: Custom Timing Function in Property Tweening\nDESCRIPTION: Shows how to override the default easeInOutCubic timing function with a custom one (easeOutQuad) when tweening a circle's color.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nyield *\n  circle().color(\n    '#e13238',\n    2,\n    // highlight-next-line\n    easeOutQuad,\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating renderVideo() Function Call in Revideo 0.3.x\nDESCRIPTION: This snippet shows how renderVideo() was called in Revideo 0.3.x. It demonstrates passing arguments directly to the function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.3.x_to_0.4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst file = await renderVideo(\n  'vite.config.ts',\n  {fill: 'orange'},\n  {logProgress: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Reactive Children in Motion Canvas Scene (TSX)\nDESCRIPTION: This snippet demonstrates a complete scene setup with animated reactive children. It imports necessary components, creates a signal, and animates the count of circles over time.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/spawners.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Circle} from '@revideo/2d';\nimport {createSignal, linear, range} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const count = createSignal(10);\n\n  view.add(\n    <Layout layout>\n      {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n    </Layout>,\n  );\n\n  yield* count(3, 2, linear).wait(1).back(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Animation Example with Node Querying\nDESCRIPTION: Demonstrates creating an animation with layout components and using findAll to query and animate text nodes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/hierarchy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Txt, Circle, Rect, is} from '@revideo/2d';\nimport {all} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Layout layout gap={20} alignItems={'center'}>\n      <Txt fill={'white'}>Example</Txt>\n      <Rect fill={'#f3303f'} padding={20} gap={20}>\n        <Txt fill={'white'}>42</Txt>\n        <Circle size={60} fill={'#FFC66D'} />\n        <Txt fill={'white'}>!!!</Txt>\n      </Rect>\n    </Layout>,\n  );\n\n  const texts = view.findAll(is(Txt));\n\n  yield* all(...texts.map(text => text.fill('#FFC66D', 1).back(1)));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flexbox Layout in Motion Canvas (TSX)\nDESCRIPTION: Demonstrates the use of Flexbox properties such as direction, gap, and width to arrange Rect components within a Layout container.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/layouts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} width={960} gap={40} layout>\n  <Node opacity={0.1}>\n    <Rect height={240} fill={'#ff6470'} />\n    <Rect height={240} fill={'#ff6470'} />\n  </Node>\n  <Rect height={240} fill={'#ff6470'} />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Shader in Motion Canvas using TSX\nDESCRIPTION: Demonstrates how to import and apply a basic shader to a Circle component in Motion Canvas using the shaders property.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/shaders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    shaders={myShader}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Reference Existence in RefMap in Motion Canvas\nDESCRIPTION: Using the 'in' operator to check if a reference exists in a reference map before attempting to animate it, preventing errors from accessing undefined references.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nif ('d' in labels) {\n  yield * labels.d().text('D changes', 0.3);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Direct Children by Type\nDESCRIPTION: Example showing how to query only direct children of a node (rather than all descendants) by using the children() method with JavaScript's filter function and a predicate.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst textChildren = someParent.children().filter(is(Txt));\n```\n\n----------------------------------------\n\nTITLE: Using Player Component with Revideo 0.3.x\nDESCRIPTION: This snippet shows how to use the Player component in Revideo 0.3.x, referencing the player source from localhost:4000/player/project.js.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.3.x_to_0.4.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Player src=\"http://localhost:4000/player/project.js\" controls={true} />\n```\n\n----------------------------------------\n\nTITLE: Linear Tweening Example in Motion Canvas\nDESCRIPTION: Demonstrates basic linear tweening animation of a circle's position using the tween function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/tweening.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nyield * tween(2, value => {\n  circle().position.x(map(-300, 300, value));\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Revideo Player from Localhost in React - TSX\nDESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to import and embed the Revideo Player component, pointing the src prop to a locally served build (e.g., http://localhost:4000/player). This setup leverages the local development server started by the CLI for immediate feedback and rapid iteration. Requires the @revideo/player-react package to be installed and the development server running.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/player-react/player.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"http://localhost:4000/player\" />;\n```\n\n----------------------------------------\n\nTITLE: Using Matrices for Coordinate Transformations in Motion Canvas (TS)\nDESCRIPTION: This snippet shows how to use transformation matrices as an alternative to the helper methods for absolute positioning. It demonstrates equivalent operations using the worldToParent and localToWorld matrices to transform vectors between different coordinate spaces.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/positioning.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// getting the absolute position:\nnode.absolutePosition();\n// same as:\nVector2.zero.transformAsPoint(node.localToWorld());\n\n// setting the absolute position:\nnode.absolutePosition(vector);\n// same as:\nnode.position(vector.transformAsPoint(node.worldToParent()));\n```\n\n----------------------------------------\n\nTITLE: Animating a Node Property with a Tween - TypeScript\nDESCRIPTION: This example animates a node property (e.g., 'fill') to a new value over a specified duration (in seconds), creating a smooth transition. This assumes support for animated transitions in the Motion Canvas property API and the existence of the referenced node.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmyCircle().fill('#e6a700', 1);\n```\n\n----------------------------------------\n\nTITLE: Using makeRef() for Object Properties in Motion Canvas\nDESCRIPTION: Using the makeRef() function to assign a node reference to a property of an object, simplifying the process of storing references in custom objects.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = {instance: null as Circle};\nview.add(\n  <Circle\n    ref={instance => {\n      circle.instance = instance;\n    }}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Array.map and all() for Multiple Animations\nDESCRIPTION: Shows how to animate multiple objects by mapping an array of elements to tweens and running them all simultaneously with the all() flow generator.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/flow.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nyield *\n  all(\n    ...rects.map(rect =>\n      // No yield or anything; we return this generator and deal with it outside\n      rect.position.y(100, 1).to(-100, 2).to(0, 1),\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Custom Uniform Implementation in Motion Canvas\nDESCRIPTION: Shows how to pass custom uniforms to a shader using a configuration object with various data types including Vector2 and Color.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/shaders.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    shaders={{\n      fragment: myShader,\n      uniforms: {\n        myFloat: 0.5,\n        myVec2: new Vector2(2, 5),\n        myColor: new Color('blue'),\n      },\n    }}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Using renderVideo() in Revideo v0.4.x\nDESCRIPTION: Updated example showing the new object-based argument structure for renderVideo() in version 0.4.x, including project file path, variables, and settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.3.x_to_0.4.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst file = await renderVideo({\n  projectFile: './src/project.ts',\n  variables: {fill: 'orange'},\n  settings: {logProgress: true},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Revideo 0.2.x\nDESCRIPTION: This snippet shows the Vite configuration for Revideo version 0.2.x, which includes both the motionCanvas and ffmpeg plugins.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.2.x_to_0.3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\nimport ffmpeg from '@revideo/ffmpeg';\n\nexport default defineConfig({\n  plugins: [motionCanvas(), ffmpeg()],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Layout Root in Redotvideo/Motion Canvas (TSX)\nDESCRIPTION: This snippet shows how to designate a node (e.g., `<Rect>`) as a layout root by setting the `layout` property. Child nodes like `<Circle>` within this root will have their position and size controlled by the Flexbox layout system. The layout root's size is controlled by Flexbox, but its position remains unaffected.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/layouts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child */}\n  <Circle width={320} height={320} />\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Caching Nodes for Filters and Composite Operations in Motion Canvas\nDESCRIPTION: This code snippet shows how to enable caching on a node to optimize rendering when applying filters and composite operations. Setting the cache property to true allows the offscreen canvas operation required by filters and composites.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/filters-and-effects.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Node cache>...</Node>\n// or\n<Node cache={true}>...</Node>\n```\n\n----------------------------------------\n\nTITLE: Spring Animation with Settlement Tolerance\nDESCRIPTION: Example of using the spring function with a settlement tolerance parameter that determines when the spring animation is considered complete based on proximity to the target value.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nyield * spring(PlopSpring, -400, 400, 1 /*...*/);\n//                               here ^\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scene with Static Text in Re:do Video (TSX)\nDESCRIPTION: This snippet demonstrates how to create a basic scene with static text using Re:do Video. It imports necessary components, creates a text element, and animates its scale.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/parameterized-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {useScene, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n\n  const name = 'new user';\n\n  view.add(\n    <Txt fontSize={1} textWrap={true} ref={textRef} fill={'blue'}>\n      Hello {name}!\n    </Txt>,\n  );\n\n  yield* textRef().scale(30, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Layout Nodes with Non-Layout Nodes in Redotvideo (TSX)\nDESCRIPTION: This example illustrates that nodes which do not extend the `Layout` class (like the standard `Node`) are disregarded by the Flexbox layout system. This allows grouping layout children (like the first two `<Rect>`s wrapped in `<Node>`) or applying transformations/effects without altering the layout flow; the three `<Rect>`s are treated as direct siblings by the layout.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/layouts.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} width={960} gap={40} layout>\n  <Node opacity={0.1}>\n    <Rect height={240} fill={'#ff6470'} />\n    <Rect height={240} fill={'#ff6470'} />\n  </Node>\n  <Rect height={240} fill={'#ff6470'} />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Properties in Parallel - Motion Canvas with TypeScript\nDESCRIPTION: Shows individual animations for property changes (such as 'fill' and 'position.x') executed in serial order, not in parallel. Each yield statement is handled one after the other. Used primarily for demonstration of animation independence.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1).to('#e13238', 1);\\nyield * myCircle().position.x(300, 1).to(-300, 1);\n```\n\n----------------------------------------\n\nTITLE: Basic Subtitle Implementation in Revideo with Performance Issues\nDESCRIPTION: This code snippet shows a common but inefficient approach to adding subtitles to a video in Revideo. Each subtitle text causes the entire view to be re-rendered, including the video element, which impacts performance.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/performance/node-parent-reloading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, Video, makeScene2D} from '@revideo/2d';\nimport {useScene, waitFor, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const words = [\n    'Here',\n    'are',\n    'some',\n    'subtitles',\n    'added',\n    'to',\n    'the',\n    'video',\n  ];\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/beach-3.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n    </>,\n  );\n\n  for (const w of words) {\n    const textRef = createRef<Txt>();\n    yield view.add(\n      <Txt\n        fontFamily={'Sans-Serif'}\n        fill={'white'}\n        fontSize={40}\n        ref={textRef}\n        text={w}\n      />,\n    );\n    yield* waitFor(0.3);\n    textRef().remove();\n  }\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Info Block Markdown Syntax\nDESCRIPTION: Example showing the syntax for creating an info block admonition in documentation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/info-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nThis is an info block.\n:::\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Node References from Custom Component using `makeRef` (TSX)\nDESCRIPTION: Shows how a custom function component (`Label`) can accept an object (`refs`) via props and use `makeRef` internally to populate that object with references to its child nodes (`Rect`, `Txt`). This allows the component user to access and animate specific parts of the component (`label.rect`, `label.text`).\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Label({\n  refs,\n  children,\n}: {\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    // highlight-next-line\n    <Rect ref={makeRef(refs, 'rect')}>\n      // highlight-next-line\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\nconst label = {rect: null as Rect, text: null as Txt};\nview.add(<Label refs={label}>HELLO</Label>);\n\n// we can now animate both the Rect and the Text of our label:\nyield * label.rect.opacity(2, 0.3);\nyield * label.text.fontSize(24, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Basic Player Component Integration\nDESCRIPTION: Example of importing and using the Revideo Player component in a React application, connecting to a locally served project.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"http://localhost:4000/player/\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Video Overlay in Revideo using React-like JSX\nDESCRIPTION: This code snippet demonstrates how to create a scene in Revideo that overlays a transparent video on top of a background image. It uses the VP9 codec for the video and includes references for both the video and background elements.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/transparent-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Video, makeScene2D} from '@revideo/2d';\nimport {waitFor, createRef, useScene} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const avatarRef = createRef<Video>();\n  const backgroundRef = createRef<Img>();\n\n  yield view.add(\n    <>\n      <Img\n        src={'https://revideo-example-assets.s3.amazonaws.com/mountains.jpg'}\n        width={'100%'}\n        ref={backgroundRef}\n      />\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/avatar.webm'}\n        play={true}\n        height={'100%'}\n        ref={avatarRef}\n      />\n    </>,\n  );\n\n  yield* waitFor(avatarRef().getDuration());\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Motion Canvas Project - TypeScript\nDESCRIPTION: This snippet shows how to initialize a Motion Canvas project by importing required modules and specifying an array of scenes. All scenes, such as the one imported from './scenes/example?scene', must be provided in the scenes array. The code requires '@revideo/core' and available TS modules and outputs a configured project object.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@revideo/core';\\n\\nimport example from './scenes/example?scene';\\n\\nexport default makeProject({\\n  scenes: [example],\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Refs Object for Custom Component with `makeRefs` (TSX)\nDESCRIPTION: Introduces the `makeRefs()` utility from `@revideo/core` to eliminate the type redundancy shown previously. `makeRefs<typeof Label>()` infers the required shape and types for the `refs` object directly from the `Label` component's definition, creating an appropriately typed empty object (`label`) ready to be passed via props. Requires importing `makeRefs`.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef, makeRefs} from '@revideo/core';\n\n// ...\n\nfunction Label({\n  refs,\n  children,\n}: {\n  // highlight-next-line\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\n// highlight-next-line\nconst label = makeRefs<typeof Label>();\nview.add(<Label refs={label}>HELLO</Label>);\n```\n\n----------------------------------------\n\nTITLE: Profiling Code Execution in Revideo\nDESCRIPTION: Demonstrates how to profile sections of code to measure execution time using the Logger's profile method. The first call starts profiling, and the second call with the same ID ends it.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/logging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nlogger.profile('id'); // <-- starts the profiling\n// some expensive calculation\nlogger.profile('id'); // <-- ends the profiling\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Custom Component Refs (Redundancy Example) (TSX)\nDESCRIPTION: Highlights a redundancy issue when using custom components that export refs (like the `Label` component). The type structure for the `refs` object (`{rect: Rect; text: Txt}`) needs to be defined both in the component's props and when creating the external `label` object.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Label({\n  refs,\n  children,\n}: {\n  // highlight-next-line\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\n// highlight-next-line\nconst label = {rect: null as Rect, text: null as Txt};\nview.add(<Label refs={label}>HELLO</Label>);\n```\n\n----------------------------------------\n\nTITLE: Basic Subtitle Implementation in Revideo\nDESCRIPTION: Initial implementation showing how to add subtitles to a video using Revideo. This approach adds text nodes directly to the main view, causing frequent parent node reloading and performance issues.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/performance/node-parent-reloading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, Video, makeScene2D} from '@revideo/2d';\nimport {useScene, waitFor, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const words = [\n    'Here',\n    'are',\n    'some',\n    'subtitles',\n    'added',\n    'to',\n    'the',\n    'video',\n  ];\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/beach-3.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n    </>,\n  );\n\n  for (const w of words) {\n    const textRef = createRef<Txt>();\n    yield view.add(\n      <Txt\n        fontFamily={'Sans-Serif'}\n        fill={'white'}\n        fontSize={40}\n        ref={textRef}\n        text={w}\n      />,\n    );\n    yield* waitFor(0.3);\n    textRef().remove();\n  }\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Block in Markdown\nDESCRIPTION: Demonstrates how to create a note-style information block using Markdown special syntax. Uses the [!NOTE] directive to create a highlighted information section.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/info-blocks-expected.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> This is an info block.\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Props Interface for Custom Component in Motion Canvas\nDESCRIPTION: Shows how to define an interface for custom component props, including the use of SignalValue for all properties.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  initialState?: SignalValue<boolean>;\n\n  // We don't use color here because we want\n  // to be able to pass hex strings and rgb\n  // values to accent rather than a `Color`\n  accent?: SignalValue<PossibleColor>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Revideo Projects Programmatically\nDESCRIPTION: This code shows how to render a Revideo project programmatically using the renderVideo function. It demonstrates setting project file paths, variables, and rendering settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\nasync function render() {\n\tconsole.log('Rendering video...');\n\n\t// This is the main function that renders the video\n\tconst file = await renderVideo({\n\t\tprojectFile: './src/project.ts',\n        variables: { video: \"\" }\n\t\tsettings: { logProgress: true }\n\t});\n\n\tconsole.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Word-by-Word Text Animation with Custom Timing\nDESCRIPTION: Shows how to create precise word-by-word text animations using the .add() method. Each word appears with custom timing intervals, allowing for more controlled text animation sequences.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/streaming-text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  const words = ['This', 'is', 'a', 'text'];\n  const secondsToAppear = [0.3, 0.6, 0.4, 0.2, 0.5];\n\n  for (let i = 0; i < words.length; i++) {\n    textRef().add(<Txt>{words[i]} </Txt>);\n    yield* waitFor(secondsToAppear[i]);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Scene Structure Inline (TSX)\nDESCRIPTION: Presents an alternative, often more readable way to define the same nested scene structure as the previous example, using inline JSX components directly within the `view.add` call without storing intermediate references in variables.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Layout>\n    <Circle>\n      <Rect />\n    </Circle>\n    <Rect />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Pre-made Slide Transition in Motion Canvas\nDESCRIPTION: Demonstrates how to implement a slide transition between scenes in Motion Canvas. The transition is added at the beginning of the scene function after adding nodes to the view.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/transitions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  // set up the scene:\n  view.add(/* your nodes here */);\n\n  // perform a slide transition to the left:\n  yield* slideTransition(Direction.Left);\n\n  // proceed with the animation\n  yield* waitFor(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Timing Function Syntax\nDESCRIPTION: Demonstrates how to use the simplified syntax for easing functions where the range parameters can be passed directly to the timing function instead of using the map function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This:\nmap(-300, 300, easeInOutCubic(value));\n// Can be simplified to:\neaseInOutCubic(value, -300, 300);\n```\n\n----------------------------------------\n\nTITLE: Revideo Scene with Image and Text\nDESCRIPTION: Shows how to add both image and text elements to a Revideo scene using JSX syntax.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield view.add(<Txt fill=\"red\" y={300} text={'Hello World!'} />);\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Uniform Declarations in GLSL Shader\nDESCRIPTION: Example of how custom uniforms from TypeScript get translated into GLSL uniform declarations in the shader code.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/shaders.mdx#2025-04-22_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float myFloat;\nuniform vec2 myVec2;\nuniform vec4 myColor;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects in Motion Canvas\nDESCRIPTION: Example showing how to configure multiple project files in Motion Canvas, enabling project selection without restarting Vite.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmotionCanvas({\n  project: [\n    './src/firstProject.ts',\n    './src/secondProject.ts',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing HLS Video Streaming in Revideo using TSX\nDESCRIPTION: This code snippet demonstrates how to use the Video component to implement HLS video streaming in a Revideo scene. It sets the source to an HLS stream, enables autoplay, sets the height to 100%, and starts playback at 5 seconds. The scene waits for 10 seconds before ending.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/code-snippets/hls-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <>\n      <Video\n        src={'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'}\n        play={true}\n        height={'100%'}\n        time={5}\n      />\n    </>,\n  );\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Cached Nodes for Filters and Composite Operations (TSX)\nDESCRIPTION: This snippet shows how to create cached nodes in Motion Canvas, which are required for both filters and composite operations. Cached nodes are rendered on an offscreen canvas before being added to the main scene, allowing for efficient application of effects.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/filters-and-effects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Node cache>...</Node>\n// or\n<Node cache={true}>...</Node>\n```\n\n----------------------------------------\n\nTITLE: Accessing Children Generated by a Spawner in Revideo (TSX)\nDESCRIPTION: This snippet shows how to access the children generated by a spawner using the parent node's `childrenAs<T>()` method (accessed via a `ref`). It demonstrates applying an animation (`scale`) to all currently spawned circles. It's important to recall `childrenAs` frequently as the returned references can become invalid if the spawner changes the number of children.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/spawners.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ... continuing from above ...\nlet spawnedCircles = layout().childrenAs<Circle>();\nyield * all(...spawnedCircles.map(circle => circle.scale(1.5, 1).to(1, 1)));\n```\n\n----------------------------------------\n\nTITLE: Sequential Scene Animation in Revideo with TSX\nDESCRIPTION: Shows how to create a sequential animation in Revideo using a generator function, including adding a circle, animating its position, removing it, and waiting for a specified duration.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/understanding-scene-flow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Circle, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const circleRef = createRef<Circle>();\n\n  // At first, a red circle should appear in the center of my video\n  yield view.add(<Circle fill={'red'} size={100} ref={circleRef} />);\n\n  // The circle should move to the right by 200 pixels within two seconds\n  yield* circleRef().position.x(200, 2);\n\n  // Then, the circle disappears from the video\n  circleRef().remove();\n\n  // Afterwards, nothing happens for one second\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Logger in Revideo\nDESCRIPTION: Shows how to get a reference to the Logger in a Revideo scene using the useLogger function from @revideo/core.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@revideo/2d';\nimport {useLogger} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const logger = useLogger();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Error Callback Response for Failed Render\nDESCRIPTION: Example of a POST request sent to the callback URL when a render job fails. It includes the job ID, error status, and an error message describing the failure.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST <callbackUrl> \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"jobId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"error\",\n  \"error\": \"<error message>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Resetting Signals to Default Values in TypeScript\nDESCRIPTION: Shows how to use the DEFAULT symbol to reset signals to their initial values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/signals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DEFAULT, createSignal} from '@revideo/core';\n\nconst signal = createSignal(3); // <- initial value is 3\nsignal(2);\nsignal(); // <- value is now 2\nsignal(DEFAULT);\nsignal(); // <- value is reset back to 3\n```\n\nLANGUAGE: typescript\nCODE:\n```\nyield * signal(DEFAULT, 2);\n```\n\n----------------------------------------\n\nTITLE: Code Range Structure Examples\nDESCRIPTION: Shows the structure and format of code ranges for selecting and manipulating code sections.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n[[startLine, startColumn], [endLine, endColumn]];\n```\n\nLANGUAGE: js\nCODE:\n```\n[[1, 0], [1, 3]];\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Interface\nDESCRIPTION: Demonstrates how to define a TypeScript interface for component properties using SignalValue wrapper and extending NodeProps.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  initialState?: SignalValue<boolean>;\n\n  // We don't use color here because we want\n  // to be able to pass hex strings and rgb\n  // values to accent rather than a `Color`\n  accent?: SignalValue<PossibleColor>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Video Scene with Static Text in TSX\nDESCRIPTION: Demonstrates a basic video scene setup using revideojs with a static text parameter. The scene creates an animated text element that scales up.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/parameterized-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {useScene, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n\n  const name = 'new user';\n\n  view.add(\n    <Txt fontSize={1} textWrap={true} ref={textRef} fill={'blue'}>\n      Hello {name}!\n    </Txt>,\n  );\n\n  yield* textRef().scale(30, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Node Property Instantly - TypeScript\nDESCRIPTION: Shows immediate property update for a node (such as changing its 'fill' color) by passing a new value to the appropriate reference function. No animation or transition occurs; the change is rendered instantly. The referenced node (myCircle) must already exist.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nmyCircle().fill('#e6a700');\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Function Example in TypeScript\nDESCRIPTION: A simple example demonstrating how generator functions work in JavaScript, yielding multiple values that can be retrieved through the .next() method.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = example();\n\nconsole.log(generator.next().value); // 1;\nconsole.log(generator.next().value); // 2;\nconsole.log(generator.next().value); // 3;\n```\n\n----------------------------------------\n\nTITLE: Successful Render Callback Response\nDESCRIPTION: Example of a POST request sent to the callback URL upon successful completion of a render job. It includes the job ID, status, and a download link for the rendered video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST <callbackUrl> \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"jobId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"success\",\n  \"downloadLink\": \"http://your-revideo-service.com/download/42078492-fbb9-4570-a329-785e87456618.mp4\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding a Circle Element to a Motion Canvas Scene\nDESCRIPTION: This snippet shows how to add a Circle element to a Motion Canvas scene. It sets properties like position, size, and color, and uses a reference for later manipulation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Circle\n    ref={myCircle}\n    x={-300}\n    width={140}\n    height={140}\n    fill=\"#e13238\"\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Property Signals in TSX\nDESCRIPTION: Example of accessing signals from node properties in Motion Canvas.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\n\nconst signal = circle.fill;\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Uniform Values to Shaders in Motion Canvas\nDESCRIPTION: Shows how to provide custom uniform values to a shader by using a configuration object that specifies both the fragment shader and the uniform values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/shaders.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    // highlight-next-line\n    shaders={{\n      fragment: myShader,\n      uniforms: {\n        myFloat: 0.5,\n        myVec2: new Vector2(2, 5),\n        myColor: new Color('blue'),\n      },\n    }}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Node References with Variables (TSX)\nDESCRIPTION: Illustrates how managing references for a nested scene structure using direct variable assignment (`rectA`, `rectB`, `circle`) can become verbose as the complexity increases. Each node needing a reference is declared separately before constructing the scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = <Rect />;\nconst rectB = <Rect />;\nconst circle = <Circle>{rectA}</Circle>;\nview.add(\n  <Layout>\n    {circle}\n    {rectB}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Signal Computation in TypeScript\nDESCRIPTION: Shows how to create computed signals that depend on other signals using a radius-area calculation example.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => Math.PI * radius() * radius());\n\nconsole.log(area()); // 3.141592653589793\nradius(2);\nconsole.log(area()); // 12.566370614359172\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Canvas Project in TypeScript\nDESCRIPTION: This snippet shows how to create a project configuration object in Motion Canvas. It imports a scene and sets up the project using the makeProject function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Predicate to Find Wide Nodes\nDESCRIPTION: Example showing how to create a custom predicate function to find nodes based on specific property values, in this case finding nodes with scale.x greater than 1.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst wideNodes = view.findAll(node => node.scale.x() > 1);\n```\n\n----------------------------------------\n\nTITLE: Job ID Response for Callback Render\nDESCRIPTION: Example JSON response containing a job ID for a render job initiated with a callback URL. This ID can be used to distinguish between different rendering jobs.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jobId\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom RustCode Component in Revideo Scene (TSX)\nDESCRIPTION: This snippet shows how to use the custom RustCode component in a Revideo scene. It demonstrates importing and using the RustCode component with Rust syntax.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RustCode} from '../nodes/RustCode';\n\n// ...\n\nview.add(\n  <RustCode\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Declarations\nDESCRIPTION: Demonstrates the GLSL uniform declarations corresponding to the custom uniforms passed from TypeScript.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/shaders.mdx#2025-04-22_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float myFloat;\nuniform vec2 myVec2;\nuniform vec4 myColor;\n```\n\n----------------------------------------\n\nTITLE: Using Project Variables for Dynamic Text in Re:do Video (TSX)\nDESCRIPTION: This snippet shows how to use project variables to create dynamic text in a Re:do Video scene. It uses the useScene hook to access project variables and provide a default value if the variable is not set.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/parameterized-video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {useScene, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n\n  const name = useScene().variables.get('username', 'new user');\n\n  view.add(\n    <Txt fontSize={1} textWrap={true} ref={textRef} fill={'blue'}>\n      Hello {name()}!\n    </Txt>,\n  );\n\n  yield* textRef().scale(30, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Reference for a Node - Motion Canvas with TSX\nDESCRIPTION: This snippet creates a reference to a Circle node using 'createRef', which enables direct property access and animation controls. The reference is passed to the Circle via the 'ref' attribute and is later used to manipulate the node's state or animate it. Requires 'createRef' utility and the appropriate type for the referenced node.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\\nconst myCircle = createRef<Circle>();\\n\\nview.add(\\n  <Circle\\n    // highlight-next-line\\n    ref={myCircle}\\n    x={-300}\\n    width={140}\\n    height={140}\\n    fill=\\\"#e13238\\\"\\n  />,\\n);\n```\n\n----------------------------------------\n\nTITLE: Using waitFor in Revideo Animation\nDESCRIPTION: Code snippet demonstrating the waitFor function to pause animation flow for a specified duration.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nyield * waitFor(1);\n```\n\n----------------------------------------\n\nTITLE: Seeded Random Number Generation in TypeScript\nDESCRIPTION: Shows how to create a random number generator with a custom seed value for reproducible random sequences.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/random.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = useRandom(123);\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Parameters in TypeScript\nDESCRIPTION: Example of how to pass variables when rendering a video using the renderVideo function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/parameterized-video.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nrenderVideo({\n  projectFile: './src/project.ts',\n  variables: {username: 'Mike'},\n});\n```\n\n----------------------------------------\n\nTITLE: Scene Creation Comparison - JSX vs No JSX\nDESCRIPTION: Shows equivalent code for creating a scene hierarchy using JSX syntax and traditional object instantiation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/hierarchy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// JSX\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// No JSX\nview.add([\n  new Circle({}),\n  new Layout({\n    children: [\n      new Rect({}),\n      new Txt({text: 'Hi'}),\n    ],\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Audio Files using concatenateMedia Function in TypeScript\nDESCRIPTION: Example demonstrates how to concatenate multiple WAV audio files into a single output file using the concatenateMedia function from @revideo/ffmpeg library. The function takes an array of input file paths and an output file path as arguments.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/revideo-ffmpeg/concatenate-media.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {concatenateMedia} from '@revideo/ffmpeg';\n\nconst audios = ['audio-0.wav', 'audio-1.wav', 'audio-2.wav'];\nconcatenateMedia(audios, 'audio.wav');\n```\n\n----------------------------------------\n\nTITLE: Refactoring with yield* Delegation in Motion Canvas\nDESCRIPTION: An improved version of the flickering animation that extracts the animation logic into a separate generator function and uses yield* to delegate to it, demonstrating code reusability.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ThreadGenerator} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  yield* flicker(circle());\n});\n\nfunction* flicker(circle: Circle): ThreadGenerator {\n  circle.fill('red');\n  yield;\n  circle.fill('blue');\n  yield;\n  circle.fill('red');\n  yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DEFAULT Signal Values in TypeScript\nDESCRIPTION: Examples of using the DEFAULT symbol to reset signals to their initial values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DEFAULT, createSignal} from '@revideo/core';\n\nconst signal = createSignal(3); // <- initial value is 3\nsignal(2);\nsignal(); // <- value is now 2\nsignal(DEFAULT);\nsignal(); // <- value is reset back to 3\n```\n\n----------------------------------------\n\nTITLE: Adding a Circle Node to a Scene - Motion Canvas with TSX\nDESCRIPTION: This snippet demonstrates adding a Circle node with specific properties (reference, position, dimensions, fill color) to the scene. The element is added using the 'view.add()' method. To work, this requires an existing reference (e.g., 'myCircle') and the Circle component from the Motion Canvas 2D library.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\\n  <Circle\\n    // highlight-start\\n    ref={myCircle}\\n    x={-300}\\n    width={140}\\n    height={140}\\n    fill=\\\"#e13238\\\"\\n  />,\\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Log Payloads in Revideo\nDESCRIPTION: Shows how to create more detailed log messages using payloads that can include additional information like remarks, objects, duration, and stack traces. These appear as expandable entries in the Console UI.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/logging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nlogger.debug({\n  message: 'Some more advanced logging',\n  remarks: 'Some remarks about this log. Can also contain <b>HTML</b> tags.',\n  object: {\n    someProperty: 'some property value',\n  },\n  durationMs: 200,\n  stack: new Error('').stack,\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Payloads in ReVideo\nDESCRIPTION: Shows how to create detailed log messages using payloads that can include HTML, objects, duration, and stack traces.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/logging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nlogger.debug({\n  message: 'Some more advanced logging',\n  remarks: 'Some remarks about this log. Can also contain <b>HTML</b> tags.',\n  object: {\n    someProperty: 'some property value',\n  },\n  durationMs: 200,\n  stack: new Error('').stack,\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Multiple Properties Synchronously - Motion Canvas with TSX\nDESCRIPTION: Demonstrates animating both the fill color and position of a circle node concurrently using the 'all' function from the animation flow module. Each animation call specifies the target value and duration, while 'all' triggers them in synchrony when yielded by the generator. Dependencies include a valid reference (e.g., 'myCircle') and the flow utility from Motion Canvas.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nyield *\\n  all(\\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\\n    myCircle().position.x(300, 1).to(-300, 1),\\n  );\n```\n\n----------------------------------------\n\nTITLE: Basic Random Number Generation in TypeScript\nDESCRIPTION: Demonstrates how to create a random number generator and generate integers within a specified range using useRandom() function from Motion Canvas core.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/random.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRandom} from '@revideo/core';\n\nconst random = useRandom();\nconst integer = random.nextInt(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Updated renderVideo() Function Call for Revideo 0.4.x\nDESCRIPTION: This snippet demonstrates the new way of calling renderVideo() in Revideo 0.4.x. Arguments are now passed as an object with named properties, and the function points to the project file instead of the Vite config.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.3.x_to_0.4.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst file = await renderVideo({\n  projectFile: './src/project.ts',\n  variables: {fill: 'orange'},\n  settings: {logProgress: true},\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Node Structure with Variables in Motion Canvas\nDESCRIPTION: Example showing how storing references using variables can make complex scene structures harder to read when adding multiple nodes with parent-child relationships.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = <Rect />;\nconst rectB = <Rect />;\nconst circle = <Circle>{rectA}</Circle>;\nview.add(\n  <Layout>\n    {circle}\n    {rectB}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Working with Node Transformation Matrices (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to use node transformation matrices to retrieve or set a node's absolute position in a custom manner. It shows that node.absolutePosition() is equivalent to transforming Vector2.zero by the node's localToWorld matrix, and that setting a node's absolute position involves transforming the target world-space vector using the worldToParent matrix. Dependencies: Motion Canvas Vector2, Node class, and matrix transformation utilities. Inputs are the node and the desired position vector; outputs are updated node positions. Techniques apply to advanced coordinate mapping and custom transform logic.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/positioning.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// getting the absolute position:\nnode.absolutePosition();\n// same as:\nVector2.zero.transformAsPoint(node.localToWorld());\n\n// setting the absolute position:\nnode.absolutePosition(vector);\n// same as:\nnode.position(vector.transformAsPoint(node.worldToParent()));\n```\n\n----------------------------------------\n\nTITLE: Signal Behavior Demonstration in TypeScript\nDESCRIPTION: Illustrates the three key aspects of signals: laziness, caching, and dependency tracking.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => {\n  console.log('area recalculated!');\n  return Math.PI * radius() * radius();\n});\n\narea(); // area recalculated!\narea();\nradius(2);\narea(); // area recalculated!\nradius(3);\nradius(4);\narea(); // area recalculated!\n```\n\n----------------------------------------\n\nTITLE: Component Constructor Implementation\nDESCRIPTION: Shows how to implement a component constructor with props handling and initialization.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    super({\n      ...props,\n    });\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Video Rendering Command\nDESCRIPTION: Command to render the final video output\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run render\n```\n\n----------------------------------------\n\nTITLE: Creating a Flickering Circle Animation in Motion Canvas\nDESCRIPTION: A basic scene implementation showing how to create a flickering circle animation using direct yield statements. Each yield represents a frame in the animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  circle().fill('red');\n  yield;\n  circle().fill('blue');\n  yield;\n  circle().fill('red');\n  yield;\n});\n```\n\n----------------------------------------\n\nTITLE: Video Rendering Script\nDESCRIPTION: TypeScript script that handles video rendering configuration and execution\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nasync function render() {\n  console.log('Rendering video...');\n\n  // This is the main function that renders the video\n  const file = await renderVideo({\n    projectFile: './src/project.ts',\n    settings: {logProgress: true},\n  });\n\n  console.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Using Array.map and all for Parallel Animations\nDESCRIPTION: A pattern showing how to animate multiple objects in parallel using Array.map to create generators and the all() flow generator to run them simultaneously.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nyield *\n  all(\n    ...rects.map(rect =>\n      // No yield or anything; we return this generator and deal with it outside\n      rect.position.y(100, 1).to(-100, 2).to(0, 1),\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Embedding Revideo Player in React\nDESCRIPTION: React code snippet showing how to embed the Revideo Player component in a web application, referencing a locally served project.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"http://localhost:4000/player/\" />;\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes by Type using instanceof Check\nDESCRIPTION: Example showing how to find nodes of a specific type using JavaScript's instanceof operator in a predicate function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst texts = view.findAll(node => node instanceof Txt);\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Scene - Motion Canvas with TSX\nDESCRIPTION: This TSX snippet defines a Motion Canvas 2D scene using the 'makeScene2D' function, which wraps a generator function for animation flow. The argument 'view' can be used to add and manipulate visual elements. It requires '@revideo/2d' and expects elements to be defined and animated within the generator.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@revideo/2d';\\n\\nexport default makeScene2D(function* (view) {\\n  // animation\\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filters with Array Method in Motion Canvas\nDESCRIPTION: This snippet illustrates the use of an array method to apply filters to a node in Motion Canvas. It demonstrates applying a blur effect to an image by manipulating a signal in the `filters` array. Dependencies include '@revideo/2d' and '@revideo/core'.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/filters-and-effects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// snippet Filters Array\nimport {makeScene2D, Img, blur} from '@revideo/2d';\nimport {createSignal} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  view.fill('#141414');\n\n  const blurSignal = createSignal(0);\n  yield view.add(\n    <Img\n      src={'/img/logo_dark.svg'}\n      size={200}\n      /* Modification happens by changing the Filters inside the 'filters' array */\n      filters={[blur(blurSignal)]}\n    />,\n  );\n  yield* blurSignal(10, 1);\n  yield* blurSignal(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Revideo Project\nDESCRIPTION: Command to initialize a new Revideo project using npm\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @revideo@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Motion Canvas with Vite Configuration\nDESCRIPTION: Basic setup for Motion Canvas in a Vite project configuration file, demonstrating how to import and configure the Motion Canvas plugin.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      // custom options\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Video Decoder in Revideo\nDESCRIPTION: Demonstrates how to set the decoder property for a video node in Revideo. This snippet shows the syntax for specifying which decoder to use during video processing.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/performance/decoders.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Video decoder={\"web\"} />\n```\n\n----------------------------------------\n\nTITLE: Using Web Font in Text Component\nDESCRIPTION: Example of applying the loaded web font to a Text component using the fontFamily property.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n```\n\n----------------------------------------\n\nTITLE: Embedding HLS Video in a Revideo Scene (TypeScript/TSX)\nDESCRIPTION: This TypeScript (TSX) snippet demonstrates how to create a Revideo 2D scene using `makeScene2D` and embed an HLS video stream. It utilizes the `<Video/>` component, setting the `src` attribute to an `.m3u8` URL, enabling playback (`play={true}`), setting the height, specifying a start time (`time={5}`), and using `waitFor` to control the scene duration. It requires the `@revideo/2d` and `@revideo/core` packages. Note that using HLS video disables the faster webcodecs decoder.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/hls-video.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <>\n      <Video\n        src={'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'}\n        play={true}\n        height={'100%'}\n        time={5}\n      />\n    </>,\n  );\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Main Animation Scene Component\nDESCRIPTION: TSX code defining the main animation scene with video, audio and logo animation using Revideo components\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Audio, Img, Video, makeScene2D} from '@revideo/2d';\nimport {all, chain, createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const logoRef = createRef<Img>();\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/stars.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n      <Audio\n        src={'https://revideo-example-assets.s3.amazonaws.com/chill-beat.mp3'}\n        play={true}\n        time={17.0}\n      />\n    </>,\n  );\n\n  yield* waitFor(1);\n\n  view.add(\n    <Img\n      width={'1%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield* chain(\n    all(logoRef().scale(40, 2), logoRef().rotation(360, 2)),\n    logoRef().scale(60, 1),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Variables in TypeScript\nDESCRIPTION: Shows how to configure a project with variables for use in the visual editor using makeProject.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/parameterized-video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n  variables: {username: 'Mike'},\n});\n```\n\n----------------------------------------\n\nTITLE: Video Rendering Script\nDESCRIPTION: Script for rendering the final video output using renderVideo function with custom variables and settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/project-structure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\nasync function render() {\n\tconsole.log('Rendering video...');\n\n\t// This is the main function that renders the video\n\tconst file = await renderVideo({\n\t\tprojectFile: './src/project.ts',\n        variables: { video: \"\" }\n\t\tsettings: { logProgress: true }\n\t});\n\n\tconsole.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Node Query Examples\nDESCRIPTION: Shows different ways to query nodes in the hierarchy using predicates and the is() utility function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/hierarchy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst wideNodes = view.findAll(node => node.scale.x() > 1);\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst texts = view.findAll(node => node instanceof Txt);\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {is} from '@revideo/2d';\n// ...\nconst texts = view.findAll(is(Txt));\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst textChildren = someParent.children().filter(is(Txt));\n```\n\n----------------------------------------\n\nTITLE: Local Asset Usage Example\nDESCRIPTION: Demonstrates how to use local video files from the public directory in a scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/project-structure.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Video src={'/my-video.mp4'} size={['100%', '100%']} play={true} />,\n  );\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Yielding Asynchronous Operations in Revideo (TSX)\nDESCRIPTION: Shows how to use `yield` with `view.add` when adding an `Img` component that loads an image from a URL. Yielding ensures the generator pauses until the associated promise (image loading) resolves, preventing potential errors.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/understanding-scene-flow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(\n  <Img\n    src={\n      'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n    }\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference for a Motion Canvas Element\nDESCRIPTION: This code demonstrates how to create a reference for a Circle element in Motion Canvas using the createRef function, which is used for animating the element later.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst myCircle = createRef<Circle>();\n\nview.add(\n  <Circle\n    ref={myCircle}\n    x={-300}\n    width={140}\n    height={140}\n    fill=\"#e13238\"\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: State Management with Save and Restore\nDESCRIPTION: Demonstrates how to save and restore node states during animation sequences.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/tweening.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncircle().save();\nyield * circle().position(new Vector2(300, -200), 2);\nyield * circle().restore(1);\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Timing with Hard-Coded Values\nDESCRIPTION: Demonstrates the traditional approach of using hard-coded wait times for animation sequencing, highlighting its limitations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/time-events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitFor(3.1415); // but how long should we wait?\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Concatenating Media Files using @revideo/ffmpeg in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the concatenateMedia function from the @revideo/ffmpeg package to merge multiple audio files into a single output file. The function requires an array of input file paths and a string specifying the output file name. Inputs are the file path strings of the audio sources and the output file path. The dependency is @revideo/ffmpeg, and the environment should support ESModules and TypeScript. The function assumes the provided files exist and are compatible for concatenation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/revideo-ffmpeg/concatenate-media.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {concatenateMedia} from '@revideo/ffmpeg';\n\nconst audios = ['audio-0.wav', 'audio-1.wav', 'audio-2.wav'];\nconcatenateMedia(audios, 'audio.wav');\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Render Request Without Callback URL\nDESCRIPTION: This JSON snippet shows the structure of the response when no callback URL is provided in the render request. It includes the resultUrl pointing to the rendered video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/platform/render-endpoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resultUrl\": \"https://<revideo-storage-url>.com/<your-video-id>.mp4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsuccessfully Using Signals in Code Snippets\nDESCRIPTION: Demonstrates the problem with using signals directly in template string interpolation, where changes to the signal don't update the displayed code.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    // prettier-ignore\n    ,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // The code snippet still displays \"number\" instead of \"newValue\".\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Player Integration with Custom Deployment\nDESCRIPTION: Example of using the Player component with a custom deployment path where the built project files are hosted on a web server.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"https://example.com/outDir/\" />;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Video Scene with Variable Parameter in TSX\nDESCRIPTION: Shows how to use scene variables to create dynamic text content. Demonstrates retrieving a variable with a fallback value.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/parameterized-video.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {useScene, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n\n  const name = useScene().variables.get('username', 'new user');\n\n  view.add(\n    <Txt fontSize={1} textWrap={true} ref={textRef} fill={'blue'}>\n      Hello {name()}!\n    </Txt>,\n  );\n\n  yield* textRef().scale(30, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Variables in revideo-player Component HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed project variables directly within the revideo-player component by passing a JSON string to the variables attribute. This approach allows for initial configuration of variables such as circleFill, which can be adjusted at runtime.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/project-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<revideo-player\n  src=\\\"/path/to/project.js\\\"\n  variables='{\"circleFill\":\"red\"}'\n></revideo-player>\n```\n\n----------------------------------------\n\nTITLE: Installing NSCD to Fix FFmpeg Segmentation Fault on Linux\nDESCRIPTION: This command installs the Name Service Cache Daemon (NSCD) on Linux systems to resolve FFmpeg segmentation faults when using remote URLs for media files.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/common-issues/ffmpeg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nscd\n```\n\n----------------------------------------\n\nTITLE: Serving Revideo Project with CLI\nDESCRIPTION: Command to serve a Revideo project using the CLI, which automatically rebuilds the project when changes are made. This is recommended for development.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve\n```\n\n----------------------------------------\n\nTITLE: Setting Video Decoder in Revideo TSX\nDESCRIPTION: Demonstrates how to explicitly set the video decoder for a Video component in Revideo. This is useful when Revideo fails to detect the file type or when using non-mp4 video formats.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/common-issues/slow-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<Video src={'your_file'} decoder={'web'} />);\n```\n\n----------------------------------------\n\nTITLE: Spring Animation Configuration\nDESCRIPTION: Example of creating custom spring animation parameters for physics-based animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/tweening.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst MySpring = {\n  mass: 0.04,\n  stiffness: 10.0,\n  damping: 0.7,\n  initialVelocity: 8.0,\n};\n```\n\n----------------------------------------\n\nTITLE: Real-time Render Progress Request - Bash\nDESCRIPTION: This example request demonstrates enabling real-time progress updates during video rendering by setting the `streamProgress` parameter to true. It requires an active Revideo server and results in render progress streaming back to the client.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"settings\": { \"workers\": 2 },\n    \"streamProgress\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Children using a Spawner Function in Revideo (TSX)\nDESCRIPTION: This snippet shows the reactive approach using a 'spawner' function. By wrapping the child generation logic in a function `() => ...`, the children within the `Layout` will automatically update whenever the `count` signal changes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/spawners.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom FFmpeg Path in Revideo\nDESCRIPTION: Example of setting a custom FFmpeg path in the renderVideo function to use a specific FFmpeg installation instead of the bundled version.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/common-issues/ffmpeg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\n// ...\n\nawait renderVideo('./src/project.ts', undefined, undefined, {\n  ffmpeg: {\n    // Points to the global ffmpeg installation,\n    ffmpegPath: 'ffmpeg',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Scene Implementation with Custom Font Family\nDESCRIPTION: Scene component demonstrating the usage of combined font families for text and emoji rendering with animation timing.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/emojis.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Txt text={'Hello 🚀'} fontFamily={\"Lexend, 'Noto Color Emoji'\"} />,\n  );\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Video Decoder Explicitly in Revideo TSX\nDESCRIPTION: Specifies the decoder type ('web', 'ffmpeg', or 'slow') for a `<Video/>` component in a Revideo project using the `decoder` prop. This is useful when automatic detection fails or for optimizing performance based on the video file format (e.g., 'web' for MP4, 'ffmpeg' for WebM). Requires the Revideo library and a video source file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/common-issues/slow-rendering.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nyield view.add(<Video src={'your_file'} decoder={'web'} />);\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Revideo Project with CLI\nDESCRIPTION: Command to deploy a Revideo project using the CLI, exposing a web server for rendering and downloading videos. The --port parameter is optional, defaulting to 4000 if not specified.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve --projectFile ./src/project.ts --port 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Transition in Motion Canvas\nDESCRIPTION: Example of using the built-in slideTransition generator in a second scene to create a transition effect from the first scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/transitions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  // set up the scene:\n  view.add(/* your nodes here */);\n\n  // perform a slide transition to the left:\n  yield* slideTransition(Direction.Left);\n\n  // proceed with the animation\n  yield* waitFor(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Media Elements to View\nDESCRIPTION: Code snippet showing how to add Video and Audio elements to a Revideo animation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(\n  <>\n    <Video\n      src={'https://revideo-example-assets.s3.amazonaws.com/stars.mp4'}\n      play={true}\n      size={['100%', '100%']}\n    />\n    <Audio\n      src={'https://revideo-example-assets.s3.amazonaws.com/chill-beat.mp3'}\n      play={true}\n      time={17.0}\n    />\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request for Video Rendering in Bash\nDESCRIPTION: This snippet demonstrates how to send a POST request to the Render Endpoint using curl. It includes setting the content type, authorization, and providing variables and settings in the request body.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/platform/render-endpoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.re.video/v1/render/{your-deployment-id} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: <your-api-key>' \\\n  -d '{\n    \"variables\": {\n      \"text\": \"Hello world\",\n      \"color\": \"#FF0000\"\n    },\n    \"settings\": {\n      \"workers\": 5\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Motion Canvas Project Configuration\nDESCRIPTION: Shows how to enable experimental features in a Motion Canvas project by modifying the project configuration file. This setting allows access to features that are still in testing and may not maintain backwards compatibility.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/experimental.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  experimentalFeatures: true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Web Fonts in Text Components\nDESCRIPTION: TSX code showing how to apply the imported Fira Code font to a Text component using the fontFamily property.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Methods in ReVideo\nDESCRIPTION: Demonstrates the basic logging methods available in ReVideo including debug, info, warn, and error levels.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/logging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlogger.debug('Just here to debug some code.');\nlogger.info('All fine just a little info.');\nlogger.warn('Be careful something has gone wrong.');\nlogger.error('Ups. An error occured.');\n```\n\n----------------------------------------\n\nTITLE: Building Revideo Project Manually\nDESCRIPTION: Command to manually build a Revideo project, creating a distribution directory that can be copied to a web server.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Motion Canvas Transitions\nDESCRIPTION: The recommended file structure for a Motion Canvas project with multiple scenes that will implement transitions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/transitions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-animation/\n└─ src/\n   ├─ scenes/\n   │  ├─ firstScene.tsx\n   │  └─ secondScene.tsx\n   └─ project.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Child Elements to Component\nDESCRIPTION: Demonstrates how to add child elements to a component using JSX syntax.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    // ...\n    this.add(\n      <Rect>\n        <Circle />\n      </Rect>,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revideo Scene with Separated Text Function\nDESCRIPTION: Demonstrates how to separate scene logic into multiple generator functions for better organization.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield addText(view, 'Hello World!');\n\n  yield* waitFor(5);\n});\n\nfunction* addText(view: View2D, displayText: string) {\n  yield view.add(<Txt fill=\"red\" y={300} text={displayText} />);\n\n  yield* waitFor(5);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Layout Property Behavior in Redotvideo/Motion Canvas (TSX)\nDESCRIPTION: This example clarifies that setting the `layout` property on a node that is already a descendant of a layout root does not make it a new layout root. Instead, it's treated as a regular layout child, subject to the parent layout's Flexbox rules.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/layouts.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child, NOT a layout root */}\n  <Rect layout>\n    {/* ↓ layout child */}\n    <Circle width={320} height={320} />\n  </Rect>\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Revideo 0.3.x\nDESCRIPTION: This snippet demonstrates the updated Vite configuration for Revideo version 0.3.x, where the ffmpeg plugin is removed as it's now integrated into the core library.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.2.x_to_0.3.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Project Configuration\nDESCRIPTION: TypeScript code showing how to import the global CSS file containing font definitions into the project configuration file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\n\nimport './global.css'; // <- import the css\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Video Rendering Implementation\nDESCRIPTION: TypeScript implementation for rendering the video using the renderVideo API.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n\nasync function render() {\n  console.log('Rendering video...');\n\n  // This is the main function that renders the video\n  const file = await renderVideo({\n    projectFile: './src/project.ts',\n    settings: {logProgress: true},\n  });\n\n  console.log(`Rendered video to ${file}`);\n}\n\nrender();\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Grammar for Syntax Highlighting\nDESCRIPTION: Shows how to install the Lezer JavaScript grammar package which is required for proper syntax highlighting of JavaScript code snippets in ReVideo.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lezer/javascript\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hard-Coded Timing in Motion Canvas\nDESCRIPTION: Shows the traditional approach of using hard-coded wait times between animations, which is problematic when synchronizing with audio.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/time-events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitFor(3.1415); // but how long should we wait?\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Defining Both Web and Local Fonts in CSS\nDESCRIPTION: CSS code showing how to import both web fonts and local fonts, using @import for Google Fonts and @font-face for local font files.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n\n@font-face {\n  font-family: 'Cascadia Code';\n  src:\n    local('Cascadia Code'),\n    url(public/fonts/CASCADIACODE.TTF) format('truetype');\n}\n```\n\n----------------------------------------\n\nTITLE: Using renderVideo() in Revideo v0.3.x\nDESCRIPTION: Example showing how renderVideo() was called in version 0.3.x, using separate arguments for file path, variables, and settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.3.x_to_0.4.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst file = await renderVideo(\n  'vite.config.ts',\n  {fill: 'orange'},\n  {logProgress: true},\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying Revideo Project Using CLI - Bash\nDESCRIPTION: This Bash command initiates a local Revideo project server using the specified project file and port. It requires Node.js and the revideo CLI as dependencies. The \"--projectFile\" parameter specifies the path to the project definition file, while \"--port\" designates the port to use (default is 4000). The output is a running local server ready to handle render requests.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve --projectFile ./src/project.ts --port 3000\n```\n\n----------------------------------------\n\nTITLE: Embedding Player via Local Host\nDESCRIPTION: This snippet shows how to embed the Revideo player into a website by importing the Player component from '@revideo/player-react'. The player source is set to the local server started by the CLI. The code requires React for rendering the component.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/player-react/player.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"http://localhost:4000/player\" />;\n```\n\n----------------------------------------\n\nTITLE: Basic Text Streaming Animation in ReVideo\nDESCRIPTION: Demonstrates how to create a basic text streaming animation using the .text() method with a specified duration. Uses ReVideo's 2D framework to animate text appearance over 2 seconds.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/code-snippets/streaming-text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  yield* textRef().text('This is a text', 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Code Display Example\nDESCRIPTION: Simple example showing how to display code using the Code component.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@revideo/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Code\n      fontSize={28}\n      code={'const number = 7;'}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component - Basic Usage Example\nDESCRIPTION: Shows how to use a custom Switch component with an initial state parameter.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch initialState={false} />\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Visual Editor in Re:do Video (TypeScript)\nDESCRIPTION: This snippet shows how to pass variables to the makeProject function for use in the visual editor of Re:do Video. It demonstrates importing a scene and setting variables in the project configuration.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/parameterized-video.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n  variables: {username: 'Mike'},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rive Animation in reVideo Scene (TSX)\nDESCRIPTION: This code snippet shows how to use the Rive component to add a Rive animation to a reVideo scene. It imports necessary components, creates a scene, adds a Rive animation, and sets a duration for the animation to play.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/rive-animations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Rive, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Rive\n      src={'https://revideo-example-assets.s3.amazonaws.com/emoji.riv'}\n      animationId={1}\n      size={[600, 600]}\n    />,\n  );\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure for Local Fonts\nDESCRIPTION: File structure changes required to add local font files, showing the addition of a fonts directory in the public folder.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nroot\n└─public\n+ └─fonts *\n+   └─CASCADIACODE.TTF\n```\n\n----------------------------------------\n\nTITLE: Render Job with Callback URL - Bash\nDESCRIPTION: This POST request to the `/render` endpoint initiates a render job with a `callbackUrl`, allowing the rendering server to notify the client upon completion. It demands running server resources and results in a `jobId` for tracking the job status.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"callbackUrl\": \"http://your-callback-url.com/render-status\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image in Revideo Scene (TSX)\nDESCRIPTION: This snippet demonstrates a minimal example of creating a Revideo scene that displays an image for five seconds using makeScene2D and a generator function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, makeScene2D, View2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Revideo Project\nDESCRIPTION: Command to render the video to a file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run render\n```\n\n----------------------------------------\n\nTITLE: Enabling JSX and TypeScript Support in Code Highlighter\nDESCRIPTION: Shows how to configure the Lezer JavaScript parser to support JSX and TypeScript dialects for syntax highlighting, which isn't enabled by default.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nCode.defaultHighlighter = new LezerHighlighter(\n  parser.configure({\n    // Provide a space-separated list of dialects to enable:\n    dialect: 'jsx ts',\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Web Fonts Using CSS\nDESCRIPTION: CSS code snippet showing how to import fonts from Google Fonts using the @import directive.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Custom Fonts\nDESCRIPTION: Example of using multiple custom fonts (both web and local) in a Layout component.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-font.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} alignItems={'center'} layout>\n  <Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n  <Txt fontFamily={'Cascadia Code'}>Cascadia Code</Txt>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Grammar for Code Highlighting\nDESCRIPTION: Command to install the Lezer JavaScript grammar package for syntax highlighting.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lezer/javascript\n```\n\n----------------------------------------\n\nTITLE: Parallel Animation Example\nDESCRIPTION: Shows how to run multiple generator functions in parallel using yield.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nyield displaySubtitles();\nyield displayImages();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component Class in Motion Canvas\nDESCRIPTION: Demonstrates the basic structure of creating a custom component class that extends Node.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  // properties\n}\n\nexport class Switch extends Node {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Revideo Scene (TSX)\nDESCRIPTION: This snippet expands on the previous example by adding text to the scene along with the image.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/logical-separation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, Txt, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Img\n      width={'30%'}\n      ref={logoRef}\n      src={\n        'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n      }\n    />,\n  );\n\n  yield view.add(<Txt fill=\"red\" y={300} text={'Hello World!'} />);\n\n  yield* waitFor(5);\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Example - MDX\nDESCRIPTION: Example of MDX file with React imports and components that need to be stripped during conversion\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport AnimationPlayer from \"@site/src/components/AnimationPlayer\";\nimport ApiSnippet from \"@site/src/components/Api/ApiSnippet\";\n\n# Example Page\n\nThis is an example paragraph.\n\n<AnimationPlayer name=\"layout\" banner />\n\nThis is example paragraph number 2.\n\n```tsx\n<Rect layout>\n\t<Circle width={320} height={320} />\n</Rect>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Shape Components in React TSX\nDESCRIPTION: Demonstrates the structure of nested shape components with a Rect parent containing a Circle child element. The Circle component has specified width and height dimensions of 320 pixels.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/react-components-expected.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Rect layout>\n  <Circle width={320} height={320} />\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Implementing Caution Block in Markdown\nDESCRIPTION: Shows how to create a caution-style warning block using Markdown special syntax. Uses the [!CAUTION] directive to create a highlighted warning section.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/info-blocks-expected.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!CAUTION]\n>\n> This is a caution block.\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Array of Node References with makeRef() in Motion Canvas\nDESCRIPTION: Using makeRef() to create an array of node references by mapping over a range and storing each created node at the corresponding index in the array.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst circles: Circle[] = [];\nview.add(\n  <Layout>\n    {range(10).map(index => (\n      <Circle ref={makeRef(circles, index)} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: npm install Sequence for Bootstrapped Projects - Bash\nDESCRIPTION: Lists a typical set of commands to be executed after project scaffolding: navigate to the project directory, install dependencies, and start the application. Intended for users troubleshooting common post-setup npm issues.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd [path]\\nnpm install\\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Render Video with cURL\nDESCRIPTION: Example of how to make a POST request to the render endpoint using cURL. Shows how to include API key authentication, set content type, and provide variables and settings in the request body.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/platform/render-endpoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.re.video/v1/render/{your-deployment-id} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: <your-api-key>' \\\n  -d '{\n    \"variables\": {\n      \"text\": \"Hello world\",\n      \"color\": \"#FF0000\"\n    },\n    \"settings\": {\n      \"workers\": 5\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Motion Canvas with Vite Configuration\nDESCRIPTION: Basic setup for integrating Motion Canvas with Vite using the Motion Canvas Vite plugin. This defines the base configuration structure where custom options can be specified.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      // custom options\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with Custom Font CSS\nDESCRIPTION: Project configuration showing how to import the global CSS file containing font definitions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-font.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\n\nimport './global.css'; // <- import the css\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Meta Configuration - JavaScript\nDESCRIPTION: Example of _meta.js file structure for handling sidebar positions and descriptions in Nextra\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n\tmdx: \"\",\n\tssg: \"\",\n\ti18n: \"\",\n\timage: \"\",\n\tthemes: \"\",\n\tlatex: \"\",\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in ReVideo Scene\nDESCRIPTION: Shows how to get a reference to the Logger utility using useLogger hook within a ReVideo scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@revideo/2d';\nimport {useLogger} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const logger = useLogger();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: npm ENOENT Project Directory Error Trace - Bash\nDESCRIPTION: Demonstrates the typical output seen when running 'npm install' in the wrong directory without a package.json file. This error output can help diagnose path or initialization issues and is included for reference in troubleshooting steps.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm ERR! code ENOENT\\nnpm ERR! syscall open\\nnpm ERR! path [path]\\package.json\\nnpm ERR! errno -4058\\nnpm ERR! enoent ENOENT: no such file or directory, open '[path]\\package.json'\\nnpm ERR! enoent This is related to npm not being able to find a file.\\nnpm ERR! enoent\n```\n\n----------------------------------------\n\nTITLE: Installing Revideo SaaS Template Command\nDESCRIPTION: Command line instruction for initializing a new project using the Revideo SaaS template through NPM.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/saas-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @revideo@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom FFmpeg Path in Revideo Render Function\nDESCRIPTION: This code snippet demonstrates how to set a custom FFmpeg path when using the renderVideo function in Revideo. It allows users to specify their own FFmpeg binary location instead of using the default one.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/common-issues/ffmpeg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderVideo} from '@revideo/renderer';\n\n// ...\n\nawait renderVideo('./src/project.ts', undefined, undefined, {\n  ffmpeg: {\n    // Points to the global ffmpeg installation,\n    ffmpegPath: 'ffmpeg',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Scene Hierarchy Structure Visualization in Mermaid\nDESCRIPTION: A mermaid diagram showing the tree structure of a scene hierarchy with a Scene View as the root, containing a Circle and Layout, with the Layout containing a Rectangle and Text node.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/hierarchy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  view[Scene View]\n  circle([Circle])\n  layout([Layout])\n  rect([Rect])\n  text([text 'Hi'])\n    view-->circle;\n    view-->layout;\n    layout-->rect;\n    layout-->text;\n```\n\n----------------------------------------\n\nTITLE: Loading Web Fonts in global.css\nDESCRIPTION: Example of importing Google Fonts using CSS @import statement.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/custom-font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n```\n\n----------------------------------------\n\nTITLE: Installing @revideo/player-react via npm - Bash\nDESCRIPTION: This Bash command installs the @revideo/player-react package as a dependency in your project using npm. It is a prerequisite for all subsequent steps involving the Revideo Player. Run this command inside your React project directory before attempting to use the player component.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/player-react/player.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @revideo/player-react\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure for Web Fonts\nDESCRIPTION: File structure changes required to add CSS for web fonts, showing the addition of a global.css file in the project root.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nroot\n└─src\n  ├─scenes/\n  ├─revideo.d.ts\n  ├─project.meta\n  ├─project.ts\n+ └─global.css\n```\n\n----------------------------------------\n\nTITLE: Info Block Conversion - MDX\nDESCRIPTION: Example of converting Docusaurus info block syntax to Nextra callout syntax\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n:::info\nThis is an info block in the old docs.\n:::\n```\n\nLANGUAGE: mdx\nCODE:\n```\n> [!INFO]\n>\n> This is an info block in the old docs.\n```\n\n----------------------------------------\n\nTITLE: Using createRefArray() for Node Collections in Motion Canvas\nDESCRIPTION: Using the createRefArray() helper function to create an array of node references, which automatically appends each referenced node to the array.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/references.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefArray, range} from '@revideo/core';\n\n// ...\n\nconst circles = createRefArray<Circle>();\nview.add(\n  <Layout>\n    {range(10).map(() => (\n      <Circle ref={circles} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Font Families with CSS\nDESCRIPTION: CSS import statement to load Lexend and Noto Color Emoji fonts from Google Fonts for consistent text and emoji rendering.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/emojis.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Lexend:wght@600&family=Noto+Color+Emoji&display=swap');\n```\n\n----------------------------------------\n\nTITLE: Manually Building the Revideo Project\nDESCRIPTION: This command builds the Revideo project without using the CLI to serve it. The resulting build is stored in an 'out' directory. It requires npm to execute.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/player-react/player.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Revideo Preview Server\nDESCRIPTION: Command to start the preview server for developing the video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Rect and Circle Layout Component\nDESCRIPTION: TSX component structure showing a Rect component with layout prop containing a Circle component with specific dimensions.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/react-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Rect layout>\n  <Circle width={320} height={320} />\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Animating Circle Properties in Motion Canvas\nDESCRIPTION: This snippet shows how to animate a circle's fill color and position in Motion Canvas. It uses the all function to run multiple animations concurrently.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nyield *\n  all(\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n    myCircle().position.x(300, 1).to(-300, 1),\n  );\n```\n\n----------------------------------------\n\nTITLE: Building Revideo Project Manually - Bash\nDESCRIPTION: This Bash command runs the npm build script, compiling the current Revideo project and outputting static assets to an 'out' directory. These assets can be deployed to any public web server. Use this if you choose not to use the CLI server and need production-ready static files.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/player-react/player.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Bash Command\nDESCRIPTION: Command to execute the automated tests for the conversion script\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Font Import\nDESCRIPTION: Project setup file that imports the global CSS containing font definitions and configures the scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/designing-animations/emojis.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\nimport './global.css';\n\nexport default makeProject({\n  scenes: [text],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Revideo SaaS Template via NPM\nDESCRIPTION: Command to initialize a new project using the Revideo SaaS Template through NPM. This command allows users to select the template when creating a new Revideo project.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/saas-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @revideo@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Emoji and Text Fonts in CSS\nDESCRIPTION: This CSS snippet imports the Lexend font for text and Noto Color Emoji font for emojis using Google Fonts. It ensures consistent emoji rendering across different browsers.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/emojis.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Lexend:wght@600&family=Noto+Color+Emoji&display=swap');\n```\n\n----------------------------------------\n\nTITLE: Executing Motion Canvas Project Creation Command\nDESCRIPTION: This bash command initializes a new Motion Canvas project using npm. It's used in the troubleshooting section as an alternative to the standard npm init command.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec @revideo/create@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Dependencies\nDESCRIPTION: Commands to navigate to the project directory and install dependencies.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/installation-and-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd <project-path>\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Revideo\nDESCRIPTION: Configuration for Vite bundler with Revideo plugin, including custom output directory and port settings.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/project-structure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      output: './other-output-folder',\n      project: './src/project2.ts',\n    }),\n  ],\n  server: {\n    port: 5000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Crawler Access with Robots.txt\nDESCRIPTION: Blocks all web crawlers from accessing any content on the domain new.docs.re.video during site migration phase. Uses standard robots.txt syntax to specify User-agent and Disallow directives.\nSOURCE: https://github.com/redotvideo/docs/blob/main/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Implementing Properties in Custom Component Class for Motion Canvas\nDESCRIPTION: Shows how to implement properties in a custom component class using Motion Canvas decorators like @initial and @signal.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  @initial(false)\n  @signal()\n  public declare readonly initialState: SimpleSignal<boolean, this>;\n\n  @initial('#68ABDF')\n  @colorSignal()\n  public declare readonly accent: ColorSignal<this>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Pass Signals to Code Snippets\nDESCRIPTION: Shows another incorrect approach to using signals in code snippets, where passing an uninvoked signal results in the function being stringified.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    // prettier-ignore\n    ,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Revideo Server using CLI\nDESCRIPTION: Command to start the Revideo server that serves the project on port 4000. The server watches for changes and automatically rebuilds the project.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Revideo development server for preview\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updated Player Component Usage for Revideo 0.4.x\nDESCRIPTION: This snippet demonstrates the updated way of using the Player component in Revideo 0.4.x, where the player source is now referenced from localhost:4000/player.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.3.x_to_0.4.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Player src=\"http://localhost:4000/player\" controls={true} />\n```\n\n----------------------------------------\n\nTITLE: Setting Text Properties with Signals in TSX\nDESCRIPTION: Demonstrates how to set and reset node properties using signals and the DEFAULT symbol.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/signals.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst text = createRef<Txt>();\nview.add(\n  <Txt lineHeight={'150%'} ref={text}>\n    Hello world!\n  </Txt>,\n);\n\ntext().lineHeight(DEFAULT);\n```\n\n----------------------------------------\n\nTITLE: Starting Render Job Endpoint Request - Bash\nDESCRIPTION: This example POST request to the `/render` endpoint triggers a video rendering process using specified `variables` and `settings`. It requires a running Revideo server and passes JSON data containing rendering parameters. The expected output is a response with a download URL after rendering completes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"settings\": { \"workers\": 2 }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Querying Positions and Sizes in TypeScript React\nDESCRIPTION: Demonstrates how to use getSelectionBBox to retrieve the position and size of a range of characters. Shows drawing a rectangle around a specific word in the code.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code ref={code} code={`console.log('Hello, world!');`} />\n  );\n\n  const range = createSignal(() => {\n    const range = code().findFirstRange('log');\n    const bboxes = code().getSelectionBBox(range);\n    // \"getSelectionBBox\" returns an array of bboxes,\n    // one for each line in the range. You can just\n    // use the first one for this example.\n    const first = bboxes[0];\n    return first.expand([4, 8]);\n  });\n\n  code().add(\n    <Rect\n      width={() => range().width}\n      height={() => range().height}\n      x={() => range().x}\n      y={() => range().y}\n      fill=\"#88888844\"\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter\nDESCRIPTION: Frontmatter configuration for documentation page that sets the sidebar position to 1\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/first.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Installing NSCD to Fix FFmpeg Segmentation Fault\nDESCRIPTION: Command to install nscd package on Linux systems to resolve FFmpeg segmentation faults when using remote media URLs.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/common-issues/ffmpeg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nscd\n```\n\n----------------------------------------\n\nTITLE: Early Scene Transition with Animation Continuation\nDESCRIPTION: Example showing how to trigger a scene transition early while continuing animation using the finishScene function.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/transitions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  yield* animationOne();\n  // trigger the transition early:\n  finishScene();\n  // continue animating:\n  yield* animationTwo();\n});\n```\n\n----------------------------------------\n\nTITLE: Running npm exec for Package Initialization - Bash\nDESCRIPTION: Provides an alternative npm CLI command to initialize a new @revideo-based project in case the standard initializer fails. This command downloads and runs the latest package generator. Requires a working npm installation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec @revideo/create@latest\n```\n\n----------------------------------------\n\nTITLE: Animated Sound Wave Example with Random Values\nDESCRIPTION: Import statement showing source code reference for an animation example using random values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/random.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport source from '!!raw-loader!@revideo/examples/src/scenes/random';\n```\n\n----------------------------------------\n\nTITLE: Optimized Subtitle Implementation with Isolated Container\nDESCRIPTION: Improved implementation using a separate Layout container for text nodes. This prevents unnecessary reloading of the video element when text changes, significantly improving performance.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/performance/node-parent-reloading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Txt, Video, Layout, makeScene2D} from '@revideo/2d';\nimport {useScene, waitFor, createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textContainer = createRef<Layout>();\n  const words = [\n    'Here',\n    'are',\n    'some',\n    'subtitles',\n    'added',\n    'to',\n    'the',\n    'video',\n  ];\n\n  yield view.add(\n    <>\n      <Video\n        src={'https://revideo-example-assets.s3.amazonaws.com/beach-3.mp4'}\n        play={true}\n        size={['100%', '100%']}\n      />\n      <Layout size={['100%', '100%']} ref={textContainer} />\n    </>,\n  );\n\n  for (const w of words) {\n    const textRef = createRef<Txt>();\n    yield textContainer().add(\n      <Txt\n        fontFamily={'Sans-Serif'}\n        fill={'white'}\n        fontSize={40}\n        ref={textRef}\n        text={w}\n      />,\n    );\n    yield* waitFor(0.3);\n    textRef().remove();\n  }\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the CODE Tag Function with Signals\nDESCRIPTION: Demonstrates the correct way to use signals in code snippets using the CODE tag function, which enables reactive updates when signal values change.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    ,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // Now the code snippet is updated accordingly.\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested File Path in Markdown Frontmatter\nDESCRIPTION: Markdown frontmatter configuration that sets up sidebar position and custom URL slug for a nested documentation file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/nested-file.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 2\nslug: /nested/file\n---\n```\n\n----------------------------------------\n\nTITLE: Player Component URL in Revideo v0.4.x\nDESCRIPTION: Updated Player component implementation for version 0.4.x, showing the simplified player URL structure.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.3.x_to_0.4.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Player src=\"http://localhost:4000/player\" controls={true} />\n```\n\n----------------------------------------\n\nTITLE: Callback Response Format\nDESCRIPTION: JSON structure that will be sent to the callback URL if provided in the request. Contains the URL of the rendered video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/platform/render-endpoint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resultUrl\": \"https://<revideo-storage-url>.com/<your-video-id>.mp4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Revideo 0.2.x\nDESCRIPTION: This snippet shows the Vite configuration for Revideo version 0.2.x, which includes both the motionCanvas and ffmpeg plugins.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.2.x_to_0.3.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\nimport ffmpeg from '@revideo/ffmpeg';\n\nexport default defineConfig({\n  plugins: [motionCanvas(), ffmpeg()],\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example Function\nDESCRIPTION: A simple TypeScript function demonstration that returns a string value.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/code-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction example() {\n  return \"This is an example\";\n}\n```\n\n----------------------------------------\n\nTITLE: Old Docusaurus Header Format - MDX\nDESCRIPTION: Example of header format in old Docusaurus documentation with sidebar position and custom slug\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\nsidebar_position: 2\nslug: /ffmpeg/concatenateMedia\n---\n```\n\n----------------------------------------\n\nTITLE: Response Format Without Callback URL\nDESCRIPTION: JSON response structure when no callback URL is provided in the request. Returns the URL of the rendered video.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/platform/render-endpoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resultUrl\": \"https://<revideo-storage-url>.com/<your-video-id>.mp4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Conversion Script - Bash Commands\nDESCRIPTION: Commands to install dependencies and run the conversion script\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install  # Install dependencies (only needed once)\nnpm run convert\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variable Declaration\nDESCRIPTION: Basic JavaScript code showing variable declaration and console logging.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/code-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst x = 1;\nconsole.log(x);\n```\n\n----------------------------------------\n\nTITLE: Custom Spring Description for Animation\nDESCRIPTION: Defines a custom spring with specific physical properties (mass, stiffness, damping, and initial velocity) for use in spring-based animations.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/tweening.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst MySpring = {\n  mass: 0.04,\n  stiffness: 10.0,\n  damping: 0.7,\n  initialVelocity: 8.0,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering with Callback URL\nDESCRIPTION: Example of initiating a render job with a callback URL. This method allows the server to send a response to the specified URL once the rendering process is complete.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"callbackUrl\": \"http://your-callback-url.com/render-status\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Terminal commands for navigating to project directory and installing dependencies\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/installation-and-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd <project-path>\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Revideo\nDESCRIPTION: Demonstrates the standard logging functions available in Revideo: debug, info, warn, and error. These messages will be displayed in the Console tab of the UI.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/logging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlogger.debug('Just here to debug some code.');\nlogger.info('All fine just a little info.');\nlogger.warn('Be careful something has gone wrong.');\nlogger.error('Ups. An error occured.');\n```\n\n----------------------------------------\n\nTITLE: Player Component URL in Revideo v0.3.x\nDESCRIPTION: Example of Player component implementation in version 0.3.x, showing the old project.js URL structure.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/upgrading/from_0.3.x_to_0.4.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Player src=\"http://localhost:4000/player/project.js\" controls={true} />\n```\n\n----------------------------------------\n\nTITLE: React Component Definition\nDESCRIPTION: Simple React component that renders a div with 'Hello World' text.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/code-blocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  return <div>Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings with Code Snippets\nDESCRIPTION: Shows how to add a Code component to the view. This snippet is incomplete but demonstrates where code would be added in a typical scene setup.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/code-animations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  ,\n);\n```\n\n----------------------------------------\n\nTITLE: Listing TODO Items for Revideo Documentation Migration in Markdown\nDESCRIPTION: A markdown checklist of tasks to be completed for the Revideo documentation migration project. It includes items such as deployment, typescript conversion, UI updates, content additions, and technical improvements.\nSOURCE: https://github.com/redotvideo/docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### TODO\n\nThese are just some of the things that are currently missing:\n\n-   [x] Deploy to a temporarysubdomain (maybe new.docs.re.video)\n-   [x] Change app to typescript\n-   [ ] Update header of nextra template and make it pretty,\n-   [ ] Update metadata in layout.jsx\n-   [ ] Remove blog while we don't have any content\n-   [ ] Fix order of sidebar\n-   [ ] Add redirects for old docs\n-   [ ] Fix preview of Revideo code\n-   [ ] Add search\n-   [ ] Add analytics\n-   [ ] Add blog content\n-   [ ] Add landing page\n-   [ ] Add sitemap\n```\n\n----------------------------------------\n\nTITLE: Custom Vite Configuration for Revideo\nDESCRIPTION: This example demonstrates how to customize the Vite configuration for Revideo projects, including specifying a custom output folder, project file, and server port.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/project-structure.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      output: './other-output-folder',\n      project: './src/project2.ts',\n    }),\n  ],\n  server: {\n    port: 5000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Reference Existence in `createRefMap` (TSX)\nDESCRIPTION: Shows how to safely check if a reference for a given key exists within a `createRefMap` object using the JavaScript `in` operator (e.g., `'d' in labels`). This prevents accidental creation of a new, empty reference if the key hasn't been used in a `ref` prop yet.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nif ('d' in labels) {\n  yield * labels.d().text('D changes', 0.3);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Code Manipulation with insert/replace/remove in Revideo\nDESCRIPTION: Demonstrates basic code manipulation operations using insert(), replace(), and remove() methods with the Code component.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, word, lines} from '@revideo/2d';\nimport {all, createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  console.log('Hello!');\n}`}\n    />,\n  );\n\n  // insert code at line 2, column 0\n  yield* code().code.insert([2, 0], '  return 7;\\n', 0.6);\n\n  // replace the word \"Hello!\" with \"Goodbye!\"\n  yield* code().code.replace(word(1, 15, 6), 'Goodbye!', 0.6);\n\n  // remove line 2\n  yield* code().code.remove(lines(2), 0.6);\n\n  // animate multiple changes at the same time\n  yield* all(\n    code().code.replace(word(0, 9, 7), 'greet', 0.6),\n    code().code.replace(word(1, 15, 8), 'Hello!', 0.6),\n  );\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Using `ref` Property with Callback for Node Reference (TSX)\nDESCRIPTION: Shows the fundamental usage of the built-in `ref` property on a node. It accepts a callback function that receives the newly created node instance, allowing manual assignment to an external variable (`circle`). This method forms the basis for helper functions but is less practical for direct use.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/references.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet circle: Circle;\nview.add(\n  <Circle\n    ref={instance => {\n      circle = instance;\n    }}\n  />,\n);\n\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Using useDuration for Dynamic Animation Length\nDESCRIPTION: Demonstrates how to use the useDuration function to control animation duration based on time events.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/time-events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().scale(2, useDuration('event'));\n```\n\n----------------------------------------\n\nTITLE: Code Profiling with ReVideo Logger\nDESCRIPTION: Demonstrates how to profile code execution time using the Logger's profile method.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/logging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nlogger.profile('id'); // <-- starts the profiling\n// some expensive calculation\nlogger.profile('id'); // <-- ends the profiling\n```\n\n----------------------------------------\n\nTITLE: Using a Simple for Loop for Sequential Animations\nDESCRIPTION: A sequential animation approach that yields each generator separately in a for loop and then waits for their combined duration, useful for specific timing scenarios.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfor (const rect of rects) {\n  // Note the absence of a * after this yield\n  yield rect.position.y(100, 1).to(-100, 2).to(0, 1);\n}\n\n// Wait for the duration of the above generators\nyield * waitFor(4);\n```\n\n----------------------------------------\n\nTITLE: Code Diffing Animation Example\nDESCRIPTION: Demonstrates code animation using the diffing technique.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  const number = 9;\n}`}\n    />,\n  );\n\n  yield* code().code('const nine = 9;', 0.6).wait(0.6).back(0.6).wait(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ReVideo Project with Syntax Highlighting\nDESCRIPTION: Project configuration setup for enabling JavaScript syntax highlighting in ReVideo.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\n\nimport {Code, LezerHighlighter} from '@revideo/2d';\nimport {parser} from '@lezer/javascript';\n\nCode.defaultHighlighter = new LezerHighlighter(parser);\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Motion Canvas Transitions\nDESCRIPTION: Shows the folder structure for a Motion Canvas project with multiple scenes. This structure is necessary for implementing transitions between scenes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/transitions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-animation/\n└─ src/\n   ├─ scenes/\n   │  ├─ firstScene.tsx\n   │  └─ secondScene.tsx\n   └─ project.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rust Code Component in Revideo (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a custom Rust Code component using the withDefaults helper function. It sets up a RustCode component with a predefined Rust syntax highlighter.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/code-animations.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter, withDefaults} from '@revideo/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\nexport const RustCode = withDefaults(Code, {\n  highlighter: RustHighlighter,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Revideo 0.3.x\nDESCRIPTION: This snippet demonstrates the updated Vite configuration for Revideo version 0.3.x, where the ffmpeg plugin is removed as it's now integrated into the core library.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/upgrading/from_0.2.x_to_0.3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Setup\nDESCRIPTION: Shows how to configure a Revideo project by defining scenes and variables in project.ts file.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/project-structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\nimport example2 from './scenes/example2?scene';\n\nexport default makeProject({\n  scenes: [example, example2],\n  variables: {\n    video: 'https://revideo-example-assets.s3.amazonaws.com/beach.mp4',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading External Image with Yield in Revideo\nDESCRIPTION: Demonstrates how to properly use yield when adding an image node that loads content from an external URL, ensuring the promise is resolved before continuing.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/understanding-scene-flow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(\n  <Img\n    src={\n      'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n    }\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Animating Circle Fill Color with Tweening in Motion Canvas\nDESCRIPTION: A code snippet showing how to use the built-in tweening capability to animate a property (fill color) over time, demonstrating the transition between values.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/flow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects in Motion Canvas\nDESCRIPTION: Example configuration for specifying multiple project files, which enables a project selection screen in the editor. This allows switching between animation projects without restarting Vite.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmotionCanvas({\n  project: [\n    // highlight-start\n    './src/firstProject.ts',\n    './src/secondProject.ts',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Example Scene Definition in TypeScript/TSX\nDESCRIPTION: Demonstrates how to create a basic video scene using makeScene2D with a video element that plays for 10 seconds.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/project-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const videoFile = useScene().variables.get(\n    'video',\n    'https://revideo-example-assets.s3.amazonaws.com/stars.mp4',\n  )();\n\n  yield view.add(<Video src={videoFile} size={['100%', '100%']} play={true} />);\n\n  yield* waitFor(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Callback Response for Render Job (Success) - Bash\nDESCRIPTION: This bash example represents a successful callback response sent to the specified callback URL indicating completion of a video render job, containing a `downloadLink` for the rendered video. After receiving this, the client can fetch the video using the link provided.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST <callbackUrl> \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"jobId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"status\": \"success\",\n  \"downloadLink\": \"http://your-revideo-service.com/download/42078492-fbb9-4570-a329-785e87456618.mp4\"\n}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET http://your-revideo-service.com/download/42078492-fbb9-4570-a329-785e87456618.mp4\n```\n\n----------------------------------------\n\nTITLE: Scene Hierarchy Visualization\nDESCRIPTION: Mermaid diagram showing the tree structure of the scene hierarchy with Scene View as root and various components as children.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/motion-canvas/hierarchy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  view[Scene View]\n  circle([Circle])\n  layout([Layout])\n  rect([Rect])\n  text([text 'Hi'])\n    view-->circle;\n    view-->layout;\n    layout-->rect;\n    layout-->text;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReVideo Project with Custom CSS in TypeScript\nDESCRIPTION: This TypeScript code imports the custom CSS file into the ReVideo project configuration. It sets up the project structure and includes the necessary scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/designing-animations/emojis.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeProject} from '@revideo/core';\nimport example from './scenes/example?scene';\nimport './global.css';\n\nexport default makeProject({\n  scenes: [text],\n});\n```\n\n----------------------------------------\n\nTITLE: Building Revideo Project Manually\nDESCRIPTION: Command to manually build the Revideo project, generating files in the dist directory for deployment.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/guide/building-webapps/using-the-player.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Streaming Progress for Render Job\nDESCRIPTION: Curl command demonstrating how to initiate a render job with progress streaming enabled by setting the streamProgress parameter to true.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/guide/building-webapps/rendering-endpoint.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://your-revideo-service.com/render \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"variables\": {\n      \"image\": \"some-image.png\",\n      \"color\": \"red\"\n    },\n    \"settings\": { \"workers\": 2 },\n    \"streamProgress\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Caution Block Markdown Syntax\nDESCRIPTION: Example showing the syntax for creating a caution block admonition in documentation.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/info-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::caution\nThis is a caution block.\n:::\n```\n\n----------------------------------------\n\nTITLE: Serving Revideo Project Locally Using CLI\nDESCRIPTION: The snippet demonstrates the usage of the Revideo CLI to start a local server that builds and serves the project assets. It requires the Revideo CLI to be installed globally. The command utilizes 'npx' to run the 'revideo serve' command, thereby creating a dev environment to test the player.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/player-react/player.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component in Motion Canvas\nDESCRIPTION: Demonstrates how to use a custom Switch component in a Motion Canvas scene.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/motion-canvas/custom-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch initialState={false} />\n```\n\n----------------------------------------\n\nTITLE: Installing Revideo React Player Package\nDESCRIPTION: The snippet provides the command for installing the Revideo React player package, which is necessary to embed videos using the player. It needs npm as a dependency and accesses the npm registry.\nSOURCE: https://github.com/redotvideo/docs/blob/main/src/content/api-reference/player-react/player.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @revideo/player-react\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Conversion Script Tests\nDESCRIPTION: Commands for installing dependencies and executing the test suite for the Docusaurus to Nextra conversion script. Must be run from the scripts directory.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install  # Install dependencies (only needed once)\nnpm test     # Run the tests\n```\n\n----------------------------------------\n\nTITLE: Importing Custom React Components\nDESCRIPTION: Imports custom React components AnimationPlayer and ApiSnippet from the site components directory.\nSOURCE: https://github.com/redotvideo/docs/blob/main/scripts/__tests__/fixtures/react-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport AnimationPlayer from \"@site/src/components/AnimationPlayer\";\nimport ApiSnippet from \"@site/src/components/Api/ApiSnippet\";\n```\n\n----------------------------------------\n\nTITLE: Embedding Revideo Player from Hosted Directory in React - TSX\nDESCRIPTION: This TSX code snippet shows how to import the Player from @revideo/player-react and embed it by specifying a src prop referencing a custom public directory (e.g., https://example.com/outDir). It is used when the player assets are manually deployed to a specific web-accessible directory. The directory and its URL must be accessible from the client browser at runtime.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/player-react/player.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@revideo/player-react';\n\n<Player src=\"https://example.com/outDir\" />;\n```\n\n----------------------------------------\n\nTITLE: Serving Revideo Project using CLI - Bash\nDESCRIPTION: This Bash command uses npx to invoke the 'revideo serve' CLI which starts a local development server, building and serving all required assets. The local server enables testing and immediate feedback by exposing your player at http://localhost:4000/player. Run this inside your Revideo project directory for development or preview purposes.\nSOURCE: https://github.com/redotvideo/docs/blob/main/docs-old/docs/api-reference/player-react/player.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx revideo serve\n```"
  }
]