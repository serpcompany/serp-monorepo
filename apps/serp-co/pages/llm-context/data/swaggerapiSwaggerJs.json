[
  {
    "owner": "swagger-api",
    "repo": "swagger-js",
    "content": "TITLE: Making POST Request with Swagger-JS HTTP Client\nDESCRIPTION: Demonstrates how to make a POST HTTP request using the Swagger-JS HTTP Client. The request includes a URL, method, body, and headers.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/post',\n  mode: 'cors',\n  method: 'POST',\n  body: { data: 3 },\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nSwaggerClient.http(request); // => Promise(Response)\n```\n\n----------------------------------------\n\nTITLE: Resolving OpenAPI Definition from URL\nDESCRIPTION: Shows how to resolve an OpenAPI definition from a remote URL using SwaggerClient.resolve. The example uses the Swagger Petstore OpenAPI definition.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nSwaggerClient.resolve({ url: 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/master/src/main/resources/openapi.yaml'});\n/**\n * Promise({\n *   spec: ...resolved pet store...,\n *   errors: []\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Response Interceptors in Swagger-js\nDESCRIPTION: Demonstrates how to create a pipeline of response interceptors using a compose/pipe pattern. This allows for modular and reusable interceptor functions that process the response in sequence.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pipeP = (...fns) => args => fns.reduce((arg, fn) => arg.then(fn), Promise.resolve(args))\n\nconst interceptor1 = res => {\n  res.prop += 'value1';\n  return res;\n}\nconst interceptor2 = async res => {\n  res.prop += '+value2';\n  return Promise.resolve(res);\n};\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  responseInterceptor: pipeP(interceptor1, interceptor2),\n};\n\nSwaggerClient.http(request); \n/**\n * Promise({\n *   ok: true,\n *   status: 200,\n *   statusText: 'OK', \n *   url: 'https://httpbin.org/',\n *   headers: {...},\n *   text: '{\"prop\":\"value\"}',\n *   data: '{\"prop\":\"value\"}',\n *   body: {prop: 'value'},\n *   obj: {prop: 'value'},\n *   prop: 'value1+value2',\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Building SwaggerClient Request Manually\nDESCRIPTION: Demonstrates how to manually build a request object using SwaggerClient.buildRequest and execute it with the HTTP client. Shows request configuration and resulting request object structure.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = SwaggerClient.buildRequest({\n  spec: pojoDefinition,\n  operationId: 'getUserList',\n  parameters: { q: 'search string' },\n  securities: { authorized: { BearerAuth: \"3492342948239482398\" }},\n  responseContentType: 'application/json',\n});\n/*\n * {\n *   url: 'http://localhost:8080/users?q=search%20string',\n *   credentials: 'same-origin',\n *   headers: {\n *     accept: 'application/json',\n *     Authorization: 'Bearer 3492342948239482398'\n *   },\n *   method: 'GET'\n * }\n */\n\nSwaggerClient.http(request); // => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: SwaggerClient Operation Execution Examples\nDESCRIPTION: Examples of executing OpenAPI operations using SwaggerClient.execute with different configurations including operationId and path-based execution.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nSwaggerClient.execute({\n  spec: pojoDefinition,\n  operationId: 'getUserList',\n  parameters: { q: 'search string' }, \n  securities: { authorized: { BearerAuth: \"3492342948239482398\" } },\n}); // => Promise.<Response>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nSwaggerClient.execute({\n  spec: pojoDefinition,\n  pathName: '/users',\n  method: 'get',\n  parameters: { q: 'search string' },\n  securities: { authorized: { BearerAuth: \"3492342948239482398\" } },\n}); // => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: Aborting SwaggerClient Requests in Node.js\nDESCRIPTION: This snippet shows how to use AbortController with SwaggerClient in a Node.js environment. It requires the 'abort-controller' npm package for AbortController functionality. The code demonstrates setting up a timeout to abort the request and handling the AbortError.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst SwaggerClient = require('swagger-client');\nconst AbortController = require('abort-controller');\n\nconst controller = new AbortController();\nconst { signal } = controller;\nconst timeout = setTimeout(() => {\n  controller.abort();\n}, 1);\n\n(async () => {\n  try {\n    await new SwaggerClient({ spec })\n      .then(client => client.apis.default.getUserList({}, { signal }))\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('request was aborted');\n    }\n  } finally {\n    clearTimeout(timeout);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: URL-based SwaggerClient Instantiation\nDESCRIPTION: Shows different ways to instantiate SwaggerClient using URLs to OpenAPI definitions.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient('https://raw.githubusercontent.com/swagger-api/swagger-petstore/master/src/main/resources/openapi.yaml').then(swaggerClient => {\n  swaggerClient.spec;\n  swaggerClient.errors;\n});\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Client from SwaggerClient Instance\nDESCRIPTION: This snippet demonstrates an alternative approach to calling the HTTP client from a SwaggerClient instance. After instantiating SwaggerClient with a spec URL, you can access the HTTP client via the client property.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst { client } = new SwaggerClient({ spec: 'http://petstore.swagger.io/v2/swagger.json' });\nclient.http(request);\n```\n\n----------------------------------------\n\nTITLE: Alternative SwaggerClient API Usage\nDESCRIPTION: Shows how to use SwaggerClient's execute method through a client instance. Demonstrates promise-based API calls with operation ID and parameters.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient({ spec: pojoDefinition, authorizations: { BearerAuth: \"3492342948239482398\" } })\n  .then(\n    client => client.execute({\n      operationId: 'getUserList',\n      parameters: { q: 'search string' },\n    })\n  ); // => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Request in Response Interceptor\nDESCRIPTION: Shows how to access the original request object inside a response interceptor by using a function declaration or expression instead of arrow functions. The interceptor is bound to the request context.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  responseInterceptor: function(res) {\n    const request = this;\n    console.log(request.url); // https://httpbin.org/\n    console.log(request.method); // GET\n    \n    res.arbitraryProp = 'arbitrary value';\n    return res;\n  },\n};\n\nSwaggerClient.http(request); \n```\n\n----------------------------------------\n\nTITLE: Using swagger-client with unpkg CDN in HTML\nDESCRIPTION: Complete HTML example demonstrating how to use swagger-client directly in a web page via unpkg CDN. The example shows how to initialize the client with a Swagger specification and make an API call.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/installation.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>SwaggerClient test</title>\n    <script src=\"https://unpkg.com/swagger-client\"></script>\n    <script>\n      new SwaggerClient('http://petstore.swagger.io/v2/swagger.json')\n        .then(\n          client => client.apis.pet.addPet({ id: 1, body: { name: \"bobby\" } }),\n          reason => console.error('failed to load the spec: ' + reason)\n        )\n        .then(\n          addPetResult => console.log(addPetResult.body),\n          reason => console.error('failed on api call: ' + reason)\n        );\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SwaggerClient Configuration Options\nDESCRIPTION: Shows the basic configuration options available when initializing SwaggerClient\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient({ \n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  disableInterfaces: false,\n  v2OperationIdCompatibilityMode: false,\n  ...other options...\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication for Remote OpenAPI References\nDESCRIPTION: Demonstrates how to add authentication to requests when resolving remote OpenAPI references using a requestInterceptor.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst requestInterceptor = request => {\n  if (request.loadSpec) {\n    request.headers['Authorization'] = 'Bearer Asdf1234ThisIsMyToken';\n  }\n\n  return request;\n};\n\nSwaggerClient.resolve({ \n  url: 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/master/src/main/resources/openapi.yaml',\n  requestInterceptor,\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving JSON References in POJO OpenAPI Definition\nDESCRIPTION: Demonstrates how to resolve JSON references in a Plain Old JavaScript Object (POJO) using the SwaggerClient.resolve method. The example shows resolving a simple reference to another property within the same object.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pojoDefinition = {\n  a: 1,\n  b: {\n    $ref: '#/a',\n  }\n};\n\nSwaggerClient.resolve({ spec: pojoDefinition }); \n/**\n * Promise({\n *   spec: {\n *      \"a\": 1,\n *      \"b\": 1\n *   },\n *   errors: []\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Using Async Response Interceptor in Swagger-js\nDESCRIPTION: Shows how to implement an asynchronous response interceptor that makes an additional HTTP request and incorporates the result into the response. This allows for complex workflows like token retrieval.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  responseInterceptor: async res => {\n    const { body: { idToken } } = await SwaggerClient.http({ url: 'https://identity.com/idtoken.json' });\n    res.idToken = idToken;\n    return res;\n  },\n};\n\nSwaggerClient.http(request); \n/**\n * Promise({\n *   ok: true,\n *   status: 200,\n *   statusText: 'OK', \n *   url: 'https://httpbin.org/',\n *   headers: {...},\n *   text: '{\"prop\":\"value\"}',\n *   data: '{\"prop\":\"value\"}',\n *   body: {prop: 'value'},\n *   obj: {prop: 'value'},\n *   idToken: '308949304832084320',\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Request Object with Request Class\nDESCRIPTION: Shows how to create a request object using the Fetch-compatible Request class. This can be a native browser implementation or from a third-party library like cross-fetch.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = new Request('https://httpbin.org/post', {\n  mode: 'cors',\n  method: 'POST',\n  body: { data: 3 },\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sub-Tree Reference Resolution\nDESCRIPTION: Shows how to resolve references in a specific part of the OpenAPI definition tree using resolveSubtree.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pojoDefinition = {\n  a: 1,\n  b: {\n    $ref: '#/a',\n  }\n};\n\nSwaggerClient.resolveSubtree(pojoDefinition, ['b']);\n/**\n * Promise({\n *   spec: 1,\n *   errors: [],  \n * } \n */\n```\n\n----------------------------------------\n\nTITLE: Converting Callbacks to Promises in API Calls\nDESCRIPTION: Shows how to migrate from success/error callbacks to promise-based approach for API calls.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.apis.pet\n  .findPetById(\n    { petId: 3 },\n    data => { /* success callback */},\n    error => { /* error callback */ }\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.apis.pet.findPetById({ petId: 3 })\n  .then(data => { /* success callback */})\n  .catch(error => {/* error callback */ });\n```\n\n----------------------------------------\n\nTITLE: Request Cancellation Implementation with AbortController\nDESCRIPTION: Example showing how to implement request cancellation using AbortController in Node.js environment.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst SwaggerClient = require('swagger-client');\nconst AbortController = require('abort-controller');\n\nconst controller = new AbortController();\nconst { signal } = controller;\nconst timeout = setTimeout(() => {\n  controller.abort();\n}, 1);\n\n(async () => {\n  try {\n    await SwaggerClient.execute({\n      spec,\n      pathName: '/users',\n      method: 'get',\n      parameters: { q: 'search string' },\n      securities: { authorized: { BearerAuth: \"3492342948239482398\" } },\n      signal,\n    });\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('request was aborted');\n    }\n  } finally {\n    clearTimeout(timeout);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing swagger-client with ES6 Modules\nDESCRIPTION: Example of how to import the swagger-client package using ES6 import syntax. This approach is suitable for modern JavaScript environments and bundlers.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Fetch-Compatible Interface\nDESCRIPTION: Shows how to make a POST HTTP request using the Swagger-JS HTTP Client with a Fetch-compatible interface. The URL is provided separately from the request object.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst url = 'https://httpbin.org/post';\nconst request = {\n  url, // notice the url must always be part of Request object\n  mode: 'cors',\n  method: 'POST',\n  body: { data: 3 },\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nSwaggerClient.http(url, request); // => Promise(Response)\n```\n\n----------------------------------------\n\nTITLE: Duplicate OperationId Handling\nDESCRIPTION: Demonstrates how SwaggerClient handles duplicate operationIds by appending numbers to keep them unique\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /one:\n    get:\n      summary: Gets one  \n      operationId: operation   \n  /two:\n    get: \n      summary: Gets two\n      operationId: operation\n  /three:\n    get:\n      summary: Gets three\n      operationId: operation\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient({ spec })\n  .then(client => Promise.all([\n    client.apis.default.operation1(...),\n    client.apis.default.operation2(...),\n    client.apis.default.operation3(...),\n  ]));\n// => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: Browser Implementation with AbortController\nDESCRIPTION: Example showing how to use SwaggerClient in a browser environment with AbortController for request cancellation. Demonstrates error handling and timeout implementation.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"//unpkg.com/swagger-client\"></script>\n    <script>\n        const controller = new AbortController();\n        const { signal } = controller;\n        const timeout = setTimeout(() => {\n          controller.abort();\n        }, 1);\n\n        (async () => {\n          try {\n            await SwaggerClient.execute({\n              spec,\n              pathName: '/users',\n              method: 'get',\n              parameters: { q: 'search string' },\n              securities: { authorized: { BearerAuth: \"3492342948239482398\" } },\n              signal,\n            });\n          } catch (error) {\n            if (error.name === 'AbortError') {\n              console.error('request was aborted');\n            }\n          } finally {\n            clearTimeout(timeout);\n          }\n        })();\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cache Management in Reference Resolution\nDESCRIPTION: Demonstrates how to clear the internal cache when resolving remote OpenAPI definitions.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nSwaggerClient.clearCache();\nSwaggerClient.resolve({ url: 'https://raw.githubusercontent.com/swagger-api/swagger-petstore/master/src/main/resources/openapi.yaml'}).then(swaggerClient => {\n  swaggerClient.spec;\n  swaggerClient.errors;\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Support in Swagger-JS HTTP Client\nDESCRIPTION: Shows advanced usage of query support in the Swagger-JS HTTP Client, including array parameters and collection formats.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  query: {\n    anotherOne: ['one', 'two'], // no collection format\n    evenMore: 'hi', // string, not an array\n    bar: { // has a collectionFormat\n      collectionFormat: 'ssv', // supported values: csv, ssv, pipes\n      value: [1, 2, 3]\n    }\n  },\n  method: 'GET',\n};\n\nSwaggerClient.http(request);\n// Requested URL: https://httpbin.org/?anotherOne=one,two&evenMore=hi&bar=1%202%203\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation\nDESCRIPTION: Shows how to handle file uploads in both Node.js and browser environments\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs')\nconst path = require('path')\nconst SwaggerClient = require('swagger-client');\n\nconst myPetImage = fs.createReadStream(path.join(__dirname, 'myPet.jpg'))\n\nSwaggerClient({ url: 'http://petstore.swagger.io/v2/swagger.json' })\n  .then(client => client.apis.pet.uploadFile({\n    petId: 256256,\n    file: myPetImage\n  })); // => Promise.<Response>\n```\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"//unpkg.com/swagger-client\"></script>\n    <script>\n      const aFileParts = [93048032489, 98389384239, 23498324239]; // an array consisting of image bytes\n      const myPetImage = new Blob(aFileParts, { type : 'image/jpeg' }); // the blob\n\n      SwaggerClient({ url: 'http://petstore.swagger.io/v2/swagger.json' })\n        .then(client => client.apis.pet.uploadFile({\n          petId: 256256,\n          file: myPetImage.stream()\n        })); // => Promise.<Response>\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Node.js API Implementation\nDESCRIPTION: Basic Node.js HTTP server implementation that handles user list requests according to the OpenAPI specification.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\n\nconst getUserList = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.writeHead(200);\n  res.end('[{\"id\":\"value\"}]');\n};\n\nconst requestListener = (req, res) => {\n  if (req.url.startsWith('/users')) {\n    getUserList(req, res);\n  } else {\n    res.setHeader('Content-Type', 'text/plain');\n    res.writeHead(404);\n    res.end('Not found');\n  }\n};\n\nconst server = http.createServer(requestListener);\nserver.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Requests with AbortSignal in Node.js\nDESCRIPTION: This snippet demonstrates how to cancel HTTP requests in Node.js using AbortController from the abort-controller package. It sets up a timeout that triggers the abort method after 1ms and handles the AbortError when the request is cancelled.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst SwaggerClient = require('swagger-client');\nconst AbortController = require('abort-controller');\n\nconst controller = new AbortController();\nconst { signal } = controller;\nconst timeout = setTimeout(() => {\n  controller.abort();\n}, 1);\n\n(async () => {\n  try {\n    await SwaggerClient.http({ url: 'https://www.google.com', signal });\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('request was aborted');\n    }\n  } finally {\n    clearTimeout(timeout);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Async Request Interceptor in Swagger-JS HTTP Client\nDESCRIPTION: Shows how to use an asynchronous request interceptor in the Swagger-JS HTTP Client. This allows for async operations within the interceptor.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  requestInterceptor: async req => {\n    const { body: { idToken } } = await SwaggerClient.http({ url: 'https://identity.com/idtoken.json' });\n    req.url += `?idToken=${idToken}`;\n    return req;\n  },\n};\n\nSwaggerClient.http(request); \n// Requested URL: https://httpbin.org/?idToken=2342398423948923\n```\n\n----------------------------------------\n\nTITLE: Instance-based Reference Resolution\nDESCRIPTION: Demonstrates how to resolve references during SwaggerClient instantiation using both POJO and URL methods.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pojoDefinition = {\n  a: 1,\n  b: {\n    $ref: '#/a',\n  }\n};\n\nnew SwaggerClient({ spec: pojoDefinition }).then(swaggerClient => {\n  swaggerClient.spec;\n  swaggerClient.originalSpec;\n  swaggerClient.errors;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch with Upload Progress Tracking in Browser\nDESCRIPTION: Shows how to implement a custom fetch function using Axios in a browser environment to track upload progress. The example monitors upload progress percentage and logs it to the console.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"//unpkg.com/swagger-client\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.js\"></script>\n    <script>\n      const request = {\n        url: 'https://httpbin.org/post',\n        method: 'POST',\n        body: \"data\".repeat(1000000),\n        userFetch: async (url, req) => {\n          const onUploadProgress = (progressEvent) => {\n            const completed = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            console.log(`${completed}%`);\n          }\n          const axiosRequest = { ...req, data: req.body, onUploadProgress };\n          const axiosResponse = await axios(axiosRequest);\n\n          return new Response(axiosResponse.data.data, {\n            status: response.status,\n            headers: response.headers,\n          });\n        },\n      };\n\n      SwaggerClient.http(request);\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Aborting SwaggerClient Requests in Browser\nDESCRIPTION: This snippet demonstrates how to use AbortController with SwaggerClient in a browser environment. AbortController is natively available in modern browsers. The code shows setting up a timeout to abort the request and handling the AbortError within an HTML context.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"//unpkg.com/swagger-client\"></script>\n    <script>\n        const controller = new AbortController();\n        const { signal } = controller;\n        const timeout = setTimeout(() => {\n          controller.abort();\n        }, 1);\n\n        (async () => {\n          try {\n            await new SwaggerClient({ spec })\n              .then(client => client.apis.default.getUserList({}, { signal }))\n          } catch (error) {\n            if (error.name === 'AbortError') {\n              console.error('request was aborted');\n            }\n          } finally {\n            clearTimeout(timeout);\n          }\n        })();\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Requests with AbortSignal in Browser\nDESCRIPTION: This HTML snippet shows how to cancel HTTP requests in a browser environment using the built-in AbortController Web API. It creates a controller, sets up a timeout that aborts the request after 1ms, and handles the AbortError when caught.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script src=\"//unpkg.com/swagger-client\"></script>\n    <script>\n        const controller = new AbortController();\n        const { signal } = controller;\n        const timeout = setTimeout(() => {\n          controller.abort();\n        }, 1);\n\n        (async () => {\n          try {\n            await SwaggerClient.http({ url: 'https://www.google.com', signal });\n          } catch (error) {\n            if (error.name === 'AbortError') {\n              console.error('request was aborted');\n            }\n          } finally {\n            clearTimeout(timeout);\n          }\n        })();\n    </script>\n  </head>\n  <body>\n    check console in browser's dev. tools\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fetch with Axios in Swagger-js\nDESCRIPTION: Demonstrates how to override the default fetch behavior by providing a custom implementation using the Axios library. The userFetch function must return a Fetch-compatible Response object.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\nimport axios from 'axios';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  userFetch: async (url, req) => {\n    const axiosRequest = { ...req, data: req.body };\n    const axiosResponse = await axios(axiosRequest);\n\n    return new Response(axiosResponse.data.data, {\n      status: response.status,\n      headers: response.headers,\n    });\n  },\n};\n\nSwaggerClient.http(request);\n```\n\n----------------------------------------\n\nTITLE: Request Interceptor Override Example\nDESCRIPTION: Demonstrates how to override request interceptors at different levels of the API call chain\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst topLevelRequestInterceptor = (req) => {\n  console.log('executing top level request interceptor');\n  return req;\n};\n\nconst interfaceLevelRequestInterceptor = (req) => {\n  console.log('executing interface level request interceptor');\n  return req;\n};\n\nnew SwaggerClient({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  requestInterceptor: topLevelRequestInterceptor,\n}).then((client) =>\n  client.apis.user.getUserByName(\n    { username: 'username' },\n    {\n      requestInterceptor: interfaceLevelRequestInterceptor,\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Importing swagger-client with CommonJS\nDESCRIPTION: Example of how to import the swagger-client package using CommonJS require syntax. This approach is commonly used in Node.js environments.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst SwaggerClient = require('swagger-client');\n```\n\n----------------------------------------\n\nTITLE: Creating Request Object with Object Literal\nDESCRIPTION: Demonstrates how to create a request object using an object literal. This approach is useful when representing a Fetch-compatible Request.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = {\n  url: 'https://httpbin.org/post',\n  mode: 'cors',\n  method: 'POST',\n  body: { data: 3 },\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Swagger Client in JavaScript\nDESCRIPTION: Demonstrates two equivalent ways to initialize the Swagger Client, either using the 'new' keyword or calling it as a function. Both methods accept a URL to the Swagger JSON file.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/api.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient('http://petstore.swagger.io/v2/swagger.json');\nSwaggerClient('http://petstore.swagger.io/v2/swagger.json');\n// these two lines are equivalent\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Globally in Swagger-js\nDESCRIPTION: Shows how to enable CORS globally for all requests by setting the withCredentials property on the SwaggerClient.http object, which automatically sets credentials='include' for each request.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nSwaggerClient.http.withCredentials = true;\n```\n\n----------------------------------------\n\nTITLE: Missing OperationId Handling\nDESCRIPTION: Shows how SwaggerClient deduces operationIds when they are missing by combining HTTP method and pathname\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /one:\n    get:\n      summary: Gets one      \n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient({ spec })\n  .then(client => client.apis.default.getOne(...));\n// => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: Using Response Interceptor as Transformer in Swagger-js\nDESCRIPTION: Demonstrates how to set up a simple synchronous response interceptor that adds custom properties to the response object. The transformer function receives the response object, modifies it, and returns it.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  responseInterceptor: res => {\n    res.arbitraryProp = 'arbitrary value';\n    return res;\n  },\n};\n\nSwaggerClient.http(request); \n/**\n * Promise({\n *   ok: true,\n *   status: 200,\n *   statusText: 'OK', \n *   url: 'https://httpbin.org/',\n *   headers: {...},\n *   text: '{\"prop\":\"value\"}',\n *   data: '{\"prop\":\"value\"}',\n *   body: {prop: 'value'},\n *   obj: {prop: 'value'},\n *   arbitraryProp: 'arbitrary value',\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Using Request Interceptor in Swagger-JS HTTP Client\nDESCRIPTION: Demonstrates how to use a request interceptor in the Swagger-JS HTTP Client. The interceptor modifies the request before it is sent.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  requestInterceptor: req => {\n    req.url += '?param=value';\n    return req;\n  },\n};\n\nSwaggerClient.http(request); \n// Requested URL: https://httpbin.org/?param=value\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Request Interceptors in Swagger-JS HTTP Client\nDESCRIPTION: Demonstrates how to compose multiple request interceptors using a pipe function in the Swagger-JS HTTP Client.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pipeP = (...fns) => args => fns.reduce((arg, fn) => arg.then(fn), Promise.resolve(args))\n\nconst interceptor1 = req => {\n  req.url += '?param1=value1';\n  return req;\n}\nconst interceptor2 = async req => {\n  req.url += '&param2=value2';\n  return Promise.resolve(req);\n};\n\nconst request = {\n  url: 'https://httpbin.org/',\n  method: 'GET',\n  requestInterceptor: pipeP(interceptor1, interceptor2),\n};\n\nSwaggerClient.http(request); \n// Requested URL: https://httpbin.org/?param1=value1&param2=value2\n```\n\n----------------------------------------\n\nTITLE: Using Query Support in Swagger-JS HTTP Client\nDESCRIPTION: Demonstrates how to use query support in the Swagger-JS HTTP Client. The query parameters are serialized and appended to the Request.url property.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst request = {\n  url: 'https://httpbin.org/?one=1&two=1',\n  query: {\n    two: {\n      value: 2\n    },\n    three: {\n      value: 3\n    }\n  },\n  method: 'GET',\n};\n\nSwaggerClient.http(request);\n// Requested URL: https://httpbin.org/?one=1&two=2&three=3\n```\n\n----------------------------------------\n\nTITLE: Basic OperationId Usage with Default Tag\nDESCRIPTION: Demonstrates how SwaggerClient handles operations when a tag is absent, using 'default' as the internal tag group\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/tags-interface.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /pet/findByStatus:\n    get:\n      summary: Finds pets by Status\n      operationId: getUserById\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nnew SwaggerClient({ spec })\n  .then(client => client.apis.default.getUserById(...));\n// => Promise.<Response>\n```\n\n----------------------------------------\n\nTITLE: Installing swagger-client via NPM\nDESCRIPTION: Command to install the swagger-client package from the NPM registry. The package contains transpiled and minified ES5 compatible code for use in any JavaScript environment.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n $ npm install swagger-client\n```\n\n----------------------------------------\n\nTITLE: Re-resolving OpenAPI Definition\nDESCRIPTION: Demonstrates how to re-resolve an OpenAPI definition using the resolve instance method.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pojoDefinition = {\n  a: 1,\n  b: {\n    $ref: '#/a',\n  }\n};\n\nnew SwaggerClient({ spec: pojoDefinition })\n  .then(swaggerClient => swaggerClient.resolve()) // definition will be re-resolved again\n  .then(swaggerClient => {\n    swaggerClient.spec;\n    swaggerClient.originalSpec;\n    swaggerClient.errors;\n  });\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Reference Resolution\nDESCRIPTION: Shows how the resolver handles errors, specifically when encountering an invalid JSON reference format.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/openapi-definition-resolver.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport SwaggerClient from 'swagger-client';\n\nconst pojoDefiniton = {\n  a: 1,\n  b: {\n    $ref: 1,\n  }\n};\n\nSwaggerClient.resolve({ spec: pojoDefiniton }); \n/**\n *  Promise({\n *   \"spec\": {\n *     \"a\": 1,\n *     \"b\": {\n *       \"$ref\": 1\n *     }\n *   },\n *   \"errors\": [\n *     {\n *       \"message\": \"$ref: must be a string (JSON-Ref)\",\n *       \"$ref\": 1,\n *       \"fullPath\": [\n *         \"b\",\n *         \"$ref\"\n *       ]\n *     }\n *   ]\n * })\n */\n```\n\n----------------------------------------\n\nTITLE: Setting Default Content-Type with Request Interceptor\nDESCRIPTION: Shows how to implement default Content-Type behavior using request interceptors in Swagger-JS 3.x.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSwagger({\n  url: \"http://petstore.swagger.io/v2/swagger.json\",\n  requestInterceptor: req => {\n    if(req.body && !req.headers[\"Content-Type\"]) {\n      req.headers[\"Content-Type\"] = \"application/json\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing swagger-client Installation with package.json Overrides\nDESCRIPTION: JSON configuration that overrides optional ApiDOM transitive dependencies to speed up the installation process. This approach uses an empty npm package to replace optional dependencies that aren't required for basic functionality.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"@swagger-api/apidom-reference\": {\n    \"@swagger-api/apidom-ns-asyncapi-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-ns-openapi-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-api-design-systems-json\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-api-design-systems-yaml\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-asyncapi-json-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-asyncapi-yaml-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-json\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-json-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-yaml-2\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-json-3-0\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-json-3-1\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-yaml-3-0\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-openapi-yaml-3-1\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-workflows-json-1\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-workflows-yaml-1\": \"npm:-@0.0.1\",\n    \"@swagger-api/apidom-parser-adapter-yaml-1-2\": \"npm:-@0.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI 3.0.4 Definition Example in YAML\nDESCRIPTION: Sample OpenAPI specification defining a testing API with user endpoints, security schemes, and server configurations.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/usage/http-client-for-oas-operations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.4\ninfo:\n  title: Testing API\n  version: 1.0.0\ncomponents:\n  schemas:\n    user:\n      properties:\n        id:\n          type: integer\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    ApiKey:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n    BearerAuth:\n      type: http\n      scheme: bearer\n    oAuth2:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'https://api.example.com/oauth2/authorize'\n          scopes:\n            read: authorize to read\nservers:\n  - url: 'http://localhost:8080'\n  - url: '/'\npaths:\n  /users:\n    get:\n      operationId: getUserList\n      description: Get list of users\n      security:\n        - BasicAuth: []\n          BearerAuth: []\n          ApiKey: []\n          oAuth2: []\n      parameters:\n        - name: q\n          in: query\n          description: search query parameter\n          schema:\n            type: array\n            items:\n              type: string\n          style: pipeDelimited\n          explode: false  \n      responses:\n        '200':\n          description: List of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user'\n```\n\n----------------------------------------\n\nTITLE: Migrating Authorization Configuration\nDESCRIPTION: Demonstrates the new way to configure different types of authorizations in Swagger-JS 3.x.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Swagger('http://petstore.swagger.io/v2/swagger.json', {\n  authorizations: {\n    my_query_auth: new ApiKeyAuthorization('my-query', 'bar', 'query'),\n    my_header_auth: new ApiKeyAuthorization('My-Header', 'bar', 'header'),\n    my_basic_auth: new PasswordAuthorization('foo', 'bar'),\n    cookie_: new CookieAuthorization('one=two')\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nSwagger('http://petstore.swagger.io/v2/swagger.json', {\n  authorizations: {\n    // Type of auth, is inferred from the specification provided \n    my_basic_auth: { username: 'foo', password: 'bar' },\n    my_query_auth: 'foo', \n    my_header_auth: 'foo', \n    my_oauth2_token: { token: { access_token: 'abcabc' } },\n    cookie_auth: null, // !!Not implemented\n  }\n}).then( client => ... );\n```\n\n----------------------------------------\n\nTITLE: Updating Tags Interface Access in Swagger-JS\nDESCRIPTION: Demonstrates the change in accessing API tags through the client.apis object instead of directly on the client.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.pet\n  .findPetById(...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.apis.pet \n  .findPetById(...);\n```\n\n----------------------------------------\n\nTITLE: Linking Swagger-JS with Swagger-UI Using NPM Link\nDESCRIPTION: Script to create a symlink between locally developed Swagger-JS (swagger-client) and Swagger-UI for testing changes. This process builds Swagger-JS, creates the link, and connects it to Swagger-UI.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/development/setting-up.md#2025-04-20_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\n $ cd /path/to/swagger-js\n $ npm run build\n $ npm link\n $ cd /path/to/swagger-ui\n $ npm link swagger-client\n```\n\n----------------------------------------\n\nTITLE: Migrating Callback Style to Promises in Swagger-JS\nDESCRIPTION: Example showing how to migrate from callback-style initialization to promise-based initialization in Swagger-JS 3.x.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new SwaggerClient({ success, failure, ...});\n\nfunction success() {\n  client.pet.addPet(...);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nSwaggerClient({...}).then(client => {\n  client.apis.pet.addPet(...) \n})\n```\n\n----------------------------------------\n\nTITLE: Updating Response Body Access\nDESCRIPTION: Shows the change in accessing parsed response body from .obj to .body property.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/migration-2-x-to-3-x.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction print(response) {\n  // print out the parsed object\n  console.log(response.obj);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction print(response) {\n  // print out the parsed object\n  console.log(response.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Swagger-UI with Linked Swagger-JS\nDESCRIPTION: Command to run Swagger-UI development server after linking with a local version of Swagger-JS. This allows testing custom changes to swagger-client within Swagger-UI.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/development/setting-up.md#2025-04-20_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\n $ cd /path/to/swagger-ui\n $ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Unlinking Swagger-JS from Swagger-UI and Cleanup\nDESCRIPTION: Script to clean up after testing by unlinking the local Swagger-JS from Swagger-UI and restoring the standard package dependency. This ensures the development environment returns to its original state.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/development/setting-up.md#2025-04-20_snippet_3\n\nLANGUAGE: shell script\nCODE:\n```\n $ cd /path/to/swagger-ui\n $ npm unlink --no-save swagger-client\n $ npm install\n $ cd /path/to/swagger-js\n $ npm unlink\n```\n\n----------------------------------------\n\nTITLE: Using NVM to Select Node.js Version in Swagger-JS Repository\nDESCRIPTION: Command to automatically select the correct Node.js version when using Node Version Manager (nvm) in the Swagger-JS repository.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/development/setting-up.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n $ nvm use\n```\n\n----------------------------------------\n\nTITLE: Running npm scripts in Swagger-JS project\nDESCRIPTION: Instructions for executing npm scripts in the project's root directory.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/development/scripts.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nnpm run <script name>\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Client Properties and Methods in Swagger-js\nDESCRIPTION: A comprehensive list of client properties and methods that are no longer supported following the refactoring of Swagger-js. These features are considered excluded from the current implementation and might only be reintroduced if necessary.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/graveyard-3-x.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- client.apisArray\n  - client.apisArray[i].operationsArray\n- client.modelsArray\n- client.authorizationScheme\n- client.basePath\n- client.build\n- client.buildFrom1_1Spec\n- client.buildFrom1_2Spec\n- client.buildFromSpec\n- client.clientAuthorizations\n- client.convertInfo\n- client.debug\n- client.defaultErrorCallback\n- client.defaultSuccessCallback\n- client.enableCookies\n- client.fail\n- client.failure\n- client.finish\n- client.help\n- client.host\n- client.idFromOp\n- client.info\n- client.initialize\n- client.isBuilt\n- client.isValid\n- client.modelPropertyMacro\n- client.models\n- client.modelsArray\n- client.options\n- client.parameterMacro\n- client.parseUri\n- client.progress\n- client.resourceCount\n- client.sampleModels\n- client.selfReflect\n- client.setConsolidatedModels\n- client.supportedSubmitMethods\n- client.swaggerRequestHeaders\n- client.tagFromLabel\n- client.title\n- client.useJQuery\n- client.jqueryAjaxCach\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated API Tag Properties in Swagger-js\nDESCRIPTION: A list of properties and methods that were previously available on client.apis[tag] objects but are no longer supported after the refactoring of Swagger-js.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/docs/migration/graveyard-3-x.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- client.apis[tag]\n  - .apis\n  - .asCurl\n  - .description\n  - .externalDocs\n  - .help\n  - .label\n  - .name\n  - .operation\n  - .operations\n  - .operationsArray\n  - .path\n  - .tag\n```\n\n----------------------------------------\n\nTITLE: Configuring Scarf Analytics in package.json\nDESCRIPTION: This snippet shows how to disable Scarf analytics by setting the 'scarfSettings.enabled' field to false in the project's package.json file.\nSOURCE: https://github.com/swagger-api/swagger-js/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  // ...\n  \"scarfSettings\": {\n    \"enabled\": false\n  }\n  // ...\n}\n```"
  }
]