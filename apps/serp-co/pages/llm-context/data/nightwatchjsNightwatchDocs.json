[
  {
    "owner": "nightwatchjs",
    "repo": "nightwatch-docs",
    "content": "TITLE: Basic DOM Interaction Example in Nightwatch (JavaScript)\nDESCRIPTION: A simple Nightwatch test that navigates to ecosia.org, searches for 'nightwatch', clicks the submit button, and verifies the search results contain 'Nightwatch.js'. It demonstrates basic element selection and interaction commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org': function (browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .setValue('input[type=search]', 'nightwatch')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with CSS Selectors in Nightwatch\nDESCRIPTION: Code examples showing how to find single and multiple elements using CSS selectors with Nightwatch's element API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('css selector');\nbrowser.element.findAll('css selector');\n```\n\n----------------------------------------\n\nTITLE: Using Expect API in Nightwatch for Element Assertions\nDESCRIPTION: This example demonstrates how to use Nightwatch's Expect API to perform assertions on elements. It shows how to check if an element is present and visible using the chainable BDD-style syntax.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/element/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('expect example', function() {\n  it('sample test', function (browser) {\n    // start with identifying the element\n    // and then assert the element is present\n    browser.expect.element('#main').to.be.present;\n    // or assert the element is visible\n    browser.expect.element('#main').to.be.visible;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Browser Object as Function Parameter in Nightwatch Tests\nDESCRIPTION: Example of accessing the Nightwatch API through the 'browser' parameter passed to the test function. This is the standard pattern used in Nightwatch tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (browser) {\n    browser.init();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Element API for Finding Elements in Nightwatch v3\nDESCRIPTION: Demonstrates various ways to find elements using the new Element API, including regular CSS selectors, Nightwatch selector objects, Selenium 'by' locators, child element location, and finding elements by text.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// using regular css selectors\nconst submitElem = browser.element.find('button[name=submit]');\n\n// using Nightwatch selector objects\nconst addButtonElem = browser.element.find({\n  selector: '//button[@type=\"button\"]',\n  locateStrategy: 'xpath',\n  index: 1\n});\n\n// using Selenium `by` locator\nconst addButtonElem2 = browser.element.find(\n  by.xpath('//button[@type=\"button\"]')\n);\n\n// locating child elements\nconst childChildElem = browser.element\n  .find('.element')\n  .find('.child-element')\n  .find('.child-child-element');\n\n// locating elements by text\nconst newsElem = browser.element.findByText('News');\n\n// use await to retrieve Selenium WebElement instance\nconst addButtonWebElem = await addButtonElem;\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Equality in Nightwatch\nDESCRIPTION: Example of retrieving an element's text and asserting it equals an expected value using Nightwatch's assertion chain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getText().assert.equals('text');\n```\n\n----------------------------------------\n\nTITLE: Basic Nightwatch.js Test Example for Web Search\nDESCRIPTION: A simple test suite that navigates to Ecosia.org, searches for 'nightwatch', and verifies the search results contain the Nightwatch.js website. The example demonstrates element selection, navigation, user input, and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-exports.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org' : function(browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .waitForElementVisible('body')\n      .assert.titleContains('Ecosia')\n      .assert.visible('input[type=search]')\n      .setValue('input[type=search]', 'nightwatch')\n      .assert.visible('button[type=submit]')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Promises in Nightwatch Callbacks\nDESCRIPTION: Shows how to return promises from callbacks in Nightwatch tests. The test runner waits for the promise to settle before continuing with subsequent commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (browser) {\n    browser\n      .init()\n      .getText(\"#main ul li\", function(result) {\n        return new Promise(function(resolve, reject) {\n          setTimeout(function() {\n            console.log('Value:', result.value);\n            resolve();\n          }, 1000);\n        });\n      })\n      .click('#login button');\n  },\n  \n  demoTestAsync: async function(browser) {\n    const text = await browser.init().getText(\"#main ul li\", function(result) {\n      return Promise.resolve(result.value);\n    });              \n    \n    console.log('The text is', text);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Test Hooks in Nightwatch.js\nDESCRIPTION: Demonstrates how to implement global test hooks including before, after, beforeEach, and afterEach hooks, as well as browser navigation hooks. The example shows hook implementation for both local and integration environments, with proper async handling using callbacks and Promises.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/global-test-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'default' : {\n    isLocal : true,\n  },\n\n  'integration' : {\n    isLocal : false\n  },\n\n  // External before hook is ran at the beginning of the tests run, before creating the Selenium session\n  before(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // start the local server\n      App.startServer(function() {\n        // server listening\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n\n  // External after hook is ran at the very end of the tests run, after closing the Selenium session\n  after(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // stop the local server\n      App.stopServer(function() {\n        // shutting down\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n\n  // This will be run before each test suite is started\n  beforeEach(browser, done) {\n    // getting the session info\n    browser.status(function(result) {\n      console.log(result.value);\n      done();\n    });\n  },\n\n  // This will be run after each test suite is finished\n  afterEach(browser, done) {\n    console.log(browser.currentTest);\n    done();\n  },\n\n  // Called right after the command .navigateTo() is finished\n  async onBrowserNavigate(browser) {\n    return Promise.resolve();\n  },\n\n  // Called right before the command .quite() is finished\n  async onBrowserQuit(browser) {\n    return Promise.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag-and-Drop Action in WebDriver\nDESCRIPTION: Demonstrates how to configure a drag-and-drop action using WebDriver. The action consists of moving to the center of the 'from' element, pressing the left mouse button, moving to the 'to' target, and releasing the button.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-complex-user-actions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.dragAndDrop(from, to)\n```\n\n----------------------------------------\n\nTITLE: Basic Element Interaction in Nightwatch.js\nDESCRIPTION: Demonstrates basic element interaction using Nightwatch.js, including navigating to a URL, setting values in input fields, clicking buttons, and making assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/finding-and-interacting-with-elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org': function (browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .setValue('input[type=search]', 'nightwatch')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete BDD Test with Hooks and Special Test Functions\nDESCRIPTION: A comprehensive example showing a complete Nightwatch BDD test with before/after hooks, running specific tests with .only(), skipping tests with xtest(), and using the page object model. This demonstrates multiple BDD features in a single test suite.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  \n  before(function(browser) {\n    this.homepage = browser.page.home();\n  });\n  \n  it('startHomepage', () => {\n    this.homepage.navigate();\n    this.homepage.expect.section('@indexContainer').to.be.not.visible;\n  });\n  \n  \n  // Run only this testcase\n  //*\n  it.only('startHomepage', () => {\n    this.homepage.navigate();\n  });\n  *// \n  \n  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()\n  xtest('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n  \n  test('version dropdown is enabled', browser => {\n    const navigation = this.homepage.section.navigation;\n    const navbarHeader = navigation.section.navbarHeader;\n    \n    navbarHeader.expect.element('@versionDropdown').to.be.enabled;\n  });\n  \n  after(browser => browser.end());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex User Actions with Nightwatch Actions API\nDESCRIPTION: This example demonstrates how to use the Nightwatch Actions API to perform complex keyboard interactions. The code navigates to the Nightwatch website and performs a SHIFT key press and release action. The actions method accepts an 'async' parameter and returns a chainable interface for defining key actions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-complex-user-actions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('user actions api', function() {\n  \n  it('demo test', function() {\n    browser\n      .navigateTo('https://nightwatchjs.org')\n      .perform(function() {\n        const actions = this.actions({async: true});\n        \n        return actions\n         .keyDown(Keys.SHIFT)\n         .keyUp(Keys.SHIFT);\n      });\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a React Form Component in JSX\nDESCRIPTION: This snippet shows a basic React component for a form using class-based syntax. It includes state management, event handlers, and JSX rendering.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-component-tests-for-react.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: ''};\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.name.trim()) {\n      return;\n    }\n    this.props.addTask(this.state.name);\n    this.setState({name: ''});\n  };\n\n  handleChange = (e) => {\n    this.setState({name: e.target.value});\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} method='post'>\n        <h2 className='label-wrapper'>\n          <label htmlFor='new-todo-input' className='label__lg'>\n            What needs to be done?\n          </label>\n        </h2>\n        <input\n          type='text'\n          id='new-todo-input'\n          className='input input__lg'\n          name='text'\n          autoComplete='off'\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n        <button type='submit' className='btn btn__primary btn__lg'>\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements in Nightwatch.js\nDESCRIPTION: Demonstrates how to click on a web element using Nightwatch.js. The example shows clicking on a 'Sign In' button using the findByText method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Click on the sign in button\nbrowser.element.findByText('Sign In').click();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Click on the sign in button\nbrowser.element.findByText('Sign In').click();\n```\n\n----------------------------------------\n\nTITLE: Selecting nth Element from a Collection in Nightwatch\nDESCRIPTION: Examples of selecting a specific element by its index from a collection of elements, which is useful when working with lists or repeated elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the 2nd element from all ul elements\nbrowser.element.findAll('ul').nth(2);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find the 2nd element from all ul elements\nbrowser.element.findAll('ul').nth(2);\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Test Using JSX in Nightwatch\nDESCRIPTION: A minimal example of a React component test written in JSX using Component Story Format (CSF). It imports a Form component and exports a default configuration along with a component story.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/write-jsx-react-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '../components/Form.jsx';\n\nexport default {\n  title: 'Form',\n  component: Form,\n}\n\nexport const FormStory = () => <Form />\n\n```\n\n----------------------------------------\n\nTITLE: Using .useXpath() Command in Nightwatch.js\nDESCRIPTION: Demonstrates how to use the .useXpath() command to switch to XPath selectors and .useCss() to switch back to CSS selectors. This approach is useful when multiple subsequent commands use XPath expressions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-xpath-selectors.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (browser) {\n    browser\n      .useXpath() // every selector now must be xpath\n      .click(\"//tr[@data-recordid]/span[text()='Search Text']\")\n      .useCss() // we're back to CSS now\n      .setValue('input[type=text]', 'nightwatch')\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Typing into Input Elements in Nightwatch\nDESCRIPTION: Example of typing text into an input field using Nightwatch's sendKeys method after finding the element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').sendKeys('text');\n```\n\n----------------------------------------\n\nTITLE: Writing Complete React Component Test in Nightwatch\nDESCRIPTION: A full example of a Nightwatch test for a React component, including mounting the component with props and asserting its visibility.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('user info test', function() {\n  let component;\n\n  before(async () => {\n    component = await browser.mountComponent('/src/components/UserInfo.jsx', function() {\n      return {\n        date: new Date(),\n        text: 'I hope you enjoy reading Ulysses!',\n        author: {\n          name: 'Leopold Bloom',\n          avatarUrl: 'https://upload.wikimedia.org/wikipedia/commons/5/52/Poldy.png'\n        }\n      }\n    });\n  });\n\n  it('should render the component without error', function() {\n    browser.expect(component).to.be.visible;\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Alt Text in Nightwatch\nDESCRIPTION: Code snippets showing how to find elements (typically images) by their alt text attribute using Nightwatch's finder methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.findByAltText('alt text');\nbrowser.element.findAllByAltText('alt text');\n```\n\n----------------------------------------\n\nTITLE: Clicking on Elements in Nightwatch\nDESCRIPTION: Simple example of finding an element and performing a click action on it using Nightwatch's element API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').click();\n```\n\n----------------------------------------\n\nTITLE: Comprehensive React Component Test with Interaction Testing\nDESCRIPTION: Advanced example demonstrating how to use lifecycle hooks, Testing Library integration, and interaction testing with a React component. It includes global and component-level hooks, form interaction with fireEvent, and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/write-jsx-react-tests.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fireEvent, within } from '@testing-library/dom';\nimport Form from '../components/Form.jsx';\n\nexport default {\n  title: 'Form Component',\n  component: Form,\n  \n  // executed before all the individual component stories; runs in Node context\n  async setup(browser) {\n    console.log('global setup hook', browser.capabilities)\n  },\n  \n  // executed after all the individual component stories; runs in Node context\n  async teardown(browser) {\n    console.log('global teardown hook')\n  },\n  \n  // executed before each individual component story; runs in Node context\n  async preRender(browser, context) {\n    // context is made of {id, name, title}\n    console.log('preRender', context.id);\n  },\n  \n  // executed after each individual component story; runs in Node context\n  async postRender(browser, context) {\n    // context is made of {id, name, title}\n    console.log('postRender', context.id);\n  }\n}\n\nexport const AnotherForm = Object.assign(() => <Form addTask={function(value) {\n  console.log('Add Task', value);\n}} />, {\n  async preRender() {},\n  \n  async postRender() {\n    console.log('after mount', window);\n  },\n  \n  async play({canvasElement, args}) {\n    console.log('play function', args);\n    \n    const root = within(canvasElement);\n    const input = root.getByTestId('new-todo-input');\n    \n    \n    fireEvent.change(input, {\n      target: {\n        value: 'another one bites the dust'\n      }\n    });\n    \n    return {\n      fromPlay: input\n    }\n  },\n  \n  test: async (browser, {component, result}) => {\n    console.log('Result from play', result)\n    await expect(component).to.be.visible;\n    \n    await expect(component.find('input')).to.have.property('value').equal('another one bites the dust');\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Object Commands in Nightwatch.js\nDESCRIPTION: Example showing how to create a page object with custom commands and elements. Implements a submit command that handles button clicking with waits and verifications.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/writing-commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst googleCommands = {\n  submit: function() {\n    this.api.pause(1000);\n\n    return this.waitForElementVisible('@submitButton', 1000)\n      .click('@submitButton')\n      .waitForElementNotPresent('@submitButton');\n  }\n};\n\nmodule.exports = {\n  commands: [googleCommands],\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]'\n    },\n    submitButton: {\n      selector: 'input[name=btnK]'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Angular Component Test Example\nDESCRIPTION: Full example of an Angular component test using Nightwatch. The test mounts a Form component and verifies its text content using assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('Test Form Component', async function (browser) {\n  const component = await browser.mountComponent('/src/components/Form.component');\n\n  expect(component).text.to.equal('form-component works!');\n});\n```\n\n----------------------------------------\n\nTITLE: Writing React Component Test with JSX and CSF\nDESCRIPTION: Example of a simple React component test using JSX and Component Story Format (CSF).\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Form from '../components/Form.jsx';\n\nexport default {\n  title: 'Form',\n  component: Form,\n}\n\nexport const FormStory = () => <Form />\n\n```\n\n----------------------------------------\n\nTITLE: Using StartWith and EndWith Assertions in Nightwatch Expect API\nDESCRIPTION: Demonstrates the usage of .startWith() and .endWith() methods for asserting the beginning and end of element text content.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.endWith('Watch');\n  \n  browser.expect.element('#main').text.to.startWith('The');\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Count in Nightwatch.js\nDESCRIPTION: Shows how to use the count assertion to check the number of elements matching a selector. The example demonstrates asserting equality and inequality for div and p elements respectively.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_elements.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.elements('div').count.to.equal(10);\n  browser.expect.elements('p').count.to.not.equal(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with CSS/XPath in Nightwatch.js\nDESCRIPTION: Demonstrates how to select a collection of elements using a CSS or XPath selector in Nightwatch.js. This is the basic syntax for the expect.elements() method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.elements('#selector')\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Assertions with Nightwatch Expect API in JavaScript\nDESCRIPTION: Demonstrates how to use the Nightwatch Expect API to perform basic assertions on element presence and visibility.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('expect example', function() {\n  it('sample test', function (browser) {\n    // start with identifying the element\n    // and then assert the element is present\n    browser.expect.element('#main').to.be.present;\n    // or assert the element is visible\n    browser.expect.element('#main').to.be.visible;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Async/Await Usage in Nightwatch.js Tests\nDESCRIPTION: This example demonstrates how to write a Nightwatch.js test using ES6 async/await. It retrieves window handles and switches to a different window using await to handle the asynchronous commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-es-6-async-await.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'demo test async': async function (browser) {\n    // get the available window handles\n    const result = await browser.windowHandles();\n    console.log('result', result);\n    \n    // switch to the second window\n    // await is not necessary here since we're not interested in the result\n    browser.switchWindow(result.value[1]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Server with Multiple Browsers in Nightwatch.js\nDESCRIPTION: This example demonstrates how to configure Nightwatch.js to use a local Selenium Server with support for Firefox, Chrome, and Internet Explorer browsers. It sets up the Selenium server path, port, and browser drivers using NPM packages like geckodriver, chromedriver, selenium-server, and iedriver.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/selenium-settings.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  test_settings: {\n    default: {\n    launch_url: 'https://nightwatchjs.org'\n  },\n  \n  selenium: {\n    // Selenium Server is running locally and is managed by Nightwatch\n    selenium: {\n      start_process: true,\n      port: 4444,\n      server_path: require('selenium-server').path,\n      cli_args: {\n        'webdriver.gecko.driver': require('geckodriver').path,\n        'webdriver.chrome.driver': require('chromedriver').path,\n        'webdriver.ie.driver': process.platform === 'win32' ? require('iedriver').path : ''\n      }\n    },\n    webdriver: {\n      start_process: false\n    }\n  },\n  \n  'selenium.chrome': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'chrome',\n      chromeOptions: {\n      }\n    }\n  },\n  \n  'selenium.firefox': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'firefox'\n    }\n  },\n  \n  'selenium.ie': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'internet explorer'\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request with Nightwatch API Testing\nDESCRIPTION: Shows how to write a test for a POST request using the supertest integration in Nightwatch. It sends data, checks the response status, content type, and response body.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('api testing', function () {\n  it('post api test', async function({supertest}) {\n    await supertest\n      .request(\"https://petstore.swagger.io/v2\")\n      .post(\"/pet\")\n      .send({\n        \"id\": 0,\n        \"category\": {\n          \"id\": 0,\n          \"name\": \"string\"\n        },\n        \"name\": \"doggie\",\n        \"photoUrls\": [\n          \"string\"\n        ],\n        \"tags\": [\n          {\n            \"id\": 0,\n            \"name\": \"string\"\n          }\n        ],\n        \"status\": \"available\"\n      })\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .then(function(response){\n          expect(response._body.name).to.be.equal(\"doggie\");\n      });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mounting React Component in Nightwatch Test\nDESCRIPTION: Example of using the mountReactComponent command to mount a React component in a Nightwatch test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = await browser.mountReactComponent('/src/components/Form.jsx')\n```\n\n----------------------------------------\n\nTITLE: Using expect.cookie() Method in Nightwatch.js Test\nDESCRIPTION: This example shows how to use the expect.cookie() method in a Nightwatch.js test. It demonstrates assertions for containing a specific value, matching a regex pattern, and checking a cookie with a specific domain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_cookie.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.cookie('cookie-name').to.contain('cookie-value');\n  browser.expect.cookie('cookie-name').to.match(/regex/);\n  browser.expect.cookie('loginCookie', 'example.org').to.contain('cookie-value');\n};\n```\n\n----------------------------------------\n\nTITLE: Using Negation in Nightwatch.js Expect Assertions\nDESCRIPTION: Shows how to use the 'not' keyword to negate assertions in Nightwatch.js tests, including text and CSS property checks.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.not.equal('The Night Watch');\n\n  browser.expect.element('#main').text.to.not.contain('The Night Watch');\n\n  browser.expect.element('#main').to.have.css('display').which.does.not.equal('block');\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attributes in Nightwatch\nDESCRIPTION: Example showing how to retrieve an attribute from an element using Nightwatch's getAttribute method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getAttribute();\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil to verify API calls in Nightwatch.js\nDESCRIPTION: Shows how to use the waitUntil command to poll for API calls until they occur or a timeout is reached. This pattern is useful for testing asynchronous workflows where an API call might happen after some delay.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit('demo test', async function(client) {\n    const timeoutMs = 15000;\n    const retryIntervalMs = 500;\n    \n    await client.waitUntil(async function () {\n      const spy = server.route.get('/api/v1/schemas');\n      \n      if (spy) {\n        return spy.calledOnce;\n      }\n      \n      return false;\n    }, timeoutMs, retryIntervalMs, new Error(`time out reached (10000ms) while waiting for API call.`));\n    \n});\n```\n\n----------------------------------------\n\nTITLE: Using XPath Selectors Directly in Nightwatch.js Commands\nDESCRIPTION: Shows two methods of using XPath selectors directly in individual commands: using an element selector object with a locateStrategy property, and specifying 'xpath' as the first argument in the command.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-xpath-selectors.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest(browser) {\n    // using element selector objects\n    browser.click({\n      selector: '//tr[@data-recordid]/span[text()='Search Text']',\n      locateStrategy: 'xpath'\n    });\n    \n    // specifying xpath strategy as first argument\n    browser.click('xpath', '//tr[@data-recordid]/span[text()='Search Text']');\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Using ScopedElements for Multiple Element Operations in Nightwatch v3\nDESCRIPTION: Demonstrates the usage of ScopedElements, a wrapper for WebElement arrays, which provides methods like nth() and count(). Shows how to perform operations on multiple elements and make assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// `findAll()` and `findAllBy*()` commands return ScopedElements,\n// a wrapper around the actual result, i.e., `WebElement[]`.\nconst postElems = browser.element.findAll('.post');\n\n// get count of all the posts\n// use await to get the actual result\nconst postElemsCount = await postElems.cound();\n\n// assert that the count is 15\npostElems.count().assert.equals(15);\n\n// assert that the 5th post contains \"nightwatch\" text\nconst post5Elem = postElems.nth(4); // 0-based indexing\npost5Elem.getText().assert.contains(\"nightwatch\");\n\n// click on the 2nd post\npostElems.nth(1).click();\n\n// `findAll` can also be chained on `find()`\nbrowser.element.find('body').findAll('.post').nth(1).findByText('Comments');\n```\n\n----------------------------------------\n\nTITLE: Complete User Actions Example with Multiple Interactions\nDESCRIPTION: A working example showing how to use various user actions including dragAndDrop, contextClick, and doubleClick. Includes navigation and element selection with proper async/await handling.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('example with user actions api', function () {\n\n  before(browser => browser.navigateTo('https://nightwatchjs.org'));\n\n  it('demo test', async function (browser) {\n    // retrieve the element; the actions api requires Selenium WebElement objects,\n    //  which can be retrieved using the global element() utility\n    const btnElement = await element('a.btn-github').findElement();\n\n    await browser.perform(function() {\n      // initiate the actions chain\n      const actions = this.actions({async: true});\n\n      return actions\n        .dragAndDrop(btnElement, {x: 100, y: 100})\n        .pause(500)\n        .contextClick(btnElement)\n        .pause(500)\n        .doubleClick(btnElement)\n        .pause(500)\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using expect.element() in Nightwatch.js\nDESCRIPTION: Demonstrates the basic syntax for creating an assertion on a single element using a CSS selector. This method allows writing expectations against elements identified by their CSS or XPath selectors.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_element.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element('#selector')\n```\n\n----------------------------------------\n\nTITLE: Using XPath Selectors Directly in Nightwatch.js Commands\nDESCRIPTION: Shows two methods of using XPath selectors directly in individual commands: using an element selector object with a locateStrategy property, and specifying 'xpath' as the first argument in the command.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-xpath-selectors.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest(browser) {\n    // using element selector objects\n    browser.click({\n      selector: '//tr[@data-recordid]/span[text()='Search Text']',\n      locateStrategy: 'xpath'\n    });\n    \n    // specifying xpath strategy as first argument\n    browser.click('xpath', '//tr[@data-recordid]/span[text()='Search Text']');\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting on request body data in Nightwatch.js API tests\nDESCRIPTION: Demonstrates how to access and assert on the request body that was sent to a specific POST endpoint. Uses the mockServer.route.post() method to retrieve a spy on the route and sinon's assertion capabilities to verify the data.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit('demo test', async function(client) {\n    const {requestBody} = mockServer.route.post('/api/v1/schemas');\n    \n    await client.assert.deepStrictEqual(requestBody, {name: 'medea'});\n});\n```\n\n----------------------------------------\n\nTITLE: Running First Nightwatch Test\nDESCRIPTION: Command to execute example tests in the Nightwatch examples directory.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-nightwatch-test.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch ./nightwatch/examples\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Global Installation\nDESCRIPTION: Command to run Nightwatch tests when installed globally using npm install -g\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Expecting a Specific Elements Count in Nightwatch.js\nDESCRIPTION: This example shows how to verify the count of elements on a page using Nightwatch.js expect assertions. It navigates to Ecosia.org and checks that there are exactly 5 section elements on the page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/expect-assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'demo test ecosia.org'(browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .expect.elements('section').count.to.equal(5);\n  },\n  \n  after(browser) {\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Test Files and Folders with Nightwatch\nDESCRIPTION: Command example for running a combination of individual test files and test folders with Nightwatch, which will override the src_folders setting.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/test.js tests/utils\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Page Object with Static URL\nDESCRIPTION: Basic page object implementation with a static URL definition and empty elements object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/page-object-model.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: 'https://google.com',\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced ES6 Class-based Page Commands with Async Support\nDESCRIPTION: Advanced example showing ES6 class-based commands with async/await support and custom element finding logic. Includes both callback and promise-based approaches.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/writing-commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class RealCommands {\n  customFindElements(selector, callback = function(r) {return r}) {\n    return this.page.findElements({\n      selector,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      return callback(result ? result.value: []);\n    });\n  }\n\n  async customFindElementsES6(selector) {\n    const result = await this.page.findElements({\n      selector,\n      suppressNotFoundErrors: true\n    });\n\n    return result;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium with Nightwatch.js for iOS Testing\nDESCRIPTION: Configuration settings for running Nightwatch tests on iOS devices using Appium server. Includes WebDriver settings, timeout options, and iOS-specific desired capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/running-tests-with-appium.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nappium_ios: {\n  selenium: {\n    host: 'localhost',\n    port: 4723\n  },\n  disable_error_log: true,\n  webdriver: {\n    timeout_options: {\n      timeout: 150000,\n      retry_attempts: 3\n    },\n    keep_alive: false,\n    start_process: false\n  },\n  desiredCapabilities: {\n    browserName: 'Safari', //not required incase using app\n    javascriptEnabled: true,\n    platformName: 'iOS', //android or iOS\n    platformVersion: '15.0',\n    deviceName: 'iPhone 13'\n    // \"app\": APP_PATH + \"ios/PieDrive.app\", // path for the ios app you want to test\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relative Locators in Nightwatch.js\nDESCRIPTION: Shows how to use relative locators to find elements based on their spatial relationship to other elements. Demonstrates locating a password field below an email input.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/finding-and-interacting-with-elements.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org': function (browser) {\n    const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));\n    \n    browser\n      .navigateTo('https://archive.org/account/login')\n      .setValue(passwordElement, 'password')\n      .assert.valueEquals('input[type=password]', 'password');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting on Mock Server Requests in Nightwatch\nDESCRIPTION: Demonstrates how to assert on incoming requests to the mock server in Nightwatch API tests. It uses Sinon spies to check if a route was called.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('demo test', async function(client) {\n    client\n      .assert.strictEqual(mockServer.route.get('/api/v1/schemas').calledOnce, true, 'called once')\n      .assert.strictEqual(mockServer.route.get('/api/v1/schemas').calledTwice, false);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Test Hooks in Nightwatch.js\nDESCRIPTION: Example demonstrating asynchronous beforeEach and afterEach hooks in Nightwatch.js. When performing asynchronous operations in hooks, a callback function must be called when the operation completes to prevent timeout errors.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/using-test-hooks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  beforeEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 100);\n  },\n  \n  afterEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 200);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Selected Accessibility Rules with Nightwatch\nDESCRIPTION: This snippet illustrates how to run all accessibility tests while excluding specific rules. It shows how to disable the 'color-contrast' and 'region' rules while running accessibility tests on the body element of a web page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/accessibility-testing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('accessibility testing', function() {\n  \n  it('accessibility rule subset', function(browser) {\n    browser\n      .navigateTo('https://www.w3.org/WAI/demos/bad/after/home.html')\n      .axeInject()\n      .axeRun('body', {\n        rules: {\n            'color-contrast': {\n                enabled: false\n            },\n            'region': {\n                enabled: false\n            }\n        }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Element Expect Assertions with Nightwatch.js\nDESCRIPTION: This example demonstrates various element expect assertions in Nightwatch.js including checking for element presence, CSS properties, attributes, tag types, and visibility. The test navigates to Ecosia.org and performs multiple assertions on page elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/expect-assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test Ecosia.org': function (browser) {\n    browser.url('https://www.ecosia.org/');\n    \n    // expect element header to be present in 1000ms\n    browser.expect.element('header').to.be.present.before(1000);\n    \n    // expect element header to have css property 'display'\n    browser.expect.element('header').to.have.css('display');\n    \n    // expect element header to have attribute 'class' which contains text 'index-header'\n    browser.expect.element('header').to.have.attribute('class').which.contains('index-header');\n    \n    // expect element .search-form to be an input tag\n    browser.expect.element('.search-form').to.be.a('form');\n    \n    // expect element header to be visible\n    browser.expect.element('header').to.be.visible;\n    \n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Page Objects in Tests\nDESCRIPTION: Shows how to use defined page objects in test files, including navigation and element interaction using the @ prefix syntax.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('sample test with page objects', function() {\n  it('Test', function (browser) {\n    var google = browser.page.google();\n\n    google.navigate()\n      .assert.title('Google')\n      .assert.visible('@searchBar')\n      .setValue('@searchBar', 'nightwatch')\n      .click('@submit');\n\n    browser.end();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Test Settings in Nightwatch.js\nDESCRIPTION: Defines a comprehensive set of global test settings for Nightwatch.js, including timeout values, assertion behaviors, and reporter configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/external-globals.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // An object which will be made available on the main test api, throughout the test execution\n  globals: {\n    // this controls whether to abort the test execution when an assertion failed and skip the rest\n    // it's being used in waitFor commands and expect assertions\n    abortOnAssertionFailure: true,\n    \n    // this controls whether to abort the test execution when an element cannot be located; an error\n    // is logged in all cases, but this also enables skipping the rest of the testcase;\n    // it's being used in element commands such as .click() or .getText()\n    abortOnElementLocateError: false,\n    \n    // this will overwrite the default polling interval (currently 500ms) for waitFor commands\n    // and expect assertions that use retry\n    waitForConditionPollInterval: 500,\n    \n    // default timeout value in milliseconds for waitFor commands and implicit waitFor value for\n    // expect assertions\n    waitForConditionTimeout: 5000,\n    \n    // since 1.4.0 – this controls whether to abort the test execution when an element cannot be located; an error\n    // is logged in all cases, but this also enables skipping the rest of the testcase;\n    // it's being used in element commands such as .click() or .getText()\n    abortOnElementLocateError: false,\n    \n    // this will cause waitFor commands on elements to throw an error if multiple\n    // elements are found using the given locate strategy and selector\n    throwOnMultipleElementsReturned: false,\n    \n    // By default a warning is printed if multiple elements are found using the given locate strategy\n    // and selector; set this to true to suppress those warnings\n    suppressWarningsOnMultipleElementsReturned: false,\n    \n    // controls the timeout value for async hooks. Expects the done() callback to be invoked within this time\n    // or an error is thrown\n    asyncHookTimeout : 10000,\n    \n    // controls the timeout value for when running async unit tests. Expects the done() callback to be invoked within this time\n    // or an error is thrown\n    unitTestsTimeout : 2000,\n    \n    // controls the timeout value for when executing the global async reporter. Expects the done() callback to be invoked within this time\n    // or an error is thrown\n    customReporterCallbackTimeout: 20000,\n    \n    // Automatically retrying failed assertions - You can tell Nightwatch to automatically retry failed assertions until a given timeout is reached, before the test runner gives up and fails the test.\n    retryAssertionTimeout: 5000,\n    \n    reporter: function(results, cb) {cb(results);}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Page Elements with CSS and XPath Selectors\nDESCRIPTION: Shows how to define page elements using both CSS and XPath selectors in a page object file. Demonstrates the basic structure for defining elements with different locate strategies.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]'\n    },\n    submit: {\n      selector: '//[@name=\"q\"]',\n      locateStrategy: 'xpath'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic BDD Test in Nightwatch.js\nDESCRIPTION: A simple example of writing a Nightwatch test using the BDD 'describe' and 'it' syntax to search for 'nightwatch' on Ecosia and verify the results. This demonstrates the basic structure of a BDD-style test in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Ecosia', function() {\n  \n  // test() and specify() is also available\n  \n  it('demo test', function(browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .setValue('input[type=search]', 'nightwatch')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Nightwatch.js Main Configuration Object\nDESCRIPTION: Complete configuration object for Nightwatch.js including paths, globals, WebDriver settings, test runner options, and various execution parameters. Defines all possible configuration options with detailed comments.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/defaults.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  custom_commands_path: null,\n  custom_assertions_path: null,\n  page_objects_path: null,\n  globals_path: null,\n  globals: {\n    abortOnAssertionFailure: true,\n    abortOnElementLocateError: false,\n    waitForConditionPollInterval: 500,\n    waitForConditionTimeout: 5000,\n    throwOnMultipleElementsReturned: false,\n    suppressWarningsOnMultipleElementsReturned: false,\n    asyncHookTimeout: 10000,\n    unitTestsTimeout: 2000,\n    customReporterCallbackTimeout: 20000,\n    retryAssertionTimeout: 5000,\n    reporter: function(results, cb) {cb(results)}\n  },\n  dotenv: {},\n  persist_globals: false,\n  output_folder: 'tests_output',\n  src_folders: null,\n  live_output: false,\n  disable_typescript: false,\n  disable_colors: false,\n  parallel_process_delay: 10,\n  selenium: {\n    start_process: false,\n    cli_args: {},\n    server_path: null,\n    log_path: '',\n    port: undefined,\n    check_process_delay: 500,\n    max_status_poll_tries: 15,\n    status_poll_interval: 200\n  },\n  start_session: true,\n  end_session_on_fail: true,\n  skip_testcases_on_fail: undefined,\n  test_workers: false,\n  test_runner: 'default',\n  webdriver: {\n    start_process: false,\n    cli_args: {},\n    server_path: null,\n    log_path: '',\n    use_legacy_jsonwire: undefined,\n    check_process_delay: 100,\n    max_status_poll_tries: 10,\n    status_poll_interval: 200,\n    process_create_timeout: 120000,\n    host: undefined,\n    port: undefined,\n    ssl: undefined,\n    proxy: undefined,\n    timeout_options: {\n      timeout: undefined,\n      retry_attempts: undefined\n    },\n    default_path_prefix: undefined,\n    username: undefined,\n    access_key: undefined\n  },\n  test_settings: {},\n  launch_url: '',\n  silent: true,\n  output: true,\n  detailed_output: true,\n  output_timestamp: false,\n  timestamp_format: '',\n  disable_error_log: false,\n  report_command_errors: false,\n  screenshots: {\n    enabled: false,\n    filename_format,\n    path: '',\n    on_error: true,\n    on_failure: true\n  },\n  log_screenshot_data: false,\n  desiredCapabilities: {\n    browserName: 'firefox'\n  },\n  exclude: null,\n  filter: null,\n  skipgroup: '',\n  sync_test_names: true,\n  skiptags: '',\n  use_xpath: false,\n  parallel_mode: false,\n  report_prefix: '',\n  unit_tests_mode: false,\n  default_reporter: 'junit',\n  backwards_compatibility_mode: false,\n  disable_global_apis: false,\n  enable_fail_fast: false\n}\n```\n\n----------------------------------------\n\nTITLE: Right Clicking on Elements in Nightwatch\nDESCRIPTION: Code showing how to execute a right-click (context menu) action on an element using Nightwatch's element API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').rightClick();\n```\n\n----------------------------------------\n\nTITLE: Using Relative Locators in Nightwatch (TypeScript)\nDESCRIPTION: TypeScript implementation of relative locators in Nightwatch, finding a password field below an email field. It properly types the test function using NightwatchTests interface and demonstrates spatial element selection.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NightwatchTests} from 'nightwatch';\n\nconst ecosiaTest: NightwatchTests = {\n'Demo test ecosia.org': () => {\n  const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));\n  \n  browser\n    .navigateTo('https://archive.org/account/login')\n    .setValue(passwordElement, 'password')\n    .assert.valueEquals('input[type=password]', 'password');\n},\n\nexport default ecosiaTest;\n```\n\n----------------------------------------\n\nTITLE: Setting Test Tags in Nightwatch BDD\nDESCRIPTION: An example showing how to assign tags to a test suite using the BDD interface. Tags can be used to categorize tests and run specific groups of tests based on tags.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  this.tags = ['login']\n  \n  it('...', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Cucumber\nDESCRIPTION: Sets up the Nightwatch configuration file to use Cucumber as the test runner, specifying feature file location and other options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner: {\n    // set cucumber as the runner\n    type: 'cucumber',\n    \n    // define cucumber specific options\n    \n    options: {\n      //set the feature path\n      feature_path: 'examples/cucumber-js/*/*.feature',\n      \n      // start the webdriver session automatically (enabled by default)\n      auto_start_session: true,\n      \n      // use parallel execution in Cucumber\n      // set number of workers to use (can also be defined in the cli as --parallel 2\n      parallel: 2 \n    }\n  },\n  \n  src_folders: ['examples/cucumber-js/features/step_definitions']\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Value with Abort on Failure Option in Nightwatch.js\nDESCRIPTION: This snippet demonstrates how to use an element selector object with the 'abortOnFailure' option set to false. This allows the test to continue executing even if this particular assertion fails.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/writing-assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.setValue({selector: 'input[type=search]', abortOnFailure: false}, 'nightwatch')\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch with Firefox WebDriver\nDESCRIPTION: Example configuration file that sets up Nightwatch to run tests in Firefox using geckodriver. Includes settings for test folders, WebDriver configuration, and test environment settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/nightwatch-configuration-file.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // An array of folders (excluding subfolders) where your tests are located;\n  // if this is not specified, the test source must be passed as the second argument to the test runner.\n  src_folders: [],\n\n  webdriver: {\n    start_process: true,\n    port: 4444,\n    server_path: require('geckodriver').path,\n    cli_args: [\n      // very verbose geckodriver logs\n      // '-vv'\n    ]\n  },\n\n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org',\n      desiredCapabilities : {\n        browserName : 'firefox'\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete AngularJS Todo List Test Example\nDESCRIPTION: A complete working example showing how to use element() in a test scenario with AngularJS todo list application, including element initialization, interaction, and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('angularjs homepage todo list', function() {\n\n  // using the new element() global utility in Nightwatch 2 to init elements\n  // before tests and use them later\n  const todoElement = element('[ng-model=\"todoList.todoText\"]');\n  const addButtonEl = element('[value=\"add\"]');\n\n  it('should add a todo using global element()', function() {\n    // adding a new task to the list\n    browser\n      .navigateTo('https://angularjs.org')\n      .sendKeys(todoElement, 'what is nightwatch?')\n      .click(addButtonEl);\n\n    // verifying if there are 3 tasks in the list\n    expect.elements('[ng-repeat=\"todo in todoList.todos\"]').count.to.equal(3);\n\n    // verifying if the third task if the one we have just added\n    const lastElementTask = element({\n      selector: '[ng-repeat=\"todo in todoList.todos\"]',\n      index: 2\n    });\n\n    expect(lastElementTask).text.to.equal('what is nightwatch?');\n\n    // find our task in the list and mark it as done\n    lastElementTask.findElement('input', function(inputResult) {\n      if (inputResult.error) {\n        throw inputResult.error;\n      }\n\n      const inputElement = element(inputResult.value);\n      browser.click(inputElement);\n    });\n\n    // verify if there are 2 tasks which are marked as done in the list\n    expect.elements('*[module=todoApp] li .done-true').count.to.equal(2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Wikipedia Android App Test with Debug\nDESCRIPTION: Example test script showing how to interact with the Wikipedia Android app, including search functionality and context switching between native and webview. Demonstrates usage of debug command for Appium Inspector integration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/introduction-writing-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Wikipedia Android app test', function() {\n    before(function(app) {\n        app.click('id', 'org.wikipedia:id/fragment_onboarding_skip_button');\n    });\n    \n    it('Search for BrowserStack', async function(app) {\n        app\n            .click('id', 'org.wikipedia:id/search_container')\n            .sendKeys('id', 'org.wikipedia:id/search_src_text', 'browserstack')\n            .debug() //Added debug command. The inspector will be at a state where previous step is executed\n            .click({selector: 'org.wikipedia:id/page_list_item_title', locateStrategy: 'id', index: 0})\n            .waitUntil(async function() {\n                // wait for webview context to be available\n                const contexts = await this.appium.getContexts();\n                \n                return contexts.includes('WEBVIEW_org.wikipedia');\n            })\n            .appium.setContext('WEBVIEW_org.wikipedia')\n            .assert.textEquals('.pcs-edit-section-title', 'BrowserStack');  // command run in webview context\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility in Nightwatch\nDESCRIPTION: Code showing how to verify that an element is visible on the page using Nightwatch's element-level assertion methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').assert.visible();\n```\n\n----------------------------------------\n\nTITLE: Clicking a Button in Google Search with Nightwatch.js\nDESCRIPTION: This test navigates to Google, enters a search term, and clicks the submit button. It demonstrates how to use click commands with assertions to verify the results contain expected text content.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/method/click.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n  \n  'click example test' : function (browser) {\n    \n    browser\n      .url('https://google.com')\n      .waitForElementVisible('input[type=text]')\n      .setValue('input[type=text]', 'nightwatch.js')\n      .click('button[type=submit]', function(result) {\n        this.assert.strictEqual(result.status, 0);\n      })\n      .expect.element('#rcnt').text.to.contain('nightwatchjs.org/');\n  },\n  \n  after : function(browser) {\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Test Tags Implementation\nDESCRIPTION: Demonstrates how to implement test tags for selective test execution. Tags allow tests to belong to multiple suites and can be used to run or skip specific tests using command line flags.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  '@tags': ['login', 'sanity'],\n  'demo login test': function (browser) {\n     // test code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Environment Nightwatch Configuration\nDESCRIPTION: Configuration example showing multiple test environments for different browsers including Safari and Firefox\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n    \n    safari: {\n      desiredCapabilities : {\n        browserName : 'safari',\n        alwaysMatch: {\n          acceptInsecureCerts: false\n        }\n      },\n      webdriver: {\n        port: 4445,\n        start_process: true,\n        server_path: '/usr/bin/safaridriver'\n      }\n    },\n    \n    firefox: {\n      desiredCapabilities : {\n        browserName : 'firefox'\n      },\n      \n      webdriver: {\n        start_process: true,\n        port: 4444,\n        server_path: require('geckodriver').path\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration example showing how to use environment variables in Nightwatch, particularly for BrowserStack integration\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n    \n    browserstack: {\n      webdriver: {\n        start_process: false\n      },\n      \n      selenium: {\n        host: 'hub-cloud.browserstack.com',\n        port: 443\n      },\n      \n      desiredCapabilities: {\n         browserName: 'chrome',\n        'bstack:options' : {\n          userName: '${BROWSERSTACK_USER}',\n          accessKey: '${BROWSERSTACK_KEY}',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Assertion in Nightwatch.js\nDESCRIPTION: Complete example of a custom assertion implementation showing the required interface methods including formatMessage, expected, evaluate, value, failure, actual, and command. This demonstrates how to create assertion logic that can be used with both assert and verify commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.assertion = function(definition, expectedText, msg) {\n  \n  // If the custom commands operates with DOM elements, this options should be set\n  // this.options = {\n  //   elementSelector: true\n  // };\n  \n  /**\n   * Returns the message format which will be used to output the message in the console and also\n   *  the arguments which will be used for replace the place holders, used in the order of appearance\n   * \n   * The message format also takes into account whether the .not negate has been used\n   *\n   * @return {{args: [], message: string}}\n   */\n   this.formatMessage = function() {\n     // Use this.negate to determine if \".not\" is in use\n     // Example: \n     const message = `Testing if the page title ${this.negate ? 'doesn't equal %s' : 'equals %s'}`;\n     \n     return {\n       message,\n       args: [`'${expected}'`]\n     }\n   };\n  \n  /**\n    * Returns the expected value of the assertion which is displayed in the case of a failure\n    *\n    * @return {string}\n    */\n   this.expected = function() {\n     return this.negate ? `is not '${expectedText}'` : `is '${expectedText}'`;\n   };\n   \n   /**\n    * Given the value, the condition used to evaluate if the assertion is passed\n    * @param {*} value\n    * @return {Boolean}\n    */\n   this.evaluate = function(value) {\n     if (typeof value != 'string') {\n       return false;\n     }\n     \n     return value.includes(expectedText);\n   };\n  \n  /**\n   * Called with the result object of the command to retrieve the value which is to be evaluated\n   *\n   * @param {Object} result\n   * @return {*}\n   */\n   this.value = function(result) {\n     return result.value;\n   };\n  \n  /**\n   * When defined, this method is called by the assertion runner with the command result, to determine if the\n   *  value can be retrieved successfully from the result object\n   *\n   * @param result\n   * @return {boolean|*}\n   */\n   this.failure = function(result) {\n     return result === false || result && result.status === -1;\n   };\n  \n   /**\n    * When defined, this method is called by the assertion runner with the command result to determine the actual\n    *  state of the assertion in the event of a failure\n    *\n    * @param {Boolean} passed\n    * @return {string}\n    */\n   this.actual = function(passed) {\n     return passed ? `contains '${expectedText}'` : `does not contain '${expectedText}'`;\n   };\n  \n  /**\n   * The command which is to be executed by the assertion runner; Nightwatch api is available as this.api\n   * @param {function} callback\n   */\n  this.command = function(callback) {\n     // Example: this.api.getText(definition, callback);\n     \n     setTimeout(function() {\n       // The object containing a \"value\" property will be passed to the .value() method to determine the value w\n       // which is to be evaluated (by the .evaluate() method)\n       callback({\n         value: ''\n       });\n       \n     }, 1000);   \n    \n  };\n  \n};\n```\n\n----------------------------------------\n\nTITLE: WebDriver Timeout Options Configuration\nDESCRIPTION: Example demonstrating how to set timeout and retry attempts for WebDriver service requests\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/web-driver-settings.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{timeout: 15000, retry_attempts: 5}\n```\n\n----------------------------------------\n\nTITLE: Complete Page Object Module Definition in Nightwatch.js\nDESCRIPTION: A comprehensive example of a page object module that includes URL definition, elements, commands, props and sections with nested elements and commands. Demonstrates both object and function approaches for props.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/page.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // can be string or function\n  url: function () {\n    return this.api.launchUrl;\n  },\n  elements: {\n    // shorthand, specifies selector\n    mySubmitButton: 'input[type=submit]'\n\n    // full\n    myTextInput: {\n      selector: 'input[type=text]',\n      locateStrategy: 'css selector'\n    }\n  },\n  commands: [\n    {\n      myCustomPause: function () {\n        this.api.pause(this.props.myPauseTime);\n      }\n    }\n  ],\n  // object version (best considered immutable)\n  props: {\n    myPauseTime: 1000\n  },\n\n  sections: {\n    myFooterSection: {\n      selector: '#my-footer',\n      locateStrategy: 'css selector',\n      elements: {\n        myLogo: {\n          selector: '.my-logo',\n          locateStrategy: 'css selector'\n        }\n      },\n      commands: [\n        {\n          myMoveToLogo: function () {\n            this.moveToElement('@myLogo', this.props.myLogoX, this.props.myLogoY);\n          }\n        }\n      ],\n      // function version (recommended)\n      props: function () {\n        return {\n          myLogoX: 10,\n          myLogoY: 10\n        };\n      },\n      sections: {\n        // additional, nested sections\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Ensure API in Nightwatch.js Test\nDESCRIPTION: Demonstrates basic usage of the .ensure API in Nightwatch.js for checking page title and element visibility. The example shows how to verify the page title matches a pattern and ensure an element is visible on the page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('demo test for .ensure', function() {\n\n  it('basic test', function(browser) {\n    browser\n      .url('https://nightwatchjs.org')\n      .ensure.titleMatches(/Nightwatch\\.js/)\n      .ensure.elementIsVisible('#index-container')  \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Callbacks with Async/Await in Nightwatch.js\nDESCRIPTION: This example shows how to use callbacks within an async function in Nightwatch.js. The callback returns a Promise, allowing the result to be used with await. It demonstrates extracting specific values from the result object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-es-6-async-await.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'demo test async': async function (browser) {\n    // get the available window handles\n    const value = await browser.windowHandles(function(result) {\n      // we only want the value, not the entire result object\n      return Promise.resolve(result.value);\n    });\n    \n    console.log('value', value);\n    \n    // switch to the second window\n    browser.switchWindow(value[1]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for React Plugin\nDESCRIPTION: Update the Nightwatch configuration file to include the @nightwatch/react plugin.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['@nightwatch/react']\n}\n```\n\n----------------------------------------\n\nTITLE: Complete BDD Syntax Example in Nightwatch\nDESCRIPTION: A comprehensive example showing all available configuration options and BDD features in Nightwatch, including hooks, page objects, test skipping, and async/await support.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-bdd-describe.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // All current settings are available via this.settings\n  // console.log('Settings', this.settings);\n  \n  // testsuite specific capabilities\n  // this.desiredCapabilities = {};\n  \n  // Enable this if the current test is a unit/integration test (i.e. no Webdriver session will be created)\n  // this.unitTest = false\n  \n  // Set this to false if you'd like the browser window to be kept open in case of a failure or error (useful for debugging)\n  // this.endSessionOnFail = true\n  \n  // Set this to false if you'd like the rest of the test cases/test steps to be executed in the event of an assertion failure/error\n  // this.skipTestcasesOnFail = true\n  \n  // Set this to true if you'd like this test suite to be skipped by the test runner\n  // this.disabled = false\n  \n  // this.retries(3);\n  // this.suiteRetries(2);\n  \n  // Control the assertion and element commands timeout until when an element should be located or assertion passed\n  // this.timeout(1000)\n  \n  // Controll the polling interval between re-tries for assertions or element commands\n  // this.retryInterval(100);\n  \n  before(function(browser) {\n    this.homepage = browser.page.home();\n  });\n  \n  it('startHomepage', () => {\n    this.homepage.navigate();\n    this.homepage.expect.section('@indexContainer').to.be.not.visible;\n  });\n  \n  \n  // Run only this testcase\n  /*\n  it.only('startHomepage', () => {\n    this.homepage.navigate();\n  });\n  */ \n  \n  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()\n  xtest('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n  \n  test('version dropdown is enabled', browser => {\n    const navigation = this.homepage.section.navigation;\n    const navbarHeader = navigation.section.navbarHeader;\n    \n    navbarHeader.expect.element('@versionDropdown').to.be.enabled;\n  });\n  \n  after(browser => browser.end());\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Nightwatch Configuration\nDESCRIPTION: Initial configuration setup with default test environment settings\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://home.cern',\n      webdriver: {\n        start_process: true,\n        server_path: ''\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Filtering in Nightwatch.js\nDESCRIPTION: Use the 'filter' property to specify a folder or file pattern to load only tests that match this pattern. Files that don't match will be ignored.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/advanced-test-source-filtering.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"filter\" : \"tests/*-smoke.js\"\n```\n\n----------------------------------------\n\nTITLE: Writing Nightwatch Tests with Mocha Syntax in JavaScript\nDESCRIPTION: This code snippet demonstrates how to write Nightwatch tests using Mocha syntax. It shows the structure of a test suite with describe and it blocks, and how to use Nightwatch commands within Mocha tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-external-mocha.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google demo test for Mocha', function() {\n\n  describe('with Nightwatch', function() {\n\n    before(function(browser, done) {\n      done();\n    });\n\n    after(function(browser, done) {\n      browser.end(function() {\n        done();\n      });\n    });\n\n    afterEach(function(browser, done) {\n      done();\n    });\n\n    beforeEach(function(browser, done) {\n      browser.url('http://google.com');\n      done();\n    });\n\n    it('uses BDD to run the Google simple test', function(browser) {\n      browser\n        .assert.title('Google')\n        .assert.visible('input[type=text]')\n        .setValue('input[type=text]', 'nightwatch')\n        .assert.visible('button[name=btnG]')\n        .click('button[name=btnG]')\n        .assert.containsText('#main', 'Night Watch');\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration File\nDESCRIPTION: Command to create a new Nightwatch configuration file\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano nightwatch.conf.js\n```\n\n----------------------------------------\n\nTITLE: Using Expect API for Element Assertions in Nightwatch.js\nDESCRIPTION: Demonstrates how to use the expect API to assert element presence and visibility in a Nightwatch.js test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('expect example', function() {\n  it('sample test', function (browser) {\n    // start with identifying the element\n    // and then assert the element is present\n    browser.expect.element('#main').to.be.present;\n\n    // or assert the element is visible\n    browser.expect.element('#main').to.be.visible;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Network Requests in Nightwatch Test\nDESCRIPTION: This snippet demonstrates how to use the captureNetworkRequests() command in a Nightwatch test to log network requests made while navigating to Google's homepage. It captures request details such as URL, method, and headers.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/network-requests/capture-network-calls.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('capture network requests', function() {\n  it('captures and logs network requests as they occur', function() {\n    this.requestCount = 1;\n    browser\n      .captureNetworkRequests((requestParams) => {\n        console.log('Request Number:', this.requestCount++);\n        console.log('Request URL:', requestParams.request.url);\n        console.log('Request method:', requestParams.request.method);\n        console.log('Request headers:', requestParams.request.headers);\n      })\n      .navigateTo('https://www.google.com');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Nth Element with Nightwatch for Mobile App Testing\nDESCRIPTION: This snippet demonstrates how to select the nth element from a list of elements in a mobile app using Nightwatch. It uses a selector object instead of a string to specify additional options like the index parameter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/selectors.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.click({selector: 'org.wikipedia:id/page_list_item_title', locateStrategy: 'id', index: n})\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selectors in Nightwatch\nDESCRIPTION: Examples of using different CSS selector patterns to find elements in the DOM tree. This includes selecting by ID, class, element type with class, and nested elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Find an element which contains id = element-id\nbrowser.element.find('#element-id');\n\n// Find all elements with CSS class active\nbrowser.element.findAll('.active');\n\n// Find all <p> elements with class active\nbrowser.element.find('p.active');\n\n// Find element with class active nested within an element with id list\nbrowser.element.find('#id > .active');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find an element which contains id = element-id\nbrowser.element.find('#element-id');\n\n// Find all elements with CSS class active\nbrowser.element.findAll('.active');\n\n// Find all <p> elements with class active\nbrowser.element.find('p.active');\n\n// Find element with class active nested within an element with id list\nbrowser.element.find('#id > .active');\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Visual Regression Test in Nightwatch\nDESCRIPTION: Example test that navigates to Google and compares a screenshot of the body element against a baseline using the screenshotIdenticalToBaseline assertion.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/visual-regression-testing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('VRT demo test', function() {\n    it('Test Google UI loads correctly', function(browser) {\n        browser\n            .navigateTo('https://www.google.co.uk')\n            .assert.screenshotIdenticalToBaseline('body',  /* Optional */ 'custom-name', {threshold: 0.0}, 'VRT custom-name complete.')\n            .end()\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserStack Integration in Nightwatch.js\nDESCRIPTION: This snippet shows how to configure Nightwatch.js to use BrowserStack for cloud-based testing. It includes WebDriver settings, BrowserStack-specific configurations, and separate configurations for Chrome, Firefox, and Internet Explorer.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  webdriver: {\n    keep_alive: true,\n    timeout_options: {\n      timeout: 60000,\n      retry_attempts: 3\n    }\n  }\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n    \n    browserstack: {\n      selenium: {\n        host: 'hub-cloud.browserstack.com',\n        port: 443\n      },\n      \n      // More info on configuring capabilities can be found on:\n      // https://www.browserstack.com/automate/capabilities?tag=selenium-4\n      desiredCapabilities: {\n        'bstack:options' : {\n          local: 'false',\n          userName: '${BROWSERSTACK_USER}',\n          accessKey: '${BROWSERSTACK_KEY}',\n        }\n      }\n    },\n    \n    'browserstack.chrome': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'chrome',\n        chromeOptions : {\n        }\n      }\n    },\n    \n    'browserstack.firefox': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'firefox'\n      }\n    },\n    \n    'browserstack.ie': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'IE',\n        browserVersion: '11.0',\n        'bstack:options' : {\n          os: 'Windows',\n          osVersion: '10',\n          local: 'false',\n          seleniumVersion: '3.5.2',\n          resolution: '1366x768'\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Test Runner in Nightwatch\nDESCRIPTION: This snippet shows how to configure Mocha as the test runner in Nightwatch, including setting custom options for Mocha.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  test_runner: {\n    type : 'mocha',\n    options : {\n      ui : 'bdd',\n      reporter : 'list'\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks with Async Test Function in Nightwatch.js\nDESCRIPTION: This example shows how to use callbacks within an async test function in Nightwatch.js. It demonstrates retrieving window handles using a callback that returns a Promise, and then using the resolved value to switch windows.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-es6-async.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'demo test async': async function (browser) {\n    // get the available window handles\n    const value = await browser.windowHandles(function(result) {\n      // we only want the value, not the entire result object\n      return Promise.resolve(result.value);\n    });\n    \n    console.log('value', value);\n    \n    // switch to the second window\n    browser.switchWindow(value[1]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch.js Tests Programmatically for GitHub\nDESCRIPTION: This code demonstrates how to set up and run Nightwatch.js tests programmatically. It includes before and after hooks, a test case for navigating to the Nightwatch GitHub repository, and assertions for validating page elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar nightwatch = require('nightwatch');\n\ndescribe('Github', function() {\n  var client = nightwatch.initClient({\n    silent : true\n  });\n  \n  var browser = client.api();\n  \n  this.timeout(99999999);\n  \n  before(function() {\n    \n    browser.perform(function() {\n      console.log('beforeAll')\n    });\n    \n  });\n  \n  beforeEach(function(done) {\n    browser.perform(function() {\n      console.log('beforeEach')\n    });\n    \n    client.start(done);\n  });\n  \n  \n  it('Demo test GitHub', function (done) {\n    browser\n      .url('https://github.com/nightwatchjs/nightwatch')\n      .waitForElementVisible('body', 5000)\n      .assert.title('nightwatchjs/nightwatch · GitHub')\n      .waitForElementVisible('body', 1000)\n      .assert.visible('.container .breadcrumb a span')\n      .assert.containsText('.container .breadcrumb a span', 'nightwatch', 'Checking project title is set to nightwatch');\n    \n    client.start(done);\n  });\n  \n  afterEach(function() {\n    browser.perform(function() {\n      console.log('afterEach')\n    });\n  });\n  \n  after(function(done) {\n    browser.end(function() {\n      console.log('afterAll')\n    });\n    \n    client.start(done);\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Role in Nightwatch\nDESCRIPTION: Code snippets showing how to find elements by their ARIA role in the DOM using Nightwatch's findByRole methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.findByRole('role');\nbrowser.element.findAllByRole('role');\n```\n\n----------------------------------------\n\nTITLE: Getting Element Details in Nightwatch.js\nDESCRIPTION: Shows various methods to get details of elements using Nightwatch.js, including getting text, value, tag name, attributes, CSS properties, ID, accessibility name, and bounding rectangle.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the text of the header\nbrowser.element.find('#header').getText();\n\n// Get the value of the input field\nbrowser.element.find('#input').getValue();\n\n// Get the tag name of an element\nbrowser.element.findByRole('link').getTagName();\n\n// Get the style attribute of an element\nbrowser.element.find('#element').getAttribute('style');\n\n// Get the background-color of an element\nbrowser.element.find('#element').getCssProperty('background-color');\n\n// Get the id of an element\nbrowser.element.find('#element').getId();\n\n// Get the accessibility name of an element\nbrowser.element.find('#element').getAccessibilityName();\n\n// Get the rectangle bounding box of an element\nbrowser.element.find('#element').getRect();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the text of the header\nbrowser.element.find('#header').getText();\n\n// Get the value of the input field\nbrowser.element.find('#input').getValue();\n\n// Get the tag name of an element\nbrowser.element.findByRole('link').getTagName();\n\n// Get the style attribute of an element\nbrowser.element.find('#element').getAttribute('style');\n\n// Get the background-color of an element\nbrowser.element.find('#element').getCssProperty('background-color');\n\n// Get the id of an element\nbrowser.element.find('#element').getId();\n\n// Get the accessibility name of an element\nbrowser.element.find('#element').getAccessibilityName();\n\n// Get the rectangle bounding box of an element\nbrowser.element.find('#element').getRect();\n```\n\n----------------------------------------\n\nTITLE: Matching Element Value Pattern in Nightwatch.js with Chai Expects\nDESCRIPTION: This code illustrates how to assert that an element's value matches a given pattern or regular expression using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).value.to.match();\n```\n\n----------------------------------------\n\nTITLE: Basic Nightwatch Test Using Exports Syntax\nDESCRIPTION: A basic test suite that demonstrates searching on Ecosia.org and verifying results using Nightwatch's exports syntax. The test navigates to Ecosia, performs a search for 'nightwatch', and verifies the results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org' : function(browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .waitForElementVisible('body')\n      .assert.titleContains('Ecosia')\n      .assert.visible('input[type=search]')\n      .setValue('input[type=search]', 'nightwatch')\n      .assert.visible('button[type=submit]')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks in Nightwatch\nDESCRIPTION: Demonstrates the usage of before, after, beforeEach, and afterEach hooks in a Nightwatch test suite. Each hook receives the Nightwatch instance as an argument.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    console.log('Setting up...');\n  },\n  \n  after : function(browser) {\n    console.log('Closing down...');\n  },\n  \n  beforeEach : function(browser) {\n    \n  },\n  \n  afterEach : function(browser) {\n    \n  },\n  \n  'step one' : function (browser) {\n    browser\n     // ...\n  },\n  \n  'step two' : function (browser) {\n    browser\n    // ...\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Tests with Nightwatch\nDESCRIPTION: Demonstrates various ways to run Cucumber tests using Nightwatch, including with and without src_folders defined, and in parallel.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/cucumber-js/features/step_definition\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch examples/cucumber-js/features/step_definitions --parallel 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/cucumber-js/features/step_definitions --headless\n```\n\n----------------------------------------\n\nTITLE: Writing Comprehensive Unit Tests in Nightwatch JavaScript\nDESCRIPTION: Shows a more comprehensive example of unit tests for a Nightwatch utility module, including multiple test cases and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-nodejs-unit-integration-tests.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst common = require('../../common.js');\nconst Utils = common.require('util/utils.js');\n\nmodule.exports = {\n  'test Utils' : {\n    testFormatElapsedTime : function() {\n      \n      var resultMs = Utils.formatElapsedTime(999);\n      assert.equal(resultMs, '999ms');\n      \n      var resultSec = Utils.formatElapsedTime(1999);\n      assert.equal(resultSec, '1.999s');\n      \n      var resultMin = Utils.formatElapsedTime(122299, true);\n      assert.equal(resultMin, '2m 2s / 122299ms');\n    },\n    \n    testMakeFnAsync : function() {\n      function asyncFn(cb) {\n        cb();\n      }\n      \n      function syncFn() {}\n      \n      var convertedFn = Utils.makeFnAsync(1, syncFn);\n      var called = false;\n      convertedFn(function() {\n        called = true;\n      });\n      \n      assert.equal(Utils.makeFnAsync(1, asyncFn), asyncFn);\n      assert.ok(called);\n    }\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Example Tests with Nightwatch\nDESCRIPTION: Shows how to run the Cucumber example tests provided with Nightwatch and displays the expected output.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/cucumber-js/features/step_definition\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment-Specific Globals in Nightwatch Tests\nDESCRIPTION: Example showing how environment-specific globals are accessed within a test when running with a specific environment. When using --env integration, the integration-specific globals override the default values.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-globals.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"integrated global\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Ava Configuration in package.json\nDESCRIPTION: Comprehensive Ava configuration options in package.json, including file patterns, concurrency, environment variables, and more.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/ava.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"test/**/*\",\n\t\t\t\"!test/exclude-files-in-this-directory\",\n\t\t\t\"!**/exclude-files-with-this-name.*\"\n\t\t],\n\t\t\"match\": [\n\t\t//\t\"*oo\",\n\t\t//\t\"!foo\"\n\t\t],\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"environmentVariables\": {\n\t\t\t\"MY_ENVIRONMENT_VARIABLE\": \"some value\"\n\t\t},\n\t\t\"verbose\": true,\n\t\t\"nodeArguments\": [\n\t\t\t\"--trace-deprecation\",\n\t\t\t\"--napi-modules\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using assert and verify methods in Nightwatch.js\nDESCRIPTION: Demonstrates the difference between assert and verify methods in Nightwatch.js. The assert method ends the test when an assertion fails, while the verify method logs the failure and continues with other assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.assert.visible('.non_existing');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.verify.visible('.non_existing');\n```\n\n----------------------------------------\n\nTITLE: Running Cucumber Tests with Nightwatch\nDESCRIPTION: Demonstrates various command-line options for running Cucumber tests with Nightwatch, including parallel execution and headless mode.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/cucumber-js/features/step_definition\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch examples/cucumber-js/features/step_definitions --parallel 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/cucumber-js/features/step_definitions --headless\n```\n\n----------------------------------------\n\nTITLE: Nightwatch Environment Setup for Ava\nDESCRIPTION: JavaScript setup file that creates and configures a Nightwatch client to be used with Ava tests. It handles browser initialization, test execution, and cleanup.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/ava.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Nightwatch = require('nightwatch');\n\nconst createNightwatchClient = function({\n  headless = true,\n  browserName = undefined,\n  silent = true,\n  verbose = false,\n  output = true,\n  env = null,\n  parallel = false,\n  devtools = false,\n  debug = false,\n  persistGlobals = true,\n  configFile = './nightwatch.conf.js',\n  globals = {},\n  webdriver = {},\n  timeout = null,\n  enableGlobalApis = false,\n  reporter = null,\n  alwaysAsync = true,\n  desiredCapabilities = {}\n} = {}) {\n\n  const client = Nightwatch.createClient({\n    headless,\n    browserName,\n    reporter,\n    env,\n    timeout,\n    parallel,\n    output,\n    devtools,\n    debug,\n    enable_global_apis: enableGlobalApis,\n    silent: silent && !verbose,\n    always_async_commands: alwaysAsync,\n    webdriver,\n    persist_globals: persistGlobals,\n    config: configFile,\n    globals,\n    desiredCapabilities\n  });\n\n  client.updateCapabilities(desiredCapabilities);\n\n  return client.launchBrowser();\n};\n\nmodule.exports = async (t, run) => {\n global.browser = await createNightwatchClient();\n try {\n   await run(t);\n } finally {\n   await global.browser.end();\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Component Stories in JavaScript\nDESCRIPTION: This snippet shows how to define component stories for a Form component using Storybook. It includes examples of empty and filled form stories, along with a play function for simulating user interactions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from '@storybook/testing-library';\nimport Form from './Form.jsx';\n\nexport default {\n  title: 'Form',\n  component: Form,\n}\n\nconst Template = (args) => <Form {...args} />\n\n// Component story for an empty form\nexport const EmptyForm = Template.bind({});\n\n// Component story simulating filling in the form\nexport const FilledForm = Template.bind({});\n\nFilledForm.play = async ({ canvasElement }) => {\n  \n  // Starts querying the component from its root element\n  const canvas = within(canvasElement);\n  \n  debugger;\n  \n  // 👇 Simulate interactions with the component\n  await userEvent.type(canvas.getByTestId('new-todo-input'), 'outdoors hike');\n  await userEvent.click(canvas.getByRole('button'));\n};\n\nFilledForm.test = async (browser, { component }) => {\n  // 👇 Run commands and assertions in the Nightwatch context\n  await expect(component).to.be.visible;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Page Object Example\nDESCRIPTION: Demonstrates a complete page object definition including URL and elements, along with test usage example.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    var google = browser.page.google();\n\n    google.navigate()\n      .assert.title('Google')\n      .assert.visible('@searchBar')\n      .setValue('@searchBar', 'nightwatch')\n      .click('@submit');\n\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Jest Setup File for Nightwatch Configuration\nDESCRIPTION: This snippet shows the content of the jest-setup.js file, which is used to configure Nightwatch for use with Jest. It sets up the Nightwatch configuration and enables parallel test execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-jest.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nightwatch = require('nightwatch');\n\nnightwatch.enableGlobalApis();\n\nglobal.beforeAll(async () => {\n  await nightwatch.initClient({});\n});\n\nglobal.afterAll(async () => {\n  await nightwatch.closeSession();\n});\n\n// Enable parallel execution\njest.setTimeout(60000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mochawesome Reporter Options in Nightwatch\nDESCRIPTION: This snippet demonstrates how to configure Mochawesome reporter options in the Nightwatch configuration file using the reporterOptions dictionary within the test_runner section. This example sets a custom output directory for reports.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-mochawesome-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  test_runner: {\n    type : 'mocha',\n    options : {\n      ui : 'bdd',\n      reporter : 'mochawesome',\n      reporterOptions: {\n        reporterDir: './output'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Testing Authentication Configuration\nDESCRIPTION: Examples showing how to configure authentication credentials using environment variables for cloud testing services\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/web-driver-settings.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"username\": \"${SAUCE_USERNAME}\"\n\"access_key\": \"${SAUCE_ACCESS_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling JUnit XML Reports in Nightwatch Configuration\nDESCRIPTION: This configuration snippet shows how to disable JUnit XML reports in Nightwatch. Setting 'output_folder' to false prevents the generation of XML reports.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output_folder: false\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Sections in Nightwatch.js Page Objects\nDESCRIPTION: This code shows how to nest sections within other sections for complex DOM structures. Each section can have its own elements and nested sections, creating a hierarchical representation of the page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-sections.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  sections: {\n    menu: {\n      selector: '#gb',\n      elements: {\n        mail: {\n          selector: 'a[href*=\"mail\"]'\n        },\n        images: {\n          selector: 'a[href*=\"imghp\"]'\n        }\n      },\n      sections: {\n        apps: {\n          selector: 'div.gb_pc',\n          elements: {\n            myAccount: {\n              selector: '#gb192'\n            },\n            googlePlus: {\n              selector: '#gb119'\n            }\n          }\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for BrowserStack in JavaScript\nDESCRIPTION: This snippet shows how to configure Nightwatch to run tests on BrowserStack. It includes settings for the Selenium host, desired capabilities, and various browser configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-cloud-providers.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...,\n    test_settings: {\n        ...,\n        browserstack: {\n            selenium: {\n                host: 'hub.browserstack.com',\n                port: 443\n            },\n            // More info on configuring capabilities can be found on:\n            // https://www.browserstack.com/automate/capabilities?tag=selenium-4\n            desiredCapabilities: {\n                'bstack:options': {\n                    userName: '${BROWSERSTACK_USERNAME}',\n                    accessKey: '${BROWSERSTACK_ACCESS_KEY}'\n                }\n            },\n            \n            disable_error_log: true,\n            webdriver: {\n                    timeout_options: {\n                        timeout: 15000,\n                        retry_attempts: 3\n                    },\n                    keep_alive: true,\n                    start_process: false\n                }\n            },\n            \n            'browserstack.local': {\n                extends: 'browserstack',\n                desiredCapabilities: {\n                    'browserstack.local': true\n                }\n            },\n            \n            'browserstack.firefox': {\n                extends: 'browserstack',\n                desiredCapabilities: {\n                    browserName: 'firefox'\n                }\n            },\n            \n            'browserstack.local_firefox': {\n                extends: 'browserstack.local',\n                desiredCapabilities: {\n                    browserName: 'firefox'\n                }\n            },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element ID in Nightwatch\nDESCRIPTION: Example showing how to retrieve the ID attribute of an element using Nightwatch's getId method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getId();\n```\n\n----------------------------------------\n\nTITLE: Mounting an Angular Component with Nightwatch\nDESCRIPTION: Example of using the mountComponent command to render an Angular component for testing. This command returns the component element which can be used for assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = await browser.mountComponent('/src/components/Form.component')\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Test Hooks in Nightwatch\nDESCRIPTION: Shows how to use asynchronous beforeEach and afterEach hooks in Nightwatch. These hooks receive a 'done' callback as the second argument, which must be called when the asynchronous operation completes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-hooks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  beforeEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 100);\n  },\n  \n  afterEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 200);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Folder in Nightwatch Configuration File\nDESCRIPTION: Example of setting the output folder in the Nightwatch configuration file where test report files including JSON reports will be saved.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    output_folder: 'tests_output'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with TeamCity Reporter\nDESCRIPTION: Command to run a Nightwatch test using the TeamCity reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js -–reporter node_modules/nightwatch-teamcity/index.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Test Function with Window Handling in Nightwatch.js\nDESCRIPTION: This snippet demonstrates an async test function in Nightwatch.js that retrieves window handles and switches to a specific window. It showcases the use of await with browser commands and how to handle their results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-es6-async.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'demo test async': async function (browser) {\n    // get the available window handles\n    const result = await browser.windowHandles();\n    console.log('result', result);\n    \n    // switch to the second window\n    // await is not necessary here since we're not interested in the result\n    browser.switchWindow(result.value[1]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Sauce Labs in JavaScript\nDESCRIPTION: This snippet shows the configuration for running Nightwatch tests on Sauce Labs. It includes settings for the Selenium host, desired capabilities, and a Firefox-specific configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-cloud-providers.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...,\n    test_settings: {\n        ...,\n        saucelabs: {\n            selenium: {\n                host: 'ondemand.saucelabs.com',\n                port: 443\n            },\n            // More info on configuring capabilities can be found on:\n            // https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options\n            desiredCapabilities: {\n                'sauce:options': {\n                username: '${SAUCE_USERNAME}',\n                accessKey: '${SAUCE_ACCESS_KEY}',\n                screenResolution: '1280x1024'\n                // https://docs.saucelabs.com/dev/cli/sauce-connect-proxy/#--region\n                // region: 'us-west-1'\n                // https://docs.saucelabs.com/dev/test-configuration-options/#tunnelidentifier\n                // parentTunnel: '',\n                // tunnelIdentifier: '',\n                },\n                javascriptEnabled: true,\n                acceptSslCerts: true,\n                // https://docs.saucelabs.com/dev/test-configuration-options/#timezone\n                timeZone: 'London'\n            },\n            disable_error_log: false,\n            webdriver: {\n                start_process: false\n            }\n        },\n        \n        'saucelabs.firefox': {\n            extends: 'saucelabs',\n            desiredCapabilities: {\n                browserName: 'firefox',\n                browserVersion: 'latest',\n                platformName: 'Windows 10'\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter as Separate File with Promise in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom reporter in a separate file using an async function that returns a Promise. It defines an async 'write' function that takes results and options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  write: async function(results, options) {\n    \n    console.log('custom reporting...');    \n    \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Element Values in Nightwatch.js\nDESCRIPTION: Shows how to set the value attribute of an element using Nightwatch.js. The example sets the value of a search input field.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the value of input field search as 'Nightwatch'\nbrowser.element.findByPlaceholderText('search').setValue('Nightwatch');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the value of input field search as 'Nightwatch'\nbrowser.element.findByPlaceholderText('search').setValue('Nightwatch');\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-defined Globals in External File\nDESCRIPTION: Example of an external globals.js file showing all pre-defined Nightwatch globals with their default values. Includes configuration options, timeouts, hooks, and custom reporter functionality.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // this controls whether to abort the test execution when an assertion failed and skip the rest\n  // it's being used in waitFor commands and expect assertions\n  abortOnAssertionFailure: true,\n\n  // this will overwrite the default polling interval (currently 500ms) for waitFor commands\n  // and expect assertions that use retry\n  waitForConditionPollInterval: 500,\n\n  // default timeout value in milliseconds for waitFor commands and implicit waitFor value for\n  // expect assertions\n  waitForConditionTimeout : 5000,\n\n  // since 1.4.0 – this controls whether to abort the test execution when an element cannot be located; an error\n  // is logged in all cases, but this also enables skipping the rest of the testcase;\n  // it's being used in element commands such as .click() or .getText()\n  abortOnElementLocateError: false,\n\n  // this will cause waitFor commands on elements to throw an error if multiple\n  // elements are found using the given locate strategy and selector\n  throwOnMultipleElementsReturned: false,\n\n  // By default a warning is printed if multiple elements are found using the given locate strategy\n  // and selector; set this to true to suppress those warnings\n  suppressWarningsOnMultipleElementsReturned: false,\n\n  // controls the timeout value for async hooks. Expects the done() callback to be invoked within this time\n  // or an error is thrown\n  asyncHookTimeout : 10000,\n\n  // controls the timeout value for when running async unit tests. Expects the done() callback to be invoked within this time\n  // or an error is thrown\n  unitTestsTimeout : 2000,\n\n  // controls the timeout value for when executing the global async reporter. Expects the done() callback to be \n  // invoked within this time or an error is thrown\n  customReporterCallbackTimeout: 20000,\n\n  // Automatically retrying failed assertions - You can tell Nightwatch to automatically retry failed assertions \n  // until a given timeout is reached, before the test runner gives up and fails the test.\n  retryAssertionTimeout: 5000,\n\n  // use the same browser session to run the individual  test suites\n  reuseBrowserSession: false,\n\n  // Custom reporter\n  reporter: function(results, done) {\n    // do something with the results\n    done(results);\n  },\n\n  // External before hook is ran at the beginning of the tests run, before creating the Selenium session\n  before(done) {\n    done();\n  },\n\n  // External after hook is ran at the very end of the tests run, after closing the Selenium session\n  after(done) {\n    done();\n  },\n\n  // This will be run before each test suite is started\n  beforeEach(browser, done) {\n    done();\n  },\n\n  // This will be run after each test suite is finished\n  afterEach(browser, done) {\n    done();\n  },\n\n  // Called right after the command .navigateTo() is finished\n  async onBrowserNavigate(browser) {\n    return Promise.resolve();\n  },\n\n  // Called right before the command .quit() is finished\n  async onBrowserQuit(browser) {\n    return Promise.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test File with Nightwatch\nDESCRIPTION: Command example for running a single test file with Nightwatch, specifying the direct path to the test file which will override the src_folders setting.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/firstTest.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Object with Dynamic URL Function in JavaScript\nDESCRIPTION: This example shows how to create a page object with a dynamic URL. The URL is defined as a function that returns a concatenated string using the launchUrl property of the API object and appending '/login'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/using-page-objects.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: function() { \n    return this.api.launchUrl + '/login'; \n  },\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Class-Based Page Commands with Async Operations\nDESCRIPTION: Advanced example of class-based page commands implementing custom element finding functionality with both callback and async/await patterns.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/writing-page-specific-commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class RealCommands {\n  customFindElements(selector, callback = function(r) {return r}) {\n    return this.page.findElements({\n      selector,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      return callback(result ? result.value: []);\n    });\n  }\n  \n  async customFindElementsES6(selector) {\n    const result = await this.page.findElements({\n      selector,\n      suppressNotFoundErrors: true\n    });\n    \n    return result;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with DOM History\nDESCRIPTION: Command to run Nightwatch tests with DOM history tracing enabled using the --trace flag. This captures DOM snapshots after each test step that modifies the application.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/dom-history.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --trace\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with Chrome Environment\nDESCRIPTION: Command to run a specific Nightwatch test using Chrome browser. This will generate reports based on default settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome \n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter via External Globals\nDESCRIPTION: Example of implementing a custom reporter through the external globals file. The reporter function receives test results and a done callback, allowing for custom result processing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-reporters.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reporter : function(results, done) {\n    console.log(results);\n    done();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with Specific JSON Reporter\nDESCRIPTION: Command to run a Nightwatch test with the Chrome browser and explicitly specify JSON as the only reporter format to use.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=json \n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Commands in Nightwatch.js\nDESCRIPTION: Example of creating custom page commands using object notation, including a submit function that handles button clicking and waiting for element states. The command returns the page object for chaining.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/writing-page-specific-commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst googleCommands = {\n  submit: function() {\n    this.api.pause(1000);\n    \n    return this.waitForElementVisible('@submitButton', 1000)\n      .click('@submitButton')\n      .waitForElementNotPresent('@submitButton');\n  }\n};\n\nmodule.exports = {\n  commands: [googleCommands],\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]'\n    },\n    submitButton: {\n      selector: 'input[name=btnK]'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Test Hooks in Nightwatch.js\nDESCRIPTION: Defines global before, after, beforeEach, and afterEach hooks for Nightwatch.js tests, including environment-specific logic and browser interactions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/external-globals.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'default' : {\n    isLocal : true,\n  },\n  \n  'integration' : {\n    isLocal : false\n  },\n  \n  // External before hook is ran at the beginning of the tests run, before creating the Selenium session\n  before(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // start the local server\n      App.startServer(function() {\n        // server listening\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n  \n  // External after hook is ran at the very end of the tests run, after closing the Selenium session\n  after(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // stop the local server\n      App.stopServer(function() {\n        // shutting down\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n  \n  // This will be run before each test suite is started\n  beforeEach(browser, done) {\n    // getting the session info\n    browser.status(function(result) {\n      console.log(result.value);\n      done();\n    });\n  },\n  \n  // This will be run after each test suite is finished\n  afterEach(browser, done) {\n    console.log(browser.currentTest);\n    done();\n  },\n  \n  // Called right after the command .navigateTo() is finished\n  async onBrowserNavigate(browser) {\n    return Promise.resolve();\n  },\n  \n  // Called right before the command .quite() is finished\n  async onBrowserQuit(browser) {\n    return Promise.resolve();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running BrowserStack Tests Commands\nDESCRIPTION: Commands to execute Nightwatch tests on BrowserStack for both Android and iOS platforms.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env browserstack.android\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env browserstack.ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Capabilities in Nightwatch BDD Tests\nDESCRIPTION: Example showing how to set browser-specific capabilities at the test suite level using the describe() interface. This allows defining which browser to use for the test suite.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-bdd-describe.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // testsuite specific capabilities\n  this.desiredCapabilities = {\n    browserName: 'firefox'\n  };\n  \n  it('...', function() {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Using Nightwatch Actions API with Keyboard and Mouse Events in JavaScript\nDESCRIPTION: This example demonstrates how to create a sequence of actions using Nightwatch.js by pressing the SHIFT key, moving to an element, performing a mouse press and release, and then releasing the SHIFT key. The sequence is executed asynchronously with the action ticks properly synchronized between keyboard and mouse devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-complex-user-actions.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('user actions api', function() {\n  \n  it('demo test', function() {\n    browser\n      .perform(function() {\n        const actions = this.actions({async: true});\n        \n        return actions\n          .keyDown(Keys.SHIFT)\n          .move({origin: el})\n          .press()\n          .release()\n          .keyUp(Keys.SHIFT);\n      });\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Group in Nightwatch.js\nDESCRIPTION: Command to execute tests from a specific group using the --group flag\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-groups.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --group smoketests\n```\n\n----------------------------------------\n\nTITLE: Output of Browser Exception Capture in Nightwatch\nDESCRIPTION: This snippet shows the console output when running the previous test. It displays the captured exception details, including the error message, stack trace, and other relevant information.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/catch-js-exceptions.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRunning captureBrowserExceptions():\n────────────────────────────────────────────────────────────────────────────────\n{\n  exceptionDetails: {\n    exceptionId: 1,\n    text: 'Uncaught',\n    lineNumber: 0,\n    columnNumber: 6,\n    scriptId: '55',\n    url: 'https://duckduckgo.com/',\n    stackTrace: { callFrames: [Array] },\n    exception: {\n      type: 'object',\n      subtype: 'error',\n      className: 'Error',\n      description: 'Error: Hello world!\\n' +\n        '    at HTMLAnchorElement.onclick (https://duckduckgo.com/:1:7)',\n      objectId: '6711588812373266697.1.1',\n      preview: [Object]\n    },\n    executionContextId: 1\n  },\n  timestamp: 2022-06-10T13:14:52.722Z\n}\nNo assertions ran.\n```\n\n----------------------------------------\n\nTITLE: Extended Mocha Describe Syntax Example\nDESCRIPTION: Comprehensive example showing the extended describe syntax available when using Mocha with Nightwatch, including hooks and configuration options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // All current settings are available via this.settings\n  // console.log('Settings', this.settings);\n  \n  // All current cli arguments are available via this.argv\n  // console.log('argv', this.argv);\n  \n  // The current mocha options object\n  // console.log('mochaOptions', this.mochaOptions);\n  \n  // All current globals are available via this.globals\n  // console.log('globals', this.globals);\n  \n  // testsuite specific capabilities\n  // this.desiredCapabilities = {};\n  \n  // Enable this if the current test is a unit/integration test (i.e. no Webdriver session will be created)\n  // this.unitTest = false\n  \n  // Set this to false if you'd like the browser window to be kept open in case of a failure or error (useful for debugging)\n  // this.endSessionOnFail = true\n  \n  // Set this to false if you'd like the rest of the test cases/test steps to be executed in the event of an assertion failure/error\n  // this.skipTestcasesOnFail = true\n  \n  // this.suiteRetries(2);\n  \n  // Control the assertion and element commands timeout until when an element should be located or assertion passed\n  // this.waitForTimeout(1000)\n  \n  // Control the unit test timeout \n  // this.timeout(1000)\n  \n  // Controll the polling interval between re-tries for assertions or element commands\n  // this.waitForRetryInterval(100);\n  \n  before(function(browser) {\n    this.homepage = browser.page.home();\n  });\n  \n  it('startHomepage', () => {\n    this.homepage.navigate();\n    this.homepage.expect.section('@indexContainer').to.be.not.visible;\n  });\n  \n  \n  // Run only this testcase\n  // it.only('startHomepage', () => {\n  //   this.homepage.navigate();\n  // });\n  \n  // skipped testcase: equivalent to xit()\n  it.skip('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n  \n  after(browser => browser.end());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Element Details in Nightwatch.js\nDESCRIPTION: Demonstrates how to set text and attributes of elements using Nightwatch.js. Examples include setting text content and style attributes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the text of header as 'Nightwatch'\nbrowser.element.find('#headeer').setText('Nightwatch');\n\n// Set the style of button as \"display:none;\"\nbrowser.element.find('#button').setAttribute('style','display:none;');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the text of header as 'Nightwatch'\nbrowser.element.find('#headeer').setText('Nightwatch');\n\n// Set the style of button as \"display:none;\"\nbrowser.element.find('#button').setAttribute('style','display:none;');\n```\n\n----------------------------------------\n\nTITLE: Using pause() for Debugging in Nightwatch.js Test\nDESCRIPTION: This code demonstrates a complete Nightwatch.js test that uses the pause() command for debugging. It searches for 'Nightwatch.js' on DuckDuckGo and verifies the results, with a pause for manual inspection.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/debugging-tests/using-pause.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo pause example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .url('https://duckduckgo.com')\n      .pause()\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Nightwatch.js Tests\nDESCRIPTION: The test code shows how to use setValue() command to upload a file using a file input element in a Nightwatch test. The example demonstrates uploading a file that exists relative to the project path.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/uploading-files.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"test\": function(browser) {\n        browser\n            .url(\"file:///path/to/your/form.html\")\n            .setValue(\"input[type=file]\", require(\"path\").resolve(__dirname + \"/image.jpg\"))\n            .pause(2000)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relative Locators in Nightwatch (JavaScript)\nDESCRIPTION: Example demonstrating Nightwatch's relative locator functionality to find elements based on their spatial relationship to other elements. It finds a password input field located below an email field and sets its value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org': function (browser) {\n    const passwordElement = locateWith(By.tagName('input')).below(By.css('input[type=email]'));\n    \n    browser\n      .navigateTo('https://archive.org/account/login')\n      .setValue(passwordElement, 'password')\n      .assert.valueEquals('input[type=password]', 'password');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Specific Tag\nDESCRIPTION: Command to run only Nightwatch tests that have the 'login' tag using the --tag command line flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --tag login\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Nightwatch Tests\nDESCRIPTION: Example test showing how to access global variables defined in the Nightwatch configuration file using the browser.globals object within a test case.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"some value\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Selected Accessibility Rules with Nightwatch\nDESCRIPTION: This snippet shows how to run only selected accessibility tests by passing specific rule IDs to the axeRun command. It demonstrates running only the 'color-contrast' and 'image-alt' rules on the body element of a web page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/accessibility-testing.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('accessibility testing', function() {\n  \n  it('accessibility rule subset', function(browser) {\n    browser\n      .navigateTo('https://www.w3.org/WAI/demos/bad/after/home.html')\n      .axeInject()\n      .axeRun('body', {\n        runOnly: ['color-contrast', 'image-alt'],\n      });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Baseline Screenshots in Nightwatch VRT\nDESCRIPTION: Command to run Nightwatch tests with the update-screenshots flag, which will update baseline images for future comparisons after reviewing intentional changes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/visual-regression-testing.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --update-screenshots\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mock Server Routes in Nightwatch\nDESCRIPTION: Shows how to set up routes for a mock server in Nightwatch API tests. This example sets up a GET route that returns a JSON response.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait mockServer.setup((app) => {\n      app.get('/api/v1/schemas', function (req, res) {\n        console.log('GET /api/v1/schemas called');\n        \n        res.status(200).json([\n          {\n            id: 'test-schema-id1'\n          },\n          {\n            id: 'test-schema-id2'\n          }\n        ]);\n      })\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests in Nightwatch BDD\nDESCRIPTION: An example showing how to define a unit/integration test in Nightwatch using the BDD interface. This prevents Nightwatch from creating a WebDriver session for tests that don't require browser interaction.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n   this.unitTest = true;\n   \n   it('...', function() {\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Testing Plugin Options\nDESCRIPTION: Sets the configuration option for logging HTTP responses to the console in the Nightwatch config file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"@nightwatch/apitesting\" : {\n    \"log_responses\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using expect.url() for URL Assertions in Nightwatch.js\nDESCRIPTION: Example demonstrating how to use expect.url() method to perform URL assertions in Nightwatch.js tests. Shows how to verify if a URL contains HTTPS protocol and ends with .org domain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_url.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.url().to.contain('https://');\n  browser.expect.url().to.endWith('.org');\n};\n```\n\n----------------------------------------\n\nTITLE: ES Modules Test Format\nDESCRIPTION: Example showing how to write Nightwatch tests using ES Modules syntax. This format is required when using ES Modules in your project and requires using a nightwatch.conf.cjs config file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports default {\n  'Demo test ecosia.org' : function(browser) {\n    browser\n      .url('https://www.ecosia.org/')\n      .waitForElementVisible('body')\n      .assert.titleContains('Ecosia')\n      .assert.visible('input[type=search]')\n      .setValue('input[type=search]', 'nightwatch')\n      .assert.visible('button[type=submit]')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Group in Nightwatch.js\nDESCRIPTION: Command to skip a specific test group using the --skipgroup flag\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-groups.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skipgroup smoketests\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Mochawesome Reporter\nDESCRIPTION: CLI command to run Nightwatch tests using the Mochawesome reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/ --reporter mochawesome\n```\n\n----------------------------------------\n\nTITLE: Asserting Attribute Equals Specific Text\nDESCRIPTION: Demonstrates how to use app.assert.attributeEquals() to verify if a specific attribute of an element exactly matches the given text. This requires an exact match of the attribute value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute equals BrowserStack\napp.assert.attributeEquals({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','BrowserStack');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute equals BrowserStack\napp.assert.attributeEquals({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','BrowserStack');\n```\n\n----------------------------------------\n\nTITLE: Implementing Stubs in Nightwatch Tests\nDESCRIPTION: Example of using stubs to replace function implementations for testing\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('use stubs in nightwatch', function() {\n  it('stub hello', function({sinon}) {\n    const obj = {\n      hello: () => console.log('Hello!')\n    }\n    const sayHello = () => obj.hello();\n    const stub = sinon.stub(obj, 'hello').returns('hi'); // replace hello with a dummy implementation that returns 'hi'\n    const result = sayHello();\n    assert.strictEqual(result, 'hi'); // check that the stubbed function returned 'hi'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mocks in Nightwatch Tests\nDESCRIPTION: Example of using mocks to create fake objects with expectations and verification\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('use mocks in nightwatch', function() {\n  it('mock hello obj', function({sinon}) {\n    const obj = {\n      hello: () => console.log('Hello!')\n    }\n    const sayHello = () => obj.hello();\n    const mock = sinon.mock(obj).expects('hello').atLeast(1).returns(null); //set a mock on hello\n    sayHello();\n    mock.verify(); // mocks comes with inbuilt assertion \n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Element Objects with Index in Nightwatch.js\nDESCRIPTION: Demonstrates using an element object with index property to target a specific element when multiple elements match the selector.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/finding-and-interacting-with-elements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test ecosia.org': function (browser) {\n    browser.setValue({selector: 'input[type=search]', index: 1}, 'nightwatch')\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running API Tests with Test Doubles\nDESCRIPTION: Command to run API tests using the testdoubles environment configuration\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env testdoubles\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Contains in Nightwatch\nDESCRIPTION: Code showing how to verify that the current browser URL contains a specific substring using Nightwatch's browser-level assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.assert.urlContains('text');\n```\n\n----------------------------------------\n\nTITLE: Launching Browser Session - JavaScript\nDESCRIPTION: Launches a new browser session using an existing Nightwatch client. Returns a browser API object that can be used for interaction with the browser.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/programmatic/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await client.launchBrowser();\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with Debug Flag in Bash\nDESCRIPTION: This command runs a specific Nightwatch test file with the debug flag enabled, which is necessary for using the Nightwatch Inspector. It specifies the test file path, sets the environment to Chrome, and includes the debug flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/nightwatch-inspector.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch /test/inspector_demo.js --env chrome --debug\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Cucumber Formatters\nDESCRIPTION: Demonstrates how to use Cucumber formatters for test output and reporting with Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js --format @cucumber/pretty-formatter\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js --require cucumber.conf.js --format json:report/cucumber_report.json\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Text Match in Mobile Elements\nDESCRIPTION: Shows how to use app.assert.textEquals() to verify if an element's text exactly matches the specified text. This requires an exact match rather than a partial match.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` equals text BrowserStack\napp.assert.textEquals({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'BrowserStack');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` equals text BrowserStack\napp.assert.textEquals({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'BrowserStack');\n```\n\n----------------------------------------\n\nTITLE: Right Clicking Elements in Nightwatch.js\nDESCRIPTION: Illustrates how to right-click on a web element using Nightwatch.js. The example shows right-clicking on an 'options' button.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Right click on the options button\nbrowser.element.findByText('options').rightClick();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Right click on the options button\nbrowser.element.findByText('options').rightClick();\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Session for Unit Testing\nDESCRIPTION: Configuration to disable browser session when using test doubles for unit testing\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ....\n  testdoubles: {\n    start_session: false,\n    webdriver: {\n      start_process: false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Asynchronous Unit Tests in Nightwatch JavaScript\nDESCRIPTION: Demonstrates how to write an asynchronous unit test in Nightwatch using the 'done' callback to signal test completion.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-nodejs-unit-integration-tests.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\nmodule.exports = {\n  const assert = require('assert');\n  \n  module.exports = {\n    'demo UnitTest' : function (done) {\n      assert.equal('TEST', 'TEST');\n      \n      setTimeout(function() {  \n        done();\n      }, 10);\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Long Pressing a Key in Nightwatch.js Android Testing\nDESCRIPTION: This code shows how to long press a specific key on an Android device keyboard using Nightwatch.js and Appium. It uses the longPressKeyCode method with a key code as an argument. This command is Android-specific.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//Press Keycode Back \nawait app.appium.longPressKeyCode(4);\n```\n\n----------------------------------------\n\nTITLE: Basic Nightwatch Mobile Web Test\nDESCRIPTION: Sample test demonstrating mobile web testing capabilities by searching on the Rijks Museum website. Includes cookie handling and search functionality verification.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/with-appium.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Nightwatch Website tests', function() {\n    it('Searching the Rijksmuseum ', async function(){\n    browser.navigateTo('https://www.rijksmuseum.nl/en');\n    const cookieDialogVisible = await browser.isVisible({\n      selector: '.cookie-consent-bar-wrap',\n      suppressNotFoundErrors: true\n    });\n    \n    if (cookieDialogVisible) {\n      browser.click('.cookie-consent-bar-wrap button.link');\n    }\n    browser.pause(1000).click('a[aria-label=\"Search\"]');\n    \n    return browser.setValue('input.search-bar-input[type=text]', ['night watch'])\n      .click('button.button.search-bar-button')\n      .pause(1000)\n      .assert.containsText('.search-results', 'The Night Watch, Rembrandt van Rijn, 1642');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Matches Regex in Nightwatch\nDESCRIPTION: Example demonstrating how to verify that the current browser URL matches a regular expression pattern using Nightwatch's browser-level assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.assert.urlMatches('regex');\n```\n\n----------------------------------------\n\nTITLE: Running Stories in Parallel with Nightwatch\nDESCRIPTION: Command to run multiple stories in parallel using Nightwatch workers for improved performance.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch ./src/stories/**.stories.jsx --env chrome --workers=4 --headless\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Objects Path in Nightwatch\nDESCRIPTION: JSON configuration showing how to specify the directory path where Nightwatch should look for page object files.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/page-object-model.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"page_objects_path\": [\"nightwatch/pages\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Objects Path in Nightwatch\nDESCRIPTION: JSON configuration showing how to specify the directory path where Nightwatch should look for page object files.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/page-object-model.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"page_objects_path\": [\"nightwatch/pages\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Command Using Transport Actions\nDESCRIPTION: Example of using Nightwatch protocol actions in a custom command\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class CustomCommand {\n  async command() {\n    let returnValue;\n\n    // list all the avaialble transport actions\n    // console.log(this.transportActions);\n\n    try {\n      returnValue = await this.transportActions.getCurrentUrl();\n    } catch (err) {\n      console.error('An error occurred', err);\n      returnValue = {\n        status: -1,\n        error: err.message\n      }\n    }\n\n    return returnValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Selected State\nDESCRIPTION: Shows how to verify if a mobile element is in a selected state using app.assert.selected(). This is useful for checkboxes, radio buttons, and other selectable elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is selected\napp.assert.selected({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is selected\napp.assert.selected({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\n----------------------------------------\n\nTITLE: Advanced Mobile Gestures with W3C Actions API\nDESCRIPTION: Implementation of complex mobile gestures including swipe and pinch-zoom using the W3C Actions API. Demonstrates multi-finger touch interactions and precise gesture control.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/with-appium.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('W3C Actions API', function() {\n  it('swipe down and zoom in the page - w3c actions api ', async function(){\n    await  browser.perform(function(){\n      const actions = this.actions();\n      \n      return actions.move({x: 100, y: 100}).press().move({origin: 'pointer', y: -300, duration: 50}).release();\n    });\n    \n    await browser.pause(2000);\n    \n    await browser.perform(function(){\n      const actions= this.actions();\n      const pointer1 = new Device('finger-1', 'touch');\n      const pointer2 = new Device('finger-2', 'touch');\n      actions.insert(pointer1, pointer1.move({duration: 0, x: 100, y: 70}), pointer1.press(), {type: 'pause', duration: 500}, pointer1.move({duration: 1000, origin: 'pointer', x: 0, y: -20}), pointer1.release());\n      actions.insert(pointer2, pointer2.move({duration: 0, x: 100, y: 100}), pointer2.press(), {type: 'pause', duration: 500}, pointer2.move({duration: 1000, origin: 'pointer', x: 0, y: 20}), pointer2.release());\n      \n      return actions; \n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Simulator Environment in Nightwatch\nDESCRIPTION: Configuration for the Nightwatch test settings to support running tests on iOS simulators. Includes the specific 'app.ios.simulator' environment with iOS capabilities that extends the base 'app' configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest_setting:{\n  ...\n  'app.ios.simulator': {\n      extends: 'app',\n      'desiredCapabilities': {\n        // More capabilities can be found at https://github.com/appium/appium-xcuitest-driver#capabilities\n        browserName: null,\n        platformName: 'ios',\n        // `appium:options` is not natively supported in Appium v1,but works with Nightwatch.\n        // If copying these capabilities elsewhere while using Appium v1,make sure to remove `appium:options`\n        // and add `appium:` prefix to each one of its capabilities,e.g. change 'app' to 'appium:app'.\n        'appium:options': {\n          automationName: 'XCUITest',\n          // platformVersion: '15.5',\n          deviceName: 'iPhone 13',\n          // While Appium v1 supports relative paths,it's more safe to use absolute paths instead.\n          // Appium v2 does not support relative paths.\n          app: `${__dirname}/nightwatch/sample-apps/wikipedia.zip`,\n          bundleId: 'org.wikimedia.wikipedia',\n          newCommandTimeout: 0\n        }\n      }\n    },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Attributes in Nightwatch\nDESCRIPTION: Example showing how to set attributes on an element using Nightwatch's setAttributes method, specifying both the attribute name and value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').setAttributes('attribute', 'attribute value');\n```\n\n----------------------------------------\n\nTITLE: Installing Chrome Driver for Android Device Testing\nDESCRIPTION: Command to install the latest version of chromedriver npm package required for testing on real Android devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm i chromedriver@latest --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Test Hooks in Nightwatch.js\nDESCRIPTION: Example showing the basic structure of before, after, beforeEach, and afterEach hooks in a Nightwatch.js test suite. The hooks execute in a specific sequence with before/after running at suite level and beforeEach/afterEach running for each test step.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/using-test-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    console.log('Setting up...');\n  },\n  \n  after : function(browser) {\n    console.log('Closing down...');\n  },\n  \n  beforeEach : function(browser) {\n    \n  },\n  \n  afterEach : function(browser) {\n    \n  },\n  \n  'step one' : function (browser) {\n    browser\n     // ...\n  },\n  \n  'step two' : function (browser) {\n    browser\n    // ...\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Test Hooks in Nightwatch.js\nDESCRIPTION: Example showing the basic structure of before, after, beforeEach, and afterEach hooks in a Nightwatch.js test suite. The hooks execute in a specific sequence with before/after running at suite level and beforeEach/afterEach running for each test step.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/using-test-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    console.log('Setting up...');\n  },\n  \n  after : function(browser) {\n    console.log('Closing down...');\n  },\n  \n  beforeEach : function(browser) {\n    \n  },\n  \n  afterEach : function(browser) {\n    \n  },\n  \n  'step one' : function (browser) {\n    browser\n     // ...\n  },\n  \n  'step two' : function (browser) {\n    browser\n    // ...\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshots in Nightwatch Configuration\nDESCRIPTION: JSON configuration snippet showing how to enable automatic screenshot capture on test failures in Nightwatch. Screenshots will be saved to the specified path directory when tests fail.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/taking-screenshots-on-fail.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"test_settings\" : {\n    \"default\" : {\n      \"screenshots\" : {\n        \"enabled\" : true,\n        \"on_failure\" : true,\n        \"path\" : \"./screens\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration for Nightwatch\nDESCRIPTION: Complete Jest configuration file with Nightwatch environment settings including test environment options and test matching patterns\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/jest.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  testEnvironment: 'jest-environment-nightwatch',\n  testEnvironmentOptions: {\n    headless: true,\n    browserName: 'chrome',\n    baseUrl: '',\n    verbose: false,  \n    output: true,\n    env: null, \n    parallel: false,\n    devtools: false,\n    debug: false,\n    autoStartSession: true,\n    persistGlobals: true,\n    configFile: './nightwatch.conf.js',\n    globals: {}, \n    webdriver: {},\n    timeout: null,\n    enableGlobalApis: false,\n    alwaysAsync: true,\n    desiredCapabilities: {},\n    async setup(browser) {},\n    async teardown(browser) {},\n  },\n  \n  testMatch: [\n      \"**/tests/*.[jt]s?(x)\"\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: Class-based Custom Pause Command with Promise\nDESCRIPTION: Implementation of a custom pause command using class-style approach with Promise-based completion\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class CustomPause {\n  command(ms, cb) {\n    // If we don't pass the milliseconds, the client will\n    // be suspended indefinitely\n    if (!ms) {\n      return;\n    }\n\n    const returnValue = {\n      value: 'something'\n    };\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // if we have a callback, call it right before the complete event\n        if (cb) {\n          cb.call(this.api);\n        }\n\n        resolve(returnValue);\n      }, ms);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Regression Settings in Nightwatch\nDESCRIPTION: Advanced configuration showing how to override default VRT settings like paths for screenshots, comparison threshold, and update behaviors in the Nightwatch configuration file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/visual-regression-testing.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  \n  //... other config\n  \n  '@nightwatch/vrt': {\n    latest_screenshots_path: 'vrt/latest',\n    latest_suffix: '',\n    baseline_screenshots_path: 'vrt/baseline',\n    baseline_suffix: '',\n    diff_screenshots_path: 'vrt/diff',\n    diff_suffix: '',\n    threshold: 0.00,\n    prompt: false,\n    updateScreenshots: false\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Element Properties Object in Nightwatch (TypeScript)\nDESCRIPTION: TypeScript version demonstrating how to use an element properties object to target a specific element when multiple elements match the selector. It uses the index property to target the second matching element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NightwatchTests} from 'nightwatch';\n\nconst ecosiaTest: NightwatchTests = {\n'Demo test ecosia.org': () => {\n  browser.setValue({selector: 'input[type=search]', index: 1}, 'nightwatch');\n},\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility\nDESCRIPTION: Shows how to verify if a mobile element is visible using app.assert.visible(). This checks if an element is displayed on the screen and can be interacted with.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is visible\napp.assert.visible({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is visible\napp.assert.visible({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\n----------------------------------------\n\nTITLE: Asserting Attribute Contains Specific Text\nDESCRIPTION: Shows how to use app.assert.attributeContains() to verify if a specific attribute of an element contains the given text. This is useful for attributes like 'text', 'resource-id', etc.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute contains Browser\napp.assert.attributeContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','Browser');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute contains Browser\napp.assert.attributeContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','Browser');\n```\n\n----------------------------------------\n\nTITLE: Getting Element Text in Nightwatch\nDESCRIPTION: Code demonstrating how to retrieve the text content of an element using Nightwatch's getText method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getText();\n```\n\n----------------------------------------\n\nTITLE: Pressing a Key in Nightwatch.js Android Testing\nDESCRIPTION: This snippet demonstrates how to press a specific key on an Android device keyboard using Nightwatch.js and Appium. It uses the pressKeyCode method with a key code as an argument. This command is Android-specific.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n//Press Keycode Back \nawait app.appium.pressKeyCode(4);\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation in Nightwatch\nDESCRIPTION: Code demonstrating how to simulate a specific geolocation in the browser using Nightwatch's setGeolocation method with latitude, longitude and accuracy parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.setGeolocation({latitude: <value>, longitude: <value>, accuracy: 100});\n```\n\n----------------------------------------\n\nTITLE: React Component Story with Debug Configuration\nDESCRIPTION: Example of a React component story with debugging setup, including play function with debugger statement and component test implementation using Storybook testing library.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/debugging.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from '@storybook/testing-library';\nimport Form from './Form.jsx';\n\nexport default {\n  title: 'Form',\n  component: Form,\n}\n\nconst Template = (args) => <Form {...args} />\n\n// Component story for an empty form\nexport const EmptyForm = Template.bind({});\n\n// Component story simulating filling in the form\nexport const FilledForm = Template.bind({});\n\nFilledForm.play = async ({ canvasElement }) => {\n  \n  // Starts querying the component from its root element\n  const canvas = within(canvasElement);\n  \n  debugger;\n  \n  // 👇 Simulate interactions with the component\n  await userEvent.type(canvas.getByTestId('new-todo-input'), 'outdoors hike');\n  await userEvent.click(canvas.getByRole('button'));\n};\n\nFilledForm.test = async (browser, { component }) => {\n  // 👇 Run commands and assertions in the Nightwatch context\n  await expect(component).to.be.visible;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ava Tests Directly\nDESCRIPTION: Command to run Ava tests directly using npx without going through npm scripts.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/ava.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx ava\n```\n\n----------------------------------------\n\nTITLE: Double Clicking Elements in Nightwatch.js\nDESCRIPTION: Shows how to perform a double click on a web element using Nightwatch.js. The example demonstrates double clicking on a 'Sign In' button.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Double click on the sign in button\nbrowser.element.findByText('Sign In').doubleClick();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Double click on the sign in button\nbrowser.element.findByText('Sign In').doubleClick();\n```\n\n----------------------------------------\n\nTITLE: Writing Mocha Tests with Nightwatch\nDESCRIPTION: An example of writing a test using Mocha syntax with Nightwatch, including hooks and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google demo test for Mocha', function() {\n  \n  describe('with Nightwatch', function() {\n    \n    before(function(browser, done) {\n      done();\n    });\n    \n    after(function(browser, done) {\n      browser.end(function() {\n        done();\n      });\n    });\n    \n    afterEach(function(browser, done) {\n      done();\n    });\n    \n    beforeEach(function(browser, done) {\n      done();\n    });\n    \n    it('uses BDD to run the Google simple test', function(browser) {\n      browser\n        .url('https://google.com')\n        .expect.element('body').to.be.present.before(1000);\n      \n      browser.setValue('input[type=text]', ['nightwatch', browser.Keys.ENTER])\n        .pause(1000)\n        .assert.containsText('#main', 'Night Watch');\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Pagination Controls for Mobile App Testing Documentation\nDESCRIPTION: HTML structure for pagination controls at the bottom of a documentation page. It provides navigation to previous (Mobile App Commands) and next (Running Mobile App Tests) pages in the mobile app testing guide.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"doc-pagination pt-40\">\n  <div class=\"previous\">\n    <a href=\"/guide/mobile-app-testing/commands.html\">\n      <span>←</span>\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Back</span>\n          <span class=\"bigT\">Mobile App Commands</span>\n        </div>\n    </a>\n  </div>\n  <div class=\"doc-pagination justify-content-end pt-40\">\n  <div class=\"next\">\n    <a href=\"/guide/mobile-app-testing/running-tests.html\">\n        <div class=\"d-flex flex-column\"><span class=\"smallT\">Next Page</span><span class=\"bigT\">Running Mobile App Tests</span></div>\n        <span>→</span>\n    </a>\n  </div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Dev Server\nDESCRIPTION: Command to start the Vite development server.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import Script\nDESCRIPTION: Example of a script to import and mount a Vue component for testing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mount} from '/node_modules/@vue/test-utils/dist/vue-test-utils.esm-browser.js'\nimport Component from '/test/components/vue/Form.vue'\n\nlet element = mount(Component, {\n attachTo: document.getElementById('app'),\n global: {\n   plugins: []\n }\n});\n\n// This will be used by Nightwatch to inspect properties of this component\nwindow['@@component_element'] = element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Spies in Nightwatch Tests\nDESCRIPTION: Example of using spies to monitor function calls and verify their execution\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('use spies in nightwatch', function() {\n  it('should log message when called', function({sinon}) {\n    const obj = {\n      hello: () => console.log('Hello!')\n    }\n    const sayHello = () => obj.hello(); \n    const spy = sinon.spy(obj, 'hello'); // create a spy on hello\n    sayHello();\n    assert(spy.calledOnce);  // assert that the spy was called once\n    spy.restore();  // restore original hello function\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Storybook Plugin\nDESCRIPTION: Configuration for the Nightwatch Storybook plugin in the nightwatch.conf.js file. Shows how to include the plugin in the plugins array.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    //...\n    '@nightwatch/storybook'      \n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Mocha Test Example with Google Search\nDESCRIPTION: Sample test demonstrating how to write a complete test using Mocha with Nightwatch, including before/after hooks and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google demo test for Mocha', function() {\n  \n  describe('with Nightwatch', function() {\n    \n    before(function(browser, done) {\n      done();\n    });\n    \n    after(function(browser, done) {\n      browser.end(function() {\n        done();\n      });\n    });\n    \n    afterEach(function(browser, done) {\n      done();\n    });\n    \n    beforeEach(function(browser, done) {\n      done();\n    });\n    \n    it('uses BDD to run the Google simple test', function(browser) {\n      browser\n        .url('https://google.com')\n        .expect.element('body').to.be.present.before(1000);\n      \n      browser.setValue('input[type=text]', ['nightwatch', browser.Keys.ENTER])\n        .pause(1000)\n        .assert.containsText('#main', 'Night Watch');\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting XPath as Default Selector in Nightwatch.js Configuration\nDESCRIPTION: Illustrates how to set XPath as the default selector strategy in the Nightwatch.js configuration file. This is useful when XPath expressions are predominantly used in tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-xpath-selectors.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"use_xpath\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Commands in Nightwatch.js Tests\nDESCRIPTION: Example test case showing how to use a custom page object command. Demonstrates setting a value and calling the custom submit command.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/writing-commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    var google = browser.page.google();\n    google.setValue('@searchBar', 'nightwatch')\n      .submit();\n\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Script for Component Rendering\nDESCRIPTION: Example of importing a script to render a component using the Nightwatch API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst formComponent = await browser\n  .launchComponentRenderer()\n  .importScript('/test/lib/scriptToImport.js');\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Globals in Nightwatch\nDESCRIPTION: Example of how to configure environment-specific global variables that override the default globals when running tests with a specific environment. This allows for different global values in different test environments.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-globals.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n\n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n\n      \"globals\": {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    },\n\n    \"integration\": {\n      \"globals\": {\n        \"myGlobalVar\" : \"integrated global\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Selenium/Webdriver Endpoint Call\nDESCRIPTION: Example of directly calling Selenium/Webdriver endpoints in a custom command\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class CustomCommand {\n  async command() {\n    let returnValue;\n\n    try {\n      returnValue = await this.httpRequest({\n        // the pathname of the endpoint to call\n        path: '/session/:sessionId/url',\n\n        // the current Selenium/Webdriver sessionId\n        sessionId: this.api.sessionId,\n\n        // host and port are normally not necessary, since it is the current Webdriver hostname/port\n        //host: '',\n        //port: '',\n\n        // the body of the request\n        data: {\n          url: 'http://localhost/test_url'\n        },\n\n        method: 'POST'\n      });\n    } catch (err) {\n      console.error('An error occurred', err);\n      returnValue = {\n        status: -1,\n        error: err.message\n      }\n    }\n\n    return returnValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Contexts in Native Mobile Apps with Nightwatch\nDESCRIPTION: Shows how to manage contexts in native mobile apps, including retrieving the current context, getting all contexts, and setting a specific context. These commands are useful for handling web views within native apps.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//Retrieve the current context\nconst context = await app.appium.getContext()\n\n//Retrieve all the contexts\nconst context = await app.appium.getContexts()\n\n//Switch the current context to 'WEBVIEW_org.wikipedia'. You can get the context names via getContexts()\nawait app.appium.setContext('WEBVIEW_org.wikipedia')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Retrieve the current context\nconst context = await app.appium.getContext()\n\n//Retrieve all the contexts\nconst context = await app.appium.getContexts()\n\n//Switch the current context to 'WEBVIEW_org.wikipedia'. You can get the context names via getContexts()\nawait app.appium.setContext('WEBVIEW_org.wikipedia')\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox with Function-based Capabilities in Nightwatch.js\nDESCRIPTION: This code snippet shows how to use a function-based approach to define Firefox capabilities in nightwatch.conf.js, allowing for dynamic creation of Firefox options with extensions and preferences at runtime.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/firefox/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities() {\n        const firefox = require('selenium-webdriver/firefox');\n\n        const options = new firefox.Options()\n          .addExtensions('/path/to/firebug.xpi')\n          .setPreference('extensions.firebug.showChromeErrors', true);\n        \n        return options;\n      }\n    }\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Placeholder Text in Nightwatch\nDESCRIPTION: Code showing how to locate input elements by their placeholder text attribute using Nightwatch's specialized finder methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.findByPlaceholderText('placeholder text');\nbrowser.element.findAllByPlaceholderText('placeholder text');\n```\n\n----------------------------------------\n\nTITLE: Defining Page Object with Dynamic URL\nDESCRIPTION: Page object implementation using a function to generate a dynamic URL based on the launch URL, useful for supporting different test environments.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/page-object-model.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: function() { \n    return this.api.launchUrl + '/login'; \n  },\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Using urlMatches Method in Nightwatch.js\nDESCRIPTION: The .urlMatches() method creates a condition that waits until the current page's URL matches a specified regular expression. It takes a RegExp parameter to test the URL against.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n.urlMatches(regex)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch VRT Plugin\nDESCRIPTION: Basic configuration to add the VRT plugin to Nightwatch configuration file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/visual-regression-testing.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['@nightwatch/vrt']\n  // other nightwatch settings...\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Keyboard in Nightwatch.js Mobile Testing\nDESCRIPTION: This snippet demonstrates how to hide the keyboard on a mobile device using Nightwatch.js and Appium. It uses the hideKeyboard method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n //Hide keyboard \nawait app.appium.hideKeyboard();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox with Extensions in Nightwatch.js\nDESCRIPTION: This code snippet demonstrates how to configure Firefox WebDriver in Nightwatch by installing an extension (Firebug) and setting preferences in the nightwatch.conf.js file using the Options class from selenium-webdriver/firefox.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/firefox/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst firefox = require('selenium-webdriver/firefox');\n\nconst options = new firefox.Options()\n  .addExtensions('/path/to/firebug.xpi')\n  .setPreference('extensions.firebug.showChromeErrors', true);\n\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities: options\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriver Instance in Nightwatch Tests\nDESCRIPTION: Example of accessing the Selenium WebDriver instance in a Nightwatch test. This allows extending Nightwatch functionality with direct WebDriver operations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  describe('Nightwatch APIs', function() {\n    it('driver demoTest', async function () {\n      const session = await browser\n        .init()\n        .perform(function() {\n          return this.driver.getSession();\n        });\n    })\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Unit Test in JavaScript\nDESCRIPTION: Shows how to write an asynchronous unit test in Nightwatch, using the 'done' callback to signal test completion after a timeout.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/writing-unit-tests.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\nmodule.exports = {\n  const assert = require('assert');\n  \n  module.exports = {\n    'demo UnitTest' : function (done) {\n      assert.equal('TEST', 'TEST');\n      \n      setTimeout(function() {  \n        done();\n      }, 10);\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Alt Text Selectors in Nightwatch\nDESCRIPTION: Examples of finding media elements by their alt text attributes, which is particularly useful for locating images and other media elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the element with alt text 'cat-image'\nbrowser.element.findByAltText('cat-image');\n\n// Find all elements with alt text 'cat-image'\nbrowser.element.findAllByAltText('cat-image');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find the element with alt text 'cat-image'\nbrowser.element.findByAltText('cat-image');\n\n// Find all elements with alt text 'cat-image'\nbrowser.element.findAllByAltText('cat-image');\n```\n\n----------------------------------------\n\nTITLE: Adding Tags in Nightwatch Describe Interface\nDESCRIPTION: Shows how to add tags when using Nightwatch's describe interface. The test suite is tagged with 'login' and 'sanity' by setting the 'this.tags' property.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('testsuite', function() {\n  this.tags = ['login', 'sanity'];\n  \n  it('demo login test', function(browser) {\n     \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Accessibility Name in Nightwatch\nDESCRIPTION: Code demonstrating how to retrieve the accessibility name of an element using Nightwatch's getAccessibilityName method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getAccessibilityName();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Vite Plugin\nDESCRIPTION: Update the Nightwatch configuration to include the Vite plugin.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['vite-plugin-nightwatch']\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Heap Snapshot in Nightwatch.js with Callback Function\nDESCRIPTION: This code demonstrates how to capture a heap snapshot during a Nightwatch test. The test navigates to Google's homepage and then takes a heap snapshot, saving it to a specified file path. This approach uses the standard callback pattern.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/take-heap-snapshot.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('take heap snapshot', function() {\n  it('takes heap snapshot and saves it as snapshot1.heapsnapshot file', function() {\n    browser\n      .navigateTo('https://www.google.com')\n      .takeHeapSnapshot('heap_snaps/snapshot1.heapsnapshot');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Browser as a Global with BDD Style in Nightwatch\nDESCRIPTION: Example of using the browser global in a BDD-style test with describe/it syntax in Nightwatch v2.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Nightwatch APIs', function() {\n  it('demoTest', function () {\n    browser.init();\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Browser Capabilities Object in Nightwatch\nDESCRIPTION: Sample of the WebDriver capabilities object returned during a Nightwatch session. This object contains information about the browser features and session details.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    acceptInsecureCerts: false,\n    browserName: 'chrome',\n    browserVersion: '96.0.4664.55',\n    'goog:chromeOptions': { debuggerAddress: 'localhost:50427' },\n    // ... continued\n  }\n```\n\n----------------------------------------\n\nTITLE: Explicitly Failing a Test in Nightwatch Hooks\nDESCRIPTION: Demonstrates how to explicitly fail a test in a Nightwatch hook by passing an Error object to the 'done' callback.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-hooks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  afterEach: function(browser, done) {\n    // performing an async operation\n    performAsync(function(err) {\n      if (err) {\n        done(err);\n        return;\n      }\n      // ...\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-selectors with Page Objects\nDESCRIPTION: Shows how to use CSS pseudo-selectors with named page object elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    google.waitForElementVisible('@searchBar:first-child');\n\n    google.waitForElementVisible('@searchBar:nth-child(1)');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Chrome DevTools Protocol Example in Nightwatch\nDESCRIPTION: Demonstrates how to use Chrome DevTools Protocol in Nightwatch to capture a DOM snapshot. This uses the sendAndGetDevToolsCommand method from the chrome namespace.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Chrome DevTools Example', function() {\n  \n  it ('using CDP DOM Snapshot', async function() {\n    const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {\n       computedStyles: []\n    });\n    \n    console.log('DOM', dom)\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Text Selectors in Nightwatch\nDESCRIPTION: Examples of finding form elements or search bars by their placeholder text, which is useful for locating input fields that might not have other distinctive attributes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the search bar with placeholder text 'Search here...'\nbrowser.element.findByPlaceholderText('Search here...');\n\n// Find all elements with placeholder text 'Enter here'\nbrowser.element.findAllByPlaceholderText('Enter here');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find the search bar with placeholder text 'Search here...'\nbrowser.element.findByPlaceholderText('Search here...');\n\n// Find all elements with placeholder text 'Enter here'\nbrowser.element.findAllByPlaceholderText('Enter here');\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Environment-Specific Globals\nDESCRIPTION: Example test showing how to access environment-specific globals in a Nightwatch test. This demonstrates the flexibility of using different global values based on the test environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log('myGlobalVar is: \"', browser.globals.myGlobalVar, '\"');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Nightwatch Documentation\nDESCRIPTION: Example of how to create an external link using markdown syntax in Nightwatch documentation for referencing external resources.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nExternal: [Creating and publishing unscoped public packages](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page Object with Static URL in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple page object with a static URL property. The URL is set to 'https://google.com' and an empty elements object is defined.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/using-page-objects.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: 'https://google.com',\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Gitlab CI Pipeline Configuration\nDESCRIPTION: Complete .gitlab-ci.yml configuration for setting up and running Nightwatch tests, including Chrome installation, driver setup, and test execution commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-gitlab.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: node:14.19.0\n\ncache:\n  paths:\n    - node_modules/\n\ntest_async:\n  before_script:\n    - apt-get update -q -y\n    - apt-get --yes install xvfb\n  script:\n    - curl -sS -L https://dl.google.com/linux/linux_signing_key.pub | apt-key add -\n    - echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" > /etc/apt/sources.list.d/google.list\n    - apt-get update -q -y\n    - apt-get install -y google-chrome-stable\n    - npm install chromedriver\n    - npm install geckodriver\n    - npm install \n    - ./node_modules/.bin/chromedriver --version\n    - ./node_modules/.bin/nightwatch --version\n    - /usr/bin/google-chrome --version\n    - Xvfb -ac :99 -screen 0 1280x1024x16 &\n    - export DISPLAY=:99\n    - npx nightwatch tests/ecosia.js --env chrome\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Not Visible in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be in the DOM but not displayed to the user. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsNotVisible(element)\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Text Matches Regex in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element's text to match a specified regular expression. It takes a WebElement and a RegExp object as parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n.elementTextMatches(element, regex)\n```\n\n----------------------------------------\n\nTITLE: Nightwatch Global Variables Configuration\nDESCRIPTION: Example showing how to define global variables in Nightwatch configuration\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n  \n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n      \n      \"globals\": {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Text Equality in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element's text to equal a specified text. It takes a WebElement and the expected text as parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n.elementTextIs(element, text)\n```\n\n----------------------------------------\n\nTITLE: URL Regex Match Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page URL matches a specified regular expression pattern. Takes a RegExp parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n.urlMatches(regex)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Selenium Server with Multiple Browsers in Nightwatch.js\nDESCRIPTION: This snippet demonstrates how to configure Nightwatch.js to use a local Selenium Server with support for Firefox, Chrome, and Internet Explorer. It includes settings for Selenium Server, WebDriver, and browser-specific configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  test_settings: {\n    default: {\n    launch_url: 'https://nightwatchjs.org'\n  },\n  \n  selenium: {\n    // Selenium Server is running locally and is managed by Nightwatch\n    selenium: {\n      start_process: true,\n      port: 4444,\n      server_path: require('selenium-server').path,\n      cli_args: {\n        'webdriver.gecko.driver': require('geckodriver').path,\n        'webdriver.chrome.driver': require('chromedriver').path,\n        'webdriver.ie.driver': process.platform === 'win32' ? require('iedriver').path : ''\n      }\n    },\n    webdriver: {\n      start_process: false\n    }\n  },\n  \n  'selenium.chrome': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'chrome',\n      chromeOptions: {\n      }\n    }\n  },\n  \n  'selenium.firefox': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'firefox'\n    }\n  },\n  \n  'selenium.ie': {\n    extends: 'selenium',\n    desiredCapabilities: {\n      browserName: 'internet explorer'\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Callback Function Usage in Nightwatch\nDESCRIPTION: This snippet shows how to use a callback function with a Nightwatch command. The callback receives the browser object as context and the result object as an argument.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.click(\"#main ul li a.first\", function(result) {\n    this.assert.ok(browser === this);\n    this.assert.ok(typeof result == \"object\");\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Pre-defined Nightwatch Global Properties and Default Values\nDESCRIPTION: List of pre-defined global properties with their default values that control the behavior of the Nightwatch test runner. These include timeout settings, assertion behavior controls, and custom reporter configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-globals.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // this controls whether to abort the test execution when an assertion failed and skip the rest\n  // it's being used in waitFor commands and expect assertions\n  abortOnAssertionFailure: true,\n\n  // this will overwrite the default polling interval (currently 500ms) for waitFor commands\n  // and expect assertions that use retry\n  waitForConditionPollInterval: 500,\n\n  // default timeout value in milliseconds for waitFor commands and implicit waitFor value for\n  // expect assertions\n  waitForConditionTimeout : 5000,\n\n  // since 1.4.0 – this controls whether to abort the test execution when an element cannot be located; an error\n  // is logged in all cases, but this also enables skipping the rest of the testcase;\n  // it's being used in element commands such as .click() or .getText()\n  abortOnElementLocateError: false,\n  \n  // this will cause waitFor commands on elements to throw an error if multiple\n  // elements are found using the given locate strategy and selector\n  throwOnMultipleElementsReturned: false,\n\n  // By default a warning is printed if multiple elements are found using the given locate strategy\n  // and selector; set this to true to suppress those warnings\n  suppressWarningsOnMultipleElementsReturned: false,\n\n  // controls the timeout value for async hooks. Expects the done() callback to be invoked within this time\n  // or an error is thrown\n  asyncHookTimeout : 10000,\n\n  // controls the timeout value for when running async unit tests. Expects the done() callback to be invoked within this time\n  // or an error is thrown\n  unitTestsTimeout : 2000,\n\n  // controls the timeout value for when executing the global async reporter. Expects the done() callback to be \n  // invoked within this time or an error is thrown\n  customReporterCallbackTimeout: 20000,\n\n  // Automatically retrying failed assertions - You can tell Nightwatch to automatically retry failed assertions \n  // until a given timeout is reached, before the test runner gives up and fails the test.\n  retryAssertionTimeout: 5000,\n\n  // Custom reporter\n  reporter: function(results, done) {\n    // do something with the results\n    done(results);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nightwatch Test for DuckDuckGo Search\nDESCRIPTION: This code snippet shows a Nightwatch test that navigates to DuckDuckGo, performs a search for 'Nightwatch.js', and verifies the search results. It demonstrates basic Nightwatch test structure and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Enabled State in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be enabled. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsEnabled(element)\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visible in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be displayed. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsVisible(element)\n```\n\n----------------------------------------\n\nTITLE: Finding Input Elements by Label Text in Nightwatch\nDESCRIPTION: Examples of finding form input elements by their associated label text, which is useful when inputs don't have other distinctive attributes or text.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Find the input element associated with label 'First Name'\nbrowser.element.findByLabelText('First Name');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find the input element associated with label 'First Name'\nbrowser.element.findByLabelText('First Name');\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in Environments in Nightwatch.conf.js\nDESCRIPTION: Example of pre-defined test environments in nightwatch.conf.js for running tests against different browsers including Safari and Firefox, with appropriate WebDriver configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-environments.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n\n  test_settings: {\n    default: {\n      webdriver: {\n        start_process: true,\n        server_path: ''\n      }\n    },\n\n    safari: {\n      desiredCapabilities : {\n        browserName : 'safari',\n        alwaysMatch: {\n          acceptInsecureCerts: false\n        }\n      },\n      webdriver: {\n        port: 4445\n      }\n    },\n    \n    firefox: {\n      desiredCapabilities : {\n        browserName : 'firefox'\n      },\n      \n      webdriver: {\n        start_process: true,\n        port: 4444\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Alert Presence in Nightwatch\nDESCRIPTION: Creates a condition that waits for an alert to be opened. This assertion takes no parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.alertIsPresent()\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Text Contains in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element's text to contain a specified substring. It takes a WebElement and a substring as parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.elementTextContains(element, substr)\n```\n\n----------------------------------------\n\nTITLE: Writing a Nightwatch Test Using Jest Syntax\nDESCRIPTION: This code snippet demonstrates how to write a Nightwatch test using Jest syntax. It includes a test case that opens Google, searches for 'nightwatch', and verifies the search results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-jest.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Google search test', () => {\n  test('searches for nightwatch', async () => {\n    await browser\n      .navigateTo('https://google.com')\n      .setValue('input[name=q]', ['nightwatch', browser.Keys.ENTER])\n      .assert.textContains('#main', 'Nightwatch.js');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Environment-Specific Globals\nDESCRIPTION: Command-line example showing how to run Nightwatch tests with a specific environment that contains its own global variables.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env integration\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined End-to-End and Unit Tests in Nightwatch JSON\nDESCRIPTION: Demonstrates how to configure Nightwatch to run both end-to-end tests and unit tests using the same configuration file, utilizing 'exclude' and 'filter' properties.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/writing-unit-tests.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\" : [\"./examples/tests\", \"./examples/unittests\"],\n  \"output_folder\" : \"./examples/reports\",\n  \n  \n  \"webdriver\" : {\n    \"start_process\": true,\n    \"server_path\": \"node_modules/.bin/chromedriver\",\n    \"port\": 9515\n  },\n  \n  \"test_settings\" : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"desiredCapabilities\": {\n        \"browserName\": \"chrome\"\n      },\n      \"exclude\" : \"./examples/unittests/*\"\n    },\n    \n    \"unittests\" : {\n      \"unit_tests_mode\" : true,\n      \"filter\" : \"./examples/unittests/*\",\n      \"exclude\" : \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Accessibility Rules with Nightwatch\nDESCRIPTION: This snippet demonstrates how to inject the aXe library and run all accessibility tests on a web page using Nightwatch. It navigates to a specific URL, injects the aXe library, and then runs all accessibility tests on the body element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/accessibility-testing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('accessibility testing', function() {\n  \n  it('run all accessibility rules', function(browser) {\n    browser\n      .navigateTo('https://www.w3.org/WAI/demos/bad/after/home.html')\n      .axeInject()\n      .axeRun('body');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Development Server\nDESCRIPTION: Command to run the local development server for the documentation website. This starts the PostDoc dev server with hot module replacement.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Opening Documentation in Browser Automatically\nDESCRIPTION: Command to start the documentation server and automatically open it in a specified browser. This is a convenience shortcut for local development.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --open [chrome|firefox|edge|safari]\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with mocha-junit-reporter\nDESCRIPTION: Example command for running Nightwatch tests using the mocha-junit-reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/ --reporter mocha-junit-reporter\n```\n\n----------------------------------------\n\nTITLE: Building the Documentation Website\nDESCRIPTION: Command to build the static documentation website for production. This generates optimized static HTML, CSS, and JavaScript files.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Locating Element in Nightwatch\nDESCRIPTION: Creates a condition that loops until an element is found with the given locator. It takes a By locator as a parameter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n.elementLocated(locator)\n```\n\n----------------------------------------\n\nTITLE: Executing Swipe Gesture using Appium Non-Standard API\nDESCRIPTION: Example of using platform-specific Appium commands to perform a swipe gesture on iOS devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/running-tests-with-appium.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.execute('mobile: swipe', args);\n```\n\n----------------------------------------\n\nTITLE: Complete Page Object Example with URL and Elements\nDESCRIPTION: Demonstrates a complete page object definition including URL and multiple elements with different locate strategies.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: 'https://google.com',\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]'\n    },\n    submit: {\n      selector: '//[@name=\"q\"]',\n      locateStrategy: 'xpath'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined E2E and Unit Tests in Nightwatch JSON\nDESCRIPTION: Shows how to configure Nightwatch to run both end-to-end and unit tests using the same configuration file, utilizing 'exclude' and 'filter' properties.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-nodejs-unit-integration-tests.md#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src_folders\" : [\"./examples/tests\", \"./examples/unittests\"],\n  \"output_folder\" : \"./examples/reports\",\n  \n  \n  \"webdriver\" : {\n    \"start_process\": true,\n    \"server_path\": \"node_modules/.bin/chromedriver\",\n    \"port\": 9515\n  },\n  \n  \"test_settings\" : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"desiredCapabilities\": {\n        \"browserName\": \"chrome\"\n      },\n      \"exclude\" : \"./examples/unittests/*\"\n    },\n    \n    \"unittests\" : {\n      \"unit_tests_mode\" : true,\n      \"filter\" : \"./examples/unittests/*\",\n      \"exclude\" : \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Extra Cucumber Setup\nDESCRIPTION: Executes Nightwatch tests with an additional Cucumber setup file for custom initialization.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch examples/cucumber-js/features/step_definitions --require {/full/path/to/_extra_setup.js}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nightwatch in a New Directory\nDESCRIPTION: Single command to create a Nightwatch project in a new directory. This creates the directory and sets up Nightwatch in one step.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-selenium-server.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init nightwatch <directory-name>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Nightwatch Chrome Recorder CLI\nDESCRIPTION: Commands to install the @nightwatch/chrome-recorder package and run the converter tool to transform Chrome DevTools recordings into Nightwatch tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/chrome-devtools-recorder.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nightwatch/chrome-recorder\n\nnpx @nightwatch/chrome-recorder\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch API Tests\nDESCRIPTION: Command to run Nightwatch API tests using the api_testing environment which has browser sessions disabled.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env api_testing\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Packages for Parallel Running\nDESCRIPTION: Command to install additional packages required for running Mochawesome in parallel with test workers.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mochawesome-report-generator mochawesome-merge --save-dev\n```\n\n----------------------------------------\n\nTITLE: Locating Multiple Elements in Nightwatch\nDESCRIPTION: Creates a condition that loops until at least one element is found with the given locator. It takes a By locator as a parameter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n.elementsLocated(locator)\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Point in Nightwatch Mobile Test\nDESCRIPTION: This code demonstrates how to add a debug point in a Nightwatch mobile test using the .debug() command. The test performs actions on Wikipedia app including clicking a search field, entering 'browserstack', and clicking on search results before pausing execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/debug-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp\n  .useXpath()\n  .click('//XCUIElementTypeSearchField[@name=\"Search Wikipedia\"]')\n  .sendKeys('//XCUIElementTypeSearchField[@name=\"Search Wikipedia\"]','browserstack')\n  .click('//XCUIElementTypeStaticText[@name=\"BrowserStack\"]')\n  .debug()\n```\n\n----------------------------------------\n\nTITLE: Capturing and Logging Browser JavaScript Exceptions in Nightwatch\nDESCRIPTION: This code demonstrates how to use the captureBrowserExceptions() command to capture JavaScript exceptions thrown in the browser. It navigates to a website, modifies an element to throw an error, and then triggers the error.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/catch-js-exceptions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('catch browser exceptions', function() {\n  it('captures the js exceptions thrown in the browser', async function() {\n    await browser.captureBrowserExceptions((event) => {\n      console.log('>>> Exception:', event);\n    });\n    \n    await browser.navigateTo('https://duckduckgo.com/');\n    \n    const searchBoxElement = await browser.findElement('input[name=q]');\n    await browser.executeScript(function(_searchBoxElement) {\n      _searchBoxElement.setAttribute('onclick', 'throw new Error(\"Hello world!\")');\n    }, [searchBoxElement]);\n    \n    await browser.elementIdClick(searchBoxElement.getId());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment-Specific Globals in Tests\nDESCRIPTION: Example test showing how to access environment-specific global variables in a Nightwatch test. When running with '--env integration', the test will access the overridden value of the global variable.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"integrated global\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Standalone GeckoDriver Usage\nDESCRIPTION: This configuration snippet demonstrates how to set up Nightwatch to use GeckoDriver directly, specifying the server path, CLI arguments, port, and desired capabilities for Firefox.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/geckodriver.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ \n  \"webdriver\": {\n    \"start_process\" : true,\n    \"server_path\": \"./bin/geckodriver-0.23\",\n    \"cli_args\": [\n      \"--log\", \"debug\"\n    ],\n    \"port\": 4444\n  },\n  \n  \"test_settings\" : {\n    \"default\" : {\n      \"desiredCapabilities\": {\n        \"browserName\" : \"firefox\",\n        \"acceptInsecureCerts\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting on Request Headers in Nightwatch Mock Server\nDESCRIPTION: Shows how to assert on request headers in Nightwatch API tests using the mock server. It uses Chai expect assertions to check header properties.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('demo test', async function(client) {\n    const {requestHeaders} = mockServer.route.get('/api/v1/schemas');\n    \n    client.expect(requestHeaders).to.have.property('connection', 'close');\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Reporter in Nightwatch.js\nDESCRIPTION: Defines a global reporter function that logs test results before invoking a callback.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/external-globals.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  reporter : function(results, cb) {\n    console.log('results', results);\n    cb();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving App and Device Information in Native Mobile Apps with Nightwatch\nDESCRIPTION: Shows how to retrieve various information about the current app and device state, including the current activity name, package name, and device orientation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//Get current activity name\nconst activity =  await app.appium.getCurrentActivity();\n\n//Get current package name\nconst package =  await app.appium.getCurrentPackage();\n\n//Get current orientation\nconst orientation =  await app.appium.getCurrentOrientation();\n```\n\n----------------------------------------\n\nTITLE: Creating Page Headers in Nightwatch Documentation\nDESCRIPTION: Example of how to create an H1 header that will be used as the page title in Nightwatch documentation using a specific div class format.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"page-header\"><h1>Adding custom assertions</h1></div>\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Staleness in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to become stale (removed from the DOM or on a new page). It takes a WebElement as a parameter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n.stalenessOf(element)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for iOS Appium Testing\nDESCRIPTION: Configuration setup for running Nightwatch tests on iOS devices using Appium server. Includes essential capabilities like browser selection, platform details, and timeout settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/with-appium.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nappium_ios: {\n  selenium: {\n    host: 'localhost',\n    port: 4723\n  },\n  disable_error_log: true,\n  webdriver: {\n    timeout_options: {\n      timeout: 150000,\n      retry_attempts: 3\n    },\n    keep_alive: false,\n    start_process: false\n  },\n  desiredCapabilities: {\n    browserName: 'Safari',\n    javascriptEnabled: true,\n    platformName: 'iOS',\n    platformVersion: '15.0',\n    deviceName: 'iPhone 13'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Element APIs in Nightwatch\nDESCRIPTION: Illustrates the differences between the older element APIs and the new Element API in Nightwatch v3. Shows how the new API reduces selector repetition and provides a more concise syntax for element interactions and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Before (Old API)\n// no await required for normal actions\nbrowser\n  .click('input[name=q]')\n  .sendKeys('input[name=q]', 'Nightwatch.js');\n\n// await required to get the actual command result\nconst inputText = await browser.getText('input[name=q]');\nbrowser.assert.equal(inputText, 'Nightwatch.js');\n\nbrowser\n  .click('button[name=submit]')\n  .assert.not.visible('button[name=submit]');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Now (New API)\n// no await required for normal actions\nconst inputElem = browser.element.find('input[name=q]');\ninputElem.click(); // no repetition of selector\ninputElem.sendKeys('Nightwatch.js');\n\n// await required to get the actual command result\nconst inputText = await inputElem.getText();\nbrowser.assert.equal(inputText, 'Nightwatch.js');\n\n// assertions can also be done directly\n// no await required as we are not storing the actual command result anywhere\ninputElem.getText().assert.equals('Nightwatch.js');\n\nconst submitElem = browser.element.find('input[name=submit]');\nsubmitElem.click();\nsubmitElem.assert.not.visible();\n\n// await the element to get the `WebElement` instance.\nconst submitWebElem = await submitElem;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for AWS Device Farm\nDESCRIPTION: Complete Nightwatch configuration file setup for AWS Device Farm integration, including test grid URL creation and environment settings\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/aws-devicefarm-settings.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet AWS = require(\"aws-sdk\");\nlet PROJECT_ARN = \"<PROJECT_ARN>\";\nlet devicefarm = new AWS.DeviceFarm({ region: \"us-west-2\" });\n\nmodule.exports = (async function() {\n const testGridUrlResult = await devicefarm.createTestGridUrl({\n     projectArn: PROJECT_ARN,\n     expiresInSeconds: 86400\n }).promise();\n const testGridUrl = new URL(testGridUrlResult.url);\n \n return {\n   src_folders: [],\n   \n   page_objects_path: ['node_modules/nightwatch/examples/pages/'],\n   \n   custom_commands_path: ['node_modules/nightwatch/examples/custom-commands/'],\n   \n   custom_assertions_path: '',\n   \n   plugins: [],\n   \n   globals_path : '',\n   \n   webdriver: {},\n   \n   test_settings: {\n     default: {\n       disable_error_log: false,\n       launch_url: 'https://nightwatchjs.org',\n       \n       screenshots: {\n         enabled: false,\n         path: 'screens',\n         on_failure: true\n       },\n       \n       desiredCapabilities: {\n         browserName : 'chrome'\n       },\n     },\n     \n     awsDeviceFarm: {\n       selenium: {\n         host: testGridUrl.host,\n         default_path_prefix: testGridUrl.pathname,\n         port: 443\n       },\n       \n       webdriver: {\n         timeout_options: {\n           timeout: 150000,\n           retry_attempts: 3\n         },\n         ssl: true,\n         keep_alive: true,\n         start_process: false\n       }\n     }\n   }\n }\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt for Nightwatch.js Documentation\nDESCRIPTION: This robots.txt file instructs web crawlers which sections of the Nightwatch.js documentation to avoid indexing. It blocks access to specific documentation version directories (v09, v17, v26) and directs crawlers to the site's XML sitemap.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/public/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /v09/\nDisallow: /v17/\nDisallow: /v26/\n\n\nSitemap: https://nightwatchjs.org/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Page Definition\nDESCRIPTION: HTML comment indicating this file defines a separate page described in the main project .ejs file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/about/highlights/index.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (/about/highlights/index.html - defines a separate page described in the main project in the .ejs file.)\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Nightwatch Community Page\nDESCRIPTION: YAML frontmatter block that defines the title and description metadata for the Nightwatch community documentation page. This metadata is used by the static site generator to create the page header and meta information.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/about/community/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Nightwatch community\ndescription: Nightwatch community initiatives\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Test Environments in Nightwatch.js Configuration\nDESCRIPTION: Configuration example showing how to define test environments for different browsers (Safari and Firefox) in Nightwatch.js. The configuration includes default settings and browser-specific capabilities and webdriver configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n\n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n\n    safari: {\n      desiredCapabilities : {\n        browserName : 'safari',\n        alwaysMatch: {\n          acceptInsecureCerts: false\n        }\n      },\n      webdriver: {\n        port: 4445,\n        start_process: true,\n        server_path: '/usr/bin/safaridriver'\n      }\n    },\n\n    firefox: {\n      desiredCapabilities : {\n        browserName : 'firefox'\n      },\n\n      webdriver: {\n        start_process: true,\n        port: 4444,\n        server_path: require('geckodriver').path\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-defined Global Properties in Nightwatch.js\nDESCRIPTION: Configuration showing the pre-defined global properties in Nightwatch.js with their default values. These globals control test runner behavior including timeouts, assertion failures, and element location behaviors.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globals: {\n    // this controls whether to abort the test execution when an assertion failed and skip the rest\n    // it's being used in waitFor commands and expect assertions\n    abortOnAssertionFailure: true,\n\n    // this will overwrite the default polling interval (currently 500ms) for waitFor commands\n    // and expect assertions that use retry\n    waitForConditionPollInterval: 500,\n\n    // default timeout value in milliseconds for waitFor commands and implicit waitFor value for\n    // expect assertions\n    waitForConditionTimeout : 5000,\n\n    // since 1.4.0 – this controls whether to abort the test execution when an element cannot be located; an error\n    // is logged in all cases, but this also enables skipping the rest of the testcase;\n    // it's being used in element commands such as .click() or .getText()\n    abortOnElementLocateError: false,\n\n    // this will cause waitFor commands on elements to throw an error if multiple\n    // elements are found using the given locate strategy and selector\n    throwOnMultipleElementsReturned: false,\n\n    // By default a warning is printed if multiple elements are found using the given locate strategy\n    // and selector; set this to true to suppress those warnings\n    suppressWarningsOnMultipleElementsReturned: false,\n\n    // controls the timeout value for async hooks. Expects the done() callback to be invoked within this time\n    // or an error is thrown\n    asyncHookTimeout : 10000,\n\n    // controls the timeout value for when running async unit tests. Expects the done() callback to be invoked within this time\n    // or an error is thrown\n    unitTestsTimeout : 2000,\n\n    // controls the timeout value for when executing the global async reporter. Expects the done() callback to be\n    // invoked within this time or an error is thrown\n    customReporterCallbackTimeout: 20000,\n\n    // Automatically retrying failed assertions - You can tell Nightwatch to automatically retry failed assertions\n    // until a given timeout is reached, before the test runner gives up and fails the test.\n    retryAssertionTimeout: 5000,\n\n    // Custom reporter\n    reporter: function(results, done) {\n      // do something with the results\n      done(results);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebElement Instance Usage\nDESCRIPTION: Shows how to use element() with an existing Selenium WebElement instance.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// webElement is an instance of WebElement class from Selenium\nconst addButtonEl = element(webElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Options with Function-based Capabilities\nDESCRIPTION: Demonstrates how to configure Firefox options using a function that returns Selenium Capabilities, allowing for dynamic configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities() {\n        const firefox = require('selenium-webdriver/firefox');\n        \n        const options = new firefox.Options()\n          .addExtensions('/path/to/extension.xpi');\n        \n        return options;\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case Continuation on Failure in Nightwatch BDD\nDESCRIPTION: An example showing how to configure Nightwatch to continue executing test cases after a failure using the BDD interface. This allows testing multiple functionalities even if earlier assertions fail.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n   this.skipTestcasesOnFail = true\n   \n   it('...', function() {\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js for Nightwatch\nDESCRIPTION: Installs the Cucumber library as a dev dependency in a Nightwatch project.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @cucumber/cucumber --save-dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment for File Path Reference\nDESCRIPTION: Single line markdown comment containing what appears to be a file path reference to an Appium index page\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/appium/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (/appium/index.html)\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Header in HTML\nDESCRIPTION: This HTML snippet creates a page header with a title for choosing a test runner. It uses a div element with a class of 'page-header' and an h1 element for the main heading.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/choosing-a-test-runner.md#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"page-header\"><h1>Choosing a test runner</h1></div>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Groups in Nightwatch\nDESCRIPTION: Commands for running or skipping specific test groups in Nightwatch using the command line interface. Shows how to run a single group or skip multiple groups using comma-separated values.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-with-test-groups.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --group smoketests\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skipgroup smoketests\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skipgroup addressbook,chat\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Nightwatch Configuration\nDESCRIPTION: Configuration example showing how to define global variables in a Nightwatch.js JSON configuration file. These globals are accessible within test files through the browser.globals object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n\n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n\n      \"globals\": {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Reporter via globals.js in Nightwatch\nDESCRIPTION: Configuration for the Slack reporter in globals.js file, setting up the slack_message function and webhook URL to send test results to Slack.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-slack-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n   // function or message string\n   slack_message: function(results, options) {\n     // Message payload or string  \n     return {\n       text: 'Test completed, passed ' + results.passed + ', failed ' + results.failed,\n       username: 'Nightwatch',\n       icon_emoji: ':ghost:'\n     }\n   },\n   // This can be specified with SLACK_WEBHOOK_URL environment variable\n   slack_webhook_url: 'https://hooks.slack.com/services/...'\n}\nmodule.exports = {\n  reporter: (require('nightwatch-slack-reporter')(options))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests on Real Android Device\nDESCRIPTION: Command to execute Nightwatch tests on a real Android device using the app.android.real environment configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env app.android.real\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Options with Selenium Capabilities\nDESCRIPTION: Shows how to configure Firefox-specific options using Selenium Capabilities object, including adding browser extensions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst firefox = require('selenium-webdriver/firefox');\n\nconst options = new firefox.Options()\n  .addExtensions('/path/to/extension.xpi');\n\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities: options\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using baseUrl in Nightwatch Test\nDESCRIPTION: Demonstrates how to use the baseUrl property in a Nightwatch test to load the main test URL. The baseUrl value is determined by the test environment configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    browser\n      .url(browser.baseUrl)\n      // ...\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation to Tokyo in Nightwatch.js Test\nDESCRIPTION: This snippet demonstrates how to set the browser's geolocation to Tokyo, Japan using Nightwatch.js. It uses the setGeolocation() method to specify latitude, longitude, and accuracy before navigating to a website.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/network-requests/mock-geolocation.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('mock geolocation', function() {\n  it('sets the geolocation to Tokyo, Japan', () => {\n    browser\n      .setGeolocation({\n        latitude: 35.689487,\n        longitude: 139.691706,\n        accuracy: 100\n      })\n      .navigateTo('https://www.gps-coordinates.net/my-location')\n      .pause(3000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Taking Heap Snapshot in Nightwatch.js with Async/Await\nDESCRIPTION: This example shows how to capture a heap snapshot using async/await syntax. The test navigates to Google's website, takes a heap snapshot, and manually saves the returned snapshot content to a file using Node.js fs module.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/take-heap-snapshot.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\n\ndescribe('take heap snapshot with async/await', function() {\n  it('takes heap snapshot and returns the snapshot content', async function() {\n    await browser.navigateTo('https://www.google.com');\n    \n    const heapSnapshot = await browser.takeHeapSnapshot();\n    fs.writeFileSync('heap_snaps/snapshot2.heapsnapshot', heapSnapshot);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Reporter in Globals\nDESCRIPTION: Configuration code to add Allure reporter to Nightwatch globals.js file. Sets up the reporter to process test results and generate Allure reports.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-nightwatch-allure-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst allureReporter = require('nightwatch-allure');\nmodule.exports = {\n  reporter: (results,done)=>{\n   const reporter = new allureReporter.NightwatchAllureReporter({});\n   reporter.write(results,done);\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Example Nightwatch Test with Jest\nDESCRIPTION: Sample test demonstrating DuckDuckGo search functionality using Nightwatch commands within Jest test structure\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/jest.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators in Nightwatch\nDESCRIPTION: Example showing how to chain multiple relative locators to precisely locate an element in complex layouts. This snippet locates a button that is both below an email element and to the right of a cancel button.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlocateWith(By.tagName('button'))\n  .below(By.id('email')\n  .toRightOf(By.css('#cancel')));\n```\n\n----------------------------------------\n\nTITLE: Extended Nightwatch Configuration with Chrome Environment\nDESCRIPTION: Configuration file updated with Chrome-specific test environment settings\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://home.cern',\n      webdriver: {\n        start_process: true,\n        server_path: ''\n      }\n    },\n    'chrome-local': {\n      desiredCapabilities: {\n        browserName: 'chrome'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Suite Tags in Nightwatch BDD\nDESCRIPTION: An example demonstrating how to assign tags to a test suite using the BDD interface. Tags can be used to categorize tests and run specific groups of tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // defining tags using bdd\n  this.tags = ['login', 'authentication''];\n  \n  it('...', function() {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Nightwatch Firefox Configuration\nDESCRIPTION: Example configuration file for Nightwatch using Firefox as the target browser with geckodriver\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  webdriver: {\n    start_process: true,\n    port: 4444,\n    server_path: require('geckodriver').path,\n    cli_args: [\n      // very verbose geckodriver logs\n      // '-vv'\n    ]\n  },\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org',\n      desiredCapabilities : {\n        browserName : 'firefox'\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Nightwatch BDD\nDESCRIPTION: An example showing how to configure retry attempts for both individual test cases and the entire test suite using the BDD interface. This helps handle flaky tests by automatically retrying failed tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  this.retries(3);\n  this.suiteRetries(2);\n  \n  it('...', function() {\n    // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval in Nightwatch BDD\nDESCRIPTION: An example showing how to configure the polling interval for retrying assertions and element commands using the BDD interface. This defines how frequently Nightwatch will retry commands that are waiting for a condition.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  this.retryInterval(100);\n  \n  it('...', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using XPath Selectors in Nightwatch\nDESCRIPTION: Examples of using XPath selectors to locate elements in the DOM tree. The code shows how to find a single element or multiple elements using XPath expressions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Find an element with XPath\nbrowser.element.find(by.xpath('xpath string'))\n\n// Find all elements with XPath\nbrowser.element.findAll(by.xpath('xpath string'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Unpacked Chrome Extensions\nDESCRIPTION: Modify the nightwatch.conf.js file to load an unpacked Chrome Extension (directory) and open DevTools automatically during test runs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-extension-testing/chrome-extension.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchrome: {\n  desiredCapabilities: {\n    browserName: 'chrome',\n    'goog:chromeOptions': {\n      args: [\n        //'--headless',\n        'auto-open-devtools-for-tabs',\n        //\n        // load extension from unpacked directory.\n        '--load-extension=/path/to/extension/directory',\n        //\n        // if extension is present in the `src/` dir of same project.\n        // `--load-extension=${__dirname}/src`,\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying and Resetting Device Dimensions in Nightwatch.js\nDESCRIPTION: Example demonstrating how to modify device dimensions and then reset them back to original values during test execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/override-device-dimensions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('modify device dimensions', function() {\n  it('modifies the device dimensions and then resets it', function() {\n    browser\n      .setDeviceDimensions({\n        width: 400,\n        height: 600,\n        deviceScaleFactor: 50,\n        mobile: true\n      })\n      .navigateTo('https://www.google.com')\n      .pause(1000)\n      .setDeviceDimensions()  // resets the device dimensions\n      .navigateTo('https://www.google.com')\n      .pause(1000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Module in Nightwatch.js\nDESCRIPTION: This snippet demonstrates how to disable an entire test module by setting the '@disabled' attribute to true. This prevents the test module from running.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/disabling-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  '@disabled': true, // This will prevent the test module from running.\n  \n  'sample test': function (browser) {\n    // test code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome in Docker Containers with Nightwatch.js\nDESCRIPTION: Adds the --no-sandbox flag to Chrome options for running tests in Docker containers. This configuration is necessary when accessing Chrome binary from within a Docker environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/chromedriver.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"chromeOptions\" : {\n  \"args\" : [\"--no-sandbox\"]\n} \n```\n\n----------------------------------------\n\nTITLE: Using Firefox Options as a Function in Nightwatch Configuration\nDESCRIPTION: Demonstrates how to configure Firefox options as a function that returns an Options object for installing extensions. This approach allows dynamic configuration of Firefox capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands/index.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities() {\n        const firefox = require('selenium-webdriver/firefox');\n        \n        const options = new firefox.Options()\n          .addExtensions('/path/to/firebug.xpi')\n          .setPreference('extensions.firebug.showChromeErrors', true);\n        \n        return options;\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Nightwatch Client Capabilities in JavaScript\nDESCRIPTION: This snippet shows how to update the capabilities of an existing Nightwatch client using the updateCapabilities() method. It allows adding or modifying capabilities after the client has been created.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/programmatic-api.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.updateCapabilities({\n  testCapability: 'one, two, three'\n});\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Globals Configuration\nDESCRIPTION: Example of defining environment-specific globals in the nightwatch.json configuration file. Shows how to override global variables for different test environments like 'integration'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n  \n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n      \n      \"globals\": {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    },\n    \n    \"integration\": {\n      \"globals\": {\n        \"myGlobalVar\" : \"integrated global\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element Dimensions and Position in Nightwatch\nDESCRIPTION: Example showing how to retrieve the dimensions and position of an element using Nightwatch's getRect method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getRect();\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Cucumber Formatters\nDESCRIPTION: Demonstrates how to use Cucumber formatters for generating output when running tests with Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js --format @cucumber/pretty-formatter\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env cucumber-js --require cucumber.conf.js --format json:report/cucumber_report.json\n```\n\n----------------------------------------\n\nTITLE: Running Only Specific Test Case in BDD Describes Interface\nDESCRIPTION: This example demonstrates how to run only a specific test case within a test suite using the BDD Describes interface in Nightwatch.js. It uses the 'test.only()' function, which is equivalent to 'it.only()'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/disabling-tests.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  \n  test.only('startHomepage', () => {\n    // ...\n  });\n  \n  test('other testcase', () => {\n    // ...\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome User Preferences in Nightwatch.js\nDESCRIPTION: Sets Chrome profile preferences using the prefs key in chromeOptions. This example disables Chrome's password manager by setting specific preferences in the Nightwatch configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/chromedriver.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"desiredCapabilities\" : {\n  \"browserName\" : \"chrome\",\n  \"javascriptEnabled\" : true,\n  \"acceptSslCerts\" : true,\n  \"chromeOptions\" : {\n    \"prefs\" : {\n      \"credentials_enable_service\" : false,\n      \"profile.password_manager_enabled\" : false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mixed Nightwatch Tests\nDESCRIPTION: Example command for running both individual test file and test folder\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/test.js tests/utils\n```\n\n----------------------------------------\n\nTITLE: Setting up a POST route for a mock server in Nightwatch.js\nDESCRIPTION: Creates a mock server endpoint that responds to POST requests on the '/api/v1/datasets/' path with a JSON object containing a test ID. This setup allows for testing API interactions without accessing the actual backend.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait mockServer.setup((app) => {\n  app.post('/api/v1/datasets/', function (req, res) {\n    res.status(200).json({\n      id: 'test-dataset-id'\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Globals in Nightwatch Configuration File\nDESCRIPTION: Example showing how to define global variables directly in the nightwatch.json configuration file using the 'globals' property. These variables can be accessed in tests via the browser.globals object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n\n  \"globals\": {\n    \"myGlobalVar\" : \"some value\",\n    \"otherGlobal\" : \"some other value\"\n  },\n\n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Nightwatch Test in TypeScript using Export Syntax\nDESCRIPTION: An example of writing a Nightwatch test in TypeScript using the exports interface instead of the BDD syntax. This demonstrates how to define a test object with typed interfaces that can be exported.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NightwatchTests} from 'nightwatch';\n\nconst Ecosia: NightwatchTests = {\n  'demo test': () => {\n    browser\n      .url('https://www.ecosia.org/')\n      .setValue('input[type=search]', 'nightwatch')\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n\nexport default Ecosia;\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Captured Network Request\nDESCRIPTION: This snippet shows an example of the console output for a single network request captured using the captureNetworkRequests() command. It displays the request number, URL, method, and headers for a favicon request to Google.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/network-requests/capture-network-calls.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRunning Capture network calls:\n───────────────────────────────────────────────────────────────────────────────────────────────────\nRequest Number: 35\nRequest URL: https://www.google.com/favicon.ico\nRequest method: GET\nRequest headers: {\n  'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"',\n  'sec-ch-ua-full-version-list': '\" Not A;Brand\";v=\"99.0.0.0\", \"Chromium\";v=\"102.0.5005.61\", \"Google Chrome\";v=\"102.0.5005.61\"',\n  'sec-ch-ua-mobile': '?0',\n  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36',\n  'sec-ch-ua-arch': '\"x86\"',\n  'sec-ch-viewport-width': '1200',\n  'sec-ch-ua-full-version': '\"102.0.5005.61\"',\n  'sec-ch-ua-platform-version': '\"12.1.0\"',\n  Referer: 'https://www.google.com/',\n  'sec-ch-dpr': '2',\n  'sec-ch-ua-bitness': '\"64\"',\n  'sec-ch-ua-wow64': '?0',\n  'sec-ch-ua-model': '',\n  'sec-ch-ua-platform': '\"macOS\"'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Sections in Tests\nDESCRIPTION: Demonstrates how to interact with nested sections in test cases, including accessing nested elements and making assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-sections.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    var google = browser.page.google();\n    google.expect.section('@menu').to.be.visible;\n    \n    var menuSection = google.section.menu;\n    var appSection = menuSection.section.apps;\n    menuSection.click('@appSection');\n    \n    appSection.expect.element('@myAccount').to.be.visible;\n    appSection.expect.element('@googlePlus').to.be.visible;\n    \n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using titleContains Method in Nightwatch.js\nDESCRIPTION: The .titleContains() method creates a condition that waits until the current page's title contains a specified substring. It takes a string parameter that represents the substring to look for within the page title.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n.titleContains(substr)\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with NPX\nDESCRIPTION: Command syntax for running Nightwatch tests using NPX when Nightwatch is installed as a project dependency, allowing you to run the binary without specifying the full path.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Advanced Nightwatch Configuration for Storybook Integration\nDESCRIPTION: Extended configuration options for the Nightwatch Storybook plugin in nightwatch.conf.js, including source folders and plugin-specific settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['src/stories/*.stories.jsx'],\n  \n  '@nightwatch/storybook': {\n    start_storybook: false,\n    storybook_url: 'http://localhost:6006/',\n    storybook_config_dir: '.storybook', // default storybook config directory\n    hide_csf_errors: false,\n    show_browser_console: true\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Matching URL Pattern in Nightwatch.js using Chai Expects\nDESCRIPTION: This snippet illustrates how to assert that the current browser URL matches a given pattern or regular expression using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(brower.url()).to.match();\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Workers with Specific Node Options in Nightwatch\nDESCRIPTION: Example configuration for running tests in parallel with specific Node.js CLI options. This setting enables running test suites in parallel using worker processes with custom Node.js arguments like inspection.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"test_workers\": {\n  \"enabled\": true,\n  \"workers\": \"auto\",\n  \"node_options\": [\"--inspect\"]\n},\n```\n\n----------------------------------------\n\nTITLE: Writing a Nightwatch Test for Chrome Extensions\nDESCRIPTION: Create a test suite that switches to the DevTools context, navigates to the extension, and performs assertions on the extension's content.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-extension-testing/chrome-extension.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('test Chrome Extension inside DevTools', function() {\n  before(async function() {\n    // navigate to the website you want to test the extension against\n    await browser.navigateTo('https://google.com');\n\n    // get all targets (contexts) we can possibly switch to\n    const targets = await browser.driver.sendAndGetDevToolsCommand('Target.getTargets', {});\n\n    const devToolsTarget = targets.targetInfos.find(target => {\n      return target.type === 'page' &&\n        target.url.includes('devtools://devtools/bundled/devtools_app.html');\n    });\n\n    // switch to DevTools window context\n    await browser.window.switchTo(devToolsTarget.targetId);\n\n    // switch to last tab in pane (our extension)\n    await browser.sendKeys('body', [browser.Keys.COMMAND, '[']); // for macos\n    await browser.sendKeys('body', [browser.Keys.CONTROL, '[']); // for windows/linux\n\n    // switch to the iframe inside the tab\n    await browser.frame('iframe[src*=\"index.html\"]');\n  });\n\n  it('checks the header text of the extension', async function() {\n    // run automation on the extension\n    await browser.element('header').getText().assert.equals('My Extension');\n\n    // to visualize the extension during test run\n    // await browser.pause(1000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Test Environments in Nightwatch.js\nDESCRIPTION: Configuration example demonstrating how to extend test environments in Nightwatch. It shows a base Selenium environment that is extended by browser-specific environments using the 'extends' property.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n\n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n\n    selenium: {\n      // Selenium Server is running locally and is managed by Nightwatch\n      selenium: {\n        start_process: true,\n        port: 4444,\n        server_path: require('selenium-server').path,\n        cli_args: {\n          'webdriver.gecko.driver': require('geckodriver').path,\n          'webdriver.chrome.driver': require('chromedriver').path\n        }\n      },\n      webdriver: {\n        start_process: false\n      }\n    },\n\n    'selenium.chrome': {\n      extends: 'selenium',\n      desiredCapabilities: {\n        browserName: 'chrome',\n        chromeOptions : {\n        }\n      }\n    },\n\n    'selenium.firefox': {\n      extends: 'selenium',\n      desiredCapabilities: {\n        browserName: 'firefox'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for TestingBot in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Nightwatch to run tests on TestingBot. It includes settings for the Selenium host, credentials, and browser-specific configurations for Chrome and Firefox.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-cloud-providers.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...,\n    test_settings: {\n        ...,\n        testingbot: {\n            selenium: {\n                host: 'hub.testingbot.com',\n                port: 443\n            },\n            'username': '${TB_KEY}',\n            'access_key': '${TB_SECRET}',\n        },\n        'testingbot.chrome': {\n            extends: 'testingbot',\n            desiredCapabilities: {\n                browserName: 'chrome',\n                'tb:options': {\n                    'platformName': 'Windows 10',\n                    'version': 'latest',\n                    'name': 'First Nightwatch test',\n                }\n            }\n        },\n        \n        'testingbot.firefox': {\n            extends: 'testingbot',\n            desiredCapabilities: {\n                browserName: 'firefox',\n                'tb:options': {\n                    'platformName': 'Windows 10',\n                    'version': 'latest',\n                    'name': 'First Nightwatch test',\n                }\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expect API in Nightwatch Tests (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Nightwatch's Expect API to perform assertions on elements. It shows how to check if an element is present and visible using a chain-able syntax.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/elements/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('expect example', function() {\n  it('sample test', function (browser) {\n    // start with identifying the element\n    // and then assert the element is present\n    browser.expect.element('#main').to.be.present;\n    // or assert the element is visible\n    browser.expect.element('#main').to.be.visible;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests on BrowserStack from Jenkins\nDESCRIPTION: This command runs the Nightwatch tests on BrowserStack using the Jenkins build environment. It specifies the BrowserStack environment for test execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-jenkins.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- --env browserstack\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin with Component Type\nDESCRIPTION: Specify the component type (Vue or React) in the Vite configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: [\n    // ... other plugins, such as vue() or react()\n    nightwatchPlugin({\n      componentType: 'vue'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Relative Locators in Nightwatch.js\nDESCRIPTION: Example of chaining multiple relative locators to precisely locate an element based on multiple spatial relationships.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/finding-and-interacting-with-elements.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocateWith(By.tagName('button'))\n  .below(By.id('email')\n  .toRightOf(By.css('#cancel')));\n```\n\n----------------------------------------\n\nTITLE: Writing a Nightwatch Test with Ava\nDESCRIPTION: This code snippet shows how to write a Nightwatch test using Ava. It demonstrates importing the necessary modules, setting up the test, and using Nightwatch commands within an Ava test function.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-ava.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = require('ava');\nconst {createNightwatchClient} = require('@nightwatch/ava-plugin');\n\ntest('ecosia.org', async (t) => {\n  const browser = await createNightwatchClient(t);\n\n  await browser\n    .url('https://www.ecosia.org/')\n    .assert.titleContains('Ecosia')\n    .assert.visible('input[type=search]')\n    .setValue('input[type=search]', 'nightwatch')\n    .assert.visible('button[type=submit]')\n    .click('button[type=submit]')\n    .assert.textContains('.mainline-results', 'Nightwatch.js')\n\n  await browser.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Text Content in Nightwatch\nDESCRIPTION: Examples of locating elements based on their text content using Nightwatch's findByText methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.findByText('text');\nbrowser.element.findAllByText('text');\n```\n\n----------------------------------------\n\nTITLE: Setting Test Suite-Specific Capabilities in Nightwatch BDD\nDESCRIPTION: An example showing how to set desired capabilities specifically for a test suite using the BDD interface. This allows specifying browser-specific configurations for a particular test suite.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // testsuite specific capabilities\n  this.desiredCapabilities = {\n    browserName: 'firefox'\n  };\n  \n  it('...', function() {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Real iOS Device Environment in Nightwatch\nDESCRIPTION: Configuration for the Nightwatch test settings to support running tests on real iOS devices. Includes the specific 'app.ios.real' environment with iOS capabilities for physical devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'app.ios.real': {\n    extends: 'app',\n    'desiredCapabilities': {\n      // More capabilities can be found at https://github.com/appium/appium-xcuitest-driver#capabilities\n      browserName: null,\n      platformName: 'ios',\n      // `appium:options` is not natively supported in Appium v1,but works with Nightwatch.\n      // If copying these capabilities elsewhere while using Appium v1,make sure to remove `appium:options`\n      // and add `appium:` prefix to each one of its capabilities,e.g. change 'app' to 'appium:app'.\n      'appium:options': {\n        automationName: 'XCUITest',\n        // While Appium v1 supports relative paths,it's more safe to use absolute paths instead.\n        // Appium v2 does not support relative paths.\n        app: `${__dirname}/nightwatch/sample-apps/wikipedia.zip`,\n        bundleId: 'org.wikimedia.wikipedia',\n        newCommandTimeout: 0,\n        // add udid of the device to run tests on. Or,pass the id to `--deviceId` flag when running tests.\n        // device id could be retrieved from Xcode > Window > 'Devices and Simulators' window.\n        // udid: '00008030-00024C2C3453402E'\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Test Case in BDD Describes Interface\nDESCRIPTION: This example shows how to skip an individual test case using the BDD Describes interface in Nightwatch.js. It uses the 'xtest()' function, which is equivalent to test.skip(), it.skip(), and xit().\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/disabling-tests.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  \n  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()\n  xtest('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Environments in Nightwatch.json\nDESCRIPTION: Example of defining multiple test environments in Nightwatch.json configuration file, showing a default environment and an integration environment with overridden settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-environments.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [\"./tests\"],\n  \n  \"test_settings\" : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"globals\" : {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    },\n    \"integration\" : {\n      \"launch_url\" : \"http://staging.host\",\n      \"globals\" : {\n        \"myGlobalVar\" : \"other value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Test Suite in Nightwatch BDD\nDESCRIPTION: An example showing how to disable or skip a test suite using the BDD interface. This allows keeping test code in place while preventing execution during test runs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n   this.disabled = true\n   \n   it('...', function() {\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing clearValue in a Nightwatch.js Test Suite\nDESCRIPTION: A complete Nightwatch.js test example that demonstrates how to clear an input field value. The test navigates to Google, searches for \"nightwatch.js\", clears the input field using clearValue(), and verifies the results are cleared.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/method/clearValue.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n  \n  'clearValue example test' : function (browser) {\n    \n    browser\n      .url('https://google.com')\n      .waitForElementVisible('input[type=text]')\n      .setValue('input[type=text]', 'nightwatch.js')\n      .click('button[type=submit]')\n      .expect.element('#rcnt').text.to.contain('nightwatchjs.org/');\n    \n    browser\n      .clearValue('input[type=text]')\n      .expect.element('#rcnt').text.to.equal('');\n  },\n  \n  after : function(browser) {\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Timeout in Nightwatch BDD\nDESCRIPTION: An example showing how to configure the timeout duration for assertions and element location commands using the BDD interface. This defines how long Nightwatch will wait for an element to be located or an assertion to pass.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  this.timeout(1000)\n  \n  it('...', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Emulator Environment in Nightwatch\nDESCRIPTION: Configuration for the Nightwatch test settings to support running tests on Android emulators. Includes the base 'app' configuration with Appium settings and the specific 'app.android.emulator' environment with Android capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest_settings: {\n  ...\n  app: {\n      selenium: {\n        start_process: true,\n        use_appium: true,\n        host: 'localhost',\n        port: 4723,\n        server_path: '',\n        // args to pass when starting the Appium server\n        cli_args: [\n          // automatically download the required chromedriver\n          // '--allow-insecure=chromedriver_autodownload'\n        ],\n        // Uncomment below line when using Appium v2\n        // default_path_prefix: ''\n      },\n      webdriver: {\n        timeout_options: {\n          timeout: 150000,\n          retry_attempts: 3\n        },\n        keep_alive: false,\n        start_process: false\n      }\n  },\n  \n   'app.android.emulator': {\n      extends: 'app',\n      'desiredCapabilities': {\n        // More capabilities can be found at https://github.com/appium/appium-uiautomator2-driver#capabilities\n        browserName: null,\n        platformName: 'android',\n        // `appium:options` is not natively supported in Appium v1,but works with Nightwatch.\n        // If copying these capabilities elsewhere while using Appium v1,make sure to remove `appium:options`\n        // and add `appium:` prefix to each one of its capabilities,e.g. change 'app' to 'appium:app'.\n        'appium:options': {\n          automationName: 'UiAutomator2',\n          // Android Virtual Device to run tests on\n          avd: 'nightwatch-android-11',\n          // While Appium v1 supports relative paths,it's more safe to use absolute paths instead.\n          // Appium v2 does not support relative paths.\n          app: `${__dirname}/nightwatch/sample-apps/wikipedia.apk`,\n          appPackage: 'org.wikipedia',\n          appActivity: 'org.wikipedia.main.MainActivity',\n          appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',\n          // chromedriver executable to use for testing web-views in hybrid apps\n          chromedriverExecutable: `${__dirname}/chromedriver-mobile/chromedriver`,\n          newCommandTimeout: 0\n        }\n      }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unit Test in Nightwatch JavaScript\nDESCRIPTION: Demonstrates how to create a unit test in Nightwatch by setting the '@unitTest' property to true and using assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-nodejs-unit-integration-tests.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\n\nmodule.exports = {\n  '@unitTest': true,\n  \n  'demo UnitTest' : function (done) {\n    assert.equal('TEST', 'TEST');\n    setTimeout(function() {\n      done();\n    }, 10);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements in Native Mobile Apps with Nightwatch\nDESCRIPTION: Demonstrates how to click on elements in a native mobile app using the app.click() command. It shows examples of clicking by selector strategy and using a selector object with an index.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Mention the selector strategy followed by the selector itself\n// Click on the element with id `org.wikipedia:id/search_container`\napp.click('id','org.wikipedia:id/search_container')\n\n// Mention a selector object and index.\n// Click on the nth element with id `org.wikipedia:id/page_list_item_title`\napp.click({selector: 'org.wikipedia:id/page_list_item_title',locateStrategy: 'id',index: n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Mention the selector strategy followed by the selector itself\n// Click on the element with id `org.wikipedia:id/search_container`\napp.click('id','org.wikipedia:id/search_container')\n\n// Mention a selector object and index\n// Click on the nth element with id `org.wikipedia:id/page_list_item_title`\napp.click({selector: 'org.wikipedia:id/page_list_item_title',locateStrategy: 'id',index: n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Globals in Nightwatch Test\nDESCRIPTION: Example showing how to access global variables in a Nightwatch test using the browser.globals object. This allows test cases to use values defined in the configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('test globals example', function() {\n  \n  it('Demo test', function(browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"some value\"\n  });\n  \n})\n```\n\n----------------------------------------\n\nTITLE: Setting and Resetting Geolocation in Nightwatch.js Test\nDESCRIPTION: This example shows how to set the browser's geolocation to Tokyo, Japan, and then reset it back to the original location. It uses setGeolocation() twice, first with coordinates and then without arguments to reset.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/network-requests/mock-geolocation.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('mock and reset geolocation', function() {\n  it('sets the geolocation to Tokyo, Japan and then resets it', () => {\n    browser\n      .setGeolocation({\n        latitude: 35.689487,\n        longitude: 139.691706,\n        accuracy: 100\n      })  // sets the geolocation to Tokyo, Japan\n      .navigateTo('https://www.gps-coordinates.net/my-location')\n      .pause(3000)\n      .setGeolocation()  // resets the geolocation\n      .navigateTo('https://www.gps-coordinates.net/my-location')\n      .pause(3000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Admonitions in Nightwatch Documentation\nDESCRIPTION: Examples of how to create info and warning admonitions using alert classes in Nightwatch documentation for highlighting relevant information or warnings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"alert alert-info\">\nThe below commands runs an example test which opens the search engine [Ecosia.org](https://www.ecosia.org/), types the term \"nightwatch\" into the search input field, then verifies if the results page contains the text \"Nightwatch.js\".\n</div>\n\n<div class=\"alert alert-warning\">\nTo improve support for displaying the output when running tests in parallel, we recommend setting `detailed_output` to `false` in your test settings (and also make sure `live_output` is enabled).\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Page Object Sections in Tests\nDESCRIPTION: Demonstrates how to use defined sections in test cases, including assertions and element interactions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-sections.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    var google = browser.page.google();\n    google.expect.section('@menu').to.be.visible;\n    \n    var menuSection = google.section.menu;\n    menuSection.expect.element('@mail').to.be.visible;\n    menuSection.expect.element('@images').to.be.visible;\n    \n    menuSection.click('@mail');\n    \n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Render Page in Vite\nDESCRIPTION: Example of specifying a custom test renderer page in the Vite configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: [\n    // ... other plugins, such as vue() or react()\n    nightwatchPlugin({\n      renderPage: './src/test_renderer.html'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Value Equality in Nightwatch.js with Chai Expects\nDESCRIPTION: This code demonstrates how to assert that an element's value equals an expected value using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).value.to.equal();\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Globals in Nightwatch.js\nDESCRIPTION: Demonstrates how to define different global settings for local and integration environments in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/external-globals.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'default' : {\n    isLocal : true,\n  },\n  \n  'integration' : {\n    isLocal : false\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Keys to Elements in Nightwatch.js\nDESCRIPTION: Demonstrates how to send keys to input fields using Nightwatch.js. It shows typing text into a search field and typing with a key press.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Type in 'Nightwatch' into input field search\nbrowser.element.findByPlaceholderText('search').sendKeys('Nightwatch');\n\n//or\n\n// Type in 'John Doe' into the username field and press enter\nbrowser.element.findByLabelText('username').sendKeys(['Nightwatch', browser.Keys.ENTER]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Type in 'Nightwatch' into input field search\nbrowser.element.findByPlaceholderText('search').sendKeys('Nightwatch');\n\nor\n// Type in 'John Doe' into the username field and press enter\nbrowser.element.findByLabelText('username').sendKeys(['Nightwatch', browser.Keys.ENTER]);\n```\n\n----------------------------------------\n\nTITLE: Using expect.title() for Page Title Assertions in Nightwatch.js\nDESCRIPTION: This code demonstrates how to use the expect.title() method to perform assertions on the page title. The example shows two assertion types: checking if the title contains a specific value and checking if it matches a regular expression pattern.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_title.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.title().to.contain('value');\n  browser.expect.title().to.match(/value/);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Packed Chrome Extensions\nDESCRIPTION: Modify the nightwatch.conf.js file to load a packed Chrome Extension (.crx file) and open DevTools automatically during test runs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-extension-testing/chrome-extension.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchrome: {\n  desiredCapabilities: {\n    browserName: 'chrome',\n    'goog:chromeOptions': {\n      args: [\n        //'--headless',\n        'auto-open-devtools-for-tabs'\n      ],\n      // load extension from .crx file.\n      extensions: [\n        require('fs').readFileSync('path/to/extension.crx', {encoding: 'base64'})\n      ]\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Element Values in Nightwatch.js\nDESCRIPTION: Demonstrates how to clear the value of an element using Nightwatch.js. The example clears the value of a search input field.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Clear the value of input field search\nbrowser.element.find('#search').clear();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Clear the value of input field search\nbrowser.element.find('#search').clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Selenium Server in Nightwatch.js\nDESCRIPTION: This code snippet demonstrates how to configure the nightwatch.conf.js file to enable running tests on a remote Selenium server. It includes settings for the remote host, credentials, and browser-specific configurations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-cloud-providers.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...,\n    test_settings : {\n        ...,\n        remote: {\n            // Info on all the available options with \"selenium\":\n            // /guide/configuration/settings.html#selenium-server-settings\n            selenium: {\n                start_process: false,\n                server_path: '',\n                host: '<remote-hostname>',\n                port: 4444\n            },\n            \n            username: '${REMOTE_USERNAME}',\n            access_key: '${REMOTE_ACCESS_KEY}',\n            \n            webdriver: {\n                keep_alive: true,\n                start_process: false\n            }\n        },\n        \n        'remote.firefox': {\n            extends: 'remote',\n            desiredCapabilities: {\n                browserName: 'firefox',\n                'moz:firefoxOptions': {\n                    args: [\n                        // '-headless',\n                        // '-verbose'\n                    ]\n                }\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Settings Configuration Options Table\nDESCRIPTION: HTML table defining Nightwatch output configuration options including output folder location, color settings, live output, silent mode, detailed output, error logging, timestamps, and screenshot data settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/customising-test-output.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"table table-bordered table-striped\">\n  <thead>\n   <tr>\n     <th style=\"width: 100px;\">Name</th>\n     <th style=\"width: 100px;\">type</th>\n     <th style=\"width: 50px;\">default</th>\n     <th>description</th>\n   </tr>\n  </thead>\n  <tbody>\n   <tr>\n     <td><code>output_folder</code></td>\n     <td>string</td>\n     <td>tests_output</td>\n     <td>The location where the JUnit XML report files will be saved.</td>\n   </tr>\n    <br>\n    <tr>\n     <td><code>folder_format</code></td>\n     <td>string/function</td>\n     <td>undefined</td>\n     <td>Used as a prefix for HTML report folder. This can be utilised to <a href=\"https://github.com/nightwatchjs/nightwatch-docs/issues/310#issuecomment-2233833015\">retain HTML report across test runs</a></td>\n   </tr>\n    \n   <tr>\n     <td><code>disable_colors</code></td>\n     <td>boolean</td>\n     <td>false</td>\n     <td>Controls whether or not to disable coloring of the CLI output globally.</td>\n   </tr>\n\n   <tr>\n    <td><code>live_output</code></td>\n    <td>boolean</td>\n    <td>false</td>\n    <td>This option is only useful when running tests in parallel. Controls whether or not to buffer the output.</td>\n  </tr>\n\n  <tr>\n    <td><code>silent</code></td>\n    <td>boolean</td>\n    <td>true</td>\n    <td>Whether to show the extended HTTP traffic command logs from the WebDriver or Selenium server.</td>\n  </tr>\n\n  <tr>\n    <td><code>output</code></td>\n    <td>boolean</td>\n    <td>true</td>\n    <td>Used to disable CLI output completely.</td>\n  </tr>\n\n  <tr>\n    <td><code>detailed_output</code></td>\n    <td>boolean</td>\n    <td>true</td>\n    <td>By default detailed assertion output is displayed while the test is running. Set this to <code>false</code> if you'd like to only see the test case name displayed and pass/fail status. Detailed output is disabled by default when running tests in parallel.</td>\n  </tr>\n\n  <tr>\n    <td><code>disable_error_log</code></td>\n    <td>boolean</td>\n    <td>false</td>\n    <td>Set this to true if you'd like to not display errors during the execution of the test (they are shown at the end always).</td>\n  </tr>\n\n  <tr>\n    <td><code>output_timestamp</code></td>\n    <td>boolean</td>\n    <td>false</td>\n    <td>Set this to true if you'd like to see timestamps next to the logging output.</td>\n  </tr>\n\n  <tr>\n    <td><code>log_screenshot_data</code></td>\n    <td>boolean</td>\n    <td>false</td>\n    <td>Used to enable showing the Base64 image data in the (verbose) log when taking screenshots.</td>\n  </tr>         \n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Nightwatch Selector Object Usage\nDESCRIPTION: Shows how to use element() with a Nightwatch selector object that includes additional options like index.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst addButtonEl = element({\n  selector: 'button[type=\"button\"]',\n  index: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nightwatch and Ava Integration\nDESCRIPTION: This snippet shows the npm command to install the necessary dependencies for running Nightwatch tests with Ava. It includes nightwatch, ava, and @nightwatch/ava-plugin.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-ava.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch ava @nightwatch/ava-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Static URL in Page Object\nDESCRIPTION: Basic page object implementation with a static URL definition and empty elements object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/getting-started.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: 'https://google.com',\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Test Runner with Options\nDESCRIPTION: Basic configuration for using Mocha as the test runner in Nightwatch with custom options for UI and reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // other settings...\n  test_runner: {\n    type : 'mocha',\n    options : {\n      ui : 'bdd',\n      reporter : 'list'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Specific Environment\nDESCRIPTION: Command-line example showing how to run Nightwatch tests using a specific environment configuration using the --env flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-environments.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env integration\n```\n\n----------------------------------------\n\nTITLE: Using .useXpath() Command in Nightwatch.js\nDESCRIPTION: Demonstrates how to use the .useXpath() command to switch to XPath selectors for multiple subsequent element commands. It also shows how to switch back to CSS selectors using .useCss().\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/using-xpath-selectors.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (browser) {\n    browser\n      .useXpath() // every selector now must be xpath\n      .click(\"//tr[@data-recordid]/span[text()='Search Text']\")\n      .useCss() // we're back to CSS now\n      .setValue('input[type=text]', 'nightwatch')\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using ScopedElement for Element Interactions in Nightwatch v3\nDESCRIPTION: Explains how ScopedElement works as a wrapper around WebElement, providing direct access to commands and assertions. Shows how to perform actions, make assertions, and retrieve actual results using await.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// `find()` and `findBy*()` commands return ScopedElement,\n// a wrapper around the actual result, i.e., `WebElement`.\nconst inputElem = browser.element.find('input[name=q]');\n\n// This wrapper provides a host of commands and assertions\n// available directly on the result.\ninputElem.click();\ninputElem.sendKeys('Nightwatch.js');\n\n// No need to await when performing actions or assertions\n// on the element.\ninputElem.assert.enabled();\ninputElem.getText().assert.equals('Nightwatch.js');\n\n// Use await to retrieve the actual result from the command.\nconst inputWebElem = await inputElem; // returns a `WebElement` instance\nconst inputText = await inputElem.getText();\nconst inputSize = await inputElem.getSize();\n```\n\n----------------------------------------\n\nTITLE: Installing @nightwatch/apitesting Plugin\nDESCRIPTION: Installs the official Nightwatch API testing plugin from NPM. This plugin is required for performing API tests in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nightwatch/apitesting --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Point in Nightwatch Mobile Test\nDESCRIPTION: Another example showing how to set a debug point in a Nightwatch mobile test script using the .debug() command. This allows pausing test execution at a specific point to attach Appium Inspector or use terminal debugging.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/debug-tests.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp\n  .useXpath()\n  .click('//XCUIElementTypeSearchField[@name=\"Search Wikipedia\"]')\n  .sendKeys('//XCUIElementTypeSearchField[@name=\"Search Wikipedia\"]','browserstack')\n  .click('//XCUIElementTypeStaticText[@name=\"BrowserStack\"]')\n  .debug()\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation in Nightwatch.js\nDESCRIPTION: Shows how to simulate traffic from a specific latitude and longitude using the setGeolocation method in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/commands.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the latitude & longitude of the prime meridian\nbrowser.setGeolocation({latitude: 51.4780, longitude: 0.0014, accuracy: 100})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the latitude & longitude of the prime meridian\nbrowser.setGeolocation({latitude: 51.4780, longitude: 0.0014, accuracy: 100})\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with XPath Selectors in Nightwatch\nDESCRIPTION: Examples demonstrating how to locate elements using XPath selectors through Nightwatch's by.xpath method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find(by.xpath(('xpath string'));\nbrowser.element.findAll(by.xpath(('xpath string'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Workers in Nightwatch JSON (Full Example)\nDESCRIPTION: Configuration example showing how to enable test workers in Nightwatch, with the option to automatically determine the number of workers based on available CPUs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/parallel-running.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"test_workers\": {\n    \"enabled\": true,\n    \"workers\": \"auto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keeping Browser Open on Test Failure in Nightwatch BDD\nDESCRIPTION: An example showing how to configure Nightwatch to keep the browser window open when a test fails using the BDD interface. This is useful for debugging failing tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n   this.endSessionOnFail = false\n   \n   it('...', function() {\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Disabled State in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be disabled. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsDisabled(element)\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-nightwatch\nDESCRIPTION: Command to install the Vite plugin for Nightwatch from NPM.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vite-plugin-nightwatch\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Form Elements with Nightwatch\nDESCRIPTION: Code showing how to set a value on a form element (like an input or textarea) using Nightwatch's setValue method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').setValue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Workers in Nightwatch JSON (Compact Example)\nDESCRIPTION: Simplified configuration to enable test workers in Nightwatch using a boolean value instead of a detailed configuration object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/parallel-running.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"test_workers\": true}\n```\n\n----------------------------------------\n\nTITLE: Setting Desired Capabilities in Nightwatch BDD\nDESCRIPTION: An example showing how to set browser-specific capabilities for a test suite using the BDD interface. This allows configuring browser options for specific test suites.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  this.desiredCapabilities = {};\n  \n  it('...', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch.js for Firefox Driver\nDESCRIPTION: This snippet shows how to configure Nightwatch.js to run tests with Firefox browser using GeckoDriver directly. It includes Firefox-specific capability options and port configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-commands-to-perform-actions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  \n  webdriver: {\n    start_process: true,\n    server_path: 'path/to/geckodriver',\n    cli_args: [\n      // --verbose\n    ],\n    port: 4444\n  },\n  \n  test_settings: {\n    default: {\n      desiredCapabilities: {\n        browserName: 'firefox',\n        alwaysMatch: {\n          acceptInsecureCerts: true,\n          'moz:firefoxOptions': {\n            args: [\n              // -headless\n            ]\n          }\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in an Existing React Project\nDESCRIPTION: Command to set up Storybook in an existing React project using the Storybook CLI.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook init\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Environments in Nightwatch.js\nDESCRIPTION: Example configuration showing how to define multiple test environments in Nightwatch.js test_settings. Demonstrates default environment setup and inheritance with a custom 'integration' environment that overwrites specific settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-environments.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"test_settings\" : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"globals\" : {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    },\n\n    \"integration\" : {\n      \"launch_url\" : \"http://staging.host\",\n      \"globals\" : {\n        \"myGlobalVar\" : \"other value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Sections in Nightwatch.js Page Objects\nDESCRIPTION: This code demonstrates how to create sections using the 'sections' property in a page object. Sections provide namespacing and element-level nesting for better organization of page elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-sections.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  sections: {\n    menu: {\n      selector: '#gb',\n      elements: {\n        mail: {\n          selector: 'a[href*=\"mail\"]'\n        },\n        images: {\n          selector: 'a[href*=\"imghp\"]'\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Contains in Mobile Elements\nDESCRIPTION: Demonstrates how to use app.assert.textContains() to verify if an element contains specific text. This method takes a selector object and the text to search for.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` contains text Browser\napp.assert.textContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'Browser');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` contains text Browser\napp.assert.textContains({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'Browser');\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Specific Number of Workers via CLI\nDESCRIPTION: Command line example demonstrating how to run Nightwatch tests with a specific number of worker processes using the --workers CLI option.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/parallel-running.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --workers=4\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Value Contains in Nightwatch\nDESCRIPTION: Example showing how to verify that an input element's value contains a specific substring using Nightwatch's assertion chain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getValue().assert.contains('text');\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Story with Nightwatch\nDESCRIPTION: Command to run a specific story from a stories file using the --story flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch src/stories/Form.stories.jsx --env chrome --story=FilledForm\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch.js with Chrome Browser Driver\nDESCRIPTION: This snippet shows a Nightwatch.js configuration for running tests with Chrome browser directly using ChromeDriver. The configuration sets up paths, ports, and browser capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-commands-to-perform-actions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  \n  webdriver: {\n    start_process: true,\n    server_path: 'path/to/chromedriver',\n    cli_args: [\n      // --verbose\n    ],\n    port: 9515\n  },\n  \n  test_settings: {\n    default: {\n      desiredCapabilities: {\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n          // More info on Chromedriver: https://sites.google.com/a/chromium.org/chromedriver/\n          //\n          // w3c:false tells Chromedriver to run using the legacy JSONWire protocol (not required in Chrome 78)\n          w3c: true,\n          args: [\n            //'--no-sandbox',\n            //'--ignore-certificate-errors',\n            //'--allow-insecure-localhost',\n            //'--headless'\n          ]\n        }\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Attribute Matches Regex Pattern\nDESCRIPTION: Shows how to use app.assert.attributeMatches() to verify if a specific attribute of an element matches a regular expression pattern. This allows for flexible attribute validation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute only contains alphabets\napp.assert.attributeMatches({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','/^[a-z]+$/i');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` text attribute only contains alphabets\napp.assert.attributeMatches({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'text','/^[a-z]+$/i');\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch.js Tests with Multiple Tags\nDESCRIPTION: This command shows how to run Nightwatch.js tests with multiple tags by using multiple --tag flags.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-tags.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --tag login --tag something_else\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for BrowserStack in Nightwatch.js\nDESCRIPTION: This snippet shows how to add proxy settings in the Nightwatch configuration file for connecting to BrowserStack through a proxy server. It includes host, port, and protocol options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/browser-stack-settings.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  test_settings: {\n    default: {\n      desiredCapabilities: {\n        // Your capabilities\n      },\n      proxy: {\n        \"host\": \"\",     // \"127.0.0.1\"\n        \"port\": \"\",     // \"8081\"\n        \"protocol\": \"\"  // \"http\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Selenium on Firefox\nDESCRIPTION: Command to run a Nightwatch test file using Selenium Server with Firefox. The environment flag specifies which browser configuration to use.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-selenium-server.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch tests/specs/basic/ecosia.js --env selenium.firefox\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Globals in Nightwatch\nDESCRIPTION: Configuration example showing how to define environment-specific global variables in Nightwatch. The 'integration' environment overrides the global variable defined in the default environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n\n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n\n      \"globals\": {\n        \"myGlobalVar\" : \"some value\",\n        \"otherGlobal\" : \"some other value\"\n      }\n    },\n\n    \"integration\": {\n      \"globals\": {\n        \"myGlobalVar\" : \"integrated global\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Sections in Nightwatch.js Tests\nDESCRIPTION: This example shows how to use defined page sections in test scripts. It demonstrates accessing sections, making assertions on section elements, and interacting with elements within a section.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-sections.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('sample test with page objects', function() {\n  it('Test', function (browser) {\n    var google = browser.page.google();\n    google.expect.section('@menu').to.be.visible;\n    \n    var menuSection = google.section.menu;\n    menuSection.expect.element('@mail').to.be.visible;\n    menuSection.expect.element('@images').to.be.visible;\n    \n    menuSection.click('@mail');\n    \n    browser.end();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Nightwatch Tests\nDESCRIPTION: Example of accessing global variables within a Nightwatch test case. The globals object is made available directly on the Nightwatch API which is passed to the tests as the browser parameter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-globals.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"some value\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Nightwatch.js Tests with Multiple Tags\nDESCRIPTION: This command demonstrates how to skip Nightwatch.js tests with multiple tags by providing comma-separated tags to the --skiptags flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-tags.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login,something_else\n```\n\n----------------------------------------\n\nTITLE: Using Custom Page Commands in Tests\nDESCRIPTION: Demonstrates how to use custom page commands within a test case, showing the simplified test syntax enabled by page object commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/writing-page-specific-commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    var google = browser.page.google();\n    google.setValue('@searchBar', 'nightwatch')\n      .submit();\n    \n    browser.end();\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for CucumberJS Integration\nDESCRIPTION: Sets up the Nightwatch configuration to use CucumberJS as the test runner, specifying the feature path and other options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner: {\n    // set cucumber as the runner\n    type: 'cucumber',\n    \n    // define cucumber specific options\n    \n    options: {\n      //set the feature path\n      feature_path: 'examples/cucumber-js/*/*.feature',\n      \n      // start the webdriver session automatically (enabled by default)\n      auto_start_session: true,\n      \n      // use parallel execution in Cucumber\n      // set number of workers to use (can also be defined in the cli as --parallel 2\n      parallel: 2 \n    }\n  },\n  \n  src_folders: ['examples/cucumber-js/features/step_definitions']\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch on Windows\nDESCRIPTION: Command to run Nightwatch tests on Windows using Node.js\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode nightwatch.js [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Angular Component Testing\nDESCRIPTION: Basic configuration setup in nightwatch.conf.js to enable the Angular plugin. This adds the plugin to Nightwatch's configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['@nightwatch/angular']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch Test Globals in Configuration File\nDESCRIPTION: Example of defining global variables directly in the Nightwatch configuration file using the 'globals' property. This allows you to define name-value pairs that can be accessed throughout your tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-test-globals.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\": [],\n\n  \"globals\": {\n    \"myGlobalVar\" : \"some value\",\n    \"otherGlobal\" : \"some other value\"\n  },\n\n  \"test_settings\": {\n    \"default\": {\n      \"launch_url\": \"https://nightwatchjs.org\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Multiple Test Groups in Nightwatch.js\nDESCRIPTION: Command to skip multiple test groups using comma-separated values with the --skipgroup flag\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-groups.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skipgroup addressbook,chat\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Mode in Nightwatch JSON\nDESCRIPTION: Shows how to enable unit test mode globally in the Nightwatch configuration file by setting the 'unit_tests_mode' option to true.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/writing-unit-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\" : [\"tests\"],\n  \n  \"unit_tests_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using negated assertions in Nightwatch.js\nDESCRIPTION: Shows how to use the .not operator to create negated assertions in Nightwatch.js. This example demonstrates negating element presence, visibility, and URL contents checks.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Demo .not assertion', function() {\n  it('demo test', function(browser) {\n    browser.init();\n    \n    browser\n      .assert.not.elementPresent('.not_present') // previously .assert.elementNotPresent()\n      .assert.not.visible('.non_visible') // previously .assert.hidden()\n      .assert.not.urlContains('http://');\n    \n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Single Nightwatch Test\nDESCRIPTION: Example command for running a single test file\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/firstTest.js\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Test Runner Configuration\nDESCRIPTION: Configuration showing how to specify different test runners for different test environments in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_settings : {\n    default: {\n      test_runner: 'default'\n    },\n    \n    mocha_tests: {\n      test_runner : {\n        type : \"mocha\",\n        options : {\n          ui : \"bdd\",\n          reporter : \"list\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Multiple Tags\nDESCRIPTION: Command to run Nightwatch tests that match multiple specific tags by using multiple --tag flags.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --tag login --tag something_else\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Equality in Nightwatch.js using Chai Expects\nDESCRIPTION: This snippet demonstrates how to assert that the current browser URL equals an expected value using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(brower.url()).to.equal();\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Browser Environments in Nightwatch.js\nDESCRIPTION: This configuration snippet shows how to set up Nightwatch.js with multiple browser environments (Chrome, Firefox, Safari) without Selenium. Each environment has its own WebDriver configuration and capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-commands-to-perform-actions.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  \n  test_settings: {\n    default: {},\n    \n    chrome: {\n      webdriver: {\n        start_process: true,\n        server_path: 'path/to/chromedriver',\n        port: 9515\n      },\n      \n      desiredCapabilities: {\n        browserName: 'chrome'\n      }\n    },\n    \n    firefox: {\n      webdriver: {\n        start_process: true,\n        server_path: 'path/to/geckodriver',\n        port: 4444\n      },\n      \n      desiredCapabilities: {\n        browserName: 'firefox'\n      }\n    },\n    \n    safari: {\n      webdriver: {\n        start_process: true,\n        server_path: '/usr/bin/safaridriver',\n        port: 4445\n      },\n      \n      desiredCapabilities: {\n        browserName: 'safari'\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Workers and Multiple Environments for Parallel Testing\nDESCRIPTION: Command line example demonstrating how to run tests in multiple browser environments (Firefox and Chrome) while also distributing the tests across multiple worker processes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/parallel-running.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch -e firefox,chrome --workers=4\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Project Root for Angular Testing\nDESCRIPTION: Configuration for specifying a custom project root directory where Angular tests are written. By default, this is set to the current directory.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  '@nightwatch/angular': {\n    projectRoot: 'path/to/angular/project' // defaults to current directory\n  },\n  // other nightwatch settings...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Sections in Nightwatch.js Tests\nDESCRIPTION: This example demonstrates how to access and use nested sections in test scripts. It shows how to navigate through the section hierarchy to access and interact with elements in nested sections.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-sections.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('sample test with page objects', function() {\n  it('Test', function (browser) {\n    var google = browser.page.google();\n    google.expect.section('@menu').to.be.visible;\n    \n    var menuSection = google.section.menu;\n    var appSection = menuSection.section.apps;\n    menuSection.click('@appSection');\n    \n    appSection.expect.element('@myAccount').to.be.visible;\n    appSection.expect.element('@googlePlus').to.be.visible;\n    \n    browser.end();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Specific Environment\nDESCRIPTION: Command-line example showing how to run Nightwatch with a specific test environment using the --env flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-environments.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env integration\n```\n\n----------------------------------------\n\nTITLE: Disabling a Test Module in Nightwatch\nDESCRIPTION: This snippet demonstrates how to prevent a test module from running by setting the '@disabled' attribute to true. This is useful for skipping tests that are known to be failing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/skipping-disabling-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  '@disabled': true, // This will prevent the test module from running.\n  \n  'sample test': function (browser) {\n    // test code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Nightwatch Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Nightwatch client using the createClient() method. It includes various configuration options such as headless mode, browser selection, timeout settings, and additional capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/programmatic-api.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Nightwatch = require('nightwatch');\n\nconst client = Nightwatch.createClient({\n  headless: true,\n  output: true,\n  silent: true, // set to false to enable verbose logging\n  browserName: 'firefox', // can be either: firefox, chrome, safari, or edge\n\n  // set the global timeout to be used with waitFor commands and when retrying assertions/expects\n  timeout: 10000,\n\n  // set the current test environment from the nightwatch config\n  env: null,\n\n  // any additional capabilities needed\n  desiredCapabilities: {\n\n  },\n\n  // can define/overwrite test globals here; \n  // when using a third-party test runner only the global hooks onBrowserNavigate/onBrowserQuit are supported\n  globals: {},\n\n  // when the test runner used supports running tests in parallel; \n  // set to true if you need the webdriver port to be randomly generated\n  parallel: false, \n\n  // All other Nightwatch config settings can be overwritten here, such as:\n  disable_colors: false\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Plugin for Nightwatch\nDESCRIPTION: Command to install the @nightwatch/angular plugin from NPM. This plugin enables Angular component testing in Nightwatch 2.4+.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nightwatch/angular\n```\n\n----------------------------------------\n\nTITLE: Checking Text Content in Nightwatch.js with Chai Expects\nDESCRIPTION: This code shows how to assert that an element's text contains a specific substring using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).text.to.contain();\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Specific Environment\nDESCRIPTION: Command-line example showing how to run Nightwatch with a specific test environment using the --env flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-environments.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env integration\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Tests\nDESCRIPTION: Example showing how to access global variables in Nightwatch tests\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    \n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"some value\"\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Test Cases in BDD Describes Interface\nDESCRIPTION: This example shows how to skip a specific test case using the BDD Describes interface in Nightwatch. It uses the 'it.skip()' method, which is equivalent to 'test.skip()', 'xtest()', and 'xit()'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/skipping-disabling-tests.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  \n  // skipped testcase: equivalent to: test.skip(), it.skip(), and xit()\n  it.skip('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests Directly from node_modules on Windows\nDESCRIPTION: Command syntax for directly running Nightwatch tests from the node_modules directory on Windows systems when Nightwatch is installed as a project dependency.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode node_modules/.bin/nightwatch [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Object in Nightwatch.js\nDESCRIPTION: Demonstrates how to create a new instance of a page object using the browser.page API in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/pageobject/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPageObject = browser.page.MyPage(); // defined in MyPage.js module\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Custom Reporter in Bash\nDESCRIPTION: This command demonstrates how to run Nightwatch with a custom reporter specified by its file path. It uses the '--reporter' flag to include both the built-in junit reporter and the custom reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --reporter=junit --reporter=/path/to/custom_reporter.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Options in Nightwatch\nDESCRIPTION: Configuration for Chrome browser capabilities in nightwatch.conf.js, including necessary flags for CI environment like --no-sandbox and --disable-dev-shm-usage.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-gitlab.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchrome: {\n    desiredCapabilities : {\n    browserName : 'chrome',\n    'goog:chromeOptions' : {\n        w3c: true,\n        args: [\n        '--no-sandbox',\n        '--disable-dev-shm-usage'\n        ]\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Elements Using Arrays and Shared Elements\nDESCRIPTION: Shows how to define elements using an array of objects and incorporate shared elements across page objects.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sharedElements = {\n  mailLink: 'a[href*=\"mail.google.com\"]'\n};\n\nmodule.exports = {\n  elements: [\n    sharedElements,\n    { searchBar: 'input[type=text]' }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ES6 Class-based Page Commands in Nightwatch.js\nDESCRIPTION: Simple example of implementing page commands using an ES6 class. Shows basic command structure with method chaining support.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/writing-commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class {\n  basicCommand() {\n    return {\n      basicResult: 'from-helper-class'\n    };\n  }\n\n  dropdownSelect() {\n    return this;\n  }\n\n  dropdownSelectByText() {\n    return this;\n  }\n\n  name() {\n    return this;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Nightwatch CLI Help\nDESCRIPTION: Command to display all available command-line arguments and options for the Nightwatch test runner, providing a comprehensive reference of available functionalities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --help\n```\n\n----------------------------------------\n\nTITLE: Cloud Testing Credentials Configuration\nDESCRIPTION: Example of configuring username and access key for cloud testing services using environment variables.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"${SAUCE_USERNAME}\",\n  \"access_key\": \"${SAUCE_ACCESS_KEY}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Frame Switchability in Nightwatch\nDESCRIPTION: Ensures that the Nightwatch WebDriver client can switch to a designated frame. It takes a frame identifier as a parameter, which can be a number, WebElement, or By locator.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.ableToSwitchToFrame(frame)\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Nightwatch Test Module\nDESCRIPTION: Demonstrates how to add tags to a Nightwatch test module using the '@tags' property. This example shows a test tagged with 'login' and 'sanity' categories.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  '@tags': ['login', 'sanity'],\n  'demo login test': function (browser) {\n     // test code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Output of Console Message Capture Test\nDESCRIPTION: This snippet shows the expected output of running the Nightwatch test that captures console messages. It displays the captured console log message with its type, timestamp, and value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/capture-console-messages.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRunning Capture console messages:\n─────────────────────────────────────────────────────────────────────────────────\nerror 2022-06-10T13:38:22.082Z here\nNo assertions ran.\n```\n\n----------------------------------------\n\nTITLE: Using Promises in Nightwatch Callbacks\nDESCRIPTION: This example demonstrates how to use promises in Nightwatch callbacks. It includes both a regular function and an async function to show different approaches.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (browser) {\n    browser\n      .init()\n      .getText(\"#main ul li\", function(result) {\n        return new Promise(function(resolve, reject) {\n          setTimeout(function() {\n            console.log('Value:', result.value);\n            resolve();\n          }, 1000);\n        });\n      })\n      .click('#login button');\n  },\n  \n  demoTestAsync: async function(browser) {\n    const text = await browser.init().getText(\"#main ul li\", function(result) {\n      return Promise.resolve(result.value);\n    });              \n    \n    console.log('The text is', text);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with NPX\nDESCRIPTION: Command to run Nightwatch tests using NPX when installed as a project dependency\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Mode in Nightwatch JSON\nDESCRIPTION: Shows how to enable unit test mode globally in the Nightwatch configuration file by setting the 'unit_tests_mode' option to true.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-nodejs-unit-integration-tests.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src_folders\" : [\"tests\"],\n  \n  \"unit_tests_mode\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Settings in Nightwatch BDD\nDESCRIPTION: An example showing how to access the current Nightwatch settings within a test suite using the BDD interface. This allows tests to read configuration values during execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  console.log('Settings', this.settings);\n  \n  it('...', function() {\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tagged Tests Command Examples\nDESCRIPTION: Command line examples for running tests with specific tags or skipping tests with certain tags using the Nightwatch CLI.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --tag login\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --tag login --tag something_else\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login\n```\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login,something_else\n```\n\n----------------------------------------\n\nTITLE: WebDriver Keep-Alive Configuration Example\nDESCRIPTION: Example configuration for enabling HTTP Keep-Alive in WebDriver settings with custom keepAliveMsecs value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"keep_alive\": {\"enabled\": true, \"keepAliveMsecs\": 2000}\n```\n\n----------------------------------------\n\nTITLE: Element Definition with Index Property\nDESCRIPTION: Shows how to define an element with an index property to target specific elements in a multi-element query result.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]',\n      index: 1\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Sequence with Keyboard and Mouse Events\nDESCRIPTION: Demonstrates how to create an action sequence combining keyboard and mouse events. Shows usage of keyDown, move, press, release, and keyUp actions within a Nightwatch.js test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('user actions api', function() {\n\n  it('demo test', function() {\n    browser\n      .perform(function() {\n        const actions = this.actions({async: true});\n\n        return actions\n          .keyDown(Keys.SHIFT)\n          .move({origin: el})\n          .press()\n          .release()\n          .keyUp(Keys.SHIFT);\n      });\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Workers with Node Options in Nightwatch\nDESCRIPTION: Example configuration for running tests in parallel with inherited node options from process.execArgv. This setting enables running test suites in parallel using worker processes with access to the parent process arguments.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"test_workers\": {\n  \"enabled\": true,\n  \"workers\": \"auto\",\n  \"node_options\": \"inherit\"\n},\n```\n\n----------------------------------------\n\nTITLE: Finding Nested Elements with Selector Chaining in Nightwatch\nDESCRIPTION: Examples of using selector chaining to find nested elements within the DOM hierarchy, combining different selection methods.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('CSS selector').findByText('text').click();\n// or\nbrowser.element.findAll('CSS selector').nth(2).findByText('text').click();\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Component with Options\nDESCRIPTION: Example of mounting a Vue component with plugins and mocks using the Nightwatch API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = await browser.mountVueComponent('/src/components/Form.vue', {\n  plugins: {\n    store: '/src/lib/store.js',\n    router: '/src/lib/router.js'\n  },\n  \n  mocks: {\n    '/api/get-user': {\n      type: 'fetch',\n      body: {\n        data: {\n          \"firstName\": \"Jimmy\",\n          \"lastName\": \"Hendrix\"\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Enabled State\nDESCRIPTION: Demonstrates how to verify if a mobile element is in an enabled state using app.assert.enabled(). This checks if an element is interactive and can receive user input.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is enabled\napp.assert.enabled({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is enabled\napp.assert.enabled({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Dev Server in Nightwatch\nDESCRIPTION: Configuration options for the Vite dev server in the Nightwatch configuration file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['@nightwatch/react'],\n  vite_dev_server: {\n    start_vite: true,\n    port: 5173\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse in Action Sequence API\nDESCRIPTION: Inserts an action for moving the mouse relative to a specified origin. The origin can be the current position, viewport, or a specific WebElement. Duration of the move can be adjusted.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.move([options])\n```\n\n----------------------------------------\n\nTITLE: Async/Await Custom Command\nDESCRIPTION: Example of using async/await syntax in a custom command\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  command: async function () {\n    this.url('http://nightwatchjs.org');\n    this.waitForElementVisible('section#index-container');\n\n    const result = await this.elements('css selector', '#index-container ul.features li');\n    this.assert.strictEqual(result.value.length, 7, 'Feature elements number is correct');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Presence\nDESCRIPTION: Shows how to verify if an element is present in the render tree using app.assert.elementsPresent(). This checks for existence rather than visibility of the element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is present in the render tree\napp.assert.elementsPresent({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/button` is present in the render tree\napp.assert.elementsPresent({selector: 'org.wikipedia:id/button',locateStrategy: 'id'});\n```\n\n----------------------------------------\n\nTITLE: Getting Input Field Values in Nightwatch\nDESCRIPTION: Example showing how to retrieve the current value of an input field using Nightwatch's getValue method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getValue();\n```\n\n----------------------------------------\n\nTITLE: Clearing Values in Native Mobile Apps with Nightwatch\nDESCRIPTION: Illustrates how to clear the value of an element in a native mobile app using the app.clearValue() command. It provides examples of clearing values by selector strategy and using a selector object with an index.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Clear the value of the element with id `org.wikipedia:id/search_src_text`\napp.clearValue('id','org.wikipedia:id/search_src_text')\n\n//Mention a selector object and index\n//Click on the nth element with id `org.wikipedia:id/search_src_text`\napp.clearValue({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Clear the value of the element with id `org.wikipedia:id/search_src_text`\napp.clearValue('id','org.wikipedia:id/search_src_text')\n\n//Mention a selector object and index\n//Click on the nth element with id `org.wikipedia:id/search_src_text`\napp.clearValue({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Element Usage with Index Override\nDESCRIPTION: Demonstrates how to override element definitions in test commands and use the index property for specific element targeting.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('sample test with page objects', function() {\n  it('Test', function (browser) {\n    var google = browser.page.google();\n\n    google\n      .navigate()\n      .assert.title('Google');\n\n    google.waitForElementVisible('@searchBar') // 2nd input element\n    google.waitForElementVisible({selector:'@searchBar', index:1}, function(result){}); // 1st div\n\n    google.click('@submit');\n\n    browser.end();\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Key Press in Action Sequence API\nDESCRIPTION: Inserts an action to press a single key. The key can be specified as a Key value, a unicode code point, or a string containing a single unicode code point.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n.keyDown(key)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch to Use a Plugin in JavaScript\nDESCRIPTION: Demonstrates how to update the Nightwatch configuration file (nightwatch.conf.js) to include a newly installed plugin. The plugin is added to the 'plugins' array in the configuration object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-plugins.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: ['my-new-plugin']\n  \n  // other nightwatch config options\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with DOM History\nDESCRIPTION: Command to run specific Nightwatch test files or folders with DOM history tracing enabled using the --trace flag and path specification.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/dom-history.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to test file/folder> --trace\n```\n\n----------------------------------------\n\nTITLE: Setting Device Orientation in Native Mobile Apps with Nightwatch\nDESCRIPTION: Demonstrates how to set the orientation of the device to either landscape or portrait mode using the app.appium.setOrientation() command.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//Set current orientation to LANDSCAPE\nawait app.appium.setOrientation('LANDSCAPE');\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Environment-Specific Globals\nDESCRIPTION: Command to run Nightwatch tests with the integration environment, which will use the environment-specific globals defined for that environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/test-globals.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch --env integration\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Cursor in Nightwatch.js\nDESCRIPTION: Inserts an action for moving the mouse relative to a specified origin. Accepts an optional options object to configure the move.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.move([options])\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Folder for JUnit XML Reports in Nightwatch\nDESCRIPTION: This snippet shows how to configure the output folder for JUnit XML reports in the Nightwatch configuration file. The 'output_folder' setting specifies where the XML report files will be saved.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output_folder: 'tests_output'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for API Testing Plugin\nDESCRIPTION: Updates the Nightwatch configuration to include the API testing plugin and disable the browser session for API testing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: ['@nightwatch/apitesting']\n  \n  // other Nightwatch settings...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ....\n  api_testing: {\n    start_session: false,\n    webdriver: {\n      start_process: false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Code in Nightwatch Documentation\nDESCRIPTION: Three different ways to format inline code in Nightwatch documentation using HTML code tags, backticks, and pre/code blocks with language specification.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<code>[element]</code>)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`code`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<pre style=\"font-size:20px\"><code class=\"language-bash\">npm install nightwatch</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Configuring Real Android Device Environment in Nightwatch\nDESCRIPTION: Configuration for the Nightwatch test settings to support running tests on real Android devices. Includes the specific 'app.android.real' environment with Android capabilities for physical devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'app.android.real': {\n    extends: 'app',\n    'desiredCapabilities': {\n      // More capabilities can be found at https://github.com/appium/appium-uiautomator2-driver#capabilities\n      browserName: null,\n      platformName: 'android',\n      // `appium:options` is not natively supported in Appium v1,but works with Nightwatch.\n      // If copying these capabilities elsewhere while using Appium v1,make sure to remove `appium:options`\n      // and add `appium:` prefix to each one of its capabilities,e.g. change 'app' to 'appium:app'.\n      'appium:options': {\n        automationName: 'UiAutomator2',\n        // While Appium v1 supports relative paths,it's more safe to use absolute paths instead.\n        // Appium v2 does not support relative paths.\n        app: `${__dirname}/nightwatch/sample-apps/wikipedia.apk`,\n        appPackage: 'org.wikipedia',\n        appActivity: 'org.wikipedia.main.MainActivity',\n        appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',\n        // 'chromedriver' binary is required while testing hybrid mobile apps.\n        // \n        // Set `chromedriverExecutable` to '' to use binary from `chromedriver` NPM package (if installed).\n        // Or,put '--allow-insecure=chromedriver_autodownload' in `cli_args` property of `selenium`\n        // config (see 'app' env above) to automatically download the required version of chromedriver\n        // (delete `chromedriverExecutable` capability below in that case).\n        chromedriverExecutable: '',\n        newCommandTimeout: 0,\n        // add device id of the device to run tests on,if multiple devices are online\n        // Run command: `$ANDROID_HOME/platform-tools/adb devices` to get all connected devices\n        // udid: '',\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Label Text in Nightwatch\nDESCRIPTION: Examples demonstrating how to find form elements by their associated label text using Nightwatch's element API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.findByLabelText('label text');\nbrowser.element.findAllByLabelText('label text');\n```\n\n----------------------------------------\n\nTITLE: Basic Class-Based Page Commands in Nightwatch.js\nDESCRIPTION: Shows how to implement basic page commands using ES6 class syntax, introducing multiple command methods that return either data or the page object for chaining.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/writing-page-specific-commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class {\n  basicCommand() {\n    return {\n      basicResult: 'from-helper-class'\n    };\n  }\n  \n  dropdownSelect() {\n    return this;\n  }\n  \n  dropdownSelectByText() {\n    return this;\n  }\n  \n  name() {\n    return this;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Performing Right-Click in Nightwatch.js\nDESCRIPTION: Performs a simple right-click (down/up) with the mouse. Optionally accepts a WebElement parameter to move the mouse to the center of the element before clicking.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.contextClick([element])\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Custom Output Folder via CLI\nDESCRIPTION: This command demonstrates how to run Nightwatch tests and specify a custom output folder for reports using the CLI. The '--output' flag is used to set the output directory.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --output ./tests-output\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nightwatch Globals for React Testing\nDESCRIPTION: This code sets up the Vite dev server for React component testing and ensures the correct launch URL is set.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-component-tests-for-react.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {setup} = require('@nightwatch/react');\n\nlet viteServer;\nmodule.exports = {\n  async before() {\n    viteServer = await setup({\n      // you can optionally pass an existing vite.config.js file\n      // viteConfigFile: '../vite.config.js'\n    });\n\n    // This will make sure the launch Url is set correctly when mounting the React component\n    this.launchUrl = `http://localhost:${viteServer.config.server.port}`;\n  },\n\n  async after() {\n    await viteServer.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Element Definition in Nightwatch.js\nDESCRIPTION: Shows how to define page elements using both selector objects and shorthand syntax. Includes example of using different locate strategies (CSS and XPath).\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]'\n    },\n    submit: {\n      selector: '//[@name=\"q\"]',\n      locateStrategy: 'xpath'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Simple Appium Swipe Gesture\nDESCRIPTION: Example of implementing a basic swipe gesture using Appium's platform-specific mobile commands.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/with-appium.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.execute('mobile: swipe', args);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mochawesome Reporter Options\nDESCRIPTION: Example of configuring Mochawesome reporter options in the Nightwatch configuration file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  test_runner: {\n    type : 'mocha',\n    options : {\n      ui : 'bdd',\n      reporter : 'mochawesome',\n      reporterOptions: {\n        reporterDir: './output'\n      }\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Mouse Click in Nightwatch.js\nDESCRIPTION: Performs a simple left-click (down/up) with the mouse. Optionally accepts a WebElement parameter to move the mouse to the center of the element before clicking.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.click([element])\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Default Reporters\nDESCRIPTION: This command runs the DuckDuckGo example test using Nightwatch with Chrome environment. It uses the default reporters, which include JUnit XML.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Extended Environment in Nightwatch\nDESCRIPTION: Command-line example showing how to run Nightwatch tests using an extended environment (Selenium with Firefox) using the --env flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/concepts.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env selenium.firefox\n```\n\n----------------------------------------\n\nTITLE: Opening HTML Report Automatically After Test Run\nDESCRIPTION: This command demonstrates how to run Nightwatch tests and automatically open the generated HTML report in the default browser using the '--open' flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-html-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=html --open\n```\n\n----------------------------------------\n\nTITLE: Mounting React Component\nDESCRIPTION: Example of mounting a React component using the Nightwatch API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = await browser.mountReactComponent('/src/components/Form.jsx')\n```\n\n----------------------------------------\n\nTITLE: Accessing Section in Nightwatch.js Page Object\nDESCRIPTION: Shows how to access a section defined in a page object. Sections are automatically created through the page object factory and are available as properties of the section reference.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/pageobject/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPageObject = browser.page.MyPage();\nconst mySection = myPageObject.section.MySection; // from a `sections: {}` block in page object\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with JUnit XML Reporter Only\nDESCRIPTION: This command runs the DuckDuckGo example test using Nightwatch with Chrome environment, generating only the JUnit XML report. The '--reporter=junit' flag specifies the JUnit reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Stories with Nightwatch\nDESCRIPTION: Command to run Storybook stories using Nightwatch test runner with Chrome browser.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch src/stories/Form.stories.jsx --env chrome\n```\n\n----------------------------------------\n\nTITLE: Skipping Nightwatch Tests with Specific Tag\nDESCRIPTION: Command to skip running Nightwatch tests that have the 'login' tag using the --skiptags command line flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Contains in Nightwatch\nDESCRIPTION: Code showing how to verify that an element's text contains a specific substring using Nightwatch's assertion chain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getText().assert.contains('text');\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch VRT Plugin\nDESCRIPTION: Command to install the Nightwatch Visual Regression Testing plugin as a development dependency.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/visual-regression-testing.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nightwatch/vrt --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic URL in Page Object\nDESCRIPTION: Page object implementation with a dynamic URL function that concatenates the base launch URL with a specific path.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/getting-started.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  url: function() { \n    return this.api.launchUrl + '/login'; \n  },\n  elements: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing a Section from a Page Object in Nightwatch.js\nDESCRIPTION: Demonstrates how to instantiate a page object and access a section defined within it. Sections are accessed through the singular 'section' property of the page object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/page.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPageObject = browser.page.MyPage();\nconst mySection = myPageObject.section.MySection; // from a `sections: {}` block in page object\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Custom Output Directory via CLI\nDESCRIPTION: Command line example showing how to specify a custom output directory for reports when running Nightwatch tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --output ./tests-output\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Allure\nDESCRIPTION: Command to execute Nightwatch tests that will generate Allure results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-nightwatch-allure-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Nightwatch Test\nDESCRIPTION: An example showing how to break down a test into multiple steps using the exports syntax. The test is divided into two steps: navigating to the website and performing the search operation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'step one: navigate to ecosia.org': function(browser) {\n    browser\n      .url('https://www.ecosia.org')\n      .waitForElementVisible('body')\n      .assert.titleContains('Ecosia')\n      .assert.visible('input[type=search]')\n      .setValue('input[type=search]', 'nightwatch')\n      .assert.visible('button[type=submit]');\n  },\n  \n  'step two: click submit' : function (browser) {\n    browser\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Nightwatch Test\nDESCRIPTION: An example showing how to break down a test into multiple steps using the exports syntax. The test is divided into two steps: navigating to the website and performing the search operation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-exports.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'step one: navigate to ecosia.org': function(browser) {\n    browser\n      .url('https://www.ecosia.org')\n      .waitForElementVisible('body')\n      .assert.titleContains('Ecosia')\n      .assert.visible('input[type=search]')\n      .setValue('input[type=search]', 'nightwatch')\n      .assert.visible('button[type=submit]');\n  },\n  \n  'step two: click submit' : function (browser) {\n    browser\n      .click('button[type=submit]')\n      .assert.containsText('.mainline-results', 'Nightwatch.js')\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Equality in Nightwatch.js using Chai Expects\nDESCRIPTION: This snippet demonstrates how to assert that an element's text equals an expected value using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).text.to.equal();\n```\n\n----------------------------------------\n\nTITLE: Array-based Element Definition\nDESCRIPTION: Shows how to define elements using an array of objects, allowing for shared elements across page objects.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar sharedElements = {\n  mailLink: 'a[href*=\"mail.google.com\"]'\n};\n\nmodule.exports = {\n  elements: [\n    sharedElements,\n    { searchBar: 'input[type=text]' }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Page Object in Nightwatch.js\nDESCRIPTION: Creates a new instance of a page object defined in the MyPage.js module using the browser.page factory function.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/page.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPageObject = browser.page.MyPage(); // defined in MyPage.js module\n```\n\n----------------------------------------\n\nTITLE: Generating and Viewing Allure Reports\nDESCRIPTION: Command to generate Allure HTML reports from test results and launch the Allure report server.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-nightwatch-allure-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nallure generate ./allure-results --clean && allure open\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Nightwatch Plugin\nDESCRIPTION: Update the Vite configuration to include the Nightwatch plugin.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport nightwatchPlugin from 'vite-plugin-nightwatch'\n\nexport default defineConfig({\n  plugins: [\n    // ... other plugins, such as vue() or react()\n    nightwatchPlugin()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Chai Expects for Mobile App Testing\nDESCRIPTION: Demonstrates how to use BDD-style Chai expect assertions in mobile app testing. This example checks the current activity of the app using the Appium API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.appium.getCurrentActivity(function(activity){\n    expect(activity.value).to.equal('.page.PageActivity')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.appium.getCurrentActivity(function(activity){\n    expect(activity.value).to.equal('.page.PageActivity')\n})\n```\n\n----------------------------------------\n\nTITLE: Interacting with DOM Elements in Protractor vs Nightwatch\nDESCRIPTION: Shows how to perform common interactions like clicking, clearing input, and scrolling in both Protractor and Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/migrating-to-nightwatch/from-protractor.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor\nelement(by.css('button')).click()\nelement(by.css('input')).clear()\nelement.all(by.css('[type=\"checkbox\"]')).first().click()\nbrowser\n  .actions()\n  .mouseMove(element(by.id('my-id')))\n  .perform()\n\n// Nightwatch\nbrowser.click(element(by.css('button')))\nbrowser.click('button')\nbrowser.clearValue('input')\nbrowser.click('[type=\"checkbox\"]')\nbrowser.moveToElement(element(by.id('my-id'), 0, 0))\nbrowser\n  .perform(function() {\n    return this.actions().mouseMove(element(by.id('my-id')))\n  })\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Multiple Reporters\nDESCRIPTION: This command shows how to run Nightwatch tests with both JUnit-XML and HTML reporters enabled. It specifies the test file, environment, and multiple reporter types.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-html-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit --reporter=html\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Files with Nightwatch\nDESCRIPTION: Command example for running multiple individual test files with Nightwatch by specifying their paths, which will override the src_folders setting.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/firstTest.js tests/secondTest.js\n```\n\n----------------------------------------\n\nTITLE: Using Client Object as Function Parameter in Nightwatch Tests\nDESCRIPTION: Alternative example using 'client' instead of 'browser' as the parameter name. This syntax is from previous Nightwatch versions but still works in newer versions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function (client) {\n    client.init();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch TeamCity Reporter\nDESCRIPTION: Install the nightwatch-teamcity package as a dev dependency in your Nightwatch project.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch-teamcity --save-dev\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Fields in Nightwatch\nDESCRIPTION: Example of clearing the content of an input field using Nightwatch's clear method after finding the element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').clear();\n```\n\n----------------------------------------\n\nTITLE: Assertions in Protractor vs Nightwatch\nDESCRIPTION: Demonstrates how to perform various assertions such as length, value, text content, visibility, existence, and CSS properties in both Protractor and Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/migrating-to-nightwatch/from-protractor.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor\nexpect(list.count()).toBe(3)\nexpect(element(by.css('input[name=\"first_name\"]'))).getAttribute('value').toBe('foo')\nexpect(element(by.id('user-name')).getText()).toBe('John Doe')\nexpect(element(by.css('#main ul li a.first')).isDisplayed()).toBe(true)\nexpect(element(by.id('loading')).isPresent()).toBe(false)\nexpect(element(by.css('#main ul li a.first')).getCssValue('display')).toBe('block')\n\n// Nightwatch\nexpect.elements('.custom-class').count.to.equal(3);\nexpect(element('input[name=\"first_name\"]')).attribute('value').toEqual('foo');\nexpect.element(by.id('user-name')).text.toEqual('John Doe');\nexpect('#main ul li a.first').to.be.visible;\nbrowser.assert.not.elementPresent(by.id('loading'))\nbrowser.assert.cssProperty(by.css('#main ul li a.first'), 'display', 'block');\n```\n\n----------------------------------------\n\nTITLE: Sample Nightwatch Test\nDESCRIPTION: Basic test script that verifies browser title\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('sample nightwatch test', function() {\n  it('opens the browser and checks for input', function(browser) {\n    browser\n      .init()\n      .assert.titleEquals('Home | CERN')\n      .end();\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: URL Contains Check Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page URL contains a specified substring. Takes a string parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n.urlContains(substrUrl)\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Custom Reporter NPM Package in Bash\nDESCRIPTION: This command shows how to run Nightwatch using a custom reporter installed as an NPM package. Replace '<nightwatch-custom-reporter>' with the actual package name.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --reporter=<nightwatch-custom-reporter>\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Selenium on Chrome\nDESCRIPTION: Command to run a Nightwatch test file using Selenium Server with Chrome. The environment flag specifies which browser configuration to use.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-selenium-server.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch tests/specs/basic/ecosia.js --env selenium.chrome\n```\n\n----------------------------------------\n\nTITLE: Using Before and After Assertions in Nightwatch.js\nDESCRIPTION: Demonstrates how to use before and after assertions to add retry capability with specified timeouts in Nightwatch.js tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.contain('The Night Watch').before(1000);\n\n  browser.expect.element('#main').text.to.not.contain('The Night Watch').after(500);\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Text Pattern in Nightwatch.js using Chai Expects\nDESCRIPTION: This snippet illustrates how to assert that an element's text matches a given pattern or regular expression using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).text.to.match();\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Messages in Nightwatch Test\nDESCRIPTION: This code snippet demonstrates how to use the captureBrowserConsoleLogs() method in a Nightwatch test to capture and log console events from the browser. It navigates to Google's homepage and executes a script that logs a message to the console.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/capture-console-messages.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('capture console events', function() {\n  it('captures and logs console.log event', function() {\n    browser\n      .captureBrowserConsoleLogs((event) => {\n        console.log(event.type, event.timestamp, event.args[0].value);\n      })\n      .navigateTo('https://www.google.com')\n      .executeScript(function() {\n        console.log('here');\n      }, []);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Title Regex Match Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page title matches a specified regular expression pattern. Takes a RegExp parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.titleMatches(regex)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Test Runner for Specific Environment\nDESCRIPTION: This snippet demonstrates how to configure the Mocha test runner for a specific test environment in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_settings : {\n    default: {\n      test_runner: 'default'\n    },\n    \n    mocha_tests: {\n      test_runner : {\n        type : \"mocha\",\n        options : {\n          ui : \"bdd\",\n          reporter : \"list\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching a Browser Session with launchBrowser()\nDESCRIPTION: Demonstrates how to launch a browser session using an existing Nightwatch client. This method returns the Nightwatch browser API object which can be used for test interactions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/programmatic.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst browser = await client.launchBrowser();\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Nightwatch BDD Test Suites\nDESCRIPTION: Example showing how to add tags to a test suite using the BDD interface. Tags can be used for filtering or categorizing test suites.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-bdd-describe.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // defining tags using bdd\n  this.tags = ['login', 'authentication''];\n  \n  it('...', function() {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual WebDriver Session Start\nDESCRIPTION: Creates a setup file for Cucumber to manually start the WebDriver session and update capabilities.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Before} = require('@cucumber/cucumber');\n\nBefore(async function(testCase) {\n  if (!this.client) {\n    console.error('Nightwatch instance was not created.');\n    \n    return;\n  }\n  \n  this.client.updateCapabilities({\n    testCap: 'testing'\n  });\n  \n  this.browser = await this.client.launchBrowser();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Element Value Content in Nightwatch.js using Chai Expects\nDESCRIPTION: This snippet shows how to assert that an element's value contains a specific substring using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).value.to.contain();\n```\n\n----------------------------------------\n\nTITLE: Title Contains Check Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page title contains a specified substring. Takes a string parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.titleContains(substr)\n```\n\n----------------------------------------\n\nTITLE: Extended Mocha Describe Syntax in Nightwatch\nDESCRIPTION: This snippet showcases the extended describe() syntax available when using Mocha in Nightwatch, including various configuration options and hooks.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // All current settings are available via this.settings\n  // console.log('Settings', this.settings);\n  \n  // All current cli arguments are available via this.argv\n  // console.log('argv', this.argv);\n  \n  // The current mocha options object\n  // console.log('mochaOptions', this.mochaOptions);\n  \n  // All current globals are available via this.globals\n  // console.log('globals', this.globals);\n  \n  // testsuite specific capabilities\n  // this.desiredCapabilities = {};\n  \n  // Enable this if the current test is a unit/integration test (i.e. no Webdriver session will be created)\n  // this.unitTest = false\n  \n  // Set this to false if you'd like the browser window to be kept open in case of a failure or error (useful for debugging)\n  // this.endSessionOnFail = true\n  \n  // Set this to false if you'd like the rest of the test cases/test steps to be executed in the event of an assertion failure/error\n  // this.skipTestcasesOnFail = true\n  \n  // this.suiteRetries(2);\n  \n  // Control the assertion and element commands timeout until when an element should be located or assertion passed\n  // this.waitForTimeout(1000)\n  \n  // Control the unit test timeout \n  // this.timeout(1000)\n  \n  // Controll the polling interval between re-tries for assertions or element commands\n  // this.waitForRetryInterval(100);\n  \n  before(function(browser) {\n    this.homepage = browser.page.home();\n  });\n  \n  it('startHomepage', () => {\n    this.homepage.navigate();\n    this.homepage.expect.section('@indexContainer').to.be.not.visible;\n  });\n  \n  \n  // Run only this testcase\n  // it.only('startHomepage', () => {\n  //   this.homepage.navigate();\n  // });\n  \n  // skipped testcase: equivalent to xit()\n  it.skip('async testcase', async browser => {\n    const result = await browser.getText('#navigation');\n    console.log('result', result.value)\n  });\n  \n  after(browser => browser.end());\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch in Existing Project\nDESCRIPTION: Commands to navigate to an existing project directory and initialize Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-nightwatch-test.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <directory-name>\nnpm init nightwatch\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Configuration for Nightwatch\nDESCRIPTION: Configuration setup in nightwatch.conf.js for BrowserStack integration, including both Android and iOS test environments with Appium settings.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest_settings:{\n  ...\n  browserstack: {\n    selenium: {\n      host: 'hub.browserstack.com',\n      port: 443\n    },\n    desiredCapabilities: {\n      'bstack:options': {\n        userName: '<username>',\n        accessKey: '<access_key>',\n        appiumVersion: '2.0.0'\n      }\n    },\n    disable_error_log: false,\n    webdriver: {\n      timeout_options: {\n        timeout: 60000,\n        retry_attempts: 3\n      },\n      keep_alive: true,\n      start_process: false\n    }\n  },\n  'browserstack.android': {\n    extends: 'browserstack',\n    'desiredCapabilities': {\n      browserName: null,\n      'appium:options': {\n        automationName: 'UiAutomator2',\n        app: 'wikipedia-sample-app',\n        appPackage: 'org.wikipedia',\n        appActivity: 'org.wikipedia.main.MainActivity',\n        appWaitActivity: 'org.wikipedia.onboarding.InitialOnboardingActivity',\n        platformVersion: '11.0',\n        deviceName: 'Google Pixel 5'\n      },\n      appUploadUrl: 'https://raw.githubusercontent.com/priyansh3133/wikipedia/main/wikipedia.apk'\n    }\n  },\n  'browserstack.ios': {\n    extends: 'browserstack',\n    'desiredCapabilities': {\n      browserName: null,\n      platformName: 'ios',\n      'appium:options': {\n        automationName: 'XCUITest',\n        app: 'BStackSampleApp',\n        platformVersion: '16',\n        deviceName: 'iPhone 14'\n      },\n      appUploadUrl: 'https://www.browserstack.com/app-automate/sample-apps/ios/BStackSampleApp.ipa'\n    }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox Extensions in Nightwatch Configuration\nDESCRIPTION: Shows how to configure Firefox options to install extensions like Firebug in Nightwatch tests. Uses the selenium-webdriver/firefox Options class to configure the WebDriver session.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst firefox = require('selenium-webdriver/firefox');\n\nconst options = new firefox.Options()\n  .addExtensions('/path/to/firebug.xpi')\n  .setPreference('extensions.firebug.showChromeErrors', true);\n\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities: options\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility in Nightwatch.js with Chai Expects\nDESCRIPTION: This code demonstrates how to assert that an element is visible on the page using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element).to.be.visible();\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Dependencies\nDESCRIPTION: NPM command to install Nightwatch and ChromeDriver packages\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch chromedriver\n```\n\n----------------------------------------\n\nTITLE: Using .ensure API in Nightwatch.js Test\nDESCRIPTION: Demonstrates basic usage of the .ensure API for checking page title and element visibility. The example shows how to verify the page title matches a pattern and ensure an element is visible on the page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('demo test for .ensure', function() {\n  \n  it('basic test', function(browser) {\n    browser\n      .url('https://nightwatchjs.org')\n      .ensure.titleMatches(/Nightwatch\\.js/)\n      .ensure.elementIsVisible('#index-container')  \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mochawesome Reporter\nDESCRIPTION: Command to install the Mochawesome reporter for use with Mocha in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mochawesome --save-dev\n```\n\n----------------------------------------\n\nTITLE: Explicitly Failing Tests in Nightwatch.js Hooks\nDESCRIPTION: Example showing how to explicitly fail a test in a Nightwatch.js hook by passing an error object to the done callback. This is useful for custom validation in test hooks.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/using-test-hooks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  afterEach: function(browser, done) {\n    // performing an async operation\n    performAsync(function(err) {\n      if (err) {\n        done(err);\n        return;\n      }\n      // ...\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Reporter via nightwatch.conf.js\nDESCRIPTION: Alternative configuration for the Slack reporter in the Nightwatch configuration file, integrating the reporter through the globals property.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-slack-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n   slack_message: function(results, options) {\n   return {\n       text: 'Test completed, passed ' + results.passed + ', failed ' + results.failed,\n       username: 'Nightwatch',\n       icon_emoji: ':ghost:'\n       }\n   },\n   slack_webhook_url: 'https://hooks.slack.com/services/...'\n}\nmodule.exports = {\n   src_folders: ['tests'],\n   globals: {\n      reporter: (require('nightwatch-slack-reporter')(options)),\n    },\n   // Other stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests for Chrome Extensions\nDESCRIPTION: Execute the Nightwatch test script for Chrome Extensions using the npx command, specifying the test file and Chrome environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-extension-testing/chrome-extension.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch tests/sampleTest.js --env chrome\n```\n\n----------------------------------------\n\nTITLE: Finding Selenium WebElement Instance\nDESCRIPTION: Demonstrates how to retrieve the underlying Selenium WebElement instance from a Nightwatch element.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst addButtonEl = element('button[type=\"submit\"]');\nconst instance = await addButtonEl.findElement();\n```\n\n----------------------------------------\n\nTITLE: Configuring mocha-junit-reporter\nDESCRIPTION: Example of configuring the mocha-junit-reporter in the Nightwatch configuration file.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  test_runner: {\n    type : 'mocha',\n    options : {\n      reporterOptions: {\n        reporterDir: './output'\n      }\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rijksmuseum Search Test with Nightwatch.js\nDESCRIPTION: Example test that demonstrates navigating to a website, handling cookie dialogs, and performing a search operation on a mobile browser.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/running-tests-with-appium.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Nightwatch Website tests', function() {\n  \n  it('Searching the Rijksmuseum ', async function(){\n    browser.navigateTo('https://www.rijksmuseum.nl/en');\n    const cookieDialogVisible = await browser.isVisible({\n      selector: '.cookie-consent-bar-wrap',\n      suppressNotFoundErrors: true\n    });\n    \n    if (cookieDialogVisible) {\n      browser.click('.cookie-consent-bar-wrap button.link');\n    }\n    browser.pause(1000).click('a[aria-label=\"Search\"]');\n    \n    return browser.setValue('input.search-bar-input[type=text]', ['night watch'])\n      .click('button.button.search-bar-button')\n      .pause(1000)\n      .assert.containsText('.search-results', 'The Night Watch, Rembrandt van Rijn, 1642');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Title Exact Match Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page title exactly matches a specified value. Takes a string parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.titleIs(substr)\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Equality in Nightwatch\nDESCRIPTION: Example of verifying that the current browser URL exactly matches an expected URL string using Nightwatch's browser-level assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.assert.urlEquals('text');\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment Variables in Nightwatch Configuration\nDESCRIPTION: This snippet shows how to use environment variables in a Nightwatch configuration file. Environment variables (like BROWSERSTACK_USERNAME and BROWSERSTACK_ACCESS_KEY) are referenced using ${VARIABLE_NAME} syntax. The configuration includes test settings for local execution and BrowserStack integration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/using-env-variables-in-your-config.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n  \n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n    \n    browserstack: {\n      webdriver: {\n        start_process: false\n      },\n      \n      selenium: {\n        host: 'hub-cloud.browserstack.com',\n        port: 443\n      },\n      \n      desiredCapabilities: {\n         browserName: 'chrome',\n        'bstack:options' : {\n          userName: '${BROWSERSTACK_USERNAME}',\n          accessKey: '${BROWSERSTACK_ACCESS_KEY}',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Equal, Contain, and Match Assertions in Nightwatch Expect API\nDESCRIPTION: Shows how to use .equal(), .contain(), and .match() methods for asserting text content and CSS properties of elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.equal('The Night Watch');\n  browser.expect.element('#main').text.to.contain('The Night Watch');\n  browser.expect.element('#main').to.have.css('display').which.equals('block');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual WebDriver Session Start in Nightwatch\nDESCRIPTION: Shows how to configure Nightwatch to not start the WebDriver session automatically, allowing for manual control.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner: {\n    type: 'cucumber',\n    options: {\n      feature_path: 'examples/cucumber-js/*/*.feature',\n      auto_start_session: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Geolocation in Nightwatch.js Mobile Testing\nDESCRIPTION: This snippet demonstrates how to get the current geolocation of a mobile device using Nightwatch.js and Appium. The command returns an object containing latitude, longitude, and altitude.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//Get current geolocation\nconst geolocation =  await app.appium.getGeolocation();\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Matches Regex in Nightwatch\nDESCRIPTION: Example of verifying that an element's text matches a regular expression pattern using Nightwatch's assertion chain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getText().assert.matches('regex');\n```\n\n----------------------------------------\n\nTITLE: Sample Nightwatch Test for DuckDuckGo Search\nDESCRIPTION: A sample Nightwatch test that performs a search on DuckDuckGo and checks the results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Nightwatch.js Tests with Specific Tag\nDESCRIPTION: This command illustrates how to skip Nightwatch.js tests with a specific tag using the --skiptags flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-tags.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Path for Cookie Management in Markdown\nDESCRIPTION: This snippet uses a special Markdown comment syntax to specify a file path or URL structure for documentation related to cookie management in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/cookies/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (/cookies/index.html)\n```\n\n----------------------------------------\n\nTITLE: Implementing Extra Setup for Manual WebDriver Session in Cucumber\nDESCRIPTION: Demonstrates how to create an extra setup file for Cucumber to manually start the WebDriver session and perform additional setup tasks.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Before} = require('@cucumber/cucumber');\n\nBefore(async function(testCase) {\n  if (!this.client) {\n    console.error('Nightwatch instance was not created.');\n    \n    return;\n  }\n  \n  this.client.updateCapabilities({\n    testCap: 'testing'\n  });\n  \n  this.browser = await this.client.launchBrowser();\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Text in Native Mobile Apps with Nightwatch\nDESCRIPTION: Shows how to input text into fields in a native mobile app using the app.sendKeys() command. It includes examples of typing by selector strategy and using a selector object with an index.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Type the text 'Test' the element with id `org.wikipedia:id/search_container`\napp.sendKeys('id','org.wikipedia:id/search_src_text','Test')\n\n//Mention a selector object and index\n//Type 'Test' in the nth element with id `org.wikipedia:id/search_src_text`\napp.sendKeys({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n},'Test')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Type the text 'Test' the element with id `org.wikipedia:id/search_container`\napp.sendKeys('id','org.wikipedia:id/search_src_text','Test')\n\n//Mention a selector object and index\n//Type 'Test' in the nth element with id `org.wikipedia:id/search_src_text`\napp.sendKeys({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n},'Test')\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserStack Settings in Nightwatch.js\nDESCRIPTION: This snippet demonstrates how to configure Nightwatch.js to run tests on BrowserStack. It includes settings for different browsers and capabilities, as well as environment variable placeholders for authentication.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/browser-stack-settings.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: [],\n\n  webdriver: {\n    keep_alive: true,\n    timeout_options: {\n      timeout: 60000,\n      retry_attempts: 3\n    }\n  },\n\n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org'\n    },\n\n    browserstack: {\n      selenium: {\n        host: 'hub-cloud.browserstack.com',\n        port: 443\n      },\n\n      // More info on configuring capabilities can be found on:\n      // https://www.browserstack.com/automate/capabilities?tag=selenium-4\n      desiredCapabilities: {\n        'bstack:options' : {\n          local: 'false',\n          userName: '${BROWSERSTACK_USERNAME}',\n          accessKey: '${BROWSERSTACK_ACCESS_KEY}',\n        }\n      }\n    },\n\n    'browserstack.chrome': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'chrome'\n      }\n    },\n\n    'browserstack.firefox': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'firefox'\n      }\n    },\n\n    'browserstack.ie': {\n      extends: 'browserstack',\n      desiredCapabilities: {\n        browserName: 'IE',\n        browserVersion: '11.0',\n        'bstack:options' : {\n          os: 'Windows',\n          osVersion: '10',\n          local: 'false',\n          seleniumVersion: '3.5.2',\n          resolution: '1366x768'\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Safari Browser in Nightwatch.js Desired Capabilities\nDESCRIPTION: This code snippet shows how to configure the desiredCapabilities object in Nightwatch.js to use Safari as the target browser. It enables JavaScript and SSL certificate acceptance for testing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/safaridriver.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"desiredCapabilities\" : {\n  \"browserName\" : \"safari\",\n  \"javascriptEnabled\" : true,\n  \"acceptSslCerts\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Properties in Nightwatch\nDESCRIPTION: Code demonstrating how to retrieve CSS properties of an element using Nightwatch's getCssProperty method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getCssProperty();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Profile as a Function in Nightwatch\nDESCRIPTION: This snippet shows how to configure a Firefox profile as a function in Nightwatch configuration. It allows for dynamic creation of Firefox options with extensions and preferences.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities() {\n        const firefox = require('selenium-webdriver/firefox');\n\n        const options = new firefox.Options()\n          .addExtensions('/path/to/firebug.xpi')\n          .setPreference('extensions.firebug.showChromeErrors', true);\n        \n        return options;\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Ava Test Runner with npm\nDESCRIPTION: Command to install Ava test runner as a dev dependency using npm.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/ava.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i ava --save-dev\n```\n\n----------------------------------------\n\nTITLE: Performing Drag and Drop in Nightwatch.js\nDESCRIPTION: Configures a drag-and-drop action. Requires two parameters: 'from' (WebElement to drag) and 'to' (WebElement or coordinates to drop).\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n.dragAndDrop(from, to)\n```\n\n----------------------------------------\n\nTITLE: Basic DOM Interaction Example in Nightwatch (TypeScript)\nDESCRIPTION: TypeScript version of the ecosia.org search test showcasing proper type definitions using the NightwatchTests interface. It performs the same actions as the JavaScript example but with TypeScript syntax.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/finding-interacting-with-dom-elements.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {NightwatchTests} from 'nightwatch';\n\nconst ecosiaTest: NightwatchTests = {\n'Demo test ecosia.org': () => {\n  browser\n    .url('https://www.ecosia.org/')\n    .setValue('input[type=search]', 'nightwatch')\n    .click('button[type=submit]')\n    .assert.containsText('.mainline-results', 'Nightwatch.js')\n    .end();\n},\n\nexport default ecosiaTest;\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter in Nightwatch Documentation\nDESCRIPTION: Example of frontmatter configuration at the top of a Nightwatch documentation page. The frontmatter includes id, title, sidebar_label, and description properties to ensure proper page identification and display.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: overview-contributing\ntitle: Overview\nsidebar_label: Overview\ndescription: Nightwatch Contribution Guidelines\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Globals in Nightwatch Test (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the defined globals in a Nightwatch test script. The globals are available through the 'browser.globals' object passed to the test function.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/using-test-globals-in-your-config.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Demo test' : function (browser) {\n    console.log(browser.globals.myGlobalVar); // myGlobalVar == \"some value\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Chrome DevTools Protocol Command in Nightwatch.js\nDESCRIPTION: This snippet demonstrates how to use the sendAndGetDevToolsCommand method to capture a DOM snapshot using Chrome DevTools Protocol in a Nightwatch.js test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/chrome/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Chrome DevTools Example', function() {\n    it ('using CDP DOM Snapshot', async function() {\n        const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {\n            computedStyles: []\n        });\n        console.log('DOM', dom)\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Jest Script in Package.json\nDESCRIPTION: Package.json configuration to enable Jest test running\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/jest.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"scripts\": {\n   \"test\": \"jest\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Actions in Nightwatch.js\nDESCRIPTION: Inserts a pause action for specified devices. Accepts a duration parameter (in milliseconds) and a variable number of device parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n.pause(duration, ...devices)\n```\n\n----------------------------------------\n\nTITLE: Using Before and After Timeouts in Nightwatch Expect API\nDESCRIPTION: Demonstrates how to use .before() and .after() methods to add retry capability with timeouts to assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/index.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.contain('The Night Watch').before(1000);\n  \n  browser.expect.element('#main').text.to.not.contain('The Night Watch').after(500);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Chrome DevTools Protocol in Nightwatch\nDESCRIPTION: This snippet shows how to use the Chrome DevTools Protocol in Nightwatch to capture a DOM snapshot. It demonstrates the usage of the chrome.sendAndGetDevToolsCommand method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Chrome DevTools Example', function() {\n  \n  it ('using CDP DOM Snapshot', async function() {\n    const dom = await browser.chrome.sendAndGetDevToolsCommand('DOMSnapshot.captureSnapshot', {\n       computedStyles: []\n    });\n    \n    console.log('DOM', dom)\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Mocha Test Runner Configuration\nDESCRIPTION: Minimal configuration to enable Mocha as the test runner in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-mocha.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner : 'mocha'\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Mocha Test Runner Configuration\nDESCRIPTION: A simplified configuration for using Mocha as the test runner in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner : 'mocha'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nightwatch and Jest Integration\nDESCRIPTION: This snippet shows the npm command to install the necessary dependencies for running Nightwatch tests with Jest. It includes jest, jest-cli, and @nightwatch/jest-runner.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-jest.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jest jest-cli @nightwatch/jest-runner --save-dev\n```\n\n----------------------------------------\n\nTITLE: Inserting Actions for a Device in Nightwatch.js\nDESCRIPTION: Appends actions to the end of the current sequence for the given device. Accepts a Device object and a variable number of Action objects.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.insert(device, ...actions)\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Nightwatch Tests\nDESCRIPTION: Example command for running multiple individual test files\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/nightwatch-runner.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch tests/one/firstTest.js tests/secondTest.js\n```\n\n----------------------------------------\n\nTITLE: Response Format for Session Capabilities from WebDriver\nDESCRIPTION: Example of a response from the WebDriver service with detailed browser capabilities, including browser-specific features, platform information, and session identification.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/session-capabilities.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nResponse 200 POST /session (724ms)\n{\n value: {\n   capabilities: {\n     acceptInsecureCerts: false,\n     browserName: 'chrome',\n     browserVersion: '102.0.5005.61',\n     chrome: {\n       chromedriverVersion: '101.0.4951.41 (93c720...)'\n     },\n     'goog:chromeOptions': { debuggerAddress: 'localhost:52470' },\n     networkConnectionEnabled: false,\n     pageLoadStrategy: 'normal',\n     platformName: 'mac os x',\n     proxy: {},\n     setWindowRect: true,\n     strictFileInteractability: false,\n     timeouts: { implicit: 0, pageLoad: 300000, script: 30000 },\n     unhandledPromptBehavior: 'dismiss and notify',\n     'webauthn:extension:credBlob': true,\n     'webauthn:extension:largeBlob': true,\n     'webauthn:virtualAuthenticators': true\n   },\n   sessionId: '15d21f2132ff0675a97ca419bf6fbd4'\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with HTML Reporter via CLI\nDESCRIPTION: This command demonstrates how to run Nightwatch tests with the HTML reporter enabled via the command line interface. It specifies the test file, environment, and reporter type.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-html-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=html\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Assertions Path in Nightwatch.json\nDESCRIPTION: Configuration snippet showing how to specify the path to custom assertions in the nightwatch.json file using the custom_assertions_path property.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"custom_assertions_path\" : \"nightwatch/assertions\"\n}\n```\n\n----------------------------------------\n\nTITLE: WebDriver Timeout Options Configuration\nDESCRIPTION: Example configuration for WebDriver timeout settings including retry attempts.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"timeout\": 15000, \"retry_attempts\": 5}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for Mocha Integration in JavaScript\nDESCRIPTION: This snippet shows how to configure Nightwatch to use Mocha as the test runner. It sets the test_runner option in the Nightwatch configuration file to use Mocha and specifies the Mocha options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-external-mocha.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// nightwatch.conf.js\nmodule.exports = {\n  test_runner: {\n    type: 'mocha',\n    options: {\n      ui: 'bdd',\n      reporter: 'list'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Structure\nDESCRIPTION: HTML markup defining the pagination structure for documentation navigation between pages, including links to previous (Page Object Model) and next (Nightwatch configuration file) pages.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-vue-components.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"doc-pagination pt-40\">\n  <div class=\"previous\">\n    <a href=\"/guide/concepts/page-object-model.html\">\n      <span>←</span>\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Back</span>\n          <span class=\"bigT\">Page Object Model</span>\n        </div>\n    </a>\n  </div>\n  <div class=\"next\">\n    <a href=\"/guide/configuration/nightwatch-configuration-file.html\">\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Next Page</span>\n          <span class=\"bigT\">Nightwatch configuration file</span>\n        </div>\n        <span>→</span>\n    </a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Minimal Chrome Configuration\nDESCRIPTION: Basic Nightwatch configuration for Chrome using ChromeDriver\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/overview.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"src_folders\" : [\"tests\"],\n  \n  \"webdriver\" : {\n    \"start_process\": true,\n    \"server_path\": \"node_modules/.bin/chromedriver\",\n    \"port\": 9515\n  },\n  \n  \"test_settings\" : {\n    \"default\" : {\n      \"desiredCapabilities\": {\n        \"browserName\": \"chrome\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Reporter Interface for Nightwatch\nDESCRIPTION: This code snippet demonstrates the structure of a custom reporter module for Nightwatch. It exports an object with a write function that processes test results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/nightwatch-cli/command-line-options.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\nwrite(results, options, done) {\n  done();\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with Multiple Reporters\nDESCRIPTION: Command to run a Nightwatch test with Chrome browser and generate both JUnit-XML and JSON reports. This feature is available in Nightwatch v2.2+.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit --reporter=json \n```\n\n----------------------------------------\n\nTITLE: Chai Assertion Example for Mobile Testing\nDESCRIPTION: Demonstrates how to use Chai-style assertions in mobile app testing with Nightwatch, specifically checking the current activity value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/introduction-writing-tests.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.appium.getCurrentActivity(function(activity) {\n    expect(activity.value).to.equal('.page.PageActivity')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Gestures using W3C Actions API\nDESCRIPTION: Advanced example demonstrating how to implement swipe and pinch-zoom gestures using the W3C Actions API with multiple touch inputs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/running-tests-with-appium.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('W3C Actions API', function() {\n  it('swipe down and zoom in the page - w3c actions api ', async function(){\n    //Scroll down the page\n    await  browser.perform(function(){\n      const actions = this.actions();\n      \n      return actions.move({x: 100, y: 100}).press().move({origin: 'pointer', y: -300, duration: 50}).release();\n    });\n    \n    await browser.pause(2000);\n    \n    //Pinch zoom\n    await browser.perform(function(){\n      const actions= this.actions();\n      const pointer1 = new Device('finger-1', 'touch');\n      const pointer2 = new Device('finger-2', 'touch');\n      actions.insert(pointer1, pointer1.move({duration: 0, x: 100, y: 70}), pointer1.press(), {type: 'pause', duration: 500}, pointer1.move({duration: 1000, origin: 'pointer', x: 0, y: -20}), pointer1.release());\n      actions.insert(pointer2, pointer2.move({duration: 0, x: 100, y: 100}), pointer2.press(), {type: 'pause', duration: 500}, pointer2.move({duration: 1000, origin: 'pointer', x: 0, y: 20}), pointer2.release());\n      \n      return actions;       \n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Structure\nDESCRIPTION: HTML markup for the documentation page navigation showing pagination between sections, including links to previous (Session capabilities) and next (Page Object Model) pages.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/parallel-testing-in-nightwatch.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"doc-pagination pt-40\">\n  <div class=\"previous\">\n    <a href=\"/guide/concepts/session-capabilities.html\">\n      <span>←</span>\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Back</span>\n          <span class=\"bigT\">Session capabilities</span>\n        </div>\n    </a>\n  </div>\n  <div class=\"next\">\n    <a href=\"/guide/concepts/page-object-model.html\">\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Next Page</span>\n          <span class=\"bigT\">Page Object Model</span>\n        </div>\n        <span>→</span>\n    </a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Exclusion in Nightwatch.js\nDESCRIPTION: Use the 'exclude' property to specify an array of folders or file patterns that should be skipped during test execution. Paths are relative to the main source folder.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/advanced-test-source-filtering.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"exclude\" : [\"excluded-folder\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n\"exclude\" : [\"test-folder/*-smoke.js\"]\n```\n\n----------------------------------------\n\nTITLE: Installing mocha-junit-reporter\nDESCRIPTION: Command to install the mocha-junit-reporter for use with Mocha in Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mocha-junit-reporter --save-dev\n```\n\n----------------------------------------\n\nTITLE: Async Class-based Custom Command\nDESCRIPTION: Example of an async custom command implementation using class-style approach\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = class CustomCommand {\n  async command() {\n    let returnValue;\n    try {\n      returnValue = await anotherAsyncFunction();\n    } catch (err) {\n      console.error('An error occurred', err);\n      returnValue = {\n        status: -1,\n        error: err.message\n      }\n    }\n\n    return returnValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Test Project Directory\nDESCRIPTION: Command to create and navigate to a new test project directory\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ./test-project && cd ./test-project\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch iOS Tests Command\nDESCRIPTION: Command to execute Nightwatch tests for iOS apps on real devices.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env app.ios.real\n```\n\n----------------------------------------\n\nTITLE: Running Debug Mode with Chrome DevTools\nDESCRIPTION: Command to run a specific story in debug mode with Chrome DevTools enabled for debugging purposes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/debugging.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch src/stories/Form.stories.jsx --env chrome --devtools --debug --story=FilledForm\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: These commands set up the global Git configuration with the user's name and email address for commit identification.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n% git config --global user.name 'John Doe'\n% git config --global user.email 'john@example.com'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter as Separate File with Callback in JavaScript\nDESCRIPTION: This snippet shows how to create a custom reporter in a separate file using a callback function to signal completion. It defines a 'write' function that takes results, options, and a done callback.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  write : function(results, options, done) {\n    console.log('custom reporting...');\n    \n    done();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Selenium on Safari\nDESCRIPTION: Command to run a Nightwatch test file using Selenium Server with Safari. The environment flag specifies which browser configuration to use.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-selenium-server.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch tests/specs/basic/ecosia.js --env selenium.safari\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream in Git\nDESCRIPTION: These Git commands fetch the latest changes from the upstream repository and rebase the local branch on top of the upstream trunk.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n% git fetch upstream\n% git rebase upstream/trunk\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Native Mobile Apps with Nightwatch\nDESCRIPTION: Demonstrates how to directly set the value of an element in a native mobile app using the app.setValue() command. It shows examples of setting values by selector strategy and using a selector object with an index.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Type the text 'Value' the element with id `org.wikipedia:id/search_container`\napp.setValue('id','org.wikipedia:id/search_src_text','Value')\n\n//Mention a selector object and index\n//Type 'Value' in the nth element with id `org.wikipedia:id/search_src_text`\napp.setValue({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n},'Value')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Mention the selector strategy followed by the selector itself\n//Type the text 'Value' the element with id `org.wikipedia:id/search_container`\napp.setValue('id','org.wikipedia:id/search_src_text','Value')\n\n//Mention a selector object and index\n//Type 'Value' in the nth element with id `org.wikipedia:id/search_src_text`\napp.setValue({selector: 'org.wikipedia:id/search_src_text',locateStrategy: 'id',index: n},'Value')\n```\n\n----------------------------------------\n\nTITLE: Shorthand Element Definition\nDESCRIPTION: Demonstrates the shorthand syntax for defining elements when using the default locate strategy.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: 'input[type=text]'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Mochawesome Package\nDESCRIPTION: Command to install the Mochawesome reporter package from NPM as a development dependency for your Nightwatch project.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-mochawesome-reporter.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i mochawesome --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Allure Reporter Package\nDESCRIPTION: Command to install the nightwatch-allure package as a dev dependency in your project.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-nightwatch-allure-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch-allure --save-dev\n```\n\n----------------------------------------\n\nTITLE: Event-based Custom Pause Command\nDESCRIPTION: Implementation of a custom pause command using EventEmitter for completion signaling\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Events = require('events');\n\nmodule.exports = class CustomPause extends Events {\n  command(ms, cb) {\n    // If we don't pass the milliseconds, the client will\n    // be suspended indefinitely\n    if (!ms) {\n      return;\n    }\n\n    const returnValue = {\n      value: 'something'\n    };\n\n    setTimeout(() => {\n      // if we have a callback, call it right before the complete event\n      if (cb) {\n        cb.call(this.api);\n      }\n\n      // This also works: this.complete(returnValue)\n      this.emit('complete', returnValue);\n    }, ms);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook A11y Addon in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Storybook A11y addon in the main.js file. It adds the accessibility addon to the Storybook configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  addons: ['@storybook/addon-a11y']\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Activities in Native Mobile Apps with Nightwatch\nDESCRIPTION: Demonstrates how to start a new activity in a native mobile app using the app.appium.startActivity() command. It provides an example of starting an activity with specific package and activity names.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Start an Activity with package name `com.example` & activity name 'Activity'\napp.appium.startActivity({\n  appPackage: 'com.example',\n  appActivity: 'Activity'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Start an Activity with package name `com.example` & activity name 'Activity'\napp.appium.startActivity({\n  appPackage: 'com.example',\n  appActivity: 'Activity'\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Key Release in Action Sequence API\nDESCRIPTION: Inserts an action to release a single key. The key can be specified as a Key value, a unicode code point, or a string containing a single unicode code point.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n.keyUp(key)\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request with Nightwatch API Testing\nDESCRIPTION: Demonstrates how to write a test for a GET request using the supertest integration in Nightwatch. It checks the response status, content type, and body.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('api testing', function () {\n  it('get api test', async function({supertest}) {\n    await supertest\n      .request(\"https://petstore.swagger.io/v2\")\n      .get(\"/pet/findByStatus?status=available\")\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .then(function(response){\n          expect(response._body.length).to.be.greaterThan(0);\n      });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Objects Path in Nightwatch.js\nDESCRIPTION: JSON configuration for specifying the directory path where Nightwatch should look for page object files. The path can be a single folder or an array of folders.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/getting-started.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"page_objects_path\": [\"nightwatch/pages\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Directory and File\nDESCRIPTION: Command to create test directory and sample test file\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/define-test-environments.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tests && nano ./tests/sample-nightwatch-test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port for Webpack Dev Server\nDESCRIPTION: Configuration to override the default port (5173) used by the Webpack Dev Server when rendering Angular components for testing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-angular-components.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'webpack_dev_server': {\n    port: 10096 // defaults to 5173\n  },\n  // other nightwatch settings...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Geolocation in Nightwatch.js Mobile Testing\nDESCRIPTION: This code shows how to set the geolocation of a mobile device using Nightwatch.js and Appium. It takes an object with latitude, longitude, and altitude as parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//Set current geolocation\nawait app.appium.setGeolocation({latitude:23.03,longitude: 34.23,altitude: 35.03});\n```\n\n----------------------------------------\n\nTITLE: NPM Package Structure for Custom Nightwatch Reporter\nDESCRIPTION: This snippet illustrates the recommended file structure for creating a custom Nightwatch reporter as an NPM package. It includes source files, test files, and necessary package metadata files.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n  ├── / \n  |   ├── src/\n  |   |    ├── my_custom_reporter_lib.js\n  |   |    └── my_other_custom_reporter_lib.js\n  |   └── test/\n  |        ├── test_for_my_custom_reporter_lib.js\n  |        └── test_for_my_other_custom_reporter_lib.js\n  ├── index.js\n  ├── LICENSE.md\n  ├── package.json\n  └── README.md\n```\n\n----------------------------------------\n\nTITLE: Initializing expect.cookie() Method in Nightwatch.js\nDESCRIPTION: This snippet demonstrates the basic syntax for using the expect.cookie() method in Nightwatch.js. It allows assertions on a single cookie after retrieving the entire cookie string using .getCookies().\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/_cookie.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.expect.cookie('cookie-name', ['cookie-domain'])\n```\n\n----------------------------------------\n\nTITLE: Element with Index Property\nDESCRIPTION: Shows how to target specific elements when multiple elements match a selector using the index property.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: {\n      selector: 'input[type=text]',\n      index: 1\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch and Chromedriver Dependencies\nDESCRIPTION: This command installs Nightwatch and Chromedriver from NPM. Chromedriver is required for running tests in Google Chrome browser.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch chromedriver\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Custom Command\nDESCRIPTION: Example test case demonstrating usage of a custom command\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  \"testing resize picture\" : function (browser) {\n    browser\n      .url(\"http://app.host\")\n      .waitForElementVisible(\"body\")\n      .resizePicture(\"/var/www/pics/moon.jpg\")\n      .assert.element(\".container .picture-large\")\n      .end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Component Preview in Nightwatch\nDESCRIPTION: Commands to run component tests in preview mode using Nightwatch CLI, with options for single or parallel browser execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/debugging.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch test/components --preview\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch test/components --env chrome,firefox --preview\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard Visibility in Nightwatch.js Mobile Testing\nDESCRIPTION: This code shows how to check if the keyboard is currently visible on a mobile device using Nightwatch.js and Appium. It uses the isKeyboardShown method, which returns a boolean value.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/commands.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n //Is keyboard shown \nconst keyboardShown = await app.appium.isKeyboardShown();\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Count\nDESCRIPTION: Demonstrates how to verify the count of elements matching a selector using app.assert.elementsCount(). This is useful for validating lists or repeating elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/list_item` has a count of 7\napp.assert.elementsCount({selector: 'org.wikipedia:id/list_item',locateStrategy: 'id'},7);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/list_item` has a count of 7\napp.assert.elementsCount({selector: 'org.wikipedia:id/list_item',locateStrategy: 'id'},7);\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Value Matches Regex in Nightwatch\nDESCRIPTION: Code demonstrating how to verify that an input element's value matches a regular expression pattern using Nightwatch's assertion chain.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getValue().assert.matches('regex');\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshots for Test Failures in Nightwatch.js\nDESCRIPTION: This snippet shows how to enable screenshots for test failures and errors in Nightwatch.js. It demonstrates the configuration of the 'screenshots' property in the nightwatch.json file under the 'test_settings' environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/method/end.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"test_settings\" : {\n    \"default\" : {\n      \"screenshots\" : {\n        \"enabled\" : true,\n        \"on_failure\" : true,\n        \"path\" : \"./screens\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI\nDESCRIPTION: Command to configure AWS CLI credentials which are required for the Node.js library\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/configuration/aws-devicefarm-settings.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch React Plugin via npm\nDESCRIPTION: This command installs the @nightwatch/react plugin, which is required for testing React components with Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-component-tests-for-react.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nightwatch/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin with Custom Render Page\nDESCRIPTION: Specify a custom test renderer page in the Vite configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/vite-plugin.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: [\n    // ... other plugins, such as vue() or react()\n    nightwatchPlugin({\n      renderPage: './src/test_renderer.html'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Mochawesome Reporter\nDESCRIPTION: Example command for running Nightwatch tests using the Mochawesome reporter with Mocha.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/using-mocha.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/ --reporter mochawesome\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Matches Regex Pattern in Mobile Elements\nDESCRIPTION: Demonstrates how to use app.assert.textMatches() to verify if an element's text matches a regular expression pattern. This allows for more flexible text validation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/assertions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` is alphabet only\napp.assert.textMatches({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'/^[a-z]+$/i');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Assert if the element with id `org.wikipedia:id/pcs-edit-section-title` is alphabet only\napp.assert.textMatches({selector: 'org.wikipedia:id/pcs-edit-section-title',locateStrategy: 'id'},'/^[a-z]+$/i');\n```\n\n----------------------------------------\n\nTITLE: Configuring Filename Format Function in Nightwatch.js\nDESCRIPTION: Function that generates screenshot filenames based on test suite, test case, and timestamp information. It formats the filename with date components and adds appropriate error/failure indicators.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/defaults.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filename_format = function ({testSuite = '', testCase = '', isError = false, dateObject = new Date()} = {}) {\n  const fileName = [];\n  const dateParts = dateObject.toString().replace(/:/g, '').split(' ');\n  dateParts.shift();\n  const dateStamp = dateParts.slice(0, 5).join('-');\n  if (testSuite) {\n    fileName.push(testSuite);\n  }\n  if (testCase) {\n    fileName.push(testCase);\n  }\n  return `${fileName.join('/')}${isError ? '_ERROR' : '_FAILED'}_${dateStamp}.png`;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Output Folder in Nightwatch\nDESCRIPTION: Sets the default output folder where JSON reports will be saved in the Nightwatch configuration file. By default, Nightwatch writes JSON reports in a subfolder called 'nightwatch-examples'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = { output_folder: 'tests_output' }\n```\n\n----------------------------------------\n\nTITLE: Skipping Nightwatch Tests with Multiple Tags\nDESCRIPTION: Command to skip Nightwatch tests with multiple tags by providing a comma-separated list to the --skiptags flag.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/filtering-by-test-tags.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --skiptags login,something_else\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter via Command-line Interface\nDESCRIPTION: Basic implementation of a custom reporter using the required interface. The reporter must export a write function that takes results, options, and a done callback.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-reporters.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  write : function(results, options, done) {\n    done();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Only a Specific Test Case in BDD Describes Interface\nDESCRIPTION: This example shows how to run only a particular test case within a test suite using the BDD Describes interface. It uses the 'test.only()' method, which is equivalent to 'it.only()'.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/skipping-disabling-tests.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  \n  test.only('startHomepage', () => {\n    // ...\n  });\n  \n  test('other testcase', () => {\n    // ...\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-selectors with Page Elements\nDESCRIPTION: Demonstrates how to use CSS pseudo-selectors with named page object elements.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/working-with-page-objects/defining-elements.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'Test': function (browser) {\n    google.waitForElementVisible('@searchBar:first-child');\n\n    google.waitForElementVisible('@searchBar:nth-child(1)');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing debug() in a DuckDuckGo search test with Nightwatch.js\nDESCRIPTION: This example demonstrates how to use the debug() command in a real-world scenario. It performs a search on DuckDuckGo for 'Nightwatch.js' and includes assertions to verify the results.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/debugging-tests/using-debug.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo debug example', function() {\n  // function passed as second argument to `it` should be `async`.\n  it('Search Nightwatch.js and check results', async function(browser) {\n    await browser\n      .url('https://duckduckgo.com')\n      .debug()\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing GeckoDriver via NPM for Nightwatch\nDESCRIPTION: This snippet shows how to install GeckoDriver as a dev dependency using NPM for use with Nightwatch.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/geckodriver.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install geckodriver --save-dev\n```\n\n----------------------------------------\n\nTITLE: HTML Pagination Controls for Nightwatch.js Documentation\nDESCRIPTION: HTML structure for pagination navigation in the Nightwatch.js documentation, showing links to previous and next pages with styled containers.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"doc-pagination pt-40\">\n  <div class=\"previous\">\n    <a href=\"/guide/mobile-web-testing/override-device-dimensions.html\">\n      <span>←</span>\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Back</span>\n          <span class=\"bigT\">Override device dimensions</span>\n        </div>\n    </a>\n  </div>\n  <div class=\"next\">\n    <a href=\"/guide/extending-nightwatch/adding-custom-assertions.html\">\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Next Page</span>\n          <span class=\"bigT\">Define custom assertions</span>\n        </div>\n        <span>→</span>\n    </a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Nightwatch Reporter Configuration\nDESCRIPTION: Define a custom reporter configuration that uses the TeamCity formatter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst teamCityFormatter = require(\"nightwatch-teamcity\").format;\n\nmodule.exports = {\n reporter: (results,done)=>{\n   teamCityFormatter(results);\n   done();\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Angular Schematic\nDESCRIPTION: Adds Nightwatch to an Angular project using the Angular CLI.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/migrating-to-nightwatch/from-protractor.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @nightwatch/schematics\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Browser Environments in Parallel\nDESCRIPTION: Command line example showing how to run Nightwatch tests against multiple browser environments (Firefox and Chrome) simultaneously.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/parallel-running.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --env firefox,chrome\n```\n\n----------------------------------------\n\nTITLE: Using Text-Based Selectors in Nightwatch\nDESCRIPTION: Examples of finding elements by their text content, which is a natural way of locating elements similar to how users would find them on a page.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/selectors.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Find an element with text 'Sign In'\nbrowser.element.findByText('Sign In');\n\n// Find all elements with text 'Sign In'\nbrowser.element.findAllByText('Sign In');\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Find an element with text 'Sign In'\nbrowser.element.findByText('Sign In');\n\n// Find all elements with text 'Sign In'\nbrowser.element.findAllByText('Sign In');\n```\n\n----------------------------------------\n\nTITLE: Test Output for Nightwatch.js clearValue Command\nDESCRIPTION: Sample console output showing the successful execution of a test using the clearValue command. The output indicates that all assertions passed, including verification that the text was cleared.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/method/clearValue.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[Clear Value] Test Suite\n============================\n\nRunning:  clearValue example test\n ✔ Element <input[type=text]> was visible after 68 milliseconds.\n ✔ Expected element <#rcnt> text to contain: \"nightwatchjs.org/\" - condition was met in 763ms\n ✔ Expected element <#rcnt> text to equal: \"\" - condition was met in 36ms\n\nOK. 3 assertions passed. (7.593s)\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Global Installation\nDESCRIPTION: Command syntax for running Nightwatch tests when installed globally with the -g option, making the nightwatch command available anywhere in your system.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/using-the-cli-test-runner.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch [source] [options]\n```\n\n----------------------------------------\n\nTITLE: Example JUnit XML Report Output from Nightwatch\nDESCRIPTION: This XML snippet shows an example of the JUnit XML report generated by Nightwatch. It includes test suite and test case information, along with the number of tests, errors, and failures.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites errors=\"0\"\n            failures=\"0\"\n            tests=\"1\">\n\n  <testsuite name=\"duckDuckGo\"\n    errors=\"0\" failures=\"0\" hostname=\"\" id=\"\" package=\"duckDuckGo\" skipped=\"0\"\n    tests=\"1\" time=\"2.007\" timestamp=\"\">\n\n    <testcase name=\"Search Nightwatch.js and check results\" classname=\"duckDuckGo\" time=\"2.007\" assertions=\"3\">\n    </testcase>\n\n  </testsuite>\n\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Angular CLI\nDESCRIPTION: Commands to run Nightwatch tests after installation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/migrating-to-nightwatch/from-protractor.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\nLANGUAGE: bash\nCODE:\n```\nng run {your-project-name}:nightwatch-run\n```\n\n----------------------------------------\n\nTITLE: Request Format for Session Initialization in Nightwatch\nDESCRIPTION: Example of a POST request sent by Nightwatch to create a new browser session, including desired capabilities such as browser name and test name.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/concepts/session-capabilities.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRequest POST /session  \n{\n desiredCapabilities: {\n   browserName: 'chrome',\n   name: 'To-Do List End-to-End Test'\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Story with Nightwatch Integration\nDESCRIPTION: Example showing the structure of a component story file with play() and test() functions. The play() function runs in the browser context while the test() function runs in the Nightwatch context.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Form from '../components/Form.jsx';\n\nexport default {\n  title: 'Form Stories',\n  component: Form\n}\n\nconst Template = (args) => <Form {...args} />\nexport const FilledForm = Template.bind({});\n\n// Runs in the browser context\nFilledForm.play = async ({ canvasElement }) => {\n\n};\n\n// Runs in the Nightwatch context\nFilledForm.test = async (browser, { component }) => {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Jest Environment\nDESCRIPTION: Command to install jest-environment-nightwatch package\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-test-runners/jest.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jest-environment-nightwatch --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Capabilities and Command Line Arguments in Nightwatch.js\nDESCRIPTION: Configures Chrome-specific capabilities in Nightwatch using chromeOptions. This example demonstrates passing command line arguments to Chrome to start in fullscreen mode.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/chromedriver.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"desiredCapabilities\" : {\n  \"browserName\" : \"chrome\",\n  \"javascriptEnabled\" : true,\n  \"acceptSslCerts\" : true,\n  \"chromeOptions\" : {\n    \"args\" : [\"start-fullscreen\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Reporter Output Folder in Nightwatch\nDESCRIPTION: This snippet shows how to configure the output folder for the HTML reporter in the Nightwatch configuration file. The 'output_folder' setting specifies where the HTML report files will be saved.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-html-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output_folder: 'tests_output'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Browser as a Global in Nightwatch v2\nDESCRIPTION: Example showing how to use the browser object as a global in Nightwatch v2 without explicitly passing it as a parameter to the test function.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function () {\n    browser.init();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Mock Server in Nightwatch API Tests\nDESCRIPTION: Demonstrates how to create and use a mock server in Nightwatch API tests. It sets up routes, starts the server, makes requests, and asserts on the responses and incoming requests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/api-testing.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('api testing with supertest in nightwatch POST', function () {\n  \n  let server;\n  \n  before(async function(client) {\n    server = await client.mockserver.create();\n    server.setup((app) => {\n      app.post('/api/v1/datasets/', function (req, res) {\n        res.status(200).json({\n          id: 'test-dataset-id'\n        });\n      });\n    });\n    \n    await server.start(3000);\n  });\n  \n  after(() => {\n    server.close();\n  });\n  \n  it('demo test', async function(client) {\n    const req = await server.request()\n      .post('/api/v1/datasets/')\n      .send({name: 'medea'})\n      .set('Accept', 'application/json')\n      .expect(200)\n      .expect('Content-Type', /json/);\n    \n    await client.assert.deepStrictEqual(server.route.post('/api/v1/datasets/').requestBody, {name: 'medea'});\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriver Session ID in Nightwatch\nDESCRIPTION: Example showing how to log the WebDriver session ID from a Nightwatch test. Each WebDriver session has a unique ID for distinguishing between different sessions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  console.log(browser.sessionId); // e0b40362dcec8ec501ac2b42b62bdce2\n```\n\n----------------------------------------\n\nTITLE: Using Browser as a Global in Nightwatch v2\nDESCRIPTION: Example showing how to use the browser object as a global in Nightwatch v2 without explicitly passing it as a parameter to the test function.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  demoTest: function () {\n    browser.init();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse with Options in WebDriver\nDESCRIPTION: Illustrates how to insert an action for moving the mouse relative to a specified origin. The origin can be the current mouse position, viewport, or center of a WebElement. Duration of the move can be adjusted.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-complex-user-actions.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  duration: {Number|undefined}, \n  origin: (Origin|WebElement|undefined), \n  x: {Number|undefined}, \n  y: {Number|undefined}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter as NPM Package in JavaScript\nDESCRIPTION: This snippet shows the implementation of a custom reporter as an NPM package. The index.js file exports an object with an async 'write' function that takes results and options parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  write: async function(results, options) {\n    \n    console.log('custom reporting...');\n    \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Test Doubles Plugin for Nightwatch\nDESCRIPTION: Command to install the @nightwatch/testdoubles plugin via npm\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-doubles.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nightwatch/testdoubles --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Nightwatch Project Directory\nDESCRIPTION: Command to create a new directory for your Nightwatch project and initialize it with Nightwatch. This sets up the project structure and configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-selenium-server.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir <directory-name>\ncd <directory-name>\nnpm init nightwatch@latest\n```\n\n----------------------------------------\n\nTITLE: Checking URL Content in Nightwatch.js with Chai Expects\nDESCRIPTION: This code shows how to assert that the current browser URL contains a specific substring using Chai-style assertions in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(brower.url()).to.contain();\n```\n\n----------------------------------------\n\nTITLE: Nightwatch Current Test Object Structure\nDESCRIPTION: Sample structure of the currentTest object that contains information about the running test case, including test name, module, results, and other metadata.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    // name of the current running testcase\n    name: ' ... ',\n    // name of the current running testsuite, i.e. the test file\n    module: ' ... ',\n    // name of the current running test group, if any\n    group: '', \n    // the results object is shared among all testcases in the current testsuite\n    results: {\n      time: 0,\n      assertions: [Array],\n      passed: 0,\n      errors: 0,\n      failed: 0,\n      retries: [Number],\n      skipped: 0,\n      tests: 0,\n      steps: [],\n      stackTrace: '',\n      // an object accumulating the results of each testcase\n      testcases: [Object]\n    },\n    // the current timestamp, in the format: Wed, 01 Dec 2021 08:34:00 GMT\n    timestamp: ''\n  }\n```\n\n----------------------------------------\n\nTITLE: Inserting Actions for a Device in WebDriver\nDESCRIPTION: Shows how to append actions to the end of the current sequence for a given device. If device synchronization is enabled, pauses are inserted for other devices to ensure all action sequences are the same length.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/write-complex-user-actions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.insert(device, ...actions)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge WebDriver Settings in Nightwatch\nDESCRIPTION: Configuration object for setting up Microsoft Edge WebDriver in nightwatch.json. Includes Selenium server settings, WebDriver path configuration, and desired capabilities for Edge browser testing.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/edgedriver.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"localEdge\": {\n       selenium_host: \"127.0.0.1\",\n       selenium_port: 4444,\n       selenium: {\n           start_process: true,\n           host: \"127.0.0.1\",\n           port: 4444,\n           cli_args: {\n               \"webdriver.edge.driver\": \"C:\\\\Program Files (x86)\\\\Microsoft Web Driver\\\\MicrosoftWebDriver.exe\",\n           }\n       },\n        desiredCapabilities: {\n           platform: \"Windows 10\",\n           browserName: \"MicrosoftEdge\",\n           javascriptEnabled: true\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Selectors in Nightwatch v3 JavaScript\nDESCRIPTION: Demonstrates how to chain selectors in Nightwatch v3 to find and interact with complex elements. This example finds an element by ID, then by text content, and clicks it.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/overview/whats-new-in-v3.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('#selector').findByText('text').click();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firefox Profile with Extensions in Nightwatch\nDESCRIPTION: This example demonstrates how to configure a Firefox profile with extensions in Nightwatch. It uses the selenium-webdriver/firefox Options class to add an extension and set preferences.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/commands.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst firefox = require('selenium-webdriver/firefox');\n\nconst options = new firefox.Options()\n  .addExtensions('/path/to/firebug.xpi')\n  .setPreference('extensions.firebug.showChromeErrors', true);\n\nmodule.exports = {\n  src_folders: ['tests'],\n  test_settings: {\n    default: {\n      browserName: 'firefox',\n      desiredCapabilities: options\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Element Tag Name in Nightwatch\nDESCRIPTION: Code demonstrating how to retrieve the HTML tag name of an element using Nightwatch's getTagName method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').getTagName();\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual WebDriver Session Start\nDESCRIPTION: Modifies the Nightwatch configuration to disable automatic WebDriver session start, allowing for manual control.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/using-cucumberjs.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  test_runner: {\n    type: 'cucumber',\n    options: {\n      feature_path: 'examples/cucumber-js/*/*.feature',\n      auto_start_session: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Nightwatch Documentation Repository in Shell\nDESCRIPTION: These commands clone the Nightwatch documentation repository from GitHub and navigate into the project directory.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% git clone git@github.com:nightwatchjs/nightwatch-docs.git\n% cd nightwatch-docs\n```\n\n----------------------------------------\n\nTITLE: Previewing Stories in Multiple Browsers\nDESCRIPTION: Command to preview a story in multiple browsers simultaneously using Nightwatch's parallelism.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch src/stories/Form.stories.jsx --env chrome,firefox --story=FilledForm --preview\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Selector Element Selection in Nightwatch\nDESCRIPTION: Demonstrates using element() with a CSS selector to select a submit button.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst addButtonEl = element('button[type=\"submit\"]');\n```\n\n----------------------------------------\n\nTITLE: Double Clicking on Elements in Nightwatch\nDESCRIPTION: Example of performing a double click action on a web element using Nightwatch's doubleClick method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').doubleClick();\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries in Nightwatch BDD\nDESCRIPTION: An example showing how to configure retry attempts for both individual tests and the entire test suite using the BDD interface. This helps handle flaky tests by automatically retrying failed tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/test-syntax-bdd.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('homepage test with describe', function() {\n  // how many time to retry a failed testcase inside this test suite\n   this.retries(3);\n   \n   // how many times to retry the current test suite in case of an assertion failure or error\n   this.suiteRetries(2);\n   \n   it('...', function() {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Origin in Git\nDESCRIPTION: This Git command pushes the local feature branch to the origin repository, making it ready for a pull request.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n% git push origin feature-branch\n```\n\n----------------------------------------\n\nTITLE: Performing Double-Click in Nightwatch.js\nDESCRIPTION: Performs a double left-click with the mouse. Optionally accepts a WebElement parameter to move the mouse to the center of the element before clicking.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.doubleClick([element])\n```\n\n----------------------------------------\n\nTITLE: GeckoDriver Command Line Usage\nDESCRIPTION: This snippet demonstrates the command line options available for GeckoDriver, including flags for connecting to existing Firefox instances, setting verbosity levels, and specifying binary paths and ports.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-drivers/geckodriver.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/geckodriver-0.23 -help\ngeckodriver 0.23.0\n\nUSAGE:\n    geckodriver-0.23 [FLAGS] [OPTIONS]\n\nFLAGS:\n        --connect-existing    Connect to an existing Firefox instance\n    -h, --help                Prints help information\n        --no-e10s             Start Firefox without multiprocess support (e10s) enabled\n    -V, --version             Prints version information\n    -v                        Set the level of verbosity. Pass once for debug level logging and twice for trace level logging\n\nOPTIONS:\n    -b, --binary <BINARY>        Path to the Firefox binary, if no binary capability provided\n        --log <LEVEL>            Set Gecko log level [values: fatal, error, warn, info, config, debug, trace]\n        --marionette-port <PORT> Port to use to connect to gecko (default: random free port)\n        --host <HOST>            Host ip to use for WebDriver server (default: 127.0.0.1)\n    -p, --port <PORT>            Port to use for WebDriver server (default: 4444)\n```\n\n----------------------------------------\n\nTITLE: Selenium Locator Usage in Nightwatch\nDESCRIPTION: Demonstrates using element() with Selenium's by.css() locator.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/element.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst locator = by.css('button[type=\"button\"]');\nconst addButtonEl = element(locator);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Commands Path in Nightwatch\nDESCRIPTION: JSON configuration to specify the custom commands directory path in nightwatch.json\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"custom_commands_path\" : \"nightwatch/commands\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using titleMatches Method in Nightwatch.js\nDESCRIPTION: The .titleMatches() method creates a condition that waits until the current page's title matches a specified regular expression. It takes a RegExp parameter to test the page title against.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n.titleMatches(regex)\n```\n\n----------------------------------------\n\nTITLE: Creating H3 Header with ID in Nightwatch Documentation\nDESCRIPTION: Example of how to create an H3 header with a specific ID for linking and navigation purposes in Nightwatch documentation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<h3 id=\"install-geckodriver\">GeckoDriver</h3>\n```\n\n----------------------------------------\n\nTITLE: Releasing a Key in Nightwatch.js\nDESCRIPTION: Inserts an action to release a single key. The key can be specified as a Key value, unicode code point, or a string containing a single unicode code point.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n.keyUp(key)\n```\n\n----------------------------------------\n\nTITLE: Structuring a Nightwatch Plugin in Bash\nDESCRIPTION: Demonstrates the folder structure required for a Nightwatch plugin, including the nightwatch folder with commands and assertions subdirectories.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  ├── nightwatch/ \n  |   ├── commands/\n  |   |    ├── my_new_custom_command.js\n  |   |    └── my_other_custom_command.js\n  |   └── assertions/\n  |        ├── my_new_custom_assertions.js\n  |        └── my_other_custom_command.js\n  ├── index.js\n  ├── LICENSE.md\n  ├── package.json\n  └── README.md\n```\n\n----------------------------------------\n\nTITLE: Example of Nightwatch Desired Capabilities Object\nDESCRIPTION: Sample of the desiredCapabilities object sent by Nightwatch to WebDriver. This object defines browser configuration settings used for the test session.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/index.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    browserName: 'chrome',\n    'goog:chromeOptions': {},\n    name: 'Example Test'\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mocha Test Runner in Nightwatch\nDESCRIPTION: Example configuration for using Mocha as the test runner with TDD UI. This setting allows replacing the default Nightwatch test runner with Mocha and specifying Mocha-specific options.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reference/settings.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"test_runner\" : {\"type\" : \"mocha\", \"options\" : {\"ui\" : \"tdd\"}}\n```\n\n----------------------------------------\n\nTITLE: Inserting Device Actions in Action Sequence API\nDESCRIPTION: Appends actions to the end of the current sequence for the given device. If device synchronization is enabled, pauses are inserted for other devices to ensure equal action sequence lengths.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.insert(device, ...actions)\n```\n\n----------------------------------------\n\nTITLE: Mocking Google Search Response with Nightwatch.js\nDESCRIPTION: Example test demonstrating how to intercept requests to Google search and return a mock response. Uses mockNetworkResponse() to set a custom status code, headers and body content before navigation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/network-requests/mock-network-response.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('mock network response', function() {\n  it('intercepts the request made to Google search and mocks its response', function() {\n    browser\n      .mockNetworkResponse('https://www.google.com/', {\n        status: 200,\n        headers: {\n          'Content-Type': 'UTF-8'\n        },\n        body: 'Hello there!'\n      })\n      .navigateTo('https://www.google.com/')\n      .pause(2000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Alert Dialog in Nightwatch.js\nDESCRIPTION: This comment indicates the file path for the alerts documentation in the Nightwatch.js docs.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/alerts/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (/alerts/index.html)\n```\n\n----------------------------------------\n\nTITLE: Setting Device Dimensions in Nightwatch.js Test\nDESCRIPTION: Example showing how to modify device dimensions before navigating to a website. Sets width, height, device scale factor and mobile emulation parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-web-testing/override-device-dimensions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('modify device dimensions', function() {\n  it('modifies the device dimensions', function() {\n    browser\n      .setDeviceDimensions({\n        width: 400,\n        height: 600,\n        deviceScaleFactor: 50,\n        mobile: true\n      })\n      .navigateTo('https://www.google.com')\n      .pause(1000);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Function-style Custom Command\nDESCRIPTION: Example of a deprecated function-style custom command implementation\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-custom-commands.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.command = function(file, callback) {\n  var self = this;\n  var imageData;\n  var fs = require('fs');\n\n  try {\n    var originalData = fs.readFileSync(file);\n    var base64Image = new Buffer(originalData, 'binary').toString('base64');\n    imageData = 'data:image/jpeg;base64,' + base64Image;\n  } catch (err) {\n    console.log(err);\n    throw \"Unable to open file: \" + file;\n  }\n\n  this.execute(function(data) {\n    // execute application specific code\n    App.resizePicture(data);\n    return true;\n  },\n  [imageData], // arguments array to be passed\n  function(result) {\n    if (typeof callback === \"function\") {\n      callback.call(self, result);\n    }\n  });\n\n  return this;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Nightwatch Reporter NPM Package in Bash\nDESCRIPTION: This command demonstrates how to install a custom Nightwatch reporter NPM package using npm. Replace '<nightwatch-custom-reporter>' with the actual package name.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i <nightwatch-custom-reporter>\n```\n\n----------------------------------------\n\nTITLE: Displaying Nightwatch CLI Help in Bash\nDESCRIPTION: This command shows all available run-time options for the Nightwatch test runner. It's useful for quick reference when running tests from the command line.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/command-line-options.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --help\n```\n\n----------------------------------------\n\nTITLE: Configuring automatic assertion retries in Nightwatch.js\nDESCRIPTION: Example configuration showing how to set the retryAssertionTimeout property in the globals section of Nightwatch.js config. This determines how long Nightwatch will automatically retry failed assertions before marking them as failed.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/assertions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  src_folders: ['tests'],\n\n  test_settings: {\n    default: {\n      launch_url: 'https://nightwatchjs.org',\n\n      globals: {\n        myGlobalVar: 'some value',\n        retryAssertionTimeout: 5000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Nightwatch Plugin with NPM\nDESCRIPTION: Shows the command to install a new Nightwatch plugin using NPM. This is typically done in the project folder where Nightwatch is being used.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/extending-nightwatch/adding-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i my-new-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Cucumber.js for Nightwatch Integration\nDESCRIPTION: Installs the Cucumber library as a dev dependency in a project where Nightwatch is already installed.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/third-party-runners/cucumberjs-nightwatch-integration.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @cucumber/cucumber --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Nightwatch Documentation\nDESCRIPTION: Examples of different ways to format code blocks in Nightwatch documentation, including specifying language for syntax highlighting and adding style attributes.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<pre class=\"hide-indicator\" style=\"font-size:14px\"><code class=\"language-bash\">\n[Ecosia.org Demo] Test Suite\n============================\nℹ Connected to localhost on port 4444 (2153ms).\nUsing: firefox (94.0.1) on mac 20.6.0 platform.\n\n✔ Running Demo test ecosia.org:\n\n✔ Element <body> was visible after 24 milliseconds.\n✔ Testing if the page title contains 'Ecosia' (10ms)\n✔ Testing if element <input[type=search]> is visible (51ms)\n✔ Testing if element <button[type=submit]> is visible (12ms)\n✔ Testing if element <.mainline-results> contains text 'Nightwatch.js' (197ms)\n\nOK. 5 assertions passed. (1.838s)\n</code></pre>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<pre>your code goes here</pre>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<pre data-language=\"javascript\"><code class=\"language-javascript\">\n\"desiredCapabilities\" : {\n\"browserName\" : \"chrome\",\n\"javascriptEnabled\" : true,\n\"acceptSslCerts\" : true,\n\"chromeOptions\" : {\n    \"args\" : [\"start-fullscreen\"]\n     }\n}\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining the page title and description for the Nightwatch highlights documentation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/about/highlights/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Nightwatch highlights\ndescription: Nightwatch highlights - Developer experience, beyond end to end testing, multiple types of testing\n---\n```\n\n----------------------------------------\n\nTITLE: Using Negation in Nightwatch Expect API Assertions\nDESCRIPTION: Shows how to use the .not modifier to negate assertions in the Nightwatch Expect API.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect/index.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.not.equal('The Night Watch');\n  \n  browser.expect.element('#main').text.to.not.contain('The Night Watch');\n  \n  browser.expect.element('#main').to.have.css('display').which.does.not.equal('block');\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Tags in Nightwatch.js Describe Interface\nDESCRIPTION: This code shows how to add tags when using the describe interface in Nightwatch.js. Tags are added using the 'this.tags' property within the describe block.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/running-tests/test-tags.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('testsuite', function() {\n  this.tags = ['login', 'sanity'];\n  \n  it('demo login test', function(browser) {\n     \n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Contribution Page\nDESCRIPTION: YAML frontmatter block defining the title and description for the Nightwatch contribution guidelines page\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/about/contribute/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Nightwatch contribution\ndescription: Nightwatch contribution guidelines\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch as New Project\nDESCRIPTION: Command to initialize a new Nightwatch project in a specified directory using npm.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-nightwatch-test.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init nightwatch\n```\n\n----------------------------------------\n\nTITLE: Shorthand Element Definition\nDESCRIPTION: Demonstrates the shorthand syntax for defining elements when using the default locate strategy (CSS).\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-page-objects/defining-elements.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  elements: {\n    searchBar: 'input[type=text]'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using StartWith and EndWith Assertions in Nightwatch.js\nDESCRIPTION: Demonstrates how to use startWith and endWith assertions on element text in Nightwatch.js tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.endWith('Watch');\n\n  browser.expect.element('#main').text.to.startWith('The');\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Selected in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be selected. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsSelected(element)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content in Nightwatch\nDESCRIPTION: Code demonstrating how to set the text content of an element using Nightwatch's setText method.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/writing-tests/introduction.md#2025-04-10_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.element.find('selector').setText('text');\n```\n\n----------------------------------------\n\nTITLE: HTML File Input Element Example\nDESCRIPTION: Sample HTML markup showing the file input element structure that can be targeted in Nightwatch tests for file uploads.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-nightwatch/uploading-files.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"file\" name=\"uploadFile\">\n```\n\n----------------------------------------\n\nTITLE: Using Equal, Contain, and Match Assertions in Nightwatch.js\nDESCRIPTION: Shows how to use equal, contain, and match assertions on element text and CSS properties in Nightwatch.js tests.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/expect.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.equal('The Night Watch');\n\n  browser.expect.element('#main').text.to.contain('The Night Watch');\n\n  browser.expect.element('#main').to.have.css('display').which.equals('block');\n};\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Not Selected in Nightwatch\nDESCRIPTION: Creates a condition that waits for a given element to be deselected. It takes a WebElement as a parameter to test.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.elementIsNotSelected(element)\n```\n\n----------------------------------------\n\nTITLE: Accessing Mouse Device in Nightwatch.js\nDESCRIPTION: Returns the mouse pointer device handle. This method takes no parameters and returns a Pointer object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n.mouse()\n```\n\n----------------------------------------\n\nTITLE: Configuring Nightwatch for LambdaTest in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up Nightwatch to run tests on LambdaTest. It includes configuration for the Selenium host, credentials, and browser-specific settings for Chrome and Firefox.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/quickstarts/create-and-run-a-test-with-cloud-providers.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...,\n    test_settings: {\n        ...,\n        lambdatest: {\n            selenium: {\n                host: 'hub.lambdatest.com',\n                port: 443\n            },\n            'username': '${LAMBDATEST_USERNAME}',\n            'access_key': '${LAMBDATEST_ACCESS_KEY}',\n        },\n        // More info on configuring capabilities can be found on:\n        // https://www.lambdatest.com/capabilities-generator/\n        'lambdatest.chrome': {\n            extends: 'lambdatest',\n            desiredCapabilities: {\n                browserName: 'chrome',\n                'LT:Options': {\n                    'platformName': 'Windows 10',\n                    'browserVersion': '108.0',\n                    'project': 'Project',\n                }\n            }\n        },\n        \n        'lambdatest.firefox': {\n            extends: 'lambdatest',\n            desiredCapabilities: {\n                browserName: 'firefox',\n                'LT:Options': {\n                    'platformName': 'Windows 10',\n                    'browserVersion': '108.0',\n                    'project': 'Untitled',\n                }\n            }\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Navigation Links in HTML for Nightwatch Documentation\nDESCRIPTION: This HTML snippet creates a navigation structure for the Nightwatch documentation, including links to the previous and next pages. It uses CSS classes for styling and layout.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/overview/whats-new.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"doc-pagination pt-40\">\n  <div class=\"previous\">\n    <a href=\"/guide/overview/whats-new-in-v3.html\">\n      <span>←</span>\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Back</span>\n          <span class=\"bigT\">What's new in v3?</span>\n        </div>\n    </a>\n  </div>\n  <div class=\"next\">\n    <a href=\"/guide/quickstarts/create-and-run-a-nightwatch-test.html\">\n        <div class=\"d-flex flex-column\">\n          <span class=\"smallT\">Next Page</span>\n          <span class=\"bigT\">Run your first end-to-end test</span>\n        </div>\n        <span>→</span>\n    </a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using titleIs Method in Nightwatch.js\nDESCRIPTION: The .titleIs() method creates a condition that waits until the current page's title exactly matches the specified value. It takes a string parameter representing the expected page title.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n.titleIs(substr)\n```\n\n----------------------------------------\n\nTITLE: Accessing Mouse Device in Action Sequence API\nDESCRIPTION: Returns the mouse pointer device handle for use in the action sequence.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n.mouse()\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing the Documentation Repository\nDESCRIPTION: Commands to clone the Nightwatch documentation repository and install dependencies. This is the first step to run the website locally.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nightwatchjs/nightwatch-docs.git\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using urlContains Method in Nightwatch.js\nDESCRIPTION: The .urlContains() method creates a condition that waits until the current page's URL contains a specified substring. It takes a string parameter that represents the substring to look for within the URL.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n.urlContains(substrUrl)\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Nightwatch Documentation\nDESCRIPTION: Examples of how to create unordered and ordered lists with custom styling in Nightwatch documentation for representing steps or prerequisites.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<ul style=\"margin-top:20px\">\n<li>add **`-g`** option to make `nightwatch` runner available globally in your system.</li>\n<li>add **`--save-dev`** option to save `nightwatch` as a `devDependency` in your <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\">package.json</a>.</li>\n</ul>\n\n<ol style=\"margin-top:20px\">\n<li>1. add **`-g`** option to make `nightwatch` runner available globally in your system.</li>\n<li>2. add **`--save-dev`** option to save `nightwatch` as a `devDependency` in your <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\">package.json</a>.</li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests on iOS Simulator\nDESCRIPTION: Command to execute Nightwatch tests on an iOS simulator using the app.ios.simulator environment configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/mobile-app-testing/running-tests.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch <path to tests> --env app.ios.simulator\n```\n\n----------------------------------------\n\nTITLE: Cloning the Nightwatch Core Repository\nDESCRIPTION: Commands to clone the main Nightwatch repository and install its dependencies. This is required for generating API documentation from source code.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nightwatchjs/nightwatch.git\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using urlIs Method in Nightwatch.js\nDESCRIPTION: The .urlIs() method creates a condition that waits until the current page's URL exactly matches the specified value. It takes a string parameter representing the expected page URL.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n.urlIs(url)\n```\n\n----------------------------------------\n\nTITLE: HTML Main Page Comment in Markdown\nDESCRIPTION: A markdown comment used to identify this file as the main HTML page for the Nightwatch.js documentation website.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/index.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (index.html -- Main page for the website)\n```\n\n----------------------------------------\n\nTITLE: Viewing PostDoc CLI Help\nDESCRIPTION: Command to display the available options for the PostDoc CLI tool. This shows all available commands and options for the documentation generator.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx postdoc --help\n```\n\n----------------------------------------\n\nTITLE: URL Exact Match Method - JavaScript\nDESCRIPTION: Method that creates a condition to wait until the page URL exactly matches a specified value. Takes a string parameter and returns a condition object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/ensure/index.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.urlIs(url)\n```\n\n----------------------------------------\n\nTITLE: Installing @nightwatch/react Plugin\nDESCRIPTION: Command to install the @nightwatch/react plugin from NPM.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nightwatch/react\n```\n\n----------------------------------------\n\nTITLE: Example of a Good Commit Message\nDESCRIPTION: This snippet demonstrates the structure of a well-formatted Git commit message, including a concise title, detailed body, and issue reference.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexplain commit normatively in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n\nFixes #141\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Nightwatch Plugin\nDESCRIPTION: Update the Vite configuration file to include the vite-plugin-nightwatch plugin for projects already using Vite.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/testing-react-components.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport nightwatchPlugin from 'vite-plugin-nightwatch'\n\nexport default {\n  plugins: [\n\t// ... other plugins, such as vue() or react()\n\tnightwatchPlugin()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing the Nightwatch Storybook Plugin\nDESCRIPTION: Command to install the Storybook plugin for Nightwatch via npm.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nightwatch/storybook --save-dev\n```\n\n----------------------------------------\n\nTITLE: Complete Form Component Story with Nightwatch Integration\nDESCRIPTION: A comprehensive example of a component story for a Form component with full Nightwatch integration, including setup hooks, play function for interactions, and test function for assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { userEvent, within } from '@storybook/testing-library';\nimport Form from './Form.jsx';\n\nexport default {\n  title: 'Form',\n  component: Form,\n  \n  async setup(browser) {\n    console.log('setup hook', browser.capabilities)\n  },\n  \n  async preRender(browser) {\n    console.log('preRender hook')\n  },\n  \n  async postRender(browser) {\n    console.log('postRender hook')\n  },\n  \n  async teardown(browser) {\n    console.log('teardown hook')\n  },\n}\n\nconst Template = (args) => <Form {...args} />;\n\n// Component story for an empty form\nexport const EmptyForm = Template.bind({});\n\n// Component story simulating filling in the form\nexport const FilledForm = Template.bind({});\n\nFilledForm.play = async ({ canvasElement }) => {\n  \n  // Starts querying the component from its root element\n  const canvas = within(canvasElement);\n  \n  // 👇 Simulate interactions with the component\n  await userEvent.type(canvas.getByTestId('new-todo-input'), 'outdoors hike');\n  await userEvent.click(canvas.getByRole('button'));\n};\n\nFilledForm.test = async (browser, { component }) => {\n  // 👇 Run commands and assertions in the Nightwatch context\n  await expect(component).to.be.visible;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Previewing Stories with Nightwatch\nDESCRIPTION: Command to run a story in preview mode, which opens the Storybook renderer and pauses execution to allow for development.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch src/stories/Form.stories.jsx --env chrome --story=FilledForm --preview\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Rules for Button Component in JavaScript\nDESCRIPTION: This snippet shows how to define accessibility rules for a Button component in Storybook. It includes configuration for various accessibility tests and examples of different button variants.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from './Button';\n\nexport default {\n  title: \"Example/Button\",\n  component: Button,\n  argTypes: {\n    backgroundColor: { control: \"color\" },\n  },\n  \n  parameters: {\n    a11y: {\n      // Optional selector to inspect\n      element: '#root',\n      \n      // Show the individual axe-rules as Nightwatch assertions (can be verbose if there are many violations)\n      runAssertions: false,\n      \n      // Show the complete Acccessibilty test report (by default, only rule violations will be shown)\n      verbose: false,\n      config: {\n        rules: [\n          {\n            // The autocomplete rule will not run based on the CSS selector provided\n            id: 'autocomplete-valid',\n            selector: '*:not([autocomplete=\"nope\"])',\n          },\n          {\n            // Setting the enabled option to false will disable checks for this particular rule on all stories.\n            id: 'image-alt',\n            enabled: false,\n          },\n          {\n            id: 'input-button-name',\n            enabled: true\n          },\n          {\n            id: 'color-contrast',\n            enabled: true\n          }\n        ],\n      },\n      options: {},\n      manual: true\n    }\n  }\n};\n\nconst Template = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  primary: true,\n  label: 'Button',\n};\n\nexport const Secondary = Template.bind({});\nSecondary.args = {\n  label: 'Button',\n};\n\nexport const Large = Template.bind({});\nLarge.args = {\n  size: 'large',\n  label: 'Button',\n};\n\nexport const Small = Template.bind({});\nSmall.args = {\n  size: 'small',\n  label: 'Button',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Accessibility Reporting in JavaScript\nDESCRIPTION: This code snippet shows how to enable verbose accessibility reporting in Storybook by setting the 'verbose' parameter to true in the story configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/component-testing/storybook-component-testing.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button } from './Button';\n\nexport default {\n  parameters: {\n    a11y: {\n      // Show the complete Accessibility test report (by default, only rule violations will be shown)\n      verbose: false,\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Nightwatch Tests on Jenkins\nDESCRIPTION: These commands install the necessary dependencies and run the Nightwatch tests on Jenkins. They are executed as part of the Jenkins build process.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-jenkins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting BrowserStack Environment Variables in Jenkins\nDESCRIPTION: These environment variables are required to run Nightwatch tests on BrowserStack from Jenkins. They should be set in the Jenkins configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-jenkins.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBROWSERSTACK_USERNAME\nBROWERSTACK_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines YAML for Nightwatch Tests\nDESCRIPTION: This YAML configuration sets up a pipeline to run Nightwatch tests on Azure Pipelines. It installs Node.js, runs npm install, sets up Xvfb for headless browser testing, and executes the tests using npm test command.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-azure-pipelines.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Node.js\n# Build a general Node.js project with npm.\n# Add steps that analyze code, save build artifacts, deploy, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript\n\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '10.x'\n  displayName: 'Install Node.js'\n\n- script: |\n    npm install\n  displayName: 'npm install'\n\n- script: |\n    sudo apt-get install xvfb\n\n- script: xvfb-run --auto-servernum npm test -- --env chrome\n  displayName: 'Run tests'\n```\n\n----------------------------------------\n\nTITLE: Installing npx and Running Nightwatch Tests in Headless Mode\nDESCRIPTION: This bash script installs npx and runs Nightwatch tests in headless mode. It's used as an alternative to the npm task type in Bamboo CI for more flexibility in test execution.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/ci-integrations/run-nightwatch-on-bamboo.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install npx \nnpx nightwatch --headless\n```\n\n----------------------------------------\n\nTITLE: Configuring Ava for Nightwatch Integration in package.json\nDESCRIPTION: This code snippet demonstrates how to configure Ava in the package.json file to work with Nightwatch. It sets up the test script and specifies the Nightwatch plugin for Ava.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/using-third-party-runners/using-ava.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ava\": {\n  \"require\": [\n    \"@nightwatch/ava-plugin\"\n  ]\n},\n\"scripts\": {\n  \"test\": \"ava\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Nightwatch for Chrome Extension Testing\nDESCRIPTION: Use the Nightwatch init command to set up a new project for testing Chrome Extensions. This creates the necessary configuration files and directory structure.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/browser-extension-testing/chrome-extension.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/project/directory\nnpm init nightwatch\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project Directory for Nightwatch Tests\nDESCRIPTION: This command creates a new directory for a Nightwatch project and changes into it. It's the first step in setting up a new Nightwatch testing environment.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ./test-project && cd ./test-project\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with JUnit XML and HTML Reporters\nDESCRIPTION: This command runs the DuckDuckGo example test using Nightwatch with Chrome environment, generating both JUnit XML and HTML reports. It uses multiple '--reporter' flags to specify both reporters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-junit-reporter.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome --reporter=junit --reporter=html\n```\n\n----------------------------------------\n\nTITLE: Example Nightwatch Test for DuckDuckGo Search\nDESCRIPTION: This code snippet shows an example Nightwatch test that performs a search on DuckDuckGo for 'Nightwatch.js' and verifies the results. It demonstrates basic Nightwatch commands and assertions.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-html-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: DuckDuckGo Search Test Example in Nightwatch\nDESCRIPTION: Sample Nightwatch test that navigates to DuckDuckGo, searches for 'Nightwatch.js', and validates the search results. This test will be used to demonstrate JSON report generation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-json-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Mochawesome Reporter\nDESCRIPTION: Command to run Nightwatch tests with the Mochawesome reporter by passing the --reporter argument to the Nightwatch CLI.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-mochawesome-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/ --reporter mochawesome\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch Slack Reporter via npm\nDESCRIPTION: Command to install the nightwatch-slack-reporter package as a development dependency in your Nightwatch project.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-slack-reporter.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i nightwatch-slack-reporter --save-dev\n```\n\n----------------------------------------\n\nTITLE: Example Nightwatch Test for DuckDuckGo Search\nDESCRIPTION: Sample Nightwatch test that searches for 'Nightwatch.js' on DuckDuckGo and verifies the results. This test will report results to Slack when run with the configured reporter.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-slack-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Tests with Chrome Browser\nDESCRIPTION: Command to execute the DuckDuckGo example test using Nightwatch with Chrome browser. The Slack reporter will automatically send results to the configured Slack channel.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-slack-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --env chrome\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch Test with Custom Reporter\nDESCRIPTION: Command to run a Nightwatch test using a custom reporter configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nightwatch examples/tests/duckDuckGo.js --reporter ./nightwatch-reporter.js\n```\n\n----------------------------------------\n\nTITLE: Composing TeamCity Reporter with HTML Reporter\nDESCRIPTION: Example of how to compose the TeamCity reporter with another reporter (nightwatch-html-reporter) in a custom configuration.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-teamcity-reporter.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst HtmlReporter = require(\"nightwatch-html-reporter\");\n\nconst teamCityFormatter = require(\"nightwatch-teamcity\").format;\n\nconst reporter = new HtmlReporter({ \n    reportsDirectory: \"./reports\",\n});\n\nmodule.exports = {\n    write: function(results, options, done) {\n        teamCityFormatter(results);\n        reporter.fn(results, done);\n        done();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Example Nightwatch Test with Allure Reporting\nDESCRIPTION: Sample test script demonstrating Nightwatch test that will generate Allure reports. Tests DuckDuckGo search functionality.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/use-nightwatch-allure-reporter.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('duckduckgo example', function() {\n  it('Search Nightwatch.js and check results', function(browser) {\n    browser\n      .navigateTo('https://duckduckgo.com')\n      .waitForElementVisible('#search_form_input_homepage')\n      .sendKeys('#search_form_input_homepage', ['Nightwatch.js'])\n      .click('#search_button_homepage')\n      .assert.visible('.results--main')\n      .assert.textContains('.results--main', 'Nightwatch.js');\n  }); \n});\n```\n\n----------------------------------------\n\nTITLE: Running Nightwatch with Multiple Reporters in Bash\nDESCRIPTION: This command shows how to run Nightwatch with multiple reporters, including a custom reporter and the built-in HTML reporter. It's available since Nightwatch version 2.2+.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/reporters/create-custom-reporter.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnightwatch --reporter=/path/to/custom_reporter.js --reporter=html\n```\n\n----------------------------------------\n\nTITLE: Pausing Test Execution Indefinitely in Nightwatch.js\nDESCRIPTION: This snippet shows how to pause test execution indefinitely until manually resumed, using the pause() command without arguments in Nightwatch.js.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/debugging-tests/using-pause.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('demos pause command', function(browser) {\n  // pause indefinitely, until resumed\n  browser.pause();\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating debug() command usage in Nightwatch.js\nDESCRIPTION: This snippet shows how to use the debug() command in a Nightwatch.js test. It demonstrates basic usage, disabling auto-complete, and setting a custom timeout.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/debugging-tests/using-debug.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('demos debug command', async function(browser) {\n  await browser.debug();\n\n  // with no auto-complete\n  await browser.debug({preview: false});\n\n  // with a timeout of 6000 ms (time for which the interface\n  // would wait for a result, default is 5500ms).\n  await browser.debug({timeout: 6000})\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Browser in Nightwatch\nDESCRIPTION: Example of a Chrome browser configuration in Nightwatch showing how to set up desired capabilities including JavaScript enablement, SSL certificate acceptance, and full-screen mode.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"desiredCapabilities\" : {\n  \"browserName\" : \"chrome\",\n  \"javascriptEnabled\" : true,\n  \"acceptSslCerts\" : true,\n  \"chromeOptions\" : {\n    \"args\" : [\"start-fullscreen\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nightwatch Test Output Example\nDESCRIPTION: Example of Nightwatch test output showing a successful test run against Ecosia.org with multiple assertions for visibility and content checking.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n[Ecosia.org Demo] Test Suite\n============================\nℹ Connected to localhost on port 4444 (2153ms).\n  Using: firefox (94.0.1) on mac 20.6.0 platform.\n\n✔ Running Demo test ecosia.org:\n\n✔ Element <body> was visible after 24 milliseconds.\n✔ Testing if the page title contains 'Ecosia' (10ms)\n✔ Testing if element <input[type=search]> is visible (51ms)\n✔ Testing if element <button[type=submit]> is visible (12ms)\n✔ Testing if element <.mainline-results> contains text 'Nightwatch.js' (197ms)\n\nOK. 5 assertions passed. (1.838s)\n```\n\n----------------------------------------\n\nTITLE: Installing Nightwatch via npm\nDESCRIPTION: Simple command showing how to install Nightwatch.js via npm package manager.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/index.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nightwatch\n```\n\n----------------------------------------\n\nTITLE: Formatting Code and File Paths in Markdown\nDESCRIPTION: Demonstrates how to format code, file paths, and input values using backticks in Markdown. This ensures proper visual distinction of technical elements within the documentation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/styleguide.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`code`\n```\n\n----------------------------------------\n\nTITLE: Formatting File Names in Markdown\nDESCRIPTION: Illustrates the correct way to format file names within Markdown text. This ensures that file names are easily distinguishable from regular text.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/styleguide.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`abc.js`\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: This command creates a new feature branch in Git for making contributions to the Nightwatch documentation.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/contributing/codeofconduct.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n% git checkout -b feature-branch\n```\n\n----------------------------------------\n\nTITLE: SafariDriver Binary Path Example\nDESCRIPTION: Shows the default installation path for the SafariDriver binary on MacOS systems\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/overview/what-is-nightwatch.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/bin/safaridriver\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for WebDriver BiDi\nDESCRIPTION: Simple markdown header declaring the WebDriver BiDi section\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/guide/webdriver-bidi/overview.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Webdriver BiDi\n```\n\n----------------------------------------\n\nTITLE: Selecting Dropdown Options with Nightwatch.js Click Command\nDESCRIPTION: This test demonstrates how to use the click command to interact with dropdown elements. It navigates to the W3.org website, opens a dropdown list, selects a specific option, and submits the form.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/method/click.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  before : function(browser) {\n    // see https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n  \n  'click option from drop down list' : function (browser) {\n    \n    browser\n      .url('https://www.w3.org/')\n      .waitForElementVisible('#region_form')\n      .click('#region_form select')\n      .click('#region_form select option[value=\"all\"]')\n      .click('input[type=submit]', function(result) {\n        this.assert.strictEqual(result.status, 0);\n      });\n  },\n  \n  after : function(browser) {\n    browser.end();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nightwatch Client - JavaScript\nDESCRIPTION: Creates a new Nightwatch client instance with customizable options including browser selection, timeout settings, capabilities, and other configurations. This is the primary method to initialize Nightwatch for programmatic usage.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/programmatic/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Nightwatch = require('nightwatch');\n\nconst client = Nightwatch.createClient({\n  headless: true,\n  output: true,\n  silent: true, // set to false to enable verbose logging\n  browserName: 'firefox', // can be either: firefox, chrome, safari, or edge\n\n  // set the global timeout to be used with waitFor commands and when retrying assertions/expects\n  timeout: 10000,\n\n  // set the current test environment from the nightwatch config\n  env: null,\n\n  // any additional capabilities needed\n  desiredCapabilities: {\n\n  },\n\n  // can define/overwrite test globals here; \n  // when using a third-party test runner only the global hooks onBrowserNavigate/onBrowserQuit are supported\n  globals: {},\n\n  // when the test runner used supports running tests in parallel; \n  // set to true if you need the webdriver port to be randomly generated\n  parallel: false, \n\n  // All other Nightwatch config settings can be overwritten here, such as:\n  disable_colors: false\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page Object Module in Nightwatch.js\nDESCRIPTION: Illustrates a complete page object module definition including URL, elements, commands, props, and sections. This example showcases various ways to define selectors, custom commands, and nested sections.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/pageobject/index.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // can be string or function\n  url: function () {\n    return this.api.launchUrl;\n  },\n  elements: {\n    // shorthand, specifies selector\n    mySubmitButton: 'input[type=submit]'\n    \n    // full\n    myTextInput: {\n      selector: 'input[type=text]',\n      locateStrategy: 'css selector'\n    }\n  },\n  commands: [\n    {\n      myCustomPause: function () {\n        this.api.pause(this.props.myPauseTime);\n      }\n    }\n  ],\n  // object version (best considered immutable)\n  props: {\n    myPauseTime: 1000\n  },\n  \n  sections: {\n    myFooterSection: {\n      selector: '#my-footer',\n      locateStrategy: 'css selector',\n      elements: {\n        myLogo: {\n          selector: '.my-logo',\n          locateStrategy: 'css selector'\n        }\n      },\n      commands: [\n        {\n          myMoveToLogo: function () {\n            this.moveToElement('@myLogo', this.props.myLogoX, this.props.myLogoY);\n          }\n        }\n      ],\n      // function version (recommended)\n      props: function () {\n        return {\n          myLogoX: 10,\n          myLogoY: 10\n        };\n      },\n      sections: {\n        // additional, nested sections\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Action Sequence State in JavaScript\nDESCRIPTION: Releases all keys, pointers, and clears internal state of the action sequence.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.clear()\n```\n\n----------------------------------------\n\nTITLE: Performing Double-Click in Action Sequence API\nDESCRIPTION: Executes a double left-click with the mouse. If an element is specified, the mouse will first move to the center of that element before double-clicking.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.doubleClick([element])\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Device in Action Sequence API\nDESCRIPTION: Returns the keyboard device handle for use in the action sequence.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n.keyboard()\n```\n\n----------------------------------------\n\nTITLE: Clearing Device State in Nightwatch.js\nDESCRIPTION: Releases all keys, pointers, and clears internal state. This method takes no parameters.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.clear()\n```\n\n----------------------------------------\n\nTITLE: Pressing a Key in Nightwatch.js\nDESCRIPTION: Inserts an action to press a single key. The key can be specified as a Key value, unicode code point, or a string containing a single unicode code point.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n.keyDown(key)\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Device in Nightwatch.js\nDESCRIPTION: Returns the keyboard device handle. This method takes no parameters and returns a Keyboard object.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n.keyboard()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating User Actions API in Nightwatch.js\nDESCRIPTION: This code snippet shows how to use the Nightwatch.js User Actions API to perform a series of keyboard and mouse actions. It includes keyDown, move, press, release, and keyUp operations.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('user actions api', function() {\n  \n  it('demo test', function() {\n    browser\n      .perform(function() {\n        const actions = this.actions({async: true});\n        \n        return actions\n          .keyDown(Keys.SHIFT)\n          .move({origin: el})\n          .press()\n          .release()\n          .keyUp(Keys.SHIFT);\n      });\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Actions Example in Nightwatch.js\nDESCRIPTION: This example demonstrates various user actions including navigation, element selection, drag and drop, context click, and double click. It uses the perform() method to chain multiple actions together.\nSOURCE: https://github.com/nightwatchjs/nightwatch-docs/blob/versions/3.0/docs/api/useractions/index.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('example with user actions api', function () {\n  \n  before(browser => browser.navigateTo('https://nightwatchjs.org'));\n  \n  it('demo test', async function (browser) {\n    // retrieve the element; the actions api requires Selenium WebElement objects,\n    //  which can be retrieved using the global element() utility\n    const btnElement = await element('a.btn-github').findElement();\n    \n    await browser.perform(function() {\n      // initiate the actions chain\n      const actions = this.actions({async: true});\n      \n      return actions\n        .dragAndDrop(btnElement, {x: 100, y: 100})\n        .pause(500)\n        .contextClick(btnElement)\n        .pause(500)\n        .doubleClick(btnElement)\n        .pause(500)\n    });\n  });\n});\n```"
  }
]