[
  {
    "owner": "shikijs",
    "repo": "shiki",
    "content": "TITLE: Configuring VitePress for Twoslash in config.ts\nDESCRIPTION: Configuration for enabling TypeScript Twoslash in VitePress by adding the transformer to the markdown configuration and explicitly loading languages for type highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { transformerTwoslash } from '@shikijs/vitepress-twoslash' // [!code hl]\nimport { defineConfig } from 'vitepress'\n\nexport default defineConfig({\n  markdown: {\n    codeTransformers: [\n      transformerTwoslash() // [!code hl]\n    ],\n    // [!code hl:2]\n    // Explicitly load these languages for types hightlighting\n    languages: ['js', 'jsx', 'ts', 'tsx']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Highlighter Instance\nDESCRIPTION: Example of creating a reusable highlighter instance with specific theme and language.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst highlighter = await createHighlighter({\n  themes: ['nord'],\n  langs: ['javascript'],\n})\n\nconst code = highlighter.codeToHtml('const a = 1', {\n  lang: 'javascript',\n  theme: 'nord'\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Code to HAST\nDESCRIPTION: Example of using codeToHast to convert CSS code to HAST (Hypertext Abstract Syntax Tree) format.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHast } from 'shiki'\n\nconst hast = await codeToHast('.text-red { color: red; }', {\n  lang: 'css',\n  theme: 'catppuccin-mocha'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Generation with Shiki\nDESCRIPTION: Example of using the codeToHtml shorthand function to generate highlighted HTML from JavaScript code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = 'const a = 1' // input code\nconst html = await codeToHtml(code, {\n  lang: 'javascript',\n  theme: 'vitesse-dark'\n})\n\nconsole.log(html) // highlighted html string\n```\n\n----------------------------------------\n\nTITLE: Basic Shiki Code Highlighting with TypeScript\nDESCRIPTION: Demonstrates the basic usage of Shiki's codeToHtml shorthand function to convert JavaScript code into highlighted HTML. The function handles theme and language loading asynchronously with automatic caching.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/shorthands.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = 'const a = 1' // input code\nconst html = await codeToHtml(code, {\n  lang: 'javascript',\n  theme: 'vitesse-dark'\n})\n\nconsole.log(html) // highlighted html string\n```\n\n----------------------------------------\n\nTITLE: Implementing Shiki in Next.js React Server Component\nDESCRIPTION: This snippet demonstrates how to use Shiki's codeToHtml function in a Next.js React Server Component. It creates a CodeBlock component that renders syntax-highlighted code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { BundledLanguage } from 'shiki'\nimport { codeToHtml } from 'shiki'\n\nexport default function Page() {\n  return (\n    <main>\n      <CodeBlock lang=\"ts\">\n        {[\n          'console.log(\"Hello\")',\n          'console.log(\"World\")',\n        ].join('\\n')}\n      </CodeBlock>\n    </main>\n  )\n}\n\ninterface Props {\n  children: string\n  lang: BundledLanguage\n}\n\nasync function CodeBlock(props: Props) {\n  const out = await codeToHtml(props.children, {\n    lang: props.lang,\n    theme: 'github-dark'\n  })\n\n  return <div dangerouslySetInnerHTML={{ __html: out }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Highlighter Instance in Typescript with Shiki\nDESCRIPTION: Demonstrates the singleton pattern for reusing a Shiki highlighter instance across multiple highlight operations to improve performance. This approach creates the expensive highlighter instance only once and exports a function to use it.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/best-performance.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighterCore } from 'shiki/core'\n\nconst highlighterPromise = createHighlighterCore({ /* ... */ })\n\nexport async function highlightCode(code: string, lang: string) {\n  const highlighter = await highlighterPromise\n  return highlighter.codeToHtml(code, lang)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @shikijs/transformers with Shiki\nDESCRIPTION: Demonstrates how to import and use transformers from @shikijs/transformers with Shiki's codeToHtml function, specifically showing the transformerNotationDiff transformer.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code highlight:5]\nimport {\n  transformerNotationDiff,\n  // ...\n} from '@shikijs/transformers'\nimport {\n  codeToHtml,\n} from 'shiki'\n\nconst code = `console.log('hello')`\nconst html = await codeToHtml(code, {\n  lang: 'ts',\n  theme: 'nord',\n  transformers: [\n    transformerNotationDiff(), // [!code highlight]\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Light/Dark Dual Themes in Shiki\nDESCRIPTION: Demonstrates how to configure Shiki to generate HTML with both light and dark theme colors using CSS variables. This provides the foundation for theme switching functionality.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = await codeToHtml('console.log(\"hello\")', {\n  lang: 'javascript',\n  themes: { // [!code hl:4]\n    light: 'min-light',\n    dark: 'nord',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Variables Theme in Shiki\nDESCRIPTION: Demonstrates how to create and register a CSS variables theme using the createCssVariablesTheme helper function. This approach allows styling code blocks using CSS variables defined in your application's stylesheets.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/theme-colors.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nimport { createCssVariablesTheme } from 'shiki/core'\n\n// Create a custom CSS variables theme, the following are the default values\nconst myTheme = createCssVariablesTheme({\n  name: 'css-variables',\n  variablePrefix: '--shiki-',\n  variableDefaults: {},\n  fontStyle: true\n})\n\nconst highlighter = await createHighlighter({\n  langs: ['javascript'],\n  themes: [myTheme] // register the theme\n})\n\nconst html = highlighter.codeToHtml('const foo = \"bar\"', {\n  lang: 'javascript',\n  theme: 'css-variables' // use the theme\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Code to HAST using Shiki Highlighter\nDESCRIPTION: Example showing how to create a Shiki highlighter and convert code to HAST format. The highlighter is configured with Nord and Min-light themes, supporting JavaScript language.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/api.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst highlighter = await createHighlighter({\n  themes: ['nord', 'min-light'],\n  langs: ['javascript'],\n})\n// ---cut---\nconst root = highlighter.codeToHast(\n  'const a = 1',\n  { lang: 'javascript', theme: 'nord' }\n)\n\nconsole.log(root)\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki with Custom Theme\nDESCRIPTION: Shows how to create a Shiki highlighter instance with a custom theme defined inline. The theme object follows TextMate theme format with scope-based styling rules.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-theme.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst myTheme = {\n  name: 'my-theme',\n  settings: [\n    {\n      scope: ['comment'],\n      settings: {\n        foreground: '#888'\n      }\n    },\n    // ...\n  ]\n}\n\nconst highlighter = await createHighlighter({\n  themes: [myTheme],\n  langs: [],\n})\n\nconst code = `console.log('hello')`\nconst html = highlighter.codeToHtml(code, {\n  lang: 'javascript',\n  theme: 'my-theme'\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Output with Transformers in TypeScript\nDESCRIPTION: This snippet demonstrates how to use custom transformer functions to modify the HTML output generated by Shiki. It shows how to add classes, data attributes, and highlight specific lines.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/transformers.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = await codeToHtml('foo\\bar', {\n  lang: 'js',\n  theme: 'vitesse-light',\n  transformers: [\n    {\n      code(node) {\n        this.addClassToHast(node, 'language-js')\n      },\n      line(node, line) {\n        node.properties['data-line'] = line\n        if ([1, 3, 4].includes(line))\n          this.addClassToHast(node, 'highlight')\n      },\n      span(node, line, col) {\n        node.properties['data-token'] = `token:${line}:${col}`\n      },\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of rehypeShiki in unified Pipeline\nDESCRIPTION: Example of using rehypeShiki plugin in a unified processor pipeline to highlight code in Markdown files. Uses the default highlighter with light and dark themes configured.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors: true\nimport rehypeShiki from '@shikijs/rehype'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport { unified } from 'unified'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeShiki, {\n    // or `theme` for a single theme\n    themes: {\n      light: 'vitesse-light',\n      dark: 'vitesse-dark',\n    }\n  })\n  .use(rehypeStringify)\n  .process(await fs.readFile('./input.md'))\n```\n\n----------------------------------------\n\nTITLE: Using Shiki Shorthands for On-Demand Loading in Typescript\nDESCRIPTION: Shows how to use Shiki's shorthand functions to lazily load only the necessary themes and languages when needed, reducing startup time for asynchronous highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/best-performance.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\n// Only `javascript` and `nord` will be loaded when calling `codeToHtml`\nconst html = await codeToHtml('const a = 1', {\n  lang: 'javascript',\n  theme: 'nord'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Themes without Default Colors\nDESCRIPTION: Shows how to configure Shiki themes without default colors for full CSS control. This approach avoids the need for !important by only setting CSS variables without direct styling.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = await codeToHtml('console.log(\"hello\")', {\n  lang: 'javascript',\n  themes: {\n    light: 'vitesse-light',\n    dark: 'vitesse-dark',\n  },\n  defaultColor: false, // <--\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Tokens with Shiki\nDESCRIPTION: Example of using codeToTokens to get tokenized HTML code with the min-dark theme.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToTokens } from 'shiki'\n\nconst { tokens } = await codeToTokens('<div class=\"foo\">bar</div>', {\n  lang: 'html',\n  theme: 'min-dark'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Fine-grained Shiki Bundle with Specific Themes and Languages\nDESCRIPTION: Demonstrates how to compose a custom Shiki bundle by directly importing only the required theme and language modules. This approach provides maximum control over bundle size by including only what's needed.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/bundles.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\n// directly import the theme and language modules, only the ones you imported will be bundled.\nimport nord from '@shikijs/themes/nord'\n\n// `shiki/core` entry does not include any themes or languages or the wasm binary.\nimport { createHighlighterCore } from 'shiki/core'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nconst highlighter = await createHighlighterCore({\n  themes: [\n    // instead of strings, you need to pass the imported module\n    nord,\n    // or a dynamic import if you want to do chunk splitting\n    import('@shikijs/themes/material-theme-ocean')\n  ],\n  langs: [\n    import('@shikijs/langs/javascript'),\n    // shiki will try to interop the module with the default export\n    () => import('@shikijs/langs/css'),\n    // or a getter that returns custom grammar\n    async () => JSON.parse(await fs.readFile('my-grammar.json', 'utf-8'))\n  ],\n  // `shiki/wasm` contains the wasm binary inlined as base64 string.\n  engine: createOnigurumaEngine(import('shiki/wasm'))\n})\n\n// optionally, load themes and languages after creation\nawait highlighter.loadTheme(import('@shikijs/themes/vitesse-light'))\n\nconst code = highlighter.codeToHtml('const a = 1', {\n  lang: 'javascript',\n  theme: 'material-theme-ocean'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Shiki with Asynchronous Markdown-It Processing\nDESCRIPTION: Configuration for handling asynchronous syntax highlighting with markdown-it using the markdown-it-async package and Shiki's asynchronous integration.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/markdown-it.md#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { fromAsyncCodeToHtml } from '@shikijs/markdown-it/async'\nimport MarkdownItAsync from 'markdown-it-async'\nimport { codeToHtml } from 'shiki' // Or your custom shorthand bundle\n\n// Initialize MarkdownIt instance with markdown-it-async\nconst md = MarkdownItAsync()\n\nmd.use(\n  fromAsyncCodeToHtml(\n    // Pass the codeToHtml function\n    codeToHtml,\n    {\n      themes: {\n        light: 'vitesse-light',\n        dark: 'vitesse-dark',\n      }\n    }\n  )\n)\n\n// Use `md.renderAsync` instead of `md.render`\nconst html = await md.renderAsync('# Title\\n```ts\\nconsole.log(\"Hello, World!\")\\n```')\n```\n\n----------------------------------------\n\nTITLE: Adding Line-Character Based Decorations in Shiki\nDESCRIPTION: This snippet demonstrates how to add custom class decorations to specific ranges of code using line and character positions. The example applies a 'highlighted-word' class to 'console.log' in the code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/decorations.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = `\nconst x = 10\nconsole.log(x)\n`.trim()\n\nconst html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  decorations: [ // [!code hl:8]\n    {\n      // line and character are 0-indexed\n      start: { line: 1, character: 0 },\n      end: { line: 1, character: 11 },\n      properties: { class: 'highlighted-word' }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shiki Shorthands with Fine-Grained Bundles\nDESCRIPTION: Shows how to create custom shorthand functions with fine-grained bundles for optimized loading. Includes configuration for specific language and theme imports, and creates a custom highlighter with JavaScript regex engine.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/shorthands.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createdBundledHighlighter, createSingletonShorthands } from 'shiki/core'\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript'\n\nconst BundledLanguage = {\n  typescript: () => import('@shikijs/langs/typescript'),\n  javascript: () => import('@shikijs/langs/javascript'),\n  vue: () => import('@shikijs/langs/vue'),\n}\n\nconst BundledTheme = {\n  'light-plus': () => import('@shikijs/themes/light-plus'),\n  'dark-plus': () => import('@shikijs/themes/dark-plus'),\n}\n\n// This creates your custom 'createHighlighter' function with fine-grained bundles\nexport const createHighlighter = /* @__PURE__ */ createdBundledHighlighter<\n  BundledLanguage,\n  BundledTheme\n>({\n  langs: bundledLanguages,\n  themes: bundledThemes,\n  engine: () => createJavaScriptRegexEngine(),\n})\n\n// This creates the shorthands for you\nexport const {\n  codeToHtml,\n  codeToHast,\n  codeToTokensBase,\n  codeToTokens,\n  codeToTokensWithThemes,\n  getSingletonHighlighter,\n  getLastGrammarState,\n} = /* @__PURE__ */ createSingletonShorthands(\n  createHighlighter,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Markdown Meta in Transformers\nDESCRIPTION: This snippet shows how to access markdown meta strings in supported integrations using transformers. It demonstrates the format of the meta string in markdown and how to access it in the transformer options.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/transformers.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- [!code word:meta=here] -->\n```html foo=bar baz-qux=\"qu ux\"\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptions.meta\n// => { __raw: 'foo=bar baz-qux=\"qu ux\"' }\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Languages During Highlighter Creation in TypeScript\nDESCRIPTION: This code demonstrates how to load a custom language by passing a TextMate grammar object into the 'langs' array when creating a Shiki highlighter. The example reads a grammar file and passes it to the highlighter configuration.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-lang.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createHighlighter } from 'shiki'\n\nconst myLang = JSON.parse(fs.readFileSync('my-lang.json', 'utf8'))\n\nconst highlighter = await createHighlighter({\n  langs: [myLang],\n  themes: ['vitesse-light']\n})\n\nconst html = highlighter.codeToHtml(code, {\n  lang: 'my-lang',\n  theme: 'vitesse-light'\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme and Language Loading\nDESCRIPTION: Example of loading additional themes and languages after creating the highlighter instance.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nconst highlighter = await createHighlighter({ themes: [], langs: [] })\n\nawait highlighter.loadTheme('vitesse-light')\nawait highlighter.loadLanguage('css')\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Definition for Shiki Theme\nDESCRIPTION: Example CSS showing how to define the CSS variables needed for the CSS variables theme in Shiki. Includes variables for general colors, token-specific colors, and ANSI colors for terminal output.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/theme-colors.md#2025-04-15_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --shiki-foreground: #eeeeee;\n  --shiki-background: #333333;\n  --shiki-token-constant: #660000;\n  --shiki-token-string: #770000;\n  --shiki-token-comment: #880000;\n  --shiki-token-keyword: #990000;\n  --shiki-token-parameter: #aa0000;\n  --shiki-token-function: #bb0000;\n  --shiki-token-string-expression: #cc0000;\n  --shiki-token-punctuation: #dd0000;\n  --shiki-token-link: #ee0000;\n\n  /* Only required if using lang: 'ansi' */\n  --shiki-ansi-black: #000000;\n  --shiki-ansi-black-dim: #00000080;\n  --shiki-ansi-red: #bb0000;\n  --shiki-ansi-red-dim: #bb000080;\n  --shiki-ansi-green: #00bb00;\n  --shiki-ansi-green-dim: #00bb0080;\n  --shiki-ansi-yellow: #bbbb00;\n  --shiki-ansi-yellow-dim: #bbbb0080;\n  --shiki-ansi-blue: #0000bb;\n  --shiki-ansi-blue-dim: #0000bb80;\n  --shiki-ansi-magenta: #ff00ff;\n  --shiki-ansi-magenta-dim: #ff00ff80;\n  --shiki-ansi-cyan: #00bbbb;\n  --shiki-ansi-cyan-dim: #00bbbb80;\n  --shiki-ansi-white: #eeeeee;\n  --shiki-ansi-white-dim: #eeeeee80;\n  --shiki-ansi-bright-black: #555555;\n  --shiki-ansi-bright-black-dim: #55555580;\n  --shiki-ansi-bright-red: #ff5555;\n  --shiki-ansi-bright-red-dim: #ff555580;\n  --shiki-ansi-bright-green: #00ff00;\n  --shiki-ansi-bright-green-dim: #00ff0080;\n  --shiki-ansi-bright-yellow: #ffff55;\n  --shiki-ansi-bright-yellow-dim: #ffff5580;\n  --shiki-ansi-bright-blue: #5555ff;\n  --shiki-ansi-bright-blue-dim: #5555ff80;\n  --shiki-ansi-bright-magenta: #ff55ff;\n  --shiki-ansi-bright-magenta-dim: #ff55ff80;\n  --shiki-ansi-bright-cyan: #55ffff;\n  --shiki-ansi-bright-cyan-dim: #55ffff80;\n  --shiki-ansi-bright-white: #ffffff;\n  --shiki-ansi-bright-white-dim: #ffffff80;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Themes in Shiki\nDESCRIPTION: Shows how to configure Shiki to support more than two themes. This example sets up light, dark, and dim themes with default color configuration and custom CSS variable prefix.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst code = await codeToHtml('console.log(\"hello\")', {\n  lang: 'javascript',\n  themes: {\n    light: 'github-light',\n    dark: 'github-dark',\n    dim: 'github-dimmed',\n    // any number of themes\n  },\n\n  // optional customizations\n  defaultColor: 'light',\n  cssVariablePrefix: '--shiki-'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Highlighter with JavaScript RegExp Engine in Shiki\nDESCRIPTION: This code demonstrates how to initialize Shiki in a fully synchronous manner using the createHighlighterCoreSync function with the JavaScript RegExp engine. It requires providing themes and languages as plain objects and explicitly specifying the engine.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/sync-usage.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport js from '@shikijs/langs/javascript'\nimport nord from '@shikijs/themes/nord'\nimport { createHighlighterCoreSync } from 'shiki/core'\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript'\n\nconst shiki = createHighlighterCoreSync({\n  themes: [nord],\n  langs: [js],\n  engine: createJavaScriptRegexEngine()\n})\n\nconst html = shiki.highlight('console.log(1)', { lang: 'js', theme: 'nord' })\n```\n\n----------------------------------------\n\nTITLE: Custom Component Rendering with Shiki in Next.js\nDESCRIPTION: This code snippet shows how to use Shiki's codeToHast function along with hast-util-to-jsx-runtime to render custom pre and code components in a Next.js application.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { JSX } from 'react'\nimport type { BundledLanguage } from 'shiki'\nimport { toJsxRuntime } from 'hast-util-to-jsx-runtime'\nimport { Fragment } from 'react'\nimport { jsx, jsxs } from 'react/jsx-runtime'\nimport { codeToHast } from 'shiki'\n\nexport default function Page() {\n  return (\n    <main>\n      <CodeBlock lang=\"ts\">\n        {[\n          'console.log(\"Hello\")',\n          'console.log(\"World\")',\n        ].join('\\n')}\n      </CodeBlock>\n    </main>\n  )\n}\n\ninterface Props {\n  children: string\n  lang: BundledLanguage\n}\n\nasync function CodeBlock(props: Props) {\n  const out = await codeToHast(props.children, {\n    lang: props.lang,\n    theme: 'github-dark'\n  })\n\n  return toJsxRuntime(out, {\n    Fragment,\n    jsx,\n    jsxs,\n    components: {\n      // your custom `pre` element\n      pre: props => <pre data-custom-codeblock {...props} />\n    },\n  }) as JSX.Element\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fine-Grained Bundle with Shiki Core in Typescript\nDESCRIPTION: Demonstrates how to use fine-grained imports with Shiki to reduce bundle size and memory usage. This approach imports only the necessary components rather than the full bundle.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/best-performance.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighterCore } from 'shiki/core'\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript'\n\nconst highlighter = await createHighlighterCore({\n  themes: [\n    import('@shikijs/themes/nord'),\n    import('@shikijs/themes/dark-plus'),\n    // ...\n  ],\n  langs: [\n    import('@shikijs/langs/typescript'),\n    import('@shikijs/langs/javascript'),\n    // ...\n  ],\n  engine: createJavaScriptRegexEngine()\n})\n```\n\n----------------------------------------\n\nTITLE: CSS for Query-based Dark Mode with Shiki\nDESCRIPTION: This CSS snippet enables automatic theme switching based on system preferences using the prefers-color-scheme media query. It applies dark theme colors from the CSS variables when dark mode is detected.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-color-scheme: dark) {\n  .shiki,\n  .shiki span {\n    color: var(--shiki-dark) !important;\n    background-color: var(--shiki-dark-bg) !important;\n    /* Optional, if you also want font styles */\n    font-style: var(--shiki-dark-font-style) !important;\n    font-weight: var(--shiki-dark-font-weight) !important;\n    text-decoration: var(--shiki-dark-text-decoration) !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Replacements in Shiki\nDESCRIPTION: Examples of using the colorReplacements option to replace theme color values. This allows customizing an existing theme's color palette or creating theme-specific color replacements when working with multiple themes.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/theme-colors.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = await codeToHtml(\n  code,\n  {\n    lang: 'js',\n    theme: 'min-dark',\n    colorReplacements: {\n      '#ff79c6': '#189eff'\n    }\n  }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = await codeToHtml(\n  code,\n  {\n    lang: 'js',\n    themes: { dark: 'min-dark', light: 'min-light' },\n    colorReplacements: {\n      'min-dark': {\n        '#ff79c6': '#189eff'\n      },\n      'min-light': {\n        '#ff79c6': '#defdef'\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Shiki Highlighter Instance in Next.js\nDESCRIPTION: This TypeScript snippet shows how to create a global Shiki highlighter instance that can be used in both server and client components. It demonstrates preloading specific themes and languages for improved performance.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst highlighter = createHighlighter({\n  themes: ['nord'],\n  langs: ['javascript'],\n})\n\n// Inside an async server component, or client side `useEffect`\nconst html = (await highlighter).codeToHtml('const a = 1', {\n  lang: 'javascript',\n  theme: 'nord'\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Approach for v1.0 Migration in TypeScript\nDESCRIPTION: This code demonstrates the correct approach for loading custom languages in Shiki v1.0, manually loading the grammar file and incorporating its contents into the language configuration object.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-lang.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst vineGrammar = JSON.parse(fs.readFileSync(join(__dirname, './vine-ts.tmLanguage.json'), 'utf8'))\n\nconst highlighter = await createHighlighter({\n  langs: [\n    {\n      name: 'vue-vine',\n      scopeName: 'source.vue-vine',\n      embeddedLangs: [\n        'vue-html',\n        'css',\n        'scss',\n        'sass',\n        'less',\n        'stylus',\n      ],\n      ...vineGrammar\n    },\n  ],\n  themes: []\n})\n```\n\n----------------------------------------\n\nTITLE: CSS for Class-based Dark Mode with Shiki\nDESCRIPTION: This CSS snippet enables theme switching based on a class added to the HTML element. It applies dark theme colors when the 'dark' class is present on the HTML tag.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nhtml.dark .shiki,\nhtml.dark .shiki span {\n  color: var(--shiki-dark) !important;\n  background-color: var(--shiki-dark-bg) !important;\n  /* Optional, if you also want font styles */\n  font-style: var(--shiki-dark-font-style) !important;\n  font-weight: var(--shiki-dark-font-weight) !important;\n  text-decoration: var(--shiki-dark-text-decoration) !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing transformerStyleToClass in TypeScript\nDESCRIPTION: Demonstrates how to use the transformerStyleToClass transformer with Shiki's codeToHtml function. This transformer converts inline styles to unique classes, allowing for more flexible CSS handling.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformerStyleToClass } from '@shikijs/transformers'\nimport { codeToHtml } from 'shiki'\n\nconst toClass = transformerStyleToClass({ // [!code highlight:3]\n  classPrefix: '__shiki_',\n})\n\nconst code = `console.log('hello')`\nconst html = await codeToHtml(code, {\n  lang: 'ts',\n  themes: {\n    dark: 'vitesse-dark',\n    light: 'vitesse-light',\n  },\n  defaultColor: false,\n  transformers: [toClass], // [!code highlight]\n})\n\n// The transformer instance exposes some methods to get the CSS\nconst css = toClass.getCSS() // [!code highlight]\n\n// use `html` and `css` in your app\n```\n\n----------------------------------------\n\nTITLE: Adding Offset-Based Decorations in Shiki\nDESCRIPTION: This example shows how to add decorations using 0-indexed offsets relative to the code string instead of line/character positions. The example highlights a specific part of the code by character position.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/decorations.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  decorations: [ // [!code hl:7]\n    {\n      start: 21,\n      end: 24,\n      properties: { class: 'highlighted-word' }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Decorations with Shiki Transformers API\nDESCRIPTION: This example demonstrates how to dynamically generate and append decorations within a custom transformer. The transformer adds decorations during the preprocess hook, allowing for programmatic decoration of code based on custom logic.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/decorations.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml, ShikiTransformer } from 'shiki'\n\nconst myTransformer: ShikiTransformer = {\n  name: 'my-transformer',\n  preprocess(code, options) {\n    // Generate the decorations somehow\n    const decorations = doSomethingWithCode(code)\n\n    // Make sure the decorations array exists\n    options.decorations ||= []\n    // Append the decorations\n    options.decorations.push(...decorations)\n  }\n}\n\nconst html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  transformers: [\n    myTransformer\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Fine-Grained Bundle Configuration for Shiki Markdown-It\nDESCRIPTION: Advanced setup for optimizing bundle size by using a fine-grained approach, importing only necessary components and creating a custom highlighter instance.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/markdown-it.md#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors: true\nimport { fromHighlighter } from '@shikijs/markdown-it/core'\nimport MarkdownIt from 'markdown-it'\nimport { createHighlighterCore } from 'shiki/core'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nconst highlighter = await createHighlighterCore({\n  themes: [\n    import('@shikijs/themes/vitesse-light')\n  ],\n  langs: [\n    import('@shikijs/langs/javascript'),\n  ],\n  engine: createOnigurumaEngine(() => import('shiki/wasm'))\n})\n\nconst md = MarkdownIt()\n\nmd.use(fromHighlighter(highlighter, { /* options */ }))\n```\n\n----------------------------------------\n\nTITLE: Shared Highlighter Function for Next.js\nDESCRIPTION: This TypeScript snippet defines a shared highlight function using Shiki's codeToHast and hast-util-to-jsx-runtime. It's used for both server-side and client-side rendering of syntax-highlighted code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type { JSX } from 'react'\nimport type { BundledLanguage } from 'shiki/bundle/web'\nimport { toJsxRuntime } from 'hast-util-to-jsx-runtime'\nimport { Fragment } from 'react'\nimport { jsx, jsxs } from 'react/jsx-runtime'\nimport { codeToHast } from 'shiki/bundle/web'\n\nexport async function highlight(code: string, lang: BundledLanguage) {\n  const out = await codeToHast(code, {\n    lang,\n    theme: 'github-dark'\n  })\n\n  return toJsxRuntime(out, {\n    Fragment,\n    jsx,\n    jsxs,\n  }) as JSX.Element\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Bracket Colors in Shiki\nDESCRIPTION: Example demonstrating how to customize the bracket colors for a custom theme in Shiki. It allows specifying colors for different bracket levels and a color for mismatched brackets.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst html = await codeToHtml('let values: number[] = [];', {\n  lang: 'ts',\n  theme: myCustomTheme,\n  transformers: [transformerColorizedBrackets({\n    themes: {\n      'my-custom-theme': ['goldenrod', 'blueviolet', 'dodgerblue', 'crimson'],\n    },\n  })],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and using a generated Shiki bundle\nDESCRIPTION: Example of how to import and use the custom Shiki bundle generated by shiki-codegen. The bundle provides a codeToHtml function that takes code content and options for language and theme.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/codegen.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from './shiki.bundle'\n\nconst html = await codeToHtml(code, { lang: 'typescript', theme: 'light-plus' })\n```\n\n----------------------------------------\n\nTITLE: Using Shiki Web Bundle Preset for Common Web Languages\nDESCRIPTION: Example showing how to import and use the Shiki web bundle preset that includes common web languages and frameworks. This bundle is smaller than the full bundle but still includes essential web development languages.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/bundles.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BundledLanguage,\n  BundledTheme,\n  codeToHtml,\n  createHighlighter\n} from 'shiki/bundle/web' // [!code highlight]\n\nconst highlighter = await createHighlighter({\n  langs: ['html', 'css', 'js'],\n  themes: ['github-dark', 'github-light'],\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Theme After Highlighter Creation\nDESCRIPTION: Demonstrates how to load a custom theme after the Shiki highlighter has been initialized. The theme is loaded from an external JSON file using the loadTheme method.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-theme.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\n// Load the theme object from a file, a network request, or anywhere\nconst myTheme = JSON.parse(fs.readFileSync('my-theme.json', 'utf8'))\n\nconst highlighter = await createHighlighter({\n  langs: ['javascript'],\n  themes: [],\n})\n\nawait highlighter.loadTheme(myTheme) // <--\n\nconst code = `console.log('hello')`\nconst html = highlighter.codeToHtml(code, {\n  lang: 'javascript',\n  theme: 'my-theme'\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Shiki with Monaco Editor\nDESCRIPTION: Example showing how to initialize Shiki highlighter, register languages with Monaco, and set up syntax highlighting integration\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/monaco.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shikiToMonaco } from '@shikijs/monaco'\nimport * as monaco from 'monaco-editor-core'\nimport { createHighlighter } from 'shiki'\n\n// Create the highlighter, it can be reused\nconst highlighter = await createHighlighter({\n  themes: [\n    'vitesse-dark',\n    'vitesse-light',\n  ],\n  langs: [\n    'javascript',\n    'typescript',\n    'vue'\n  ],\n})\n\n// Register the languageIds first. Only registered languages will be highlighted.\nmonaco.languages.register({ id: 'vue' })\nmonaco.languages.register({ id: 'typescript' })\nmonaco.languages.register({ id: 'javascript' })\n\n// Register the themes from Shiki, and provide syntax highlighting for Monaco.\nshikiToMonaco(highlighter, monaco)\n\n// Create the editor\nconst editor = monaco.editor.create(document.getElementById('container'), {\n  value: 'const a = 1',\n  language: 'javascript',\n  theme: 'vitesse-dark',\n})\n```\n\n----------------------------------------\n\nTITLE: Loading All Bundled Themes and Languages\nDESCRIPTION: Example of creating a highlighter with all available bundled themes and languages.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundledLanguages, bundledThemes, createHighlighter } from 'shiki'\n\nconst highlighter = await createHighlighter({\n  themes: Object.keys(bundledThemes),\n  langs: Object.keys(bundledLanguages),\n})\n\nhighlighter.codeToHtml('const a = 1', {\n  lang: 'javascript',\n  theme: 'poimandres'\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting TypeScript Type Annotation Using Grammar State in Shiki\nDESCRIPTION: This snippet demonstrates how to use the getLastGrammarState method to obtain a grammar state for a TypeScript type annotation context, and then apply it to highlight a complex type accurately.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/grammar-state.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst shiki = await createHighlighter({ langs: ['ts'], themes: ['github-dark'] })\n\nconst stateTypeAnnotation = shiki.getLastGrammarState('let a:', { lang: 'ts', theme: 'github-dark' })\n\nconst highlightedType = shiki.codeToHtml(\n  'Pick<MyObject, string>[]',\n  {\n    lang: 'ts',\n    theme: 'github-dark',\n    grammarState: stateTypeAnnotation // <--- this\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Pre-compiled Languages with JavaScript Raw Engine in TypeScript\nDESCRIPTION: Example of using pre-compiled languages with the JavaScript Raw engine in Shiki. This approach reduces startup time and bundle size but requires ES2024 or Node.js 20+ for full compatibility.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighterCore } from 'shiki/core'\nimport { createJavaScriptRawEngine } from 'shiki/engine/javascript'\n\nconst highlighter = await createHighlighterCore({\n  langs: [\n    import('@shikijs/langs-precompiled/javascript'),\n    import('@shikijs/langs-precompiled/typescript'),\n    // ...\n  ],\n  themes: [\n    import('@shikijs/themes/nord'),\n  ],\n  engine: createJavaScriptRawEngine(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Shiki with Oniguruma Engine in TypeScript\nDESCRIPTION: Example of explicitly using the Oniguruma engine when creating a Shiki highlighter. This is the default engine that uses compiled Oniguruma WebAssembly.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nconst shiki = await createShiki({\n  themes: ['nord'],\n  langs: ['javascript'],\n  engine: createOnigurumaEngine(import('shiki/wasm'))\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki with JavaScript RegExp Engine in TypeScript\nDESCRIPTION: Example of using the JavaScript RegExp engine when creating a Shiki highlighter. This engine uses JavaScript's native RegExp and is faster for some grammars, but may have compatibility issues with certain TextMate grammars.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript'\n\nconst jsEngine = createJavaScriptRegexEngine()\n\nconst shiki = await createHighlighter({\n  themes: ['nord'],\n  langs: ['javascript'],\n  engine: jsEngine\n})\n\nconst html = shiki.codeToHtml('const a = 1', { lang: 'javascript', theme: 'nord' })\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of transformerColorizedBrackets with Shiki\nDESCRIPTION: Basic example showing how to import and use the transformerColorizedBrackets with Shiki's codeToHtml function to colorize brackets in TypeScript code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { transformerColorizedBrackets } from '@shikijs/colorized-brackets'\nimport { codeToHtml } from 'shiki'\n\nconst html = await codeToHtml('let values: number[] = [];', {\n  lang: 'ts',\n  theme: 'dark-plus',\n  transformers: [transformerColorizedBrackets()],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Highlighter with Oniguruma Engine in Shiki\nDESCRIPTION: This code shows how to use the Oniguruma Engine with the synchronous highlighter API. Since the Oniguruma Engine can only be created asynchronously, it needs to be resolved as a promise first before being passed to the synchronous highlighter.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/sync-usage.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport js from '@shikijs/langs/javascript'\nimport nord from '@shikijs/themes/nord'\nimport { createHighlighterCoreSync } from 'shiki/core'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\n// Load this somewhere beforehand\nconst engine = await createOnigurumaEngine(import('shiki/wasm'))\n\nconst shiki = createHighlighterCoreSync({\n  themes: [nord],\n  langs: [js],\n  engine, // if a resolved engine passed in, the rest can still be synced.\n})\n\nconst html = shiki.highlight('console.log(1)', { lang: 'js', theme: 'nord' })\n```\n\n----------------------------------------\n\nTITLE: Using Fine-grained Bundle with Custom Highlighter\nDESCRIPTION: Example of using rehypeShikiFromHighlighter from the fine-grained bundle which allows passing a custom highlighter instance. This provides more control over the highlighter lifecycle and configuration.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors: true\nimport rehypeShikiFromHighlighter from '@shikijs/rehype/core'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport { createHighlighterCore } from 'shiki/core'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nimport { unified } from 'unified'\n\nconst highlighter = await createHighlighterCore({\n  themes: [\n    import('@shikijs/themes/vitesse-light')\n  ],\n  langs: [\n    import('@shikijs/langs/javascript'),\n  ],\n  engine: createOnigurumaEngine(() => import('shiki/wasm'))\n})\n\nconst raw = await fs.readFile('./input.md')\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeShikiFromHighlighter, highlighter, {\n    // or `theme` for a single theme\n    themes: {\n      light: 'vitesse-light',\n      dark: 'vitesse-dark',\n    }\n  })\n  .use(rehypeStringify)\n  .processSync(raw) // it's also possible to process synchronously\n```\n\n----------------------------------------\n\nTITLE: Basic Shiki Integration with Markdown-It\nDESCRIPTION: Standard setup for integrating Shiki with markdown-it, configuring light and dark themes using the Vitesse theme variants.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/markdown-it.md#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport Shiki from '@shikijs/markdown-it'\nimport MarkdownIt from 'markdown-it'\n\nconst md = MarkdownIt()\n\nmd.use(await Shiki({\n  themes: {\n    light: 'vitesse-light',\n    dark: 'vitesse-dark',\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading of Custom Languages After Highlighter Creation in TypeScript\nDESCRIPTION: This code shows how to load a custom language after the Shiki highlighter has been created using the loadLanguage method. This approach allows for more dynamic language loading when needed.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-lang.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { createHighlighter } from 'shiki'\n\nconst myLang = JSON.parse(fs.readFileSync('my-lang.json', 'utf8'))\n\nconst highlighter = await createHighlighter({\n  langs: [],\n  themes: ['vitesse-light'],\n})\n\nawait highlighter.loadLanguage(myLang) // <--\n\nconst html = highlighter.codeToHtml(code, {\n  lang: 'my-lang',\n  theme: 'vitesse-light'\n})\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers Implementation\nDESCRIPTION: Example of using Shiki in Cloudflare Workers environment with WebAssembly configuration.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport js from '@shikijs/langs/javascript'\nimport nord from '@shikijs/themes/nord'\nimport { createHighlighterCore, loadWasm } from 'shiki/core'\n\n// import wasm as assets\nawait loadWasm(import('shiki/onig.wasm'))\n\nexport default {\n  async fetch() {\n    const highlighter = await createHighlighterCore({\n      themes: [nord],\n      langs: [js],\n    })\n\n    return new Response(highlighter.codeToHtml('console.log(\\'shiki\\');', {\n      theme: 'nord',\n      lang: 'js'\n    }))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side CodeBlock Component for Next.js\nDESCRIPTION: This React component implements a client-side CodeBlock that can be pre-rendered on the server and then updated on the client. It uses the shared highlight function for syntax highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { JSX, useLayoutEffect, useState } from 'react'\nimport { highlight } from './shared'\n\nexport function CodeBlock({ initial }: { initial?: JSX.Element }) {\n  const [nodes, setNodes] = useState(initial)\n\n  useLayoutEffect(() => {\n    void highlight('console.log(\"Rendered on client\")', 'ts').then(setNodes)\n  }, [])\n\n  return nodes ?? <p>Loading...</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Decorated Code Output in Shiki\nDESCRIPTION: This snippet shows the result of applying decorations to code in Shiki. The 'console.log' part is wrapped with the 'highlighted-word' class as specified in the decoration configuration.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/decorations.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @decorations:[{\"start\":{\"line\":1,\"character\":0},\"end\":{\"line\":1,\"character\":11},\"properties\":{\"class\":\"highlighted-word\"}}]\nconst x = 10\nconsole.log(x)\n```\n\n----------------------------------------\n\nTITLE: Configuring Matching Algorithm for Transformers\nDESCRIPTION: Shows how to configure the matching algorithm option for transformers, which affects how line numbers are counted for highlighting and other operations.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst html = await codeToHtml(code, {\n  lang: 'ts',\n  theme: 'nord',\n  transformers: [\n    transformerNotationDiff({\n      matchAlgorithm: 'v3', // [!code hl]\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Bracket Pair Configuration with Scope Rules\nDESCRIPTION: Shows an advanced configuration for angle brackets that only colorizes them when they appear in TypeScript type parameters, using TextMate scope rules.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst bracketPair = {\n  opener: '<',\n  closer: '>',\n  scopesAllowList: [\n    'punctuation.definition.typeparameters.begin.ts',\n    'punctuation.definition.typeparameters.end.ts',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML with Dual Theme CSS Variables\nDESCRIPTION: Shows the HTML output generated by Shiki when using dual themes. The CSS variables (--shiki-dark-*) contain the dark theme colors that can be applied conditionally.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre\n  class=\"shiki shiki-themes min-light nord\"\n  style=\"background-color:#ffffff;--shiki-dark-bg:#2e3440ff;color:#24292eff;--shiki-dark:#d8dee9ff\"\n  tabindex=\"0\"\n>\n  <code>\n    <span class=\"line\">\n      <span style=\"color:#1976D2;--shiki-dark:#D8DEE9\">console</span>\n      <span style=\"color:#6F42C1;--shiki-dark:#ECEFF4\">.</span>\n      <span style=\"color:#6F42C1;--shiki-dark:#88C0D0\">log</span>\n      <span style=\"color:#24292EFF;--shiki-dark:#D8DEE9FF\">(</span>\n      <span style=\"color:#22863A;--shiki-dark:#ECEFF4\">\"</span>\n      <span style=\"color:#22863A;--shiki-dark:#A3BE8C\">hello</span>\n      <span style=\"color:#22863A;--shiki-dark:#ECEFF4\">\"</span>\n      <span style=\"color:#24292EFF;--shiki-dark:#D8DEE9FF\">)</span>\n      </span>\n    </code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Setting up Twoslash in VitePress theme\nDESCRIPTION: Setup for the VitePress theme to enable Twoslash floating type information using Vue plugin and importing the necessary CSS styles.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors: true\nimport type { EnhanceAppContext } from 'vitepress'\nimport TwoslashFloatingVue from '@shikijs/vitepress-twoslash/client' // [!code hl]\nimport Theme from 'vitepress/theme'\n\nimport '@shikijs/vitepress-twoslash/style.css' // [!code hl]\n\nexport default {\n  extends: Theme,\n  enhanceApp({ app }: EnhanceAppContext) {\n    app.use(TwoslashFloatingVue) // [!code hl]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using shiki-codegen programmatically\nDESCRIPTION: Example of using shiki-codegen's programmatic API to generate a custom bundle. This approach allows for integration into build processes or tooling.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/codegen.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codegen } from 'shiki-codegen'\n\nconst { code } = await codegen({\n  langs: ['typescript', 'javascript', 'vue'],\n  themes: ['light-plus', 'dark-plus'],\n  engine: 'javascript',\n  typescript: true\n})\n\n// Write the code to a file\n```\n\n----------------------------------------\n\nTITLE: HAST Output Structure Example\nDESCRIPTION: Example showing the resulting HAST structure output from codeToHast. Demonstrates the hierarchical tree structure with styling and formatting properties.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/api.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: 'root',\n  children: [\n    {\n      type: 'element',\n      tagName: 'pre',\n      properties: {\n        class: 'shiki vitesse-light',\n        style: 'background-color:#ffffff;color:#393a34',\n        tabindex: '0'\n      },\n      children: [\n        {\n          type: 'element',\n          tagName: 'code',\n          properties: {},\n          children: [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: { class: 'line' },\n              children: [\n                {\n                  type: 'element',\n                  tagName: 'span',\n                  properties: { style: 'color:#AB5959' },\n                  children: [ { type: 'text', value: 'const' } ]\n                },\n                {\n                  type: 'element',\n                  tagName: 'span',\n                  properties: { style: 'color:#B07D48' },\n                  children: [ { type: 'text', value: ' a' } ]\n                },\n                {\n                  type: 'element',\n                  tagName: 'span',\n                  properties: { style: 'color:#999999' },\n                  children: [ { type: 'text', value: ' =' } ]\n                },\n                {\n                  type: 'element',\n                  tagName: 'span',\n                  properties: { style: 'color:#2F798A' },\n                  children: [ { type: 'text', value: ' 1' } ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shiki Twoslash Integration\nDESCRIPTION: Example showing how to use the transformerTwoslash with Shiki's codeToHtml function\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/twoslash.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  transformerTwoslash,\n} from '@shikijs/twoslash'\nimport {\n  codeToHtml,\n} from 'shiki'\n\nconst html = await codeToHtml(`console.log()`, {\n  lang: 'ts',\n  theme: 'vitesse-dark',\n  transformers: [\n    transformerTwoslash(), // <-- here\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Output of transformerStyleToClass\nDESCRIPTION: Shows the resulting HTML structure after applying the transformerStyleToClass transformer. The inline styles are replaced with unique class names.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"shiki shiki-themes vitesse-dark vitesse-light __shiki_9knfln\" tabindex=\"0\"><code><span class=\"line\">\n  <span class=\"__shiki_14cn0u\">console</span>\n  <span class=\"__shiki_ps5uht\">.</span>\n  <span class=\"__shiki_1zrdwt\">log</span>\n  <span class=\"__shiki_ps5uht\">(</span>\n  <span class=\"__shiki_236mh3\">'</span>\n  <span class=\"__shiki_1g4r39\">hello</span>\n  <span class=\"__shiki_236mh3\">'</span>\n  <span class=\"__shiki_ps5uht\">)</span>\n</span></code></pre>\n```\n\n----------------------------------------\n\nTITLE: CDN Usage with ESM\nDESCRIPTION: Example of using Shiki via CDN in a browser environment using ES modules.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"foo\"></div>\n\n  <script type=\"module\">\n    // be sure to specify the exact version\n    import { codeToHtml } from 'https://esm.sh/shiki@3.0.0'\n    // or\n    // import { codeToHtml } from 'https://esm.run/shiki@3.0.0'\n\n    const foo = document.getElementById('foo')\n    foo.innerHTML = await codeToHtml('console.log(\"Hi, Shiki on CDN :)\")', {\n      lang: 'js',\n      theme: 'rose-pine'\n    })\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Color Values in Shiki Themes\nDESCRIPTION: Example showing how to use non-hex color values (like RGB, HSL, or CSS variables) in Shiki themes. This feature allows you to define custom themes with more flexible color formats for rendering code snippets.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/theme-colors.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst highlighter = await createHighlighter({\n  langs: ['javascript'],\n  themes: [\n    {\n      name: 'my-theme',\n      settings: [\n        {\n          scope: ['comment'],\n          settings: {\n            // use `rgb`, `hsl`, `hsla`, \n            // or any anything supported by your renderer\n            foreground: 'rgb(128, 128, 128)'\n          }\n        },\n        {\n          scope: ['string'],\n          settings: {\n            foreground: 'var(--code-string)' // CSS variable \n          }\n        },\n        // ...more\n      ],\n      // Background and foreground colors \n      bg: 'var(--code-bg)',\n      fg: 'var(--code-fg)'\n    }\n  ]\n})\n\nconst html = highlighter.codeToHtml('const foo = \"bar\"', { lang: 'javascript', theme: 'my-theme' })\n```\n\n----------------------------------------\n\nTITLE: Using Grammar Context Code for One-off Grammar Context Shifting in Shiki\nDESCRIPTION: This example shows how to use the grammarContextCode option as a shorthand for one-off grammar context shifting when highlighting TypeScript code in Shiki.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/grammar-state.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst highlightedType = shiki.codeToHtml(\n  'Pick<MyObject, string>[]',\n  {\n    lang: 'ts',\n    theme: 'github-dark',\n    grammarContextCode: 'let a:' // same as above, a temporary grammar state is created internally\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Multiple Theme Variables\nDESCRIPTION: Shows a simplified HTML token example with multiple theme CSS variables applied.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"color:#1976D2;--shiki-dark:#D8DEE9;--shiki-dim:#566575\">console</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki with Custom Engine in TypeScript\nDESCRIPTION: Example of creating a Shiki highlighter with a custom engine option. This demonstrates how to use the 'engine' property when initializing Shiki.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst shiki = await createShiki({\n  themes: ['nord'],\n  langs: ['javascript'],\n  engine: { /* custom engine */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Bracket Pairs to Colorize\nDESCRIPTION: Demonstrates how to customize which bracket pairs should be colorized by the transformer. This example configures the transformer to only colorize curly brackets.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst transformer = transformerColorizedBrackets({\n  bracketPairs: [{ opener: '{', closer: '}' }],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Engine Runtime Target in TypeScript\nDESCRIPTION: Example of creating a JavaScript RegExp engine with a specific runtime target. This allows overriding the automatic detection of the JavaScript environment version.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst jsEngine = createJavaScriptRegexEngine({\n  target: 'ES2018', // or 'auto' (default), 'ES2024', 'ES2025'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Code Highlighting\nDESCRIPTION: Example configuration for enabling inline code highlighting with rehypeShiki. This allows for syntax highlighting of inline code snippets in markdown using the tailing-curly-colon syntax.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors: true\nimport rehypeShiki from '@shikijs/rehype'\nimport rehypeStringify from 'rehype-stringify'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport { unified } from 'unified'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(rehypeShiki, {\n    inline: 'tailing-curly-colon', // or other options\n    // ...\n  })\n  .use(rehypeStringify)\n  .process(await fs.readFile('./input.md'))\n```\n\n----------------------------------------\n\nTITLE: Language-specific Bracket Colorization Overrides\nDESCRIPTION: Example showing how to override the bracket colorization configuration for specific programming languages, in this case TypeScript.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst transformer = transformerColorizedBrackets({\n  langs: { ts: myCustomTypescriptConfig },\n})\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting Example in Markdown\nDESCRIPTION: Example of using line highlighting syntax in markdown code blocks. Lines can be specified individually or as ranges using curly braces after the language identifier.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_6\n\nLANGUAGE: md\nCODE:\n```\n```js {1,3-4}\nconsole.log('1') // highlighted\nconsole.log('2')\nconsole.log('3') // highlighted\nconsole.log('4') // highlighted\n```\n```\n\n----------------------------------------\n\nTITLE: CSS for Data-Attribute Based Theme Switching\nDESCRIPTION: CSS snippet that applies different theme colors based on a data-theme attribute on a parent element. This approach allows for theme switching beyond just light and dark.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='dark'] .shiki,\n[data-theme='dark'] .shiki span {\n  background-color: var(--s-dark-bg) !important;\n  color: var(--s-dark) !important;\n}\n\n[data-theme='dim'] .shiki,\n[data-theme='dim'] .shiki span {\n  background-color: var(--s-dim-bg) !important;\n  color: var(--s-dim) !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Language Aliases in TypeScript\nDESCRIPTION: This code demonstrates how to register custom language aliases using the 'langAlias' option. The example maps a custom language name 'mylang' to the existing 'javascript' language for syntax highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-lang.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\n\nconst highlighter = await createHighlighter({\n  langs: ['javascript'],\n  langAlias: { // [!code hl:3]\n    mylang: 'javascript',\n  },\n  themes: ['nord']\n})\n\nconst code = highlighter.codeToHtml('const a = 1', {\n  lang: 'mylang', // [!code hl]\n  theme: 'nord'\n})\n```\n\n----------------------------------------\n\nTITLE: Inline Code Highlighting Syntax in Markdown\nDESCRIPTION: Example of using inline code highlighting syntax in markdown. This demonstrates the tailing-curly-colon format for specifying the language for inline code blocks.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_8\n\nLANGUAGE: md\nCODE:\n```\nThis code `console.log(\"Hello World\"){:js}` will be highlighted.\n```\n\n----------------------------------------\n\nTITLE: Obtaining Grammar State from HAST in Shiki\nDESCRIPTION: This snippet illustrates how to get the grammar state from a highlighted HAST (Hypertext Abstract Syntax Tree) node, which can be useful for optimizing performance in scenarios like pausable highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/grammar-state.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shiki = await getHighlighter(/* ... */)\n\nconst root = shiki.codeToHast(/* ... */)\n\nconst grammarState = shiki.getLastGrammarState(root) // pass the hast root instead of code\n```\n\n----------------------------------------\n\nTITLE: Overriding language detection in Shiki CLI\nDESCRIPTION: Demonstrates how to use the --lang option to override the auto-detected language for a file.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/cli.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shikijs/cli src/index.js --lang=ts\n```\n\n----------------------------------------\n\nTITLE: Vue Single File Component with Twoslash\nDESCRIPTION: Example of a Vue Single File Component using Twoslash to show type information within the script setup section, demonstrating reactive state and lifecycle hooks.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted, ref } from 'vue'\n\n// reactive state\nconst count = ref(0)\n//             ^?\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">\n    Count is: {{ count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Highlighter Configuration in Shiki v3.0\nDESCRIPTION: Example showing how to update the createHighlighter configuration to use the new engine-based approach instead of the deprecated loadWasm property.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v3.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma' // [!code ++]\n\nconst shiki = await createHighlighter({\n  // ...\n  loadWasm: () => import('shiki/wasm'), // [!code --]\n  engine: createOnigurumaEngine(() => import('shiki/wasm')), // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Renderer\nDESCRIPTION: Example of configuring the rich renderer with transformerTwoslash\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/twoslash.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rendererRich, transformerTwoslash } from '@shikijs/twoslash'\n\ntransformerTwoslash({\n  renderer: rendererRich() // <--\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/rehype with yarn\nDESCRIPTION: Command to install the @shikijs/rehype package using yarn package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shikijs/rehype\n```\n\n----------------------------------------\n\nTITLE: Creating Forgiving JavaScript RegExp Engine in TypeScript\nDESCRIPTION: Example of creating a JavaScript RegExp engine with the 'forgiving' option enabled. This allows the engine to suppress conversion errors and provide best-effort results for unsupported grammars.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/regex-engines.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst jsEngine = createJavaScriptRegexEngine({ forgiving: true })\n// ...use the engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic Renderer\nDESCRIPTION: Example of configuring the classic renderer with transformerTwoslash\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/twoslash.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rendererClassic, transformerTwoslash } from '@shikijs/twoslash'\n\ntransformerTwoslash({\n  renderer: rendererClassic() // <--\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/rehype with pnpm\nDESCRIPTION: Command to install the @shikijs/rehype package using pnpm package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shikijs/rehype\n```\n\n----------------------------------------\n\nTITLE: CSS Output of transformerStyleToClass\nDESCRIPTION: Displays the generated CSS classes and their corresponding color variables for both dark and light themes. This CSS is produced by the transformerStyleToClass and can be used to style the highlighted code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.__shiki_14cn0u {\n  --shiki-dark: #bd976a;\n  --shiki-light: #b07d48;\n}\n.__shiki_ps5uht {\n  --shiki-dark: #666666;\n  --shiki-light: #999999;\n}\n.__shiki_1zrdwt {\n  --shiki-dark: #80a665;\n  --shiki-light: #59873a;\n}\n.__shiki_236mh3 {\n  --shiki-dark: #c98a7d77;\n  --shiki-light: #b5695977;\n}\n.__shiki_1g4r39 {\n  --shiki-dark: #c98a7d;\n  --shiki-light: #b56959;\n}\n.__shiki_9knfln {\n  --shiki-dark: #dbd7caee;\n  --shiki-light: #393a34;\n  --shiki-dark-bg: #121212;\n  --shiki-light-bg: #ffffff;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlighter with Engine in TypeScript\nDESCRIPTION: Updated configuration for creating a highlighter with explicit engine specification\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v2.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from 'shiki'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nconst shiki = await createHighlighter({\n  engine: createOnigurumaEngine(() => import('shiki/wasm')),\n})\n```\n\n----------------------------------------\n\nTITLE: Server-side Page Component with CodeBlock in Next.js\nDESCRIPTION: This Next.js page component demonstrates how to use the CodeBlock component with server-side pre-rendering. It passes an initial prop to the CodeBlock for improved performance.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/next.md#2025-04-15_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CodeBlock } from './codeblock'\nimport { highlight } from './shared'\n\nexport default async function Page() {\n  // `initial` is optional.\n  return (\n    <main>\n      <CodeBlock initial={await highlight('console.log(\"Rendered on server\")', 'ts')} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Offset-Based Decorated Code Output in Shiki\nDESCRIPTION: This snippet shows the result of applying offset-based decorations to code in Shiki. The decoration is applied to characters between positions 21 and 24 in the code string.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/decorations.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @decorations:[{\"start\":21,\"end\":24,\"properties\":{\"class\":\"highlighted-word\"}}]\nconst x = 10\nconsole.log(x)\n```\n\n----------------------------------------\n\nTITLE: Disposing Shiki Highlighter Instance in Typescript\nDESCRIPTION: Shows how to properly dispose of a Shiki highlighter instance when it's no longer needed. This is necessary since the highlighter won't be garbage collected automatically.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/best-performance.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhighlighter.dispose()\n```\n\n----------------------------------------\n\nTITLE: HTML Token with Theme Variables Only\nDESCRIPTION: Shows how a token is rendered when defaultColor is set to false. Only CSS variables are included in the style attribute without direct color values.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/dual-themes.md#2025-04-15_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"--shiki-dark:#D8DEE9;--shiki-light:#2E3440\">console</span>\n```\n\n----------------------------------------\n\nTITLE: HTML Output Example for transformerNotationDiff\nDESCRIPTION: Shows the HTML output structure generated by the transformerNotationDiff transformer, with added CSS classes for diff styling.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Output (stripped of `style` attributes for clarity) -->\n<pre class=\"shiki has-diff\"> <!-- Notice `has-diff` -->\n  <code>\n    <span class=\"line\"></span>\n    <span class=\"line\"><span>function</span><span>()</span><span></span><span>{</span></span>\n    <span class=\"line diff remove\">  <!-- Notice `diff` and `remove` -->\n      <span></span><span>console</span><span>.</span><span>log</span><span>(</span><span>&#39;</span><span>hewwo</span><span>&#39;</span><span>) </span>\n    </span>\n    <span class=\"line diff add\">  <!-- Notice `diff` and `add` -->\n      <span></span><span>console</span><span>.</span><span>log</span><span>(</span><span>&#39;</span><span>hello</span><span>&#39;</span><span>) </span>\n    </span>\n    <span class=\"line\"><span></span><span>}</span></span>\n    <span class=\"line\"><span></span></span>\n  </code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/colorized-brackets via Package Managers\nDESCRIPTION: Commands to install the @shikijs/colorized-brackets package as a development dependency using various package managers.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @shikijs/colorized-brackets\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shikijs/colorized-brackets\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shikijs/colorized-brackets\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @shikijs/colorized-brackets\n```\n\n----------------------------------------\n\nTITLE: Using the 'none' Theme in Shiki for Bypass Highlighting\nDESCRIPTION: This snippet demonstrates how to use the special 'none' theme in Shiki to bypass syntax highlighting. This is particularly useful as a fallback when working with user-specified theme names that may not be available.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/themes.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst html = codeToHtml('console.log(\"Hello World\")', {\n  lang: 'javascript',\n  theme: 'none', // [!code hl]\n})\n```\n\n----------------------------------------\n\nTITLE: Twoslash TypeScript Example in Markdown\nDESCRIPTION: Example of using Twoslash in a Markdown file to display type information for a TypeScript code snippet.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```ts twoslash\nconsole.log('hello')\n//      ^?\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki via Package Managers\nDESCRIPTION: Multiple package manager commands for installing Shiki as a development dependency.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/install.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D shiki\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D shiki\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D shiki\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D shiki\n```\n\n----------------------------------------\n\nTITLE: Configuring Plain Text Highlighting in Shiki\nDESCRIPTION: Demonstrates how to use the 'text' language option to bypass syntax highlighting in Shiki. This is useful as a fallback when dealing with unsupported languages.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/languages.md#2025-04-15_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nimport { codeToHtml } from 'shiki'\n\nconst html = codeToHtml('console.log(\"Hello World\")', {\n  lang: 'text', // [!code hl]\n  theme: 'vitesse-light',\n})\n```\n\n----------------------------------------\n\nTITLE: Example Line Highlighting Using v1 Matching Algorithm\nDESCRIPTION: Demonstrates how the v1 matching algorithm counts line numbers, where the comment line itself is counted as the first line in the range.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// [\\!code highlight:3]\nconsole.log('highlighted') // [!code hl]\nconsole.log('highlighted') // [!code hl]\nconsole.log('not highlighted')\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/twoslash Package\nDESCRIPTION: Package installation commands for different package managers including npm, yarn, pnpm, and bun\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/twoslash.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @shikijs/twoslash\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @shikijs/twoslash\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @shikijs/twoslash\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D @shikijs/twoslash\n```\n\n----------------------------------------\n\nTITLE: Enabling File System Cache for Twoslash in VitePress\nDESCRIPTION: Configuration to enable file system caching for generated TypeScript types to improve build performance across multiple builds.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { transformerTwoslash } from '@shikijs/vitepress-twoslash'\nimport { createFileSystemTypesCache } from '@shikijs/vitepress-twoslash/cache-fs' // [!code hl]\nimport { defineConfig } from 'vitepress'\n\nexport default defineConfig({\n  markdown: {\n    codeTransformers: [\n      transformerTwoslash({\n        typesCache: createFileSystemTypesCache() // [!code hl]\n      })\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using shiki-codegen CLI to generate a custom bundle\nDESCRIPTION: Command to create a custom Shiki bundle with specific languages, themes, and engine. This generates a JavaScript/TypeScript file that can be imported in your project.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/codegen.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shiki-codegen \\\n  --langs typescript,javascript,vue \\\n  --themes light-plus,dark-plus \\\n  --engine javascript \\\n  ./shiki.bundle.ts\n```\n\n----------------------------------------\n\nTITLE: CSS Example for Whitespace Rendering\nDESCRIPTION: Shows CSS styling for tabs and spaces to make whitespace characters visible in code blocks.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.vp-code .tab,\n.vp-code .space {\n  position: relative;\n}\n\n.vp-code .tab::before {\n  content: '⇥';\n  position: absolute;\n  opacity: 0.3;\n}\n\n.vp-code .space::before {\n  content: '·';\n  position: absolute;\n  opacity: 0.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Shiki Compatibility Build\nDESCRIPTION: This JSON snippet shows how to update the package.json file to use the Shiki compatibility build. It demonstrates replacing the old Shiki dependency with the new @shikijs/compat package.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/compat.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"shiki\": \"0.14.3\",\n    \"shiki\": \"npm:@shikijs/compat@1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CDN Usage Implementation\nDESCRIPTION: Example of using Twoslash with CDN imports and browser-based virtual file system\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/twoslash.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// FIXME: Replace with explicit versions in production\nimport { createTransformerFactory, rendererRich } from 'https://esm.sh/@shikijs/twoslash@latest/core'\nimport { codeToHtml } from 'https://esm.sh/shiki@latest'\nimport { createTwoslashFromCDN } from 'https://esm.sh/twoslash-cdn@latest'\nimport { createStorage } from 'https://esm.sh/unstorage@latest'\nimport indexedDbDriver from 'https://esm.sh/unstorage@latest/drivers/indexedb'\n\n// ============= Initialization =============\n\n// An example using unstorage with IndexedDB to cache the virtual file system\nconst storage = createStorage({\n  driver: indexedDbDriver({ base: 'twoslash-cdn' }),\n})\n\nconst twoslash = createTwoslashFromCDN({\n  storage,\n  compilerOptions: {\n    lib: ['esnext', 'dom'],\n  },\n})\n\nconst transformerTwoslash = createTransformerFactory(twoslash.runSync)({\n  renderer: rendererRich(),\n})\n\n// ============= Execution =============\n\nconst app = document.getElementById('app')\n\nconst source = `\nimport { ref } from 'vue'\n\nconsole.log(\"Hi! Shiki + Twoslash on CDN :)\")\n\nconst count = ref(0)\n//     ^?\n`.trim()\n\n// Before rendering, we need to prepare the types, so that the rendering can happen synchronously\nawait twoslash.prepareTypes(source)\n\n// Then we can render the code\napp.innerHTML = await codeToHtml(source, {\n  lang: 'ts',\n  theme: 'vitesse-dark',\n  transformers: [transformerTwoslash],\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Explicit Trigger for Bracket Colorization\nDESCRIPTION: Configuration to enable the explicit trigger option, which requires code blocks to include a specific meta tag to activate bracket colorization.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst transformer = transformerColorizedBrackets({\n  explicitTrigger: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Configuration\nDESCRIPTION: JSON configuration for forcing the use of Shiki v2.0.0 in package.json\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v2.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"shiki\": \"^2\",\n    \"@shikijs/core\": \"^2\",\n    \"@shikijs/transformers\": \"^2\",\n    \"@shikijs/markdown-it\": \"^2\",\n    \"@shikijs/rehype\": \"^2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shiki CLI with npx\nDESCRIPTION: Demonstrates how to use the Shiki CLI via npx to highlight a README file.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/cli.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shikijs/cli README.md\n```\n\n----------------------------------------\n\nTITLE: Markdown with Explicit Bracket Colorization Trigger\nDESCRIPTION: Demonstrates markdown code blocks with and without the explicit 'colorize-brackets' meta tag when using the explicitTrigger option.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/colorized-brackets.md#2025-04-15_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n```ts\n// no bracket colorizing\n```\n\n```ts colorize-brackets\n// brackets will be colorized\n```\n```\n\n----------------------------------------\n\nTITLE: Updating WASM Import Path in TypeScript\nDESCRIPTION: Example showing how to update the import path for WASM functionality in Shiki v2\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v2.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadWasm } from 'shiki/engine/oniguruma'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shiki Package Structure with Mermaid\nDESCRIPTION: A mermaid diagram showing the dependency structure between various packages in the Shiki project. It illustrates how tm-grammars and tm-themes feed into the main shiki package, which then serves as a dependency for specialized integrations like twoslash, markdown-it, rehype, and monaco.\nSOURCE: https://github.com/shikijs/shiki/blob/main/CONTRIBUTING.md#2025-04-15_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  tm-grammars([tm-grammars]) -.-> shiki\n  core --> shiki\n  tm-themes([tm-themes]) -.-> shiki\n  shiki{{shiki}} --> twoslash\n  shiki --> markdown-it\n  shiki --> compat[/compat\\]\n  shiki --> rehype\n  shiki --> monaco\n  transformers\n```\n\n----------------------------------------\n\nTITLE: Using Shiki CLI with skat alias\nDESCRIPTION: Demonstrates how to use the 'skat' command alias to highlight a TypeScript file after global installation.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/cli.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nskat src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Using Shiki CLI with custom theme\nDESCRIPTION: Shows how to use the --theme option to specify a custom theme (nord) for syntax highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/cli.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shikijs/cli README.md --theme=nord\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/transformers with Package Managers\nDESCRIPTION: Shows how to install the @shikijs/transformers package using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @shikijs/transformers\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shikijs/transformers\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shikijs/transformers\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @shikijs/transformers\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/vitepress-twoslash with yarn\nDESCRIPTION: Command to install the vitepress-twoslash package using yarn package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shikijs/vitepress-twoslash\n```\n\n----------------------------------------\n\nTITLE: Example Line Highlighting Using v3 Matching Algorithm\nDESCRIPTION: Shows how the v3 matching algorithm counts line numbers, where counting starts from the line below the comment.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/transformers.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// [\\!code highlight:2]\nconsole.log('highlighted') // [!code hl]\nconsole.log('highlighted') // [!code hl]\nconsole.log('not highlighted')\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki Markdown-It Plugin with Package Managers\nDESCRIPTION: Commands for installing the @shikijs/markdown-it package using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/markdown-it.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @shikijs/markdown-it\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shikijs/markdown-it\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shikijs/markdown-it\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @shikijs/markdown-it\n```\n\n----------------------------------------\n\nTITLE: Non-Working Example for v1.0 Migration in TypeScript\nDESCRIPTION: This code shows an approach that worked in Shiki v0.14 but no longer works in v1.0, where directly referencing file paths in the configuration is not supported since Shiki is now environment agnostic.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/guide/load-lang.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst highlighter = await createHighlighter({\n  langs: [\n    {\n      name: 'vue-vine',\n      scopeName: 'source.vue-vine',\n      // ‼️ This would not work!\n      path: join(__dirname, './vine-ts.tmLanguage.json'),\n      embeddedLangs: [\n        'vue-html',\n        'css',\n        'scss',\n        'sass',\n        'less',\n        'stylus',\n      ],\n    },\n  ],\n  themes: []\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/monaco Package\nDESCRIPTION: NPM installation commands for adding @shikijs/monaco package to your project using different package managers\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/monaco.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @shikijs/monaco\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @shikijs/monaco\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @shikijs/monaco\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D @shikijs/monaco\n```\n\n----------------------------------------\n\nTITLE: ANSI Terminal Output Highlighting in Shiki\nDESCRIPTION: Shows various ANSI terminal text formatting options including colored foreground/background, bold, dimmed, underlined, reversed, and strikethrough text styles.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/languages.md#2025-04-15_snippet_1\n\nLANGUAGE: ansi\nCODE:\n```\n[0;32mcolored foreground[0m\n[0;42mcolored background[0m\n\n[0;1mbold text[0m\n[0;2mdimmed text[0m\n[0;4munderlined text[0m\n[0;7mreversed text[0m\n[0;9mstrikethrough text[0m\n[0;4;9munderlined + strikethrough text[0m\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Configuration for Shiki v2.0 Testing\nDESCRIPTION: JSON configuration for package.json to force the usage of Shiki v2.0 in projects that use Shiki indirectly, allowing users to test for deprecation warnings before migrating to v3.0.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v3.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"shiki\": \"^2\",\n    \"@shikijs/core\": \"^2\",\n    \"@shikijs/types\": \"^2\",\n    \"@shikijs/transformers\": \"^2\",\n    \"@shikijs/markdown-it\": \"^2\",\n    \"@shikijs/rehype\": \"^2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki CLI Globally\nDESCRIPTION: Shows different package manager commands to install Shiki CLI globally. Includes npm, yarn, pnpm, and bun installation methods.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/cli.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @shikijs/cli\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn global add @shikijs/cli\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -g @shikijs/cli\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add -g @shikijs/cli\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/rehype with npm\nDESCRIPTION: Command to install the @shikijs/rehype package using npm package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @shikijs/rehype\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Layout and Content Structure in YAML for Shiki Documentation\nDESCRIPTION: This YAML configuration defines the structure and content of the Shiki syntax highlighter project's home page. It includes a hero section with project name, tagline, logo, and action buttons, followed by a features section highlighting the key benefits of Shiki.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/index.md#2025-04-15_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\n\nhero:\n  name: \"Shiki 式 \"\n  text: \"Syntax highlighter\"\n  tagline: A beautiful yet powerful syntax highlighter\n  image:\n    src: /logo.svg\n    alt: Shiki Logo\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide/\n    - theme: alt\n      text: Installation\n      link: /guide/install/\n\nfeatures:\n  - title: Accurate & Beautiful\n    icon: 🌈\n    details: TextMate grammar powered, same engine as your VS Code. Improves with VS Code.\n  - title: Zero Runtime\n    icon: ⏱️\n    details: Runs ahead of time, ship zero JavaScript while getting the perfect syntax highlighting.\n  - title: Customizable\n    icon: 🧩\n    details: HAST based. Addons, transformations, highly customizable.\n  - title: ESM & Universal\n    icon: 🎄\n    details: Fully tree-shakable ESM, runs on any JavaScript runtime, Browser, Node.js, Cloudflare Workers, etc.\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table showing RegExp Engine Compatibility Stats\nDESCRIPTION: A markdown table displaying the total count of languages and their compatibility status with JavaScript RegExp engine, including supported, mismatched and unsupported language counts.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/references/engine-js-compat.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                 |                       Count |\n| :-------------- | --------------------------: |\n| Total Languages |                         221 |\n| Supported       | [220](#supported-languages) |\n| Mismatched      |  [0](#mismatched-languages) |\n| Unsupported     | [1](#unsupported-languages) |\n```\n\n----------------------------------------\n\nTITLE: Embedding ShikiPlayground Component in Vue Template\nDESCRIPTION: A simple Vue template that imports and renders the ShikiPlayground component. The file uses a 'home' layout and includes just the playground component without any additional configuration or content.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/play.md#2025-04-15_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ShikiPlayground />\n```\n\n----------------------------------------\n\nTITLE: Updating WASM Import Path in Shiki v3.0\nDESCRIPTION: Example of updating the import path for loadWasm functionality in Shiki v3.0, showing the change from importing directly from 'shiki' to using the engine-specific path.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v3.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadWasm } from 'shiki' // [!code --]\nimport { loadWasm } from 'shiki/engine/oniguruma' // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Including HomeDemo Component in HTML for Shiki Documentation\nDESCRIPTION: This HTML snippet includes the HomeDemo component in the Shiki home page. The component is likely responsible for rendering a demonstration of the Shiki syntax highlighter's capabilities.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/index.md#2025-04-15_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<HomeDemo />\n```\n\n----------------------------------------\n\nTITLE: Python Inline Code with Language Annotation\nDESCRIPTION: Example of Python inline code with language annotation using the {:py} syntax for proper highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/inline.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Snake!\"){:py}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Code with Language Annotation\nDESCRIPTION: Example of JavaScript inline code with language annotation using the {:js} syntax for proper highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/inline.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello World\"){:js}\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Configuration for Shiki v3.0 Migration\nDESCRIPTION: JSON configuration for package.json to force the usage of Shiki v3.0 in projects that use Shiki indirectly, after confirming compatibility with v2.0.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v3.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"shiki\": \"^3\",\n    \"@shikijs/core\": \"^3\",\n    \"@shikijs/types\": \"^3\",\n    \"@shikijs/transformers\": \"^3\",\n    \"@shikijs/markdown-it\": \"^3\",\n    \"@shikijs/rehype\": \"^3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Inline Code Example\nDESCRIPTION: A simple example of plain inline code without language specification.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/inline.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboring\n```\n\n----------------------------------------\n\nTITLE: Default Language Fallback in Shiki\nDESCRIPTION: This code block demonstrates Shiki's behavior when no specific language is specified. It falls back to the default language for syntax highlighting.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/a.md#2025-04-15_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nShould fallback to default language\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecation Warnings in TypeScript\nDESCRIPTION: Code to enable or disable deprecation warnings and configure their behavior\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v2.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableDeprecationWarnings } from 'shiki/core'\n\nenableDeprecationWarnings(true, true) // enable warnings and throw errors\n```\n\n----------------------------------------\n\nTITLE: Logging Test Output in JavaScript\nDESCRIPTION: This snippet demonstrates a basic console log statement in JavaScript. It's commonly used to verify that a JavaScript environment is set up correctly and can execute code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/markdown-it/test/fixtures/c.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('it works!')\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Block Example\nDESCRIPTION: A JavaScript code block example showing that the language annotation syntax doesn't apply in code blocks since they already have language specification.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/inline.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello World\"){:js}\n```\n\n----------------------------------------\n\nTITLE: Running Automated Migration with Covolute\nDESCRIPTION: Command to run the automated codemod tool for migrating from Shiki v1 to v2\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/blog/v2.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx covolute@latest shiki/v1-to-v2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variable Declaration and Console Logging\nDESCRIPTION: This JavaScript snippet demonstrates declaring a numerical variable and outputting it to the console. It shows basic variable assignment and the use of console.log() for debugging or displaying values.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/b.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = 2\nconsole.log(b)\n```\n\n----------------------------------------\n\nTITLE: Testing Color Annotations and Syntax Error Handling in JavaScript\nDESCRIPTION: This code snippet contains examples of how Shiki should highlight different parts of JavaScript code, with embedded @colors annotations that specify the expected highlighting colors. It intentionally includes syntax errors to test the highlighter's behavior with malformed code.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/colorized-brackets/test/fixtures/ts/unexpected.txt#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this needs to be a txt file, otherwise `jsr publish` fails while checking for slow types\nif (true) {\n// Y    Y R @colors\n  \n  let obj = {\n    //      P @colors\n    foo: 'foo'.split()(\n    //              BBR @colors\n  }];\n  // @colors 2=P 3=R\n  \nlet foo = ([[[[)]]]])\n//        PRRRRPRRRR @colors\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/vitepress-twoslash with npm\nDESCRIPTION: Command to install the vitepress-twoslash package using npm package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @shikijs/vitepress-twoslash\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/vitepress-twoslash with pnpm\nDESCRIPTION: Command to install the vitepress-twoslash package using pnpm package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shikijs/vitepress-twoslash\n```\n\n----------------------------------------\n\nTITLE: Caching Example in JavaScript\nDESCRIPTION: This snippet is identical to the previous one, but it's noted to be cached if a cache option is provided. It shows the same variable declaration and console logging.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/c.md#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = 2\nconsole.log(b)\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/vitepress-twoslash with bun\nDESCRIPTION: Command to install the vitepress-twoslash package using bun package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/vitepress.md#2025-04-15_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @shikijs/vitepress-twoslash\n```\n\n----------------------------------------\n\nTITLE: Installing @shikijs/rehype with bun\nDESCRIPTION: Command to install the @shikijs/rehype package using bun package manager.\nSOURCE: https://github.com/shikijs/shiki/blob/main/docs/packages/rehype.md#2025-04-15_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @shikijs/rehype\n```\n\n----------------------------------------\n\nTITLE: JavaScript Console Logging Example\nDESCRIPTION: Demonstrates basic JavaScript console logging functionality and variable declaration. The example shows both direct string logging and variable assignment with subsequent logging.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/markdown-it/test/fixtures/a.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('it works!')\n\nconst a = 1\nconsole.log(a)\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in JavaScript\nDESCRIPTION: A simple JavaScript statement that logs 'it works!' to the console. This is commonly used for testing if code execution reaches a certain point or for verifying that functionality is working correctly.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/markdown-it/test/fixtures/b.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('it works!')\n```\n\n----------------------------------------\n\nTITLE: Testing Fallback to Plaintext in Shiki with Invalid Language Specification\nDESCRIPTION: This code snippet demonstrates a test case where an invalid language is specified in a code block. Shiki should fall back to rendering this content as plaintext when the specified language identifier is not recognized.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/d.md#2025-04-15_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nShould use fallback language (plaintext)\n```\n\n----------------------------------------\n\nTITLE: Styling Special Languages in Shiki\nDESCRIPTION: This example shows how Shiki handles and styles special language types, specifically plaintext. It demonstrates that even non-programming languages can be formatted distinctly.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/a.md#2025-04-15_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSpecial languages should be styled\n```\n\n----------------------------------------\n\nTITLE: Importing @shikijs/langs-precompiled Package\nDESCRIPTION: This code snippet shows the package name for importing precompiled languages for Shiki. It's designed to work in pure JavaScript environments and requires ES2024+.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/langs-precompiled/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @shikijs/langs-precompiled\n```\n\n----------------------------------------\n\nTITLE: Highlighting JavaScript Code with Shiki\nDESCRIPTION: This snippet demonstrates JavaScript code highlighting using Shiki. It includes line highlighting, a custom filename, and a regex pattern for additional styling.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/a.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('it works!')\n\nconst a = 1\nconsole.log(a)\n```\n\n----------------------------------------\n\nTITLE: Logging a Variable in JavaScript\nDESCRIPTION: This snippet demonstrates declaring a constant variable and logging it to the console. It's a basic example of JavaScript syntax and output.\nSOURCE: https://github.com/shikijs/shiki/blob/main/packages/rehype/test/fixtures/c.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = 2\nconsole.log(b)\n```"
  }
]