[
  {
    "owner": "caplin",
    "repo": "flexlayout",
    "content": "TITLE: Basic FlexLayout React Component Implementation\nDESCRIPTION: Complete example of a React component using FlexLayout with a factory function to render tab contents based on component type. Shows how to create a model from JSON and use it with the Layout component.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst model = Model.fromJson(json);\n\nfunction App() {\n\n  const factory = (node) => {\n    var component = node.getComponent();\n\n    if (component === \"placeholder\") {\n      return <div>{node.getName()}</div>;\n    }\n  }\n\n  return (\n    <Layout\n      model={model}\n      factory={factory} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlexLayout JSON Configuration\nDESCRIPTION: JSON configuration for creating a basic layout with two tabsets, each containing a single tab. This structure defines the initial layout for a FlexLayout component.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar json = {\n    global: {},\n    borders: [],\n    layout: {\n        type: \"row\",\n        weight: 100,\n        children: [\n            {\n                type: \"tabset\",\n                weight: 50,\n                children: [\n                    {\n                        type: \"tab\",\n                        name: \"One\",\n                        component: \"placeholder\",\n                    }\n                ]\n            },\n            {\n                type: \"tabset\",\n                weight: 50,\n                children: [\n                    {\n                        type: \"tab\",\n                        name: \"Two\",\n                        component: \"placeholder\",\n                    }\n                ]\n            }\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing FlexLayout Components in JavaScript\nDESCRIPTION: Basic import statement to use the Layout and Model components from the FlexLayout library.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout, Model} from 'flexlayout-react';\n```\n\n----------------------------------------\n\nTITLE: Adding Tab to TabSet\nDESCRIPTION: This code demonstrates how to add a new tab to a tabset using the `addTabToTabSet` method of the Layout Component in FlexLayout. It adds a new grid component to the tabset with the ID \"NAVIGATION\", where `layoutRef` is a React ref to the Layout element.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nlayoutRef.current.addTabToTabSet(\"NAVIGATION\", {type:\"tab\", component:\"grid\", name:\"a grid\"});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Grid Component to Tabset\nDESCRIPTION: This code snippet demonstrates how to add a new grid component to the center of a tabset using the FlexLayout library. It utilizes the `addNode` action to create a new tab with the specified type, component, name, and ID, placing it in the center of the tabset with the given ID at the specified tab position.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nmodel.doAction(FlexLayout.Actions.addNode(\n    {type:\"tab\", component:\"grid\", name:\"a grid\", id:\"5\"},\n    \"1\", FlexLayout.DockLocation.CENTER, 0));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Switching with FlexLayout\nDESCRIPTION: Example of applying and dynamically changing themes in FlexLayout using className and a container reference. This allows switching between themes like light and dark at runtime.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    <div ref={containerRef} className=\"flexlayout__theme_light\">\n        <Layout model={model} factory={factory} />\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Rendering in FlexLayout\nDESCRIPTION: Example of using the onRenderTab prop to customize how tabs are rendered in FlexLayout. This demonstrates adding a custom button to the tab buttons area.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nonRenderTab = (node: TabNode, renderValues: ITabRenderValues) => {\n    // renderValues.leading = <img style={{width:\"1em\", height:\"1em\"}}src=\"images/folder.svg\"/>;\n    // renderValues.content += \" *\";\n    renderValues.buttons.push(<img key=\"menu\" style={{width:\"1em\", height:\"1em\"}} src=\"images/menu.svg\"/>);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabset Rendering in FlexLayout\nDESCRIPTION: Example of using the onRenderTabSet prop to customize tabset headers by adding buttons to both sticky and regular button areas. Includes an example of adding a new tab button with an action handler.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nonRenderTabSet = (node: (TabSetNode | BorderNode), renderValues: ITabSetRenderValues) => {\n    renderValues.stickyButtons.push(\n        <button\n            key=\"Add\"\n            title=\"Add\"\n            className=\"flexlayout__tab_toolbar_button\"\n            onClick={() => {\n                model.doAction(Actions.addNode({\n                    component: \"placeholder\",\n                    name: \"Added \" + nextAddIndex.current++\n                }, node.getId(), DockLocation.CENTER, -1, true));\n            }}\n        ><AddIcon/></button>);\n\n    renderValues.buttons.push(<img key=\"menu\" style={{width:\"1em\", height:\"1em\"}} src=\"images/menu.svg\"/>);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events on Nodes\nDESCRIPTION: This code snippet shows how to handle events on FlexLayout nodes by adding an event listener within a React component's `useEffect` hook. It demonstrates setting an event listener for the \"save\" event on a given node, which is triggered before the node is serialized to JSON. The event listener saves subject in the flexlayout node tree. Dependencies: React's useEffect hook.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nfunction MyComponent({node}) {\n\n      useEffect(() => {\n        // save subject in flexlayout node tree\n        node.setEventListener(\"save\", () => {\n             node.getConfig().subject = subject;\n           };\n        }, []);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Changing FlexLayout Theme Programmatically\nDESCRIPTION: Code snippet showing how to change the FlexLayout theme at runtime by updating the className of the container element using a reference.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    containerRef.current!.className = \"flexlayout__theme_dark\"\n```\n\n----------------------------------------\n\nTITLE: Updating Model Attributes\nDESCRIPTION: This example demonstrates how to update the model attributes of a FlexLayout instance. It specifically shows how to increase the size of the splitters using the `updateModelAttributes` action, which can be useful for improving usability on small devices. It takes `splitterSize` as input.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nmodel.doAction(FlexLayout.Actions.updateModelAttributes({\n    splitterSize:40\n}));\n```\n\n----------------------------------------\n\nTITLE: Get current document/window in popout\nDESCRIPTION: This JavaScript code shows how to get the current document and window objects within a FlexLayout popout window. It uses the `ownerDocument` property of a React ref to access the document and then the `defaultView` to get the window object.  This is needed because popouts use different document and window scopes.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst currentDocument = selfRef.current.ownerDocument;\n    const currentWindow = currentDocument.defaultView!;\n```\n\n----------------------------------------\n\nTITLE: Installing FlexLayout with npm\nDESCRIPTION: Command to install the FlexLayout React package using npm package manager.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install flexlayout-react\n```\n\n----------------------------------------\n\nTITLE: Importing FlexLayout CSS Theme\nDESCRIPTION: Import statement for adding the light theme CSS styling to your React application.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'flexlayout-react/style/light.css';\n```\n\n----------------------------------------\n\nTITLE: Including FlexLayout CSS via HTML Link\nDESCRIPTION: HTML link tag to include the FlexLayout light theme stylesheet in your HTML document.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"node_modules/flexlayout-react/style/light.css\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for a Multi-Splitter Layout\nDESCRIPTION: Example of modifying global options to change the layout appearance by disabling tab strips, effectively turning the layout into a multi-splitter without tabs or drag and drop functionality.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n global: {tabSetEnableTabStrip:false},\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Examples\nDESCRIPTION: This command compiles the FlexLayout project and runs the examples using pnpm. It starts a development server that watches for changes in the flexlayout and demo directories, automatically refreshing the browser upon modification. This assumes pnpm is installed and configured.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command is used to install the dependencies for the FlexLayout project using pnpm.  It ensures that all required packages are available for building and running the project.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building NPM Distribution\nDESCRIPTION: This command builds the npm distribution for the FlexLayout project using pnpm. It packages the library for distribution to npm, creating a production-ready build.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests\nDESCRIPTION: This command runs the Playwright tests for the FlexLayout project using pnpm. Playwright is a testing framework for web applications. This requires that the demo application is already running.\nSOURCE: https://github.com/caplin/flexlayout/blob/master/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\npnpm playwright\n```"
  }
]