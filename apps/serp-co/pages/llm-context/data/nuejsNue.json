[
  {
    "owner": "nuejs",
    "repo": "nue",
    "content": "TITLE: Basic Nue Component Template Example in HTML\nDESCRIPTION: This snippet demonstrates a basic Nue component template using HTML with Nue's template syntax. It shows how to create a component with dynamic class binding, image source binding, conditional rendering with the :if directive, and slot usage for content insertion.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{ type }\">\n  <img src=\"{ img }\">\n  <aside>\n    <h3>{ title }</h3>\n    <p :if=\"desc\">{ desc }</p>\n    <slot/>\n  </aside>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission Event Handler in Nue\nDESCRIPTION: This snippet shows how to create a form with an event handler that handles submission, processes input via the model, and clears the form. It demonstrates the pattern of views detecting user actions and delegating processing to the model.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { model } from './model/index.js'\n</script>\n\n<form @name=\"chat-form\" @submit.prevent=\"submit\">\n  <textarea name=\"body\"></textarea>\n  <button class=\"primary\"><icon key=\"send\"/></button>\n  <script>\n    submit(e) {\n      const body = e.target.body.value.trim()\n      if (body) {\n        const user = model.users.get(this.id)\n        user.threads.reply(body)\n        e.target.body.value = ''\n      }\n    }\n  </script>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Sharing Code Between Components in Nue Framework\nDESCRIPTION: Demonstrates how to share code between components in Nue. It includes examples of importing shared code, defining a shopping cart component, and an 'Add to cart' button component that uses the shared cart functionality.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<!-- Shared code -->\n<script>\n  import { shopping_cart, addToCart } from './cart.js';\n</script>\n\n<!-- Shopping cart component -->\n<article @name=\"shopping-cart\">\n  <div :for=\"item in items\">\n    <h3>{ item.price }</h3>\n    <p>{ item.amount }</p>\n  </div>\n\n  <script>\n    constructor() {\n      this.items = shopping_cart.getItems(); // Load initial items\n    }\n  </script>\n</article>\n\n<!-- \"Add to cart\" component -->\n<button @name=\"add-to-cart\" @click=\"click\">\n  <script>\n    click() {\n      addToCart(this.data); // Add item to the cart\n    }\n  </script>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Model Operations in Nue.js\nDESCRIPTION: Demonstrates a comprehensive model API with authentication, data fetching with caching, search functionality, and an event system for state management.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport const model = {\n  async login(email, password) {\n    const session = await authenticateUser(email, password)\n    storeSession(session)\n    model.emit('login', session.user)\n  },\n\n  async get(id) {\n    if (isCached(id)) return getFromCache(id)\n    const data = await fetchFromAPI(id)\n    const item = transformForDisplay(data)\n    addToCache(id, item)\n    return item\n  },\n\n  search(query) {\n    const results = await fetchSearch(query)\n    return results.map(r => ({\n      ...r,\n      country: convertCodeToCountryName(r.countryCode)\n    }))\n  },\n\n  on(event, callback) {\n    addListener(event, callback)\n    return () => removeListener(event, callback)\n  },\n\n  emit(event, data) {\n    notifyListeners(event, data)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nue Component Structure in HTML\nDESCRIPTION: Basic structure of a Nue component showing template syntax with dynamic properties and conditional rendering\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{ type }\">\n  <img src=\"{ img }\">\n  <aside>\n    <h3>{ title }</h3>\n    <p :if=\"desc\">{ desc }</p>\n    <slot/>\n  </aside>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Nue Application Router\nDESCRIPTION: Demonstrates how to import, configure, and initialize the Nue application router. It sets up URL patterns, parameter tracking, and session/persistent storage options.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '/@nue/app-router.js'\n\nrouter.configure({\n  route: '/app/:type/:filter',\n  url_params: ['query', 'id', 'start', 'sort'],\n  session_params: ['nav_open'],\n  persistent_params: ['grid_view']\n})\n\nrouter.initialize({ root: document.body })\n```\n\n----------------------------------------\n\nTITLE: Basic :for Loop in Nue Templates\nDESCRIPTION: The :for directive enables iteration over arrays, displaying content for each item. The example shows looping through language items.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li :for=\"item in items\">\n    { item.lang } = { item.text }\n  </li>\n\n  <script>\n    items = [\n      { lang: 'en', text: 'Hello' },\n      { lang: 'es', text: 'Hola' },\n      { lang: 'it', text: 'Ciao' },\n      { lang: 'fi', text: 'Moi' }\n    ];\n  </script>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Pretty Date Component with Scripting\nDESCRIPTION: Complete example of a component with properties, constructor, and methods using embedded script\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<time @name=\"pretty-date\" :datetime=\"toIso(date)\">\n  { pretty(date) }\n\n  <!-- Properties and methods -->\n  <script>\n    // Property to hold the locale for date formatting\n    locale = 'en-US';\n\n    // Constructor method runs when the component is created\n    constructor({ date, locale }) {\n      if (locale) this.locale = locale;\n      this.date = date;\n    }\n\n    // Method to format the date into a readable string\n    pretty(date) {\n      return date.toLocaleDateString(this.locale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n\n    // Method to convert the date to ISO format\n    toIso(date) {\n      return date.toISOString().slice(0, 10);\n    }\n  </script>\n</time>\n```\n\n----------------------------------------\n\nTITLE: Attribute Interpolation in Nue Templates\nDESCRIPTION: Demonstrates different methods for interpolating values in HTML attributes, including bracket syntax and Vue-style binding.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attribute value with brackets -->\n<input type=\"{ type }\"></input>\n\n<!-- Vue-style binding also works -->\n<input :type=\"type\"></input>\n\n<!-- String interpolation with brackets -->\n<div class=\"gallery { class }\">\n\n<!-- A more complex example -->\n<div style=\"background: url('{ background }')\">\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Form Island - Nue - HTML\nDESCRIPTION: Defines an interactive island named 'join-list' using an HTML form structure within a `.dhtml` file. It includes input fields for name and email, a submit button, and an inline script tag containing a `submit` function. The `@submit.prevent` attribute intercepts the default form submission to allow custom handling via JavaScript, likely using `fetch()` to send data. This component renders as static HTML initially and becomes interactive on the client via the Nue runtime.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form @name=\"join-list\" @submit.prevent=\"submit\" autocomplete=\"on\">\n  <label>\n    <span>Your name</span>\n    <input type=\"text\" name=\"name\" placeholder=\"Example: John Doe\" required>\n  </label>\n  <label>\n    <span>Your email</span>\n    <input type=\"email\" name=\"email\" placeholder=\"your@email.com\" required>\n  </label>\n  <button>Submit</button>\n  <script>\n    function submit() {\n      // Send the form data with fetch()\n    }\n  </script>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using :else with :if in Nue Templates\nDESCRIPTION: The :else directive provides an alternative content block when the :if condition is falsy, creating an if-else structure in templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1 :if=\"cool\">I'm cool!</h1>\n  <h1 :else>I'm ordinary</h1>\n\n  <button @click=\"cool = !cool\">Toggle</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Text Expressions in Nue Templates\nDESCRIPTION: Text expressions in Nue are placed inside single curly brackets and display the value of a property from the component instance. These expressions update dynamically when the property changes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span>Text: { text }</span>\n```\n\n----------------------------------------\n\nTITLE: Defining an Interactive Image Gallery Component in Nue.js HTML\nDESCRIPTION: Provides the source code for an interactive `image-gallery` Nue component. It includes HTML for navigation controls (arrows, dots), an image display using reactive data binding (`{ basedir }/{ images[index] }`), event handlers (`@click`) to update state, conditional rendering (`:if`), loops (`:for`), and a script block initializing and managing the component's state variable `index`.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"image-gallery\" class=\"image-gallery\" translate=\"no\">\n\n  <!-- Action to seek to the previous image -->\n  <a class=\"seek prev\" @click=\"index--\" :if=\"index\"></a>\n\n  <!-- The currently displayed image -->\n  <img src=\"{ basedir }/{ images[index] }\">\n\n  <!-- Action to seek to the next image -->\n  <a class=\"seek next\" @click=\"index++\" :if=\"index + 1 < images.length\"></a>\n\n  <!-- The gray dots below the image -->\n  <nav>\n    <a :for=\"src, i in images\" class=\"{ current: i == index }\" @click=\"index = i\"></a>\n  </nav>\n\n  <!-- Scripting section -->\n  <script>\n\n    // Image index representing the component state\n    index = 0;\n\n  </script>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Keyboard Shortcut Controller\nDESCRIPTION: This controller handles keyboard shortcuts across the application. It demonstrates how to create a controller that manages app-wide keyboard navigation and shortcuts, keeping this functionality separate from individual views.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '/@nue/app-router.js'\n\ndocument.addEventListener('keydown', e => {\n  const { target, key } = e\n  if (target.oninput || target.form) return\n\n  if (key == 'Escape' && !document.querySelector(':popover-open')) {\n    router.del('id')\n  }\n\n  if ('jk'.includes(key)) {\n    const next = getNext(key == 'j')\n    next?.focus()\n    if (router.state.id) next?.click()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Encapsulated Model Operations in Nue.js\nDESCRIPTION: Shows how to encapsulate model complexity by implementing internal operations that hide implementation details while exposing a clean interface for data handling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// app/model/customers.js\nfunction enrichCustomerData(customer) {\n  return {\n    ...customer,\n    lifetimeValue: calculateRevenue(customer.purchases)\n  }\n}\n\nexport const customers = {\n  async find(filters) {\n    const results = await db.customers.find(filters)\n    return results.map(enrichCustomerData)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Event Object in Method Handlers in Nue.js HTML\nDESCRIPTION: Demonstrates how Nue automatically passes the native DOM Event object as the last argument to method handlers. If needed explicitly, it can be named `$event`. The example shows accessing event properties like `event.target.textContent` within different method signatures.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <button @click=\"first\">First</button>\n  <button @click=\"second('Hello')\">World</button>\n  <button @click=\"third('Hello', $event, 'World')\">Nue</button>\n\n  <script>\n    // prints \"First\"\n    first($event) {\n      console.info($event.target.textContent); // Log the button text\n    }\n\n    // prints \"Hello World\"\n    second(hey, $event) {\n      console.info(hey, $event.target.textContent); // Log hello and button text\n    }\n\n    // prints \"Hello Nue World\"\n    third(hey, $event, who) {\n      console.info(hey, $event.target.textContent, who); // Log all three\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods in Nue Framework Components\nDESCRIPTION: Demonstrates how to implement lifecycle methods in a Nue component. It includes examples for constructor, mounted, updated, and unmounted methods, showing how to hook custom functionality to different stages of a component's lifecycle.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\n  // Called when the component is created. Data/args is provided as the\n first argument.\n  constructor(data) {\n    // Initialization logic here\n  }\n\n  // Called after the component is mounted on the page.\n  mounted(data) {\n    // Logic to run after mounting here\n  }\n\n  // Called after the component is updated.\n  updated() {\n    // Logic to run after an update here\n  }\n\n  // Called after the component is removed from the page.\n  unmounted() {\n    // Cleanup logic here\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Modern Form Handling with Nue JS\nDESCRIPTION: A modern implementation of form handling using Nue JS, demonstrating event prevention, native browser validation, and asynchronous form submission with fetch API.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form @submit.prevent=\"submit\">\n  <input type=\"email\" name=\"email\" placeholder=\"your@address.com\" required>\n  <button>Submit</button>\n\n  <script>\n    // input validation is natively taken care of by the browser\n    async submit({ target }) {\n      await fetch(`/api/leads?email=${target.email.value}`)\n      location.href = '/thank-you'\n    }\n  </script>\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Nue Single-page Applications\nDESCRIPTION: A typical file structure for a Nue single-page application showing the separation of concerns. The structure divides the application into model (business logic), view (UI components), controllers (routing and interactions), and design (styling) directories.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/single-page-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp/\n├── index.html        # Main entry point for the application\n├── app.yaml          # Application configuration\n├── model/            # Business logic and data operations\n├── view/             # UI components and templates\n├── controllers/      # Routing and interaction handling\n├── design/           # Application styling\n└── img/              # Application-specific images\n```\n\n----------------------------------------\n\nTITLE: Configuring Router in Nue Application\nDESCRIPTION: This snippet demonstrates how to configure the Nue router by defining URL parameters and route patterns. It shows the basic setup needed before using the router for navigation and state management.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.configure({\n  url_params: ['search', 'start', 'sort', 'asc'],\n  route: '/app/:type/:id'\n})\n```\n\n----------------------------------------\n\nTITLE: Data Passing in Components\nDESCRIPTION: Examples of passing data to components in both Markdown and HTML formats\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n// application data (items) vs direct value (1)\n[image-gallery :items=\"screenshots\" index=\"1\"]\n```\n\nLANGUAGE: html\nCODE:\n```\n<image-gallery :items=\"products\" index=\"2\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Component in HTML - Nue Framework\nDESCRIPTION: Example of a clean HTML template for a user profile component using Nue's templating syntax. Shows data binding, event handling, and semantic HTML structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article @name=\"user-profile\">\n  <header>\n    <img :src=\"user.avatar\" class=\"avatar\">\n    <div>\n      <h2>{ user.name }</h2>\n      <p>{ user.email }</p>\n    </div>\n  </header>\n  <dl>\n    <dt>Company</dt>\n    <dd>{ user.company }</dd>\n    <dt>Plan</dt>\n    <dd>{ user.plan }</dd>\n    <dt>Member since</dt>\n    <dd>{ formatDate(user.joined) }</dd>\n  </dl>\n  <footer>\n    <button @click=\"edit\">Edit Profile</button>\n  </footer>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Reactive Counter Component in Nue JS (HTML)\nDESCRIPTION: This HTML snippet demonstrates a Nue JS counter component using idiomatic Nue directives such as @name for component identification and @click for incrementing the count. The component initializes state with a <script> block. Required dependencies include the Nue compiler/runtime. Parameters include the count variable, and outputs are dynamic text showing count with proper pluralization. The snippet is intended as source code before compilation and will be transpiled for browser compatibility.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<button @name=\\\"counter\\\" @click=\\\"count++\\\">\\n  Clicked { count } { count == 1 ? 'time' : 'times' }\\n  <script>count = 0</script>\\n</button>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing View Mode Toggle with Nue Router\nDESCRIPTION: Example of how to implement a view mode toggle using the Nue router. It demonstrates the integration of router state with HTML and JavaScript in a component.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<nav @name=\"view-toggler\">\n  <button @click=\"toggleGridView\" :aria-pressed=\"!router.state.grid_view\">\n    <icon key=\"list\"/>\n  </button>\n  <button @click=\"toggleGridView\" :aria-pressed=\"router.state.grid_view\">\n    <icon key=\"grid\"/>\n  </button>\n  <script>\n    toggleGridView() {\n      router.toggle('grid_view')\n    }\n  </script>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Using a Method Event Handler (@click) in Nue.js HTML\nDESCRIPTION: Illustrates attaching an event handler (`@click`) that calls a component method (`close`) defined within the component's script block. This pattern is preferred for more complex logic, such as closing a dialog element (`this.root.close()`) and clearing the URL hash (`location.hash = ''`).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<dialog>\n  <button @click=\"close\">Close</button>\n\n  <script>\n    close() {\n      this.root.close(); // Close the dialog\n      location.hash = ''; // Clear the URL hash\n    }\n  </script>\n</dialog>\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Multiple State Storage Types\nDESCRIPTION: This snippet shows how to configure the router with different types of state parameters: URL parameters, session parameters, and persistent parameters. It demonstrates Nue's flexible approach to state management.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.configure({\n  route: '/app/:type/:id',\n  url_params: ['search', 'start', 'sort', 'asc'],\n  session_params: ['nav_opened'],\n  persistent_params: ['show_grid_view']\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Attributes with :attr Directive\nDESCRIPTION: The :attr directive renders a DOM attribute for each property in an object, allowing dynamic attribute generation in Nue templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<p :attr=\"data\">\n  <script>\n    data = {\n      title: 'My title',\n      alt: 'My alt',\n    };\n  </script>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Looping Through Object Entries in Nue\nDESCRIPTION: Demonstrates how to iterate through object key-value pairs using Object.entries() with the :for directive.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li :for=\"[lang, text] in Object.entries(items)\">\n    { lang } = { text }\n  </li>\n  <script>\n    items = {\n      en: 'Hello',\n      es: 'Hola',\n      it: 'Ciao',\n      fi: 'Moi'\n    };\n  </script>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Image Gallery Component with Nested Components\nDESCRIPTION: Complex component structure showing component nesting and iteration using the :for directive\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<section @name=\"image-gallery\" class=\"gallery\">\n  <header>\n    <h1>{ title }</h1>\n    <p>{ desc }</p>\n  </header>\n\n  <!-- media-object looped -->\n  <media-object :for=\"item in items\" :bind=\"item\"/>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Creating a View Toggle Component with Persistent State\nDESCRIPTION: This component implements buttons to toggle between grid and list views, using the router's persistent state. It demonstrates how components can modify router state without knowing where or how that state is stored.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<nav @name=\"view-toggler\">\n  <button @click=\"toggleGridView\"\n    :aria-pressed=\"!router.state.show_grid_view\"\n    title=\"Toggle table view\"><icon key=\"list\"/></button>\n\n  <button @click=\"toggleGridView\"\n    :aria-pressed=\"router.state.show_grid_view\"\n    title=\"Toggle grid view\"><icon key=\"grid\"/></button>\n\n  <script>\n    toggleGridView() {\n      router.toggle('show_grid_view')\n    }\n  </script>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Example of Basic Nuemark Syntax\nDESCRIPTION: This snippet demonstrates the basic Nuemark syntax for creating content with a heading, text, button, and image. It shows how Nuemark allows for pure content focus without HTML, CSS, or JavaScript.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-nuemark/index.md#2025-04-23_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n[.stack]\n  # Content is king\n  Web design is 100% content and 95% typography\n\n  [button \"Learn more\" href=\"/docs\"]\n  ---\n  [! typography.png ]\n```\n\n----------------------------------------\n\nTITLE: Combined Class Binding in Nue\nDESCRIPTION: Shows how to combine object notation with other bracket expressions for dynamic class binding in Nue templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<label :class=\"field { is-active: isActive } { getErrorClass() }\"></label>\n```\n\n----------------------------------------\n\nTITLE: Adding a Global Click Event Handler in JavaScript\nDESCRIPTION: This JavaScript function attaches a global click event listener that closes active popovers when a user clicks any link inside one. It uses event delegation and .closest() to detect if the target is inside an element with the [popover] attribute, and conditionally invokes .hidePopover(). This ensures UI consistency across components. This code depends on the browser DOM API and is suitable for single-page applications with popover menu structures.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('click', e => {\\n  const el = e.target\\n\\n  // hide popover menus\\n  const menu = el.closest('[popover]')\\n  if (menu && el.matches('a')) menu.hidePopover()\\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Content Panel with Router State Listener\nDESCRIPTION: This component listens for changes in the router state and updates its content accordingly. It demonstrates how to bind to multiple router parameters and use the model to filter data based on those parameters.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<section @name=\"content-panel\">\n  <header>\n    <h2>{ renderHeader() }s</h2>\n    <nav>...</nav>\n  </header>\n  <div id=\"content_wrap\"/>\n  <script>\n    mounted() {\n      router.bind('search start sort asc', args => {\n        const data = model.filter(args)\n        this.mountChild('data-collection', content_wrap, data)\n        this.update()\n      })\n    }\n    renderHeader() { /* header logic */ }\n  </script>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Class Attribute Binding in Nue\nDESCRIPTION: Demonstrates Nue's special object notation for conditional class binding, allowing multiple classes to be toggled based on state.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<label :class=\"field { is-active: isActive, has-error: hasError }\"></label>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component with Nue.js\nDESCRIPTION: This code snippet illustrates a form component structure using Nue.js annotations. It includes input fields for name and email (with the email field highlighted as important), a textarea for requirements, and a submission button. The structure follows consistent labeling patterns for a cohesive design.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/scaleable-design-system.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form @name=\"join-list\">\n  <label>\n    <h4>Your name</h4>\n    <input type=\"text\" name=\"name\" required>\n  </label>\n\n> <label>\n>   <h4>Your email</h4>\n>   <input type=\"email\" ••name=\"email\" required••>\n> </label>\n\n  <label>\n    <h4>Your requirements</h4>\n    <textarea name=\"feedback\" placeholder=\"Type here...\"/>\n  </label>\n  <button>I'm interested</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Elements in Loops\nDESCRIPTION: Shows how to use the standard 'hidden' property to conditionally hide elements within a :for loop.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"todo in todos\" :hidden=\"!todo.is_complete\">\n  {{ todo.name }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Passing Attributes to Nue Components\nDESCRIPTION: Examples of passing static and dynamic attributes to Nue components, including strings, numbers, arrays, and objects through HTML attributes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Static parameter -->\n<media title=\"Introduction to Nue\"/>\n\n<!-- Dynamic parameter -->\n<media :title=\"item.title\" :class=\"item.class\"/>\n\n<!-- Array value -->\n<media-list :items=\"items\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Component for Blog Posts\nDESCRIPTION: Example of creating a custom component to render blog posts with full control over the output format.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"blog-posts\">\n  <div :for=\"post in posts\">\n    <img :src=\"post.thumb\" alt=\"{ post.title } thumbnail\">\n    <h3>{ post.title }</h3>\n    <p>{ post.description }</p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with :else-if in Nue\nDESCRIPTION: The :else-if directive allows for multiple conditional branches in Nue templates, creating an if-else if-else structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<b :if=\"type == 'A'\">A</b>\n<b :else-if=\"type == 'B'\">B</b>\n<b :else-if=\"type == 'C'\">C</b>\n<b :else>Not A/B/C</b>\n```\n\n----------------------------------------\n\nTITLE: Embedding an Island in a Layout Module - Nue - HTML\nDESCRIPTION: Shows how to embed an island named 'join-list' within an HTML layout template, specifically inside a `<footer>` component defined with `@name=\"pagefoot\"`. The island is included using a custom tag syntax `<join-list/>`. This integrates the interactive form directly into a reusable layout structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<footer @name=\"pagefoot\">\n  <h3>Join our mailing list</h3>\n  <p>Be the first to know about our new releases</p>\n  <join-list/>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Coordinating Model and Views with Nue Router\nDESCRIPTION: Shows how to use the router to coordinate between the model and views in a Nue application. It demonstrates fetching data based on state changes and mounting components accordingly.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.bind('type filter query', async (state) => {\n  const data = await model.getItems(state)\n  mount('item-list', main, data)\n})\n\nrouter.bind('id:detail', (state) => {\n  if (state.id) mount('item-detail', aside, model.get(state.id))\n  else aside.innerHTML = ''\n}, 'sidebar')\n```\n\n----------------------------------------\n\nTITLE: HTML vs Text Expression Rendering in Nue\nDESCRIPTION: Demonstrates the difference between single brackets (escaped HTML) and double brackets (rendered HTML) in Nue templates. Also shows Vue-compatible syntax for HTML rendering.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Value is escaped: Hello, &lt;b&gt;World!&lt;/b&gt; -->\n<p>{ value }</p>\n\n<!-- Value is rendered as HTML: Hello, <b>World!</b> -->\n<p>{{ value }}</p>\n\n<!-- Same as the above (Vue compatibility) -->\n<p :html=\"value\"/>\n```\n\n----------------------------------------\n\nTITLE: Replacing an Array for UI Updates with Non-Mutating Methods in Nue.js JavaScript\nDESCRIPTION: Provides a JavaScript example within a component method (`search`) showing how to handle UI updates when using non-mutating array methods like `filter()`. To trigger Nue's reactivity, the component's array property (`this.items`) must be explicitly reassigned to the new array returned by the method.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nsearch() {\n  this.items = this.items.filter(item => item.text.match(/Foo/));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Image Component with Nue.js\nDESCRIPTION: This snippet shows a figure component implementation with Nue.js, featuring a lazy-loaded image with optional caption. The code demonstrates a modification replacing a figcaption element with a paragraph element, and includes a constructor method to handle caption data.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/scaleable-design-system.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<figure @name=\"img\" :class=\"class\" :id=\"id\">\n  <img loading=\"lazy\" :alt=\"alt\" :src=\"_ || src\">\n\n-  <figcaption :if=\"caption\">{{ caption }}</figcaption>\n\n+  <p :if=\"caption\">{{ caption }}</p>\n\n  <script>\n    •constructor(data)• {\n      this.caption = data.caption || ''\n    }\n  </script>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Component Mounting in Layout Modules\nDESCRIPTION: Examples of mounting components in HTML layout modules using custom elements\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<image-gallery/>\n\n<!-- with \"heroic\" styling -->\n<image-gallery class=\"heroic\"/>\n```\n\n----------------------------------------\n\nTITLE: Function Calls in Nue Templates\nDESCRIPTION: Expressions in Nue can call instance methods defined in the component's script section, allowing for formatted output and other computations.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<time :datetime=\"date.toISOString()\">\n  { prettyTime(date) }\n\n  <script>\n    prettyTime(date) {\n      return MY_CUTE_FORMAT.format(date);\n    }\n  </script>\n</time>\n```\n\n----------------------------------------\n\nTITLE: Simple Counter with Reactive Updates in Nue JS\nDESCRIPTION: A minimal Nue JS button component that demonstrates automatic reactivity when state changes through click events, with conditional rendering for singular/plural text.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button @click=\"count++\">\n  Clicked { count } { count == 1 ? 'time' : 'times' }\n  <script>count = 0</script>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using a Reactive Component in Layout Files\nDESCRIPTION: HTML implementation showing how to include a reactive component within layout files with custom properties.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<join-list cta=\"Submit form\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a High-Performance Model with Rust and WebAssembly\nDESCRIPTION: Shows how to implement a model layer in Rust for high-performance operations and expose it to JavaScript via WebAssembly, enabling efficient handling of large datasets.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[wasm_bindgen]\npub struct Model {\n  events: Vec<String>,\n}\n\n#[wasm_bindgen]\nimpl Model {\n  pub fn search(&self, query: String) -> String {\n    let matches = self.events.iter()\n      .filter(|e| e.contains(&query))\n      .collect::<Vec<_>>();\n    serde_json::to_string(&matches).unwrap()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array-based Reactivity in Nue JS\nDESCRIPTION: A Nue JS component demonstrating automatic reactivity with array operations like push() and pop(), using a loop directive to render multiple images based on array content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <p>\n    <button @click=\"addFruit\">Add</button>\n    <button @click=\"images.pop()\" :disabled=\"!images[4]\">Remove</button>\n  </p>\n\n  <img :for=\"img in images\" :src=\"/demo/img/{img}.jpg\">\n\n  <script>\n    images = ['popcorn', 'peas', 'lemons', 'tomatoes']\n\n    addFruit() {\n      const img = this.images[Math.floor(Math.random() * 4)]\n      this.images.push(img)\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Manipulation Component in Nue Framework\nDESCRIPTION: Shows how to create a component that manipulates an array of users. It includes a button to add users and a list to display them, demonstrating Nue's syntax for event handling, rendering loops, and script integration.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"array-demo\" class=\"array-demo\">\n\n  <button @click=\"add\" :disabled=\"items[5]\">Add user</button>\n\n  <ul>\n    <li :for=\"el of items\">\n      <img :src=\"el.img\">\n      <h3>{ el.name }</h3>\n      <p>{ el.role }</p>\n    </li>\n  </ul>\n\n  <script>\n\n    // render first three users\n    constructor({ users }) {\n      this.items = users.slice(0, 2)\n      this.all = users\n    }\n\n    // insert a new item\n    add() {\n      const { items, all } = this\n      const item = all[items.length]\n      if (item) items.push(item)\n    }\n  </script>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reactive Mailing List Component\nDESCRIPTION: HTML implementation of a reactive component that handles form submission and updates its state based on user interaction, with conditional rendering based on submission status.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"join-list\">\n\n  <h4 :if=\"sessionStorage.joined\">\n    You have successfully joined the mailing list. Thank you for your interest!\n  </h4>\n\n  <form :else @submit.prevent=\"submit\">\n    <p :if=\"desc\">{ desc }</p>\n    <input type=\"email\" name=\"email\" placeholder=\"Your email\" required>\n    <textarea name=\"comment\" placeholder=\"Feedback (optional)\"></textarea>\n    <button class=\"secondary\">{ cta || 'Join mailing list' }</button>\n  </form>\n\n  <script>\n    submit({ target }) {\n      const data = Object.fromEntries(new FormData(target).entries())\n\n      fetch('/public/members', {\n        'Content-Type': 'application/json',\n        body: JSON.stringify(data),\n        method: 'POST',\n      })\n\n      // change the state\n      sessionStorage.joined = true\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding to Specific Parameter Changes in Nue Router\nDESCRIPTION: Demonstrates how to use router.bind() to run callbacks on specific parameter changes. It includes examples of filtering data and mounting components based on state changes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.bind('query start', (state) => {\n  const data = model.filter(state)\n  mount('results', main, data)\n})\n\nrouter.bind('id:user', (state) => {\n  if (state.id) mount('user-detail', aside, model.get(state.id))\n}, 'details')\n```\n\n----------------------------------------\n\nTITLE: Custom Component with Filtering Logic\nDESCRIPTION: Advanced example of a custom component that includes JavaScript logic to filter posts based on tags.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"blog-posts\">\n  <div :for=\"post in posts\">\n    <img :src=\"post.thumb\" alt=\"{ post.title } thumbnail\">\n    <h3>{ post.title }</h3>\n    <p>{ post.description }</p>\n  </div>\n\n  <script>\n    constructor({ posts }) {\n      this.posts = posts.filter(post => post.tags.includes('design'))\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current State in Nue Router\nDESCRIPTION: Shows how to access the current state of the application using router.state. This includes path parameters, query parameters, and stored data.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// URL: /app/users/active?query=test&start=10\nconsole.log(router.state)\n\n{\n  type: 'users',\n  filter: 'active',\n  query: 'test',\n  start: 10,\n  nav_open: true,\n  grid_view: false\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Router Updates from Views in Nue\nDESCRIPTION: Demonstrates how views can trigger updates in the Nue router. This example shows an input field that updates the 'query' parameter in the router state.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<input @input=\"e => router.set({ query: e.target.value })\" type=\"search\"/>\n```\n\n----------------------------------------\n\nTITLE: Building Reusable Component Classes with CSS Layers\nDESCRIPTION: Shows how to create reusable component classes within the components layer, using the example of a card component with a notification variant. The example demonstrates component composition and nesting for context-specific styling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer components {\n  .card {\n    box-shadow: 0 0 2em #0001;\n    border: var(--border);\n    border-radius: 0.5em;\n    padding: 1.5em;\n    font-size: 95%;\n\n    &.notification {\n      background: url(/img/chat.svg) 10% center no-repeat;\n      background-size: 3rem;\n      padding-left: 6rem;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kebab-Case Key Modifiers (@keyup.page-down) in Nue.js HTML\nDESCRIPTION: Illustrates using a specific key name from `KeyboardEvent.key` (`PageDown`), converted to kebab-case (`.page-down`), as a modifier for a keyboard event (`@keyup`). This triggers the handler (`onPageDown`) only when the PageDown key is pressed.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<input @keyup.page-down=\"onPageDown\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Input Component with Router Integration\nDESCRIPTION: This component implements a search input that updates the application route when the user types. It demonstrates how to trigger route changes and maintain UI state based on the router's state.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"search-input\" class=\"search\" data-accesskey=\"/\">\n  <icon key=\"search\"/>\n  <input @input=\"search\" :value=\"value\" type=\"search\" placeholder=\"Search...\" :autofocus=\"value\">\n  <kbd><strong>⌘</strong></kbd><kbd>K</kbd>\n  <script>\n    value = router.state.search\n    search(e) {\n      router.set({ type: 'search', search: e.target.value, start: null })\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Event Modifiers (.prevent, .stop) in Nue.js HTML\nDESCRIPTION: Shows how to use event modifiers in Nue to alter standard DOM event behavior. `.prevent` calls `event.preventDefault()` (e.g., on form submit), `.stop` calls `event.stopPropagation()`, and modifiers can be chained (`@click.stop.prevent`) or used standalone.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<!-- Prevent the default event from occurring -->\n<form @submit.prevent=\"onSubmit\"></form>\n\n<!-- Modifiers can be chained -->\n<a @click.stop.prevent=\"doThat\"></a>\n\n<!-- Run the modifier only -->\n<form @submit.prevent></form>\n```\n\n----------------------------------------\n\nTITLE: Looping Through Components in Nue\nDESCRIPTION: Demonstrates how to create multiple instances of a component by iterating through an array with the :for directive.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<my-component :for=\"item in items\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Data within an Island - Nue - HTML\nDESCRIPTION: Shows the HTML template code within an island that accesses data passed to it. The `button` element displays the value of the `cta` variable if it exists, otherwise it defaults to 'Submit'. This demonstrates how islands can utilize data passed from their usage context (like Markdown front matter).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button>{ cta || 'Submit' }</button>\n```\n\n----------------------------------------\n\nTITLE: Using Index in :for Loops\nDESCRIPTION: Demonstrates how to access the index of items when iterating with the :for directive in Nue templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"(item, index) in items\">\n  { index }: { item.text }\n</li>\n```\n\n----------------------------------------\n\nTITLE: Using References in Nue Framework Components\nDESCRIPTION: Illustrates how to use references ($refs) in Nue components to obtain handles to nested DOM elements or components. It shows different ways of naming elements and accessing them in the component's script.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"my-component\">\n\n  <!-- Name a DOM node with the \"ref\" attribute -->\n  <figure ref=\"image\"></figure>\n\n  <!-- Or with the \"name\" attribute -->\n  <input name=\"email\" placeholder=\"Hey, dude\">\n\n  <!-- Custom elements are automatically named -->\n  <image-gallery/>\n\n  <!-- Refs work in templates too -->\n  <h3>{ $refs.email.placeholder }</h3>\n\n  <script>\n\n    // References are available after mount\n    mounted() {\n      // Get a handle to the image DOM node\n      const image = this.$refs.image;\n\n      // Get a handle to the image-gallery component API\n      const gallery = this.$refs['image-gallery'];\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: App Shell Component Implementation - Nue Framework\nDESCRIPTION: Example of an app shell component implementation showing layout structure and router initialization.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"app\" class=\"ui app\">\n  <nav-panel class=\"navigation panel\"/>\n  <main-panel class=\"card panel\"/>\n  <details-panel class=\"details card panel\"/>\n  <script>\n    mounted() {\n      router.initialize({ root: this.root })\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with :if in Nue\nDESCRIPTION: The :if directive conditionally renders elements based on the truthiness of an expression, allowing for dynamic content display.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<figcaption :if=\"caption\">{ caption }</figcaption>\n```\n\n----------------------------------------\n\nTITLE: Comparing Reactive Variable Initialization Across Frameworks\nDESCRIPTION: A comparison of reactive variable initialization syntax between React, Vue, Svelte, and Nue JS, highlighting Nue's simplicity by using standard JavaScript variable assignments without special wrappers.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from \"react\"\nconst [count, setCount] = useState(0)\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { ref } from 'vue'\nconst count = ref(0)\n```\n\nLANGUAGE: js\nCODE:\n```\nlet count = $state(0);\n```\n\nLANGUAGE: js\nCODE:\n```\ncount = 0\n```\n\n----------------------------------------\n\nTITLE: Using the :bind Directive in Nue Templates\nDESCRIPTION: The :bind directive makes object properties directly accessible from the component, simplifying data access especially when looping through components.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- Pass properties for the media object one by one -->\n<media-object :for=\"item in items\"\n  :title=\"item.title\"\n  :desc=\"item.desc\"\n  :img=\"item.img\"/>\n\n<!-- Or pass all properties at once with :bind -->\n<media-object :for=\"item in items\" :bind=\"item\"/>\n```\n\n----------------------------------------\n\nTITLE: Scoping Modifiers to Components with CSS Layers\nDESCRIPTION: Shows how to properly scope modifier classes within their component contexts using CSS layers. The example demonstrates nesting modifiers within a button component definition, including state modifiers using attribute selectors.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer components {\n  button {\n    padding: 0.5em 1em;\n    border-radius: 0.25em;\n\n    /* a modifier class */\n    .primary {\n      background-color: var(--main-500);\n      color: white;\n    }\n\n    &[aria-pressed=\"true\"] {\n      background: #2563eb;\n      color: white;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Inline Event Handler (@click) in Nue.js HTML\nDESCRIPTION: Shows how to define a simple JavaScript expression (`count++`) directly within an event handler attribute (`@click`). This allows for concise handling of simple user interactions, like incrementing a counter when a button is clicked.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<button @click=\"count++\">Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Using the '.enter' Key Modifier for Keyup Events in Nue.js HTML\nDESCRIPTION: Shows how to use a key modifier (`.enter`) with a keyboard event (`@keyup`). This ensures the associated handler (`submit`) is triggered only when the Enter key is pressed within the input field.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!-- Only call `submit` when the `key` is `Enter` -->\n<input @keyup.enter=\"submit\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Bootstrap Controller for Nue Application\nDESCRIPTION: This controller initializes the application by configuring the router, setting up event listeners, and handling authentication flow. It demonstrates how controllers coordinate between the model and views to bootstrap the application.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/interactivity.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '/@nue/app-router.js'\nimport { model } from '../model/index.js'\nimport { mount } from '/@nue/mount.js'\n\nrouter.configure({\n  route: '/app/:type/:filter',\n  url_params: ['query', 'id', 'start', 'sort', 'asc', 'grid']\n})\n\nmodel.on('authenticated', async () => {\n  mount('load-screen', window.app)\n  await model.load()\n  mount('app', window.app)\n})\n\naddEventListener('route:app', async () => {\n  if (!model.authenticated) mount('login', window.app)\n  await model.initialize()\n})\n```\n\n----------------------------------------\n\nTITLE: Boolean Attributes in Nue Templates\nDESCRIPTION: Nue automatically handles boolean attributes, including or excluding them based on the truthiness of the bound value.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button :disabled=\"is_disabled\">Press me</button>\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Apps in View Transitions\nDESCRIPTION: Example of targeting a specific app (blog) during view transitions to add animation classes to posts.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('route:blog', function() {\n  const posts = document.querySelectorAll('.post')\n  posts.forEach(post => post.classList.add('fade-in'))\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Design System Color Variables with CSS Custom Properties\nDESCRIPTION: Shows how to establish design system color constraints using CSS custom properties within a settings layer. The example defines a limited color palette with specific roles to maintain design consistency.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@layer settings {\n  :root {\n    --main-500: #3b82f6;  /* Core blue */\n    --main-600: #2563eb;  /* Darker shade */\n    --gray-100: #f3f4f6;  /* Light bg */\n    --gray-500: #6b7280;  /* Mid text */\n    --gray-900: #111827;  /* Dark text */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Style from Structure in HTML\nDESCRIPTION: Contrasts utility-class-heavy HTML with a cleaner, component-based approach. The example shows how to avoid tightly coupled styling with utility classes and instead use semantic component classes that can be styled externally.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Bad: tightly coupled styling -->\n<div class=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg\">\n  <h3 class=\"text-xl\">ChitChat</h3>\n  <p class=\"text-slate-500\">New message</p>\n</div>\n\n<!-- Good: Decoupled -->\n<div class=\"notification card\">\n  <h3>ChitChat</h3>\n  <p>New message</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating State and URL in Nue Router\nDESCRIPTION: Demonstrates how to update the application state and URL using router.set(). It can update multiple parameters at once or a single parameter.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.set({ query: 'new', start: '0' })  // /app/users/active?query=new&start=0\nrouter.set('filter', 'all')               // /app/users/all?query=new&start=0\n```\n\n----------------------------------------\n\nTITLE: Passing Iterated Data to Components\nDESCRIPTION: Shows how to pass both the current item and its index to looped components in Nue templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<my-component\n  :for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scroll Transition Web Component\nDESCRIPTION: JavaScript implementation of a Web Component that uses Intersection Observer to assign 'in-viewport' class to sections when they become visible to the user.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst observer = new IntersectionObserver(entries => {\n  entries.forEach(el =>\n    el.target.classList.toggle('in-viewport', el.isIntersecting)\n  )\n}, { rootMargin: '-100px' })\n\n\nclass ScrollTransition extends HTMLElement {\n  constructor() {\n    super()\n    observer.observe(this)\n  }\n  disconnectedCallback() {\n    observer.unobserve(this)\n  }\n}\n\ncustomElements.define(\n  'scroll-transition', ScrollTransition, { extends: 'section' }\n)\n```\n\n----------------------------------------\n\nTITLE: Using $attrs Property in Nue Components\nDESCRIPTION: The $attrs property provides access to all parent attributes, allowing them to be passed down to nested elements within a component.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<label @name=\"field\">\n  <h5>{ title }</h5>\n  <input :attr=\"$attrs\">\n</label>\n```\n\n----------------------------------------\n\nTITLE: Passing Data to an Island from Markdown - Nue - Markdown\nDESCRIPTION: Illustrates passing data to an island from Markdown front matter. A variable `cta` is defined in the front matter and passed as an attribute to the `join-list` island using the syntax `[join-list cta=\"{cta}\"]`. This allows customizing island behavior or content based on page-specific data.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n---\ncta: \"Sign up now\"\n---\n[join-list cta=\"{cta}\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Accordions Using Nue's [accordion] Tag - Markdown\nDESCRIPTION: This Markdown snippet uses the [accordion] tag in Nue to create a set of collapsible sections, suitable for FAQs or organized content blocks. Each entry starts with a heading (e.g., '## First element') followed by its respective content. No dependencies except Nue processing. Each heading/content pair becomes a collapsible detail in the rendered output. Input format uses Markdown structure; output is HTML details/summary blocks.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_32\n\nLANGUAGE: md\nCODE:\n```\n[accordion]\\n  ## First element\\n  The contents of the first element\\n\\n  ## Second element\\n  The contents of the second element\\n\\n  ## Third element\\n  The contents of the third element\n```\n\n----------------------------------------\n\nTITLE: Using a Reactive Component in Markdown\nDESCRIPTION: Markdown implementation showing how to include a reactive component within Markdown content with custom properties.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_14\n\nLANGUAGE: md\nCODE:\n```\n## Join our mailing list\n\n> [join-list cta=\"Submit form\"]\n```\n\n----------------------------------------\n\nTITLE: Using 'of' Delimiter in :for Loops\nDESCRIPTION: Shows that Nue supports both 'in' and 'of' as delimiters in :for loops, similar to JavaScript's syntax for iterators.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div :for=\"item of items\"></div>\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Responsive Grid Layout (CSS)\nDESCRIPTION: Demonstrates the CSS needed for the grid layout generated by Nue, assigning grid display, responsive column sizing, and gaps between items. Ensures grid blocks are visually coherent and adaptive. Use with HTML grid block output.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\n.grid {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\\n  gap: 2rem;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Transitions in Nue\nDESCRIPTION: Configuration to enable view transitions feature that allows partial page updates instead of full page reloads. Uses a 1.9kb script for efficient DOM diffing and stylesheet management.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/optimization.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nview_transitions: true\n```\n\n----------------------------------------\n\nTITLE: Event Listening in Nue Router\nDESCRIPTION: Shows how to listen for state changes using router.on(). This method runs a callback when specified parameters change.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.on('type', data => {\n  console.log(data.type)  // 'users'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component in Nue JS\nDESCRIPTION: A Nue JS implementation of a counter component using HTML-first approach with embedded script tag for state management. Shows Nue's simplicity with direct event binding and state manipulation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  Nue counter: \"It's just HTML\"\n-->\n<div>\n  <h2>You clicked {count} times!</h2>\n  <button @click=\"count--\">Decrement</button>\n  <button @click=\"count++\">Increment</button>\n  <script>count = 0</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Image Transitions in CSS\nDESCRIPTION: CSS code for implementing smooth image transitions between pages. It uses view-transition-name to tag images and customizes the animation duration for the transition effect.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view-transitions.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.hero-image {\n  view-transition-name: active-image;\n}\n\n::view-transition-group(active-image) {\n  animation-duration: .4s;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Attribute Merging in Nue Components\nDESCRIPTION: Demonstrates how Nue automatically merges parent and child class attributes when using components.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button @name=\"my-button\" class=\"btn\">Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Client-side Component Mounting\nDESCRIPTION: Example of mounting a client-side component with custom attribute\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- this gets rendered on the client-side -->\n<image-gallery custom=\"image-gallery\"/>\n```\n\n----------------------------------------\n\nTITLE: Flexible Grid Layout Block with Media and Separators (Markdown)\nDESCRIPTION: Provides an example of a flexible grid layout in Nue Markdown, using explicit triple dash separators and embedded media/image elements. Each section separated by --- is rendered as a grid cell, supporting arbitrary content such as image syntax and text.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n[.grid]\\n  [image feature-1.jpg]\\n  First feature description\\n\\n  ---\\n\\n  [image feature-2.jpg]\\n  Second feature description\\n\\n  ---\\n\\n  [image feature-3.jpg]\\n  Third feature description\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Isomorphic Video Components with Bunny CDN in HTML\nDESCRIPTION: This snippet defines a server-rendered video component designed for both SEO crawlability and rich client-side playback using Bunny CDN. The <bunny-player> custom element handles adaptive bitrate streaming when JavaScript is enabled, while a <noscript> fallback ensures video playback for browsers with JS disabled. Dependencies include the Bunny CDN for video delivery and optionally, the reactive video player component. Key parameters such as videoId, poster, and width control the player, and figcaption enhances SEO. The HTML must be interpreted by a compatible server-side framework (such as Nue).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- isomorphic video component utilizing Bunny CDN -->\\n<figure class=\\\"video\\\" @name=\\\"bunny-video\\\">\\n\\n  <!-- client-side video player -->\\n  <bunny-player :videoId=\\\"videoId\\\" :poster=\\\"poster\\\" :width=\\\"width\\\"/>\\n\\n  <!-- caption (SEO) -->\\n  <figcaption :if=\\\"caption\\\">{ caption }</figcaption>\\n\\n  <!-- when JavaScript is disabled -->\\n  <noscript>\\n    <video type=\\\"video/mp4\\\" controls\\n      src=\\\"https://video.nuejs.org/{videoId}/play_720p.mp4\\\">\\n  </noscript>\\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transitions in Nue.js Configuration\nDESCRIPTION: A YAML configuration snippet that shows how to enable view transitions in a Nue.js project by setting the view_transitions property to true in the site.yaml file.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view-transitions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nview_transitions: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized HTML Input Element\nDESCRIPTION: HTML implementation of a checkbox that uses the 'is' attribute to link it to a custom Web Component for enhanced functionality.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" is=\"zen-toggle\">\n```\n\n----------------------------------------\n\nTITLE: Integrating Rust/WebAssembly Model with JavaScript in Nue.js\nDESCRIPTION: Demonstrates how to integrate a Rust-based WebAssembly model with JavaScript to provide a clean API while leveraging the performance benefits of compiled code.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport init, { Model } from './engine'\nawait init()\nconst engine = new Model()\n\nexport const model = {\n  search(query) {\n    const data = JSON.parse(engine.search(query))\n    return data.map(el => hilite(query, el))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Isomorphic Video Player Island - Nue - HTML\nDESCRIPTION: Defines an isomorphic island named 'video-player' designed for both server-side rendering (SSR) and client-side interactivity. It includes a `<noscript>` tag containing a standard HTML `<video>` element for users with JavaScript disabled or for initial SEO-friendly rendering. A client-side `<video-player>` component (presumably a custom element handled by Nue's runtime) is used for enhanced interactivity when JavaScript is available. It also conditionally renders a `<figcaption>` based on the `caption` data property.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"video-player\">\n  <noscript>\n    <video src=\"https://video.nuejs.org/{videoId}/play_720p.mp4\" controls>\n      Your browser does not support the video tag.\n    </video>\n  </noscript>\n  <video-player :videoId=\"videoId\" :poster=\"poster\" :width=\"width\"/>\n  <figcaption :if=\"caption\">{ caption }</figcaption>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Island Component with JSON Data\nDESCRIPTION: Example of client-side island component with embedded JSON data\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<image-gallery custom=\"image-gallery\">\n  <script type=\"application/json\">\n    {\n      \"items\": [...],\n      \"index\": 2\n    }\n  </script>\n</image-gallery>\n```\n\n----------------------------------------\n\nTITLE: Structuring the Model Directory in Nue.js Applications\nDESCRIPTION: Shows the recommended directory structure for organizing the model layer separately from the view layer in a Nue.js application.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp/\n├── model/              # Your model layer\n│   ├── index.js        # Public model API\n│   ├── customers.js    # Customer operations\n│   └── deals.js        # Deal logic\n└── view/               # UI components\n```\n\n----------------------------------------\n\nTITLE: Using :bind with Component Loops\nDESCRIPTION: Demonstrates using the :bind directive to pass all properties of an iterated item directly to a component, simplifying access.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<my-component :for=\"item in items\" :bind=\"item\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Markdown Tables - Markdown\nDESCRIPTION: This snippet demonstrates the standard Markdown table syntax used to display tabular data in Nue. It uses pipes and dashes to define columns and rows. No external dependencies are required. The table displays user data such as name, email, and work title; each row corresponds to a different user. Input is plain Markdown and the output table format is rendered by the Markdown processor.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_27\n\nLANGUAGE: md\nCODE:\n```\n | Name            | Email                    | Work title         |\\n | --------------- | ------------------------ | ------------------ |\\n | Sarah Thompson  | sarah.thompson@demo.ai   | Graphic Designer   |\\n | David Rodriguez | david.rodriguez@demo.ai  | Financial Analyst  |\\n | Jessica Lee     | jessica.lee@demo.ai      | Project Manager    |\n```\n\n----------------------------------------\n\nTITLE: Handling Hot Reloading in Nue.js\nDESCRIPTION: Script to handle hot module replacement, reattaching DOM-dependent logic when content is updated during development.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('reload', function() {\n  const menu = document.querySelector('#menu')\n  menu.classList.add('updated')\n})\n```\n\n----------------------------------------\n\nTITLE: Nested :for Loops in Nue Templates\nDESCRIPTION: Shows how to create nested loops with the :for directive, with each loop having access to all parent scope variables.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"item in items\">\n  <p :for=\"child in item.children\">\n    { item.text } { child.text }\n  </p>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Invoking a Nue.js Component within Markdown\nDESCRIPTION: Demonstrates the syntax for embedding and invoking a custom Nue component (`[image-gallery]`) within a Markdown file. Properties like `images` (an array of filenames) and `basedir` (a string path) are passed to the component. The `render` keyword indicates that Nue will process this block.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[image-gallery]\n  images: [tomatoes.jpg, lemons.jpg, peas.jpg, popcorn.jpg]\n  basedir: /img\n```\n\n----------------------------------------\n\nTITLE: Defining Sidebar and Navigation Components in Nue.js HTML\nDESCRIPTION: HTML layout code for documentation navigation including a main sidebar, complementary sidebar with table of contents, and subheader navigation. The code uses Nue.js components and attributes including named templates (@name) and custom elements with specific behaviors.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/server-components.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- main sidebar (left) -->\n<aside id=\"sidebar\" popover>\n  <button popovertarget=\"sidebar\">&times;</button>\n  <navi :items=\"sidenav\"/>\n</aside>\n\n\n<!-- complementary sidebar (right) -->\n<aside @name=\"complementary\">\n  <h3>{ lang.this_page }</h3>\n  <toc is=\"observing-nav\"/>\n\n  <div class=\"zen-toggle\">\n    <h5>Zen Mode</h5>\n    <label class=\"toggle\">\n      <input type=\"checkbox\" is=\"zen-toggle\">\n    </label>\n  </div>\n</aside>\n\n<!-- the back button below the global header -->\n<nav @name=\"subheader\">\n  <button popovertarget=\"sidebar\"/>\n  <strong>{ lang.menu } &rsaquo; { title }</strong>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes in Nue Components\nDESCRIPTION: Shows how attributes passed to a Nue component become accessible within the component's template.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"media\">\n  <h3>{ title }</h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Customized Checkbox Web Component\nDESCRIPTION: JavaScript implementation of a Web Component that extends the HTML input element to toggle a 'zen' class on the document body when checked.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass ZenToggle extends HTMLInputElement {\n  constructor() {\n    super()\n    this.onchange = function() {\n      document.body.classList.toggle('zen', this.checked)\n    }\n  }\n}\n\ncustomElements.define('zen-toggle', ZenToggle, { extends: 'input' })\n```\n\n----------------------------------------\n\nTITLE: Example Usage of a Field Component with Attributes\nDESCRIPTION: Shows how attributes are passed to a Nue component and then inherited by nested elements using the $attrs property.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<field title=\"Email\" type=\"email\" placeholder=\"me@acme.org\" required=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Manual Update Triggering in Nue JS\nDESCRIPTION: A Nue JS component that demonstrates manual update triggering using this.update() after asynchronous data fetching, necessary when the framework can't automatically detect state changes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"user\">\n  <img :src=\"user.avatar\">\n  <h3>{ user.name }</h3>\n  <p>{ user.email }</p>\n\n  <button @click=\"loadJane\" :disabled=\"is_loaded\">Load Jane</button>\n\n  <script>\n    user = {\n      avatar: 'avatars/john.jpg',\n      email: 'john@acme.org',\n      name: 'John Doe',\n    }\n\n    async loadJane() {\n      const req = await fetch('jane.json')\n      this.user = await req.json()\n      this.is_loaded = true\n      this.update()\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Glow with Marked Markdown Parser\nDESCRIPTION: Shows how to integrate Glow with the Marked Markdown parser. It sets up a custom renderer for code blocks that uses Glow for syntax highlighting.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/glow/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { marked } from 'marked'\nimport { glow } from 'nue-glow'\n\n// setup a custom renderer for code blocks\nconst renderer = {\n  code(input, language) {\n    const html = glow(input, { language, numbered: true })\n    return `<pre>${ html }</pre>`\n  }\n}\nmarked.use({ renderer })\n\n// read Markdown with a Glow-formatted code block\nconst content = '...'\n\nconst html = marked.parse(content)\n```\n\n----------------------------------------\n\nTITLE: Building Description Lists Using [define] Tag - Markdown\nDESCRIPTION: This markdown snippet shows how to create a description list in Nue using [define] syntax. Each list entry consists of a heading (##) and its description. Nue renders this as an HTML description list with paired <dt>/<dd> elements for terms and definitions. No dependencies apart from Nue. Inputs are pairs of terms and descriptions, outputs are accessible, semantic description lists suited for glossaries or key-value content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_38\n\nLANGUAGE: md\nCODE:\n```\n[define]\\n  ## First item\\n  Description of the first item\\n\\n  ## Second item\\n  Description of the second item\\n\\n  ## Third item\\n  Description of the third item\n```\n\n----------------------------------------\n\nTITLE: Implementing a View Counter Web Component\nDESCRIPTION: JavaScript implementation of a Web Component that tracks page views using sessionStorage and displays the counter on the page.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nclass Counter extends HTMLDivElement {\n  constructor() {\n    super()\n    this.innerHTML = ++sessionStorage.counter || (sessionStorage.counter = 0)\n  }\n}\n\ncustomElements.define('view-counter', Counter, { extends: 'div' })\n```\n\n----------------------------------------\n\nTITLE: Handling View Transitions in Nue.js\nDESCRIPTION: Script to handle view transitions, adding a class to the article element when a new route is loaded.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('route', function() {\n  const article = document.querySelector('article')\n  article.classList.add('active')\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Blocks for Complex Layouts (Markdown)\nDESCRIPTION: Illustrates creation of nested content blocks in Nue Markdown, placing a .grid block inside a .feature block. Enables authors to build complex, multi-level structures while preserving semantic hierarchy. Inputs nest block definitions and headings.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n[.feature]\\n  ## Main feature\\n  Feature description\\n\\n  [.grid]\\n    ### Sub-feature one\\n    First sub-feature\\n\\n    ### Sub-feature two\\n    Second sub-feature\\n\n```\n\n----------------------------------------\n\nTITLE: Combining :if and :for Directives\nDESCRIPTION: When both :if and :for are used on the same element, the :if condition is evaluated first, allowing conditional loops.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"todo in todos\" :if=\"todos\">\n  {{ todo.name }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Destructuring in :for Loops\nDESCRIPTION: Shows how to use JavaScript destructuring within Nue's :for directive to directly access object properties.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"{ lang, text } in items\">\n  { lang } = { text }\n</li>\n```\n\n----------------------------------------\n\nTITLE: Complex JavaScript Expressions in Nue Templates\nDESCRIPTION: Nue supports full JavaScript expressions within curly brackets, allowing for string manipulation, conditional operations, and more complex data transformations.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>{ message.split('').reverse().join('') }</p>\n\n<p>{ ok ? '👍' : '😡' }</p>\n```\n\n----------------------------------------\n\nTITLE: Named Media Object Component\nDESCRIPTION: Example of naming a Nue component using @name attribute to create a reusable media object component\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"media-object\" class=\"{ class }\">\n  <img src=\"{ img }\">\n  <aside>\n    <h3>{ title }</h3>\n    <p>{ desc }</p>\n  </aside>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Standard Markdown Features Demonstration (Markdown)\nDESCRIPTION: Provides an example using basic Markdown syntax: headings, bold, italics, unordered and ordered lists, blockquotes, and links. Serves as a reference for standard formatting supported by Nue. No dependencies other than standard Markdown rendering.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n# Main heading\\n\\nThis paragraph has **bold** and *italic* text, plus a `code snippet`.\\n\\n## Second level heading\\n\\n- First list item\\n- Second list item\\n  - Nested item\\n  - Another nested item\\n\\n1. Ordered list\\n2. Second ordered item\\n\\n> This is a blockquote that can contain multiple paragraphs\\n> and *formatting*.\\n\\n[Link to docs](https://docs.example.com)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable SVG Icon Component in Nue.js HTML\nDESCRIPTION: Shows how to define a reusable Nue component named `icon` for displaying SVG icons managed by the `<symbols>` component. It uses an `<svg>` tag with a `<use>` element referencing an SVG symbol ID constructed with the `key` property (e.g., `#{key}-symbol`).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<svg @name=\"icon\" class=\"icon {key}-icon\">\n  <use href=\"#{key}-symbol\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using a Reusable SVG Icon Component in Nue.js HTML\nDESCRIPTION: Example of how to use the previously defined reusable `icon` component. The `key` attribute specifies which icon symbol to display (e.g., 'search').\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<icon key=\"search\"/>\n```\n\n----------------------------------------\n\nTITLE: Styling Tabs for Accordion Elements Using CSS - CSS\nDESCRIPTION: This CSS snippet creates styled tabs from accordion blocks. It includes rules for the .tabs container, styling for summary headings (tab selectors), tab panes, and the active tab marker. Uses features such as pseudo-elements (&::marker) and pointer-events, requiring CSS support for nested selectors if using SCSS syntax; otherwise selectors would need flattening. Variables like --main-500/600 enable easy theme customization. Works without JavaScript; only depends on proper HTML structure set by Nue and browser CSS support.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n.tabs {\\n  position: relative;\\n  display: flex;\\n  height: 150px;\\n  gap: 1.5em;\\n\\n  /* tabs */\\n  summary {\\n    cursor: pointer;\\n    font-weight: 550;\\n    &::marker { font-size: 0 }\\n    &:hover { color: var(--main-600) }\\n  }\\n\\n  /* tab panes */\\n  div {\\n    inset: 5em 0 0 1.5em;\\n    position: absolute;\\n  }\\n\\n  /* active tab */\\n  [open] summary {\\n    pointer-events: none;\\n    text-decoration: 3px underline var(--main-500);\\n    text-underline-offset: 10px;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Boolean State in Nue Router\nDESCRIPTION: Shows how to toggle a boolean state using router.toggle(). This is useful for switching view modes or other binary options.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.toggle('grid_view')  // Toggles grid_view true/false\n```\n\n----------------------------------------\n\nTITLE: Using Nue.js View Transitions Helpers\nDESCRIPTION: Demonstrates importing and using helper functions from the Nue.js view transitions module for DOM manipulation and navigation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { $, loadPage } from '/@nue/view-transitions.js'\n\n// Select and act\nconst main = $('main')\nmain.style.display = 'block'\n\n// Navigate with transition\nloadPage('thanks.html')\n```\n\n----------------------------------------\n\nTITLE: Using an Island in Markdown Content - Nue - Markdown\nDESCRIPTION: Demonstrates how to embed a pre-defined interactive island named 'join-list' into a Markdown file. Nue processes the `[join-list]` tag and replaces it with the corresponding island's HTML structure during the build process. This allows content creators to add interactive elements without writing HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/islands.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n### Join our mailing list\n\nBe the first to know about our new releases.\n\n[join-list]\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Popovers with Starting Style Transitions\nDESCRIPTION: CSS implementation of popover elements with transition animations using the @starting-style at-rule to control the initial state of the animation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n[popover] {\n  /* final style when the transition is over */\n  transform: scaleX(1);\n  opacity: 1;\n\n  &::backdrop {\n    background-color: #0005;\n    backdrop-filter: blur(4px);\n    transition: .5s;\n  }\n\n  /* styles when the popover is about to be displayed */\n  @starting-style {\n    transform: scaleX(0);\n    opacity: 0;\n\n    &::backdrop {\n      background-color: #0001;\n      backdrop-filter: blur(0);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ID and Class Name Syntax for Markdown Extensions\nDESCRIPTION: Demonstrates how to set ID and class attributes in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n[image#hero.massive /home/hero.webp]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nue.js Symbols Component in HTML Layout\nDESCRIPTION: Illustrates how to include the `<symbols/>` component in a layout file (e.g., footer). The `dir` attribute specifies the directory containing the `.svg` icon files to be processed.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<symbols dir=\"app/icon\"/>\n```\n\n----------------------------------------\n\nTITLE: Main Layout Module Structure\nDESCRIPTION: Shows how to control the structure inside the main element using slots for pagehead and content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<main>\n  <h1>Hello, World!</h1>\n\n  <aside>\n    <slot for=\"pagehead\"/>\n  </aside>\n\n  <article>\n    <slot for=\"content\"/>\n  </article>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Data Dynamically from YAML with :items - Markdown\nDESCRIPTION: This snippet showcases how to use the :items attribute in Nue's [table] tag to dynamically render table data from a YAML data property named 'products'. It allows for the integration of structured content defined elsewhere on the page or in global state, making the table content automatically managed and maintainable. Requires Nue with support for scoped YAML data sources; inputs are the property name, output is a rendered table populated with matching data.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_30\n\nLANGUAGE: md\nCODE:\n```\n[table :items=\\\"products\\\"]\n```\n\n----------------------------------------\n\nTITLE: Binding CSS Animation to Scroll Timeline\nDESCRIPTION: CSS implementation that binds the progress animation to the scroll timeline using the animation-timeline property.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.progress {\n> animation-timeline: scroll();\n  animation: progress;\n}\n```\n\n----------------------------------------\n\nTITLE: Todo MVC Class Methods in Nue JS\nDESCRIPTION: A snippet from a Todo MVC implementation in Nue JS showcasing ES6 class features like methods, getters, and setters used within the component script tag.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  clearCompleted() {\n    this.items.forEach(item => delete item.done)\n    this.save()\n  }\n\n  get numActive() {\n    return this.items.filter(item => !item.done).length\n  }\n\n  get hasCompleted() {\n    return this.items.find(item => item.done)\n  }\n\n  set filter(name) {\n    history.replaceState('', '', '#' + name)\n    this.filter = name\n  }\n\n  // ... clipped ...\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Local Variables and Component Constructors in Nue.js HTML\nDESCRIPTION: Shows how to define a root-level script block to initialize a shared variable (`counter`) and component-specific script blocks with a `constructor` to modify and use this shared variable within different Nue components (`comp-a`, `comp-b`). Each component increments the shared counter and stores its unique value.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  let counter = 0; // Initialize a counter variable\n</script>\n\n<div @name=\"comp-a\">\n  <h3>A count: { counter }</h3>\n\n  <script>\n    constructor() {\n      this.counter = ++counter; // Increment counter and store it in this component\n    }\n  </script>\n</div>\n\n<div @name=\"comp-b\">\n  <h3>B count: { counter }</h3>\n\n  <script>\n    constructor() {\n      this.counter = ++counter; // Increment counter and store it in this component\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Mounting in Markdown\nDESCRIPTION: Examples of mounting components in Markdown content using square bracket syntax\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[image-gallery]\n\n// with \"heroic\" styling\n[image-gallery.heroic]\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Transition Effects with CSS\nDESCRIPTION: CSS code that defines custom fade-and-scale transition effects for main content during page navigation. It uses the view-transition pseudo-elements to control opacity and transform properties.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view-transitions.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n::view-transition-group(main) {\n  transition: opacity .4s ease, transform .4s ease;\n}\n\n::view-transition-old(main) {\n  opacity: 1;\n  transform: scale(1);\n}\n\n::view-transition-new(main) {\n  opacity: 0;\n  transform: scale(.95);\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Values Syntax for Markdown Extensions\nDESCRIPTION: Shows how to use plain values without specifying attribute names in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n[image hello.png]\n```\n\n----------------------------------------\n\nTITLE: Using Nue.js TOC Component in HTML\nDESCRIPTION: Demonstrates how to use the built-in `<toc/>` (Table of Contents) component in Nue.js. Simply placing this tag, optionally with a class attribute, automatically generates a TOC based on the h2 and h3 headings in the current Markdown document.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<toc class=\"toc\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Listing Page with Page List Component\nDESCRIPTION: Markdown for a blog index page that uses the [page-list] tag to automatically display all posts from the content collection.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n# Emma's Blog\n\n[page-list]\n```\n\n----------------------------------------\n\nTITLE: Basic Header Layout Module\nDESCRIPTION: Example of a simple site header layout module implementation with navigation links and a menu button.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<header>\n  <a href=\"/\" class=\"logo\">Site Name</a>\n  <nav>\n    <a href=\"/docs\">Documentation</a>\n    <a href=\"/blog\">Blog</a>\n    <a href=\"/about\">About</a>\n  </nav>\n  <button popovertarget=\"menu\">Menu</button>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Compiling a Nue JS Component Structure in JavaScript\nDESCRIPTION: This JavaScript object represents the compiled output for the above counter component, mapping template strings and event handlers to executable JavaScript structures. Dependencies include a CSP-compliant JavaScript environment and the Nue runtime. The Impl property defines the state, while the fns array links expression/function IDs to logic for incrementing and rendering. Inputs are the component instance and events; outputs are real-time DOM updates. Limitations include reliance on the Nue infrastructure and conventions for function mapping.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  name: 'counter',\\n  tmpl: '<button @click=\\\"0\\\">:1:</button>',\\n  Impl: class { count = 0 },\\n  fns: [\\n    (_,e) => { _.count++ },\\n    _ => ['Clicked ',_.count,' ',_.count == 1 ? 'time' : 'times']\\n  ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Extension Syntax in Nue\nDESCRIPTION: Demonstrates the basic bracket syntax for Markdown extensions in Nue, using an image tag as an example.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n[image /img/cat.png]\n```\n\n----------------------------------------\n\nTITLE: Explicit Accordion Entry Separation with --- - Markdown\nDESCRIPTION: This snippet illustrates using the triple-dash (---) Markdown separator inside a Nue [accordion] block to explicitly control where each accordion entry starts. This is an alternative to heading-based entry detection, particularly useful for non-consecutive headings or custom sectioning. There are no dependencies besides Nue parsing. Each section's heading and content will map to a separate accordion entry, delimited by the separator.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_34\n\nLANGUAGE: md\nCODE:\n```\n[accordion]\\n  ## First element\\n  The contents of the first element.\\n\\n  ---\\n\\n  ## Second element\\n  The contents of the second element.\n```\n\n----------------------------------------\n\nTITLE: Deleting State Key in Nue Router\nDESCRIPTION: Demonstrates how to clear a state key using router.del(). This removes the specified parameter from the state and URL.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.del('query')  // /app/users/active?start=0\n```\n\n----------------------------------------\n\nTITLE: Nested Content Syntax for Markdown Extensions\nDESCRIPTION: Shows how to include nested content with Markdown extensions in Nue, such as adding a caption for an image.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n[image explainer.png]\n| This nested content is the caption for the image.\n| You can add Markdown here like *emphasis* and `inline code`.\n```\n\n----------------------------------------\n\nTITLE: Root Layout Module Template\nDESCRIPTION: Example of overriding the entire HTML document structure with dynamic content and metadata.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <slot for=\"head\"/>\n    <meta property=\"og:description\" :content=\"og_description\">\n  </head>\n\n  <body>\n    <main>\n      <h1>{ title }</h1>\n      <slot for=\"content\"/>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Inline Tags Syntax for Markdown Extensions\nDESCRIPTION: Demonstrates how to use inline tags in Nue's Markdown extensions, using an SVG image as an example.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_6\n\nLANGUAGE: md\nCODE:\n```\nThis is an inline [svg \"/icon/meow.svg\"] image.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bento Grid Custom Tag in Nue's Markdown Dialect\nDESCRIPTION: This example shows how non-technical users can use custom tags like [bento-grid] in Nue's Markdown dialect to create complex layouts without writing HTML or JavaScript. The snippet creates a feature grid with three sections: Design, Performance, and Content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-focused-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Our Features\n\n[bento-grid]\n  ### Design\n  Systematic and reusable layouts\n\n  ### Performance\n  Optimized for speed and scale\n\n  ### Content\n  Pure, accessible structure\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Keyframes for Scroll-Linked Animation\nDESCRIPTION: CSS keyframes definition for a progress animation that transforms an element from zero width to full width.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@keyframes progress {\n  from { transform: scaleX(0) }\n  to { transform: scaleX(1) }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Nue.js Navi Component in HTML Header\nDESCRIPTION: Demonstrates how to use the Nue.js `<navi>` component within an HTML `<header>` element. The component dynamically generates navigation links based on the data passed to its `:items` attribute, which references a data structure (like `mastnav` defined in YAML).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header>\n  <!-- Logo -->\n  <a href=\"/\">\n    <img src=\"/img/logo.svg\" alt=\"Logo\">\n  </a>\n\n  <!-- Master navigation -->\n  <navi :items=\"mastnav\"/>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Panes Using [accordion.card.tabs] - Markdown\nDESCRIPTION: This [accordion.card.tabs] markdown block demonstrates creation of tabs in Nue by styling a named accordion group with card and tabs modifiers. Entries are created via headings and their contents. Dependencies are Nue's parser and supporting CSS for tab appearance. Parameters include 'name' (grouping for tab logic) and 'open' (preselecting a tab); result is styled tabbed navigation rendered as accessible HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_36\n\nLANGUAGE: md\nCODE:\n```\n[accordion.card.tabs name=\\\"tabs\\\" open]\\n  ## First element\\n  The contents of the first element\\n\\n  ## Second element\\n  The contents of the second element\\n\\n  ## Third element\\n  The contents of the third element\n```\n\n----------------------------------------\n\nTITLE: Defining Global Data in YAML\nDESCRIPTION: Example of setting site-wide defaults in a 'site.yaml' file. This data serves as the base level in Nue's data inheritance system.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle_template: \"%s / Nue Framework\"\ndescription: \"The standards-first web framework\"\nauthor: \"Tero Piirainen\"\nog_image: \"/images/nue-og.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Basic Image Tag with Caption in Nue\nDESCRIPTION: Shows how to include a basic image with a caption using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n[image hello.webp]\n| This content here is the caption. Markdown *formatting* is supported.\n```\n\n----------------------------------------\n\nTITLE: Default HTML Structure in Nue\nDESCRIPTION: Shows the default semantic HTML structure that Nue automatically generates around content. This structure serves as the base template where Markdown content is rendered.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <!-- system meta elements -->\n  </head>\n  <body>\n    <main>\n      <article>\n        <!-- your Markdown content -->\n      </article>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Glow Syntax Highlighting with CSS Variables\nDESCRIPTION: Shows how to customize the appearance of syntax-highlighted code blocks by modifying key CSS variables.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Key Glow variables */\npre {\n  --glow-base-color: #eee;\n  --glow-primary-color: #823;\n  --glow-padding: 2em;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Table Features with [table] Tag - Markdown\nDESCRIPTION: This Markdown snippet uses Nue's [table] tag to create a table with a caption and more advanced formatting like explicit headers, omitted vertical bars, and multi-line cells for longer content, aided by separator lines (-----). It supports metadata like caption attributes, improves readability, and is useful for documenting principles or other complex tabular information. It is parsed and rendered by Nue's Markdown engine, with no other external dependencies.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_29\n\nLANGUAGE: md\nCODE:\n```\n[table caption=\\\"Design Principles\\\"]\\n\\n  Principle               | Acronym  | Description\\n  -----\\n  Separation of Concerns  | SoC\\n  Dividing a system into distinct sections with specific roles.\\n\\n  Progressive Enhancement | PE\\n  Building core functionality first, then adding enhanced features.\\n\\n  Semantic Web Design     | SWD\\n  Emphasizing meaning and accessibility through proper HTML semantics.\\n\\n  Content First           | CF\\n  Prioritizing content in the design and development process.\\n  -----\\n\\n  These principles help create better and more maintainable web projects.\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Transitions for Scroll Animations\nDESCRIPTION: CSS implementation that defines transitions for section elements, with staggered animations for child elements and state changes when elements enter the viewport.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n/* initial state for all section descendants */\nsection > * {\n  transition: .5s;\n  transform: translateY(2em);\n  opacity: 0;\n\n  &:nth-child(2) { transition-delay: .2s }\n  &:nth-child(3) { transition-delay: .5s }\n  &:nth-child(4) { transition-delay: .7s }\n  &:nth-child(5) { transition-delay: .8s }\n}\n\n/* styling when a user enters the viewport */\n.in-viewport > * {\n  transform: translate(0);\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Index in Object Entry Loops\nDESCRIPTION: Shows how to access the index when iterating through object entries in Nue templates.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li :for=\"[lang, text, index] in Object.entries(items)\">\n    { index } / { lang } = { text }\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Site-Wide Layout Template\nDESCRIPTION: HTML layout template that defines the header and footer structure used across all pages, with navigation components that pull data from site configuration.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<header>\n  <navi :items=\"navigation.header\"/>\n</header>\n\n<footer>\n  <navi :items=\"navigation.footer\"/>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Configuring View Transitions in YAML for Nue Framework\nDESCRIPTION: This YAML configuration enables animated page transitions globally within the Nue framework. This setting triggers a view transition effect that can be customized with CSS.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-1-beta/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# enable animated page switches globally\nview_transitions: true\n```\n\n----------------------------------------\n\nTITLE: Video Tag with HTML5 Attributes in Nue\nDESCRIPTION: Shows how to include HTML5 video attributes with the video tag in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_18\n\nLANGUAGE: md\nCODE:\n```\n[video intro.mp4 autoplay controls muted loop]\n```\n\n----------------------------------------\n\nTITLE: Including External Passthrough Scripts in Nue.js HTML\nDESCRIPTION: Demonstrates using the `src` attribute on a `<script>` tag to include an external JavaScript file (Google Tag Manager). Nue passes this script directly to the client's browser without processing it.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- Passed to the client directly -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=TAG_ID\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata in Nue\nDESCRIPTION: YAML configuration for setting up site-wide metadata including title format, social sharing image, author information, and favicon.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle_template: \"Emma Bennet / %s\"\nog: /img/og_emma.png\nauthor: Emma Bennet\nfavicon: /img/favicon.jpg\n```\n\n----------------------------------------\n\nTITLE: Embedding Variables in Content (Markdown)\nDESCRIPTION: Exemplifies how to inject dynamic variables into Markdown content, referencing built-in values such as site version, page date, or meta author. Variables are replaced at render time, eliminating the need for template languages. Input must use curly-brace syntax.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_22\n\nLANGUAGE: Markdown\nCODE:\n```\nCurrent version: { site.version }\\nLast updated: { page.date }\\nAuthor: { meta.author }\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Navigation Data in YAML for Nue.js Navi\nDESCRIPTION: Example YAML configuration defining hierarchical navigation data under the key `footer`. Top-level keys ('Product', 'Company') become headings (`<h3>`), and their nested lists define the links within separate `<nav>` sections.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfooter:\n  Product:\n    - Download: /download/\n    - Features: /features/\n    - Pricing: /pricing/\n    - Docs: /docs/\n\n  Company:\n    - About us: /about/\n    - Blog: /blog/\n    - Careers: /careers/\n    - Customers: /customers/\n```\n\n----------------------------------------\n\nTITLE: Combining Destructuring and Index in :for Loops\nDESCRIPTION: Demonstrates using both destructuring and index variables together in Nue's :for directive.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<li :for=\"({ text }, index) in items\">\n  { text } { index }\n</li>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Front Matter in YAML\nDESCRIPTION: YAML front matter configuration block that specifies included components (gallery and motion) and sets the content collection to blog.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ninclude: [ gallery, motion ]\ncontent_collection: blog\n---\n```\n\n----------------------------------------\n\nTITLE: Example Blog Header Using Nue.js Markdown and Pretty-Date\nDESCRIPTION: Provides an example of a Nue component (`pagehead`) representing a blog post header. It utilizes the `<pretty-date>` component to display the post date and the `<markdown>` component to render the title and description from metadata.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<header @name=\"pagehead\">\n  <pretty-date :date=\"date\"/>\n\n  <h1><markdown :content=\"title\"/></h1>\n\n  <div class=\"description\">\n    <markdown :content=\"description\"/>\n  </div>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Button Triggering a Popover in Nue\nDESCRIPTION: Demonstrates how to create a button that triggers a popover using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_24\n\nLANGUAGE: md\nCODE:\n```\n[#info-popover popover]\n  ### More information\n  This popover provides extra details about the feature without leaving the current page.\n\n[button popovertarget=\"info-popover\" \"Learn more\"]\n```\n\n----------------------------------------\n\nTITLE: Banner Layout Module with @name Attribute\nDESCRIPTION: Demonstrates how to create a banner module using the @name attribute for slots that aren't HTML5 landmarks.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div @name=\"banner\">\n  <strong>Major update available!</strong>\n  <a href=\"/blog/release-2.0/\">Check out v2.0</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Naming Content Collection in YAML\nDESCRIPTION: Configuration for specifying a custom name for a content collection.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncollection_name: blog_posts\n```\n\n----------------------------------------\n\nTITLE: Including Inline Passthrough Scripts with Type Attribute in Nue.js HTML\nDESCRIPTION: Illustrates using the `type=\"text/javascript\"` attribute on a `<script>` tag to embed inline JavaScript. This script is passed directly to the client's browser for execution, bypassing Nue's processing.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- Same here -->\n<script type=\"text/javascript\">\n  console.info({ hello: 'World' }); // Log a message to the console\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Data at Application Level\nDESCRIPTION: Demonstration of how to override global data for specific areas of a site using a file like 'blog.yaml'. This represents the second level in Nue's data inheritance system.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Blog\"\ntitle_template: \"%s / Blog\"\ndescription: \"Latest writings about standards-first development\"\nog_image: \"/images/blog-og.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Enhanced Formatting Table via Custom Block (Markdown)\nDESCRIPTION: Shows a custom [table] block summarizing Markdown formatting options and their HTML equivalents. Enables authors to document syntax mappings within documentation using Nue's enhanced Markdown.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_21\n\nLANGUAGE: Markdown\nCODE:\n```\n[table]\\n  Markdown  | HTML | Example\\n  ------\\n  `I'm **bold**`   | `<strong>bold</strong>`    | I'm **bold**\\n  `I'm __bold__`   | `<strong>bold</strong>`    | I'm __bold__\\n  `I'm •bold•`     | `<b>bold</b>`              | I'm •bold•\\n  `I'm *italic*`   | `<em>italic</em>`          | I'm *italic*\\n  `I'm _italic_`   | `<em>italic</em>`          | I'm _italic_\\n  `I'm \\`code\\``   | `<code>code</code>`        | I'm `code`\\n  `I'm ~striked~`  | `<s>striked</s>`           | I'm ~striked~\\n  `I'm \\\"quoted\\\"`   | `<q>quoted</q>`             | I'm \"quoted\"\\n  `I'm |marked|`   | `<mark>marked</mark>`      | I'm |marked|\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sectioning and Semantic Structure (Markdown)\nDESCRIPTION: Demonstrates enabling automatic semantic sectioning in Nue's Markdown dialect by setting the 'sections' property and using level 2 headings as section breaks. Intended for authors to easily organize content into logical HTML sections without manual HTML markup. Inputs include page configuration and Markdown headings; outputs are parsed into HTML sections.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\nsections: true\\n---\\n\\n## Introduction\\n\\nThe first section content...\\n\\n## Key features\\n\\nThe second section content...\\n\\n## Technical details\\n\\nThe third section content...\\n\n```\n\n----------------------------------------\n\nTITLE: Using Nue.js Markdown Component in HTML\nDESCRIPTION: Demonstrates the usage of the `<markdown>` component in Nue.js. It takes a Markdown-formatted string via the `:content` attribute (e.g., from metadata like `description`) and renders it as HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<markdown :content=\"description\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collection in YAML\nDESCRIPTION: Basic configuration for defining a content collection in the app's YAML file.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_collection: posts\n```\n\n----------------------------------------\n\nTITLE: Customizing Glow with CSS Variables\nDESCRIPTION: Shows how to customize Glow's appearance using just three CSS variables to align with brand colors. These variables control the primary, secondary, and accent colors used across all language highlighting.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* brand-aware CSS variables*/\n:root {\n  --glow-primary-color: #7dd3fc;\n  --glow-secondary-color: #4f72b6;\n  --glow-accent-color: #419fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Structure for Page List\nDESCRIPTION: Example of the HTML structure generated by the page-list tag showing date, title and description formatting.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <time datetime=\"2024-04-12T00:00:00.000Z\">April 12, 2024</time>\n    <a href=\"/blog/status-update-01/index.html\">\n      <h2>Summer 2024 status update</h2>\n      <p>The past, present, and future of the Nue framework</p>\n    </a>\n  </li>\n  <li>...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of a Passthrough Script with 'client' Attribute in HTML\nDESCRIPTION: Displays the resulting HTML `<script>` tag as rendered by Nue when the `client` attribute is used on a script block. It confirms the `client` attribute effectively generates a standard inline script tag for browser execution.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  console.info('hey'); // Log a message to the console\n</script>\n```\n\n----------------------------------------\n\nTITLE: Storing Application-Specific Data in YAML\nDESCRIPTION: Example of how to store application-specific data, such as team information, in a separate YAML file named 'team.yaml'. This data can be used in templates or islands as needed.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nteam:\n  - name: Sarah Chen\n    role: Design Engineer\n    bio: \"Focused on mathematical design systems\"\n    twitter: \"@sarahchen\"\n  - name: James Smith\n    role: Frontend Architect\n    bio: \"Standards-first development advocate\"\n    twitter: \"@jamessmith\"\n```\n\n----------------------------------------\n\nTITLE: Responsive Images in Nue Markdown Extensions\nDESCRIPTION: Demonstrates how to create responsive images with different sizes based on screen dimensions using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_10\n\nLANGUAGE: md\nCODE:\n```\n[image]\n  large: ui-wide.png\n  small: ui-tall.png\n  caption: This is the image caption\n  alt: This is the alt text\n  loading: eager\n```\n\n----------------------------------------\n\nTITLE: Blog Site Directory Structure\nDESCRIPTION: Complete directory structure example for a blogging website including global styles, library components, and content organization.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n/\n  ├── @global                # Global styles: colors, layout, typography\n  │   ├── settings.css\n  │   ├── colors.css\n  │   ├── typography.css\n  ├── @library\n  │   ├── button.css\n  │   ├── forms.css\n  │   ├── cards.css\n  ├── blog                   # Blogging area\n  │   ├── blog.yaml\n  │   ├── index.md\n  │   ├── post1.md\n  │   ├── post2.md\n  ├── contact\n  │   ├── index.md\n  ├── img                    # Images and icons\n  ├── index.md               # The front page\n  ├── site.yaml              # Global settings\n```\n\n----------------------------------------\n\nTITLE: Defining a Cascade Layer Hierarchy with @layer - CSS\nDESCRIPTION: Defines multiple named layers using the @layer rule to establish a controlled cascade order for CSS. Developers can list layer identifiers separated by commas, and this order determines which rules take precedence—later layers can override earlier ones. There are no external dependencies, and this setup is solely for ordering CSS rules within the stylesheet. All layer names in the example are customizable as per project convention.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer {\n  settings,      /* Colors, typography, resets */\n  structure,     /* Body, header, main, footer */\n  components,    /* UI building blocks */\n  adjustments,   /* Area-specific tweaks */\n  screens,       /* Media query handling */\n  overrides      /* Final overrides */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Site Data in YAML\nDESCRIPTION: Global site configuration defined in site.yaml file that applies across the entire site, including basic metadata and SEO elements.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Emma Bennet\ndescription: A designer and UX engineer\norigin: https://emmabennet.co\nfavicon: /img/favicon.png\nog_image: /img/og_emma.png\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Tab Styling with RGBA and Hex Color Transparency\nDESCRIPTION: This CSS example illustrates tab styling with RGBA for background and hex with alpha for text color. It demonstrates various techniques for managing transparency in both background and text elements while organizing tab layout with flexbox.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/color-strategies.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Tab styling */\n[role=tablist] {\n  background: rgba(0, 0, 0, .7);\n  background-size: 3.8em;\n> padding: .7em 1.3em 0;\n> overflow: hidden;\n> display: flex;\n\n  a {\n    color: #fff9;\n    padding: .2em 1em .4em;\n    font-size: 90%;\n    cursor: pointer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Content Collection in YAML\nDESCRIPTION: YAML configuration that sets up the 'posts' content collection to automatically gather all blog posts for display.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent_collection: posts\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Menu in HTML\nDESCRIPTION: Demonstrates the HTML structure for a popover menu using the dialog element and popover attributes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<dialog id=\"menu\" popover>\n  <button class=\"action\" popovertarget=\"menu\">×</button>\n  <nav>\n    <a href=\"/\">Home</a>\n    <a href=\"/docs/\">Docs</a>\n    <a href=\"/blog/\">Blog</a>\n  </nav>\n</dialog>\n\n<button popovertarget=\"menu\">Open menu</button>\n```\n\n----------------------------------------\n\nTITLE: Video Tag with YAML Options in Nue\nDESCRIPTION: Demonstrates using YAML to specify options for the video tag in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_19\n\nLANGUAGE: md\nCODE:\n```\n[video.heroic]\n  poster: hello.png\n  src: hello.mp4\n  width: 1000\n```\n\n----------------------------------------\n\nTITLE: Creating a Nue Project with Design System Selection\nDESCRIPTION: This command demonstrates how to create a new Nue project with a specific design system. It shows how Nue separates concerns between functionality (startup template) and form (rams design system).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/standards-first-web-framework/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnue create startup --design rams\n```\n\n----------------------------------------\n\nTITLE: Basic Page List Tag Usage\nDESCRIPTION: Examples of using the built-in page-list tag in HTML and Markdown formats.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<page-list/>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[page-list]\n```\n\n----------------------------------------\n\nTITLE: Tweaking Component Styles per Context in Adjustments Layer - CSS\nDESCRIPTION: Uses the 'adjustments' layer to override component styles for specific contexts such as sections or pages. Only dependent on the presence of the components and settings layers. Modifies button color/font and card border color for elements within particular parent selectors (e.g., .product). Inputs are context-sensitive elements; outputs are refined component presentation per area. Useful for making scoped design changes without impacting global styles.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer adjustments {\n  button {\n    background: #457b9d;\n    font-size: 1.1rem;\n  }\n  .product .card {\n    border-color: var(--color-accent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Information Architecture in YAML\nDESCRIPTION: Example of how to structure site navigation and hierarchies in a YAML file named 'site.yaml'. This data can be used to generate navigation menus or sidebars.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocumentation:\n  Getting started:\n    - Why Nue: /docs/\n    - Installation: /docs/installation.html\n  Building sites:\n    - Content: /docs/content-authoring.html\n    - Data: /docs/data.html\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Tab Components\nDESCRIPTION: Demonstrates CSS styling for tab components using nested CSS syntax. Shows how to style tab lists and individual tab links with specific colors, padding, and font sizes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Tab styling */\n[role=tablist] {\n  background: rgba(0, 0, 0, .7);\n  background-size: 3.5em;\n  padding: .7em 1.3em 0;\n  overflow: hidden;\n  display: flex;\n\n  a {\n    color: #fff9;\n    padding: .2em 1em .4em;\n    font-size: 90%;\n    cursor: pointer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Navigation Data in YAML for Nue.js Navi\nDESCRIPTION: Example YAML configuration (`site.yaml`) defining a flat list of navigation items under the key `mastnav`. Each item maps a link label to a URL. A quoted string after the URL (e.g., \"badge\") is treated as a CSS class for the generated link.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmastnav:\n  - Documentation: /docs/\n  - About: /about/\n  - Blog: /blog/\n  - \"v1.0 is out!\": /blog/v1.0/ \"badge\"\n```\n\n----------------------------------------\n\nTITLE: Styling View Transitions with CSS\nDESCRIPTION: CSS for defining view transition animations that create smooth page transitions without JavaScript.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\narticle {\n  view-transition-name: article;\n}\n\n::view-transition-old(article) {\n  transform: scale(1.2) translateY(2em);\n  transition: .8s;\n}\n```\n\n----------------------------------------\n\nTITLE: Named Attributes Syntax for Markdown Extensions\nDESCRIPTION: Shows how to specify options using named attributes in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n[image src=\"hello.png\" caption=\"Hello, World\" alt=\"Hello image\"]\n```\n\n----------------------------------------\n\nTITLE: Global Directory Configuration\nDESCRIPTION: YAML configuration for defining global directories that are accessible across the entire site.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobals: [ \"@globals\", 'css' ]\n```\n\n----------------------------------------\n\nTITLE: Using Semantic HTML for Accordion Components\nDESCRIPTION: Demonstrates the difference between semantic and non-semantic HTML structures for accordion components. The semantic approach uses the native <details> element, while the non-semantic approach builds a custom accordion with generic divs and buttons.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Good: Simple, semantic -->\n<details class=\"accordion\">\n  <summary>Section Title</summary>\n  <p>Content here</p>\n</details>\n\n<!-- Bad: Overbuilt -->\n<div class=\"accordion\">\n  <button class=\"accordion-trigger\">Section Title</button>\n  <div class=\"accordion-content\">Content here</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Inlining in Nue\nDESCRIPTION: Configuration setting to enable CSS inlining in Nue framework. This combines HTML and CSS into a single request for faster page rendering.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/optimization.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninline_css: true\n```\n\n----------------------------------------\n\nTITLE: Closing Popover Menu on Link Click with JavaScript\nDESCRIPTION: A global script that enhances the popover menu by closing it when a link inside is clicked, demonstrating progressive enhancement.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/scripting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('click', event => {\n  const el = event.target\n  const link = el.getAttribute('href')\n  const dialog = el.closest('[popover]')\n  if (dialog && link) dialog.hidePopover()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Content Metadata in Markdown Front Matter\nDESCRIPTION: Demonstration of how to add metadata to content files using YAML front matter in a Markdown file. This includes SEO-related fields and other content attributes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# blog/post.md\n---\ntitle: \"Building a Design System\"\ndescription: \"A systematic approach to mathematical design\"\nauthor: \"John Doe\"\ndate: 2024-01-15\nog_image: \"/images/design-system.jpg\"\n---\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Nue Router State\nDESCRIPTION: Shows how to reset the Nue router, clearing all state and bindings. This is useful for hot module reloads or application resets.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/app-router.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.cleanup()\n```\n\n----------------------------------------\n\nTITLE: Head Layout Module with CSP\nDESCRIPTION: Shows how to add custom elements to the head section, including Content Security Policy settings.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta http-equiv=\"Content-Security-Policy\"\n    content=\"default-src 'self'; img-src https://*; child-src 'none';\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Popovers in Nue Markdown\nDESCRIPTION: Example of creating a popover in Nue using the block syntax with a popover attribute. Popovers provide a way to present additional information in a modal dialog without cluttering the main content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[#soc-explainer popover]\n  ### Separation of concerns\n  **Separation of Concerns (SoC)** is a core principle in software and web development that promotes dividing functionality into distinct, independent sections. In web design, this means keeping content, structure, and styling isolated. By doing this, content creators can focus purely on the message and information, while designers and engineers handle the layout and styling. This approach leads to cleaner, more maintainable codebases and a better user experience.\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Complex Image with Multiple Attributes\nDESCRIPTION: Shows the HTML output generated for a complex image with href, small, and large attributes using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"heroic\">\n  <picture>\n    <source src=\"ui-tall.png\" media=\"(max-width: 750px)\" type=\"image/png\">\n    <source src=\"ui-wide.png\" media=\"(min-width: 750px)\" type=\"image/png\">\n    <a href=\"/docs/\"><img src=\"ui-wide.png\" loading=\"lazy\"></a>\n  </picture>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Merged Classes\nDESCRIPTION: Shows how parent class attributes are merged with component class attributes in Nue.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<my-button class=\"large\"/>\n```\n\n----------------------------------------\n\nTITLE: Button with Inline SVG in Nue Markdown Extensions\nDESCRIPTION: Shows how to create a button with an inline SVG icon using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_14\n\nLANGUAGE: md\nCODE:\n```\n[button href=\"/docs/\"]\n  *Learn more* [svg /icon/chevron-right.svg]\n```\n\n----------------------------------------\n\nTITLE: Structuring Page Layout with Structure Layer - CSS\nDESCRIPTION: Implements the 'structure' layer to define layout for body, header, and footer. Uses CSS Grid for page framing and applies consistent spacings with variables. No dependencies except CSS Grid and support for variables. Parameters such as --spacing-unit are inherited from the settings layer. The snippet yields a foundational page grid with optional sticky headers/footers; its scope is site-wide structural elements.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer structure {\n  body {\n    display: grid;\n    grid-template-rows: auto 1fr auto;\n    min-height: 100vh;\n  }\n  header {\n    padding: var(--spacing-unit);\n    background: #f1f1f1;\n  }\n  footer {\n    text-align: center;\n    padding: var(--spacing-unit);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Tabs with RGBA Background and Flex Layout in CSS\nDESCRIPTION: This CSS snippet demonstrates styling for a tablist component. It uses RGBA for a semi-transparent background color, flex display for layout, and styling for anchor elements within the tablist including transparency in the text color.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/color-strategies.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Tab styling */\n[role=tablist] {\n  background: rgba(0, 0, 0, .7);\n  background-size: 3.8em;\n> padding: .7em 1.3em 0;\n> overflow: hidden;\n> display: flex;\n\n  a {\n    color: #fff9;\n    padding: .2em 1em .4em;\n    font-size: 90%;\n    cursor: pointer;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Library Directory Configuration\nDESCRIPTION: YAML configuration for defining library folders and including assets in pages.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlibs: [\"@lib\", lib]\n```\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: [ video, gallery ]\n```\n\n----------------------------------------\n\nTITLE: Styled Button with Nested Content in Nue\nDESCRIPTION: Shows how to create a styled button with a class name and nested content for the label using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_23\n\nLANGUAGE: md\nCODE:\n```\n[button.secondary href=\"/docs/\"]\n  Explore the docs\n```\n\n----------------------------------------\n\nTITLE: Module Disabling Configuration\nDESCRIPTION: YAML configuration example showing how to disable specific layout modules.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/layout.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\naside: false\npagehead: false\npagefoot: false\n```\n\n----------------------------------------\n\nTITLE: Creating Popover Trigger Buttons in Nue\nDESCRIPTION: Example of creating a button that triggers a popover in Nue Markdown. This demonstrates how to link interactive elements to popover content using the popovertarget attribute.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[button popovertarget=\"soc-explainer\" \"Learn how it works\"]\n```\n\n----------------------------------------\n\nTITLE: Stack Layout Block for Vertical Arrangements (Markdown)\nDESCRIPTION: Shows how to create a vertical stack layout block in Nue Markdown using the .stack class. Each heading and paragraph pair becomes a vertically stacked cell, with consistent spacing controlled by CSS.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n[.stack]\\n  ### Design\\n  Focus on systematic design\\n\\n  ### Engineering\\n  Built for performance\\n\\n  ### Content\\n  Pure content structure\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Variables in Nue Markdown\nDESCRIPTION: Example of using variables in Nue Markdown. Variables allow for dynamic content insertion from application data or metadata using curly brace syntax.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nPackage name:    **{ package.name }**\nPackage version: **{ package.version }**\nComplex value:   **{ foo.bar[0].name }**\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Post Header Template\nDESCRIPTION: HTML template for blog post headers that displays title, publication date, and credits, using data from the post's front matter.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<header @name=\"pagehead\">\n  <h1>{ title }</h1>\n  <p>\n    <pretty-date :date=\"pubDate\"/> • Content by AI\n    Photo credits: <a href=\"//dribbble.com/{ credits }\">{ credits }</a>\n  </p>\n  <img :src=\"og\" width=\"1000\" height=\"800\" alt=\"Hero image for { title }\">\n</header>\n```\n\n----------------------------------------\n\nTITLE: Minimal Tab Styling with RGBA Background in CSS\nDESCRIPTION: This CSS snippet shows a simplified version of tablist styling, using RGBA for background transparency. It includes basic layout properties like padding, overflow handling, and flex display for the component.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/color-strategies.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Tab styling */\n[role=tablist] {\n  background: rgba(0, 0, 0, .7);\n  background-size: 3.5em;\n  padding: .7em 1.3em 0;\n  overflow: hidden;\n  display: flex;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Global Styles and Libraries in YAML\nDESCRIPTION: YAML configuration to include global styles and library components throughout the site.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nglobals: [\"@global\"]\nlibs: [\"@library\"]\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Nue.js Symbols Component\nDESCRIPTION: Shows the kind of HTML output generated by the `<symbols>` component. It creates a main `<svg>` container holding multiple `<symbol>` elements, each with an `id` derived from the filename (e.g., 'search-symbol') and the content of the corresponding `.svg` file.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<svg>\n  <symbol id=\"search-symbol\" viewBox=\"0 0 24 24\">\n    <circle cx=\"11\" cy=\"11\" r=\"8\"/>\n    <path d=\"m21 21-4.3-4.3\"/>\n  </symbol>\n  <!-- more symbols from other .svg files -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Styles in Screens Layer - CSS\nDESCRIPTION: Implements the 'screens' layer containing media query rules for responsive design. Depends on layered styles and existing custom properties. Uses @media with min- and max-width to adjust padding for .card and width for button, dynamically responding to device size. Inputs are device viewport sizes; outputs are improved usability and layout across breakpoints. Requires a modern browser with media query and @layer support.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer screens {\n  @media (min-width: 768px) {\n    .card {\n      padding: calc(var(--spacing-unit) * 2);\n    }\n  }\n  @media (max-width: 480px) {\n    button {\n      width: 100%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blocks in Nue Markdown\nDESCRIPTION: Example of creating a styled block in Nue using the block syntax. Blocks allow for structured, styled content sections without requiring HTML markup, maintaining content purity.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[block.note]\n  ### Note\n  Web design is 100% content and 95% typography\n```\n\n----------------------------------------\n\nTITLE: Examining Nue Project Directory Structure\nDESCRIPTION: Shows the organized file structure of a Nue project, highlighting how content, layout, and styling are separated into different directories.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/\n  ├── @global             # Global styles and layouts\n  │   ├── colors.css      # Design system: colors\n  │   ├── layout.css      # Core layout styles\n  │   ├── layout.html     # Header and footer templates\n  │   └── typography.css  # Typography scale\n  ├── blog                # Blog content area\n  │   ├── blog.yaml       # Blog settings\n  │   ├── index.md        # Blog listing page\n  │   └── hero.html       # Blog post header template\n  ├── img                 # Images and icons\n  ├── index.md            # Front page content\n  └── site.yaml           # Global settings\n```\n\n----------------------------------------\n\nTITLE: Setting Blog-Specific Data in YAML\nDESCRIPTION: Application-level configuration in blog.yaml that extends or overrides global data for blog-specific settings.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Emma Bennet / Blog\nauthor: Emma Bennet\nog_image: /img/og_blog.png\n```\n\n----------------------------------------\n\nTITLE: Styling Page Layout with CSS\nDESCRIPTION: CSS for styling the overall page structure, including responsive constraints, header navigation, and footer elements.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 2% 5%;\n\n  > header nav {\n    justify-content: space-between;\n    margin-bottom: 4rem;\n    display: flex;\n  }\n\n  > footer {\n    border-top: 1px solid var(--gray-200);\n    justify-content: space-between;\n    margin-top: 6rem;\n    display: flex;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fenced Code Blocks with Class Names in Nue\nDESCRIPTION: This example shows how to assign class names to fenced code blocks in Nue markdown. The class is applied to a wrapper div around the pre element, allowing for better styling control.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-1-beta/index.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n ``` .blue\n <p>the code here is rendered bigger</p>\n ```\n```\n\n----------------------------------------\n\nTITLE: Using Nue.js Symbols Component with Explicit File Selection in HTML\nDESCRIPTION: Demonstrates how to use the `<symbols>` component to load only specific SVG icons. The `files` attribute takes a space-separated list of filenames (without the `.svg` extension) to include.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<symbols dir=\"app/icon\" files=\"search dot circle\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing and Creating New Nuekit Project\nDESCRIPTION: Command line instructions for installing Nuekit globally using Bun package manager and creating a new project from a template.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nuekit-010/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install Nue globally for all your sites and apps\nbun install nuekit --global\n\n# Start with a new template\nbun create nue@latest\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Component Classes in HTML\nDESCRIPTION: Demonstrates how to implement the reusable component classes in HTML markup. The example shows applying both the card and notification classes to create a styled notification card.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"notification card\">\n  <h3>ChitChat</h3>\n  <p>New message</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Stack Layout in Nue Markdown\nDESCRIPTION: This Markdown snippet shows how to create a stack layout using the `[.stack]` block tag in Nue.js. Nue automatically wraps sibling content blocks (separated by headings) within `<div>` tags inside the parent block, facilitating complex layouts directly in Markdown.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_15\n\nLANGUAGE: md\nCODE:\n```\n[.stack]\n  ### Design\n  Design starts with content, ensuring a natural flow and seamless navigation.\n\n  ### Engineering\n  Engineering focuses on performance, accessibility, and progressive enhancement.\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text Regions within Nue Markdown Content\nDESCRIPTION: This Markdown snippet illustrates how to highlight specific text regions within a line using the bullet character (`•`) in Nue.js. Single bullets (`•word•`) apply standard highlighting, while double bullets (`••word••`) indicate erroneous text, often styled differently (e.g., red underline).\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_23\n\nLANGUAGE: md\nCODE:\n```\nThese •two words• are highlighted and ••these words•• are erroneous\n```\n\n----------------------------------------\n\nTITLE: Defining Nue.js Navi Data with Images and Buttons in YAML\nDESCRIPTION: Shows how to define navigation items in YAML that include images and items styled as buttons. Specific keys like `image`, `class`, `url`, `label`, and `role` are used to configure these special navigation elements.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmain_navigation:\n  - image: /img/logo.png\n    class: logo\n    url: /\n\n  - Product: /product/\n  - Pricing: /pricing/\n  - FAQ: /faq/\n\n  - url: /get-started/\n    label: Get Started\n    role: button\n```\n\n----------------------------------------\n\nTITLE: Adding Language-Specific Syntax Highlighting Styles\nDESCRIPTION: Example of how to apply custom styling to code blocks of a specific language using the language attribute.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n[language=\"html\"] {\n  --glow-accent-color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of a Nue Markdown Stack Layout\nDESCRIPTION: This HTML code shows the rendered output of a Nue Markdown `[.stack]` block. Nue's parser automatically wraps the distinct content sections (identified by headings in the source Markdown) within separate `<div>` tags inside the main `<div class=\"stack\">`.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"stack\">\n  <div>\n    <h3>Design</h3>\n    <p>Design starts with content, ensuring a natural flow and seamless navigation.</p>\n  </div>\n  <div>\n    <h3>Engineering</h3>\n    <p>Engineering focuses on performance, accessibility, and progressive enhancement.</p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS View Transitions for Articles in Nue\nDESCRIPTION: This CSS snippet demonstrates how to implement a scale-down view transition effect for article elements. It assigns a view-transition-name to the article and defines a transformation for the old article during transitions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-1-beta/index.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\narticle {\n> view-transition-name: article;\n}\n\n/* view transition (scales down the old article) */\n>::view-transition-old(article) {\n  transform: scale(.8);\n  transition: .4s;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested YAML Data Syntax for Markdown Extensions\nDESCRIPTION: Demonstrates using nested YAML to define attributes for Markdown extensions in Nue.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n[image]\n|  caption: Hello, World!\n|  large: hello-big.png\n|  small: hello.png\n|  alt: Hello Image\n```\n\n----------------------------------------\n\nTITLE: Defining Component Layered Styles with CSS @layer - CSS\nDESCRIPTION: This snippet defines a CSS class named 'card' inside a cascade layer called 'components' using the @layer rule. This sets up a scope for component-level styles, controlling override order. No third-party dependencies are needed; ensure the CSS is processed by a build system (like Nue) that supports CSS Cascade Layers. Parameters are class names and layer definition. The input is standard CSS, and the output is scoped, predictable styles with border radius and shadow for elements using the 'card' class. This approach depends on the CSS layer composition and order as designed in the overall NUE system.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-directory-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer components {\n  .card {\n    border-radius: 0.5em;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Stack Layout Block (HTML)\nDESCRIPTION: Presents the HTML output for a stack layout block, with each child div containing a heading and text. Designed for styling with flex layouts in CSS to provide vertical spacing and alignment.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"stack\\\">\\n  <div>\\n    <h3>Design</h3>\\n    <p>Focus on systematic design</p>\\n  </div>\\n  <div>\\n    <h3>Engineering</h3>\\n    <p>Built for performance</p>\\n  </div>\\n  <div>\\n    <h3>Content</h3>\\n    <p>Pure content structure</p>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Accordions Using Custom Classes with [accordion.card] - Markdown\nDESCRIPTION: This code sample applies a custom class (.card) to a Nue accordion block, enabling designers to style the accordion with card-like visuals. Structure is parallel to the basic accordion, with headings and content in Markdown. Dependent on Nue and project CSS for the .card class to take effect. Enables more visually distinctive accordions without altering content structure or logic.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_33\n\nLANGUAGE: md\nCODE:\n```\n[accordion.card]\\n  ## First element\\n  The contents of the first element\\n\\n  ## Second element\\n  The contents of the second element\\n\\n  ## Third element\\n  The contents of the third element\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Stack Layout (CSS)\nDESCRIPTION: Provides CSS for arranging stack layout blocks vertically with spacing via flexbox. Assigns flex-direction: column and gap for visual separation between elements. For use with HTML output from stack layout blocks.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n.stack {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 2rem;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Array in Markdown for Nue Framework\nDESCRIPTION: Demonstrates how to define an array of user objects using Nue's markdown syntax. This array includes user information such as name, role, and image path.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n[array-demo]\n  users:\n    - name: Alex Martinez\n      role: Lead frontend developer\n      img: /img/face-3.jpg\n    - name: Sarah Park\n      role: UI/UX Designer\n      img: /img/face-4.jpg\n    - name: Jamie Huang\n      role: JS/TS developer\n      img: /img/face-2.jpg\n    - name: Heidi Blum\n      role: UX developer\n      img: /img/face-1.jpg\n    - name: Adam Nattie\n      role: Backend developer\n      img: /img/face-5.jpg\n    - name: Mila Harrison\n      role: Senior frontend developer\n      img: /img/face-6.jpg\n```\n\n----------------------------------------\n\nTITLE: Including Library Components with YAML - YAML\nDESCRIPTION: This YAML snippet, intended for an app-level config file (e.g., blog.yaml), specifies which reusable components from a CSS library should be included in the app. The 'include' key lists short names corresponding to files in the library directory, enabling modular, on-demand style loading. Nue will resolve these entries to paths like @components/card.css and @components/button.css. Inputs are the YAML config and a set of component CSS files, and output is the targeted inclusion of only those styles.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-directory-structure.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# blog.yaml\ninclude: [card, button]  # Pulls @components/card.css, etc.\n```\n\n----------------------------------------\n\nTITLE: Basic Video Tag in Nue Markdown Extensions\nDESCRIPTION: Demonstrates the basic syntax for including a video using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_16\n\nLANGUAGE: md\nCODE:\n```\n[video /videos/hello.mp4]\n```\n\n----------------------------------------\n\nTITLE: Enhancing Components with ARIA Attributes for State-Driven Styles\nDESCRIPTION: Demonstrates how to use ARIA attributes to drive styling based on component states, rather than using custom state classes. The example shows styling an accordion based on its expanded state using the aria-expanded attribute.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.accordion[aria-expanded=\"true\"] {\n  max-height: 100%;\n}\n\n.accordion[aria-expanded=\"false\"] {\n  max-height: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Nue Project with Glow\nDESCRIPTION: Shell commands for installing Bun, the Nue website generator, and creating a new Nue project with Glow-powered templates. This setup provides hot-reloading capabilities for code blocks.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Install Bun (if not done yet)\ncurl -fsSL https://bun.sh/install | bash\n\n# Install website generator (Nuemark playground)\nbun install nuekit --global\n\n# Start a Nue project with a Glow-powered template\nnue create simple-blog\n```\n\n----------------------------------------\n\nTITLE: Generated Semantic HTML for Sectioned Content (HTML)\nDESCRIPTION: Shows the HTML output produced by Nue when parsing sectioned Markdown content with sections enabled. Each level 2 heading wraps content in a <section> for improved semantics. The output demonstrates a clean, logical structure for web presentation; authors should ensure proper heading levels.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<article>\\n  <section>\\n    <h2>Introduction</h2>\\n    <p>The first section content...</p>\\n  </section>\\n\\n  <section>\\n    <h2>Key features</h2>\\n    <p>The second section content...</p>\\n  </section>\\n\\n  <section>\\n    <h2>Technical details</h2>\\n    <p>The third section content...</p>\\n  </section>\\n</article>\n```\n\n----------------------------------------\n\nTITLE: Accordion as HTML Output using <details>/<summary> - HTML\nDESCRIPTION: This HTML example shows the output resulting from Nue's [accordion] blocks: each heading and its content are wrapped in native <details> and <summary> tags for accessibility and browser compatibility. Outputs a container <div> with several collapsible details sections, each with summary as header and paragraph as content. Generated from markdown by the Nue engine; no JavaScript required.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<div>\\n  <details>\\n    <summary>First element</summary>\\n    <p>The contents of the first element</p>\\n  </details>\\n  <details>\\n    <summary>Second element</summary>\\n    <p>The contents of the second element</p>\\n  </details>\\n  <details>\\n    <summary>Third element</summary>\\n    <p>The contents of the third element</p>\\n  </details>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Grid Layout Block (HTML)\nDESCRIPTION: Shows the HTML structure produced for a grid block where each heading marks a cell. The <div class=\\\"grid\\\"> contains multiple child divs, each with a heading and paragraph. Output is designed for CSS grid layout application.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"grid\\\">\\n  <div>\\n    <h3>First feature</h3>\\n    <p>Description of the first feature</p>\\n  </div>\\n  <div>\\n    <h3>Second feature</h3>\\n    <p>Description of the second feature</p>\\n  </div>\\n  <div>\\n    <h3>Third feature</h3>\\n    <p>Description of the third feature</p>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining User Array Data Structure (YAML)\nDESCRIPTION: This YAML-like snippet defines an array named 'users' under the '[array-demo]' section. Each element in the array is an object representing a user, containing 'name', 'role', and 'img' properties. This data is likely used to populate a user list component in a NueJS demo.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/test.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ninclude: [demos]\naside: false\nbeside: false\n---\n\n[array-demo]\n  users:\n    - name: Alex Martinez\n      role: Lead frontend developer\n      img: /img/face-3.jpg\n    - name: Sarah Park\n      role: UI/UX Designer\n      img: /img/face-4.jpg\n    - name: Jamie Huang\n      role: JS/TS developer\n      img: /img/face-2.jpg\n    - name: Heidi Blum\n      role: UX developer\n      img: /img/face-1.jpg\n    - name: Adam Nattie\n      role: Backend developer\n      img: /img/face-5.jpg\n    - name: Mila Harrison\n      role: Senior frontend developer\n      img: /img/face-6.jpg\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Item Components\nDESCRIPTION: YAML configuration that assigns a web component to handle all grid items, enabling custom gallery functionality.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ngrid_item_component: gallery-item\n```\n\n----------------------------------------\n\nTITLE: Concise Button Syntax in Nue\nDESCRIPTION: Demonstrates a more concise way to define a button with label and href using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_22\n\nLANGUAGE: md\nCODE:\n```\n[button \"Learn more\" href=\"/docs/\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal CSS Reset in Settings Layer\nDESCRIPTION: Demonstrates a lightweight CSS reset approach that preserves useful browser defaults while fixing common issues. The example shows a minimal reset within the settings layer that sets box-sizing and normalizes form element fonts.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@layer settings {\n  *, *::before, *::after {\n    box-sizing: border-box;\n  }\n\n  form {\n    button, input, select, textarea {\n      font: inherit;  /* Match body text */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Pink Gradient Elements with CSS\nDESCRIPTION: CSS styling for elements with the 'pink' class, creating a gradient background with rounded corners and specific padding. It includes nested styling for pre elements.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/class-naming-strategies.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.pink {\n  background-image: linear-gradient(#e879f9, #ec4899);\n  padding: 3em 0 0 3em;\n  border-radius: .8em;\n  overflow: hidden;\n  margin: 1.5em 0 2em;\n\n  pre {\n    padding: 2em;\n    margin: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Sections with Web Components in YAML\nDESCRIPTION: This YAML configuration shows how to turn sections into native Web Components in Nue. It assigns the 'scroll-transition' component to a section for implementing scroll-triggered CSS transitions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-1-beta/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsection_component: scroll-transition\n```\n\n----------------------------------------\n\nTITLE: Configuring Section Classes in Sections Array (Markdown)\nDESCRIPTION: Provides an example of assigning custom classes to generated HTML sections by passing an array to the 'sections' property in the page configuration. Each section receives the corresponding class, enabling targeted styling. Authors must supply a class array matching the number of sections.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\nsections: [hero, features, details]\\n---\n```\n\n----------------------------------------\n\nTITLE: Enhanced Footnote References with Descriptive Labels (Markdown)\nDESCRIPTION: Presents an example of using string-labeled footnote references, enabling descriptive notes that go beyond numeric references. Improves documentation clarity and semantic linking. Inputs use standard Markdown footnote and reference syntax.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_24\n\nLANGUAGE: Markdown\nCODE:\n```\n[Separation of Concerns][^soc] is fundamental to Nue.\\nProgressive Enhancement[^pe] ensures accessibility.\\n\\n[^soc]: Keeping content, structure and style separate\\n[^pe]: Building from core functionality up\\n\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Simple Nue.js Navi Component\nDESCRIPTION: Shows the resulting HTML structure generated by the `<navi>` component when using the simple `mastnav` YAML data. It creates a `<nav>` element containing `<a>` tags for each defined item, including applying the specified class.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<header>\n  <a href=\"/\">\n    <img src=\"/img/logo.svg\" alt=\"Logo\">\n  </a>\n  <nav>\n    <a href=\"/docs/\">Documentation</a>\n    <a href=\"/about/\">About</a>\n    <a href=\"/blog/\">Blog</a>\n    <a href=\"/blog/v1.0/\" class=\"badge\">v1.0 is out!</a>\n  </nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines and Regions in Nue JavaScript Code Blocks\nDESCRIPTION: This JavaScript code block showcases various line and region highlighting features available in Nue.js Markdown. It demonstrates highlighting entire lines (`>`), specific regions (`•`), errors (`••`), removed lines (`-`), and added lines (`+`), along with enabling line numbering via the `numbered` attribute.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n/* Code highlighting examples */\n\n>Highlight lines by prefixing them with \">\"\n\nHere's a •highlighted region• within a single line\n\n// bring out errors\nexport ••defaultt•• interpolate() {\n  return \"something\"\n}\n\n// prefix removed lines with -\n-const html = glow(code)\n\n// and added lines with +\n+const html = glow(code, { •numbered: true• })\n```\n\n----------------------------------------\n\nTITLE: Setting Page-Specific Data in Markdown Front Matter\nDESCRIPTION: Example of fine-tuning data for individual pages using front matter in a Markdown file. This represents the most specific level in Nue's data inheritance system.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# blog/design-system.md\n---\ntitle: \"Mathematical Design Systems\"\ndescription: \"Creating interfaces through calculated precision\"\nog_image: \"/images/math-design.jpg\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable UI Elements in Components Layer - CSS\nDESCRIPTION: Creates the 'components' layer for encapsulating reusable UI elements like buttons and cards. Depends on the existence of prior custom properties. Button and .card styles include spacing, coloring, border, and radius, all tailored to leverage CSS variables. Inputs can be any element matching 'button' or having a '.card' class; outputs are consistent, theme-aware UI elements. Snippet assumes a component-based site structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@layer components {\n  button {\n    padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 4);\n    background: var(--color-accent);\n    color: white;\n    border: 0;\n    border-radius: 0.25rem;\n  }\n  .card {\n    padding: var(--spacing-unit);\n    border: 1px solid #ddd;\n    border-radius: 0.5rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Syntax for Interactive Components\nDESCRIPTION: Example showing how to create accordions, tabs and grids using Nue's custom Markdown syntax. Demonstrates the new parser's capabilities for creating interactive content elements with minimal markup.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-release-candidate/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|[accordion]\n\n  ## New features\n  1. New Markdown parser\n  2. New formatting options\n  3. New components\n\n  ## Improvements\n  1. Web component fallbacks\n  2. Markdown <slot/> support\n  3. Improved HMR error reporting\n```\n\n----------------------------------------\n\nTITLE: Configuring Section Components\nDESCRIPTION: YAML configuration that assigns a web component to handle all page sections, enabling custom scroll behaviors.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsection_component: scroll-transition\n```\n\n----------------------------------------\n\nTITLE: Comparing YAML and JSON for Content Hierarchies\nDESCRIPTION: Demonstration of how YAML's syntax is more readable and concise compared to JSON for representing content hierarchies. This example shows the same data structure in both formats.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/data.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nBuilding websites:\n  - Step-by-step tutorial: tutorial.html\n  - Content: content-authoring.html\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Building websites\": [\n    {\"Step-by-step tutorial\": \"tutorial.html\"},\n    {\"Content\": \"content-authoring.html\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Bunny-Video Component with Metadata - Custom Markup\nDESCRIPTION: Illustrates the embedding of a custom 'bunny-video' component with rich metadata including video ID, caption, width, and poster image. This allows for consistent interactive video displays on static or dynamic sites. Dependencies are any runtime or build step supporting the 'bunny-video' macro. Key parameters are videoId (video source), caption (description), width (display size), and poster (thumbnail). Output is an embedded video with caption and image.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/index.md#2025-04-23_snippet_2\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[bunny-video]\n  videoId: eb65fcdd-5be4-4923-a783-f41efafe58a7\n  caption: Using **Rust** and **Event Sourcing** for instant UX over 150,000 records \\u2014 far past where JavaScript crashes with a stack overflow error.\n  width: 1000\n  poster: /img/rust-splash.png\n```\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[bunny-video]\n  videoId: ffbb6d40-5b74-4176-a115-d0ed040edca5\n  caption: Immediate feedback for design and component updates, preserving app state\n  width: 1000\n  // poster: thumbnail_1ca1bd66.jpg\n```\n\n----------------------------------------\n\nTITLE: Combining Content and Code Blocks in a Nue Markdown Stack Layout\nDESCRIPTION: This Markdown example demonstrates combining content blocks (headings) and styled code blocks (`.pink`, `.blue`) within a `[.stack]` layout in Nue.js. It showcases creating structured layouts with mixed content types using clean, readable Markdown syntax without requiring extra HTML markup.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_24\n\nLANGUAGE: md\nCODE:\n```\n[.stack]\n\n  ### CSS animation setup\n\n  ``` .pink\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  .animate {\n    animation: fadeIn 2s ease-in;\n  }\n  ```\n\n  ### CSS transition setup\n\n  ``` .blue\n  .button {\n    transition: background-color 0.3s ease;\n  }\n\n  .button:hover {\n    background-color: #ff4081;\n  }\n  ```\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Structure for Image Gallery\nDESCRIPTION: Example of the HTML structure generated for content entries with thumbnails, showing the image gallery layout format.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <a href=\"/posts/scaleable-design-system.html\">\n      <figure>\n        <img src=\"/posts/img/ui-thumb.png\" loading=\"lazy\" alt=\"Scalable design system\">\n        <figcaption>\n          <time datetime=\"2023-05-22T00:00:00.000Z\">May 22, 2023</time>\n          <h2>Crafting a scalable CSS design system</h2>\n        </figcaption>\n      </figure>\n    </a>\n  </li>\n  <li>...</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video from Local Source with Custom Attributes - Custom Markup\nDESCRIPTION: Renders a native HTML video element using custom attributes in macro notation. This snippet specifies a video source with autoplay, looping, muted, and fixed width. The registrar must be capable of converting the macro into a corresponding <video> tag. Parameters include file path and playback options. The output is a natively embedded video element with advanced playback features.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/index.md#2025-04-23_snippet_4\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[video /img/mpa-build.mp4 autoplay loop muted width=350]\n```\n\n----------------------------------------\n\nTITLE: Defining Content Metadata in YAML Front Matter\nDESCRIPTION: Example of how to define metadata for a content entry using YAML front matter. Shows basic metadata fields like title, thumbnail, author and date.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-collections.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n ---\n title: My Blog Post\n thumb: /img/my-thumb.png\n author: John Doe\n date: 2023-12-11\n ---\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Blocks Using Headings as Separators (Markdown)\nDESCRIPTION: Displays how to construct a grid layout block in Nue Markdown using a class and multiple headings within the block. Each heading and its paragraph form a grid cell. Inputs must use properly indented blocks and headings for each item.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n[.grid]\\n  ### First feature\\n  Description of the first feature\\n\\n  ### Second feature\\n  Description of the second feature\\n\\n  ### Third feature\\n  Description of the third feature\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Posts in Markdown with Front Matter\nDESCRIPTION: Example of a Markdown blog post with front matter metadata that defines title, description, and publication date for the post.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: A standards first framework\ndescription: Taking HTML, CSS and JavaScript to their peak\ndate: 2024-01-15\n---\n\nContent starts here...\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Contact Form Island\nDESCRIPTION: HTML component that creates an interactive contact form with form validation and page transitions, importing a transition library.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { loadPage } from '/@nue/view-transitions.js'\n</script>\n\n<form @name=\"contact-me\" @submit.prevent=\"submit\" autocomplete=\"on\">\n  <label>\n    <span>Your name</span>\n    <input type=\"text\" name=\"name\" placeholder=\"Example: John Doe\" required>\n  </label>\n\n  <label>\n    <span>Your email</span>\n    <input type=\"email\" name=\"email\" placeholder=\"your@email.com\" required>\n  </label>\n\n  <label>\n    <span>Requirements</span>\n    <textarea name=\"feedback\" placeholder=\"Type here...\"></textarea>\n  </label>\n\n  <button>Let's talk!</button>\n\n  <script>\n    submit() {\n      loadPage('thanks.html')\n    }\n  </script>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Library Directories - YAML\nDESCRIPTION: This YAML snippet configures Nue to recognize specific folders as sources of global (site-wide) and library (reusable) CSS assets. The 'globals' key lists directories whose contents load on every page by default, while 'libs' identifies reusable component folders for explicit inclusion. Dependencies include the NUE framework or build tool that reads and processes these YAML directives. The input is a YAML configuration file, and the output is adjusted CSS inclusion behavior project-wide.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-directory-structure.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobals: [\"@global\"]    # Site-wide assets\nlibs: [\"@components\"]   # Reusable library\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Button Component - Custom Markup\nDESCRIPTION: Shows how to instantiate a button component with specific text, style, and destination URL directly in Markdown. The first button uses a 'continue' style and provides a forward link; the second button uses a 'secondary' style. These snippets allow rapid UI prototyping with consistent theming. Dependencies may include a preprocessor or runtime capable of interpreting custom tags. Inputs include button text and href parameters.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/index.md#2025-04-23_snippet_1\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[button.continue \"Why Nue \\u203a\" href=\"/docs/\"]\n```\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[button.secondary \"Get started \\u2192\" href=\"/docs/installation.html\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class and Line Numbers to Nue Markdown Code Blocks\nDESCRIPTION: This Markdown example shows how to apply custom CSS classes (`.purple`) and enable line numbering (`numbered`) to a code block in Nue.js. The classes and `numbered` keyword are placed after the opening backticks and language hint (if any), separated by `•`.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_20\n\nLANGUAGE: md\nCODE:\n```\n ``` •.purple numbered•\n function hello() {\n   // world\n }\n ```\n```\n\n----------------------------------------\n\nTITLE: Building Tables Using Nue's [table] Tag - Markdown\nDESCRIPTION: This snippet illustrates use of Nue's custom [table] tag as a concise alternative to standard Markdown for defining tables. No pipes and dashes are needed for each row, making it less error-prone for larger tables. Dependencies are only Nue's Markdown processor. Key columns are Name, Email, and Work title, with each line representing an employee. Data is parsed and converted to a table automatically by Nue.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_28\n\nLANGUAGE: md\nCODE:\n```\n[table]\\n  Name            | Email                   | Work title\\n  Alice Johnson   | alice.johnson@demo.ai   | Marketing Manager\\n  John Smith      | john.smith@demo.ai      | Software Engineer\\n  Emily Davis     | emily.davis@demo.ai     | Human Resources Lead\\n  Michael Chen    | michael.chen@demo.ai    | Sales Representative\n```\n\n----------------------------------------\n\nTITLE: Heading Extensions with IDs and Classes (Markdown)\nDESCRIPTION: Demonstrates adding IDs and classes to Markdown headings for anchor linking and CSS styling. The syntax after the heading text assigns an ID and optionally classes, parsed into HTML attributes. \nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_23\n\nLANGUAGE: Markdown\nCODE:\n```\n## Less is More { #less.minimalist }\\n\\n## Another heading { #custom-id }\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Blocks with Class (Markdown)\nDESCRIPTION: Demonstrates how to create a semantic block with a custom class using Nue's block syntax in Markdown. The content inside square brackets with a dot-prefixed class is transformed into a div with that class. Input must use correct syntax for block and headings.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n[.note]\\n  ### Important\\n  This is a highlighted note with a title\\n\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Basic Button\nDESCRIPTION: Shows the HTML output generated for a basic button using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<a role=\"button\" href=\"/docs/\">Learn more</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Components for Nuemark Tabs\nDESCRIPTION: This code shows how to implement and register a Web Component for the Nuemark tabs feature. It demonstrates the use of the standard 'is' attribute for progressive enhancement of HTML structures.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-nuemark/index.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// implementation\nclass Tabs extends HTMLElement {\n  constructor() {\n    // Do the thing when the component is mounted\n  }\n}\n\n// registtration\ncustomElements.define('nuemark-tabs', Tabs, { extends: 'section' })\n```\n\n----------------------------------------\n\nTITLE: Including Component-Specific Styles in YAML\nDESCRIPTION: YAML configuration to include specific style components for content, cards, and animations in the blog.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: [ content, cards, motion ]\n```\n\n----------------------------------------\n\nTITLE: Installing Bun for Nue Framework\nDESCRIPTION: Command to install Bun, which is the preferred runtime for Nue due to its superior web standards support and native CSS parsing capabilities.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install Bun\ncurl -fsSL https://bun.sh/install | bash\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Hierarchical Nue.js Navi Component\nDESCRIPTION: Illustrates the HTML output generated by `<navi :items=\"footer\"/>` using the hierarchical YAML data. It creates a `<div>` containing multiple `<nav>` elements, each with an `<h3>` heading and corresponding `<a>` links.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <nav>\n    <h3>Product</h3>\n    <a href=\"/download/\">Download</a>\n    <a href=\"/features/\">Features</a>\n    <a href=\"/pricing/\">Pricing</a>\n    <a href=\"/docs/\">Docs</a>\n  </nav>\n\n  <nav>\n    <h3>Company</h3>\n    <a href=\"/about/\">About us</a>\n    <a href=\"/blog/\">Blog</a>\n    <a href=\"/careers/\">Careers</a>\n    <a href=\"/customers/\">Customers</a>\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inserting Google Analytics via Custom Head in HTML\nDESCRIPTION: This HTML snippet shows how to include the Google Analytics tracking script in the <head> using both an external script (async) and an inline client script for configuration. The code snippet initializes the GA tracking object (gtag) if it does not exist and pushes configuration commands to start tracking. Replace G-xxxxxxx with the actual analytics tracking ID. This must be placed in a root layout file and depends on the Google Tag Manager. The output is visitor analytics sent to Google Analytics, and the use of <script client> ensures the code runs only in the browser.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<head>\\n  <script async src=\\\"//www.googletagmanager.com/gtag/js?id=•G-xxxxxxx•\\\"></script>\\n\\n  <script client>\\n    window.dataLayer = window.dataLayer || []\\n    function gtag(){ dataLayer.push(arguments) }\\n    gtag('js', new Date())\\n    gtag('config', '•G-xxxxxxx•')\\n  </script>\\n</head>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Section Classes (HTML)\nDESCRIPTION: Illustrates the HTML structure generated when custom classes are assigned to sections. Each <section> element receives a corresponding class, enabling CSS customization and targeted styling for different content segments.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<article>\\n  <section class=\\\"hero\\\">...</section>\\n  <section class=\\\"features\\\">...</section>\\n  <section class=\\\"details\\\">...</section>\\n</article>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Nested Blocks (HTML)\nDESCRIPTION: Presents the HTML output of nested blocks, where a div with class 'feature' contains another div with class 'grid'. Maintains semantic structure and enables modular CSS targeting for different block levels.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"feature\\\">\\n  <h2>Main feature</h2>\\n  <p>Feature description</p>\\n\\n  <div class=\\\"grid\\\">\\n    <div>\\n      <h3>Sub-feature one</h3>\\n      <p>First sub-feature</p>\\n    </div>\\n    <div>\\n      <h3>Sub-feature two</h3>\\n      <p>Second sub-feature</p>\\n    </div>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup with Bun for Nue Framework\nDESCRIPTION: Step-by-step commands for setting up a local development environment for the Nue framework using Bun. The process includes cloning the repository, installing dependencies, linking nuekit globally, and serving a Nue project.\nSOURCE: https://github.com/nuejs/nue/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the Nue repository\ngit clone git@github.com:nuejs/nue.git\ncd nue\n# Install dependencies\nbun install\n# Link the nuekit package globally\ncd packages/nuekit\nbun link\n\n# Go to your project\ncd your-nue-project-dir\n# Serve it using the local nuekit package\nnue\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Nuemark Tags with Nue Template Syntax\nDESCRIPTION: This snippet shows the same alert component from the previous example but implemented using Nue template syntax instead of TSX, demonstrating the alternative approach.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-nuemark/index.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p @name=\"my-alert\" style=\"color:{ color || 'red' };\">{ message }</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Links in YAML Configuration\nDESCRIPTION: Example of how to define reference links in the site.yaml file for use in Markdown content. Links are defined in the 'name: url \"title\"' format and can be referenced throughout Markdown documents using the [Link Label][link_reference] syntax.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# name: url \"optional title\"\nlinks:\n  gds: //bradfrost.com/blog/post/a-global-design-system/ \"Global Design System\"\n  soc: //en.wikipedia.org/wiki/Separation_of_concerns\"\n```\n\n----------------------------------------\n\nTITLE: Running Nue Website Locally\nDESCRIPTION: Shell commands to set up and run the Nue.js website locally on port 8080.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd nue/packages/nuejs.org\nnue\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Styled Block (HTML)\nDESCRIPTION: Shows the resulting HTML for a styled semantic block created via custom class in Markdown. The input block is converted into a div with the specified class, containing structured headings and paragraphs. Output is ready for CSS styling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"note\\\">\\n  <h3>Important</h3>\\n  <p>This is a highlighted note with a title</p>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Standard HTML Table Output Example - HTML\nDESCRIPTION: This HTML snippet shows the expected output of processed Nue [table] blocks, featuring semantic HTML5 elements including <table>, <caption>, <thead>, <tbody>, and <tfoot>. It demonstrates accessible table structures with headers and footers for better browser compatibility and assistive technology support. There are no dependencies, and the snippet is produced as rendered output from matching Markdown or Nue markup.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<table>\\n  <caption>Design Principles</caption>\\n  <thead>\\n    <tr>\\n      <th>Principle</th>\\n      <th>Acronym</th>\\n      <th>Description</th>\\n    </tr>\\n  </thead>\\n\\n  <tbody>\\n    <tr>\\n      <td>Separation of Concerns</td>\\n      <td>SoC</td>\\n      <td>Dividing a system into distinct sections with specific roles.</td>\\n    </tr>\\n    ...\\n  </tbody>\\n\\n  <tfoot>\\n    <tr>\\n      <td colspan=\\\"3\\\">\\n        These principles help create better and more maintainable web projects.\\n      </td>\\n    </tr>\\n  </tfoot>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Nue.js Pretty-Date Component in HTML\nDESCRIPTION: Shows the basic usage of the `<pretty-date>` component. It takes a date value via the `:date` attribute and renders it in a user-friendly, formatted way.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<pretty-date :date=\"date\"/>\n```\n\n----------------------------------------\n\nTITLE: Nesting Blocks for Complex Layouts in Nue Markdown\nDESCRIPTION: This Markdown snippet illustrates how blocks can be nested in Nue.js to create complex layouts. A `[.stack]` block is nested inside a `[.feature]` block, enabling structured, multi-layered content composition directly within Markdown without writing HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_18\n\nLANGUAGE: md\nCODE:\n```\n[.feature]\n  ## Hello, World!\n  Let's put a nested stack here\n\n  [.stack]\n    ### First item\n    With description\n\n    ### Second item\n    With description\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit IDs and Classes for Headings in Nue\nDESCRIPTION: Example of explicitly defining IDs and class names for headings in Nue Markdown using curly brace syntax. This provides greater control over heading styling and link structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Less is More { #less.more }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing View Transitions in CSS\nDESCRIPTION: CSS rule for creating a page switch transition effect using the ::view-transition property, which scales down the previous page during transition.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* scale down the previous page */\n::view-transition-old(root) {\n  transform: scale(.8);\n  transition: .4s;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nue Development Server\nDESCRIPTION: Command to start the development server in the current directory. This is the default command when no specific command is provided.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnue\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information in Nue CLI\nDESCRIPTION: Command to view the help output for the Nue command line interface. This shows all available commands and options to the user.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnue --help\n```\n\n----------------------------------------\n\nTITLE: Defining Page-Level Data in YAML\nDESCRIPTION: Page-specific frontmatter configuration in Markdown file that sets unique data for individual pages.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Hello, World\ndate: 2023-12-05\n```\n\n----------------------------------------\n\nTITLE: Rendering Description Lists as HTML - HTML\nDESCRIPTION: This HTML snippet is the rendered output from a [define] block in Nue, producing a semantic description list for accessibility and structure. Each <dt> represents a term and each <dd> its corresponding description. There are no dependencies. The structure ensures screen readers and browsers parse the list correctly for glossaries, term definitions, or key-value pair documentation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<dl>\\n  <dt>First item</dt>\\n  <dd>Description of the first item</dd>\\n\\n  <dt>Second item</dt>\\n  <dd>Description of the second item</dd>\\n\\n  <dt>Third item</dt>\\n  <dd>Description of the third item</dd>\\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Multi-Page Application with Nue\nDESCRIPTION: Command to generate a basic multi-page application using Nue framework in Phase 1.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/vision/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnue create simple-mpa\n```\n\n----------------------------------------\n\nTITLE: Defining Footnotes with the 'define' Tag in Markdown\nDESCRIPTION: This snippet demonstrates how to use the `define` tag to create footnotes in Markdown. It allows for a structured definition of multiple footnotes with labels and descriptions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n[define]\n  ## Separation of concerns { #soc }\n  A strategy for clean and maintainable code\n\n  ## Progressive Enhancement { #pe }\n  Setup core functionality first and enhance it later\n\n  ## Form follows function { #fff }\n  Make styling follow your content\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Block Syntax in Nue\nDESCRIPTION: Example of simplified block syntax in Nue, using a dot prefix instead of the 'block' keyword. This provides a cleaner way to create styled content sections.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[.alert]\n  ### Note\n  You should avoid inline styling like black death\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Nue Template\nDESCRIPTION: Command reference for creating a new website using the Nue default template via the 'nue create' command. This template creates a simple blog website with pre-configured layouts and styles.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnue create\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component in React\nDESCRIPTION: A React implementation of a counter component using functional components and useState hook to manage state changes when increment/decrement buttons are clicked.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * React counter: \"It's Just JavaScript\"\n */\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h2>You clicked {count} times!</h2>\n      <button onClick={() => setCount(count - 1)}>\n        Decrement\n      </button>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Version with Custom Configuration\nDESCRIPTION: Command to build the production version of a site with additional configuration options from a staging YAML file. Useful for deployment-specific optimizations.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnue build --production --environment staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Design System Theme with Nue\nDESCRIPTION: Command to create a new project with the Rams design system theme using Nue framework in Phase 2.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/vision/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnue create startup --design \"Rams\"\n```\n\n----------------------------------------\n\nTITLE: Running Nue with Node.js Instead of Bun\nDESCRIPTION: Command to run Nue with Node.js instead of the default Bun runtime. This overrides the shebang in the Nue CLI that defaults to Bun.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode $(which nue)\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Nue CLI\nDESCRIPTION: Command to build the Nue project for production deployment, generating optimized files in the .dist/prod directory.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnue build --production\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Large Applications - Nue Framework\nDESCRIPTION: Example directory structure for organizing views in larger Nue applications, showing recommended folder hierarchy and file organization.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp/\n└── view/\n    ├── layout/            # Core layout components\n    │   ├── app.dhtml      # App shell\n    │   ├── navigation.dhtml\n    │   ├── main.dhtml     # Main panel\n    │   └── details.dhtml  # Details panel\n    ├── components/        # Reusable UI pieces\n    │   ├── user-list.dhtml\n    │   ├── search-input.dhtml\n    │   └── ...\n    ├── screens/           # Full-page views\n    │   ├── login.dhtml    # Login screen\n    │   ├── dashboard.dhtml\n    │   └── ...\n    └── utils/             # Shared utilities\n        ├── utils.dhtml    # Helper components\n        └── util.js        # Helper functions\n```\n\n----------------------------------------\n\nTITLE: Table Syntax for Structured Data Presentation (Markdown)\nDESCRIPTION: Shows Markdown table syntax for presenting structured data. Columns and separators must align, while content is easily readable and converted to HTML tables in output.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n | Feature   | Description          | Status  |\\n |-----------|----------------------|---------|\\n | Grid      | Layout system        | Done    |\\n | Sections  | Document structure   | Done    |\\n | Themes    | Design systems       | Soon    |\\n\n```\n\n----------------------------------------\n\nTITLE: Using the 'client' Attribute for Passthrough Scripts in Nue.js HTML\nDESCRIPTION: Shows the use of the `client` attribute on a `<script>` tag as a shorthand alternative to `type=\"text/javascript\"`. This attribute indicates that the inline script should be executed directly by the browser.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script client>\n  console.info('hey'); // Log a message to the console\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Design Tokens and Resets in Settings Layer - CSS\nDESCRIPTION: Defines the 'settings' cascade layer to host design tokens (CSS variables) and a global reset. Dependencies include vanilla CSS and support for the @layer and custom properties features. The :root pseudo-class holds variables for font, spacing, and accent color, while the universal selector resets box model settings. Expected inputs are variable values; outputs are site-wide base styles and reset rules. There are no constraints beyond browser support for CSS layers and variables.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer settings {\n  :root {\n    --font-family-base: 'Helvetica Neue', sans-serif;\n    --spacing-unit: 1rem;\n    --color-accent: #e63946;\n  }\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Heading with Explicit ID and Class\nDESCRIPTION: Generated HTML output for a heading with an explicit ID and class. Shows how Nue transforms the Markdown heading with custom attributes into styled HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<h2 id=\"less\" class=\"more\">\n  <a href=\"#less\" title=\"Less is More\"></a>\n  Less is More\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Using an Explicit Separator in Nue Markdown Grid\nDESCRIPTION: This Markdown example demonstrates using a triple-dash (`---`) as an explicit separator within a `[.grid]` block in Nue.js. This allows for custom content division when the default heading-based separation (using h2 or h3) is not suitable or desired.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_17\n\nLANGUAGE: md\nCODE:\n```\n[.grid]\n  ### Design\n  Design blends form and function.\n\n  ---\n\n  ### Engineering\n  Code enhances the user experience while staying performant.\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transitions in YAML\nDESCRIPTION: YAML configuration to enable CSS view transitions for smooth page navigation effects.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nview_transitions: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Structure in YAML\nDESCRIPTION: YAML configuration for defining site navigation in both header and footer, including social links with images.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n  header:\n    - Emma Bennet: /\n    - Contact: /contact/\n  footer:\n    - © Emma Bennet: /\n    social:\n      - image: /img/github.svg\n        url: //github.com/nuejs/\n        alt: Github Projects\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Blocks in Nue\nDESCRIPTION: Generated HTML output for a Nue block. Shows how block syntax is transformed into a div with appropriate class names, allowing for styling while keeping the content layer clean.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"note\">\n  <h3>Note</h3>\n  <p>Web design is 100% content and 95% typography</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Nue.js Tests with Bun\nDESCRIPTION: Commands for running Nue.js tests using Bun's built-in test runner. Shows how to run all tests or a specific test suite.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Go to nuejs package directory\ncd packages/nuejs\n\n# Run all nuejs tests\nbun test\n\n# Or, run a specific test suite\nbun test test/test-clicks\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Method Event Handlers in Nue.js HTML\nDESCRIPTION: Shows how to pass arguments (e.g., the string 'yo!') directly from the HTML template to a component method (`say`) when an event (`@click`) occurs. The method defined in the script block receives these arguments.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/custom-components.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <button @click=\"say('yo!')\">Say yo!</button>\n\n  <script>\n    say(msg) {\n      console.log(msg); // Log the message to the console\n    }\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown with Nue\nDESCRIPTION: Example of using Markdown table syntax to present structured information. Tables allow for organizing data in rows and columns without requiring HTML markup.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n | Principle                | Description                                                       |\n |--------------------------|-------------------------------------------------------------------|\n | Separation of Concerns   | Dividing a system into distinct sections with specific roles.     |\n | Progressive Enhancement  | Building core functionality first, then adding enhanced features. |\n | Information Architecture | Structuring content for usability and navigation clarity.         |\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Traditional DHTML\nDESCRIPTION: An example of traditional DHTML form validation from the late 1990s, showing how HTML forms could interact with JavaScript for client-side validation before submission.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/rethinking-reactivity/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<FORM ACTION=\"/cgi-bin/form.cgi\"\n  ONSUBMIT=\"return isValidEmail(this.email.value)\">\n  <INPUT TYPE=\"text\" NAME=\"email\">\n  <INPUT TYPE=\"submit\" VALUE=\"Submit\">\n</FORM>\n\n<!-- don't forget the type attribute! -->\n<SCRIPT TYPE=\"text/javascript\">\n  function isValidEmail(email) {\n    return /^\\S+@\\S+$/.test(email)\n  }\n</SCRIPT>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Head with Inherited Data\nDESCRIPTION: Final HTML output showing how data from all three levels (global, application, and page) is combined in the document head section.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- Nue default values -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n\n  <!-- Globals from site.yaml -->\n  <link rel=\"shortcut icon\" src=\"/img/favicon.jpg\">\n  <meta name=\"description\" content=\"A designer and UX engineer\">\n\n  <!-- Directory-specific values from blog.yaml -->\n  <meta name=\"author\" content=\"Emma Bennet\">\n  <meta property=\"og:image\" content=\"https://emmabennet.co/img/og_blog.png\">\n\n  <!-- Document-specific values from the .md file -->\n  <title>Hello, World</title>\n  <meta property=\"article:published_time\" content=\"2023-12-05\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Selective File Building in Nue\nDESCRIPTION: Command to compile only specific file types (Markdown and CSS in this example). Demonstrates the file pattern matching capability of the Nue build system.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnue build .md .css\n```\n\n----------------------------------------\n\nTITLE: Adding a Contact Form to the Homepage\nDESCRIPTION: Markdown snippet showing how to incorporate the interactive contact form component into the homepage content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_13\n\nLANGUAGE: md\nCODE:\n```\n## Contact me\n\nGet in touch to discuss your project.\n\n[contact-me]\n```\n\n----------------------------------------\n\nTITLE: Building a Nue Project\nDESCRIPTION: Command to compile the entire site and prepare it for production deployment. This processes all files in the project.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnue build\n```\n\n----------------------------------------\n\nTITLE: Portfolio Page Content in Markdown\nDESCRIPTION: Markdown content defining the main heading, personal introduction, and a gallery component inclusion directive.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Minimalist, UX developer, designer, urban explorer\n\nI'm Emma Bennett, a design engineer from Berlin. I build websites that are exceptionally well-designed — inside, and outside.\n\n[page-list.gallery]\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Model API in Nue.js\nDESCRIPTION: Demonstrates how to export model components from separate modules through a centralized index.js file to create a clean public API.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/model.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// app/model/index.js\nimport { customers } from './customers'\nimport { deals } from './deals'\n\nexport { customers, deals }\n```\n\n----------------------------------------\n\nTITLE: Using Footnotes in Nue Markdown\nDESCRIPTION: Example of implementing footnotes in Nue Markdown. Footnotes allow for adding supplementary information without disrupting the main content flow.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDesign principles like Separation of Concerns [^1], Progressive Enhancement [^2], and Information Architecture [^3] are fundamental.\n\n[^1]: Separation of Concerns (SoC) is crucial for maintaining clean and maintainable code.\n[^2]: Progressive Enhancement (PE) ensures that core functionality is available to all users, with enhanced features layered on.\n[^3]: Information Architecture (IA) involves organizing content in a way that is intuitive and accessible for users.\n```\n\n----------------------------------------\n\nTITLE: Invalid Expressions in Nue Templates\nDESCRIPTION: Examples of code that will not work in Nue expressions because they are statements rather than expressions that evaluate to a value.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/template-syntax.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- This is a statement, not an expression -->\n-{ var a = 1 }\n\n<!-- Use a ternary expression, not flow control  -->\n-{ if (ok) { return message } }\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Simple Image with Caption\nDESCRIPTION: Shows the HTML output generated for a simple image with a caption using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<figure>\n  <img src=\"hello.webp\" loading=\"lazy\">\n  <figcaption>This content here is the caption.</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Flexible Grid Layout Block (HTML)\nDESCRIPTION: Shows the HTML output for a grid block with cells containing images and descriptions. Each grid entry is wrapped in a div with an image in a <figure> tag and descriptive text. Aids in building richly-formatted, responsive grids.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\\\"grid\\\">\\n  <div>\\n    <figure>\\n      <img src=\\\"feature-1.jpg\\\" loading=\\\"lazy\\\">\\n    </figure>\\n    <p>First feature description</p>\\n  </div>\\n  <div>\\n    <figure>\\n      <img src=\\\"feature-2.jpg\\\" loading=\\\"lazy\\\">\\n    </figure>\\n    <p>Second feature description</p>\\n  </div>\\n  <div>\\n    <figure>\\n      <img src=\\\"feature-3.jpg\\\" loading=\\\"lazy\\\">\\n    </figure>\\n    <p>Third feature description</p>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Traditional Semantic HTML Class Implementation\nDESCRIPTION: Example showing the traditional semantic approach to HTML class naming using generic, reusable component names like 'uilist' and 'uilist-item'.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-misinformation-engine/index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"uilist\">\n  <span class=\"uilist-item\">\n    ...\n  </span>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Installing and Creating a Simple Blog with Nue CLI\nDESCRIPTION: Command to create a new Nue blog project using the simple-blog template, which sets up the initial project structure.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnue create simple-blog\n```\n\n----------------------------------------\n\nTITLE: Creating a SPA with Nue CLI\nDESCRIPTION: Shell command for generating a complete single-page application using the Nue CLI. This command creates a CRM application that inherits the current design system, showcasing Nue's capability to quickly scaffold sophisticated applications.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/standards-first-web-framework/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnue create spa --function crm --todir app --design inherit\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Responsive Attributes - Custom Markup\nDESCRIPTION: Demonstrates embedding an 'image' component with small/large versions, an href link, and target display size. This enables responsive images and clickable media in documentation or landing pages. Requires a processor that recognizes the 'image' macro and associated property keys. Parameters include small/large image paths, size, and link URL; output is a scalable, optionally linked image block.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/index.md#2025-04-23_snippet_3\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[image]\n  small: /img/react-button-compare.png\n  large: /img/react-button-compare-big.png\n  href: /docs/react-button-vs-nue.html\n  size: 1000 x 349\n```\n\nLANGUAGE: Custom Markup\nCODE:\n```\n[image]\n  small: /img/roadmap-2025-2.png\n  large: /img/roadmap-2025-2-big.png\n  width: 750\n  href: /vision/\n```\n\n----------------------------------------\n\nTITLE: Using Glow Syntax Highlighter in JavaScript\nDESCRIPTION: Demonstrates how to import and use the Glow syntax highlighter in JavaScript. It shows importing the library, highlighting HTML code, and specifying options like language and line numbering.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/glow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import highlighter\nimport { glow } from 'nue-glow'\n\nconst code = '<h1>Hello, World</h1>'\n\n// render code\nconst html = glow(code, { language: 'html', numbered: true })\n\nconsole.info(html) // <code language=\"html\">...</code>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Heading with Automatic ID\nDESCRIPTION: Generated HTML output for a heading with automatic ID. Shows how Nue transforms a Markdown heading into HTML with an anchor link for navigation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h2 id=\"less-is-more\">\n  <a href=\"#less-is-more\" title=\"Less is More\"></a>\n  Less is More\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Referencing Defined Footnotes in Markdown Text\nDESCRIPTION: This snippet shows how to reference the previously defined footnotes within the main text of a Markdown document. It uses the labels defined in the `define` tag to create the references.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\nSeparation of concerns [^soc] is an important strategy.\n\n[Progressive Enhancement][^pe] is good for UX.\n```\n\n----------------------------------------\n\nTITLE: Customizing Element Formatting for Syntax Highlighting\nDESCRIPTION: Example of how to modify the formatting of syntax elements beyond color by adding CSS properties like font-weight.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Bold all secondary syntax elements */\npre em {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Functionality with JavaScript\nDESCRIPTION: A JavaScript function that manages tab interactions by toggling attributes for accessibility. It includes functions to toggle attributes and restore tab states based on flags.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/blog/class-naming-strategies.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction toggleAttr(el, name, flag) {\n  flag ? el.setAttribute(name, 1) :  el.removeAttribute(name)\n}\n\nfunction restoreTabs(flags) {\n  const panels = $$('[role=tabpanel]')\n\n  $$('[role=tab]').forEach((el, i) => {\n    toggleAttr(el, 'aria-selected', flags[i])\n    toggleAttr(panels[i], 'hidden', !flags[i])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Permanent Node.js Alias for Nue\nDESCRIPTION: Shell command to create a permanent alias for running Nue with Node.js instead of Bun. This should be added to your shell configuration file.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nalias node-nue=\"node $(which nue)\"\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Styled Code Blocks in Nue\nDESCRIPTION: This snippet shows the HTML structure that Nue generates for styled code blocks. The pre element is wrapped in a div with the specified class name, providing more flexibility for styling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-1-beta/index.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"blue\">\n  <pre>...</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Components via Frontmatter in Markdown - Markdown/Custom Markup\nDESCRIPTION: This frontmatter snippet includes page-level configuration for the Markdown file. It specifies included components (form, video), declared sections (hero), use of inline CSS, and the application directory. This is commonly used by static site generators or custom frameworks to provide metadata and pre-process page structure. No key parameters are required except the property names used by the build system. Output depends on downstream tooling support.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/index.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ninclude: [form, video]\nsections: [hero]\ninline_css: true\nappdir: home\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Sections in Nue\nDESCRIPTION: Generated HTML structure when using section delimiters in Nue. Sections allow content to be divided into logical parts, improving organization and styling capabilities.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<article>\n  <section/>\n  <section/>\n  <section/>\n  ...\n</article>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nue Button and Compare Components\nDESCRIPTION: Demonstrates setting up a button with a popover target and a compare component declaration in Nue syntax. The button is linked to a compare component through the popovertarget attribute.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/test/index.md#2025-04-23_snippet_0\n\nLANGUAGE: nue\nCODE:\n```\n[button \"See the difference\" popovertarget=compare]\n\n[compare :compare=\"compare\"]\n```\n\n----------------------------------------\n\nTITLE: Page Directory Structure Example\nDESCRIPTION: Example showing the organization of page-specific assets within a blog post directory.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/blog/announcing-v2.0/index.md\n  ├── index.md\n  ├── styles.css         # Specific styles for this page\n  ├── script.js          # Specific scripts for this page\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Header Elements with Generated IDs\nDESCRIPTION: Example showing how header elements (h2 and h3) are generated with IDs and anchor elements when the heading_ids setting is enabled. This allows for easy linking to specific sections within a document.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/settings.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2 id=\"less-is-more\">\n  <a href=\"#less-is-more\" title=\"Less is More\"></a>\n  Less is More\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nue Page with YAML Front Matter\nDESCRIPTION: YAML front matter configuration for a Nue welcome page, specifying template, exclusions, inclusions, and display settings for header and footer.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/welcome/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle_template: Nue / Getting started\nexclude: [layout]\ninclude: [form]\nheader: false\nfooter: false\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Button Tag with Label and Href in Nue\nDESCRIPTION: Shows the basic syntax for creating a button with label and href attributes using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_21\n\nLANGUAGE: md\nCODE:\n```\n[button label=\"Learn more\" href=\"/docs/\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Nue with PNPM for Node.js Users\nDESCRIPTION: Alternative command to install Nue using pnpm for those who prefer Node.js over Bun. This requires installing additional dependencies like esbuild and lightningcss.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm install --global nuekit esbuild lightningcss\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup with Node for Nue Framework\nDESCRIPTION: Step-by-step commands for setting up a local development environment for the Nue framework using Node.js. The process includes cloning the repository, installing dependencies with optional testing packages, linking nuekit globally, and serving a Nue project.\nSOURCE: https://github.com/nuejs/nue/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the Nue repository\ngit clone git@github.com:nuejs/nue.git\ncd nue\n# Install dependencies\nnpm install\n# Optionally install testing dependencies\nnpm install --no-save --legacy-peer-deps \"jest@>=30.0.0-alpha.4\" jest-extended\n# Link the nuekit package globally\ncd packages/nuekit\nnpm link\n\n# Go to your project\ncd your-nue-project-dir\n# Serve it using the local nuekit package\nnode $(which nue)\n```\n\n----------------------------------------\n\nTITLE: Defining a CSS Code Block with Syntax Highlighting in Nue Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to create a code block with syntax highlighting in Nue.js. By adding the language hint `css` after the opening triple backticks, the enclosed CSS code will be highlighted using the integrated Glow syntax highlighter.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_19\n\nLANGUAGE: md\nCODE:\n```\n ```css\n // here is a CSS code block\n :root {\n   --base-100: #f3f4f6;\n   --base-200: #e5e7eb;\n   --base-300: #d1d5db;\n   --base-400: #6b7280;\n }\n ```\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in Syntax Highlighting in site.yaml\nDESCRIPTION: Configuration to disable the built-in syntax highlighting stylesheet to implement custom styling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsyntax_highlight: false\n```\n\n----------------------------------------\n\nTITLE: Inline SVG Tag in Nue Markdown Extensions\nDESCRIPTION: Demonstrates how to add inline SVG images using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_13\n\nLANGUAGE: md\nCODE:\n```\n[svg /icon/continue.svg]\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transitions in Configuration\nDESCRIPTION: YAML configuration that enables view transitions in the site.yaml file for a Nue project.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nview_transitions: true\n```\n\n----------------------------------------\n\nTITLE: Shortcut Alias for Video Tag in Nue\nDESCRIPTION: Demonstrates the shortcut alias ('!') for the video tag in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_17\n\nLANGUAGE: md\nCODE:\n```\n[! /videos/hello.mp4]\n```\n\n----------------------------------------\n\nTITLE: Structuring Contact Page Content in Markdown for Nue.js\nDESCRIPTION: Defines the structure and content of a contact page using Markdown syntax, including a stack layout, heading, availability message, contact form placeholder, and profile image.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/contact/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[.stack]\n  # Contact me\n  I'm currently available for hire\n  \n  [contact-me]\n\n  ---\n  [image]\n    src: /img/profile.jpg\n    size: 460 x 460\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment for Nue Framework\nDESCRIPTION: Instructions for setting up a local development environment for the Nue framework. The process includes ensuring no global installation of nuekit, cloning the repository, installing dependencies, and linking the package for local development.\nSOURCE: https://github.com/nuejs/nue/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun rm -g nuekit\nnpm rm -g nuekit\n```\n\n----------------------------------------\n\nTITLE: Rendered JavaScript Code Block with Custom Class and Line Numbers\nDESCRIPTION: This code block snippet demonstrates the rendered output of a JavaScript function defined in Nue Markdown with the `.purple` class and `numbered` attribute applied. It visually represents how custom styling and line numbering appear in the final output.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction hello() {\n  // world\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Semantic CSS Button Markup\nDESCRIPTION: Example of a button element styled with semantic CSS, showing how a single meaningful class name can be used instead of multiple utility classes, promoting reusability and readability.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-vs-semantic-css/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- semantic css -->\n<button class=\"secondary\">\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Small Applications - Nue Framework\nDESCRIPTION: Simplified directory structure for smaller Nue applications with a flat organization pattern.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/view.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napp/\n└── view/\n    ├── app.dhtml          # App shell\n    ├── navigation.dhtml   # Sidebar\n    ├── main.dhtml         # Main panel\n    ├── details.dhtml      # Details panel\n    ├── login.dhtml        # Login screen\n    ├── user-list.dhtml    # User list\n    ├── utils.dhtml        # Utilities\n    └── util.js            # Helpers\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Glow's Rich Highlighting Features\nDESCRIPTION: This example demonstrates Glow's extensive highlighting capabilities including line numbers, selections, error highlights, insertions, and deletions. It shows code from a Svelte component with various highlighting styles.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // imports\n  import { longpress } from './longpress.js';\n\n  let pressed = false;\n  ••bet glow_market = 9999_99++••;\n</script>\n\n<label>\n  <input type=range •bind:value={duration}• max={2000} step={100}>\n  {duration}ms\n</label>\n\n<button use:longpress={duration}\n-  on:mousedown=\"{() => pressed = true}\"\n+  on:longpress=\"{() => pressed = true}\">Press me</button>\n\n<!-- condition -->\n{#if pressed}\n  <p>••Yoou•• pressed and held for {duration}ms</p>\n{/if}\n\n<style>\n  /* button style */\n  [role=\"button\"], •button• {\n    background-color: var(--main-color);\n    color: #899;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Catalyst Dialog Component Structure in HTML-like Markup\nDESCRIPTION: This snippet shows an example of a dialog component implemented using Catalyst's custom HTML-like tags. It highlights the use of elements like `<Dialog>`, `<DialogTitle>`, `<DialogDescription>`, `<DialogBody>`, `<Field>`, `<Label>`, `<Input>`, `<DialogActions>`, and `<Button>` to structure the component, separating concerns similar to React components but using a markup language. This example is used to contrast Catalyst's approach with standard semantic HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-misinformation-engine/index.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Dialog>\n  <DialogTitle>Join mailing list</DialogTitle>\n  <DialogDescription>\n    Expect <Strong>no spamming</Strong>\n  </DialogDescription>\n\n  <DialogBody>\n    <Field>\n      <Label>Email</Label>\n      <Input name=\"email\" />\n    </Field>\n  </DialogBody>\n\n  <DialogActions>\n    <Button plain>Cancel</Button>\n    <Button>Join</Button>\n  </DialogActions>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Component HTML Structure\nDESCRIPTION: Shows how Web Components are rendered as HTML custom elements in Nue's implementation\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-release-candidate/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<contact-me custom=\"contact-me\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Blog with Nue\nDESCRIPTION: Command to create a new simple blog application using Nue. This creates a starter blog project with the necessary structure and files.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnue create simple-blog\n```\n\n----------------------------------------\n\nTITLE: Image Links in Nue Markdown Extensions\nDESCRIPTION: Shows how to create linked images using the href attribute in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_9\n\nLANGUAGE: md\nCODE:\n```\n[image book.svg]\n  caption: View documentation\n  href: /docs/\n```\n\n----------------------------------------\n\nTITLE: Shortcut Alias for Image Tag in Nue\nDESCRIPTION: Demonstrates the shortcut alias ('!') for the image tag in Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_8\n\nLANGUAGE: md\nCODE:\n```\n[! hello.webp]\n```\n\n----------------------------------------\n\nTITLE: Using Expanded Footnotes in Nue\nDESCRIPTION: Example of Nue's expanded footnote syntax that allows marking entire phrases as part of the footnote reference. This enhances readability by making footnote references more descriptive.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nDesign principles like [Separation of Concerns][^1], [Progressive Enhancement][^2], and [Semantic markup][^3] are fundamental.\n```\n\n----------------------------------------\n\nTITLE: Showcasing Glow's Markdown Highlighting\nDESCRIPTION: Demonstrates Glow's capabilities for highlighting Markdown syntax with live code features. Shows highlighting of headings, emphasis, code blocks, images, and blockquotes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# There's something about Lightning CSS\nWriting future CSS today has been a massive\n•productivity boost.• You'll get nesting, `color-mix()`,\nvariables, and whatnot. Natively, today.\n\n![CSS, bro](/vanilla.png)\n\n> •After I ditched all tooling• I was able to\n> work closer to metal. Everything happened\n> sub-millisecond. I entered a new planet.\n```\n\n----------------------------------------\n\nTITLE: Comparing Utility-First Tailwind CSS Button Markup\nDESCRIPTION: Example of a button element styled with Tailwind's utility classes, demonstrating the verbose nature of utility-first CSS with multiple classes for styling a single button element.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-vs-semantic-css/index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- utility-first css -->\n<button className=\"group mb-8 flex h-10 w-10\n  items-center justify-center rounded-full\n  bg-white shadow-md shadow-zinc-800/5 ring-1\n  ring-zinc-900/5 transition dark:border\n  dark:border-zinc-700/50 dark:bg-zinc-800\n  dark:ring-0 dark:ring-white/10\n  dark:hover:border-zinc-700\n  dark:hover:ring-white/20\n  lg:absolute lg:-left-5\n  lg:mb-0 lg:-mt-2\n  xl:-top-1.5\n  xl:left-0\n  xl:mt-0\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata in YAML for Nue.js\nDESCRIPTION: Sets up the page metadata including form component inclusion, CSS inlining, and page title for a Nue.js contact page.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-blog/contact/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ninclude: [form]\ninline_css: true\ntitle: Contact me\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Nue Globally with Bun\nDESCRIPTION: Command to globally install the Nue framework using Bun package manager. Nue is installed globally because it's designed to be used as a command line tool.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Install Nue\nbun install --global nuekit\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block with Language Hint (Markdown, JavaScript)\nDESCRIPTION: Demonstrates Markdown's fenced code block with a language identifier (JavaScript), enabling syntax highlighting in editors and previews. Input must be wrapped with three backticks and language tag.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n ```js\\n function example() {\\n   return \\\"Hello world\\\"\\n }\\n ```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Markdown Syntax in Nue\nDESCRIPTION: Example of standard Markdown syntax including headings, formatted text, images, quotes, and lists. This shows the foundation of content formatting in Nue.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# First level heading\nA paragraph with **bold** and *italics* and `inline code`\n\n![An image](/path/to/image.webp)\n\n## Second level heading\n\n> Quoted text with a [Link to docs](/docs/)\n\n1. This here\n2. is an ordered\n3. list of items\n\nFollowed with:\n\n- An unordered\n- list of items\n\n\nAnd a horizontal line:\n\n***\n```\n\n----------------------------------------\n\nTITLE: Manual Section Breaks Using Triple Dashes (Markdown)\nDESCRIPTION: Shows manual creation of content sections in Nue Markdown with triple dashes (---) as explicit section breaks. Useful when visual or logical sections do not align with heading structure. Each block between --- is parsed as a separate section in HTML.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nFirst section content...\\n\\n---\\n\\nSecond section content...\\n\\n---\\n\\nThird section content...\\n\n```\n\n----------------------------------------\n\nTITLE: Example YAML Content for Nue Framework\nDESCRIPTION: Shows a YAML configuration example that defines metadata for views within the Nue framework. Demonstrates how to configure column titles and sorting options for members and customers views.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# View metadata\nmembers:\n  title: Members\n  columns: [Source, Joined]\n  sorting:\n    created: Join date\n    cc: Location\n    email: Email\n\ncustomers:\n  title: Customers\n  columns: [Plan, Subscribed]\n  sorting:\n    created: Date subscribed\n    card: Card type\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Heading IDs in Nue\nDESCRIPTION: Example of automatic heading ID generation in Nue. When enabled in configuration, this feature creates anchor links for headings, facilitating in-page navigation.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/_content-syntax.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Less is More\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Settings in YAML for Nue.js Project\nDESCRIPTION: YAML configuration that defines blog settings including content collection, display options, and file exclusions. It specifies to include blog-index, hide headers and footers, use inline CSS, and exclude various content types and files.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: [blog-index]\ncontent_collection: blog\nsubheader: false\npagehead: false\npagefoot: false\ninline_css: true\nunlisted: true\n\nexclude:\n  - technical-content\n  - components\n  - blog.css\n  - syntax\n  - video\n  - form\n```\n\n----------------------------------------\n\nTITLE: Installing Nuemark with Bun\nDESCRIPTION: This shell script shows the recommended installation process for Nuemark using Bun. It covers installing Bun itself, the Nuekit website generator, and the Nuemark demo.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-nuemark/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Install Bun (if not done yet)\ncurl -fsSL https://bun.sh/install | bash\n\n# Install website generator (Nuemark playground)\nbun install nuekit --global\n\n# Install Nuemark demo (as seen on this page)\nbun create nue@latest\n```\n\n----------------------------------------\n\nTITLE: Examining the Generated HTML Structure for Code Blocks\nDESCRIPTION: Shows the HTML structure that Nue's Glow highlighter generates from Markdown code blocks, using semantic HTML elements instead of class-based styling.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n  <code language=\"javascript\">\n    <sup>// a comment</sup>\n    <em>\"A string value\"</em>\n    ...\n  </code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Forceful Style Overrides in Overrides Layer - CSS\nDESCRIPTION: Defines an 'overrides' layer intended for exception-based styling, strictly deprioritized except in rare cases. No external dependencies but relies on previous layers for context. Provides rules that forcibly hide elements or center text, using !important for specificity. Inputs are elements with .is-hidden or .force-center classes; expected outputs are elements visually hidden or forcibly centered, typically used for content patches or bug-fixes.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/cascade-layers.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@layer overrides {\n  .is-hidden {\n    display: none;\n  }\n  .force-center {\n    text-align: center !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Glow as a Standalone Library\nDESCRIPTION: Instructions for installing the nue-glow package using npm, pnpm, or bun. This allows using Glow as a standalone syntax highlighting library.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-glow/index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i nue-glow\n```\n\n----------------------------------------\n\nTITLE: Footnote Syntax for Content References (Markdown)\nDESCRIPTION: Explains use of Markdown footnote syntax for adding references without breaking content flow. Includes a main statement and a referenced footnote. Input follows footnote/annotation format.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/content-authoring.md#2025-04-23_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\nHere's a statement that needs clarification[^1].\\n\\n[^1]: This is the footnote content providing more detail.\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Glow with Bun Package Manager\nDESCRIPTION: Command to install the Glow syntax highlighter using Bun package manager.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/glow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun i nue-glow\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Code Block\nDESCRIPTION: Example of how to create a fenced code block in Markdown with language specification.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/syntax-highlighting.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript\n// a comment\n\"A string value\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components in Markdown\nDESCRIPTION: Markdown implementation showing how to use a custom Web Component within Markdown content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/reactivity.md#2025-04-23_snippet_12\n\nLANGUAGE: md\nCODE:\n```\n### Your view counter\n\n[view-counter]\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Video Tag with Options\nDESCRIPTION: Shows the HTML output generated for a video tag with poster, src, and width options using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<video class=\"heroic\" width=\"1000\" poster=\"hello.png\">\n  <source src=\"hello.mp4\" type=\"video/mp4\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Nuemark Tags with TSX\nDESCRIPTION: This example demonstrates how to extend Nuemark with custom tags using TSX. It shows a simple alert component that takes color and message parameters.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/introducing-nuemark/index.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyAlert(props: { color: string, message: string }) {\n  return (\n    <p style={{ color: color || 'red' }}>{ props.message }</p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Live Startup Project with Nue\nDESCRIPTION: Command to generate a fully-featured startup project with Mies design system and live deployment using Nue framework in Phase 3.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/vision/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnue create startup --design \"Mies\" --live\n```\n\n----------------------------------------\n\nTITLE: Building Rust Model to WebAssembly for Nue Project\nDESCRIPTION: Command used to compile the Rust codebase to WebAssembly targeting web browsers. After compilation, the generated files are moved to the model/wasm directory as specified in the project's Makefile.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/examples/simple-mpa/app/model-rs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasm-pack build --target web\n```\n\n----------------------------------------\n\nTITLE: Static Assets Directory Structure\nDESCRIPTION: Example showing the organization of static asset directories for images and icons.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/\n  ├── img/                  # Folder for image files\n  │   ├── screenshot1.png   # Example screenshot for a blog\n  │   ├── screenshot2.webp  # Another example screenshot\n  │   └── ...               # Additional image files can be added here\n  |\n  ├── icon/                 # Folder for SVG icons\n  │   ├── arrow-right.svg\n  │   ├── arrow-left.svg\n  │   ├── three-dots.svg\n  │   └── ...               # Additional SVG files can be added here\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Nue.js TOC Component\nDESCRIPTION: Shows the typical HTML structure generated by the `<toc/>` component. It creates a main container `<div>` with nested `<nav>` elements, each containing links (`<a>`) to the corresponding h2 and h3 headings found in the Markdown content.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/core-components.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div aria-label=\"Table of contents\" class=\"toc\">\n  <nav>\n    <a href=\"#default-layout\">\n      <strong>Default layout</strong>\n    </a>\n  </nav>\n  <nav>\n    <a href=\"#slots\"><strong>Slots</strong></a>\n    <a href=\"#filling-the-slots\">Filling the slots</a>\n    <a href=\"#template-inheritance\">Template inheritance</a>\n    <a href=\"#disabling\">Disabling slots</a>\n  </nav>\n  <nav>\n    ...\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Button Triggering a Popover\nDESCRIPTION: Shows the HTML output generated for a button that triggers a popover using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<button popovertarget=\"info-popover\">Learn more</button>\n```\n\n----------------------------------------\n\nTITLE: Nue CLI Help Output Format\nDESCRIPTION: The formatted help output displayed when running the help command. Shows the basic usage patterns and command structure for the Nue CLI.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/command-line-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nUsage\n  nue [command] [options] [file_matches]\n  nue -v or --version\n  nue -h or --help\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for 404 Page\nDESCRIPTION: YAML configuration block defining page includes and CSS class for a 404 error page template.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/404.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ninclude: [technical-content]\nclass: err-404\n---\n```\n\n----------------------------------------\n\nTITLE: Business Site Directory Structure\nDESCRIPTION: Complete directory structure example for a business website including documentation, blog, about section, and pricing pages.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n/\n  ├── @global                # Global styles\n  │   ├── settings.css\n  │   ├── colors.css\n  │   ├── typography.css\n  ├── @library              # Reusable styles\n  │   ├── button.css\n  │   ├── forms.css\n  │   ├── cards.css\n  ├── index.md              # Front page\n  ├── home                  # Front page assets\n  │   ├── home.yaml\n  │   ├── styles.css\n  │   ├── scripts.js\n  ├── docs                  # Documentation\n  │   ├── index.md\n  │   ├── guide.md\n  │   ├── reference.md\n  ├── blog                  # Blog\n  │   ├── blog.yaml\n  │   ├── post1.md\n  │   ├── post2.md\n  ├── about                 # About section\n  │   ├── index.md\n  │   ├── team.md\n  │   ├── history.md\n  ├── pricing\n  │   ├── index.md\n  │   ├── plans.md\n  ├── img                   # Static assets\n  │   ├── logo.png\n  │   ├── hero-banner.jpg\n  │   ├── product-image.png\n```\n\n----------------------------------------\n\nTITLE: Catalyst UI Button Implementation\nDESCRIPTION: Complex example showing Tailwind's Catalyst UI button implementation with extensive utility classes and custom DSL expressions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-misinformation-engine/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"[&amp;>[data-slot=icon]]:-mx-0.5 [&amp;>[data-slot=icon]]:my-0.5 [&amp;>[data-slot=icon]]:shrink-0 [&amp;>[data-slot=icon]]:size-5 [&amp;>[data-slot=icon]]:sm:my-1 [&amp;>[data-slot=icon]]:sm:size-4 [&amp;>[data-slot=icon]]:text-[--btn-icon] [--btn-bg:theme(colors.zinc.900)] [--btn-border:theme(colors.zinc.950/90%)] [--btn-hover-overlay:theme(colors.white/10%)] [--btn-icon:theme(colors.zinc.400)] after:-z-10 after:absolute after:data-[active]:bg-[--btn-hover-overlay] after:data-[disabled]:shadow-none after:data-[hover]:bg-[--btn-hover-overlay] after:inset-0 after:rounded-[calc(theme(borderRadius.lg)-1px)] after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] before:-z-10 before:absolute before:bg-[--btn-bg] before:data-[disabled]:shadow-none before:inset-0 before:rounded-[calc(theme(borderRadius.lg)-1px)] before:shadow bg-[--btn-border] border border-transparent dark:[--btn-bg:theme(colors.zinc.600)] dark:[--btn-hover-overlay:theme(colors.white/5%)] dark:after:-inset-px dark:after:rounded-lg dark:before:hidden dark:bg-[--btn-bg] dark:border-white/5 dark:text-white data-[active]:[--btn-icon:theme(colors.zinc.300)] data-[disabled]:opacity-50 data-[focus]:outline data-[focus]:outline-2 data-[focus]:outline-blue-500 data-[focus]:outline-offset-2 data-[hover]:[--btn-icon:theme(colors.zinc.300)] focus:outline-none font-semibold forced-colors:[--btn-icon:ButtonText] forced-colors:data-[hover]:[--btn-icon:ButtonText] gap-x-2 inline-flex isolate items-center justify-center px-[calc(theme(spacing[3.5])-1px)] py-[calc(theme(spacing[2.5])-1px)] relative rounded-lg sm:px-[calc(theme(spacing.3)-1px)] sm:py-[calc(theme(spacing[1.5])-1px)] sm:text-sm/6 text-base/6 text-white\"> Button </button>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Utility-First Implementation\nDESCRIPTION: Example demonstrating Tailwind's utility-first approach with multiple utility classes for styling a navigation component.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-misinformation-engine/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"sticky top-0 z-40 w-full backdrop-blur flex-none transition-colors duration-500 lg:z-50 lg:border-b bg-white/95 supports-backdrop-blur:bg-white/60 dark:bg-transparent\">\n  <span class=\"py-4 border-b border-slate-900/10 lg:px-8 lg:border-0 dark:border-slate-300/10 px-4\">\n    ...\n  </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-page Application with Nue\nDESCRIPTION: Command to create a new multi-page application (MPA) using Nue as an alternative to the simple blog template.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnue create simple-mpa\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Separator Syntax\nDESCRIPTION: Demonstrates the new standardized syntax for section and thematic breaks in Markdown\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/nue-release-candidate/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n***\n___\n```\n\n----------------------------------------\n\nTITLE: Static Directory Structure Example\nDESCRIPTION: Example showing the organization of static assets like images, icons and videos in a Nue project.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/project-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/\n  ├── img/                   # Images\n  │   ├── hero/              # Hero images\n  │   │   ├── home.webp\n  │   │   └── about.webp\n  │   ├── blog/              # Blog post images\n  │   │   ├── post-1.webp\n  │   │   └── post-2.webp\n  │   └── team/              # Team member photos\n  │       ├── sarah.webp\n  │       └── james.webp\n  │\n  ├── icon/                  # UI icons\n  │   ├── navigation/\n  │   │   ├── menu.svg\n  │   │   └── close.svg\n  │   └── social/\n  │       ├── github.svg\n  │       └── twitter.svg\n  │\n  ├── video/                 # Video content\n  │   ├── demos/\n  │   │   └── feature-1.mp4\n  │   └── tutorials/\n  │       └── setup.mp4\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Nue SPA\nDESCRIPTION: Commands to install the Nue toolkit globally using Bun package manager, create a simple multi-page application, and build it for production deployment.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/react-button-vs-nue.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun install --global nuekit\nnue create simple-mpa\nnue build --production\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Tests with Bun and Node for Nue Development\nDESCRIPTION: Commands for installing dependencies and running tests for the Nue framework using either Bun (recommended) or Node.js. For Node.js, additional Jest dependencies are required.\nSOURCE: https://github.com/nuejs/nue/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Bun (recommended)\nbun install\nbun test\n\n# Node\nnpm install\nnpm install --no-save --legacy-peer-deps \"jest@>=30.0.0-alpha.4\" jest-extended\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using Native CSS Nesting for Component Styling\nDESCRIPTION: Demonstrates modern CSS nesting syntax within the components layer to create intuitive, hierarchical styles. The example shows styling a header with nested nav elements, eliminating the need for preprocessors like SASS or LESS.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/css-best-practises.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@layer components {\n  body > header {\n    padding: 1em;\n\n    > :first-child {\n      width: 10rem;\n    }\n\n    > nav {\n      display: flex;\n      gap: 1em;\n\n      a {\n        color: var(--main-500);\n      }\n    }\n\n    + nav {\n      font-size: 0.9em;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Various Catalyst Tags Functioning like HTML `<p>`\nDESCRIPTION: This snippet lists several custom tags from the Catalyst framework (`<Text>`, `<Description>`, `<DialogDescription>`, `<AlertDescription>`) that function similarly to the standard HTML `<p>` tag for representing paragraph-level text content. The example is presented to critique the creation of numerous vendor-specific tags for purposes achievable with standard HTML and CSS, questioning the consistency of favoring content-aware element names while discouraging content-aware class names.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/blog/tailwind-misinformation-engine/index.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Catalyst <p> tags -->\n<Text>\n<Description>\n<DialogDescription>\n<AlertDescription>\n...\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Button with Inline SVG\nDESCRIPTION: Shows the HTML output generated for a button with an inline SVG icon using Nue's Markdown extensions.\nSOURCE: https://github.com/nuejs/nue/blob/master/packages/nuejs.org/docs/markdown-extensions.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/docs/\" role=\"button\">\n  <em>Learn more</em>\n  <svg viewBox=\"0 0 24 24\">...</svg>\n</a>\n```"
  }
]