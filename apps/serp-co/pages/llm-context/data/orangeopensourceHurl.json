[
  {
    "owner": "orange-opensource",
    "repo": "hurl",
    "content": "TITLE: Executing a Simple GET Request in Hurl\nDESCRIPTION: This Hurl script contains the most basic command: a single GET request targeting the URL `https://example.org`. It does not include any specific headers, request body, captures, or assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Status Code in Hurl\nDESCRIPTION: This snippet illustrates how to assert the HTTP response status code. It uses the `status` keyword to specify the assertion, followed by a comparison operator and the expected status code. This is a basic check to ensure the request returned the expected status, like successful or error.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_164\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP *\n[Asserts]\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Basic Hurl File with HTTP 200 Status Check\nDESCRIPTION: This snippet defines a basic Hurl file that sends a GET request to a local server and checks for a 200 OK HTTP status code. This serves as a starting point for adding more sophisticated tests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_0\n\nLANGUAGE: Hurl\nCODE:\n```\n# Our first Hurl file, just checking\n# that our server is up and running.\nGET http://localhost:3000\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Making Sequential HTTP Requests with Value Capture (Hurl Language)\nDESCRIPTION: This snippet demonstrates how to perform an HTTP GET request and capture a token from the response using XPath, which is then used as a header in a subsequent POST request within the same Hurl document. Dependencies include the Hurl command-line tool and network access to the target endpoint. The first request fetches a CSRF token from a meta tag in HTML, while the second logs in using that token and checks for an HTTP 302 response. Parameters include request URIs and variable interpolation with {{csrf_token}}. Output is validated via HTTP status codes. Limitations: Assumes stable response structure for XPath capture and requires correct endpoint URLs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Testing Status Code in Hurl\nDESCRIPTION: These snippets demonstrate how to test the HTTP status code in Hurl.  The first example tests for an exact status code match. The second tests if the status code is within a range.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_28\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\n# Testing status code is in a 200-300 range\nHTTP *\n[Asserts]\nstatus >= 200\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Basic Hurl GET Request Example\nDESCRIPTION: Demonstrates a basic GET request in Hurl format to 'https://example.org/api/dogs' with query parameter 'id=4567'. It includes 'User-Agent' and 'Content-Type' headers and specifies Basic Authentication using the credentials 'alice:secret'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs?id=4567\nUser-Agent: My User Agent\nContent-Type: application/json\n[BasicAuth]\nalice: secret\n```\n\n----------------------------------------\n\nTITLE: Performing Basic GET Request with Asserts Hurl\nDESCRIPTION: This Hurl snippet demonstrates a simple GET request, adding a custom header, checking the HTTP status code (302), and performing assertions on the 'Location' header using `exists` and `contains`. It also illustrates inline and multi-line comments using `#`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/hurl-file.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# A very simple Hurl file\n# with tasty comments...\nGET https://www.sample.net\nx-app: MY_APP  # Add a dummy header\nHTTP 302       # Check that we have a redirection\n[Asserts]\nheader \"Location\" exists\nheader \"Location\" contains \"login\"  # Check that we are redirected to the login page\n```\n\n----------------------------------------\n\nTITLE: Asserting Content with Queries and Predicates - Hurl\nDESCRIPTION: This snippet uses Hurl's assert block to verify specific content in the HTTP response by combining data queries (e.g., XPath) and predicates. Here, it asserts that the result of an XPath evaluation on the response body equals a target string. The snippet is dependent on Hurl and any necessary data querying extensions. The test expects both the status code and the result of the predicate to pass for success.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_61\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n[Asserts]\nxpath \"string(//title)\" == \"301 Moved\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Test Scenario - Hurl\nDESCRIPTION: Presents a test scenario in the Hurl file format, equivalent to the Karate example. It demonstrates making a POST request with a JSON body, asserting the status, capturing a value from the response body (`jsonpath`), and using the captured value in a subsequent GET request. This showcases Hurl's built-in testing and chaining capabilities.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_3\n\nLANGUAGE: Hurl\nCODE:\n```\n# Scenario: create and retrieve a cat\n\nPOST http://myhost.com/v1/cats\n{ \"name\": \"Billie\" }\nHTTP 201\n[Captures]\ncat_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.name\" == \"Billie\"\n\nGET http://myshost.com/v1/cats/{{cat_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Version and Status\nDESCRIPTION: This snippet demonstrates asserting the protocol version and status code of an HTTP response using the `HTTP` keyword. The HTTP version can be explicitly checked or skipped using wildcards.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/404.html\nHTTP 404\n```\n\n----------------------------------------\n\nTITLE: Descriptive HTTP Request and Assertion Hurl File - Hurl\nDESCRIPTION: This Hurl code demonstrates a simple HTTP GET request with descriptive comments and response assertions. It sends a GET request to a specified URL, adds a custom header, then checks for a 302 redirection response and asserts the existence and specific content of a response header. Required: Hurl CLI installed, and the remote endpoint must be compatible. Inputs include the request method, URL, headers, and inline assertions. Output is pass/fail based on the HTTP response and assertion evaluation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_107\n\nLANGUAGE: hurl\nCODE:\n```\n# A very simple Hurl file\n# with tasty comments...\nGET https://www.sample.net\nx-app: MY_APP  # Add a dummy header\nHTTP 302       # Check that we have a redirection\n[Asserts]\nheader \"Location\" exists\nheader \"Location\" contains \"login\"  # Check that we are redirected to the login page\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Response Asserts in Hurl Files\nDESCRIPTION: This snippet outlines how to define assertions on HTTP responses within a Hurl file, including status code, response headers, and custom queries. It provides examples of simple status code assertions, header value assertions, and explicit asserts using XPath queries combined with predicates to validate response contents, enabling Hurl to be used effectively as a testing framework.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\nLocation: http://www.example.org\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n[Asserts]\nxpath \"string(//title)\" == \"301 Moved\"\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data - Hurl\nDESCRIPTION: Demonstrates how to send a JSON payload in a PUT request using the Hurl file format. The JSON data is placed directly after the request line and headers. This showcases Hurl's concise syntax for common HTTP operations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_0\n\nLANGUAGE: Hurl\nCODE:\n```\nPUT http://localhost:3000/api/login\n{\n  \"username\": \"xyz\",\n  \"password\": \"xyz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD Pipeline with YAML for Docker-Based Integration Testing\nDESCRIPTION: This GitLab CI/CD YAML configuration sets up a pipeline that uses a Docker 24 image with Docker-in-Docker (DinD) service to run integration tests. The pipeline includes a build stage where the Hurl testing tool is installed from Alpine Linux's testing repository before invoking the integration test script with the Docker hostname for service accessibility. It requires GitLab Runner with Docker support and network configuration allowing DinD service communication. Inputs include committed project files and integration script, outputs are pipeline test results accessible from GitLab UI.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:24\n\nbuild:\n   stage: build\n   services:\n      - docker:24-dind\n   before_script:\n      # Add Hurl on Alpine (testing channel)\n      - apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl\n   script:\n      - bin/integration.sh http://docker:3000\n```\n\n----------------------------------------\n\nTITLE: Capturing Data Between Requests in Hurl\nDESCRIPTION: This snippet demonstrates how to capture data from one request's response and use it in a subsequent request. The `[Captures]` section extracts the `order_id` from the JSON response using a JSONPath expression, and then substitutes it into the URL of the second request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_18\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sample.org/orders\nHTTP 201\n[Captures]\norder_id: jsonpath \"$.order.id\"\n\nGET https://sample.org/orders/{{order_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Passing Data between Requests\nDESCRIPTION: This snippet shows how to pass data between requests using the `[Captures]` section. It captures a value from the first response and uses it in the subsequent request. The example captures an order ID and then uses it to make a GET request to retrieve the order details.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sample.org/orders\nHTTP 201\n[Captures]\norder_id: jsonpath \"$.order.id\"\n\nGET https://sample.org/orders/{{order_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining and Injecting Variables in Hurl CLI and Hurl Script Language\nDESCRIPTION: Describes various supported methods to define and inject user variables in Hurl, including command line options, environment variables, and within Hurl file's [Options] section. Variables can be passed individually, via a file, or environment prefixes. This snippet shows example usage for each method and includes sample syntax in both shell and Hurl script. Variables are injected to customize HTTP requests dynamically at runtime.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/secrets.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhurl --variable host=example.net --variable id=1234 test.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\nhurl --variables-file vars.env test.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport HURL_host=example.net\nexport HURL_id=1234\nhurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data and Asserting on Response - Hurl\nDESCRIPTION: Illustrates sending a JSON POST request and asserting on response headers and body fields, such as response status, field values, and format using JSONPath. Useful for REST API testing workflows. Requires only Hurl and a JSON-supporting endpoint. Inputs: endpoint and JSON body; outputs: assertion results in test output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$.status\" == \"RUNNING\"    # Check the status code\njsonpath \"$.tests\" count == 25      # Check the number of items\njsonpath \"$.id\" matches /\\d{4}/     # Check the format of the id\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Test File (Shell)\nDESCRIPTION: This shell snippet shows the command used to execute a Hurl test file named `basic.hurl` using the `hurl --test` command. The output demonstrates a successful test run, indicating that all requests executed and all assertions passed within the specified file. This requires the Hurl executable to be installed and available in the system's PATH.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --test basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Explicit Response Assertions with Predicates\nDESCRIPTION: Explains how to perform detailed assertions on response content, headers, status, and body using predicates like `contains`, `matches`, `startsWith`. Supports extracting data with queries on status, headers, body, JSON, XPath, and applying filters such as `count` for collections. Helps validate complex response scenarios.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_144\n\n\n\n----------------------------------------\n\nTITLE: Running Hurl with a Session File in Shell\nDESCRIPTION: Executes the Hurl tool with a session file containing HTTP request definitions. Requires the hurl binary available in the system PATH and a valid .hurl file. The command reads requests from the specified file ('session.hurl') and outputs the results to stdout. Useful for automating collections of HTTP requests or tests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl session.hurl\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Requests with Captures in Hurl\nDESCRIPTION: Demonstrates how to make HTTP GET and POST requests with Hurl, including capturing a CSRF token from the response of the first request and using it in a subsequent request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.net\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.net/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Explicitly Asserting Response Content (Hurl)\nDESCRIPTION: Illustrates using the `[Asserts]` section for explicit assertions on the response. This example uses an XPath query to extract text content from the response body and asserts that it equals the string \"301 Moved\".\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_16\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n[Asserts]\nxpath \"string(//title)\" == \"301 Moved\"\n```\n\n----------------------------------------\n\nTITLE: Testing Status Code is 200 in Hurl\nDESCRIPTION: This snippet demonstrates testing for a specific HTTP status code (200 OK) in a Hurl request. The `HTTP 200` line asserts that the response must have a 200 status code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_32\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Headers in Hurl\nDESCRIPTION: Tests the response headers of an HTTP request. It uses implicit asserts, which directly specify the expected header and value. It also uses explicit asserts via the `header` keyword and various predicates, validating the presence and content of headers such as `Location` and `Set-Cookie`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_56\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Running Full Integration Script (Shell)\nDESCRIPTION: Executes the complete `bin/integration.sh` script, passing the local development server URL. The output demonstrates the sequence: starting the container, waiting for the server, running the Hurl tests (showing success for each file), and finally stopping the container. This confirms the local test suite is functional.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/integration.sh http://localhost:3000\nStarting container\n48cf21d193a01651fc42b80648abdb51dc626f31c3f9c8917aea899c68eb4a12\nWaiting server to be ready\nTesting http://localhost:3000\nRunning Hurl tests\n [1mlogin.hurl [0m:  [1;32mSuccess [0m (3 request(s) in 34 ms)\n [1mbasic.hurl [0m:  [1;32mSuccess [0m (4 request(s) in 35 ms)\n [1msignup.hurl [0m:  [1;32mSuccess [0m (8 request(s) in 53 ms)\n--------------------------------------------------------------------------------\nExecuted files:    3\nExecuted requests: 15 (283.0/s)\nSucceeded files:   3 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          53 ms\n\nStopping container\nmovies\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Values for Reuse in Hurl Files\nDESCRIPTION: This Hurl snippet demonstrates how to capture a value from an HTTP response using an XPath query and reuse it in subsequent requests. It shows capturing a CSRF token from an HTML response to include it in a later POST request's header via variable interpolation. This feature enables chaining requests that depend on dynamic data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\n```\n\n----------------------------------------\n\nTITLE: Example Variables File Format (`vars.env`)\nDESCRIPTION: Defines the content of a sample `vars.env` file, used with the `--variables-file` option. Each line contains a key-value pair defining a variable for Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_200\n\nLANGUAGE: text\nCODE:\n```\nhost=example.net\nid=1234\n```\n\n----------------------------------------\n\nTITLE: Passing Data Between Requests using Captures in Hurl\nDESCRIPTION: This snippet shows how to pass data between requests using the `[Captures]` section.  The value of `order_id` is extracted from the JSON response of the POST request using JSONPath and then used in the subsequent GET request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_19\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sample.org/orders\nHTTP 201\n[Captures]\norder_id: jsonpath \"$.order.id\"\n\nGET https://sample.org/orders/{{order_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Test Mode from the Command Line\nDESCRIPTION: This shell command executes the `sample.hurl` file using the `hurl` command-line tool with the `--test` flag. This mode changes the output format to be test-oriented, focusing on the execution status and the success or failure of any assertions defined within the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test sample.hurl\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Secrets via Command Line Option\nDESCRIPTION: This shell snippet shows how to inject sensitive values (secrets) into a Hurl test run using the `--secret` command-line option. Secrets are defined like variables (`name=value`) but their values are redacted from verbose logs and reports, providing a layer of protection for sensitive information like API tokens.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --secret token=FooBar test.hurl\n```\n\n----------------------------------------\n\nTITLE: Capturing and Reusing Values in Hurl\nDESCRIPTION: Example of capturing a CSRF token from a response and using it in a subsequent request. This demonstrates value extraction and templating in Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_72\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\n```\n\n----------------------------------------\n\nTITLE: Capturing Integer Value with Hurl JSONPath\nDESCRIPTION: This Hurl snippet shows how to capture an integer value from the response body of the first request using a JSONPath expression `$.results[0]`. The captured integer is stored in a variable named `count`, which can then be reused in subsequent requests or assertions, demonstrating the ability to capture and type values from responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_4\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://sample/counter\n\nHTTP 200\n[Captures]\ncount: jsonpath \"$.results[0]\"\n```\n\n----------------------------------------\n\nTITLE: Testing Status Code Range\nDESCRIPTION: This snippet demonstrates how to check if the HTTP status code falls within a specific range, in this case, between 200 and 300, inclusive.  It uses the `status >= 200` and `status < 300` assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_27\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\n# Testing status code is in a 200-300 range\nHTTP *\n[Asserts]\nstatus >= 200\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: JSON Body Response Assertions\nDESCRIPTION: This snippet demonstrates how to assert the values within a JSON response body using JSONPath. It includes several examples, such as checking node values, the count of items in a collection, and matching a value against a regular expression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_31\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order\nscreencapability: low\nHTTP 200\n[Asserts]\njsonpath \"$.validated\" == true\njsonpath \"$.userInfo.firstName\" == \"Franck\"\njsonpath \"$.userInfo.lastName\" == \"Herbert\"\njsonpath \"$.hasDevice\" == false\njsonpath \"$.links\" count == 12\njsonpath \"$.state\" != null\njsonpath \"$.order\" matches \"^order-\\\\d{8}$\"\njsonpath \"$.order\" matches /^order-\\\\d{8}$/     # Alternative syntax with regex literal\njsonpath \"$.created\" isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Redacting Dynamic Secrets Using `redact` in Hurl\nDESCRIPTION: Illustrates how to capture a dynamic value (the \"token\" header from an HTTP response) and mark it for redaction within a Hurl file. The `redact` keyword appended to the capture definition ensures the captured value (`pass`) is hidden in logs and reports.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/capturing-response.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Captures]\npass: header \"token\" redact\n```\n\n----------------------------------------\n\nTITLE: Getting Data with a Simple GET Request\nDESCRIPTION: This code snippet provides a basic example of sending a GET request using Hurl. It targets a specified URL (https://example.org), and showcases the simplest form of Hurl syntax. This is a foundational element for testing HTTP requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n```\n\n----------------------------------------\n\nTITLE: Retry Scenario: Polling for Job Completion with Captures and Asserts - Hurl\nDESCRIPTION: This snippet illustrates a pattern for polling in Hurl: creating a job via POST and then polling its status until completion. The first request captures a job ID and asserts its state. The subsequent request uses [Options] for retry count and interval, polls using the captured ID, and asserts for expected completion state. Dependencies: Hurl CLI, compatible REST endpoint. Inputs: job creation endpoint, polling endpoint, JSONPath captures and assertion. Output: passes if completion detected during retries. Limitation: retry parameters may need adjustment for actual job duration.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_117\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST http://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET http://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 300ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Requests and Assertions Using Hurl DSL\nDESCRIPTION: This snippet demonstrates Hurl's HTTP test definition syntax where an HTTP request is specified followed by expected response status and assertions. Dependencies include the Hurl CLI tool installed and accessible. Key elements include specifying HTTP method (POST/GET), URL, optional headers and body payload, expected response status code, and assertion statements to validate headers, JSON paths, XPath expressions, regex matches, SHA256 checksums, and performance durations. Inputs are request parameters and outputs are pass/fail status of assertions. Limitations include the use of Hurl format only and support for HTTP-based endpoints.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$.status\" == \"RUNNING\"    # Check the status code\njsonpath \"$.tests\" count == 25      # Check the number of items\njsonpath \"$.id\" matches /\\d{4}/     # Check the format of the id\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/v1/pets\nHTTP 200\n[Asserts]\nduration < 1000  # Duration in ms\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://hurl.dev/api/feedback\n{\n  \"name\": \"John Doe\",\n  \"feedback\": \"Hurl is awesome!\"\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving a Cat with Hurl - Hurl\nDESCRIPTION: This snippet provides a Hurl file for creating and retrieving a cat resource through API requests. The snippet requires the Hurl CLI and targets endpoints for creating and accessing a cat. The file uses JSON input, captures response data (such as cat_id), and asserts expected values. It demonstrates sequential request chaining and validation. Input parameters are API URLs and JSON body. Outputs are test pass/fail statuses and captured variables.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_95\n\nLANGUAGE: Hurl\nCODE:\n```\n# Scenario: create and retrieve a cat\n\nPOST http://myhost.com/v1/cats\n{ \"name\": \"Billie\" }\nHTTP 201\n[Captures]\ncat_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.name\" == \"Billie\"\n\nGET http://myshost.com/v1/cats/{{cat_id}}\nHTTP 200\n\n```\n\n----------------------------------------\n\nTITLE: Chaining HTTP Requests with Hurl\nDESCRIPTION: This snippet shows how to chain multiple GET requests using Hurl. This is useful for executing a sequence of API calls in a specific order.  Each line represents a separate request to a different endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/health\nGET https://example.org/api/step1\nGET https://example.org/api/step2\nGET https://example.org/api/step3\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Request Headers (Hurl)\nDESCRIPTION: Add an extra header to include in the HTTP request. This option can be used multiple times to add several headers. Do not include newlines or carriage returns in the header value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\n-H, --header <HEADER>\n```\n\n----------------------------------------\n\nTITLE: Multi-Step HTTP Test with Assertions and POST Data - Hurl\nDESCRIPTION: This Hurl file snippet executes multiple HTTP requests to test various endpoints and behaviors, including GET and POST requests, response validation, and assertion of HTML response content via XPath. The script shows stepwise execution, inline form parameter submission, and assertion of expected status codes. Dependencies: target endpoints must be reachable; requires Hurl CLI. Inputs include endpoints, form params, and assertions. Outputs are pass/fail signals for each test step.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_110\n\nLANGUAGE: hurl\nCODE:\n```\n# First, test home title.\nGET https://acmecorp.net\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n\n# Get some news, response description is optional\nGET https://acmecorp.net/news\n\n# Do a POST request without CSRF token and check\n# that status code is Forbidden 403\nPOST https://acmecorp.net/contact\n[FormParams]\ndefault: false\nemail: john.doe@rookie.org\nnumber: 33611223344\nHTTP 403\n```\n\n----------------------------------------\n\nTITLE: Capturing Variable and Using in Header (Hurl)\nDESCRIPTION: Demonstrates capturing a value from the response of the first request (a CSRF token using XPath) into a variable (`csrf_token`) and then reusing that variable's value as a header (`X-CSRF-TOKEN`) in a subsequent request using template syntax `{{csrf_token}}`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_208\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do the login !\nPOST https://acmecorp.net/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Asserting Response with XPath and Predicates in Hurl\nDESCRIPTION: This snippet demonstrates the use of XPath queries within assertions to validate parts of an HTML response.  It uses `xpath` to target HTML elements and attributes, coupled with predicates to compare expected values. The assertions cover checking for element existence, text content, and attribute values.  The example tests `boolean(count(//h1))` which asserts that h1 exists and the second example uses `string(//article/@data-visible)`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_162\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\nxpath \"boolean(count(//h1))\" == true\nxpath \"//h1\" exists # Equivalent but simpler\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\nxpath \"string(//article/@data-visible)\" == \"true\"\n```\n\n----------------------------------------\n\nTITLE: Redacting Known Secrets via Command Line in Shell\nDESCRIPTION: Demonstrates using the `--secret` command-line option with `hurl` to define a key-value pair (pass=sesame-ouvre-toi) where the value will be redacted from logs and reports during the execution of `file.hurl`. This method is suitable for secrets known before execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/capturing-response.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --secret pass=sesame-ouvre-toi file.hurl\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Assertions (Header, XPath) in Hurl\nDESCRIPTION: Demonstrates using multiple types of assertions within a single Hurl request's `[Asserts]` section. It includes checks for header content (`contains`) and exact value (`==`), XPath checks for element existence (`exists`), content (`contains`), count (`count ==`), and attribute prefix (`startsWith`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_147\n\nLANGUAGE: hurl\nCODE:\n```\n# A really well tested web page...\nGET https://example.org/home\nHTTP 200\n[Asserts]\nheader \"Content-Type\" contains \"text/html\"\nheader \"Last-Modified\" == \"Wed, 21 Oct 2015 07:28:00 GMT\"\nxpath \"//h1\" exists  # Check we've at least one h1\nxpath \"normalize-space(//h1)\" contains \"Welcome\"\nxpath \"//h2\" count == 13\nxpath \"string(//article/@data-id)\" startsWith \"electric\"\n```\n\n----------------------------------------\n\nTITLE: Capturing with JSONPath\nDESCRIPTION: This snippet extracts data from JSON responses using a JSONPath expression. It utilizes the keyword `jsonpath` followed by the JSONPath expression enclosed in quotes. The extracted data can be coerced to a string when only one node is selected. This supports capturing strings, numbers, booleans, objects, and collections. \nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_131\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/contact\n[Form]\ntoken: {{token}}\nemail: toto@rookie.net\nHTTP 200\n[Captures]\ncontact-id: jsonpath \"$['id']\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/captures-json\nHTTP 200\n[Captures]\nan_object:  jsonpath \"$['an_object']\"\na_list:     jsonpath \"$['a_list']\"\na_null:     jsonpath \"$['a_null']\"\nan_integer: jsonpath \"$['an_integer']\"\na_float:    jsonpath \"$['a_float']\"\na_bool:     jsonpath \"$['a_bool']\"\na_string:   jsonpath \"$['a_string']\"\nall:        jsonpath \"$\"\n```\n\n----------------------------------------\n\nTITLE: Body Assert with Encoding Handling\nDESCRIPTION: Hurl example showing how to handle different encodings in body asserts. It includes examples for checking bytes with hex representation and verifying text after decoding with a specific charset (GB 2312).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_27\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded with GB 2312 (see https://en.wikipedia.org/wiki/GB_2312)\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html; charset=gb2312\"\n# bytes of the response, without any text decoding:\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB 2312\n# text of the response, decoded with GB 2312:\nbody contains \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Performance testing endpoint duration in Hurl\nDESCRIPTION: Executes a GET request to an API endpoint and asserts that the response duration is less than 1000 milliseconds, useful for performance benchmarks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/v1/pets\nHTTP 200\n[Asserts]\nduration < 1000  # Duration in ms\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Hurl\nDESCRIPTION: These snippets demonstrate two ways to define query parameters in a Hurl GET request. The first uses the `[Query]` section, while the second appends the parameters directly to the URL. The `[Query]` section automatically handles URL encoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_16\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\n[Query]\norder: newest\nsearch: something to search\ncount: 100\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news?order=newest&search=something%20to%20search&count=100\n```\n\n----------------------------------------\n\nTITLE: Templating a JSON Body with Variables\nDESCRIPTION: This snippet shows how to use variables in a JSON body within a Hurl request. It uses double curly braces `{{variable_name}}` to reference variables and demonstrates using the command line to pass values to these variables. This showcases the ability to parameterize Hurl requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_50\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Chained GET/POST Requests with Capture in Hurl\nDESCRIPTION: This Hurl script first sends a GET request to `https://example.org` and captures the `_csrf_token` meta tag content using an XPath expression within the `[Captures]` section. It then uses this captured token variable `{{csrf_token}}` in the `X-CSRF-TOKEN` header of a subsequent POST request to `/login`. Asserts expected HTTP status codes (200 for GET, 302 for POST).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Creating and Asserting Multiple HTTP Entries in Hurl\nDESCRIPTION: Illustrates the structure of multiple entries in a Hurl file, including requests, asserts, and posting form data, along with status checks. Requires Hurl engine for execution. Entries check a home page title, retrieve news, and post a contact form with various fields validating the forbidden response. Inputs are multiple HTTP requests with different methods and endpoints; outputs are assertions and status validations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_91\n\nLANGUAGE: hurl\nCODE:\n```\n# First, test home title.\nGET https://acmecorp.net\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n\n# Get some news, response description is optional\nGET https://acmecorp.net/news\n\n# Do a POST request without CSRF token and check\n# that status code is Forbidden 403\nPOST https://acmecorp.net/contact\n[Form]\ndefault: false\nemail: john.doe@rookie.org\nnumber: 33611223344\nHTTP 403\n```\n\n----------------------------------------\n\nTITLE: Executing Sequential GET Requests in Hurl\nDESCRIPTION: Shows how to define multiple simple GET requests sequentially within a single Hurl file. Hurl executes these requests in the order they appear, making it straightforward to test a series of API endpoints, a workflow, or simple health checks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/health\nGET https://example.org/api/step1\nGET https://example.org/api/step2\nGET https://example.org/api/step3\n```\n\n----------------------------------------\n\nTITLE: Hurl Example File for HTTP Request and Assertion - Hurl\nDESCRIPTION: This Hurl file snippet performs a GET request to retrieve user details, sets a custom header, and asserts that the response contains a specific name using JSONPath. Dependencies: Hurl CLI. Inputs: API URL and custom HTTP header. Outputs: test result and validation status for the expected user name.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_102\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://example.org/api/users/1\nUser-Agent: Custom\nHTTP 200\n[Asserts]\njsonpath \"$.name\" == \"Bob\"\n\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Requests with Captures and Assertions - Hurl\nDESCRIPTION: Demonstrates how to define and run HTTP GET and POST requests using Hurl, chain requests, capture response values with XPath, and reuse captured data in subsequent requests (e.g., CSRF tokens). Outputs HTTP status code assertions. No dependencies are required other than the Hurl binary. Inputs are HTTP endpoints; outputs are request execution results and status checks. Limitations: must follow Hurl text file syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Asserting Properties of HTTP Response in Hurl\nDESCRIPTION: Defines how Hurl allows validation of HTTP responses via implicit assertions like version and status, as well as explicit assertions within `[Asserts]` sections. Supports checking headers, body content, content encoding, and JSON or XPath content with support for content decoding and string-based assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_141\n\n\n\n----------------------------------------\n\nTITLE: Adding HTTP Request Headers\nDESCRIPTION: This snippet illustrates adding HTTP request headers. Headers provide additional information about the request, such as the accepted content types, the user agent, and other metadata. Headers directly follow the URL and method. They are optional and consist of a name-value pair, separated by a colon.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_123\n\nLANGUAGE: hurl\nCODE:\n```\naccept: */*\nx-powered-by: Express\nuser-agent: Test\n```\n\n----------------------------------------\n\nTITLE: Testing JSON API Responses with Asserts in Hurl\nDESCRIPTION: This Hurl script sends a POST request with a JSON body to `/api/tests`. It then uses the `[Asserts]` section to validate the response: checks for HTTP 200 status, verifies the `X-Frame-Options` header value, and uses JSONPath expressions to assert the `status` field's value, the count of elements in the `tests` array, and the format of the `id` field using a regular expression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$.status\" == \"RUNNING\"    # Check the status code\njsonpath \"$.tests\" count == 25      # Check the number of items\njsonpath \"$.id\" matches /\\d{4}/     # Check the format of the id\n```\n\n----------------------------------------\n\nTITLE: Using --very-verbose for comprehensive HTTP request and response logging in shell\nDESCRIPTION: Shows executing Hurl with the --very-verbose flag to include request and response bodies, curl command reconstruction, and full timing metrics. Ideal for in-depth debugging of HTTP exchanges including payload inspection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --very-verbose --no-output basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body in Hurl\nDESCRIPTION: These snippets demonstrate how to post a JSON body in Hurl. The first uses an inline JSON body, while the second uses a local file. The `Content-Type` header should be set to `application/json` when posting a file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_22\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"456\",\n    \"evaluate\": true\n}\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\nContent-Type: application/json\nfile,data.json;\n```\n\n----------------------------------------\n\nTITLE: Testing REST/JSON APIs with Hurl\nDESCRIPTION: Shows how to test a REST API response using Hurl with various assertions, including header validation, JSONPath queries to check status, count elements, and using regex pattern matching.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$.status\" == \"RUNNING\"    # Check the status code\njsonpath \"$.tests\" count == 25      # Check the number of items\njsonpath \"$.id\" matches /\\d{4}/     # Check the format of the id\n```\n\n----------------------------------------\n\nTITLE: Testing REST APIs with JSONPath Asserts in Hurl\nDESCRIPTION: This snippet demonstrates how to assert the JSON body response of a REST API using JSONPath expressions. It checks node values, collection counts, existence, and uses regular expressions to match values. Various JSONPath functions and operations are used.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order\nscreencapability: low\nHTTP 200\n[Asserts]\njsonpath \"$.validated\" == true\njsonpath \"$.userInfo.firstName\" == \"Franck\"\njsonpath \"$.userInfo.lastName\" == \"Herbert\"\njsonpath \"$.hasDevice\" == false\njsonpath \"$.links\" count == 12\njsonpath \"$.state\" != null\njsonpath \"$.order\" matches \"^order-\\d{8}$\"\njsonpath \"$.order\" matches /^order-\\d{8}$/     # Alternative syntax with regex literal\njsonpath \"$.created\" isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Templating JSON Request Body with Variables (Hurl)\nDESCRIPTION: Demonstrates using variables directly within a JSON request body. Hurl automatically handles typing when rendering variables into the JSON structure (e.g., boolean `true`, null `null`, number `42` are rendered without quotes).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_217\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response with Status Code and Headers\nDESCRIPTION: This snippet demonstrates asserting the status code and headers of an HTTP response. It checks for a 200 OK status and a specific `Content-Type` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/cats\nHTTP 200\n# Implicit assert on `Content-Type` Header\nContent-Type: application/json; charset=utf-8 \n[Asserts]\n# Explicit asserts section \nbytes count == 120\nheader \"Content-Type\" contains \"utf-8\"\njsonpath \"$.cats\" count == 49\njsonpath \"$.cats[0].name\" == \"Felix\"\njsonpath \"$.cats[0].lives\" == 9\n```\n\n----------------------------------------\n\nTITLE: Generating Reports with Hurl\nDESCRIPTION: The commands show how to generate different types of reports from Hurl tests.  The `--test` flag executes the tests, and the `--report-html`, `--report-json`, `--report-junit`, and `--report-tap` options specify the report format (HTML, JSON, JUnit, TAP respectively) and where the output files should be placed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_67\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-html build/report/ *.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-json build/report/ *.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-junit build/report.xml *.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-tap build/report.txt *.hurl\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets with Hurl Command Line\nDESCRIPTION: Shows how to define and redact secrets during HTTP requests using the `--secret` option or inline `redact` in capture configurations. Facilitates hiding sensitive data from logs and reports by defining secrets either statically or dynamically.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_140\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --secret pass=sesame-ouvre-toi file.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Captures]\npass: header \"token\" redact\n```\n\n----------------------------------------\n\nTITLE: Capturing and Using CSRF Token\nDESCRIPTION: This snippet showcases capturing a CSRF token from a response using XPath and then using the captured token in a subsequent POST request via the `X-CSRF-TOKEN` header. This simulates a login scenario.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_53\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Capturing CSRF Token and Using in Dependent HTTP Request in Hurl Format\nDESCRIPTION: Executes a GET request, captures a CSRF token from the HTML response using an XPath query, then passes the captured token as a header in a subsequent POST request. Requires server responses containing a '_csrf_token' meta tag and support for CSRF headers. Inputs include endpoint URLs. Ensures secure session handling; limited to locations where CSRF is implemented as described.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables via `--variable` Option (Shell)\nDESCRIPTION: Shows how to run a Hurl file (`test.hurl`) and inject variable values (`host`, `id`) directly from the command line using the `--variable name=value` option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_213\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable host=example.net --variable id=1234 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Response Body in Hurl (Implicit)\nDESCRIPTION: Demonstrates the implicit syntax for asserting that the HTTP response body exactly matches the provided JSON structure. Hurl automatically parses and compares the decompressed and decoded response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_167\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data in Hurl\nDESCRIPTION: These snippets demonstrate how to send multipart form data in a Hurl POST request using the `[Multipart]` section. The first defines fields with values and file attachments, specifying content types where necessary. The second shows how to send multipart forms with a multiline string body, inlining the file content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_21\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Executing SOAP API Requests in Hurl\nDESCRIPTION: This Hurl script sends a POST request to a SOAP endpoint (`https://example.org/InStock`). It specifies the `Content-Type` and `SOAPAction` headers required for SOAP communication and includes an XML payload conforming to the SOAP standard in the request body. It asserts the HTTP response status is 200.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Setting User Option per Request in Hurl\nDESCRIPTION: This snippet shows how to specify basic authentication credentials for each request within a Hurl file using the `[Options]` section. Each request can have a different username and password.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_17\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/login\n[Options]\nuser: bob:secret\nHTTP 200\n\nGET https://example.org/login\n[Options]\nuser: alice:secret\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using Captured Variable in Hurl Header\nDESCRIPTION: This Hurl snippet illustrates how to capture a value, specifically a CSRF token extracted via XPath from the first request's response body, into a variable named `csrf_token`. This variable is then dynamically injected into the `X-CSRF-TOKEN` header of the subsequent POST request using the `{{csrf_token}}` template syntax. It ensures state is maintained between requests in a sequence.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_0\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://acmecorp.net/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Request With Multipart Form Data\nDESCRIPTION: This snippet describes sending multipart form data including key/value pairs and file content. The `[MultipartFormData]` section is used.  File paths are relative to the input Hurl file. The example specifies a filename and content type for a file upload.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_139\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[MultipartFormData]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Headers in Hurl\nDESCRIPTION: This snippet shows how to specify HTTP headers in a Hurl request. It defines a GET request to example.org/news with User-Agent, Accept, Accept-Language, Accept-Encoding, and Connection headers. These headers are commonly used to specify client capabilities and preferences.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 \nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Testing Response Headers in Hurl\nDESCRIPTION: Demonstrates both implicit header testing (by specifying expected headers) and explicit assertions on header values using predicates.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_44\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple HTTP Requests in Hurl\nDESCRIPTION: An extended Hurl file with two HTTP requests: one testing the home page and another testing a 404 response for a broken link, both with appropriate assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n# Testing HTTP response headers:\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\ncookie \"x-session-id\" exists\ncookie \"x-session-id[HttpOnly]\" exists\n\n\n# Check that we have a 404 response for broken links:\nGET http://localhost:3000/not-found\nHTTP 404\n[Asserts]\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\nxpath \"string(//h2)\" == \"Error\"\nxpath \"string(//h3)\" == \"Not Found\"\n```\n\n----------------------------------------\n\nTITLE: Using Variables Inside a Hurl File [Options] Section (Hurl Language)\nDESCRIPTION: Shows how to declare variables inside the `[Options]` section of a Hurl test file using the `variable:` directive. These variables are then referenced using double curly braces syntax in the HTTP request URLs. This snippet demonstrates multiple requests in one file utilizing the variables for dynamic URL generation. It requires Hurl parser to support the Options section and variable interpolation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/secrets.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\n[Options]\nvariable: host=example.net\nvariable: id=1234\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report\nDESCRIPTION: This shows how to generate a JUnit XML report with Hurl. The `--test` flag runs the tests, and `--report-junit` generates a JUnit XML report suitable for integration with continuous integration systems. The output file name and path are specified.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --test --report-junit build/report.xml *.hurl\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Search API with Query Parameters (Hurl)\nDESCRIPTION: This Hurl snippet demonstrates testing a search API endpoint by sending a GET request to `/api/search` with query parameters `q=1982` and `sort=name`. It asserts a 200 OK status and checks the `Content-Type` header. JSONPath assertions verify that the response is a JSON array with exactly 5 items, and check specific properties (`name`, `director`) of the first item, including a regex assertion for the `release_date`. Requires a running server at `localhost:3000` with a search endpoint supporting these parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_11\n\nLANGUAGE: Hurl\nCODE:\n```\nGET http://localhost:3000/api/search\n[Query]\nq: 1982\nsort: name\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$\" count == 5\njsonpath \"$[0].name\" == \"Blade Runner\"\njsonpath \"$[0].director\" == \"Ridley Scott\"\njsonpath \"$[0].release_date\" regex /(\\d{4})-\\d{2}-\\d{2}/ == \"1982\"\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Header with Hurl DSL\nDESCRIPTION: Captures a specific header from the HTTP response and binds it to a variable. The capture syntax requires a variable name, a colon, the keyword 'header', and the header name in quotes. The header value can then be used in subsequent requests or asserts. Requires presence of the [Captures] section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_147\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/login\n[FormParams]\nuser: toto\npassword: 12345678\nHTTP 302\n[Captures]\nnext_url: header \"Location\"\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Status Code in Hurl\nDESCRIPTION: This code tests the HTTP status code returned from a GET request. It checks if the status code is exactly 200 and verifies the range of status code is between 200 and 300. The `HTTP` keyword with a status code (e.g., `200`) asserts the expected status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_54\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\n# Testing status code is in a 200-300 range\nHTTP *\n[Asserts]\nstatus >= 200\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Headers\nDESCRIPTION: This snippet demonstrates how to assert an HTTP response header.  It verifies that a `Location` header exists with a specific value in the response. Dependencies: An HTTP server that issues a 302 redirect.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n# Check that user toto is redirected to home after login.\nPOST https://example.org/login\n[Form]\nuser: toto\npassword: 12345678\nHTTP 302\nLocation: https://example.org/home\n```\n\n----------------------------------------\n\nTITLE: Contributor Workflow Steps for Hurl Development (Shell)\nDESCRIPTION: Lists the standard sequence of commands recommended for contributors after making changes to the Hurl codebase. This workflow includes building the project, running the linter (Clippy), formatting the code, executing unit tests, and running the full integration test suite.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n1. Build `cargo build`\n2. Run Clippy `cargo clippy`\n3. Format `cargo fmt`\n4. Run units tests `cargo test --lib`\n5. Run integration tests `cd integration/hurl && python3 integration.py`\n```\n\n----------------------------------------\n\nTITLE: Executing a Hurl File from the Command Line\nDESCRIPTION: This shell command demonstrates the basic usage of the Hurl CLI. It shows creating a simple Hurl file (`sample.hurl`) containing `GET https://example.org` and then executing it using the command `hurl sample.hurl`. By default, this outputs the last response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vi sample.hurl\n\nGET https://example.org\n\n$ hurl sample.hurl\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Header Assertion in Hurl\nDESCRIPTION: Executes an HTTP GET request and verifies that the response includes a specific header, such as Location, with a given value. Utilizes built-in Hurl syntax for header validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_74\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\nLocation: http://www.example.org\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Response Body in Hurl\nDESCRIPTION: Example of testing an exact JSON body match in a response using Hurl's implicit body assertion feature. The request checks all JSON fields in the response including nested arrays and special characters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_42\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/cats/123\nHTTP 200\n{\n  \"name\" : \"Purrsloud\",\n  \"species\" : \"Cat\",\n  \"favFoods\" : [\"wet food\", \"dry food\", \"<strong>any</strong> food\"],\n  \"birthYear\" : 2016,\n  \"photo\" : \"https://learnwebcode.github.io/json-example/images/cat-2.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Response with Hurl\nDESCRIPTION: These snippets demonstrate how to test responses in Hurl. You can test the status code, response body, and headers. The `HTTP` line specifies the expected status code. The `[Asserts]` section is used for more complex assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_27\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with (almost) no check:\nGET https://foo.com\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# A status code check:\nGET https://foo.com\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# A test on response body\nGET https://foo.com\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"running\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Variables in Options Section\nDESCRIPTION: This Hurl snippet demonstrates defining variables (`host` and `id`) directly within the Hurl file using the `[Options]` section with the `variable: key=value` syntax. Variables defined in an `[Options]` section are available to the current request and all subsequent requests within the same Hurl file, providing request-specific variable scope.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_12\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\n[Options]\nvariable: host=example.net\nvariable: id=1234\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: POST Request with Form Data - Hurl\nDESCRIPTION: This Hurl snippet performs a POST request, including form data, and asserts the HTTP status code is 403 (Forbidden). It tests the interaction with a server that might reject certain requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\n# Do a POST request without CSRF token and check\n# that status code is Forbidden 403\nPOST https://acmecorp.net/contact\n[Form]\ndefault: false\nemail: john.doe@rookie.org\nnumber: 33611223344\nHTTP 403\n```\n\n----------------------------------------\n\nTITLE: Composing HTTP Requests with Headers and Basic Authentication in Hurl\nDESCRIPTION: Demonstrates constructing an HTTP GET request with custom headers and basic authentication in Hurl syntax. Requires Hurl executable. The snippet sends a GET request to a specified URL with 'User-Agent' and 'Content-Type' headers, and authenticates with the provided credentials. Input is the endpoint with headers and basic auth; output is the resulting HTTP request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_101\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs?id=4567\nUser-Agent: My User Agent\nContent-Type: application/json\n[BasicAuth]\nalice: secret\n```\n\n----------------------------------------\n\nTITLE: Testing Set-Cookie Attributes in Hurl\nDESCRIPTION: This snippet demonstrates how to test attributes of Set-Cookie headers in a Hurl request. It checks the cookie value, expiry date, secure flag, HttpOnly flag, and SameSite attribute for a specific cookie named JSESSIONID.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\ncookie \"JSESSIONID\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Value]\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"JSESSIONID[Secure]\" exists\ncookie \"JSESSIONID[HttpOnly]\" exists\ncookie \"JSESSIONID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic HTTP Requests Using Hurl CLI in Shell\nDESCRIPTION: This snippet demonstrates how to use the Hurl command-line tool to run HTTP requests either from a file or standard input. It includes examples of executing a request file, piping a simple GET request into Hurl, and illustrates the JSON output from the server. It also describes the default behavior of reading from stdin if no files are provided, useful for scripting and quick testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl session.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ echo GET http://httpbin.org/get | hurl\n    {\n      \"args\": {},\n      \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip\",\n        \"Content-Length\": \"0\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"hurl/0.99.10\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5eedf4c7-520814d64e2f9249ea44e0\"\n      },\n      \"origin\": \"1.2.3.4\",\n      \"url\": \"http://httpbin.org/get\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Polling and Retry Requests\nDESCRIPTION: This snippet illustrates how to configure retry logic for Hurl requests.  It shows setting a maximum number of retries and an interval between retries using options like `retry` and `retry-interval`. It demonstrates pulling the job status until completion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_48\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST https://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET https://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 500ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Validating Login Redirection with Hurl - hurl\nDESCRIPTION: This snippet demonstrates how to use Hurl to test an HTTP POST login request and assert redirection (HTTP 302) with the correct Location header. It simulates filling form parameters for user credentials and expects a response redirecting to the user home page. Requires Hurl installed and access to the target test endpoint. Inputs are login credentials and expected redirect URL; outputs are validation of status and headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_159\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/login\n[FormParams]\nuser: toto\npassword: 12345678\nHTTP 302\nLocation: https://example.org/home\n```\n\n----------------------------------------\n\nTITLE: Passing Data Between Requests in Hurl\nDESCRIPTION: Demonstrates how to capture values from a response and use them in subsequent requests by extracting a JSON value with JSONPath and using it in a URL path parameter.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_33\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sample.org/orders\nHTTP 201\n[Captures]\norder_id: jsonpath \"$.order.id\"\n\nGET https://sample.org/orders/{{order_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body Text Matches Regex Patterns with Hurl DSL\nDESCRIPTION: Illustrates checking that the HTTP response body decoded as text matches specified regex patterns. The regex must contain at least one capture group, and assertions validate the captured value. Supports both escaped string regexes and literal regex patterns to improve readability. Dependencies include properly formatted regex and HTTP responses with meaningful body content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_159\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nregex \"^(\\\\d{4}-\\\\d{2}-\\\\d{2})$\" == \"2018-12-31\"\n# Same assert as previous using regex literals\nregex /^(\\d{4}-\\d{2}-\\d{2})$/ == \"2018-12-31\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hurl Test\nDESCRIPTION: A minimal Hurl file that sends a GET request to the Movies Box application without any response validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Using JSONPath assertions in Hurl\nDESCRIPTION: Demonstrates how to verify JSON response contents using JSONPath assertions to check for specific values, count items, and verify non-null values in the response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_33\n\nLANGUAGE: plain\nCODE:\n```\ncurl -v http://httpbin.org/json\n\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n...\n\n{\n  \"slideshow\": {\n    \"author\": \"Yours Truly\",\n    \"date\": \"date of publication\",\n    \"slides\": [\n      {\n        \"title\": \"Wake up to WonderWidgets!\",\n        \"type\": \"all\"\n      },\n       ...\n    ],\n    \"title\": \"Sample Slide Show\"\n  }\n}\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://httpbin.org/json\nHTTP 200\n[Asserts]\njsonpath \"$.slideshow.author\" == \"Yours Truly\"\njsonpath \"$.slideshow.slides[0].title\" contains \"Wonder\"\njsonpath \"$.slideshow.slides\" count == 2\njsonpath \"$.slideshow.date\" != null\njsonpath \"$.slideshow.slides[*].title\" contains \"Mind Blowing!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables in Shell for Hurl Templates\nDESCRIPTION: This snippet shows how to initialize variables via the command line to be used with Hurl templates in the Hurl file. It uses the `--variable` option to define the values for `a_string`, `a_bool`, `a_null`, and `a_number`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple \\\n       --variable a_bool=true \\\n       --variable a_null=null \\\n       --variable a_number=42 \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: GET Request with Query Parameters\nDESCRIPTION: This snippet shows how to include query parameters in a GET request using the `[Query]` section or directly in the URL. The query parameters are used to filter or modify the data returned by the server.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\n[Query]\norder: newest\nsearch: something to search\ncount: 100\n```\n\n----------------------------------------\n\nTITLE: Valid User Creation Hurl\nDESCRIPTION: This Hurl snippet simulates the successful creation of a user. It first retrieves a CSRF token, then posts user data to the /signup endpoint. It then follows the redirection using the \"location: true\" option and verifies the final URL. This tests the successful path for a new user sign up.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new valid user: get the CSRF token the signup:\nGET http://localhost:3000/signup\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//input[@name='_csrf']/@value)\"\n\n\nPOST http://localhost:3000/signup\n[Options]\nlocation: true\n[Form]\n_csrf: {{csrf_token}}\nusername: {{username}}\nname: Bob\nemail: {{username}}@example.net\npassword: 12345678\nHTTP 200\n[Asserts]\nurl endsWith \"/my-movies\"\n```\n\n----------------------------------------\n\nTITLE: Defining Variables within Hurl File (`[Options]` Section)\nDESCRIPTION: Shows how variables can be defined directly within a Hurl file using an `[Options]` section. Variables defined here (`host`, `id`) are available for subsequent requests in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_202\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\n[Options]\nvariable: host=example.net\nvariable: id=1234\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Response Content Using JSONPath with Hurl DSL\nDESCRIPTION: Shows how to validate JSON response content by querying specific paths using JSONPath expressions. It supports multiple predicates like equality, containment, count, and null checks. The snippet also explains coercion of JSON values to strings when single nodes are selected and illustrates how to use regex matches with proper escaping or literal regex syntax. Dependencies include receiving valid JSON payloads and JSONPath-compliant queries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_158\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://httpbin.org/json\nHTTP 200\n[Asserts]\njsonpath \"$.slideshow.author\" == \"Yours Truly\"\njsonpath \"$.slideshow.slides[0].title\" contains \"Wonder\"\njsonpath \"$.slideshow.slides\" count == 2\njsonpath \"$.slideshow.date\" != null\njsonpath \"$.slideshow.slides[*].title\" contains \"Mind Blowing!\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\n\n# Predicate value with matches predicate:\njsonpath \"$.date\" matches \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\njsonpath \"$.name\" matches \"Hello [a-zA-Z]+!\"\n\n# Equivalent syntax:\njsonpath \"$.date\" matches /^\\d{4}-\\d{2}-\\d{2}$/\njsonpath \"$.name\" matches /Hello [a-zA-Z]+!/\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication in a GET Request\nDESCRIPTION: This snippet provides an example of implementing basic authentication in a GET request using the `[BasicAuth]` section within the Hurl file. It showcases a per-request authentication method. It also demonstrates an equivalent `Authorization` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_42\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/protected\n[BasicAuth]\nbob: secret\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Authorization header value can be computed with `echo -n 'bob:secret' | base64`\nGET https://example.org/protected\nAuthorization: Basic Ym9iOnNlY3JldA== \n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Arch Linux / Manjaro\nDESCRIPTION: Synchronizes the package databases and installs Hurl from the official 'extra' repository using the pacman package manager. Requires the pacman utility.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_104\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -Sy hurl\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Request from Standard Input\nDESCRIPTION: This example shows how to pipe an HTTP request directly to the `hurl` command from standard input. The output, by default, is the HTTP response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurl.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo GET http://httpbin.org/get | hurl\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests\nDESCRIPTION: This demonstrates how to skip requests using the `skip: true` option. The request to `/b` is skipped, while the others are executed. Useful for selective testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_52\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\n# a, c, d are run, b is skipped\nGET https://example.org/a\n\nGET https://example.org/b\n[Options]\nskip: true\n\nGET https://example.org/c\n\nGET https://example.org/d\n```\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data with Hurl - Hurl\nDESCRIPTION: This snippet demonstrates how to post JSON data to an HTTP API endpoint using a Hurl file. It requires the Hurl CLI tool installed and configured. The file specifies a POST request to a local API with JSON content specifying username and password. Inputs are the endpoint URL and JSON object. The output is the HTTP response received. Adjust authentication details as needed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_92\n\nLANGUAGE: Hurl\nCODE:\n```\nPOST http://localhost:3000/api/login\n{\n  \"username\": \"xyz\",\n  \"password\": \"xyz\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to redact sensitive information from the output. First example shows how to redact a token using the command-line tool for known values. Second part shows how to redact values at run-time. This example requires the token header is present and available in the response from the first request and a token is required by the second request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_70\n\nLANGUAGE: hurl\nCODE:\n```\n$ hurl --secret token=1234 file.hurl\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Get an authorization token:\nGET https://example.org/token\nHTTP 200\n[Captures]\ntoken: header \"X-Token\" redact\n\n# Send an authorized request:\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Repeating Input Files in Hurl\nDESCRIPTION: The `--repeat <NUM>` option repeats the sequence of input files NUM times, or infinitely if set to -1.  This CLI-only option allows for repeated testing using the same sequence of files. For example, given a.hurl, b.hurl, c.hurl, repeat twice runs a.hurl, b.hurl, c.hurl, a.hurl, b.hurl, c.hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_33\n\nLANGUAGE: Bash\nCODE:\n```\n--repeat <NUM>\n```\n\n----------------------------------------\n\nTITLE: Using variable assertions in Hurl\nDESCRIPTION: Demonstrates how to verify variables captured during the request execution with assertions, such as counting the number of items in an XML response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\n# Test that the XML endpoint return 200 pets \nGET https://example.org/api/pets\nHTTP 200\n[Captures]\npets: xpath \"//pets\"\n[Asserts]\nvariable \"pets\" count == 200\n```\n\n----------------------------------------\n\nTITLE: Testing Health API with Hurl GET\nDESCRIPTION: This Hurl snippet tests a health check endpoint by sending a GET request to `/api/health`. It asserts a 200 OK status and verifies the `Content-Type` header. JSONPath assertions are used to check the values of `status`, `healthy`, and the existence of `operationId` in the JSON response body. Requires a running server at `localhost:3000` with a health endpoint returning JSON.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_10\n\nLANGUAGE: Hurl\nCODE:\n```\nGET http://localhost:3000/api/health\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$.status\" == \"RUNNING\"\njsonpath \"$.healthy\" == true\njsonpath \"$.operationId\" exists\n```\n\n----------------------------------------\n\nTITLE: Templating a JSON Body in Hurl\nDESCRIPTION: This snippet shows how to template a JSON body in Hurl using variables. The variables are defined using double curly braces `{{}}` and initialized via the command line using the `--variable` option. This allows for dynamic JSON payloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_23\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple \\\n       --variable a_bool=true \\\n       --variable a_null=null \\\n       --variable a_number=42 \\\n       test.hurl\n```\n\nLANGUAGE: hurl\nCODE:\n```\n{\n    \"key0\": \"apple\",\n    \"key1\": true,\n    \"key2\": null,\n    \"key3\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Body Match\nDESCRIPTION: This snippet demonstrates how to test for an exact JSON body match using Hurl.  It sends a GET request and asserts the response body matches the specified JSON structure. The key part is the JSON body comparison using implicit body testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_36\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org/api/cats/123\nHTTP 200\n{\n  \"name\" : \"Purrsloud\",\n  \"species\" : \"Cat\",\n  \"favFoods\" : [\"wet food\", \"dry food\", \"<strong>any</strong> food\"],\n  \"birthYear\" : 2016,\n  \"photo\" : \"https://learnwebcode.github.io/json-example/images/cat-2.jpg\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request - Hurl\nDESCRIPTION: This Hurl file snippet tests a simple GET request to a specified URL and asserts the HTTP status code is 200. It checks for a specific title in the HTML head using xpath.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# First, test home title.\nGET https://acmecorp.net\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables via Environment Variables (Shell)\nDESCRIPTION: Explains how to set environment variables prefixed with `HURL_` (e.g., `HURL_host`, `HURL_id`) which Hurl automatically picks up when executing a file like `test.hurl`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_201\n\nLANGUAGE: shell\nCODE:\n```\n$ export HURL_host=example.net\n$ export HURL_id=1234 \n$ hurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables via Command Line (`--variable`)\nDESCRIPTION: Demonstrates running the `test.hurl` file by supplying the `host` and `id` variables directly on the command line using the `--variable` option for each variable.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_198\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable host=example.net --variable id=1234 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Redirecting Hurl Output to File in Shell\nDESCRIPTION: Runs the hurl command with the -o (output) option, redirecting results to a specified output file. Requires hurl and an input .hurl file. The output of processed HTTP requests defined in input.hurl is written into 'output' instead of stdout, allowing for easy logging or further processing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -o output input.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Testing IP Address Assert\nDESCRIPTION: This snippet demonstrates testing the IP address of a response, including IPv6 addresses.  It verifies the IP address with assertions like `startsWith` and `isIpv6`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_47\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nip == \"2001:0db8:85a3:0000:0000:8a2e:0370:733\"\nip startsWith \"2001\"\nip isIpv6\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Header Values with Contains and Matches in Hurl\nDESCRIPTION: Shows how to use the `header` keyword in Hurl's `[Asserts]` section to check response header values. It demonstrates using the `contains` predicate for partial string matching on the `Location` header and the `matches` predicate with a regular expression to validate the format of the `Last-Modified` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_150\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\nheader \"Last-Modified\" matches /\\d{2} [a-z-A-Z]{3} \\d{4}/\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom .netrc File Path in Hurl (Bash)\nDESCRIPTION: Similar to `--netrc`, but allows specifying a custom path to the `.netrc` file instead of using the default home directory location. See also `--netrc-optional`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n--netrc-file <FILE>\n```\n\n----------------------------------------\n\nTITLE: Sending Form Parameters with [Form] Section in Hurl\nDESCRIPTION: Illustrates how to send URL-encoded form data using the '[Form]' section in a POST request. This section defines key-value pairs, which Hurl automatically encodes and sends with the 'application/x-www-form-urlencoded' content type. Variables like '{{token}}' can be used.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_9\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[Form]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Status Code (Hurl)\nDESCRIPTION: Shows a simple Hurl request definition including an assertion on the HTTP status code. By including the expected `HTTP 301` line below the request, Hurl automatically checks that the response status code matches.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Polling and Retrying Requests\nDESCRIPTION: This example demonstrates how to retry a request on errors using the `retry` and `retry-interval` options. It creates a job, captures its ID, and then polls the job's status until it's completed, retrying up to 10 times with a 500ms interval.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_50\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\n# Create a new job\nPOST https://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET https://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 500ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using SOAP APIs\nDESCRIPTION: This snippet demonstrates how to make SOAP API calls using Hurl. It includes setting the `Content-Type` header and the `SOAPAction` and constructing the XML body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_52\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Data with Template Functions in Hurl\nDESCRIPTION: Demonstrates generating dynamic data with built-in functions like newUuid and newDate for creating unique values in requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_41\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/foo\n{\n  \"name\": \"foo\",\n  \"email\": \"{{newUuid}}@test.com\"\n}\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/foo\n[Query]\ndate: {{newDate}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing Binary File Response in Hurl\nDESCRIPTION: Example of comparing a response body with a binary file. This is useful for testing binary responses like images or PDFs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_47\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Multiline Text Response Body in Hurl\nDESCRIPTION: Illustrates how to assert that the HTTP response body exactly matches a given multiline text content (like CSV) using the triple backtick syntax (``` ... ```) in Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_171\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Polling and Retrying HTTP Requests with Captures and Asserts in Hurl\nDESCRIPTION: Illustrates how to use [Options] to configure retry logic, polling intervals, and assertions based on response fields in Hurl. Requires Hurl to execute. The first entry creates a job and captures the job ID, the second polls the job status with retries and interval until it completes. Inputs are POST and GET requests with dynamic URL and configurable options; output is assertion that the job state becomes COMPLETED.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_98\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST http://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET http://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 300ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Request With Form Parameters\nDESCRIPTION: This snippet shows a POST request with form parameters defined using the `[FormParams]` section.  This is used to send data, simulating an HTML form submission.  The content type of the request is set to `application/x-www-form-urlencoded` when using `[FormParams]`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_137\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[FormParams]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Testing Set-Cookie Attributes in Hurl\nDESCRIPTION: This snippet demonstrates how to test Set-Cookie attributes in Hurl. It shows how to check the cookie value, Expires, Secure, HttpOnly and SameSite attributes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_32\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\ncookie \"JSESSIONID\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Value]\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"JSESSIONID[Secure]\" exists\ncookie \"JSESSIONID[HttpOnly]\" exists\ncookie \"JSESSIONID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Capturing and Using CSRF Token in Hurl\nDESCRIPTION: Example of capturing a CSRF token from a response using XPath and using it in a subsequent request. This is common for web form submissions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_61\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Header assertions using contains, ==, exists, startsWith, and count predicates\nDESCRIPTION: Hurl example showcasing various header assertions. Demonstrates how to use `contains`, `==`, `exists`, `startsWith`, and `count` to validate header values, existence, and the number of header occurrences. Utilizes XPath for HTML content validation and checking attribute values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_19\n\nLANGUAGE: hurl\nCODE:\n```\n# A really well tested web page...\nGET https://example.org/home\nHTTP 200\n[Asserts]\nheader \"Content-Type\" contains \"text/html\"\nheader \"Last-Modified\" == \"Wed, 21 Oct 2015 07:28:00 GMT\"\nxpath \"//h1\" exists  # Check we've at least one h1\nxpath \"normalize-space(//h1)\" contains \"Welcome\"\nxpath \"//h2\" count == 13\nxpath \"string(//article/@data-id)\" startsWith \"electric\"\n```\n\n----------------------------------------\n\nTITLE: Sending a GET Request with Query Parameters\nDESCRIPTION: This snippet showcases two methods of including query parameters in a GET request using Hurl. It shows how to define a `[QueryStringParams]` section, and also shows the usage of direct URL manipulation using the `?` syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_41\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\n[QueryStringParams]\norder: newest\nsearch: something to search\ncount: 100\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news?order=newest&search=something%20to%20search&count=100\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Body Content with Hurl DSL\nDESCRIPTION: Shows how to assert that the HTTP response body contains specific strings, handling various text encodings and content encodings automatically. Includes examples demonstrating decoding using charset from Content-Type header or explicit decoding filters. Highlights that assertions are done on decompressed content regardless of Content-Encoding (gzip, brotli). Required dependencies include HTTP response with appropriate headers indicating encoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_155\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nbody contains \"<h1>Welcome!</h1>\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded with GB 2312 (see https://en.wikipedia.org/wiki/GB_2312)\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html; charset=gb2312\"\n# bytes of the response, without any text decoding:\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB 2312\n# text of the response, decoded with GB 2312:\nbody contains \"你好世界\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded using GB 2312.\n# But, the 'Content-Type' HTTP response header doesn't precise any charset,\n# so we decode explicitly the bytes.\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB2312\nbytes decode \"gb2312\" contains \"你好世界\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Request a gzipped reponse, the `body` asserts works with ungzipped response\nGET https://example.org\nAccept-Encoding: gzip\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" == \"gzip\"\nbody contains \"<h1>Welcome!</h1>\"\n\n# Without content encoding, asserts remains identical\nGET https://example.org\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" not exists\nbody contains \"<h1>Welcome!</h1>\"\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Headers (Hurl)\nDESCRIPTION: Extends the basic status code assertion to include an assertion on a specific HTTP response header. Hurl verifies that the response includes a `Location` header with the value `http://www.example.org` in addition to the status code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\nLocation: http://www.example.org\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Status Code Range in Hurl\nDESCRIPTION: Explains how to use the `status` keyword in Hurl's `[Asserts]` section to verify the HTTP response status code. This example uses the less than predicate (`<`) to ensure the status code is below 300. The `HTTP *` indicates acceptance of any initial status code before assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_148\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP *\n[Asserts]\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables via File (`--variables-file`)\nDESCRIPTION: Illustrates executing `test.hurl` by providing a separate file (`vars.env`) containing variable definitions using the `--variables-file` option. Requires the existence of the specified variables file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_199\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variables-file vars.env test.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response - Hurl\nDESCRIPTION: This Hurl code snippet demonstrates asserting conditions on an HTTP response. It checks the HTTP status code, asserts a specific header value, and validates the body content using XPath. Dependencies include a valid HTTP endpoint that returns XML or HTML, and knowledge of XPath syntax to create valid queries. Assertions are optional and defined in the `[Asserts]` section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_144\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT\n[Asserts]\nxpath \"normalize-space(//head/title)\" startsWith \"Welcome\"\nxpath \"//li\" count == 18\n```\n\n----------------------------------------\n\nTITLE: Using the --very-verbose Option in Hurl (bash)\nDESCRIPTION: Enables more detailed verbose output on standard error than --verbose. This includes the full HTTP request and response bodies. Additionally, lines prefixed with '**' show debug logs from the underlying libcurl library.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\n--very-verbose\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Request Body in Hurl\nDESCRIPTION: Shows how to define a JSON request body directly within a Hurl file. Hurl automatically sets the `Content-Type` header to `application/json` when this syntax is used. The JSON content is placed directly after the request line and headers, forming the request body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_108\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new doggy thing with JSON body:\nPOST https://example.org/api/dogs\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body with a File\nDESCRIPTION: This example demonstrates how to assert a response body by comparing it against the contents of a file. It sends a GET request and uses the `body == file,cat.json;` assertion to compare the response body with the content of 'cat.json'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nbody == file,cat.json;\n```\n```\n\n----------------------------------------\n\nTITLE: Templating Multiline String Body with Variables (Hurl)\nDESCRIPTION: Illustrates a PUT request using a multiline string body (delimited by ```) to template a JSON payload with variables and functions. This approach is versatile for templating various text-based body types like XML or CSV.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_206\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n```\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}},\n    \"key4: \"{{newDate}}\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using .netrc for Credentials in Hurl (Bash)\nDESCRIPTION: Instructs Hurl to scan the `.netrc` file located in the user's home directory to find usernames and passwords for authentication. Related options include `--netrc-file` and `--netrc-optional`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n-n, --netrc\n```\n\n----------------------------------------\n\nTITLE: Example Request Using Different Parameters\nDESCRIPTION: This code snippet presents a complete Hurl request example. It includes the method, URL, and examples of various parameters, including `User-Agent` header, query string parameters, and Basic Authentication credentials. This shows a practical combination of different elements within a Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_129\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs\nUser-Agent: My User Agent\n[QueryStringParams]\nid: 4567\norder: newest\n[BasicAuth]\nalice: secret\n```\n\n----------------------------------------\n\nTITLE: Asserting Captured Variable Properties in Hurl\nDESCRIPTION: Demonstrates how to capture a value from the response (using XPath in this case) into a variable within the `[Captures]` section and then assert properties of that variable (like its count) in the `[Asserts]` section using the `variable` keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_164\n\nLANGUAGE: hurl\nCODE:\n```\n# Test that the XML endpoint return 200 pets \nGET https://example.org/api/pets\nHTTP 200\n[Captures]\npets: xpath \"//pets\"\n[Asserts]\nvariable \"pets\" count == 200\n```\n\n----------------------------------------\n\nTITLE: Using curl Options in Hurl\nDESCRIPTION: This shows how to integrate curl options into Hurl test files.  The `--resolve` and `--connect-to` options can be passed as CLI arguments, and specific curl options can be configured for individual requests in the `[Options]` section.  This extends Hurl's capabilities by utilizing curl's features.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET http://bar.com\nHTTP 200\n\n\nGET http://foo.com:8000/resolve\n[Options]\nresolve: foo.com:8000:127.0.0.1\nHTTP 200\n`Hello World!`\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Response Body with JSONPath in Hurl\nDESCRIPTION: This snippet demonstrates how to validate JSON response bodies using JSONPath expressions.  It includes assertions that check the values of specific nodes, counts of array elements, and data type validation using operators such as `==`, `!=`, `count`, `matches`, and `isIsoDate`. It validates various fields in a JSON response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_55\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order\nscreencapability: low\nHTTP 200\n[Asserts]\njsonpath \"$.validated\" == true\njsonpath \"$.userInfo.firstName\" == \"Franck\"\njsonpath \"$.userInfo.lastName\" == \"Herbert\"\njsonpath \"$.hasDevice\" == false\njsonpath \"$.links\" count == 12\njsonpath \"$.state\" != null\njsonpath \"$.order\" matches \"^order-\\d{8}$\"\njsonpath \"$.order\" matches /^order-\\d{8}$/     # Alternative syntax with regex literal\njsonpath \"$.created\" isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Testing Response Headers in Hurl\nDESCRIPTION: These snippets demonstrate how to test response headers in Hurl.  The first uses implicit response asserts, where headers are specified directly in the `HTTP` section.  The second uses explicit response asserts with predicates in the `[Asserts]` section.  The third example combines both methods.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_29\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tests in Parallel with --repeat (Shell)\nDESCRIPTION: Shows using the --repeat flag for performance and stress testing by executing a test file multiple times in parallel. Requires Hurl CLI. Inputs are the repeat count and target test file; output is parallel test execution for benchmarking.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --repeat 1000 stress.hurl\n```\n\n----------------------------------------\n\nTITLE: Capturing and Using a CSRF Token from Response (Hurl)\nDESCRIPTION: Shows how to use XPath to capture a CSRF token from an HTML response and then use it in a follow-up POST request for authentication. The snippet depends on Hurl and expects the server to include a CSRF token in a meta tag. Key parameters include the capture name and XPath query; inputs are the GET and POST endpoints, and output is the correct utilization of the token with an expected 302 redirect.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_75\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Data with [Multipart] Section in Hurl\nDESCRIPTION: Shows how to define a multipart/form-data request body using the `[Multipart]` section in Hurl. It includes simple key-value pairs and file uploads (`file,filename;`), optionally specifying the content type for files. Files are referenced relative to the Hurl file or using the `--file-root` option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_102\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Testing Response Body Against File in Hurl\nDESCRIPTION: Example of using an explicit assert to compare the response body with the contents of a file. This is useful for larger payloads or reusable assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_43\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nbody == file,cat.json;\n```\n\n----------------------------------------\n\nTITLE: Sample Hurl File for JSON API Testing\nDESCRIPTION: Example of a simple Hurl file used for testing a JSON API endpoint. Shows how to make a GET request and assert properties in the JSON response using JSONPath.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_88\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/users/1\nUser-Agent: Custom\nHTTP 200\n[Asserts]\njsonpath \"$.name\" == \"Bob\"\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Hurl Requests\nDESCRIPTION: Example of using a secret value provided via command line in an HTTP request. The token is used in a header for authentication.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_63\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using AWS Signature Version 4 Authentication in Hurl\nDESCRIPTION: Example of making a request with AWS Signature Version 4 authentication. This is used for signing requests to AWS services and other cloud providers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_66\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Asserting a Multiline String Body\nDESCRIPTION: This snippet asserts a text-based response body that is not JSON or XML. It uses a multiline string delimited by triple backticks (```).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Chaining HTTP Requests with Captures in Hurl\nDESCRIPTION: Demonstrates defining a GET request to `https://example.org`, asserting an HTTP 200 status, capturing a CSRF token using XPath from the response metadata, and then using the captured `csrf_token` variable in a subsequent POST request for login, asserting an HTTP 302 status. This illustrates request chaining and variable usage for session management or dependent requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Capturing and Reusing Response Values (Hurl)\nDESCRIPTION: Demonstrates capturing a value (a CSRF token) from the response of the first request using an XPath query within the `[Captures]` section. The captured value is then reused as a header value in a subsequent POST request using the `{{variable}}` syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Duration in HTTP Endpoint Test - Hurl\nDESCRIPTION: Sends a GET request and asserts that the total response time is under a specified threshold (e.g., 1000 milliseconds). Useful for basic endpoint performance testing. Inputs: endpoint; outputs: duration-based assert in test output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/v1/pets\nHTTP 200\n[Asserts]\nduration < 1000  # Duration in ms\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests with Hurl\nDESCRIPTION: This Hurl snippet shows how to skip requests using the `skip: true` option. The requests marked with `skip: true` will be ignored during the test run. The `a`, `c` and `d` endpoints are executed, but `b` is skipped.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_66\n\nLANGUAGE: hurl\nCODE:\n```\n# a, c, d are run, b is skipped\nGET https://example.org/a\n\nGET https://example.org/b\n[Options]\nskip: true\n\nGET https://example.org/c\n\nGET https://example.org/d\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Header in Hurl Format\nDESCRIPTION: Sends a GET request and asserts that the 'Location' header in the response equals a specific URL after a 301 redirect. Assumes the endpoint returns the required status and header. Useful for redirect testing; fails if response headers do not match.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\nLocation: http://www.example.org\n\n```\n\n----------------------------------------\n\nTITLE: Embedding GraphQL Queries in Hurl HTTP Requests\nDESCRIPTION: This snippet shows how Hurl supports sending GraphQL queries by embedding GraphQL content inside an HTTP POST body. It requires Hurl CLI and a GraphQL endpoint server. The example defines a POST request to a GraphQL API URL with a GraphQL query enclosed in a block. Expected response HTTP 200 is asserted. Input is the GraphQL query payload and output is validated HTTP response. This enables testing of GraphQL APIs within the Hurl framework.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing REST APIs with JSONPath in Hurl\nDESCRIPTION: Shows how to validate JSON responses using JSONPath assertions, including testing for equality, pattern matching, value types, and collection sizes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_45\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order\nscreencapability: low\nHTTP 200\n[Asserts]\njsonpath \"$.validated\" == true\njsonpath \"$.userInfo.firstName\" == \"Franck\"\njsonpath \"$.userInfo.lastName\" == \"Herbert\"\njsonpath \"$.hasDevice\" == false\njsonpath \"$.links\" count == 12\njsonpath \"$.state\" != null\njsonpath \"$.order\" matches \"^order-\\\\d{8}$\"\njsonpath \"$.order\" matches /^order-\\d{8}$/     # Alternative syntax with regex literal\njsonpath \"$.created\" isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Complete Basic Hurl Test with Comments\nDESCRIPTION: Final version of the basic Hurl test file with comments explaining its purpose.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\n# Our first Hurl file, just checking\n# that our server is up and running.\nGET http://localhost:3000\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in URL and String Assert (Hurl)\nDESCRIPTION: Illustrates using a captured or injected integer variable (`count`) in both the URL path of a request and within a string comparison in an assertion. The variable is rendered as a string when enclosed in double quotes in the assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_210\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample/counter/{{count}} \n\nHTTP 200\n[Asserts]\njsonpath \"$.id\" == \"{{count}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Form Parameters\nDESCRIPTION: This shows how to define form parameters in a Hurl file. Form parameters are used to send data in the body of a request, often used for HTML forms. These sections are unordered and are designated by the section marker `[FormParams]`, followed by key-value pairs, similar to query parameters.  The request's content type will be `application/x-www-form-urlencoded` in this scenario.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_125\n\nLANGUAGE: hurl\nCODE:\n```\n[FormParams]\n...\n```\n\n----------------------------------------\n\nTITLE: HTML Response Assertions\nDESCRIPTION: This snippet showcases how to assert the content of an HTML response using XPath expressions. It includes examples for checking the title, the number of elements, and the content of specific elements.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_32\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2  # Check the number of p\nxpath \"//p\" count == 2  # Similar assert for p\nxpath \"boolean(count(//h2))\" == false  # Check there is no h2  \nxpath \"//h2\" not exists  # Similar assert for h2\nxpath \"string(//div[1])\" matches /Hello.*/\n```\n\n----------------------------------------\n\nTITLE: Filter: Jsonpath\nDESCRIPTION: This snippet demonstrates the use of the `jsonpath` filter to extract data from a JSON response body and make assertions. It retrieves a data attribute, then uses a second filter `jsonpath` to extract information and assert against extracted information.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_196\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nbooks: xpath \"string(//body/@data-books)\"\n[Asserts]\nvariable \"books\" jsonpath \"$[0].name\" == \"Dune\"\nvariable \"books\" jsonpath \"$[0].author\" == \"Franck Herbert\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data\nDESCRIPTION: This snippet illustrates how to send multipart form data in a POST request. It uses the `[Multipart]` section to specify the different parts of the form, including files, along with their respective content types. One field is a file, demonstrating file uploading.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Capturing with Regex\nDESCRIPTION: This code captures data from the HTTP response body using a regular expression.  It employs the keyword `regex` along with the regex pattern enclosed in quotes or forward slashes. The pattern must contain at least one capture group, and it requires backslash escaping for metacharacters when using double quotes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_132\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nid_a: regex \"id_a:([0-9]+)\"\nid_b: regex \"id_b:(\\\\d+)\"   # pattern using double quote \nid_c: regex /id_c:(\\d+)/    # pattern using forward slash\nname: regex \"Hello ([a-zA-Z]+)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication\nDESCRIPTION: This snippet demonstrates how to use basic authentication in a Hurl request. It uses the `[BasicAuth]` section to specify the username and password for the authentication.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_9\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/protected\n[BasicAuth]\nbob: secret\n```\n\n----------------------------------------\n\nTITLE: Per-Request Control Flow: Skip, Repeat, Delay Options - Hurl\nDESCRIPTION: This set of snippets demonstrates fine-grained per-request control flow using [Options] in Hurl to repeat a request, skip it, or delay execution. Repeat parameter executes the request N times; skip bypasses the request entirely; delay introduces a wait time before execution. Key dependencies: Hurl CLI. Inputs: request details and control parameters. Output: requests handled per control flow conditions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_118\n\nLANGUAGE: hurl\nCODE:\n```\n# This request will be played exactly 3 times\nGET https://example.org/foo\n[Options]\nrepeat: 3\nHTTP 200\n\n# This request is skipped\nGET https://example.org/foo\n[Options]\nskip: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Body from a File in Hurl\nDESCRIPTION: This snippet shows how to post a JSON body from a local file in a Hurl request. The Content-Type header is set to `application/json`, and the `file,data.json;` directive indicates that the content of the `data.json` file should be used as the request body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_23\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\nContent-Type: application/json\nfile,data.json;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Hurl (URL vs. Section)\nDESCRIPTION: Compares two equivalent ways to specify query parameters in Hurl: directly within the URL (requiring URL encoding) and using the '[Query]' section (where values are not automatically URL encoded). Both examples represent the same logical request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with URL containing query parameters.\nGET https://example.org/forum/questions/?search=Install%20Linux&order=newest\n\n# A request with query parameters section, equivalent to the first request.\nGET https://example.org/forum/questions/\n[Query]\nsearch: Install Linux\norder: newest\n```\n\n----------------------------------------\n\nTITLE: Extracting Data with Regex in Hurl\nDESCRIPTION: Uses regex to extract capture groups from headers, which can be useful for parsing dynamic or complex header contents such as tokens or message parts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_187\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nparam1: header \"header1\"\nparam2: header \"header2\" regex \"Hello (.*)!\"\nparam3: header \"header2\" regex /Hello (.*)!/\n```\n\n----------------------------------------\n\nTITLE: Using Hurl Integer Variable in URL and String Assertion\nDESCRIPTION: This Hurl snippet uses the `count` variable (presumably captured as an integer) in the URL path `https://sample/counter/{{count}}`, where it is automatically rendered as a string. It also uses `{{count}}` within double quotes in an assertion `jsonpath \"$.id\" == \"{{count}}\"`, forcing the variable to be treated as a string literal \"458\" for comparison against the JSONPath result.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_5\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://sample/counter/{{count}} \n\nHTTP 200\n[Asserts]\njsonpath \"$.id\" == \"{{count}}\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Set-Cookie Headers\nDESCRIPTION: This snippet shows how to assert multiple instances of the same HTTP header, specifically the `Set-Cookie` header. This can be achieved by listing each header on its own line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\n----------------------------------------\n\nTITLE: Asserting Duration - Hurl\nDESCRIPTION: This snippet demonstrates how to assert the duration of an HTTP transaction. The `duration` keyword is used with comparison operators to check if the total time taken for the request and response falls within a specified range.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_178\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/helloworld\nHTTP 200\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiline String Body\nDESCRIPTION: This Hurl snippet demonstrates the assertion of a multiline string response body. The content within the backticks is expected to match the response body exactly, making it useful for plain text responses. This tests that the response content exactly matches the given multiline string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_53\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Feedback via HTTP POST - Hurl\nDESCRIPTION: Demonstrates sending feedback to an HTTP API using a POST request with a JSON body containing user data and comments. Used for simple API interaction or feedback collection endpoints. Inputs: endpoint and JSON body. Output: HTTP result status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://hurl.dev/api/feedback\n{\n  \"name\": \"John Doe\",\n  \"feedback\": \"Hurl is awesome!\"\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Simple HTTP Requests in Hurl File Format\nDESCRIPTION: This snippet shows the basic syntax of the Hurl file format for defining one or more HTTP requests in plain text. Each request consists of an HTTP method followed by the URL. This format is used by the Hurl CLI to run multiple HTTP requests sequentially.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org/endpoint1\nGET http://example.org/endpoint2\n```\n\n----------------------------------------\n\nTITLE: Capturing a Variable's Value into Another Variable with Hurl DSL\nDESCRIPTION: Assigns the value of one variable to another variable for reuse or clarity. This is performed by declaring a variable with the keyword 'variable' referencing the source variable name. Useful for copying or renaming captured values within the same script context.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_155\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nin: body\nname: variable \"in\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output\nDESCRIPTION: This shell command outputs the results of the Hurl tests in JSON format to standard output. This JSON output is useful for parsing and post-processing test results by other scripts or tools. The wildcard '*.hurl' specifies the Hurl files to be executed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --json *.hurl\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 String Using Hurl\nDESCRIPTION: Decodes a base64-encoded string into bytes and verifies the decoded value using jsonpath assertion. Dependencies include the base64Decode filter and jsonpath for validation. It processes the response body or a header containing base64 data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_176\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.token\" base64Decode == hex,e4bda0e5a5bde4b896e7958c;\n```\n\n----------------------------------------\n\nTITLE: Running Hurl with a Sample File\nDESCRIPTION: This snippet shows how to execute a Hurl test file. It leverages the `hurl` command along with a specified file path. It shows the basic usage of Hurl and how it can be used to test HTTP requests from a file, mimicking curl's behavior by default.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n$ vi sample.hurl\n\nGET https://example.org\n\n$ hurl sample.hurl\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request with Status Assertion in Hurl\nDESCRIPTION: Performs an HTTP GET request to the specified URL and asserts that the response status code is 301. Requires no dependencies beyond Hurl itself and demonstrates minimal response validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_73\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Chaining Sequential GET Requests in Hurl\nDESCRIPTION: This Hurl script demonstrates chaining multiple GET requests sequentially. It sends GET requests to `/api/health`, `/api/step1`, `/api/step2`, and `/api/step3` on `https://example.org`. No assertions or captures are performed in this example.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/health\nGET https://example.org/api/step1\nGET https://example.org/api/step2\nGET https://example.org/api/step3\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Request\nDESCRIPTION: This demonstrates how to create AWS Signature Version 4 signed API requests in Hurl. It uses the `--aws-sigv4` option to sign the request and the `user` option to provide the AWS credentials. It is used for cloud providers that support AWS Signature Version 4.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_57\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\nuser: bob=secret\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Running a Failing Hurl Test\nDESCRIPTION: Shell command output showing how Hurl reports test failures when expected and actual response status codes don't match.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test basic.hurl\n[1;31merror[0m: [1mAssert status code[0m\n  [1;34m-->[0m basic.hurl:2:6\n[1;34m   |[0m\n[1;34m   |[0m [90mGET http://localhost:3000[0m\n[1;34m 2 |[0m HTTP 500\n[1;34m   |[0m[1;31m      ^^^ actual value is <200>[0m\n[1;34m   |[0m\n\n[1mbasic.hurl[0m: [1;31mFailure[0m (1 request(s) in 10 ms)\n--------------------------------------------------------------------------------\nExecuted files:    1\nExecuted requests: 1 (83.3/s)\nSucceeded files:   0 (0.0%)\nFailed files:      1 (100.0%)\nDuration:          12 ms\n```\n\n----------------------------------------\n\nTITLE: Templating XML Body in Hurl\nDESCRIPTION: This snippet demonstrates how to use templates within an XML multiline string body. It uses variables like `{{login}}` and `{{password}}` as placeholders in the XML content.  This is useful for constructing dynamic XML requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_26\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/echo/post/xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Request>\n    <Login>{{login}}</Login>\n    <Password>{{password}}</Password>\n</Request>\n```\n```\n\n----------------------------------------\n\nTITLE: Request with Cookies Section vs. Header\nDESCRIPTION: This snippet shows that adding cookies via the `[Cookies]` section is equivalent to specifying them in the request header. Hurl translates cookies specified in the `[Cookies]` section into the `Cookie` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_142\n\nLANGUAGE: hurl\nCODE:\n```\n# Run a GET request with cookies section:\nGET https://example.org/index.html\n[Cookies]\ntheme: light\nsessionToken: abc123\n```\n\n----------------------------------------\n\nTITLE: Making .netrc Usage Optional with Hurl CLI\nDESCRIPTION: Makes the use of a `.netrc` file optional with the `--netrc-optional` flag. Similar to `--netrc`, but Hurl will proceed even if the file is not found or doesn't contain matching credentials. See also `--netrc` and `--netrc-file`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_87\n\nLANGUAGE: shell\nCODE:\n```\n--netrc-optional\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Export of Hurl Test - json\nDESCRIPTION: This JSON object encodes the Hurl test as structured data with HTTP request and response details. It includes method, URL, response status, and expected response body. Used for automated processing, test validation, or format conversion. No external parameters. Output is a standardized JSON representation of the test.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"entries\":[{\"request\":{\"method\":\"GET\",\"url\":\"http://localhost:8000/include\"},\"response\":{\"status\":200,\"body\":{\"type\":\"text\",\"value\":\"Hello\"}}}]}\n\n```\n\n----------------------------------------\n\nTITLE: Testing IP Address\nDESCRIPTION: This snippet shows how to test the IP address of the response. It sends a GET request and asserts that the response's IP address matches a specific IPv6 address, using `ip == \"2001:0db8:85a3:0000:0000:8a2e:0370:733\"`. It also checks if the ip starts with a prefix and that it is IPv6.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_49\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://foo.com\nHTTP 200\n[Asserts]\nip == \"2001:0db8:85a3:0000:0000:8a2e:0370:733\"\nip startsWith \"2001\"\nip isIpv6\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Performance in Hurl\nDESCRIPTION: The snippet tests endpoint performance by asserting the response time using the `duration` assertion. It checks that the response time is less than one second (1000 milliseconds).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_73\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/helloworld\nHTTP *\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication in Hurl\nDESCRIPTION: This snippet demonstrates how to use basic authentication in a Hurl request using the `[BasicAuth]` section. It provides the username and password, which Hurl then encodes and sends in the Authorization header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/protected\n[BasicAuth]\nbob: secret\n```\n\n----------------------------------------\n\nTITLE: Controlling Hurl Execution Order (Shell)\nDESCRIPTION: Illustrates the difference between running Hurl files sequentially (default behavior, outputs responses in order) and in parallel (`--test` flag, faster for independent tests). It also shows how to force sequential execution in test mode using `--jobs 1` when tests have dependencies or modify shared state.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl login.hurl basic.hurl signup.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test login.hurl basic.hurl signup.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --jobs 1 --test login.hurl basic.hurl signup.hurl\n```\n\n----------------------------------------\n\nTITLE: Running a Basic Hurl Test\nDESCRIPTION: Shell command to execute a basic Hurl test file and display the raw HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl basic.hurl\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Movies Box</title>\n        <link rel=\"icon\" type=\"image/png\" href=\"/img/favicon.png\" />\n        <link rel=\"stylesheet\" href=\"/css/style.css\" />\n\n    </head>\n    <body>\n....\n</html>\n```\n\n----------------------------------------\n\nTITLE: Getting Available Username Hurl\nDESCRIPTION: This snippet retrieves an available username from the /api/usernames/available endpoint using a GET request. The username is captured from the JSON response using a JSONPath expression, and is then used later in the signup process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# First we obtain an available username:\nGET http://localhost:3000/api/usernames/available\nHTTP 200\n[Captures]\nusername: jsonpath \"$.username\"\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response with jsonpath Predicate in Hurl (Hurl)\nDESCRIPTION: Demonstrates using the jsonpath filter in an assert to validate that the first book's name matches an expected value in a Hurl script. The snippet checks that the extracted JSON property is equal to \"Dune\". Requires a JSON response structure matching the query. Inputs are the HTTP response and the assert clause; output is a pass/fail on the assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books[0].name\" == \"Dune\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Response in Hurl\nDESCRIPTION: This snippet is an example of using a GET request to obtain a CSRF token from a web page, and subsequently using the captured token in a POST request's header. It demonstrates capturing the token with an XPath query, and applying the captured value in a subsequent request. The purpose is to showcase how to handle CSRF protection using Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_123\n\nLANGUAGE: hurl\nCODE:\n```\n# An example to show how to pass a CSRF token\n# from one request to another:\n\n# First GET request to get CSRF token value:\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\n\n# Do the login !\nPOST https://acmecorp.net/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Requests with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to generate signed AWS API requests using AWS Signature Version 4.  It includes the necessary `[Options]` and uses a [Form] section to construct the request. The `--user` command-line parameter sets the AWS access key and secret key.  It needs the Hurl and the AWS service to be accessible.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_72\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\nuser: bob=secret\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hurl File with HTML Testing\nDESCRIPTION: A basic Hurl file that tests a home page using HTTP GET request with XPath assertions to verify page content and HTTP headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n# Testing HTTP response headers:\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\ncookie \"x-session-id\" exists\ncookie \"x-session-id[HttpOnly]\" exists\n```\n\n----------------------------------------\n\nTITLE: Explicit Assertion Using Predicate in Hurl\nDESCRIPTION: Performs an HTTP request and explicitly asserts a predicate, such as an XPath expression, on the response body. This enhances the test's specificity by validating content within the response, useful for complex scenarios.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_75\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n[Asserts]\nxpath \"string(//title)\" == \"301 Moved\"\n```\n\n----------------------------------------\n\nTITLE: Setting Global Delay and Repeat Options via Command Line for Hurl\nDESCRIPTION: Shows how to use the '--delay' and '--repeat' command-line options with Hurl to globally delay execution between requests and repeat them. Requires Hurl CLI tool. The snippet demonstrates command invocation with delay set to 500ms and repeat to 3 for all entries in the specified file. Inputs are CLI arguments and file; output is repeated, delayed request execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_100\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --delay 500ms --repeat 3 foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Converting String to Date with toDate in Hurl\nDESCRIPTION: Parses a date string using a specified format into a date object, then performs date-based assertions such as comparing days before now. Supports ISO 8601/RFC 3339 with the `%+` shorthand.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_190\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nheader \"Expires\" toDate \"%a, %d %b %Y %H:%M:%S GMT\" daysBeforeNow > 1000\n\n# ISO 8601 / RFC 3339 parsing example\nGET https://example.org/api/books\nHTTP 200\n[Asserts]\njsonpath \"$..published\" == \"2023-01-23T18:25:43.511Z\"\njsonpath \"$..published\" toDate \"%Y-%m-%dT%H:%M:%S%.fZ\" format \"%A\" == \"Monday\"\njsonpath \"$..published\" toDate \"%+\" format \"%A\" == \"Monday\"\n```\n\n----------------------------------------\n\nTITLE: Hurl file with JSON field difference example\nDESCRIPTION: A Hurl file that makes a GET request and compares the response to a JSON object with name and age fields.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/bob\n{\n  \"name\": \"Bob\",\n  \"age\": 22\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hurl CLI Command-Line Options for Global Redirect - Shell\nDESCRIPTION: This shell command demonstrates executing Hurl with the --location option to enable automatic handling of HTTP redirections globally within the specified Hurl file. Inputs: path to the Hurl file, command-line options. Dependency: hurl CLI must be installed and accessible. Output: test execution following HTTP redirects as per the script. Limitation: runs in the shell and may require path adjustments based on user setup.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_111\n\nLANGUAGE: shell\nCODE:\n```\nhurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Form Data\nDESCRIPTION: This snippet demonstrates how to send HTML form data in a POST request using the `[Form]` section.  It specifies the form fields and their values to be sent in the request body.  The `default: false` is present, which is likely for some specific internal logic.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[Form]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Cookie Attributes with Hurl DSL\nDESCRIPTION: Demonstrates how to assert the presence and values of HTTP cookies and their attributes using Hurl. It highlights checks for specific cookie values, existence of optional attributes like Expires, Secure, HttpOnly, and SameSite, and the constraints on testing Secure and HttpOnly attributes only by existence predicates. The snippet assumes an HTTP response containing multiple Set-Cookie headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_154\n\nLANGUAGE: hurl\nCODE:\n```\nSet-Cookie: LSID=DQAAAKEaem_vYg; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/accounts; SameSite=Lax;\nSet-Cookie: HSID=AYQEVnDKrdst; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; HttpOnly; Path=/\nSet-Cookie: SSID=Ap4PGTEq; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/\n\n[Asserts]\ncookie \"LSID\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Value]\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Expires]\" exists\ncookie \"LSID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"LSID[Max-Age]\" not exists\ncookie \"LSID[Domain]\" not exists\ncookie \"LSID[Path]\" == \"/accounts\"\ncookie \"LSID[Secure]\" exists\ncookie \"LSID[HttpOnly]\" exists\ncookie \"LSID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Using Command-Line User Option\nDESCRIPTION: This demonstrates using the command-line option `-u/--user` for basic authentication to apply authentication to all requests in a file, or per request using the `[Options]` section, showing both global and per-request user authentication methods.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --user bob:secret login.hurl\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/login\n[Options]\nuser: bob:secret\nHTTP 200\n\nGET https://example.org/login\n[Options]\nuser: alice:secret\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Templating Hurl JSON Request Body Directly\nDESCRIPTION: This Hurl snippet shows how variables (`a_string`, `a_bool`, `a_null`, `a_number`) and functions (`newDate`) can be used directly within a JSON structure specified as the request body. Hurl parses this structure and substitutes the variable/function values at runtime, respecting their types (string, boolean, null, number) where appropriate within the JSON context.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_15\n\nLANGUAGE: Hurl\nCODE:\n```\nPUT https://example.org/api/hits\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}},\n    \"key4\": \"{{newDate}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Regex Matches - Hurl\nDESCRIPTION: This snippet demonstrates how to assert that the HTTP response body matches a given regular expression pattern. The assert uses the `regex` keyword followed by the regular expression and the expected captured group value. It also highlights the use of both double-quoted strings and literal patterns.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_174\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/hello\nHTTP 200\n[Asserts]\nregex \"^(\\\\d{4}-\\\\d{2}-\\\\d{2})$\" == \"2018-12-31\"\n# Same assert as previous using regex literals\nregex /^(\\d{4}-\\d{2}-\\d{2})$/ == \"2018-12-31\"\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query in Hurl\nDESCRIPTION: These snippets demonstrate how to use GraphQL queries in Hurl. The first example shows a simple GraphQL query, and the second shows a GraphQL query with variables.  The variables are defined in the `variables` section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_25\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Capture and Assert Filters in Hurl (Hurl)\nDESCRIPTION: Shows multiple types of filters in use within both [Captures] and [Asserts] sections for extracting and validating HTTP headers and JSON values. Includes replace, split, count, nth, and jsonpath filters. Dependencies are Hurl and a compatible API. Inputs are headers and JSON response; outputs are variable captures and assertion checks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nname: jsonpath \"$user.id\" replace /\\d/ \"x\"\n[Asserts]\nheader \"x-servers\" split \",\" count == 2\nheader \"x-servers\" split \",\" nth 0 == \"rec1\"\nheader \"x-servers\" split \",\" nth 1 == \"rec3\"\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Capturing Data with jsonpath Query in Hurl (Hurl)\nDESCRIPTION: This snippet demonstrates how to capture a value from a JSON response using the jsonpath filter in Hurl, storing the result in a variable for later assertions. The query extracts the first book's name from the HTTP response body. Requires Hurl and access to a compatible API endpoint. Input is an HTTP response, output is the captured value assigned to the variable 'name'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nname: jsonpath \"$.books[0].name\"\n```\n\n----------------------------------------\n\nTITLE: Using Injected Variables in Hurl URL Path\nDESCRIPTION: This Hurl snippet demonstrates how to use variables like `host` and `id`, which are expected to be injected from external sources (like command line options or environment variables), directly within the URL path of a request using the `{{variable_name}}` syntax. This allows for dynamic endpoint configuration without modifying the Hurl file itself.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_7\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Data with UUID in Hurl\nDESCRIPTION: This snippet demonstrates how to use the `newUuid` function in a Hurl template to generate a dynamic UUID for an email address. The UUID is generated each time the request is executed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_29\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/foo\n{\n  \"name\": \"foo\",\n  \"email\": \"{{newUuid}}@test.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Response Headers in Hurl\nDESCRIPTION: Demonstrates how to specify expected response headers, verify their presence and values in a case-insensitive manner, and handle multiple headers of the same name such as `Set-Cookie`. Allows precise header validation for response correctness and security.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_143\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/login\n[Form]\nuser: toto\npassword: 12345678\nHTTP 302\nLocation: https://example.org/home\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html \nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Version\nDESCRIPTION: This snippet captures the HTTP version from the response. It defines a variable and uses the `version` keyword to store the version as a string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_125\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\nhttp_version: version\n```\n\n----------------------------------------\n\nTITLE: Hurl POST Request with JSON Body\nDESCRIPTION: Shows how to define a POST request in Hurl with a JSON payload as the request body. The body must be the last part of the request definition, following any headers or optional sections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/dogs?id=4567\nUser-Agent: My User Agent\n{\n \"name\": \"Ralphy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making Script Executable and Running (Shell)\nDESCRIPTION: Commands to set execute permissions for the user (`chmod u+x`) on the integration script and then run it, passing the target URL as an argument. The output shows the confirmation message and the container ID.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ chmod u+x bin/integration.sh\n$ bin/integration.sh http://localhost:3000\nStarting container\n5d311561828d6078e84eb4b8b87dfd5d67bde6d9614ad83860b60cf310438d2a\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Variables in Hurl\nDESCRIPTION: Demonstrates sending a GraphQL query that includes GraphQL variables using the multiline string syntax with the `graphql` identifier. The `variables` block is part of the GraphQL standard and is included within the same multiline string, typically sent as part of a JSON payload.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_114\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Global Hurl Options via Command Line (Shell)\nDESCRIPTION: Demonstrates how to apply a Hurl option (`--location`) globally to all entries within a specified Hurl file (`foo.hurl`) using the command line. This ensures that Hurl follows redirects for every request defined in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Filter: Decode\nDESCRIPTION: This snippet demonstrates how to decode a byte string using the `decode` filter.  It addresses the case where the `Content-Type` header does not specify the charset and requires an explicit body response decoding.  The assertion is done after decoding the response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_192\n\nLANGUAGE: hurl\nCODE:\n```\n# The 'Content-Type' HTTP response header does not precise the charset 'gb2312'\n# so body must be decoded explicitly by Hurl before processing any text based assert\nGET https://exapple.org/hello_china\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\n# Content-Type has no encoding clue, we must decode ourselves the body response.\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query in Hurl\nDESCRIPTION: This snippet shows how to create GraphQL queries using the Hurl language. The first part shows a simple GraphQL query to fetch information about a human. The second part demonstrates using variables within a GraphQL query. This enables parameterized queries which can change based on the values of those variables. These examples can be used to test GraphQL APIs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_53\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report with Hurl CLI\nDESCRIPTION: Generate a JUnit format report file for the Hurl test results. If a JUnit report file already exists, it will be updated with the current execution results. This feature is exclusive to the command-line interface.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_21\n\nLANGUAGE: cli\nCODE:\n```\n--report-junit <FILE>\n```\n\n----------------------------------------\n\nTITLE: Following HTTP Redirects in Hurl\nDESCRIPTION: Enables Hurl to automatically follow HTTP redirects (Location headers). Use --max-redirs to limit the number of redirects followed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\n-L, --location\n```\n\n----------------------------------------\n\nTITLE: Using '--location' Option for Redirection - Hurl\nDESCRIPTION: This demonstrates using the `--location` option to follow redirects. The assertion is performed on the final response, after redirection occurs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\n# Running hurl --location google.hurl\nGET https://google.fr\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Extracting Data with Regular Expressions using regex Filter in Hurl (Hurl)\nDESCRIPTION: Uses regex filters on headers to extract matching groups from string values. Demonstrates both quoted and literal/regex notation. Ensures the pattern includes at least one capturing group. Inputs are header values; outputs are extracted substrings. Requires Hurl and appropriately structured headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_17\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nparam1: header \"header1\"\nparam2: header \"header2\" regex \"Hello (.*)!\"\nparam3: header \"header2\" regex /Hello (.*)!/\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Hurl\nDESCRIPTION: This snippet shows two ways to define query parameters in a Hurl request. The first uses the `[Query]` section, where parameters are defined as key-value pairs. The second directly appends the query string to the URL, with parameters URL-encoded.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\n[Query]\norder: newest\nsearch: something to search\ncount: 100\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news?order=newest&search=something%20to%20search&count=100\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Duration with Hurl DSL\nDESCRIPTION: Measures and captures the response time of the HTTP request in milliseconds. The variable name is followed by a colon and the keyword 'duration'. This capture is useful for performance testing and response time assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_156\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nduration_in_ms: duration\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request - Method and URL\nDESCRIPTION: This snippet shows the mandatory components of an HTTP request in Hurl format: the HTTP method and the URL. It's the starting point for every request definition. The method is usually one of the standard HTTP methods like GET, POST, etc., and the URL specifies the target resource. The URL can contain query parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_122\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://sample.net\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Body in Hurl\nDESCRIPTION: Demonstrates two ways to send JSON data: using an inline JSON object directly in the Hurl file, and by referencing an external JSON file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"456\",\n    \"evaluate\": true\n}\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\nContent-Type: application/json\nfile,data.json;\n```\n\n----------------------------------------\n\nTITLE: Templating Hurl Multiline String Request Body\nDESCRIPTION: This Hurl snippet demonstrates using a multiline string delimited by backticks (```) to define a request body. This method is flexible and allows templating any text format (like XML, CSV, or JSON as shown here) using variables (`a_string`, `a_bool`, `a_null`, `a_number`) and functions (`newDate`) with the `{{...}}` syntax. A `Content-Type` header is typically required to specify the body format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_16\n\nLANGUAGE: Hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n```\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}},\n    \"key4: \"{{newDate}}\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying response body with SHA-256 assertions in Hurl\nDESCRIPTION: Shows how to verify the integrity of a response body using SHA-256 hash checking, which works after content encoding decompression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_36\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Without content encoding compression:\nGET https://example.org/a.txt\nHTTP 200\n[Asserts]\nsha256 == hex,abcdef;\n\n# With content encoding compression:\nGET https://example.org/a.txt\nAccept-Encoding: brotli\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" == \"brotli\"\nsha256 == hex,abcdef;\n```\n\n----------------------------------------\n\nTITLE: Complete Hurl File with Multiple Requests and Assertions\nDESCRIPTION: A comprehensive Hurl file combining all examples into a single file with four HTTP requests, testing HTML content, 404 responses, a health API, and a search API with various assertion types.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n# Testing HTTP response headers:\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\ncookie \"x-session-id\" exists\ncookie \"x-session-id[HttpOnly]\" exists\n```\n\n----------------------------------------\n\nTITLE: Testing Status Codes in Hurl\nDESCRIPTION: Shows how to check for exact status codes and how to test for status code ranges using wildcard matching and explicit assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_43\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\n# Testing status code is in a 200-300 range\nHTTP *\n[Asserts]\nstatus >= 200\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Files with Glob Pattern (Hurl)\nDESCRIPTION: Specify input files that match the given glob pattern. Multiple glob flags may be used. Supports common Unix glob patterns like *, ? and []. Enclose patterns in quotes to prevent shell expansion. This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\n--glob <GLOB>\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Data with Multiline String Body in Hurl\nDESCRIPTION: Illustrates sending multipart/form-data using a raw multiline string body. This method requires manually defining the `Content-Type` header with the boundary and structuring the body with boundaries, `Content-Disposition`, and `Content-Type` for each part. File content must be inlined within the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_103\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting SSL Certificate Properties in Hurl\nDESCRIPTION: Illustrates how to verify specific attributes of the server's SSL certificate using the `certificate` assert in Hurl. Supported attributes include 'Subject', 'Issuer', 'Start-Date', 'Expire-Date', and 'Serial-Number'. Predicates like `daysAfterNow` and `matches` can be used for flexible checks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_166\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches \"[0-9af]+\"\n```\n\n----------------------------------------\n\nTITLE: Using Hurl Options for File Input and Output Control in Shell\nDESCRIPTION: This snippet illustrates the usage of command-line options in Hurl to specify an output file instead of stdout and run tests using the --test flag. The `-o` or `--output` option redirects output to a specified file, while `--test` runs Hurl requests in a test mode showing test-oriented results, enabling automated HTTP request testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -o output input.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining a Oneline String Request Body in Hurl\nDESCRIPTION: Shows how to define a simple, single-line text request body using the single-backtick (`) syntax. This is a concise alternative to multiline strings when the body content does not contain newline characters or backticks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_118\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Requests (Hurl)\nDESCRIPTION: Illustrates the basic structure of a Hurl file containing multiple sequential HTTP requests. Each request is defined on separate lines, and Hurl executes them in the order they appear in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org/endpoint1\nGET http://example.org/endpoint2\n```\n\n----------------------------------------\n\nTITLE: Request With Query Parameters Section\nDESCRIPTION: This shows a GET request with query parameters defined using the `[QueryStringParams]` section. This is equivalent to the previous example but uses a different method. The key-value pairs are defined inside the section.  The values in the `[QueryStringParams]` are not URL encoded.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_133\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with query parameters section, equivalent to the first request.\nGET https://example.org/forum/questions/\n[QueryStringParams]\nsearch: Install Linux\norder: newest\n```\n\n----------------------------------------\n\nTITLE: Asserting XML Body\nDESCRIPTION: This snippet checks if the response body is a valid XML structure. This is done using implicit body matching, verifying the XML content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Content using XPath Asserts in Hurl\nDESCRIPTION: This Hurl script sends a GET request to `https://example.org` and asserts the HTTP status code is 200. It uses an XPath expression `normalize-space(//head/title)` within the `[Asserts]` section to extract the text content of the HTML `<title>` tag (ignoring leading/trailing whitespace) and assert that it equals \"Hello world!\".\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Testing Response with Status Code in Hurl\nDESCRIPTION: This snippet demonstrates how to test the response status code in a Hurl file.  It checks if the HTTP status code is 200.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_31\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with (almost) no check:\nGET https://foo.com\n\n# A status code check:\nGET https://foo.com\nHTTP 200\n\n# A test on response body\nGET https://foo.com\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"running\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Query Parameter with Hurl newDate Function\nDESCRIPTION: This Hurl snippet shows how to use the built-in `{{newDate}}` function to generate an RFC 3339 UTC date string at runtime. The generated date is then used as the value for the `date` query parameter in the GET request to `https://example.org/api/foo`. This allows making requests with dynamic, time-sensitive parameters without hardcoding values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_2\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://example.org/api/foo\n[Query]\ndate: {{newDate}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Checking Exact JSON Body Match with Hurl\nDESCRIPTION: This snippet demonstrates how to use implicit body matching in Hurl to verify that the response body matches the specified JSON exactly.  It requires Hurl to be installed and the example.org service to be accessible.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_50\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/cats/123\nHTTP 200\n{\n  \"name\" : \"Purrsloud\",\n  \"species\" : \"Cat\",\n  \"favFoods\" : [\"wet food\", \"dry food\", \"<strong>any</strong> food\"],\n  \"birthYear\" : 2016,\n  \"photo\" : \"https://learnwebcode.github.io/json-example/images/cat-2.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Variables in Hurl Tests\nDESCRIPTION: Example of injecting calculated date values into Hurl tests using shell variables. Shows how to compute today and tomorrow's date and pass them as variables to Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\n$ TODAY=$(date '+%y%m%d')\n$ TOMORROW=$(date '+%y%m%d' -d\"+1days\")\n$ hurl --variable \"today=$TODAY\" --variable \"tomorrow=$TOMORROW\" test.hurl\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Data in Hurl\nDESCRIPTION: These snippets demonstrate how to use dynamic data in Hurl using functions like `newUuid` and `newDate`. These functions can be used in templates to generate dynamic values for request parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_26\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/foo\n{\n  \"name\": \"foo\",\n  \"email\": \"{{newUuid}}@test.com\"\n}\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/foo\n[Query]\ndate: {{newDate}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Header Assert with Contains and Matches Predicates\nDESCRIPTION: Hurl example illustrating header assertions with `contains` and `matches` predicates. Demonstrates validating the presence of a substring in the Location header and matching a regular expression against the Last-Modified header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_22\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\nheader \"Last-Modified\" matches /\\d{2} [a-z-A-Z]{3} \\d{4}/\n```\n\n----------------------------------------\n\nTITLE: Editing and Running Hurl Files in Shell - Shell\nDESCRIPTION: Shows how to create a new Hurl file in a text editor and execute it from the shell using the hurl command. Illustrates both basic and test-oriented CLI usage, as well as recursive directory and wildcard usage for test runs. Inputs: shell commands and Hurl files. Outputs: command line execution results.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vi sample.hurl\n\nGET https://example.org\n\n$ hurl sample.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test sample.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test integration/*.hurl\n$ hurl --test .\n```\n\n----------------------------------------\n\nTITLE: Request Body with Body and Header\nDESCRIPTION: This code shows an HTTP POST request with a request body. It includes the method, URL, and a `User-Agent` header, followed by the request body, which is a JSON object. The body data is used to send parameters to the server. The body has no explicit marker.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_131\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/dogs?id=4567\nUser-Agent: My User Agent\n{\n \"name\": \"Ralphy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Path with Unicode Hurl\nDESCRIPTION: This snippet shows how to assert values extracted using `jsonpath` in Hurl. It specifically demonstrates that a direct Unicode character (✈) in a string comparison is equivalent to its hexadecimal escape sequence (\\u{2708}). The request targets `https://example.org/api` and checks for an HTTP 200 status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/hurl-file.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n# The following assert are equivalent:\n[Asserts]\njsonpath \"$.slideshow.title\" == \"A beautiful ✈!\"\njsonpath \"$.slideshow.title\" == \"A beautiful \\u{2708}!\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating XPath Expressions with decode and xpath Filters in Hurl (Hurl)\nDESCRIPTION: Combines decode and xpath filters to convert bytes to text using a specific encoding and then extract specific XML elements via XPath from the HTTP response. Ensures text encoding is handled when not specified by the response. Inputs are raw response bytes and encoding; outputs are strings extracted with XPath. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_27\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello_gb2312\nHTTP 200\n[Asserts]\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Headers with the Same Name (Explicit) in Hurl\nDESCRIPTION: Explains how to assert properties of multiple response headers sharing the same name (e.g., `Vary`) using Hurl's explicit `header` assert within the `[Asserts]` section. It uses the `count` predicate to check the number of headers and the `contains` predicate to verify the presence of specific values within the collection of header values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_151\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nheader \"Vary\" count == 2\nheader \"Vary\" contains \"User-Agent\"\nheader \"Vary\" contains \"Content-Type\"\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Binary Path and Linked Libraries (Linux) - Shell\nDESCRIPTION: This sequence shows how to identify the installed Hurl binary and inspect its linked libraries on Linux using 'which' and 'ldd'. It assumes Linux shell access with Hurl installed. Inputs: Hurl binary location. Outputs: binary path and a list of dynamic dependencies, aiding debugging and compatibility assurance.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_98\n\nLANGUAGE: Shell\nCODE:\n```\n$ which hurl\n/root/.cargo/bin/hurl\n$ ldd /root/.cargo/bin/hurl\nldd /root/.cargo/bin/hurl\n\tlinux-vdso.so.1 (0x0000ffff8656a000)\n\tlibxml2.so.2 => /usr/lib/aarch64-linux-gnu/libxml2.so.2 (0x0000ffff85fe8000)\n\tlibcurl.so.4 => /usr/lib/aarch64-linux-gnu/libcurl.so.4 (0x0000ffff85f45000)\n\tlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000ffff85f21000)\n\t...\n\tlibkeyutils.so.1 => /lib/aarch64-linux-gnu/libkeyutils.so.1 (0x0000ffff82ed5000)\n\tlibffi.so.7 => /usr/lib/aarch64-linux-gnu/libffi.so.7 (0x0000ffff82ebc000)\n\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order Mark with Hurl\nDESCRIPTION: This Hurl snippet checks for the presence of a Byte Order Mark (BOM) at the beginning of a response body. The `bytes startsWith hex,efbbbf` assertion validates that the response body starts with the specified hex bytes. The `efbbbf` value corresponds to the BOM for UTF-8 encoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_71\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\n```\n\n----------------------------------------\n\nTITLE: HTML Escape Special Characters in Hurl\nDESCRIPTION: Converts special characters `&`, `<`, and `>` in JSON content to their HTML-safe sequences, useful for ensuring safe HTML rendering or preventing injection issues.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_183\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$..text\" htmlEscape == \"a &gt; b\"\n```\n\n----------------------------------------\n\nTITLE: Combining Implicit and Explicit Header Asserts in Hurl\nDESCRIPTION: This snippet combines implicit and explicit header assertions in Hurl. It checks the `Set-Cookie` headers using implicit asserts (equality) and the `Location` header using an explicit assert (substring containment).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_36\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Response with XPath Asserts in Hurl\nDESCRIPTION: This snippet demonstrates testing an HTML response using XPath assertions. It checks the content of the title tag, the number of paragraph elements, and the existence of heading elements using XPath expressions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2  # Check the number of p\nxpath \"//p\" count == 2  # Similar assert for p\nxpath \"boolean(count(//h2))\" == false  # Check there is no h2  \nxpath \"//h2\" not exists  # Similar assert for h2\nxpath \"string(//div[1])\" matches /Hello.*/\n```\n\n----------------------------------------\n\nTITLE: Injecting Typed Variables via Hurl Command Line Option\nDESCRIPTION: This shell snippet shows how to inject variables of different types (string, boolean, null, number) into a Hurl test run using the `--variable` command-line option. Hurl attempts to infer the type based on the value string (e.g., `true` becomes boolean, `null` becomes null, `42` becomes number, others default to string). This allows providing typed data for templating or other uses within the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --variable a_string=apple --variable a_bool=true --variable a_null=null --variable a_number=42 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication with [BasicAuth] Section in Hurl\nDESCRIPTION: Shows how to specify HTTP Basic Authentication credentials using the `[BasicAuth]` section in Hurl. The username and password (not Base64 encoded) are provided, separated by a colon. Hurl automatically handles the Base64 encoding and adds the appropriate `Authorization` header. Spaces around username/password are trimmed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_106\n\nLANGUAGE: hurl\nCODE:\n```\n# Perform basic authentication with login `bob` and password `secret`.\nGET https://example.org/protected\n[BasicAuth]\nbob: secret\n```\n\n----------------------------------------\n\nTITLE: Asserting XPath Expressions - Hurl\nDESCRIPTION: This snippet demonstrates how to assert values based on XPath expressions applied to the HTTP response body. It utilizes the `xpath` keyword, allowing for querying and validation of XML or HTML content.  XML Namespaces are also supported.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_172\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2                             # Check the number of <p>\nxpath \"//p\" count == 2                              # Similar assert for <p>\nxpath \"boolean(count(//h2))\" == false               # Check there is no <h2>  \nxpath \"//h2\" not exists                             # Similar assert for <h2> \n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/assert-xpath\nHTTP 200\n[Asserts]\n\nxpath \"string(//bk:book/bk:title)\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[name()='bk:book']/*[name()='bk:title'])\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[local-name()='book']/*[local-name()='title'])\" == \"Cheaper by the Dozen\"\n\nxpath \"string(//bk:book/isbn:number)\" == \"1568491379\"\nxpath \"string(//*[name()='bk:book']/*[name()='isbn:number'])\" == \"1568491379\"\nxpath \"string(//*[local-name()='book']/*[local-name()='number'])\" == \"1568491379\"\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets with Command-Line\nDESCRIPTION: This snippet uses the command-line option `--secret` to redact a secret value. This allows you to pass secrets as arguments and mask sensitive information during execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_54\n\nLANGUAGE: hurl\nCODE:\n```\n# Using command-line for known values:\n```shell\n$ hurl --secret token=1234 file.hurl\n```\n```hurl\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Capturing SSL Certificate Properties\nDESCRIPTION: This captures properties from the SSL certificate. It uses the keyword `certificate` followed by the certificate attribute to capture values like Subject, Issuer, Start-Date, Expire-Date, and Serial-Number.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_139\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncert_subject: certificate \"Subject\"\ncert_issuer: certificate \"Issuer\"\ncert_expire_date: certificate \"Expire-Date\"\ncert_serial_number: certificate \"Serial-Number\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body using Base64 Encoded Data in Hurl\nDESCRIPTION: Demonstrates how to assert the exact binary content of an HTTP response body by providing its Base64 representation. The syntax starts with `base64,` and ends with `;`. Whitespace and newlines in the Base64 string are ignored.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_173\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nbase64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIG\nFkaXBpc2NpbmcgZWxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0g\naGVuZHJlcml0LCBlc3QganVzdG8gYmliZW5kdW0gbWV0dXMsIG5lYyBydXRydW\n0gdG9ydG9yIG1hc3NhIGlkIG1ldHVzLiA=;\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String Content in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string-content` rule, which consists of zero or more occurrences of either `multiline-string-text` or `multiline-string-escaped-char`. This forms the content part of a `multiline-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_220\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><a href=\"#multiline-string-text\">multiline-string-text</a><span class=\"grammar-symbol\">|</span><a href=\"#multiline-string-escaped-char\">multiline-string-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Run Hurl with Proxy Option\nDESCRIPTION: Runs Hurl with the `--proxy` option, specifying the address and port of the proxy server to use.  This allows Hurl to route its HTTP requests through the specified proxy, enabling inspection and modification of the traffic by the proxy server. The input file 'basic.hurl' contains the Hurl script to execute.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --proxy localhost:8888 basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple HTTP Requests - Hurl\nDESCRIPTION: Shows sequential execution of multiple GET requests within a single Hurl file to demonstrate chaining of API endpoint calls. Ideal for testing APIs step-by-step. Inputs are request URLs; outputs are executed HTTP requests with their responses. No authentication or data capture included in this example.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/health\nGET https://example.org/api/step1\nGET https://example.org/api/step2\nGET https://example.org/api/step3\n```\n\n----------------------------------------\n\nTITLE: Testing Bytes Content with SHA-256 Hash in Hurl\nDESCRIPTION: This snippet demonstrates how to check the SHA-256 hash of the response body in a Hurl request. The expected SHA-256 hash is provided in hexadecimal format. This ensures the integrity of the downloaded content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Email in Hurl JSON Body with newUuid Function\nDESCRIPTION: This Hurl snippet illustrates using the built-in `{{newUuid}}` function to generate a random UUID v4 string. This dynamically generated string is then embedded within a larger string value for the `email` key in the JSON request body, creating a unique email address for each request execution. This is useful for testing scenarios requiring unique identifiers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_3\n\nLANGUAGE: Hurl\nCODE:\n```\nPOST https://example.org/api/foo\n{\n  \"name\": \"foo\",\n  \"email\": \"{{newUuid}}@test.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Request Body using Multiline String in Hurl\nDESCRIPTION: Illustrates defining a JSON request body using the multiline string syntax with the `json` language identifier (```json ... ```). This is equivalent to the direct JSON body syntax and also automatically sets the `Content-Type` to `application/json`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_110\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new doggy thing with JSON body:\nPOST https://example.org/api/dogs\n```json\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Hurl with --test Option\nDESCRIPTION: This snippet shows how to use the `--test` option in the `hurl` command to get a test-oriented output. This option is useful for verifying the behavior of your Hurl files, as it provides a clear indication of whether the tests have passed or failed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test sample.hurl\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query in Hurl\nDESCRIPTION: Shows how to send GraphQL queries, including both a simple query example and a more complex query with variables that control the response structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting Collection Element by Index with nth Filter in Hurl (Hurl)\nDESCRIPTION: Selects the nth element (zero-based) from a collection (e.g., a JSON array) using the nth filter following a jsonpath query. Checks its value with an assertion. Inputs are arrays; outputs are elements by index. Requires Hurl and known array length.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_16\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books\" nth 2 == \"Children of Dune\"\n```\n\n----------------------------------------\n\nTITLE: Setting 'location-trusted' Option - Hurl\nDESCRIPTION: This snippet sets the `location-trusted` option within a request's `[Options]` section, enabling trusted redirection for that specific request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\n[Options]\nlocation-trusted: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Connection IP Address in Hurl\nDESCRIPTION: Illustrates how to assert the IP address used for the last connection in a Hurl request. It shows checking the exact IP address string and using the `isIpv4` and `isIpv6` predicates for validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_163\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nip isIpv4\nip not isIpv6\nip == \"172.16.45.87\"\n```\n\n----------------------------------------\n\nTITLE: Templating Hurl Files with Variables\nDESCRIPTION: Demonstrates modifying a Hurl file (`basic.hurl`) to replace a hardcoded URL with a variable `{{host}}`. This allows the target host to be specified dynamically at runtime, making tests reusable across different environments (e.g., local, staging, production).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\n\n# ...\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\nGET {{host}}\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query (Simple)\nDESCRIPTION: This snippet shows how to send a simple GraphQL query in a POST request.  The GraphQL query is included directly within the Hurl file using backticks (```graphql).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_22\n\nLANGUAGE: hurl\nCODE:\n```\n~~~hurl\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n~~~\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report with Hurl CLI\nDESCRIPTION: Generates a JSON test report in the specified directory `<DIR>` using the `--report-json` option. If a report exists in the directory, it will be updated. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_97\n\nLANGUAGE: shell\nCODE:\n```\n--report-json <DIR>\n```\n\n----------------------------------------\n\nTITLE: Using Regex Filters with JSONPath in Hurl\nDESCRIPTION: A Hurl example demonstrating how to use regex filters with JSONPath to extract and test specific patterns from response values, providing more precise validation of data formats.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\n# Check search API:\nGET http://localhost:3000/api/search\n[Query]\nq: 1982\nsort: name\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$\" count == 5\njsonpath \"$[0].name\" == \"Blade Runner\"\njsonpath \"$[0].director\" == \"Ridley Scott\"\njsonpath \"$[0].release_date\" regex /(\\d{4})-\\d{2}-\\d{2}/ == \"1982\"\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Body as Text with Hurl DSL\nDESCRIPTION: Captures the entire HTTP response body decoded as text based on the charset specified in the 'Content-Type' header. The variable name followed by a colon and 'body' keyword within [Captures] captures the decoded body. If the content-type does not specify charset, a decode filter can be applied to specify encoding explicitly.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_150\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Captures]\nmy_body: body\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded using GB 2312.\n# But, the 'Content-Type' HTTP response header doesn't precise any charset,\n# so we decode explicitly the bytes.\nGET https://example.org/cn\nHTTP 200\n[Captures]\nmy_body: bytes decode \"gb2312\"\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication with Hurl CLI\nDESCRIPTION: Include a Basic Authentication header with every request sent by Hurl. The credentials should be provided in the format `USER:PASSWORD`. This simplifies adding authentication to multiple requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_31\n\nLANGUAGE: cli\nCODE:\n```\n-u, --user <USER:PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Capturing with XPath\nDESCRIPTION: This code captures data from the HTTP response body by using an XPath expression. It allows to extract data from XML or HTML responses by using the `xpath` keyword and the XPath expression enclosed in quotes. Filters, such as `decode`, can be applied to the body before the XPath expression is evaluated.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_130\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\n# Capture the identifier from the dom node <div id=\"pet0\">5646eaf23</div\nHTTP 200\n[Captures]\npet-id: xpath \"normalize-space(//div[@id='pet0'])\"\n\n# Open the captured page.\nGET https://example.org/home/pets/{{pet-id}}\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Test that the XML endpoint return 200 pets\nGET https://example.org/api/pets\nHTTP 200\n[Captures]\npets: xpath \"//pets\"\n[Asserts]\nvariable \"pets\" count == 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home_cn\nHTTP 200\n[Captures]\npet-id: bytes decode \"gb2312\" xpath \"normalize-space(//div[@id='pet0'])\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Form Data in Hurl\nDESCRIPTION: This snippet shows how to send HTML form data in a Hurl POST request using the `[Form]` section.  It defines the form fields and their corresponding values.  Templates can be used within the form values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_20\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[Form]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Hurl File with Explicit Header Assertions\nDESCRIPTION: This snippet adds an explicit header assertion to check the value of the `Content-Type` HTTP header.  It demonstrates the usage of header assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_4\n\nLANGUAGE: Hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n# Testing HTTP response headers:\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Hurl Test Scripts - Shell\nDESCRIPTION: Runs multiple Hurl test scripts in parallel mode using the --parallel flag and optionally --max-workers for thread count control. The scripts (a.hurl, b.hurl, c.hurl) are executed concurrently, improving throughput for large test sets. Requires Hurl CLI with parallel support and access to all specified .hurl files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --parallel --test a.hurl b.hurl c.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --parallel --max-workers 4 --test a.hurl b.hurl c.hurl\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl Samples\nDESCRIPTION: This snippet demonstrates how to run a Hurl sample file and test its output. It involves creating a `.hurl` file with the sample content and then using the `hurl` command-line tool to execute the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vi sample.hurl\n\nGET https://example.org\n\n$ hurl sample.hurl\n```\n\n----------------------------------------\n\nTITLE: Capturing the Response Body\nDESCRIPTION: This snippet captures the entire response body as text using the keyword `body`. The body is decoded based on the `charset` value in the `Content-Type` header.  If no charset is specified, the `decode` filter can be used to specify an encoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_128\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Captures]\nmy_body: body\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded using GB 2312.\n# But, the 'Content-Type' HTTP response header doesn't precise any charset,\n# so we decode explicitly the bytes.\nGET https://example.org/cn\nHTTP 200\n[Captures]\nmy_body: bytes decode \"gb2312\"\n```\n\n----------------------------------------\n\nTITLE: Hurl File with Options Section\nDESCRIPTION: This example demonstrates how to define options within a Hurl file using the `[Options]` section.  The `location: true` option enables redirection following only for the second GET request. The first request will not follow redirection. The file shows different behavior defined for separate requests within the same Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_62\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 301\n\nGET https://example.org\n[Options]\nlocation: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing Response Headers with Explicit Asserts in Hurl\nDESCRIPTION: This snippet demonstrates testing response headers using explicit asserts. The `header` keyword with the `contains` predicate is used to check if the `Location` header contains a specific substring.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_35\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables for Templating Body Example (Shell)\nDESCRIPTION: Provides the shell command to execute the Hurl file demonstrating body templating, injecting the necessary variables (`a_string`, `a_bool`, `a_null`, `a_number`) via command line `--variable` options.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_219\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple --variable a_bool=true --variable a_null=null --variable a_number=42 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report\nDESCRIPTION: This shell command generates a JUnit XML report from Hurl test execution. This allows integration with CI/CD systems that support JUnit reports. The wildcard '*.hurl' specifies the files to test, and the output report is saved to build/report.xml.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-junit build/report.xml *.hurl\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing GitLab CI/CD Pipeline Configuration with Shell\nDESCRIPTION: This shell snippet illustrates adding the '.gitlab-ci.yml' file to Git staging, committing it with an appropriate message, and pushing to the configured GitLab remote repository. This action triggers GitLab to run the defined CI pipeline on subsequent commits. It requires Git access to the GitLab remote repository and an active GitLab CI environment.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .gitlab-ci.yml\n$ git commit -m \"Add GitLab CI/CD pipeline.\"\n[main 11c4e7e] Add GitLab CI/CD pipeline.\n 1 file changed, 13 insertions(+)\n create mode 100644 .gitlab-ci.yml\n$ git push\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\n...\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Tests with Variables (Shell)\nDESCRIPTION: Shows how to execute Hurl tests using the `--variable` command-line option to pass the value for `{{host}}`. The `--test` flag runs all specified `.hurl` files (using a wildcard `*`) in parallel test mode, reporting success or failure for each file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable host=http://localhost:3000 --test basic.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable host=http://localhost:3000 --test *.hurl\n [1mlogin.hurl [0m:  [1;32mSuccess [0m (3 request(s) in 33 ms)\n [1mbasic.hurl [0m:  [1;32mSuccess [0m (4 request(s) in 34 ms)\n [1msignup.hurl [0m:  [1;32mSuccess [0m (8 request(s) in 53 ms)\n--------------------------------------------------------------------------------\nExecuted files:    3\nExecuted requests: 15 (283.0/s)\nSucceeded files:   3 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          53 ms\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report in Hurl\nDESCRIPTION: The `--report-html <DIR>` option generates an HTML report in the specified directory. If the report already exists, it is updated with the latest test results. This option is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_34\n\nLANGUAGE: Bash\nCODE:\n```\n--report-html <DIR>\n```\n\n----------------------------------------\n\nTITLE: Explicit Assert File for Body\nDESCRIPTION: This snippet shows how to assert the response body using an explicit file. It checks if the response body matches the content of a specified JSON file. It's used to ensure a specific expected output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_36\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nbody == file,cat.json;\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Lexical Rule: null\nDESCRIPTION: Defines the 'null' lexical rule in the Hurl grammar. It represents the literal 'null' and is used by rules like 'variable-value', 'predicate-value', and 'json-value'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_93\n\nLANGUAGE: Grammar\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Status Code Check\nDESCRIPTION: This snippet demonstrates how to check the HTTP status code in a response.  The example asserts that the status code should be 200 (OK).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_26\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactive Mode in Hurl\nDESCRIPTION: Pauses Hurl execution between requests, allowing the user to continue (Press C) or quit (Press Q). Acts like a breakpoint for multi-request Hurl files. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\n--interactive\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report with Hurl CLI\nDESCRIPTION: Output a Test Anything Protocol (TAP) format report for the Hurl execution. If the specified report file already exists, it will be updated with the new test results. This option is available only through the command-line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_22\n\nLANGUAGE: cli\nCODE:\n```\n--report-tap <FILE>\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets Dynamically\nDESCRIPTION: This shows how to redact dynamic secrets during the capturing phase using the `redact` keyword.  It captures an authorization token from the response header and redacts it before subsequent use.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_55\n\nLANGUAGE: hurl\nCODE:\n```\n# Get an authorization token:\nGET https://example.org/token\nHTTP 200\n[Captures]\ntoken: header \"X-Token\" redact\n\n# Send an authorized request:\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report\nDESCRIPTION: This snippet shows how to generate a JSON report of the Hurl tests. The `--test` flag runs the tests and `--report-json` option generates the JSON report. The output will be in the specified directory. This is for debugging and for automation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --test --report-json build/report/ *.hurl\n```\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables\nDESCRIPTION: This snippet shows how to send a GraphQL query with variables in a POST request.  It includes a `query` and a `variables` section to pass variables to the GraphQL endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_23\n\nLANGUAGE: hurl\nCODE:\n```\n~~~hurl\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n~~~\n```\n\n----------------------------------------\n\nTITLE: Redacting Dynamic Secrets in Hurl\nDESCRIPTION: Example of capturing and redacting dynamic secret values in Hurl. First captures a token from a response header, then uses it in a subsequent request with automatic redaction.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_64\n\nLANGUAGE: hurl\nCODE:\n```\n# Get an authorization token:\nGET https://example.org/token\nHTTP 200\n[Captures]\ntoken: header \"X-Token\" redact\n\n# Send an authorized request:\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining filename-text Grammar Rule\nDESCRIPTION: Defines the permissible characters for standard filename text within Hurl grammar. This rule matches one or more characters that are *not* among the set {# ; { } \\n \\\\ \\]}. It is used by the `filename-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_225\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n~[#;{} \n\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Templating a XML Body (Unsupported)\nDESCRIPTION: This snippet mentions that XML body templating is not supported. However, it suggests using the [XML multiline string body] with variables to achieve the same result.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_21\n\nLANGUAGE: hurl\nCODE:\n```\n~~~hurl\nPOST https://example.org/echo/post/xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Request>\n    <Login>{{login}}</Login>\n    <Password>{{password}}</Password>\n</Request>\n```\n~~~\n```\n\n----------------------------------------\n\nTITLE: Using SOAP APIs with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to send a SOAP request. It specifies the `Content-Type` and `SOAPAction` headers, and includes the SOAP XML payload within the request body. It requires a service that supports SOAP requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_68\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body\nDESCRIPTION: This demonstrates how to include an HTTP request body in a Hurl file, which is the last optional part of a request. The request body is usually used with POST, PUT, or PATCH methods to send data to the server. The body has no explicit marker and can be a JSON object as shown in the example or a simple text string.  The data format is determined by the `Content-Type` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_128\n\nLANGUAGE: hurl\nCODE:\n```\n{<br>\n            &nbsp;&nbsp;\"type\": \"FOO\",<br>\n            &nbsp;&nbsp;\"value\": 356789,<br>\n            &nbsp;&nbsp;\"ordered\": true,<br>\n            &nbsp;&nbsp;\"index\": 10<br>\n            }\n```\n\n----------------------------------------\n\nTITLE: Running and Testing Hurl Files from Shell\nDESCRIPTION: Shell commands to execute Hurl files and process the output, demonstrating how to run tests and pipe results to other tools like jq.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test basic.hurl\n[1mbasic.hurl[0m: [1;32mSuccess[0m (2 request(s) in 21 ms)\n--------------------------------------------------------------------------------\nExecuted files:    1\nExecuted requests: 2 (90.9/s)\nSucceeded files:   1 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          22 ms\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ echo 'GET http://localhost:3000/api/health' | hurl\n{\"status\":\"RUNNING\",\"healthy\":true,\"operationId\":6212054377712155,\"reportedDate\":\"2023-07-21T16:11:24.053Z\"}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ echo 'GET http://localhost:3000/api/health' | hurl | jq\n[1m{\n  [0m[1;34m\"status\"[0m[1m: [0m[32m\"RUNNING\"[0m[1m,\n  [0m[1;34m\"healthy\"[0m[1m: [0m[34mtrue[0m[1m,\n  [0m[1;34m\"operationId\"[0m[1m: [0m[34m8629192252836205[0m[1m,\n  [0m[1;34m\"reportedDate\"[0m[1m: [0m[32m\"2023-08-04T11:04:52.516Z\"[0m[1m\n[1m}[0m\n```\n\n----------------------------------------\n\nTITLE: Testing a GraphQL query with Hurl\nDESCRIPTION: Executes a GraphQL POST request querying a human object by ID and retrieving name and height in feet, demonstrating nested JSON request syntax within Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n~~~hurl\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Decoding URLs with urlDecode Filter in Hurl (Hurl)\nDESCRIPTION: Applies urlDecode to replace percent-encoded sequences in strings extracted from a JSON response with their character equivalents. Useful for verifying decoded URLs. Inputs are percent-encoded URLs; outputs are decoded URLs. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_24\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.encoded_url\" urlDecode == \"https://mozilla.org/?x=шеллы\"\n```\n\n----------------------------------------\n\nTITLE: Simple GET and HEAD Requests, with Chaining - Hurl\nDESCRIPTION: Demonstrates simple GET and HEAD requests with sequential execution (chained requests) in a Hurl file, showing versatility for REST API workflows or data scraping. Inputs: multiple endpoints. Outputs: sequential HTTP request responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/a\nGET https://example.org/b\nHEAD https://example.org/c\nGET https://example.org/c\n```\n\n----------------------------------------\n\nTITLE: Using --verbose for detailed HTTP request and response debugging in shell\nDESCRIPTION: Demonstrates running Hurl with the --verbose flag to display detailed debugging information for each request, including request headers, response headers, and timing details. Useful for tracking request flows and server responses without displaying the body contents.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --verbose --no-output basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request with Headers and Basic Authentication - Hurl\nDESCRIPTION: This Hurl example illustrates composing an HTTP GET request with custom headers, content type, and HTTP Basic Authentication using the [BasicAuth] section. Required dependencies: Hurl CLI; endpoint must be accessible. Inputs: endpoint URL, headers, auth credentials; outputs: result of the authenticated request. Limitation: basic auth credentials are shown in plain text.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_121\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs?id=4567\nUser-Agent: My User Agent\nContent-Type: application/json\n[BasicAuth]\nalice: secret\n```\n\n----------------------------------------\n\nTITLE: Defining the assert Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for asserting conditions on the HTTP response. It starts optionally with line terminators (lt*), followed by a query to select a value, optional filters (preceded by sp), a predicate defining the condition (preceded by sp), and a final line terminator (lt). This rule is used in the asserts-section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_6\n\nLANGUAGE: grammar\nCODE:\n```\nlt*\\nquery (sp filter)* sp predicate lt\n```\n\n----------------------------------------\n\nTITLE: XPath Evaluation in Hurl\nDESCRIPTION: Evaluates an XPath expression after decoding response bytes with specified charset, extracting data from HTML or XML content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_196\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello_gb2312\nHTTP 200\n[Asserts]\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl with Error Output\nDESCRIPTION: This command runs a Hurl file and displays information on failed assertions with error messages. The output includes the actual and expected values of the assertion.  This command is useful for test debugging.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query Request Body in Hurl\nDESCRIPTION: Shows how to send a GraphQL query using Hurl's multiline string syntax with the `graphql` language identifier (```graphql ... ```). This format clearly defines the query structure. The appropriate `Content-Type` header (often `application/json`) should typically be set if the server expects the query within a JSON payload.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_113\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data with Multiline Body in Hurl\nDESCRIPTION: This snippet shows how to send multipart form data using a multiline string body. The Content-Type header is set to `multipart/form-data`, and the boundary is defined. The form data is then included directly in the body of the Hurl file. Files must be inlined.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_21\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Validating response bytes checksum in Hurl\nDESCRIPTION: Fetches a gzipped data file and asserts its SHA256 hash matches the provided hex checksum, useful for verifying data integrity.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Testing Bytes Content with SHA-256 in Hurl\nDESCRIPTION: This snippet demonstrates how to check the SHA-256 hash of a response body in Hurl. It downloads a file and verifies its integrity by comparing the calculated hash with the expected value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_33\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Counting Items in a Collection with Hurl\nDESCRIPTION: Counts items within a JSON collection (e.g., array of books) and verifies the count via jsonpath assertion. Useful for validating list sizes in API responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_178\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data with Multiline Body\nDESCRIPTION: This snippet describes how to send multipart form data using a multiline body in a Hurl file, which requires the file content to be inlined within the Hurl file. It uses a `Content-Type` header with a boundary and defines fields and files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_47\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting a JSON Response Body\nDESCRIPTION: This snippet demonstrates asserting a JSON response body.  The expected JSON structure is included directly in the Hurl file. This is designed to be concise for simple bodies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables via Environment Variables\nDESCRIPTION: This shell snippet shows how to inject variables into a Hurl test run by defining them as environment variables. Hurl automatically reads environment variables prefixed with `HURL_`. For example, `HURL_host=example.net` injects a variable named `host`. This method is useful for CI/CD pipelines or system-level configuration.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ export HURL_host=example.net\n$ export HURL_id=1234 \n$ hurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Running Hurl with Output Redirection (Shell)\nDESCRIPTION: Executes Hurl using an input file (`input.hurl`) and redirects the default standard output (which is usually the response body of the last request) to a specified file named `output`. This is useful for saving response data to a file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -o output input.hurl\n```\n\n----------------------------------------\n\nTITLE: Performance Testing with Hurl\nDESCRIPTION: This snippet demonstrates how to test the performance of an HTTP endpoint using Hurl. It sends a GET request and asserts that the response time (duration) is less than 1000 milliseconds.  This assertion helps ensure the endpoint meets performance requirements.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/v1/pets\nHTTP 200\n[Asserts]\nduration < 1000  # Duration in ms\n```\n\n----------------------------------------\n\nTITLE: Testing Hurl on Directories\nDESCRIPTION: This snippet explains how to run Hurl on a directory, searching for `.hurl` files recursively. This is useful for testing multiple files at once, such as an integration test suite.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test integration/*.hurl\n$ hurl --test .\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Test Report with Hurl\nDESCRIPTION: Command to run tests and generate an HTML report for all Hurl files in the current directory. The report will be created in the build/report/ directory.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-html build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Enhanced Hurl Test with Status Code Validation\nDESCRIPTION: Improved Hurl file that tests both the endpoint and verifies a successful HTTP 200 response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:3000\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Applying Entry-Specific Hurl Options (Hurl)\nDESCRIPTION: Illustrates defining an option (`location: true`) specifically for the second request within a Hurl file using the `[Options]` section. This contrasts with applying options globally via the command line, enabling fine-grained control over request behavior, such as following redirects only for certain entries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 301\n\nGET https://example.org\n[Options]\nlocation: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Hurl Tests\nDESCRIPTION: Example of using environment variables with the HURL_ prefix to inject data into Hurl tests. Shows how to set date-related environment variables that will be available in the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\n$ export HURL_today=$(date '+%y%m%d')\n$ export HURL_tomorrow=$(date '+%y%m%d' -d\"+1days\")\n$ hurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report with Hurl CLI\nDESCRIPTION: Generates a Test Anything Protocol (TAP) report to the specified `<FILE>` using the `--report-tap` option. If the file exists, it will be updated with new test results. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_99\n\nLANGUAGE: shell\nCODE:\n```\n--report-tap <FILE>\n```\n\n----------------------------------------\n\nTITLE: Generate Cargo Checksum JSON for Debian Packaging (Bash)\nDESCRIPTION: Packages Hurl into a crate, computes its sha256 checksum, and creates a JSON file with the checksum to verify integrity as part of Debian packaging process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncargo package --package hurl\nsum=$(sha256sum target/package/hurl-\"${hurl_version}\".crate | cut -d' ' -f1 | tr -d ' ')\necho \"{\\\"package\\\": \\\"${sum}\\\",\\\"files\\\": {}}\" > debian/cargo-checksum.json\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain via rustup\nDESCRIPTION: Downloads and executes the rustup installer script to install the Rust programming language toolchain (compiler rustc, package manager cargo, etc.), sources the environment variables to make Rust available in the current shell, and verifies the installation by checking the versions of rustc and cargo. Requires curl and sh.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_121\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh -s -- -y\n$ source $HOME/.cargo/env\n$ rustc --version\n$ cargo --version\n```\n\n----------------------------------------\n\nTITLE: Attempting HTTP/3 Usage in Hurl\nDESCRIPTION: Instructs Hurl to attempt using HTTP/3 for the connection. If the HTTP/3 connection fails, it falls back to earlier HTTP versions. This option is only available for HTTPS URLs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n--http3\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body (File)\nDESCRIPTION: This snippet demonstrates how to send a JSON body from a local file in a POST request. It sets the `Content-Type` header to `application/json` and uses the `file,data.json;` directive to load the JSON data from a file named `data.json`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_18\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\nContent-Type: application/json\nfile,data.json;\n```\n\n----------------------------------------\n\nTITLE: Request With Query Parameters in URL\nDESCRIPTION: This snippet shows a GET request where query parameters are already present in the URL.  The URL already contains query parameters. Hurl allows for a request with query parameters both in the URL and the `[QueryStringParams]` section. If parameters are present in both, they will be combined in the resulting request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_132\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with URL containing query parameters.\nGET https://example.org/forum/questions/?search=Install%20Linux&order=newest\n```\n\n----------------------------------------\n\nTITLE: Capturing Values from Response - Hurl\nDESCRIPTION: This example shows how to capture a CSRF token from the HTML body of a GET request and then use it in a subsequent POST request. The captured value is stored in the `csrf_token` variable. This allows for passing data between requests, useful for handling CSRF tokens or other dynamic values. XPath expression is used to extract the content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_145\n\nLANGUAGE: hurl\nCODE:\n```\n# An example to show how to pass a CSRF token\n# from one request to another:\n\n# First GET request to get CSRF token value:\nGET https://example.org\nHTTP 200\n# Capture the CSRF token value from html body.\n[Captures]\ncsrf_token: xpath \"normalize-space(//meta[@name='_csrf_token']/@content)\"\n\n# Do the login !\nPOST https://acmecorp.net/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables via Environment Variables for Hurl - Shell\nDESCRIPTION: This snippet uses environment variables beginning with 'HURL_' to inject data into Hurl files. It sets shell variables and exports them so they are accessible by the Hurl process. Dependencies: Unix shell and Hurl CLI. Inputs: variable export commands; outputs: dynamically set variables in executed Hurl tests. Limitation: only variables with the 'HURL_' prefix are automatically injected.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_104\n\nLANGUAGE: Shell\nCODE:\n```\n$ export HURL_today=$(date '+%y%m%d')\n$ export HURL_tomorrow=$(date '+%y%m%d' -d\"+1days\")\n$ hurl test.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Templating a GraphQL Query with Hurl Variables\nDESCRIPTION: Illustrates embedding Hurl variables (e.g., `{{human_id}}`) within a GraphQL query defined using the multiline string `graphql` syntax. This allows dynamic query generation based on Hurl variables defined elsewhere or passed via command-line arguments.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_115\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"{{human_id}}\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Saving Response Output\nDESCRIPTION: This snippet demonstrates how to save a particular response's output using the `[Options]` section in a Hurl file.  The example shows saving the output to a file or printing it to standard output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.ord/cats/123\n[Options]\noutput: cat123.txt    # use - to output to stdout\nHTTP 200\n\nGET https://example.ord/dogs/567\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Characters with htmlEscape Filter in Hurl (Hurl)\nDESCRIPTION: Uses the htmlEscape filter to replace special characters (&, <, >) in a value extracted via jsonpath with their HTML-safe equivalents, protecting against HTML injection. Inputs are strings with special characters; outputs are HTML-escaped strings. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.text\" htmlEscape == \"a &gt; b\"\n```\n\n----------------------------------------\n\nTITLE: Checking Linked Libraries (Linux) - Shell\nDESCRIPTION: Uses the Linux specific `ldd` command to inspect the dynamic libraries that the Hurl executable is linked against. It finds the Hurl binary path using `which hurl` and then lists its shared library dependencies, showing the path to the `libcurl.so.4` file being used. This is helpful for verifying dependencies on Linux systems.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ which hurl\n/root/.cargo/bin/hurl\n$ ldd /root/.cargo/bin/hurl\nldd /root/.cargo/bin/hurl\n\tlinux-vdso.so.1 (0x0000ffff8656a000)\n\tlibxml2.so.2 => /usr/lib/aarch64-linux-gnu/libxml2.so.2 (0x0000ffff85fe8000)\n\tlibcurl.so.4 => /usr/lib/aarch64-linux-gnu/libcurl.so.4 (0x0000ffff85f45000)\n\tlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000ffff85f21000)\n\t...\n\tlibkeyutils.so.1 => /lib/aarch64-linux-gnu/libkeyutils.so.1 (0x0000ffff82ed5000)\n\tlibffi.so.7 => /usr/lib/aarch64-linux-gnu/libffi.so.7 (0x0000ffff82ebc000)\n```\n\n----------------------------------------\n\nTITLE: Defining the key-value Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for a key-value pair, consisting of a key-string followed by a colon and a value-string. This rule is used in Hurl sections like headers, query parameters, form parameters, cookies, basic authentication, and multipart form data parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_0\n\nLANGUAGE: grammar\nCODE:\n```\nkey-string : value-string\n```\n\n----------------------------------------\n\nTITLE: Outputting Hurl Results as JSON\nDESCRIPTION: Formats the output for each Hurl file execution as a JSON object, closely resembling the HAR (HTTP Archive) format. This is useful for programmatic processing of results. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on Debian/Ubuntu (Source)\nDESCRIPTION: Installs necessary development packages (build-essential, pkg-config, libssl-dev, libcurl4-openssl-dev, libxml2-dev) required to build Hurl from source code on Debian-based Linux distributions using apt.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_115\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev\n```\n\n----------------------------------------\n\nTITLE: Asserting One Line String Body\nDESCRIPTION: This Hurl snippet demonstrates the assertion of a single line string response body. The content within the backticks is expected to match the response body exactly, making it useful for plain text responses. This tests that the response content exactly matches the given one-line string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_54\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Hurl Test with Invalid Status Code\nDESCRIPTION: Hurl file that intentionally tests for an incorrect status code to demonstrate error handling.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:3000\nHTTP 500\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl from binary on Linux\nDESCRIPTION: Downloads and installs Hurl binary on Linux. It sets up the path to execute Hurl. Requires curl and tar utilities.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ INSTALL_DIR=/tmp\n$ VERSION=6.1.1\n$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR\n$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: XPath Predicate String Comparison\nDESCRIPTION: Demonstrates the usage of string comparison within XPath predicates in Hurl. When an XPath query returns a string, the predicate value must also be a string for accurate comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_17\n\nLANGUAGE: hurl\nCODE:\n```\nxpath \"string(//article/@data-visible)\" == \"true\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data in Hurl\nDESCRIPTION: This snippet demonstrates how to send multipart form data in a Hurl request using the `[Multipart]` section. It includes both regular fields and file uploads, allowing you to specify the file content type.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_20\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in Hurl\nDESCRIPTION: This snippet demonstrates how to set custom HTTP headers in a Hurl request.  The User-Agent, Accept, Accept-Language, Accept-Encoding, and Connection headers are defined with their respective values.  This allows for simulating requests from different clients or browsers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 \nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data with [Multipart] Section in Hurl\nDESCRIPTION: Shows how to send multipart/form-data using the '[Multipart]' section. This allows sending key-value pairs and file uploads. The example includes a regular field ('field1') and specifies a file field ('field2') referencing 'example.txt' to be uploaded.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters and JSONPath Assertions in Hurl\nDESCRIPTION: A Hurl example demonstrating how to test a search API with query parameters, using JSONPath assertions to validate the returned JSON data structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n# Check search API:\nGET http://localhost:3000/api/search?q=1982&sort=name\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$\" count == 5\njsonpath \"$[0].name\" == \"Blade Runner\"\njsonpath \"$[0].director\" == \"Ridley Scott\"\njsonpath \"$[0].release_date\" == \"1982-06-25\"\n```\n\n----------------------------------------\n\nTITLE: Response Assertions Example in Hurl\nDESCRIPTION: This snippet shows how to define assertions in Hurl to check the HTTP response.  It includes assertions using XPath, checking for both text content and the number of elements in the response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_122\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT\n[Asserts]\nxpath \"normalize-space(//head/title)\" startsWith \"Welcome\"\nxpath \"//li\" count == 18\n```\n\n----------------------------------------\n\nTITLE: Response Testing Patterns in Hurl\nDESCRIPTION: Shows basic patterns for validating responses, from simple status code checks to more complex assertions on response body content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_42\n\nLANGUAGE: hurl\nCODE:\n```\n# A request with (almost) no check:\nGET https://foo.com\n\n# A status code check:\nGET https://foo.com\nHTTP 200\n\n# A test on response body\nGET https://foo.com\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"running\"\n```\n\n----------------------------------------\n\nTITLE: Request with Form Parameters vs. Body Section\nDESCRIPTION: This compares two ways of sending form data: using the `[FormParams]` section and using a string body.  The example shows the equivalent POST requests. When both `[body]` and `[FormParams]` sections are present, only the body section is taken into account.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_138\n\nLANGUAGE: hurl\nCODE:\n```\n# Run a POST request with form parameters section:\nPOST https://example.org/test\n[FormParams]\nname: John Doe\nkey1: value1\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Run the same POST request with a body section:\nPOST https://example.org/test\nContent-Type: application/x-www-form-urlencoded\n`name=John%20Doe&key1=value1`\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Test Mode\nDESCRIPTION: This snippet demonstrates the usage of the `--test` option with Hurl, which changes the output format to a test-oriented view. This allows for verifying the output, status codes and other test related fields.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test sample.hurl\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PUT Request with JSON Data in Hurl\nDESCRIPTION: Example of how to perform a PUT request with JSON data using Hurl's simple syntax. The request sends username and password as JSON to a login endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_74\n\nLANGUAGE: hurl\nCODE:\n```\nPUT http://localhost:3000/api/login\n{\n  \"username\": \"xyz\",\n  \"password\": \"xyz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables via Environment Variables (Shell)\nDESCRIPTION: Illustrates how to inject variables into a Hurl execution (`test.hurl`) by defining them as environment variables prefixed with `HURL_` (e.g., `HURL_host=example.net`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_215\n\nLANGUAGE: shell\nCODE:\n```\n$ export HURL_host=example.net\n$ export HURL_id=1234 \n$ hurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Using Hurl DSL [Options] Section to Set Redirection - Hurl\nDESCRIPTION: This snippet illustrates the use of an `[Options]` section within a Hurl test file to selectively enable the `location` option for only one HTTP request entry. The first request does not follow redirects and returns HTTP 301, while the second request enables redirection and expects HTTP 200. Inputs include HTTP method lines, URL, response status assertions, and the inline `[Options]` section specifying `location: true`. Outputs verify whether redirection behavior is enabled per entry as configured.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_18\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 301\n\nGET https://example.org\n[Options]\nlocation: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Hurl Tests Using Shell - Shell\nDESCRIPTION: This shell snippet calculates dates using 'date' and sets shell variables for use in Hurl tests via '--variable'. Dependencies: Unix shell, Hurl CLI, and 'date' utility. Inputs: commands to obtain current and future dates. Outputs: environment variables or command-line variables set for injection into Hurl files. Limitations: portable only if 'date' supports the required flags.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_103\n\nLANGUAGE: Shell\nCODE:\n```\n$ TODAY=$(date '+%y%m%d')\n$ TOMORROW=$(date '+%y%m%d' -d\"+1days\")\n$ hurl --variable \"today=$TODAY\" --variable \"tomorrow=$TOMORROW\" test.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Asserting an Oneline String Body\nDESCRIPTION: This snippet asserts a text-based response body that consists of only a single line without newlines. The string is delimited by single backticks (`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Asserting Body with File Content\nDESCRIPTION: This example shows how to verify that the response body matches the content of a file. It sends a GET request and asserts that response body is the same as the data.bin file. It uses the `file,data.bin;` file assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_41\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Body in Hurl\nDESCRIPTION: This snippet demonstrates how to assert a JSON response body using the `hurl` format. It defines a GET request to retrieve data, and then asserts that the response body matches the provided JSON structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_180\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Test Mode with Hurl CLI\nDESCRIPTION: Enable test mode, which suppresses the output of HTTP responses and reports progress for each Hurl file. A summary is displayed upon completion. Files run in parallel by default in this mode unless `--job 1` is used.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_28\n\nLANGUAGE: cli\nCODE:\n```\n--test\n```\n\n----------------------------------------\n\nTITLE: Request With Cookies\nDESCRIPTION: This shows a GET request including a `[Cookies]` section. The example includes theme and sessionToken cookies. The cookies are sent per request and do not interact with a cookie storage or the `Set-Cookie` header behavior. This represents a convenient method to add cookies to each request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_141\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\n[Cookies]\ntheme: light\nsessionToken: abc123\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query in Hurl\nDESCRIPTION: This snippet demonstrates how to send a simple GraphQL query in a Hurl request.  The query is included directly in the body of the request.  The request is sent as a POST request to the GraphQL endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_27\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing Strings with replace in Hurl\nDESCRIPTION: Replaces all occurrences of a substring within a JSONPath value, such as transforming URLs or concatenated data before assertions, facilitating string normalization.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_188\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nurl: jsonpath \"$..url\" replace \"http://\" \"https://\"\n[Asserts]\njsonpath \"$..ips\" replace \", \" \"|\" == \"192.168.2.1|10.0.0.20|10.0.0.10\"\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Files in Parallel\nDESCRIPTION: Executes multiple Hurl input files concurrently using the `--parallel` flag. Each file runs in a separate worker thread. This is the default behavior in `--test` mode. See also `--jobs`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\n--parallel\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Redirections in Hurl (Bash)\nDESCRIPTION: Sets the maximum number of HTTP redirections Hurl is allowed to follow for a request. The default limit is 50. Use -1 to allow unlimited redirections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--max-redirs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Using Regular expressions with JSONPath in Hurl\nDESCRIPTION: Shows how to use regular expressions with JSONPath assertions in two different formats: escaped backslashes in double-quoted strings and JavaScript-like regex literals enclosed by slashes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_34\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\n\n# Predicate value with matches predicate:\njsonpath \"$.date\" matches \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\njsonpath \"$.name\" matches \"Hello [a-zA-Z]+!\"\n\n# Equivalent syntax:\njsonpath \"$.date\" matches /^\\d{4}-\\d{2}-\\d{2}$/\njsonpath \"$.name\" matches /Hello [a-zA-Z]+!/\n```\n\n----------------------------------------\n\nTITLE: Submitting Feedback with Hurl\nDESCRIPTION: This snippet shows how to submit feedback to a server using a POST request with a JSON payload.  It simulates submitting a feedback form and expects an HTTP 200 OK response to indicate successful submission.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://hurl.dev/api/feedback\n{\n  \"name\": \"John Doe\",\n  \"feedback\": \"Hurl is awesome!\"\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Converting Value to Float with toFloat Filter in Hurl (Hurl)\nDESCRIPTION: Transforms data extracted from a JSON response to a floating-point number using toFloat in a Hurl assert. Facilitates numeric comparisons. Inputs are strings or numbers; outputs are floats. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_21\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.pi\" toFloat == 3.14\n```\n\n----------------------------------------\n\nTITLE: Implicit Header Assert\nDESCRIPTION: Hurl example showing how to assert on multiple headers implicitly.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_24\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\nVary: User-Agent\nVary: Content-Type\n```\n\n----------------------------------------\n\nTITLE: Asserting Special Characters in JSON Response with Unicode - Hurl\nDESCRIPTION: This snippet uses Hurl to assert the value of a JSONPath in the HTTP response body, demonstrating both direct and Unicode-escaped character usage for symbol-matching. Dependencies include a JSON response with predictable content. Inputs are HTTP GET request, expected status code, and assertions comparing Unicode characters by both direct inclusion and Unicode escape sequence. Output is assertion success if either matches. Limitation: Assumes the endpoint returns the specified content structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_108\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n# The following assert are equivalent:\n[Asserts]\njsonpath \"$.slideshow.title\" == \"A beautiful ✈!\"\njsonpath \"$.slideshow.title\" == \"A beautiful \\u{2708}!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Options - Hurl\nDESCRIPTION: This code snippet shows how to configure various request options within the `[Options]` section of a Hurl file.  These options include setting AWS SigV4 authentication, custom certificate file, compression, delay, HTTP protocol version, insecure SSL connections, IPv6, location, max redirects, output file, path handling, retry attempts, retry interval, skipping the request, Unix socket usage, basic authentication, proxy settings, variable definitions, and verbosity levels. These options apply to the request where they are defined, except variables, which are defined also for the next entries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_143\n\nLANGUAGE: hurl\nCODE:\n```\n[Options]\naws-sigv4: aws:amz:sts  # generate AWS SigV4 Authorization header\ncacert: /etc/cert.pem   # custom certificate file\ncompressed: true        # request a compressed response\ndelay: 3s               # delay for this request\nhttp3: true             # use HTTP/3 protocol version\ninsecure: true          # allow insecure SSL connections and transfers\nipv6: true              # use IPv6 addresses\nlocation: true          # follow redirection for this request\nmax-redirs: 10               # maximum number of redirections\noutput: out.html        # dump the response to this file\npath-as-is: true        # do not handle sequences of /../ or /./ in URL path\nretry: 10               # number of retry if HTTP/asserts errors\nretry-interval: 500ms   # interval between retry\nskip: false             # skip this request\nunix-socket: sock       # use Unix socket for transfer\nuser: bob:secret        # use basic authentication\nproxy: my.proxy:8012    # define proxy (host:port where host can be an IP address)\nvariable: country=Italy # define variable country\nvariable: planet=Earth  # define variable planet\nverbose: true           # allow verbose output\nvery-verbose: true      # allow more verbose output\n```\n\n----------------------------------------\n\nTITLE: Retries for Polling - Hurl\nDESCRIPTION: This example demonstrates polling for a job status. It creates a new job using POST, captures the job ID, and then repeatedly GETs the job status until it reaches a completed state, retrying based on the `retry` and `retry-interval` options.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_9\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST http://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET http://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 300ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Defining a JSONPath Query in Hurl\nDESCRIPTION: Defines the grammar rule for querying using JSONPath expressions against the response body. The rule specifies that a JSONPath query starts with the literal 'jsonpath', a space, and a quoted string containing the JSONPath expression. It allows to extract and validate data from JSON responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_19\n\nLANGUAGE: Hurl\nCODE:\n```\njsonpath&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#quoted-string\">quoted-string</a>\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response with General Header Assertions in Hurl\nDESCRIPTION: This snippet demonstrates asserting HTTP headers. The assertions are used to validate the presence and value of specific headers in the response, using the `header` keyword followed by the header name, a predicate, and a value. The example checks for `Content-Type`, `Last-Modified`, and other headers like count and if it includes a specific value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_163\n\nLANGUAGE: hurl\nCODE:\n```\n# A really well tested web page...\nGET https://example.org/home\nHTTP 200\n[Asserts]\nheader \"Content-Type\" contains \"text/html\"\nheader \"Last-Modified\" == \"Wed, 21 Oct 2015 07:28:00 GMT\"\nxpath \"//h1\" exists  # Check we've at least one h1\nxpath \"normalize-space(//h1)\" contains \"Welcome\"\nxpath \"//h2\" count == 13\nxpath \"string(//article/@data-id)\" startsWith \"electric\"\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Performance with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to test the performance of an endpoint by asserting the response duration.  The `duration < 1000` assertion verifies that the response time is less than one second (1000 milliseconds).  Requires a working network connection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_67\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/helloworld\nHTTP *\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Passing Data Between Requests Using Captures\nDESCRIPTION: This snippet demonstrates capturing data from a response (using the `[Captures]` section) and using it in a subsequent request. This shows how to extract data from the previous response and use it to build a second request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_44\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sample.org/orders\nHTTP 201\n[Captures]\norder_id: jsonpath \"$.order.id\"\n\nGET https://sample.org/orders/{{order_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Bytes Content - Hurl\nDESCRIPTION: This snippet illustrates how to assert the raw bytes of the HTTP response body. It uses the `bytes` keyword with predicates like `startsWith`, `count`, and can check against hexadecimal representations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_171\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\nbytes count == 12424\nheader \"Content-Length\" == \"12424\"\n```\n\n----------------------------------------\n\nTITLE: Running Hurl with Stdin Input (Shell)\nDESCRIPTION: Demonstrates how to pipe a simple Hurl request string directly to the `hurl` command via standard input. Hurl reads the request from stdin, executes it, and outputs the response body to standard output, as shown with the example JSON response from httpbin.org.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ echo GET http://httpbin.org/get | hurl\n    {\n      \"args\": {},\n      \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip\",\n        \"Content-Length\": \"0\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"hurl/0.99.10\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5eedf4c7-520814d64e2f9249ea44e0\"\n      },\n      \"origin\": \"1.2.3.4\",\n      \"url\": \"http://httpbin.org/get\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Filter: Format\nDESCRIPTION: This snippet demonstrates using the `format` filter to format a date string extracted from a cookie. The filter converts the date string from a cookie into a specific format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_193\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncookie \"LSID[Expires]\" format \"%a, %d %b %Y %H:%M:%S\" == \"Wed, 13 Jan 2021 22:23:01\"\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Performance\nDESCRIPTION: This snippet shows an example of testing endpoint performance by checking the response time using the `duration` assert. This verifies that response times are within an acceptable range.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_51\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/helloworld\nHTTP *\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Defining a Cookie Query in Hurl\nDESCRIPTION: Defines a grammar rule for querying cookies from an HTTP response. This rule specifies that a cookie query consists of the literal 'cookie', a space, and then a quoted string representing the cookie value. This allows the user to assert the presence or the value of a specific cookie.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_16\n\nLANGUAGE: Hurl\nCODE:\n```\ncookie&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#quoted-string\">quoted-string</a>\n```\n\n----------------------------------------\n\nTITLE: Testing Redirects - Hurl\nDESCRIPTION: This Hurl snippet tests the redirection process explicitly. It demonstrates testing for HTTP status codes and the 'Location' header to verify redirection is working as expected.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\n# First entry, test the redirection (status code and 'Location' header)\nGET https://google.fr\nHTTP 301\nLocation: https://www.google.fr/\n\n# Second entry, the 200 OK response\nGET https://www.google.fr\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining the client-certificate-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'cert' option (client certificate). It consists of the literal 'cert', a colon, a filename-password structure specifying the certificate file and optional password, and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_10\n\nLANGUAGE: grammar\nCODE:\n```\ncert : filename-password lt\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Variables - Bash Shell\nDESCRIPTION: Illustrates how to calculate dynamic values, specifically dates, using shell commands and pass them to a Hurl execution. Shell variables are populated using `date` and then injected into the `hurl` command using the `--variable` flag. This technique allows Hurl tests to use values determined at runtime.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ TODAY=$(date '+%y%m%d')\n$ TOMORROW=$(date '+%y%m%d' -d\"+1days\")\n$ hurl --variable \"today=$TODAY\" --variable \"tomorrow=$TOMORROW\" test.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining the aws-sigv4-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'aws-sigv4' option. It consists of the literal 'aws-sigv4', a colon, a value-string specifying AWS Signature Version 4 parameters, and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_8\n\nLANGUAGE: grammar\nCODE:\n```\naws-sigv4 : value-string lt\n```\n\n----------------------------------------\n\nTITLE: Templating a JSON Request Body with Variables in Hurl\nDESCRIPTION: Demonstrates using Hurl variables (e.g., `{{ lives_count }}`, `{{ name }}`) within a JSON request body for dynamic content generation. The `Content-Type` is automatically set to `application/json`. Variables are enclosed in double curly braces.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_109\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new catty thing with JSON body:\nPOST https://example.org/api/cats\n{\n    \"id\": 42,\n    \"lives\": {{ lives_count }},\n    \"name\": \"{{ name }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl with Verbose Output\nDESCRIPTION: This command executes a Hurl file and displays detailed information about the request and response, including headers, cookies, and the curl command equivalent. The `--verbose` option provides detailed output, which is useful for debugging.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --no-output basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Encoding URLs with urlEncode Filter in Hurl (Hurl)\nDESCRIPTION: Uses urlEncode to percent-encode characters in string data extracted from JSON, following RFC3986. Ensures outputs match expected URL-encoded forms, except for slashes. Inputs are raw URLs or strings; outputs are encoded URLs. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_25\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.url\" urlEncode == \"https%3A//mozilla.org/%3Fx%3D%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data in Hurl\nDESCRIPTION: Demonstrates uploading files using multipart form data, including specifying file content types for different upload fields.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_35\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[Multipart]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body using Local File Content in Hurl\nDESCRIPTION: Illustrates how to assert that the binary content of the HTTP response body exactly matches the content of a local file. The syntax uses `file,` followed by the filename and ends with `;`. File paths are relative to the Hurl file or the directory specified by `--file-root`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_174\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Templating a JSON Body\nDESCRIPTION: This snippet demonstrates the use of templates to dynamically generate a JSON body for a PUT request. It uses variables (e.g., `{{a_string}}`) that can be initialized via the command line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_19\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Execution Flow Using [Options] in Hurl\nDESCRIPTION: Explores the use of 'repeat', 'skip', and 'delay' options inside [Options] to repeat, skip, or delay requests. Needs Hurl parser. The examples show repeating requests multiple times, skipping execution, and inserting delays before requests. Input: various GET requests with different [Options]; output: repeated, skipped, or delayed executions controlled as per settings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_99\n\nLANGUAGE: hurl\nCODE:\n```\n# This request will be played exactly 3 times\nGET https://example.org/foo\n[Options]\nrepeat: 3\nHTTP 200\n\n# This request is skipped\nGET https://example.org/foo\n[Options]\nskip: true\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# A 5 seconds delayed request \nGET https://example.org/foo\n[Options]\ndelay: 5s\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-content\nDESCRIPTION: Defines the content within a 'quoted-string'. It consists of zero or more occurrences of either plain text ('quoted-string-text') or escaped characters ('quoted-string-escaped-char'). This rule forms the building block for the actual characters inside a quoted string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_36\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n(quoted-string-text|quoted-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Using '--location' Option - Shell\nDESCRIPTION: This shell command uses the `--location` option with the hurl command to follow redirects for every entry in the foo.hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Testing File Body in Hurl\nDESCRIPTION: The snippet shows how to assert the entire body of an HTTP response against the content of a file. The assertion is done with the `file` keyword, indicating that the response body should match the content of the specified file (`cat.json`). This is useful for ensuring that an endpoint returns a specific file or document.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_62\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nbody == file,cat.json;\n```\n\n----------------------------------------\n\nTITLE: File Request Body in Hurl\nDESCRIPTION: This snippet illustrates how to use the content of a local file as the request body. The body starts with 'file,' and ends with ';'. Files are relative to the Hurl file's location. The `--file-root` option can specify a root directory for all file nodes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_121\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org\n# Some random comments before body\nfile,data.bin;\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Cookies in Hurl\nDESCRIPTION: This snippet demonstrates how to assert against cookies in an HTTP response. It uses the `cookie` keyword followed by the cookie name, an optional attribute, and a predicate with a value. It also checks the value of the Set-Cookie header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_168\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/cookies/set\nHTTP 200\n\n# Explicit check of Set-Cookie header value. If the attributes are\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report\nDESCRIPTION: This shell command generates an HTML report of the Hurl test results.  It runs tests and produces a human-readable report for analysis and review. The wildcard '*.hurl' specifies the files to test and report on, and output report goes to build/report/ folder.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-html build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting Body from File\nDESCRIPTION: This Hurl snippet demonstrates how to assert a file's content as the response body.  The `file,data.bin;` instruction asserts that the response body matches the content of `data.bin`. The `data.bin` file needs to exist in the same location or a relative path from the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_55\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Defining Query String Parameters\nDESCRIPTION: This snippet showcases how to define query string parameters in a Hurl file.  Query string parameters are key-value pairs appended to the URL after a question mark.  The format uses a section marker `[QueryStringParams]`, followed by individual parameter definitions on separate lines. These sections are unordered.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_124\n\nLANGUAGE: hurl\nCODE:\n```\n[QueryStringParams]\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Plain Text Body\nDESCRIPTION: This snippet provides a way to test plain text response bodies using an implicit method. This is used for multiline strings such as CSV data to match the expected text.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Test Report with Hurl\nDESCRIPTION: Command to run tests and generate a JSON report for all Hurl files in the current directory. The report will be created in the build/report/ directory.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-json build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Test Report with Hurl\nDESCRIPTION: Command to run tests and generate a JUnit XML report for all Hurl files in the current directory. The report will be saved to build/report.xml.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-junit build/report.xml *.hurl\n```\n\n----------------------------------------\n\nTITLE: Testing XPath Predicates with various types\nDESCRIPTION: Explains the different types of predicate available and which types they work on, also states that if a query returns a number, using a matches predicate will cause a runner error.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Setting Maximum Request Time in Hurl (Bash)\nDESCRIPTION: Defines the maximum time in seconds allowed for a single request/response operation (standard timeout). Time units like 's' for seconds or 'ms' for milliseconds can be used (e.g., `20s`, `35000ms`), with no spaces. See also `--connect-timeout`. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-m, --max-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Using Hurl with User Option in Shell\nDESCRIPTION: This snippet demonstrates how to use the `--user` option in the Hurl command-line tool to provide basic authentication credentials.  The username and password are provided as command-line arguments to the `hurl` command.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --user bob:secret login.hurl\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Performance in Hurl\nDESCRIPTION: Example of testing the response time of an endpoint. The assertion checks that the response time is less than 1000 milliseconds.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_59\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/helloworld\nHTTP *\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Multiline String Request Body in Hurl\nDESCRIPTION: Shows how to define a request body containing arbitrary text, potentially spanning multiple lines, using the triple-backtick (```) multiline string syntax without a language identifier. This is suitable for formats like CSV or plain text. Newlines within the block are preserved, and the final newline is included.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_116\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/models\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\"\"\",,4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Making Multiple HTTP GET Requests in Hurl Format\nDESCRIPTION: Defines two HTTP GET requests in Hurl file syntax. No dependencies other than Hurl's syntax are needed. Each line represents a separate HTTP request which will be processed sequentially by hurl. Suitable for simple multi-request scenarios where no value capture is needed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org/endpoint1\nGET http://example.org/endpoint2\n\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Parallel Jobs (Hurl)\nDESCRIPTION: Specify the maximum number of parallel jobs to run when using parallel mode (`--parallel`). Defaults typically to the number of CPU cores. This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\n--jobs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Define valid JSON values - Hurl Grammar\nDESCRIPTION: Defines the possible types that can constitute a valid JSON value within Hurl syntax. A JSON value can be a placeholder, object, array, string, number, boolean (true/false), or null, referencing other grammar rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_65\n\nLANGUAGE: Grammar\nCODE:\n```\nplaceholder | json-object | json-array | json-string | json-number | boolean | null\n```\n\n----------------------------------------\n\nTITLE: Escaping Hash Character in Header Value - Hurl\nDESCRIPTION: This Hurl script demonstrates sending an HTTP header that includes an escaped hash character (#) which otherwise denotes comments. The GET request adds an x-token header whose value contains a literal hash, and asserts the expected HTTP status code. Requires the Hurl CLI. Input includes request URL and header; output is response validation. Limitation: Only valid for endpoints that support the provided path and accept such headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_109\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nx-token: BEEF \\#STEACK # Some comment\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Attempting HTTP/3 Usage (Hurl)\nDESCRIPTION: Tells Hurl to try using HTTP/3 for the request, falling back to earlier versions if the HTTP/3 connection fails. This option is only available for HTTPS URLs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\n--http3\n```\n\n----------------------------------------\n\nTITLE: Escape Sequence Parsing in String Content\nDESCRIPTION: Defines the rule for parsing escape sequences in 'value-string-escaped-char', which includes backslash followed by specific characters or a unicode character, allowing special characters within strings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_46\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"value-string-escaped-char\">value-string-escaped-char</span><span class=\"grammar-usedby\">(used by <a href=\"#value-string-content\">value-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">\\\\</span>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">#</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\n</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\r</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\t</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\u</span>&nbsp;<a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Using curl Options\nDESCRIPTION: This snippet shows how to pass curl options, such as `--resolve` or `--connect-to`, as command-line arguments to Hurl. These options configure the HTTP request, for instance, for overriding DNS resolution. When used in the [Options] section, it configures a specific request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_58\n\nLANGUAGE: hurl\nCODE:\n```\n# using curl Options\n```shell\n$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl\n```\n\nGET http://bar.com\nHTTP 200\n\n\nGET http://foo.com:8000/resolve\n[Options]\nresolve: foo.com:8000:127.0.0.1\nHTTP 200\n`Hello World!`\n```\n\n----------------------------------------\n\nTITLE: Using Captured Body Variable in Hurl JSONPath Assertion\nDESCRIPTION: This Hurl snippet demonstrates capturing the entire response body of the first request into a variable named `index`. This variable, containing the body content, is then used dynamically within a JSONPath expression `$.errors[{{index}}].id` in an assertion for the subsequent request. Note that using the entire body variable directly in a path like this might imply the body is expected to be a simple value itself, or it's a placeholder showing template syntax usage within JSONPath.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_1\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://example.org/api/index\nHTTP 200\n[Captures]\nindex: body\n\nGET https://example.org/api/status\nHTTP 200\n[Asserts]\njsonpath \"$.errors[{{index}}].id\" == \"error\"\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Status Code in Hurl Format\nDESCRIPTION: Makes a GET request and asserts that the response status code is 301. Only the GET is sent and the HTTP 301 assertion is evaluated. Used for basic assertions on HTTP response codes; requires the target endpoint to return the specified status code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n\n```\n\n----------------------------------------\n\nTITLE: Using the --unix-socket Option in Hurl (bash)\nDESCRIPTION: (HTTP Only) Instructs Hurl to connect via a specified Unix domain socket path instead of using a network connection. Requires the path <PATH> to the socket file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_121\n\nLANGUAGE: bash\nCODE:\n```\n--unix-socket <PATH>\n```\n\n----------------------------------------\n\nTITLE: Executing Specific Tests - Hurl Shell\nDESCRIPTION: Provides a shell command to run a subset of Hurl test files. The `--test` flag is used along with a file pattern to target files located in a specific directory (`critical/`). This is a practical example for organizing and running tests in a larger project.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --test critical/*.hurl\n```\n\n----------------------------------------\n\nTITLE: Explicitly Asserting Response Content with XPath in Hurl Format\nDESCRIPTION: Executes a GET request and applies an XPath query assertion on the response body, ensuring the page title matches '301 Moved'. Requires response to contain an XML/HTML structure and XPath support. Provides fine-grained content validation; useful for testing APIs or web pages with predictable output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n[Asserts]\nxpath \"string(//title)\" == \"301 Moved\"\n\n```\n\n----------------------------------------\n\nTITLE: Export GPG Key to Temporary Directory (Bash)\nDESCRIPTION: Creates a directory, sets permissions, retrieves GPG key ID, and exports public and private keys into ASCII format files for further use. Requires GPG installed and configured.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /tmp/gpg\nchmod 777 /tmp/gpg\ngpg_keyid=$(gpg --list-keys | grep -E \"^ \" | tr -d ' ')\ngpg --armor --export \"${gpg_keyid}\" > /tmp/gpg/mypublickey.asc\ngpg --armor --export-secret-keys \"${gpg_keyid}\" > /tmp/gpg/myprivatekey.asc\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-escaped-char\nDESCRIPTION: Defines the rule 'key-string-escaped-char' for handling specific escaped characters within a 'key-string-content'. It matches a backslash followed by certain characters (#, :, \\, \\b, \\f, \\n, \\r, \\t) or a Unicode escape sequence (\\u followed by 'unicode-char').\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_42\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\\ (#|:|\\|\\b|\\f|\\n|\\r|\\t|\\u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Multiline String Parsing with Types and Attributes\nDESCRIPTION: Defines 'multiline-string' with optional type and multiple content or placeholder, enclosed within triple backticks. Supports types like 'base64', 'hex', 'json', 'xml', 'graphql', and attributes such as 'escape' or 'novariable'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_50\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string\">multiline-string</span><span class=\"grammar-usedby\">(used by <a href=\"#predicate-value\">predicate-value</a>,&nbsp;<a href=\"#bytes\">bytes</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">```</span>&nbsp;<a href=\"#multiline-string-type\">multiline-string-type</a><span class=\"grammar-symbol\">?</span>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">,</span>&nbsp;<a href=\"#multiline-string-attribute\">multiline-string-attribute</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>&nbsp;<a href=\"#lt\">lt</a><br>\n<span class=\"grammar-symbol\">(</span><a href=\"#multiline-string-content\">multiline-string-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>&nbsp;<a href=\"#lt\">lt</a><br>\n<span class=\"grammar-literal\">```</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Test Files with Glob Patterns (Shell)\nDESCRIPTION: Demonstrates selecting multiple .hurl files using either positional arguments, a directory, or a glob pattern with the --glob flag for batch testing. Requires Hurl CLI. Parameters include --test and --glob; output is test summary for all matched files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_87\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test test/integration/a.hurl test/integration/b.hurl test/integration/c.hurl \n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test test/integration/*.hurl \n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test test/integration/\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --glob \"test/integration/**/*.hurl\"\n```\n\n----------------------------------------\n\nTITLE: Using --user option for Authentication\nDESCRIPTION: This snippet shows how to use the `-u/--user` command-line option to specify basic authentication credentials. This is useful when you want to authenticate all requests in a Hurl file without repeating the authentication details in each request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --user bob:secret login.hurl\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request\nDESCRIPTION: This Hurl snippet demonstrates a basic GET request to a specified URL. It retrieves data from the given endpoint without any additional headers or parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Responses with XPath in Hurl\nDESCRIPTION: Demonstrates validating HTML content using XPath assertions to check text content, count elements, and verify structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_46\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2  # Check the number of p\nxpath \"//p\" count == 2  # Similar assert for p\nxpath \"boolean(count(//h2))\" == false  # Check there is no h2  \nxpath \"//h2\" not exists  # Similar assert for h2\nxpath \"string(//div[1])\" matches /Hello.*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Polling and Retry Logic in Hurl\nDESCRIPTION: Example of implementing polling for a job status until completion. Creates a job, captures the ID, then polls with retries until the job state is COMPLETED.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_56\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST https://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET https://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 500ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings and Counting Parts with split and count in Hurl (Hurl)\nDESCRIPTION: Uses split to break a string (e.g., IP list) into parts, then counts items with count filter in Hurl assertions. Often used to validate delimited list fields in headers or JSON. Inputs are delimited strings; outputs are counts of split segments. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_19\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.ips\" split \", \" count == 3\n```\n\n----------------------------------------\n\nTITLE: Testing REST API with JSONPath in Hurl\nDESCRIPTION: An extended Hurl file that includes testing a health API endpoint using JSONPath assertions to verify the JSON structure and values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\n# Checking our home page:\n# ...\n\n# Check that we have a 404 response for broken links:\n# ...\n\n# Check our health API:\nGET http://localhost:3000/api/health\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$.status\" == \"RUNNING\"\njsonpath \"$.healthy\" == true\njsonpath \"$.operationId\" exists\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string` rule, starting and ending with triple backticks (```). It can optionally include a `multiline-string-type`, followed by zero or more comma-separated `multiline-string-attribute`s, line terminators (`lt`), the main content (zero or more `multiline-string-content` or `placeholder`), and a final line terminator before the closing triple backticks. Used by `predicate-value` and `bytes`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_217\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-literal\">```</span> <a href=\"#multiline-string-type\">multiline-string-type</a><span class=\"grammar-symbol\">?</span> <span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">,</span> <a href=\"#multiline-string-attribute\">multiline-string-attribute</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span> <a href=\"#lt\">lt</a><br>\n<span class=\"grammar-symbol\">(</span><a href=\"#multiline-string-content\">multiline-string-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span> <a href=\"#lt\">lt</a><br>\n<span class=\"grammar-literal\">```</span>\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report with Hurl\nDESCRIPTION: This shell command demonstrates how to generate a JSON report from Hurl tests.  It uses the `--test` flag to execute the tests and `--report-json` followed by the directory to specify the output location for the JSON report. It requires the Hurl tool to be installed, and `*.hurl` files in the current directory or provided directory as the input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-json build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact JSON Response Body in Hurl (Explicit Multiline)\nDESCRIPTION: Shows the explicit multiline string syntax (using ```json ... ```) for asserting that the HTTP response body exactly matches the provided JSON structure. This is equivalent to the implicit JSON body assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_168\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n```json\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication with Authorization Header in Hurl\nDESCRIPTION: Illustrates the equivalent way to perform Basic Authentication by manually setting the `Authorization` header with the Base64 encoded credentials (e.g., `echo -n 'bob:secret' | base64`). This contrasts with the simpler `[BasicAuth]` section method.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_107\n\nLANGUAGE: hurl\nCODE:\n```\n# Authorization header value can be computed with `echo -n 'bob:secret' | base64`\nGET https://example.org/protected\nAuthorization: Basic Ym9iOnNlY3JldA==\n```\n\n----------------------------------------\n\nTITLE: Capturing JSONPath Query Result from HTTP Response Body with Hurl DSL\nDESCRIPTION: Extracts data using a JSONPath query from the HTTP response body parsed as JSON and stores it in a variable. The syntax requires declaring a variable followed by colon and 'jsonpath' keyword with a quoted JSONPath expression. The selected value is coerced to a string when only a single node is matched. Supports capturing various JSON data types including objects, lists, nulls, numbers, booleans, and strings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_153\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/contact\n[FormParams]\ntoken: {{token}}\nemail: toto@rookie.net\nHTTP 200\n[Captures]\ncontact-id: jsonpath \"$['id']\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/captures-json\nHTTP 200\n[Captures]\nan_object:  jsonpath \"$['an_object']\"\na_list:     jsonpath \"$['a_list']\"\na_null:     jsonpath \"$['a_null']\"\nan_integer: jsonpath \"$['an_integer']\"\na_float:    jsonpath \"$['a_float']\"\na_bool:     jsonpath \"$['a_bool']\"\na_string:   jsonpath \"$['a_string']\"\nall:        jsonpath \"$\"\n```\n\n----------------------------------------\n\nTITLE: Delaying Requests in Hurl\nDESCRIPTION: This snippet demonstrates how to delay a request using the `delay` option.  It showcases delaying a specific request by 5 seconds.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_71\n\nLANGUAGE: hurl\nCODE:\n```\n# Delaying this request by 5 seconds\nGET https://example.org/turtle\n[Options]\ndelay: 5s\nHTTP 200\n\n# No delay!\nGET https://example.org/turtle\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Test\nDESCRIPTION: This snippet shows an example of how to run the Hurl test file from the command line using the hurl tool. The output will indicate the success or failure of the test cases, as well as the execution time and the number of requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test signup.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report (CLI)\nDESCRIPTION: This option generates an HTML report in a specified directory. If the report already exists, it will be updated with the latest test results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_110\n\nLANGUAGE: markdown\nCODE:\n```\n--report-html <DIR>\n```\n\n----------------------------------------\n\nTITLE: Hurl Command-Line Example\nDESCRIPTION: This example demonstrates how to use the `--location` option from the command line when executing a Hurl file. This instructs Hurl to follow redirections for each entry within `foo.hurl`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Set-Cookie Attribute Assertions\nDESCRIPTION: This snippet demonstrates how to assert the attributes of a `Set-Cookie` header. It shows how to check the value, expiration date, and other properties of a cookie.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_33\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\ncookie \"JSESSIONID\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Value]\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"JSESSIONID[Secure]\" exists\ncookie \"JSESSIONID[HttpOnly]\" exists\ncookie \"JSESSIONID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output of Hurl Execution\nDESCRIPTION: Command to execute Hurl files and output the results in JSON format. This provides structured output that can be parsed programmatically.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --json *.hurl\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body (Inline)\nDESCRIPTION: This snippet demonstrates how to send a JSON body in a POST request. It includes the JSON data directly in the Hurl file using curly braces.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_17\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"456\",\n    \"evaluate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using SOAP APIs with Hurl\nDESCRIPTION: Example of making a SOAP API request with XML payload. This demonstrates sending a properly formatted SOAP envelope with namespaces and headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_60\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Response with XPath in Hurl\nDESCRIPTION: This snippet demonstrates how to assert conditions on an HTTP response using XPath expressions in Hurl. It fetches a resource from example.org and asserts that the title starts with \"Welcome\" and that the count of list items is 18.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/response.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT\n[Asserts]\nxpath \"normalize-space(//head/title)\" startsWith \"Welcome\"\nxpath \"//li\" count == 18\n```\n\n----------------------------------------\n\nTITLE: Applying `replace` Filter (Hurl)\nDESCRIPTION: Demonstrates using the `replace` filter in Hurl. It replaces occurrences of an old string with a new string, applicable to captured values or assertion results. The filter takes the old string and the new string as arguments.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_199\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nurl: jsonpath \"$.url\" replace \"http://\" \"https://\"\n[Asserts]\njsonpath \"$.ips\" replace \", \" \"|\" == \"192.168.2.1|10.0.0.20|10.0.0.10\"\n```\n\n----------------------------------------\n\nTITLE: Testing HTML content response with XPath assertion\nDESCRIPTION: Sends a GET request to a webpage and asserts that the normalized page title matches 'Hello world!' using XPath expression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Header Assert with Multiple Headers and Count\nDESCRIPTION: Hurl example showing how to assert on multiple headers with the same name. It uses the `count` and `contains` predicates to verify the number of occurrences and the values within the header list.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_23\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nheader \"Vary\" count == 2\nheader \"Vary\" contains \"User-Agent\"\nheader \"Vary\" contains \"Content-Type\"\n```\n\n----------------------------------------\n\nTITLE: Checking libcurl Dependencies on Linux\nDESCRIPTION: Commands to identify which libcurl library is used by Hurl on Linux. Shows how to locate the Hurl binary and display its shared library dependencies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\n$ which hurl\n/root/.cargo/bin/hurl\n$ ldd /root/.cargo/bin/hurl\nldd /root/.cargo/bin/hurl\n\tlinux-vdso.so.1 (0x0000ffff8656a000)\n\tlibxml2.so.2 => /usr/lib/aarch64-linux-gnu/libxml2.so.2 (0x0000ffff85fe8000)\n\tlibcurl.so.4 => /usr/lib/aarch64-linux-gnu/libcurl.so.4 (0x0000ffff85f45000)\n\tlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000ffff85f21000)\n\t...\n\tlibkeyutils.so.1 => /lib/aarch64-linux-gnu/libkeyutils.so.1 (0x0000ffff82ed5000)\n\tlibffi.so.7 => /usr/lib/aarch64-linux-gnu/libffi.so.7 (0x0000ffff82ebc000)\n```\n\n----------------------------------------\n\nTITLE: Multiline String Text with Escaped Backslashes\nDESCRIPTION: Defines the regex for 'multiline-string-text', matching one or more backslash characters used in multiline string content for escaping.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_54\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string-text\">multiline-string-text</span><span class=\"grammar-usedby\">(used by <a href=\"#multiline-string-content\">multiline-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-regex\">~[\\\\]+</span>&nbsp;<span class=\"grammar-symbol\">~</span><span class=\"grammar-literal\">```</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Testing XML Response Body in Hurl\nDESCRIPTION: Example of testing an XML response body using Hurl's implicit body assertion feature. The request validates the complete structure and content of an XML catalog.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_44\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Get Latest Hurl Release Version - PowerShell\nDESCRIPTION: This snippet retrieves the latest released version of the Hurl package from the GitHub API using a GitHub token for authentication. It uses `Invoke-WebRequest` to fetch the latest release information and then extracts the tag name. The latest version is stored in the `$hurl_latest_version` variable. The result is then echoed to the console.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/chocolatey/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$hurl_latest_version=((Invoke-WebRequest -Headers @{'Authorisation' = '<github token>'} -UseBasicParsing https://api.github.com/repos/Orange-OpenSource/hurl/releases/latest).content | ConvertFrom-Json | Select -exp tag_name)\necho ${hurl_latest_version}\n```\n\n----------------------------------------\n\nTITLE: Define filename password escaped characters - Hurl Grammar\nDESCRIPTION: Specifies the valid escape sequences allowed within the password part of a filename string in Hurl. It includes common escapes, Hurl-specific escapes for characters like '#', ';', '{', '}', space, and notably includes the colon ':', plus the Unicode escape mechanism.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_63\n\nLANGUAGE: Grammar\nCODE:\n```\n\\ (\\ |\\b|\\f|\\n|\\r|\\t|#|;|\\ |\\{|\\}|:|\\ |u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version with Explicit Assertions\nDESCRIPTION: This Hurl snippet demonstrates how to test the HTTP version using explicit assertions within the `[Asserts]` section. It is testing the version using the `version` assert which should be a string and is further evaluated against a floating-point number to assert that the version is greater than 1.1.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_62\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nversion == \"3\"\n\nGET https://bar.com\nHTTP 200\n[Asserts]\nversion == \"2\"\nversion toFloat > 1.1\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Integration Script (Bash)\nDESCRIPTION: The first version of the `bin/integration.sh` script. It uses `set -eu` for robust error handling, prints a status message, and runs a specified Docker image (`ghcr.io/jcamiel/hurl-express-tutorial:latest`) in detached mode (`--detach`), publishing port 3000 (`--publish`), naming the container `movies` (`--name`), and ensuring it's removed on exit (`--rm`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -eu\n\necho \"Starting container\"\ndocker run --name movies --rm --detach --publish 3000:3000 ghcr.io/jcamiel/hurl-express-tutorial:latest\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report with Hurl\nDESCRIPTION: This shell command demonstrates how to generate a JUnit report from Hurl tests.  It uses the `--test` flag to execute the tests and `--report-junit` to specify the output file.  It requires the Hurl tool to be installed, and `*.hurl` files in the current directory or provided directory as the input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-junit build/report.xml *.hurl\n```\n\n----------------------------------------\n\nTITLE: Encoding URL with Special Characters in Hurl\nDESCRIPTION: Percent-encodes URL components except for unreserved characters and forward slash, enabling safe transmission of URLs with special characters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_195\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..url\" urlEncode == \"https%3A//mozilla.org/%3Fx%3D%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Files in Parallel (Bash)\nDESCRIPTION: Executes multiple input Hurl files concurrently, each in its own worker thread without shared state. The default mode is sequential execution. Parallel execution is the default when using `--test` mode. See also `--jobs`. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n--parallel\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report (CLI)\nDESCRIPTION: This option generates a JUnit report to a specified file. If the file already exists, it is updated with the latest test results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_112\n\nLANGUAGE: markdown\nCODE:\n```\n--report-junit <FILE>\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple GET Requests\nDESCRIPTION: This code demonstrates how to chain multiple GET requests within a single Hurl file. It sends successive GET requests to different endpoints. This illustrates Hurl's ability to simulate a series of actions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/a\nGET https://example.org/b\nHEAD https://example.org/c\nGET https://example.org/c\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Protocol Version in Hurl\nDESCRIPTION: Demonstrates using the `version` keyword in Hurl's `[Asserts]` section to check the HTTP protocol version of the response. This example asserts that the version string returned by the `version` query is exactly `\"2\"`. The `HTTP *` indicates acceptance of any initial status code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_149\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP *\n[Asserts]\nversion == \"2\"\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Options - Shell\nDESCRIPTION: This shell command demonstrates the use of `--delay` and `--repeat` command-line options when running a hurl file. The request is delayed by 500ms and repeated 3 times.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --delay 500ms --repeat 3 foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Request Body using Multiline String in Hurl\nDESCRIPTION: Illustrates defining an XML request body using the multiline string syntax with the `xml` language identifier (```xml ... ```). This is equivalent to the direct XML body syntax. If variables are needed within the XML, a plain multiline string without the `xml` identifier and variable syntax (e.g., `{{variable}}`) should be used.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_112\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new soapy thing XML body:\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: 299\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"http://example.net\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\n```\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Status Code with Hurl DSL\nDESCRIPTION: Captures the HTTP status code returned from an HTTP request and stores it in a variable for later use. Requires a variable name followed by a colon and the keyword 'status' inside a [Captures] block. The status code is extracted from the line starting with 'HTTP <STATUS-CODE>'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_146\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\nmy_status: status\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Hurl Files via CLI (Shell)\nDESCRIPTION: Shows running multiple .hurl files at once with Hurl, returning the HTTP body of the last response for each file. Requires Hurl CLI; key parameters are the file list. Outputs concatenated responses; order follows input file list.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl hello.hurl assert_json.hurl\nHello World![\n  { \"id\": 1, \"name\": \"Bob\"},\n  { \"id\": 2, \"name\": \"Bill\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Sequential Hurl Test Output Example - Shell\nDESCRIPTION: Provides sample output of Hurl's synchronous mode, depicting status messages, request/response timing, and progress bars for a set of jobs. Useful for documentation, debugging, and user interface design. No dependencies beyond Hurl-generated output.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n/tmp/foo/bar/baz/job-1.hurl: Running [1/10]\n/tmp/foo/bar/baz/job-1.hurl: Success (10 request(s) in 10096 ms)\n/tmp/foo/bar/job-2.hurl: Running [2/10]\n/tmp/foo/bar/job-2.hurl: Success (2 request(s) in 3019 ms)\n/tmp/foo/bar/zzzzzz/job-3.hurl: Running [3/10]\n [========>               ] 2/3\n```\n\n----------------------------------------\n\nTITLE: Templating XML Body in Hurl\nDESCRIPTION: Demonstrates how to use variables within XML content using multiline string body syntax, as direct XML templating is not supported.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/echo/post/xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Request>\n    <Login>{{login}}</Login>\n    <Password>{{password}}</Password>\n</Request>\n```\n```\n\n----------------------------------------\n\nTITLE: Testing REST API with Hurl\nDESCRIPTION: This snippet demonstrates how Hurl can be used to test a REST API endpoint. It sends a POST request with a JSON payload and then asserts conditions on the response headers and body using JSONPath expressions. The assertions verify the status, count, and format of specific data fields.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$.status\" == \"RUNNING\"    # Check the status code\njsonpath \"$.tests\" count == 25      # Check the number of items\njsonpath \"$.id\" matches /\\d{4}/     # Check the format of the id\n```\n\n----------------------------------------\n\nTITLE: Asserting JSONPath Expressions - Hurl\nDESCRIPTION: This snippet demonstrates how to assert values based on JSONPath expressions applied to the HTTP response body which is expected to be a JSON document. It uses the `jsonpath` keyword for querying and validation of the JSON content. It also shows the use of regular expression matches with the `matches` predicate.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_173\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://httpbin.org/json\nHTTP 200\n[Asserts]\njsonpath \"$.slideshow.author\" == \"Yours Truly\"\njsonpath \"$.slideshow.slides[0].title\" contains \"Wonder\"\njsonpath \"$.slideshow.slides\" count == 2\njsonpath \"$.slideshow.date\" != null\njsonpath \"$.slideshow.slides[*].title\" includes \"Mind Blowing!\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample.org/hello\nHTTP 200\n[Asserts]\n\n# Predicate value with matches predicate:\njsonpath \"$.date\" matches \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\njsonpath \"$.name\" matches \"Hello [a-zA-Z]+!\"\n\n# Equivalent syntax:\njsonpath \"$.date\" matches /^\\d{4}-\\d{2}-\\d{2}$/\njsonpath \"$.name\" matches /Hello [a-zA-Z]+!/\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Status Code Range\nDESCRIPTION: This snippet shows how to assert a response status code within a range using the `status` predicate in the [Asserts] section. This checks if the status is greater than 400 and less than or equal to 500.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/pets\nHTTP *\n# Check that response status code is > 400 and <= 500\n[Asserts]\nstatus > 400\nstatus <= 500\n```\n\n----------------------------------------\n\nTITLE: Using the --user Option in Hurl (bash)\nDESCRIPTION: Adds a Basic Authentication header (Authorization: Basic ...) to every HTTP request made by Hurl. Requires the username and password in the format <USER:PASSWORD>. The short form -u is also available.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_122\n\nLANGUAGE: bash\nCODE:\n```\n-u, --user <USER:PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Hurl\nDESCRIPTION: These snippets show how to implement Basic Authentication in Hurl. One example uses the `[BasicAuth]` section, while the other constructs the `Authorization` header manually. The `[BasicAuth]` is preferred as it is more readable.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_17\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/protected\n[BasicAuth]\nbob: secret\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Authorization header value can be computed with `echo -n 'bob:secret' | base64`\nGET https://example.org/protected\nAuthorization: Basic Ym9iOnNlY3JldA== \n```\n\n----------------------------------------\n\nTITLE: Pulling Hurl Docker Image\nDESCRIPTION: Pulls the latest Hurl Docker image from the GitHub Container Registry (ghcr.io). Requires Docker to be installed and running.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_113\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull ghcr.io/orange-opensource/hurl:latest\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body from File\nDESCRIPTION: This snippet uses the `body == file` assertion to verify that the response body matches the content of a specified file (`cat.json`). It relies on Hurl and assumes a file named `cat.json` exists, the content of which should match the response body.  This tests the exact match of the response body with the contents of the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_51\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\n[Asserts]\nbody == file,cat.json;\n```\n\n----------------------------------------\n\nTITLE: Global Redirect and Assertion via Hurl CLI - Shell\nDESCRIPTION: This shell command runs Hurl with the --location flag so that redirects within the test will be followed automatically, with assertions only performed on the last HTTP response. Required: Hurl CLI, valid input Hurl file (google.hurl). Output is test report as per script and redirect behavior. Adjust path and parameters as necessary.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_115\n\nLANGUAGE: shell\nCODE:\n```\nhurl --location google.hurl\n```\n\n----------------------------------------\n\nTITLE: Specifying Proxy Server\nDESCRIPTION: This option specifies a proxy server to be used for requests. It accepts a protocol (e.g., `http://`) followed by the host and optional port.  The proxy will be used for all requests. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_108\n\nLANGUAGE: markdown\nCODE:\n```\n-x, --proxy <[PROTOCOL://]HOST[:PORT]>\n```\n\n----------------------------------------\n\nTITLE: Capturing and Using CSRF Token\nDESCRIPTION: This Hurl snippet demonstrates how to capture and use a CSRF token.  It first retrieves a CSRF token from the HTML response body, and then includes that token as an HTTP header in a subsequent POST request.  It uses `xpath` to extract the token's content.  Requires a website that uses CSRF tokens.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_69\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\n\n\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Saving HTTP Responses in Test Mode Using output Option (Hurl and Shell)\nDESCRIPTION: Shows usage of the [Options]\\noutput: - section to print the HTTP response body even when running in test mode. Requires Hurl tool; the response will be piped to standard output or a file. Inputs are request definitions with [Options] output; output is the HTTP response body displayed to stdout or saved.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_90\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://foo.com\nHTTP 200\n\nGET https://bar.com\n[Options]\noutput: -\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using .netrc file in Hurl\nDESCRIPTION: The `-n, --netrc` option enables scanning the .netrc file in the user's home directory for username and password authentication. This provides an alternative to manual credentials. See also `--netrc-file` and `--netrc-optional`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_23\n\nLANGUAGE: Bash\nCODE:\n```\n-n, --netrc\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for Templating\nDESCRIPTION: This snippet shows how to initialize variables used in templates via the command line.  It uses the `--variable` option to define the values of variables like `a_string`, `a_bool`, `a_null`, and `a_number`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple \\\n       --variable a_bool=true \\\n       --variable a_null=null \\\n       --variable a_number=42 \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: Running Files in Parallel (CLI)\nDESCRIPTION: This option runs Hurl files in parallel using worker threads. Each file executes independently. This is the default behavior in `--test` mode. It is a CLI-only option. See `--jobs` option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_106\n\nLANGUAGE: markdown\nCODE:\n```\n--parallel\n```\n\n----------------------------------------\n\nTITLE: Using the --variable Option in Hurl (bash)\nDESCRIPTION: Defines a variable as a key-value pair (<NAME=VALUE>) that can be used within Hurl files (e.g., in URLs, headers, request bodies, or assertions). Multiple variables can be defined by repeating the option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_124\n\nLANGUAGE: bash\nCODE:\n```\n--variable <NAME=VALUE>\n```\n\n----------------------------------------\n\nTITLE: Testing Exact JSON Body Match in Hurl\nDESCRIPTION: This snippet provides an example of using an implicit assertion to verify an exact JSON body match.  If the response body matches the expected JSON structure and values exactly, the test will pass. This approach is useful when a precise response is required.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_61\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/cats/123\nHTTP 200\n{\n  \"name\" : \"Purrsloud\",\n  \"species\" : \"Cat\",\n  \"favFoods\" : [\"wet food\", \"dry food\", \"<strong>any</strong> food\"],\n  \"birthYear\" : 2016,\n  \"photo\" : \"https://learnwebcode.github.io/json-example/images/cat-2.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: XPath Assert on HTML Content\nDESCRIPTION: Hurl example illustrating XPath assertions on HTML content. It showcases how to extract and validate data using XPath queries, including checking title content, counting paragraph elements, and verifying the absence of specific elements.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_31\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2                             # Check the number of <p>\nxpath \"//p\" count == 2                              # Similar assert for <p>\nxpath \"boolean(count(//h2))\" == false               # Check there is no <h2>  \nxpath \"//h2\" not exists                             # Similar assert for <h2> \n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Retries with Hurl CLI\nDESCRIPTION: Configure the maximum number of times Hurl will retry an execution if any error occurs. Set to 0 for no retries or -1 for unlimited retries. Retries are triggered by failures in assertions, captures, or runtime issues.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_24\n\nLANGUAGE: cli\nCODE:\n```\n--retry <NUM>\n```\n\n----------------------------------------\n\nTITLE: Comparing [Cookies] Section and Cookie Header in Hurl\nDESCRIPTION: Compares two equivalent methods for sending cookies in Hurl: using the `[Cookies]` section and setting the `Cookie` header directly. Both snippets achieve the same result of sending the specified cookies with the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_105\n\nLANGUAGE: hurl\nCODE:\n```\n# Run a GET request with cookies section:\nGET https://example.org/index.html\n[Cookies]\ntheme: light\nsessionToken: abc123\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Run the same GET request with a header:\nGET https://example.org/index.html\nCookie: theme=light; sessionToken=abc123\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hurl\nDESCRIPTION: This command demonstrates running Hurl in test mode using the `--test` option. This option is used to get a test oriented output for asserting responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurl.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n```\n\n----------------------------------------\n\nTITLE: Running Inline HTTP GET Request Using Echo and Hurl in Shell\nDESCRIPTION: Pipes an inline HTTP GET request to Hurl via standard input. Requires hurl installed and accessible in the shell. The command sends a GET request to httpbin.org and outputs the full JSON HTTP response. It's useful for ad-hoc or dynamically assembled requests without a .hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo GET http://httpbin.org/get | hurl\n    {\n      \"args\": {},\n      \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip\",\n        \"Content-Length\": \"0\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"hurl/0.99.10\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5eedf4c7-520814d64e2f9249ea44e0\"\n      },\n      \"origin\": \"1.2.3.4\",\n      \"url\": \"http://httpbin.org/get\"\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Response Body in Test Mode (Shell)\nDESCRIPTION: Shows running Hurl in test mode while also capturing and printing the full HTTP response body by configuring output to standard output. Requires Hurl CLI. Inputs are test files; output is the HTML content followed by test summary.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test .\n<html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<title>301 Moved</TITLE></head><body>\n<h1>301 Moved</h1>\nThe document has moved\n<a HREF=\"https://www.bar.com/\">here</a>.\n</body></html>\n\u001b[1m/tmp/test.hurl\u001b[0m: \u001b[1;32mSuccess\u001b[0m (2 request(s) in 184 ms)\n--------------------------------------------------------------------------------\nExecuted files:    1\nExecuted requests: 2 (10.7/s)\nSucceeded files:   1 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          187 ms\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Headers with the Same Name (Implicit) in Hurl\nDESCRIPTION: Illustrates the implicit assertion mechanism in Hurl for verifying the presence and values of multiple response headers with the same name (e.g., `Vary`). This method directly lists the expected headers and their values after the `HTTP` status line, outside the `[Asserts]` section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_152\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\nVary: User-Agent\nVary: Content-Type\n```\n\n----------------------------------------\n\nTITLE: Creating a Hurl File with Comments\nDESCRIPTION: Example of a simple Hurl file with comments explaining the requests and assertions. Shows how to use comments to document HTTP workflows within Hurl files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_87\n\nLANGUAGE: hurl\nCODE:\n```\n# A very simple Hurl file\n# with tasty comments...\nGET https://www.sample.net\nx-app: MY_APP  # Add a dummy header\nHTTP 302       # Check that we have a redirection\n[Asserts]\nheader \"Location\" exists\nheader \"Location\" contains \"login\"  # Check that we are redirected to the login page\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing GitHub Action Workflow with Shell\nDESCRIPTION: This shell snippet demonstrates adding the GitHub Actions YAML configuration file to the Git index, committing it with a descriptive message, and pushing it to the remote repository. This operation enables automated CI workflow execution on GitHub upon new commits. It presupposes an initialized Git repo configured with a remote endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .github/workflows/ci.yml\n$ git commit -m \"Add GitHub action.\"\n[main 077d754] Add GitHub action.\n 1 file changed, 19 insertions(+)\n ...\n$ git push\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\n...\n```\n\n----------------------------------------\n\nTITLE: Testing .hurl Files Using the --test Option in Shell\nDESCRIPTION: Uses the hurl command with the --test option to run assertions and report test-oriented output for all files matching the '*.hurl' pattern. Requires hurl installed and multiple Hurl test definition files present. The command is designed for integration into CI/CD pipelines or test automation setups.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Output (CLI)\nDESCRIPTION: This option disables colorization in the output. Useful if the terminal does not support colors or the user prefers a plain output. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_102\n\nLANGUAGE: markdown\nCODE:\n```\n--no-color\n```\n\n----------------------------------------\n\nTITLE: Filter: Nth\nDESCRIPTION: This snippet utilizes the `nth` filter to access a specific element within a collection extracted via a JSONPath query.  It asserts that the element at index 2 in the `$.books` array equals \"Children of Dune\".\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_197\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books\" nth 2 == \"Children of Dune\"\n```\n\n----------------------------------------\n\nTITLE: Capturing SHA-256 Hash\nDESCRIPTION: This snippet captures the SHA-256 hash of the response body, which is calculated after content encoding decompression. It uses the `sha256` keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_133\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Captures]\nmy_hash: sha256\n```\n\n----------------------------------------\n\nTITLE: Asserting XML Body with hurl and Syntactic Sugar\nDESCRIPTION: This snippet provides another way to assert an XML response body using hurl, leveraging syntactic sugar. It uses a multiline string with the `xml` identifier for readability and easier management of the XML structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_183\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Content Using XPath with Hurl DSL\nDESCRIPTION: Demonstrates validating HTTP response body content by querying XPath 1.0 expressions after decoding response as a string per charset. Tests include string content, element counts, boolean existence, and namespace-aware XPath queries on XML and HTML documents. Dependencies include XML/HTML response bodies and compatible XPath expressions. This enables fine-grained validation of structured data within the response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_157\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2                             # Check the number of <p>\nxpath \"//p\" count == 2                              # Similar assert for <p>\nxpath \"boolean(count(//h2))\" == false               # Check there is no <h2>  \nxpath \"//h2\" not exists                             # Similar assert for <h2>\n```\n\nLANGUAGE: hurl\nCODE:\n```\n<?xml version=\"1.0\"?>\n<!-- both namespace prefixes are available throughout -->\n<bk:book xmlns:bk='urn:loc.gov:books'\n         xmlns:isbn='urn:ISBN:0-395-36341-6'>\n    <bk:title>Cheaper by the Dozen</bk:title>\n    <isbn:number>1568491379</isbn:number>\n</bk:book>\n\nGET http://localhost:8000/assert-xpath\nHTTP 200\n[Asserts]\n\nxpath \"string(//bk:book/bk:title)\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[name()='bk:book']/*[name()='bk:title'])\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[local-name()='book']/*[local-name()='title'])\" == \"Cheaper by the Dozen\"\n\nxpath \"string(//bk:book/isbn:number)\" == \"1568491379\"\nxpath \"string(//*[name()='bk:book']/*[name()='isbn:number'])\" == \"1568491379\"\nxpath \"string(//*[local-name()='book']/*[local-name()='number'])\" == \"1568491379\"\n```\n\n----------------------------------------\n\nTITLE: Using the [Options] Section in Hurl\nDESCRIPTION: Shows how to use the '[Options]' section to apply specific configurations (like timeouts, redirects, security settings, variables, verbosity, proxy settings, etc.) to a single Hurl request. Most options apply only to the current request, except for variables which persist for subsequent entries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\n# An options section, each option is optional and applied only to this request...\n[Options]\naws-sigv4: aws:amz:sts     # generate AWS SigV4 Authorization header\ncacert: /etc/cert.pem      # custom certificate file\ncert: /etc/client-cert.pem # client authentication certificate\nkey: /etc/client-cert.key  # client authentication certificate key\ncompressed: true           # request a compressed response\nconnect-timeout: 20s       # connect timeout\ndelay: 3s                  # delay for this request (aka sleep)\nhttp3: true                # use HTTP/3 protocol version\ninsecure: true             # allow insecure SSL connections and transfers\nipv6: true                 # use IPv6 addresses\nlimit-rate: 32000          # limit this request to the specidied speed (bytes/s)\nlocation: true             # follow redirection for this request\nmax-redirs: 10             # maximum number of redirections\noutput: out.html           # dump the response to this file\npath-as-is: true           # do not handle sequences of /../ or /./ in URL path\nretry: 10                  # number of retry if HTTP/asserts errors\nretry-interval: 500ms      # interval between retry\nskip: false                # skip this request\nunix-socket: sock          # use Unix socket for transfer\nuser: bob:secret           # use basic authentication\nproxy: my.proxy:8012       # define proxy (host:port where host can be an IP address)\nvariable: country=Italy    # define variable country\nvariable: planet=Earth     # define variable planet\nverbose: true              # allow verbose output\nvery-verbose: true         # allow more verbose output\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Version and Libcurl - Shell\nDESCRIPTION: Executes the `hurl --version` command in the shell. The output shows the Hurl version number, the version of the linked `libcurl`, and the features compiled into that libcurl instance. This command is useful for debugging and verifying the Hurl installation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --version\nhurl 2.0.0 libcurl/7.79.1 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.11 nghttp2/1.45.1\nFeatures (libcurl):  alt-svc AsynchDNS HSTS HTTP2 IPv6 Largefile libz NTLM NTLM_WB SPNEGO SSL UnixSockets\nFeatures (built-in): brotli\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL API with Hurl\nDESCRIPTION: This snippet shows how to test a GraphQL API using Hurl. It sends a POST request to the GraphQL endpoint with a query in the request body. The expected HTTP 200 response indicates a successful query execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Extracting Query Parameter Values with urlQueryParam Filter in Hurl (Hurl)\nDESCRIPTION: Extracts the value of a specified query parameter (here, 'x') from a URL present in a JSON response using urlQueryParam in Hurl. Efficient for focused URL component validation. Inputs are URLs and parameter names; outputs are parameter values. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_26\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.url\" urlQueryParam \"x\" == \"шеллы\"\n```\n\n----------------------------------------\n\nTITLE: Using Filters in Hurl Captures and Asserts\nDESCRIPTION: Provides an example of using filters in Hurl to process data extracted by queries. It shows applying a `replace` filter in a capture and `split` and `nth` filters in asserts to refine the data before validation or storage.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_175\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nname: jsonpath \"$user.id\" replace /\\d/ \"x\"\n[Asserts]\nheader \"x-servers\" split \",\" count == 2\nheader \"x-servers\" split \",\" nth 0 == \"rec1\"\nheader \"x-servers\" split \",\" nth 1 == \"rec3\"\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Hurl\nDESCRIPTION: This snippet demonstrates how to fetch data from a website using a GET request. It includes the expected HTTP status code and captures a CSRF token using XPath. The captured token is then used in a subsequent POST request for login.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\n# Get home:\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\n# Do login!\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n\n----------------------------------------\n\nTITLE: Setting User Option in Hurl\nDESCRIPTION: These snippets demonstrate how to set the user option in Hurl requests. It can be set globally via the command line using `--user` option or per-request using the `[Options]` section. This allows for different authentication credentials for different requests within the same Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --user bob:secret login.hurl\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/login\n[Options]\nuser: bob:secret\nHTTP 200\n\nGET https://example.org/login\n[Options]\nuser: alice:secret\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Setting variables via Command Line\nDESCRIPTION: This snippet is an example of running Hurl with command line variables. It sets values for several variables (`a_string`, `a_bool`, `a_null`, `a_number`) via the command line, that will then be used in the Hurl file for templating. This demonstrates how to inject dynamic values into Hurl templates.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple \\\n       --variable a_bool=true \\\n       --variable a_null=null \\\n       --variable a_number=42 \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 URL Safe Strings with base64UrlSafeDecode in Hurl (Hurl)\nDESCRIPTION: This snippet decodes Base64 URL-safe encoded strings from JSON responses using the base64UrlSafeDecode filter in Hurl, asserting their hexadecimal byte values. It expects a Base64 URL-safe token in a JSON field and validates the decoded result. Inputs are Base64 URL-safe strings; outputs are bytes in hex format. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.token\" base64UrlSafeDecode == hex,3c3c3f3f3f3e3e;\n```\n\n----------------------------------------\n\nTITLE: Making .netrc Usage Optional in Hurl\nDESCRIPTION: The `--netrc-optional` option makes the use of the .netrc file optional, similar to `--netrc`.  This offers a way to load credentials when present without failing if the file is not present or configured.  See also `--netrc-file`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_25\n\nLANGUAGE: Bash\nCODE:\n```\n--netrc-optional\n```\n\n----------------------------------------\n\nTITLE: Including HTTP Headers in Hurl Output\nDESCRIPTION: Includes the HTTP response headers in the standard output. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n-i, --include\n```\n\n----------------------------------------\n\nTITLE: Executing a Hurl File via CLI (Shell)\nDESCRIPTION: Demonstrates how to call Hurl from the shell to execute a .hurl file, emitting the body of the last HTTP response. Dependencies include Hurl installed as a CLI tool and a valid .hurl test file. Input is the file name, and output is the HTTP response content. Limitation: only outputs the last response by default.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_81\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl hello.hurl\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Content with Hurl\nDESCRIPTION: This snippet illustrates how to test HTML content using Hurl and XPath. It fetches a webpage and asserts that the normalized text content of the title element matches the expected value.  This ensures the correct HTML title is present.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Using Hurl Integer Variable in Typed Integer Assertion\nDESCRIPTION: This Hurl snippet uses the `count` variable (presumably captured as an integer) in an assertion `jsonpath \"$.index\" == {{count}}` without surrounding double quotes. This tells Hurl to use the *typed* value of the variable (integer 458) for the comparison against the result of the JSONPath expression `$.index`, which is also expected to be a number. This contrasts with using variables in quotes for string comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_6\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://sample/counter/{{count}} \n\nHTTP 200\n[Asserts]\njsonpath \"$.index\" == {{count}}\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Parameters\nDESCRIPTION: This snippet illustrates how to define cookies within a Hurl request. Cookies are key-value pairs used for maintaining state across requests. The section is marked by `[Cookies]`, followed by individual cookie definitions. The cookies are sent with each request, but do not persist in a cookie storage, unlike those received via `Set-Cookie` headers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_127\n\nLANGUAGE: hurl\nCODE:\n```\n[Cookies]\n...\n```\n\n----------------------------------------\n\nTITLE: Using Output File with Hurl\nDESCRIPTION: This command shows how to use the `-o` or `--output` option to specify a file to write the output of the HTTP request. This is useful for saving the response body to a file for later analysis.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurl.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -o output input.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining a Per-Entry Option Using the Hurl DSL\nDESCRIPTION: This snippet illustrates how to define HTTP requests in a Hurl file with and without the per-entry `[Options]` section. The example shows that the `location: true` option applies only to the second HTTP request entry, enabling redirection following exclusively for that entry, whereas the first request does not follow redirections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_77\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 301\n\nGET https://example.org\n[Options]\nlocation: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: html-unescape-filter\nDESCRIPTION: Defines the 'html-unescape-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'htmlUnescape' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_78\n\nLANGUAGE: Grammar\nCODE:\n```\nhtmlUnescape\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Requests\nDESCRIPTION: This snippet demonstrates generating signed API requests using AWS Signature Version 4. The `aws-sigv4` option specifies the AWS service, region, and action to sign the request. The example targets the STS service.  The access key is supplied via the `--user` option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_58\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\nuser: bob=secret\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Form Data\nDESCRIPTION: This snippet shows how to send HTML form data using the `[FormParams]` section. It demonstrates how to set the form fields with values and the way data is sent, which simulates how a web browser would do.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_45\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[FormParams]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes into Base64 URL Safe String with base64UrlSafeEncode in Hurl (Hurl)\nDESCRIPTION: Converts byte data to a Base64 URL-safe encoded string using base64UrlSafeEncode in Hurl, for use in assertions. Suitable for scenarios needing URL-safe encodings. Inputs are bytes; outputs are encoded strings. Requires Hurl and binary HTTP response data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\nbytes base64UrlSafeEncode == \"PDw_Pz8-Pg\"\n```\n\n----------------------------------------\n\nTITLE: Sending a GET Request with Headers\nDESCRIPTION: This snippet demonstrates the addition of HTTP headers to a GET request. It specifies user-agent, accept, accept-language, accept-encoding, and connection headers. It provides an example for how to structure HTTP headers within a Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 \nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Defining Data Encoding Formats in Hurl Grammar\nDESCRIPTION: Grammar rules for specific data encoding formats used in Hurl, including XML placeholder, base64 encoding, file references, and hexadecimal encoding. Each has its own specific syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_224\n\nLANGUAGE: Grammar\nCODE:\n```\nxml ::= < To Be Defined >\noneline-base64 ::= base64, [A-Z0-9+-= \\n]+ ;\noneline-file ::= file, filename ;\noneline-hex ::= hex, hexdigit* ;\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Body MD5 Hash in Hurl\nDESCRIPTION: Demonstrates how to assert that the MD5 hash of the decompressed HTTP response body matches a specific hexadecimal value using the `md5` assert in Hurl. This check is performed after any content encoding decompression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_161\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nmd5 == hex,ed076287532e86365e841e92bfc50d8c;\n```\n\n----------------------------------------\n\nTITLE: Capturing a Header Value\nDESCRIPTION: This code captures a specific header value from the HTTP response.  It defines a variable and then utilizes the keyword `header` and the header name within quotes to store the header's value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_126\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/login\n[Form]\nuser: toto\npassword: 12345678\nHTTP 302\n[Captures]\nnext_url: header \"Location\"\n```\n\n----------------------------------------\n\nTITLE: Capturing XPath Query Result from HTTP Response Body with Hurl DSL\nDESCRIPTION: Executes an XPath 1.0 expression against the decoded HTTP response body treated as XML or HTML, then captures the result to a variable. The variable name is followed by colon, the keyword 'xpath', and a quoted XPath expression. XPath captures are flexible and can extract node contents, counts, or boolean values. Supports combining filters such as byte decoding before XPath extraction.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_152\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\n# Capture the identifier from the dom node <div id=\"pet0\">5646eaf23</div\nHTTP 200\n[Captures]\nped-id: xpath \"normalize-space(//div[@id='pet0'])\"\n\n# Open the captured page.\nGET https://example.org/home/pets/{{pet-id}}\nHTTP 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Test that the XML endpoint return 200 pets\nGET https://example.org/api/pets\nHTTP 200\n[Captures]\npets: xpath \"//pets\"\n[Asserts]\nvariable \"pets\" count == 200\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home_cn\nHTTP 200\n[Captures]\nped-id: bytes decode \"gb2312\" xpath \"normalize-space(//div[@id='pet0'])\"\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order Mark in Response Body with Hurl\nDESCRIPTION: Example of checking for a UTF-8 Byte Order Mark (BOM) in a binary response. The assertion tests if the response body starts with the UTF-8 BOM bytes (EF BB BF).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_65\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables from File via Command Line Option\nDESCRIPTION: This shell snippet shows how to inject multiple variables into a Hurl test run (`test.hurl`) by reading them from a specified file (`vars.env`) using the `--variables-file` command-line option. The file is expected to contain variable definitions in a simple `key=value` format, allowing for managing larger sets of variables externally.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --variables-file vars.env test.hurl\n```\n\n----------------------------------------\n\nTITLE: Verifying Response Body Integrity with SHA256 Assert in Hurl\nDESCRIPTION: This Hurl script sends a GET request to retrieve a resource (`https://example.org/data.tar.gz`). It asserts the HTTP status is 200 and uses the `[Asserts]` section to verify the integrity of the response body by comparing its SHA-256 hash against a known hexadecimal value (`sha256 == hex,...`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Request via Hurl\nDESCRIPTION: This snippet demonstrates the basic usage of the `hurl` command to execute an HTTP request.  It takes a Hurl file as input, and by default, outputs the response body to standard output. The Hurl file format is a simple plain text format used to define the HTTP requests. The example provided is for fetching data and testing HTTP sessions, including HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl session.hurl\n```\n\n----------------------------------------\n\nTITLE: Testing Status Code Range in Hurl\nDESCRIPTION: This snippet demonstrates how to test that the HTTP status code falls within a specific range (200-300) using assertions. It checks that the status code is greater than or equal to 200 and less than 300.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_33\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order/435\n# Testing status code is in a 200-300 range\nHTTP *\n[Asserts]\nstatus >= 200\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Making SOAP API Calls over HTTP - Hurl and XML\nDESCRIPTION: Posts a SOAP XML body to a web service endpoint using required SOAP headers. Useful for testing or integrating with SOAP services. Inputs: endpoint, headers, and XML payload. Outputs: HTTP response and optional assertions. Requires endpoint to support SOAP and valid XML formatting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing Multiline Plain Text Response in Hurl\nDESCRIPTION: Example of testing a multiline plain text response body in Hurl. The response contains CSV data with quotes and special characters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_45\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",\"\",5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Response Headers\nDESCRIPTION: This snippet shows how to test for the presence or value of a response header.  It demonstrates both implicit and explicit header assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_28\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Body with hurl and Syntactic Sugar\nDESCRIPTION: This snippet shows an alternative approach to asserting a JSON response body, treated as syntactic sugar with the json identifier.  It asserts the response body content by utilizing a multiline string and `json` identifier.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_181\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n```json\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Allowing Insecure SSL Connections in Hurl\nDESCRIPTION: Allows Hurl to perform insecure SSL connections and data transfers, bypassing certificate validation. Use with caution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n-k, --insecure\n```\n\n----------------------------------------\n\nTITLE: Setting Options for Specific Requests - Hurl\nDESCRIPTION: This Hurl file demonstrates using the `[Options]` section to enable the `location` option only for the second GET request, to handle redirections. The first and third GET requests have default behaviour, the second follows redirects.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\nHTTP 301\n\nGET https://google.fr\n[Options]\nlocation: true\nHTTP 200\n\nGET https://google.fr\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data - Curl\nDESCRIPTION: Shows the equivalent command-line syntax using `curl` to send a PUT request with a JSON body. It highlights the need for explicit headers and escaping/quoting of the JSON data within the shell command. This is presented as a comparison point to Hurl's simpler file format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n     --request PUT \\\n     --data '{\"username\": \"xyz\",\"password\": \"xyz\"}' \\\n     http://localhost:3000/api/login\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Before Today in Hurl\nDESCRIPTION: Calculates the days between today and a past date from the server certificate, verifying if the start date is recent enough. Employs the daysBeforeNow filter with certificate header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_180\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Start-Date\" daysBeforeNow < 100\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: days-after-now-filter\nDESCRIPTION: Defines the 'days-after-now-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'daysAfterNow' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_73\n\nLANGUAGE: Grammar\nCODE:\n```\ndaysAfterNow\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for One-Line String Content in Hurl Grammar\nDESCRIPTION: Defines the `oneline-string-content` rule, which consists of zero or more occurrences of either `oneline-string-text` or `oneline-string-escaped-char`. This rule forms the content part of an `oneline-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_214\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><a href=\"#oneline-string-text\">oneline-string-text</a><span class=\"grammar-symbol\">|</span><a href=\"#oneline-string-escaped-char\">oneline-string-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Testing Set-Cookie Attributes in Hurl\nDESCRIPTION: Shows how to test cookie values and attributes such as expiration date, security flags, and SameSite settings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_47\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\ncookie \"JSESSIONID\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Value]\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"JSESSIONID[Secure]\" exists\ncookie \"JSESSIONID[HttpOnly]\" exists\ncookie \"JSESSIONID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Test Mode\nDESCRIPTION: Shell command to execute a Hurl file in test mode, which provides a summary of test results rather than the raw HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test basic.hurl\n[1mbasic.hurl[0m: [1;32mSuccess[0m (1 request(s) in 24 ms)\n--------------------------------------------------------------------------------\nExecuted files:    1\nExecuted requests: 1 (41.7/s)\nSucceeded files:   1 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          24 ms\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-string-content\nDESCRIPTION: Defines the allowable content within a Hurl one-line (backtick-enclosed) string, excluding templates. It consists of zero or more occurrences of either plain one-line string text (`oneline-string-text`) or escaped characters specific to one-line strings (`oneline-string-escaped-char`). This rule is used by `oneline-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_238\n\nLANGUAGE: Grammar\nCODE:\n```\noneline-string-content ::= (oneline-string-text | oneline-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Testing Response Headers with Implicit Asserts in Hurl\nDESCRIPTION: This snippet demonstrates how to test response headers using implicit asserts. The `Set-Cookie` headers are checked for specific values. Implicit asserts only verify existence and equality of values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_34\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\n----------------------------------------\n\nTITLE: Defining json-string Grammar Rule\nDESCRIPTION: Defines the structure of a JSON string. A JSON string starts and ends with a double quote `\"` and contains zero or more occurrences of either `json-string-content` or a `placeholder`. This rule is used by `json-value` and `json-key-value` rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_236\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n\" (json-string-content|placeholder)* \"\n```\n\n----------------------------------------\n\nTITLE: Test Hurl from File (Shell Script)\nDESCRIPTION: Creates a test Hurl script file, then runs Hurl in test mode with color output from the file to verify functionality.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP 200\" > /tmp/test.hurl\nhurl --test --color /tmp/test.hurl\n```\n\n----------------------------------------\n\nTITLE: Following HTTP Redirects (Hurl)\nDESCRIPTION: Follow HTTP redirects encountered during the request. Use `--max-redirs` to limit the number of redirects followed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_94\n\nLANGUAGE: bash\nCODE:\n```\n-L, --location\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables via Command Line Option\nDESCRIPTION: This shell snippet shows how to inject variables (`host` and `id`) into a Hurl test run (`test.hurl`) using the `--variable` command-line option. Each option specifies a variable name and its value separated by an equals sign (`name=value`). This is a common way to provide configuration or test-specific data to Hurl files dynamically.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --variable host=example.net --variable id=1234 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Configuring a Proxy Server in Hurl (Bash)\nDESCRIPTION: Specifies a proxy server to use for HTTP requests. The proxy address should be provided in the format `[PROTOCOL://]HOST[:PORT]`, e.g., `http://proxyserver:8080`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n-x, --proxy <[PROTOCOL://]HOST[:PORT]>\n```\n\n----------------------------------------\n\nTITLE: Capturing a Cookie Value\nDESCRIPTION: This snippet captures a cookie value from the HTTP response headers using the `cookie` keyword followed by the cookie name. It can extract the entire value or specific attributes of the cookie using the format `cookie-name[cookie-attribute]` such as `cookie \"LSID[Value]\"`. This handles various attributes like Value, Expires, Max-Age, Domain, Path, Secure, HttpOnly and SameSite.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_127\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/cookies/set\nHTTP 200\n[Captures]\nsession-id: cookie \"LSID\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/cookies/set\nHTTP 200\n[Captures]\nvalue1: cookie \"LSID\"\nvalue2: cookie \"LSID[Value]\"     # Equivalent to the previous capture\nexpires: cookie \"LSID[Expires]\"\nmax-age: cookie \"LSID[Max-Age]\"\ndomain: cookie \"LSID[Domain]\"\npath: cookie \"LSID[Path]\"\nsecure: cookie \"LSID[Secure]\"\nhttp-only: cookie \"LSID[HttpOnly]\"\nsame-site: cookie \"LSID[SameSite]\"\n```\n\n----------------------------------------\n\nTITLE: Capturing and Using CSRF Token\nDESCRIPTION: This example demonstrates capturing a CSRF token from the response of a GET request and using it in a subsequent POST request. It captures the token using `xpath` and then uses the captured value in the `X-CSRF-TOKEN` header of the POST request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_55\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n\n\nPOST https://example.org/login?user=toto&password=1234\nX-CSRF-TOKEN: {{csrf_token}}\nHTTP 302\n```\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Test Mode with --test Option (Shell)\nDESCRIPTION: Demonstrates using Hurl's --test flag to run tests in parallel, suppressing HTTP body output and showing only test results. Dependencies: Hurl CLI and testable .hurl files. Key parameters are file names and --test flag. Outputs include file-wise test reports, success/failure counts, and durations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test hello.hurl assert_json.hurl\n\u001b[1mhello.hurl\u001b[0m: \u001b[1;32mSuccess\u001b[0m (6 request(s) in 245 ms)\n\u001b[1massert_json.hurl\u001b[0m: \u001b[1;32mSuccess\u001b[0m (8 request(s) in 308 ms)\n--------------------------------------------------------------------------------\nExecuted files:    2\nExecuted requests: 10 (17.82/s)\nSucceeded files:   2 (100.0%)\nFailed files:      0 (0.0%)\nDuration:          561 ms\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Content with Hurl\nDESCRIPTION: Demonstrates how to test HTML content by making a GET request and using XPath to validate the page title.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Including Headers using Hurl\nDESCRIPTION: This command displays the HTTP headers of the last entry of the Hurl file, mimicking the `-i` option of the curl command.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -i basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes into Base64 String with base64Encode in Hurl (Hurl)\nDESCRIPTION: Applies the base64Encode filter to raw bytes in an HTTP response, encoding them into a Base64 string for assertion. Useful for validating binary data transmission or content encoding. Inputs are raw bytes; outputs are Base64 encoded strings asserted for correctness. Requires Hurl and response with byte data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\nbytes base64Encode == \"PDw/Pz8+Pg==\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data (Multiline)\nDESCRIPTION: This snippet shows an alternative way to send multipart form data using a multiline string body with the `Content-Type` header.  This method allows you to define the entire multipart form in a single string, including the boundaries and the content of each part. This method also inlines files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_16\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Explicit Header Assertion\nDESCRIPTION: This snippet demonstrates explicit assertion of response headers using the `[Asserts]` section. It checks if a header named `Location` contains a specific string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_29\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Bytes to String with decode Filter and Specified Charset in Hurl (Hurl)\nDESCRIPTION: Decodes HTTP response byte data into a string using a specific character encoding (e.g., 'gb2312'), then applies further processing (like XPath queries or equality checks). Essential when the HTTP response does not specify charset information. Inputs are raw bytes and encoding name; outputs are decoded strings. Requires Hurl and relevant text encoding support.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\n# The 'Content-Type' HTTP response header does not precise the charset 'gb2312'\n# so body must be decoded explicitly by Hurl before processing any text based assert\nGET https://example.org/hello_china\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\n# Content-Type has no encoding clue, we must decode ourselves the body response.\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Single Set-Cookie Header\nDESCRIPTION: This snippet is similar to the previous one, but it only checks for the presence of one `Set-Cookie` header. This illustrates that only headers that are explicitly specified are asserted.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html \nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output Body with Hurl CLI\nDESCRIPTION: Suppresses the output of the last response body using the `--no-output` flag. By default, Hurl prints the body of the final response in a sequence. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\n--no-output\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving a Cat with Karate - Unknown\nDESCRIPTION: This snippet shows a Karate scenario for creating and retrieving a cat resource using API calls. Dependencies are the Karate framework and a properly configured environment. It demonstrates HTTP POST and GET requests, with assertions on response status and JSON content. Inputs are endpoint URLs and JSON payloads, and outputs are test results and variable captures. Syntax is specific to the Karate domain language.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_94\n\nLANGUAGE: Unknown\nCODE:\n```\nScenario: create and retrieve a cat\n\nGiven url 'http://myhost.com/v1/cats'\nAnd request { name: 'Billie' }\nWhen method post\nThen status 201\nAnd match response == { id: '#notnull', name: 'Billie }\n\nGiven path response.id\nWhen method get\nThen status 200\n\n```\n\n----------------------------------------\n\nTITLE: Defining Exponent Grammar Rule for Scientific Notation in Hurl Grammar Syntax\nDESCRIPTION: Defines an exponent part of a number which consists of an 'e' or 'E' followed optionally by a plus or minus sign and one or more digits. Used in JSON number parsing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_263\n\nLANGUAGE: grammar\nCODE:\n```\n(\"e\" | \"E\") (+ | -)? digit+\n```\n\n----------------------------------------\n\nTITLE: Evaluating JSONPath in Hurl\nDESCRIPTION: Uses JSONPath to extract data from JSON responses, capturing values and asserting their correctness. Supports XPath expressions for initial extraction.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_185\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nbooks: xpath \"string(//body/@data-books)\" \n[Asserts]\nvariable \"books\" jsonpath \"$[0].name\" == \"Dune\"\nvariable \"books\" jsonpath \"$[0].author\" == \"Franck Herbert\"\n```\n\n----------------------------------------\n\nTITLE: Verifying response body with MD5 assertions in Hurl\nDESCRIPTION: Shows how to verify the integrity of a response body using MD5 hash checking, which works after content encoding decompression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nmd5 == hex,ed076287532e86365e841e92bfc50d8c;\n```\n\n----------------------------------------\n\nTITLE: Decoding URL with `urlDecode` Filter (Hurl)\nDESCRIPTION: Demonstrates the `urlDecode` filter in Hurl. This filter replaces percent-encoded sequences (%xx) in a string with their corresponding characters, useful for verifying decoded URL components.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_205\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.encoded_url\" urlDecode == \"https://mozilla.org/?x=шеллы\"\n```\n\n----------------------------------------\n\nTITLE: GET Request with Headers\nDESCRIPTION: This snippet shows how to include HTTP headers in a GET request.  It specifies various headers like `User-Agent`, `Accept`, and `Connection` to customize the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 \nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Applying Global Location Option via Hurl CLI\nDESCRIPTION: Demonstrates how to apply the --location option globally to all requests within a Hurl file (foo.hurl) directly from the command line. This tells Hurl to follow HTTP redirects for every entry in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nhurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in URL and Typed Assert (Hurl)\nDESCRIPTION: Demonstrates using a captured or injected integer variable (`count`) in both the URL path and directly in an assertion without double quotes. When not in quotes in an assertion, the variable's original type (integer in this case) is preserved for the comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_211\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://sample/counter/{{count}} \n\nHTTP 200\n[Asserts]\njsonpath \"$.index\" == {{count}}\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/1.0 Usage (Hurl)\nDESCRIPTION: Tells Hurl to use HTTP version 1.0 for the request, overriding the default preferred HTTP version.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\n-0, --http1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Architecture Docker Manifest\nDESCRIPTION: Creates combined Docker manifests for a specific version and the latest tag, bundling amd64 and arm64 images into a single multi-arch image. It uses Docker manifest commands with amendment to create a unified image.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest create \\\n  ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\" \\\n  --amend ghcr.io/\"${organization}\"/hurl:amd64-\"${docker_build_tag}\" \\\n  --amend ghcr.io/\"${organization}\"/hurl:arm64-\"${docker_build_tag}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest create \\\n  ghcr.io/\"${organization}\"/hurl:latest \\\n  --amend ghcr.io/\"${organization}\"/hurl:amd64-\"${docker_build_tag}\" \\\n  --amend ghcr.io/\"${organization}\"/hurl:arm64-\"${docker_build_tag}\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Username Creation Hurl\nDESCRIPTION: This snippet tests the server-side validation by attempting to create a user with an invalid username. It retrieves a CSRF token, then posts user data with a short username to the /signup endpoint. The test validates the redirect to the signup page and the presence of an error message related to the username length using an XPath assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\n# Try an invalid username: too short. We should stay on signup\nGET http://localhost:3000/signup\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//input[@name='_csrf']/@value)\"\n\nPOST http://localhost:3000/signup\n[Options]\nlocation: true\n[Form]\n_csrf: {{csrf_token}}\nusername: bo\nname: Bob\nemail: bob78@example.net\npassword: 12345678\nHTTP 200\n[Asserts]\nurl endsWith \"/signup\"\nxpath \"string(//div[@class='form-errors'])\" contains \"Username must be 3 to 32 chars long\"\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Status Code\nDESCRIPTION: This snippet captures the HTTP response status code. It declares a variable and uses the keyword `status` to store the code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_124\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\nmy_status: status\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Request Options for Redirection in Hurl\nDESCRIPTION: Shows how to use an [Options] block in Hurl to enable redirection only for specific requests, overriding default behavior. Requires Hurl interpreter. The snippet includes three similar requests, with one activating redirection using the 'location: true' option in the [Options] block. Tests involve status code checks before and after following redirection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_93\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\nHTTP 301\n\nGET https://google.fr\n[Options]\nlocation: true\nHTTP 200\n\nGET https://google.fr\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Colored Diff Output for Assertion Error to Enhance Readability - diff\nDESCRIPTION: Displays a colored diff snippet akin to git diff output, using '-' and '+' line prefixes with coloring to enhance visual distinction of removed and added lines during assertion failures. This format is designed to make error message parsing more intuitive by visually highlighting the changed content within the HTTP response body comparisons.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-  \"age\": 27,\n+  \"age\": 28,\n```\n\n----------------------------------------\n\nTITLE: Asserting the Last Fetched URL in Hurl\nDESCRIPTION: This code snippet demonstrates how to assert the final URL after potential redirections. It utilizes the `url` keyword along with the `==` predicate to compare the actual URL to the expected URL, which requires setting the `location: true` option to tell Hurl to follow the redirection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_167\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/redirecting\n[Options]\nlocation: true\nHTTP 200\n[Asserts]\nurl == \"https://example.org/redirected\"\n```\n\n----------------------------------------\n\nTITLE: Testing SOAP API with Hurl\nDESCRIPTION: This snippet demonstrates how to test a SOAP API using Hurl. It sends a POST request with XML content, specifying the Content-Type and SOAPAction headers. The expected HTTP 200 response indicates a successful API call. The XML contains a SOAP envelope with a GetStockPrice request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Making .netrc Optional (CLI)\nDESCRIPTION: This option makes the use of the .netrc file optional for authentication. The tool will attempt to use .netrc if it exists but won't fail if the file is not found. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_101\n\nLANGUAGE: markdown\nCODE:\n```\n--netrc-optional\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Arch Docker Manifests\nDESCRIPTION: Pushes the created multi-architecture Docker manifests to the registry, ensuring the combined images are accessible via the specified tags.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest push ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\"\ndocker manifest push ghcr.io/\"${organization}\"/hurl:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Windows via Scoop\nDESCRIPTION: Installs Hurl using the Scoop package manager on Windows. Requires Scoop (scoop command) to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\n$ scoop install hurl\n```\n\n----------------------------------------\n\nTITLE: Templating a JSON Body in Hurl\nDESCRIPTION: This snippet demonstrates how to use templates in a JSON body. Variables like `{{a_string}}`, `{{a_bool}}`, `{{a_null}}`, and `{{a_number}}` are used as placeholders, which will be replaced with actual values at runtime. The Content-Type header is set to `application/json`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_24\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Download File Size with Hurl (Bash)\nDESCRIPTION: Specifies the maximum allowed size in bytes for a downloaded file using the Hurl CLI. If the requested file exceeds this limit (<BYTES>), the transfer will not initiate. This option is only available via the command-line interface.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--max-filesize <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Global Delay and Repeat Options via Hurl CLI - Shell\nDESCRIPTION: This command demonstrates running a Hurl file with global delay and repeat options set from the command line. It delays each execution by 500ms and repeats the test 3 times. Requires the Hurl CLI and a target file. Inputs: hurl binary, delay, repeat count, file name. Output: multiple test runs with delay between them.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_120\n\nLANGUAGE: shell\nCODE:\n```\nhurl --delay 500ms --repeat 3 foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Feedback submission via Hurl in POST request\nDESCRIPTION: Sends a POST request with JSON body to submit user feedback, confirming the communication with a response status check.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://hurl.dev/api/feedback\n{\n  \"name\": \"John Doe\",\n  \"feedback\": \"Hurl is awesome!\"\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting MD5 Hash - Hurl\nDESCRIPTION: This snippet demonstrates how to assert the MD5 hash of the HTTP response body.  The `md5` keyword is used to compare the body's MD5 hash with an expected hex value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_176\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nmd5 == hex,ed076287532e86365e841e92bfc50d8c;\n```\n\n----------------------------------------\n\nTITLE: Basic Hurl File Format Example\nDESCRIPTION: Example of a basic Hurl file with multiple HTTP requests. Shows the sequential execution of two GET requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_71\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org/endpoint1\nGET http://example.org/endpoint2\n```\n\n----------------------------------------\n\nTITLE: Using the [Query] Section with Variables in Hurl\nDESCRIPTION: Demonstrates defining query parameters using the '[Query]' section in Hurl. Values in this section are not URL encoded by default. It also shows the use of a variable '{{custom-search}}' for dynamic parameter values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0\n[Query]\norder: newest\nsearch: {{custom-search}}\ncount: 100\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets using CLI and redact\nDESCRIPTION: The first part shows how to redact known values using command-line arguments for secrets. The second part, `redact`, is applied to a captured header value, ensuring that the value is not displayed in the test output. This prevents sensitive data from being exposed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_56\n\nLANGUAGE: hurl\nCODE:\n```\n```shell\n$ hurl --secret token=1234 file.hurl\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n```\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\n# Get an authorization token:\nGET https://example.org/token\nHTTP 200\n[Captures]\ntoken: header \"X-Token\" redact\n\n# Send an authorized request:\nPOST https://example.org\nX-Token: {{token}}\n{\n  \"name\": \"Alice\",\n  \"value\": 100\n}\nHTTP 200\n```\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests in Hurl\nDESCRIPTION: The code shows how to skip a request using the `skip` option.  The request with the `skip: true` option will not be executed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_72\n\nLANGUAGE: hurl\nCODE:\n```\n# a, c, d are run, b is skipped\nGET https://example.org/a\n\nGET https://example.org/b\n[Options]\nskip: true\n\nGET https://example.org/c\n\nGET https://example.org/d\n```\n\n----------------------------------------\n\nTITLE: Constructing and Parsing URLs in Python\nDESCRIPTION: Provides functions to construct URLs with query parameters and parse response data, aiding dynamic URL management in Python scripts. Suitable dependencies include urllib.parse for URL handling.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/tests/hello.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom urllib.parse import urljoin, urlencode\n\ndef build_url(base_url, path, params):\n    url = urljoin(base_url, path)\n    if params:\n        url += '?' + urlencode(params)\n    return url\n```\n\n----------------------------------------\n\nTITLE: Adding Hurl Tests to Integration Script (Bash)\nDESCRIPTION: The final version of `bin/integration.sh`. After starting the container and waiting for the server to be ready, this version adds the command `hurl --variable host=\"$1\" --test integration/*.hurl` to execute all Hurl tests located in the `integration` directory, passing the host URL provided as the script's argument.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -eu\n\n# ... (wait_for_url function here)\n\necho \"Starting container\"\n# ... (docker run command here)\n\necho \"Waiting server to be ready\"\n# ... (wait_for_url call here)\n\necho \"Running Hurl tests\"\nhurl --variable host=\"$1\" --test integration/*.hurl\n\necho \"Stopping container\"\n# ... (docker stop command here)\n```\n\n----------------------------------------\n\nTITLE: Unescaping HTML Entities with htmlUnescape in Hurl (Hurl)\nDESCRIPTION: Converts HTML-escaped characters or numeric codes into their Unicode equivalents using htmlUnescape in Hurl. Useful for normalizing HTML content for comparison or further processing. Inputs are HTML entity-encoded strings; outputs are unescaped Unicode strings. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.escaped_html[1]\" htmlUnescape == \"Foo © bar 𝌆\"\n```\n\n----------------------------------------\n\nTITLE: Templating an XML Body in Hurl\nDESCRIPTION: This snippet demonstrates how to template an XML body in Hurl. Direct templating of XML bodies is not supported. The example showcases using a multiline string body with variables for templating.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_24\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/echo/post/xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Request>\n    <Login>{{login}}</Login>\n    <Password>{{password}}</Password>\n</Request>\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Version in Shell\nDESCRIPTION: Command to verify that Hurl is installed on your system by displaying its version.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --version\n```\n\n----------------------------------------\n\nTITLE: Using Standard Unified Diff Output for JSON Assertion Errors - Plaintext\nDESCRIPTION: Shows an error message incorporating standard unified diff format (without context lines) to precisely indicate differences between expected and actual JSON response bodies. The snippet marks lines prefixed with '-' for removals and '+' for additions, helping users quickly identify which values changed. It enables better readability and debugging compared to dumping the entire JSON bodies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:8:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 8 |   \"age\": 27,\n   |   -  \"age\": 27,\n   |   +  \"age\": 28,\n   |\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body Inline\nDESCRIPTION: This snippet demonstrates posting a JSON body directly within a Hurl file. It shows how to define the body using the curly braces format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_48\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"456\",\n    \"evaluate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiline String Body in Hurl\nDESCRIPTION: This snippet illustrates the use of multiline strings for asserting text-based response bodies.  It defines a GET request and then asserts that the response body matches a specific multiline string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_184\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \\\"Extended Edition\\\"\",\"\",4900.00\n1999,Chevy,\"Venture \\\"Extended Edition, Very Large\"\",,,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Response Bytes with Hurl\nDESCRIPTION: This snippet demonstrates how to check the SHA256 hash of a downloaded file using Hurl.  It sends a GET request for a file and asserts that its SHA256 hash matches a specific hexadecimal value. This ensures the file integrity is maintained.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/home.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: GET Request with Query Parameters (URL)\nDESCRIPTION: This snippet shows an alternative approach to include query parameters in a GET request by appending them directly to the URL.  This method is equivalent to the `[Query]` section, but uses standard URL syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news?order=newest&search=something%20to%20search&count=100\n```\n\n----------------------------------------\n\nTITLE: Testing Response with File Content\nDESCRIPTION: This snippet uses an implicit assert to verify the response body against a file. This is used for binary or large file responses, or where matching against a pre-defined content is necessary.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Converting curl Command to Hurl Format Using hurlfmt - Shell\nDESCRIPTION: Shows how to leverage hurlfmt to translate a curl command-line input to Hurl syntax by using the --in curl option. The input is a curl invocation (via echo), sent through hurlfmt, and outputs the corresponding Hurl representation, including all custom headers. Dependencies are hurlfmt and a shell environment capable of command piping. Useful for users migrating from curl scripts to Hurl files. Inputs are curl commands, outputs are Hurl-formatted HTTP requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurlfmt.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"curl http://localhost:8000/custom-headers -H 'Fruit:Raspberry'\" | hurlfmt --in curl\nGET http://localhost:8000/custom-headers\nFruit: Raspberry\n```\n\n----------------------------------------\n\nTITLE: Saving HTTP Response to File using Hurl Options - Hurl\nDESCRIPTION: Shows use of the [Options] section to specify output file paths for HTTP response content. Helps automate downloading and saving responses to files or stdout. Inputs: endpoint and output file directive. Outputs: written file with HTTP reply.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.ord/cats/123\n[Options]\noutput: cat123.txt    # use - to output to stdout\nHTTP 200\n\nGET https://example.ord/dogs/567\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions CI Workflow with YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow named 'CI' triggered on pushes to the 'main' branch. It runs on the latest Ubuntu environment and contains steps to check out the repository, run a build placeholder command, and execute an integration test script. The integration test step installs the Hurl tool by downloading a Debian package and runs a shell script 'bin/integration.sh', passing the localhost URL. It requires network access and 'sudo' rights to install packages. Outputs are the CI build and test run results within GitHub Actions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Build\n        run: echo \"Building app...\"\n      - name: Integration test\n        run: |\n          curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/4.0.0/hurl_4.0.0_amd64.deb\n          sudo dpkg -i hurl_4.0.0_amd64.deb\n          bin/integration.sh http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version in Hurl\nDESCRIPTION: This code tests the HTTP version of the response. The test asserts whether the HTTP version is HTTP/3 and HTTP/2 by checking the HTTP response line starting with HTTP/3 and HTTP/2 respectively.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_69\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP/3 200\n\nGET https://bar.com\nHTTP/2 200\n```\n\n----------------------------------------\n\nTITLE: Defining json-value Grammar Rule\nDESCRIPTION: Defines what constitutes a valid JSON value within Hurl. A JSON value can be a placeholder, a JSON object, a JSON array, a JSON string, a JSON number, a boolean (true/false), or null. This rule is fundamental to defining valid JSON structures in Hurl and is used in `bytes`, `json-key-value`, and `json-array` rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_232\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\nplaceholder | json-object | json-array | json-string | json-number | boolean | null\n```\n\n----------------------------------------\n\nTITLE: Configuring Hurl in package.json\nDESCRIPTION: Demonstrates how to configure Hurl in a package.json file to run tests on Hurl files, using the --test flag and glob pattern to select test files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sample-app\",\n  \"scripts\": {\n    \"test\": \"hurl --test --glob test/*.hurl\",\n    ...\n  },\n  ...\n```\n\n----------------------------------------\n\nTITLE: Testing Multiline String Body in Hurl\nDESCRIPTION: Tests the response body against a multiline string body. It uses a multiline string defined by the backticks (` `).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_64\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: Converting to Integer with `toInt` Filter (Hurl)\nDESCRIPTION: Shows the application of the `toInt` filter in Hurl. This filter converts a string value into an integer number, facilitating integer-based comparisons in assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_204\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.id\" toInt == 123\n```\n\n----------------------------------------\n\nTITLE: Per-Entry Redirect Handling with [Options] Section - Hurl\nDESCRIPTION: This snippet features three HTTP GET requests where the second uses a dedicated [Options] section to enable redirection for that particular entry, allowing assertion of a 200 status code after redirection. Dependency: Hurl CLI; endpoint must implement redirections. Inputs are URLs and option sections. Output is assertion pass/fail per entry; only the marked entry follows redirection automatically.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_112\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\nHTTP 301\n\nGET https://google.fr\n[Options]\nlocation: true\nHTTP 200\n\nGET https://google.fr\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer in Hurl\nDESCRIPTION: Converts a JSON extracted value to an integer for numeric assertions, ensuring type correctness and avoiding string-related issues.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_192\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..id\" toInt == 123\n```\n\n----------------------------------------\n\nTITLE: Making SOAP API Requests with Hurl\nDESCRIPTION: Demonstrates how to make a SOAP API request using Hurl with XML content, proper headers, and namespaces to get a stock price.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Entry Location Option in Hurl File\nDESCRIPTION: Illustrates how to specify options for individual Hurl file entries using an [Options] section. In this example, the location: true option is applied only to the second GET request, allowing per-request customization of behavior.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_16\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 301\n\nGET https://example.org\n[Options]\nlocation: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query with Variables in Hurl\nDESCRIPTION: This snippet demonstrates how to send a GraphQL query with variables in a Hurl request. The query and variables are defined separately within the Hurl file.  The variables are passed to the GraphQL endpoint along with the query.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_28\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/starwars/graphql\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\nvariables {\n  \"episode\": \"JEDI\",\n  \"withFriends\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Polling and Retrying Requests in Hurl\nDESCRIPTION: The code illustrates how to implement retry logic for requests. The `retry` option with a maximum number of retries (or `-1` for unlimited) is combined with `retry-interval` to retry a request in case of errors. In this case the GET request polls a job until it is completed based on a JSONPath assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_70\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST https://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET https://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 500ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Testing SHA-256 Hash of Response Body in Hurl\nDESCRIPTION: This snippet checks the SHA-256 hash of the response body. The assertion compares the calculated SHA-256 hash with an expected hexadecimal value, ensuring the integrity of the content returned by the endpoint. This is often used when downloading or verifying files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_59\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in `[Options]` Section (Hurl)\nDESCRIPTION: Shows how to define variables directly within a Hurl file using the `[Options]` section. Variables defined here are available for the requests that follow this section in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_216\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\n[Options]\nvariable: host=example.net\nvariable: id=1234\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining a Body Query in Hurl\nDESCRIPTION: Defines a grammar rule for querying the body of an HTTP response. This rule is straightforward, simply specifying the literal 'body', indicating that the entire response body should be accessed for the purpose of assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_17\n\nLANGUAGE: Hurl\nCODE:\n```\nbody\n```\n\n----------------------------------------\n\nTITLE: Parsing and Formatting Dates with toDate and format in Hurl (Hurl)\nDESCRIPTION: Demonstrates converting date strings (e.g., HTTP headers) to date objects using toDate, then applying format and daysBeforeNow for advanced assertions. Includes shorthand ISO 8601 parsing with \"%+\". Inputs are date strings and formats; outputs are date objects, formatted strings, and date differences. Requires Hurl and standard date formats.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_20\n\nLANGUAGE: hurl\nCODE:\n```\nGET https:///example.org\nHTTP 200\n[Asserts]\nheader \"Expires\" toDate \"%a, %d %b %Y %H:%M:%S GMT\" daysBeforeNow > 1000\n\nGET https://example.org/api/books\nHTTP 200\n[Asserts]\njsonpath \"$.published\" == \"2023-01-23T18:25:43.511Z\"\njsonpath \"$.published\" toDate \"%Y-%m-%dT%H:%M:%S%.fZ\" format \"%A\" == \"Monday\"\njsonpath \"$.published\" toDate \"%+\" format \"%A\" == \"Monday\" # %+ can be used to parse ISO 8601 / RFC 3339\n```\n\n----------------------------------------\n\nTITLE: Testing File Body using `file` keyword in Hurl\nDESCRIPTION: Verifies an HTTP response body against the content of a file. It uses the `file` assertion, where the body of the response must match the contents of the specified file (`data.bin`).  The file assertion enables validation of large data responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_66\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Verifying SSL certificate properties in Hurl\nDESCRIPTION: Demonstrates how to check SSL certificate attributes such as Subject, Issuer, Expiry Date, and Serial Number to ensure secure connections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_42\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches \"[0-9af]+\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Query Parameter with Date\nDESCRIPTION: This snippet demonstrates the use of the `newDate` function to create a dynamic query parameter representing the current date and time in ISO 8601 format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_25\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/foo\n[Query]\ndate: {{newDate}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Body Content - Hurl\nDESCRIPTION: This snippet demonstrates how to assert the content of the HTTP response body. It shows how to verify if the body contains specific text using the `body contains` predicate.  It also includes an example of handling character encoding using the `Content-Type` header and the `bytes decode` filter.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_170\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nbody contains \"<h1>Welcome!</h1>\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded with GB 2312 (see https://en.wikipedia.org/wiki/GB_2312)\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html; charset=gb2312\"\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB 2312\nbody contains \"你好世界\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded using GB 2312.\n# But, the 'Content-Type' HTTP response header doesn't precise any charset,\n# so we decode explicitly the bytes.\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB2312\nbytes decode \"gb2312\" contains \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Generating a JUnit XML Report in Hurl (Bash)\nDESCRIPTION: Creates a JUnit XML report file (`FILE`) detailing the test results, suitable for integration with CI/CD systems. If the specified report file already exists, it will be updated with the new results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n--report-junit <FILE>\n```\n\n----------------------------------------\n\nTITLE: Repeating Hurl File Execution (Bash)\nDESCRIPTION: Repeats the entire sequence of input Hurl files a specified number of times (`NUM`). Use -1 for an infinite loop. For example, with `a.hurl b.hurl` and `--repeat 2`, the execution order is `a.hurl, b.hurl, a.hurl, b.hurl`. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n--repeat <NUM>\n```\n\n----------------------------------------\n\nTITLE: Explicitly Asserting HTTP Version\nDESCRIPTION: This code provides explicit assertions for the HTTP version.  It sends GET requests and uses `[Asserts]` to check the version number using exact match or greater than/less than comparison.  `version == \"3\"` checks for a specific version, and `version toFloat > 1.1` checks if the HTTP version is greater than 1.1.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_48\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://foo.com\nHTTP 200\n[Asserts]\nversion == \"3\"\n\nGET https://bar.com\nHTTP 200\n[Asserts]\nversion == \"2\"\nversion toFloat > 1.1\n```\n```\n\n----------------------------------------\n\nTITLE: Using the --secret Option in Hurl (bash)\nDESCRIPTION: Defines a secret variable as a key-value pair (<NAME=VALUE>). Values defined as secrets will be redacted from logs and reports. Secrets can be used like regular variables within Hurl files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_117\n\nLANGUAGE: bash\nCODE:\n```\n--secret <NAME=VALUE>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-base64\nDESCRIPTION: Defines the grammar rule 'oneline-base64' used for representing single-line base64 encoded data. It starts with the literal 'base64,', followed by a sequence of allowed base64 characters (A-Z, 0-9, +, -, =, space, newline), and ends with a semicolon ';'. This rule is used by 'start-with-predicate', 'end-with-predicate', 'predicate-value', and 'bytes'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_32\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\nbase64, [A-Z0-9+-= \\n]+ ;\n```\n\n----------------------------------------\n\nTITLE: Capturing Data with Expressions in Hurl\nDESCRIPTION: This snippet demonstrates capturing values using expressions within the [Captures] section.  It shows the expected format and how to use expressions for extracting data from the response body, while maintaining compatibility with existing capture formats using query functions. It uses the 'xpath' function to extract content from an HTML meta tag.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/expressions.md#_snippet_0\n\nLANGUAGE: Hurl\nCODE:\n```\n[Captures]\ncsrf_token: xpath \"string(//meta[@name='_csrf_token']/@content)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Captures and Asserts in Hurl\nDESCRIPTION: This example demonstrates the basic syntax of capturing and asserting data within a Hurl script. It outlines how to define variables to extract data from the response and then assert against these captured values, using filters to process extracted values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_188\n\nLANGUAGE: hurl\nCODE:\n```\n# Captures:\nname: jsonpath \"$user.id\" replace /\\d/ \"x\"\n# Asserts:\nheader \"x-servers\" split \",\" count == 2\nheader \"x-servers\" split \",\" nth 0 == \"rec1\"\nheader \"x-servers\" split \",\" nth 1 == \"rec3\"\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Checking final URL after redirection in Hurl\nDESCRIPTION: Demonstrates how to verify the final URL after following redirects using the url assertion and the location option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/redirecting\n[Options]\nlocation: true\nHTTP 200\n[Asserts]\nurl == \"https://example.org/redirected\"\n```\n\n----------------------------------------\n\nTITLE: Querying with jsonpath After XPath Extraction in Hurl (Hurl)\nDESCRIPTION: Combines XPath and jsonpath filters by first capturing a value using XPath and then using jsonpath for further extraction on the captured variable. Demonstrates cross-query use in [Captures] and [Asserts]. Inputs are HTTP responses with mixed structured data; outputs are variables and assertions. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Captures]\nbooks: xpath \"string(//body/@data-books)\" \n[Asserts]\nvariable \"books\" jsonpath \"$[0].name\" == \"Dune\"\nvariable \"books\" jsonpath \"$[0].author\" == \"Franck Herbert\"\n```\n\n----------------------------------------\n\nTITLE: Generating an HTML Report in Hurl (Bash)\nDESCRIPTION: Creates an HTML report summarizing the test results in the specified directory (`DIR`). If a report already exists in that directory, it will be updated with the new results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n--report-html <DIR>\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Body using Generic Multiline String in Hurl\nDESCRIPTION: Provides an example of using the multiline string syntax with the `json` language identifier (```json ... ```) specifically for JSON content. This approach automatically sets the `Content-Type` header to `application/json`. It's functionally equivalent to the direct JSON body syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_117\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/dogs\n```json\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Hurl File with Cookie Assertions\nDESCRIPTION: This snippet introduces cookie assertions to test the presence and attributes of cookies returned in the HTTP response. It checks for `x-session-id` existence and its `HttpOnly` attribute.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_6\n\nLANGUAGE: Hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n# Testing HTTP response headers:\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\ncookie \"x-session-id\" exists\ncookie \"x-session-id[HttpOnly]\" exists\n```\n\n----------------------------------------\n\nTITLE: Filename Parsing Content Combining Text and Escapes\nDESCRIPTION: Defines 'filename' as a series of 'filename-content' or 'placeholder' repeated, used in parsing filenames within HURL which may include escape sequences.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_56\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"filename\">filename</span><span class=\"grammar-usedby\">(used by <a href=\"#file-value\">file-value</a>,&nbsp;<a href=\"#ca-certificate-option\">ca-certificate-option</a>,&nbsp;<a href=\"#oneline-file\">oneline-file</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><a href=\"#filename-content\">filename-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple HTTP Requests in Sequence (Hurl Language)\nDESCRIPTION: This snippet illustrates how to execute several HTTP GET requests in a defined order using Hurl. Each request targets a different API endpoint, such as health checks or workflow steps, without capturing or asserting response data. The Hurl tool is required to run this script, and endpoints are expected to be responsive. Inputs are the listed URIs; outputs are the raw HTTP responses for each request. Limitations include lack of internal assertions, so explicit response validation is not performed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/health\nGET https://example.org/api/step1\nGET https://example.org/api/step2\nGET https://example.org/api/step3\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Since a Date with daysBeforeNow Filter in Hurl (Hurl)\nDESCRIPTION: Applies the daysBeforeNow filter to calculate the number of days since a given date in the HTTP response, useful for validating start dates or historical values. Typically used with certificate or header fields. Inputs are past dates from headers or certs; outputs are integer day counts. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Start-Date\" daysBeforeNow < 100\n```\n\n----------------------------------------\n\nTITLE: Checking libcurl Dependencies on macOS\nDESCRIPTION: Commands to identify which libcurl library is used by Hurl on macOS. Shows how to locate the Hurl binary and display its dependencies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\n$ which hurl\n/opt/homebrew/bin/hurl\n$ otool -L /opt/homebrew/bin/hurl:\n\t/usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1858.112.0)\n\t/usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current version 9.0.0)\n\t/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n```\n\n----------------------------------------\n\nTITLE: Using --location-trusted Option in Hurl\nDESCRIPTION: This option allows sending the name and password to all hosts that the site may redirect to. It behaves similarly to `-L, --location` but with the added functionality of passing credentials.  It can potentially introduce a security risk if a site redirects to another site where your authentication data is sent.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\n--location-trusted\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Body SHA-256 Hash with Hurl DSL\nDESCRIPTION: Shows how to validate integrity of the HTTP response body by asserting its SHA-256 hash matches an expected hexadecimal value. The hash is computed after decompression, so it is unaffected by response content encoding, ensuring accurate validation against compressed or uncompressed data. Dependencies include availability of SHA-256 hashing functionality and correct hex digest input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_160\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Without content encoding compression:\nGET https://example.org/a.txt\nHTTP 200\n[Asserts]\nsha256 == hex,abcdef;\n\n# With content encoding compression:\nGET https://example.org/a.txt\nAccept-Encoding: brotli\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" == \"brotli\"\nsha256 == hex,abcdef;\n```\n\n----------------------------------------\n\nTITLE: Using the --version Option in Hurl (bash)\nDESCRIPTION: Prints the installed Hurl version information and exits. The short form -V is also available.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_129\n\nLANGUAGE: bash\nCODE:\n```\n-V, --version\n```\n\n----------------------------------------\n\nTITLE: Capturing SSL Certificate Attributes from HTTP Response with Hurl DSL\nDESCRIPTION: Captures specified SSL certificate properties from the HTTPS connection that received the response. Supported attributes include Subject, Issuer, Start-Date, Expire-Date, and Serial-Number. Syntax requires variable name, colon, 'certificate' keyword, and the attribute name in quotes. Useful for monitoring and auditing SSL certificates.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_157\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Captures]\ncert_subject: certificate \"Subject\"\ncert_issuer: certificate \"Issuer\"\ncert_expire_date: certificate \"Expire-Date\"\ncert_serial_number: certificate \"Serial-Number\"\n```\n\n----------------------------------------\n\nTITLE: Asserting a File Body Response\nDESCRIPTION: This snippet shows how to assert a response body from the contents of a local file. The assertion starts with `file,` and specifies the filename, ending with `;`. The file path is relative to the Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Including Special Characters in Strings in Hurl\nDESCRIPTION: Demonstrates how to use escaped special characters and Unicode scalars in string assertions within Hurl files. Requires the Hurl command-line tool to interpret the Hurl syntax. The snippet sends a GET request, asserts the JSON field 'slideshow.title' using both a literal emoji and its Unicode escape sequence, showing they are equivalent. Input is an HTTP GET, output is assert validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_89\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n# The following assert are equivalent:\n[Asserts]\njsonpath \"$.slideshow.title\" == \"A beautiful ✈!\"\njsonpath \"$.slideshow.title\" == \"A beautiful \\u{2708}!\"\n```\n\n----------------------------------------\n\nTITLE: Saving HTTP Response Body to File in Hurl\nDESCRIPTION: This Hurl script demonstrates how to save the response body of a specific request. The first GET request includes an `[Options]` section with `output: cat123.txt`, which directs Hurl to save the response body to the file `cat123.txt` instead of printing it. The second GET request executes normally. Both requests assert HTTP 200 status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.ord/cats/123\n[Options]\noutput: cat123.txt    # use - to output to stdout\nHTTP 200\n\nGET https://example.ord/dogs/567\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Base64 Request Body in Hurl\nDESCRIPTION: This snippet demonstrates setting a request body using base64 encoding. It starts with 'base64,' and ends with ';'. It supports standard MIME base64 encoding, allowing newlines and whitespaces to be ignored during decoding, and padding characters '='.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_119\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org\n# Some random comments before body\nbase64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIG\nFkaXBpc2NpbmcgZWxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0g\naGVuZHJlcml0LCBlc3QganVzdG8gYmliZW5kdW0gbWV0dXMsIG5lYyBydXRydW\nbSB0b3J0b3IgbWFzc2EgaWQgbWV0dXMuID07\n\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication (Authorization Header)\nDESCRIPTION: This snippet shows how basic authentication can be achieved by manually setting the `Authorization` header in the request. It provides an example of how to generate the base64 encoded value of the username and password for use in the header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\n# Authorization header value can be computed with `echo -n 'bob:secret' | base64`\nGET https://example.org/protected\nAuthorization: Basic Ym9iOnNlY3JldA==\n```\n\n----------------------------------------\n\nTITLE: Running an Example Integration Test on Unix - shell\nDESCRIPTION: This script runs an integration test using the Hurl command-line binary. It sets strict error and pipefail policies, then executes a test request using the specified test file with --include and --verbose options. Dependencies: bash, Hurl binary installed. Parameter 'tests_ok/include.hurl' designates the input Hurl test file; key outputs are test execution results to standard output and stderr.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nset -Eeuo pipefail\nhurl tests_ok/include.hurl --include --verbose\n\n```\n\n----------------------------------------\n\nTITLE: Filter: Count\nDESCRIPTION: This snippet showcases the use of the `count` filter to check the number of items in a collection retrieved by a JSONPath query.  It defines an assertion that checks if the number of books is equal to 12.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_189\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Specifying Proxy with Hurl CLI\nDESCRIPTION: Configure Hurl to use a specified proxy server for requests. The proxy address should follow the format `[PROTOCOL://]HOST[:PORT]`. This option allows routing Hurl's HTTP requests through an intermediary.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_17\n\nLANGUAGE: cli\nCODE:\n```\n-x, --proxy <[PROTOCOL://]HOST[:PORT]>\n```\n\n----------------------------------------\n\nTITLE: Define JSON string text characters - Hurl Grammar\nDESCRIPTION: Defines the allowed characters for standard text segments within a JSON string using a regular expression. It excludes double quotes '\"' and backslashes '\\'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_71\n\nLANGUAGE: Grammar\nCODE:\n```\n~[\\\"\\\\]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Response Body Output in Hurl (Bash)\nDESCRIPTION: Prevents Hurl from printing the body of the last response to the standard output, which it does by default. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n--no-output\n```\n\n----------------------------------------\n\nTITLE: Running Hurl with Input File (Shell)\nDESCRIPTION: Executes the Hurl command-line tool, processing HTTP requests defined within the specified file (`session.hurl`). Hurl will execute the requests sequentially and output the response body of the last request by default.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl session.hurl\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Tests from STDIN via Docker\nDESCRIPTION: Executes a Hurl HTTP test command provided through standard input against the Docker image, enabling quick inline testing without creating a file. It requires the container to support reading from stdin and performing the test.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP 200\" | docker run --rm -i ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\" --test --color --very-verbose\n```\n\n----------------------------------------\n\nTITLE: Using the --test Option in Hurl (bash)\nDESCRIPTION: Activates test mode. In this mode, HTTP response bodies are suppressed, progress is shown for each file, and a summary report is displayed after all files are run. Files run in parallel by default in test mode; use --jobs 1 for sequential execution. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_119\n\nLANGUAGE: bash\nCODE:\n```\n--test\n```\n\n----------------------------------------\n\nTITLE: Running Hurl with Location Option in Shell\nDESCRIPTION: This shell snippet shows how to invoke the Hurl command-line tool with the `--location` option enabled, instructing Hurl to follow HTTP redirections globally for every entry in the specified Hurl file. It demonstrates basic usage and the relationship between command-line options and Hurl file entries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report with Hurl\nDESCRIPTION: This shell command demonstrates how to generate an HTML report from Hurl tests.  It uses the `--test` flag to execute the tests and `--report-html` followed by a directory to specify the output location.  It requires the Hurl tool to be installed, and `*.hurl` files in the current directory or provided directory as the input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-html build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Example Resulting JSON Body After Templating\nDESCRIPTION: Shows the final JSON payload of the PUT request after Hurl substitutes the variables provided via the command line (e.g., `a_string` becomes \"apple\") and evaluates functions (`newDate`). This represents the actual data sent in the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_208\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key0\": \"apple\",\n    \"key1\": true,\n    \"key2\": null,\n    \"key3\": 42,\n    \"key4\": \"2024-12-02T13:39:45.936643Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hurl file with JSON body assert\nDESCRIPTION: A simple Hurl file that makes a GET request and expects a specific JSON response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_0\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/json\n{\n  \"greeting\": \"Hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Datas with Functions\nDESCRIPTION: This snippet discusses how to use functions like `newUuid` and `newDate` in templates to generate dynamic data. These functions are useful for creating unique values or timestamps.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_24\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/foo\n{\n  \"name\": \"foo\",\n  \"email\": \"{{newUuid}}@test.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: url-decode-filter\nDESCRIPTION: Defines the 'url-decode-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'urlDecode' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_88\n\nLANGUAGE: Grammar\nCODE:\n```\nurlDecode\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Header in Hurl\nDESCRIPTION: This code snippet shows header assertions using `header` keyword. The example validates the value of the `Location` header using `contains` predicate.  It also shows a matching header with a regular expression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_165\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 302\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\nheader \"Last-Modified\" matches /\\d{2} [a-z-A-Z]{3} \\d{4}/\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report\nDESCRIPTION: This code snippet demonstrates how to generate an HTML report using the Hurl command-line tool.  It runs the tests and produces an HTML report in the specified directory. The `--test` flag is used to execute the tests, and the `--report-html` option specifies HTML report generation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --test --report-html build/report/ *.hurl\n```\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Response Body as Raw Bytes with Hurl DSL\nDESCRIPTION: Captures the entire HTTP response body as raw bytes without decoding. The variable declaration uses a variable name, colon, and the keyword 'bytes' inside [Captures]. This can be useful to store or process binary data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_151\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Captures]\nmy_data: bytes\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Test Report with Hurl\nDESCRIPTION: Command to run tests and generate a TAP (Test Anything Protocol) report for all Hurl files in the current directory. The report will be saved to build/report.txt.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-tap build/report.txt *.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Body Bytes with Hurl DSL\nDESCRIPTION: Illustrates asserting properties of the raw HTTP response body byte stream after decompression. It can check the beginning bytes, exact byte count, and correlate them with header values like Content-Length. This is important for binary data validation. Dependencies include a server delivering the binary data and decompression handling within Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_156\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\nbytes count == 12424\nheader \"Content-Length\" == \"12424\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Until a Date with daysAfterNow Filter in Hurl (Hurl)\nDESCRIPTION: Uses the daysAfterNow filter to compute how many days from now until a specified future date provided by a certificate parameter in the HTTP response. Effective for certificates and expiration checks. Inputs are certificate date fields; outputs are numeric day differences. Requires Hurl and SSL certificate details in the HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_9\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Expire-Date\" daysAfterNow > 15\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Request Debug Options (Hurl)\nDESCRIPTION: Illustrates how to enable very-verbose logging for an individual request in a .hurl file using the [Options] section. Requires Hurl and a server serving test endpoints. The [Options] section for specific requests enables targeted debugging, with output as detailed logs for the chosen request only.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_89\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n\nGET https://bar.com\n[Options]\nvery-verbose: true\nHTTP 200\n\nGET https://baz.com\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing CSRF Validation with Hurl\nDESCRIPTION: This Hurl snippet defines a test case to verify that a POST request to the /signup endpoint returns a 403 status code, indicating that the server correctly enforces CSRF protection. The snippet includes form data (username, name, email, password) and expects an HTTP 403 response. This confirms that the server rejects the request without a valid CSRF token.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_6\n\nLANGUAGE: Hurl\nCODE:\n```\nPOST http://localhost:3000/signup\n[Form]\nusername: bob\nname: Bob\nemail: bob78@example.net\npassword: 12345678\nHTTP 403\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit XML Report with Hurl CLI\nDESCRIPTION: Generates a JUnit XML test report to the specified `<FILE>` using the `--report-junit` option. If the file exists, it will be updated with new test results. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_98\n\nLANGUAGE: shell\nCODE:\n```\n--report-junit <FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining variable-name Hurl Grammar\nDESCRIPTION: Defines the syntax for a variable name in Hurl grammar. It specifies using regular expressions that a variable name must start with an alphabet character (`[A-Za-z]`) followed by zero or more alphanumeric characters, underscores, or hyphens (`[A-Za-z_-0-9]*`). This rule is used by `variable-definition` and `#expr`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_253\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n[A-Za-z] [A-Za-z_-0-9]*\n```\n\n----------------------------------------\n\nTITLE: Verify Built Debian Package Source (Bash)\nDESCRIPTION: Lists the generated source package files, particularly the .dsc file, verifying the build process completed successfully.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nls -l hurl_*_source.changes\n```\n\n----------------------------------------\n\nTITLE: Implicit Response Assertions: Version and Status\nDESCRIPTION: Illustrates how to verify HTTP protocol version and status code in responses, including specific versions (`HTTP/1.0`, `HTTP/2`, etc.) and wildcards (`HTTP`, `*`) to disable particular checks. Enables broad or precise protocol validation for HTTP responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_142\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/404.html\nHTTP 404\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/pets\nHTTP *\n[Asserts]\nstatus > 400\nstatus <= 500\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/pets\nHTTP/2 200\n```\n\n----------------------------------------\n\nTITLE: Cookie Assert with Value and Attributes\nDESCRIPTION: Hurl example demonstrating cookie assertions, checking both cookie values and attributes like Expires, Max-Age, Domain, Path, Secure, HttpOnly, and SameSite. It showcases how to use `exists`, `not exists`, `==`, and `contains` predicates for various cookie attributes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_25\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/cookies/set\nHTTP 200\n\n# Explicit check of Set-Cookie header value. If the attributes are\n# not in this exact order, this assert will fail. \nSet-Cookie: LSID=DQAAAKEaem_vYg; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/accounts; SameSite=Lax;\nSet-Cookie: HSID=AYQEVnDKrdst; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; HttpOnly; Path=/\nSet-Cookie: SSID=Ap4PGTEq; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/\n\n# Using cookie assert, one can check cookie value and various attributes.\n[Asserts]\ncookie \"LSID\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Value]\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Expires]\" exists\ncookie \"LSID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"LSID[Max-Age]\" not exists\ncookie \"LSID[Domain]\" not exists\ncookie \"LSID[Path]\" == \"/accounts\"\ncookie \"LSID[Secure]\" exists\ncookie \"LSID[HttpOnly]\" exists\ncookie \"LSID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Hurl Variables via `--variables-file` Option (Shell)\nDESCRIPTION: Demonstrates injecting variables from a file (`vars.env`) into a Hurl execution (`test.hurl`) using the `--variables-file` option. The file should contain `name=value` pairs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_214\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variables-file vars.env test.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting a JSON Response Body with multiline\nDESCRIPTION: This snippet demonstrates an alternative way of asserting a JSON response body, using a multiline string with a `json` identifier. The result is equivalent to the previous example.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\n# Get a doggy thing:\nGET https://example.org/api/dogs/{{dog-id}}\nHTTP 200\n```json\n{\n    \"id\": 0,\n    \"name\": \"Frieda\",\n    \"picture\": \"images/scottish-terrier.jpeg\",\n    \"age\": 3,\n    \"breed\": \"Scottish Terrier\",\n    \"location\": \"Lisco, Alabama\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple HTTP Headers in Hurl\nDESCRIPTION: Demonstrates how to include multiple HTTP request headers in a Hurl file. Headers are listed line by line directly after the method and URL, each consisting of a name, a colon, and a value. They must appear before any optional sections or the body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Evaluating XPath Expression with `xpath` Filter (Hurl)\nDESCRIPTION: Shows how to use the `xpath` filter in Hurl to evaluate an XPath expression against an XML or HTML response body. The example combines it with `bytes decode` to handle specific character encodings before evaluating the XPath.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_207\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello_gb2312\nHTTP 200\n[Asserts]\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Request with In-File User (Hurl)\nDESCRIPTION: This snippet extends AWS Signature Version 4 request by specifying credentials directly in the Hurl file via the [Options] section. Dependencies are Hurl with a valid AWS username and secret defined as 'user'. The request includes necessary AWS and STS options; inputs are endpoint URL and credentials, with the output being an authenticated request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_78\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\nuser: bob=secret\n[FormParams]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Defining json-string-text Grammar Rule\nDESCRIPTION: Defines the permissible characters for standard JSON string text. It matches any character that is *not* a double quote `\"` or a backslash `\\`. This rule is used by the `json-string-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_238\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n~[\"\\\\]\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Request Options and Using resolve (Hurl)\nDESCRIPTION: Demonstrates the use of Hurl's [Options] section within a .hurl file to specify per-request options such as resolve for custom DNS resolution. Requires Hurl and a server accepting requests at specified domains. The snippet includes both unmodified and resolved requests, expecting an HTTP 200 and, for the resolved endpoint, a body containing 'Hello World!'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_80\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://bar.com\nHTTP 200\n\n\nGET http://foo.com:8000/resolve\n[Options]\nresolve: foo.com:8000:127.0.0.1\nHTTP 200\n`Hello World!`\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Values - Hurl\nDESCRIPTION: This snippet demonstrates how to assert the values and attributes of cookies returned in the `Set-Cookie` header of an HTTP response. It uses the `cookie` keyword followed by the cookie name and attribute, along with comparison operators.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_169\n\nLANGUAGE: hurl\nCODE:\n```\n# not in this exact order, this assert will fail. \nSet-Cookie: LSID=DQAAAKEaem_vYg; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/accounts; SameSite=Lax;\nSet-Cookie: HSID=AYQEVnDKrdst; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; HttpOnly; Path=/\nSet-Cookie: SSID=Ap4PGTEq; Domain=localhost; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly; Path=/\n\n# Using cookie assert, one can check cookie value and various attributes.\n[Asserts]\ncookie \"LSID\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Value]\" == \"DQAAAKEaem_vYg\"\ncookie \"LSID[Expires]\" exists\ncookie \"LSID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"LSID[Max-Age]\" not exists\ncookie \"LSID[Domain]\" not exists\ncookie \"LSID[Path]\" == \"/accounts\"\ncookie \"LSID[Secure]\" exists\ncookie \"LSID[HttpOnly]\" exists\ncookie \"LSID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Executing Batched Commands with GNU Parallel - Shell\nDESCRIPTION: Demonstrates running multiple echo or hurl commands in parallel using GNU Parallel. The basic form distributes inputs using 'echo' or hurl across arguments A, B, C, D, showing how command output order may vary. Requires GNU Parallel to be installed and the appropriate scripts to be accessible.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel echo ::: A B C D\nA\nC\nB\nD\n$ parallel echo ::: A B C D\nB\nA\nC\nD\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel hurl ::: a.hurl b.hurl c.hurl d.hurl\nABCD%\n$ parallel hurl ::: a.hurl b.hurl c.hurl d.hurl\nBACD%\n```\n\n----------------------------------------\n\nTITLE: Setting 'very-verbose' Option - Hurl\nDESCRIPTION: This Hurl snippet shows how to use the `[Options]` section to enable verbose logging for a specific entry, aiding in debugging and detailed inspection of the request and response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\n# ... previous entries\n\nGET https://api.example.org\n[Options]\nvery-verbose: true\nHTTP 200\n\n# ... next entries\n```\n\n----------------------------------------\n\nTITLE: AWS Signature with Credentials in Options Section\nDESCRIPTION: Example of using AWS Signature Version 4 authentication with credentials provided in the Options section. Includes user credentials and form parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_67\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\nuser: bob=secret\n[Form]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Files with Glob Pattern using Hurl\nDESCRIPTION: Specifies input Hurl files using a glob pattern. Multiple --glob flags can be used. Supports common Unix glob patterns (*, ?, []). Requires quoting the pattern to prevent shell expansion. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n--glob <GLOB>\n```\n\n----------------------------------------\n\nTITLE: Hurl File with XPath Assertion - Failure Example\nDESCRIPTION: This snippet demonstrates a failed assertion, specifically by intentionally setting an incorrect value for the HTML title tag in an XPath assertion. It illustrates how Hurl reports assertion failures.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_2\n\nLANGUAGE: Hurl\nCODE:\n```\n# Our first Hurl file, just checking\n# that our server is up and running.\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Bax\"\n```\n\n----------------------------------------\n\nTITLE: Asserting XML Body with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to verify the response body when it's in XML format.  It expects an XML response and asserts the content implicitly by matching the entire XML structure against the expected XML.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_52\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Check Hurl\nDESCRIPTION: This snippet adds an assertion to ensure that HTML comments are not leaked in the signup page's response. It retrieves the signup page and uses an XPath assertion to verify that the number of HTML comment nodes is zero. This is a security measure to prevent potential information leakage.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n# Check that we don't leak comments\nGET http://localhost:3000/signup\nHTTP 200\n[Captures]\ncsrf_token: xpath \"string(//input[@name='_csrf']/@value)\"\n[Asserts]\nxpath \"//comment\" count == 0\n```\n\n----------------------------------------\n\nTITLE: Enabling Trusted Redirection for One Request in Hurl\nDESCRIPTION: Demonstrates setting up trusted redirection for a specific request using [Options] and 'location-trusted: true'. Needs the Hurl command-line interpreter. The snippet submits a GET request with an option to follow trusted redirections, asserting the final HTTP 200 response. Inputs are URL and options; output is successful navigation through redirect.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_97\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\n[Options]\nlocation-trusted: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Unescaping HTML Entities in Hurl\nDESCRIPTION: Converts HTML character references into actual Unicode characters, facilitating parsing of escaped HTML content received from APIs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_184\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$..escaped_html\" htmlUnescape == \"Foo © bar 𝌆\"\n```\n\n----------------------------------------\n\nTITLE: Templating XML Body in Hurl\nDESCRIPTION: This Hurl snippet demonstrates the use of templates with XML bodies. It constructs a POST request to send an XML body. The XML body includes template variables for login and password, allowing dynamic values to be included in the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_52\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/echo/post/xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Request>\n    <Login>{{login}}</Login>\n    <Password>{{password}}</Password>\n</Request>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Arch Linux/Manjaro\nDESCRIPTION: Installs Hurl on Arch Linux or Manjaro using the pacman package manager.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -Sy hurl\n```\n\n----------------------------------------\n\nTITLE: Upload Package to PPA (Bash)\nDESCRIPTION: Uploads the source package changes files to the specified PPA using dput, publishing the package to Ubuntu PPA repository.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndput ppa:lepapareil/hurl hurl_*_source.changes\n```\n\n----------------------------------------\n\nTITLE: Parallel Hurl Test Execution with Verbose Output - Shell\nDESCRIPTION: Shows a verbose parallel execution of hurl scripts using GNU Parallel and the --verbose flag, capturing expanded details such as execution entries, request URLs, cookies, and HTTP responses for each script concurrently. Output demonstrates interleaved results and command-level diagnostics. Dependencies include the hurl CLI, test files, and GNU Parallel.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel hurl --verbose ::: a.hurl b.hurl c.hurl d.hurl\nA* ------------------------------------------------------------------------------\n* Executing entry 1\n*\n* Cookie store:\n*\n* Request:\n* GET http://localhost:8000/a\n*\n...\n< Connection: close\n<\n*\nB* ------------------------------------------------------------------------------\n* Executing entry 1\n*\n* Cookie store:\n*\n* Request:\n* GET http://localhost:8000/b\n*\n...\n< Connection: close\n<\n*\nC* ------------------------------------------------------------------------------\n* Executing entry 1\n*\n* Cookie store:\n*\n* Request:\n* GET http://localhost:8000/c\n*\n...\n< Connection: close\n<\n*\nD* ------------------------------------------------------------------------------\n* Executing entry 1\n*\n* Cookie store:\n*\n* Request:\n* GET http://localhost:8000/d\n*\n...\n< Connection: close\n<\n*\n```\n\n----------------------------------------\n\nTITLE: Sending a SOAP API Request Using Hurl (Hurl)\nDESCRIPTION: This snippet demonstrates how to construct and send a SOAP request using Hurl, including setting the Content-Type for SOAP XML, the SOAPAction header, and specifying the SOAP envelope and body in the request. The main dependency is the Hurl tool. The POST request expects a 200 HTTP status code and requires the definition of an XML request payload. Inputs include the endpoint URL and XML body; the primary output is a validated HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_74\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Using the --verbose Option in Hurl (bash)\nDESCRIPTION: Enables verbose output on the standard error stream, useful for debugging. Output lines starting with '>' indicate sent data, '<' indicate received data, and '*' indicate informational messages from Hurl. The short form -v is also available.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_126\n\nLANGUAGE: bash\nCODE:\n```\n-v, --verbose\n```\n\n----------------------------------------\n\nTITLE: Initializing Request Body Variables via Command Line (Shell)\nDESCRIPTION: Demonstrates how to run a Hurl file that templates a request body by providing values for the variables (`a_string`, `a_bool`, `a_null`, `a_number`) using the `--variable` command-line option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_207\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple --variable a_bool=true --variable a_null=null --variable a_number=42 test.hurl\n```\n\n----------------------------------------\n\nTITLE: Converting String to Date with `toDate` Filter (Hurl)\nDESCRIPTION: Shows how to convert a string to a date value using the `toDate` filter with a specific format string (strftime format). This allows date-based assertions, such as comparing against the current date.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_201\n\nLANGUAGE: hurl\nCODE:\n```\nGET https:///example.org\nHTTP 200\n[Asserts]\nheader \"Expires\" toDate \"%a, %d %b %Y %H:%M:%S GMT\" daysBeforeNow > 1000\n```\n\n----------------------------------------\n\nTITLE: Executing Up to Specific Entry with Hurl CLI\nDESCRIPTION: Process the Hurl file only up to the specified entry number (1-based index). This is useful for debugging a session by executing only a subset of the requests defined in the file. This option is CLI-only.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_29\n\nLANGUAGE: cli\nCODE:\n```\n--to-entry <ENTRY_NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Request With Headers\nDESCRIPTION: This snippet showcases a request with HTTP headers defined. Headers are used to provide additional information such as the `User-Agent`, `Accept`, `Accept-Language`, and `Connection`.  Headers follow the URL directly without any section name.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_134\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with Scoop on Windows\nDESCRIPTION: Installs Hurl on Windows using the Scoop package manager.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ scoop install hurl\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Build and libcurl Version - Shell\nDESCRIPTION: These shell snippets display how to check the version of Hurl and its linked libcurl version as well as feature support on macOS. Prerequisites are the Hurl CLI installed in the search PATH. The snippets execute the 'hurl --version' command to print version details. Inputs are none. Outputs are tool and library version data, including supported features.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_96\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --version\nhurl 2.0.0 libcurl/7.79.1 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.11 nghttp2/1.45.1\nFeatures (libcurl):  alt-svc AsynchDNS HSTS HTTP2 IPv6 Largefile libz NTLM NTLM_WB SPNEGO SSL UnixSockets\nFeatures (built-in): brotli\n\n```\n\n----------------------------------------\n\nTITLE: Testing Single Line Text Response in Hurl\nDESCRIPTION: Example of testing a single line text response using backtick notation in Hurl. This is a concise way to assert simple string responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_46\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Testing SSL Certificate Properties in Hurl\nDESCRIPTION: This snippet demonstrates how to check properties of the SSL certificate in a Hurl request. It checks the subject, issuer, expiry date, and serial number of the certificate. The `daysAfterNow` predicate is used to ensure the certificate expires after a certain number of days.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_41\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches /[\\da-f]+/\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl with Long Error Format\nDESCRIPTION: This command runs a Hurl file with a long error format, providing additional details about errors including the response headers and body when assertions fail. This provides additional context in CI/CD.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --error-format long --test basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with npm\nDESCRIPTION: Installs the Hurl npm package as a development dependency for a Node.js project.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev @orangeopensource/hurl\n```\n\n----------------------------------------\n\nTITLE: Specifying Hosts to Bypass Proxy with Hurl CLI\nDESCRIPTION: Provides a comma-separated list of hosts (`<HOST(S)>`) that should not use the configured proxy, using the `--noproxy` option. This overrides the `no_proxy` environment variable if set.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\n--noproxy <HOST(S)>\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report\nDESCRIPTION: This snippet demonstrates generating a TAP (Test Anything Protocol) report using Hurl.  The `--test` flag executes the tests, and `--report-tap` generates the TAP report, which can be used for integration with other testing tools. The output file path is specified.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --test --report-tap build/report.txt *.hurl\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Readiness Check to Integration Script (Bash)\nDESCRIPTION: Updates `bin/integration.sh` to include a `wait_for_url` function. This function uses Hurl with the `--retry` option (passed as the second argument `$2`) to repeatedly check if a given URL (passed as the first argument `$1`) returns an HTTP 200 status, ensuring the application server is ready before proceeding. The script now starts the container, waits for readiness, and then stops the container.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -eu\n\nwait_for_url () {\n    echo \"Testing $1...\"\n    printf 'GET %s\\nHTTP 200' \"$1\" | hurl --retry \"$2\" > /dev/null;\n    return 0\n}\n\necho \"Starting container\"\ndocker run --name movies --rm --detach --publish 3000:3000 ghcr.io/jcamiel/hurl-express-tutorial:latest\n\necho \"Waiting server to be ready\"\nwait_for_url \"$1\" 60\n\necho \"Stopping container\"\ndocker stop movies\n```\n\n----------------------------------------\n\nTITLE: XPath Assert with XML Namespaces\nDESCRIPTION: Hurl example demonstrating XPath assertions on XML content with namespaces. It shows how to use namespace prefixes and local-name functions to query elements and validate their values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_32\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/assert-xpath\nHTTP 200\n[Asserts]\n\nxpath \"string(//bk:book/bk:title)\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[name()='bk:book']/*[name()='bk:title'])\" == \"Cheaper by the Dozen\"\nxpath \"string(//*[local-name()='book']/*[local-name()='title'])\" == \"Cheaper by the Dozen\"\n\nxpath \"string(//bk:book/isbn:number)\" == \"1568491379\"\nxpath \"string(//*[name()='bk:book']/*[name()='isbn:number'])\" == \"1568491379\"\nxpath \"string(//*[local-name()='book']/*[local-name()='number'])\" == \"1568491379\"\n```\n\n----------------------------------------\n\nTITLE: Converting Hurl Files to JSON Format\nDESCRIPTION: Command to convert a Hurl file to JSON format using hurlfmt, which allows for parsing and processing Hurl files with standard JSON tools like jq.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\n$ hurlfmt test.hurl --out json | jq\n{\n  \"entries\": [\n    {\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"https://example.org/api/users/1\",\n        \"headers\": [\n          {\n            \"name\": \"User-Agent\",\n            \"value\": \"Custom\"\n          }\n        ]\n      },\n      \"response\": {\n        \"version\": \"HTTP\",\n        \"status\": 200,\n        \"asserts\": [\n          {\n            \"query\": {\n              \"type\": \"jsonpath\",\n              \"expr\": \"$.name\"\n            },\n            \"predicate\": {\n              \"type\": \"==\",\n              \"value\": \"Bob\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a TAP Report in Hurl (Bash)\nDESCRIPTION: Creates a Test Anything Protocol (TAP) report file (`FILE`) summarizing the test results. If the specified report file already exists, it will be updated with the new results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n--report-tap <FILE>\n```\n\n----------------------------------------\n\nTITLE: Testing One-Line Body\nDESCRIPTION: This snippet demonstrates testing a single-line text response using a backtick-enclosed string. This is for easy assertions for simple text responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Checking Response Content Hash (sha256) - Hurl\nDESCRIPTION: Performs an HTTP GET on a binary asset, then asserts the response's SHA-256 checksum matches a given value. Typically used for binary file verification in automation pipelines. Inputs: endpoint and expected hash. Outputs: assertion result. Assumes endpoint serves the specified binary data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_7\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 Encoded String with base64Decode Filter in Hurl (Hurl)\nDESCRIPTION: Utilizes the base64Decode filter in Hurl to transform a Base64-encoded string retrieved from the HTTP JSON response into its byte representation, then asserts its content in hexadecimal form. Requires Hurl, a JSON field containing a Base64 string, and the hex assertion format. Input is a Base64 string; output is bytes asserted as a hex value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.token\" base64Decode == hex,3c3c3f3f3f3e3e;\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies (requirements.txt)\nDESCRIPTION: This snippet defines the required Python packages and their versions for the project. Each line specifies a package name followed by an equality operator and the version number. These dependencies are typically installed using a package manager like pip, ensuring that the project has all the necessary libraries to function correctly. This is standard practice for managing Python project dependencies and reproducing the environment.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/bin/requirements-frozen.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nbeautifulsoup4==4.12.3\nblinker==1.9.0\ncertifi==2025.1.31\ncharset-normalizer==3.4.1\nclick==8.1.8\nFlask==3.0.3\nidna==3.10\nitsdangerous==2.2.0\nJinja2==3.1.6\nlxml==5.2.2\nMarkupSafe==3.0.2\nmypy==1.10.0\nmypy-extensions==1.0.0\nrequests==2.32.3\nruff==0.7.3\nsoupsieve==2.6\ntyping_extensions==4.12.2\nurllib3==2.3.0\nWerkzeug==3.1.3\n```\n\n----------------------------------------\n\nTITLE: Asserting File Body in Hurl\nDESCRIPTION: This snippet illustrates how to assert the content of a file as the response body using Hurl. The `file,` prefix is used to indicate a file-based assertion, where the content of a file is compared to the response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_187\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nfile,data.bin;\n```\n\n----------------------------------------\n\nTITLE: Using curl Options with Command Line in Hurl\nDESCRIPTION: Example of passing curl options via command line to a Hurl execution. Uses the --resolve option to map a hostname to a specific IP address.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_68\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Pulling Hurl Docker Image\nDESCRIPTION: Pulls the latest Hurl Docker image from the GitHub Container Registry.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull ghcr.io/orange-opensource/hurl:latest\n```\n\n----------------------------------------\n\nTITLE: Formatting Option Files - Shell\nDESCRIPTION: This shell script formats all `.option` files in the specified directory to ensure they adhere to a consistent format.  It uses a Python script located at `bin/spec/options/format.py`.  The script takes a glob pattern as input (e.g., `docs/spec/options/**/*.option`). Its output is the formatted `.option` files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/options/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/spec/options/format.py docs/spec/options/**/*.option\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Queries via POST in Hurl\nDESCRIPTION: This Hurl script demonstrates sending a POST request to a GraphQL endpoint (`https://example.org/graphql`). The request body contains a GraphQL query, enclosed within a nested code block marked with ```graphql. It asserts that the HTTP response status is 200.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Float in Hurl\nDESCRIPTION: Converts a JSON extracted value to a floating-point number for numeric assertions or calculations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_191\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..pi\" toFloat == 3.14\n```\n\n----------------------------------------\n\nTITLE: Making .netrc Usage Optional in Hurl (Bash)\nDESCRIPTION: Similar to `--netrc`, but makes the use of the `.netrc` file optional, meaning Hurl won't fail if the file is missing or doesn't contain credentials. See also `--netrc-file`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n--netrc-optional\n```\n\n----------------------------------------\n\nTITLE: Execute Local Installer and Test - PowerShell\nDESCRIPTION: This snippet builds, installs, and tests the Chocolatey package locally. It uses `choco pack` to create a package from the current directory, `choco install hurl -s .` to install it, then runs `hurl --version` to verify installation and then uses the installed hurl executable to run a simple test with the command `hurl --location` with the google URL as the argument.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/chocolatey/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nchoco pack\nchoco install hurl -s .\nhurl --version\necho \"GET https://google.fr\" | hurl --location\n```\n\n----------------------------------------\n\nTITLE: Basic Hurl Command Usage\nDESCRIPTION: Basic examples of using the Hurl command line tool. Shows reading from a file and from stdin, with output directed to stdout or a file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl session.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ echo GET http://httpbin.org/get | hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -o output input.hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n```\n\n----------------------------------------\n\nTITLE: Following Redirects and Sending Credentials in Hurl\nDESCRIPTION: Similar to --location, but also allows sending authentication credentials (like username/password for Basic Auth) to hosts encountered during redirects. Use with caution as it may expose credentials to unintended hosts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\n--location-trusted\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on Debian based Linux\nDESCRIPTION: Installs the necessary build dependencies for Hurl on Debian-based Linux distributions. Requires apt package manager and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev\n```\n\n----------------------------------------\n\nTITLE: Hurl File with Implicit Header Assertion\nDESCRIPTION: This snippet replaces the explicit header assert with an implicit one. This means that the presence and exact value of the header are checked.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_5\n\nLANGUAGE: Hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n# Implicitly testing response headers:\nContent-Type: text/html; charset=utf-8\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n```\n\n----------------------------------------\n\nTITLE: Filter: HtmlUnescape\nDESCRIPTION: This snippet uses the `htmlUnescape` filter to convert HTML-encoded characters (e.g., `&gt;`, `&#62;`) to their corresponding Unicode characters within a JSON response. It then asserts that a specific element in the JSON array matches the unescaped string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_195\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.escaped_html[1]\" htmlUnescape == \"Foo © bar 𝌆\"\n```\n\n----------------------------------------\n\nTITLE: Converting Hurl to JSON Output with hurlfmt - Shell & JSON\nDESCRIPTION: Illustrates using hurlfmt to convert a Hurl file to a JSON representation via the --output json option, with the output being piped to jq for readability. Required dependencies are hurlfmt and jq. The input is a Hurl file, and the output is a structured JSON object with HTTP request and response details. This assists in programmatic inspection or additional processing. Limitations include only supporting formats specified by hurlfmt options.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurlfmt.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl hello.hurl --output json | jq\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entries\": [\n    {\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"http://localhost:8000/hello\"\n      },\n      \"response\": {\n        \"version\": \"HTTP/1.0\",\n        \"status\": 200\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Proxy in Hurl\nDESCRIPTION: The `-x, --proxy <[PROTOCOL://]HOST[:PORT]>` option allows you to specify a proxy to use for requests. This enables routing requests through a proxy server.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_32\n\nLANGUAGE: Bash\nCODE:\n```\n-x, --proxy <[PROTOCOL://]HOST[:PORT]>\n```\n\n----------------------------------------\n\nTITLE: Limiting Transfer Rate in Hurl\nDESCRIPTION: Sets the maximum data transfer rate (in bytes per second) for both uploads and downloads. Useful for simulating slower network conditions or limiting bandwidth usage.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\n--limit-rate <SPEED>\n```\n\n----------------------------------------\n\nTITLE: Patching Hurl Binary to Use Custom libcurl via install_name_tool - Shell\nDESCRIPTION: This shell command updates the dynamic library linking of the Hurl binary to reference a custom libcurl installation, as may be provided by Homebrew. Dependencies include a pre-installed version of libcurl at the specified path, the Hurl binary, and appropriate system permissions (sudo). The command replaces the system libcurl location with a new one to enable compatibility or access newer versions. Input parameters include the absolute paths to the custom libcurl and the Hurl binary. Output is an in-place modification of the binary. Limitation: inadvertently setting incorrect paths may break binary execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_105\n\nLANGUAGE: shell\nCODE:\n```\nsudo install_name_tool -change /usr/lib/libcurl.4.dylib PATH_TO_CUSTOM_LIBCURL PATH_TO_HURL_BIN\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order Mark (BOM) in Response Body (Hurl)\nDESCRIPTION: Demonstrates verifying that the HTTP response body begins with a UTF-8 Byte Order Mark by asserting the first bytes using hexadecimal comparison. The code requires Hurl and expects the server to serve binary files. Key input is the target binary URL, and output is a validated BOM presence at response start.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_76\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on macOS via MacPorts\nDESCRIPTION: Installs Hurl using the MacPorts package manager on macOS. Requires MacPorts (port command) to be installed and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_106\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install hurl\n```\n\n----------------------------------------\n\nTITLE: Body Assert with Explicit Decoding\nDESCRIPTION: Hurl example demonstrating explicit decoding of the response body when the Content-Type header doesn't specify a charset. It uses the `decode` filter to decode bytes with the GB 2312 encoding and then performs a `contains` assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_28\n\nLANGUAGE: hurl\nCODE:\n```\n# Our HTML response is encoded using GB 2312.\n# But, the 'Content-Type' HTTP response header doesn't precise any charset,\n# so we decode explicitly the bytes.\nGET https://example.org/cn\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\nbytes contains hex,c4e3bac3cac0bde7; # 你好世界 encoded in GB2312\nbytes decode \"gb2312\" contains \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Specific Repository Branch in Bash\nDESCRIPTION: This snippet clones a specific branch or tag of a repository from GitHub into a temporary directory and navigates into it. It enables working with a particular version of the source code for cross-compilation or packaging.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 https://github.com/Orange-OpenSource/hurl.git --branch \"${tag}\" /tmp/hurl-\"${tag}\"\ncd /tmp/hurl-\"${tag}\"\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Performance\nDESCRIPTION: This demonstrates how to check the performance of an endpoint by asserting its response time.  It sends a GET request and uses the `duration < 1000` assertion to ensure that the response time is less than one second.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_53\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://sample.org/helloworld\nHTTP *\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n```\n\n----------------------------------------\n\nTITLE: Status Assert with Predicate\nDESCRIPTION: Hurl example demonstrating a status assert to check the HTTP response status code. It uses the `<` predicate to verify that the status code is less than 300, indicating a successful response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_20\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP *\n[Asserts]\nstatus < 300\n```\n\n----------------------------------------\n\nTITLE: Request Using Query Parameters\nDESCRIPTION: This snippet shows a request using the query parameters section. The request includes headers and uses the `[QueryStringParams]` section.  The `search` parameter utilizes a variable.  Query parameters defined in the URL and the query parameters section are both included in the resulting request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_136\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/news\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0\n[QueryStringParams]\norder: newest\nsearch: {{custom-search}}\ncount: 100\n```\n\n----------------------------------------\n\nTITLE: Generating a JSON Report in Hurl (Bash)\nDESCRIPTION: Creates a JSON report summarizing the test results in the specified directory (`DIR`). If a report already exists in that directory, it will be updated with the new results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n--report-json <DIR>\n```\n\n----------------------------------------\n\nTITLE: Specifying Output File (CLI)\nDESCRIPTION: This option specifies the output file where the response body will be written, instead of standard output (stdout). This is useful for saving the response to a file. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_105\n\nLANGUAGE: markdown\nCODE:\n```\n-o, --output <FILE>\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Tests with Errors (Shell)\nDESCRIPTION: Shows output of Hurl's test mode when a test fails, including detailed assertion failure messages and status code mismatches. Requires Hurl CLI; main parameter is the list of .hurl files. Inputs are test files; output is a colorized error and failure report.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test hello.hurl error_assert_status.hurl \n\u001b[1mhello.hurl\u001b[0m: \u001b[1;32mSuccess\u001b[0m (4 request(s) in 5 ms)\n\u001b[1;31merror\u001b[0m: \u001b[1mAssert status code\u001b[0m\n  \u001b[1;34m-->\u001b[0m error_assert_status.hurl:9:6\n\u001b[1;34m   |\u001b[0m\n\u001b[1;34m   |\u001b[0m \u001b[90mGET http://localhost:8000/not_found\u001b[0m\n\u001b[1;34m   |\u001b[0m\u001b[90m ...\u001b[0m\n\u001b[1;34m 9 |\u001b[0m HTTP 200\n\u001b[1;34m   |\u001b[0m\u001b[1;31m      ^^^ actual value is <404>\u001b[0m\n\u001b[1;34m   |\u001b[0m\n\n\u001b[1merror_assert_status.hurl\u001b[0m: \u001b[1;31mFailure\u001b[0m (1 request(s) in 2 ms)\n--------------------------------------------------------------------------------\nExecuted files:    2\nExecuted requests: 5 (500.0/s)\nSucceeded files:   1 (50.0%)\nFailed files:      1 (50.0%)\nDuration:          10 ms\n```\n\n----------------------------------------\n\nTITLE: Exporting Curl Commands\nDESCRIPTION: This command exports curl commands corresponding to the Hurl file's requests. It is useful for translating the Hurl tests into curl commands for external use.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ echo 'HEAD https://example.org' | hurl --repeat 3 --curl /tmp/curl.txt\n$ cat /tmp/curl.txt\n```\n\n----------------------------------------\n\nTITLE: Testing SSL Certificate Properties in Hurl\nDESCRIPTION: This code tests the properties of an SSL certificate. The snippet uses the `certificate` assertion to check the 'Subject', 'Issuer', 'Expire-Date' and 'Serial-Number' of the SSL certificate, ensuring it matches certain criteria like a specific subject and expiration date.  It uses regex matching for the serial number.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_60\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches /[\\da-f]+/\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on RHEL/CentOS (Source)\nDESCRIPTION: Installs necessary development packages (pkg-config, gcc, openssl-devel, libxml2-devel) required to build Hurl from source code on Red Hat-based Linux distributions using yum.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_117\n\nLANGUAGE: shell\nCODE:\n```\n$ yum install -y pkg-config gcc openssl-devel libxml2-devel\n```\n\n----------------------------------------\n\nTITLE: Capturing IP Address\nDESCRIPTION: This captures the IP address of the last connection made. It uses the `ip` keyword. The value captured is a string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_136\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Captures]\nserver_ip: ip\n```\n\n----------------------------------------\n\nTITLE: Templating Multiline String Request Body with Variables (Hurl)\nDESCRIPTION: Shows how to use variables within a multiline string body (` ```...``` `). This method allows templating any text-based body format (like JSON, XML, CSV) by embedding variables within the string content. Requires explicit `Content-Type` header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_218\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n```\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Files in Parallel in Hurl\nDESCRIPTION: The `--parallel` option executes files in parallel, with each file running in its own worker thread. The default is sequential.  Parallel execution is default in `--test` mode.  See also `--jobs`. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\n--parallel\n```\n\n----------------------------------------\n\nTITLE: Validating Redirections Step-By-Step in Hurl\nDESCRIPTION: Describes the process of handling HTTP redirections manually in Hurl by chaining requests and validating status and Location headers at each step. Requires Hurl runtime. The snippet checks for a 301 response with a Location header, then a 200 OK for the redirected URL. Inputs are sequential HTTP GETs; outputs are status and header validations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_95\n\nLANGUAGE: hurl\nCODE:\n```\n# First entry, test the redirection (status code and 'Location' header)\nGET https://google.fr\nHTTP 301\nLocation: https://www.google.fr/\n\n# Second entry, the 200 OK response\nGET https://www.google.fr\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests\nDESCRIPTION: This example shows how to skip requests within a Hurl file using the `skip: true` option. This allows you to selectively disable certain requests during execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_50\n\nLANGUAGE: hurl\nCODE:\n```\n# a, c, d are run, b is skipped\nGET https://example.org/a\n\nGET https://example.org/b\n[Options]\nskip: true\n\nGET https://example.org/c\n\nGET https://example.org/d\n```\n\n----------------------------------------\n\nTITLE: Asserting a Boolean Condition with XPath in Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to use an XPath query to assert the existence of an h1 element in an HTML response. The query boolean(count(//h1)) returns a boolean value, which is asserted to be true (without quotes) for precise type matching, or alternatively by simply checking that the node exists. No external dependencies are required, but an HTTP endpoint that returns valid HTML is expected as input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\nxpath \"boolean(count(//h1))\" == true\nxpath \"//h1\" exists # Equivalent but simpler\n```\n\n----------------------------------------\n\nTITLE: Asserting SSL Certificate - Hurl\nDESCRIPTION: This snippet shows how to assert properties of an SSL certificate. The certificate is checked against attributes like 'Subject', 'Issuer', 'Start-Date', 'Expire-Date' and 'Serial-Number' which can be compared with operators like '==' or with the help of functions like 'daysAfterNow' and 'matches'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_179\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches \"[0-9af]+\"\n```\n\n----------------------------------------\n\nTITLE: Chaining GET and HEAD Requests in Hurl\nDESCRIPTION: This Hurl script demonstrates chaining multiple HTTP requests using different methods. It sequentially sends GET requests to `/a` and `/b`, followed by a HEAD request to `/c`, and finally another GET request to `/c` on the host `https://example.org`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_14\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/a\nGET https://example.org/b\nHEAD https://example.org/c\nGET https://example.org/c\n```\n\n----------------------------------------\n\nTITLE: Multipart Form Data Using a Multiline String Body\nDESCRIPTION: This is an alternate way to send multipart form data, using a multiline string body. This method requires inlining the file content within the Hurl file. The boundary is specified.  The `Content-Disposition` header is used to describe the form data parts. \nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_140\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Building Single-Arch Docker Image for AMD64\nDESCRIPTION: Removes existing AMD64-specific images locally, then clones the repository and builds an AMD64 Docker image with version and timestamp as build arguments. The resulting image is tagged and ready for pushing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi --force \\\n  ghcr.io/\"${organization}\"/hurl:amd64-\"${docker_build_tag}\" \\\n  local/hurl\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/hurl-\"${tag}\"\ndocker_build_tag=$(grep ^version packages/hurl/Cargo.toml | cut --delimiter '=' --field 2 | tr -d '\"')\necho \"docker_build_tag=${docker_build_tag}\"\ndocker_build_date=$(date \"+%Y-%m-%d %H-%M-%S\")\necho \"docker_build_date=${docker_build_date}\"\ndocker build --file contrib/docker/Dockerfile --build-arg docker_build_date=\"${docker_build_date}\" --build-arg docker_build_tag=\"${docker_build_tag}\" --tag  local/hurl --tag ghcr.io/\"${organization}\"/hurl:amd64-\"${docker_build_tag}\" .\n```\n\n----------------------------------------\n\nTITLE: Defining Whitespace Grammar Rule as Space or Tab Characters in Hurl Grammar Syntax\nDESCRIPTION: Defines the space ('sp') rule as one space or tab character, used widely across many rules such as requests, responses, assertions, and headers to parse optional or required whitespace.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_264\n\nLANGUAGE: grammar\nCODE:\n```\nsp : /[ \\t]/\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Arch Docker Image for Hurl with Push\nDESCRIPTION: Builds Docker images for amd64 and arm64 platforms from the cloned repository, tagging them appropriately, and pushes to GitHub Container Registry. It extracts version info from Cargo.toml and includes build timestamp as a build argument.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/hurl-\"${tag}\"\ndocker_build_tag=$(grep ^version packages/hurl/Cargo.toml | cut --delimiter '=' --field 2 | tr -d '\"')\necho \"docker_build_tag=${docker_build_tag}\"\ndocker_build_date=$(date \"+%Y-%m-%d %H-%M-%S\")\necho \"docker_build_date=${docker_build_date}\"\ndocker buildx build --platform linux/amd64,linux/arm64 --file contrib/docker/Dockerfile --build-arg docker_build_date=\"${docker_build_date}\" --build-arg docker_build_tag=\"${docker_build_tag}\" --tag ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\" --tag ghcr.io/\"${organization}\"/hurl:latest --push .\n```\n\n----------------------------------------\n\nTITLE: Defining json-string-content Hurl Grammar\nDESCRIPTION: Defines the allowed content within a JSON string in Hurl grammar, excluding the surrounding quotes. It specifies that the content can be either regular `#json-string-text` (non-quote, non-backslash characters) or a `#json-string-escaped-char`. This rule is used directly by the `#json-string` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_247\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\njson-string-text|json-string-escaped-char\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Redirection and Status Assertion - Hurl\nDESCRIPTION: This example shows a two-step redirection test using Hurl, where the first request captures a 301 redirect response and validates the Location header, followed by a GET to the redirected URL verifying a 200 OK status. Input: two different URLs. Requires Hurl CLI and public HTTP endpoints. Output: pass/fail on each step and assertion. Limitation: Only works if target implements standard redirect.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_114\n\nLANGUAGE: hurl\nCODE:\n```\n# First entry, test the redirection (status code and 'Location' header)\nGET https://google.fr\nHTTP 301\nLocation: https://www.google.fr/\n\n# Second entry, the 200 OK response\nGET https://www.google.fr\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Outputting Response Body with Output Option\nDESCRIPTION: This example utilizes the `--output` option to output the response body to standard output or to a file.  The `--ignore-asserts` option disables assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nGET https://foo.com/failure\n[Options]\n# use - to output on standard output, foo.bin to save on disk \noutput: -\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Limiting Download Filesize with Hurl CLI\nDESCRIPTION: Specifies the maximum size in bytes for a downloaded file using the `--max-filesize` option. If the requested file exceeds this size, the transfer is aborted. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\n--max-filesize <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Defining Request Cookies with [Cookies] Section in Hurl\nDESCRIPTION: Explains how to add cookies to an HTTP request using the dedicated `[Cookies]` section in Hurl. Each cookie is defined as a name-value pair separated by a colon. These cookies are sent only for the specific request and are not added to the session cookie store.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_104\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\n[Cookies]\ntheme: light\nsessionToken: abc123\n```\n\n----------------------------------------\n\nTITLE: Running Hurl from a Script File with Docker\nDESCRIPTION: This snippet illustrates how to run a Hurl script stored in a file by mounting it into a Docker container and executing it. It tests the HTTP request defined in the file, providing output with colored formatting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/dockerhub_readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP/1.1 200\" > /tmp/test.hurl\ndocker run --rm -v /tmp/test.hurl:/tmp/test.hurl -w /tmp ghcr.io/orange-opensource/hurl:latest --test --color /tmp/test.hurl\n```\n\n----------------------------------------\n\nTITLE: Filter: Regex\nDESCRIPTION: This snippet demonstrates the usage of the `regex` filter to extract a capture group from a header value using regular expressions. The `regex` filter allows extracting specific parts of a header's value based on a defined pattern.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_198\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nparam1: header \"header1\"\nparam2: header \"header2\" regex \"Hello (.*)!\"\nparam3: header \"header2\" regex /Hello (.*)!/\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Tests from File via Docker\nDESCRIPTION: Runs Hurl tests stored in a file mounted into the container, providing a way to test scripts stored on the host system. It mounts the test file and executes the test command with the file as input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP 200\" > /tmp/test.hurl\ndocker run --rm -v /tmp/test.hurl:/tmp/test.hurl ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\" --test --color --very-verbose /tmp/test.hurl\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Committing Project Files with Shell\nDESCRIPTION: This snippet shows how to initialize a local Git repository within the 'movies-project' directory, stage all project files, commit them with a message, configure a remote repository URL, and push the initial commit to the remote 'main' branch. Dependencies include Git installed locally and access to remote Git hosting services like GitHub or GitLab. Input includes local project files; output is a committed and pushed codebase on the remote repository.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ git init\nInitialized empty Git repository in /Users/jc/Documents/Dev/movies-project/.git/\n$ git add .\n$ git commit -m \"Add integration tests.\"\n[master (root-commit) ea3e5cd] Add integration tests.\n 3 files changed, 146 insertions(+)\n create mode 100755 bin/integration.sh\n...\n$ git remote add origin https://github.com/jcamiel/movies-project.git\n$ git push --set-upstream origin main\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\n...\n```\n\n----------------------------------------\n\nTITLE: Converting Value to String with toString Filter in Hurl (Hurl)\nDESCRIPTION: Uses the toString filter to cast numbers or non-string types from a JSON response into strings, facilitating text-based assertions. Inputs are numbers or other types; outputs are strings. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_23\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.count\" toString == \"42\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Hurl on macOS Using Shell\nDESCRIPTION: This snippet provides the shell commands required to install necessary development tools on macOS, install Rust via rustup, and build the Hurl project using Cargo. It covers installing Xcode Command Line Tools, pkg-config via Homebrew, Rust environment setup, cloning the Hurl source code, compiling it in release mode, and verifying the installation by checking the Hurl version.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ xcode-select --install\n$ brew install pkg-config\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh -s -- -y\n$ source $HOME/.cargo/env\n$ rustc --version\n$ cargo --version\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/Orange-OpenSource/hurl\n$ cd hurl\n$ cargo build --release\n$ ./target/release/hurl --version\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Pattern Matching\nDESCRIPTION: Example of how to run only specific tests by organizing Hurl files into folders and using pattern matching. Demonstrates running only critical tests using a wildcard.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_81\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test critical/*.hurl\n```\n\n----------------------------------------\n\nTITLE: Using SOAP APIs\nDESCRIPTION: This example shows how to make SOAP API calls using Hurl. It sends a POST request with the `application/soap+xml` content type, including the necessary SOAP envelope and headers. It uses the `SOAPAction` header and specifies the XML body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_54\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n```\n\n----------------------------------------\n\nTITLE: Testing SSL Certificate in Hurl\nDESCRIPTION: This snippet demonstrates how to check the properties of an SSL certificate in Hurl. It allows you to assert the Subject, Issuer, Expire-Date, and Serial-Number.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_34\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches /[\\da-f]+/\n```\n\n----------------------------------------\n\nTITLE: Extracting Collection Element with nth in Hurl\nDESCRIPTION: Retrieves an element at a specific zero-based index from a collection (e.g., array of books) and validates its value, useful for list item verification.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_186\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$..books\" nth 2 == \"Children of Dune\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Bytes Using Specific Encoding in Hurl\nDESCRIPTION: Decode response bytes explicitly with a specified charset, such as gb2312, before extracting text content. Essential when charset is unknown or unspecified in Content-Type header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_181\n\nLANGUAGE: hurl\nCODE:\n```\n# The 'Content-Type' HTTP response header does not precise the charset 'gb2312'\n# so body must be decoded explicitly by Hurl before processing any text based assert\nGET https://example.org/hello_china\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"text/html\"\n# Content-Type has no encoding clue, we must decode ourselves the body response.\nbytes decode \"gb2312\" xpath \"string(//body)\" == \"你好世界\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Server with Hurl CLI\nDESCRIPTION: Specifies a proxy server to use for requests with the `-x` or `--proxy` option. The argument `<[PROTOCOL://]HOST[:PORT]>` defines the proxy address and optionally the protocol (e.g., `http://`, `socks5://`) and port.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\n-x, --proxy <[PROTOCOL://]HOST[:PORT]>\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with replace Filter in Hurl (Hurl)\nDESCRIPTION: Applies the replace filter to substitute occurrences of a substring or pattern with another string on values extracted from HTTP responses. Useful for protocol upgrades (e.g., http to https) or delimiter changes. Inputs are strings and replacement parameters; outputs are transformed strings. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_18\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Captures]\nurl: jsonpath \"$.url\" replace \"http://\" \"https://\"\n[Asserts]\njsonpath \"$.ips\" replace \", \" \"|\" == \"192.168.2.1|10.0.0.20|10.0.0.10\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Structure (Shell)\nDESCRIPTION: Shell commands to create the necessary directory structure (`movies-project`, `integration`, `bin`) and placeholder commands for creating the Hurl test files (`basic.hurl`, `login.hurl`, `signup.hurl`) within the `integration` directory. Users are expected to populate these files with actual Hurl tests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir movies-project\n$ cd movies-project\n$ mkdir integration\n$ vi integration/basic.hurl\n\n# Import <a href=\"https://github.com/jcamiel/hurl-express-tutorial/raw/main/integration/basic.hurl\">basic.hurl</a> here!\n\n$ vi integration/login.hurl\n\n# Import <a href=\"https://github.com/jcamiel/hurl-express-tutorial/raw/main/integration/login.hurl\">login.hurl</a> here!\n\n$ vi integration/signup.hurl\n\n# Import <a href=\"https://github.com/jcamiel/hurl-express-tutorial/raw/main/integration/signup.hurl\">signup.hurl</a> here!\n```\n\n----------------------------------------\n\nTITLE: Testing REST API with Hurl in a POST request with assertions\nDESCRIPTION: Performs a POST request to an API endpoint with a JSON body, validating response status, headers, and JSONPath predicates to verify specific response fields and formats.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"4568\",\n    \"evaluate\": true\n}\nHTTP 200\n[Asserts]\nheader \"X-Frame-Options\" == \"SAMEORIGIN\"\njsonpath \"$..status\" == \"RUNNING\"    # Check the status code\njsonpath \"$..tests\" count == 25      # Check the number of items\njsonpath \"$..id\" matches /\\d{4}/     # Check the format of the id\n```\n\n----------------------------------------\n\nTITLE: Defining Option Grammar Rule Structure in HTML\nDESCRIPTION: Each snippet in the file represents the definition of a grammar rule for an option in Hurl, encapsulated as an HTML div structure. The rule includes an identifier, usage context (such as 'used by option'), the literal keyword that triggers the option, and the type of value it expects (e.g., duration, integer, boolean, string). No external dependencies are required beyond standard HTML; the snippets assume integration into Hurl’s documentation site or parsing system. Inputs are the option identifiers and value type links, while outputs are well-structured documentation elements; these serve mainly for display and inline navigation rather than runtime parsing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_209\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"connect-timeout-option\">connect-timeout-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">connect-timeout</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#duration-option\">duration-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"delay-option\">delay-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">delay</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#duration-option\">duration-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"follow-redirect-option\">follow-redirect-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">location</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"follow-redirect-trusted-option\">follow-redirect-trusted-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">location-trusted</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"header-option\">header-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">header</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#value-string\">value-string</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"http10-option\">http10-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">http1.0</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"http11-option\">http11-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">http1.1</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"http2-option\">http2-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">http2</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"http3-option\">http3-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">http3</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"insecure-option\">insecure-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">insecure</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"ipv4-option\">ipv4-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">ipv4</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"ipv6-option\">ipv6-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">ipv6</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"limit-rate-option\">limit-rate-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">limit-rate</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#integer-option\">integer-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"max-redirs-option\">max-redirs-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">max-redirs</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#integer-option\">integer-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"netrc-option\">netrc-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">netrc</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"netrc-file-option\">netrc-file-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">netrc-file</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#value-string\">value-string</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"netrc-optional-option\">netrc-optional-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">netrc-optional</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"output-option\">output-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">output</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#value-string\">value-string</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"path-as-is-option\">path-as-is-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">path-as-is</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#boolean-option\">boolean-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"proxy-option\">proxy-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">proxy</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#value-string\">value-string</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"resolve-option\">resolve-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">resolve</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#value-string\">value-string</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"repeat-option\">repeat-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">repeat</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#integer-option\">integer-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"retry-option\">retry-option</span><span class=\"grammar-usedby\">(used by <a href=\"#option\">option</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">retry</span>&nbsp;<span class=\"grammar-literal\">:</span>&nbsp;<a href=\"#integer-option\">integer-option</a>&nbsp;<a href=\"#lt\">lt</a></div></div>\n```\n\n----------------------------------------\n\nTITLE: Update Choco Package Files - PowerShell\nDESCRIPTION: This snippet updates the `hurl.nuspec` and `tools\\chocolateyinstall.ps1` files with the latest version and SHA256 hash. It uses `Get-Content` to read the files, `foreach` to replace placeholders (`${hurl_latest_version}` and `${hurl_latest_sha}`) with the actual values obtained earlier, and `Set-Content` to save the modified files. This ensures the Chocolatey package uses the new version and correct checksum.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/chocolatey/README.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n(Get-Content -Path hurl.nuspec) | foreach{$_.replace('${hurl_latest_version}',${hurl_latest_version})} | Set-Content hurl.nuspec\n(Get-Content -Path tools\\chocolateyinstall.ps1) | foreach{$_.replace('${hurl_latest_version}',${hurl_latest_version})} | Set-Content tools\\chocolateyinstall.ps1\n(Get-Content -Path tools\\chocolateyinstall.ps1) | foreach{$_.replace('${hurl_latest_sha}',${hurl_latest_sha})} | Set-Content tools\\chocolateyinstall.ps1\n```\n\n----------------------------------------\n\nTITLE: Including Headers for a Specific Entry\nDESCRIPTION: This command shows how to display HTTP headers for a specific entry in the Hurl file using the `--to-entry` option. Indexing starts from 1.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl -i --to-entry 2 basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Filter: DaysAfterNow\nDESCRIPTION: This snippet demonstrates the `daysAfterNow` filter for checking dates in the future.  It asserts that the difference in days between the current date and the `Expire-Date` header is greater than 15.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_190\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Expire-Date\" daysAfterNow > 15\n```\n\n----------------------------------------\n\nTITLE: Chaining Filters with split and nth in Hurl Assert (Hurl)\nDESCRIPTION: Illustrates chaining multiple filters (split and nth) within an assert in Hurl to extract and test a specific portion of a value obtained by a query. The JSON response's 'name' field is split by a delimiter, and the first element is checked for equality. Dependencies include Hurl and response fields conforming to the expected structure. Input is the HTTP field, output is a pass/fail assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.name\" split \",\" nth 0 == \"Herbert\"\n```\n\n----------------------------------------\n\nTITLE: Equivalent PUT Request Using curl\nDESCRIPTION: The equivalent command for the PUT request with JSON data using curl instead of Hurl. Shows how curl requires more verbose syntax to achieve the same result.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_75\n\nLANGUAGE: shell\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n     --request PUT \\\n     --data '{\"username\": \"xyz\",\"password\": \"xyz\"}' \\\n     http://localhost:3000/api/login\n```\n\n----------------------------------------\n\nTITLE: Specifying Hosts to Skip Proxy (CLI)\nDESCRIPTION: This option specifies a comma-separated list of hosts that should not use a proxy. This overrides the `no_proxy` environment variable. It's useful for bypassing a proxy for specific hosts. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_104\n\nLANGUAGE: markdown\nCODE:\n```\n--noproxy <HOST(S)>\n```\n\n----------------------------------------\n\nTITLE: Preserving URL Path Sequences\nDESCRIPTION: This option disables the handling of `/../` or `/./` sequences in the URL path. Normally, Hurl will squash or merge these sequences according to standards. This option prevents that behavior.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_107\n\nLANGUAGE: markdown\nCODE:\n```\n--path-as-is\n```\n\n----------------------------------------\n\nTITLE: Chained GET Requests\nDESCRIPTION: This snippet showcases how to chain multiple GET requests within a single Hurl file.  Each request is executed sequentially, with the subsequent requests defined after the previous ones.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/a\nGET https://example.org/b\nHEAD https://example.org/c\nGET https://example.org/c\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Dates with `toDate` Filter (Hurl)\nDESCRIPTION: Demonstrates parsing dates, including ISO 8601 / RFC 3339 format using the `toDate` filter. It shows using both an explicit format string and the shorthand `%+` for standard formats, followed by the `format` filter to extract components.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_202\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/books\nHTTP 200\n[Asserts]\njsonpath \"$.published\" == \"2023-01-23T18:25:43.511Z\"\njsonpath \"$.published\" toDate \"%Y-%m-%dT%H:%M:%S%.fZ\" format \"%A\" == \"Monday\"\njsonpath \"$.published\" toDate \"%+\" format \"%A\" == \"Monday\" # %+ can be used to parse ISO 8601 / RFC 3339\n```\n\n----------------------------------------\n\nTITLE: Defining Hexadecimal Digit Grammar Rule Using Regular Expression\nDESCRIPTION: Defines a hexadecimal digit as any character from 0-9 or A-F (case insensitive). This supports parsing hexadecimal sequences in unicode characters and escaped JSON strings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_261\n\nLANGUAGE: grammar\nCODE:\n```\nhexdigit : /[0-9A-Fa-f]/\n```\n\n----------------------------------------\n\nTITLE: Decoding URL-encoded String in Hurl\nDESCRIPTION: Decodes percent-encoded characters in a URL string into readable form, useful for validating or using encoded URLs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_194\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..encoded_url\" urlDecode == \"https://mozilla.org/?x=шеллы\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Redirection via Command-Line Option in Hurl\nDESCRIPTION: Shows how to run Hurl with the '--location' command-line argument to enforce redirection globally for all requests. Requires Hurl CLI tool. The snippet triggers a GET to a URL expected to redirect, with the assertion performed on the final destination once redirection is followed. Input is a shell command invoking Hurl with options; output is HTTP status validation after redirection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\n# Running hurl --location google.hurl\nGET https://google.fr\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Push ARM64 Docker Image to Registry\nDESCRIPTION: Uploads the built ARM64 Docker image to GitHub Container Registry, completing the multi-architecture image distribution pipeline.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker push ghcr.io/\"${organization}\"/hurl:arm64-\"${docker_build_tag}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on Alpine Linux (Source)\nDESCRIPTION: Installs necessary development packages (curl-dev, gcc, libxml2-dev, musl-dev, openssl-dev) required to build Hurl from source code on Alpine Linux using apk.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_119\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Delaying Requests with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to add a delay to requests using the `delay` option. The delay is specified in seconds (e.g., `5s`).  The first request delays for 5 seconds while the second request doesn't have delay, as the option is missing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_65\n\nLANGUAGE: hurl\nCODE:\n```\n# Delaying this request by 5 seconds (aka sleep)\nGET https://example.org/turtle\n[Options]\ndelay: 5s\nHTTP 200\n\n# No delay!\nGET https://example.org/turtle\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Updating Hurl Winget Manifest using PowerShell\nDESCRIPTION: This PowerShell script retrieves the latest release tag name for the Orange-OpenSource/hurl repository from the GitHub API. It then uses the 'wingetcreate' tool to update the Winget package manifest for 'Orange-OpenSource.Hurl' with the fetched version and the corresponding Windows installer URL. A GitHub personal access token (<personal_github_token>) is required for submission.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/winget/README.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$hurl_latest_version=((Invoke-WebRequest -UseBasicParsing https://api.github.com/repos/Orange-OpenSource/hurl/releases/latest).content | ConvertFrom-Json | Select -exp tag_name)\necho ${hurl_latest_version}\nwingetcreate update --submit --token <personal_github_token> --urls https://github.com/Orange-OpenSource/hurl/releases/download/${hurl_latest_version}/hurl-${hurl_latest_version}-x86_64-pc-windows-msvc-installer.exe --version ${hurl_latest_version} Orange-OpenSource.Hurl\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes to Base64 String in Hurl\nDESCRIPTION: Encodes bytes into a base64 string and asserts that the encoding result matches an expected base64 output. Demonstrates usage of the base64Encode filter for encoding response data or other byte sources.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_177\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\nbytes base64Encode == \"5L2g5aW95LiW55WM\"\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Request Body in Hurl\nDESCRIPTION: Shows how to define an XML request body directly within a Hurl file. The `Content-Type` header usually needs to be set manually (e.g., `application/xml` or `application/soap+xml`). The XML content follows the request line and headers. Note that this direct syntax does not support Hurl variables.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_111\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new soapy thing XML body:\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: 299\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"http://example.net\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\n```\n\n----------------------------------------\n\nTITLE: Setting Max Redirections (CLI)\nDESCRIPTION: This option sets the maximum number of HTTP redirections the tool will follow. The default limit is 50. Setting the value to -1 enables unlimited redirections. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_97\n\nLANGUAGE: markdown\nCODE:\n```\n--max-redirs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Hurl File with XPath Assertion for HTML Title\nDESCRIPTION: This snippet extends the basic Hurl file by adding an XPath assertion to check the content of the HTML title tag. It validates that the title is \"Movies Box\".\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_1\n\nLANGUAGE: Hurl\nCODE:\n```\n# Our first Hurl file, just checking\n# that our server is up and running.\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\n```\n\n----------------------------------------\n\nTITLE: Preventing URL Path Normalization in Hurl (Bash)\nDESCRIPTION: Instructs Hurl to use the URL path exactly as provided, without normalizing sequences like `/../` or `/./`. By default, Hurl resolves these sequences according to web standards.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n--path-as-is\n```\n\n----------------------------------------\n\nTITLE: Logging a Specific Entry via [Options] Section in Hurl\nDESCRIPTION: Presents the use of the 'very-verbose: true' option inside [Options] to activate detailed logging for a single request in a Hurl file. Requires Hurl engine. The snippet demonstrates placing [Options] for a specific GET request so detailed logs are output when running the file. No input parameters aside from the API endpoint; output is verbose execution logs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_94\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://api.example.org\n[Options]\nvery-verbose: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Data with Date in Hurl\nDESCRIPTION: This snippet shows how to use the `newDate` function in a Hurl template to generate a dynamic date for a query parameter.  The date is generated each time the request is executed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_30\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/foo\n[Query]\ndate: {{newDate}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Number Grammar Rule Supporting Integers and Floats in Hurl Grammar Syntax\nDESCRIPTION: Specifies the number grammar rule that matches either an integer or a float. This captures numeric values used in predicates and other expressions in Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_259\n\nLANGUAGE: grammar\nCODE:\n```\nnumber : integer | float\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl with Redirection Option - Shell\nDESCRIPTION: This snippet demonstrates how to execute the Hurl CLI tool with the `--location` option to enable following HTTP redirections for all requests in the specified Hurl file. It requires the user to run Hurl from a shell environment with the command `hurl --location foo.hurl`, where `foo.hurl` is the input test file. The key input is the file path, and the output is the executed requests with redirected URLs automatically followed according to this option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report with Hurl\nDESCRIPTION: This shell command demonstrates how to generate a TAP (Test Anything Protocol) report from Hurl tests.  It uses the `--test` flag to execute the tests and `--report-tap` to specify the output file. It requires the Hurl tool to be installed, and `*.hurl` files in the current directory or provided directory as the input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-tap build/report.txt *.hurl\n```\n\n----------------------------------------\n\nTITLE: Splitting String into List in Hurl\nDESCRIPTION: Splits a string into a list of substrings based on a delimiter, enabling subsequent assertions on individual list items or counts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_189\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..ips\" split \", \" count == 3\n```\n\n----------------------------------------\n\nTITLE: Individual Filter Grammar Rules in Hurl\nDESCRIPTION: Defines the syntax for various filters available in Hurl, including simple filters like count, decode, and format, as well as parameterized filters like jsonpath, regex, and xpath.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_255\n\nLANGUAGE: grammar\nCODE:\n```\ncount-filter: count\ndays-after-now-filter: daysAfterNow\ndays-before-now-filter: daysBeforeNow\ndecode-filter: decode\nformat-filter: format\nhtml-escape-filter: htmlEscape\nhtml-unescape-filter: htmlUnescape\njsonpath-filter: jsonpath sp quoted-string\nnth-filter: nth sp integer\nregex-filter: regex sp (quoted-string|regex)\nreplace-filter: replace sp (quoted-string|regex) sp quoted-string\nsplit-filter: split sp quoted-string\nto-date-filter: toDate\nto-float-filter: toFloat\nto-int-filter: toInt\nurl-decode-filter: urlDecode\nurl-encode-filter: urlEncode\nxpath-filter: xpath sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Using curl Options with Hurl\nDESCRIPTION: This Hurl snippet demonstrates the use of curl options to configure requests. These options are passed directly as CLI arguments when running Hurl. In this case, `--resolve` is used to specify a host to be resolved to a different IP address, effectively overriding the DNS resolution. Also, it uses the `[Options]` section to configure a specific request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_73\n\nLANGUAGE: hurl\nCODE:\n```\n$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://bar.com\nHTTP 200\n\n\nGET http://foo.com:8000/resolve\n[Options]\nresolve: foo.com:8000:127.0.0.1\nHTTP 200\n`Hello World!`\n```\n\n----------------------------------------\n\nTITLE: Executing Hurl Tests in Sequential Mode (Shell)\nDESCRIPTION: Demonstrates running Hurl test files sequentially by specifying --jobs 1. Dependencies: Hurl CLI. Parameter is the --jobs flag; inputs are test file globs. Output is sequential test execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --jobs 1 *.hurl\n```\n\n----------------------------------------\n\nTITLE: Saving a Particular Response\nDESCRIPTION: This snippet shows how to save a specific response using the `[Options]` section within a Hurl file, enabling the user to output the response content to a file using the `output` directive.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_37\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.ord/cats/123\n[Options]\noutput: cat123.txt    # use - to output to stdout\nHTTP 200\n\nGET https://example.ord/dogs/567\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting XML response body with multiline\nDESCRIPTION: This snippet uses a multiline string with `xml` identifier to assert an XML response body.  This method is functionally equivalent to the previous XML assertion, but using a multiline string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Assertions\nDESCRIPTION: This snippet shows how to assert properties of the SSL certificate used by the server. It demonstrates checking properties such as the subject, issuer, expiration date, and serial number.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_35\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches /[\\\\da-f]+/;\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Strings with Hurl\nDESCRIPTION: Formats a date from response headers or variables into a string based on the specified strftime format. Demonstrates formatting HTTP cookie expiration or other date fields with custom patterns.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_182\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncookie \"LSID[Expires]\" format \"%a, %d %b %Y %H:%M:%S\" == \"Wed, 13 Jan 2021 22:23:01\"\n```\n\n----------------------------------------\n\nTITLE: Capturing the URL\nDESCRIPTION: This captures the last fetched URL, which is most meaningful if redirects are followed using the `--location` option or `location: true` in the `[Options]` section. It leverages the `url` keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_135\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/redirecting\n[Options]\nlocation: true\nHTTP 200\n[Captures]\nlanding_url: url\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report\nDESCRIPTION: This shell command generates a TAP (Test Anything Protocol) report from Hurl test execution. TAP is a simple text-based format for test results, useful for integration with various testing frameworks. The wildcard '*.hurl' specifies the files to test, and the output report is written to build/report.txt.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-tap build/report.txt *.hurl\n```\n\n----------------------------------------\n\nTITLE: Capturing Regex Pattern from HTTP Response Body with Hurl DSL\nDESCRIPTION: Captures matched groups from a regex pattern applied to the decoded response body text. Requires at least one capture group within the regex expression for the capture to succeed. Regex patterns can be defined with double quotes requiring backslash escaping or with forward slashes to avoid escaping. Captured groups are stored into variables.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_154\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nid_a: regex \"id_a:([0-9]+)\"\nid_b: regex \"id_b:(\\\\d+)\"   # pattern using double quote \nid_c: regex /id_c:(\\d+)/    # pattern using forward slash\nname: regex \"Hello ([a-zA-Z]+)\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates to String with format Filter in Hurl (Hurl)\nDESCRIPTION: Employs the format filter to convert a date string (e.g., from cookies or headers) to a particular presentation using a specified date-time format. Uses standard strftime-like formatting. Inputs are date strings and format specifications; outputs are formatted date strings. Requires Hurl and a compatible date field.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncookie \"LSID[Expires]\" format \"%a, %d %b %Y %H:%M:%S\" == \"Wed, 13 Jan 2021 22:23:01\"\n```\n\n----------------------------------------\n\nTITLE: Testing 404 Page with Hurl GET\nDESCRIPTION: This Hurl snippet sends a GET request to a non-existent path and asserts that the response has a 404 status code. It also verifies the `Content-Type` header and checks specific elements in the HTML body using XPath assertions. Dependencies include a running server at `localhost:3000` returning a standard 404 page with H2 and H3 tags for error information.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_9\n\nLANGUAGE: Hurl\nCODE:\n```\nGET http://localhost:3000/not-found\nHTTP 404\n[Asserts]\nheader \"Content-Type\" == \"text/html; charset=utf-8\"\nxpath \"string(//h2)\" == \"Error\"\nxpath \"string(//h3)\" == \"Not Found\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chocolatey Package Manager\nDESCRIPTION: Sets execution policy and installs Chocolatey, a package manager for Windows, which simplifies the installation of development tools like Git, LLVM, NSIS, and Python.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Specifying netrc file path in Hurl\nDESCRIPTION: The `--netrc-file <FILE>` option is similar to `--netrc`, but it lets you specify the path to the .netrc file.  This offers flexibility in location of the netrc file.  See also `--netrc-optional`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\n--netrc-file <FILE>\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Hurl Secret Values for Redaction\nDESCRIPTION: This shell snippet demonstrates how to ensure different representations or transformations of a secret value are also redacted from logs. It shows using the `--secret` option multiple times with the original secret value (`token=FooBar`) and its expected transformed variations (`token_alt_0=FOOBAR`, `token_alt_1=foobar`). Redaction works by exact string matching against the secret values provided.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --secret token=FooBar \\\n       --secret token_alt_0=FOOBAR \\\n       --secret token_alt_1=foobar \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Properties with Hurl DSL\nDESCRIPTION: Provides examples of asserting HTTP response implicit properties such as protocol version, status code, headers, and explicit assertions inside the [Asserts] block. Supports checking status codes with wildcards and ranges, verifying header presence and values (case insensitive), and asserting content properties using JSONPath and byte count.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_158\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://api/example.org/cats\nHTTP 200\nContent-Type: application/json; charset=utf-8      # Implicit assert on Content-Type Header\n[Asserts]                                          # Explicit asserts section \nbytes count == 120\nheader \"Content-Type\" contains \"utf-8\"\njsonpath \"$.cats\" count == 49\njsonpath \"$.cats[0].name\" == \"Felix\"\njsonpath \"$.cats[0].lives\" == 9\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/404.html\nHTTP 404\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/pets\nHTTP *\n# Check that response status code is > 400 and <= 500\n[Asserts]\nstatus > 400\nstatus <= 500\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Check that our server responds with HTTP/2\nGET https://example.org/api/pets\nHTTP/2 200\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Environment for ARM64 Linux Cross-Compilation\nDESCRIPTION: This snippet sets up a Docker build environment with QEMU support for cross-compiling to ARM64 architecture. It prunes existing Docker buildx data, enables experimental CLI features, installs necessary QEMU static binaries, and configures Docker buildx builder instances for cross-platform building.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune -fa\n\ndocker buildx prune -fa\ndocker buildx rm mybuilder\n\nexport DOCKER_CLI_EXPERIMENTAL=enabled\n\nsudo apt-get install -y qemu-user-static\nls -l /usr/bin/qemu-aarch64-static\nqemu-aarch64-static --version\n\nsudo apt-get install -y binfmt-support\nupdate-binfmts --version\n\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker buildx create --name mybuilder\ndocker buildx use mybuilder\ndocker buildx inspect --bootstrap\ndocker buildx ls\n```\n\n----------------------------------------\n\nTITLE: Asserting an XML Response Body\nDESCRIPTION: This snippet shows how to assert an XML response body directly in the Hurl file. The XML structure is included verbatim in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_9\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Using .netrc for Credentials with Hurl CLI\nDESCRIPTION: Enables scanning the `.netrc` file in the user's home directory for username and password credentials using the `-n` or `--netrc` flag. See also `--netrc-file` and `--netrc-optional` for related functionality.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\n-n, --netrc\n```\n\n----------------------------------------\n\nTITLE: Comparing [Form] Section vs. Raw Body for Form Data in Hurl\nDESCRIPTION: Compares using the '[Form]' section (syntactic sugar where values are not URL encoded) versus manually constructing the URL-encoded body using a oneline string and setting the 'Content-Type' header for sending form data. Both methods achieve the same result for a POST request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\n# Run a POST request with form parameters section:\nPOST https://example.org/test\n[Form]\nname: John Doe\nkey1: value1\n```\n\nLANGUAGE: hurl\nCODE:\n```\n# Run the same POST request with a body section:\nPOST https://example.org/test\nContent-Type: application/x-www-form-urlencoded\n`name=John%20Doe&key1=value1`\n```\n\n----------------------------------------\n\nTITLE: Version Assert with String Comparison\nDESCRIPTION: Hurl example showcasing a version assert to check the HTTP version. It uses the `==` predicate to verify that the version is equal to \"2\".\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_21\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP *\n[Asserts]\nversion == \"2\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report\nDESCRIPTION: This command generates a JSON report containing all run data including request and response headers, body, and the curl debug command.  The generated report provides a structured export of the test run.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --report-json /tmp/report *.hurl\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in Hurl\nDESCRIPTION: The `--no-color` option disables color output.  This is a CLI-only option and is useful for cases where color output is not desired, such as in automated scripts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_26\n\nLANGUAGE: Bash\nCODE:\n```\n--no-color\n```\n\n----------------------------------------\n\nTITLE: Using the --variables-file Option in Hurl (bash)\nDESCRIPTION: Specifies a properties file (<FILE>) from which to load variables. Each line in the file should define a variable in the format name=value. Defining the same variable via this option and --variable results in an error. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_125\n\nLANGUAGE: bash\nCODE:\n```\n--variables-file <FILE>\n```\n\n----------------------------------------\n\nTITLE: Using the --resolve Option in Hurl (bash)\nDESCRIPTION: Provides a custom IP address for a specific host and port pair, bypassing the default DNS resolution. This acts like an /etc/hosts entry specified directly on the command line. Requires HOST, PORT, and ADDR parameters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_114\n\nLANGUAGE: bash\nCODE:\n```\n--resolve <HOST:PORT:ADDR>\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Secrets for Redaction (Shell)\nDESCRIPTION: Illustrates injecting multiple related secrets (`token`, `token_alt_0`, `token_alt_1`) using the `--secret` option. This ensures all specified string values are redacted from logs, which is useful if a secret value might appear in different transformed forms.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_204\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --secret token=FooBar \\\n       --secret token_alt_0=FOOBAR \\\n       --secret token_alt_1=foobar \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Before Request Execution - Hurl\nDESCRIPTION: This snippet demonstrates adding a fixed delay (5 seconds) before HTTP request execution using the delay option in the [Options] section. Useful for simulating wait times or pacing between requests. Requires Hurl CLI. Inputs: URL, delay specification. Output: request sent after delay; response assertion for HTTP 200 expected.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_119\n\nLANGUAGE: hurl\nCODE:\n```\n# A 5 seconds delayed request \nGET https://example.org/foo\n[Options]\ndelay: 5s\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Converting Values to String in Hurl\nDESCRIPTION: Converts a JSON value to a string to facilitate string-based assertions or template rendering.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_193\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$..count\" toString == \"42\"\n```\n\n----------------------------------------\n\nTITLE: Adding Delay to Request - Hurl\nDESCRIPTION: This Hurl snippet demonstrates inserting a delay before the execution of a request using the `delay` option within the `[Options]` section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_11\n\nLANGUAGE: hurl\nCODE:\n```\n# A 5 seconds delayed request \nGET https://example.org/foo\n[Options]\ndelay: 5s\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Capturing Set-Cookie Header and Cookie Attributes with Hurl DSL\nDESCRIPTION: Captures a 'Set-Cookie' header value or individual cookie attributes from HTTP response headers. The syntax uses a variable name, colon, 'cookie' keyword, and the cookie name enclosed in quotes. Cookie attributes such as Value, Expires, Max-Age, Domain, Path, Secure, HttpOnly, and SameSite can be captured by specifying the attribute inside brackets after the cookie name.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_149\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/cookies/set\nHTTP 200\n[Captures]\nsession-id: cookie \"LSID\"\n```\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/cookies/set\nHTTP 200\n[Captures]\nvalue1: cookie \"LSID\"\nvalue2: cookie \"LSID[Value]\"     # Equivalent to the previous capture\nexpires: cookie \"LSID[Expires]\"\nmax-age: cookie \"LSID[Max-Age]\"\ndomain: cookie \"LSID[Domain]\"\npath: cookie \"LSID[Path]\"\nsecure: cookie \"LSID[Secure]\"\nhttp-only: cookie \"LSID[HttpOnly]\"\nsame-site: cookie \"LSID[SameSite]\"\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Response with XPath in Hurl\nDESCRIPTION: This snippet demonstrates how to test HTML responses using XPath in Hurl. It shows how to check the title, the number of specific elements, and whether elements exist or not. The Content-Type should be specified for proper parsing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_31\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2  # Check the number of p\nxpath \"//p\" count == 2  # Similar assert for p\nxpath \"boolean(count(//h2))\" == false  # Check there is no h2  \nxpath \"//h2\" not exists  # Similar assert for h2\nxpath \"string(//div[1])\" matches /Hello.*/\n```\n\n----------------------------------------\n\nTITLE: Running ARM64 Ubuntu Docker Container for Build Environment\nDESCRIPTION: This snippet extracts the appropriate Docker image name from a YAML configuration, then runs an interactive ARM64 Ubuntu container with a mounted volume of the source code. It sets up an environment for cross-architecture compilation within Docker.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nubuntu_docker_image=$(grep -E \"package-generic-linux-x64|runs-on\" .github/workflows/package.yml | head -2 | tail -1 | cut --delimiter \":\" --field 2 | tr \"-\" \":\" | tr -d \" \" )\necho \"ubuntu_docker_image=${ubuntu_docker_image}\"\ndocker run --platform linux/arm64 --volume /tmp/hurl-\"${tag}\"::/hurl --workdir /hurl -it --rm \"${ubuntu_docker_image}\" bash\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Request with CLI User (Hurl)\nDESCRIPTION: Illustrates making an AWS Signature Version 4 signed API request to AWS STS, specifying the region and service. Requires Hurl with proper AWS credentials provided via CLI (e.g., --user). Parameters include aws-sigv4 option configuration and form parameters for the STS API. Input is the STS endpoint; output is a signed HTTP POST request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_77\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://sts.eu-central-1.amazonaws.com/\n[Options]\naws-sigv4: aws:amz:eu-central-1:sts\n[FormParams]\nAction: GetCallerIdentity\nVersion: 2011-06-15\n```\n\n----------------------------------------\n\nTITLE: Testing Duplicated Set-Cookie Headers in HTTP Responses with Hurl - hurl\nDESCRIPTION: This example illustrates how to write a Hurl test to assert the presence of multiple Set-Cookie headers in an HTTP response. It issues a GET request, checks for a successful response, and validates both Set-Cookie header values using assertions. Dependencies include Hurl and connectivity to the target HTTP server. The key parameters are the URL and expected cookie values; the output is a pass/fail for each header assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_160\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Installing Dependencies - shell\nDESCRIPTION: This snippet demonstrates how to create a Python virtual environment and install dependencies required by the Flask-based test server. It uses Python 3.9+ and pip to install all packages listed in bin/requirements-frozen.txt. Required dependencies: Python 3.9+, venv module, pip. Parameters include the virtual environment directory and requirements file. Standard output and activated environment can be used for running Flask server scripts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install --requirement bin/requirements-frozen.txt\n\n```\n\n----------------------------------------\n\nTITLE: Polling and Retrying Requests with Hurl\nDESCRIPTION: This Hurl example shows how to implement polling and retries. The request will repeatedly attempt to retrieve the status of a job until it reaches a 'COMPLETED' state. It uses the `retry` and `retry-interval` options to control the retry behavior. Requires a service with `/jobs` endpoint.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_64\n\nLANGUAGE: hurl\nCODE:\n```\n# Create a new job\nPOST https://api.example.org/jobs\nHTTP 201\n[Captures]\njob_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.state\" == \"RUNNING\"\n\n\n# Pull job status until it is completed\nGET https://api.example.org/jobs/{{job_id}}\n[Options]\nretry: 10   # maximum number of retry, -1 for unlimited\nretry-interval: 500ms\nHTTP 200\n[Asserts]\njsonpath \"$.state\" == \"COMPLETED\"\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl Binary on Linux (Generic)\nDESCRIPTION: Downloads a specific version of the precompiled Hurl binary tarball for Linux (x86_64) from GitHub Releases, extracts it to the /tmp directory, and adds the binary's location to the PATH environment variable for the current shell session. Requires curl and tar utilities.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_100\n\nLANGUAGE: shell\nCODE:\n```\n$ INSTALL_DIR=/tmp\n$ VERSION=6.1.1\n$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR\n$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Hurl Files or Directories\nDESCRIPTION: These shell commands show how to run Hurl tests on multiple input files. The first command uses a glob pattern (`integration/*.hurl`) to execute all `.hurl` files within the `integration/` directory in test mode. The second command runs Hurl in test mode on the current directory (`.`), causing it to recursively find and execute all `.hurl` files within it.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test integration/*.hurl\n$ hurl --test .\n```\n\n----------------------------------------\n\nTITLE: Creating a Windows 64-bit Installer for Hurl\nDESCRIPTION: Runs a script to generate an installer executable for deploying Hurl on Windows 64-bit systems, streamlining installation process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd c:\\hurl\n.\\bin\\release\\create_windows64_installer.ps1\n```\n\n----------------------------------------\n\nTITLE: Exported Hurl File as JSON\nDESCRIPTION: The resulting JSON structure when the example Hurl file is processed by `hurlfmt --out json`. It represents the Hurl test entry including request method, URL, headers, expected response status, and defined assertions. This JSON output facilitates parsing Hurl files with other tools.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"entries\": [\n    {\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"https://example.org/api/users/1\",\n        \"headers\": [\n          {\n            \"name\": \"User-Agent\",\n            \"value\": \"Custom\"\n          }\n        ]\n      },\n      \"response\": {\n        \"version\": \"HTTP\",\n        \"status\": 200,\n        \"asserts\": [\n          {\n            \"query\": {\n              \"type\": \"jsonpath\",\n              \"expr\": \"$.name\"\n            },\n            \"predicate\": {\n              \"type\": \"==\",\n              \"value\": \"Bob\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hurl from STDIN with Docker\nDESCRIPTION: This shell snippet shows how to execute Hurl commands by piping input directly into the Docker container. It tests an HTTP GET request and checks the response, utilizing the --test and --color options for output formatting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/dockerhub_readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP/1.1 200\" | docker run --rm -i ghcr.io/orange-opensource/hurl:latest --test --color\n```\n\n----------------------------------------\n\nTITLE: API Testing with Karate Framework\nDESCRIPTION: Example of how to create and retrieve a resource using Karate's file format. Shows Karate's syntax for HTTP requests, response validation, and chaining requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_76\n\nLANGUAGE: karate\nCODE:\n```\nScenario: create and retrieve a cat\n\nGiven url 'http://myhost.com/v1/cats'\nAnd request { name: 'Billie' }\nWhen method post\nThen status 201\nAnd match response == { id: '#notnull', name: 'Billie }\n\nGiven path response.id\nWhen method get\nThen status 200\n```\n\n----------------------------------------\n\nTITLE: Capturing with New Expressions in Hurl\nDESCRIPTION: This snippet showcases the use of new expressions within the [Captures] section. It demonstrates capturing values using expressions that are not necessarily related to the response body, enabling more flexible data capturing scenarios. This example uses a simple arithmetic expression to increment a counter.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/expressions.md#_snippet_1\n\nLANGUAGE: Hurl\nCODE:\n```\n[Captures]\ncounter: counter + 1\n```\n\n----------------------------------------\n\nTITLE: Cloning Specific Tag from GitHub Repository\nDESCRIPTION: This script clones the Hurl repository from GitHub at a specified tag, for subsequent building. It requires setting the desired tag and organization, then performs a shallow clone of the repository's branch matching the tag.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntag=<desired tag, ex: 4.0.0>\norganization=<desired organisation in lowercase, ex: orange-opensource>\ngit clone --depth 1 https://github.com/\"${organization}\"/hurl.git --branch \"${tag}\" /tmp/hurl-\"${tag}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rust toolchain\nDESCRIPTION: Installs the Rust toolchain using rustup and configures the environment. Requires curl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh -s -- -y\n$ source $HOME/.cargo/env\n$ rustc --version\n$ cargo --version\n```\n\n----------------------------------------\n\nTITLE: Building Hurl from Source\nDESCRIPTION: Clones the Hurl repository, builds the release version, and runs the resulting binary. Requires git and cargo.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/Orange-OpenSource/hurl\n$ cd hurl\n$ cargo build --release\n$ ./target/release/hurl --version\n```\n\n----------------------------------------\n\nTITLE: Encoding URL with `urlEncode` Filter (Hurl)\nDESCRIPTION: Illustrates the `urlEncode` filter in Hurl. This filter percent-encodes characters in a string that are not part of the unreserved set (excluding forward slashes), typically used for verifying URL components.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_206\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.url\" urlEncode == \"https%3A//mozilla.org/%3Fx%3D%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"\n```\n\n----------------------------------------\n\nTITLE: Delaying Requests\nDESCRIPTION: This snippet illustrates how to add a delay to requests. The first GET request has a 5-second delay using the `delay: 5s` option, while the second request proceeds without any delay.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_51\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\n# Delaying this request by 5 seconds (aka sleep)\nGET https://example.org/turtle\n[Options]\ndelay: 5s\nHTTP 200\n\n# No delay!\nGET https://example.org/turtle\nHTTP 200\n```\n```\n\n----------------------------------------\n\nTITLE: Repeating Hurl File Execution\nDESCRIPTION: Repeats the sequence of input Hurl files a specified number of times using `--repeat <NUM>`. Set `<NUM>` to -1 for an infinite loop. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\n--repeat <NUM>\n```\n\n----------------------------------------\n\nTITLE: Combined Header Assertions\nDESCRIPTION: This snippet demonstrates how to combine implicit and explicit header assertions in a Hurl file.  It shows the use of `HTTP` response assertions and explicit header assertions with the `[Asserts]` section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_30\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html\nHTTP 200\nSet-Cookie: theme=light\nSet-Cookie: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT\n[Asserts]\nheader \"Location\" contains \"www.example.net\"\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Version Using Docker\nDESCRIPTION: This shell code snippet demonstrates how to retrieve the current version of Hurl installed in a Docker container with the latest image tag. It runs the container with the --version argument to output version details.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/dockerhub_readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm ghcr.io/orange-opensource/hurl:latest --version\n```\n\n----------------------------------------\n\nTITLE: Delaying Requests\nDESCRIPTION: This snippet shows how to add delays to Hurl requests using the `delay` option.  It can be applied to individual requests to simulate delays.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_49\n\nLANGUAGE: hurl\nCODE:\n```\n# Delaying this request by 5 seconds (aka sleep)\nGET https://example.org/turtle\n[Options]\ndelay: 5s\nHTTP 200\n\n# No delay!\nGET https://example.org/turtle\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Calculating Days After Today in Hurl\nDESCRIPTION: Calculates the number of days between the current date and a future date from certificate metadata, validating if the expiration is sufficiently distant. Requires certificate header and daysAfterNow filter.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_179\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Expire-Date\" daysAfterNow > 15\n```\n\n----------------------------------------\n\nTITLE: Posting GraphQL Queries over HTTP - Hurl and GraphQL\nDESCRIPTION: Makes a POST request to a GraphQL endpoint, sending a GraphQL query payload in the request body. Demonstrates combining Hurl's HTTP request syntax with embedded GraphQL. Inputs: GraphQL endpoint and query. Outputs: HTTP and GraphQL response data. Requires endpoint to accept GraphQL payloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Response with XPath in Hurl\nDESCRIPTION: This snippet uses XPath expressions to validate the content and structure of an HTML response. It verifies the content of the title, checks the number of paragraphs, checks for the absence of an h2 tag, and validates the content of a div element using the `contains` and `matches` operators.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_57\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nContent-Type: text/html; charset=UTF-8\n[Asserts]\nxpath \"string(/html/head/title)\" contains \"Example\" # Check title\nxpath \"count(//p)\" == 2  # Check the number of p\nxpath \"//p\" count == 2  # Similar assert for p\nxpath \"boolean(count(//h2))\" == false  # Check there is no h2  \nxpath \"//h2\" not exists  # Similar assert for h2\nxpath \"string(//div[1])\" matches /Hello.*/\n```\n\n----------------------------------------\n\nTITLE: Example Rendered Hurl JSON Request Body\nDESCRIPTION: This snippet shows an example of a JSON request body after Hurl has processed templates using variables and functions. It illustrates how variable values like strings, booleans, null, numbers, and function outputs like dates are correctly substituted into the JSON structure while preserving the appropriate JSON types.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"key0\": \"apple\",\n    \"key1\": true,\n    \"key2\": null,\n    \"key3\": 42,\n    \"key4\": \"2024-12-02T13:39:45.936643Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Hurl from Source using Cargo\nDESCRIPTION: Clones the Hurl source code repository from GitHub, navigates into the cloned directory, compiles the project in release mode using Cargo, and then executes the compiled binary to display its version, verifying the build process. Requires git and the Rust toolchain (cargo) to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_122\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/Orange-OpenSource/hurl\n$ cd hurl\n$ cargo build --release\n$ ./target/release/hurl --version\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Headers in Responses - Hurl\nDESCRIPTION: This snippet expands on status code assertion by also verifying that a specific header is present and has the expected value ('Location: http://www.example.org') in addition to the status code. It is used for scenarios where header correctness is crucial, and requires only the Hurl tool. The test passes if both status and header assertions match.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_60\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\nLocation: http://www.example.org\n```\n\n----------------------------------------\n\nTITLE: Visualizing Parallel Job Flow - Mermaid\nDESCRIPTION: Depicts the parallel execution of Hurl jobs (a.hurl, b.hurl, c.hurl started concurrently and joined at completion) using a Mermaid state diagram. Intended for documentation and workflow communication; rendering requires a Mermaid viewer.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    state \"hurl --parallel *.hurl\" as [*]\n    state \"a.hurl\" as A\n    state \"b.hurl\" as B\n    state \"c.hurl\" as C\n    state fork <<fork>>\n    state join <<join>>\n    direction LR\n    [*] --> fork\n    fork --> A\n    fork --> B\n    fork --> C\n    A --> join\n    B --> join\n    C --> join\n    join --> [*]\n```\n\n----------------------------------------\n\nTITLE: Using --resolve Option with Hurl CLI (Shell)\nDESCRIPTION: Shows how to use the --resolve option with the Hurl command-line interface to manually map a domain and port to a specific IP, emulating DNS resolution. Requires Hurl installed on the system. Key parameter is the --resolve argument, with the input being an Hurl file targeting the mapped URL. Output is a modified HTTP request using the resolved address.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --resolve foo.com:8000:127.0.0.1 foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with Cargo\nDESCRIPTION: Installs Hurl using Cargo, Rust's package manager. Assumes Rust and Cargo are already installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install --locked hurl\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Header Directly in Hurl\nDESCRIPTION: This snippet shows how to set the Authorization header directly in a Hurl request, providing the base64 encoded username and password.  This is an alternative to using the `[BasicAuth]` section. The base64 string should be generated separately using a tool like `base64`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_15\n\nLANGUAGE: hurl\nCODE:\n```\n# Authorization header value can be computed with `echo -n 'bob:secret' | base64`\nGET https://example.org/protected\nAuthorization: Basic Ym9iOnNlY3JldA== \n```\n\n----------------------------------------\n\nTITLE: Running an Example Integration Test on Windows - powershell\nDESCRIPTION: This PowerShell script executes the same Hurl integration test for Windows environments. It enforces strict mode and stops on any errors. The Hurl test file 'tests_ok/include.hurl' is run with --include and --verbose flags. Dependencies: PowerShell, Hurl binary. Outputs are directed to the default console. No input parameters except the test script file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-StrictMode -Version latest\n$ErrorActionPreference = 'Stop'\nhurl tests_ok/include.hurl --include --verbose\n\n```\n\n----------------------------------------\n\nTITLE: Using the --retry Option in Hurl (bash)\nDESCRIPTION: Sets the maximum number of times Hurl will retry a request if any error occurs (asserts, captures, runtime errors, etc.). Use 0 for no retries (default behavior implicitly) and -1 for unlimited retries. Requires a numeric value <NUM>.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_115\n\nLANGUAGE: bash\nCODE:\n```\n--retry <NUM>\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Instances of HTTP Headers in Hurl\nDESCRIPTION: This snippet is used to assert a list of HTTP headers that may appear multiple times in a response. It showcases the use of the `count` and `includes` predicates on the `Vary` header, demonstrating how to validate multiple instances of a single header. The example checks for the total number of `Vary` headers and the presence of specific values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_166\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nheader \"Vary\" count == 2\nheader \"Vary\" includes \"User-Agent\"\nheader \"Vary\" includes \"Content-Type\"\n```\n\n----------------------------------------\n\nTITLE: Validating HTML Content in HTTP Response - Hurl\nDESCRIPTION: Performs an HTTP GET request and asserts the normalized text of the page title using XPath. This is used for HTML validation within Hurl scripts. Inputs: endpoint; outputs: assertion of HTML element content. Requires XPath support in the Hurl binary.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nxpath \"normalize-space(//head/title)\" == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Counting Items in a Collection with count Filter in Hurl (Hurl)\nDESCRIPTION: Counts elements of a JSON array using the count filter after a jsonpath query in a Hurl assertion, ensuring the collection size matches expectations. Dependencies include Hurl and a response JSON following the structure. Input is a JSON list property; output is its element count.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.books\" count == 12\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Status Codes in Hurl - Hurl\nDESCRIPTION: This snippet demonstrates a basic Hurl test that issues a GET request to a specified URL and asserts that the HTTP response status code matches the expected value (301 in this case). No additional dependencies are required except the Hurl runner. The input is the HTTP request details, and the output is a test pass or fail based on the response status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_59\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://example.org\nHTTP 301\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Alpine Linux\nDESCRIPTION: Installs Hurl from the Alpine Linux 'testing' repository using the apk package manager. Requires the apk utility.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_103\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl\n```\n\n----------------------------------------\n\nTITLE: Escaping Hash Character in Strings Hurl\nDESCRIPTION: This Hurl snippet illustrates how to escape the hash character `#` within string values to prevent it from being interpreted as the start of a comment. It shows setting an `x-token` header with the value `BEEF #STEACK`, where the `#` is escaped as `\\#` when it appears before the end of the line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/hurl-file.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nx-token: BEEF \\#STEACK # Some comment\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Templating JSON Request Body with Variables (Hurl)\nDESCRIPTION: Example Hurl file demonstrating a PUT request where variables (`{{a_string}}`, `{{a_bool}}`, etc.) and functions (`{{newDate}}`) are directly embedded within the JSON payload structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_205\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}},\n    \"key4\": \"{{newDate}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Oneline String Body in Hurl\nDESCRIPTION: This snippet demonstrates the assertion of a single-line text response body. It defines a POST request and asserts the response body is exactly `Hello world!`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_185\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Version and Features\nDESCRIPTION: Command to check the installed version of Hurl and the libcurl features it was built with. Shows the version information and supported capabilities.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --version\nhurl 2.0.0 libcurl/7.79.1 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.11 nghttp2/1.45.1\nFeatures (libcurl):  alt-svc AsynchDNS HSTS HTTP2 IPv6 Largefile libz NTLM NTLM_WB SPNEGO SSL UnixSockets\nFeatures (built-in): brotli\n```\n\n----------------------------------------\n\nTITLE: Defining the Regex Text Grammar Rule - HTML\nDESCRIPTION: Establishes what constitutes plain text within a regex pattern by matching any sequence except the newline and '/' characters with a regular expression. This enables non-escaped, literal parsing of most characters used in Hurl regex rules. Has no dependencies beyond its regex pattern.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_245\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"regex-text\">regex-text</span><span class=\"grammar-usedby\">(used by <a href=\"#regex-content\">regex-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-regex\">~[\\n\\/]+</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Using the --retry-interval Option in Hurl (bash)\nDESCRIPTION: Specifies the duration in milliseconds to wait between retries when using the --retry option. The default interval is 1000 ms. Time units like 's' (seconds) or 'ms' (milliseconds) can be used (e.g., --retry-interval 2s). No spaces are allowed within the value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_116\n\nLANGUAGE: bash\nCODE:\n```\n--retry-interval <MILLISECONDS>\n```\n\n----------------------------------------\n\nTITLE: Capturing Duration\nDESCRIPTION: This code captures the response time of the request in milliseconds using the `duration` keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_138\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nduration_in_ms: duration\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiline String Assertion Error in Plain Text - Plaintext\nDESCRIPTION: Illustrates a basic multiline string assertion error message generated by the Hurl tool when the actual HTTP response body differs from the expected body. It highlights the line and character positions in the test file, pointing to the mismatched string with a clear notation of the actual value versus the expected. This format is suitable for small content but becomes less readable with larger JSON objects.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:4:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 4 | `Hello World!`\n   | ^^^^^^^^^^^^^^ actual value is <Hi World!>\n   |\n```\n\n----------------------------------------\n\nTITLE: Generating CLI Source Files - Shell\nDESCRIPTION: This script generates Rust source files for parsing command-line options based on `.option` files. It utilizes the Python script `bin/spec/options/generate_source.py`. The script takes paths to the `.option` files for `hurl` and `hurlfmt` as input and outputs the generated Rust code to `packages/hurl/src/cli/options/commands.rs` and `packages/hurlfmt/src/cli/options/commands.rs` respectively.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/options/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/spec/options/generate_source.py docs/spec/options/hurl/*.option > packages/hurl/src/cli/options/commands.rs\n$ bin/spec/options/generate_source.py docs/spec/options/hurlfmt/*.option >packages/hurlfmt/src/cli/options/commands.rs\n```\n\n----------------------------------------\n\nTITLE: Testing REST APIs with JSONPath in Hurl\nDESCRIPTION: This snippet demonstrates how to assert a JSON body response using JSONPath in Hurl.  It shows how to check node values, collection counts, and regular expression matches.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_30\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/order\nscreencapability: low\nHTTP 200\n[Asserts]\njsonpath \"$.validated\" == true\njsonpath \"$.userInfo.firstName\" == \"Franck\"\njsonpath \"$.userInfo.lastName\" == \"Herbert\"\njsonpath \"$.hasDevice\" == false\njsonpath \"$.links\" count == 12\njsonpath \"$.state\" != null\njsonpath \"$.order\" matches \"^order-\\d{8}$\"\njsonpath \"$.order\" matches /^order-\\d{8}$/     # Alternative syntax with regex literal\njsonpath \"$.created\" isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Form Data in Hurl\nDESCRIPTION: This snippet shows how to send HTML form data in a Hurl request using the `[Form]` section. Key-value pairs represent the form fields and their values.  Templates like `{{token}}` can be used for dynamic values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_19\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[Form]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: Defining unicode-char Hurl Grammar\nDESCRIPTION: Defines the syntax for a Unicode escape sequence in Hurl grammar. It specifies that a Unicode character is represented by an opening brace `{`, followed by one or more hexadecimal digits (`#hexdigit+`), and a closing brace `}`. This rule is a fundamental component used in various escaped character rules across different string and filename/password types.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_241\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n{ hexdigit+ }\n```\n\n----------------------------------------\n\nTITLE: Testing Binary Content with SHA-256 in Hurl\nDESCRIPTION: Demonstrates verifying the integrity of binary content by checking the SHA-256 hash of the response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_48\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Checking and Stopping Docker Container (Shell)\nDESCRIPTION: Demonstrates using `docker ps` to list running containers and verify that the 'movies' container is up and running. It also shows the `docker stop movies` command to stop the container by its name.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/ci-cd-integration.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                                          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\n4002ce42e507   ghcr.io/jcamiel/hurl-express-tutorial:latest   \"node dist/bin/www.js\"   3 seconds ago   Up 2 seconds   0.0.0.0:3000->3000/tcp, :::3000->3000/tcp   movies\n$ docker stop movies\nmovies\n```\n\n----------------------------------------\n\nTITLE: Converting Value to Integer with toInt Filter in Hurl (Hurl)\nDESCRIPTION: Applies the toInt filter to values from JSON responses, casting them into integers for precise comparison in assertions. Inputs are numeric strings or floats; outputs are ints. Requires Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/filters.md#_snippet_22\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.id\" toInt == 123\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Attributes in Hurl\nDESCRIPTION: This code tests the attributes of cookies returned in the HTTP response. It uses the `cookie` assertion to check the value, expiration date, secure flag, HttpOnly flag, and SameSite attribute of a cookie named 'JSESSIONID'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_58\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\ncookie \"JSESSIONID\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Value]\" == \"8400BAFE2F66443613DC38AE3D9D6239\"\ncookie \"JSESSIONID[Expires]\" contains \"Wed, 13 Jan 2021\"\ncookie \"JSESSIONID[Secure]\" exists\ncookie \"JSESSIONID[HttpOnly]\" exists\ncookie \"JSESSIONID[SameSite]\" == \"Lax\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout with Hurl CLI\nDESCRIPTION: Sets the maximum time allowed for a single request/response cycle using `-m` or `--max-time`. Specify the duration in `<SECONDS>` or use time units like 's' for seconds or 'ms' for milliseconds (e.g., `20s`, `35000ms`). This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\n-m, --max-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Defining json-value Hurl Grammar\nDESCRIPTION: Defines the possible types for a JSON value within the Hurl grammar. A JSON value can be a `#template`, `#json-object`, `#json-array`, `#json-string`, `#json-number`, `#boolean`, or `#null`, indicating the different data types supported. This rule is a fundamental building block used by the `bytes`, `json-key-value`, and `json-array` rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_242\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\ntemplate | json-object | json-array | json-string | json-number | boolean | null\n```\n\n----------------------------------------\n\nTITLE: Changing Linked Libcurl Example (macOS) - Shell\nDESCRIPTION: Gives a concrete example of using `install_name_tool` on macOS to relink the Hurl binary to the `libcurl` library installed by Homebrew. It shows the specific paths for the system and Homebrew libcurl libraries and the Hurl binary path. This command requires `sudo` for execution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n# /usr/local/opt/curl/lib/libcurl.4.dylib is installed by `brew install curl`\n$ sudo install_name_tool -change /usr/lib/libcurl.4.dylib /usr/local/opt/curl/lib/libcurl.4.dylib /usr/local/bin/hurl\n```\n\n----------------------------------------\n\nTITLE: Hurl File with Multiple XPath Assertions\nDESCRIPTION: This snippet adds more XPath assertions to check the number of `<h3>` tags on a home page and their content using `count` and `contains` predicates.  It demonstrates how to perform multiple assertions in a single Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/adding-asserts.md#_snippet_3\n\nLANGUAGE: Hurl\nCODE:\n```\n# Checking our home page:\nGET http://localhost:3000\nHTTP 200\n[Asserts]\nxpath \"string(//head/title)\" == \"Movies Box\"\nxpath \"//h3\" count == 2\nxpath \"string((//h3)[1])\" contains \"Popular\"\nxpath \"string((//h3)[2])\" contains \"Featured Today\"\n```\n\n----------------------------------------\n\nTITLE: Testing Single Set-Cookie Header in HTTP Response with Hurl - hurl\nDESCRIPTION: This snippet shows a Hurl script for validating the presence of a single Set-Cookie header in an HTTP response. It performs a GET request and asserts an expected Set-Cookie header and its specific value. Prerequisites are Hurl and the tested endpoint. The primary input is the requested URL, and the expected output is a matched Set-Cookie header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_161\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/index.html \nHost: example.net\nHTTP 200\nSet-Cookie: theme=light\n```\n\n----------------------------------------\n\nTITLE: Retrieving Docker Hurl Version from Container\nDESCRIPTION: Runs the Hurl Docker image to display its version information, useful for verifying the correct image tag and build. It requires the image to be locally available or accessible in the registry.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/\"${organization}\"/hurl:\"${docker_build_tag}\" --version\n```\n\n----------------------------------------\n\nTITLE: Hurl Header with Quoted Value\nDESCRIPTION: Illustrates a PATCH request where the 'If-Match' header value starts and ends with double quotes. Hurl includes these quotes as part of the actual header value sent in the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nPATCH https://example.org/file.txt\nIf-Match: \"e0023aa4e\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact XML Response Body in Hurl (Explicit Multiline)\nDESCRIPTION: Shows the explicit multiline string syntax (using ```xml ... ```) for asserting that the HTTP response body exactly matches the provided XML structure. This is equivalent to the implicit XML body assertion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_170\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl Syntax Highlighting for Neovim (Bash)\nDESCRIPTION: This snippet installs the Hurl syntax highlighting files for Neovim. It creates the necessary directory structure in the user's home directory under `.config/nvim/`, copies the `ftdetect/hurl.vim` and `syntax/hurl.vim` files to the appropriate directories.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/vim/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/nvim/{ftdetect,syntax}\ncp ftdetect/hurl.vim ~/.config/nvim/ftdetect\ncp syntax/hurl.vim ~/.config/nvim/syntax\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report with Hurl CLI\nDESCRIPTION: Produce a JSON report of the Hurl execution results in the specified directory. Existing JSON reports will be updated when this option is used. This option is solely for use via the command-line interface.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_20\n\nLANGUAGE: cli\nCODE:\n```\n--report-json <DIR>\n```\n\n----------------------------------------\n\nTITLE: Defining filename-password-text Grammar Rule\nDESCRIPTION: Defines the permissible characters for filename password text within Hurl grammar. Similar to `filename-text`, it matches one or more characters that are *not* among the set {# ; { } \\n \\\\ \\]}. This rule is used by the `filename-password-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_229\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n~[#;{} \n\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Interval with Hurl CLI\nDESCRIPTION: Define the duration to wait between consecutive retries in milliseconds. The default interval is 1000 ms. You can specify time units like '2s' or '500ms' (without spaces).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_25\n\nLANGUAGE: cli\nCODE:\n```\n--retry-interval <MILLISECONDS>\n```\n\n----------------------------------------\n\nTITLE: Testing Single Line String Body in Hurl\nDESCRIPTION: Tests the response body with a one-line string.  The expected string is enclosed in backticks (` `).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_65\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Toolchain on macOS (Shell)\nDESCRIPTION: Installs the latest stable Rust toolchain using rustup, the official Rust installer. The command downloads and executes the rustup script, installs the toolchain, sources the environment file to update the PATH, and then verifies the installation by checking the versions of `rustc` and `cargo`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh -s -- -y\n$ source $HOME/.cargo/env\n$ rustc --version\n$ cargo --version\n```\n\n----------------------------------------\n\nTITLE: Configuring per-entry verbose mode in Hurl script\nDESCRIPTION: Illustrates how to selectively enable verbose logging for specific request entries using an [Options] section within a Hurl file. This allows focused debugging without generating extensive logs for all requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n# Checking our home page:\n# ...\n\n# Check that we have a 404 response for broken links:\n# ...\n\n# Check our health API:\n# ...\n\n# Check search API:\nGET http://localhost:3000/api/search\n[Options]\nverbose: true\n[Query]\nq: 1982\nsort: name\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report\nDESCRIPTION: This shell command generates a JSON report of the Hurl test results.  It runs tests and outputs results in a structured JSON format for automated processing or integration with other tools. The wildcard '*.hurl' specifies the files to test and report on, and output report goes to build/report/ folder.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --report-json build/report/ *.hurl\n```\n\n----------------------------------------\n\nTITLE: Building Hurl from Source on macOS (Shell)\nDESCRIPTION: Clones the Hurl source code repository from GitHub. It then navigates into the cloned directory and builds the project in release mode using the Cargo build tool. Finally, it verifies the successful build by running the compiled Hurl executable with the `--version` flag.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/Orange-OpenSource/hurl\n$ cd hurl\n$ cargo build --release\n$ ./target/release/hurl --version\n```\n\n----------------------------------------\n\nTITLE: Escaping Comment Characters in Header Values in Hurl\nDESCRIPTION: Shows how to escape the '#' character in a header value to distinguish it from a comment within a Hurl request. Requires Hurl interpreter. The snippet sends a GET request with a custom 'x-token' header containing an escaped '#', ensuring the comment is correctly parsed. Expects to receive HTTP 200 from the server.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_90\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nx-token: BEEF \\#STEACK # Some comment\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Time for Request (CLI)\nDESCRIPTION: This option sets the maximum time (in seconds) allowed for a request/response operation. Time units (s for seconds, ms for milliseconds) can be specified. The timeout applies to the overall request duration. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_98\n\nLANGUAGE: markdown\nCODE:\n```\n-m, --max-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Checking XML Body Match\nDESCRIPTION: This snippet showcases how to test for an XML body match using Hurl.  It sends a GET request and asserts the response body matches the specified XML structure. The response is expected to be XML.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String Type in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string-type` rule, specifying the optional type declaration for a multiline string. Allowed types are 'base64', 'hex', 'json', 'xml', or 'graphql'. This rule is used by `multiline-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_218\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n <span class=\"grammar-literal\">base64</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">hex</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">json</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">xml</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">graphql</span>\n```\n\n----------------------------------------\n\nTITLE: Defining filename-password-escaped-char Grammar Rule\nDESCRIPTION: Defines the valid escaped characters that can appear within a filename password string in Hurl. It specifies that a backslash `\\` must be followed by one of the defined escape sequence characters (including colon `:`) or a unicode escape sequence (`u` followed by a unicode character). This rule is used by the `filename-password-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_230\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n\\ (\\|b|f|n|r|t|#|;| |{|}|:|u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Using the --user-agent Option in Hurl (bash)\nDESCRIPTION: Specifies a custom User-Agent string to be sent in the User-Agent header of every HTTP request. Requires the desired agent name <NAME>. The short form -A is also available. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_123\n\nLANGUAGE: bash\nCODE:\n```\n-A, --user-agent <NAME>\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body in Hurl\nDESCRIPTION: This snippet demonstrates how to post a JSON body in a Hurl request by including the JSON directly in the Hurl file. The Content-Type header is not explicitly specified in this example, which uses an inline JSON.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_22\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\n{\n    \"id\": \"456\",\n    \"evaluate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order Mark (BOM) in Response\nDESCRIPTION: This example demonstrates how to check for a Byte Order Mark (BOM) at the beginning of a response body. It sends a GET request and asserts that the response bytes start with a specific hexadecimal value representing the BOM, ensuring proper character encoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_57\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\n```\n```\n\n----------------------------------------\n\nTITLE: Testing SOAP API request with XML payload\nDESCRIPTION: Sends a SOAP request to retrieve stock price for a given stock name, including HTTP headers and XML body, to test SOAP-based web services.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/InStock\nContent-Type: application/soap+xml; charset=utf-8\nSOAPAction: \"http://www.w3.org/2003/05/soap-envelope\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:m=\"https://example.org\">\n  <soap:Header></soap:Header>\n  <soap:Body>\n    <m:GetStockPrice>\n      <m:StockName>GOOG</m:StockName>\n    </m:GetStockPrice>\n  </soap:Body>\n</soap:Envelope>\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Cloning the Hurl Project Repository\nDESCRIPTION: Clones the Hurl project source code from its GitHub repository into the C: drive, setting up the working directory for build operations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd c:\\\ngit.exe clone https://github.com/Orange-OpenSource/hurl.git\n```\n\n----------------------------------------\n\nTITLE: Verifying IP address in Hurl\nDESCRIPTION: Shows how to check the IP address of the last connection using different predicates to verify IPv4/IPv6 formats and specific IP values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nip isIpv4\nip not isIpv6\nip == \"172.16.45.87\"\n```\n\n----------------------------------------\n\nTITLE: Asserting SHA-256 Hash - Hurl\nDESCRIPTION: This snippet shows how to assert the SHA-256 hash of the HTTP response body. The `sha256` keyword is used in conjunction with the expected hex value of the hash.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_175\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Multiline String Type Options\nDESCRIPTION: Specifies the allowed types for multiline strings, including 'base64', 'hex', 'json', 'xml', and 'graphql', used to determine the encoding or format of the string content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_51\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string-type\">multiline-string-type</span><span class=\"grammar-usedby\">(used by <a href=\"#multiline-string\">multiline-string</a>)</span></div><div class=\"grammar-rule-expression\">&nbsp;<span class=\"grammar-literal\">base64</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">hex</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">json</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">xml</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">graphql</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Building Single-Arch Docker Image for ARM64\nDESCRIPTION: Removes existing ARM64 images locally, clones the repository, and builds an ARM64 Docker image with version and timestamp as build arguments. The image is tagged properly for distribution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi --force \\\n  ghcr.io/\"${organization}\"/hurl:arm64-\"${docker_build_tag}\" \\\n  local/hurl\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/hurl-\"${tag}\"\ndocker_build_tag=$(grep ^version packages/hurl/Cargo.toml | cut --delimiter '=' --field 2 | tr -d '\"')\necho \"docker_build_tag=${docker_build_tag}\"\ndocker_build_date=$(date \"+%Y-%m-%d %H-%M-%S\")\necho \"docker_build_date=${docker_build_date}\"\ndocker build --file contrib/docker/Dockerfile --build-arg docker_build_date=\"${docker_build_date}\" --build-arg docker_build_tag=\"${docker_build_tag}\" --tag  local/hurl --tag ghcr.io/\"${organization}\"/hurl:arm64-\"${docker_build_tag}\" .\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Element Presence with XPath in Hurl\nDESCRIPTION: Shows how to use Hurl's `xpath` assert with boolean comparisons (`== true`) and the `exists` predicate to verify the presence of specific HTML elements (like `<h1>`) in a response. It highlights using XPath functions like `boolean()` and `count()` for boolean checks and a simpler `exists` predicate for the same purpose.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_145\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\nxpath \"boolean(count(//h1))\" == true\nxpath \"//h1\" exists # Equivalent but simpler\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with MacPorts on macOS\nDESCRIPTION: Installs Hurl on macOS using the MacPorts package manager. Requires sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting a Base64 Encoded Response Body\nDESCRIPTION: This snippet demonstrates how to assert a response body encoded in Base64. The assertion starts with `base64,` and the encoded content, and ends with `;`\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_13\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nbase64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIG\nFkaXBpc2NpbmcgZWxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0g\naGVuZHJlcml0LCBlc3QganVzdG8gYmliZW5kdW0gbWV0dXMsIG5lYyBydXRydW\n0gdG9ydG9yIG1hc3NhIGlkIG1ldHVzLiA=;\n```\n\n----------------------------------------\n\nTITLE: Specifying a Private Key File in Hurl\nDESCRIPTION: Provides the path to a private key file for use in operations requiring client-side certificates or specific cryptographic functions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\n--key <KEY>\n```\n\n----------------------------------------\n\nTITLE: Setting Max Redirects in Hurl\nDESCRIPTION: The `--max-redirs <NUM>` option configures the maximum number of redirection-followings. The default limit is 50 redirections. The option also allows for unlimited redirections if set to -1.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\n--max-redirs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Transaction Duration in Hurl\nDESCRIPTION: Shows how to use the `duration` assert in Hurl to check if the total time taken for the HTTP request and response transaction is within a specified limit (in milliseconds).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_165\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output in Hurl\nDESCRIPTION: The `--no-output` option suppresses all output.  By default, Hurl outputs the body of the last response.  This option is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_27\n\nLANGUAGE: Bash\nCODE:\n```\n--no-output\n```\n\n----------------------------------------\n\nTITLE: Disabling Colorized Output in Hurl (Bash)\nDESCRIPTION: Prevents Hurl from adding color escape codes to its output, resulting in plain text. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n--no-color\n```\n\n----------------------------------------\n\nTITLE: Corresponding Hurl Error Outputs for Various Unified Diff Changes - Plaintext\nDESCRIPTION: Hurl error messages aligned with unified diff snippets, showing the test file line, the surrounding request, and the precise removal and addition lines in the body assertion. These outputs help users trace diffs directly back to test locations and understand the nature of changes validating server responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:4:1\n   |\n   | GET http://localhost:8000/test\n 4 | {\n   |   -{\n   |   +[  \n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:5:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 5 |   \"first_name\": \"John\",\n   |   -  \"first_name\": \"John\",\n   |   +   \"first_name\": \"Bob\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:6:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n6  |   \"last_name\": \"Smith\",\n   |   -  \"last_name\": \"Smith\",\n   |   +  \"last_name\": \"Smith\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:6:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n6  |   \"last_name\": \"Smith\"\n   |   - \"last_name\": \"Smith\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:5:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n5  |   \"first_name\": \"John\",\n   |   +  \"middle_name\": \"Bob\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:8:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 8 |   \"age\": 27,\n   |   -  \"age\": 27,\n   |   +  \"age\": 28,\n   | ...\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n28 |     \"Trevor\"\n   |   -    \"Trevor\"\n   |   +    \"Bob\"\n   |\n```\n\n----------------------------------------\n\nTITLE: Capturing MD5 Hash\nDESCRIPTION: This captures the MD5 hash of the response body after content encoding decompression. It employs the `md5` keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_134\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Captures]\nmy_hash: md5\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactive Mode (Hurl)\nDESCRIPTION: Pause execution between requests, similar to setting breakpoints. Press 'C' to continue or 'Q' to quit. This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\n--interactive\n```\n\n----------------------------------------\n\nTITLE: Per-Entry Logging with very-verbose Option - Hurl\nDESCRIPTION: This Hurl entry includes the [Options] section to set very-verbose logging for a specific request, affecting runtime output verbosity for troubleshooting or in-depth inspection. Requires Hurl CLI and a compatible endpoint. Inputs include URL and options; output is detailed execution logs for that entry. Limitation: Increased verbosity may affect readability or log size.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_113\n\nLANGUAGE: hurl\nCODE:\n```\n# ... previous entries\n\nGET https://api.example.org\n[Options]\nvery-verbose: true\nHTTP 200\n\n# ... next entries\n```\n\n----------------------------------------\n\nTITLE: Capturing Last Fetched URL after Redirect with Hurl DSL\nDESCRIPTION: Captures the last URL reached after following HTTP redirection by enabling the location option. The capture is done by declaring a variable followed by a colon and the keyword 'url' inside the [Captures] section. This is useful when testing redirect chains.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_148\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/redirecting\n[Options]\nlocation: true\nHTTP 200\n[Captures]\nlanding_url: url\n```\n\n----------------------------------------\n\nTITLE: Setting Max Time in Hurl\nDESCRIPTION: The `-m, --max-time <SECONDS>` option specifies the maximum time in seconds for a request/response to complete. It sets the standard timeout. Time units can be specified like 20s or 35000ms, and no spaces are permitted.  See also `--connect-timeout`. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\n-m, --max-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Variables - Environment Variables Shell\nDESCRIPTION: Demonstrates using environment variables prefixed with `HURL_` to provide data to a Hurl file. This is an alternative method to the `--variable` flag, allowing shell scripts to set multiple variables easily. The Hurl engine automatically recognizes and uses these environment variables.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ export HURL_today=$(date '+%y%m%d')\n$ export HURL_tomorrow=$(date '+%y%m%d' -d\"+1days\")\n$ hurl test.hurl\n```\n\n----------------------------------------\n\nTITLE: Following Redirects and Sending Credentials (Hurl)\nDESCRIPTION: Similar to `-L, --location`, but allows sending authentication credentials (like username/password for Basic Auth) to hosts redirected to. Use with caution due to potential security risks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_95\n\nLANGUAGE: bash\nCODE:\n```\n--location-trusted\n```\n\n----------------------------------------\n\nTITLE: Hurl Variables File Format Example\nDESCRIPTION: This snippet shows the expected format of a file used with the `hurl --variables-file` option. It's a simple plain text file where each line defines a variable in the `key=value` format. This allows storing sets of variables externally for easier management and reuse.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/templates.md#_snippet_10\n\nLANGUAGE: Plaintext\nCODE:\n```\nhost=example.net\nid=1234\n```\n\n----------------------------------------\n\nTITLE: Using the --to-entry Option in Hurl (bash)\nDESCRIPTION: Executes entries in a Hurl file only up to the specified <ENTRY_NUMBER> (starting from 1). Subsequent entries are ignored. Useful for debugging multi-entry Hurl files. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_120\n\nLANGUAGE: bash\nCODE:\n```\n--to-entry <ENTRY_NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Getting Response Body with Very Verbose Option\nDESCRIPTION: This command demonstrates how to get the full HTTP response body when running tests by using `--very-verbose` option. This output includes response headers and the complete response body, which can be helpful when debugging failures.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nGET https://foo.com/failure\n[Options]\nvery-verbose: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Injecting Secrets via Command Line (`--secret`)\nDESCRIPTION: Demonstrates running `test.hurl` while injecting a secret variable named `token` using the `--secret` option. Secret values are automatically redacted from standard error logs and reports, but not from standard output or JSON reports containing raw responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_203\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --secret token=FooBar test.hurl\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Feedback via POST in Hurl\nDESCRIPTION: This Hurl script provides an example of sending feedback. It makes a POST request to `https://hurl.dev/api/feedback` with a JSON payload containing `name` and `feedback` fields. It asserts that the HTTP response status code is 200.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_8\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://hurl.dev/api/feedback\n{\n  \"name\": \"John Doe\",\n  \"feedback\": \"Hurl is awesome!\"\n}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting with New Expressions in Hurl\nDESCRIPTION: This snippet demonstrates the use of complex expressions within the [Asserts] section.  It allows for more sophisticated validations using boolean operators and combining different expression types.  It includes an expression with a comparison operator and another with a boolean OR operation to evaluate different conditions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/expressions.md#_snippet_3\n\nLANGUAGE: Hurl\nCODE:\n```\n[Asserts]\n(status == 200) or (jsonpath \"$.count' == 82)\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact XML Response Body in Hurl (Implicit)\nDESCRIPTION: Demonstrates the implicit syntax for asserting that the HTTP response body exactly matches the provided XML structure. Hurl automatically parses and compares the decompressed and decoded response body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_169\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Testing Exact JSON Body Match\nDESCRIPTION: This snippet demonstrates a test that validates the exact JSON response body. It checks if the response matches a predefined JSON structure. This is done using an implicit body matching.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_35\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/cats/123\nHTTP 200\n{\n  \"name\" : \"Purrsloud\",\n  \"species\" : \"Cat\",\n  \"favFoods\" : [\"wet food\", \"dry food\", \"<strong>any</strong> food\"],\n  \"birthYear\" : 2016,\n  \"photo\" : \"https://learnwebcode.github.io/json-example/images/cat-2.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Cookie Assertions in Hurl\nDESCRIPTION: Shows the beginning of a Hurl file designed to test cookie setting via the `Set-Cookie` response header. It sets up the request and includes a comment indicating the intent for explicit checks, likely within an `[Asserts]` section which is not fully shown.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_153\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/cookies/set\nHTTP 200\n\n# Explicit check of Set-Cookie header value. If the attributes are\n```\n\n----------------------------------------\n\nTITLE: Executing Sequential Hurl Test Scripts - Shell\nDESCRIPTION: Executes multiple Hurl test scripts (a.hurl, b.hurl, c.hurl) in default synchronous mode using the hurl CLI. No parallelism is used; the scripts run one after another. Requires the Hurl CLI and the specified .hurl files to be present.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test a.hurl b.hurl c.hurl\n```\n\n----------------------------------------\n\nTITLE: Asserting XML Body in Hurl\nDESCRIPTION: This snippet provides an example of asserting an XML response body using the Hurl format.  It issues a GET request to retrieve XML data and checks if the response matches a provided XML structure.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_182\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via npm\nDESCRIPTION: Shows the npm command to install the @orangeopensource/hurl package as a development dependency, which downloads the appropriate Hurl binaries for your platform.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @orangeopensource/hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via .deb on Debian/Ubuntu\nDESCRIPTION: Downloads a specific version Hurl .deb package from GitHub Releases and installs it using apt after updating the package list. This method requires curl and apt and is suitable for Debian >=12 or Ubuntu >=22.04.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_101\n\nLANGUAGE: shell\nCODE:\n```\n$ VERSION=6.1.1\n$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb\n$ sudo apt update && sudo apt install ./hurl_${VERSION}_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Capturing the Response Body as Bytes\nDESCRIPTION: This captures the raw response body as a bytestream. It utilizes the `bytes` keyword to capture the body without decoding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_129\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Captures]\nmy_data: bytes\n```\n\n----------------------------------------\n\nTITLE: Converting to Float with `toFloat` Filter (Hurl)\nDESCRIPTION: Illustrates the usage of the `toFloat` filter in Hurl. This filter attempts to convert a string value to a floating-point number, enabling numerical assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_203\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.pi\" toFloat == 3.14\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output\nDESCRIPTION: This section demonstrates how to obtain a structured JSON output when running Hurl files. It uses the `--json` option, producing a JSON export for each executed Hurl file, useful for automation and integration with other tools.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n$ hurl --json *.hurl\n```\n```\n\n----------------------------------------\n\nTITLE: Equivalent API Testing with Hurl\nDESCRIPTION: Example of the same API test implemented in Hurl. Creates a resource, captures its ID, and then retrieves it, demonstrating Hurl's syntax for requests, assertions, and data capture.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_77\n\nLANGUAGE: hurl\nCODE:\n```\n# Scenario: create and retrieve a cat\n\nPOST http://myhost.com/v1/cats\n{ \"name\": \"Billie\" }\nHTTP 201\n[Captures]\ncat_id: jsonpath \"$.id\"\n[Asserts]\njsonpath \"$.name\" == \"Billie\"\n\nGET http://myshost.com/v1/cats/{{cat_id}}\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Body Assert with Content Encoding (gzip)\nDESCRIPTION: Hurl example showing how body asserts work with gzipped responses. It demonstrates that the `body` assert operates on the decompressed response, regardless of the `Content-Encoding` header value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_29\n\nLANGUAGE: hurl\nCODE:\n```\n# Request a gzipped reponse, the `body` asserts works with ungzipped response\nGET https://example.org\nAccept-Encoding: gzip\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" == \"gzip\"\nbody contains \"<h1>Welcome!</h1>\"\n\n# Without content encoding, asserts remains identical\nGET https://example.org\nHTTP 200\n[Asserts]\nheader \"Content-Encoding\" not exists\nbody contains \"<h1>Welcome!</h1>\"\n```\n\n----------------------------------------\n\nTITLE: Parsing One-line String Literals with Backtick Delimiters\nDESCRIPTION: Defines 'oneline-string' as a string literal enclosed in backticks, containing multiple 'oneline-string-content' or 'placeholder', used for inline strings or templates within 'predicate-value' and 'bytes'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_47\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"oneline-string\">oneline-string</span><span class=\"grammar-usedby\">(used by <a href=\"#predicate-value\">predicate-value</a>,&nbsp;<a href=\"#bytes\">bytes</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal'>`</span>&nbsp;<span class=\"grammar-symbol\">(</span><a href=\"#oneline-string-content\">oneline-string-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>&nbsp;<span class=\"grammar-literal'>`</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Specifying User-Agent with Hurl CLI\nDESCRIPTION: Set the value of the User-Agent header sent in outgoing HTTP requests. This allows customizing how Hurl identifies itself to the server. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_32\n\nLANGUAGE: cli\nCODE:\n```\n-A, --user-agent <NAME>\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Test Mode (Shell)\nDESCRIPTION: Executes Hurl with the `--test` flag and a wildcard pattern (`*.hurl`) to find and run all files with the `.hurl` extension in the current directory recursively. The `--test` flag changes the output format to be more suitable for automated testing scenarios.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test *.hurl\n```\n\n----------------------------------------\n\nTITLE: Adding Delays Between Requests in Hurl\nDESCRIPTION: Example of adding delay between HTTP requests. The first request includes a 5-second delay before execution, while the second has no delay.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_57\n\nLANGUAGE: hurl\nCODE:\n```\n# Delaying this request by 5 seconds (aka sleep)\nGET https://example.org/turtle\n[Options]\ndelay: 5s\nHTTP 200\n\n# No delay!\nGET https://example.org/turtle\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Filter: HtmlEscape\nDESCRIPTION: This snippet uses the `htmlEscape` filter to convert characters like `<`, `>`, and `&` to their HTML-safe counterparts. It asserts that a JSONPath expression's value, after applying the HTML escaping, matches the expected value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_194\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api\nHTTP 200\n[Asserts]\njsonpath \"$.text\" htmlEscape == \"a &gt; b\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output with Hurl\nDESCRIPTION: This shell command demonstrates how to obtain a structured JSON output from Hurl files.  It uses the `--json` option to generate a JSON export for each Hurl file. It requires the Hurl tool to be installed and `*.hurl` files in the current directory or provided directory as input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --json *.hurl\n```\n\n----------------------------------------\n\nTITLE: Using curl Options in Request Options Section\nDESCRIPTION: Example of using curl options for a specific request in the Options section. Maps a hostname to a local IP address for just one request in the file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_69\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://bar.com\nHTTP 200\n\n\nGET http://foo.com:8000/resolve\n[Options]\nresolve: foo.com:8000:127.0.0.1\nHTTP 200\n`Hello World!`\n```\n\n----------------------------------------\n\nTITLE: Capturing Variable and Using in JSONPath Assert (Hurl)\nDESCRIPTION: Shows capturing the response body of the first request into a variable (`index`) and reusing this variable within a JSONPath assertion in a subsequent request. This demonstrates dynamic assertion paths based on previous responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_209\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/index\n\nHTTP 200\n[Captures]\nindex: body\n\n\nGET https://example.org/api/status\n\nHTTP 200\n[Asserts]\njsonpath \"$.errors[{{index}}].id\" == \"error\"\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data\nDESCRIPTION: This snippet shows the usage of `[MultipartFormData]` section to send multipart form data with file uploads, including specification of the file's content type. It illustrates how to represent files to be sent within the Hurl syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_46\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\n[MultipartFormData]\nfield1: value1\nfield2: file,example.txt;\n# One can specify the file content type:\nfield3: file,example.zip; application/zip\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data with Multiline String Body in Hurl\nDESCRIPTION: Shows an alternative approach to sending multipart form data using a multiline string body with boundary markers, allowing direct embedding of text files and HTML content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_36\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/upload\nContent-Type: multipart/form-data; boundary=\"boundary\"\n```\n--boundary\nContent-Disposition: form-data; name=\"key1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"upload1\"; filename=\"data.txt\"\nContent-Type: text/plain\n\nHello World!\n--boundary\nContent-Disposition: form-data; name=\"upload2\"; filename=\"data.html\"\nContent-Type: text/html\n\n<div>Hello <b>World</b>!</div>\n--boundary--\n```\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameter Section in Hurl\nDESCRIPTION: A Hurl example showing how to use a dedicated Query section instead of including query parameters in the URL, making the request more structured and readable.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\n# Check search API:\nGET http://localhost:3000/api/search\n[Query]\nq: 1982\nsort: name\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$\" count == 5\njsonpath \"$[0].name\" == \"Blade Runner\"\njsonpath \"$[0].director\" == \"Ridley Scott\"\njsonpath \"$[0].release_date\" == \"1982-06-25\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on Fedora (Source)\nDESCRIPTION: Installs necessary development packages (pkgconf-pkg-config, gcc, openssl-devel, libxml2-devel) required to build Hurl from source code on Fedora-based Linux distributions using dnf.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_116\n\nLANGUAGE: shell\nCODE:\n```\n$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel\n```\n\n----------------------------------------\n\nTITLE: Hurl Request with Unordered Sections (Query First)\nDESCRIPTION: Illustrates that Hurl request sections like '[Query]' and '[BasicAuth]' can appear in any order after the headers. This example shows a GET request with 'User-Agent' header, followed by the '[Query]' section and then the '[BasicAuth]' section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs\nUser-Agent: My User Agent\n[Query]\nid: 4567\norder: newest\n[BasicAuth]\nalice: secret\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/2 Usage (Hurl)\nDESCRIPTION: Tells Hurl to use HTTP version 2. For HTTPS, Hurl negotiates HTTP/2 during TLS handshake (default). For HTTP, it attempts an upgrade using the 'Upgrade:' header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\n--http2\n```\n\n----------------------------------------\n\nTITLE: Capturing a Variable\nDESCRIPTION: This snippet captures the value of one variable into another variable.  It illustrates the use of variables, demonstrating how to capture one variable into another using the variable keyword.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_137\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Captures]\nin: body\nname: variable \"in\"\n```\n\n----------------------------------------\n\nTITLE: Running Hurl in Interactive Mode\nDESCRIPTION: This command executes a Hurl file in interactive mode.  It allows the user to step through requests one at a time. This is useful for inspecting the state between requests.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --verbose --interactive basic.hurl\n```\n\n----------------------------------------\n\nTITLE: Define JSON object structure - Hurl Grammar\nDESCRIPTION: Defines the structure of a JSON object in Hurl. It starts with an opening brace '{', followed by one or more key-value pairs separated by commas ',', and ends with a closing brace '}'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_66\n\nLANGUAGE: Grammar\nCODE:\n```\n{ json-key-value (, json-key-value)* }\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Export of Hurl Test - html\nDESCRIPTION: This HTML fragment displays an annotated view of the Hurl test file with syntax highlighting. The <pre><code> block includes semantic classes for requests, responses, status codes, and response bodies. It is generated as an export for more readable reporting and analysis. No dependencies beyond a static HTML renderer. Limitations: Structure is fixed; syntax highlighting relies on CSS/JS.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<pre><code class=\"language-hurl\"><span class=\"hurl-entry\"><span class=\"request\"><span class=\"line\"><span class=\"method\">GET</span> <span class=\"url\">http://localhost:8000/include</span></span>\n</span><span class=\"response\"><span class=\"line\"></span>\n<span class=\"line\"><span class=\"version\">HTTP</span> <span class=\"number\">200</span></span>\n<span class=\"line\"><span class=\"string\">`Hello`</span></span>\n</span></span><span class=\"line\"></span>\n</code></pre>\n\n```\n\n----------------------------------------\n\nTITLE: Bytes Assert with StartsWith, Count, and Header Check\nDESCRIPTION: Hurl example demonstrating bytes asserts to check the raw bytestream of the HTTP response body. It uses the `startsWith` predicate with a hex value, the `count` predicate to verify the number of bytes, and a header check to validate the `Content-Length`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_30\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\nbytes count == 12424\nheader \"Content-Length\" == \"12424\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Colorized Output with Hurl CLI\nDESCRIPTION: Prevents Hurl from colorizing its output using the `--no-color` flag. This is useful for environments or terminals that do not support ANSI color codes. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\n--no-color\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Redirects with Hurl CLI\nDESCRIPTION: Controls the maximum number of HTTP redirections Hurl will follow using the `--max-redirs` option. Takes a numerical argument `<NUM>`. The default limit is 50; set to -1 for unlimited redirections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\n--max-redirs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Parallel Jobs in Hurl\nDESCRIPTION: Specifies the maximum number of Hurl files to execute in parallel when using the --parallel flag. Defaults typically to the number of CPU cores. Requires the --parallel flag to be active. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\n--jobs <NUM>\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report (CLI)\nDESCRIPTION: This option generates a JSON report in a specified directory. Existing reports are updated with the new test results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_111\n\nLANGUAGE: markdown\nCODE:\n```\n--report-json <DIR>\n```\n\n----------------------------------------\n\nTITLE: Testing IP Address in Response with Hurl\nDESCRIPTION: Example of testing the IP address of the response using string assertions. Demonstrates checking for IPv6 address format and prefix.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_55\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nip == \"2001:0db8:85a3:0000:0000:8a2e:0370:733\"\nip startsWith \"2001\"\nip isIpv6\n```\n\n----------------------------------------\n\nTITLE: Using Advanced String Assertions in Hurl\nDESCRIPTION: A Hurl example showing how to use the startsWith matcher to test a partial string value in a JSON response for more flexible assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/chaining-requests.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\n# Check search API:\nGET http://localhost:3000/api/search\n[Query]\nq: 1982\nsort: name\nHTTP 200\n[Asserts]\nheader \"Content-Type\" == \"application/json; charset=utf-8\"\njsonpath \"$\" count == 5\njsonpath \"$[0].name\" == \"Blade Runner\"\njsonpath \"$[0].director\" == \"Ridley Scott\"\njsonpath \"$[0].release_date\" startsWith \"1982\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Results in JSON Format (Hurl)\nDESCRIPTION: Output the result of each Hurl file execution in JSON format, closely resembling the HAR (HTTP Archive) format. This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version with Explicit Asserts in Hurl\nDESCRIPTION: Example of testing HTTP protocol version using explicit assertions. Includes both exact matching and numerical comparison of version numbers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_54\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nversion == \"3\"\n\nGET https://bar.com\nHTTP 200\n[Asserts]\nversion == \"2\"\nversion toFloat > 1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Requests with Variables (test.hurl)\nDESCRIPTION: A basic Hurl file demonstrating two GET requests that use mustache-style template variables ({{host}} and {{id}}) in the URL. This file serves as the target for various variable injection methods shown later.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_197\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Templating JSON Body in Hurl\nDESCRIPTION: Shows how to use variables in a JSON body to create dynamic request content, with variables for different data types (string, boolean, null, number) that can be set via command line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_38\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org/api/hits\nContent-Type: application/json\n{\n    \"key0\": \"{{a_string}}\",\n    \"key1\": {{a_bool}},\n    \"key2\": {{a_null}},\n    \"key3\": {{a_number}}\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --variable a_string=apple \\\n       --variable a_bool=true \\\n       --variable a_null=null \\\n       --variable a_number=42 \\\n       test.hurl\n```\n\n----------------------------------------\n\nTITLE: Using the --help Option in Hurl (bash)\nDESCRIPTION: Displays usage help information, listing all available command-line options with brief descriptions. The short form -h is also available.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_128\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-string\nDESCRIPTION: Defines a single-line string enclosed in backticks (`) in Hurl grammar, used for byte sequences. It contains zero or more occurrences of either one-line string content (`oneline-string-content`) or template expressions (`template`), enclosed within backticks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_237\n\nLANGUAGE: Grammar\nCODE:\n```\noneline-string ::= '`' (oneline-string-content | template)* '`'\n```\n\n----------------------------------------\n\nTITLE: Using Regex assertions in Hurl\nDESCRIPTION: Demonstrates how to verify text responses using regex assertions with capture groups. Shows both the escaped backslash syntax and regex literal syntax.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_35\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/hello\nHTTP 200\n[Asserts]\nregex \"^(\\\\d{4}-\\\\d{2}-\\\\d{2})$\" == \"2018-12-31\"\n# Same assert as previous using regex literals\nregex /^(\\d{4}-\\d{2}-\\d{2})$/ == \"2018-12-31\"\n```\n\n----------------------------------------\n\nTITLE: Defining the ca-certificate-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'cacert' option. It consists of the literal 'cacert', a colon, a filename specifying the CA certificate file path, and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_9\n\nLANGUAGE: grammar\nCODE:\n```\ncacert : filename lt\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-file\nDESCRIPTION: Defines the grammar rule 'oneline-file' for specifying a file path. It consists of the literal 'file,', followed by a 'filename' rule (defined elsewhere), and terminates with a semicolon ';'. This rule is utilized by 'predicate-value' and 'bytes'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_33\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\nfile, filename ;\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL API Requests with Hurl\nDESCRIPTION: Shows how to send a GraphQL query using Hurl, requesting specific fields from a human entity with custom units for the height field.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/hurl/README.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/graphql\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Generating TAP Report (CLI)\nDESCRIPTION: This option generates a TAP (Test Anything Protocol) report to a specified file. If the file exists, it's updated. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_113\n\nLANGUAGE: markdown\nCODE:\n```\n--report-tap <FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string\nDESCRIPTION: Defines the grammar rule 'key-string' used for keys in various contexts like key-value pairs, file parameters, captures, and variable values. It consists of one or more occurrences of either 'key-string-content' or 'placeholder'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_39\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n(key-string-content|placeholder)+\n```\n\n----------------------------------------\n\nTITLE: Custom Address Resolution with Hurl CLI\nDESCRIPTION: Provide a custom IP address for a specific host and port pair, overriding the standard DNS resolution. This behaves like a command-line equivalent to an /etc/hosts entry for Hurl requests. Useful for testing against specific server instances.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_23\n\nLANGUAGE: cli\nCODE:\n```\n--resolve <HOST:PORT:ADDR>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Headers in Hurl Requests\nDESCRIPTION: Adds a custom header to the HTTP request. This option can be used multiple times to add several headers. Ensure header values do not contain newline or carriage return characters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\n-H, --header <HEADER>\n```\n\n----------------------------------------\n\nTITLE: Current error output for content differences\nDESCRIPTION: Shows the current textual comparison output when JSON contains different values and field ordering.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ hurl test.hurl\nerror: Assert body value\n  --> /tmp/test2.hurl:4:1\n  |\n  | GET http://localhost:8000/bob\n  | ...\n4 |   \"name\": \"Bob\",\n  |   -  \"name\": \"Bob\",\n  |   -  \"age\": 22\n  |   -}\n  |   +  \"age\": 20,\n  |   +  \"name\": \"Bob\"\n  |   +}\n  |   +\n```\n\n----------------------------------------\n\nTITLE: Building the Application with Cross-Compilation Environment\nDESCRIPTION: This snippet sources an environment setup script, installs Rust, and triggers a release build script. It automates setup and compilation steps necessary for cross-platform binary generation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource bin/export_cross_compile_env.sh\nbin/install_rust.sh\nbin/release/release.sh\n```\n\n----------------------------------------\n\nTITLE: Ignoring Asserts in Hurl Files\nDESCRIPTION: Causes Hurl to ignore all assertions defined within the specified Hurl file(s). This is useful for running requests without validating responses. This is a command-line interface (CLI) only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n--ignore-asserts\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Attribute Value with XPath in Hurl\nDESCRIPTION: Illustrates asserting the string value of an HTML data attribute (`data-visible` on an `<article>` tag) using Hurl's `xpath` assert. It uses the XPath `string()` function to extract the attribute value and compares it to a string literal `\"true\"`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_146\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/home\nHTTP 200\n[Asserts]\nxpath \"string(//article/@data-visible)\" == \"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Functions in Hurl Grammar\nDESCRIPTION: Grammar rules for various predicate functions used in Hurl for assertions and value matching. These predicates include matches, exists, isEmpty, includes, and various type checking functions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_221\n\nLANGUAGE: Grammar\nCODE:\n```\nmatch-predicate ::= matches sp (quoted-string|regex)\nexist-predicate ::= exists\nis-empty-predicate ::= isEmpty\ninclude-predicate ::= includes sp predicate-value\ninteger-predicate ::= isInteger\nfloat-predicate ::= isFloat\nboolean-predicate ::= isBoolean\nstring-predicate ::= isString\ncollection-predicate ::= isCollection\ndate-predicate ::= isDate\niso-date-predicate ::= isIsoDate\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logs and Verbose Output in Hurl (Shell)\nDESCRIPTION: Demonstrates enabling additional error and debug logs during Hurl test execution by setting the --error-format long, --verbose, or --very-verbose options. Requires Hurl CLI; inputs are options and test files. Output is more detailed logs, including failed response bodies or debug traces.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --error-format long hello.hurl error_assert_status.hurl \n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --test --very-verbose .\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Protection Test Hurl\nDESCRIPTION: This Hurl snippet tests the CSRF token protection. It attempts to post user data to the /signup endpoint without a CSRF token, expecting a 403 Forbidden response, indicating that the server is correctly enforcing CSRF protection.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/security.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\n# Test CSRF token is mandatory:\nPOST http://localhost:3000/signup\n[Form]\nusername: bob\nname: Bob\nemail: bob78@example.net\npassword: 12345678\nHTTP 403\n```\n\n----------------------------------------\n\nTITLE: Logging into GitHub Container Registry\nDESCRIPTION: Authenticates Docker client to GitHub Container Registry using a provided token, enabling push and pull operations on private images. It expects a GitHub token and uses Docker login with stdin pass.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho <hurl-bot github token> | docker login ghcr.io --username hurl-bot --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Testing Multiline String Body\nDESCRIPTION: This example illustrates testing a multiline response body with plain text. It sends a GET request and asserts the body content matches the expected multiline string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_39\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://example.org/models\nHTTP 200\n```\nYear,Make,Model,Description,Price\n1997,Ford,E350,\"ac, abs, moon\",3000.00\n1999,Chevy,\"Venture \"\"Extended Edition\"\"\",\"\",4900.00\n1999,Chevy,\"Venture \"\"Extended Edition, Very Large\"\"\",,5000.00\n1996,Jeep,Grand Cherokee,\"MUST SELL! air, moon roof, loaded\",4799.00\n```\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Content Check\nDESCRIPTION: This snippet demonstrates how to check the SHA-256 hash of the response body. This can be used to verify the integrity of the downloaded content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_34\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.tar.gz\nHTTP 200\n[Asserts]\nsha256 == hex,039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81;\n```\n\n----------------------------------------\n\nTITLE: Parallel Hurl Test Output with Progress and Worker Control - Shell\nDESCRIPTION: Exhibits sample output of Hurl runs in parallel mode with varying worker counts, showing both the progress bar and status messages for multi-file execution. Important for illustrating the system’s dynamic reporting with different job concurrency levels. Only requires Hurl CLI and multiple .hurl files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --parallel --max-workers 5\n/tmp/foo/bar/job-2.hurl: Success (2 request(s) in x ms)\n/tmp/foo/bar/job-6.hurl: Success (4 request(s) in x ms)\n/tmp/foo/bar/job-4.hurl: Success (7 request(s) in x ms)\nExecuted files: 3/10 (30%)\n[=========>              ] 5/10  /tmp/foo/bar/baz/job-1.hurl: Running\n[>                       ] 1/1   /tmp/foo/bar/ee/job-7.hurl: Running\n[================>       ] 3/3   /tmp/foo/bar/zzzzzz/job-3.hurl: Running\n[>                       ] 1/5   /tmp/foo/bar/fff/job-8.hurl: Running\n[==============>         ] 8/12  /tmp/foo/bar/ddd/job-5.hurl: Running\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --parallel --max-workers 1\n/tmp/foo/bar/baz/job-1.hurl: Success (10 request(s) in x ms)\n/tmp/foo/bar/job-2.hurl: Success (2 request(s) in x ms)\n/tmp/foo/bar/zzzzzz/job-3.hurl: Success (3 request(s) in x ms)\n/tmp/foo/bar/job-4.hurl: Success (7 request(s) in x ms)\nExecuted files: 4/10 (40%)\n[========>               ] 5/12  /tmp/foo/bar/ddd/job-5.hurl: Running\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --parallel --max-workers 60\n/tmp/foo/bar/job-2.hurl: Success (2 request(s) in x ms)\n/tmp/foo/bar/job-6.hurl: Success (4 request(s) in x ms)\n/tmp/foo/bar/job-4.hurl: Success (7 request(s) in x ms)\nExecuted files: 3/100 (3%)\n[=========>              ] 5/10  /tmp/foo/bar/baz/job-1.hurl: Running\n[>                       ] 1/1   /tmp/foo/bar/ee/job-7.hurl: Running\n[================>       ] 3/3   /tmp/foo/bar/zzzzzz/job-3.hurl: Running\n[>                       ] 1/5   /tmp/foo/bar/fff/job-8.hurl: Running\n[==============>         ] 8/12  /tmp/foo/bar/ddd/job-5.hurl: Running\n...55 more\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output (CLI)\nDESCRIPTION: This option suppresses the output of the response body.  By default, Hurl outputs the body of the last response. This is useful when the user is only interested in the request's outcome, e.g., the status code. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_103\n\nLANGUAGE: markdown\nCODE:\n```\n--no-output\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Oneline Text Response Body in Hurl\nDESCRIPTION: Shows how to assert that a text-based HTTP response body, which does not contain newlines, exactly matches a given string using the single backtick syntax (`...`) in Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_172\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n\n----------------------------------------\n\nTITLE: Formatting Hurl Files Using hurlfmt - Shell\nDESCRIPTION: Demonstrates how to format a Hurl file using the hurlfmt command-line tool. The snippet executes hurl targeting \"hello.hurl\", performing an HTTP GET request to a local endpoint and outputting both the request and formatted response. No dependencies other than hurlfmt are required. Input is a Hurl file, and the output is a colorized, formatted version of the file that shows the HTTP method, target URL, protocol version, and response status.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual/hurlfmt.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl hello.hurl\nGET http://localhost:8000/hello\n\nHTTP/1.0 200\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version with Implicit Asserts in Hurl\nDESCRIPTION: Example of testing HTTP protocol version using implicit assertions. The requests check for HTTP/3 and HTTP/2 protocols respectively.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_53\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP/3 200\n\nGET https://bar.com\nHTTP/2 200\n```\n\n----------------------------------------\n\nTITLE: Example Hurl File for Variable Injection (`test.hurl`)\nDESCRIPTION: This Hurl file is used as an example to demonstrate various methods of injecting variables. It uses template syntax `{{host}}` and `{{id}}` in URLs, expecting these variables to be provided at runtime.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_212\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://{{host}}/{{id}}/status\nHTTP 304\n\nGET https://{{host}}/health\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-text\nDESCRIPTION: Defines the rule 'quoted-string-text' which matches any sequence of characters that are not a double quote (\") or a backslash (\\). It represents the unescaped textual parts within a 'quoted-string-content'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_37\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n~[\"\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/2 Usage in Hurl\nDESCRIPTION: Instructs Hurl to use HTTP version 2. For HTTPS, Hurl negotiates HTTP/2 during the TLS handshake (default behavior). For HTTP, it attempts an upgrade using the 'Upgrade:' request header.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n--http2\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version Explicit Assert\nDESCRIPTION: This Hurl snippet tests the HTTP version of a response using explicit asserts. The example shows checking for HTTP/3 and HTTP/2 responses using version assertions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_46\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nversion == \"3\"\n\nGET https://bar.com\nHTTP 200\n[Asserts]\nversion == \"2\"\nversion toFloat > 1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Lexical Rule: integer\nDESCRIPTION: Defines the 'integer' lexical rule in the Hurl grammar. It consists of one or more 'digit' characters and is used by rules like 'integer-option', 'duration-option', 'variable-value', 'nth-filter', 'float', and 'number'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_95\n\nLANGUAGE: Grammar\nCODE:\n```\ndigit+\n```\n\n----------------------------------------\n\nTITLE: Redacting Secrets in Hurl Using Command Line\nDESCRIPTION: Example of using the command line to provide secrets that will be redacted in logs. The token is provided as a command line parameter.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --secret token=1234 file.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining a Regex Query in Hurl\nDESCRIPTION: Defines the grammar rule for performing regular expression queries on the response. The rule specifies that a regex query consists of the literal 'regex', a space, and either a quoted string or a regex expression. This enables testing the response body content against a regular expression.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_20\n\nLANGUAGE: Hurl\nCODE:\n```\nregex&nbsp;<a href=\"#sp\">sp</a>&nbsp;<span class=\"grammar-symbol\">(</span><a href=\"#quoted-string\">quoted-string</a><span class=\"grammar-symbol\">|</span><a href=\"#regex\">regex</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Defining json-string-content Grammar Rule\nDESCRIPTION: Defines the allowed content within a JSON string, excluding the enclosing quotes and placeholders. It can be either raw `json-string-text` or a `json-string-escaped-char`. This rule is used by the `json-string` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_237\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\njson-string-text|json-string-escaped-char\n```\n\n----------------------------------------\n\nTITLE: Limiting Transfer Rate (Hurl)\nDESCRIPTION: Specify the maximum transfer rate (in bytes/second) for both uploads and downloads to limit bandwidth usage.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_93\n\nLANGUAGE: bash\nCODE:\n```\n--limit-rate <SPEED>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication Parameters\nDESCRIPTION: This snippet shows how to define Basic Authentication credentials in Hurl format.  This is an optional method of providing authentication credentials. The section is marked with `[BasicAuth]`, followed by username:password pairs. Sections are unordered.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_126\n\nLANGUAGE: hurl\nCODE:\n```\n[BasicAuth]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Variables with Hurl CLI\nDESCRIPTION: Define a variable whose value should be treated as a secret. Secrets are automatically redacted from logs and reports. They can be used anywhere regular variables are permitted within Hurl files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_26\n\nLANGUAGE: cli\nCODE:\n```\n--secret <NAME=VALUE>\n```\n\n----------------------------------------\n\nTITLE: Defining Float Grammar Rule in Hurl Grammar Syntax\nDESCRIPTION: Defines the float grammar as a combination of an integer part followed by a fraction part. Floats are used by variable-value and number rules. The fraction is defined separately as a period followed by one or more digits.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_258\n\nLANGUAGE: grammar\nCODE:\n```\nfloat : integer fraction\n```\n\n----------------------------------------\n\nTITLE: Preserving Path Sequences in Hurl\nDESCRIPTION: The `--path-as-is` option tells Hurl not to handle sequences of /../ or /./ in the given URL path.  Normally, Hurl will squash these sequences, but this option prevents that behavior.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\n--path-as-is\n```\n\n----------------------------------------\n\nTITLE: Defining the capture Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for capturing a value from the HTTP response. It starts optionally with line terminators (lt*), followed by a key-string (variable name), a colon, a query to locate the value, optional filters (preceded by sp), an optional 'redact' keyword (preceded by sp), and a final line terminator (lt). This rule is used in the captures-section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_5\n\nLANGUAGE: grammar\nCODE:\n```\nlt*\\nkey-string : query (sp filter)* (sp redact)? lt\n```\n\n----------------------------------------\n\nTITLE: Alternative Parameter Order in HTTP Request\nDESCRIPTION: This snippet shows an equivalent Hurl request to the previous one, with a different order of sections. The key takeaway is that the order of sections like `[QueryStringParams]` and `[BasicAuth]` does not affect the result. The order of sections can be mixed in any way as per the specifications.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_130\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs\nUser-Agent: My User Agent\n[BasicAuth]\nalice: secret\n[QueryStringParams]\nid: 4567\norder: newest\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report with Hurl CLI\nDESCRIPTION: Generates an HTML test report in the specified directory `<DIR>` using the `--report-html` option. If a report exists in the directory, it will be updated. This is a command-line only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\n--report-html <DIR>\n```\n\n----------------------------------------\n\nTITLE: Hurl Request with Unordered Sections (BasicAuth First)\nDESCRIPTION: Provides another example demonstrating the unordered nature of Hurl request sections. This GET request has the 'User-Agent' header, followed by the '[BasicAuth]' section and then the '[Query]' section, achieving the same result as the previous example.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/request.md#_snippet_2\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/dogs\nUser-Agent: My User Agent\n[BasicAuth]\nalice: secret\n[Query]\nid: 4567\norder: newest\n```\n\n----------------------------------------\n\nTITLE: Filter: DaysBeforeNow\nDESCRIPTION: This snippet illustrates the use of the `daysBeforeNow` filter. It checks the `Start-Date` certificate header to ensure the number of days before now is less than 100.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_191\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Start-Date\" daysBeforeNow < 100\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-escaped-char\nDESCRIPTION: Defines the rule 'quoted-string-escaped-char' for handling escaped characters within a 'quoted-string-content'. It matches a backslash followed by specific characters (\", \\, \\b, \\f, \\n, \\r, \\t) or a Unicode escape sequence (\\u followed by 'unicode-char').\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_38\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\\ (\"|\\|\\b|\\f|\\n|\\r|\\t|\\u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on Alpine based Linux\nDESCRIPTION: Installs the necessary build dependencies for Hurl on Alpine-based Linux distributions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-content\nDESCRIPTION: Defines the content allowed within a 'key-string'. It is composed of zero or more occurrences of either plain key text ('key-string-text') or specific escaped characters ('key-string-escaped-char').\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_40\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n(key-string-text|key-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: split-filter\nDESCRIPTION: Defines the 'split-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'split', followed by a space ('sp') and a 'quoted-string' representing the separator.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_83\n\nLANGUAGE: Grammar\nCODE:\n```\nsplit sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: nth-filter\nDESCRIPTION: Defines the 'nth-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'nth', followed by a space ('sp') and an 'integer' specifying the index.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_80\n\nLANGUAGE: Grammar\nCODE:\n```\nnth sp integer\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Form Data in Hurl\nDESCRIPTION: Shows how to send form data in a POST request using the [Form] section, including boolean, string, and numeric values, as well as using a variable in the form data.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_34\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/contact\n[Form]\ndefault: false\ntoken: {{token}}\nemail: john.doe@rookie.org\nnumber: 33611223344\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Hurl\nDESCRIPTION: The command demonstrates how to obtain a structured JSON output from running Hurl files.  The `--json` option is used to generate a JSON export for each executed Hurl file, providing detailed results.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_68\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --json *.hurl\n```\n\n----------------------------------------\n\nTITLE: Defining Digit Grammar Rule Using a Regular Expression Character Class\nDESCRIPTION: Defines a digit as any single character between '0' and '9'. This is a fundamental lexical unit used by integer, fraction, and exponent rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_260\n\nLANGUAGE: grammar\nCODE:\n```\ndigit : /[0-9]/\n```\n\n----------------------------------------\n\nTITLE: Define filename password field syntax - Hurl Grammar\nDESCRIPTION: Defines the structure of a password field when included within a filename (e.g., for client certificates). It can consist of filename password content or placeholders, repeated zero or more times.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_60\n\nLANGUAGE: Grammar\nCODE:\n```\n(filename-password-content|placeholder)*\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on Fedora based Linux\nDESCRIPTION: Installs the necessary build dependencies for Hurl on Fedora-based Linux distributions. Requires dnf package manager and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/1.1 Usage (Hurl)\nDESCRIPTION: Tells Hurl to explicitly use HTTP version 1.1 for the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\n--http1.1\n```\n\n----------------------------------------\n\nTITLE: Body Assert with Contains Predicate\nDESCRIPTION: Hurl example demonstrating a body assert to check if the HTTP response body contains a specific string. It uses the `contains` predicate to verify the presence of \"<h1>Welcome!</h1>\" in the body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_26\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\nbody contains \"<h1>Welcome!</h1>\"\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report with Hurl CLI\nDESCRIPTION: Create an HTML report detailing the results of the Hurl execution in the specified directory. If a report already exists at the location, it will be updated with the new test results. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_19\n\nLANGUAGE: cli\nCODE:\n```\n--report-html <DIR>\n```\n\n----------------------------------------\n\nTITLE: Testing SSL Certificate Properties in Hurl\nDESCRIPTION: Shows how to validate SSL certificate attributes including subject, issuer, expiration date, and serial number format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_49\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\n[Asserts]\ncertificate \"Subject\" == \"CN=example.org\"\ncertificate \"Issuer\" == \"C=US, O=Let's Encrypt, CN=R3\"\ncertificate \"Expire-Date\" daysAfterNow > 15\ncertificate \"Serial-Number\" matches /[\\da-f]+/\n```\n\n----------------------------------------\n\nTITLE: Defining the multipart-form-data-param Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for a parameter within a multipart/form-data section. It can be either a file-param or a standard key-value pair. This rule is used within the multipart-form-data-section.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_1\n\nLANGUAGE: grammar\nCODE:\n```\nfile-param|key-value\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string\nDESCRIPTION: Defines the grammar rule 'quoted-string' for strings enclosed in double quotes. It allows zero or more occurrences of either 'quoted-string-content' or 'placeholder' rules within the quotes. This versatile rule is used extensively across various query types, predicates, filters, and variable definitions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_35\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\" (quoted-string-content|placeholder)* \"\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Shell command to verify that the Movies Box Docker container is running properly.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                                          COMMAND                  CREATED         STATUS         PORTS                                       NAMES\n4002ce42e507   ghcr.io/jcamiel/hurl-express-tutorial:latest   \"node dist/bin/www.js\"   3 seconds ago   Up 2 seconds   0.0.0.0:3000->3000/tcp, :::3000->3000/tcp   movies\n```\n\n----------------------------------------\n\nTITLE: Defining an Equal Predicate in Hurl\nDESCRIPTION: Defines the grammar rule for the equality predicate. It requires the literal '==' followed by a space and then the predicate value, which can be a number, a quoted string, or a placeholder.  It is used to assert that a queried value is equal to the specified value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_28\n\nLANGUAGE: Hurl\nCODE:\n```\n<span class=\"grammar-literal\">==</span>&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#predicate-value\">predicate-value</a>\n```\n\n----------------------------------------\n\nTITLE: Defining a Header Query in Hurl\nDESCRIPTION: Defines a grammar rule for querying HTTP headers. The rule specifies that a header query consists of the literal 'header', a space, and a quoted string representing the header value. This is used to extract header values from an HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_14\n\nLANGUAGE: Hurl\nCODE:\n```\nheader&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#quoted-string\">quoted-string</a>\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Body from a File\nDESCRIPTION: This snippet shows how to post a JSON body by referencing a local file using the `file,data.json;` syntax, after setting the `Content-Type` header. This method is useful for reusing large JSON payloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_49\n\nLANGUAGE: hurl\nCODE:\n```\nPOST https://example.org/api/tests\nContent-Type: application/json\nfile,data.json;\n```\n\n----------------------------------------\n\nTITLE: Maintaining Input Order with GNU Parallel --keep-order Option - Shell\nDESCRIPTION: Demonstrates GNU Parallel's --keep-order (-k) feature to ensure outputs are printed in the same order as input arguments, despite parallel execution. This is critical for tests where result order is significant. Requires GNU Parallel.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel sleep {}; echo {} done ::: 5 4 3 2 1\n1 done\n2 done\n3 done\n4 done\n5 done\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for One-Line String Text in Hurl Grammar\nDESCRIPTION: Defines the `oneline-string-text` rule as any sequence of characters that are not '#', newline ('\\n'), backslash ('\\'), or backtick ('). This constitutes the unescaped text within `oneline-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_215\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-regex\">~[#\\n\\\\]</span> <span class=\"grammar-symbol\">~</span><span class=\"grammar-literal\">`</span>\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on Arch based Linux\nDESCRIPTION: Installs the necessary build dependencies for Hurl on Arch-based Linux distributions. Requires pacman package manager and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2\n```\n\n----------------------------------------\n\nTITLE: Repeating Input Files with Hurl CLI\nDESCRIPTION: Execute the sequence of input Hurl files a specified number of times. A value of -1 indicates an infinite loop. This option is available exclusively through the command-line interface.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_18\n\nLANGUAGE: cli\nCODE:\n```\n--repeat <NUM>\n```\n\n----------------------------------------\n\nTITLE: Enabling .netrc Authentication (CLI)\nDESCRIPTION: This option enables the use of a .netrc file (in the user's home directory) for retrieving username and password credentials. This provides a way to authenticate against servers. It is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_99\n\nLANGUAGE: markdown\nCODE:\n```\n-n, --netrc\n```\n\n----------------------------------------\n\nTITLE: Organizing Hurl Test Files in Folders - Shell\nDESCRIPTION: This snippet illustrates a directory structure convention for separating critical and additional Hurl tests. Dependencies: file system access and Hurl CLI. Inputs: properly named and organized Hurl files in respective folders. Outputs: logical groupings for test execution and simplified command usage in CI/CD or local development.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_99\n\nLANGUAGE: Shell\nCODE:\n```\ncritical/test1.hurl\ncritical/test2.hurl\nadditional/test1.hurl\nadditional/test2.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Per-Request Trusted Redirect via [Options] Section - Hurl\nDESCRIPTION: This code demonstrates the use of the [Options] section in a Hurl request to enable trusted redirection exclusively for that request. Inputs are the target URL and option value. Dependency: compatible endpoint; Hurl's CLI tool. Output: follows trusted redirects and validates the 200 status code. Limitation: The option only applies to the specific request where defined.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_116\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://google.fr\n[Options]\nlocation-trusted: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Forcing IPv4 Resolution (Hurl)\nDESCRIPTION: Tells Hurl to use only IPv4 addresses when resolving host names, preventing attempts to use IPv6.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_88\n\nLANGUAGE: bash\nCODE:\n```\n-4, --ipv4\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Windows via Chocolatey\nDESCRIPTION: Installs Hurl using the Chocolatey package manager on Windows. Requires Chocolatey (choco command) to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_108\n\nLANGUAGE: shell\nCODE:\n```\n$ choco install hurl\n```\n\n----------------------------------------\n\nTITLE: Running Critical Hurl Tests Only - Shell\nDESCRIPTION: This shell command runs only the Hurl tests in the 'critical' folder using a glob pattern. Prerequisites: organized test folders and Hurl CLI. The input is the file selection pattern; the output is execution of selected tests. Suitable for CI, regression testing, or prioritizing important test sets.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_100\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurl --test critical/*.hurl\n\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order Mark (BOM)\nDESCRIPTION: This snippet demonstrates how to check for the presence of a Byte Order Mark (BOM) in the response body using the `bytes startsWith hex` assertion. This assertion verifies the presence of a specific hex sequence.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_56\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/data.bin\nHTTP 200\n[Asserts]\nbytes startsWith hex,efbbbf;\n```\n\n----------------------------------------\n\nTITLE: Specifying Private Key File (Hurl)\nDESCRIPTION: Provide the file name containing the private key for client certificate authentication.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_92\n\nLANGUAGE: bash\nCODE:\n```\n--key <KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining Fraction Grammar Rule in Hurl Grammar Syntax\nDESCRIPTION: Defines a fraction portion of a float as a period followed by one or more digits. It is used together with integers to form floats and JSON numbers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_262\n\nLANGUAGE: grammar\nCODE:\n```\nfraction : \".\" digit+\n```\n\n----------------------------------------\n\nTITLE: Proposed jsonpath error format for field value difference\nDESCRIPTION: Shows how a field value difference would be displayed using the proposed semantic comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_4\n\nLANGUAGE: hurl\nCODE:\n```\n--> test.hurl:4:0\n  |\n  | GET http://localhost:8000/modify\n  | ...\n4 | jsonpath \"$.age\"\n  |   actual:   int <20>\n  |   expected: int <22>\n```\n\n----------------------------------------\n\nTITLE: Checking response time with duration assertions in Hurl\nDESCRIPTION: Shows how to verify the performance of an HTTP transaction by asserting that the total duration is below a specific threshold.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_41\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/helloworld\nHTTP 200\n[Asserts]\nduration < 1000   # Check that response time is less than one second\n```\n\n----------------------------------------\n\nTITLE: Creating a Windows 64-bit ZIP Package of Hurl\nDESCRIPTION: Executes a script to package the built Hurl binary into a ZIP archive, facilitating easy distribution or backup.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd c:\\hurl\n.\\bin\\release\\create_windows64_zip_package.ps1\n```\n\n----------------------------------------\n\nTITLE: Redirecting Hurl Output to a File\nDESCRIPTION: Writes the Hurl output to the specified `<FILE>` instead of standard output (stdout) using the `-o` or `--output` option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\n-o, --output <FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining the file-contenttype Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for specifying the content type of a file within a file-value. It consists of a value-string representing the MIME type.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_4\n\nLANGUAGE: grammar\nCODE:\n```\nvalue-string\n```\n\n----------------------------------------\n\nTITLE: Defining a Greater Than Predicate in Hurl\nDESCRIPTION: Defines the grammar rule for the 'greater than' predicate. This requires the literal '>' followed by a space and then either a number, a quoted string, or a placeholder.  It is used for numerical or string comparisons.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_30\n\nLANGUAGE: Hurl\nCODE:\n```\n<span class=\"grammar-literal\">&gt;</span>&nbsp;<a href=\"#sp\">sp</a>&nbsp;<span class=\"grammar-symbol\">(</span><a href=\"#number\">number</a><span class=\"grammar-symbol\">|</span><a href=\"#quoted-string\">quoted-string</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Asserting Base64 Body in Hurl\nDESCRIPTION: This snippet shows how to assert a response body encoded in Base64. The `base64,` prefix indicates the content is Base64 encoded and the assertion checks for a specific encoded string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_186\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org\nHTTP 200\nbase64,TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gSW4gbWFsZXN1YWRhLCBuaXNsIHZlbCBkaWN0dW0gaGVuZHJlcml0LCBlc3QganVzdG8gYmliZW5kdW0gbWV0dXMsIG5lYyBydXRydW0gdG9ydG9yIG1hc3NhIGlkIG1ldHVzLiA=;\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Article Node with a Data Attribute in XML\nDESCRIPTION: This XML snippet illustrates the definition of an article element with an id and a custom data-visible attribute. The data attribute is used in subsequent Hurl assertions to test its value. The code assumes XML/HTML syntax and can be used as part of a larger HTML document or in documentation for attribute extraction testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<article\n  id=\"electric-cars\"\n  data-visible=\"true\"\n...\n</article>\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on macOS (Shell)\nDESCRIPTION: Installs necessary build tools for macOS via the command line. It installs the Xcode Command Line Tools required for compilation and pkg-config, a helper tool used for finding libraries, using the Homebrew package manager.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ xcode-select --install\n$ brew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Visualizing Default Sequential Job Flow - Mermaid\nDESCRIPTION: Illustrates the default sequential execution of multiple Hurl jobs (a.hurl→b.hurl→c.hurl) using a state diagram in Mermaid syntax. The diagram is used for process documentation and does not execute any commands. Requires viewing through a Mermaid-compatible renderer.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    state \"hurl *.hurl\" as [*]\n    state \"a.hurl\" as A\n    state \"b.hurl\" as B\n    state \"c.hurl\" as C\n    state fork <<fork>>\n    state join <<join>>\n    direction LR\n    [*] --> fork\n    fork --> A\n    A --> B\n    B --> C\n    C --> join\n    join --> [*]\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on FreeBSD\nDESCRIPTION: Installs Hurl using the pkg package manager on FreeBSD. Requires the pkg utility and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo pkg install hurl\n```\n\n----------------------------------------\n\nTITLE: Using the --ssl-no-revoke Option in Hurl (bash)\nDESCRIPTION: (Windows Only) Disables certificate revocation checks during SSL/TLS negotiation. This option weakens security and should be used with caution. It is only available via the command line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_118\n\nLANGUAGE: bash\nCODE:\n```\n--ssl-no-revoke\n```\n\n----------------------------------------\n\nTITLE: Define filename password content - Hurl Grammar\nDESCRIPTION: Specifies the internal content allowed within a filename password field. It can be either standard filename password text characters or specific filename password escaped characters, repeated zero or more times.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_61\n\nLANGUAGE: Grammar\nCODE:\n```\n(filename-password-text|filename-password-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Define JSON string structure - Hurl Grammar\nDESCRIPTION: Defines the structure of a JSON string in Hurl. It starts and ends with double quotes '\"', and can contain zero or more JSON string content elements or placeholders.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_69\n\nLANGUAGE: Grammar\nCODE:\n```\n\" (json-string-content|placeholder)* \"\n```\n\n----------------------------------------\n\nTITLE: Making a Simple GET Request in Hurl - hurl\nDESCRIPTION: This Hurl file defines an HTTP GET request to the local Flask server on /include, expecting an HTTP 200 response with exact body 'Hello'. No external dependencies except a running server at the specified endpoint. The file is used as input for the test drivers, and outputs are validated against expected patterns. Parameters: request URL, response code, exact body string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\nGET http://localhost:8000/include\n\nHTTP 200\n`Hello`\n\n```\n\n----------------------------------------\n\nTITLE: Defining template Hurl Grammar\nDESCRIPTION: Defines the syntax for a template expression in Hurl grammar. It specifies that a template starts with `{{`, contains an `#expr` rule, and ends with `}}`. Templates are used to inject dynamic values in various parts of a Hurl file, including strings and other options.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_251\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n{{ expr }}\n```\n\n----------------------------------------\n\nTITLE: Shell Commands to Install Hurl CLI on Various Platforms\nDESCRIPTION: This collection of shell command snippets illustrates installation procedures for the Hurl CLI tool across multiple operating systems and package managers. Dependencies include respective package managers like curl, apt, pacman, brew, choco, scoop, winget, and cargo. Each snippet sets version variables or invokes package manager commands to download or install Hurl binaries, and updates PATH environment variables when needed. Inputs are system environment and internet connectivity, outputs are installed Hurl executables. Constraints vary by OS and permissions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ INSTALL_DIR=/tmp\n$ VERSION=5.0.1\n$ curl --silent --location https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl-$VERSION-x86_64-unknown-linux-gnu.tar.gz | tar xvz -C $INSTALL_DIR\n$ export PATH=$INSTALL_DIR/hurl-$VERSION-x86_64-unknown-linux-gnu/bin:$PATH\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ VERSION=5.0.1\n$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb\n$ sudo apt update && sudo apt install ./hurl_${VERSION}_amd64.deb\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -Sy hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo pkg install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ choco install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ scoop install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ winget install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ conda install -c conda-forge hurl\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull ghcr.io/orange-opensource/hurl:latest\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install -y build-essential pkg-config libssl-dev libcurl4-openssl-dev libxml2-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ dnf install -y pkgconf-pkg-config gcc openssl-devel libxml2-devel\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ yum install -y pkg-config gcc openssl-devel libxml2-devel\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add curl-dev gcc libxml2-dev musl-dev openssl-dev\n```\n\n----------------------------------------\n\nTITLE: Exporting Hurl File to JSON - Hurlfmt Shell\nDESCRIPTION: Shows how to use the `hurlfmt` command-line tool to convert a Hurl file into a structured JSON representation. The `--out json` flag specifies the output format, and the output is piped to `jq` for pretty-printing. This demonstrates how Hurl files can be processed externally.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurlfmt test.hurl --out json | jq\n```\n\n----------------------------------------\n\nTITLE: Launching Individual Hurl Test Runs via Parallel - Shell\nDESCRIPTION: Illustrates launching each .hurl file test in its own shell using GNU Parallel, with dynamic job calculation and return value reporting. The command leverages shell parameter expansion and collects the overall status for analysis. Prerequisites include all .hurl files present in the directory and the hurl CLI.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel -j $(ls -1 *.hurl | wc -l) -i sh -c \"hurl {} --test\" -- *.hurl\n$ echo \"retval: $?\"\n```\n\n----------------------------------------\n\nTITLE: Checking One-Line String Body\nDESCRIPTION: This snippet demonstrates how to test a one-line string body.  It sends a POST request and checks if the body matches the given string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_40\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nPOST https://example.org/helloworld\nHTTP 200\n`Hello world!`\n```\n```\n\n----------------------------------------\n\nTITLE: Forcing IPv6 Resolution (Hurl)\nDESCRIPTION: Tells Hurl to use only IPv6 addresses when resolving host names, preventing attempts to use IPv4.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_89\n\nLANGUAGE: bash\nCODE:\n```\n-6, --ipv6\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom .netrc File Path with Hurl CLI\nDESCRIPTION: Specifies a custom path to a netrc file using `--netrc-file <FILE>`, instead of the default home directory location. Used for obtaining username and password credentials. See also `--netrc` and `--netrc-optional`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\n--netrc-file <FILE>\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/1.1 Usage in Hurl\nDESCRIPTION: Instructs Hurl to explicitly use HTTP version 1.1 for the request.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n--http1.1\n```\n\n----------------------------------------\n\nTITLE: Connecting via Unix Socket with Hurl CLI (HTTP)\nDESCRIPTION: (HTTP only) Establish the connection through a specified Unix domain socket instead of using standard network interfaces. This allows communication with servers listening on a local socket file. This option is specifically for HTTP connections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_30\n\nLANGUAGE: cli\nCODE:\n```\n--unix-socket <PATH>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: regex-filter\nDESCRIPTION: Defines the 'regex-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'regex', followed by a space ('sp') and either a 'quoted-string' or a 'regex' literal representing the regular expression pattern.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_81\n\nLANGUAGE: Grammar\nCODE:\n```\nregex sp (quoted-string|regex)\n```\n\n----------------------------------------\n\nTITLE: HTTP Option Grammar Rules in Hurl\nDESCRIPTION: Defines the grammar rules for configuring HTTP request options in Hurl files. These rules specify the syntax for options related to HTTP connections, redirects, authentication, and other request parameters. Each rule follows a consistent pattern of option-name : option-value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_220\n\nLANGUAGE: grammar\nCODE:\n```\nfollow-redirect-option ::= location : boolean-option lt\nfollow-redirect-trusted-option ::= location-trusted : boolean-option lt\nhttp10-option ::= http1.0 : boolean-option lt\nhttp11-option ::= http1.1 : boolean-option lt\nhttp2-option ::= http2 : boolean-option lt\nhttp3-option ::= http3 : boolean-option lt\ninsecure-option ::= insecure : boolean-option lt\nipv4-option ::= ipv4 : boolean-option lt\nipv6-option ::= ipv6 : boolean-option lt\nmax-redirs-option ::= max-redirs : integer-option lt\nnetrc-option ::= netrc : boolean-option lt\nnetrc-file-option ::= netrc-file : value-string lt\nnetrc-optional-option ::= netrc-optional : boolean-option lt\noutput-option ::= output : value-string lt\npath-as-is-option ::= path-as-is : boolean-option lt\nproxy-option ::= proxy : value-string lt\nresolve-option ::= resolve : value-string lt\nrepeat-option ::= repeat : integer-option lt\nretry-option ::= retry : integer-option lt\nretry-interval-option ::= retry-interval : duration-option lt\nskip-option ::= skip : boolean-option lt\nunix-socket-option ::= unix-socket : value-string lt\nuser-option ::= user : value-string lt\n```\n\n----------------------------------------\n\nTITLE: Define JSON array structure - Hurl Grammar\nDESCRIPTION: Defines the structure of a JSON array in Hurl. It starts with an opening bracket '[', followed by one or more JSON values separated by commas ',', and ends with a closing bracket ']'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_68\n\nLANGUAGE: Grammar\nCODE:\n```\n[ json-value (, json-value)* ]\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for One-Line String in Hurl Grammar\nDESCRIPTION: Defines the `oneline-string` rule as content enclosed in backticks (`). The content can be zero or more occurrences of either `oneline-string-content` or `placeholder`. This rule is used by `predicate-value` and `bytes`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_213\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-literal\">`</span> <span class=\"grammar-symbol\">(</span><a href=\"#oneline-string-content\">oneline-string-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span> <span class=\"grammar-literal\">`</span>\n```\n\n----------------------------------------\n\nTITLE: Setting Max File Size in Hurl\nDESCRIPTION: The `--max-filesize <BYTES>` option sets the maximum size (in bytes) of a file to download. If the requested file exceeds this size, the transfer will not initiate.  This is a CLI-only option and offers a way to prevent large file downloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\n--max-filesize <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Hurl File as JSON and Processing Output - Shell\nDESCRIPTION: This snippet shows how to convert a Hurl test file to a JSON format using 'hurlfmt' and further process the output with 'jq'. Dependencies: hurlfmt, shell environment, and jq for JSON processing. Inputs: a Hurl file. Outputs: machine-parseable JSON representing the test structure. Useful for integrations or conversions.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_101\n\nLANGUAGE: Shell\nCODE:\n```\n$ hurlfmt test.hurl --out json | jq\n{\n  \"entries\": [\n    {\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": \"https://example.org/api/users/1\",\n        \"headers\": [\n          {\n            \"name\": \"User-Agent\",\n            \"value\": \"Custom\"\n          }\n        ]\n      },\n      \"response\": {\n        \"version\": \"HTTP\",\n        \"status\": 200,\n        \"asserts\": [\n          {\n            \"query\": {\n              \"type\": \"jsonpath\",\n              \"expr\": \"$.name\"\n            },\n            \"predicate\": {\n              \"type\": \"==\",\n              \"value\": \"Bob\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tagging Parallel Output with GNU Parallel --tag Option - Shell\nDESCRIPTION: Uses GNU Parallel's --tag option to prepend the parameter value to each line of output, enhancing traceability and aligning output with input identifiers. Suitable for tracking results in multi-job runs. Requires GNU Parallel.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/parallel.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel --tag echo ::: A B C D\nA\tA\nB\tB\nC\tC\nD\tD\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ parallel --tag hurl ::: a.hurl b.hurl c.hurl d.hurl\na.hurl\tAb.hurl\tBc.hurl\tCd.hurl\tD%\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: replace-filter\nDESCRIPTION: Defines the 'replace-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'replace', a space ('sp'), the pattern to find (either 'quoted-string' or 'regex'), another space ('sp'), and the replacement 'quoted-string'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_82\n\nLANGUAGE: Grammar\nCODE:\n```\nreplace sp (quoted-string|regex) sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Lexical Rule: float\nDESCRIPTION: Defines the 'float' lexical rule in the Hurl grammar. It consists of an 'integer' part followed by a 'fraction' part and is used by rules like 'variable-value' and 'number'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_96\n\nLANGUAGE: Grammar\nCODE:\n```\ninteger fraction\n```\n\n----------------------------------------\n\nTITLE: Specifying Hosts to Bypass Proxy in Hurl (Bash)\nDESCRIPTION: Provides a comma-separated list of hostnames or domains that should not be accessed via the configured proxy. This overrides the `no_proxy` environment variable if set.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n--noproxy <HOST(S)>\n```\n\n----------------------------------------\n\nTITLE: Prompting for Docker Tag Input in Bash\nDESCRIPTION: This snippet prompts the user to input a desired Docker image tag, exports it as an environment variable, and echoes the selected tag for confirmation. It facilitates dynamic tag selection during the build process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"tag: \"\nread -r tag\necho \"tag=${tag}\"\nexport tag\n```\n\n----------------------------------------\n\nTITLE: Setting No Proxy Hosts in Hurl\nDESCRIPTION: The `--noproxy <HOST(S)>` option specifies a comma-separated list of hosts that should not use a proxy.  This option overrides the `no_proxy` environment variable.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_28\n\nLANGUAGE: Bash\nCODE:\n```\n--noproxy <HOST(S)>\n```\n\n----------------------------------------\n\nTITLE: Setting per-request User Authentication\nDESCRIPTION: This snippet demonstrates how to set the user authentication per request using the `[Options]` section.  It allows for different authentication credentials for each request within a Hurl file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_12\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/login\n[Options]\nuser: bob:secret\nHTTP 200\n\nGET https://example.org/login\n[Options]\nuser: alice:secret\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Asserting Final URL After Redirects in Hurl\nDESCRIPTION: Shows how to verify the final URL reached after following redirects in Hurl. This requires enabling the `location` option (either in the `[Options]` section or via the `--location` command-line flag) and uses the `url` assert.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_162\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/redirecting\n[Options]\nlocation: true\nHTTP 200\n[Asserts]\nurl == \"https://example.org/redirected\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: url-query-param-filter\nDESCRIPTION: Defines the 'url-query-param-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'urlQueryParam', followed by a space ('sp') and a 'quoted-string' specifying the query parameter name to extract.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_90\n\nLANGUAGE: Grammar\nCODE:\n```\nurlQueryParam sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Define JSON string content - Hurl Grammar\nDESCRIPTION: Defines the valid content within a JSON string in Hurl. It can consist of standard JSON string text characters or specific JSON string escaped characters, referencing other grammar rules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_70\n\nLANGUAGE: Grammar\nCODE:\n```\njson-string-text|json-string-escaped-char\n```\n\n----------------------------------------\n\nTITLE: Defining the connect-to-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'connect-to' option. It consists of the literal 'connect-to', a colon, a value-string specifying host connection overrides (e.g., '::host:port'), and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_13\n\nLANGUAGE: grammar\nCODE:\n```\nconnect-to : value-string lt\n```\n\n----------------------------------------\n\nTITLE: Test Hurl with Input from STDIN (Shell Script)\nDESCRIPTION: Runs a simple Hurl test command by piping request and response, validating the tool's basic HTTP operation via standard input.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"GET https://hurl.dev\\n\\nHTTP 200\" | hurl --test --color\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Revocation Checks with Hurl CLI (Windows)\nDESCRIPTION: (Windows only) Instructs Hurl to disable checks for certificate revocation status. Using this option reduces SSL security and should be done with caution. This is a CLI-specific flag.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_27\n\nLANGUAGE: cli\nCODE:\n```\n--ssl-no-revoke\n```\n\n----------------------------------------\n\nTITLE: Activating Hurl Syntax Highlighting in Vim/Neovim (Vim)\nDESCRIPTION: This snippet activates syntax highlighting for Hurl files in Vim or Neovim by adding the `syntax on` command to the editor's configuration file, either `~/.vimrc` for Vim or `~/.config/nvim/init.vim` for Neovim.  This enables the previously installed syntax highlighting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/vim/README.md#_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nsyntax on\n```\n\n----------------------------------------\n\nTITLE: Setting Output File in Hurl\nDESCRIPTION: The `-o, --output <FILE>` option directs the output to a specified file instead of standard output (stdout).  This allows for redirecting the results of the Hurl command to a file.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_29\n\nLANGUAGE: Bash\nCODE:\n```\n-o, --output <FILE>\n```\n\n----------------------------------------\n\nTITLE: Including HTTP Headers in Output (Hurl)\nDESCRIPTION: Include the HTTP request and response headers in the standard output. This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\n-i, --include\n```\n\n----------------------------------------\n\nTITLE: Example of Large Multiline JSON Assertion Error - Plaintext\nDESCRIPTION: Demonstrates the limitation of the plain multiline string assertion error message format when dealing with large JSON bodies. The error output shows the entire expected and actual JSON objects, pointing out where the value differs, which results in an unwieldy and difficult-to-read error message. This highlights the motivation for improving the diff output mechanism in Hurl.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:4:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 4 | {\n   | ^ actual value is <{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"is_alive\": true,\n  \"age\": 28,\n  \"address\": {\n    \"street_address\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postal_code\": \"10021-3100\"\n  },\n  \"phone_numbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [\n    \"Catherine\",\n    \"Thomas\",\n    \"Trevor\"\n  ],\n  \"spouse\": null\n}>\n   |\n```\n\n----------------------------------------\n\nTITLE: Hex Request Body in Hurl\nDESCRIPTION: This snippet shows how to set a request body using hexadecimal encoding. The body starts with 'hex,' and ends with ';'. This is suitable for sending binary data represented in hexadecimal format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_120\n\nLANGUAGE: hurl\nCODE:\n```\nPUT https://example.org\n# Send a café, encoded in UTF-8\nhex,636166c3a90a;\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Asserts in Hurl Files (Hurl)\nDESCRIPTION: Ignore all assertions defined within the Hurl input file(s). This is a cli-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\n--ignore-asserts\n```\n\n----------------------------------------\n\nTITLE: Specifying Max File Size (CLI)\nDESCRIPTION: This option allows specifying the maximum file size (in bytes) that the tool will download. If a file exceeds this limit, the download won't start. It's a CLI-only option, used to prevent large file downloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_96\n\nLANGUAGE: markdown\nCODE:\n```\n--max-filesize <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Submit Homebrew Formula Update PR\nDESCRIPTION: Submits a pull request to Homebrew to update the Hurl formula to version `x.y.z`. This command is executed after a successful dry run and initiates the actual PR creation process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/brew/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ brew bump-formula-pr --url https://github.com/Orange-OpenSource/hurl/archive/refs/tags/x.y.z.tar.gz hurl --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-escaped-char\nDESCRIPTION: Defines the valid escape sequences within a Hurl key string. It starts with a backslash (`\\`) followed by specific characters (`#`, `:`, `\\`, `b`, `f`, `n`, `r`, `t`) or a Unicode escape sequence (`\\u` followed by `unicode-char`). This rule is used by `key-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_232\n\nLANGUAGE: Grammar\nCODE:\n```\nkey-string-escaped-char ::= '\\' ('#' | ':' | '\\' | '\\b' | '\\f' | '\\n' | '\\r' | '\\t' | '\\u' unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Defining json-object Grammar Rule\nDESCRIPTION: Defines the structure of a JSON object. A JSON object starts with `{`, is followed by zero or more `json-key-value` pairs separated by commas `,`, and ends with `}`. This rule is used by the `json-value` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_233\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n{ json-key-value (, json-key-value)* }\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: count-filter\nDESCRIPTION: Defines the 'count-filter' rule within the Hurl grammar. This rule simply consists of the literal keyword 'count' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_72\n\nLANGUAGE: Grammar\nCODE:\n```\ncount\n```\n\n----------------------------------------\n\nTITLE: Request With Header with Value in Quotes\nDESCRIPTION: This snippet demonstrates the usage of quoted values in a request header. If a header value starts with double quotes, the double quotes become part of the header value. This allows sending headers that may contain special characters or structured data.  For example, to send a header with a specific value containing quotes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_135\n\nLANGUAGE: hurl\nCODE:\n```\nPATCH https://example.org/file.txt\nIf-Match: \"e0023aa4e\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Variable Count - Hurl\nDESCRIPTION: This snippet shows how to capture and assert the count of a variable. First, a capture is defined using xpath to extract data. Then, an assert checks the number of elements in the variable.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_177\n\nLANGUAGE: hurl\nCODE:\n```\n# Test that the XML endpoint return 200 pets \nGET https://example.org/api/pets\nHTTP 200\n[Captures]\npets: xpath \"//pets\"\n[Asserts]\nvariable \"pets\" count == 200\n```\n\n----------------------------------------\n\nTITLE: Running Hurl Unit Tests with Cargo (Shell)\nDESCRIPTION: Executes the unit tests specifically for the library components of the Hurl project using the `cargo test --lib` command. This ensures the core logic within the libraries passes its tests. Requires the Rust toolchain.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo test --lib\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Lexical Rule: alphanum\nDESCRIPTION: Defines the 'alphanum' lexical rule in the Hurl grammar. It matches any single uppercase letter, lowercase letter, or digit ([A-Za-z0-9]) and is used by the 'key-string-text' rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_94\n\nLANGUAGE: Grammar\nCODE:\n```\n[A-Za-z0-9]\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: value-string\nDESCRIPTION: Defines the grammar rule 'value-string', representing a general-purpose string value used in requests, key-value pairs, file content types, and various options. It consists of zero or more occurrences of either 'value-string-content' or 'placeholder'. Note: 'value-string-content' is not defined in this snippet but is presumably defined elsewhere in the grammar.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_43\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n(value-string-content|placeholder)*\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: to-float-filter\nDESCRIPTION: Defines the 'to-float-filter' rule within the Hurl grammar. This rule simply consists of the literal keyword 'toFloat' and is used as part of a 'filter' for type conversion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_85\n\nLANGUAGE: Grammar\nCODE:\n```\ntoFloat\n```\n\n----------------------------------------\n\nTITLE: Define filename text characters - Hurl Grammar\nDESCRIPTION: Defines the allowed characters for standard filename text segments within Hurl syntax using a regular expression. Characters like '#', ';', '{', '}', space, newline, carriage return, and backslash are excluded.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_58\n\nLANGUAGE: Grammar\nCODE:\n```\n~[#;{} \\n\\r\\\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Testing XML body in Hurl\nDESCRIPTION: Tests the response body against XML format with an implicit assertion. If the response body matches the XML structure and values, the test will pass. It uses `<?xml>` format for defining an XML body.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_63\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/catalog\nHTTP 200\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<catalog>\n   <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications with XML.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Control Flow with Skip and Repeat - Hurl\nDESCRIPTION: This Hurl snippet demonstrates the usage of `skip` and `repeat` options within the `[Options]` section to control the execution flow of requests. The example shows a request repeated three times and another skipped entirely.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_10\n\nLANGUAGE: hurl\nCODE:\n```\n# This request will be played exactly 3 times\nGET https://example.org/foo\n[Options]\nrepeat: 3\nHTTP 200\n\n# This request is skipped\nGET https://example.org/foo\n[Options]\nskip: true\nHTTP 200\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for One-Line String Escaped Characters in Hurl Grammar\nDESCRIPTION: Defines the `oneline-string-escaped-char` rule for escaped characters within a one-line string. It starts with a backslash '\\' followed by either '`', '#', '\\', 'b', 'f', or 'u' followed by the `unicode-char` rule. Used by `oneline-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_216\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-literal\">\\</span> <span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">`</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">#</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">u</span> <a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Defining filename-password-content Grammar Rule\nDESCRIPTION: Defines the content allowed within a filename password string. It consists of zero or more occurrences of either `filename-password-text` or a `filename-password-escaped-char`. This rule is used by the `filename-password` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_228\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n(filename-password-text|filename-password-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Windows via WinGet\nDESCRIPTION: Installs Hurl using the Windows Package Manager (winget). Requires winget to be available on the system.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_110\n\nLANGUAGE: shell\nCODE:\n```\n$ winget install hurl\n```\n\n----------------------------------------\n\nTITLE: Import GPG Keys into Container (Bash)\nDESCRIPTION: Imports previously exported GPG public and private keys into the container in batch mode, using a passphrase for private key decryption. Allows signing and verification inside the build environment.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GPG_TTY=$(tty)\ngpg --batch --passphrase <passphrase> --pinentry-mode loopback --import /tmp/mypublickey.asc\ngpg --batch --passphrase <passphrase> --pinentry-mode loopback --import /tmp/myprivatekey.asc\n```\n\n----------------------------------------\n\nTITLE: Splitting String with `split` Filter (Hurl)\nDESCRIPTION: Illustrates the `split` filter in Hurl, which splits a string into a list of strings based on a specified delimiter. The example shows splitting a comma-separated string and then using the `count` filter on the resulting list.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_200\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/foo\nHTTP 200\n[Asserts]\njsonpath \"$.ips\" split \", \" count == 3\n```\n\n----------------------------------------\n\nTITLE: Applying Global Location-Following Option via Command Line for Hurl\nDESCRIPTION: Demonstrates the use of the command-line option '--location' to make Hurl follow redirects for every entry when running a file. Requires the 'hurl' tool to be installed. Input is a shell command referencing the Hurl file; output is the execution of the file with redirects automatically followed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\n$ hurl --location foo.hurl\n```\n\n----------------------------------------\n\nTITLE: Forcing IPv4 Resolution in Hurl\nDESCRIPTION: Restricts Hurl to using only IPv4 addresses when resolving hostnames, preventing attempts to use IPv6.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\n-4, --ipv4\n```\n\n----------------------------------------\n\nTITLE: Defining json-key-value Hurl Grammar\nDESCRIPTION: Defines the syntax for a key-value pair within a JSON object in Hurl grammar. It specifies that a key is a `#json-string`, followed by a colon `:`, and then a `#json-value`. This rule is the building block for the content of a `#json-object`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_244\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\njson-string : json-value\n```\n\n----------------------------------------\n\nTITLE: Defining filename-password Grammar Rule\nDESCRIPTION: Defines the structure for a filename password string used in options like client certificates. It consists of zero or more occurrences of either standard filename-password content or a placeholder. This rule is used by the `client-certificate-option` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_227\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n(filename-password-content|placeholder)*\n```\n\n----------------------------------------\n\nTITLE: Creating a Tarball for ARM64 Linux\nDESCRIPTION: This snippet sets up the environment for packaging, retrieves the current version, runs manual instructions, and creates a tarball archive of the cross-compiled ARM64 Linux binaries. It prepares the package for distribution or deployment.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"${PWD}/target/release:${PATH}\"\nexport VERSION=$(bin/release/get_version.sh)\nbin/release/man.sh\nbin/release/create_tarball.sh linux\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string\nDESCRIPTION: Defines a key string in Hurl grammar, used in various contexts like key-value pairs, file parameters, captures, and variable values. It consists of one or more occurrences of either key string content (`key-string-content`) or a template expression (`template`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_229\n\nLANGUAGE: Grammar\nCODE:\n```\nkey-string ::= (key-string-content | template)+\n```\n\n----------------------------------------\n\nTITLE: Defining API Test Scenario - Karate\nDESCRIPTION: Illustrates the syntax of a test scenario in the Karate API testing tool. It defines steps using keywords like `Given`, `And`, `When`, and `Then` to create a resource, assert its response, capture an ID, and retrieve the resource. This snippet serves as a comparison to the Hurl test format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_2\n\nLANGUAGE: Karate\nCODE:\n```\nScenario: create and retrieve a cat\n\nGiven url 'http://myhost.com/v1/cats'\nAnd request { name: 'Billie' }\nWhen method post\nThen status 201\nAnd match response == { id: '#notnull', name: 'Billie }\n\nGiven path response.id\nWhen method get\nThen status 200\n```\n\n----------------------------------------\n\nTITLE: Defining json-array Hurl Grammar\nDESCRIPTION: Defines the syntax for a JSON array in Hurl grammar. It specifies that an array starts with `[`, contains zero or more values (`#json-value`), separated by commas `,`, and ends with `]`. This rule is used as one of the possible types for a `#json-value`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_245\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n[ json-value (, json-value)* ]\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String Text in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string-text` rule as any sequence of characters that are not a backslash ('\\') and do not form the closing triple backtick sequence ('```'). This constitutes the unescaped text within `multiline-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_221\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-regex\">~[\\\\]+</span> <span class=\"grammar-symbol\">~</span><span class=\"grammar-literal\">```</span>\n```\n\n----------------------------------------\n\nTITLE: Defining the Line Terminal (lt) Grammar Rule - HTML\nDESCRIPTION: Outlines the 'lt' rule, which handles line terminations in the Hurl DSL. The rule includes optional whitespace (zero or more 'sp'), an optional comment, and an optional newline character, encapsulating typical end-of-line conditions across many grammar contexts. This enables flexible line parsing for both code and comments; depends on 'sp' and 'comment' subrules.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_241\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"lt\">lt</span><span class=\"grammar-usedby\">(used by <a href=\"#hurl-file\">hurl-file</a>,&nbsp;<a href=\"#request\">request</a>,&nbsp;<a href=\"#response\">response</a>,&nbsp;<a href=\"#header\">header</a>,&nbsp;<a href=\"#body\">body</a>,&nbsp;<a href=\"#query-string-params-section\">query-string-params-section</a>,&nbsp;<a href=\"#form-params-section\">form-params-section</a>,&nbsp;<a href=\"#multipart-form-data-section\">multipart-form-data-section</a>,&nbsp;<a href=\"#cookies-section\">cookies-section</a>,&nbsp;<a href=\"#captures-section\">captures-section</a>,&nbsp;<a href=\"#asserts-section\">asserts-section</a>,&nbsp;<a href=\"#basic-auth-section\">basic-auth-section</a>,&nbsp;<a href=\"#options-section\">options-section</a>,&nbsp;<a href=\"#file-param\">file-param</a>,&nbsp;<a href=\"#capture\">capture</a>,&nbsp;<a href=\"#assert\">assert</a>,&nbsp;<a href=\"#option\">option</a>,&nbsp;<a href=\"#aws-sigv4-option\">aws-sigv4-option</a>,&nbsp;<a href=\"#ca-certificate-option\">ca-certificate-option</a>,&nbsp;<a href=\"#client-certificate-option\">client-certificate-option</a>,&nbsp;<a href=\"#client-key-option\">client-key-option</a>,&nbsp;<a href=\"#compressed-option\">compressed-option</a>,&nbsp;<a href=\"#connect-to-option\">connect-to-option</a>,&nbsp;<a href=\"#connect-timeout-option\">connect-timeout-option</a>,&nbsp;<a href=\"#delay-option\">delay-option</a>,&nbsp;<a href=\"#follow-redirect-option\">follow-redirect-option</a>,&nbsp;<a href=\"#follow-redirect-trusted-option\">follow-redirect-trusted-option</a>,&nbsp;<a href=\"#header-option\">header-option</a>,&nbsp;<a href=\"#http10-option\">http10-option</a>,&nbsp;<a href=\"#http11-option\">http11-option</a>,&nbsp;<a href=\"#http2-option\">http2-option</a>,&nbsp;<a href=\"#http3-option\">http3-option</a>,&nbsp;<a href=\"#insecure-option\">insecure-option</a>,&nbsp;<a href=\"#ipv4-option\">ipv4-option</a>,&nbsp;<a href=\"#ipv6-option\">ipv6-option</a>,&nbsp;<a href=\"#limit-rate-option\">limit-rate-option</a>,&nbsp;<a href=\"#max-redirs-option\">max-redirs-option</a>,&nbsp;<a href=\"#netrc-option\">netrc-option</a>,&nbsp;<a href=\"#netrc-file-option\">netrc-file-option</a>,&nbsp;<a href=\"#netrc-optional-option\">netrc-optional-option</a>,&nbsp;<a href=\"#output-option\">output-option</a>,&nbsp;<a href=\"#path-as-is-option\">path-as-is-option</a>,&nbsp;<a href=\"#proxy-option\">proxy-option</a>,&nbsp;<a href=\"#resolve-option\">resolve-option</a>,&nbsp;<a href=\"#repeat-option\">repeat-option</a>,&nbsp;<a href=\"#retry-option\">retry-option</a>,&nbsp;<a href=\"#retry-interval-option\">retry-interval-option</a>,&nbsp;<a href=\"#skip-option\">skip-option</a>,&nbsp;<a href=\"#unix-socket-option\">unix-socket-option</a>,&nbsp;<a href=\"#user-option\">user-option</a>,&nbsp;<a href=\"#variable-option\">variable-option</a>,&nbsp;<a href=\"#verbose-option\">verbose-option</a>,&nbsp;<a href=\"#very-verbose-option\">very-verbose-option</a>,&nbsp;<a href=\"#multiline-string\">multiline-string</a>)</span></div><div class=\"grammar-rule-expression\"><a href=\"#sp\">sp</a><span class=\"grammar-symbol\">*</span>&nbsp;<a href=\"#comment\">comment</a><span class=\"grammar-symbol\">?</span>&nbsp;<span class=\"grammar-regex\">[\\n]?</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Filename Content in Hurl Grammar\nDESCRIPTION: Defines the `filename-content` rule, which consists of zero or more occurrences of either `filename-text` or `filename-escaped-char`. This forms the content part of a `filename`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_224\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><a href=\"#filename-text\">filename-text</a><span class=\"grammar-symbol\">|</span><a href=\"#filename-escaped-char\">filename-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Installing hurl-mode with straight.el\nDESCRIPTION: This Emacs Lisp snippet shows how to install the hurl-mode package using the straight.el package manager. It calls `straight-use-package` with a list specifying the package name, type (git), host, repository, and a filter to include only the relevant Emacs Lisp files from the `contrib/emacs/` directory.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/emacs/README.md#_snippet_1\n\nLANGUAGE: lisp\nCODE:\n```\n(straight-use-package\n '(hurl-mode\n   :type git :host github :repo \"Orange-OpenSource/hurl\" :files (\"contrib/emacs/*.el\")))\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data with Curl - Shell\nDESCRIPTION: This shell snippet sends a JSON POST request to an API using curl. Dependencies are curl and a shell environment. The code sets the Content-Type header, POST method, and provides JSON data inline. Parameters include the API endpoint, username, and password. Outputs are the HTTP response from the API. Ensure the endpoint is reachable and authentication details match expected values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_93\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --header \"Content-Type: application/json\" \\\n     --request POST \\\n     --data '{\"username\": \"xyz\",\"password\": \"xyz\"}' \\\n     http://localhost:3000/api/login\n\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version\nDESCRIPTION: This snippet shows how to test the HTTP version of a response using implicit and explicit asserts. It sends GET requests and asserts the HTTP version returned by the server.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/samples.md#_snippet_47\n\nLANGUAGE: hurl\nCODE:\n```\n```hurl\nGET https://foo.com\nHTTP/3 200\n\nGET https://bar.com\nHTTP/2 200\n```\n```\n\n----------------------------------------\n\nTITLE: Repeating Input Files (CLI)\nDESCRIPTION: This option repeats the sequence of input files a specified number of times.  An infinite loop is achieved by setting the repeat number to -1. This is useful for performance testing or continuous integration scenarios. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_109\n\nLANGUAGE: markdown\nCODE:\n```\n--repeat <NUM>\n```\n\n----------------------------------------\n\nTITLE: Defining the Flask Endpoint for Integration Tests - python\nDESCRIPTION: This Python snippet registers a new /include route in a Flask app and returns an HTTP response with body 'Hello'. Dependencies: Flask, an 'app' object imported from the application. The function is mapped for GET requests without explicit input parameters. Output is a plaintext response for testing. Limitations: The function must be registered in the Flask application context.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/integration/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom app import app\nfrom flask import Response\n\n\n@app.route(\"/include\")\ndef include():\n    return Response(\"Hello\")\n\n```\n\n----------------------------------------\n\nTITLE: Running Movies Box Application with Docker\nDESCRIPTION: Shell commands to pull and run the Movies Box application Docker image, making it available on port 3000.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull ghcr.io/jcamiel/hurl-express-tutorial:latest\n$ docker run --name movies --rm --detach --publish 3000:3000 ghcr.io/jcamiel/hurl-express-tutorial:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl from Debian/Ubuntu .deb package\nDESCRIPTION: Downloads and installs Hurl on Debian or Ubuntu systems using a .deb package. Requires apt package manager and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ VERSION=6.1.1\n$ curl --location --remote-name https://github.com/Orange-OpenSource/hurl/releases/download/$VERSION/hurl_${VERSION}_amd64.deb\n$ sudo apt update && sudo apt install ./hurl_${VERSION}_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request - Hurl\nDESCRIPTION: This Hurl snippet makes a GET request and doesn't include response assertions.  It serves as a basic example of a request without any checks on the response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/entry.md#_snippet_1\n\nLANGUAGE: hurl\nCODE:\n```\n# Get some news, response description is optional\nGET https://acmecorp.net/news\n```\n\n----------------------------------------\n\nTITLE: Defining json-string Hurl Grammar\nDESCRIPTION: Defines the syntax for a JSON string in Hurl grammar. It specifies that a string starts and ends with double quotes `\"` and can contain zero or more instances of either `#json-string-content` (regular text or escaped characters) or a `#template`. This rule is used for both `#json-value` and `#json-key-value`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_246\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\" (json-string-content|template)* \"\n```\n\n----------------------------------------\n\nTITLE: Defining the Regex Escaped Character Grammar Rule - HTML\nDESCRIPTION: Specifies the pattern for escaped characters inside Hurl's regex constructs, recognizing a backslash followed by any character except a newline as an escaped sequence. This allows literal inclusion of symbols that would otherwise be treated as special characters. Depends on proper HTML encoding for backslash representation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_246\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"regex-escaped-char\">regex-escaped-char</span><span class=\"grammar-usedby\">(used by <a href=\"#regex-content\">regex-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">\\</span>&nbsp;<span class=\"grammar-regex\">~[\\n]</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Build Tools for Windows\nDESCRIPTION: Downloads and installs Visual Studio Build Tools with C++ workload via PowerShell, necessary for compiling native code during the build process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd c:\\\nInvoke-WebRequest -UseBasicParsing https://aka.ms/vs/17/release/vs_buildtools.exe  -Outfile vs_buildtools.exe\nStart-Process -Wait -PassThru -FilePath .\\vs_buildtools.exe -ArgumentList \"--addProductLang\", \"En-us\", \"--add\", \"Microsoft.VisualStudio.Workload.VCTools\", \"--includeRecommended\", \"--passive\", \"--norestart\", \"--nocache\", \"--wait\"\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Filename in Hurl Grammar\nDESCRIPTION: Defines the `filename` rule, which consists of zero or more occurrences of either `filename-content` or `placeholder`. This rule is used by `file-value`, `ca-certificate-option`, and `oneline-file`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_223\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><a href=\"#filename-content\">filename-content</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Standard Unified Diff Example Showing Line Addition and Removal - Plaintext\nDESCRIPTION: Examples showing typical standardized unified diffs as used for asserting changes between expected and actual bodies. The snippet includes deleted lines marked by '-', added lines by '+', and omission of context in the diff output. These are paired with Hurl error messages mapping back to the test file lines where differences arise.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--- old.txt\t2024-07-29 10:03:27.267387991 +0200\n+++ new_line1.txt\t2024-07-29 10:18:55.523048872 +0200\n@@ -1 +1 @@\n-{\n+[\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n@@ -2 +2 @@\n-  \"first_name\": \"John\",\n+  \"first_name\": \"Bob\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n@@ -3 +3 @@\n-  \"last_name\": \"Smith\",\n+  \"last_name\": \"Smiths\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n@@ -3 +2,0 @@\n-  \"last_name\": \"Smith\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n@@ -2,0 +3 @@\n+  \"middle_name\": \"Bob\",\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n@@ -5 +5 @@\n-  \"age\": 27,\n+  \"age\": 28,\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on macOS via Homebrew\nDESCRIPTION: Installs Hurl using the Homebrew package manager on macOS. Requires Homebrew (brew command) to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_105\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with Homebrew on macOS\nDESCRIPTION: Installs Hurl on macOS using the Homebrew package manager.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install hurl\n```\n\n----------------------------------------\n\nTITLE: Multiline String Attributes: Escape and Novariable\nDESCRIPTION: Defines additional attributes for multiline strings, such as 'escape' for escaping rules and 'novariable' which may disable variable parsing within the string.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_52\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string-attribute\">multiline-string-attribute</span><span class=\"grammar-usedby\">(used by <a href=\"#multiline-string\">multiline-string</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">escape</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">novariable</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Installing hurl-mode with Doom Emacs\nDESCRIPTION: This Emacs Lisp snippet demonstrates how to add the hurl-mode package to your Doom Emacs configuration. It uses `package!` to declare the package dependency, specifying the GitHub host and repository, and limits the installed files to only those within `contrib/emacs/`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/emacs/README.md#_snippet_0\n\nLANGUAGE: lisp\nCODE:\n```\n(package! hurl-mode :recipe\n  (:host github\n   :repo \"Orange-OpenSource/hurl\"\n   :files (\"contrib/emacs/*.el\")))\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: value-string-escaped-char\nDESCRIPTION: Defines the valid escape sequences within a Hurl value string. It starts with a backslash (`\\`) followed by specific characters (`#`, `\\`, `b`, `f`, `n`, `r`, `t`) or a Unicode escape sequence (`\\u` followed by `unicode-char`). This rule is used by `value-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_236\n\nLANGUAGE: Grammar\nCODE:\n```\nvalue-string-escaped-char ::= '\\' ('#' | '\\' | '\\b' | '\\f' | '\\n' | '\\r' | '\\t' | '\\u' unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Create Debian Source Package Using debuild (Bash)\nDESCRIPTION: Signs the source package with GPG key using debuild in source-only mode with preservation of source archive. Automates Debian source package creation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyes | debuild -S -sa -k\"${gpg_keyid}\" -p\"gpg --batch --passphrase <passphrase> --pinentry-mode loopback\"\n```\n\n----------------------------------------\n\nTITLE: Defining String Representation in Hurl Grammar\nDESCRIPTION: Grammar rule for quoted strings in Hurl, which can contain either quoted string content or templates. Used in various contexts throughout the Hurl language.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_225\n\nLANGUAGE: Grammar\nCODE:\n```\nquoted-string ::= \" (quoted-string-content|template)* \"\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via Cargo (Rust)\nDESCRIPTION: Installs Hurl globally using Cargo, the Rust package manager. Requires the Rust toolchain (including cargo) to be installed. The `--locked` flag ensures the Cargo.lock file is used for deterministic dependency resolution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_111\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install --locked hurl\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Version\nDESCRIPTION: This snippet checks for a specific HTTP version and status code. In this example, it verifies that the server responds with HTTP/2 and status code 200.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/asserting-response.md#_snippet_3\n\nLANGUAGE: hurl\nCODE:\n```\n# Check that our server responds with HTTP/2\nGET https://example.org/api/pets\nHTTP/2 200 \n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with Windows Package Manager\nDESCRIPTION: Installs Hurl on Windows using the Windows Package Manager (winget).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ winget install hurl\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String Escaped Characters in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string-escaped-char` rule for escaped characters within a multiline string. It starts with a backslash '\\' followed by '\\', 'b', 'f', 'n', 'r', 't', '`', or 'u' followed by the `unicode-char` rule. Used by `multiline-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_222\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-literal\">\\</span> <span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">n</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">r</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">t</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">`</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">u</span> <a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Line Terminator Grammar Rule Handling Optional Whitespace and Comments\nDESCRIPTION: Defines the 'lt' (line terminator) rule to optionally match zero or more spaces, an optional comment line starting with '#', followed optionally by a newline. This is used in many sections of a Hurl file to handle line endings and trailing comments.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_265\n\nLANGUAGE: grammar\nCODE:\n```\nlt : sp* comment? /\\n?/\n```\n\n----------------------------------------\n\nTITLE: Running Movies Box Application with Node.js\nDESCRIPTION: Shell commands to clone the Movies Box repository, install dependencies, and start the application using Node.js.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/your-first-hurl-file.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/jcamiel/hurl-express-tutorial.git && cd hurl-express-tutorial\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Duration in Hurl\nDESCRIPTION: This Hurl script sends a GET request to `/api/v1/pets` and asserts the HTTP status code is 200. It also includes an assertion within the `[Asserts]` section (`duration < 1000`) to check that the time taken for the request and response cycle is less than 1000 milliseconds.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_6\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://example.org/api/v1/pets\nHTTP 200\n[Asserts]\nduration < 1000  # Duration in ms\n```\n\n----------------------------------------\n\nTITLE: Defining json-string-text Hurl Grammar\nDESCRIPTION: Defines the allowed literal text characters within a JSON string in Hurl grammar. It specifies using a regular expression `~[\"\\\\]` any character that is not a double quote `\"` or a backslash `\\`. This rule is a component of `#json-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_248\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n~[\"\\\\]\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via PPA on Ubuntu\nDESCRIPTION: Adds the Hurl PPA (Personal Package Archive) repository provided by `lepapareil` and installs a specific version of Hurl using apt. This method requires `apt-add-repository` and `apt` and is suitable for Ubuntu >=18.04.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_102\n\nLANGUAGE: shell\nCODE:\n```\n$ VERSION=6.1.1\n$ sudo apt-add-repository -y ppa:lepapareil/hurl\n$ sudo apt install hurl=\"${VERSION}\"*\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl from PPA on Ubuntu\nDESCRIPTION: Installs Hurl on Ubuntu systems from a Personal Package Archive (PPA). Requires apt-add-repository and apt package manager with sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ VERSION=6.1.1\n$ sudo apt-add-repository -y ppa:lepapareil/hurl\n$ sudo apt install hurl=\"${VERSION}\"*\n```\n\n----------------------------------------\n\nTITLE: Defining json-key-value Grammar Rule\nDESCRIPTION: Defines the structure of a key-value pair within a JSON object. It consists of a `json-string` (the key) followed by a colon `:` and then a `json-value` (the value). This rule is used by the `json-object` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_234\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\njson-string : json-value\n```\n\n----------------------------------------\n\nTITLE: Redirecting Hurl Output to a File (Bash)\nDESCRIPTION: Writes the output of the Hurl execution (typically the last response body, unless `--no-output` is used) to the specified FILE instead of printing it to standard output (stdout).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/manual.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n-o, --output <FILE>\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on Arch Linux (Source)\nDESCRIPTION: Installs necessary development packages (pkgconf, gcc, glibc, openssl, libxml2) required to build Hurl from source code on Arch-based Linux distributions using pacman.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_118\n\nLANGUAGE: shell\nCODE:\n```\n$ pacman -S --noconfirm pkgconf gcc glibc openssl libxml2\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-text\nDESCRIPTION: Specifies the allowed plain text characters within a Hurl key string. It matches one or more alphanumeric characters or specific symbols (`_`, `-`, `.`, `[`, `]`, `@`, `$`). This rule is used by `key-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_231\n\nLANGUAGE: Grammar\nCODE:\n```\nkey-string-text ::= (alphanum | '_' | '-' | '.' | '[' | ']' | '@' | '$')+\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via npm\nDESCRIPTION: Installs the @orangeopensource/hurl npm package as a development dependency in the current Node.js project using npm. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_114\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev @orangeopensource/hurl\n```\n\n----------------------------------------\n\nTITLE: Check Installed Hurl Version (Shell Script)\nDESCRIPTION: Verifies that Hurl and Hurl Formatter are installed by displaying their versions and confirms man page accessibility by showing the first line.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nhurl --version\nhurlfmt --version\nman hurl | head -1\nman hurlfmt | head -1\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: value-string-content\nDESCRIPTION: Defines the allowable content within a Hurl value string, excluding templates. It consists of zero or more occurrences of either plain value string text (`value-string-text`) or escaped characters specific to value strings (`value-string-escaped-char`). This rule is used by `value-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_234\n\nLANGUAGE: Grammar\nCODE:\n```\nvalue-string-content ::= (value-string-text | value-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with conda-forge\nDESCRIPTION: Installs Hurl using conda-forge package manager. Assumes conda or miniconda are already installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ conda install -c conda-forge hurl\n```\n\n----------------------------------------\n\nTITLE: Example Hurl File for Export\nDESCRIPTION: A simple Hurl file used as the input for the `hurlfmt` export example. It defines a basic GET request with a custom header, expects a 200 status, and includes an assertion on the JSON response body using `jsonpath`. This serves as the source for the JSON output shown.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_6\n\nLANGUAGE: Hurl\nCODE:\n```\nGET https://example.org/api/users/1\nUser-Agent: Custom\nHTTP 200\n[Asserts]\njsonpath \"$.name\" == \"Bob\"\n```\n\n----------------------------------------\n\nTITLE: Preventing URL Path Normalization with Hurl CLI\nDESCRIPTION: Instructs Hurl to use the provided URL path exactly as given, without normalizing sequences like `/../` or `/./`, using the `--path-as-is` flag.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_93\n\nLANGUAGE: shell\nCODE:\n```\n--path-as-is\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Version with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to assert the HTTP version used in the response.  It checks whether the returned HTTP version matches the specified value. It requires Hurl installed and a working network connection to test against a server.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_61\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP/3 200\n\nGET https://bar.com\nHTTP/2 200\n```\n\n----------------------------------------\n\nTITLE: Rust Function run to Execute a Hurl Test with Variables\nDESCRIPTION: The `run` function signature in Rust illustrating the API for executing a Hurl HTTP test. It accepts the raw Hurl content, optional filename, runner and logger options, and importantly a HashMap of variables to inject during execution. The result is either a successful HurlResult or an error string. This encapsulates the core runtime behavior for tests and shows how variable data is passed internally.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/secrets.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn run(\n    content: &str,\n    filename: Option<&Input>,\n    runner_options: &RunnerOptions,\n    variables: &HashMap<String, Value>,\n    logger_options: &LoggerOptions,\n) -> Result<HurlResult, String> {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing IP Address with Hurl\nDESCRIPTION: This Hurl snippet demonstrates how to test the IP address of the response. The `ip` variable is checked against a hardcoded value for the IP address. Then, it is checked to start with a particular prefix and if the address is IPv6.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_63\n\nLANGUAGE: hurl\nCODE:\n```\nGET https://foo.com\nHTTP 200\n[Asserts]\nip == \" 2001:0db8:85a3:0000:0000:8a2e:0370:733\"\nip startsWith \"2001\"\nip isIpv6\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on macOS\nDESCRIPTION: Installs Xcode command line tools and pkg-config on macOS.  Requires Xcode and Homebrew.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ xcode-select --install\n$ brew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl with Chocolatey on Windows\nDESCRIPTION: Installs Hurl on Windows using the Chocolatey package manager.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ choco install hurl\n```\n\n----------------------------------------\n\nTITLE: Create Debian Changelog (Bash)\nDESCRIPTION: Uses environment substitution to generate a Debian changelog file from a template, displaying the content for review. Essential for Debian package updates.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nenvsubst < debian/changelog.template > debian/changelog\ncat debian/changelog\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on Alpine Linux\nDESCRIPTION: Installs Hurl on Alpine Linux using the apk package manager from the testing repository.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl on FreeBSD\nDESCRIPTION: Installs Hurl on FreeBSD using the pkg package manager. Requires sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo pkg install hurl\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: format-filter\nDESCRIPTION: Defines the 'format-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'format' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_76\n\nLANGUAGE: Grammar\nCODE:\n```\nformat\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests in Hurl\nDESCRIPTION: Example of selectively skipping specific requests in a Hurl file. The second request is skipped while others are executed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_58\n\nLANGUAGE: hurl\nCODE:\n```\n# a, c, d are run, b is skipped\nGET https://example.org/a\n\nGET https://example.org/b\n[Options]\nskip: true\n\nGET https://example.org/c\n\nGET https://example.org/d\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: decode-filter\nDESCRIPTION: Defines the 'decode-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'decode' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_75\n\nLANGUAGE: Grammar\nCODE:\n```\ndecode\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: days-before-now-filter\nDESCRIPTION: Defines the 'days-before-now-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'daysBeforeNow' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_74\n\nLANGUAGE: Grammar\nCODE:\n```\ndaysBeforeNow\n```\n\n----------------------------------------\n\nTITLE: Oneline String Content Parsing with Regex\nDESCRIPTION: Defines the rule for 'oneline-string-text', matching characters not including '#' or newline with optional backtick escape, for parsing content inside 'oneline-string'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_48\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"oneline-string-text\">oneline-string-text</span><span class=\"grammar-usedby\">(used by <a href=\"#oneline-string-content\">oneline-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-regex\">~[#\\n\\\\]</span>&nbsp;<span class=\"grammar-symbol\">~</span><span class=\"grammar-literal'>`</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl Syntax Highlighting for Vim (Bash)\nDESCRIPTION: This snippet installs the Hurl syntax highlighting files for Vim. It creates the necessary directory structure in the user's home directory under `.vim/`, copies the `ftdetect/hurl.vim` and `syntax/hurl.vim` files to the appropriate directories.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/vim/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.vim/{ftdetect,syntax}\ncp ftdetect/hurl.vim ~/.vim/ftdetect\ncp syntax/hurl.vim ~/.vim/syntax\n```\n\n----------------------------------------\n\nTITLE: Multiline String Content and Escaping\nDESCRIPTION: Defines 'multiline-string-content' combining 'multiline-string-text' and 'multiline-string-escaped-char', enabling parsing of multiline string content with escape sequences.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_53\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string-content\">multiline-string-content</span><span class=\"grammar-usedby\">(used by <a href=\"#multiline-string\">multiline-string</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><a href=\"#multiline-string-text\">multiline-string-text</a><span class=\"grammar-symbol\">|</span><a href=\"#multiline-string-escaped-char\">multiline-string-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Hurl via Conda\nDESCRIPTION: Installs Hurl from the conda-forge channel using the Conda package manager. Requires Conda to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_112\n\nLANGUAGE: shell\nCODE:\n```\n$ conda install -c conda-forge hurl\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTP/1.0 Usage in Hurl\nDESCRIPTION: Instructs Hurl to use HTTP version 1.0 for the request, overriding the default preferred HTTP version.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n-0, --http1.0\n```\n\n----------------------------------------\n\nTITLE: Specifying .netrc File Path (CLI)\nDESCRIPTION: This option specifies the path to a .netrc file to use for authentication, overriding the default location. It functions similarly to `--netrc` but with a user-defined file path. This is a CLI-only option.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_100\n\nLANGUAGE: markdown\nCODE:\n```\n--netrc-file <FILE>\n```\n\n----------------------------------------\n\nTITLE: Allowing Insecure SSL Connections (Hurl)\nDESCRIPTION: Explicitly allows Hurl to perform \"insecure\" SSL connections and transfers, bypassing certificate validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/README.md#_snippet_86\n\nLANGUAGE: bash\nCODE:\n```\n-k, --insecure\n```\n\n----------------------------------------\n\nTITLE: Download Hurl Binary and Calculate SHA256 - PowerShell\nDESCRIPTION: This snippet downloads the Hurl binary (specific to Windows) from the GitHub release assets. It uses the previously obtained `$hurl_latest_version` variable to construct the download URL.  It then calculates the SHA256 hash of the downloaded zip file and stores it in the `$hurl_latest_sha` variable. The hash is then echoed to the console.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/chocolatey/README.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-WebRequest -UseBasicParsing https://github.com/Orange-OpenSource/hurl/releases/download/${hurl_latest_version}/hurl-${hurl_latest_version}-x86_64-pc-windows-msvc.zip -OutFile C:\\Windows\\Temp\\hurl-latest-win64.zip\n$hurl_latest_sha=(Get-FileHash C:\\Windows\\Temp\\hurl-latest-win64.zip).Hash\necho ${hurl_latest_sha}\n```\n\n----------------------------------------\n\nTITLE: Using Homebrew's libcurl with Hurl on macOS\nDESCRIPTION: Specific example of patching Hurl to use Homebrew's libcurl on macOS. Shows the exact command needed with the default paths for both binaries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\n# /usr/local/opt/curl/lib/libcurl.4.dylib is installed by `brew install curl`\n$ sudo install_name_tool -change /usr/lib/libcurl.4.dylib /usr/local/opt/curl/lib/libcurl.4.dylib /usr/local/bin/hurl\n```\n\n----------------------------------------\n\nTITLE: Forcing IPv6 Resolution in Hurl\nDESCRIPTION: Restricts Hurl to using only IPv6 addresses when resolving hostnames, preventing attempts to use IPv4.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\n-6, --ipv6\n```\n\n----------------------------------------\n\nTITLE: Checking Linked Libraries (macOS) - Shell\nDESCRIPTION: Uses the macOS specific `otool -L` command to inspect the dynamic libraries that the Hurl executable is linked against. It first finds the Hurl binary path with `which hurl` and then lists its dependencies, including the specific `libcurl.4.dylib` file being used. This helps determine if Hurl is using the intended libcurl version.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ which hurl\n/opt/homebrew/bin/hurl\n$ otool -L /opt/homebrew/bin/hurl:\n\t/usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1858.112.0)\n\t/usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current version 9.0.0)\n\t/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n```\n\n----------------------------------------\n\nTITLE: Changing Linked Libcurl (macOS) - Shell\nDESCRIPTION: Provides the general macOS shell command using `install_name_tool` to change which `libcurl.4.dylib` the Hurl binary links against. This is necessary if you want Hurl to use a specific version of libcurl, such as one installed via Homebrew, instead of the system default. Requires root privileges (`sudo`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/frequently-asked-questions.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo install_name_tool -change /usr/lib/libcurl.4.dylib PATH_TO_CUSTOM_LIBCURL PATH_TO_HURL_BIN\n```\n\n----------------------------------------\n\nTITLE: Error Handling When Variable is Defined as Both Secret and Public (Shell)\nDESCRIPTION: Example shell command illustrating the error that occurs when a variable is defined simultaneously as a public variable and a secret variable in the command line. The error message enforces that a variable cannot be both public and private to avoid ambiguity in secret management within Hurl. This demonstrates validation logic at CLI parsing time.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/secrets.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhurl --variable foo=toto --secret foo=tutu /tmp/test.hurl\nerror: the variable 'foo' cannot be public and private at the same time\n```\n\n----------------------------------------\n\nTITLE: Compact Multiline String Assertion Error with Inline Diff Indicators - Plaintext\nDESCRIPTION: Presents a shorter error message version for small string mismatches, where the expected and actual values are displayed with inline '-' and '+' indicators below the offending string. This facilitates an immediate understanding of the character differences within a concise message block, suitable for small payloads.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/error_messages.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nerror: Assert body value\n  --> test.hurl:4:1\n   |\n   | GET http://localhost:8000/test\n   | ...\n 4 | `Hello World!`\n   |   -Hello World!\n   |   +Hi World!\n   |\n```\n\n----------------------------------------\n\nTITLE: Setting Up vcpkg Dependency Manager\nDESCRIPTION: Clones the vcpkg repository from GitHub, installs it, and updates environment variables to include vcpkg in the PATH for dependency management during the build process.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\ngit.exe config --global core.autocrlf false\ngit.exe config --global core.eol lf\ngit.exe clone https://github.com/microsoft/vcpkg\nc:\\vcpkg\\bootstrap-vcpkg.bat\n$oldpath = Get-ItemProperty -Path HKCU:\\Environment -Name Path\n$newpath = $oldpath.Path + \";c:\\vcpkg\"\nSet-ItemProperty -Path HKCU:\\Environment -Name Path -Value $newpath\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n```\n\n----------------------------------------\n\nTITLE: Filter Grammar Rules Definition in Hurl\nDESCRIPTION: Defines the grammar rules for filter expressions in Hurl, listing all available filter types that can be used for data transformation and extraction in HTTP testing scenarios.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_254\n\nLANGUAGE: grammar\nCODE:\n```\nfilter\n count-filter\n| days-after-now-filter\n| days-before-now-filter\n| decode-filter\n| format-filter\n| html-escape-filter\n| html-unescape-filter\n| jsonpath-filter\n| nth-filter\n| regex-filter\n| replace-filter\n| split-filter\n| to-date-filter\n| to-float-filter\n| to-int-filter\n| url-decode-filter\n| url-encode-filter\n| xpath-filter\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Grammar in Hurl\nDESCRIPTION: Defines the grammar for predicates used in assertions. Predicates are used to compare the value retrieved from a query against a specified value.  It optionally starts with a 'not' operator and then calls predicate-func.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_26\n\nLANGUAGE: Hurl\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">not</span>&nbsp;<a href=\"#sp\">sp</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">?</span>&nbsp;<a href=\"#predicate-func\">predicate-func</a>\n```\n\n----------------------------------------\n\nTITLE: Push Package to Chocolatey Repository - PowerShell\nDESCRIPTION: This snippet authenticates with the Chocolatey repository and pushes the built package to the official repository. It first uses `choco apikey` to set the API key using the provided `<choco api key>` and source for push. Then, it uses `choco push` to upload the package. Requires a valid Chocolatey API key for this to function.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/windows_package_managers/chocolatey/README.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nchoco apikey -k <choco api key> --source https://push.chocolatey.org/\nchoco push --source https://push.chocolatey.org/\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Functions in Hurl\nDESCRIPTION: Defines the functions that can be used as predicates in assertions. This section lists all possible predicate functions, such as equality checks, inequality checks, greater than, less than, and more.  Each function represents a specific type of comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_27\n\nLANGUAGE: Hurl\nCODE:\n```\n&nbsp;<a href=\"#equal-predicate\">equal-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#not-equal-predicate\">not-equal-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#greater-predicate\">greater-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#greater-or-equal-predicate\">greater-or-equal-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#less-predicate\">less-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#less-or-equal-predicate\">less-or-equal-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#start-with-predicate\">start-with-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#end-with-predicate\">end-with-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#contain-predicate\">contain-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#match-predicate\">match-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#exist-predicate\">exist-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#is-empty-predicate\">is-empty-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#include-predicate\">include-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#integer-predicate\">integer-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#float-predicate\">float-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#boolean-predicate\">boolean-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#string-predicate\">string-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#collection-predicate\">collection-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#date-predicate\">date-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#iso-date-predicate\">iso-date-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#is-ipv4-predicate\">is-ipv4-predicate</a><br>\n<span class=\"grammar-symbol\">|</span><a href=\"#is-ipv6-predicate\">is-ipv6-predicate</a>\n```\n\n----------------------------------------\n\nTITLE: Download and Prepare Offline Rust Toolchains (Bash)\nDESCRIPTION: Downloads pre-built Rust and Cargo components for x86_64 and aarch64 architectures, strips unnecessary directories to reduce size, and prepares for offline installation. Relies on wget, tar, and find utilities.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrust_version=$(grep '^rust-version' packages/hurl/Cargo.toml | cut -f2 -d'\"')\nfor arch in x86_64 aarch64 ; do\n    package=\"rust-${rust_version}-${arch}-unknown-linux-gnu\"\n    packagelight=\"${package}-light\"\n    wget \"https://static.rust-lang.org/dist/${package}.tar.xz\"\n    xz -T0 -vd \"${package}.tar.xz\"\n    tar -xf \"${package}.tar\"\n    dirs_to_delete=$(find \"${package}\" -type d | cut --delimiter \"/\" --field 1,2 | grep \"/\" | grep -Ev  \"/cargo$|/rust-std-${arch}-unknown-linux-gnu$|/rustc$\" | sort -u | tr '\\n' ' ')\n    rm -fr $dirs_to_delete\n    grep -E \"^cargo$|^rust-std-${arch}-unknown-linux-gnu$|^rustc$\" \"${package}/components\" | sponge \"${package}/components\"\n    mv \"${package}\" \"${packagelight}\"\n    tar cf \"${packagelight}.tar\" \"${packagelight}\"\n    xz -T0 -9 -v \"${packagelight}.tar\"\n    rm -fr \"${package}.tar\" \"${packagelight}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Current error output for formatting differences\nDESCRIPTION: Shows the current textual comparison output when JSON is semantically identical but formatted differently.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hurl test.hurl\nerror: Assert body value\n  --> /tmp/test.hurl:3:1\n  |\n  | GET http://localhost:8000/greeting\n  | ...\n3 | {\n  |   -{\n  |   -  \"greeting\": \"Hello\"\n  |   -}\n  |   +{\"greeting\":\"Hello\"}\n  | }\n```\n\n----------------------------------------\n\nTITLE: Building the Hurl Project\nDESCRIPTION: Runs PowerShell scripts within the cloned project to install prerequisites and compile the release version of Hurl, preparing binaries for distribution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd c:\\hurl\n.\\bin\\install_prerequisites_windows.ps1\n.\\bin\\release\\release.ps1\n```\n\n----------------------------------------\n\nTITLE: Launch mitmproxy\nDESCRIPTION: Launches mitmproxy, a tool for intercepting, inspecting, modifying and replaying web traffic. It configures mitmproxy to listen on port 8888 for proxy connections and opens the web interface on port 8889 in a browser.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/tutorial/debug-tips.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ mitmweb -p 8888 --web-port 8889 --web-open-browser\n```\n\n----------------------------------------\n\nTITLE: Defining the Regex Content Grammar Rule - HTML\nDESCRIPTION: Describes the allowed contents inside a regex pattern for Hurl, comprising zero or more sequences of 'regex-text' (unescaped characters) or 'regex-escaped-char' (escaped items). This enables comprehensive regex patterns, supporting both direct characters and escape sequences. Relies on the 'regex-text' and 'regex-escaped-char' subrules, with no external dependencies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_244\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"regex-content\">regex-content</span><span class=\"grammar-usedby\">(used by <a href=\"#regex\">regex</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><a href=\"#regex-text\">regex-text</a><span class=\"grammar-symbol\">|</span><a href=\"#regex-escaped-char\">regex-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Testing URL Endpoints and Responses in JavaScript\nDESCRIPTION: Defines a test case for verifying URL endpoints, sending HTTP requests, and validating the server response with expected status codes and payloads. Utilizes fetch or axios for request sending and assertion libraries for validation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/tests/hello.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest('Verify GET /status endpoint', async () => {\n  const response = await fetch('https://example.com/status');\n  expect(response.status).toBe(200);\n  const data = await response.json();\n  expect(data).toHaveProperty('status', 'ok');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Byte Representations in Hurl Grammar\nDESCRIPTION: Grammar rules for different ways to represent byte data in Hurl, including JSON values, XML, multiline strings, oneline strings, base64, file references, and hexadecimal values.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_223\n\nLANGUAGE: Grammar\nCODE:\n```\nbytes ::= json-value\n| xml\n| multiline-string\n| oneline-string\n| oneline-base64\n| oneline-file\n| oneline-hex\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Lexical Rule: boolean\nDESCRIPTION: Defines the 'boolean' lexical rule in the Hurl grammar. It represents either the literal 'true' or the literal 'false' and is used by rules like 'boolean-option', 'variable-value', 'predicate-value', and 'json-value'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_92\n\nLANGUAGE: Grammar\nCODE:\n```\ntrue|false\n```\n\n----------------------------------------\n\nTITLE: Asserting with Existing Formats in Hurl\nDESCRIPTION: This snippet shows asserting conditions using existing formats with queries and predicates.  It demonstrates how to validate data extracted from the response body using the 'jsonpath' function and the equality operator (==). This ensures that existing assert statements continue to function correctly after the expression generalization.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/expressions.md#_snippet_2\n\nLANGUAGE: Hurl\nCODE:\n```\n[Asserts]\njsonpath \"$.count' == 82\n```\n\n----------------------------------------\n\nTITLE: Defining a Bytes Query in Hurl\nDESCRIPTION: Defines a grammar rule for querying the size of the response body in bytes.  This is represented by the literal 'bytes' and is used to validate the size of the HTTP response.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_25\n\nLANGUAGE: Hurl\nCODE:\n```\nbytes\n```\n\n----------------------------------------\n\nTITLE: Defining the compressed-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'compressed' option. It consists of the literal 'compressed', a colon, a boolean-option (true/false) indicating whether to request compressed responses, and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_12\n\nLANGUAGE: grammar\nCODE:\n```\ncompressed : boolean-option lt\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-content\nDESCRIPTION: Defines the content of a quoted string in Hurl grammar. It consists of zero or more occurrences of either plain text (`quoted-string-text`) or escaped characters (`quoted-string-escaped-char`). This rule is used by the `quoted-string` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_226\n\nLANGUAGE: Grammar\nCODE:\n```\nquoted-string-content ::= (quoted-string-text | quoted-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: String Content Text Parsing with Regex\nDESCRIPTION: Defines the regex rule for 'value-string-text', which matches one or more characters not including '#', newline, or carriage return, used to parse unescaped string content within 'value-string-content'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_45\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"value-string-text\">value-string-text</span><span class=\"grammar-usedby\">(used by <a href=\"#value-string-content\">value-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-regex\">~[#\\n\\]+</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Programming Language\nDESCRIPTION: Downloads and installs Rust via rustup-init for Windows (x86_64 architecture), setting environment variables for full backtrace support during Rust compilation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-WebRequest -UseBasicParsing -OutFile \"c:\\rustup-init.exe\" \"https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe\"\nc:\\rustup-init.exe -y  --default-toolchain stable-x86_64-pc-windows-msvc\nSet-ItemProperty -Path HKCU:\\Environment -Name RUST_BACKTRACE -Value \"full\"\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable Query in Hurl\nDESCRIPTION: Defines the grammar rule for querying the value of a variable. It starts with the literal 'variable', a space, and a quoted string representing the variable name. Useful to assert values extracted from the request or the response against each other.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_21\n\nLANGUAGE: Hurl\nCODE:\n```\nvariable&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#quoted-string\">quoted-string</a>\n```\n\n----------------------------------------\n\nTITLE: Lexical Grammar Elements in Hurl\nDESCRIPTION: Defines the basic lexical elements used in Hurl grammar, including boolean values (true/false), null value, and alphanumeric character pattern for building identifiers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_256\n\nLANGUAGE: grammar\nCODE:\n```\nboolean: true|false\nnull: null\nalphanum: [A-Za-z0-9]\n```\n\n----------------------------------------\n\nTITLE: Defining the option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for specifying various request options within the [Options] section. It starts optionally with line terminators (lt*) and allows defining one of many possible configuration options like aws-sigv4, cacert, cert, key, compressed, connect-to, etc. This rule aggregates all possible option types.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_7\n\nLANGUAGE: grammar\nCODE:\n```\nlt*\\n(aws-sigv4-option|ca-certificate-option|client-certificate-option|client-key-option|compressed-option|connect-to-option|connect-timeout-option|delay-option|follow-redirect-option|follow-redirect-trusted-option|header-option|http10-option|http11-option|http2-option|http3-option|insecure-option|ipv4-option|ipv6-option|limit-rate-option|max-redirs-option|netrc-option|netrc-file-option|netrc-optional-option|output-option|path-as-is-option|proxy-option|repeat-option|resolve-option|retry-option|retry-interval-option|skip-option|unix-socket-option|user-option|variable-option|verbose-option|very-verbose-option)\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-text\nDESCRIPTION: Defines the rule 'key-string-text' which specifies the allowed unescaped characters within a 'key-string-content'. It matches one or more alphanumeric characters or specific symbols (_, -, ., [, ], @, $).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_41\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n(alphanum|_|-|\\.|\\[|\\]|@|\\$)+\n```\n\n----------------------------------------\n\nTITLE: Defining json-array Grammar Rule\nDESCRIPTION: Defines the structure of a JSON array. A JSON array starts with `[`, is followed by zero or more `json-value` elements separated by commas `,`, and ends with `]`. This rule is used by the `json-value` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_235\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n[ json-value (, json-value)* ]\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Grammar Rule for Delimited Regular Expressions in Hurl Grammar Syntax\nDESCRIPTION: Defines a regex pattern beginning and ending with a slash '/' containing zero or more regex-text or escaped characters. This is used in regex queries, predicates, and filters across Hurl scripts.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_267\n\nLANGUAGE: grammar\nCODE:\n```\nregex : \"/\" regex-content \"/\"\n```\n\n----------------------------------------\n\nTITLE: Defining json-string-escaped-char Hurl Grammar\nDESCRIPTION: Defines the allowed escaped characters within a JSON string in Hurl grammar. It specifies that a backslash `\\` must be followed by one of the literal characters (`\"`, `\\`, `b`, `f`, `n`, `r`, `t`) or a Unicode escape sequence (`u` followed by four `#hexdigit`s). This rule is a component of `#json-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_249\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\\ (\"|\\\\|b|f|n|r|t|u hexdigit hexdigit hexdigit hexdigit)\n```\n\n----------------------------------------\n\nTITLE: Defining a Certificate Query in Hurl\nDESCRIPTION: Defines the grammar rule for querying certificate information. It specifies that a certificate query starts with the literal 'certificate', a space, and then specifies one of the following certificate attributes: 'Subject', 'Issuer', 'Start-Date', 'Expire-Date', or 'Serial-Number'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_15\n\nLANGUAGE: Hurl\nCODE:\n```\ncertificate&nbsp;<a href=\"#sp\">sp</a>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">Subject</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">Issuer</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">Start-Date</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">Expire-Date</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">Serial-Number</span><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Value String Escaped Characters in Hurl Grammar\nDESCRIPTION: Defines the `value-string-escaped-char` rule, representing an escaped character sequence starting with a backslash '\\'. It allows escaping '#', '\\', backspace ('\\b'), form feed ('\\f'), newline ('\\n'), carriage return ('\\r'), tab ('\\t'), or a Unicode character specified by `\\u` followed by the `unicode-char` rule. This rule is used by `value-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_212\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-literal\">\\</span> <span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">#</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\n</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\r</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\t</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\u</span> <a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Hurl Test Suite in JavaScript\nDESCRIPTION: Sets up the testing environment for Hurl tests using JavaScript, including importing necessary modules and initializing test configurations. Dependencies might include testing frameworks like Jest or Mocha.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/packages/hurl/tests/hello.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { test, expect } = require('jest');\n\n// Initialize test suite for Hurl\nfunction initializeHurlTests() {\n  // Configuration code here\n} \n```\n\n----------------------------------------\n\nTITLE: Checking Hurl Binary Path and Linked Libraries (macOS) - Shell\nDESCRIPTION: These shell commands determine the installation path of the Hurl binary and list dynamically linked libraries using 'which' and 'otool -L' on macOS. Dependencies: shell environment with the necessary tools installed. Inputs are Hurl executable path; outputs show linked libraries necessary for runtime. Useful for diagnostics and compatibility checks.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_97\n\nLANGUAGE: Shell\nCODE:\n```\n$ which hurl\n/opt/homebrew/bin/hurl\n$ otool -L /opt/homebrew/bin/hurl:\n\t/usr/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.9.0)\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1858.112.0)\n\t/usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current version 9.0.0)\n\t/usr/lib/libiconv.2.dylib (compatibility version 7.0.0, current version 7.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.100.3)\n\n```\n\n----------------------------------------\n\nTITLE: Defining an XPath Query in Hurl\nDESCRIPTION: Defines the grammar rule for querying using XPath expressions against the response body. The rule specifies that an XPath query starts with the literal 'xpath', a space, and a quoted string that represents the XPath expression. It is used for extracting data from XML responses.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_18\n\nLANGUAGE: Hurl\nCODE:\n```\nxpath&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#quoted-string\">quoted-string</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Multiline String Attribute in Hurl Grammar\nDESCRIPTION: Defines the `multiline-string-attribute` rule, specifying optional attributes for a multiline string. Allowed attributes are 'escape' or 'novariable'. Used by `multiline-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_219\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n <span class=\"grammar-literal\">escape</span><br>\n<span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">novariable</span>\n```\n\n----------------------------------------\n\nTITLE: Using Custom libcurl with Hurl on macOS\nDESCRIPTION: Command to patch Hurl on macOS to use a custom libcurl library instead of the system default. Shows how to modify the binary to use Homebrew's libcurl implementation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo install_name_tool -change /usr/lib/libcurl.4.dylib PATH_TO_CUSTOM_LIBCURL PATH_TO_HURL_BIN\n```\n\n----------------------------------------\n\nTITLE: Defining an MD5 Query in Hurl\nDESCRIPTION: Defines a grammar rule for verifying the MD5 hash of the response body. It contains the literal 'md5' and is used for integrity checks of the response body content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_24\n\nLANGUAGE: Hurl\nCODE:\n```\nmd5\n```\n\n----------------------------------------\n\nTITLE: Create Offline Cargo Dependencies Archive (Bash)\nDESCRIPTION: Vendors Rust dependencies for offline use, packages them into a tar.xz archive, and removes the vendor directory. Facilitates dependency management in isolated environments.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncargo vendor\n tar pcfJ vendor.tar.xz vendor\nrm -rf vendor\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Content Grammar Rule Composed of Text or Escaped Characters\nDESCRIPTION: Defines regex content as zero or more regex-text or regex-escaped characters, to be enclosed within regex delimiters. This supports flexible regex expressions used in queries and filters.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_268\n\nLANGUAGE: grammar\nCODE:\n```\n(regex-text | regex-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Choose Hurl Version and Ubuntu Codename for Testing (Shell Script)\nDESCRIPTION: Prompts for user input of Hurl version and Ubuntu codename, then runs an Ubuntu container with mounted volume for testing Hurl installation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\necho -n \"hurl_version=\" && read -r hurl_version\necho -n \"Ubuntu codename=\" && read -r codenamed\ndocker run -it --rm --env hurl_version=\"${hurl_version}\" --env codename=\"${codenamed}\" --volume \"/tmp:/tmp\" \"ubuntu:${codenamed}\" bash\n```\n\n----------------------------------------\n\nTITLE: Defining a SHA256 Query in Hurl\nDESCRIPTION: Defines a grammar rule for verifying the SHA256 hash of the response body. It contains the literal 'sha256' and is used for integrity checks of the response body content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_23\n\nLANGUAGE: Hurl\nCODE:\n```\nsha256\n```\n\n----------------------------------------\n\nTITLE: Patching Hurl to Use Homebrew libcurl Example - Shell\nDESCRIPTION: This shell command exemplifies patching the Hurl binary to use the Homebrew-installed libcurl library. It assumes that curl has been installed via Homebrew, typically placing libcurl in /usr/local/opt/curl/lib/. The command modifies the binary in-place, requiring sudo privileges, and outputs no direct result but changes the link for dynamic loading. Inputs: hardcoded system libcurl path, Homebrew libcurl path, and Hurl's executable location.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_106\n\nLANGUAGE: shell\nCODE:\n```\nsudo install_name_tool -change /usr/lib/libcurl.4.dylib /usr/local/opt/curl/lib/libcurl.4.dylib /usr/local/bin/hurl\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Hurl on macOS (Source)\nDESCRIPTION: Installs the Xcode Command Line Tools (if not already installed) and the pkg-config utility using Homebrew. These are necessary prerequisites for building Hurl from source code on macOS. Requires Homebrew (brew) to be installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/README.md#_snippet_120\n\nLANGUAGE: shell\nCODE:\n```\n$ xcode-select --install\n$ brew install pkg-config\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Grammar Rule as a Hash and Trailing Characters in Hurl Grammar Syntax\nDESCRIPTION: Defines a comment line starting with '#' and continuing up to but not including a newline. This rule is used by the line terminator and other rules to allow inline or trailing comments.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_266\n\nLANGUAGE: grammar\nCODE:\n```\ncomment : \"#\" ~[\\n]*\n```\n\n----------------------------------------\n\nTITLE: Defining a Greater Than or Equal Predicate in Hurl\nDESCRIPTION: Defines the grammar rule for the 'greater than or equal to' predicate. It involves the literal '>=' followed by a space and then either a number, a quoted string, or a placeholder. It's used for comparison asserting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_31\n\nLANGUAGE: Hurl\nCODE:\n```\n<span class=\"grammar-literal\">&gt;=</span>&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#sp\">sp</a><span class=\"grammar-symbol\">*</span>&nbsp;<span class=\"grammar-symbol\">(</span><a href=\"#number\">number</a><span class=\"grammar-symbol\">|</span><a href=\"#quoted-string\">quoted-string</a><span class=\"grammar-symbol\">|</span><a href=\"#placeholder\">placeholder</a><span class=\"grammar-symbol\">)</span>\n```\n\n----------------------------------------\n\nTITLE: Install Rust and Cargo from Offline Packages (Bash)\nDESCRIPTION: Extracts rust package, runs installation script to install Rust and Cargo into a temporary directory, updates PATH for usage, verifies versions, and cleans up package files.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\narch=$(uname -m)\npackage=\"rust-${rust_version}-${arch}-unknown-linux-gnu\"\npackagelight=\"${package}-light\"\ntar xf \"${packagelight}.tar.xz\"\n./\"${packagelight}\"/install.sh --destdir=/tmp/rust --disable-ldconfig\nexport PATH=\"/tmp/rust/usr/local/bin:$PATH\"\nrustc --version\ncargo --version\nrm -fr \"${package}\"\n```\n\n----------------------------------------\n\nTITLE: Installing build dependencies on Red Hat based Linux\nDESCRIPTION: Installs the necessary build dependencies for Hurl on Red Hat-based Linux distributions. Requires yum package manager and sudo privileges.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/installation.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ yum install -y pkg-config gcc openssl-devel libxml2-devel\n```\n\n----------------------------------------\n\nTITLE: Building Hurl Project with Cargo (Shell)\nDESCRIPTION: Compiles the Hurl Rust project using the `cargo build` command. This command builds all packages within the Hurl workspace (hurl_core, hurlfmt, hurl). Requires the Rust toolchain to be installed. The output shows the compilation progress and the final result.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo build\n   Compiling hurl_core v6.0.0-SNAPSHOT (/Users/jc/Documents/Dev/hurl/packages/hurl_core)\n   ...\n   Compiling hurlfmt v6.0.0-SNAPSHOT (/Users/jc/Documents/Dev/hurl/packages/hurlfmt)\n   Compiling hurl v6.0.0-SNAPSHOT (/Users/jc/Documents/Dev/hurl/packages/hurl)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-string-text\nDESCRIPTION: Specifies the allowed plain text characters within a Hurl one-line (backtick-enclosed) string. It matches any character except hash (`#`), newline (`\\n`), backslash (`\\`), or backtick (`). This rule is used by `oneline-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_239\n\nLANGUAGE: Grammar\nCODE:\n```\noneline-string-text ::= ~[#\\n\\\\] ~`\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: to-int-filter\nDESCRIPTION: Defines the 'to-int-filter' rule within the Hurl grammar. This rule simply consists of the literal keyword 'toInt' and is used as part of a 'filter' for type conversion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_86\n\nLANGUAGE: Grammar\nCODE:\n```\ntoInt\n```\n\n----------------------------------------\n\nTITLE: Configure Cargo Build Environment (Bash)\nDESCRIPTION: Creates configuration directories and files for Cargo offline building, copying relevant config, and combining project-specific Cargo config with debian patches.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p debian/cargo_home\ncp Cargo.toml debian/cargo_home/config\n{\ncat .cargo/config.toml\necho\ncat debian/cargo.config\n} > .cargo/config\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: url-encode-filter\nDESCRIPTION: Defines the 'url-encode-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'urlEncode' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_89\n\nLANGUAGE: Grammar\nCODE:\n```\nurlEncode\n```\n\n----------------------------------------\n\nTITLE: Minimize Hurl Repository Content (Bash)\nDESCRIPTION: Removes unnecessary files and directories from the Hurl source to reduce build size, including documentation, CI configs, and test artifacts. Uses `find` and `rm` commands to clean the repository.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -fr .circleci \\\n       .github \\\n       .git \\\n       rustfmt.toml \\\n       art \\\n       contrib \\\n       integration \\\n       RELEASING.md \\\n       README.md \\\n       CONTRIBUTING.md\nwhile read -r dir ; do\n    rm -fr $dir\ndone < <(find bin -mindepth 1 -type d | grep -v \"bin/release\")\nwhile read -r file ; do\n    rm -fr $file\ndone < <(find bin -type f | grep -Ev \"man\\.sh|release\\.sh|gen_manpage\\.py\")\nwhile read -r dir ; do\n    rm -fr $dir\ndone < <(find docs -mindepth 1 -type d | grep -v \"docs/manual\")\nwhile read -r file ; do\n    rm -fr $file\ndone < <(find docs -type f | grep -Ev \"manual/\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Hurl Package on npm (shell)\nDESCRIPTION: This shell script publishes a new version of the Hurl package to npm. It copies documentation files, checks versioning, removes existing build artifacts, performs a dry-run publish, and then publishes the package. The dependencies include the npm package manager, python3 interpreter and the Hurl native binary. Key parameters are PACKAGE_VERSION (the package version) and HURL_VERSION (the binary version). The script copies documentation, performs version checks, removes old distributions, performs a dry-run, and then publishes the package. There are no direct constraints but assumes the user has npm installed and configured.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/npm/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cp docs/manual/*.1 contrib/npm/hurl/docs/\n$ python3 ./contrib/npm/check_publish.py $HURL_VERSION $PACKAGE_VERSION\n$ rm -rfd contrib/npm/hurl/dist contrib/npm/hurl/node_modules\n$ npm publish --dry-run contrib/npm/hurl/\n$ npm publish contrib/npm/hurl/\n```\n\n----------------------------------------\n\nTITLE: Define Unicode escape character format - Hurl Grammar\nDESCRIPTION: Defines the format for a Unicode escape sequence in Hurl strings. It consists of an opening brace '{', followed by one or more hexadecimal digits (hexdigit), and a closing brace '}' referencing the `hexdigit` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_64\n\nLANGUAGE: Grammar\nCODE:\n```\n{ hexdigit+ }\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing GPG Keys for PPA Signing (Bash)\nDESCRIPTION: Commands to generate, export, import, and manage GPG keys required for signing the PPA and Debian packages. Dependencies include GPG installed and configured on the system. Keys are exported in ASCII-armored format for use in Ubuntu PPA creation and package signing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# get <gpg_keyid>\ngpg_keyid=$(gpg --list-keys | grep -E \"^ \" | tr -d ' ')\n\n# get <GPG-FINGERPRINT>\ngpg --fingerprint \"${gpg_keyid}\"\n\n# export ascii-armored gpg public key\ngpg --armor --export \"${gpg_keyid}\"\n\n# export public and private key\ngpg --armor --export \"${gpg_keyid}\" > /tmp/mypublickey.asc\ngpg --armor --export-secret-keys \"${gpg_keyid}\" > /tmp/myprivatekey.asc\n\n# import public and private key\ngpg --import /tmp/mypublickey.asc\ngpg --import /tmp/myprivatekey.asc\n```\n\n----------------------------------------\n\nTITLE: Test Homebrew Formula Update PR\nDESCRIPTION: Tests the Homebrew formula update process for Hurl without actually submitting a pull request. This uses the `--dry-run` flag to simulate the action and verify the command syntax and inputs.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/brew/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew bump-formula-pr --url https://github.com/Orange-OpenSource/hurl/archive/refs/tags/x.y.z.tar.gz hurl --verbose --dry-run\n```\n\n----------------------------------------\n\nTITLE: Hurl Grammar: Define Regex Text\nDESCRIPTION: Defines the grammar rule `regex-text` within the Hurl parsing syntax. This rule specifies a pattern that matches one or more occurrences of either a newline character (`\\n`) or a forward slash (`/`). It is indicated as being a component used in the `regex-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_269\n\nLANGUAGE: Hurl Grammar Pattern\nCODE:\n```\n~[\\n\\/]+\n```\n\n----------------------------------------\n\nTITLE: Defining filename-escaped-char Grammar Rule\nDESCRIPTION: Defines the valid escaped characters that can appear within a filename string in Hurl. It specifies that a backslash `\\` must be followed by one of the defined escape sequence characters or a unicode escape sequence (`u` followed by a unicode character). This rule is used by the `filename-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_226\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n\\ (\\|b|f|n|r|t|#|;| |{|}|u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Multiline String Escaped Characters\nDESCRIPTION: Defines escape sequences within multiline strings, allowing special characters like backslash, b, f, n, r, t, and unicode sequences, to be used for string escaping.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_55\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"multiline-string-escaped-char\">multiline-string-escaped-char</span><span class=\"grammar-usedby\">(used by <a href=\"#multiline-string-content\">multiline-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">\\\\</span>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">n</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">r</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">t</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">`</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">u</span>&nbsp;<a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: to-string-filter\nDESCRIPTION: Defines the 'to-string-filter' rule within the Hurl grammar. This rule simply consists of the literal keyword 'toString' and is used as part of a 'filter' for type conversion.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_87\n\nLANGUAGE: Grammar\nCODE:\n```\ntoString\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: html-escape-filter\nDESCRIPTION: Defines the 'html-escape-filter' rule within the Hurl grammar. This rule consists of the literal keyword 'htmlEscape' and is used as part of a 'filter'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_77\n\nLANGUAGE: Grammar\nCODE:\n```\nhtmlEscape\n```\n\n----------------------------------------\n\nTITLE: Installing System Prerequisites in Ubuntu Container\nDESCRIPTION: This snippet updates the package list non-interactively and runs a dedicated script to install all required prerequisites for building and packaging the application on Ubuntu. It verifies system architecture before proceeding.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuname -m\nexport DEBIAN_FRONTEND=noninteractive\napt update\nbin/install_prerequisites_ubuntu.sh\n```\n\n----------------------------------------\n\nTITLE: Preparing Docker Build Environment with QEMU and Docker Buildx\nDESCRIPTION: Sets up a multi-architecture Docker build environment by cleaning existing build cache, installing QEMU user static binaries, enabling Docker CLI experiments, and creating a new Docker buildx builder instance. Dependencies include Docker, apt-get packages, and QEMU static binaries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune -fa\ndocker buildx prune -fa\ndocker buildx rm mybuilder\nexport DOCKER_CLI_EXPERIMENTAL=enabled\nsudo apt-get install -y qemu-user-static\nls -l /usr/bin/qemu-aarch64-static\nqemu-aarch64-static --version\nsudo apt-get install -y binfmt-support\nupdate-binfmts --version\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker buildx create --name mybuilder\ndocker buildx use mybuilder\n```docker buildx inspect --bootstrap```\ndocker buildx ls\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies via Chocolatey\nDESCRIPTION: Installs git, LLVM, NSIS, and Python 3 using Chocolatey, which are required for cloning projects, compiling, and building installers.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/windows/README.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nchoco install --confirm --no-progress git winlibs-llvm-free nsis\nchoco install --confirm --no-progress python311\npython -m pip install --upgrade pip --quiet\n```\n\n----------------------------------------\n\nTITLE: Define filename escaped characters - Hurl Grammar\nDESCRIPTION: Specifies the valid escape sequences allowed within filename strings in Hurl. Includes common escapes like '\\n' for newline and specific Hurl-related escapes for characters like '#', ';', '{', '}', and space, plus a mechanism for Unicode escapes.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_59\n\nLANGUAGE: Grammar\nCODE:\n```\n\\ (\\ |\\b|\\f|\\n|\\r|\\t|#|;|\\ |\\{|\\}|u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Clone Hurl Source Repository (Bash)\nDESCRIPTION: Removes any existing temporary directory and clones the Hurl repository with depth 1 for a shallow copy. Clones default branch and specific version branch of Hurl source code.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrm -fr /tmp/ppa || true\ngit clone --depth 1 https://github.com/Orange-OpenSource/hurl.git /tmp/ppa/hurl-ppa\ngit clone --depth 1 https://github.com/Orange-OpenSource/hurl.git --branch \"${hurl_version}\" /tmp/ppa/hurl-\"${hurl_version}\"\ncd /tmp/ppa/hurl-\"${hurl_version}\"\ncp -r ../hurl-ppa/contrib/ppa/debian .\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Value String Content in Hurl Grammar\nDESCRIPTION: Defines the `value-string-content` rule, which consists of zero or more occurrences of either `value-string-text` or `value-string-escaped-char`. This rule is used by the `value-string` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_210\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-symbol\">(</span><a href=\"#value-string-text\">value-string-text</a><span class=\"grammar-symbol\">|</span><a href=\"#value-string-escaped-char\">value-string-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span>\n```\n\n----------------------------------------\n\nTITLE: Testing the Generated ARM64 Linux Binary\nDESCRIPTION: This snippet installs the generic Linux package, adjusts the PATH, activates a Python virtual environment, and runs a series of tests to verify functionality and prerequisites of the built binaries.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/release/install_generic_linux_package.sh\nexport PATH=\"/tmp/hurl-generic-linux:${PATH}\"\nbin/activate_python3_venv.sh\nexport PATH=/tmp/hurl-python3-venv/bin:$PATH\nbin/test/test_prerequisites.sh\nbin/test/test_integ.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Package Files\nDESCRIPTION: This snippet navigates to the upload directory and lists the details of the generated 'hurl' package files, typically for verification or deployment.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/cross_compile/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexit\ncd target/upload\nls -lrt hurl*\n```\n\n----------------------------------------\n\nTITLE: Defining unicode-char Grammar Rule\nDESCRIPTION: Defines the structure for a unicode character escape sequence in Hurl. It consists of curly braces `{}` enclosing one or more hexadecimal digits (`hexdigit+`). This rule is used in various escaped character rules for strings and filenames.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_231\n\nLANGUAGE: Hurl Grammar Definition\nCODE:\n```\n{ hexdigit+ }\n```\n\n----------------------------------------\n\nTITLE: Generating Man Pages - Shell\nDESCRIPTION: This script generates (parts of) man pages for the `hurl` and `hurlfmt` commands. It uses the python script `bin/spec/options/generate_man.py`, taking `.option` files as input. The script processes `.option` files located in the specified directories (e.g., `docs/spec/options/hurl/*.option` for `hurl` and `docs/spec/options/hurlfmt/*.option` for `hurlfmt`), generating the man file content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/options/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/spec/options/generate_man.py docs/spec/options/hurl/*.option\n$ bin/spec/options/generate_man.py docs/spec/options/hurlfmt/*.option\n```\n\n----------------------------------------\n\nTITLE: Complex JSON example for proposed comparison\nDESCRIPTION: A complex JSON structure example used to demonstrate various difference scenarios in the proposed semantic comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"is_alive\": true,\n  \"age\": 27,\n  \"address\": {\n    \"street_address\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postal_code\": \"10021-3100\"\n  },\n  \"phone_numbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": : \"212 555-1234\"      \n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [\n    \"Catherine\",\n    \"Thomas\",\n    \"Trevor\"\n  ],\n  \"spouse\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Regex Pattern Grammar Rule - HTML\nDESCRIPTION: Captures the overall definition of a regex pattern enclosed by '/' characters for the Hurl language. It uses the subrule 'regex-content' for the pattern body, enabling flexible embedding of regular expressions in parsing filters or assertions. Relies on the 'regex-content' rule to prevent unescaped '/' and newline characters; there are no external dependencies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_243\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"regex\">regex</span><span class=\"grammar-usedby\">(used by <a href=\"#regex-query\">regex-query</a>,&nbsp;<a href=\"#match-predicate\">match-predicate</a>,&nbsp;<a href=\"#regex-filter\">regex-filter</a>,&nbsp;<a href=\"#replace-filter\">replace-filter</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">/</span>&nbsp;<a href=\"#regex-content\">regex-content</a>&nbsp;<span class=\"grammar-literal\">/</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: key-string-content\nDESCRIPTION: Defines the allowable content within a Hurl key string, excluding templates. It consists of zero or more occurrences of either plain key string text (`key-string-text`) or escaped characters specific to key strings (`key-string-escaped-char`). This rule is used by `key-string`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_230\n\nLANGUAGE: Grammar\nCODE:\n```\nkey-string-content ::= (key-string-text | key-string-escaped-char)*\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Using Python Scripts with Bash\nDESCRIPTION: This Bash snippet demonstrates how to generate various documentation artifacts (manual pages, Markdown docs, and README files) for the Hurl project by executing a series of Python scripts. Dependencies include Python 3 and the project's custom Python scripts located in the bin/release and bin/docs directories. Input files are Markdown sources, and outputs include man page files, site documentation, and README files placed at their respective destinations. Limitations: Requires access to the project's directory structure and assumes all dependencies are installed.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ..\n$ python3 bin/release/gen_manpage.py docs/manual/hurl.md > docs/manual/hurl.1\n$ python3 bin/release/gen_manpage.py docs/manual/hurlfmt.md > docs/manual/hurlfmt.1\n$ python3 bin/docs/build_man_md.py docs/manual/hurl.md > docs/manual.md\n$ python3 bin/docs/build_readme.py github > README.md\n$ python3 bin/docs/build_readme.py crates > packages/hurl/README.md\n```\n\n----------------------------------------\n\nTITLE: Define JSON key-value pair structure - Hurl Grammar\nDESCRIPTION: Defines the structure of a single key-value pair within a JSON object in Hurl. It consists of a JSON string (the key), followed by a colon ':', and then a JSON value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_67\n\nLANGUAGE: Grammar\nCODE:\n```\njson-string : json-value\n```\n\n----------------------------------------\n\nTITLE: Rust Struct CliOptions Representing CLI Variables Storage\nDESCRIPTION: Defines the `CliOptions` Rust struct used to represent command line interface options in Hurl, specifically focusing on the `variables` field which is a HashMap that owns all user-defined variables. This struct is part of parsing and storing CLI options before passing them to execution. The snippet highlights the use of HashMap for variable storage and is foundational to variable injection in the application.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/secrets.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct CliOptions {\n    // ...\n    pub variables: HashMap<String, Value>,\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Grammar Validation and HTML Generation Script\nDESCRIPTION: Runs the `generate_html.sh` script. This script utilizes the grammar processing tool from https://github.com/fabricereix/grammar to validate the project's grammar and generate an HTML representation.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/grammar/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./generate_html.sh\n```\n\n----------------------------------------\n\nTITLE: Proposed jsonpath error format for array size difference\nDESCRIPTION: Shows how an array size difference would be displayed using the proposed semantic comparison.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/runner/assert_json_body.md#_snippet_5\n\nLANGUAGE: hurl\nCODE:\n```\nerror: Assert JSON Body\n  --> test.hurl:41:0\n  |\n  | GET http://localhost:8000/add_json\n  | ...\n31 | jsonpath \"$.phone_numbers\" count == 2\n  |   actual:   integer <3>\n  |   expected: integer <2>\n```\n\n----------------------------------------\n\nTITLE: Defining the Exponent Grammar Rule - HTML\nDESCRIPTION: Specifies the syntax for the 'exponent' component, typically used within floating-point number parsing for the Hurl DSL. The rule matches the character 'e' or 'E', optionally followed by a '+' or '-', then requires one or more digit submatches. This allows parsing of scientific notation numeric literals as used in JSON numbers. No external dependencies; relies on the previously defined 'digit' subrule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_239\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"exponent\">exponent</span><span class=\"grammar-usedby\">(used by <a href=\"#json-number\">json-number</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">e</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">E</span><span class=\"grammar-symbol\">)</span>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">+</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">-</span><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">?</span>&nbsp;<a href=\"#digit\">digit</a><span class=\"grammar-symbol\">+</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Values in Hurl Grammar\nDESCRIPTION: Grammar rule specifying the allowable value types that can be used in predicates. Includes boolean, multiline strings, null, numbers, base64, file references, hex values, quoted strings, and templates.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_222\n\nLANGUAGE: Grammar\nCODE:\n```\npredicate-value ::= boolean\n| multiline-string\n| null\n| number\n| oneline-base64\n| oneline-file\n| oneline-hex\n| quoted-string\n| template\n```\n\n----------------------------------------\n\nTITLE: Defining json-number Hurl Grammar\nDESCRIPTION: Defines the syntax for a JSON number in Hurl grammar, following standard JSON number representation. It consists of an `#integer` part, an optional `#fraction` part (`?`), and an optional `#exponent` part (`?`). This rule is used as one of the possible types for a `#json-value`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_250\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\ninteger fraction? exponent?\n```\n\n----------------------------------------\n\nTITLE: Defining a Duration Query in Hurl\nDESCRIPTION: Defines the grammar rule for querying the duration of the request in milliseconds. This involves the literal 'duration' only. It is used for asserting the performance of an HTTP request by checking the response time.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_22\n\nLANGUAGE: Hurl\nCODE:\n```\nduration\n```\n\n----------------------------------------\n\nTITLE: Defining a Not Equal Predicate in Hurl\nDESCRIPTION: Defines the grammar rule for the 'not equal' predicate, using the literal '!=' followed by a space and then the predicate value. It's used to assert that a queried value is not equal to the specified value.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_29\n\nLANGUAGE: Hurl\nCODE:\n```\n<span class=\"grammar-literal\">!=</span>&nbsp;<a href=\"#sp\">sp</a>&nbsp;<a href=\"#predicate-value\">predicate-value</a>\n```\n\n----------------------------------------\n\nTITLE: Grammar Rule Declaration for value-string-content\nDESCRIPTION: Defines the rule for parsing 'value-string-content', which consists of 'value-string-text' or 'value-string-escaped-char', repeated zero or more times. It is used within 'value-string' contexts to parse string content content.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_44\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"value-string-content\">value-string-content</span><span class=\"grammar-usedby\">(used by <a href=\"#value-string\">value-string</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><a href=\"#value-string-text\">value-string-text</a><span class=\"grammar-symbol\">|</span><a href=\"#value-string-escaped-char\">value-string-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining the Comment Grammar Rule - HTML\nDESCRIPTION: Defines the rule that matches hash-prefixed (#) comments in Hurl scripts. It identifies a '#' character followed by any non-newline characters using a regex, ignoring the comment in downstream parsing. Important for annotating or disabling parts of the script, requires no external dependencies.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_242\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"comment\">comment</span><span class=\"grammar-usedby\">(used by <a href=\"#lt\">lt</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">#</span>&nbsp;<span class=\"grammar-regex\">~[\\n]*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: oneline-hex\nDESCRIPTION: Defines the grammar rule 'oneline-hex' for representing single-line hexadecimal data. It begins with the literal 'hex,', followed by zero or more hexadecimal digits ('hexdigit' rule, defined elsewhere), and concludes with a semicolon ';'. This rule is referenced by 'start-with-predicate', 'end-with-predicate', 'predicate-value', and 'bytes'.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_34\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\nhex, hexdigit* ;\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: jsonpath-filter\nDESCRIPTION: Defines the 'jsonpath-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'jsonpath', followed by a space ('sp') and a 'quoted-string' which represents the JSONPath query.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_79\n\nLANGUAGE: Grammar\nCODE:\n```\njsonpath sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: to-date-filter\nDESCRIPTION: Defines the 'to-date-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'toDate', followed by a space ('sp') and a 'quoted-string' representing the date format.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_84\n\nLANGUAGE: Grammar\nCODE:\n```\ntoDate sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: xpath-filter\nDESCRIPTION: Defines the 'xpath-filter' rule within the Hurl grammar, used by the 'filter' rule. It requires the literal 'xpath', followed by a space ('sp') and a 'quoted-string' representing the XPath query.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_91\n\nLANGUAGE: Grammar\nCODE:\n```\nxpath sp quoted-string\n```\n\n----------------------------------------\n\nTITLE: Escape Sequence Parsing in One-line String\nDESCRIPTION: Defines escape sequences in 'oneline-string-escaped-char', allowing backslash followed by specific characters or unicode for string escaping in one-line strings.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_49\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"oneline-string-escaped-char\">oneline-string-escaped-char</span><span class=\"grammar-usedby\">(used by <a href=\"#oneline-string-content\">oneline-string-content</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-literal\">\\\\</span>&nbsp;<span class=\"grammar-symbol\">(</span><span class=\"grammar-literal\">`</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">#</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">\\\\</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">b</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">f</span><span class=\"grammar-symbol\">|</span><span class=\"grammar-literal\">u</span>&nbsp;<a href=\"#unicode-char\">unicode-char</a><span class=\"grammar-symbol\">)</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Servers for Hurl Integration Tests (Shell)\nDESCRIPTION: Launches several local servers in the background required for running Hurl's integration tests. This includes standard HTTP servers, various SSL-enabled servers (self-signed, CA-signed, client-auth), a Unix domain socket server, and a Squid proxy server. Requires Python 3.9+, squid, and potentially sudo privileges for squid.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd integration/hurl\n$ python3 server.py > server.log 2>&1 &\n$ python3 tests_ssl/ssl_server.py 8001 tests_ssl/certs/server/cert.selfsigned.pem false > server-ssl-selfsigned.log 2>&1 &\n$ python3 tests_ssl/ssl_server.py 8002 tests_ssl/certs/server/cert.pem false > server-ssl-signedbyca.log 2>&1 &\n$ python3 tests_ssl/ssl_server.py 8003 tests_ssl/certs/server/cert.selfsigned.pem true > server-ssl-client-authent.log 2>&1 &\n$ python3 tests_unix_socket/unix_socket_server.py > server-unix-socket.log 2>&1 &\n$ squid_conf=\"cache deny all\\ncache_log /dev/null\\naccess_log /dev/null\\nhttp_access allow all\\nhttp_port 127.0.0.1:3128\\nrequest_header_add From-Proxy Hello\\nreply_header_add From-Proxy Hello\"\n$ (echo -e \"${squid_conf}\" | sudo squid -d 2 -N -f /dev/stdin | sudo tee proxy.log 2>&1) &\n$ jobs\n\n[1] Running ( echo -e \"${squid_conf}\" | sudo squid -d 2 -N -f /dev/stdin | sudo tee build/proxy.log 2>&1 ) &\n[2] Running python3 server.py > server.log 2>&1 &\n[3] Running python3 tests_ssl/ssl_server.py 8001 tests_ssl/certs/server/cert.selfsigned.pem false > server-ssl-selfsigned.log 2>&1 &\n[4]-Running python3 tests_ssl/ssl_server.py 8002 tests_ssl/certs/server/cert.pem false > server-ssl-signedbyca.log 2>&1 &\n[5]+Running python3 tests_ssl/ssl_server.py 8003 tests_ssl/certs/server/cert.selfsigned.pem true > server-ssl-client-authent.log 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-text\nDESCRIPTION: Specifies the allowed plain text characters within a Hurl quoted string. It matches one or more characters that are not a double quote (`\"`) or a backslash (`\\`). This rule is used by `quoted-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_227\n\nLANGUAGE: Grammar\nCODE:\n```\nquoted-string-text ::= ~[\"\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Hurl Grammar: Define Regex Escaped Character\nDESCRIPTION: Defines the grammar rule `regex-escaped-char` for handling escaped characters within a regex context in Hurl. It specifies that a valid escaped character consists of a literal backslash (`\\`) followed by any single character that is *not* a newline (`~[\\n]`). This rule is indicated as being used by the `regex-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_270\n\nLANGUAGE: Hurl Grammar Literal\nCODE:\n```\n\\\n```\n\nLANGUAGE: Hurl Grammar Pattern\nCODE:\n```\n~[\\n]\n```\n\n----------------------------------------\n\nTITLE: Defining the file-param Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for a file parameter, potentially preceded by line terminators (lt*), followed by a key-string, a colon, a file-value specification, and a line terminator (lt). This rule is specifically used for defining file parameters within multipart-form-data sections.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_2\n\nLANGUAGE: grammar\nCODE:\n```\nlt*\\nkey-string : file-value lt\n```\n\n----------------------------------------\n\nTITLE: Filename Content with Text and Escape Sequences\nDESCRIPTION: Defines 'filename-content' as a series of 'filename-text' or 'filename-escaped-char', facilitating parsing of filename strings that may include escape sequences.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_57\n\nLANGUAGE: not applicable\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"filename-content\">filename-content</span><span class=\"grammar-usedby\">(used by <a href=\"#filename\">filename</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-symbol\">(</span><a href=\"#filename-text\">filename-text</a><span class=\"grammar-symbol\">|</span><a href=\"#filename-escaped-char\">filename-escaped-char</a><span class=\"grammar-symbol\">)</span><span class=\"grammar-symbol\">*</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: value-string-text\nDESCRIPTION: Specifies the allowed plain text characters within a Hurl value string. It matches one or more characters that are not a hash (`#`), newline (`\\n`), or backslash (`\\`). This rule is used by `value-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_235\n\nLANGUAGE: Grammar\nCODE:\n```\nvalue-string-text ::= ~[#\\n\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Define filename password text characters - Hurl Grammar\nDESCRIPTION: Defines the allowed characters for text within a filename password segment using a regular expression. It excludes characters like '#', ';', '{', '}', space, newline, carriage return, and backslash. Note: This rule is identical to `filename-text`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_62\n\nLANGUAGE: Grammar\nCODE:\n```\n~[#;{} \\n\\r\\\\\\]+\n```\n\n----------------------------------------\n\nTITLE: Defining the Whitespace (sp) Grammar Rule - HTML\nDESCRIPTION: Represents the 'sp' rule, matching single space or tab characters as part of the lexical grammar. Used in many higher-level constructs to separate tokens or fields in Hurl scripts. This minimalistic regex-based definition ensures consistent recognition of whitespace throughout parsing. No dependencies beyond HTML rendering context.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_240\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grammar-rule\"><div class=\"grammar-rule-declaration\"><span class=\"grammar-rule-id\" id=\"sp\">sp</span><span class=\"grammar-usedby\">(used by <a href=\"#request\">request</a>,&nbsp;<a href=\"#response\">response</a>,&nbsp;<a href=\"#capture\">capture</a>,&nbsp;<a href=\"#assert\">assert</a>,&nbsp;<a href=\"#header-query\">header-query</a>,&nbsp;<a href=\"#certificate-query\">certificate-query</a>,&nbsp;<a href=\"#cookie-query\">cookie-query</a>,&nbsp;<a href=\"#xpath-query\">xpath-query</a>,&nbsp;<a href=\"#jsonpath-query\">jsonpath-query</a>,&nbsp;<a href=\"#regex-query\">regex-query</a>,&nbsp;<a href=\"#variable-query\">variable-query</a>,&nbsp;<a href=\"#predicate\">predicate</a>,&nbsp;<a href=\"#equal-predicate\">equal-predicate</a>,&nbsp;<a href=\"#not-equal-predicate\">not-equal-predicate</a>,&nbsp;<a href=\"#greater-predicate\">greater-predicate</a>,&nbsp;<a href=\"#greater-or-equal-predicate\">greater-or-equal-predicate</a>,&nbsp;<a href=\"#less-predicate\">less-predicate</a>,&nbsp;<a href=\"#less-or-equal-predicate\">less-or-equal-predicate</a>,&nbsp;<a href=\"#start-with-predicate\">start-with-predicate</a>,&nbsp;<a href=\"#end-with-predicate\">end-with-predicate</a>,&nbsp;<a href=\"#contain-predicate\">contain-predicate</a>,&nbsp;<a href=\"#match-predicate\">match-predicate</a>,&nbsp;<a href=\"#include-predicate\">include-predicate</a>,&nbsp;<a href=\"#expr\">expr</a>,&nbsp;<a href=\"#jsonpath-filter\">jsonpath-filter</a>,&nbsp;<a href=\"#nth-filter\">nth-filter</a>,&nbsp;<a href=\"#regex-filter\">regex-filter</a>,&nbsp;<a href=\"#replace-filter\">replace-filter</a>,&nbsp;<a href=\"#split-filter\">split-filter</a>,&nbsp;<a href=\"#xpath-filter\">xpath-filter</a>,&nbsp;<a href=\"#lt\">lt</a>)</span></div><div class=\"grammar-rule-expression\"><span class=\"grammar-regex\">[ \\t]</span></div></div>\n```\n\n----------------------------------------\n\nTITLE: Defining the file-value Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for specifying a file's details within a file-param. It requires the keyword 'file,', followed by a filename, a semicolon, and an optional file-contenttype specification.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_3\n\nLANGUAGE: grammar\nCODE:\n```\nfile, filename ; (file-contenttype)?\n```\n\n----------------------------------------\n\nTITLE: Install Hurl from PPA in Container (Shell Script)\nDESCRIPTION: Updates the container, adds Hurl PPA, and installs specified Hurl version. Ensures the latest supported version is installed and ready for testing.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nexport DEBIAN_FRONTEND=noninteractive\nyes | unminimize\n# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1550DC447B95F03B\napt install -y git sudo man-db curl software-properties-common && \\\n    apt-add-repository -y ppa:lepapareil/hurl && \\\n    apt list --all-versions hurl && \\\n    apt install -y hurl=\"${hurl_version}\"*\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: value-string\nDESCRIPTION: Defines a value string in Hurl grammar, used in requests, key-value pairs, and various options. It consists of zero or more occurrences of either value string content (`value-string-content`) or a template expression (`template`).\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_233\n\nLANGUAGE: Grammar\nCODE:\n```\nvalue-string ::= (value-string-content | template)*\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Hurl Integration Tests (Shell)\nDESCRIPTION: Creates a Python 3 virtual environment named '.venv', activates it, and installs the project's frozen dependencies using pip. This setup is necessary to run the Hurl integration test suite. Requires Python 3.9+ and pip.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n$ pip install --requirement bin/requirements-frozen.txt\n```\n\n----------------------------------------\n\nTITLE: Install Build Dependencies in Container (Bash)\nDESCRIPTION: Updates package list and installs necessary tools and libraries for building Hurl, including GPG, Git, curl, and development tools. Uses `apt` package manager with non-interactive mode.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport DEBIAN_FRONTEND=noninteractive\napt update && \\\n    apt install -y gpg git curl wget vim xz-utils gettext moreutils && \\\n    apt install -y pkg-config gcc curl libxml2-dev libssl-dev devscripts debhelper\n```\n\n----------------------------------------\n\nTITLE: Defining the client-key-option Rule (Hurl Grammar)\nDESCRIPTION: Defines the grammar rule for the 'key' option (client private key). It consists of the literal 'key', a colon, a value-string specifying the private key file path or content, and a line terminator (lt). This rule is used within the option rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/grammar.md#_snippet_11\n\nLANGUAGE: grammar\nCODE:\n```\nkey : value-string lt\n```\n\n----------------------------------------\n\nTITLE: Run Ubuntu Docker Container with Environment Variables (Bash)\nDESCRIPTION: Starts an interactive, temporary Ubuntu Docker container with specified environment variables for GPG key ID, Hurl version, and Ubuntu codename. Mounts GPG directory for key access within container.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --env gpg_keyid=\"${gpg_keyid}\" --env hurl_version=\"${hurl_version}\" --env codename=\"${codename}\" --env date=\"$(date -u \"+%a, %d %b %Y %H:%M:%S\")\" --volume \"/tmp/gpg:/tmp\" ubuntu:\"${codename}\" bash\n```\n\n----------------------------------------\n\nTITLE: Defining json-object Hurl Grammar\nDESCRIPTION: Defines the syntax for a JSON object in Hurl grammar. It specifies that an object starts with `{`, contains zero or more key-value pairs (`#json-key-value`), separated by commas `,`, and ends with `}`. This rule is used as one of the possible types for a `#json-value`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_243\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n{ json-key-value (, json-key-value)* }\n```\n\n----------------------------------------\n\nTITLE: Pushing AMD64 Docker Image to Registry\nDESCRIPTION: Uploads the locally built AMD64 Docker image to GitHub Container Registry, making it available for deployment or distribution.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/docker/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker push ghcr.io/\"${organization}\"/hurl:amd64-\"${docker_build_tag}\"\n```\n\n----------------------------------------\n\nTITLE: Defining filename-password-escaped-char Hurl Grammar\nDESCRIPTION: Defines the allowed escaped characters within a filename or password context in Hurl grammar. It specifies that a backslash (`\\`) must be followed by one of the literal characters (`\\`, `b`, `f`, `n`, `r`, `t`, `#`, `;`, space, `{`, `}`, `:`) or the `#unicode-char` rule for escaping. This rule is used by the `filename-password-content` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_240\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\n\\ (\\\\|b|f|n|r|t|#|;| |{|}|:|u unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Select Hurl Version and Ubuntu Codename (Bash)\nDESCRIPTION: Prompts the user to enter the desired Hurl version and Ubuntu codename for container setup and build processes. Uses `read` to capture user input for environment variables.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"hurl_version=\" && read -r hurl_version\necho -n \"Ubuntu codename=\" && read -r codename\n```\n\n----------------------------------------\n\nTITLE: Defining Hurl Grammar Rule: quoted-string-escaped-char\nDESCRIPTION: Defines the valid escape sequences within a Hurl quoted string. It starts with a backslash (`\\`) followed by specific characters (`\"`, `\\`, `b`, `f`, `n`, `r`, `t`) or a Unicode escape sequence (`\\u` followed by `unicode-char`). This rule is used by `quoted-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_228\n\nLANGUAGE: Grammar\nCODE:\n```\nquoted-string-escaped-char ::= '\\' ('\"' | '\\' | '\\b' | '\\f' | '\\n' | '\\r' | '\\t' | '\\u' unicode-char)\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Grammar Rule in Hurl Grammar Syntax\nDESCRIPTION: Defines the grammar rule for integers, specifying that an integer consists of one or more digits. This rule is foundational and reused by various other rules such as integer-option, duration-option, variable-value, and JSON numbers. The integer is represented as one or more occurrences of the 'digit' rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_257\n\nLANGUAGE: grammar\nCODE:\n```\ninteger : digit+\n```\n\n----------------------------------------\n\nTITLE: Clean Up Built Package Files (Bash)\nDESCRIPTION: Removes generated package and version-specific files after successful upload to maintain a clean workspace.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/contrib/ppa/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrm -fr hurl_\"${hurl_version}\"*\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text\nDESCRIPTION: The complete Apache License Version 2.0 text that defines the legal terms and conditions for using, modifying, and distributing the Hurl project. It covers copyright and patent grants, redistribution requirements, contribution guidelines, and liability limitations.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_247\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n   Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n   stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n   that You distribute, all copyright, patent, trademark, and\n   attribution notices from the Source form of the Work,\n   excluding those notices that do not pertain to any part of\n   the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n   distribution, then any Derivative Works that You distribute must\n   include a readable copy of the attribution notices contained\n   within such NOTICE file, excluding those notices that do not\n   pertain to any part of the Derivative Works, in at least one\n   of the following places: within a NOTICE text file distributed\n   as part of the Derivative Works; within the Source form or\n   documentation, if provided along with the Derivative Works; or,\n   within a display generated by the Derivative Works, if and\n   wherever such third-party notices normally appear. The contents\n   of the NOTICE file are for informational purposes only and\n   do not modify the License. You may add Your own attribution\n   notices within Derivative Works that You distribute, alongside\n   or as an addendum to the NOTICE text from the Work, provided\n   that such additional attribution notices cannot be construed\n   as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n```\n\n----------------------------------------\n\nTITLE: Defining expr Hurl Grammar\nDESCRIPTION: Defines the syntax for an expression within a Hurl template. It specifies that an expression starts with a `#variable-name` followed by zero or more optional filter applications (`(sp filter)*`), where `sp` represents spacing and `filter` is another grammar rule. This rule is used within the `#template` rule.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-5.0.1.md#_snippet_252\n\nLANGUAGE: Hurl Grammar\nCODE:\n```\nvariable-name (sp filter)*\n```\n\n----------------------------------------\n\nTITLE: Running all Generation Commands - Shell\nDESCRIPTION: This shell script provides a convenient way to execute all the previously described scripts.  It likely chains together all of the actions of formatting, generating Rust source, and generating man pages, ensuring that all the build processes associated with option files are completed in sequence. The execution script is located at `bin/spec/options/generate_all.py`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/spec/options/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/spec/options/generate_all.py\n```\n\n----------------------------------------\n\nTITLE: Defining Rule for Value String Text in Hurl Grammar\nDESCRIPTION: Defines the `value-string-text` rule as one or more characters that are not '#', a newline ('\\n'), or ']'. This rule forms the unescaped textual part of `value-string-content`.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/docs/standalone/hurl-6.1.0.md#_snippet_211\n\nLANGUAGE: Grammar Definition\nCODE:\n```\n<span class=\"grammar-regex\">~[#\\n\\]]+</span>\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies for Hurl Project\nDESCRIPTION: A requirements file listing the specific versions of Python packages needed for the Hurl project, including BeautifulSoup for HTML parsing, Flask for web applications, lxml for XML/HTML processing, mypy for static type checking, requests for HTTP operations, and ruff for Python linting.\nSOURCE: https://github.com/orange-opensource/hurl/blob/master/bin/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbeautifulsoup4==4.12.3\nFlask==3.0.3\nlxml==5.2.2\nmypy==1.10.0\nrequests==2.32.3\nruff==0.7.3\n```"
  }
]