[
  {
    "owner": "embarcadero",
    "repo": "otapi-docs",
    "content": "TITLE: IOTAPackageServices210 Delphi Interface Definition\nDESCRIPTION: The `IOTAPackageServices210` Delphi interface extends `IOTAPackageServices140` by adding functionalities to install, uninstall, and retrieve detailed information about packages. It includes methods for installing a package (`InstallPackage`), uninstalling a package (`UninstallPackage`), and retrieving an `IOTAPackageInfo` interface for a given package index (`GetPackage`). It provides the ability to manage packages within the IDE programmatically. This interface was introduced in RAD Studio XE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_198\n\nLANGUAGE: Delphi\nCODE:\n```\nIOTAPackageServices210 = **interface**(IOTAPackageServices140)\n  ['{2C96711A-267A-4024-9C54-B11FCC596A6F}']\n  **function** InstallPackage(**const** PackageName: **string**): Boolean;\n  **function** UninstallPackage(**const** PackageName: **string**): Boolean;\n  **function** GetPackage(**Index**: Integer): IOTAPackageInfo;\n  **property Package**\\[**Index**: Integer\\]: IOTAPackageInfo **read** GetPackage;\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Adding Version Control Notifier (Delphi)\nDESCRIPTION: This snippet demonstrates how to create an instance of the version control notifier and register it with the IDE using the IOTAVersionControlServices.AddNotifier method. The returned integer is stored for later removal of the notifier.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_219\n\nLANGUAGE: Delphi\nCODE:\n```\nFVersionControlNotifier := (BorlandIDEServices As\nIOTAVersionControlServices).AddNotifier(\nTDGHIDENotificationsVersionControlNotifier.Create('IOTAVersionControlNotifier',\ndinVersionControlNotifier));\n```\n\n----------------------------------------\n\nTITLE: Gemini API Response Payload\nDESCRIPTION: Provides an example of the JSON response received from the Gemini API. The response includes candidate generated contents, usage metadata, and model version. The 'candidates' array contains the AI-generated text, while 'usageMetadata' offers token count information. 'modelVersion' indicates which Gemini model was used.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/GeminiAI Specs.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"candidates\": [\n    {\n      \"content\": {\n        \"parts\": [\n          {\n            \"text\": \"Hi! How can I help you today?\\n\"\n          }\n        ],\n        \"role\": \"model\"\n      },\n      \"finishReason\": \"STOP\",\n      \"avgLogprobs\": -0.23888545036315917\n    }\n  ],\n  \"usageMetadata\": {\n    \"promptTokenCount\": 2,\n    \"candidatesTokenCount\": 10,\n    \"totalTokenCount\": 12,\n    \"promptTokensDetails\": [\n      {\n        \"modality\": \"TEXT\",\n        \"tokenCount\": 2\n      }\n    ],\n    \"candidatesTokensDetails\": [\n      {\n        \"modality\": \"TEXT\",\n        \"tokenCount\": 10\n      }\n    ]\n  },\n  \"modelVersion\": \"gemini-2.0-flash\"\n}\n```\n\n----------------------------------------\n\nTITLE: Gemini API Request Payload\nDESCRIPTION: Illustrates the JSON structure for sending a request to the Gemini API.  The request contains a 'contents' array, within each content object, a 'parts' array is nested, containing a 'text' key that holds the user prompt.  The example demonstrates sending a simple text-based prompt.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/GeminiAI Specs.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Explain how this API works\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debugger Notifier - Delphi OTA\nDESCRIPTION: Adds a debugger notifier to the IDE using the IOTADebuggerServices.AddNotifier method.  It passes an instance of the notifier implementation and stores the returned integer for later removal. FDebuggerNotifier stores the returned integer.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_243\n\nLANGUAGE: Delphi\nCODE:\n```\nFDebuggerNotifier := (BorlandIDEServices As\nIOTADebuggerServices).AddNotifier(\n\tTDGHNotificationsDebuggerNotifier.Create('IOTADebufferNotifier',\n\tdinDebuggerNotifier));\n```\n\n----------------------------------------\n\nTITLE: Iterate Packages and Components Delphi\nDESCRIPTION: This code iterates through the loaded packages using PackageCount and PackageNames from the IOTAPAckageServices interface. It creates nodes in a tree view for each package and its components. A progress form is used to display the iteration's progress.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_199\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TfrmDGHPackageViewer.IteratePackages;\n\n**Var**\n\nPS: IOTAPAckageServices;\n\niPackage: Integer;\n\nP, N: TTreeNode;\n\niComponent: Integer;\n\nsl: TStringList;\n\nfrm : TfrmDGHPackageViewerProgress;\n\n**Begin**\n\ntvPackages.Items.BeginUpdate;\n\n**Try**\n\nPS := (BorlandIDEServices **As** IOTAPAckageServices);\n\nfrm := TfrmDGHPackageViewerProgress.Create(Application.MainForm);\n\n**Try**\n\nfrm.ShowProgress(PS.PackageCount);\n\n**For** iPackage := 0 **To** PS.PackageCount - 1 **Do**\n\n**Begin**\n\nP := tvPackages.Items.AddChild(**Nil**, PS.PackageNames[iPackage]);\n\n**if** PS.ComponentCount[iPackage] > 0 **then**\n\n**Begin**\n\nN := tvPackages.Items.AddChild(P, 'Components');\n\n**for** iComponent := 0 **to** PS.ComponentCount[iPackage] - 1 **do**\n\ntvPackages.Items.AddChild(N, Ps.ComponentNames[iPackage, iComponent]);\n\n**End**;\n\n...\n\nfrm.UpdateProgress(Succ(iPackage));\n\n**End**;\n\nfrm.HideProgress;\n\n**Finally**\n\nfrm.Free;\n\n**End**;\n\n**Finally**\n\ntvPackages.Items.EndUpdate;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: IOTAPackageInfo Delphi Interface Definition\nDESCRIPTION: The `IOTAPackageInfo` interface in Delphi provides access to detailed information about a specific package, including its file name, name, runtime/designtime status, whether it is an IDE package, its loaded state, description, producer, consumer, and symbol file name. It also defines procedures for retrieving lists of contained units, required packages, implicitly loaded packages, and packages that require it. This interface enables inspection of various package attributes and dependencies. It was introduced in RAD Studio XE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_197\n\nLANGUAGE: Delphi\nCODE:\n```\nIOTAPackageInfo = **interface**(IUnknown)\n  ['{F41DB233-500B-4B0D-93A0-9072E10EE069}']\n  **function** GetDescription: **string**;\n  **function** GetFileName: **string**;\n  **function** GetName: **string**;\n  **function** GetSymbolFileName: **string**;\n  **procedure** GetContainsList(List: TStrings);\n  **procedure** GetRequiresList(List: TStrings);\n  **procedure** GetImplicitList(List: TStrings);\n  **procedure** GetRequiredByList(List: TStrings);\n  **function** GetRuntimeOnly: Boolean;\n  **function** GetDesigntimeOnly: Boolean;\n  **function** GetIDEPackage: Boolean;\n  **function** GetProducer: TOTAPackageProducer;\n  **function** GetConsumer: TOTAPackageConsumer;\n  **function** GetLoaded: Boolean;\n  **procedure** SetLoaded(Value: Boolean);\n  **property** FileName: **string read** GetFileName;\n  **property Name**: **string read** GetName;\n  **property** RuntimeOnly: Boolean **read** GetRuntimeOnly;\n  **property** DesigntimeOnly: Boolean **read** GetDesigntimeOnly;\n  **property** IDEPackage: Boolean **read** GetIDEPackage;\n  **property** Loaded: Boolean **read** GetLoaded **write** SetLoaded;\n  **property** Description: **string read** GetDescription;\n  **property** Producer: TOTAPackageProducer **read** GetProducer;\n  **property** Consumer: TOTAPackageConsumer **read** GetConsumer;\n  **property** SymbolFileName: **string read** GetSymbolFileName;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Wizard Class Definition Delphi\nDESCRIPTION: Defines the wizard class inheriting from TInterfaceObject and implementing IOTAWizard interface. This is the base structure for creating IDE wizards.  Needs ToolsAPI in the uses clause.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_0\n\nLANGUAGE: Delphi\nCODE:\n```\n**Unit** BlogOTAExampleWizard;\n\n**Interface**\n\n**Uses**\n\nToolsAPI;\n\n**Type**\n\nTBlogOTAExampleWizard = **Class**(TInterfaceObject, IOTAWizard)\n\n**End**;\n\n**End**.\n```\n\n----------------------------------------\n\nTITLE: Adding IOTAMessageNotifier Delphi\nDESCRIPTION: Adds an instance of a custom message notifier to the IDE using the IOTAMessageServices.AddNotifier method. It stores the returned integer to allow for later removal of the notifier. The notifier provides information on IDE messages.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_227\n\nLANGUAGE: Delphi\nCODE:\n```\nFMessageNotfier := (BorlandIDEServices As\nIOTAMessageServices).AddNotifier(\n\nTDGHIDENotificationsMessageNotifier.Create('IOTAMessageNotifier',\ndinMessageNotifier));\n```\n\n----------------------------------------\n\nTITLE: Version Control Notifier Definition (Delphi)\nDESCRIPTION: Defines the structure of a version control notifier, inheriting from TDGHNotifierObject and implementing IOTAVersionControlNotifier and IOTAVersionControlNotifier150 (conditionally compiled based on the RAD Studio version). It includes methods for adding new projects, getting the display name, checking file management, and handling project manager menu interactions.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_218\n\nLANGUAGE: Delphi\nCODE:\n```\nType\nTDGHIDENotificationsVersionControlNotifier = Class(TDGHNotifierObject,\nIOTAVersionControlNotifier {$IFDEF DXE00}, IOTAVersionControlNotifier150\n{$ENDIF})\nStrict Private\nStrict Protected\nPublic\n// IOTAVersionControlNotifier\nFunction AddNewProject(Const Project: IOTAProject): Boolean;\nFunction GetDisplayName: String;\nFunction IsFileManaged(Const Project: IOTAProject; Const IdentList:\nTStrings)\n: Boolean;\nProcedure ProjectManagerMenu(Const Project: IOTAProject; Const\nIdentList: TStrings;\nConst ProjectManagerMenuList: IInterfaceList; IsMultiSelect: Boolean);\n{$IFDEF DXE00}\n// IOTAVersionControlNotifier150\nFunction CheckoutProject(Var ProjectName: String): Boolean;\nFunction CheckoutProjectWithConnection(Var ProjectName: String;\nConst Connection: String): Boolean;\nFunction GetName: String;\n{$ENDIF}\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Querying IOTADebuggerServices Interface in Delphi\nDESCRIPTION: This code snippet demonstrates how to query the IOTADebuggerServices interface from BorlandIDEServices using the Supports function. It checks if the interface is supported and, if so, assigns it to the LDebuggerServices variable, allowing further interaction with debugger services.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/BorlandIDEServices.md#_snippet_0\n\nLANGUAGE: Delphi\nCODE:\n```\nvar\n  LDebuggerServices: IOTADebuggerServices;\n\nif Supports(BorlandIDEServices, IOTADebuggerServices, LDebuggerServices) then\n  begin\n    // do something with LDebuggerServices here...\n  end;\n```\n\n----------------------------------------\n\nTITLE: Registering a Package Wizard in Delphi\nDESCRIPTION: This code snippet demonstrates how to register a package wizard using the RegisterPackageWizard method within the Register procedure of a Delphi package. The wizard's lifetime is managed by the IDE. The TMyTestWizard.Create is a constructor that creates an instance of the custom wizard class.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_194\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure Register**;\n\n**Begin**\n\nRegisterPackageWizard(TMyTestWizard.Create);\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Saving Modified Files in Delphi IDE\nDESCRIPTION: This Delphi code snippet iterates through the edit buffers in the IDE using `IOTAEditBufferIterator`. For each buffer, it checks if it has been modified and, if so, saves the file.  `BorlandIDEServices` must be available and cast to `IOTAEditorServices`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_14\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TBlogOTAExampleWizard.SaveModifiedFiles;\n\n**Var**\n\nIterator : IOTAEditBufferIterator;\n\ni : Integer;\n\n**begin**\n\n**If** (BorlandIDEServices **As**\nIOTAEditorServices).GetEditBufferIterator(Iterator) **Then**\n\n**Begin**\n\n**For** i := 0 **To** Iterator.Count - 1 **Do**\n\n**If** Iterator.EditBuffers[i].IsModified **Then**\n\nIterator.EditBuffers[i].Module.Save(False, **Not** FPrompt);\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu Item in Delphi IDE\nDESCRIPTION: This function creates a new menu item within the Delphi IDE's main menu, handling image addition, action creation, and menu placement. It requires the `INTAServices` interface to interact with the IDE and uses parameters to define the menu's name, caption, parent menu, event handlers, and placement. The function also supports creating menu separators by providing an empty string for the caption.  Requires `AddImageToIDE` function to add image resources.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_121\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** CreateMenuItem(strName, strCaption, strParentMenu : **String**;\n\nClickProc, UpdateProc : TNotifyEvent; boolBefore, boolChildMenu : Boolean;\n\nstrShortCut : **String**) : TMenuItem;\n\n**Var**\n\nNTAS : INTAServices;\n\nCA : TAction;\n\n*//{$IFNDEF D2005}*\n\nmiMenuItem : TMenuItem;\n\n*//{$ENDIF}*\n\niImageIndex : Integer;\n\n**begin**\n\nNTAS := (BorlandIDEServices **As** INTAServices);\n\n*// Add Image to IDE*\n\niImageIndex := AddImageToIDE(strName);\n\n*// Create the IDE action (cached for removal later)*\n\nCA := **Nil**;\n\nResult := TMenuItem.Create(NTAS.MainMenu);\n\n**If** Assigned(ClickProc) **Then**\n\n**Begin**\n\nCA := TAction.Create(NTAS.ActionList);\n\nCA.ActionList := NTAS.ActionList;\n\nCA.**Name** := strName + 'Action';\n\nCA.Caption := strCaption;\n\nCA.OnExecute := ClickProc;\n\nCA.OnUpdate := UpdateProc;\n\nCA.ShortCut := TextToShortCut(strShortCut);\n\nCA.Tag := TextToShortCut(strShortCut);\n\nCA.ImageIndex := iImageIndex;\n\nCA.Category := 'OTATemplateMenus';\n\nFOTAActions.Add(CA);\n\n**End Else**\n\n**If** strCaption &lt;&gt; '' **Then**\n\n**Begin**\n\nResult.Caption := strCaption;\n\nResult.ShortCut := TextToShortCut(strShortCut);\n\nResult.ImageIndex := iImageIndex;\n\nEnd Else\n\nResult.Caption := '-';\n\n*// Create menu (removed through parent menu)*\n\nResult.Action := CA;\n\nResult.**Name** := strName + 'Menu';\n\n*// Create Action and Menu.*\n\n*//{$IFDEF D2005}*\n\n*// This is the new way to do it BUT doesnt create icons for the menu.*\n\n*//NTAS.AddActionMenu(strParentMenu + 'Menu', CA, Result, boolBefore, boolChildMenu);*\n\n*//{$ELSE}*\n\nmiMenuItem := FindMenuItem(strParentMenu + 'Menu');\n\n**If** miMenuItem &lt;&gt; **Nil Then**\n\n**Begin**\n\n**If Not** boolChildMenu **Then**\n\n**Begin**\n\n**If** boolBefore **Then**\n\nmiMenuItem.Parent.Insert(miMenuItem.MenuIndex, Result)\n\n**Else**\n\nmiMenuItem.Parent.Insert(miMenuItem.MenuIndex + 1, Result);\n\n**End Else**\n\nmiMenuItem.Add(Result);\n\n**End**;\n\n*//{$ENDIF}*\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Gemini API Endpoint URL\nDESCRIPTION: Defines the URL structure for accessing the Gemini API. It includes placeholders for the model name and requires an API key for authentication. The API key must be appended to the URL as a query parameter.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/GeminiAI Specs.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://generativelanguage.googleapis.com/v1beta/models/<modelname>:<method>?key=APIKey\n```\n\n----------------------------------------\n\nTITLE: Defining IOTANotifier Interface in Delphi\nDESCRIPTION: This code defines the `IOTANotifier` interface, which provides methods for handling IDE events such as saving, destroying, and modifying objects.  The interface includes `AfterSave`, `BeforeSave`, `Destroyed`, and `Modified` procedures.  Classes that implement this interface can receive notifications about these events within the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_208\n\nLANGUAGE: Delphi\nCODE:\n```\nType\n\nIOTANotifier = interface(IUnknown)\n\n['{F17A7BCF-E07D-11D1-AB0B-00C04FB16FB3}']\n\nprocedure AfterSave;\n\nprocedure BeforeSave;\n\nprocedure Destroyed;\n\nprocedure Modified;\n\nend;\n```\n\n----------------------------------------\n\nTITLE: Defining TDGHNotificationsIDENotifier Class in Delphi\nDESCRIPTION: This code defines the `TDGHNotificationsIDENotifier` class, which implements the `IOTAIDENotifier`, `IOTAIDENotifier50`, and `IOTAIDENotifier80` interfaces.  It inherits from `TDGHNotifierObject` and provides methods for handling file notifications and compilation events. This allows the notifier to respond to IDE-level events like file operations and project builds.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_209\n\nLANGUAGE: Delphi\nCODE:\n```\nType\n\nTDGHNotificationsIDENotifier = Class(TDGHNotifierObject,\nIOTAIDENotifier,\n\nIOTAIDENotifier50, IOTAIDENotifier80)\n\nStrict Private\n\nStrict Protected\n\nPublic\n\n// IOTAIDENotifier\n\nProcedure FileNotification(NotifyCode: TOTAFileNotification;\n\nConst FileName: String; Var Cancel: Boolean);\n\nProcedure BeforeCompile(Const Project: IOTAProject; Var Cancel:\nBoolean); Overload;\n\nProcedure AfterCompile(Succeeded: Boolean); Overload;\n\n// IOTAIDENotifier50\n\nProcedure BeforeCompile(Const Project: IOTAProject; IsCodeInsight:\nBoolean;\n\nVar Cancel: Boolean); Overload;\n\nProcedure AfterCompile(Succeeded: Boolean; IsCodeInsight: Boolean);\nOverload;\n\n// IOTAIDENotifier80\n\nProcedure AfterCompile(Const Project: IOTAProject; Succeeded:\n\nBoolean; IsCodeInsight: Boolean); Overload;\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Get Editor Code as String Delphi\nDESCRIPTION: This function retrieves the code from a given source editor as a string. It creates a reader for the editor's content and reads the text in chunks until the entire content is read. It depends on the IOTAEditReader interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_35\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction EditorAsString(SourceEditor : IOTASourceEditor) : String;\nVar\n  Reader : IOTAEditReader;\n  iRead : Integer;\n  iPosition : Integer;\n  strBuffer : AnsiString;\nBegin\n  Result := '';\n  Reader := SourceEditor.CreateReader;\n  Try\n    iPosition := 0;\n    Repeat\n      SetLength(strBuffer, iBufferSize);\n      iRead := Reader.GetText(iPosition, PAnsiChar(strBuffer), iBufferSize);\n      SetLength(strBuffer, iRead);\n      Result := Result + String(strBuffer);\n      Inc(iPosition, iRead);\n    Until iRead < iBufferSize;\n  Finally\n    Reader := Nil;\n  End;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Before Compile Procedure Delphi (IOTAIDENotifier50)\nDESCRIPTION: This procedure `BeforeCompile` in `IOTAIDENotifier50` is similar to the one in `IOTAIDENotifier`, but it includes an `IsCodeInsight` parameter. This parameter indicates whether the compiler was invoked due to a CodeInsight compile. The `Project` parameter is an IOTAProject interface, and the `Cancel` parameter can be set to True to cancel the compilation process, or left as False to allow the compilation to proceed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_215\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure BeforeCompile(const Project: IOTAProject; IsCodeInsight: Boolean; var Cancel: Boolean); overload;\n```\n\n----------------------------------------\n\nTITLE: Select Method and Insert Comment Block Pascal\nDESCRIPTION: This snippet demonstrates how to select a method from a list, insert a comment block above it, and move the cursor to the description area within the comment. It uses `IOTASourceEditor` to interact with the editor, `TStringList` for method selection, and a custom `InsertComment` function to handle the insertion.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_76\n\nLANGUAGE: Pascal\nCODE:\n```\n**Procedure** SelectMethod;\n**Var**\nslItems: TStringList;\nSE: IOTASourceEditor;\nCP: TOTAEditPos;\niIndex: Integer;\n**Begin**\nslItems := TStringList.Create;\n**Try**\nGetMethods(slItems);\niIndex := TfrmItemSelectionForm.Execute(slItems, 'Select Method');\n**If** iIndex &gt; -1 **Then**\n**Begin**\nCP := InsertComment(slItems, iIndex);\nSE := ActiveSourceEditor;\n**If** SE &lt;&gt; **Nil Then**\n**Begin**\nSE.EditViews[0].CursorPos := CP;\nSE.EditViews[0].Center(CP.Line, CP.Col);\n**End**;\n**End**;\n**Finally**\nslItems.Free;\n**End**;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Before Compile Procedure Delphi\nDESCRIPTION: This procedure `BeforeCompile` is called immediately before the compiler is invoked. The `Project` parameter is an IOTAProject interface, and the `Cancel` parameter can be set to True to cancel the compilation process, or left as False to allow the compilation to proceed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_213\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure BeforeCompile(const Project: IOTAProject; var Cancel: Boolean); overload;\n```\n\n----------------------------------------\n\nTITLE: Outputting a Title Message to a Group in Delphi\nDESCRIPTION: This procedure outputs a title message to a specific message group (tab) in the IDE's message window. It retrieves the message group by name and then uses the `AddTitleMessage` method to add the message to that group. It requires the IOTAMessageServices and IOTAMessageGroup interfaces.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_29\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** OutputMessage(strText : **String**; strGroupName : **String**);\n**Var**\nGroup : IOTAMessageGroup\n**Begin**\n**With** (BorlandIDEServices **As** IOTAMessageServices) **Do**\n**Begin**\nGroup := GetGroup(strGroupName);\nAddTitleMessage(strText, Group);\n**End**;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: AddMsg Function (Delphi)\nDESCRIPTION: This function adds a custom message to the Delphi IDE's message window. It takes the message text (strText), grouping and autoscroll boolean flags (boolGroup, boolAutoScroll), font properties (FontName, ForeColour, Style, BackColour), and a parent pointer (Parent) for nesting. It creates a TDGHCustomMessage object, assigns it to the ITHelper message group (if specified), and adds it to the IDE using the appropriate AddCustomMessage method, handling differences between Delphi versions (Delphi 2005+ supports nested messages).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_45\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** AddMsg(strText : **String**; boolGroup, boolAutoScroll :\nBoolean;\nFontName : **String**; ForeColour : TColor; Style : TFontStyles;\nBackColour : TColor = clWindow; Parent : Pointer = **Nil**) : Pointer;\n\n**Var**\nM : TDGHCustomMessage;\nG : IOTAMessageGroup;\n\n**begin**\n**With** (BorlandIDEServices **As** IOTAMessageServices) **Do**\n**Begin**\nM := TDGHCustomMessage.Create(strText, FontName, ForeColour, Style,\nBackColour);\nResult := M;\n**If** Parent = **Nil Then**\n**Begin**\nG := **Nil**;\n**If** boolGroup **Then**\nG := AddMessageGroup(strITHelperGroup)\n**Else**\nG := GetMessageGroup(0);\n**{$IFDEF D2005}**\n**If** boolAutoScroll <> G.AutoScroll **Then**\nG.AutoScroll := boolAutoScroll;\nM.MessagePntr := AddCustomMessagePtr(M **As** IOTACustomMessage, G);\n**{$ELSE}**\nAddCustomMessage(M **As** IOTACustomMessage, G);\n**{$ENDIF}**\n**End Else**\n**{$IFDEF D2005}**\nAddCustomMessage(M **As** IOTACustomMessage, Parent);\n**{$ELSE}**\nAddCustomMessage(M **As** IOTACustomMessage);\n**{$ENDIF}**\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Get Active Source Editor Reference Delphi\nDESCRIPTION: This function retrieves a reference to the active IDE source editor interface. It first checks if BorlandIDEServices is not nil, then obtains the current module and its source editor. Returns nil if there is no active editor.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_33\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction ActiveSourceEditor : IOTASourceEditor;\nVar\n  CM : IOTAModule;\nBegin\n  Result := Nil;\n  If BorlandIDEServices = Nil Then\n    Exit;\n  CM := (BorlandIDEServices as IOTAModuleServices).CurrentModule;\n  Result := SourceEditor(CM);\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Notifier (Delphi)\nDESCRIPTION: This snippet shows how to create and register a compile notifier using IOTACompileServices.AddNotifier. The returned integer is stored for later removal.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_222\n\nLANGUAGE: Delphi\nCODE:\n```\nFCompileNotifier := (BorlandIDEServices As\nIOTACompileServices).AddNotifier(\nTDGHIDENotificationsCompileNotifier.Create('IOTACompileNotifier',\ndinCompileNotifier));\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeSave Method in Delphi\nDESCRIPTION: This method is called immediately before an item is saved in the Delphi IDE's Project Manager. Implemented as part of the IOTANotifier interface, it allows execution of actions prior to the saving process. Similar to AfterSave, this method is not invoked for IOTAWizards or menus.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_155\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TProjectManagerMenu.BeforeSave;\n\n**Begin**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Generating Finalization Code for Wizards in Delphi\nDESCRIPTION: This function, GetFinaliseWizardCode, generates the code required to remove the selected wizards from the IDE during the finalization phase of the module. It checks for various interface types (Keyboard Binding, IDE Notifier, Compiler Notifier, Editor Notifier, Repository Wizard) and generates code to remove them if they are present in the FProjectWizardInfo.FAdditionalModules set.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_115\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetFinaliseWizardCode: **String**;\n\n**begin**\n\n**If** amKeyboardBindingInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Remove Keyboard Binding Interface'#13#10 +\n\n' If iKeyBindingIndex &gt; iWizardFailState Then'#13#10 +\n\n' (BorlandIDEServices As IOTAKeyboardServices).RemoveKeyboardBinding(iKeyBindingIndex);'#13#10;\n\n**If** amIDENotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Remove IDE Notifier Interface'#13#10 +\n\n' If iIDENotfierIndex &gt; iWizardFailState Then'#13#10 +\n\n' (BorlandIDEServices As IOTAServices).RemoveNotifier(iIDENotfierIndex);'#13#10;\n\n**If** amCompilerNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D2010}'#13#10 +\n\n' // Remove Compiler Notifier Interface'#13#10 +\n\n' If iCompilerIndex &lt;&gt; iWizardFailState Then'#13#10 +\n\n' (BorlandIDEServices As IOTACompileServices).RemoveNotifier(iCompilerIndex);'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amEditorNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D2005}'#13#10 +\n\n' // Remove Editor Notifier Interface'#13#10 +\n\n' If iEditorIndex &lt;&gt; iWizardFailState Then'#13#10 +\n\n' (BorlandIDEServices As IOTAEditorServices).RemoveNotifier(iEditorIndex);'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amRepositoryWizardInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Remove Repository Wizard Interface'#13#10 +\n\n' If iRepositoryWizardIndex &lt;&gt; iWizardFailState Then'#13#10 +\n\n' (BorlandIDEServices As IOTAWizardServices).RemoveWizard(iRepositoryWizardIndex);'#13#10;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Source Editor (Delphi)\nDESCRIPTION: This snippet defines the ActiveSourceEditor function, which retrieves the current source editor interface (IOTASourceEditor) from the IDE using the IOTAModuleServices interface. It returns Nil if no source editor is currently active.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_72\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction ActiveSourceEditor : IOTASourceEditor;\nVar\nCM : IOTAModule;\nBegin\nResult := Nil;\nIf BorlandIDEServices = Nil Then\nExit;\nCM := (BorlandIDEServices as IOTAModuleServices).CurrentModule;\nResult := SourceEditor(CM);\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Implementing OptionsClick Event Handler in Delphi\nDESCRIPTION: This method is an event handler for menu item clicks, determining the action based on the menu's name. It retrieves the project context using BorlandIDEServices and IOTAProjectManager to access project-specific information, allowing the ConfigureOptions method of the wizard to be called with the appropriate project and setting.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_159\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TProjectManagerMenu.OptionsClick(Sender: TObject);\n\n**Var**\n\nProject : IOTAProject;\n\nstrIdent: **String**;\n\n**Begin**\n\nProject := (BorlandIDEServices **As**\nIOTAProjectManager).GetCurrentSelection(strIdent);\n\n**If** Sender **Is** TMenuItem **Then**\n\n**If** (Sender **As** TMenuItem).**Name** = strProjectName **Then**\n\nFWizard.ConfigureOptions(Project, seProject)\n\n**Else If** (Sender **As** TMenuItem).**Name** = strBeforeName **Then**\n\nFWizard.ConfigureOptions(Project, seBefore)\n\n**Else If** (Sender **As** TMenuItem).**Name** = strAfterName **Then**\n\nFWizard.ConfigureOptions(Project, seAfter)\n\n**Else If** (Sender **As** TMenuItem).**Name** = strZIPName **Then**\n\nFWizard.ConfigureOptions(Project, seZIP);\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Source Editor from a Module (Delphi)\nDESCRIPTION: This snippet implements the SourceEditor function, which retrieves the IOTASourceEditor interface associated with a given module. It iterates through the module's files and uses QueryInterface to check for the IOTASourceEditor interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_73\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction SourceEditor(Module : IOTAModule) : IOTASourceEditor;\nVar\niFileCount : Integer;\ni : Integer;\nBegin\nResult := Nil;\nIf Module = Nil Then Exit;\nWith Module Do\nBegin\niFileCount := GetModuleFileCount;\nFor i := 0 To iFileCount - 1 Do\nIf GetModuleFileEditor(i).QueryInterface(IOTASourceEditor,\nResult) = S_OK Then\nBreak;\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Get Active Project Reference Delphi\nDESCRIPTION: This function returns a reference to the active project within the Project Manager. It first retrieves the project group and then gets the active project from it. If no active project is found, it returns nil.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_31\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction ActiveProject : IOTAProject;\nvar\n  G : IOTAProjectGroup;\nBegin\n  Result := Nil;\n  G := ProjectGroup;\n  If G <> Nil Then\n    Result := G.ActiveProject;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Add String List to TreeNode Delphi\nDESCRIPTION: This is a helper procedure that adds a string list of references to various sub-nodes to the properties in the tree view. It creates a child node for the string list name and then adds each string in the list as a child of that node.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_201\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF DXE00}**\n\n**Procedure** AddStringList(N : TTreeNode; sl : TStringList; strListName\n: **String**);\n\n**Var**\n\ni: Integer;\n\nM: TTreeNode;\n\n**Begin**\n\nM := tvPackages.Items.AddChild(N, strListName);\n\n**for** i := 0 **to** sl.Count - 1 **do**\n\ntvPackages.Items.AddChild(M, sl[i]);\n\n**End**;\n\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: Defining a Wizard Interface with IOTAIDENotifier Interfaces in Delphi\nDESCRIPTION: This code snippet demonstrates how to define a wizard interface in Delphi that implements various IOTAIDENotifier interfaces for handling IDE events. The interfaces included are IOTANotifier, IOTAIDENotifier, IOTAIDENotifier50, IOTAIDENotifier80, and IOTAWizard. Conditional compilation directives (IFDEF) are used to include specific interfaces based on the Delphi version.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_46\n\nLANGUAGE: Delphi\nCODE:\n```\nTTestingHelperWizard = **class**(TNotifierObject, IOTANotifier,\nIOTAIDENotifier,\n\nIOTAIDENotifier50 **{$IFDEF D2005}**, IOTAIDENotifier80 **{$ENDIF}**,\nIOTAWizard)\n\n**{$IFDEF D2005}** **Strict {$ENDIF}** **Private**\n**{$IFDEF D2005}** **Strict {$ENDIF}** **Protected**\n**Public**\n  **Constructor** Create;\n  **Destructor** Destroy; **Override**;\n  *// IOTAWizard methods*\n  **procedure** Execute;\n  **function** GetIDString: **string**;\n  **function** GetName: **string**;\n  **function** GetState: TWizardState;\n  *// IOTAIDENotifier methods*\n  **Procedure** FileNotification(NotifyCode : TOTAFileNotification;\n    **Const** FileName : **String**; **var** cancel : Boolean);\n  **procedure** BeforeCompile(**const** Project: IOTAProject; **var** Cancel: Boolean); **overload**;\n  **procedure** AfterCompile(Succeeded: Boolean); **overload**;\n  *// IOTAIDENotifier50 methods*\n  **procedure** BeforeCompile(**const** Project: IOTAProject; IsCodeInsight: Boolean;\n    **var** Cancel: Boolean); **Overload**;\n  **procedure** AfterCompile(Succeeded: Boolean; IsCodeInsight: Boolean); **overload**;\n  *// IOTAIDENotifier80 methods*\n  **{$IFDEF D2005}\n  **procedure** AfterCompile(**const** Project: IOTAProject; Succeeded:\n    Boolean; IsCodeInsight: Boolean); **Overload**;\n  **{$ENDIF}\n**Published**\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Generating Source Code with Macro Expansion in Delphi\nDESCRIPTION: This function, GetSource, generates the source code for a module by reading a template from a resource stream and expanding macros within the template. The template is selected based on the AdditionalModule parameter. Macros are expanded to include wizard name, ID, menu text, author, description, uses clauses, variable declarations, and initialization/finalization code.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_113\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetSource: **string**;\n\n**Const**\n\nWizardMenu : **Array**\\[False..True\\] **Of String** = ('', ', IOTAMenuWizard');\n\n**ResourceString**\n\nstrResourceMsg = 'The OTA Module Template ''%s'' was not found.';\n\n**Var**\n\nRes: TResourceStream;\n\n**{$IFDEF D2009}**\n\nstrTemp: AnsiString;\n\n**{$ENDIF}**\n\n**begin**\n\nRes := TResourceStream.Create(HInstance,\nstrProjectTemplate\\[FAdditionalModule\\].FResourceName,\n\nRT_RCDATA);\n\n**Try**\n\n**If** Res.Size = 0 **Then**\n\n**Raise** Exception.CreateFmt(strResourceMsg,\n\\[strProjectTemplate\\[FAdditionalModule\\].FResourceName\\]);\n\n**{$IFNDEF D2009}**\n\nSetLength(Result, Res.Size);\n\nRes.ReadBuffer(Result\\[1\\], Res.Size);\n\n**{$ELSE}**\n\nSetLength(strTemp, Res.Size);\n\nRes.ReadBuffer(strTemp\\[1\\], Res.Size);\n\nResult := **String**(strTemp);\n\n**{$ENDIF}**\n\n**Finally**\n\nRes.Free;\n\n**End**;\n\nResult := ExpandMacro(Result, '$MODULENAME$',\nChangeFileExt(strProjectTemplate\\[FAdditionalModule\\].FModuleName, ''));\n\nResult := ExpandMacro(Result, '$USESCLAUSE$', GetUsesClauseCode);\n\nResult := ExpandMacro(Result, '$VARIABLEDECL$', GetVariableDeclCode);\n\nResult := ExpandMacro(Result, '$INITIALISEWIZARD$',\nGetInitialiseWizardCode);\n\nResult := ExpandMacro(Result, '$FINALISEWIZARD$',\nGetFinaliseWizardCode);\n\nResult := ExpandMacro(Result, '$WIZARDNAME$',\nFProjectWizardInfo.FWizardName);\n\nResult := ExpandMacro(Result, '$WIZARDIDSTRING$',\nFProjectWizardInfo.FWizardIDString);\n\nResult := ExpandMacro(Result, '$WIZARDMENUTEXT$',\nFProjectWizardInfo.FWizardMenuText);\n\nResult := ExpandMacro(Result, '$AUTHOR$',\nFProjectWizardInfo.FWizardAuthor);\n\nResult := ExpandMacro(Result, '$WIZARDDESCRIPTION$',\nFProjectWizardInfo.FWizardDescription);\n\nResult := ExpandMacro(Result, '$WIZARDMENUREQUIRED$',\nWizardMenu\\[FProjectWizardInfo.FWizardMenu\\]);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Reading Editor Content as String (Delphi)\nDESCRIPTION: This snippet implements the EditorAsString function, which reads the entire content of a source editor into a string. It uses the IOTAEditReader interface to read the text in chunks, handling potential Unicode UTF8 or ANSI encoding issues.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_74\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction EditorAsString(SourceEditor : IOTASourceEditor) : String;\nConst\niBufferSize : Integer = 1024;\nVar\nReader : IOTAEditReader;\niRead : Integer;\niPosition : Integer;\nstrBuffer : AnsiString;\nBegin\nResult := '';\nReader := SourceEditor.CreateReader;\nTry\niPosition := 0;\nRepeat\nSetLength(strBuffer, iBufferSize);\niRead := Reader.GetText(iPosition, PAnsiChar(strBuffer), iBufferSize);\nSetLength(strBuffer, iRead);\nResult := Result + String(strBuffer);\nInc(iPosition, iRead);\nUntil iRead < iBufferSize;\nFinally\nReader := Nil;\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: DLL Wizard Initialization\nDESCRIPTION: The `InitWizard` function is used to initialize the wizard when loaded as a DLL. It takes `IBorlandIDEServices` and a `TWizardRegisterProc` as input. It calls the `RegisterProc` with the initialized wizard instance. The function returns a boolean value indicating successful initialization. This prevents code duplication between package and DLL loading methods.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_9\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction InitWizard(Const BorlandIDEServices : IBorlandIDEServices;\nRegisterProc : TWizardRegisterProc;\nVar Terminate : TWizardTerminateProc) : Boolean; StdCall;\nBegin\nResult := BorlandIDEServices <> Nil;\nRegisterProc(InitialiseWizard(BorlandIDEServices));\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Constructor for Dockable Form (Delphi)\nDESCRIPTION: This is the constructor for the dockable form. It sets the `DeskSection`, `AutoSave`, and `SaveStateNecessary` properties for persistence and creates and aligns the internal `FModuleExplorerFrame`. The `DeskSection` property determines the section name in the desktop file used for saving the form's state.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_138\n\nLANGUAGE: Delphi\nCODE:\n```\n**constructor** TfrmDockableModuleExplorer.Create(AOwner: TComponent);\n\n**begin**\n\n**inherited**;\n\nDeskSection := **Name**;\n\nAutoSave := True;\n\nSaveStateNecessary := True;\n\nFModuleExplorerFrame := TframeModuleExplorer.Create(Self);\n\nFModuleExplorerFrame.Parent := Self;\n\nFModuleExplorerFrame.Align := alClient;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: File Notification Procedure Delphi\nDESCRIPTION: This procedure `FileNotification` is called for various file operations within the IDE, such as opening, closing, and saving files or projects. The `NotifyCode` parameter specifies the type of file operation, `FileName` is the name of the file involved, and setting `Cancel` to `True` prevents the operation from succeeding.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_212\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure FileNotification(NotifyCode: TOTAFileNotification; const FileName: string; var Cancel: Boolean);\n```\n\n----------------------------------------\n\nTITLE: Adding a Key Binding for Method Selection (Delphi)\nDESCRIPTION: This snippet demonstrates how to add a new key binding to the IDE using IOTAKeyBindingServices, attaching it to the SelectMethodExecute handler. This allows users to trigger the method selection process with a specific keyboard shortcut.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_67\n\nLANGUAGE: Delphi\nCODE:\n```\nBindingServices.AddKeyBinding([TextToShortcut('Ctrl+Shift+Alt+F9')], SelectMethodExecute, Nil);\n```\n\n----------------------------------------\n\nTITLE: Accessing IOTAEditView via IOTASourceEditor\nDESCRIPTION: This code snippet shows how to access the IOTAEditView interface by querying the IOTAEditor interface to see if it implements IOTASourceEditor.  It requires accessing the current module and iterating through module file editors.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_48\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** Something;\n\n**Var**\n\nCM : IOTAModule;\n\ni : Integer;\n\nSourceEditor : IOTASourceEditor;\n\n**Begin**\n\nCM := (BorlandIDEServices **as** IOTAModuleServices).CurrentModule;\n\n**For** i := 0 **To** CM.ModuleFileCount - 1 **Do**\n\n**If** ModuleFileEditors\\[i\\].QueryInterface(IOTASourceEditor,\nSourceEditor) = S_OK **Then**\n\n**Begin**\n\nEditView := SourceEditor.EditViews\\[0\\];\n\nCP := EditView.CursorPos;\n\nOutputDebugString(PChar(Format('Line %d, Column %d', \\[CP.Line,\nCP.Col\\])));\n\nBreak;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Repository Wizard Delphi\nDESCRIPTION: This code snippet demonstrates how to initialize a project repository wizard within a Delphi IDE add-in. It utilizes the `IOTAWizardServices` interface to add a wizard and stores the returned index for later removal. The wizard is an instance of `TRepositoryWizardInterface`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_83\n\nLANGUAGE: Delphi\nCODE:\n```\niRepositoryWizardIndex := (BorlandIDEServices As\nIOTAWizardServices).AddWizard(\n\nTRepositoryWizardInterface.Create);\n```\n\n----------------------------------------\n\nTITLE: Hook Event Handlers Class Procedure (Delphi)\nDESCRIPTION: This class procedure hooks event handlers from other modules to events exposed by the module explorer frame. It assigns the `SelectionChangeProc`, `Focus`, and `ScopeChange` event handlers to the corresponding events of the `FModuleExplorerFrame`. This allows other modules to react to events within the module explorer.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_145\n\nLANGUAGE: Delphi\nCODE:\n```\n**class procedure** TfrmDockableModuleExplorer.HookEventHandlers(\n\nSelectionChangeProc: TSelectionChange; Focus, ScopeChange :\nTNotifyEvent);\n\n**begin**\n\n**If** Assigned(FormInstance) **Then**\n\n**Begin**\n\nFormInstance.FModuleExplorerFrame.OnSelectionChange :=\nSelectionChangeProc;\n\nFormInstance.FModuleExplorerFrame.OnFocus := Focus;\n\nFormInstance.FModuleExplorerFrame.OnRefresh := ScopeChange;\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Adding IOTAEditorNotifier Delphi\nDESCRIPTION: Adds an instance of a custom editor notifier to the IDE using the IOTAEditorServices.AddNotifier method. The returned integer is stored for later removal. This notifier allows receiving notifications about editor events.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_233\n\nLANGUAGE: Delphi\nCODE:\n```\nFEditorNotifier := (BorlandIDEServices As\nIOTAEditorServices).AddNotifier(\n\nTDGHNotificationsEditorNotifier.Create('INTAEditorServicesNotifier',\ndinEditorNotifier)\n\n);\n```\n\n----------------------------------------\n\nTITLE: Selecting and Navigating to a Method (Delphi)\nDESCRIPTION: This snippet outlines the SelectMethod procedure, which creates a string list of methods, displays a selection form, and navigates the editor's cursor to the selected method's position.  The method utilizes a custom form (TfrmItemSelectionForm) to allow the user to select a method.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_69\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure SelectMethod;\nVar\nslItems: TStringList;\nSE: IOTASourceEditor;\nCP: TOTAEditPos;\nrecItemPos : TItemPosition;\niIndex: Integer;\nBegin\nslItems := TStringList.Create;\nTry\nGetMethods(slItems);\niIndex := TfrmItemSelectionForm.Execute(slItems, 'Select Method');\nIf iIndex > -1 Then\nBegin\nSE := ActiveSourceEditor;\nIf SE <> Nil Then\nBegin\nrecItemPos.Data := slItems.Objects[iIndex];\nCP.Line := recItemPos.Line;\nCP.Col := 1;\nSE.EditViews[0].CursorPos := CP;\nSE.EditViews[0].Center(CP.Line, 1);\nEnd;\nEnd;\nFinally\nslItems.Free;\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Displaying Messages in Tabbed Message Window in Delphi\nDESCRIPTION: This procedure displays messages in a tabbed message window (message group) in later versions of the IDE. It requires the IOTAMessageServices interface and the IOTAMessageGroup interface. It retrieves or creates a message group by name and then displays the message window for that group using `ShowMessageView`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_24\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** ShowHelperMessages;\n**Var**\nG : IOTAMessageGroup;\n**Begin**\n**With** (BorlandIDEServices **As** IOTAMessageServices) **Do**\n**Begin**\nG := GetGroup('My Message');\nShowMessageView(G);\n**End**;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: After Compile Procedure Delphi (IOTAIDENotifier80)\nDESCRIPTION: This procedure `AfterCompile` in `IOTAIDENotifier80` is similar to the one in `IOTAIDENotifier` except that it provide a reference to the project being compiled. The `Succeeded` parameter indicates whether the compilation was successful and `IsCodeInsight` parameter indicates if the compiler was invoked due to a CodeInsight compile. `Project` is the project being compiled.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_217\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure AfterCompile(const Project: IOTAProject; Succeeded: Boolean; IsCodeInsight: Boolean); overload;\n```\n\n----------------------------------------\n\nTITLE: Creating IOTAIDENotifier Instance in Delphi\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `TDGHNotificationsIDENotifier` class and register it with the IDE using the `IOTAServices.AddNotifier` method. The returned integer reference (`FIDENotifier`) is used to remove the notifier later. This pattern ensures that the notifier is properly integrated into the IDE's notification system.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_210\n\nLANGUAGE: Delphi\nCODE:\n```\nFIDENotifier := (BorlandIDEServices As IOTAServices).AddNotifier(\n\nTDGHNotificationsIDENotifier.Create('IOTAIDENotifier', dinIDENotifier));\n```\n\n----------------------------------------\n\nTITLE: Initializing IDE Notifier Interface Delphi\nDESCRIPTION: This snippet initializes an IDE notifier interface using the `IOTAServices` interface (specifically, `AddNotifier`). It adds a notifier based on `TIDENotifierTemplate` and saves the index. This notifier allows the add-in to receive notifications from the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_88\n\nLANGUAGE: Delphi\nCODE:\n```\niIDENotfierIndex := (BorlandIDEServices As\nIOTAServices).AddNotifier(\n\tTIDENotifierTemplate.Create);\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Group in Delphi\nDESCRIPTION: This code snippet demonstrates how to create a new message group (tab) in the IDE's message window. It requires the IOTAMessageServices and IOTAMessageGroup interfaces. The `AddMessageGroup` method is used to create the group, which can then be used to direct messages to that specific tab.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_25\n\nLANGUAGE: Delphi\nCODE:\n```\n**Var**\nMyGroup : IOTAMessageGroup;\n**Begin**\n...\nMyGroup := AddMessageGroup('My Message Group');\n...\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Version Information from DLL/BPL in Delphi\nDESCRIPTION: This Delphi code defines a procedure `BuildNumber` to retrieve version information (major, minor, bugfix, and build) from the DLL/BPL file. It uses Windows API functions such as `GetModuleFileName`, `GetFileVersionInfoSize`, `GetFileVersionInfo`, and `VerQueryValue` to extract the version information and store it in the provided `TVersionInfo` record. The code also manages memory allocation and deallocation using `GetMem` and `FreeMem`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_66\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** BuildNumber(**Var** VersionInfo: TVersionInfo);\n**Var**\nVerInfoSize: DWORD;\nVerInfo: Pointer;\nVerValueSize: DWORD;\nVerValue: PVSFixedFileInfo;\nDummy: DWORD;\nstrBuffer: **Array** \\[0 .. MAX_PATH\\] **Of** Char;\n**Begin**\nGetModuleFileName(hInstance, strBuffer, MAX_PATH);\nVerInfoSize := GetFileVersionInfoSize(strBuffer, Dummy);\n**If** VerInfoSize &lt;&gt; 0 **Then**\n**Begin**\nGetMem(VerInfo, VerInfoSize);\n**Try**\nGetFileVersionInfo(strBuffer, 0, VerInfoSize, VerInfo);\nVerQueryValue(VerInfo, '\\\\', Pointer(VerValue), VerValueSize);\n**With** VerValue^ **Do**\n**Begin**\nVersionInfo.iMajor := dwFileVersionMS **Shr** 16;\nVersionInfo.iMinor := dwFileVersionMS **And** $FFFF;\nVersionInfo.iBugfix := dwFileVersionLS **Shr** 16;\nVersionInfo.iBuild := dwFileVersionLS **And** $FFFF;\n**End**;\n**Finally**\nFreeMem(VerInfo, VerInfoSize);\n**End**;\n**End**;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Initialise Wizard Function Pascal\nDESCRIPTION: This function initializes a wizard based on its type (package or DLL).  Critically, it only registers the main wizard via the BorlandIDEServices for package wizards. It takes a `TWizardType` enum as input and uses the `IOTAWizardServices` interface to add the wizard.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_79\n\nLANGUAGE: Pascal\nCODE:\n```\n**Function** InitialiseWizard(WizardType : TWizardType) :\nTWizardTemplate;\n**Var**\nSvcs : IOTAServices;\n**Begin**\n...\n**If** WizardType = wtPackageWizard **Then** *// Only register main\nwizard this way if* **PACKAGE**\niWizardIndex := (BorlandIDEServices **As**\nIOTAWizardServices).AddWizard(Result);\n...\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Wizard Method Declarations Delphi\nDESCRIPTION: Declares the methods required by the IOTAWizard interface. These methods need to be implemented to handle wizard functionality such as execution, ID, name, state, and save events.  Ctrl+Space can be used to generate these.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_1\n\nLANGUAGE: Delphi\nCODE:\n```\n**Unit** Unit1;\n\n**Interface**\n\n**Uses**\n\nToolsAPI;\n\n**Type**\n\nTBlogOTAExampleWizard = **Class**(TInterfaceObject, IOTAWizard)\n\n**Public**\n\n**Procedure** Execute;\n\n**Function** GetIDString : **String**;\n\n**Function** GetName : **String**;\n\n**Function** GetState : TWizardState;\n\n**Procedure** AfterSave;\n\n**Procedure** BeforeSave;\n\n**Procedure** Destroyed;\n\n**Procedure** Modified;\n\n**End**;\n\n**Implementation**\n\n**End**.\n```\n\n----------------------------------------\n\nTITLE: Adding Title Message to a Message Group in Delphi\nDESCRIPTION: This procedure adds a title message to a specific message group (tab) in the IDE's message window. It requires the IOTAMessageServices and IOTAMessageGroup interfaces. This is an overloaded method of AddTitleMessage that accepts the message and the message group as parameters.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_27\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** AddTitleMessage(**const** MessageStr: **string**;\n**const** MessageGroupIntf: IOTAMessageGroup); **overload**;\n```\n\n----------------------------------------\n\nTITLE: Insert Comment Function Pascal\nDESCRIPTION: This function inserts a comment block above a selected method in the code editor. It calculates the indentation, inserts the comment text using an `IOTAEditWriter`, and updates the cursor position within the comment. It relies on `ActiveSourceEditor` to get the current editor and `OutputText` for writing the comment content. The TOTAEditPos record represents the final cursor position.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_77\n\nLANGUAGE: Pascal\nCODE:\n```\n**Function** InsertComment(slItems : TStringList; iIndex : Integer) :\nTOTAEditPos;\n**Var**\nrecItemPos : TItemPosition;\nSE: IOTASourceEditor;\nWriter: IOTAEditWriter;\ni: Integer;\niIndent: Integer;\niPosition: Integer;\nCharPos : TOTACharPos;\n**Begin**\nrecItemPos.Data := slItems.Objects[iIndex];\nResult.Line := recItemPos.Line;\nResult.Col := 1;\nSE := ActiveSourceEditor;\n**If** SE &lt;&gt; **Nil Then**\n**Begin**\nWriter := SE.CreateUndoableWriter;\n**Try**\niIndent := 0;\n**For** i := 1 **To** Length(slItems[iIndex]) **Do**\n**If** slItems[iIndex][i] = #32 **Then**\nInc(iIndent)\n**Else**\nBreak;\nCharPos.Line := Result.Line;\nCharPos.CharIndex := Result.Col - 1;\niPosition := SE.EditViews[0].CharPosToPos(CharPos);\nWriter.CopyTo(iPosition);\nOutputText(Writer, iIndent, '(**'#13#10);\nOutputText(Writer, iIndent, #13#10);\nOutputText(Writer, iIndent, ' Description.'#13#10);\nOutputText(Writer, iIndent, #13#10);\nOutputText(Writer, iIndent, ' @precon '#13#10);\nOutputText(Writer, iIndent, ' @postcon '#13#10);\nOutputText(Writer, iIndent, #13#10);\nOutputText(Writer, iIndent, '*)'#13#10);\nInc(Result.Line, 2);\nInc(Result.Col, iIndent + 2);\n**Finally**\nWriter := **Nil**;\n**End**;\n**End**;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Adding Aboutbox Plugin Information in Delphi\nDESCRIPTION: This Delphi code demonstrates how to add a plugin to the About box using the `IOTAAboutBoxServices` interface. It loads a bitmap from the resource, formats the title and description strings, and then calls the `AddPluginInfo` method.  The code is conditionally compiled for Delphi 2005 and later. It utilizes `BorlandIDEServices` to get `IOTAAboutBoxServices`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_63\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** InitialiseWizard : TWizardTemplate;\n**Var**\nSvcs : IOTAServices;\n**Begin**\nSvcs := BorlandIDEServices **As** IOTAServices;\nToolsAPI.BorlandIDEServices := BorlandIDEServices;\nApplication.Handle := Svcs.GetParentHandle;\n**{$IFDEF D2005}**\n// Aboutbox plugin\nbmSplashScreen := LoadBitmap(hInstance, 'SplashScreenBitMap');\n**With** VersionInfo **Do**\niAboutPluginIndex := (BorlandIDEServices **As**\nIOTAAboutBoxServices).AddPluginInfo(\nFormat(strSplashScreenName, \\[iMajor, iMinor, Copy(strRevision, iBugFix\n+ 1, 1)\\]),\n'$WIZARDDESCRIPTION$.',\nbmSplashScreen,\nFalse,\nFormat(strSplashScreenBuild, \\[iMajor, iMinor, iBugfix, iBuild\\]),\nFormat('SKU Build %d.%d.%d.%d', \\[iMajor, iMinor, iBugfix, iBuild\\]));\n**{$ENDIF}**\n...\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Free Dockable Form Instance (Delphi)\nDESCRIPTION: This procedure frees the memory occupied by the dockable form instance. It first checks if the form variable is assigned, then unregisters the form from the IDE using `UnRegisterDockableForm`. Finally, it frees the memory associated with the form and sets the form variable to `Nil` using `FreeAndNil`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_136\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** FreeDockableForm(**var** FormVar :\nTfrmDockableModuleExplorer);\n\n**Begin**\n\n**If** Assigned(FormVar) **Then**\n\n**Begin**\n\nUnRegisterDockableForm(FormVar, FormVar.**Name**);\n\nFreeAndNil(FormVar);\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Process Created Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when a process is created during debugging, i.e., when the application is launched. The 'Process' parameter provides access to the newly created process.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_245\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure ProcessCreated(const Process: IOTAProcess)\n```\n\n----------------------------------------\n\nTITLE: Process Key Binding for Context Help in Delphi\nDESCRIPTION: This code snippet demonstrates the `ProcessKeyBinding` procedure, which is responsible for handling a key binding event to provide context-sensitive help in the IDE. It checks if the IDE has help for the word at the cursor. If not, it executes a search URL in a dockable browser.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_177\n\nLANGUAGE: Delphi/Pascal\nCODE:\n```\n**Procedure** TKeybindingTemplate.ProcessKeyBinding(**Const** Context:\nIOTAKeyContext;\n\nKeyCode: TShortcut; **Var** BindingResult: TKeyBindingResult);\n\n**Const**\n\nstrMsg =\n\n'Your search URLs are misconfigured. Ensure there is a Search URL and\nthat ' +\n\n'it is checked in the list in the configuration dialogue.';\n\n**Var**\n\nstrWordAtCursor : **String**;\n\nboolHandled: Boolean;\n\n**Begin**\n\nstrWordAtCursor := GetWordAtCursor;\n\n**If** strWordAtCursor &lt;&gt; '' **Then**\n\n**Begin**\n\nboolHandled :=\n\n(BorlandIDEServices **As**\nIOTAHelpServices).UnderstandsKeyword(strWordAtCursor);\n\n**If** boolHandled **Then**\n\nBindingResult := krUnhandled\n\n**Else**\n\n**Begin**\n\nBindingResult := krHandled;\n\n**If** (AppOptions.SearchURLIndex &lt;= AppOptions.SearchURLs.Count - 1)\n**And**\n\n(AppOptions.SearchURLIndex &gt;= 0) **Then**\n\nTfrmDockableBrowser.Execute(\n\nFormat(AppOptions.SearchURLs[AppOptions.SearchURLIndex], [strWordAtCursor]))\n\n**Else**\n\nMessageDlg(strMsg, mtError, [mbOK], 0);\n\n**End**;\n\n**End Else**\n\nBindingResult := krUnhandled;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Iterate and Create Project Modules - Delphi\nDESCRIPTION: This code snippet modifies the NewDefaultProjectModule procedure to iterate through different module types and create the modules that have been selected.  It uses the FProjectWizardInfo.FAdditionalModules set to determine which modules to create. It leverages the BorlandIDEServices to create the module via the IOTAModuleServices interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_119\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TProjectCreator.NewDefaultProjectModule(**const** Project:\nIOTAProject);\n\n**Var**\n\nM: TModuleCreator;\n\niModule: TAdditionalModule;\n\n**begin**\n\n**For** iModule := Low(TAdditionalModule) **To** High(TAdditionalModule)\n**Do**\n\n**If** iModule **In** FProjectWizardInfo.FAdditionalModules **Then**\n\n**Begin**\n\nM := TModuleCreator.Create(Project, FProjectWizardInfo, iModule);\n\n(BorlandIDEServices **As** IOTAModuleServices).CreateModule(M);\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Message to a Message Group in Delphi\nDESCRIPTION: This procedure adds a tool message to a specific message group (tab) in the IDE's message window, associating it with a file, line, and column. It requires the IOTAMessageServices and IOTAMessageGroup interfaces. This is an overloaded method of AddToolMessage that accepts the filename, message, prefix, line, column, parent, LineRef and message group as parameters.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_28\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** AddToolMessage(**const** FileName, MessageStr, PrefixStr: **string**;\nLineNumber, ColumnNumber: Integer; Parent: Pointer; **out** LineRef: Pointer;\n**const** MessageGroupIntf: IOTAMessageGroup); **overload**;\n```\n\n----------------------------------------\n\nTITLE: Editor View Activated Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is fired each time a tab is changed in the editor, providing access to the editor window (EditWindow) and the view of the file (EditView).  The EditView provides access to cursor positions and selected blocks, and through the Buffer property, the file's text.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_237\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure EditorViewActivated(const EditWindow: INTAEditWindow; const\nEditView: IOTAEditView)\n```\n\n----------------------------------------\n\nTITLE: Outputting a Tool Message in Delphi\nDESCRIPTION: This overloaded procedure outputs a tool message to the IDE's message window, associating it with a specific file, line number, and column number. It requires the IOTAMessageServices interface and takes the filename, message text, prefix, line number, and column number as inputs. Double-clicking the message in the IDE will navigate to the specified location.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_21\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** OutputMessage(strFileName, strText, strPrefix : **String**;\niLine, iCol : Integer);\n**Begin**\n(BorlandIDEServices **As** IOTAMessageServices).AddToolMessage(strFileName,\nstrText, strPrefix, iLine, iCol);\n**End**;\n```\n\n----------------------------------------\n\nTITLE: FrameCreated Implementation\nDESCRIPTION: This code snippet shows the implementation of the `FrameCreated` method of the `INTAAddInOptions` interface. It initializes the options frame after it has been created by the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_185\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TIDEHelpHelperIDEOptionsInterface.FrameCreated(AFrame:\nTCustomFrame);\n\n**Begin**\n\n**If** AFrame **Is** TfmIDEHelpHelperOptions **Then**\n\n**Begin**\n\nFFrame := AFrame **As** TfmIDEHelpHelperOptions;\n\nFFrame.InitialiseFrame(AppOptions.SearchURLs, AppOptions.PermanentURLs,\n\nAppOptions.SearchURLIndex);\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Adding IDE Insight Notifier (Delphi)\nDESCRIPTION: This snippet demonstrates how to create and add an IDE Insight notifier to the IDE using IOTAIDEInsightService.AddNotifier, storing the returned integer for later use.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_225\n\nLANGUAGE: Delphi\nCODE:\n```\nFIDEInsightNotifier := (BorlandIDEServices As\nIOTAIDEInsightService).AddNotifier(\nTDGHIDENotificationsIDEInsightNotifier.Create('IOTAIDEInsightNotifier',\ndinIDEInsightNotifier));\n```\n\n----------------------------------------\n\nTITLE: Before Program Launch Function Definition - Delphi OTA\nDESCRIPTION: Defines a function that is called before a debugger launches a project's process. The 'Project' parameter provides access to the project that is about to be launched. The function should return True to allow the program to be launched.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_252\n\nLANGUAGE: Delphi\nCODE:\n```\nfunction BeforeProgramLaunch(const Project: IOTAProject): Boolean\n```\n\n----------------------------------------\n\nTITLE: Adding IOTAProjectFileStorageNotifier Delphi\nDESCRIPTION: Adds an instance of a custom project file storage notifier to the IDE using the IOTAProjectFileStorage.AddNotifier method. The returned integer is stored for later removal. This notifier allows adding custom information to the project's XML file.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_230\n\nLANGUAGE: Delphi\nCODE:\n```\nFProjectFileStorageNotifier := (BorlandIDEServices As\nIOTAProjectFileStorage).AddNotifier(\n\nTDGHNotificationsProjectFileStorageNotifier.Create('IOTAProjectFileStorageNotifier',\n\ndinProjectFileStorageNotifier));\n```\n\n----------------------------------------\n\nTITLE: Generating Uses Clause Code for Wizards in Delphi\nDESCRIPTION: This function, GetUsesClauseCode, generates the code that needs to be inserted into the Uses clause of the main unit. It checks for the presence of various interface types (KeyboardBindingInterface, IDENotifierInterface, CompilerNotifierInterface, EditorNotifierInterface, RepositoryWizardInterface) in the FProjectWizardInfo.FAdditionalModules set and adds the corresponding unit names to the result string.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_117\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetUsesClauseCode: **String**;\n\n**begin**\n\n**If** amKeyboardBindingInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result + ' KeyboardBindingInterface,'#13#10;\n\n**If** amIDENotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result + ' IDENotifierInterface,'#13#10;\n\n**If** amCompilerNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result + ' CompilerNotifierInterface,'#13#10;\n\n**If** amEditorNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result + ' EditorNotifierInterface,'#13#10;\n\n**If** amRepositoryWizardInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result + ' RepositoryWizardInterface,'#13#10;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.Create Constructor (Delphi)\nDESCRIPTION: This constructor initializes the TDGHCustomMessage object. It takes a message string (strMsg), font name (FontName), foreground color (ForeColour), font style (Style), and background color (BackColour) as input. It filters the message string to remove carriage returns, line feeds, and extended characters for compatibility, especially with different Delphi versions (Unicode handling in Delphi 2009+).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_42\n\nLANGUAGE: Delphi\nCODE:\n```\n**constructor** TDGHCustomMessage.Create(strMsg: **String**; FontName :\n**String**;\nForeColour : TColor = clBlack; Style : TFontStyles = [];\nBackColour : TColor = clWindow);\n\n**Const**\n**{$IFNDEF D2009}**\nstrValidChars : **Set Of** Char = [#10, #13, #32..#128];\n**{$ELSE}**\nstrValidChars : **Set Of** AnsiChar = [#10, #13, #32..#128];\n**{$ENDIF}**\n\n**Var**\ni : Integer;\niLength : Integer;\n\n**begin**\nSetLength(FMsg, Length(strMsg));\niLength := 0;\n**For** i := 1 **To** Length(strMsg) **Do**\n**{$IFNDEF D2009}**\n**If** strMsg[i] **In** strValidChars **Then**\n**{$ELSE}**\n**If** CharInSet(strMsg[i], strValidChars) **Then**\n**End**;\n\nFMsg[iLength + 1] := strMsg[i];\nInc(iLength);\n**End**;\n\nSetLength(FMsg, iLength);\nFFontName := FontName;\nFForeColour := ForeColour;\nFStyle := Style;\nFBackColour := BackColour;\nFMessagePntr := **Nil**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: GetFrameClass Implementation\nDESCRIPTION: This code snippet shows the implementation of the `GetFrameClass` method. It returns a class reference to the options frame class, allowing the IDE to create the frame.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_188\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.GetFrameClass:\nTCustomFrameClass;\n\n**Begin**\n\nResult := TfmIDEHelpHelperOptions;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Accessing IOTAEditView Interface\nDESCRIPTION: This code snippet demonstrates how to access the IOTAEditView interface through BorlandIDEServices and retrieve the cursor position.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_47\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** Something;\n\n**Var**\n\nEditView : IOTAEditView;\n\nCP : TOTAEditPos;\n\n**Begin**\n\nEditView := (BorlandIDEServices **As** IOTAEditorServices);\n\nCP := EditView.CursorPos;\n\nOutputDebugString(PChar(Format('Line %d, Column %d', \\[CP.Line,\nCP.Col\\])));\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Getting an Existing Message Group in Delphi\nDESCRIPTION: This code snippet demonstrates how to retrieve an existing message group (tab) in the IDE's message window. It requires the IOTAMessageServices and IOTAMessageGroup interfaces. The `GetGroup` method is used to retrieve the group by its name.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_26\n\nLANGUAGE: Delphi\nCODE:\n```\n**Var**\nMyGroup : IOTAMessageGroup;\n**Begin**\n...\nMyGroup := GetGroup('My Message Group');\n...\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Identifying Method Declarations (Delphi)\nDESCRIPTION: This snippet implements the IsMethod function, which checks if a given line of text contains a method declaration (procedure, function, constructor, or destructor). It uses the Pos function to search for these keywords in a case-insensitive manner.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_75\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction IsMethod(strLine : String) : Boolean;\nConst\nstrMethods : Array[1..4] Of String = ('procedure', 'function',\n'constuctor', 'destructor');\nVar\ni : Integer;\nBegin\nResult := False;\nFor i := Low(strMethods) To High(strMethods) Do\nIf Pos(strMethods[i], LowerCase(strLine)) > 0 Then\nBegin\nResult := True;\nBreak;\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Get Project Module Reference Delphi\nDESCRIPTION: This function retrieves a reference to a project's source module (DPR, DPK, etc.) for a given project. It iterates through the modules to find the matching project. Returns Nil if no project module is found.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_32\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction ProjectModule(Project : IOTAProject) : IOTAModule;\nVar\n  AModuleServices: IOTAModuleServices;\n  AModule: IOTAModule;\n  i: integer;\n  AProject: IOTAProject;\nBegin\n  Result := Nil;\n  AModuleServices := (BorlandIDEServices as IOTAModuleServices);\n  For i := 0 To AModuleServices.ModuleCount - 1 Do\n  Begin\n    AModule := AModuleServices.Modules[i];\n    If (AModule.QueryInterface(IOTAProject, AProject) = S_OK) And\n       (Project = AProject) Then\n      Break;\n  End;\n  Result := AProject;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Declare Dockable Form Class (Delphi)\nDESCRIPTION: This snippet declares the Delphi class for the dockable form, inheriting from `TDockableForm`. It defines private members like `FModuleExplorerFrame` and public members including constructor, destructor, and several class procedures for managing the dockable form's lifecycle and interaction with the IDE. The `DockForm` unit must be added to the `uses` clause.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_130\n\nLANGUAGE: Delphi\nCODE:\n```\n**uses**\n\nWindows, Messages, SysUtils, Variants, Classes, Graphics, Controls,\nForms,\n\nDialogs, DockForm, ModuleExplorerFrame, BaseLanguageModule;\n\n**type**\n\nTfrmDockableModuleExplorer = **class**(TDockableForm)\n\n**private**\n\nFModuleExplorerFrame : TframeModuleExplorer;\n\n**public**\n\n**Constructor** Create(AOwner : TComponent); **Override**;\n\n**Destructor** Destroy; **Override**;\n\n**Procedure** Focus;\n\n**Class Procedure** ShowDockableModuleExplorer;\n\n**Class Procedure** RemoveDockableModuleExplorer;\n\n**Class Procedure** CreateDockableModuleExplorer;\n\n**Class Procedure** RenderDocumentTree(BaseLanguageModule :\nTBaseLanguageModule);\n\n**Class Procedure** HookEventHandlers(SelectionChangeProc :\nTSelectionChange;\n\nFocus, ScopeChange : TNotifyEvent);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Menu Click Event Handler in Delphi\nDESCRIPTION: This Delphi code snippet implements a menu click event handler that executes a form (`TfrmOptions`) to allow the user to modify auto-save settings (interval and prompt). If the user confirms the changes, the settings are saved.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_13\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TBlogOTAExampleWizard.MenuClick(Sender: TObject);\n\n**begin**\n\n**If** TfrmOptions.Execute(FAutoSaveInt, FPrompt) **Then**\n\nSaveSettings; *// Not really required as is called in destructor.*\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHNotificationsEditorNotifier Declaration Delphi\nDESCRIPTION: Declares the structure of the TDGHNotificationsEditorNotifier class, implementing the IOTANotifier, IOTAEditorNotifier, and INTAEditServicesNotifier interfaces. This class allows handling events within the editors.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_235\n\nLANGUAGE: Delphi\nCODE:\n```\nTDGHNotificationsEditorNotifier = Class(TDGHNotifierObject,\nIOTANotifier,\n\nIOTAEditorNotifier,\n\nINTAEditServicesNotifier)\n\nStrict Private\n\nStrict Protected\n\nPublic\n\n// IOTAEditorNotifier\n\nProcedure ViewActivated(Const View: IOTAEditView);\n\nProcedure ViewNotification(Const View: IOTAEditView; Operation:\nTOperation);\n\n// INTAEditServicesNotifier\n\nProcedure DockFormRefresh(Const EditWindow: INTAEditWindow; DockForm:\nTDockableForm);\n\nProcedure DockFormUpdated(Const EditWindow: INTAEditWindow; DockForm:\nTDockableForm);\n\nProcedure DockFormVisibleChanged(Const EditWindow: INTAEditWindow;\n\nDockForm: TDockableForm);\n\nProcedure EditorViewActivated(Const EditWindow: INTAEditWindow;\n\nConst EditView: IOTAEditView);\n\nProcedure EditorViewModified(Const EditWindow: INTAEditWindow;\n\nConst EditView: IOTAEditView);\n\nProcedure WindowActivated(Const EditWindow: INTAEditWindow);\n\nProcedure WindowCommand(Const EditWindow: INTAEditWindow; Command:\nInteger;\n\nParam: Integer;\n\nVar Handled: Boolean);\n\nProcedure WindowNotification(Const EditWindow: INTAEditWindow;\nOperation: TOperation);\n\nProcedure WindowShow(Const EditWindow: INTAEditWindow; Show: Boolean;\n\nLoadedFromDesktop: Boolean);\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Querying a Generic IOTA Interface in Delphi\nDESCRIPTION: This code snippet shows how to query a generic IOTA interface (represented by IOTA...) from BorlandIDEServices using the Supports function.  It's important to replace `IOTA....` with the full interface type name. If the interface is supported, it is assigned to the `LServices` variable for further use.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/BorlandIDEServices.md#_snippet_1\n\nLANGUAGE: Delphi\nCODE:\n```\nvar\n  LServices: IOTA...; // use the full type name here\n\nif Supports(BorlandIDEServices, IOTA...., LServices) then\n  begin\n    // Do something with LServices\n  end;\n```\n\n----------------------------------------\n\nTITLE: Generating Variable Declaration Code for Wizards in Delphi\nDESCRIPTION: This function, GetVariableDeclCode, generates the code for declaring variables in the main unit to hold the indexes of the created wizards. It checks for various interface types and declares integer variables initialized to 'iWizardFailState' to store the indexes of the respective wizards.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_118\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetVariableDeclCode: **String**;\n\n**begin**\n\n**If** amKeyboardBindingInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' iKeyBindingIndex : Integer = iWizardFailState;'#13#10;\n\n**If** amIDENotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' iIDENotfierIndex : Integer = iWizardFailState;'#13#10;\n\n**If** amCompilerNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D2010}'#13#10 +\n\n' iCompilerIndex : Integer = iWizardFailState;'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amEditorNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D0006}'#13#10 +\n\n' iEditorIndex : Integer = iWizardFailState;'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amRepositoryWizardInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' iRepositoryWizardIndex : Integer = iWizardFailState;'#13#10;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Finding a Menu Item in Delphi IDE\nDESCRIPTION: This function searches for a menu item within the Delphi IDE's main menu by comparing the provided menu name with existing menu items. It recursively iterates through submenus to locate the target menu item and returns the TMenuItem if found, otherwise it returns Nil. The `CompareText` function performs a case-insensitive string comparison.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_120\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** FindMenuItem(strParentMenu : **String**): TMenuItem;\n\n**Function** IterateSubMenus(Menu : TMenuItem) : TMenuItem;\n\n**Var**\n\niSubMenu : Integer;\n\n**Begin**\n\nResult := **Nil**;\n\n**For** iSubMenu := 0 **To** Menu.Count - 1 **Do**\n\n**Begin**\n\n**If** CompareText(strParentMenu, Menu[iSubMenu].**Name**) = 0\n**Then**\n\nResult := Menu[iSubMenu]\n\n**Else**\n\nResult := IterateSubMenus(Menu[iSubMenu]);\n\n**If** Result &lt;&gt; **Nil Then**\n\nBreak;\n\n**End**;\n\n**End**;\n\n**Var**\n\niMenu : Integer;\n\nNTAS : INTAServices;\n\nItems : TMenuItem;\n\n**begin**\n\nResult := **Nil**;\n\nNTAS := (BorlandIDEServices **As** INTAServices);\n\n**For** iMenu := 0 **To** NTAS.MainMenu.Items.Count - 1 **Do**\n\n**Begin**\n\nItems := NTAS.MainMenu.Items;\n\n**If** CompareText(strParentMenu, Items[iMenu].**Name**) = 0 **Then**\n\nResult := Items[iMenu]\n\n**Else**\n\nResult := IterateSubMenus(Items);\n\n**If** Result &lt;&gt; **Nil Then**\n\nBreak;\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Unregister Dockable Form (Delphi)\nDESCRIPTION: This procedure unregisters the dockable form from the IDE, preventing it from loading or saving its state. It utilizes `UnregisterFieldAddress` (if available) to remove the form's variable from the IDE's desktop management. It takes the form variable and name as parameters.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_134\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** UnRegisterDockableForm(**var** FormVar; **Const** FormName\n: **String**);\n\n**Begin**\n\n**If** @UnRegisterFieldAddress &lt;&gt; **Nil Then**\n\nUnregisterFieldAddress(@FormVar);\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: TDGHIDENotificationsMessageNotifier Declaration Delphi\nDESCRIPTION: Defines the structure of the TDGHIDENotificationsMessageNotifier class. This class implements IOTAMessageNotifier and INTAMessagNotifier interfaces to receive notifications about message groups and add menu items to the message view context menu.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_229\n\nLANGUAGE: Delphi\nCODE:\n```\nTDGHIDENotificationsMessageNotifier = Class(TDGHNotifierObject,\nIOTAMessageNotifier, INTAMessagNotifier)\n\nStrict Private\n\nStrict Protected\n\nPublic\n\n// IOTAMessageNotifier\n\nProcedure MessageGroupAdded(Const Group: IOTAMessageGroup);\n\nProcedure MessageGroupDeleted(Const Group: IOTAMessageGroup);\n\n// INTAMessageNotifier\n\nProcedure MessageViewMenuShown(Menu: TPopupMenu; const MessageGroup:\nIOTAMessageGroup;\n\nLineRef: Pointer);\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Querying a Generic INTA Interface in Delphi\nDESCRIPTION: This code snippet demonstrates querying a generic INTA interface (represented by INTA...) from BorlandIDEServices using the Supports function. It is crucial to replace `INTA...` with the complete interface type name.  If successful, the interface is assigned to `LNTAType` for subsequent operations.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/BorlandIDEServices.md#_snippet_2\n\nLANGUAGE: Delphi\nCODE:\n```\nvar\n  LNTAType: INTA...; // use the full type name here\n\nif Supports(BorlandIDEServices, INTA..., LNTAType) then\n  begin\n    // Do something with LNTAType\n  end;\n```\n\n----------------------------------------\n\nTITLE: Displaying the Message Window in Delphi\nDESCRIPTION: This procedure displays the main message window of the IDE. It requires the IOTAMessageServices interface. It uses the ShowMessageView method to bring the message window to the foreground. The parameter passed to `ShowMessageView` can be `Nil` to display the main message window.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_23\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** ShowHelperMessages;\n**Begin**\n**With** (BorlandIDEServices **As** IOTAMessageServices) **Do**\nShowMessageView(**Nil**);\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Opening Options Page Programmatically\nDESCRIPTION: This code snippet demonstrates how to programmatically open the IDE's options page and navigate to a specific options page using the `IOTAServices` interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_193\n\nLANGUAGE: Delphi\nCODE:\n```\n(BorlandIDEServices **As**\nIOTAServices).GetEnvironmentOptions.EditOptions('', 'IDE Help\nHelper.Options');\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyboard Binding Interface Delphi\nDESCRIPTION: This code snippet initializes a keyboard binding interface using the `IOTAKeyboardServices` interface. It adds a keyboard binding based on the `TKeybindingTemplate` and stores the resulting index for later removal.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_87\n\nLANGUAGE: Delphi\nCODE:\n```\niKeyBindingIndex := (BorlandIDEServices As\nIOTAKeyboardServices).AddKeyboardBinding(\n\tTKeybindingTemplate.Create);\n```\n\n----------------------------------------\n\nTITLE: Install Menu Procedure in Delphi IDE Wizard\nDESCRIPTION: This Delphi code snippet implements the `InstallMenu` procedure, responsible for adding a custom menu item to the Delphi IDE's \"View\" menu. It retrieves the main menu and inserts the new menu item (&Auto Save Options...) below the \"Window List...\" item, associating it with the `MenuClick` event handler and a shortcut (Ctrl+Shift+Alt+A). `BorlandIDEServices` must be available and castable to `INTAServices`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_17\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TBlogOTAExampleWizard.InstallMenu;\n\n**Var**\n\nNTAS: INTAServices;\n\nmmiViewMenu: TMenuItem;\n\nmmiWindowList: TMenuItem;\n\n**begin**\n\nNTAS := (BorlandIDEServices **As** INTAServices);\n\n**If** (NTAS &lt;&gt; **Nil**) **And** (NTAS.MainMenu &lt;&gt; **Nil**)\n**Then**\n\n**Begin**\n\nmmiViewMenu := NTAS.MainMenu.Items.Find('View');\n\n**If** mmiViewMenu &lt;&gt; **Nil Then**\n\n**Begin**\n\nmmiWindowList := mmiViewMenu.Find('Window List...');\n\n**If** mmiWindowList &lt;&gt; **Nil Then**\n\n**Begin**\n\nFMenuItem := TMenuItem.Create(mmiViewMenu);\n\nFMenuItem.Caption := '&Auto Save Options...';\n\nFMenuItem.OnClick := MenuClick;\n\nFMenuItem.ShortCut := TextToShortCut('Ctrl+Shift+Alt+A');\n\nmmiViewMenu.Insert(mmiWindowList.MenuIndex + 1, FMenuItem);\n\nFSucceeded := True;\n\n**End**;\n\n**End**;\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Initializing Options Frame Data in Delphi\nDESCRIPTION: The `InitialiseFrame` procedure initializes the options frame with data from string lists and an integer representing the selected search URL. It assigns the string lists to listboxes and checks the appropriate search URL.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_178\n\nLANGUAGE: Delphi/Pascal\nCODE:\n```\n**Procedure** TfmIDEHelpHelperOptions.InitialiseFrame(slSearchURLs,\n\nslPermanentURLs: TStringList; iSearchURL: Integer);\n\n**Begin**\n\nFClickIndex := -1;\n\nlbxSearchURLsClick(**Nil**);\n\nlbxPermanentURLsClick(**Nil**);\n\nlbxSearchURLs.Items.Assign(slSearchURLs);\n\nlbxPermanentURLs.Items.Assign(slPermanentURLs);\n\n**If** (iSearchURL &gt; -1) **And** (iSearchURL &lt;= lbxSearchURLs.Items.Count - 1) **Then**\n\nlbxSearchURLs.Checked[iSearchURL] := True;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Registering Editor Notifier\nDESCRIPTION: This code snippet shows how to register the editor notifier with the IDE using the AddNotifier method of the IOTAEditorServices interface. It requires the BorlandIDEServices interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_51\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** InitWizard(**Const** BorlandIDEServices :IBorlandIDEServices; RegisterProc : TWizardRegisterProc; **var** Terminate: TWizardTerminateProc) : Boolean; **StdCall**;\n\n**Begin**\n\nApplication.Handle := Application.MainForm.Handle;\n\nResult := BorlandIDEServices &lt;&gt; **Nil**;\n\n**If** Result **Then**\n\n**Begin**\n\n...\n\niEditorIndex := (BorlandIDEServices **As** IOTAEditorServices).AddNotifier(\n\nTEditorNotifier.Create);\n\n...\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Defining Common Notifier Object in Delphi\nDESCRIPTION: This code defines the `TDGHNotifierObject` class, which serves as a base class for all notifiers. It inherits from `TNotifierObject` and implements the `IOTANotifier` interface.  It includes fields for the notification type (`FNotification`) and a string representation of the notifier (`FNotifier`). It defines a `DoNotification` method for outputting messages to the notification log and overrides `AfterConstruction` and `BeforeDestruction` to handle object lifecycle events. Requires the definition of TNotifierObject.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_206\n\nLANGUAGE: Delphi\nCODE:\n```\nType\n\nTDGHNotifierObject = Class(TNotifierObject, IOTANotifier)\n\nStrict Private\n\nFNotification : TDGHIDENotification;\n\nFNotifier : String;\n\nStrict Protected\n\nProcedure DoNotification(strMessage: String);\n\nPublic\n\nConstructor Create(strNotifier : String; iNotification :\nTDGHIDENotification);\n\n// IOTANotifier\n\nProcedure AfterSave;\n\nProcedure BeforeSave;\n\nProcedure Destroyed;\n\nProcedure Modified;\n\nProcedure AfterConstruction; Override;\n\nProcedure BeforeDestruction; Override;\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Extracting Methods from Source Code (Delphi)\nDESCRIPTION: This snippet implements the GetMethods procedure, which extracts method headings from the current source editor. It iterates through the lines of code, identifies method declarations, and adds them to a string list along with their line numbers. Uses ActiveSourceEditor and EditorAsString utilities to get the active editor and its code.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_71\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure GetMethods(slItems : TStringList);\nVar\nSE: IOTASourceEditor;\nslSource: TStringList;\ni: Integer;\nrecPos : TItemPosition;\nboolImplementation : Boolean;\niLine: Integer;\nBegin\nSE := ActiveSourceEditor;\nIf SE <> Nil Then\nBegin\nslSource := TStringList.Create;\nTry\nslSource.Text := EditorAsString(SE);\nboolImplementation := False;\niLine := 1;\nFor i := 0 To slSource.Count - 1 Do\nBegin\nIf Not boolImplementation Then\nBegin\nIf Pos('implementation', LowerCase(slSource[i])) > 0 Then\nboolImplementation := True;\nEnd Else\nIf IsMethod(slSource[i]) Then\nBegin\nrecPos.Line := iLine;\nrecPos.Column := 1;\nslItems.AddObject(slSource[i], recPos.Data);\nEnd;\nInc(iLine);\nEnd;\nslItems.Sort;\nFinally\nslSource.Free;\nEnd;\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: After Compile Procedure Delphi\nDESCRIPTION: This procedure `AfterCompile` is called immediately after a compilation. The `Succeeded` parameter indicates whether the compilation was successful. There's no `Cancel` parameter; if a post-compilation process fails, the `Abort` method should be called.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_214\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure AfterCompile(Succeeded: Boolean); overload;\n```\n\n----------------------------------------\n\nTITLE: Define Class of Class Type (Delphi)\nDESCRIPTION: This snippet defines a 'class of class' type for the dockable form. This is used to reference the class type itself, which is needed when working with form registration and dynamic form creation at runtime.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_131\n\nLANGUAGE: Delphi\nCODE:\n```\nTfrmDockableModuleExplorerClass = **Class of**\nTfrmDockableModuleExplorer;\n```\n\n----------------------------------------\n\nTITLE: Accessing IOTAPackageServices210 Interface in Delphi\nDESCRIPTION: This snippet illustrates how to directly access the IOTAPackageServices210 interface by casting BorlandIDEServices. It then calls the InstallPackage method on the obtained interface. This assumes that BorlandIDEServices already implements IOTAPackageServices210.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/BorlandIDEServices.md#_snippet_3\n\nLANGUAGE: Delphi\nCODE:\n```\nvar LPackageServices: IOTAPackageServices210 := BorlandIDEServices as IOTAPackageServices210;\n\nLPackageServices.InstallPackage(...);\n```\n\n----------------------------------------\n\nTITLE: Removing Toolbar Buttons in Delphi IDE\nDESCRIPTION: This procedure removes custom toolbar buttons associated with the actions added to the IDE by the expert. It iterates through each toolbar specified by the `sCustomToolBar`, `sStandardToolBar`, `sDebugToolBar`, `sViewToolBar`, and `sDesktopToolBar` constants (and potentially others based on Delphi version) and removes any buttons whose `Action` is present in the `FOTAActions` list. Relies on the `IsCustomAction` function to identify custom actions and `RemoveAction` to handle removal from a given toolbar.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_123\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** RemoveToolbarButtonsAssociatedWithActions;\n\n**Function** IsCustomAction(Action : TBasicAction) : Boolean;\n\n**Var**\n\ni: Integer;\n\n**Begin**\n\nResult := False;\n\n**For** i := 0 **To** FOTAActions.Count - 1 **Do**\n\n**If** Action = FOTAActions[i] **Then**\n\n**Begin**\n\nResult := True;\n\nBreak;\n\n**End**;\n\n**End**;\n\n**Procedure** RemoveAction(TB : TToolbar);\n\n**Var**\n\ni: Integer;\n\n**Begin**\n\n**If** TB &lt;&gt; **Nil Then**\n\n**For** i := TB.ButtonCount - 1 **DownTo** 0 **Do**\n\n**Begin**\n\n**If** IsCustomAction(TB.Buttons[i].Action) **Then**\n\nTB.RemoveControl(TB.Buttons[i]);\n\n**End**;\n\n**End**;\n\n**Var**\n\nNTAS : INTAServices;\n\n**Begin**\n\nNTAS := (BorlandIDEServices **As** INTAServices);\n\nRemoveAction(NTAS.ToolBar[sCustomToolBar]);\n\nRemoveAction(NTAS.Toolbar[sStandardToolBar]);\n\nRemoveAction(NTAS.Toolbar[sDebugToolBar]);\n\nRemoveAction(NTAS.Toolbar[sViewToolBar]);\n\nRemoveAction(NTAS.Toolbar[sDesktopToolBar]);\n\n**{$IFDEF D0006}**\n\nRemoveAction(NTAS.Toolbar[sInternetToolBar]);\n\nRemoveAction(NTAS.Toolbar[sCORBAToolBar]);\n\n**{$IFDEF D2009}**\n\nRemoveAction(NTAS.Toolbar[sAlignToolbar]);\n\nRemoveAction(NTAS.Toolbar[sBrowserToolbar]);\n\nRemoveAction(NTAS.Toolbar[sHTMLDesignToolbar]);\n\nRemoveAction(NTAS.Toolbar[sHTMLFormatToolbar]);\n\nRemoveAction(NTAS.Toolbar[sHTMLTableToolbar]);\n\nRemoveAction(NTAS.Toolbar[sPersonalityToolBar]);\n\nRemoveAction(NTAS.Toolbar[sPositionToolbar]);\n\nRemoveAction(NTAS.Toolbar[sSpacingToolbar]);\n\n**{$ENDIF}**\n\n**{$ENDIF}**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Create Dockable Form Instance (Delphi)\nDESCRIPTION: This procedure creates an instance of the dockable form using the provided class. It calls the form's constructor with `Nil` as the owner, and then registers the created form with the IDE using `RegisterDockableForm`, associating it with a variable and a name. The form's name is retrieved using the `Name` property of the `TCustomForm` base class.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_135\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** CreateDockableForm(**var** FormVar :\nTfrmDockableModuleExplorer;\n\nFormClass : TfrmDockableModuleExplorerClass);\n\n**Begin**\n\nTCustomForm(FormVar) := FormClass.Create(**Nil**);\n\nRegisterDockableform(FormClass, FormVar, TCustomForm(FormVar).**Name**);\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Show Dockable Form (Delphi)\nDESCRIPTION: This procedure displays the dockable form. It first checks if the form is assigned. If the form is floating, it shows and focuses the window. If it is docked, it shows and focuses it as well, handling both docked and floating scenarios. The `ForceShow` method ensures visibility even if the form was previously hidden.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_137\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** ShowDockableForm(Form : TfrmDockableModuleExplorer);\n\n**Begin**\n\n**If Not** Assigned(Form) **Then**\n\nExit;\n\n**If Not** Form.Floating **Then**\n\n**Begin**\n\nForm.ForceShow;\n\nFocusWindow(Form);\n\nForm.Focus;\n\n**End Else**\n\n**Begin**\n\nForm.Show;\n\nForm.Focus;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: DLL Wizard Initialization Pascal\nDESCRIPTION: This function demonstrates how to initialize a DLL wizard. It takes `IBorlandIDEServices`, `TWizardRegisterProc`, and `TWizardTerminateProc` as parameters. It calls the `RegisterProc` internal IDE procedure with the result of `InitialiseWizard` called with `wtDLLWizard`.  The RegisterProc *MUST* be called to register the DLL wizard.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_82\n\nLANGUAGE: Pascal\nCODE:\n```\n**Function** InitWizard(**Const** BorlandIDEServices :\nIBorlandIDEServices;\nRegisterProc : TWizardRegisterProc;\n**var** Terminate: TWizardTerminateProc) : Boolean; **StdCall**;\n**Begin**\nResult := BorlandIDEServices &lt;&gt; **Nil**;\n**If** Result **Then**\nRegisterProc(InitialiseWizard(wtDLLWizard));\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Package Wizard Registration\nDESCRIPTION: The `Register` procedure is used to register the wizard when loaded as a Package. It casts `BorlandIDEServices` to `IOTAWizardServices` and uses the `AddWizard` method to register the wizard with the IDE. The returned integer reference, `iWizard`, is stored for later removal of the wizard from memory during finalization, specific to package loading.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_10\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure Register;\nBegin\niWizard := (BorlandIDEServices As IOTAWizardServices).AddWizard(\nInitialiseWizard(BorlandIDEServices));\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants and Resource Strings for Splash Screen in Delphi\nDESCRIPTION: This code declares constants and resource strings used to display information on the splash screen and in the About dialog. `strRevision` is a string used for displaying a letter for a bugfix. `strSplashScreenName` is a format string for the expert's title, and `strSplashScreenBuild` is a format string for the build information.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_61\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF D2005}**\n**Const**\nstrRevision : **String** = ' abcdefghijklmnopqrstuvwxyz';\n**ResourceString**\nstrSplashScreenName = 'My Expert Title %d.%d%s for Embarcadero RAD\nStudio ####';\nstrSplashScreenBuild = 'Freeware by Author (Build %d.%d.%d.%d)';\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: DialogClosed Implementation\nDESCRIPTION: This code snippet shows the implementation of the `DialogClosed` method of the `INTAAddInOptions` interface. It handles the logic for saving the options data back to the application's options when the dialogue is confirmed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_184\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TIDEHelpHelperIDEOptionsInterface.DialogClosed(Accepted:\nBoolean);\n\n**Var**\n\niSearchURL: Integer;\n\n**Begin**\n\n**If** Accepted **Then**\n\n**Begin**\n\nFFrame.FinaliseFrame(AppOptions.SearchURLs, AppOptions.PermanentURLs,\niSearchURL);\n\nAppOptions.SearchURLIndex := iSearchURL;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Package Wizard Registration Pascal\nDESCRIPTION: This procedure demonstrates how to register a package wizard. It calls the `InitialiseWizard` function with the `wtPackageWizard` type, ensuring the wizard is registered correctly for packages.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_81\n\nLANGUAGE: Pascal\nCODE:\n```\n**procedure Register**;\n**begin**\nInitialiseWizard(wtPackageWizard);\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.CalcRect Function (Delphi)\nDESCRIPTION: This function calculates the rectangle required to draw the custom message. It takes a Canvas and a MaxWidth parameter. The Canvas is used to determine font metrics and the initial rectangle. The font name and style are set on the canvas, and the resulting rectangle's bottom and right properties are adjusted based on the text's height and width.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_43\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TDGHCustomMessage.CalcRect(Canvas: TCanvas; MaxWidth:\nInteger;\nWrap: Boolean): TRect;\n\n**begin**\nCanvas.Font.**Name** := FFontName;\nCanvas.Font.Style := FStyle;\nResult:= Canvas.ClipRect;\nResult.Bottom := Result.Top + Canvas.TextHeight('Wp');\nResult.Right := Result.Left + Canvas.TextWidth(FMsg);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Execute Method Implementation\nDESCRIPTION: This code snippet shows the implementation of an Execute method which creates the form, initializes the frame, displays the form modally, and then, if confirmed, extracts the information from the dialogue.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_181\n\nLANGUAGE: Delphi\nCODE:\n```\n**Class Function** TfrmDGHIDEHelphelperConfig.Execute(slSearchURLs,\n\nslPermanentURLs : TStringList; **var** iSearchURL : Integer): Boolean;\n\n**Begin**\n\nResult := False;\n\n**With** TfrmDGHIDEHelphelperConfig.Create(**Nil**) **Do**\n\n**Try**\n\nFFrame.InitialiseFrame(slSearchURLs, slPermanentURLs, iSearchURL);\n\n**If** ShowModal = mrOk **Then**\n\n**Begin**\n\nFFrame.FinaliseFrame(slSearchURLs, slPermanentURLs, iSearchURL);\n\nResult := True;\n\n**End**;\n\n**Finally**\n\nFree;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: IOTAPackageServices140 Delphi Interface Definition\nDESCRIPTION: This Delphi interface `IOTAPackageServices140` provides methods and properties for retrieving information about installed packages within the IDE.  It allows iterating through the packages, accessing their names, counting the components within each package, and retrieving component names. The interface inherits from `IUnknown` and has a specific GUID. It includes properties like `PackageCount`, `PackageNames`, `ComponentCount`, and `ComponentNames` to facilitate easy access to the package and component information. This interface is available since Delphi 5.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_196\n\nLANGUAGE: Delphi\nCODE:\n```\nIOTAPackageServices140 = **interface**(IUnknown)\n\t['{26EB0E4D-F97B-11D1-AB27-00C04FB16FB3}']\n\t**function** GetPackageCount: Integer;\n\t**function** GetPackageName(**Index**: Integer): **string**;\n\t**function** GetComponentCount(PkgIndex: Integer): Integer;\n\t**function** GetComponentName(PkgIndex, CompIndex: Integer): **string**;\n\t**property** PackageCount: Integer **read** GetPackageCount;\n\t**property** PackageNames\\[**Index**: Integer\\]: **string read** GetPackageName;\n\t**property** ComponentCount\\[PkgIndex: Integer\\]: Integer **read** GetComponentCount;\n\t**property** ComponentNames\\[PkgIndex, CompIndex: Integer\\]: **string\n\t\tread** GetComponentName;\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Constructor: Hooking Dockable Form Event Handlers (Pascal)\nDESCRIPTION: This constructor hooks event handlers for the dockable form.  The form is already created by the time this constructor is called from the IntialiseWizard method. The SelectionChange, Focus, and OptionsChange events are handled. Inherited constructor is also invoked.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_146\n\nLANGUAGE: Pascal\nCODE:\n```\n**Constructor** TBrowseAndDocItWizard.Create;\n\n**Var**\n\nmmiMainMenu: TMainMenu;\n\n**Begin**\n\n**Inherited** Create;\n\nTfrmDockableModuleExplorer.HookEventHandlers(SelectionChange, Focus,\n\nOptionsChange);\n\n...\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Destructor: Removing the Dockable Form (Pascal)\nDESCRIPTION: This destructor removes the dockable form by calling `TfrmDockableModuleExplorer.RemoveDockableModuleExplorer`.  This ensures proper cleanup when the wizard is destroyed. The inherited destructor is also called.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_147\n\nLANGUAGE: Pascal\nCODE:\n```\n**Destructor** TBrowseAndDocItWizard.Destroy;\n\n**Begin**\n\n...\n\nTfrmDockableModuleExplorer.RemoveDockableModuleExplorer;\n\n**Inherited** Destroy;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Custom Message Class Definition Delphi\nDESCRIPTION: This code defines a custom message class TDGHCustomMessage that implements the IOTACustomMessage and INTACustomDrawMessage interfaces. This class is used to display custom messages in the IDE's message window, allowing for custom formatting like font, color, and style.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_36\n\nLANGUAGE: Delphi\nCODE:\n```\nTDGHCustomMessage = Class(TInterfacedObject, IOTACustomMessage,\n  INTACustomDrawMessage)\nPrivate\n  FMsg : String;\n  FFontName : String;\n  FForeColour : TColor;\n  FStyle : TFontStyles;\n  FBackColour : TColor;\n  FMessagePntr : Pointer;\nProtected\n  Procedure SetForeColour(iColour : TColor);\n  // INTACustomDrawMessage Methods\n  function CalcRect(Canvas: TCanvas; MaxWidth: Integer; Wrap: Boolean): TRect;\n  procedure Draw(Canvas: TCanvas; const Rect: TRect; Wrap: Boolean);\n  // IOTACustomMessage Methods\n  function GetColumnNumber: Integer;\n  function GetFileName: string;\n  function GetLineNumber: Integer;\n  function GetLineText: string;\n  procedure ShowHelp;\nPublic\n  Constructor Create(strMsg : String; FontName : String;\n    ForeColour : TColor = clBlack; Style : TFontStyles = [];\n    BackColour : TColor = clWindow);\n  Property ForeColour : TColor Write SetForeColour;\n  Property MessagePntr : Pointer Read FMessagePntr Write FMessagePntr;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Defining Eidolon Highlighter Class (Delphi)\nDESCRIPTION: This Delphi code defines the `TEidolonHighlighter` class, which inherits from `TNotifierObject` and implements the `IOTANotifier`, `IOTAHighlighter`, and `IOTAHighlighterPreview` interfaces.  It outlines the structure and methods required for syntax highlighting the custom Eidolon MAP file format within the IDE, including methods for tokenizing, getting display names, and providing sample text.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_153\n\nLANGUAGE: delphi\nCODE:\n```\n**Type**\n\nTEidolonHighlighter = **Class**(TNotifierObject, IOTANotifier,\nIOTAHighlighter **{$IFDEF D2005}**, IOTAHighlighterPreview**{$ENDIF}**)\n\n**{$IFDEF D2005} Strict {$ENDIF} Private**\n\n**{$IFDEF D2005} Strict {$ENDIF} Protected**\n\n**Public**\n\n**Constructor** Create;\n\n*// IOTAHighlighter methods*\n\n**Function** GetIDString: **String**;\n\n**Function** GetName: **String**;\n\n**Procedure** Tokenize(StartClass: Byte; LineBuf: PAnsiChar; LineBufLen:\nWord;\n\nHighlightCodes: POTASyntaxCode);\n\n**Function** TokenizeLineClass(StartClass: Byte; LineBuf: PAnsiChar;\n\nLineBufLen: Word): Byte;\n\n*// IOTAHighligherPreview methods*\n\n**Function** GetBlockEndCol: Integer;\n\n**Function** GetBlockEndLine: Integer;\n\n**Function** GetBlockStartCol: Integer;\n\n**Function** GetBlockStartLine: Integer;\n\n**Function** GetCurrentInstructionLine: Integer;\n\n**Function** GetDisabledBreakpointLine: Integer;\n\n**Function** GetDisplayName: **String**;\n\n**Function** GetErrorLine: Integer;\n\n**Function** GetInvalidBreakpointLine: Integer;\n\n**Function** GetSampleSearchText: **String**;\n\n**Function** GetSampleText: **String**;\n```\n\n----------------------------------------\n\nTITLE: Expanding Macros in Text in Delphi\nDESCRIPTION: This function, ExpandMacro, substitutes a specified macro within a given text string with a replacement text. It performs a case-insensitive search for the macro and replaces all occurrences. The function returns the modified string with the expanded macros.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_114\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.ExpandMacro(strText, strMacroName,\nstrReplaceText: **String**): **String**;\n\n**Var**\n\niPos : Integer;\n\n**begin**\n\niPos := Pos(LowerCase(strMacroName), LowerCase(strText));\n\nResult := strText;\n\n**While** iPos &gt; 0 **Do**\n\n**Begin**\n\nResult :=\n\nCopy(strText, 1, iPos - 1) +\n\nstrReplaceText +\n\nCopy(strText, iPos + Length(strMacroName), Length(strText) - iPos + 1 -\nLength(strMacroName));\n\niPos := Pos(LowerCase(strMacroName), LowerCase(Result));\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Register Dockable Form (Delphi)\nDESCRIPTION: This procedure registers the dockable form with the IDE, allowing it to save and load its position and docking state. It uses `RegisterFieldAddress` and `RegisterDesktopFormClass` (if available) to register the form and its associated variable with the IDE's desktop management system. It takes the form's class, variable, and name as parameters.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_133\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** RegisterDockableForm(FormClass :\nTfrmDockableModuleExplorerClass;\n\n**var** FormVar; **Const** FormName : **String**);\n\n**Begin**\n\n**If** @RegisterFieldAddress &lt;&gt; **Nil Then**\n\nRegisterFieldAddress(FormName, @FormVar);\n\nRegisterDesktopFormClass(FormClass, FormName, FormName);\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Add Package Properties to TreeView Delphi\nDESCRIPTION: This code, conditionally compiled for RAD Studio XE and above, retrieves an IOTAPackageInfo interface for the current package and adds various properties to a 'Properties' node under the package's tree node, including FileName, Name, RuntimeOnly, DesigntimeOnly, IDEPackage, Loaded, Description, SymbolFileName, Producer, and Consumer. Uses Format function for string formatting.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_200\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF DXE00}**\n\nN := tvPackages.Items.AddChild(P, 'Properties');\n\ntvPackages.Items.AddChild(N, Format('FileName: %s',\n[PS.**Package**[iPackage].FileName]));\n\ntvPackages.Items.AddChild(N, Format('Name: %s',\n[PS.**Package**[iPackage].**Name**]));\n\ntvPackages.Items.AddChild(N, Format('Run-Time Only: %s',\n[strBoolean[PS.**Package**[iPackage].RuntimeOnly]]));\n\ntvPackages.Items.AddChild(N, Format('Design-Time Only: %s',\n[strBoolean[PS.**Package**[iPackage].DesigntimeOnly]]));\n\ntvPackages.Items.AddChild(N, Format('IDE Package: %s',\n[strBoolean[PS.**Package**[iPackage].IDEPackage]]));\n\ntvPackages.Items.AddChild(N, Format('Loaded: %s',\n[strBoolean[PS.**Package**[iPackage].Loaded]]));\n\ntvPackages.Items.AddChild(N, Format('Description: %s',\n[PS.**Package**[iPackage].Description]));\n\ntvPackages.Items.AddChild(N, Format('SymbolFileName: %s',\n[PS.**Package**[iPackage].SymbolFileName]));\n\ntvPackages.Items.AddChild(N, Format('Producer : %s',\n[strProducer[PS.**Package**[iPackage].Producer]]));\n\ntvPackages.Items.AddChild(N, Format('Consumer : %s',\n[strConsumer[PS.**Package**[iPackage].Consumer]]));\n\nsl := TstringList.Create;\n\n**Try**\n\nPS.**Package**[iPackage].GetContainsList(sl);\n\nAddStringList(N, sl, 'Contains');\n\nPS.**Package**[iPackage].GetRequiresList(sl);\n\nAddStringList(N, sl, 'Requires');\n\nPS.**Package**[iPackage].GetImplicitList(sl);\n\nAddStringList(N, sl, 'Implicit');\n\nPS.**Package**[iPackage].GetRequiredByList(sl);\n\nAddStringList(N, sl, 'Required By');\n\n**Finally**\n\nsl.Free;\n\n**End**;\n\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: Get Source Editor from Module Delphi\nDESCRIPTION: This function provides a reference to the source editor interface of a given module. It iterates through the module files to find the editor interface. Returns nil if the module is nil or if no editor is found.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_34\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction SourceEditor(Module : IOTAModule) : IOTASourceEditor;\nVar\n  iFileCount : Integer;\n  i : Integer;\nBegin\n  Result := Nil;\n  If Module = Nil Then Exit;\n  With Module Do\n  Begin\n    iFileCount := GetModuleFileCount;\n    For i := 0 To iFileCount - 1 Do\n      If GetModuleFileEditor(i).QueryInterface(IOTASourceEditor,\n        Result) = S_OK Then\n        Break;\n  End;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Querying IOTAEnvironmentOptions via IOTAServices in Delphi\nDESCRIPTION: This code shows how to obtain the IOTAEnvironmentOptions interface by first querying for the IOTAServices interface. If IOTAServices is supported, it then calls the GetEnvironmentOptions method to retrieve the IOTAEnvironmentOptions. This exemplifies a common pattern of accessing nested interfaces.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/BorlandIDEServices.md#_snippet_4\n\nLANGUAGE: Delphi\nCODE:\n```\nvar \n  OTAServices: IOTAServices;\n  LEnvironmentOptions: IOTAEnvironmentOptions;\n...  \nif Supports(BorlandIDEServices, IOTAServices, OTAServices) then\n  LEnvironmentOptions := OTAServices.GetEnvironmentOptions;\n```\n\n----------------------------------------\n\nTITLE: Defining Wizard Fail State Constant Delphi\nDESCRIPTION: This snippet defines a constant `iWizardFailState` to represent an invalid wizard or notifier index.  Using -1 instead of 0 helps to differentiate between a valid, potentially unused index and a truly invalid one. This is important for proper resource management and avoids potential crashes when recompiling a package.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_85\n\nLANGUAGE: Delphi\nCODE:\n```\nConst\n\tiWizardFailState = -1;\n```\n\n----------------------------------------\n\nTITLE: Adding Splash Screen Plugin Information in Delphi\nDESCRIPTION: This code demonstrates how to add plugin information to the splash screen in Delphi using the `IOTASplashScreenServices` interface. The code is placed in the `Initialization` section to ensure it runs as the DLL/BPL is loaded. The build information is retrieved, a bitmap is loaded, and the `AddPluginBitmap` method is called to add the plugin to the splash screen.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_64\n\nLANGUAGE: Delphi\nCODE:\n```\n...Initialization\n**{$IFDEF D2005}**\nBuildNumber(VersionInfo);\n// Add Splash Screen\nbmSplashScreen := LoadBitmap(hInstance, 'SplashScreenBitMap');\n**With** VersionInfo **Do**\n(SplashScreenServices **As** IOTASplashScreenServices).AddPluginBitmap(\nFormat(strSplashScreenName, \\[iMajor, iMinor, Copy(strRevision, iBugFix\n+ 1, 1)\\]),\nbmSplashScreen,\nFalse,\nFormat(strSplashScreenBuild, \\[iMajor, iMinor, iBugfix, iBuild\\]));\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: Moving ClearMessages call in TIDENotifierTemplate\nDESCRIPTION: The ClearMessages call caused access violations during IDE shutdown in newer Delphi versions.  To resolve this, the `ClearMessages` call is moved from the `Finalization` section to the `Destroyed` method of the `TIDENotifierTemplate` class. This ensures the messages are cleared before the object is fully destroyed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_126\n\nLANGUAGE: Delphi\nCODE:\n```\nInitialization\nFinalization\nClearMessages([cmCompiler..cmTool]); *// DELETE*\nEnd.\n\nProcedure TIDENotifierTemplate.Destroyed;\nBegin\nClearMessages([cmCompiler..cmTool]); // ADDED\nIf moShowIDEMessages In ApplicationOps.ModuleOps Then\nOutputMessage('Destroyed' {$IFDEF D0006}, strIDENotifierMessages {$ENDIF});\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Constructor for the Delphi IDE Wizard\nDESCRIPTION: This Delphi code snippet defines the constructor for the `TBlogOTAExampleWizard` class. It initializes the private fields, sets default values for auto-save interval and prompt, creates the timer, and loads settings from an INI file. `hInstance` is expected to be available in scope, e.g. as a global variable.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_16\n\nLANGUAGE: Delphi\nCODE:\n```\n**constructor** TBlogOTAExampleWizard.Create;\n\n**var**\n\niSize : DWORD;\n\n**begin**\n\nFMenuItem := **Nil**;\n\nFCounter := 0;\n\nFAutoSaveInt := 300; *// Default 300 seconds (5 minutes)*\n\nFPrompt := True; *// Default to True*\n\n*// Create INI file same as add module + '.INI'*\n\nSetLength(FINIFileName, MAX_PATH);\n\niSize := MAX_PATH;\n\niSize := GetModuleFileName(hInstance, PChar(FINIFileName), iSize);\n\nSetLength(FINIFileName, iSize);\n\nFINIFileName := ChangeFileExt(FINIFileName, '.INI');\n\nLoadSettings;\n\nFSucceeded := False;\n\nFTimer := TTimer.Create(**Nil**);\n\nFTimer.Interval := 1000; *// 1 second*\n\nFTimer.OnTimer := TimerEvent;\n\nFTimer.Enabled := True;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Defining Notifier Types in Delphi\nDESCRIPTION: This code defines an enumerated type `TDGHIDENotification` for different types of notifiers and a set type `TDGHIDENotifications` based on the enumeration. This allows for filtering and managing different types of notifications within the IDE's notification log.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_204\n\nLANGUAGE: Delphi\nCODE:\n```\nType\n\nTDGHIDENotification = (\n\ndinWizard,\n\ndinMenuWizard,\n\ndinIDENotifier,\n\ndinVersionControlNotifier,\n\ndinCompileNotifier,\n\ndinMessageNotifier,\n\ndinIDEInsightNotifier,\n\ndinProjectFileStorageNotifier,\n\ndinEditorNotifier,\n\ndinDebuggerNotifier\n\n);\n\nType\n\nTDGHIDENotifications = Set Of TDGHIDENotification;\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor Notifier Interface Delphi\nDESCRIPTION: This code initializes an editor notifier interface using the `IOTAEditorServices` and adds a notifier using `TEditorNotifier.Create`. This enables the add-in to listen for events from the code editor. This snippet is Delphi 2005 specific.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_90\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF D2005}\n\t\t\t\t*// Create Editor Notifier Interface*\n\t\t\t\tiEditorIndex := (BorlandIDEServices As\n\t\t\t\tIOTAEditorServices).AddNotifier(\n\t\t\t\tTEditorNotifier.Create);\n\t\t\t\t{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: Get Project Group Reference Delphi\nDESCRIPTION: This function retrieves a reference to the project group currently open in the IDE. It iterates through the modules to find the project group. If no project group is open, it returns nil.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_30\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction ProjectGroup: IOTAProjectGroup;\nVar\n  AModuleServices: IOTAModuleServices;\n  AModule: IOTAModule;\n  i: integer;\n  AProjectGroup: IOTAProjectGroup;\nBegin\n  Result := Nil;\n  AModuleServices := (BorlandIDEServices as IOTAModuleServices);\n  For i := 0 To AModuleServices.ModuleCount - 1 Do\n  Begin\n    AModule := AModuleServices.Modules[i];\n    If (AModule.QueryInterface(IOTAProjectGroup, AProjectGroup) = S_OK)\n    Then\n      Break;\n  End;\n  Result := AProjectGroup;\nend;\n```\n\n----------------------------------------\n\nTITLE: Rendering Document in Dockable Form (Pascal)\nDESCRIPTION: This procedure is called by a background thread to render the contents of a module in the dockable form.  It takes a `TBaseLanguageModule` as input and calls `TfrmDockableModuleExplorer.RenderDocumentTree` to update the display in the dockable form.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_149\n\nLANGUAGE: Pascal\nCODE:\n```\n**procedure** TEditorNotifier.RenderDocument(Module:\nTBaseLanguageModule);\n\n**begin**\n\nTfrmDockableModuleExplorer.RenderDocumentTree(Module);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Define Dockable Form Object (Delphi)\nDESCRIPTION: This code snippet defines the object structure for a dockable form within a Delphi project. It specifies properties such as position, size, caption, color, constraints, font, and other visual attributes. This is the visual representation definition of the dockable form within the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_129\n\nLANGUAGE: Delphi\nCODE:\n```\n**object** frmDockableModuleExplorer: TfrmDockableModuleExplorer\n\nLeft = 456\n\nTop = 303\n\nCaption = 'Module Explorer'\n\nClientHeight = 358\n\nClientWidth = 257\n\nColor = clBtnFace\n\nConstraints.MinHeight = 250\n\nConstraints.MinWidth = 100\n\nFont.Charset = **DEFAULT**_CHARSET\n\nFont.Color = clWindowText\n\nFont.Height = -11\n\nFont.**Name** = 'MS Sans Serif'\n\nFont.Style = []\n\nKeyPreview = True\n\nOldCreateOrder = False\n\nShowHint = True\n\nPixelsPerInch = 96\n\nTextHeight = 13\n\n**end**\n```\n\n----------------------------------------\n\nTITLE: Executing Method Selection on Key Press (Delphi)\nDESCRIPTION: This snippet implements the SelectMethodExecute handler, which is triggered by the key binding. It calls the SelectMethod procedure to initiate the method selection and navigation process, and sets the binding result to krHandled.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_68\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure TKeybindingTemplate.SelectMethodExecute(Const Context:\nIOTAKeyContext;\nKeyCode: TShortcut; Var BindingResult: TKeyBindingResult);\nBegin\nSelectMethod;\nBindingResult := krHandled;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Compile Notifier Definition (Delphi)\nDESCRIPTION: Defines the structure of a compile notifier, inheriting from TDGHNotifierObject and implementing IOTACompileNotifier. It includes methods for handling project and project group compilation start and finish events, providing information about the compilation result and mode.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_221\n\nLANGUAGE: Delphi\nCODE:\n```\nType\nTDGHIDENotificationsCompileNotifier = Class(TDGHNotifierObject,\nIOTACompileNotifier)\nStrict Private\nStrict Protected\nPublic\nProcedure ProjectCompileFinished(Const Project: IOTAProject;\nResult: TOTACompileResult);\nProcedure ProjectCompileStarted(Const Project: IOTAProject; Mode:\nTOTACompileMode);\nProcedure ProjectGroupCompileFinished(Result: TOTACompileResult);\nProcedure ProjectGroupCompileStarted(Mode: TOTACompileMode);\nEnd;\n```\n\n----------------------------------------\n\nTITLE: NewProjectSource Implementation in Delphi\nDESCRIPTION: This function specifies custom source code for the project by returning an IOTAFile interface. It creates an instance of TProjectCreatorFile, passing the project name and type. Requires the TProjectCreatorFile class.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_109\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.NewProjectSource(**const** ProjectName:\n**String**): IOTAFile;\n\n**begin**\n\nResult := TProjectCreatorFile.Create(FProjectName, FProjectType);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Initializing Wizard and Creating Dockable Module Explorer (Pascal)\nDESCRIPTION: This function initializes the wizard and creates the dockable module explorer. The wizard type is specified using `WizardType : TWizardType`. It calls `TfrmDockableModuleExplorer.CreateDockableModuleExplorer` to create the dockable form.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_150\n\nLANGUAGE: Pascal\nCODE:\n```\n**Function** InitialiseWizard(WizardType : TWizardType) :\nTBrowseAndDocItWizard;\n\n**Var**\n\nSvcs: IOTAServices;\n\n**Begin**\n\n...\n\nTfrmDockableModuleExplorer.CreateDockableModuleExplorer;\n\n...\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: GetCaption Implementation\nDESCRIPTION: This code snippet shows the implementation of the `GetCaption` method. This string determines the node's name where the options frame is displayed and allows creating sub-pages using periods.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_187\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.GetCaption: **String**;\n\n**Begin**\n\nResult := 'IDE Help Helper.Options';\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetEnabled Method in Delphi\nDESCRIPTION: This method determines whether the menu item is enabled for the currently selected item in the IDE. This implementation always returns True, indicating that the menu item is always enabled. More complex logic could be added to dynamically enable or disable the menu based on context.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_163\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetEnabled: Boolean;\n\n**Begin**\n\nResult := True;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing DoNotification Procedure in Delphi\nDESCRIPTION: This code implements the `DoNotification` procedure, which adds a notification message to the IDE's dockable notification log. It takes a string message as input and uses the `AddNotification` method of `TfrmDockableIDENotifications` to add the notification, including the notifier type (`FNotification`) and the formatted message string.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_207\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure TDGHNotifierObject.DoNotification(strMessage: String);\n\nBegin\n\nTfrmDockableIDENotifications.AddNotification(\n\nFNotification,\n\nFNotifier + strMessage\n\n);\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Removing IOTAIDENotifier Instance in Delphi\nDESCRIPTION: This code snippet shows how to remove a registered `IOTAIDENotifier` instance from the IDE using the `IOTAServices.RemoveNotifier` method. It uses the integer reference (`FIDENotifier`) obtained during the creation process to identify the notifier to be removed.  Checking if `FIDENotifier` is greater than -1 ensures the notifier was properly created before attempting to remove it.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_211\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FIDENotifier &gt; -1 Then\n\n(BorlandIDEServices As IOTAServices).RemoveNotifier(FIDENotifier);\n```\n\n----------------------------------------\n\nTITLE: Editor Notifier Class Definition\nDESCRIPTION: This code defines a TEditorNotifier class that inherits from TNotifierObject and implements the INTAEditServicesNotifier interface. It includes method declarations for handling various editor events.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_50\n\nLANGUAGE: Delphi\nCODE:\n```\nTEditorNotifier = **Class**(TNotifierObject, INTAEditServicesNotifier)\n\n**Strict Private**\n\n**Strict Protected**\n\n**Public**\n\n**procedure** WindowShow(**const** EditWindow: INTAEditWindow; Show,\nLoadedFromDesktop: Boolean);\n\n**procedure** WindowNotification(**const** EditWindow: INTAEditWindow;\nOperation: TOperation);\n\n**procedure** WindowActivated(**const** EditWindow: INTAEditWindow);\n\n**procedure** WindowCommand(**const** EditWindow: INTAEditWindow;\nCommand, Param: Integer; **var** Handled: Boolean);\n\n**procedure** EditorViewActivated(**const** EditWindow: INTAEditWindow;\n**const** EditView: IOTAEditView);\n\n**procedure** EditorViewModified(**const** EditWindow: INTAEditWindow;\n**const** EditView: IOTAEditView);\n\n**procedure** DockFormVisibleChanged(**const** EditWindow: INTAEditWindow; DockForm: TDockableForm);\n\n**procedure** DockFormUpdated(**const** EditWindow: INTAEditWindow; DockForm: TDockableForm);\n\n**procedure** DockFormRefresh(**const** EditWindow: INTAEditWindow; DockForm: TDockableForm);\n\n**Constructor** Create;\n\n**Destructor** Destroy; **Override**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions for Delphi IDE Versions\nDESCRIPTION: These conditional definitions are used to handle code compatibility issues across different Delphi IDE versions (XE3 through XE7). They define specific compiler directives (D0002, D0003, etc.) based on the Delphi version (VER240, VER250, VER260, VER270, VER280) which are useful for conditional compilation.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_125\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF VER240}\n{$DEFINE D0002}\n{$DEFINE D0003}\n{$DEFINE D0004}\n{$DEFINE D0005}\n{$DEFINE D0006}\n{$DEFINE D0007}\n{$DEFINE D0008}\n{$DEFINE D2005}\n{$DEFINE D2006}\n{$DEFINE D2007}\n{$DEFINE D2009}\n{$DEFINE D2010}\n{$DEFINE DXE00}\n{$DEFINE DXE20}\n{$DEFINE DXE30}\n{$ENDIF}\n\n{$IFDEF VER250}\n{$DEFINE D0002}\n{$DEFINE D0003}\n{$DEFINE D0004}\n{$DEFINE D0005}\n{$DEFINE D0006}\n{$DEFINE D0007}\n{$DEFINE D0008}\n{$DEFINE D2005}\n{$DEFINE D2006}\n{$DEFINE D2007}\n{$DEFINE D2009}\n{$DEFINE D2010}\n{$DEFINE DXE00}\n{$DEFINE DXE20}\n{$DEFINE DXE30}\n{$DEFINE DXE40}\n{$ENDIF}\n\n{$IFDEF VER260}\n{$DEFINE D0002}\n{$DEFINE D0003}\n{$DEFINE D0004}\n{$DEFINE D0005}\n{$DEFINE D0006}\n{$DEFINE D0007}\n{$DEFINE D0008}\n{$DEFINE D2005}\n{$DEFINE D2006}\n{$DEFINE D2007}\n{$DEFINE D2009}\n{$DEFINE D2010}\n{$DEFINE DXE00}\n{$DEFINE DXE20}\n{$DEFINE DXE30}\n{$DEFINE DXE40}\n{$DEFINE DXE50}\n{$ENDIF}\n\n{$IFDEF VER270}\n{$DEFINE D0002}\n{$DEFINE D0003}\n{$DEFINE D0004}\n{$DEFINE D0005}\n{$DEFINE D0006}\n{$DEFINE D0007}\n{$DEFINE D0008}\n{$DEFINE D2005}\n{$DEFINE D2006}\n{$DEFINE D2007}\n{$DEFINE D2009}\n{$DEFINE D2010}\n{$DEFINE DXE00}\n{$DEFINE DXE20}\n{$DEFINE DXE30}\n{$DEFINE DXE40}\n{$DEFINE DXE50}\n{$DEFINE DXE60}\n{$ENDIF}\n\n{$IFDEF VER280}\n{$DEFINE D0002}\n{$DEFINE D0003}\n{$DEFINE D0004}\n{$DEFINE D0005}\n{$DEFINE D0006}\n{$DEFINE D0007}\n{$DEFINE D0008}\n{$DEFINE D2005}\n{$DEFINE D2006}\n{$DEFINE D2007}\n{$DEFINE D2009}\n{$DEFINE D2010}\n{$DEFINE DXE00}\n{$DEFINE DXE20}\n{$DEFINE DXE30}\n{$DEFINE DXE40}\n{$DEFINE DXE50}\n{$DEFINE DXE60}\n{$DEFINE DXE70}\n{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: Removing IOTAProjectFileStorageNotifier Delphi\nDESCRIPTION: Removes a previously added project file storage notifier from the IDE using the IOTAProjectFileStorage.RemoveNotifier method. It utilizes the integer obtained during the notifier's creation to ensure proper removal and prevent resource leaks.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_231\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FProjectFileStorageNotifier &gt; -1 Then\n\n(BorlandIDEServices As\nIOTAProjectFileStorage).RemoveNotifier(FProjectFileStorageNotifier);\n```\n\n----------------------------------------\n\nTITLE: FormCreate Event Handler\nDESCRIPTION: This code snippet shows how to create an instance of the options frame and insert it into a panel control within the form. The frame is aligned to fill the panel.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_180\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TfrmDGHIDEHelphelperConfig.FormCreate(Sender: TObject);\n\n**Begin**\n\nFFrame := TfmIDEHelpHelperOptions.Create(Self);\n\nFFrame.Parent := pnlFrame;\n\nFFrame.Align := alClient;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Create Dockable Module Explorer Class Procedure (Delphi)\nDESCRIPTION: This class procedure creates the dockable module explorer if it does not already exist. It checks if the `FormInstance` is assigned, and if not, calls `CreateDockableForm` to create a new instance of the form.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_141\n\nLANGUAGE: Delphi\nCODE:\n```\n**class procedure**\nTfrmDockableModuleExplorer.CreateDockableModuleExplorer;\n\n**begin**\n\n**If Not** Assigned(FormInstance) **Then**\n\nCreateDockableForm(FormInstance, TfrmDockableModuleExplorer);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Debugger Notifier Class Definition - Delphi OTA\nDESCRIPTION: Defines a class TDGHNotificationsDebuggerNotifier that inherits from TDGHNotifierObject, IOTANotifier, and several IOTADebuggerNotifier interfaces (versions 90, 100, and 110). This class implements methods for handling debugger events such as process creation/destruction, breakpoint changes, and memory modifications.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_242\n\nLANGUAGE: Delphi\nCODE:\n```\nType\n\tTDGHNotificationsDebuggerNotifier = Class(TDGHNotifierObject,\n\t\tIOTANotifier,\n\t\tIOTADebuggerNotifier, IOTADebuggerNotifier90, IOTADebuggerNotifier100,\n\t\tIOTADebuggerNotifier110)\n\tStrict Private\n\tStrict Protected\n\tPublic\n\t\t// IOTADebuggerNotifier\n\t\tProcedure ProcessCreated(Const Process: IOTAProcess);\n\t\tProcedure ProcessDestroyed(Const Process: IOTAProcess);\n\t\tProcedure BreakpointAdded(Const Breakpoint: IOTABreakpoint);\n\t\tProcedure BreakpointDeleted(Const Breakpoint: IOTABreakpoint);\n\t\t// IOTADebuggerNotifier90\n\t\tProcedure BreakpointChanged(Const Breakpoint: IOTABreakpoint);\n\t\tProcedure CurrentProcessChanged(Const Process: IOTAProcess);\n\t\tProcedure ProcessStateChanged(Const Process: IOTAProcess);\n\t\tFunction BeforeProgramLaunch(Const Project: IOTAProject): Boolean;\n\t\tProcedure ProcessMemoryChanged; Overload;\n\t\t// IOTADebuggerNotifier100\n\t\tProcedure DebuggerOptionsChanged;\n\t\t// IOTADebuggerNotifier110\n\t\tProcedure ProcessMemoryChanged(EIPChanged: Boolean); Overload;\n\tEnd;\n```\n\n----------------------------------------\n\nTITLE: Class Definition for the Delphi IDE Wizard\nDESCRIPTION: This Delphi code snippet defines the class structure for a Delphi IDE wizard (`TBlogOTAExampleWizard`). It includes private fields for storing settings (auto-save interval, prompt, INI file name), a timer, and a flag to indicate successful menu installation. It also declares procedures for saving modified files, loading/saving settings, installing the menu, and handling timer/menu events.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_15\n\nLANGUAGE: Delphi\nCODE:\n```\nTBlogOTAExampleWizard = **Class**(TInterfacedObject, IOTAWizard)\n\n**Private**\n\nFTimer : TTimer;\n\nFCounter : Integer;\n\nFAutoSaveInt : Integer;\n\nFPrompt : Boolean;\n\nFMenuItem : TMenuItem;\n\nFINIFileName : **String**;\n\nFSucceeded : Boolean; *// New*\n\n**Procedure** SaveModifiedFiles;\n\n**Procedure** LoadSettings;\n\n**Procedure** SaveSettings;\n\n**Procedure** InstallMenu; *// New*\n\n**Procedure** TimerEvent(Sender : TObject);\n\n**Procedure** MenuClick(Sender : TObject);\n\n**Protected**\n\n**procedure** Execute;\n\n**function** GetIDString: **string**;\n\n**function** GetName: **string**;\n\n**function** GetState: TWizardState;\n\n**procedure** AfterSave;\n\n**procedure** BeforeSave;\n\n**procedure** Destroyed;\n\n**procedure** Modified;\n\n**Public**\n\n**Constructor** Create;\n\n**Destructor** Destroy; **Override**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing Wizard Interface Delphi\nDESCRIPTION: This snippet demonstrates removing a wizard interface during finalization. It checks if the wizard index is greater than `iWizardFailState` (which is -1) to ensure the wizard was properly initialized before attempting to remove it using `IOTAWizardServices.RemoveWizard`. This avoids errors when the package is unloaded.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_91\n\nLANGUAGE: Delphi\nCODE:\n```\nIf iWizardIndex > iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAWizardServices).RemoveWizard(iWizardIndex);\n```\n\n----------------------------------------\n\nTITLE: Editor View Modified Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is fired each time the text of the file is changed.  The parameters are the same as those for the EditorViewActivated method, providing access to the editor window (EditWindow) and the view of the file (EditView).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_238\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure EditorViewModified(const EditWindow: INTAEditWindow; const\nEditView: IOTAEditView)\n```\n\n----------------------------------------\n\nTITLE: Initializing TModuleCreatorFile in Delphi\nDESCRIPTION: This constructor initializes the TModuleCreatorFile class with project wizard information and the specific type of module being created. It takes TProjectWizardInfo and TAdditionalModule as input and assigns them to the corresponding class fields for later use in source code generation.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_111\n\nLANGUAGE: Delphi\nCODE:\n```\n**constructor** TModuleCreatorFile.Create(ProjectWizardInfo : TProjectWizardInfo;\n\nAdditionalModule : TAdditionalModule);\n\n**begin**\n\nFProjectWizardInfo := ProjectWizardInfo;\n\nFAdditionalModule := AdditionalModule;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Window Command Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is fired for editor keyboard commands. The 'Command' parameter represents the command number, and 'Param' is typically 0. This event isn't fired for OTA keyboard bindings.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_236\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure WindowCommand(const EditWindow: INTAEditWindow; Command,\nParam: Integer; var Handled: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Wizard Initialisation Function\nDESCRIPTION: This Delphi function `InitialiseWizard` creates an instance of the `TBlogOTAExampleWizard` class, casts `BIDES` to `IOTAServices` to obtain the parent handle, and assigns the application handle. It returns the created wizard instance, serving as a central point for both DLL and Package loading methods.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_8\n\nLANGUAGE: Delphi\nCODE:\n```\nFunction InitialiseWizard(BIDES : IBorlandIDEServices) :\nTBlogOTAExampleWizard;\nBegin\nResult := TBlogOTAExampleWizard.Create;\nApplication.Handle := (BIDES As IOTAServices).GetParentHandle;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Focus the Module Explorer (Delphi)\nDESCRIPTION: This procedure focuses the module explorer within the dockable form. It checks if the `FModuleExplorerFrame` and its `Explorer` component are visible, and if so, sets the focus to the `Explorer` component. This ensures that the module explorer receives user input when the dockable form is activated.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_140\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TfrmDockableModuleExplorer.Focus;\n\n**begin**\n\n**If** FModuleExplorerFrame &lt;&gt; **Nil Then**\n\n**If** FModuleExplorerFrame.Visible **Then**\n\n**If** FModuleExplorerFrame.Explorer.Visible **Then**\n\nFModuleExplorerFrame.Explorer.SetFocus;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Removing IOTAMessageNotifier Delphi\nDESCRIPTION: Removes a previously added message notifier from the IDE using the IOTAMessageServices.RemoveNotifier method. It uses the integer value that was returned during the notifier's creation. This ensures proper cleanup and prevents memory leaks.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_228\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FMessageNotfier &gt; -1 Then\n\n(BorlandIDEServices As\nIOTAMessageServices).RemoveNotifier(FMessageNotfier);\n```\n\n----------------------------------------\n\nTITLE: GetFileName Implementation in Delphi\nDESCRIPTION: This function must return a fully qualified path for the module's file name. It uses a case statement to determine the correct file extension based on the project type (ptPackage or ptDLL). FProjectType and FProjectName are assumed to be class members.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_103\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetFileName: **String**;\n\n**begin**\n\n**Case** FProjectType **Of**\n\nptPackage: Result := GetCurrentDir + '\\\\' + FProjectName + '.dpk';\n\nptDLL: Result := GetCurrentDir + '\\\\' + FProjectName + '.dpr';\n\n**Else**\n\n**Raise** Exception.Create('Unhandled project type in\nTProjectCreator.GetFileName.');\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Removing Aboutbox Plugin in Delphi\nDESCRIPTION: This code snippet demonstrates how to remove the Aboutbox plugin when the expert/wizard is finalized, specifically within the `Finalization` section of the module. It uses the index of the plugin stored in the `iAboutPluginIndex` variable to remove it using `IOTAAboutBoxServices.RemovePluginInfo`.  It is wrapped in a Delphi 2005 conditional compilation directive.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_65\n\nLANGUAGE: Delphi\nCODE:\n```\n**Finalization**\n**{$IFDEF D2005}**\n// Remove Aboutbox Plugin **Interface**\n**If** iAboutPluginIndex &gt; 0 **Then**\n(BorlandIDEServices **As**\nIOTAAboutBoxServices).RemovePluginInfo(iAboutPluginIndex);\n**{$ENDIF}**\n**End**.\n```\n\n----------------------------------------\n\nTITLE: Removing Version Control Notifier (Delphi)\nDESCRIPTION: This snippet shows how to remove a previously registered version control notifier from the IDE using the IOTAVersionControlServices.RemoveNotifier method.  It uses the integer returned when the notifier was added.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_220\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FVersionControlNotifier &gt; -1 Then\n(BorlandIDEServices As\nIOTAVersionControlServices).RemoveNotifier(FVersionControlNotifier);\n```\n\n----------------------------------------\n\nTITLE: Package Wizard Unregistration\nDESCRIPTION: This Delphi code snippet unregisters the wizard from the IDE during the unit's finalization section. It checks if `iWizard` is greater than zero, indicating that the wizard was registered as a package. If so, it casts `BorlandIDEServices` to `IOTAWizardServices` and calls `RemoveWizard` with the stored `iWizard` integer to remove the wizard, freeing its resources from the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_11\n\nLANGUAGE: Delphi\nCODE:\n```\nInitialization\nFinalization\nIf iWizard > 0 Then\n(BorlandIDEServices As IOTAWizardServices).RemoveWizard(iWizard);\nEnd.\n```\n\n----------------------------------------\n\nTITLE: InitWizard Function for DLLs Delphi\nDESCRIPTION: Defines the InitWizard function required for DLL-based add-ins. This function is exported to allow the IDE to initialize the DLL and register the wizard.  BorlandIDEServices provides access to IDE functionalities.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_5\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** InitWizard(**Const** BorlandIDEServices :\nIBorlandIDEServices;\n\nRegisterProc : TWizardRegisterProc;\n\n**Var** Terminate : TWizardTerminateProc) : Boolean; **StdCall**;\n\n**Begin**\n\nInitialiseWizard;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Splash Screen Icon Handling and Version Check in Delphi\nDESCRIPTION: This Delphi code snippet demonstrates how to handle different splash screen icon sizes based on the Delphi IDE version (2005/6 vs. 2007+). It loads different bitmap resources ('SplashScreen48' and 'SplashScreen24') and uses conditional compilation directives (`{$IFDEF D2005}`, `{$IFDEF D2007}`, `{$ELSE}`, `{$ENDIF}`) to select the appropriate icon for the splash screen and about box, ensuring compatibility across different IDE versions. It also showcases integration with IDE services for adding plugin information and splash screen bitmaps.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_195\n\nLANGUAGE: Delphi\nCODE:\n```\n**Constructor** TDGHPackageViewerWizard.Create;\n\n**Begin**\n\n**{$IFDEF D2005}**\n\nFAboutPluginIndex := -1;\n\nBuildNumber(FVersionInfo);\n\nFSplashScreen48 := LoadBitmap(hInstance, 'SplashScreen48');\n\n**With** FVersionInfo **Do**\n\nFAboutPluginIndex := (BorlandIDEServices **As**\nIOTAAboutBoxServices).AddPluginInfo(\n\nFormat(strSplashScreenName, \\[iMajor, iMinor, Copy(strRevision, iBugFix\n+ 1, 1),\n\nApplication.Title\\]),\n\n'An IDE Expert to allow you to browse the loaled packages in the IDE.',\n\nFSplashScreen48,\n\nFalse,\n\nFormat(strSplashScreenBuild, \\[iMajor, iMinor, iBugfix, iBuild\\]),\n\nFormat('SKU Build %d.%d.%d.%d', \\[iMajor, iMinor, iBugfix, iBuild\\]));\n\nFSplashScreen24 := LoadBitmap(hInstance, 'SplashScreen24');\n\n**With** FVersionInfo **Do**\n\n(SplashScreenServices **As** IOTASplashScreenServices).AddPluginBitmap(\n\nFormat(strSplashScreenName, \\[iMajor, iMinor, Copy(strRevision, iBugFix\n+ 1, 1),\n\nApplication.Title\\]),\n\n**{$IFDEF D2007}**\n\nFSplashScreen24, // 2007 **and** above\n\n**{$ELSE}**\n\nFSplashScreen48, // 2006 ONLY\n\n**{$ENDIF}**\n\nFalse,\n\nFormat(strSplashScreenBuild, \\[iMajor, iMinor, iBugfix, iBuild\\]));\n\n**{$ENDIF}**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Creating a TProjectManagerMenu Constructor in Delphi\nDESCRIPTION: This constructor initializes a TProjectManagerMenu object, storing a reference to the main wizard object. The Wizard parameter (TTestingHelperWizard) allows the menu to call methods of the associated wizard, providing access to wizard-specific functionality.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_156\n\nLANGUAGE: Delphi\nCODE:\n```\n**Constructor** TProjectManagerMenu.Create(Wizard:\nTTestingHelperWizard);\n\n**Begin**\n\nFWizard := Wizard;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing IDE Notifier Interface Delphi\nDESCRIPTION: This snippet removes the IDE notifier interface if it has been created, indicated by the check against `iWizardFailState`. The `IOTAServices.RemoveNotifier` method is used to remove the interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_94\n\nLANGUAGE: Delphi\nCODE:\n```\nIf iIDENotfierIndex > iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAServices).RemoveNotifier(iIDENotfierIndex);\n```\n\n----------------------------------------\n\nTITLE: Register Procedure for Packages Delphi\nDESCRIPTION: Defines the Register procedure required for package-based add-ins.  This procedure is called by the IDE to register the wizard. Note that the name 'Register' is case-sensitive.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_7\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** Register;\n\n**Begin**\n\nInitialiseWizard;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Unloading Project Repository Wizard Delphi\nDESCRIPTION: This snippet shows how to properly remove a project repository wizard during package unloading. It checks if the wizard index is valid (not zero) before attempting to remove it using the `IOTAWizardServices` interface.  It's crucial to avoid crashes on package recompile.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_84\n\nLANGUAGE: Delphi\nCODE:\n```\nIf iRepositoryWizardIndex <> 0 Then\n\t(BorlandIDEServices As\n\tIOTAWizardServices).RemoveWizard(iRepositoryWizardIndex);\n```\n\n----------------------------------------\n\nTITLE: Finalizing Options Frame Data in Delphi\nDESCRIPTION: The `FinaliseFrame` procedure retrieves data from the options frame and assigns it to string lists and an integer representing the selected search URL. It iterates through the listboxes and identifies the checked search URL.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_179\n\nLANGUAGE: Delphi/Pascal\nCODE:\n```\n**Procedure** TfmIDEHelpHelperOptions.FinaliseFrame(slSearchURLs,\n\nslPermanentURLs: TStringList; **Var** iSearchURL: Integer);\n\n**Var**\n\ni: Integer;\n\n**Begin**\n\nslSearchURLs.Assign(lbxSearchURLs.Items);\n\nslPermanentURLs.Assign(lbxPermanentURLs.Items);\n\niSearchURL := -1;\n\n**For** i := 0 **To** lbxSearchURLs.Items.Count - 1 **Do**\n\n**If** lbxSearchURLs.Checked[i] **Then**\n\n**Begin**\n\niSearchURL := i;\n\nBreak;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Deleted Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when a breakpoint is deleted. The 'Breakpoint' parameter provides access to the deleted breakpoint's properties.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_248\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure BreakpointDeleted(const Breakpoint: IOTABreakpoint)\n```\n\n----------------------------------------\n\nTITLE: Removing Editor Notifier\nDESCRIPTION: This code shows how to remove the editor notifier from the IDE using the RemoveNotifier method of the IOTAEditorServices interface during finalization.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_52\n\nLANGUAGE: Delphi\nCODE:\n```\n...\n\n**Initialization**\n\n...\n\n**Finalization**\n\n...\n\n(BorlandIDEServices **As** IOTAEditorServices).RemoveNotifier(iEditorIndex);\n\n...\n\n**End**.\n```\n\n----------------------------------------\n\nTITLE: Removing IDE Insight Notifier (Delphi)\nDESCRIPTION: This snippet shows how to remove an IDE Insight notifier using IOTAIDEInsightService.RemoveNotifier and the integer obtained when the notifier was created.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_226\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FIDEInsightNotifier &gt; -1 Then\n(BorlandIDEServices As\nIOTAIDEInsightService).RemoveNotifier(FIDEInsightNotifier);\n```\n\n----------------------------------------\n\nTITLE: Remove Dockable Module Explorer Class Procedure (Delphi)\nDESCRIPTION: This class procedure removes the dockable module explorer, freeing the associated memory. It calls `FreeDockableForm` to unregister and free the `FormInstance`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_142\n\nLANGUAGE: Delphi\nCODE:\n```\n**class procedure**\nTfrmDockableModuleExplorer.RemoveDockableModuleExplorer;\n\n**begin**\n\nFreeDockableForm(FormInstance);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Removing Debugger Notifier - Delphi OTA\nDESCRIPTION: Removes a debugger notifier from the IDE using the IOTADebuggerServices.RemoveNotifier method. It passes the integer stored from the notifier's creation (FDebuggerNotifier).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_244\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FDebuggerNotifier &gt; -1 Then\n\t(BorlandIDEServices As\n\tIOTADebuggerServices).RemoveNotifier(FDebuggerNotifier);\n```\n\n----------------------------------------\n\nTITLE: Generating Initialization Code for Wizards in Delphi\nDESCRIPTION: This function, GetInitialiseWizardCode, generates the code required to create the selected wizards in the IDE during the initialization phase of the module. It checks for various interface types (Keyboard Binding, IDE Notifier, Compiler Notifier, Editor Notifier, Repository Wizard) and generates code to add them using the BorlandIDEServices interface if they are present in the FProjectWizardInfo.FAdditionalModules set.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_116\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetInitialiseWizardCode: **String**;\n\n**begin**\n\n**If** amKeyboardBindingInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Create Keyboard Binding Interface'#13#10 +\n\n' iKeyBindingIndex := (BorlandIDEServices As IOTAKeyboardServices).AddKeyboardBinding('#13#10 +\n\n' TKeybindingTemplate.Create);'#13#10;\n\n**If** amIDENotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Create IDE Notifier Interface'#13#10 +\n\n' iIDENotfierIndex := (BorlandIDEServices As IOTAServices).AddNotifier('#13#10 +\n\n' TIDENotifierTemplate.Create);'#13#10;\n\n**If** amCompilerNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D2010}'#13#10 +\n\n' // Create Compiler Notifier Interface'#13#10 +\n\n' iCompilerIndex := (BorlandIDEServices As IOTACompileServices).AddNotifier('#13#10 +\n\n' TCompilerNotifier.Create);'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amEditorNotifierInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' {$IFDEF D2005}'#13#10 +\n\n' // Create Editor Notifier Interface'#13#10 +\n\n' iEditorIndex := (BorlandIDEServices As IOTAEditorServices).AddNotifier('#13#10 +\n\n' TEditorNotifier.Create);'#13#10 +\n\n' {$ENDIF}'#13#10;\n\n**If** amRepositoryWizardInterface **In**\nFProjectWizardInfo.FAdditionalModules **Then**\n\nResult := Result +\n\n' // Create Project Repository Interface'#13#10 +\n\n' iRepositoryWizardIndex := (BorlandIDEServices As IOTAWizardServices).AddWizard('#13#10 +\n\n' TRepositoryWizardInterface.Create);'#13#10;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Finalizing OTA Actions Collection\nDESCRIPTION: This snippet shows the initialization and finalization sections of a Delphi unit that manages actions added to the IDE via the Open Tools API. During initialization, a `TObjectList` named `FOTAActions` is created to store the actions. During finalization, the `RemoveToolbarButtonsAssociatedWithActions` procedure is called to remove any toolbar buttons associated with these actions, and then the `FOTAActions` list is freed, also freeing the actions it contains because the list is created with the `ownsObjects` parameter set to `True`.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_124\n\nLANGUAGE: Delphi\nCODE:\n```\n**Initialization**\n\nFOTAActions := TObjectList.Create(True);\n\n**Finalization**\n\nRemoveToolbarButtonsAssociatedWithActions;\n\nFOTAActions.Free;\n```\n\n----------------------------------------\n\nTITLE: Clearing Messages in Delphi\nDESCRIPTION: This procedure clears specific types of messages (compiler, search, tool) from the IDE's message window. It uses an enumerate and a set to define which messages to clear. It requires the IOTAMessageServices interface. The `TClearMessage` type defines the message types, and `TClearMessages` is a set of those types.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_22\n\nLANGUAGE: Delphi\nCODE:\n```\n**Type**\n*(\\*\\* This is an enumerate for the types of messages that can be\ncleared. \\*\\*)*\nTClearMessage = (cmCompiler, cmSearch, cmTool);\n*(\\*\\* This is a set of messages that can be cleared. \\*\\*)*\nTClearMessages = **Set of** TClearMessage;\n**Procedure** ClearMessages(Msg : TClearMessages);\n**Begin**\n**If** cmCompiler **In** Msg **Then**\n(BorlandIDEServices **As** IOTAMessageServices).ClearCompilerMessages;\n**If** cmSearch **In** Msg **Then**\n(BorlandIDEServices **As** IOTAMessageServices).ClearSearchMessages;\n**If** cmTool **In** Msg **Then**\n(BorlandIDEServices **As** IOTAMessageServices).ClearToolMessages;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing Project Repository Wizard Interface Delphi\nDESCRIPTION: This snippet removes the project repository wizard interface, using `IOTAWizardServices.RemoveWizard`. The check against `iWizardFailState` ensures a valid index to avoid errors when the package unloads or recompiles.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_97\n\nLANGUAGE: Delphi\nCODE:\n```\nIf iRepositoryWizardIndex <> iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAWizardServices).RemoveWizard(iRepositoryWizardIndex);\n```\n\n----------------------------------------\n\nTITLE: InitWizard Export for DLLs Delphi\nDESCRIPTION: Exports the InitWizard function so that the IDE can find and call it.  WizardEntryPoint is an alias for InitWizard.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_6\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** InitWizard(**Const** BorlandIDEServices :\nIBorlandIDEServices;\n\nRegisteProc : TWizardRegisterProc;\n\n**Var** Terminate : TWizardTerminateProc) : Boolean; **StdCall**;\n\n**Exports**\n\nInitWizard **Name** WizardEntryPoint;\n```\n\n----------------------------------------\n\nTITLE: GetHelpContext Implementation\nDESCRIPTION: This code snippet shows the implementation of the `GetHelpContext` method. Returning 0 indicates that there is no help context associated with the options page.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_189\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.GetHelpContext: Integer;\n\n**Begin**\n\nResult := 0;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables for Aboutbox and Splash Screen Information in Delphi\nDESCRIPTION: These global variables are declared to hold information common between the about box plugin and the splash screen. These include VersionInfo (of type TVersionInfo), a bitmap handle (bmSplashScreen), and an integer to store the index of the About plugin (iAboutPluginIndex). The variables are declared in the implementation section so that they are available to the Initialization section of the module.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_60\n\nLANGUAGE: Delphi\nCODE:\n```\n**Implementation**\n...\n**Var**\n**{$IFDEF D2005}**\nVersionInfo : TVersionInfo;\nbmSplashScreen : HBITMAP;\niAboutPluginIndex : Integer = 0;\n**{$ENDIF}**\n...\n```\n\n----------------------------------------\n\nTITLE: Dock Form Updated Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that seems to be fired when a dockable form is docked with an Edit Window dock site. The parameters are the same as those for DockFormVisibleChanged: the edit window (EditWindow) and the dockable form (DockForm).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_240\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure DockFormUpdated(const EditWindow: INTAEditWindow; DockForm:\nTDockableForm)\n```\n\n----------------------------------------\n\nTITLE: WindowShow Implementation\nDESCRIPTION: An example of the WindowShow method. This event is triggered each time an editor window appears or disappears.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_58\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.WindowShow(**const** EditWindow:\nINTAEditWindow; Show, LoadedFromDesktop: Boolean);\n```\n\n----------------------------------------\n\nTITLE: After Compile Procedure Delphi (IOTAIDENotifier50)\nDESCRIPTION: This procedure `AfterCompile` in `IOTAIDENotifier50` is similar to the one in `IOTAIDENotifier`, but it includes an `IsCodeInsight` parameter. This parameter indicates whether the compiler was invoked due to a CodeInsight compile. The `Succeeded` parameter indicates whether the compilation was successful.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_216\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure AfterCompile(Succeeded: Boolean; IsCodeInsight: Boolean); overload;\n```\n\n----------------------------------------\n\nTITLE: Defining Notifier Constants in Delphi\nDESCRIPTION: This code defines constant arrays for colors and labels associated with each notifier type.  The `iNotificationColours` array maps each `TDGHIDENotification` value to a TColor, while `strNotificationLabel` maps each enumeration to a descriptive string. These constants are used to customize the appearance and description of notifications within the IDE's log.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_205\n\nLANGUAGE: Delphi\nCODE:\n```\nConst\n\niNotificationColours: Array [Low(TDGHIDENotification) ..\nHigh(TDGHIDENotification)] Of\n\nTColor = (\n\nclTeal,\n\nclAqua,\n\nclMaroon,\n\nclRed,\n\nclNavy,\n\nclBlue,\n\nclOlive,\n\nclYellow,\n\nclGreen,\n\n//clLime // not used as its the BitMap mask colour\n\nclPurple\n\n);\n\nstrBoolean: Array [Low(False) .. High(True)] Of String = ('False',\n'True');\n\nstrNotificationLabel: Array [Low(TDGHIDENotification) ..\nHigh(TDGHIDENotification)] Of\n\nString = (\n\n'Wizard Notifications',\n\n'Menu Wizard Notifications',\n\n'IDE Notifications',\n\n'Version Control Notifications',\n\n'Compile Notifications',\n\n'Message Notifications',\n\n'IDE Insight Notifications',\n\n'Project File Storage Notifications',\n\n'Editor Notifications',\n\n'Debugger Notifications'\n\n);\n```\n\n----------------------------------------\n\nTITLE: Wizard Type Declaration Pascal\nDESCRIPTION: This type declaration defines an enumeration for distinguishing between package wizards and DLL wizards. This is crucial for correctly initializing and registering wizards within the IDE.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_80\n\nLANGUAGE: Pascal\nCODE:\n```\n**Type**\nTWizardType = (wtPackageWizard, wtDLLWizard);\n```\n\n----------------------------------------\n\nTITLE: Querying for IOTAElideActions Interface\nDESCRIPTION: This snippet demonstrates how to query for the IOTAElideActions interface from the IOTAEditView interface to access code folding and unfolding functionality. The code is conditionally compiled for Delphi 2006.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_49\n\nLANGUAGE: Delphi\nCODE:\n```\nEV := (BorlandIDEServices **As** IOTAEditorServices).TopView;\n\n**{$IFDEF D2006}**\n\nEV.QueryInterface(IOTAElideActions, EA);\n\n**{$ENDIF}**\n\nC.Col := iIdentCol;\n\nC.Line := iIdentLine;\n\n**{$IFDEF D2006}**\n\n**If** EA &lt;&gt; **Nil Then**\n\nEA.UnElideNearestBlock;\n\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: Removing Editor Notifier Interface Delphi\nDESCRIPTION: This code removes the editor notifier interface. `IOTAEditorServices.RemoveNotifier` is called to remove it, but only after verifying that the index is valid by checking against `iWizardFailState`. This snippet is specific to Delphi 2005.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_96\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF D2005}\n\t\t\t\t*// Remove Editor Notifier Interface*\n\t\t\t\tIf iEditorIndex <> iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAEditorServices).RemoveNotifier(iEditorIndex);\n\t\t\t\t{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: Finalization: Removing Dockable Module Explorer (Pascal)\nDESCRIPTION: This section removes the dockable form during finalization. `TfrmDockableModuleExplorer.RemoveDockableModuleExplorer` is called to ensure proper cleanup when the module unloads.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_151\n\nLANGUAGE: Pascal\nCODE:\n```\n**Finalization**\n\n...\n\nTfrmDockableModuleExplorer.RemoveDockableModuleExplorer\n\n**End**.\n```\n\n----------------------------------------\n\nTITLE: Gemini API Method Name\nDESCRIPTION: Specifies the method to be used for content generation within the Gemini API. The 'generateContent' method is responsible for taking a prompt and generating a response from the specified model.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/GeminiAI Specs.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\ngenerateContent\n```\n\n----------------------------------------\n\nTITLE: Implementing SetName Method in Delphi\nDESCRIPTION: This method sets the name of the menu item. An empty implementation suggests the name is set during creation and not modifiable at runtime.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_173\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetName(**Const** Value: **String**);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing Keyboard Binding Interface Delphi\nDESCRIPTION: This snippet removes the keyboard binding interface.  It checks if `iKeyBindingIndex` is greater than `iWizardFailState` before proceeding with the removal to prevent errors during finalization. `IOTAKeyboardServices.RemoveKeyboardBinding` is called to remove the interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_93\n\nLANGUAGE: Delphi\nCODE:\n```\nIf iKeyBindingIndex > iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAKeyboardServices).RemoveKeyboardBinding(iKeyBindingIndex);\n```\n\n----------------------------------------\n\nTITLE: Implementing Modified Method in Delphi\nDESCRIPTION: This method is called when the associated item is modified in some way within the Delphi IDE. As part of the IOTANotifier interface, it provides a hook for responding to item modifications. It's noted that this method is not called for IOTAWizards and its applicability to other contexts is uncertain.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_158\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TProjectManagerMenu.Modified;\n\n**Begin**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Added Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when a breakpoint is added. The 'Breakpoint' parameter provides access to the newly created breakpoint's properties.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_247\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure BreakpointAdded(const Breakpoint: IOTABreakpoint)\n```\n\n----------------------------------------\n\nTITLE: NewOptionSource Implementation in Delphi\nDESCRIPTION: This function allows specifying information in the options file by returning an IOTAFile interface. It is related to the GetOptionFileName method. This example returns Nil, indicating no specific option source. ProjectName parameter is passed but unused.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_107\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.NewOptionSource(**const** ProjectName:\n**String**): IOTAFile;\n\n**begin**\n\nResult := **Nil**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetPosition Method in Delphi\nDESCRIPTION: This method returns the position of the menu item within its parent menu, stored in the FPosition field. This controls the order in which the menu item appears within the parent menu's list of items.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_167\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetPosition: Integer;\n\n**Begin**\n\nResult := FPosition;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing Aboutbox Plugin Interface Delphi\nDESCRIPTION: This code removes the Aboutbox plugin interface during finalization. The index is verified against `iWizardFailState` before the removal to prevent errors. It calls `IOTAAboutBoxServices.RemovePluginInfo` to remove the associated plugin info. It is specific to Delphi 2005.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_92\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF D2005}\n\t\t\t\t*// Remove Aboutbox Plugin Interface*\n\t\t\t\tIf iAboutPluginIndex > iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTAAboutBoxServices).RemovePluginInfo(iAboutPluginIndex);\n\t\t\t\t{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: Dock Form Visible Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that seems to be fired when desktops are loaded.  It takes the edit window (EditWindow) and the dockable form (DockForm) as parameters, indicating the docking operation is being docked to the EditWindow (dock site).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_239\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure DockFormVisibleChanged(const EditWindow: INTAEditWindow;\nDockForm: TDockableForm)\n```\n\n----------------------------------------\n\nTITLE: Timer Event Handler for Auto-Saving in Delphi\nDESCRIPTION: This Delphi code snippet implements a timer event handler that increments a counter and triggers the `SaveModifiedFiles` procedure when the counter exceeds a specified interval. It also resets the counter after saving.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_12\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TBlogOTAExampleWizard.TimerEvent(Sender: TObject);\n\n**begin**\n\nInc(FCounter);\n\n**If** FCounter &gt;= FAutoSaveInt **Then**\n\n**Begin**\n\nFCounter := 0;\n\nSaveModifiedFiles;\n\n**End**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: IDE Insight Notifier Definition (Delphi)\nDESCRIPTION: Defines the structure of an IDE Insight notifier, inheriting from TDGHNotifierObject and implementing IOTAIDEInsightNotifier and IOTAIDEInsightNotifier150 (conditionally compiled). It includes methods for requesting and releasing items for the IDE Insight dialogue.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_224\n\nLANGUAGE: Delphi\nCODE:\n```\nType\nTDGHIDENotificationsIDEInsightNotifier = Class(TDGHNotifierObject,\nIOTAIDEInsightNotifier {$IFDEF DXE00}, IOTAIDEInsightNotifier150\n{$ENDIF})\nStrict Private\nStrict Protected\nPublic\n// IOTAIDEInsightNotifier\nProcedure RequestingItems(IDEInsightService: IOTAIDEInsightService;\nContext: IInterface);\n{$IFDEF DXE00}\n// IOTAIDEInsightNotifier150\nProcedure ReleaseItems(Context: IInterface);\n{$ENDIF}\nEnd;\n```\n\n----------------------------------------\n\nTITLE: WindowNotification Implementation\nDESCRIPTION: An example of the WindowNotification method. This event is triggered for each editor window that is opened or closed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_57\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.WindowNotification(**const** EditWindow:\nINTAEditWindow; Operation: TOperation);\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called after an existing breakpoint has changed. The 'Breakpoint' parameter provides access to the changed breakpoint's properties.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_249\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure BreakpointChanged(const Breakpoint: IOTABreakpoint)\n```\n\n----------------------------------------\n\nTITLE: Output Text Procedure Pascal\nDESCRIPTION: This procedure handles the output of text to the code editor, accounting for different Delphi versions (Unicode vs. non-Unicode). It uses conditional compilation (`{$IFNDEF D2009}`) to determine the appropriate method for inserting text using the `IOTAEditWriter` interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_78\n\nLANGUAGE: Pascal\nCODE:\n```\n**Procedure** OutputText(Writer : IOTAEditWriter; iIndent : Integer;\nstrText : **String**);\n**Begin**\n**{$IFNDEF D2009}**\nWriter.Insert(PAnsiChar(StringOfChar(#32, iIndent) + strText));\n**{$ELSE}**\nWriter.Insert(PAnsiChar(AnsiString(StringOfChar(#32, iIndent) +\nstrText)));\n**{$ENDIF}**\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetHelpContext Method in Delphi\nDESCRIPTION: This method returns the help context integer for the menu item. The implementation returns 0, which suggests the lack of custom help integration. Implementing custom help would require intercepting the IDE's help system and redirecting it to a custom help file.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_164\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetHelpContext: Integer;\n\n**Begin**\n\nResult := 0;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Including Resource File in Delphi Module\nDESCRIPTION: This code shows how to include a resource file (`SplashScreenIcon.res`) in the main wizard/expert module. The resource file contains the bitmap to be displayed on the splash screen and in the About dialog.  The bitmap can be added directly, or the resource file can be created from a .RC file.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_62\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$R '..\\\\SplashScreenIcon.res' '..\\\\SplashScreenIcon.RC'}**\n```\n\n----------------------------------------\n\nTITLE: Process Destroyed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when a process is destroyed. The 'Process' parameter provides access to the process that has been destroyed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_246\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure ProcessDestroyed(const Process: IOTAProcess)\n```\n\n----------------------------------------\n\nTITLE: IncludeInIDEInsight Implementation\nDESCRIPTION: This code snippet shows the implementation of the `IncludeInIDEInsight` method. Returning True allows the IDE's Insight search to find controls within the frame.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_190\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.IncludeInIDEInsight:\nBoolean;\n\n**Begin**\n\nResult := True;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing SetChecked Method in Delphi\nDESCRIPTION: This method sets the checked state of the menu item. The provided code contains an empty implementation, suggesting the checked state cannot be modified after creation.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_170\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetChecked(Value: Boolean);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Dock Form Refresh Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that seems to be fired when the IDE is closing down and the desktop is being saved. The parameters are the same as those for DockFormVisibleChanged: the edit window (EditWindow) and the dockable form (DockForm).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_241\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure DockFormRefresh(const EditWindow: INTAEditWindow; DockForm:\nTDockableForm)\n```\n\n----------------------------------------\n\nTITLE: Registering Options Frame\nDESCRIPTION: This code snippet shows how to register and unregister the `INTAAddInOptions` interface with the IDE using the `INTAEnvironmentOptionsServices` service.  It's crucial to only set the frame interface reference to Nil when destroying the wizard, not free it.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_192\n\nLANGUAGE: Delphi\nCODE:\n```\n**Constructor** TWizardTemplate.Create;\n\n**Begin**\n\nFOpFrame := TIDEHelpHelperIDEOptionsInterface.Create;\n\n(BorlandIDEServices **As**\nINTAEnvironmentOptionsServices).RegisterAddInOptions(FOpFrame);\n\n**End**;\n\n**Destructor** TWizardTemplate.Destroy;\n\n**Begin**\n\n(BorlandIDEServices **As**\nINTAEnvironmentOptionsServices).UnregisterAddInOptions(FOpFrame);\n\nFOpFrame := **Nil**;\n\n**Inherited** Destroy;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetName Method in Delphi\nDESCRIPTION: This method returns the name of the menu item, which is stored in the FName field. If an empty string is returned, the IDE automatically generates a name for the menu item. A custom name can be specified to programmatically identify the menu item.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_165\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetName: **String**;\n\n**Begin**\n\nResult := FName;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.GetFileName Implementation (Delphi)\nDESCRIPTION: This function overrides the GetFileName method. It returns an empty string, effectively preventing the custom message from being associated with any particular file when clicked. This means double-clicking the message will have no effect in terms of navigating to a file.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_38\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TDGHCustomMessage.GetFileName: **string**;\n\n**begin**\n\nResult := '';\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Showing the Dockable Module Explorer (Pascal)\nDESCRIPTION: This procedure is associated with a menu item. When the menu item is clicked, it calls the `ShowDockableModuleExplorer` method to display the module explorer. `Sender` parameter refers to the menu item that triggered the event.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_148\n\nLANGUAGE: Pascal\nCODE:\n```\n**Procedure** TBrowseAndDocItWizard.ModuleExplorerClick(Sender:\nTObject);\n\n**Begin**\n\nTfrmDockableModuleExplorer.ShowDockableModuleExplorer;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: EditorViewModified Implementation\nDESCRIPTION: An example of the EditorViewModified method. This event is triggered each time the text of the file is changed, either by insertion or deletion.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_54\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.EditorViewModified(**const** EditWindow:\nINTAEditWindow; **const** EditView: IOTAEditView);\n```\n\n----------------------------------------\n\nTITLE: WindowCommand Implementation\nDESCRIPTION: An example of the WindowCommand method. This event is triggered for some keyboard commands, however its behavior seems unpredictable.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_56\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.WindowCommand(**const** EditWindow:\nINTAEditWindow; Command, Param: Integer; **var** Handled: Boolean);\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.ShowHelp Implementation (Delphi)\nDESCRIPTION: This procedure overrides the ShowHelp method.  The implementation is intentionally empty, causing the custom message to not display any help information when triggered.  The comment indicates this is to prevent source code browsing on message clicks.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_41\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TDGHCustomMessage.ShowHelp;\n\n**begin**\n\n*//* \n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: INTAAddInOptions Interface Definition\nDESCRIPTION: This code snippet shows the interface definition of `INTAAddInOptions`. It defines the methods required to integrate an options frame into the Delphi IDE. This is a native interface (IUnknown).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_182\n\nLANGUAGE: Delphi\nCODE:\n```\nINTAAddInOptions = **interface**(IUnknown)\n\n['{4B348F3E-6D01-4D88-A565-4C8C0EBF4335}']\n\n**function** GetArea: **string**;\n\n**function** GetCaption: **string**;\n\n**function** GetFrameClass: TCustomFrameClass;\n\n**procedure** FrameCreated(AFrame: TCustomFrame);\n\n**procedure** DialogClosed(Accepted: Boolean);\n\n**function** ValidateContents: Boolean;\n\n**function** GetHelpContext: Integer;\n\n**function** IncludeInIDEInsight: Boolean;\n\n**property** Area: **string read** GetArea;\n\n**property** Caption: **string read** GetCaption;\n\n**property** FrameClass: TCustomFrameClass **read** GetFrameClass;\n\n**property** HelpContext: Integer **read** GetHelpContext;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Current Process Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called after the current process has changed. The 'Process' parameter provides access to the process that has changed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_250\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure CurrentProcessChanged(const Process: IOTAProcess)\n```\n\n----------------------------------------\n\nTITLE: Destructor for Dockable Form (Delphi)\nDESCRIPTION: This is the destructor for the dockable form. It first frees the `FModuleExplorerFrame`, then sets `SaveStateNecessary` to True to ensure that the form's state is saved before destruction. Finally, it calls the inherited destructor to complete the destruction process.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_139\n\nLANGUAGE: Delphi\nCODE:\n```\n**destructor** TfrmDockableModuleExplorer.Destroy;\n\n**begin**\n\nFModuleExplorerFrame.Free;\n\nSaveStateNecessary := True;\n\n**inherited**;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: GetShowSource Implementation in Delphi\nDESCRIPTION: This function determines whether to show the module source in the IDE after it is created. It simply returns False, indicating that the source should not be shown. No dependencies are required.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_105\n\nLANGUAGE: Delphi\nCODE:\n```\nfunction TProjectCreator.GetShowSource: Boolean;\n\nbegin\n\nResult := False;\n\nend;\n```\n\n----------------------------------------\n\nTITLE: Process State Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called after a process state has changed. The 'Process' parameter provides access to the process that has changed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_251\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure ProcessStateChanged(const Process: IOTAProcess)\n```\n\n----------------------------------------\n\nTITLE: Implementing INTAAddInOptions Interface\nDESCRIPTION: This code snippet shows how to implement the `INTAAddInOptions` interface in a class. It includes the declaration of the methods and a private member for storing the frame reference.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_183\n\nLANGUAGE: Delphi\nCODE:\n```\nTIDEHelpHelperIDEOptionsInterface = **Class**(TInterfacedObject,\nINTAAddInOptions)\n\n**Strict Private**\n\nFFrame : TfmIDEHelpHelperOptions;\n\n**Strict Protected**\n\n**Public**\n\n**Procedure** DialogClosed(Accepted: Boolean);\n\n**Procedure** FrameCreated(AFrame: TCustomFrame);\n\n**Function** GetArea: **String**;\n\n**Function** GetCaption: **String**;\n\n**Function** GetFrameClass: TCustomFrameClass;\n\n**Function** GetHelpContext: Integer;\n\n**Function** IncludeInIDEInsight: Boolean;\n\n**Function** ValidateContents: Boolean;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Initializing Compiler Notifier Interface Delphi\nDESCRIPTION: This code snippet initializes a compiler notifier interface. This notifier allows the add-in to receive notifications from the compiler, specifically useful for IDE add-ins working with compilation processes. The `IOTACompileServices` interface and `TCompilerNotifier` are used. This is Delphi 2010 specific.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_89\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF D2010}\n\t\t\t\t*// Create Compiler Notifier Interface*\n\t\t\t\tiCompilerIndex := (BorlandIDEServices As\n\t\t\t\tIOTACompileServices).AddNotifier(\n\t\t\t\tTCompilerNotifier.Create);\n\t\t\t\t{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: Show Dockable Module Explorer Class Procedure (Delphi)\nDESCRIPTION: This class procedure shows the dockable module explorer. It first calls `CreateDockableModuleExplorer` to ensure the form exists, then calls `ShowDockableForm` to display it.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_143\n\nLANGUAGE: Delphi\nCODE:\n```\n**class procedure**\nTfrmDockableModuleExplorer.ShowDockableModuleExplorer;\n\n**begin**\n\nCreateDockableModuleExplorer;\n\nShowDockableForm(FormInstance);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: GetOwner Implementation in Delphi\nDESCRIPTION: This function returns the project owner, which in this case is the current project group. It relies on the ProjectGroup utility function to get the owner. Returns an IOTAModule interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_101\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetOwner: IOTAModule;\n\n**begin**\n\nResult := ProjectGroup;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Removing IOTAEditorNotifier Delphi\nDESCRIPTION: Removes a previously added editor notifier from the IDE using the IOTAEditorServices.RemoveNotifier method. The integer obtained during the notifier's creation is used to ensure proper removal.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_234\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FEditorNotifier &gt; -1 Then\n\n(BorlandIDEServices As\nIOTAEditorServices).RemoveNotifier(FEditorNotifier);\n```\n\n----------------------------------------\n\nTITLE: Eidolon Script Language Grammar (BNF)\nDESCRIPTION: This is the grammar definition for the Eidolon script language, expressed in Baukas-Naur Form (BNF). It defines the syntax rules for various table types and their associated definitions, like field definitions, connection details, and graphical element properties.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_152\n\nLANGUAGE: bnf\nCODE:\n```\n<Goal> ::= ( <TextTable> | <DBTable> |\n<TimeLocationTable> | <OutputTable> |\n<RequirementsTable> )*;\n\n<TextTable> ::= <DefinitionName> '=' 'CLASS' '(' 'TEXTTABLE'\n')' <LineEnd>\n\n'{' <LineEnd>\n\n[ <TextTableDef> ]\n\n<FieldDef>+\n\n'}' <LineEnd>;\n\n<DBTable> ::= <DefinitionName> '=' 'CLASS' '(' 'DBTABLE' ')'\n<LineEnd>\n\n'{' <LineEnd>\n\n[ <PrimaryConnection> ]\n\n<FieldDef>+\n\n'}' <LineEnd>;\n\n<TimeLocationTable> ::= <DefinitionName> '=' 'CLASS' '('\n'TIMELOCATIONTABLE' ')' <LineEnd>\n\n'{' <LineEnd>\n\n<FieldDef>+\n\n<TimeLocationDef>+\n\n'}' <LineEnd>;\n\n<OutputTable> ::= <DefinitionName> '=' 'CLASS' '('\n'OUTPUTTABLE' ')' <LineEnd>\n\n'{' <LineEnd>\n\n[ <PrimaryConnection> ]\n\n[ <SecondaryConnection> ]\n\n<FieldDef>+\n\n'}' <LineEnd>;\n\n<RequirementsTable> ::= <DefinitionName> '=' 'CLASS' '('\n'REQUIREMENTSTABLE' ')' <LineEnd>\n\n'{' <LineEnd>\n\n[ <PrimaryConnection> ]\n\n<FieldDef>+\n\n<AssociationDef>+\n\n<FieldDef>+\n\n<AssociationDef>+\n\n'}' <LineEnd>;\n\n<PrimaryConnection> ::= <DatabaseDef> <ConnectionDef>\n<TableNameDef>;\n\n<SecondaryConnection> ::= <PrimaryConnection>;\n\n<TextTableDef> ::= '\\#TABLENAME' '=' <FileName>\n<LineEnd>;\n\n<DatabaseDef> ::= '\\#DATABASE' '=' ( <FileName> |\n<Directory> ) <LineEnd>;\n\n<ConnectionDef> ::= '\\#CONNECTION' '=' <ConnectionString>\n<LineEnd>;\n\n<TableNameDef> ::= '\\#TABLENAME' '=' ( <TableName> |\n<FileName> ) <LineEnd>;\n\n<TTypeInfo> ::= 'B' | 'Y' | 'I' | 'L' | 'U' | 'S' | 'F' |\n'D' | 'C' '(' <ColumnWidth> ')' | 'O' | 'M';\n\n<FieldDef> ::= [ '\\*' ] <InputName> ':' <TTypeInfo>\n[ '=' <OutputName> ] <LineEnd>;\n\n<AssociationDef> ::= '@' <InputName> '=' <OutputName>;\n\n<TimeLocationDef> ::= '&' <SymbolName> '=' (\n<Rectangle> | <Bar> | <Line> | <Triangle> |\n<Ellipse> | <Diamond> | <SuperBar> );\n\n<Rectangle> ::= 'RECTANGLE' ',' <BorderDef> ','\n<InteriorDef> [ ',' <Transparency> ] <LineEnd>;\n\n<Bar> ::= 'BAR' ',' <BorderDef> ',' <InteriorDef> ','\n<BarWidth> [ ',' <Transparency> ] <LineEnd>;\n\n<Line> ::= 'LINE' ',' <BorderDef> [ <LineEndDefs> ]\n<LineEnd>;\n\n<LineEndDefs> ::= <StartType> ',' <StartSize> ','\n<EndType> ',' <EndSize>;\n\n<StartType> ::= <LineEndType>;\n\n<EndType> ::= <LineEndType>;\n\n<StartSize> ::= <LineEndSize>;\n\n<EndSize> ::= <LineEndSize>;\n\n<LineEndType> ::= 'NONE' | 'DIAMOND' | 'OPEN' | 'OVAL' |\n'STEALTH' | 'STYLEMIXED' | 'TRIANGLE';\n\n<LineEndSize> ::= 'ShortNarrow' | 'MediumNarrow' | 'LongNarrow'\n| 'ShortMedium' | 'MediumMedium' | 'LongMedium' | 'ShortWide' |\n'MediumWide' | 'LongWide';\n\n<Triangle> ::= 'TRIANGLE' ',' <BorderDef> ','\n<InteriorDef> ',' <TriangleType> [ ',' <Transparency>\n] <LineEnd>;\n\n<Ellipse> ::= 'ELLIPSE' ',' <BorderDef> ','\n<InteriorDef> ',' <EllipseRadius> [ ','\n<Transparency> ] <LineEnd>;\n\n<Diamond> ::= 'DIAMOND' ',' <BorderDef> ','\n<InteriorDef> ',' <DiamondSize> [ ',' <Transparency>\n] <LineEnd>;\n\n<SuperBar> ::= 'SUPERBAR' ',' <BorderDef> ','\n<InteriorDef> ',' <DateWidth> ',' <LocationWidth> [\n',' <Transparency> ] <LineEnd>;\n\n<BorderDef> ::= <BorderColour> ',' <BorderLineStyle>\n',' <BorderWeight>;\n\n<InteriorDef> ::= <InteriorColour> ','\n<InteriorPattern> ',' <InteriorPatternColour>;\n\n<BorderColour> ::= <ColourName>;\n\n<BarWidth> ::= <PositiveSingle>;\n\n<DateWidth> ::= <PositiveSingle>;\n\n<LocationWidth> ::= <PositiveSingle>;\n\n<TriangleType> ::= 'STARTANDEARLY' | 'STARTANDLATE' |\n'ENDANDEARLY' | 'ENDANDLATE';\n\n<EllipseRadius> ::= <PositiveSingle>;\n\n<DiamondSize> ::= <PositiveSingle>;\n\n<Transparency> ::= [ ',' <PositiveSingle> ];\n\n<ColourName> ::= 'BLACK' | 'BROWN' | 'OLIVEGREEN' | 'DARKGREEN'\n| 'DARKTEAL' | 'DARKBLUE' | 'INDIGO' | 'GRAY-80%' | 'DARKRED' |\n'ORANGE' | 'DARKYELLOW' | 'GREEN' | 'TEAL' | 'BLUE' | 'BLUE-GRAY'\n| 'GRAY-50%' | 'RED' | 'LIGHTORANGE' | 'LIME' | 'SEAGREEN' |\n'AQUA' | 'LIGHTBLUE' | 'VIOLET' | 'GRAY-40%' | 'PINK' | 'GOLD' |\n'YELLOW' | 'BRIGHTGREEN' | 'TURQUOISE' | 'SKYBLUE' | 'PLUM' |\n'GRAY-25%' | 'ROSE' | 'TAN' | 'LIGHTYELLOW' | 'LIGHTGREEN' |\n'LIGHTTURQUOISE' | 'PALEBLUE' | 'LAVENDER' | 'WHITE';\n\n<BorderLineStyle> ::= 'SOLID' | 'ROUNDDOT' | 'SQUAREDOT' |\n'DASH' | 'DASHDOT' | 'LONGDASH' | 'LONGDASHDOT' | 'DASHDOTDOT';\n\n<BorderWeight> ::= '0.25' | '0.5' | '1' | '1.5' | '2.25' |\n'3' | '4.5' | '6' | 'DOUBLE' | 'DOUBLETHINTHICK' |\n'DOUBLETHICKTHIN' | 'TRIPLETHICKBETWEENTHIN';\n\n<InteriorColour> ::= <ColourName>;\n\n<InteriorPattern> ::= 'NONE' | '10PERCENT' | '20PERCENT' |\n'25PERCENT' | '30PERCENT' | '40PERCENT' | '50PERCENT' | '5PERCENT'\n| '60PERCENT' | '70PERCENT' | '75PERCENT' | '80PERCENT' |\n'90PERCENT' | 'DARKDOWNWARDDIAGONAL' | 'DARKHORIZONTAL' |\n'DARKUPWARDDIAGONAL' | 'DARKVERTICAL' | 'DASHEDDOWNWARDDIAGONAL' |\n'DASHEDHORIZONTAL' | 'DASHEDUPWARDDIAGONAL' | 'DASHEDVERTICAL' |\n'DIAGONALBRICK' | 'DIVOT' | 'DOTTEDGRID' | 'HORIZONTALBRICK' |\n'LARGECHECKERBOARD' | 'LARGECONFETTI' | 'LARGEGRID' |\n'LIGHTDOWNWARDDIAGONAL' | 'LIGHTHORIZONTAL' | 'LIGHTUPWARDDIAGONAL' |\n'LIGHTVERTICAL' | 'NARROWHORIZONTAL' | 'NARROWVERTICAL' |\n'OUTLINEDDIAMOND' | 'PLAID' | 'SHINGLE' | 'SMALLCHECKERBOARD' |\n'SMALLCONFETTI' | 'SMALLGRID' | 'SOLIDDIAMOND' | 'SPHERE' |\n'TRELLIS' | 'WAVE' | 'WEAVE' | 'WIDEDOWNWARDDIAGONAL' |\n'WIDEUPWARDDIAGONAL' | 'ZIGZAG';\n\n<InteriorPatternColour> ::= <ColourName>;\n\n<DefinitionName> ::= <Name>;\n\n<TableName> ::= <Name>;\n\n<ColumnWidth> ::= <ByteNumber>;\n\n<InputName> ::= <Name>;\n\n<OutputName> ::= <Name>;\n\n<Name> ::= ( <Identifier> | <WhiteSpace> |\n<GeneralSymbols> )*;\n\n<ByteNumber> ::= ? An integer number between 1 and 255 ?;\n\n<PositiveSingle> ::= ? A positive single precision number ?;\n\n<LineEnd> ::= ? Line feed and or carriage return ?;\n\n<FileName> ::= ? Drive:\\\\Path\\\\FileName.Extension with no quotes\n?;\n\n<Directory> ::= ? Drive:\\\\Path\\\\ with no quotes ?;\n\n<SymbolName> ::= ( <Identifier> | <WhiteSpace> )+;\n\n<ConnectionString> ::= '' | 'dBASE IV;' | 'Paradox 4.x;' |\n'FoxPro 2.6;' | 'Text;';\n\n<AlphaCharacters> ::= ? All alphabeta characters = ['A'..'Z',\n'a'..'z', '_'] ?;\n\n<NumericCharacters> ::= ? All Numeric Characters = ['0'..'9'] ?;\n\n<GeneralSymbols> ::= ? General Symbols = [\\#33..\\#128] - ['=',\n':', '\\*', '(', ')', '\\#', '&', '@', '{', '}'] ?;\n\n<WhiteSpace> ::= ? Whitespace = [\\#32, \\#9] {Space and Tab} ?;\n\n<Identifier> ::= <AlphaCharacters> | (\n<AlphaCharacters> | <NumericCharacters> )*;\n```\n\n----------------------------------------\n\nTITLE: Variant Record for Storing Line and Column (Delphi)\nDESCRIPTION: This snippet defines a variant record, TItemPosition, to efficiently store line and column information within the same memory location as a TObject pointer in a TStringList. This allows for direct access to line and column numbers without requiring casting or shifting operations.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_70\n\nLANGUAGE: Delphi\nCODE:\n```\nType\nTSubItem = (siData, siPosition);\nTItemPosition = Record\nCase TSubItem Of\nsiData: (Data : TObject);\nsiPosition: (\nLine : SmallInt;\nColumn : SmallInt\n);\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Check Interface Support Delphi\nDESCRIPTION: This code snippet checks if the BorlandIDEServices global variable supports the IOTAToDoServices interface using the Supports function. The result is then output using CodeSite. If CodeSite is not available, OutputDebugString can be used instead.  It's used to verify that BorlandIDEServices implements the expected interfaces.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_203\n\nLANGUAGE: Delphi\nCODE:\n```\nCodeSite.Send(\n\n'BorlandIDEServices Supports IOTAToDoServices = ',\n\nSupports(BorlandIDEServices, IOTAToDoServices, S)\n\n);\n```\n\n----------------------------------------\n\nTITLE: GetFileSystem Implementation in Delphi\nDESCRIPTION: This function returns the file system to be used by the project. An empty string indicates the default file system is used. No dependencies are required.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_100\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetFileSystem: **String**;\n\n**begin**\n\nResult := '';\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetChecked Method in Delphi\nDESCRIPTION: This method determines whether the menu item is currently checked. In this implementation, it always returns False, indicating that the menu item is never checked by default. This could be modified for dynamic menu items.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_162\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetChecked: Boolean;\n\n**Begin**\n\nResult := False;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetCaption Method in Delphi\nDESCRIPTION: This method retrieves the caption for the menu item, including any associated accelerator keys. The caption is stored as the FCaption field within the class, allowing for customization of the menu item's display text.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_161\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetCaption: **String**;\n\n**Begin**\n\nResult := FCaption;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Registry Key Configuration Delphi\nDESCRIPTION: This snippet shows the registry key where Delphi IDE package information is stored. This key can be manually edited to add or remove installed packages.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/README.md#_snippet_0\n\nLANGUAGE: registry\nCODE:\n```\nHKEY_CURRENT_USER\\Software\\Embarcadero\\BDS\\23.0\\Known IDE Packages\\Delphi\n```\n\n----------------------------------------\n\nTITLE: Implementing SetPosition Method in Delphi\nDESCRIPTION: This method sets the position of the menu item within its parent. The provided empty implementation indicates that the position is static and cannot be changed dynamically.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_175\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetPosition(Value: Integer);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing GetParent Method in Delphi\nDESCRIPTION: This method returns the name of the parent menu for the menu item, which is stored in the FParent field. This determines where the menu item will be located within the IDE's menu structure.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_166\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetParent: **String**;\n\n**Begin**\n\nResult := FParent;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing SetParent Method in Delphi\nDESCRIPTION: This method sets the parent menu of the current menu item. An empty implementation indicates the parent menu is fixed and cannot be changed after the menu item is created.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_174\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetParent(**Const** Value:\n**String**);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: GetUnnamed Implementation in Delphi\nDESCRIPTION: This function determines whether the IDE displays the Save As dialog, allowing the user to change the file name and path. Returning True enables the Save As dialog. No dependencies are required.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_102\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetUnnamed: Boolean;\n\n**begin**\n\nResult := True;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: EditorViewActivated Implementation\nDESCRIPTION: An example of the EditorViewActivated method. This event is triggered when a tab is changed in the editor.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_53\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.EditorViewActivated(**const** EditWindow:\nINTAEditWindow; **const** EditView: IOTAEditView);\n```\n\n----------------------------------------\n\nTITLE: Implementing SetVerb Method in Delphi\nDESCRIPTION: This method sets the verb associated with the menu item. The empty implementation indicates the verb is static or undefined, preventing runtime modification.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_176\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetVerb(**Const** Value: **String**);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: NewDefaultModule Implementation in Delphi\nDESCRIPTION: This procedure is a placeholder for creating new modules for the project. It is left empty in this implementation, as the project reference is not available here and will be implemented elsewhere. Requires no dependencies.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_106\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TProjectCreator.NewDefaultModule;\n\n**begin**\n\n//\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: GetExisting Implementation in Delphi\nDESCRIPTION: This function indicates whether the project is new or existing. In this case, it returns False, signifying a new project. No dependencies are required.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_99\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetExisting: Boolean;\n\n**begin**\n\nResult := False;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: GetArea Implementation\nDESCRIPTION: This code snippet shows the implementation of the `GetArea` method. Returning an empty string places the options page under the 'Third Party' node in the IDE options tree.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_186\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.GetArea: **String**;\n\n**Begin**\n\nResult := '';\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: GetState Implementation Delphi\nDESCRIPTION: Returns the state of the add-in, typically wsEnabled.  The state controls whether the add-in is active or not.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_4\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TBlogOTAExampleWizard.GetState : TWizardState;\n\n**Begin**\n\nResult := \\[swEnabled];\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: TDGHNotificationsProjectFileStorageNotifier Declaration Delphi\nDESCRIPTION: Defines the structure of the TDGHNotificationsProjectFileStorageNotifier class, implementing the IOTANotifier and IOTAProjectFileStorageNotifier interfaces. It provides methods to handle project loading, saving, creation, and closing events.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_232\n\nLANGUAGE: Delphi\nCODE:\n```\nTDGHNotificationsProjectFileStorageNotifier = Class(TDGHNotifierObject,\n\nIOTANotifier, IOTAProjectFileStorageNotifier)\n\nStrict Private\n\nStrict Protected\n\nPublic\n\nProcedure CreatingProject(Const ProjectOrGroup: IOTAModule);\n\nFunction GetName: String;\n\nProcedure ProjectClosing(Const ProjectOrGroup: IOTAModule);\n\nProcedure ProjectLoaded(Const ProjectOrGroup: IOTAModule; Const Node:\nIXMLNode);\n\nProcedure ProjectSaving(Const ProjectOrGroup: IOTAModule; Const Node:\nIXMLNode);\n\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Patching Action Shortcuts in Delphi IDE\nDESCRIPTION: This procedure iterates through a list of actions (`FOTAActions`) and re-assigns the shortcut stored in the `Tag` property to the `ShortCut` property. This is used to restore shortcuts that are lost in Delphi 7 and below after the IDE loads, using the Open Tools API. Requires FOTAActions to be properly initialized and populated with TAction objects.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_122\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** PatchActionShortcuts(Sender : TObject);\n\n**Var**\n\niAction : Integer;\n\nA : TAction;\n\n**Begin**\n\n**For** iAction := 0 **To** FOTAActions.Count - 1 **Do**\n\n**Begin**\n\nA := FOTAActions[iAction] **As** TAction;\n\nA.ShortCut := A.Tag;\n\n**End**;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: GetOptionFileName Implementation in Delphi\nDESCRIPTION: This function is deprecated in later versions of Delphi, as option information is stored in the DPROJ file. It is intended to specify the DOF file, but returns an empty string here. No dependencies are required.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_104\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetOptionFileName: **String**;\n\n**begin**\n\nResult := '';\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: WindowActivated Implementation\nDESCRIPTION: An example of the WindowActivated method.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_55\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TEditorNotifier.WindowActivated(**const** EditWindow:\nINTAEditWindow);\n```\n\n----------------------------------------\n\nTITLE: NewProjectResource Implementation in Delphi\nDESCRIPTION: This procedure allows creating or modifying the project resource associated with the passed project reference. This example is a placeholder and does nothing. Requires the IOTAProject interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_108\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TProjectCreator.NewProjectResource(**const** Project:\nIOTAProject);\n\n**begin**\n\n//\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.GetColumnNumber Implementation (Delphi)\nDESCRIPTION: This function overrides the GetColumnNumber method. In this implementation, it always returns 0, indicating a default column number.  This prevents the message from having any associated column information when clicked.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_37\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TDGHCustomMessage.GetColumnNumber: Integer;\n\n**begin**\n\nResult := 0;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Modified Timer Event Handler with Menu Installation Check in Delphi\nDESCRIPTION: This Delphi code snippet updates the `TimerEvent` procedure. In addition to the auto-save logic, it checks if the menu has been successfully installed (`FSucceeded`). If not, it calls the `InstallMenu` procedure to attempt menu installation on each timer tick until successful.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_18\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TBlogOTAExampleWizard.TimerEvent(Sender: TObject);\n\n**begin**\n\nInc(FCounter);\n\n**If** FCounter &gt;= FAutoSaveInt **Then**\n\n**Begin**\n\nFCounter := 0;\n\nSaveModifiedFiles;\n\n**End**;\n\n**If Not** FSucceeded **Then**\n\nInstallMenu;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Implementing SetHelpContext Method in Delphi\nDESCRIPTION: This method sets the help context for the menu item. An empty implementation implies the help context is static or non-existent, preventing runtime changes to help integration.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_172\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetHelpContext(Value: Integer);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Removing Compiler Notifier Interface Delphi\nDESCRIPTION: This code removes the compiler notifier interface during finalization.  It ensures the index is valid by comparing against `iWizardFailState`. The `IOTACompileServices.RemoveNotifier` function removes the interface. It is Delphi 2010 specific.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_95\n\nLANGUAGE: Delphi\nCODE:\n```\n{$IFDEF D2010}\n\t\t\t\t*// Remove Compiler Notifier Interface*\n\t\t\t\tIf iCompilerIndex <> iWizardFailState Then\n\t\t\t\t\t(BorlandIDEServices As\n\t\t\t\t\tIOTACompileServices).RemoveNotifier(iCompilerIndex);\n\t\t\t\t{$ENDIF}\n```\n\n----------------------------------------\n\nTITLE: GetName Implementation Delphi\nDESCRIPTION: Returns the name of the add-in as displayed in the IDE. This provides a user-friendly identifier for the wizard.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_3\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TBlogOTAExampleWizard.GetName : **String**;\n\n**Begin**\n\nResult := 'Open Tools API Example';\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Implementing SetEnabled Method in Delphi\nDESCRIPTION: This method sets the enabled state of the menu item. The provided code contains an empty implementation, which prevents dynamic enabling/disabling of the menu item.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_171\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetEnabled(Value: Boolean);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Process Memory Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when memory within a process has changed in response to a user action (e.g., changing a variable value or raw data).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_253\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure ProcessMemoryChanged\n```\n\n----------------------------------------\n\nTITLE: Debugger Options Changed Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when global debugger-specific options have been changed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_254\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure DebuggerOptionsChanged\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown with Pandoc\nDESCRIPTION: The following command uses pandoc to convert between different document formats, including Markdown and MediaWiki. Pandoc supports a wide range of input and output formats.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/wiki/Mark-Down-Reference.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\npandoc --help\npandoc [OPTIONS] [FILES]\nInput formats:  docbook, haddock, html, json, latex, markdown, markdown_github,\n                markdown_mmd, markdown_phpextra, markdown_strict, mediawiki,\n                native, opml, rst, textile\nOutput formats: asciidoc, beamer, context, docbook, docx, dzslides, epub, epub3,\n                fb2, html, html5, json, latex, man, markdown, markdown_github,\n                markdown_mmd, markdown_phpextra, markdown_strict, mediawiki,\n                native, odt, opendocument, opml, org, pdf*, plain, revealjs,\n                rst, rtf, s5, slideous, slidy, texinfo, textile\n```\n\n----------------------------------------\n\nTITLE: Render Document Tree Class Procedure (Delphi)\nDESCRIPTION: This class procedure renders the document tree in the module explorer. It checks if the `FormInstance` is assigned and visible, and if so, calls the `RenderModule` method of the `FModuleExplorerFrame` to render the tree. This method receives a `BaseLanguageModule` object as input to populate the tree structure.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_144\n\nLANGUAGE: Delphi\nCODE:\n```\n**class procedure** TfrmDockableModuleExplorer.RenderDocumentTree(\n\nBaseLanguageModule: TBaseLanguageModule);\n\n**begin**\n\n**If** Assigned(FormInstance) **Then**\n\n**If** FormInstance.Visible **Then**\n\nFormInstance.FModuleExplorerFrame.RenderModule(BaseLanguageModule);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Outputting a Title Message in Delphi\nDESCRIPTION: This procedure outputs a simple title message to the IDE's message window. It requires the IOTAMessageServices interface and takes a string as input, which will be displayed in the message window. The message is not linked to any specific file or line number.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_20\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** OutputMessage(strText : **String**);\n**Begin**\n(BorlandIDEServices **As** IOTAMessageServices).AddTitleMessage(strText);\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Process Memory Changed (EIPChanged) Procedure Definition - Delphi OTA\nDESCRIPTION: Defines a procedure that is called when a process's memory has changed. The 'EIPChange' parameter indicates whether the Execution Instruction Point has changed.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_255\n\nLANGUAGE: Delphi\nCODE:\n```\nprocedure ProcessMemoryChanged(EIPChanged: Boolean)\n```\n\n----------------------------------------\n\nTITLE: Removing Compile Notifier (Delphi)\nDESCRIPTION: Demonstrates how to remove a compile notifier using IOTACompileServices.RemoveNotifier and the integer stored during its creation.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_223\n\nLANGUAGE: Delphi\nCODE:\n```\nIf FCompileNotifier &gt; -1 Then\n(BorlandIDEServices As\nIOTACompileServices).RemoveNotifier(FCompileNotifier);\n```\n\n----------------------------------------\n\nTITLE: NewDefaultProjectModule Implementation in Delphi\nDESCRIPTION: This procedure (introduced in Delphi 5) is meant to supersede NewDefaultModule. It is where modules required for the OTA project are created. This example shows a placeholder implementation within a compiler directive. Requires IOTAProject interface.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_110\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF D0005}**\n\n**procedure** TProjectCreator.NewDefaultProjectModule(**const** Project:\nIOTAProject);\n\n**begin**\n\n*//*\n\n**end**;\n\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterSave Method in Delphi\nDESCRIPTION: This method is called immediately after an item is successfully saved within the Delphi IDE's Project Manager. It is a part of the IOTANotifier interface implementation and provides a hook for performing actions post-save. However, this method is not called for IOTAWizards or menus.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_154\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TProjectManagerMenu.AfterSave;\n\n**Begin**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Declare Implementation Uses and Variable (Delphi)\nDESCRIPTION: This snippet shows the implementation section's `uses` clause, which includes `DeskUtil` for desktop management. It also declares a private module variable `FormInstance` to hold the singleton instance of the dockable form.  The resource string {$R *.dfm} links the code to the .dfm file defining the visual layout.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_132\n\nLANGUAGE: Delphi\nCODE:\n```\n**implementation**\n\n**{$R \\*.dfm}**\n\n**Uses**\n\nDeskUtil;\n\n**Var**\n\nFormInstance : TfrmDockableModuleExplorer;\n```\n\n----------------------------------------\n\nTITLE: GetIDString Implementation Delphi\nDESCRIPTION: Returns a unique identification string for the add-in. It is recommended to combine your name/company with the name of the add-in for uniqueness.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_2\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TBlogOTAExampleWizard.GetIDString : **String**;\n\n**Begin**\n\nResult := 'David Hoyle.BlogIOTAExample';\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: ValidateContents Implementation\nDESCRIPTION: This code snippet shows the implementation of the `ValidateContents` method. It's called when the OK button is pressed to validate the options. Returning True indicates validation was successful.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_191\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TIDEHelpHelperIDEOptionsInterface.ValidateContents:\nBoolean;\n\n**Begin**\n\nResult := True;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Defining TVersionInfo Record in Delphi\nDESCRIPTION: This code defines a custom record type `TVersionInfo` to store version information of the expert, including major, minor, bugfix, and build numbers. This record is used to display the expert's version in the About dialog and on the splash screen.  This is not a requirement of the Open Tools API but for informational purposes.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_59\n\nLANGUAGE: Delphi\nCODE:\n```\n**Type**\nTVersionInfo = **Record**\niMajor : Integer;\niMinor : Integer;\niBugfix : Integer;\niBuild : Integer;\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Declaring Wizard and Notifier Indexes Delphi\nDESCRIPTION: This code snippet declares integer variables to store the indexes of various wizards and notifiers. Each index is initialized to `iWizardFailState` (-1) to indicate that the wizard or notifier has not yet been created. These indexes are used to properly remove the wizards and notifiers during package finalization.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_86\n\nLANGUAGE: Delphi\nCODE:\n```\niWizardIndex : Integer = iWizardFailState;\n{$ENDIF}\niAboutPluginIndex : Integer = iWizardFailState;\n{$ENDIF}\niKeyBindingIndex : Integer = iWizardFailState;\niIDENotfierIndex : Integer = iWizardFailState;\n{$IFDEF D2010}\niCompilerIndex : Integer = iWizardFailState;\n{$ENDIF}\n{$IFDEF D0006}\niEditorIndex : Integer = iWizardFailState;\n{$ENDIF}\niRepositoryWizardIndex : Integer = iWizardFailState;\n```\n\n----------------------------------------\n\nTITLE: String Arrays for Enum Conversion Delphi\nDESCRIPTION: These constant string arrays are used for converting enumerates to strings for display in the tree view. They provide human-readable representations of boolean values (True/False) and package producer/consumer types.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_202\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF DXE00}**\n\n**Const**\n\nstrBoolean : **Array**[False..True] **Of String** = ('False', 'True');\n\nstrProducer :\n**Array**[Low(TOTAPackageProducer)..High(TOTAPackageProducer)] **Of\nString** = ('ppOTAUnknown', 'ppOTADelphi', 'ppOTABCB');\n\nstrConsumer :\n**Array**[Low(TOTAPackageConsumer)..High(TOTAPackageConsumer)] **Of\nString** = ('pcOTAUnknown', 'pcOTADelphi', 'pcOTABCB', 'pcOTABoth');\n\n**{$ENDIF}**\n```\n\n----------------------------------------\n\nTITLE: GetCreatorType Implementation in Delphi\nDESCRIPTION: This function tells the IDE what type of information is to be returned. Returning an empty string signifies that the source will be created manually. If the IDE is to generate the source, specific strings are returned based on the project type.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_98\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TProjectCreator.GetCreatorType: **String**;\n\n**begin**\n\nResult := '';\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.GetLineNumber Implementation (Delphi)\nDESCRIPTION: This function overrides the GetLineNumber method.  Similar to GetColumnNumber, it always returns 0, ensuring that the custom message is not associated with a specific line number within a file.  Consequently, double-clicking the message will not navigate to any line in a file.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_39\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TDGHCustomMessage.GetLineNumber: Integer;\n\n**begin**\n\nResult := 0;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Implementing Destroyed Method in Delphi\nDESCRIPTION: This method is intended for freeing any memory managed by the menu item. It's important to handle memory deallocation to prevent leaks when the menu is destroyed. Exceptions during the memory freeing process are ignored.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_157\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TProjectManagerMenu.Destroyed;\n\n**Begin**\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Output in OutputMessage Procedure\nDESCRIPTION: To prevent errors caused by attempting to add messages to the IDE's message window during shutdown, a check is added to ensure the IDE's main form is visible before outputting messages. This condition `Application.MainForm.Visible` prevents the `OutputMessage` procedure from attempting to modify the message window when it is no longer valid.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_128\n\nLANGUAGE: Delphi\nCODE:\n```\nProcedure OutputMessage(strText : String; strGroupName : String);\nVar\nGroup : IOTAMessageGroup;\nBegin\nIf Application.MainForm.Visible Then *// ADDED*\nWith (BorlandIDEServices As IOTAMessageServices) Do\nBegin\nGroup := GetGroup(strGroupName);\nIf Group = Nil Then\nGroup := AddMessageGroup(strGroupName);\nAddTitleMessage(strText, Group);\nEnd;\nEnd;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.GetLineText Implementation (Delphi)\nDESCRIPTION: This function overrides the GetLineText method. It returns the value of the internal FMsg string, which stores the message text. This allows the message text to be displayed when the message's line text is requested.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_40\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TDGHCustomMessage.GetLineText: **string**;\n\n**begin**\n\nResult := FMsg;\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: TDGHCustomMessage.Draw Procedure (Delphi)\nDESCRIPTION: This procedure draws the custom message on the specified Canvas within the given Rect. It first checks if the Canvas's brush color is set to clWindow (default window color). If so, it sets the font color to the message's foreground color and the brush color to the message's background color, filling the rectangle. Finally, it sets the canvas's font name and style and draws the message text at the specified coordinates within the rectangle.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_44\n\nLANGUAGE: Delphi\nCODE:\n```\n**procedure** TDGHCustomMessage.Draw(Canvas: TCanvas; **const** Rect:\nTRect;\nWrap: Boolean);\n\n**begin**\n**If** Canvas.Brush.Color = clWindow **Then**\n**Begin**\nCanvas.Font.Color := FForeColour;\nCanvas.Brush.Color := FBackColour;\nCanvas.FillRect(Rect);\n**End**;\n\nCanvas.Font.**Name** := FFontName;\nCanvas.Font.Style := FStyle;\nCanvas.TextOut(Rect.Left, Rect.Top, FMsg);\n\n**end**;\n```\n\n----------------------------------------\n\nTITLE: Gemini Model Names\nDESCRIPTION: Lists the available Gemini models that can be used with the API. The models 'gemini-2.0-flash' and 'gemini-pro' are provided as examples and will be substituted in the URL.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/examples/AIEngines/GeminiAIPlugin/GeminiAI Specs.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ngemini-2.0-flash\ngemini-pro\n```\n\n----------------------------------------\n\nTITLE: Implementing SetCaption Method in Delphi\nDESCRIPTION: This method sets the caption of the menu item. The provided code contains an empty implementation, suggesting that the caption is intended to be static, defined during the menu's creation. However, it could be modified to allow for dynamic caption updates.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_169\n\nLANGUAGE: Delphi\nCODE:\n```\n**Procedure** TITHelperProjectMenu.SetCaption(**Const** Value:\n**String**);\n\n**Begin**\n\n*// Do nothing.*\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighter Class Definition in Delphi\nDESCRIPTION: This Delphi code snippet defines a syntax highlighter class (`TBNFHighlighter`) inheriting from `TNotifierObject` and implementing interfaces related to syntax highlighting within the Delphi IDE (`IOTAHighlighter`, `IOTAHighlighterPreview`, and `IOTANotifier`).\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_19\n\nLANGUAGE: Delphi\nCODE:\n```\nTBNFHighlighter = **Class**(TNotifierObject, IOTANotifier,\nIOTAHighlighter **{$IFDEF D2005}**, IOTAHighlighterPreview **{$ENDIF}**)\n```\n\n----------------------------------------\n\nTITLE: Implementing GetVerb Method in Delphi\nDESCRIPTION: This method returns the verb associated with the menu item, stored in the FVerb field. The purpose of the 'verb' is unclear from the documentation.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_168\n\nLANGUAGE: Delphi\nCODE:\n```\n**Function** TITHelperProjectMenu.GetVerb: **String**;\n\n**Begin**\n\nResult := FVerb;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Creating TITHelperProjectMenu Constructor in Delphi\nDESCRIPTION: This constructor is for the TITHelperProjectMenu class, intended for Delphi 2010 and later, implementing a Project Manager menu. It stores information related to the menu, such as the wizard, project, caption, name, verb, parent, position, and a setting, enabling context-aware menu handling.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_160\n\nLANGUAGE: Delphi\nCODE:\n```\n**{$IFDEF D2010}**\n\n**Constructor** TITHelperProjectMenu.Create(Wizard:\nTTestingHelperWizard;\n\nProject: IOTAProject; strCaption, strName, strVerb, strParent:\n**String**;\n\niPosition: Integer; Setting: TSetting);\n\n**Begin**\n\nFWizard := Wizard;\n\nFProject := Project;\n\nFPosition := iPosition;\n\nFCaption := strCaption;\n\nFName := strName;\n\nFVerb := strVerb;\n\nFParent := strParent;\n\nFSetting := Setting;\n\n**End**;\n```\n\n----------------------------------------\n\nTITLE: Moving ClearMessages call in TRepositoryWizardInterface\nDESCRIPTION: Similar to the previous snippet, this addresses an access violation during IDE shutdown related to the repository wizard. The `ClearMessages` call is moved from the `Finalization` section to the `Destroyed` method of the `TRepositoryWizardInterface` class.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_127\n\nLANGUAGE: Delphi\nCODE:\n```\nInitialization\nFProjWizardRef := Nil;\nFinalization\nFProjWizardRef := Nil;\nClearMessages([cmCompiler..cmTool]); *// DELETE*\nEnd.\n\nProcedure TRepositoryWizardInterface.Destroyed;\nBegin\nClearMessages([cmCompiler..cmTool]); // ADD\nOutputMessage('Destroyed' {$IFDEF D0006}, strRepositoryWizardGroup {$ENDIF});\nEnd;\n```\n\n----------------------------------------\n\nTITLE: Getting File Age in Delphi\nDESCRIPTION: This function, GetAge, returns -1 to indicate that the module file is a new, unsaved file. This is used to differentiate between existing and newly created files within the project wizard context.\nSOURCE: https://github.com/embarcadero/otapi-docs/blob/main/The Delphi IDE Open Tools API - Version 1.2.md#_snippet_112\n\nLANGUAGE: Delphi\nCODE:\n```\n**function** TModuleCreatorFile.GetAge: TDateTime;\n\n**begin**\n\nResult := -1;\n\n**end**;\n```"
  }
]