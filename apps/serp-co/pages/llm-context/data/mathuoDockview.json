[
  {
    "owner": "mathuo",
    "repo": "dockview",
    "content": "TITLE: Initializing Dockview in React\nDESCRIPTION: Sets up a Dockview component in React with an onReady callback that provides access to the Dockview API. The API should be stored in a React state or ref for later use.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onReady(event: DockviewReadyEvent) {\n  /**\n   * You should store a reference to `api` in a Ref or State\n   * for later interactions\n   */\n  const api: DockviewApi = event.api;\n}\n\n<DockviewReact onReady={onReady}/>\n```\n\n----------------------------------------\n\nTITLE: Registering Panels in Vue with Dockview\nDESCRIPTION: Example of registering panel components in Vue by defining components in the Vue app and adding panels through the Dockview API on the ready event. Shows how to associate Vue components with panel identifiers.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/register.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = {\n    name: 'App',\n    components: {\n        'component_1': VueComponent1,\n        'component_2': VueComponent2,\n    },\n    methods: {\n        onReady(event: DockviewReadyEvent) {\n            event.api.addPanel({\n                id: 'panel_1',\n                component: 'component_1'\n            });\n\n               event.api.addPanel({\n                id: 'panel_2',\n                component: 'component_2'\n            });\n        },\n    },\n    template: `\n      <dockview-vue\n        @ready=\"onReady\"\n      >\n      </dockview-vue>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Dockview in JavaScript\nDESCRIPTION: Creates a Dockview instance in vanilla JavaScript by providing an HTML element and options, returning the Dockview API for further interactions.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst element: HTMLElement\nconst options: DockviewComponentOptions\nconst api: DockviewApi = createDockview(element, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dockview in Vue\nDESCRIPTION: Implements a Dockview component in Vue with an onReady method that captures the Dockview API when the component is initialized.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = {\n    name: 'App',\n    methods: {\n        onReady(event: DockviewReadyEvent) {\n          const api: DockviewApi = event.api;\n        },\n    },\n    template: `\n      <dockview-vue\n        @ready=\"onReady\"\n      >\n      </dockview-vue>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dockview Panel Component in React\nDESCRIPTION: This snippet illustrates the structure of a custom panel component for Dockview. It shows how to access the panel-specific API and use custom parameters passed to the panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/intro.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Panel in TypeScript\nDESCRIPTION: Demonstrates how to add a basic panel using the Dockview API with a unique ID and component specification. Includes optional inactive flag to prevent automatic activation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel: IDockviewPanel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    // optionally set `inactive: true` to prevent the added panel becoming active automatically\n    inactive: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Paneview with React\nDESCRIPTION: Shows how to create a basic Paneview component with three panels using PaneviewReact. Demonstrates panel initialization and basic configuration including component definition and event handling.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/paneview/paneview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n    IPaneviewPanelProps,\n    PaneviewReact,\n    PaneviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: IPaneviewPanelProps<{ title: string }>) => {\n        return (\n            <div\n                style={{\n                    padding: '10px',\n                    height: '100%',\n                    backgroundColor: 'rgb(60,60,60)',\n                }}\n            >\n                {props.params.title}\n            </div>\n        );\n    },\n};\n\nSimplePaneview = () => {\n    const onReady = (event: PaneviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n            title: 'Panel 1',\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n            title: 'Panel 2',\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n            title: 'Panel 3',\n        });\n    };\n\n    return (\n        <PaneviewReact\n            components={components}\n            headerComponents={headerComponents}\n            onReady={onReady}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Panel Positioning Relative to Other Panels\nDESCRIPTION: Shows how to position panels relative to existing panels with different reference options and positioning configurations.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel2: IDockviewPanel = api.addPanel({\n    id: 'panel_2',\n    component: 'default',\n    position: {\n      referencePanel: 'panel_1',\n      direction: 'above'\n    }\n});\n\napi.addPanel({\n    id: 'panel_3',\n    component: 'default',\n    position: {\n      referencePanel: panel2,\n      direction: 'above'\n    }\n});\n\napi.addPanel({\n    id: 'panel_4',\n    component: 'default',\n    position: {\n      referencePanel: panel2,\n      index: 2  // optionally specify which index to add the panel at\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header Components in Dockview with React\nDESCRIPTION: This code snippet demonstrates how to create and implement custom header components for the left, right, and prefix positions in a DockviewReact component. Each component receives IDockviewHeaderActionsProps and returns a div that can contain custom content.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/controls.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst LeftComponent = (props: IDockviewHeaderActionsProps) => {\n    return <div>{/** content */}</div>;\n};\n\nconst RightComponent = (props: IDockviewHeaderActionsProps) => {\n       return <div>{/** content */}</div>;\n};\n\nconst PrefixComponent = (props: IDockviewHeaderActionsProps) => {\n    return <div>{/** content */}</div>;\n};\n\nreturn <DockviewReact\n  leftHeaderActionsComponent={LeftComponent}\n  rightHeaderActionsComponent={RightComponent}\n  prefixHeaderActionsComponent={PrefixComponent}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Registering Tab Components in React\nDESCRIPTION: Shows how to register custom tab components in React using the tabComponents prop. Each component receives IDockviewPanelHeaderProps containing the panel API and container API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  tab_1: (props: IDockviewPanelHeaderProps) => {\n    const api: DockviewPanelApi  = props.api;\n    const containerApi: DockviewApi  = props.containerApi;\n\n    return <div>{/** logic */}</div>\n  },\n  tab_2: (props: IDockviewPanelHeaderProps) => {\n    return <div>{/** logic */}</div>\n  }\n};\n\nreturn <DockviewReact tabComponents={tabComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Extending Default Tab Implementation in React\nDESCRIPTION: Demonstrates how to extend the default tab implementation in React to make minor changes like hiding the close button or attaching additional event listeners while maintaining the standard appearance.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IDockviewPanelHeaderProps, DockviewDefaultTab } from 'dockview';\n\nconst MyCustomTab = (props: IDockviewPanelHeaderProps) => {\n    const onContextMenu = (event: React.MouseEvent) => {\n        event.preventDefault();\n        alert('context menu');\n    };\n    return <DockviewDefaultTab onContextMenu={onContextMenu} hideClose={true} {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Dockviews with Event Handling in React\nDESCRIPTION: This code snippet demonstrates how to create nested Dockview instances in React and handle drag and drop events between them. It uses the DockviewReact component and implements the api.onUnhandledDragOverEvent and onDidDrop props for event handling.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/advanced/nested.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeRunner id=\"dockview/nested\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Dockview Layout from Local Storage in React TSX\nDESCRIPTION: This code snippet demonstrates how to load a Dockview layout from local storage using the fromJSON method. It includes error handling and a fallback option for loading a default layout if the stored layout is invalid or not available.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/state/load.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst onReady = (event: DockviewReadyEvent) => {\n    let success = false;\n\n    const mySerializedLayout = localStorage.getItem('my_layout');\n\n    if (mySerializedLayout) {\n        try {\n            const layout = JSON.parse(mySerializedLayout);\n            event.api.fromJSON(layout);\n            success = true;\n        } catch (err) {\n            // log the error\n        }\n    }\n\n    if (!success) {\n        // perhap load a default layout?\n    }\n};\n\nreturn <DockviewComponent onReady={onReady}/>;\n```\n\n----------------------------------------\n\nTITLE: Maximizing Groups with DockviewPanelApi in TypeScript\nDESCRIPTION: Shows how to use the DockviewPanelApi to maximize groups, check maximization status, and exit maximized state. This API provides methods specific to a panel for maximizing its group, checking if it's maximized, and exiting maximized state if applicable.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/maxmizedGroups.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst api: DockviewPanelApi;\n\n// maximize the group\napi.maximize();\n\n// is this group maximized (if another group is maximized this method will still return false)\nconst result: boolean = api.isMaxmized();\n\n// exit only if this group is maximzied (if another group is maxmized this has no affect)\napi.exitMaximized();\n```\n\n----------------------------------------\n\nTITLE: Maximizing Groups with DockviewApi in TypeScript\nDESCRIPTION: Demonstrates how to maximize groups, check maximization status, and exit maximized state using the DockviewApi. It includes methods for maximizing a specific group, checking if a group is maximized, exiting maximized state, and checking if any group is maximized.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/maxmizedGroups.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst api: DockviewApi;\n\n// maximize a specified group\napi.maxmimizeGroup(group);\n\n// check whether a specific group is maximized\nconst result: boolean = api.isMaximizedGroup(group);\n\n// if there is any maximized group exit the maximized state\nexitMaximizedGroup();\n\n// is there a maximized group\nconst result: boolean = hasMaximizedGroup();\n```\n\n----------------------------------------\n\nTITLE: Adding a Panel with Always Renderer for iframes in Dockview\nDESCRIPTION: Demonstrates how to configure a panel to use the 'always' renderer option, which prevents the panel from being removed from the DOM when hidden or moved. This approach is essential for iframes to avoid content reloading when repositioned.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/advanced/iframe.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\napi.addPanel({\n  id: 'my_panel_id',\n  component: 'my_component',\n  renderer: 'always',\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Panel to a Specific Position in TypeScript\nDESCRIPTION: This code snippet demonstrates how to move a panel to a specific group, position, and index using the Panel API in Dockview. It utilizes the 'moveTo' method of the panel's API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/move.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npanel.api.moveTo({ group, position, index });\n```\n\n----------------------------------------\n\nTITLE: Accessing Splitview API in Panel Component\nDESCRIPTION: This snippet shows how to access the Splitview API within a panel component. The API is available through the props.containerApi property, allowing control over the entire splitview from within a panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Panels in React with Dockview\nDESCRIPTION: Example of registering panel components in React using the components prop in DockviewReact. Each component receives props including panel API, group API, and container API to control panel features.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/register.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  component_1: (props: IDockviewPanelProps) => {\n    const api: DockviewPanelApi  = props.api;\n    const groupApi: DockviewGroupPanelApi  = props.group.api;\n    const containerApi: DockviewApi  = props.containerApi;\n\n    return <div>{/** logic */}</div>\n  },\n  component_2: (props: IDockviewPanelProps) => {\n    return <div>{/** logic */}</div>\n  }\n}\n\nreturn <DockviewReact components={components}/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Popout Group in Dockview\nDESCRIPTION: Demonstrates how to create a popout group using the Dockview API. The code shows adding a group with optional configuration for the popout URL and positioning box dimensions.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/popoutGroups.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\napi.addPopoutGroup(\n  group,\n  // the second arguments (options) is optional\n  {\n    popoutUrl:\"/popout.html\",\n    box: { left: 0, top: 0, height: 200, width: 300 }\n  });\n```\n\n----------------------------------------\n\nTITLE: Accessing Splitview Panel API in Component\nDESCRIPTION: This snippet shows how to access the Splitview Panel API within a panel component. The API is available through the props.api property, allowing control over the specific panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: ISplitviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Saving Dockview Layout State in React with localStorage\nDESCRIPTION: This snippet demonstrates how to save the dockview layout to localStorage when changes occur. It uses React hooks to manage the API reference, sets up an event listener for layout changes, and properly cleans up the listener when the component unmounts.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/state/save.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst [api, setApi] = React.useState<DockviewApi>();\n\nReact.useEffect(() => {\n  if(!api) {\n    return;\n  }\n\n  const disposable = api.onDidLayoutChange(() => {\n    const layout: SerializedDockview = api.toJSON();\n    localStorage.setItem('my_layout', JSON.stringify(layout));\n  });\n\n  return () => disposable.dispose();\n}, [api]);\n\nconst onReady = (event: DockviewReadyEvent) => {\n  setApi(event.api);\n}\n\nreturn <DockviewComponent onReady={onReady}/>\n```\n\n----------------------------------------\n\nTITLE: Handling External Drag Events in DockviewReact\nDESCRIPTION: This code shows how to handle drag events from outside the Dockview library by implementing onDidDrop and onUnhandledDragOverEvent handlers.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/dragAndDrop.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * called when an ondrop event which does not originate from the dockview libray and\n * passes the onUnhandledDragOverEvent condition\n **/\nconst onDidDrop = (event: DockviewDropEvent) => {\n    const { group } = event;\n\n    event.api.addPanel({\n        id: 'test',\n        component: 'default',\n        position: {\n            referencePanel: group.activePanel.id,\n            direction: 'within',\n        },\n    });\n};\n\nconst onReady = (event: DockviewReadyEvent) => {\n\n  /**\n   * called for drag over events which do not originate from the dockview library\n   * allowing the developer to decide where the overlay should be shown for a\n   * particular drag event\n   **/\n  api.onUnhandledDragOverEvent(event => {\n    event.accept();\n  });\n}\n\nreturn (\n    <DockviewReact\n        components={components}\n        onReady={onReady}\n        className=\"dockview-theme-abyss\"\n        onDidDrop={onDidDrop}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Splitview API in onReady Callback\nDESCRIPTION: This snippet demonstrates how to access the Splitview API in the onReady callback function. This allows for initial setup and configuration of the splitview when it's first rendered.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst onReady = (event: SplitviewReadyEvent) => {\n    // event.api...\n};\n```\n\n----------------------------------------\n\nTITLE: Removing a Panel using Panel API in TypeScript\nDESCRIPTION: This snippet demonstrates how to close a panel using the Panel API's close method. It's the simplest way to programmatically close a panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npanel.api.close();\n```\n\n----------------------------------------\n\nTITLE: Panel and Group Resizing in Dockview using TypeScript/React\nDESCRIPTION: Demonstrates two approaches to resize panels in Dockview: directly using panel API or through the group API. The code shows how to set specific height and width dimensions for panels, with either method achieving the same result.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/resizing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// it's mandatory to provide either a height or a width, providing both is optional\nprops.api.setSize({\n    height: 100,\n    width: 200,\n});\n\n// you could also resize the panels group, although not recommended it achieved the same result\nprops.api.group.api.setSize({\n    height: 100,\n    width: 200,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel Group Lock Settings in DockView\nDESCRIPTION: Demonstrates how to lock a panel group to prevent new panels from being added via drag and drop. Offers two locking modes: basic locking that preserves drop zones and complete locking that disables all drop targets.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/locked.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npanel.group.locked = true;\n\n// Or\n\npanel.group.locked = 'no-drop-target';\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel and Group Resizing in DockView with TypeScript/React\nDESCRIPTION: Shows two equivalent methods for resizing panels in DockView - directly through panel API and through the group API. The setSize method requires at least one dimension (height or width) to be specified, with both being optional.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/resizing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// it's mandatory to provide either a height or a width, providing both is optional\nprops.api.setSize({\n    height: 100,\n    width: 200,\n});\n\n/**\n * you could also resize the panels group, although not recommended due to the\n * clunky syntax it does achieve the same result\n */\nprops.api.group.api.setSize({\n    height: 100,\n    width: 200,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Splitview in React\nDESCRIPTION: This snippet demonstrates how to create a basic horizontal splitview with three panels using the SplitviewReact component from dockview. It includes the component definition, panel creation, and event handling.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n    ISplitviewPanelProps,\n    Orientation,\n    SplitviewReact,\n    SplitviewReadyEvent,\n} from 'dockview';\n\nconst components = {\n    default: (props: ISplitviewPanelProps<{ title: string }>) => {\n        return <div style={{ padding: '20px' }}>{props.params.title}</div>;\n    },\n};\n\nexport const SimpleSplitview = () => {\n    const onReady = (event: SplitviewReadyEvent) => {\n        event.api.addPanel({\n            id: 'panel_1',\n            component: 'default',\n            params: {\n                title: 'Panel 1',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_2',\n            component: 'default',\n            params: {\n                title: 'Panel 2',\n            },\n        });\n\n        event.api.addPanel({\n            id: 'panel_3',\n            component: 'default',\n            params: {\n                title: 'Panel 3',\n            },\n        });\n    };\n\n    return (\n        <SplitviewReact\n            components={components}\n            onReady={onReady}\n            orientation={Orientation.HORIZONTAL}\n            className=\"dockview-theme-abyss\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Gridview Ready Event\nDESCRIPTION: Shows how to implement the onReady event handler for Gridview initialization.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst onReady = (event: GridviewReadyEvent) => {\n    // event.api...\n};\n```\n\n----------------------------------------\n\nTITLE: Closing a Popout Group Programmatically\nDESCRIPTION: Demonstrates two methods for programmatically moving a popout group back into the main grid. Option 1 positions it absolutely, while option 2 creates a new group and moves the contents of the popout group to it.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/popoutGroups.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// option 1: add absolutely to the right-side of the grid\nprops.group.api.moveTo({ position: 'right' });\n\n// option 2: create a new group and move the contents of the popout group to it\nconst group = props.containerApi.addGroup();\nprops.group.api.moveTo({ group });\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with OnlyWhenVisible Render Mode in TypeScript\nDESCRIPTION: Shows how to add a panel that removes its DOM elements when hidden, offering better memory efficiency.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/rendering.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    renderer: 'onlyWhenVisible'\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Panel Parameters in Dockview using TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a panel parameter by setting its value to undefined when calling the updateParameters method.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npanel.api.updateParameters({\n    keyA: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Panel Parameters Configuration\nDESCRIPTION: Demonstrates how to add custom parameters to a panel that can be accessed in both panel and tab renderers.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel: IDockviewPanel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    params: {\n        myCustomKey: 'my_custom_value',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Panel Parameters in Dockview using TypeScript\nDESCRIPTION: This snippet shows how to update a panel's parameters using the panel's API. Parameters can be added or modified by passing an object with key-value pairs to the updateParameters method.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npanel.api.updateParameters({\n    keyA: 'anotherValueA',\n    keyB: 'valueB',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Panel Constraint Changes in Splitview\nDESCRIPTION: This snippet shows how to listen for and handle changes to a panel's size constraints in the splitview. It uses the onDidConstraintsChange event from the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nprops.api.onDidConstraintsChange(({ maximumSize, minimumSize }) => {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Title in TypeScript/React\nDESCRIPTION: Shows two methods for setting panel titles: during panel creation and updating an existing panel's title.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\napi.addPanel({\n    id: 'panel_1',\n    component: 'my_component',\n    title: 'my_custom_title',\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\napi.setTitle('my_new_custom_title');\n```\n\n----------------------------------------\n\nTITLE: Moving a Group using Group API in Dockview\nDESCRIPTION: This snippet demonstrates how to move a group to a new position using the moveTo method of the group API. It requires specifying the target group, position, and index parameters.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/move.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npanel.group.api.moveTo({ group, position, index });\n```\n\n----------------------------------------\n\nTITLE: Updating Panel Size Constraints in Splitview\nDESCRIPTION: This snippet demonstrates how to programmatically update the size constraints of a panel in the splitview using the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\napi.setConstraints({\n    maximumSize: 200,\n    minimumSize: 400,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Panel Parameters in React\nDESCRIPTION: Shows how to type-hint and access custom panel parameters in a React tab component. Generic typing is used to provide structure for the expected parameters.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ntype MyParameters = { my_value: number };\n\nconst MyTab = (props: IDockviewPanelHeaderProps<MyParameters>) => {\n  const value: number = props.params.my_value;\n  return <div>{/** logic */}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tab Renderer in React\nDESCRIPTION: Shows how to set a default tab renderer in React which will be used for all tabs that don't specify a custom renderer. The renderer receives IDockviewPanelHeaderProps containing panel and container APIs.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomTabRenderer = (props: IDockviewPanelHeaderProps) => {\n  const api: DockviewPanelApi  = props.api;\n  const containerApi: DockviewApi  = props.containerApi;\n\n  return <div>{/** logic */}</div>\n}\n\nreturn <DockviewReact defaultTabRenderer={CustomTabRenderer}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Panel as Active in Splitview\nDESCRIPTION: This snippet shows how to programmatically set a panel as active in the splitview using the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\napi.setActive();\n```\n\n----------------------------------------\n\nTITLE: Configuring DnD Edges in DockviewReact\nDESCRIPTION: This snippet demonstrates how to customize the size and activation area of edge overlays through the dndEdges prop in DockviewReact.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/dragAndDrop.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<DockviewReact\n  {...props}\n   dndEdges={{\n    size: { value: 100, type: 'pixels' },\n    activationSize: { value: 5, type: 'percentage' },\n  }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Adding a Popout Group from Within a Panel\nDESCRIPTION: Shows how to create a popout group from within a panel component using the containerApi reference. This allows panels to trigger their own popout behavior.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/popoutGroups.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nprops.containerApi.addPopoutGroup(props.api.group);\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Constraints\nDESCRIPTION: Demonstrates adding a panel with size constraints.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    maximumHeight: 1000,\n    minimumWidth: 100,\n    maximumWidth: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Panel Size Constraints Configuration\nDESCRIPTION: Shows how to set minimum and maximum size constraints for panels, which are preserved in layouts.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'panel_1',\n    component: 'default',\n    minimumWidth: 100,\n    maximumWidth: 100,\n    minimumHeight: 200,\n    maximumHeight: 2000\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Dockview Themes with CSS\nDESCRIPTION: Example of extending the dockview-theme-abyss theme to display borders within the tabs container. Shows how to customize active and inactive group styles.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/theme.mdx#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.dockview-theme-abyss {\n  .groupview {\n      &.active-group {\n          > .tabs-and-actions-container {\n              border-bottom: 2px solid var(--dv-activegroup-visiblepanel-tab-background-color);\n          }\n      }\n      &.inactive-group {\n          > .tabs-and-actions-container {\n              border-bottom: 2px solid var(--dv-inactivegroup-visiblepanel-tab-background-color);\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RenderWhenVisible HOC in React\nDESCRIPTION: Example of applying the RenderWhenVisible Higher-Order Component to a component definition.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/rendering.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = { default: RenderWhenVisible(MyComponent) };\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Width Tab Mode in React\nDESCRIPTION: Shows how to enable full-width tab mode in Dockview React, which makes a single tab take the full width of the group header when a group has only one tab.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <DockviewReactComponent singleTabMode=\"fullwidth\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in Themes in Dockview Components\nDESCRIPTION: Example of how to import and apply a built-in theme to Dockview components. Shows usage for both dock components and other components like split, pane, and grid views.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/theme.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { themeAbyss } from \"dockview\";\n\n// For dock components\ntheme={themeAbyss}\n\n// For other components\nconst {className} = themeAbyss;\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Changes - Constructor Signatures\nDESCRIPTION: Breaking change in constructor signatures for component classes, moving parentElement from options object to a separate parameter. New factory functions createDockview, createGridview, createPaneview and createSplitview are introduced for component creation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2024-08-11-dockview-1.16.0.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Old way\nnew DockviewComponent({ parentElement, ...options })\n\n// New way\nnew DockviewComponent(parentElement, options)\n\n// Recommended new approach\ncreateDockview(parentElement, options)\ncreateGridview(parentElement, options)\ncreatePaneview(parentElement, options)\ncreateSplitview(parentElement, options)\n```\n\n----------------------------------------\n\nTITLE: Removing a Panel using Dockview API in TypeScript\nDESCRIPTION: This snippet shows how to remove a panel using the Dockview API. It first retrieves a reference to the panel by its ID, then passes that reference to the removePanel method.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel: IDockviewPanel = api.getPanel('myPanel');\napi.removePanel(panel);\n```\n\n----------------------------------------\n\nTITLE: Floating Panel Configuration\nDESCRIPTION: Examples of creating floating panels with optional position and size specifications.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'panel_1',\n    component: 'default',\n    floating: true\n});\n\napi.addPanel({\n  id: 'panel_2',\n  component: 'default',\n  floating: {\n      position: { left: 10, top: 10 },\n      width: 300,\n      height: 300\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: API Reference Updates in Dockview Core\nDESCRIPTION: Documentation of API changes including event renames, component creation method updates, and deprecation notices. These changes are part of the framework support restructuring.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2024-04-27-dockview-1.13.0.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// New Events\nonDidActivePanelChange\n\n// Deprecated\ncanDisplayOverlay // replaced with onUnhandledDragOverEvent\n\n// Renamed Methods\ncreateRightHeaderActionsElement  // from createRightHeaderActionElement\ncreateLeftHeaderActionsElement   // from createLeftHeaderActionElement\ncreatePrefixHeaderActionsElement // from createPrefixHeaderActionElement\n\n// Replaced APIs\nframeworkTabComponents, tabComponents     // replaced by createTabComponent\nframeworkComponents, components           // replaced by createComponent\nwatermarkFrameworkComponent, watermarkComponent // replaced by createWatermarkComponent\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Component Configuration\nDESCRIPTION: Example of adding a panel with a custom tab component renderer specification.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst panel: IDockviewPanel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    tabComponent: 'my_tab_component',\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Panel Size Configuration\nDESCRIPTION: Demonstrates setting initial panel dimensions, though these may be adjusted based on grid constraints.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/add.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'panel_1',\n    component: 'default',\n    initialWidth: 100,\n    initialHeight: 100\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting React Import Syntax in Dockview\nDESCRIPTION: Shows the changes made to React import statements, moving from namespace imports to default imports. This change is part of preparation work for supporting multiple frontend frameworks.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2024-03-17-dockview-1.11.0.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react' // Old syntax\nimport React from 'react' // New syntax\n\nimport * as ReactDOM from 'react-dom' // Old syntax\nimport ReactDOM from 'react-dom' // New syntax\n```\n\n----------------------------------------\n\nTITLE: Conditional Panel Rendering HOC in React\nDESCRIPTION: Higher-Order Component implementation that conditionally renders panel content based on visibility state.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/rendering.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction RenderWhenVisible(\n    component: React.FunctionComponent<IDockviewPanelProps>\n) {\n    const HigherOrderComponent = (props: IDockviewPanelProps) => {\n        const [visible, setVisible] = React.useState<boolean>(\n            props.api.isVisible\n        );\n\n        React.useEffect(() => {\n            const disposable = props.api.onDidVisibilityChange((event) =>\n                setVisible(event.isVisible)\n            );\n\n            return () => {\n                disposable.dispose();\n            };\n        }, [props.api]);\n\n        if (!visible) {\n            return null;\n        }\n\n        return React.createElement(component, props);\n    };\n    return HigherOrderComponent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hidden Header Property in DockView\nDESCRIPTION: Shows how to hide a panel group's header section by setting the hidden property to true on the panel.group.header object.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/hiddenHeader.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npanel.group.header.hidden = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tab Renderer in Vue\nDESCRIPTION: Demonstrates setting a default tab renderer in Vue using the defaultTabRenderer property. This will be used for all tabs in the application unless overridden.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = {\n    name: 'App',\n    components: {\n        'component_1': VueComponent1,\n        'tab_1': VueComponent2,\n    },\n    methods: {\n        onReady(event: DockviewReadyEvent) {\n            event.api.addPanel({\n                id: 'panel_1',\n                component: 'component_1',\n            });\n        },\n    },\n    template: `\n      <dockview-vue\n        @ready=\"onReady\"\n        :defaultTabRenderer='tab_1'\n      >\n      </dockview-vue>`,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Always Render Mode in TypeScript\nDESCRIPTION: Demonstrates adding a panel that maintains its DOM tree even when hidden, preserving DOM-specific state like scrollbar position.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/rendering.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    renderer: 'always'\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Dockview API via Panel Component in React\nDESCRIPTION: This snippet demonstrates how to access the Dockview API through the props of a panel component. It shows the structure of a basic panel component that receives containerApi and custom parameters.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: IDockviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Window-like Manager with Tabs in JavaScript\nDESCRIPTION: This code snippet imports the necessary components for rendering a window-like manager with tabs. It imports a MultiFrameworkContainer component and a DockviewNative2 component, which are likely used to create the tabbed interface.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/advanced/advanced.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { MultiFrameworkContainer } from '@site/src/components/ui/container';\nimport DockviewNative2 from '@site/sandboxes/nativeapp-dockview/src/app';\n```\n\n----------------------------------------\n\nTITLE: Panel Height and Overflow CSS Configuration\nDESCRIPTION: Demonstrates three different approaches to configuring panel scrolling behavior using CSS height and overflow properties. Includes examples of percentage-based height without scrolling, fixed height with scrolling, and nested container with overflow.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/scrollbars.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Panel 1 - No scrollbar, content clipped */\n.panel1 {\n    height: 100%;\n}\n\n/* Panel 2 - Scrollbar appears */\n.panel2 {\n    height: 2000px;\n}\n\n/* Panel 3 - Scrollbar through child container */\n.panel3 {\n    height: 100%;\n}\n.panel3-child {\n    overflow: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dockview API via onReady Callback in React\nDESCRIPTION: This example shows how to access the Dockview API through the onReady callback function. The event object provides access to the API for controlling general features of the component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/intro.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst onReady = (event: DockviewReadyEvent) => {\n    // event.api...\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Framework Container for Window-like Manager in JSX\nDESCRIPTION: This JSX code renders a MultiFrameworkContainer component, passing it a sandboxId prop and a react prop. The react prop is set to the imported DockviewNative2 component, suggesting that this is the main component responsible for the window-like manager with tabs functionality.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/advanced/advanced.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<MultiFrameworkContainer sandboxId=\"nativeapp-dockview\" react={DockviewNative2} />\n```\n\n----------------------------------------\n\nTITLE: Render Mode Selection Examples in TypeScript\nDESCRIPTION: Examples showing both rendering modes for panel creation in Dockview.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/rendering.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    renderer: 'always'\n});\n\napi.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    renderer: 'onlyWhenVisible'\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Snap Behavior\nDESCRIPTION: Shows how to add a panel with snap behavior enabled.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    snap: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing DockView Package\nDESCRIPTION: Command to install DockView package from npm as a project dependency. Requires peer dependencies of React and ReactDOM >= 16.8.0.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save dockview\n```\n\n----------------------------------------\n\nTITLE: Including API Reference for Drag and Drop Methods\nDESCRIPTION: DocRef component that references the DockviewApi interface with specific methods related to drag and drop functionality: 'onDidDrop' and 'onUnhandledDragOverEvent'.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/external.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocRef declaration=\"DockviewApi\"\n  methods={['onDidDrop', 'onUnhandledDragOverEvent']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Position\nDESCRIPTION: Demonstrates adding panels with specific positioning relative to other panels.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'panel_1',\n    component: 'default',\n});\n\nconst panel2 = api.addPanel({\n    id: 'panel_2',\n    component: 'default',\n    position: {\n        referencePanel: panel1,\n        direction: 'right',\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing DockView Styles\nDESCRIPTION: CSS import statement to include DockView's required stylesheet in your project.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview/README.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '~dockview/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: Installing dockview for React\nDESCRIPTION: This command installs the React-specific Dockview library using npm.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dockview-react\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Custom Parameters\nDESCRIPTION: Shows how to add a panel with custom parameters and update them.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    params: {\n        myCustomKey: 'my_custom_value',\n    },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\npanel.api.updateParameters({\n    myCustomKey: 'my_custom_value',\n    myOtherCustomKey: 'my_other_custom_key',\n});\n```\n\n----------------------------------------\n\nTITLE: Applying DockView Theme\nDESCRIPTION: HTML example showing how to apply the DockView dark theme to the body element of your application.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body classname=\"dockview-theme-dark\"></body>\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview CSS in JavaScript\nDESCRIPTION: How to import the core CSS styles for Dockview in a JavaScript project.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/theme.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import './node_modules/dockview-core/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: Basic Panel Addition\nDESCRIPTION: Shows the minimum required configuration to add a new panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dockview Package with NPM\nDESCRIPTION: Command for installing the Dockview package from npm. Dockview has peer dependencies on React and ReactDOM version 16.8.0 or higher.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview-angular/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save dockview\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Gridview Panel Component\nDESCRIPTION: Demonstrates how to create a custom panel component with typed props including panel parameters and API access.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.containerApi...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Visibility\nDESCRIPTION: Shows how to toggle panel visibility.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nprops.api.setVisible(false);\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview CSS Styles\nDESCRIPTION: CSS import statement for including the required Dockview stylesheet in your project. This must be included for proper styling of Dockview components.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview-angular/README.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '~dockview/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: Handling Panel Visibility Changes in Splitview\nDESCRIPTION: This snippet demonstrates how to listen for and handle visibility changes of a panel in the splitview. It uses the onDidVisibilityChange event from the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst disposable = props.api.onDidVisibilityChange(({ isVisible }) => {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Gridview Theme\nDESCRIPTION: Shows different ways to apply themes to the Gridview component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// Providing a theme directly through the DockviewReact component props\n<GridviewReact className=\"dockview-theme-dark\" />\n\n// Providing a theme somewhere in the DOM tree\n<div className=\"dockview-theme-dark\">\n  <div>\n    {/**...  */}\n    <GridviewReact  />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Dockview Theme to HTML Body\nDESCRIPTION: HTML example showing how to apply the Dockview dark theme to a page. Themes should be applied to an element containing your Dockview components.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/dockview-angular/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body classname=\"dockview-theme-dark\"></body>\n```\n\n----------------------------------------\n\nTITLE: Accessing Panel API in Component\nDESCRIPTION: Demonstrates how to access and use the panel API within a panel component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = (props: IGridviewPanelProps<{ title: string }>) => {\n    // props.api...\n\n    return <div>{`My first panel has the title: ${props.params.title}`}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Size Constraints when Adding Panel to Splitview\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum size constraints when adding a new panel to the splitview.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nevent.api.addPanel({\n    id: 'panel_3',\n    component: 'default',\n    minimumSize: 100,\n    maximumSize: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dockview Package\nDESCRIPTION: Command to install the dockview package via npm. Requires React >= 16.8.0 and ReactDOM >= 16.8.0 as peer dependencies.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install dockview\n```\n\n----------------------------------------\n\nTITLE: Including Live Example of Paneview Component\nDESCRIPTION: Embeds a live example of the Paneview component using the LiveExample component, showing a simple implementation in React.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/paneview/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveExample framework='react' id='paneview/simple' />\n```\n\n----------------------------------------\n\nTITLE: Handling Panel Active State Changes in Splitview\nDESCRIPTION: This snippet demonstrates how to listen for and handle active state changes of a panel in the splitview. It uses the onDidActiveChange event from the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst disposable = props.api.onDidActiveChange(({ isActive }) => {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview Styles\nDESCRIPTION: CSS import statement to include the required dockview stylesheet in your application.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './node_modules/dockview/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: Custom Header Component Implementation\nDESCRIPTION: Demonstrates how to implement a custom header component for Paneview panels with expansion state management and click handling.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/paneview/paneview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IPaneviewPanelProps } from 'dockview';\n\nconst MyHeaderComponent = (props: IPaneviewPanelProps<{ title: string }>) => {\n    const [expanded, setExpanded] = React.useState<boolean>(\n        props.api.isExpanded\n    );\n\n    React.useEffect(() => {\n        const disposable = props.api.onDidExpansionChange((event) => {\n            setExpanded(event.isExpanded);\n        });\n\n        return () => {\n            disposable.dispose();\n        };\n    }, []);\n\n    const onClick = () => {\n        props.api.setExpanded(!expanded);\n    };\n\n    return (\n        <div\n            style={{\n                padding: '10px',\n                height: '100%',\n                backgroundColor: 'rgb(60,60,60)',\n            }}\n        >\n            <a\n                onClick={onClick}\n                className={expanded ? 'expanded' : 'collapsed'}\n            />\n            <span>{props.params.title}</span>\n        </div>\n    );\n};\n\nconst headerComponents = { myHeaderComponent: MyHeaderComponent };\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Visibility in Splitview\nDESCRIPTION: This snippet shows how to programmatically set the visibility of a panel in the splitview using the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/splitview/splitview.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\napi.setVisible(true);\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component for Documentation References\nDESCRIPTION: Import statement for the DocRef component that's used to reference API declarations for different frameworks.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/dockview/options.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Registering Panels in JavaScript with Dockview\nDESCRIPTION: Implementation of panel registration in JavaScript using the createComponent option. Defines a Panel class that implements IContentRenderer interface and handles initialization with the required parameters.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/register.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nclass Panel implements IContentRenderer {\n    private readonly _element: HTMLElement;\n\n    get element(): HTMLElement {\n        return this._element;\n    }\n\n    constructor() {\n        this._element = document.createElement('div');\n    }\n\n    init(parameters: GroupPanelPartInitParameters): void {\n        //\n    }\n}\n\n\nconst api = createDockview(parentElement, {\n    createComponent: (options) => {\n        switch (options.name) {\n            case 'component_1':\n                return new Panel();\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Tab Components in Vue\nDESCRIPTION: Demonstrates how to register custom tab components in Vue. The example shows defining components, setting up methods for handling events, and assigning tab components to panels.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/tabs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = {\n    name: 'App',\n    components: {\n        'component_1': VueComponent1,\n        'tab_1': VueComponent2,\n    },\n    methods: {\n        onReady(event: DockviewReadyEvent) {\n            event.api.addPanel({\n                id: 'panel_1',\n                component: 'component_1',\n                tabComponent: 'tab_1'\n            });\n        },\n    },\n    template: `\n      <dockview-vue\n        @ready=\"onReady\"\n      >\n      </dockview-vue>`,\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Dockview Component Options Reference\nDESCRIPTION: Framework-specific documentation reference for JavaScript implementation options using the FrameworkSpecific wrapper component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/dockview/options.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"JavaScript\">\n  <DocRef declaration=\"DockviewComponentOptions\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Size\nDESCRIPTION: Shows how to set the size of a panel using the panel API.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nprops.api.setSize({\n    height: 100,\n    width: 200,\n});\n```\n\n----------------------------------------\n\nTITLE: Moving a Group in TypeScript using Dockview\nDESCRIPTION: This code example shows how to move a group using the group API in Dockview. It first retrieves the group associated with a panel, then calls the 'moveTo' method on the group's API to move it to a new position.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/panels/move.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst group = panel.api.group;\ngroup.api.moveTo({ group, position });\n```\n\n----------------------------------------\n\nTITLE: Vue Dockview Component Props Reference\nDESCRIPTION: Framework-specific documentation reference for Vue implementation props using the FrameworkSpecific wrapper component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/dockview/options.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"Vue\">\n  <DocRef declaration=\"IDockviewVueProps\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Setting Panel Constraints\nDESCRIPTION: Demonstrates how to set size constraints for a panel.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nprops.api.setConstraints({\n    minimumHeight: 100,\n    maximumHeight: 1000\n    minimumWidth: 100,\n    maximumWidth: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Running Dockview Project Locally\nDESCRIPTION: Steps to set up and run the Dockview project locally after cloning from GitHub. This includes installing dependencies, building the core packages, and starting the documentation site for testing.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/contributing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure with JSX Components\nDESCRIPTION: Frontmatter configuration and component imports for a documentation page, using framework-specific documentation references.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/gridview/options.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Options\nsidebar_position: 0\n---\n\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<FrameworkSpecific framework=\"JavaScript\">\n  <DocRef declaration=\"GridviewComponentOptions\" />\n</FrameworkSpecific>\n\n<FrameworkSpecific framework=\"React\">\n  <DocRef declaration=\"IGridviewReactProps\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Adding Panel with Priority\nDESCRIPTION: Demonstrates adding a panel with layout priority settings.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst panel = api.addPanel({\n    id: 'my_unique_panel_id',\n    component: 'my_component',\n    minimumHeight: 100,\n    priority: LayoutPriority.High,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dockview-core for JavaScript\nDESCRIPTION: This command installs the core Dockview library for JavaScript projects using npm.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dockview-core\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in Markdown Documentation\nDESCRIPTION: Imports the DocRef component from the site's UI reference components, which is used to display framework-specific documentation references.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/paneview/options.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Example Frame Component in React\nDESCRIPTION: Renders a LiveExample component that displays a simple gridview example implemented in React. The component takes framework and id parameters.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/gridview/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveExample framework='react' id='gridview/simple' />\n```\n\n----------------------------------------\n\nTITLE: Installing dockview for Vue\nDESCRIPTION: This command installs the Vue-specific Dockview library using npm.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dockview-vue\n```\n\n----------------------------------------\n\nTITLE: Using FrameworkSpecific Component with DocRef for React Documentation\nDESCRIPTION: Displays React-specific documentation reference for IPaneviewReactProps using the FrameworkSpecific and DocRef components.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/paneview/options.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"React\">\n  <DocRef declaration=\"IPaneviewReactProps\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Importing LiveExample Component in JSX/React\nDESCRIPTION: Imports the LiveExample component from the site's components directory, which is used to display interactive code examples.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/gridview/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveExample from '@site/src/components/ui/exampleFrame';\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview CSS in React\nDESCRIPTION: How to import the core CSS styles for Dockview in a React project.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/theme.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './node_modules/dockview-react/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: DocRef Usage for React Framework\nDESCRIPTION: This code block demonstrates how to use the DocRef component to reference the ISplitviewReactProps documentation specifically for the React framework implementation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/splitview/options.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"React\">\n  <DocRef declaration=\"ISplitviewReactProps\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: React Dockview Component Props Reference\nDESCRIPTION: Framework-specific documentation reference for React implementation props using the FrameworkSpecific wrapper component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/dockview/options.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"React\">\n  <DocRef declaration=\"IDockviewReactProps\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clamp Function for Value Constraints\nDESCRIPTION: This pseudocode defines a clamp function that constrains a value within specified minimum and maximum bounds. It's used to ensure delta values stay within acceptable ranges during split view resizing.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/misc/math/math.mdx#2025-04-17_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\nf(value, value_min, value_max) = MIN(value_max, MAX(value_min, value))\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocRef Component for GridviewApi Documentation in JSX\nDESCRIPTION: This snippet shows how to import the DocRef component from the site components and use it to reference the GridviewApi declaration. This creates an API reference documentation section.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/gridview/api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<DocRef declaration=\"GridviewApi\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Split View Resizing with Delta Compensation\nDESCRIPTION: This pseudocode demonstrates the algorithm for resizing split view components while maintaining constant width. It introduces a delta (Δ) value for left-side adjustments and compensates on the right side to preserve overall width.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/misc/math/math.mdx#2025-04-17_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\nΔ_remaining = Δ\nΔ_used = 0\nfor(j = i; j >= 0; i--) do\n    V^next_j = Min(V^max_j, Max(V^min_j, V_j + Δ_remaining))\n    V^Δ_j = V^next_j - V_j\n    Δ_remaining = Δ_remaining - V^Δ_j\n    Δ_used = Δ_used + V^Δ_j\n    V_j = V^next_j\n\nfor(j = i+1; j < n; i++) do\n    V^next_j = Min(V^max_j, Max(V^min_j,V_j - Δ_used))\n    V^Δ_j = V^next_j - V_j\n    Δ_used = Δ_used + V^Δ_j\n    V_j = V^next_j\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component for Displaying PaneviewPanelApi Documentation\nDESCRIPTION: This snippet imports the DocRef component from the site's UI components and uses it to render the PaneviewPanelApi documentation reference.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/paneview/panelApi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<DocRef declaration=\"PaneviewPanelApi\" />\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in JSX\nDESCRIPTION: Imports the DocRef component from the site's UI reference components directory and uses it to reference the DockviewPanelApi declaration.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/dockview/panelApi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<DocRef declaration=\"DockviewPanelApi\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Splitview Component in TypeScript\nDESCRIPTION: This code snippet imports the Splitview component from a local module. It's likely used to demonstrate the split view functionality in the document.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/misc/math/math.mdx#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Splitview } from '../../src/components/splitview/math';\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in JSX/React\nDESCRIPTION: Imports the DocRef component from the site's components directory, which is used to reference API documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/gridview/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in Markdown\nDESCRIPTION: JSX import statement and component usage for the DocRef component to reference GridviewPanelApi documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/gridview/panelApi.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<DocRef declaration=\"GridviewPanelApi\" />\n```\n\n----------------------------------------\n\nTITLE: Including DocRef Component in Paneview Documentation\nDESCRIPTION: Uses the DocRef component to reference the IPaneviewReactProps interface in the documentation, providing access to the props documentation for the Paneview component.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/paneview/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocRef declaration=\"IPaneviewReactProps\"/>\n```\n\n----------------------------------------\n\nTITLE: Using DocRef Component to Reference IGridviewReactProps\nDESCRIPTION: Demonstrates how to use the DocRef component to reference the IGridviewReactProps interface documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/gridview/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocRef declaration=\"IGridviewReactProps\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in JSX\nDESCRIPTION: This snippet imports the DocRef component from a specific path and uses it to reference the PaneviewApi declaration.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/paneview/api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<DocRef declaration=\"PaneviewApi\" />\n```\n\n----------------------------------------\n\nTITLE: CodeRunner Component Implementation\nDESCRIPTION: React component implementation for running dockview locked demonstration code.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/locked.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeRunner id='dockview/locked'/>\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component for Paneview Documentation\nDESCRIPTION: Imports a DocRef component that references the IPaneviewReactProps interface for the Paneview component documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/other/paneview/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component for API Documentation in React/JSX\nDESCRIPTION: This code snippet imports a custom DocRef component from the site's components directory and renders it with a 'declaration' prop set to 'SplitviewApi'. This is used to generate API reference documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/splitview/api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n\n<DocRef declaration=\"SplitviewApi\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Utility in React\nDESCRIPTION: Import statement for the useBaseUrl utility function from Docusaurus.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/locked.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview Documentation Components\nDESCRIPTION: Import statements for documentation reference components and live example framework used to demonstrate Dockview functionality.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/external.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\nimport LiveExample from '@site/src/components/ui/exampleFrame';\n```\n\n----------------------------------------\n\nTITLE: Using FrameworkSpecific Component with DocRef for JavaScript Documentation\nDESCRIPTION: Displays JavaScript-specific documentation reference for PaneviewComponentOptions using the FrameworkSpecific and DocRef components.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/paneview/options.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"JavaScript\">\n  <DocRef declaration=\"PaneviewComponentOptions\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in React/JSX\nDESCRIPTION: Import statement for the DocRef component from the site's UI components directory.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/locked.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Naive Split View Resizing Algorithm in Pseudocode\nDESCRIPTION: This pseudocode presents a basic algorithm for resizing views in a split view control. It iterates through views to the left of the dragged sash, adjusting their sizes based on the remaining delta while respecting minimum and maximum size constraints.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/misc/math/math.mdx#2025-04-17_snippet_1\n\nLANGUAGE: Pseudocode\nCODE:\n```\nΔremaining = Δ\nfor (j = i; j >= 0; i--) do\n    Vnextj = Min(Vmaxj, Max(Vminj, Vj + Δremaining))\n    VΔj = Vnextj - Vj\n    Δremaining = Δremaining - VΔj\n    Vj = Vnextj\n```\n\n----------------------------------------\n\nTITLE: DocRef Usage for JavaScript Framework\nDESCRIPTION: This code block demonstrates how to use the DocRef component to reference the SplitviewComponentOptions documentation specifically for the JavaScript framework implementation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/splitview/options.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkSpecific framework=\"JavaScript\">\n  <DocRef declaration=\"SplitviewComponentOptions\" />\n</FrameworkSpecific>\n```\n\n----------------------------------------\n\nTITLE: CodeRunner Component Implementation\nDESCRIPTION: Component implementation for running constraint examples in DockView.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/constraints.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeRunner id=\"dockview/constraints\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Page Header in DockView\nDESCRIPTION: This snippet shows how to define the title of a Markdown page using YAML front matter. It sets the page title to 'Markdown page example'.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/pages/markdown-page.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n```\n\n----------------------------------------\n\nTITLE: Image Display with Custom Styling in JSX\nDESCRIPTION: React/JSX code snippets showing how to display images with custom styling using useBaseUrl for image paths.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{display:' flex', justifyContent: 'center'}}>\n  <img style={{ height: '50px' }} src={useBaseUrl('/img/add_to_tab.svg')} />\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{display:' flex', justifyContent: 'center'}}>\n  <img style={{ height: '50px' }} src={useBaseUrl('/img/add_to_empty_space.svg')} />\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{display:' flex', justifyContent: 'center'}}>\n  <img style={{ height: '50px' }} src={useBaseUrl('/img/add_to_group.svg')} />\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{display:' flex', justifyContent: 'center'}}>\n  <img style={{ height: '300px' }} src={useBaseUrl('/img/drop_positions.svg')} />\n</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{display:' flex', justifyContent: 'center'}}>\n  <img style={{ height: '300px' }} src={useBaseUrl('/img/magnet_drop_positions.svg')} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in JSX\nDESCRIPTION: Import statement for the DocRef documentation reference component from site components directory.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/groups/constraints.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef'\n```\n\n----------------------------------------\n\nTITLE: Deploying DockView Website Using SSH\nDESCRIPTION: Command to deploy the DockView website using SSH authentication. This builds the website and pushes the content to the appropriate branch.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Dockview CSS in Vue\nDESCRIPTION: How to import the core CSS styles for Dockview in a Vue project.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/overview/getStarted/theme.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import './node_modules/dockview-vue/dist/styles/dockview.css';\n```\n\n----------------------------------------\n\nTITLE: Importing DocRef Component in Markdown\nDESCRIPTION: This snippet shows the import statement for the DocRef component used in the documentation page. The component is imported from the site's components directory.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/api/splitview/options.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocRef } from '@site/src/components/ui/reference/docRef';\n```\n\n----------------------------------------\n\nTITLE: Deploying DockView Website Without SSH\nDESCRIPTION: Command to deploy the DockView website without SSH authentication, using GitHub username. This is useful for pushing to GitHub Pages.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Adding CSS properties for sash transitions in Dockview\nDESCRIPTION: New CSS custom properties added in Dockview 3.2.0 for controlling active sash transition duration and delay effects.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2025-02-12-dockview-3.2.0.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--dv-active-sash-transition-duration\n```\n\nLANGUAGE: css\nCODE:\n```\n--dv-active-sash-transition-delay\n```\n\n----------------------------------------\n\nTITLE: Importing GridviewReact Component\nDESCRIPTION: Shows how to import the ReactGridview component from the dockview package.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/old_docs_DELETE_SOON/components/gridview/gridview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactGridview } from 'dockview';\n```\n\n----------------------------------------\n\nTITLE: Calculating Delta Constraints for Split View Resizing\nDESCRIPTION: These formulas calculate the minimum and maximum constraints for the delta (Δ) value used in split view resizing. They ensure that view sizes remain within specified limits and maintain overall component width.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/src/misc/math/math.mdx#2025-04-17_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nΔ^min_left = Σ V^min_j - V_j    j = i,...0\nΔ^max_left = Σ V^max_j - V_j    j = i,...0\nΔ^min_right = Σ V_j - V^min_j    j = i+1...n\nΔ^max_right = Σ V_j - V^min_j    j = i+1...n\n\nΔ_min = MAX ( V^min_left , V^max_right )\nΔ_max = MIN ( V^max_left , V^min_right )\n\nΔ_clamped = MIN ( V_max , MAX ( V_min , Δ ) )\n```\n\n----------------------------------------\n\nTITLE: CSS Class Name Changes in Dockview\nDESCRIPTION: Lists the CSS class name changes implemented in version 1.11.0. These changes standardize class naming between dockview-core and dockview to prepare for multi-framework support.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2024-03-17-dockview-1.11.0.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntab-action → dv-default-tab-action\ndefault-tab → dv-default-tab\ntab-content → dv-default-tab-content\ndockview-react-tab → dv-default-tab\ndockview-react-tab-title → dv-default-tab-content\ndv-react-tab-close-btn → dv-default-tab-action\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for DockView Landing Page\nDESCRIPTION: This HTML snippet defines the structure of the DockView landing page. It includes metadata, external resource links, and content sections for project information and documentation.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DockView</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <header>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#features\">Features</a></li>\n                <li><a href=\"#documentation\">Documentation</a></li>\n                <li><a href=\"#github\">GitHub</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <section id=\"home\">\n            <h1>DockView</h1>\n            <p>A flexible docking system for web applications</p>\n        </section>\n\n        <section id=\"features\">\n            <h2>Features</h2>\n            <ul>\n                <li>Customizable layouts</li>\n                <li>Drag and drop functionality</li>\n                <li>Resizable panels</li>\n                <li>Easy integration with existing projects</li>\n            </ul>\n        </section>\n\n        <section id=\"documentation\">\n            <h2>Documentation</h2>\n            <p>Check out our comprehensive documentation to get started with DockView:</p>\n            <a href=\"docs/index.html\" class=\"btn\">View Documentation</a>\n        </section>\n\n        <section id=\"github\">\n            <h2>GitHub</h2>\n            <p>DockView is open-source! Contribute to the project on GitHub:</p>\n            <a href=\"https://github.com/mathuo/dockview\" class=\"btn\"><i class=\"fab fa-github\"></i> GitHub Repository</a>\n        </section>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 DockView. All rights reserved.</p>\n    </footer>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing DockView Website Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for the DockView website using Yarn package manager.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Starting DockView Website Local Development Server\nDESCRIPTION: Command to start a local development server for the DockView website. This opens a browser window and supports live reloading of changes.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building DockView Website for Production\nDESCRIPTION: Command to generate static website content into the build directory, which can then be served using any static contents hosting service.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: React Component Removal in Dockview\nDESCRIPTION: Example of removed Higher Order Components (HOC) in Dockview that are no longer supported in version 1.4.1\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/blog/2022-05-11-dockview-1.4.1.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DockviewComponents.Panel\\>, <DockviewComponents.Content>, <DockviewComponents.Tab>, <DockviewComponents.Actions>\n```\n\n----------------------------------------\n\nTITLE: Including Live Example of External DnD in React\nDESCRIPTION: LiveExample component that renders a React-based demonstration of external drag and drop functionality in Dockview.\nSOURCE: https://github.com/mathuo/dockview/blob/master/packages/docs/docs/core/dnd/external.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveExample framework='react' id=\"dockview/dnd-external\" />\n```"
  }
]