[
  {
    "owner": "dagger",
    "repo": "dagger.git",
    "content": "TITLE: Implementing AI Agent in Python\nDESCRIPTION: Python code for creating a Dagger Function that uses an LLM to solve a programming assignment. It sets up the environment, defines inputs and outputs, and interacts with the LLM to complete the task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport anyio\nimport dagger\n\nclass CodingAgent:\n    async def go_program(self, assignment: str) -> dagger.Container:\n        async with dagger.Connection() as client:\n            model = client.default_llm_model()\n\n            builder = client.container().from_(\"golang:latest\")\n\n            environment = dagger.Env({\n                \"assignment\": assignment\n            }).with_inputs({\n                \"builder\": \"A container used to build and run Go programs\"\n            }).with_outputs({\n                \"completed\": \"A container with the completed assignment\"\n            })\n\n            prompt = \"You are an expert Go programmer. Your task is to write a Go program that fulfills the given assignment. Write the program, build it, and test it. If there are any errors, fix them and try again. When you are satisfied with the result, return the container with the completed assignment.\"\n\n            result = await model.complete(dagger.LLMCompletion(\n                prompt=prompt,\n                environment=environment,\n                inputs=dagger.Env({\n                    \"builder\": builder.id()\n                })\n            ))\n\n            return result.container(\"completed\")\n\nif __name__ == \"__main__\":\n    anyio.run(dagger.Connection)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Function in TypeScript\nDESCRIPTION: This TypeScript code defines a Dagger Function named 'getUser' that uses a container to make an HTTP request to a random user API and return the parsed result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, dag } from \"@dagger.io/dagger\"\n\nexport default async function getUser(): Promise<string> {\n  return await dag.container().from(\"alpine:latest\")\n    .withExec([\"apk\", \"add\", \"curl\", \"jq\"])\n    .withExec([\n      \"sh\", \"-c\",\n      \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\",\n    ])\n    .stdout()\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-version Node.js Testing and Building with Dagger SDK\nDESCRIPTION: TypeScript program using the Dagger SDK to test and build a Node.js application against multiple Node.js versions. It demonstrates creating a Dagger client and using it to run tests and builds in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\nconst versions = [\"16\", \"18\", \"20\"]\n\nconnect(async (client) => {\n  // get reference to the local project\n  const source = client.host().directory(\".\", {\n    exclude: [\"node_modules\", \"build-node-*\"],\n  })\n\n  // create a cache volume\n  const nodeCache = client.cacheVolume(\"node-cache\")\n\n  for (const version of versions) {\n    // create a Node container\n    const node = client\n      .container()\n      .from(`node:${version}`)\n      .withMountedCache(\"/root/.npm\", nodeCache)\n      .withMountedDirectory(\"/app\", source)\n      .withWorkdir(\"/app\")\n      .withExec([\"npm\", \"install\"])\n      .withExec([\"npm\", \"run\", \"test\", \"--\", \"--watchAll=false\"])\n      .withExec([\"npm\", \"run\", \"build\"])\n\n    // get reference to build output directory in container\n    const output = node.directory(\"build\")\n\n    // export output directory\n    await output.export(`./build-node-${version}`)\n\n    console.log(`Successfully built for Node ${version}`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Dagger Function for Container Publishing in Go\nDESCRIPTION: Illustrates a custom Dagger Function in Go that creates, modifies, and publishes a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Basics) Publish(ctx context.Context) (string, error) {\n\treturn dag.Container().\n\t\tFrom(\"alpine:latest\").\n\t\tWithNewFile(\"/hi.txt\", \"Hello from Dagger!\").\n\t\tWithEntrypoint([]string{\"cat\", \"/hi.txt\"}).\n\t\tPublish(ctx, \"ttl.sh/hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Loop Implementation in Go\nDESCRIPTION: This Go code snippet implements an agent loop using Dagger's LLM integration. It creates an LLM agent with an environment and prompts it to complete an assignment. The LLM runs in a loop, calling tools and iterating on its work until completion.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/mcp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfile=../quickstart/agent/snippets/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Binding Services in Dagger Functions (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates creating an HTTP service and using it in another Dagger Function. It defines two methods: 'httpService' which returns a Service, and 'get' which binds the service and accesses it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dag, Container, Service } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  async httpService(): Promise<Service> {\n    return dag.container().from(\"nginx:1.25-alpine\").withExposedPort(80).asService()\n  }\n\n  async get(): Promise<string> {\n    return dag\n      .container()\n      .from(\"alpine\")\n      .withServiceBinding(\"www\", await this.httpService())\n      .withExec([\"wget\", \"-O\", \"-\", \"http://www\", \"--timeout\", \"1\"])\n      .stdout()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Loop Implementation in Python\nDESCRIPTION: This Python code snippet implements an agent loop using Dagger's LLM integration. It creates an LLM agent with an environment and prompts it to complete an assignment. The LLM runs in a loop, calling tools and iterating on its work until completion.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/mcp.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfile=../quickstart/agent/snippets/python/src/coding_agent/main.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Coding Agent in TypeScript\nDESCRIPTION: TypeScript implementation of a Dagger Function that creates a coding agent by integrating an LLM with a Dagger Container environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Pipeline with Dagger Core API (Shell)\nDESCRIPTION: Demonstrates how to create a simple pipeline using the Dagger core API to build and export a Go application from a GitHub repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ncontainer |\n  from cgr.dev/chainguard/wolfi-base |\n  with-exec apk add go |\n  with-directory /src https://github.com/golang/example#master |\n  with-workdir /src/hello |\n  with-exec -- go build -o hello . |\n  file ./hello |\n  export ./hello-from-dagger\nEOF\n```\n\n----------------------------------------\n\nTITLE: Downloading File via Container in GraphQL\nDESCRIPTION: This complex query demonstrates downloading a file using a container with curl. It shows how to chain multiple operations like pulling a base image, installing software, executing commands, and retrieving a file, all within the proposed Dagger GraphQL API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/schema/README.md#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDownload a file over HTTP in a very convoluted way:\n\n1. Download a base linux container\n2. Install curl\n3. Download the file into the container\n4. Load and return the file\n\"\"\"\nquery convolutedDownload($url: String!) {\n  container {\n    from(address: \"index.docker.io/alpine:latest\") {\n      exec(args: [\"apk\", \"add\", \"curl\"]) {\n        exec(args: [\"curl\", \"-o\", \"/tmp/download\", $url) {\n          file(path: \"/tmp/download\") {\n            id\n         }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function in GitHub Actions (Standard Runner)\nDESCRIPTION: This YAML snippet demonstrates how to call a Dagger Function on a standard GitHub runner in a GitHub Actions workflow. It uses the 'Dagger for GitHub' action to execute a simple greeting function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Dagger\n        uses: dagger/dagger-for-github@v5\n        with:\n          version: \"0.9.3\"\n          cmds: |    \n            project init\n            project update\n            call hello --name world\n        env:\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Multi-architecture Go Build with Dagger SDK\nDESCRIPTION: Go program using the Dagger SDK to build a Go application for multiple OS and architecture combinations. It demonstrates creating a Dagger client and using it to execute builds in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\tif err := build(); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\nfunc build() error {\n\tctx := context.Background()\n\n\t// initialize Dagger client\n\tclient, err := dagger.Connect(ctx, dagger.WithLogOutput(os.Stdout))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\t// get reference to the local project\n\tsrc := client.Host().Directory(\".\")\n\n\t// create a cache volume\n\tcache := client.CacheVolume(\"go-cache\")\n\n\t// build matrix\n\tversions := []string{\"1.22\", \"1.23\"}\n\toses := []string{\"linux\", \"darwin\"}\n\tarchs := []string{\"amd64\", \"arm64\"}\n\n\t// iterate over the matrix\n\tfor _, version := range versions {\n\t\tfor _, goos := range oses {\n\t\t\tfor _, goarch := range archs {\n\t\t\t\t// create a Go container\n\t\t\t\tgoContainer := client.Container().From(fmt.Sprintf(\"golang:%s\", version))\n\n\t\t\t\t// mount the source code\n\t\t\t\tgoContainer = goContainer.WithDirectory(\"/src\", src).WithWorkdir(\"/src\")\n\n\t\t\t\t// mount the cache volume\n\t\t\t\tgoContainer = goContainer.WithMountedCache(\"/go/pkg/mod\", cache)\n\n\t\t\t\t// set GOOS and GOARCH\n\t\t\t\tgoContainer = goContainer.WithEnvVariable(\"GOOS\", goos)\n\t\t\t\tgoContainer = goContainer.WithEnvVariable(\"GOARCH\", goarch)\n\n\t\t\t\t// build\n\t\t\t\tpath := fmt.Sprintf(\"build/%s/%s/%s/hello\", version, goos, goarch)\n\t\t\t\tgoContainer = goContainer.WithExec([]string{\"go\", \"build\", \"-o\", path, \".\"})\n\n\t\t\t\t// get reference to build output directory in container\n\t\t\t\toutput := goContainer.Directory(\"build\")\n\n\t\t\t\t// export output directory\n\t\t\t\t_, err := output.Export(ctx, \"build\")\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline in TypeScript\nDESCRIPTION: TypeScript code for implementing a CI pipeline with four Dagger Functions: publish, test, build, and buildEnv.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, Container } from \"@dagger.io/dagger\"\n\nexport class HelloDagger {\n  async publish(): Promise<string> {\n    const image = await this.build()\n    const tag = `ttl.sh/hello-dagger:${Date.now()}`\n    await image.publish(tag)\n    return tag\n  }\n\n  async test(): Promise<string> {\n    return await (await this.buildEnv()).withExec([\"npm\", \"run\", \"test\"]).stdout()\n  }\n\n  async build(): Promise<Container> {\n    const client = connect()\n    const src = client.host().directory(\".\")\n    const dist = (await this.buildEnv()).withExec([\"npm\", \"run\", \"build\"]).directory(\"./dist\")\n    return client.container().from(\"nginx:1.25-alpine\").withDirectory(\"/usr/share/nginx/html\", dist)\n  }\n\n  async buildEnv(): Promise<Container> {\n    const client = connect()\n    const src = client.host().directory(\".\")\n    return client.container().from(\"node:20-slim\").withDirectory(\"/src\", src).withWorkdir(\"/src\").withExec([\"npm\", \"ci\"])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Coding Agent in Python\nDESCRIPTION: Python implementation of a Dagger Function that creates a coding agent by integrating an LLM with a Dagger Container environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Checking with Dagger Modules in Python\nDESCRIPTION: Implements a check method in Python utilizing the Dagger Trivy module to scan a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef check(self) -> str:\n    ctr = dag.wolfi().container()\n    return dag.trivy().scan_container(ctr)\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent in Go\nDESCRIPTION: Go code for creating a Dagger Function that uses an LLM to solve a programming assignment. It sets up the environment, defines inputs and outputs, and interacts with the LLM to complete the task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype CodingAgent struct{}\n\nfunc (m *CodingAgent) GoProgram(ctx context.Context, assignment string) (*dagger.Container, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer client.Close()\n\n\tmodel := client.DefaultLLMModel()\n\n\tbuilder := client.Container().From(\"golang:latest\")\n\n\tenvironment := dagger.Env(map[string]string{\n\t\t\"assignment\": assignment,\n\t}).WithInputs(map[string]string{\n\t\t\"builder\": \"A container used to build and run Go programs\",\n\t}).WithOutputs(map[string]string{\n\t\t\"completed\": \"A container with the completed assignment\",\n\t})\n\n\tprompt := \"You are an expert Go programmer. Your task is to write a Go program that fulfills the given assignment. Write the program, build it, and test it. If there are any errors, fix them and try again. When you are satisfied with the result, return the container with the completed assignment.\"\n\n\tresult, err := model.Complete(ctx, dagger.LLMCompletion{\n\t\tPrompt:      prompt,\n\t\tEnvironment: environment,\n\t\tInputs: dagger.Env(map[string]string{\n\t\t\t\"builder\": builder.ID(),\n\t\t}),\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn result.Container(\"completed\"), nil\n}\n\nfunc main() {\n\tclient, err := dagger.Connect(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\t_, err = client.Host().Directory(\".\").Export(\"./\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Service with Dagger Functions\nDESCRIPTION: This code snippet demonstrates how to create a Dagger Function that returns an HTTP service, which can be accessed from the calling host. It shows the implementation in multiple programming languages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/services.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfile=./snippets/services-1/go/main.go\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\nfile=./snippets/services-1/python/main.py\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfile=./snippets/services-1/typescript/index.ts\n```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php\nfile=./snippets/services-1/php/src/MyModule.php\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nfile=./snippets/services-1/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Services in Dagger Functions (Go)\nDESCRIPTION: This Go code demonstrates how to create an HTTP service and use it in another Dagger Function. It defines two functions: 'httpService' which returns a Service, and 'get' which binds the service and accesses it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Module struct {}\n\nfunc (m *Module) HttpService(ctx context.Context) (*dagger.Service, error) {\n\treturn dag.Container().From(\"nginx:1.25-alpine\").WithExposedPort(80).AsService()\n}\n\nfunc (m *Module) Get(ctx context.Context) (string, error) {\n\treturn dag.Container().From(\"alpine\").WithServiceBinding(\"www\", m.HttpService()).WithExec([\"wget\", \"-O\", \"-\", \"http://www\", \"--timeout\", \"1\"]).Stdout()\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Containerizing a Go Application\nDESCRIPTION: This snippet demonstrates a Dagger Function that builds and containerizes a Go application. It shows how to create a container, install build tools, copy source code, compile the application, and create a runtime container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/programmable-pipelines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t\n\t// initialize Dagger client\n\tclient, err := dagger.Connect(ctx, dagger.WithLogOutput(os.Stderr))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\t// get reference to the local project\n\tsrc := client.Host().Directory(\".\", dagger.HostDirectoryOpts{\n\t\tExclude: []string{\"ci\", \"node_modules\"},\n\t})\n\n\t// build application\n\tcontainer, err := buildContainer(ctx, client, src)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\t// get reference to container image\n\tcontainerID, err := container.ID(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\tfmt.Println(\"Container built with ID:\", containerID)\n}\n\n// buildContainer returns a reference to an OCI-compliant container image\n// with a Go application pre-installed.\nfunc buildContainer(ctx context.Context, client *dagger.Client, src *dagger.Directory) (*dagger.Container, error) {\n\treturn client.Container().From(\"golang:1.19\").\n\t\t// mount source code into container\n\t\tWithMountedDirectory(\"/src\", src).\n\t\tWithWorkdir(\"/src\").\n\t\t\n\t\t// install application dependencies\n\t\tWithExec([]string{\"go\", \"mod\", \"download\"}).\n\t\t\n\t\t// build application\n\t\tWithExec([]string{\"go\", \"build\", \"-o\", \"app\", \"main.go\"}).\n\t\t\n\t\t// create new container with just the built application\n\t\tWith(func(c *dagger.Container) *dagger.Container {\n\t\t\treturn client.Container().From(\"gcr.io/distroless/static\").\n\t\t\t\tWithFile(\"/app\", c.File(\"/src/app\"))\n\t\t}).\n\t\t\n\t\t// set the entrypoint\n\t\tWithEntrypoint([]string{\"/app\"}).\n\t\tSync(ctx)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nimport dagger\n\n\n@dagger.function\nasync def build_container(src: dagger.Directory) -> dagger.Container:\n    \"\"\"Returns an OCI-compliant container with the Go application pre-installed.\"\"\"\n    # get Go build container\n    ctr = dagger.container().from_(\"golang:1.19\")\n    \n    # mount source code\n    ctr = ctr.with_mounted_directory(\"/src\", src).with_workdir(\"/src\")\n    \n    # install dependencies\n    ctr = ctr.with_exec([\"go\", \"mod\", \"download\"])\n    \n    # build application\n    ctr = ctr.with_exec([\"go\", \"build\", \"-o\", \"app\", \"main.go\"])\n    \n    # create a new container with minimal runtime\n    distroless = dagger.container().from_(\"gcr.io/distroless/static\")\n    return distroless.with_file(\"/app\", ctr.file(\"/src/app\")).with_entrypoint([\"/app\"])\n\n\n@dagger.function\nasync def build() -> str:\n    # get reference to the local project\n    src = dagger.host().directory(\".\", exclude=[\"ci\", \"node_modules\"])\n    \n    # build application\n    ctr = await build_container(src)\n    \n    # get container ID\n    return await ctr.id()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\n// initialize Dagger client\nconnect(\n  async (client) => {\n    // get reference to the local project\n    const source = client.host().directory(\".\", {\n      exclude: [\"ci\", \"node_modules\"],\n    })\n\n    // build container\n    const container = await buildContainer(client, source)\n\n    // get reference to container image\n    const containerId = await container.id()\n    \n    console.log(`Container built with ID: ${containerId}`)\n  },\n  { LogOutput: process.stderr }\n)\n\n// buildContainer returns a reference to an OCI-compliant container image\n// with a Go application pre-installed\nasync function buildContainer(client, src) {\n  return client.container()\n    .from(\"golang:1.19\")\n    // mount source code into container\n    .withMountedDirectory(\"/src\", src)\n    .withWorkdir(\"/src\")\n    \n    // install application dependencies\n    .withExec([\"go\", \"mod\", \"download\"])\n    \n    // build application\n    .withExec([\"go\", \"build\", \"-o\", \"app\", \"main.go\"])\n    \n    // create new container with just the built application\n    .with(() => {\n      return client.container()\n        .from(\"gcr.io/distroless/static\")\n        .withFile(\"/app\", client.container()\n        .from(\"golang:1.19\")\n        .withMountedDirectory(\"/src\", src)\n        .withWorkdir(\"/src\")\n        .withExec([\"go\", \"build\", \"-o\", \"app\", \"main.go\"])\n        .file(\"/src/app\"))\n    })\n    \n    // set the entrypoint\n    .withEntrypoint([\"/app\"])\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyNamespace;\n\nclass MyModule\n{\n    #[\\Dagger\\Client\\Function_\\Doc('Returns an OCI-compliant container with a Go application pre-installed')]\n    #[\\Dagger\\Client\\Function_\\Name('buildContainer')]\n    public function buildContainer(\\Dagger\\Client\\Client $client, \\Dagger\\Client\\Directory $src): \\Dagger\\Client\\Container\n    {\n        return $client->container()->from('golang:1.19')\n            // mount source code into container\n            ->withMountedDirectory('/src', $src)\n            ->withWorkdir('/src')\n            \n            // install application dependencies\n            ->withExec(['go', 'mod', 'download'])\n            \n            // build application\n            ->withExec(['go', 'build', '-o', 'app', 'main.go'])\n            \n            // create new container with just the built application\n            ->with(function (\\Dagger\\Client\\Container $c) use ($client) {\n                return $client->container()->from('gcr.io/distroless/static')\n                    ->withFile('/app', $c->file('/src/app'));\n            })\n            \n            // set the entrypoint\n            ->withEntrypoint(['/app']);\n    }\n    \n    #[\\Dagger\\Client\\Function_\\Doc('Builds a container with the application')]\n    #[\\Dagger\\Client\\Function_\\Name('build')]\n    public function build(\\Dagger\\Client\\Client $client): string\n    {\n        // get reference to the local project\n        $src = $client->host()->directory('.', [\n            'exclude' => ['ci', 'node_modules'],\n        ]);\n        \n        // build application\n        $container = $this->buildContainer($client, $src);\n        \n        // get container ID\n        return $container->id();\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Container;\nimport io.dagger.client.Directory;\nimport io.dagger.client.Function;\nimport io.dagger.client.Doc;\nimport io.dagger.client.Client;\n\nimport java.util.List;\n\npublic class MyModule {\n\n    /**\n     * Returns an OCI-compliant container with a Go application pre-installed\n     */\n    @Function\n    public Container buildContainer(Directory src) {\n        return client.container().from(\"golang:1.19\")\n            // mount source code into container\n            .withMountedDirectory(\"/src\", src)\n            .withWorkdir(\"/src\")\n            \n            // install application dependencies\n            .withExec(List.of(\"go\", \"mod\", \"download\"))\n            \n            // build application\n            .withExec(List.of(\"go\", \"build\", \"-o\", \"app\", \"main.go\"))\n            \n            // create new container with just the built application\n            .with(c -> client.container().from(\"gcr.io/distroless/static\")\n                .withFile(\"/app\", c.file(\"/src/app\")))\n            \n            // set the entrypoint\n            .withEntrypoint(List.of(\"/app\"));\n    }\n\n    /**\n     * Builds a container with the application\n     */\n    @Function\n    public String build() {\n        // get reference to the local project\n        Directory src = client.host().directory(\".\", d -> d.exclude(List.of(\"ci\", \"node_modules\")));\n        \n        // build application\n        Container container = buildContainer(src);\n        \n        // get container ID\n        return container.id();\n    }\n\n    private final Client client;\n\n    public MyModule(Client client) {\n        this.client = client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Prompts to LLM in Shell\nDESCRIPTION: Demonstrates how to use the LLM.withPrompt() API method to append a text prompt to the LLM context from a system shell or interactive Dagger shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nllm |\n  with-prompt \"What tools do you have available?\"\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nllm |\n  with-prompt \"What tools do you have available?\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline with Dagger Functions in Python\nDESCRIPTION: This Python function demonstrates how to create a CI pipeline using Dagger. It utilizes both core Dagger functions and third-party Dagger Functions written in Go, showcasing cross-language compatibility.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/modules.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@function\nasync def ci(self, source: dagger.Directory) -> str:\n    # Use third-party Golang module to configure project\n    go_project = dag.golang().with_project(source)\n\n    # Run Go tests using Golang module\n    await go_project.test()\n\n    # Get container with built binaries using Golang module\n    image = await go_project.build_container()\n\n    # Push image to a registry using core Dagger API\n    ref = await image.publish(\"ttl.sh/demoapp:1h\")\n\n    # Scan image for vulnerabilites using third-party Trivy module\n    return await dag.trivy().scan_container(dag.container().from_(ref))\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Volumes for apt Packages in Dagger Container\nDESCRIPTION: This function creates a Dagger container from Debian, mounts a cache volume for apt packages, and installs Maven and MariaDB server. The cache volume significantly improves execution times on subsequent runs by reusing cached instructions and files.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Basics) Env(ctx context.Context) *dagger.Container {\n\taptCache := dag.CacheVolume(\"apt-cache\")\n\treturn dag.Container().\n\t\tFrom(\"debian:latest\").\n\t\tWithMountedCache(\"/var/cache/apt/archives\", aptCache).\n\t\tWithExec([]string{\"apt-get\", \"update\"}).\n\t\tWithExec([]string{\"apt-get\", \"install\", \"--yes\", \"maven\", \"mariadb-server\"})\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef env(self) -> dagger.Container:\n    apt_cache = dag.cache_volume(\"apt-cache\")\n    return (\n        dag.container()\n        .from_(\"debian:latest\")\n        .with_mounted_cache(\"/var/cache/apt/archives\", apt_cache)\n        .with_exec([\"apt-get\", \"update\"])\n        .with_exec([\"apt-get\", \"install\", \"--yes\", \"maven\", \"mariadb-server\"])\n    )\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@func()\nenv(): Container {\n  let aptCache = dag.cacheVolume(\"apt-cache\")\n  return dag.container()\n    .from(\"debian:latest\")\n    .withMountedCache(\"/var/cache/apt/archives\", aptCache)\n    .withExec([\"apt-get\", \"update\"])\n    .withExec([\"apt-get\", \"install\", \"--yes\", \"maven\", \"mariadb-server\"])\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\npublic function env(): Container\n{\n  $aptCache = dag()->cacheVolume('apt-cache');\n  return dag()\n    ->container()\n    ->from('debian:latest')\n    ->withMountedCache('/var/cache/apt/archives', $aptCache)\n    ->withExec(['apt-get', 'update'])\n    ->withExec(['apt-get', 'install', '--yes', 'maven', 'mariadb-server']);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n  @Function\n  public Container env() {\n    CacheVolume aptCache = dag().cacheVolume(\"apt-cache\");\n    return dag()\n        .container()\n        .from(\"debian:latest\")\n        .withMountedCache(\"/var/cache/apt/archives\", aptCache)\n        .withExec(List.of(\"apt-get\", \"update\"))\n        .withExec(List.of(\"apt-get\", \"install\", \"--yes\", \"maven\", \"mariadb-server\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling a Dagger Function in Azure Pipelines\nDESCRIPTION: This YAML snippet demonstrates a basic Azure Pipelines configuration that downloads the Dagger CLI and calls a Dagger Function. It uses an Ubuntu-latest agent and sets up environment variables for Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/azure-pipelines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - bash: |\n      curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=0.9.3 sh\n      sudo mv bin/dagger /usr/local/bin\n      dagger version\n    displayName: Install Dagger\n\n  - bash: |\n      dagger call hello --log-format=plain\n    env:\n      DAGGER_CLOUD_TOKEN: $(DAGGER_CLOUD_TOKEN)\n    displayName: Run Dagger\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Architecture Image with Cross-Compilation in Go\nDESCRIPTION: This Dagger function builds a single image for different CPU architectures using cross-compilation. It uses the containerd utility module and builds the image for specified platforms using Go's cross-compilation capabilities.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_26\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n\t\"github.com/levlaz/daggerverse/containerd\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context, src string) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tproject := client.Git(src).Branch(\"master\").Tree()\n\n\tgoVersion := \"1.20\"\n\n\tgoBuild := client.Container().From(fmt.Sprintf(\"golang:%s\", goVersion))\n\tgoBuild = goBuild.WithMountedDirectory(\"/src\", project)\n\tgoBuild = goBuild.WithWorkdir(\"/src\")\n\n\tcontainerd := containerd.New()\n\n\tplatforms := []string{\"linux/amd64\", \"linux/arm64\"}\n\tvar builds []string\n\tfor _, platform := range platforms {\n\t\tplatformBuild := goBuild.WithEnvVariable(\"GOOS\", \"linux\")\n\t\tplatformBuild = platformBuild.WithEnvVariable(\"GOARCH\", \"amd64\")\n\t\tif platform == \"linux/arm64\" {\n\t\t\tplatformBuild = platformBuild.WithEnvVariable(\"GOARCH\", \"arm64\")\n\t\t}\n\t\tplatformBuild = platformBuild.WithExec([]string{\"go\", \"build\", \"-o\", \"app\", \".\"})\n\t\timage := client.Container().From(\"scratch\").WithFile(\"/app\", platformBuild.File(\"/src/app\"))\n\t\tbuild := containerd.Publish(ctx, image, dagger.ContainerPublishOpts{\n\t\t\tPlatform: dagger.Platform(platform),\n\t\t})\n\t\tbuilds = append(builds, build)\n\t}\n\n\tref, err := containerd.Merge(ctx, builds)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Variables in LLM Prompts with Shell\nDESCRIPTION: Demonstrates interpolating results of Dagger operations into LLM prompts using variables, including setting up source code directories and environments for LLM interaction.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nsource=\\$(container |\n  from alpine |\n  with-directory /src https://github.com/dagger/dagger |\n  directory /src)\nenvironment=\\$(env |\n  with-directory-input 'source' \\$source 'a directory with source code')\nllm |\n  with-env \\$environment |\n  with-prompt \"The directory also has some tools available.\" |\n  with-prompt \"Use the tools in the directory to read the first paragraph of the README.md file in the directory.\" |\n  with-prompt \"Reply with only the selected text.\" |\n  last-reply\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource=$(container |\n  from alpine |\n  with-directory /src https://github.com/dagger/dagger |\n  directory /src)\nenvironment=$(env |\n  with-directory-input 'source' $source 'a directory with source code')\nllm |\n  with-env $environment |\n  with-prompt \"The directory also has some tools available.\" |\n  with-prompt \"Use the tools in the directory to read the first paragraph of the README.md file in the directory.\" |\n  with-prompt \"Reply with only the selected text.\" |\n  last-reply\n```\n\n----------------------------------------\n\nTITLE: Creating a Coding Agent in Go\nDESCRIPTION: Go implementation of a Dagger Function that creates a coding agent by integrating an LLM with a Dagger Container environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Volumes in Go with Dagger\nDESCRIPTION: This snippet illustrates how to use cache volumes in a Go program using the Dagger SDK. It sets up a container, clones a repository, and installs npm dependencies with a cached volume.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/cache-volumes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/cache-volumes/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Loading Prompts from Files in Shell\nDESCRIPTION: Shows how to use the LLM.withPromptFile() API method to read prompts from a text file in both system shell and interactive Dagger shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nllm |\n  with-prompt-file ./prompt.txt\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nllm |\n  with-prompt-file ./prompt.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline in PHP\nDESCRIPTION: PHP code for implementing a CI pipeline with four Dagger Functions: publish, test, build, and buildEnv.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace HelloDagger;\n\nuse Dagger\\Client;\nuse Dagger\\Container;\n\nclass HelloDagger\n{\n    public function publish(): string\n    {\n        $image = $this->build();\n        $tag = sprintf(\"ttl.sh/hello-dagger:%d\", round(microtime(true) * 1000));\n        $image->publish($tag);\n        return $tag;\n    }\n\n    public function test(): string\n    {\n        return $this->buildEnv()->withExec([\"npm\", \"run\", \"test\"])->stdout();\n    }\n\n    public function build(): Container\n    {\n        $client = Client::connect();\n        $src = $client->host()->directory(\".\");\n        $dist = $this->buildEnv()->withExec([\"npm\", \"run\", \"build\"])->directory(\"./dist\");\n        return $client->container()->from(\"nginx:1.25-alpine\")->withDirectory(\"/usr/share/nginx/html\", $dist);\n    }\n\n    public function buildEnv(): Container\n    {\n        $client = Client::connect();\n        $src = $client->host()->directory(\".\");\n        return $client->container()->from(\"node:20-slim\")->withDirectory(\"/src\", $src)->withWorkdir(\"/src\")->withExec([\"npm\", \"ci\"]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates creating two interdependent services with custom hostnames. It defines methods to create service A and service B, which can communicate with each other using predefined hostnames.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dag, Container, Service } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  async serviceA(): Promise<Service> {\n    return dag\n      .container()\n      .from(\"nginx:alpine\")\n      .withNewFile(\"/usr/share/nginx/html/index.html\", { contents: \"Hello from Service A!\" })\n      .withExposedPort(80)\n      .asService()\n      .withName(\"svca\")\n  }\n\n  async serviceB(): Promise<Service> {\n    return dag\n      .container()\n      .from(\"nginx:alpine\")\n      .withNewFile(\"/usr/share/nginx/html/index.html\", { contents: \"Hello from Service B!\" })\n      .withExposedPort(80)\n      .asService()\n      .withName(\"svcb\")\n  }\n\n  async services(): Promise<Service> {\n    const serviceA = await this.serviceA()\n    const serviceB = await this.serviceB()\n    return dag\n      .container()\n      .from(\"nginx:alpine\")\n      .withServiceBinding(\"svca\", serviceA)\n      .withServiceBinding(\"svcb\", serviceB)\n      .withNewFile(\n        \"/etc/nginx/conf.d/default.conf\",\n        {\n          contents: `\n            server {\n                listen 80;\n                location /a {\n                    proxy_pass http://svca;\n                }\n                location /b {\n                    proxy_pass http://svcb;\n                }\n            }\n          `,\n        }\n      )\n      .withExposedPort(80)\n      .asService()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Dagger Pipeline for Building CLI (Shell)\nDESCRIPTION: Shows a more complex pipeline that builds the Dagger CLI from source and exports the binary.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ncontainer |\n  from golang:latest |\n  with-directory /src https://github.com/dagger/dagger#main |\n  with-workdir /src/cmd/dagger |\n  with-exec -- go build -o dagger . |\n  file ./dagger |\n  export ./dagger.bin\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Module for Google Cloud Run Deployment in Python\nDESCRIPTION: This Python code snippet creates a custom Dagger module that uses the google-cloud-run module to deploy an application to Google Cloud Run. It defines a 'deploy' function that takes project details, image information, and credentials as inputs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/google-cloud-run.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport anyio\nimport dagger\nfrom dagger import dag, function, object_type\nfrom google_cloud_run import GoogleCloudRun\n\n@object_type\nclass MyModule:\n    @function\n    async def deploy(\n        self,\n        project_name: str,\n        service_location: str,\n        image_address: str,\n        service_port: int,\n        credential: dagger.Secret,\n    ) -> str:\n        gcr = GoogleCloudRun()\n\n        service = await gcr.create_service(\n            project_name,\n            service_location,\n            image_address,\n            service_port,\n            credential,\n        )\n\n        return f\"Application deployed to {service}\"\n\n\nif __name__ == \"__main__\":\n    anyio.run(dag.compute)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Volumes in TypeScript with Dagger\nDESCRIPTION: This snippet shows how to implement cache volumes in a TypeScript program using the Dagger SDK. It sets up a container, clones a repository, and uses a cache volume for npm dependencies to improve execution time on subsequent runs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/cache-volumes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/cache-volumes/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Python Module Documentation Example\nDESCRIPTION: Shows how to document a Python Dagger module using docstrings and dagger.Doc annotations for module, class, function and argument documentation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/documentation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A simple example module to say hello.\n\nFurther documentation for the module here.\n\"\"\"\n\nimport dagger\nfrom dagger import function, object_type\n\n@object_type\nclass MyModule:\n    \"\"\"A group of greeting functions.\"\"\"\n\n    @function\n    async def hello(self, greeting: str | dagger.Doc(\"The greeting to display\"), name: str | dagger.Doc(\"Who to greet\")) -> str:\n        \"\"\"Return a greeting.\"\"\"\n        return f\"{greeting} {name}!\"\n\n    @function\n    async def loud_hello(self, greeting: str | dagger.Doc(\"The greeting to display\"), name: str | dagger.Doc(\"Who to greet\")) -> str:\n        \"\"\"Return a loud greeting.\n\n        This greeting will be in uppercase.\n        \"\"\"\n        return f\"{greeting} {name}!\".upper()\n```\n\n----------------------------------------\n\nTITLE: Using LLM Bindings in Dagger Shell\nDESCRIPTION: This shell command creates an environment for an LLM agent using an Alpine container, then prompts the LLM to install Python development tools on that container. It demonstrates Dagger's LLM bindings in interactive mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/mcp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbase=$(container | from alpine)\nenv=$(env | with-container-input 'base' $base 'a base container' | with-container-output 'python-dev' 'a container with python dev tools')\nllm | with-env $env | with-prompt \"You have an alpine container. Install tools to develop with Python.\" | env | output python-dev | as-container | terminal\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image from Dockerfile in Go\nDESCRIPTION: This Dagger function builds an image from a Dockerfile. It clones a Git repository, builds the image using the Dockerfile in the repository, and returns the image reference.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_27\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context, src string) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tproject := client.Git(src).Branch(\"main\").Tree()\n\n\tbuilder := client.Container().Build(project)\n\n\tref, err := builder.Publish(ctx, \"example\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding and Using Services in Dagger Functions\nDESCRIPTION: This code demonstrates how to create an HTTP service in one Dagger Function and bind it for use in another Dagger Function. Services are bound using aliases like 'www' to facilitate inter-function communication.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c get\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Container in Go\nDESCRIPTION: Combines the previous build logic and publishes the container to a specified location using context for asynchronous execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Builds and publishes a container\nfunc (m *Basics) BuildAndPublish(ctx context.Context) (string, error) {\n\treturn m.Build().Publish(ctx, \"ttl.sh/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prompt Mode with Dagger Shell\nDESCRIPTION: This shell example demonstrates how to interact with an attached LLM using natural language commands in Dagger's prompt mode. It shows initializing a Node.js container with mounted code from GitHub, then asking the LLM questions about the source code.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/llm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource=$(container | from node | with-mounted-directory /src https://github.com/dagger/hello-dagger | with-workdir /src)\n\nYou have a container with source code in /src. Describe the source code.\n\nDoes the application have unit tests?\n\nFind all the unit tests. Deduce what the application does. Describe it in one paragraph.\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Image to Private Registry in Python\nDESCRIPTION: This Python function publishes a just-in-time container image to a private registry. It demonstrates how to create and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/publish-image/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Python for Dagger Module\nDESCRIPTION: This Python code defines custom types 'Organization' and 'Account' for a GitHub Dagger module using Dagger's field descriptors. It includes methods to retrieve organization members and their URLs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-types.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass Github:\n    @dagger.function\n    def dagger_organization(self) -> \"Organization\":\n        return Organization(name=\"dagger\")\n\nclass Organization:\n    name: str = dagger.field()\n\n    @dagger.function\n    def members(self) -> list[\"Account\"]:\n        return [Account(name=\"jane\"), Account(name=\"john\")]\n\nclass Account:\n    name: str = dagger.field()\n\n    @dagger.function\n    def url(self) -> str:\n        return f\"https://github.com/{self.name}\"\n```\n\n----------------------------------------\n\nTITLE: Tagging and Publishing Container Image to Private Registry in Python\nDESCRIPTION: This Python function tags a just-in-time container image multiple times and publishes it to a private registry. It demonstrates how to create, tag, and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/tag-publish-image/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Container Terminal Debugging\nDESCRIPTION: A TypeScript Dagger function that demonstrates using terminal sessions at different points in a container pipeline to aid debugging.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  let container = client.container().from(\"alpine\")\n\n  console.log(\"Opening first terminal session\")\n  container = container.terminal()\n\n  container = container.withExec([\"apk\", \"add\", \"curl\"])\n\n  console.log(\"Opening second terminal session\")\n  container = container.terminal()\n}, { LogOutput: process.stdout })\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services (Go)\nDESCRIPTION: This Go code demonstrates creating two interdependent services with custom hostnames. It defines functions to create service A and service B, which can communicate with each other using predefined hostnames.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Module struct {}\n\nfunc (m *Module) ServiceA(ctx context.Context) (*dagger.Service, error) {\n\treturn dag.Container().\n\t\tFrom(\"nginx:alpine\").\n\t\tWithNewFile(\"/usr/share/nginx/html/index.html\", dagger.ContainerWithNewFileOpts{\n\t\t\tContents: \"Hello from Service A!\",\n\t\t}).\n\t\tWithExposedPort(80).\n\t\tAsService().\n\t\tWithName(\"svca\")\n}\n\nfunc (m *Module) ServiceB(ctx context.Context) (*dagger.Service, error) {\n\treturn dag.Container().\n\t\tFrom(\"nginx:alpine\").\n\t\tWithNewFile(\"/usr/share/nginx/html/index.html\", dagger.ContainerWithNewFileOpts{\n\t\t\tContents: \"Hello from Service B!\",\n\t\t}).\n\t\tWithExposedPort(80).\n\t\tAsService().\n\t\tWithName(\"svcb\")\n}\n\nfunc (m *Module) Services(ctx context.Context) (*dagger.Service, error) {\n\tserviceA, err := m.ServiceA(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserviceB, err := m.ServiceB(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn dag.Container().\n\t\tFrom(\"nginx:alpine\").\n\t\tWithServiceBinding(\"svca\", serviceA).\n\t\tWithServiceBinding(\"svcb\", serviceB).\n\t\tWithNewFile(\"/etc/nginx/conf.d/default.conf\", dagger.ContainerWithNewFileOpts{\n\t\t\tContents: `server {\n    listen 80;\n    location /a {\n        proxy_pass http://svca;\n    }\n    location /b {\n        proxy_pass http://svcb;\n    }\n}`,\n\t\t}).\n\t\tWithExposedPort(80).\n\t\tAsService()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dagger Function for Container Publishing in Python\nDESCRIPTION: Shows a custom Dagger Function in Python that creates, modifies, and publishes a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@function\nasync def publish(self) -> str:\n    return await (\n        dag.container()\n        .from_(\"alpine:latest\")\n        .with_new_file(\"/hi.txt\", \"Hello from Dagger!\")\n        .with_entrypoint([\"cat\", \"/hi.txt\"])\n        .publish(\"ttl.sh/hello\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services in Python\nDESCRIPTION: This Python function runs two services, service A and service B, that depend on each other. The services are set up with custom hostnames, 'svca' and 'svcb', allowing each service to communicate with the other by hostname.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n```python file=../api/snippets/services/create-interdependent-services/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Dagger Connection with Logging\nDESCRIPTION: Example of configuring Dagger connection with custom logging output to standard error stream for debugging purposes\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfig = dagger.Config(log_output=sys.stderr)\nasync with dagger.connection(config):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Image to Private Registry in Go\nDESCRIPTION: This Go function publishes a just-in-time container image to a private registry. It demonstrates how to create and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_49\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/publish-image/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Install Package and Execute Network Request in Container using Dagger\nDESCRIPTION: This snippet shows how to chain commands to create a Wolfi container with the curl package installed, then execute an HTTP request to fetch content from dagger.io. The example demonstrates package installation and network operations through Dagger function chaining.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container --packages curl |\n  with-exec -- curl -L dagger.io |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container --packages curl |\n  with-exec -- curl -L dagger.io |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container --packages=\"curl\" \\\n  with-exec --args=\"curl\",\"-L\",\"dagger.io\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Returning Container with Installed Packages in Python\nDESCRIPTION: This Python function returns an Alpine container with specified packages installed. It shows how to manipulate containers in Dagger Functions using Python.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dagger.function\ndef alpine_builder(packages: list[str]) -> Container:\n    return (\n        dag.container().from_(\"alpine:latest\")\n        .with_exec([\"apk\", \"add\"] + packages)\n    )\n```\n\n----------------------------------------\n\nTITLE: Custom Dagger Function for Container Publishing in PHP\nDESCRIPTION: Shows a custom Dagger Function in PHP that creates, modifies, and publishes a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\npublic function publish(): string\n{\n    return dag()\n        ->container()\n        ->from('alpine:latest')\n        ->withNewFile('/hi.txt', 'Hello from Dagger!')\n        ->withEntrypoint(['cat', '/hi.txt'])\n        ->publish('ttl.sh/hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo Workflow for Dagger Integration in YAML\nDESCRIPTION: This YAML configuration defines an Argo Workflow that runs Dagger tests for a Go application. It sets up necessary volumes, installs the Dagger CLI, and executes Dagger commands within the workflow.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/argo-workflows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: dagger-\nspec:\n  entrypoint: dagger\n  volumes:\n  - name: dagger-socket\n    emptyDir: {}\n  templates:\n  - name: dagger\n    steps:\n    - - name: clone\n        template: git-clone\n    - - name: test\n        template: dagger-test\n\n  - name: git-clone\n    container:\n      image: alpine/git:v2.32.0\n      command: [sh, -c]\n      args: [\"git clone https://github.com/kpenfound/greetings-api /tmp/greetings-api\"]\n      volumeMounts:\n      - name: dagger-socket\n        mountPath: /tmp/greetings-api\n\n  - name: dagger-test\n    sidecars:\n    - name: dagger-engine\n      image: registry.dagger.io/engine:v0.9.3\n      command: [\"dagger\", \"run\", \"engine\"]\n      volumeMounts:\n      - name: dagger-socket\n        mountPath: /var/run/buildkit\n    container:\n      image: alpine\n      command: [sh, -c]\n      args: [\n        \"apk add curl &&\n        curl -L https://dl.dagger.io/dagger/install.sh | sh &&\n        cd /tmp/greetings-api &&\n        DAGGER_ENGINE_UNIX=/run/dagger/engine.sock /usr/local/bin/dagger run go test\"\n      ]\n      env:\n      - name: _EXPERIMENTAL_DAGGER_RUNNER_HOST\n        value: \"unix:///run/dagger/engine.sock\"\n      - name: DAGGER_CLOUD_TOKEN\n        value: \"${DAGGER_CLOUD_TOKEN}\"\n      volumeMounts:\n      - name: dagger-socket\n        mountPath: /run/dagger\n        subPath: dagger\n      - name: dagger-socket\n        mountPath: /tmp/greetings-api\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent in TypeScript\nDESCRIPTION: TypeScript code for creating a Dagger Function that uses an LLM to solve a programming assignment. It sets up the environment, defines inputs and outputs, and interacts with the LLM to complete the task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, Env, LLMCompletion } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  const model = client.defaultLLMModel()\n\n  const goProgram = async (assignment: string) => {\n    const builder = client.container().from(\"golang:latest\")\n\n    const environment = Env({\n      assignment: assignment,\n    }).withInputs({\n      builder: \"A container used to build and run Go programs\",\n    }).withOutputs({\n      completed: \"A container with the completed assignment\",\n    })\n\n    const prompt = \"You are an expert Go programmer. Your task is to write a Go program that fulfills the given assignment. Write the program, build it, and test it. If there are any errors, fix them and try again. When you are satisfied with the result, return the container with the completed assignment.\"\n\n    const result = await model.complete(LLMCompletion({\n      prompt: prompt,\n      environment: environment,\n      inputs: Env({\n        builder: builder.id(),\n      }),\n    }))\n\n    return result.container(\"completed\")\n  }\n\n  // Export the function so it can be called via the Dagger API\n  return { goProgram }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline in Python\nDESCRIPTION: Python code for implementing a CI pipeline with four Dagger Functions: publish, test, build, and build_env.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport anyio\nimport dagger\nimport time\n\nclass HelloDagger:\n    def publish(self) -> str:\n        async def fn():\n            image = await self.build()\n            tag = f\"ttl.sh/hello-dagger:{int(time.time() * 1000)}\"\n            await image.publish(tag)\n            return tag\n        return anyio.run(fn)\n\n    def test(self) -> str:\n        async def fn():\n            build_env = await self.build_env()\n            return await build_env.with_exec([\"npm\", \"run\", \"test\"]).stdout()\n        return anyio.run(fn)\n\n    def build(self) -> dagger.Container:\n        async def fn():\n            async with dagger.Connection(dagger.Config(log_output=sys.stderr)) as client:\n                src = client.host().directory(\".\")\n                dist = (await self.build_env()).with_exec([\"npm\", \"run\", \"build\"]).directory(\"./dist\")\n                return client.container().from_(\"nginx:1.25-alpine\").with_directory(\"/usr/share/nginx/html\", dist)\n        return anyio.run(fn)\n\n    def build_env(self) -> dagger.Container:\n        async def fn():\n            async with dagger.Connection(dagger.Config(log_output=sys.stderr)) as client:\n                src = client.host().directory(\".\")\n                return (client.container().from_(\"node:20-slim\")\n                    .with_directory(\"/src\", src)\n                    .with_workdir(\"/src\")\n                    .with_exec([\"npm\", \"ci\"]))\n        return anyio.run(fn)\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Container with Cowsay Example\nDESCRIPTION: A complete Python script demonstrating Dagger container initialization, package installation, and command execution with async handling\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nimport anyio\nimport dagger\nfrom dagger import dag\n\n\nasync def main(args: list[str]):\n    async with dagger.connection():\n        # build container with cowsay entrypoint\n        ctr = (\n            dag.container()\n            .from_(\"python:alpine\")\n            .with_exec([\"pip\", \"install\", \"cowsay\"])\n        )\n\n        # run cowsay with requested message\n        result = await ctr.with_exec([\"cowsay\", *args]).stdout()\n\n    print(result)\n\n\nanyio.run(main, sys.argv[1:])\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Services in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to control a service's lifecycle by explicitly starting and stopping a service. It uses a Redis service as an example, showing how to start and stop the service within the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=../api/snippets/services/start-stop-services/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services in Go\nDESCRIPTION: This Go function runs two services, service A and service B, that depend on each other. The services are set up with custom hostnames, 'svca' and 'svcb', allowing each service to communicate with the other by hostname.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_46\n\nLANGUAGE: go\nCODE:\n```\n```go file=../api/snippets/services/create-interdependent-services/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Complex GitHub Actions Workflow with Dagger (Standard Runner)\nDESCRIPTION: This YAML snippet demonstrates a more complex GitHub Actions workflow that uses Dagger to test, build, and publish a Go application. It includes steps for checking out code, running tests, and building/publishing a container image.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Run Dagger pipeline\n        uses: dagger/dagger-for-github@v5\n        env:\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n        with:\n          version: \"0.9.3\"\n          cmds: |\n            project init\n            project update\n            call test --src .\n            call build --src . \\\n              --image-tag test \\\n              --push true \\\n              --docker-username $DOCKERHUB_USERNAME \\\n              --docker-password $DOCKERHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Multi-version PHP Testing with Dagger SDK\nDESCRIPTION: PHP program using the Dagger SDK to test a PHP application against multiple PHP versions. It demonstrates creating a Dagger client and using it to run tests in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse Dagger\\Client;\nuse Dagger\\Container;\nuse Dagger\\Directory;\n\nfunction test(): void\n{\n    $versions = ['8.2', '8.3', '8.4'];\n\n    Client::connect(function (Client $client) use ($versions) {\n        $source = $client->host()->directory('.');\n\n        $tasks = [];\n        foreach ($versions as $version) {\n            $tasks[] = function () use ($client, $source, $version) {\n                return test_version($client, $source, $version);\n            };\n        }\n\n        $client->waitGroup($tasks);\n    });\n}\n\nfunction test_version(Client $client, Directory $source, string $version): void\n{\n    echo \"Starting tests for PHP {$version}...\\n\";\n\n    $container = $client->container()\n        ->from(\"php:{$version}-cli-alpine\")\n        ->withDirectory('/app', $source)\n        ->withWorkdir('/app')\n        ->withExec(['composer', 'install'])\n        ->withExec(['./vendor/bin/phpunit']);\n\n    $result = $container->stdout();\n\n    echo $result;\n    echo \"Completed tests for PHP {$version}\\n\";\n    echo \"**********\\n\";\n}\n\ntest();\n```\n\n----------------------------------------\n\nTITLE: Optimized Service Command Chaining\nDESCRIPTION: Demonstrates the recommended approach for executing multiple commands against a service by chaining them together, ensuring service availability throughout the operation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/services/service-lifecycle-3/go/main.go```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/services/service-lifecycle-3/python/main.py```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/services/service-lifecycle-3/typescript/index.ts```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php file=./snippets/services/service-lifecycle-3/php/src/MyModule.php```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java file=./snippets/services/service-lifecycle-3/java/src/main/java/io/dagger/modules/mymodule/MyModule.java```\n```\n\n----------------------------------------\n\nTITLE: Creating a Coding Agent in PHP\nDESCRIPTION: PHP implementation of a Dagger Function that creates a coding agent by integrating an LLM with a Dagger Container environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Setting up New Node.js Project for Dagger\nDESCRIPTION: Series of commands to initialize a new Node.js project with TypeScript support for use with Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-test-ts-project\n\n# Init project (you may use yarn or pnpm)\nnpm init -y\n\n# Add typescript\nnpm install typescript ts-node --save-dev\n\n# Init typescript project\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Container in TypeScript\nDESCRIPTION: Combines the previous methods to build a container and publish it asynchronously to the specified destination.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * Builds and publishes a container\n   */\n  @func()\n  async buildAndPublish(): Promise<string> {\n    return await this.build().publish(\"ttl.sh/bar\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Function in Go\nDESCRIPTION: This Go code defines a Dagger Function named 'GetUser' that uses a container to make an HTTP request to a random user API and return the parsed result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype MyModule struct {}\n\nfunc (m *MyModule) GetUser(ctx context.Context) (string, error) {\n\treturn dagger.Container().From(\"alpine:latest\").\n\t\tWith(dagger.ContainerWithExec([]string{\"apk\", \"add\", \"curl\", \"jq\"})).\n\t\tWith(dagger.ContainerWithExec([]string{\n\t\t\t\"sh\", \"-c\",\n\t\t\t\"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\",\n\t\t})).\n\t\tStdout(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret Variables in Dagger Functions\nDESCRIPTION: This code demonstrates how to accept a GitHub personal access token as a Secret and use it to authorize a request to the GitHub API. The secret can be sourced from various locations including environment variables, files, commands, or external secrets managers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github-api env://GITHUB_API_TOKEN'\n\ndagger -c 'github-api file://./github.txt'\n\ndagger -c 'github-api cmd://\"gh auth token\"'\n\ndagger -c 'github-api op://infra/github/credential'\n\ndagger -c 'github-api vault://credentials.github'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Interface in Go\nDESCRIPTION: Illustrates how to implement the 'Fooer' interface in a Go module named 'Example'. The implementation includes the required 'foo' function with proper context and error handling.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Example struct {\n\tdagger.Object\n}\n\nfunc (m *Example) Foo(ctx context.Context, arg string) (string, error) {\n\treturn fmt.Sprintf(\"Example says: %s\", arg), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in System Shell with Dagger\nDESCRIPTION: Demonstrates using a secret from an environment variable in a container execution using Dagger in system shell. The secret is passed to the container and used in a command execution without being exposed.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/secrets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<'EOF'\ncontainer |\n  from alpine:latest |\n  with-secret-variable MY_SECRET env://API_TOKEN |\n  with-exec -- sh -c 'echo this is the secret: $MY_SECRET' |\n  stdout\nEOF\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Function in Python\nDESCRIPTION: Example of a Dagger Function in Python that calls a remote API and returns the result. The function uses an Alpine container, installs curl and jq, and fetches data from a random user API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    async def get_user(self) -> str:\n        return await (\n            dagger.container().from_(\"alpine:latest\")\n            .with_exec([\"apk\", \"add\", \"curl\", \"jq\"])\n            .with_exec([\"sh\", \"-c\", \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\"])\n            .stdout()\n        )\n```\n\n----------------------------------------\n\nTITLE: Complex Module Usage in PHP\nDESCRIPTION: Complex example in PHP that uses a module from Daggerverse to build a Go project and opens an interactive terminal in the build directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Example shows how to use the golang module to build a project\\n// and then use core Dagger API methods to interact with the result\\n#[DaggerFunction]\\npublic function example(\\n    Directory $buildSrc,\\n    array $buildArgs\\n): Terminal\\n{\\n    // Call the golang module\\n    $buildDir = dag()->golang()->build(\\n        $buildSrc,\\n        $buildArgs\\n    );\\n\\n    // Chain a core Dagger API method\\n    return $buildDir->terminal();\\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Container Filesystem with Multiple Chained Commands using Dagger\nDESCRIPTION: This example demonstrates chaining multiple commands to modify a container's filesystem by removing a file and then listing directory contents to verify the change. The commands are executed in sequence through Dagger's function chaining feature.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec rm /etc/os-release |\n  with-exec ls /etc |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec rm /etc/os-release |\n  with-exec ls /etc |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container \\\n  with-exec --args=\"rm\",\"/etc/os-release\" \\\n  with-exec --args=\"ls\",\"/etc\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for OpenAI\nDESCRIPTION: This snippet shows how to define required and optional environment variables for accessing OpenAI's models. It specifies the API key and various model configurations, including defaults.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/llm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_API_KEY=\"op://Private/OpenAI API Key/password\"\nOPENAI_MODEL=\"gpt-4o\"\nOPENAI_BASE_URL=\"https://your-azure-openai-resource.cognitiveservices.azure.com\"\nOPENAI_AZURE_VERSION=\"2024-12-01-preview\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Volumes in Python with Dagger\nDESCRIPTION: This snippet demonstrates the use of cache volumes in a Python script using the Dagger SDK. It creates a container, sets up the environment, and uses a cache volume for npm dependencies.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/cache-volumes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/cache-volumes/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Basic Dagger Container Operations in Rust\nDESCRIPTION: Example showing how to create a Dagger client, pull a container image, execute commands, and handle output. Uses tokio for async runtime and includes error handling.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/README.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> eyre::Result<()> {\n    let client = dagger_sdk::connect().await?;\n\n    let version = client\n        .container()\n        .from(\"golang:1.19\")\n        .with_exec(vec![\"go\", \"version\"])\n        .stdout().await?;\n\n    println!(\"Hello from Dagger and {}\", version.trim());\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Request in Alpine Container using Dagger Shell\nDESCRIPTION: This snippet demonstrates how to use Dagger Shell to create an Alpine container, install curl, and make an HTTP request to dagger.io. It showcases chaining of container operations and command execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/shell.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from alpine |\n  with-exec apk add curl |\n  with-exec -- curl -L https://dagger.io |\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline in Go\nDESCRIPTION: Go code for implementing a CI pipeline with four Dagger Functions: publish, test, build, and build-env.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype HelloDagger struct{}\n\nfunc (m *HelloDagger) Publish(ctx context.Context) (string, error) {\n\timage, err := m.Build(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\ttag := fmt.Sprintf(\"ttl.sh/hello-dagger:%d\", time.Now().UnixMilli())\n\t_, err = image.Publish(ctx, tag)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn tag, nil\n}\n\nfunc (m *HelloDagger) Test(ctx context.Context) (string, error) {\n\treturn m.BuildEnv(ctx).WithExec([]string{\"npm\", \"run\", \"test\"}).Stdout(ctx)\n}\n\nfunc (m *HelloDagger) Build(ctx context.Context) (*dagger.Container, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer client.Close()\n\n\tsrc := client.Host().Directory(\".\")\n\n\treturn client.Container().From(\"nginx:1.25-alpine\").WithDirectory(\"/usr/share/nginx/html\", m.BuildEnv(ctx).WithExec([]string{\"npm\", \"run\", \"build\"}).Directory(\"./dist\")), nil\n}\n\nfunc (m *HelloDagger) BuildEnv(ctx context.Context) *dagger.Container {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\tsrc := client.Host().Directory(\".\")\n\n\treturn client.Container().From(\"node:20-slim\").WithDirectory(\"/src\", src).WithWorkdir(\"/src\").WithExec([]string{\"npm\", \"ci\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Module for Google Cloud Run Deployment in TypeScript\nDESCRIPTION: This TypeScript code snippet creates a custom Dagger module that uses the google-cloud-run module to deploy an application to Google Cloud Run. It defines a 'deploy' function that takes project details, image information, and credentials as inputs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/google-cloud-run.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dag, object, func, field } from \"@dagger.io/dagger\"\nimport { GoogleCloudRun } from \"google-cloud-run\"\n\n@object()\nclass MyModule {\n  @func()\n  async deploy(\n    @field projectName: string,\n    @field serviceLocation: string,\n    @field imageAddress: string,\n    @field servicePort: number,\n    @field credential: string\n  ): Promise<string> {\n    const gcr = new GoogleCloudRun()\n\n    const service = await gcr.createService(\n      projectName,\n      serviceLocation,\n      imageAddress,\n      servicePort,\n      dag.sensitiveString(credential)\n    )\n\n    return `Application deployed to ${service}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LLM Type in GraphQL\nDESCRIPTION: Defines the LLM type with fields for model, prompt, history, and environment. It includes methods for adding prompts, retrieving history and last reply, and managing environment settings.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/environment-api.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype LLM {\n  model: String!\n  withPrompt(prompt: String!): LLM!\n  history: [LLMMessage!]!\n  lastReply(): String!\n\n  withEnvironment(Environment!): LLM!\n  environment: Environment\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Function in TypeScript\nDESCRIPTION: Example of a Dagger Function in TypeScript that calls a remote API and returns the result. The function uses an Alpine container, installs curl and jq, and fetches data from a random user API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client, connect } from \"@dagger.io/dagger\"\n\nconnect(async (client: Client) => {\n  const user = await client.container().from(\"alpine:latest\")\n    .withExec([\"apk\", \"add\", \"curl\", \"jq\"])\n    .withExec([\"sh\", \"-c\", \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\"])\n    .stdout()\n\n  console.log(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Secrets with Dagger CLI\nDESCRIPTION: Shows the explicit CLI command syntax for using secrets in Dagger. The command creates a container, passes a secret from an environment variable, and runs a command that uses the secret.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/secrets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container \\\n  from --address=alpine:latest \\\n  with-secret-variable --name=\"MY_SECRET\" --secret=\"env://API_TOKEN\" \\\n  with-exec --args=\"sh\",\"-c\",'echo this is the secret: $MY_SECRET' \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Services from Dagger Functions\nDESCRIPTION: This code snippet illustrates how a pipeline running in a Dagger Function can access and query a MariaDB database service running on the host. It provides examples in multiple programming languages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/services.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nfile=./snippets/services-2/go/main.go\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python\nfile=./snippets/services-2/python/main.py\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfile=./snippets/services-2/typescript/index.ts\n```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php\nfile=./snippets/services-2/php/src/MyModule.php\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java\nfile=./snippets/services-2/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n```\n\n----------------------------------------\n\nTITLE: Open Interactive Terminal in Container for Live Debugging with Dagger\nDESCRIPTION: This example demonstrates using Container.terminal() to start an interactive terminal session in a Wolfi container with cowsay package installed. This feature enables live debugging and experimentation within containers at any stage of Dagger Function execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/dagger/dagger/modules/wolfi@v0.16.2 | container --packages=cowsay | terminal'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 | container --packages=cowsay | terminal\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container --packages=\"cowsay\" \\\n  terminal\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Function in Python\nDESCRIPTION: This Python code defines a Dagger Function named 'get_user' that uses a container to make an HTTP request to a random user API and return the parsed result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def get_user(self) -> str:\n        return (\n            dagger.container().from_(\"alpine:latest\")\n            .with_(dagger.container.exec([\"apk\", \"add\", \"curl\", \"jq\"]))\n            .with_(dagger.container.exec([\n                \"sh\", \"-c\",\n                \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\",\n            ]))\n            .stdout()\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Error Handling in Go\nDESCRIPTION: This Go function performs division and throws an error if the denominator is zero. It demonstrates typical Go error handling patterns with explicit error return values.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) Divide(ctx context.Context, a, b int) (int, error) {\n\tif b == 0 {\n\t\treturn 0, fmt.Errorf(\"cannot divide by zero\")\n\t}\n\treturn a / b, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Architecture Image with Native Emulation in Go\nDESCRIPTION: This Dagger function builds a single image for different CPU architectures using native emulation. It clones a Git repository, sets up a multi-platform builder, and builds the image for specified platforms.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_25\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context, src string) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tproject := client.Git(src).Branch(\"master\").Tree()\n\n\tbuilder := client.Container(\n\t\tdagger.ContainerOpts{\n\t\t\tPlatform: dagger.Platform(\"linux/amd64\"),\n\t\t},\n\t).From(\"moby/buildkit:master\")\n\n\tbuilder = builder.WithMountedCache(\"/cache\", client.CacheVolume(\"buildkit-cache\"))\n\n\tbuilder = builder.WithMountedDirectory(\"/src\", project)\n\n\tbuilder = builder.WithWorkdir(\"/src\")\n\n\tbuilder = builder.WithExec([]string{\n\t\t\"buildctl-daemonless.sh\",\n\t\t\"build\",\n\t\t\"--frontend\", \"dockerfile.v0\",\n\t\t\"--local\", \"context=.\",\n\t\t\"--local\", \"dockerfile=.\",\n\t\t\"--output\", \"type=image,name=example,push=false\",\n\t\t\"--opt\", \"platform=linux/amd64,linux/arm64\",\n\t})\n\n\tref, err := builder.Stdout().Contents(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Volumes in Dagger CLI\nDESCRIPTION: This snippet shows how to use cache volumes with the Dagger CLI. It performs the same operations as the Dagger Shell example but uses the CLI syntax for creating a container, setting up the environment, and using a cache volume for npm dependencies.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/cache-volumes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container \\\n  from --address=node:21 \\\n  with-directory --path=/src --directory=https://github.com/dagger/hello-dagger \\\n  with-workdir --path=/src \\\n  with-mounted-cache --path=/root/.npm --cache=node-21 \\\n  with-exec --args=\"npm\",\"install\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Copied Directory in Container in Python\nDESCRIPTION: This Python function copies a specified directory to the /src path in a container, adds a new file to it, and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass MyModule(dagger.Module):\n    def copy_and_modify_directory(self, source: dagger.Directory) -> dagger.Container:\n        return (dag.container()\n            .from_(\"alpine\")\n            .with_directory(\"/src\", source)\n            .with_exec([\"touch\", \"/src/new-file\"])\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline with Dagger Integration\nDESCRIPTION: This Jenkinsfile demonstrates how to set up a Jenkins pipeline that integrates with Dagger. It includes stages for checkout, Dagger CLI setup, and running Dagger commands. The pipeline uses a Docker agent with the 'dagger' label and requires the 'docker' client to be installed.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/jenkins.mdx#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent {\n        label 'dagger'\n    }\n    environment {\n        DAGGER_VERSION = \"0.9.3\"\n    }\n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n        stage('Setup Dagger') {\n            steps {\n                sh '''\n                    curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${DAGGER_VERSION} sh\n                    sudo mv bin/dagger /usr/local/bin\n                    dagger version\n                '''\n            }\n        }\n        stage('Run Dagger Pipeline') {\n            steps {\n                sh 'dagger call build'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Function in Java\nDESCRIPTION: This Java code defines a Dagger Function named 'getUser' that uses a container to make an HTTP request to a random user API and return the parsed result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.*;\n\n@Object\npublic class MyModule {\n    @Function\n    public String getUser(Client client) throws DaggerException {\n        return client.container().from(\"alpine:latest\")\n                .withExec(new String[]{\"apk\", \"add\", \"curl\", \"jq\"})\n                .withExec(new String[]{\n                        \"sh\", \"-c\",\n                        \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\",\n                })\n                .stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Container Command to Display File Contents using Dagger Function Chaining\nDESCRIPTION: This snippet shows chaining a Container.withExec() call to display the contents of a specific file (/etc/os-release) in a Wolfi container. The example is presented in three different command formats for Dagger execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec cat /etc/os-release |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec cat /etc/os-release |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container \\\n  with-exec --args=\"cat\",\"/etc/os-release\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: File Arguments in Dagger Functions\nDESCRIPTION: Demonstrates passing file arguments from local filesystem or remote Git repositories to Dagger Functions, with implementations across multiple SDKs\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/functions/arguments-file/go/main.go\n```\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/functions/arguments-file/python/main.py\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/functions/arguments-file/typescript/index.ts\n```\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/functions/arguments-file/php/src/MyModule.php\n```\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/functions/arguments-file/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repositories with Dagger\nDESCRIPTION: Shell, Go, Python, TypeScript, PHP, and SSH-based examples for cloning Git repositories using Dagger. The snippets allow for operations such as checking out specific references and SSH socket forwarding to containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'clone https://github.com/dagger/dagger 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5'\n```\n\nLANGUAGE: shell\nCODE:\n```\nclone https://github.com/dagger/dagger 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call clone --repository=https://github.com/dagger/dagger --ref=196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nclone https://github.com/dagger/dagger 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 |\n  terminal\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nclone https://github.com/dagger/dagger 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 | terminal\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call \\\n  clone --repository=https://github.com/dagger/dagger --ref=196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 \\\n  terminal\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nclone-with-ssh git@github.com:dagger/dagger.git 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 $SSH_AUTH_SOCK |\n  terminal\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nclone-with-ssh git@github.com:dagger/dagger.git 196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 $SSH_AUTH_SOCK | terminal\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call \\\n  clone-with-ssh --repository=git@github.com:dagger/dagger.git --ref=196f232a4d6b2d1d3db5f5e040cf20b6a76a76c5 --sock=$SSH_AUTH_SOCK \\\n  terminal\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Go for Dagger Module\nDESCRIPTION: This Go code defines custom types 'Organization' and 'Account' for a GitHub Dagger module. It includes methods to retrieve organization members and their URLs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n)\n\ntype Github struct{}\n\ntype Organization struct {\n\tName string\n}\n\ntype Account struct {\n\tName string\n}\n\nfunc (m *Github) DaggerOrganization() *Organization {\n\treturn &Organization{Name: \"dagger\"}\n}\n\nfunc (o *Organization) Members(ctx context.Context) ([]*Account, error) {\n\treturn []*Account{\n\t\t{Name: \"jane\"},\n\t\t{Name: \"john\"},\n\t}, nil\n}\n\nfunc (a *Account) URL(ctx context.Context) string {\n\treturn \"https://github.com/\" + a.Name\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Services in Dagger Functions (PHP)\nDESCRIPTION: This PHP code shows how to create an HTTP service and use it in another Dagger Function. It defines two methods: 'httpService' which returns a Service, and 'get' which binds the service and accesses it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Module;\nuse Dagger\\Service;\n\nclass MyModule extends Module\n{\n    public function httpService(): Service\n    {\n        return $this->dag->container()->from('nginx:1.25-alpine')->withExposedPort(80)->asService();\n    }\n\n    public function get(): string\n    {\n        return $this->dag->container()\n            ->from('alpine')\n            ->withServiceBinding('www', $this->httpService())\n            ->withExec(['wget', '-O', '-', 'http://www', '--timeout', '1'])\n            ->stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Exporting a Go Binary\nDESCRIPTION: This snippet demonstrates a modified Dagger Function that builds a Go application and exports the binary to the host filesystem. It shows how to compile the application and export the resulting file using chained function calls.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/programmable-pipelines.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t\n\t// initialize Dagger client\n\tclient, err := dagger.Connect(ctx, dagger.WithLogOutput(os.Stderr))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\t// get reference to the local project\n\tsrc := client.Host().Directory(\".\", dagger.HostDirectoryOpts{\n\t\tExclude: []string{\"ci\", \"node_modules\"},\n\t})\n\n\t// build application\n\toutputFile, err := buildBinary(ctx, client, src)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\t// export file from Dagger to host filesystem\n\toutputPath, err := outputFile.Export(ctx, \"./app\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t\n\tfmt.Println(\"Binary exported to:\", outputPath)\n}\n\n// buildBinary builds a Go binary and returns a reference to the output file.\nfunc buildBinary(ctx context.Context, client *dagger.Client, src *dagger.Directory) (*dagger.File, error) {\n\treturn client.Container().From(\"golang:1.19\").\n\t\t// mount source code into container\n\t\tWithMountedDirectory(\"/src\", src).\n\t\tWithWorkdir(\"/src\").\n\t\t\n\t\t// install application dependencies\n\t\tWithExec([]string{\"go\", \"mod\", \"download\"}).\n\t\t\n\t\t// build application\n\t\tWithExec([]string{\"go\", \"build\", \"-o\", \"app\", \"main.go\"}).\n\t\t\n\t\t// get reference to output file\n\t\tFile(\"/src/app\").\n\t\tSync(ctx)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nimport dagger\n\n\n@dagger.function\nasync def build_binary(src: dagger.Directory) -> dagger.File:\n    \"\"\"Builds a Go binary and returns a reference to the output file.\"\"\"\n    # get Go build container\n    ctr = dagger.container().from_(\"golang:1.19\")\n    \n    # mount source code\n    ctr = ctr.with_mounted_directory(\"/src\", src).with_workdir(\"/src\")\n    \n    # install dependencies\n    ctr = ctr.with_exec([\"go\", \"mod\", \"download\"])\n    \n    # build application and return file reference\n    return ctr.with_exec([\"go\", \"build\", \"-o\", \"app\", \"main.go\"]).file(\"/src/app\")\n\n\n@dagger.function\nasync def build() -> str:\n    # get reference to the local project\n    src = dagger.host().directory(\".\", exclude=[\"ci\", \"node_modules\"])\n    \n    # build application\n    output_file = await build_binary(src)\n    \n    # export file to host\n    output_path = await output_file.export(\"./app\")\n    \n    return f\"Binary exported to: {output_path}\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\n// initialize Dagger client\nconnect(\n  async (client) => {\n    // get reference to the local project\n    const source = client.host().directory(\".\", {\n      exclude: [\"ci\", \"node_modules\"],\n    })\n\n    // build binary\n    const outputFile = await buildBinary(client, source)\n\n    // export file from Dagger to host filesystem\n    const outputPath = await outputFile.export(\"./app\")\n    \n    console.log(`Binary exported to: ${outputPath}`)\n  },\n  { LogOutput: process.stderr }\n)\n\n// buildBinary builds a Go binary and returns a reference to the output file\nasync function buildBinary(client, src) {\n  return client.container()\n    .from(\"golang:1.19\")\n    // mount source code into container\n    .withMountedDirectory(\"/src\", src)\n    .withWorkdir(\"/src\")\n    \n    // install application dependencies\n    .withExec([\"go\", \"mod\", \"download\"])\n    \n    // build application\n    .withExec([\"go\", \"build\", \"-o\", \"app\", \"main.go\"])\n    \n    // get reference to output file\n    .file(\"/src/app\")\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyNamespace;\n\nclass MyModule\n{\n    #[\\Dagger\\Client\\Function_\\Doc('Builds a Go binary and returns a reference to the output file')]\n    #[\\Dagger\\Client\\Function_\\Name('buildBinary')]\n    public function buildBinary(\\Dagger\\Client\\Client $client, \\Dagger\\Client\\Directory $src): \\Dagger\\Client\\File\n    {\n        return $client->container()->from('golang:1.19')\n            // mount source code into container\n            ->withMountedDirectory('/src', $src)\n            ->withWorkdir('/src')\n            \n            // install application dependencies\n            ->withExec(['go', 'mod', 'download'])\n            \n            // build application\n            ->withExec(['go', 'build', '-o', 'app', 'main.go'])\n            \n            // get reference to output file\n            ->file('/src/app');\n    }\n    \n    #[\\Dagger\\Client\\Function_\\Doc('Builds and exports a Go binary')]\n    #[\\Dagger\\Client\\Function_\\Name('build')]\n    public function build(\\Dagger\\Client\\Client $client): string\n    {\n        // get reference to the local project\n        $src = $client->host()->directory('.', [\n            'exclude' => ['ci', 'node_modules'],\n        ]);\n        \n        // build application\n        $outputFile = $this->buildBinary($client, $src);\n        \n        // export file to host\n        $outputPath = $outputFile->export('./app');\n        \n        return \"Binary exported to: $outputPath\";\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Container;\nimport io.dagger.client.Directory;\nimport io.dagger.client.File;\nimport io.dagger.client.Function;\nimport io.dagger.client.Doc;\nimport io.dagger.client.Client;\n\nimport java.util.List;\n\npublic class MyModule {\n\n    /**\n     * Builds a Go binary and returns a reference to the output file\n     */\n    @Function\n    public File buildBinary(Directory src) {\n        return client.container().from(\"golang:1.19\")\n            // mount source code into container\n            .withMountedDirectory(\"/src\", src)\n            .withWorkdir(\"/src\")\n            \n            // install application dependencies\n            .withExec(List.of(\"go\", \"mod\", \"download\"))\n            \n            // build application\n            .withExec(List.of(\"go\", \"build\", \"-o\", \"app\", \"main.go\"))\n            \n            // get reference to output file\n            .file(\"/src/app\");\n    }\n\n    /**\n     * Builds and exports a Go binary\n     */\n    @Function\n    public String build() {\n        // get reference to the local project\n        Directory src = client.host().directory(\".\", d -> d.exclude(List.of(\"ci\", \"node_modules\")));\n        \n        // build application\n        File outputFile = buildBinary(src);\n        \n        // export file to host\n        String outputPath = outputFile.export(\"./app\");\n        \n        return \"Binary exported to: \" + outputPath;\n    }\n\n    private final Client client;\n\n    public MyModule(Client client) {\n        this.client = client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory or File to Host in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to return a just-in-time directory and file, which can be exported to the host using 'dagger call ... export ...'. It shows how to create and manipulate directories and files within a Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/export-file-dir/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Dockerfile Builds\nDESCRIPTION: This example demonstrates how to inject a secret into a Dockerfile build process. The secret is automatically mounted in the build container at '/run/secrets/SECRET-ID' where it can be accessed during the build process.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nFROM alpine:3.17\nRUN apk add curl\nRUN --mount=type=secret,id=gh-secret \\\n    curl \"https://api.github.com/repos/dagger/dagger/issues\" \\\n        --header \"Accept: application/vnd.github+json\" \\\n        --header \"Authorization: Bearer $(cat /run/secrets/gh-secret)\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'build . env://GITHUB_API_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Custom Dagger Function for Container Publishing in Java\nDESCRIPTION: Illustrates a custom Dagger Function in Java that creates, modifies, and publishes a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Function\npublic String publish()\n    throws InterruptedException, ExecutionException, DaggerQueryException {\n  return dag()\n      .container()\n      .from(\"alpine:latest\")\n      .withNewFile(\"/hi.txt\", \"Hello from Dagger!\")\n      .withEntrypoint(List.of(\"cat\", \"/hi.txt\"))\n      .publish(\"ttl.sh/hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Service Binding Example\nDESCRIPTION: Demonstrates basic service binding between a container and a Redis service, showing how Dagger manages service dependencies and container networking.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/services/service-lifecycle-1/go/main.go```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/services/service-lifecycle-1/python/main.py```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/services/service-lifecycle-1/typescript/index.ts```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php file=./snippets/services/service-lifecycle-1/php/src/MyModule.php```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java file=./snippets/services/service-lifecycle-1/java/src/main/java/io/dagger/modules/mymodule/MyModule.java```\n```\n\n----------------------------------------\n\nTITLE: Debugging Pipeline Failures in Python\nDESCRIPTION: Example of a Python module that demonstrates Dagger's automatic debugging when a pipeline fails. The execution will open an interactive terminal at the point of failure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/debugging-1/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Persisting Redis Service State with Cache Volume\nDESCRIPTION: Shows how to persist Redis service data using a cache volume to maintain state between service restarts. Implements data persistence using Redis's SAVE command and demonstrates key-value operations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'set foo 123'\ndagger -c 'get foo'\n```\n\nLANGUAGE: shell\nCODE:\n```\n123\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Functions in Go\nDESCRIPTION: Go implementation of a test function that verifies the greeter module's hello function works correctly.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Tests) Hello(ctx context.Context) error {\n\tgreeting, err := dag.Greeter().Hello(ctx, \"World\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif greeting != \"Hello, World!\" {\n\t\treturn errors.New(\"unexpected greeting\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Go Builder Dagger Module from Public Repository via HTTPS\nDESCRIPTION: This snippet demonstrates how to use a Go builder Dagger module from a public GitHub repository using HTTPS authentication. It builds the Dagger project and exports the result to a local directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/remote-modules.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.0 call \\\n  build --source=https://github.com/dagger/dagger --args=./cmd/dagger \\\n  export --path=./build\n```\n\n----------------------------------------\n\nTITLE: Implementing CI Pipeline in Java\nDESCRIPTION: Java code for implementing a CI pipeline with four Dagger Functions: publish, test, build, and buildEnv.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.hellodagger;\n\nimport io.dagger.client.Client;\nimport io.dagger.client.Container;\nimport io.dagger.client.Directory;\n\npublic class HelloDagger {\n    public String publish() throws Exception {\n        try (Client client = Client.connect()) {\n            Container image = build(client);\n            String tag = String.format(\"ttl.sh/hello-dagger:%d\", System.currentTimeMillis());\n            image.publish(tag);\n            return tag;\n        }\n    }\n\n    public String test() throws Exception {\n        try (Client client = Client.connect()) {\n            return buildEnv(client).withExec(\"npm\", \"run\", \"test\").stdout();\n        }\n    }\n\n    public Container build(Client client) throws Exception {\n        Directory src = client.host().directory(\".\");\n        Directory dist = buildEnv(client).withExec(\"npm\", \"run\", \"build\").directory(\"./dist\");\n        return client.container().from(\"nginx:1.25-alpine\").withDirectory(\"/usr/share/nginx/html\", dist);\n    }\n\n    public Container buildEnv(Client client) throws Exception {\n        Directory src = client.host().directory(\".\");\n        return client.container().from(\"node:20-slim\").withDirectory(\"/src\", src).withWorkdir(\"/src\").withExec(\"npm\", \"ci\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Directory to a Container Filesystem - Dagger\nDESCRIPTION: This example illustrates how to modify a container by adding the current directory from the host to the container filesystem at `/src` using `Container.withDirectory()`. It also executes `ls /src` within the container and prints the output.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-directory /src . |\n  with-exec ls /src |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-directory /src . |\n  with-exec ls /src |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container \\\n  with-directory --path=/src --directory=. \\\n  with-exec --args=\"ls\",\"/src\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Building Go Application in Wolfi Container using Dagger Shell\nDESCRIPTION: This example illustrates a more complex use of Dagger Shell. It creates a Wolfi-based container, installs Go, clones a GitHub repository, builds a Go application, and exports the resulting binary. It demonstrates file operations, directory management, and build processes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/shell.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from cgr.dev/chainguard/wolfi-base |\n  with-exec apk add go |\n  with-directory /src https://github.com/golang/example#master |\n  with-workdir /src/hello |\n  with-exec -- go build -o hello . |\n  file ./hello |\n  export ./hello-from-dagger\n```\n\n----------------------------------------\n\nTITLE: Binding Services in Dagger Functions (Java)\nDESCRIPTION: This Java code demonstrates creating an HTTP service and using it in another Dagger Function. It defines two methods: 'httpService' which returns a Service, and 'get' which binds the service and accesses it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Container;\nimport io.dagger.client.Service;\n\npublic class MyModule {\n    public Service httpService() {\n        return dag.container().from(\"nginx:1.25-alpine\").withExposedPort(80).asService();\n    }\n\n    public String get() {\n        return dag.container()\n                .from(\"alpine\")\n                .withServiceBinding(\"www\", this.httpService())\n                .withExec(Arrays.asList(\"wget\", \"-O\", \"-\", \"http://www\", \"--timeout\", \"1\"))\n                .stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with MariaDB Service\nDESCRIPTION: Implements a test environment using MariaDB as a service for Drupal application testing. Shows PHPUnit test execution against a live database service with detailed output handling.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nPHPUnit 9.6.17 by Sebastian Bergmann and contributors.\nRuntime:       PHP 8.2.5\nConfiguration: /opt/drupal/web/core/phpunit.xml.dist\nTesting\n.....................S                                            22 / 22 (100%)\nTime: 00:15.806, Memory: 315.00 MB\nThere was 1 skipped test:\n\n1) Drupal\\Tests\\pgsql\\Kernel\\pgsql\\KernelTestBaseTest::testSetUp\n\nThis test only runs for the database driver 'pgsql'. Current database driver is 'mysql'.\n/opt/drupal/web/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificKernelTestBase.php:44\n/opt/drupal/vendor/phpunit/phpunit/src/Framework/TestResult.php:728\n\nOK, but incomplete, skipped, or risky tests!\nTests: 22, Assertions: 72, Skipped: 1.\n```\n\n----------------------------------------\n\nTITLE: Querying Directory with File Addition in GraphQL\nDESCRIPTION: This snippet demonstrates how to create a directory with a README file copied into it using the proposed Dagger GraphQL API. It utilizes the 'withFile' field to add a file to an empty directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/schema/README.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"An empty directory with a README copied to it\"\nquery readmeDir($readme: FileID!) {\n  directory {\n    withFile(source: $readme, path: \"README.md\") {\n      id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Type in GraphQL\nDESCRIPTION: Specifies the Environment type with methods for setting bindings, retrieving bindings, and encoding the environment. It allows for dynamic binding creation with various types.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/environment-api.md#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Environment {\n  with[Type]Binding(key: String!, value: [Type], overwrite: Bool, overwriteType: Bool): Environment!\n  bindings: [Binding!]\n  binding(key: String!): Binding\n  encode: File!\n}\n```\n\n----------------------------------------\n\nTITLE: Building Go Binary and Returning Directory in Dagger Function\nDESCRIPTION: This function takes a Git repository URL, architecture, and OS as input, builds a Go binary from the source code, and returns the build directory. It demonstrates working with directories and executing commands in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) GoBuilder(ctx context.Context, src *Directory, arch, os string) (*Directory, error) {\n\treturn dag.Container().From(\"golang:latest\").\n\t\tWithDirectory(\"/src\", src).\n\t\tWithWorkdir(\"/src\").\n\t\tWithEnvVariable(\"GOOS\", os).\n\t\tWithEnvVariable(\"GOARCH\", arch).\n\t\tWithExec([]string{\"go\", \"build\", \"-o\", \"hello\"}).\n\t\tDirectory(\"/src\")\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef go_builder(src: Directory, arch: str, os: str) -> Directory:\n    return (\n        dag.container().from_(\"golang:latest\")\n        .with_directory(\"/src\", src)\n        .with_workdir(\"/src\")\n        .with_env_variable(\"GOOS\", os)\n        .with_env_variable(\"GOARCH\", arch)\n        .with_exec([\"go\", \"build\", \"-o\", \"hello\"])\n        .directory(\"/src\")\n    )\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function goBuilder(src: Directory, arch: string, os: string): Promise<Directory> {\n  return dag\n    .container()\n    .from(\"golang:latest\")\n    .withDirectory(\"/src\", src)\n    .withWorkdir(\"/src\")\n    .withEnvVariable(\"GOOS\", os)\n    .withEnvVariable(\"GOARCH\", arch)\n    .withExec([\"go\", \"build\", \"-o\", \"hello\"])\n    .directory(\"/src\")\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function goBuilder(Directory $src, string $arch, string $os): Directory\n{\n    return $this->dag->container()->from(\"golang:latest\")\n        ->withDirectory(\"/src\", $src)\n        ->withWorkdir(\"/src\")\n        ->withEnvVariable(\"GOOS\", $os)\n        ->withEnvVariable(\"GOARCH\", $arch)\n        ->withExec([\"go\", \"build\", \"-o\", \"hello\"])\n        ->directory(\"/src\");\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic Directory goBuilder(Directory src, String arch, String os) {\n    return dag.container().from(\"golang:latest\")\n        .withDirectory(\"/src\", src)\n        .withWorkdir(\"/src\")\n        .withEnvVariable(\"GOOS\", os)\n        .withEnvVariable(\"GOARCH\", arch)\n        .withExec(Arrays.asList(\"go\", \"build\", \"-o\", \"hello\"))\n        .directory(\"/src\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Module for Google Cloud Run Deployment in Go\nDESCRIPTION: This Go code snippet creates a custom Dagger module that uses the google-cloud-run module to deploy an application to Google Cloud Run. It defines a 'deploy' function that takes project details, image information, and credentials as inputs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/google-cloud-run.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n\t\"github.com/vvaswani/daggerverse/google-cloud-run\"\n)\n\ntype MyModule struct {}\n\nfunc (m *MyModule) Deploy(\n\tctx context.Context,\n\tprojectName string,\n\tserviceLocation string,\n\timageAddress string,\n\tservicePort int,\n\tcredential *dagger.Secret,\n) (string, error) {\n\tgcr := google_cloud_run.New()\n\n\tservice, err := gcr.CreateService(\n\t\tctx,\n\t\tprojectName,\n\t\tserviceLocation,\n\t\timageAddress,\n\t\tservicePort,\n\t\tcredential,\n\t)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn fmt.Sprintf(\"Application deployed to %s\", service), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GitLab CI Pipeline with Kubernetes Executor for Testing and Building\nDESCRIPTION: This YAML configuration creates a GitLab pipeline using the Kubernetes executor. It checks out source code, calls a Dagger Function to test the project, and then calls another Dagger Function to build and publish a container image. It assumes pre-provisioned Dagger Engine instances.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nbefore_script:\n  - apk add --no-cache curl\n  - curl -L https://dl.dagger.io/dagger/install.sh | sh\n  - mv bin/dagger /usr/local/bin\n  - dagger version\n\nstages:\n  - test\n  - build\n\ntest:\n  stage: test\n  tags:\n    - dagger\n  script:\n    - dagger call test --src . --log-format=plain\n\nbuild:\n  stage: build\n  tags:\n    - dagger\n  script:\n    - dagger call build --src . --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Copying Directory to Container in TypeScript\nDESCRIPTION: This TypeScript function copies a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, Directory, dag } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  copyDirectory(source: Directory): Container {\n    return dag.container().from(\"alpine\").withDirectory(\"/src\", source)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dagger Function for Container Publishing in TypeScript\nDESCRIPTION: Demonstrates a custom Dagger Function in TypeScript that creates, modifies, and publishes a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@func()\nasync publish(): Promise<string> {\n  return dag\n    .container()\n    .from(\"alpine:latest\")\n    .withNewFile(\"/hi.txt\", \"Hello from Dagger!\")\n    .withEntrypoint([\"cat\", \"/hi.txt\"])\n    .publish(\"ttl.sh/hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Chaining in Go\nDESCRIPTION: This Go code demonstrates how to implement function chaining in Dagger. It includes functions for setting a name and greeting, and returning a formatted message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Greeter struct {\n\tName     string\n\tGreeting string\n}\n\nfunc (m *MyModule) WithName(name string) *Greeter {\n\treturn &Greeter{Name: name, Greeting: \"Hello\"}\n}\n\nfunc (m *MyModule) WithGreeting(g *Greeter, greeting string) *Greeter {\n\tg.Greeting = greeting\n\treturn g\n}\n\nfunc (m *MyModule) Message(g *Greeter) string {\n\treturn fmt.Sprintf(\"%s, %s!\", g.Greeting, g.Name)\n}\n```\n\n----------------------------------------\n\nTITLE: Python Filter Pattern Examples\nDESCRIPTION: Useful pattern examples for filtering in Python including how to exclude tests, binaries, dependencies, and Git metadata.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# exclude Pytest tests and test data\nIgnore([\"tests/\", \".pytest_cache\"])\n\n# exclude binaries\nIgnore([\"bin\"])\n\n# exclude Python dependencies\nIgnore([\"**/.venv\", \"**/__pycache__\"])\n\n# exclude Node.js dependencies\nIgnore([\"**/node_modules\"])\n\n# exclude Git metadata\nIgnore([\".git\", \"**/.gitignore\"])\n```\n\n----------------------------------------\n\nTITLE: Adding a File to a Container Filesystem - Dagger\nDESCRIPTION: This example demonstrates how to pass a `README.md` file from the host to a container using `Container.withFile()`. It then uses `with-exec` to execute `cat /README.md` and prints the output to standard output.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-file /README.md $(host | file ./README.md) |\n  with-exec cat /README.md |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-file /README.md $(host | file ./README.md) |\n  with-exec cat /README.md |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container \\\n  with-file --path=/README.md --source=./README.md \\\n  with-exec --args=\"cat\",\"/README.md\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Fetching Website Content Using Dagger Java Client\nDESCRIPTION: Demonstrates using the Dagger Java client to create a container, execute commands to fetch a website, and print the first 300 characters of the output.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/java/README.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.sample;\n\nimport io.dagger.client.Client;\nimport io.dagger.client.Dagger;\n\nimport java.util.List;\n\npublic class GetDaggerWebsite {\n\n  public static void main(String... args) throws Exception {\n    try (Client client = Dagger.connect()) {\n      String output = client\n          .container()\n          .from(\"alpine\")\n          .withExec(List.of(\"apk\", \"add\", \"curl\"))\n          .withExec(List.of(\"curl\", \"https://dagger.io\"))\n          .stdout();\n\n      System.out.println(output.substring(0, 300));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Arguments in Dagger Functions\nDESCRIPTION: Shows how to pass directory arguments from local filesystem or remote Git repositories to Dagger Functions, with support for multiple programming languages\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/functions/arguments-directory/go/main.go\n```\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/functions/arguments-directory/python/main.py\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/functions/arguments-directory/typescript/index.ts\n```\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/functions/arguments-directory/php/src/MyModule.php\n```\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/functions/arguments-directory/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Advanced CircleCI Configuration with Dagger Testing and Building\nDESCRIPTION: Complex CircleCI workflow configuration showing how to use Dagger Functions for testing a project and building/publishing a container image. Includes checkout and multiple Dagger command executions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/circleci.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\njobs:\n  test-and-build:\n    docker:\n      - image: cimg/base:current\n    steps:\n      - checkout\n      - run:\n          name: Install Dagger\n          command: |\n            cd /tmp\n            curl -L https://dl.dagger.io/dagger/install.sh | sh\n            sudo mv bin/dagger /usr/local/bin\n            dagger version\n      - run:\n          name: Test\n          command: |\n            dagger call test\n      - run:\n          name: Build\n          command: |\n            dagger call image\nworkflows:\n  dagger:\n    jobs:\n      - test-and-build\n```\n\n----------------------------------------\n\nTITLE: Starting NGINX Service with Random Port Mapping - Dagger\nDESCRIPTION: This example demonstrates how to start an NGINX service and map NGINX port 80 to a random port on the host using the `--random` argument. This can be useful when you need dynamic port allocation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up --random'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up --random\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call container as-service up --random\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Services in Python\nDESCRIPTION: This Python function demonstrates how to control a service's lifecycle by explicitly starting and stopping a service. It uses a Redis service as an example, showing how to start and stop the service within the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n```python file=../api/snippets/services/start-stop-services/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Services in Dagger Functions (Python)\nDESCRIPTION: This Python code shows how to create an HTTP service and use it in another Dagger Function. It defines two methods: 'http_service' which returns a Service, and 'get' which binds the service and accesses it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n\nclass MyModule(dagger.Module):\n    def http_service(self) -> dagger.Service:\n        return (\n            self.dag.container()\n            .from_(\"nginx:1.25-alpine\")\n            .with_exposed_port(80)\n            .as_service()\n        )\n\n    def get(self) -> str:\n        return (\n            self.dag.container()\n            .from_(\"alpine\")\n            .with_service_binding(\"www\", self.http_service())\n            .with_exec([\"wget\", \"-O\", \"-\", \"http://www\", \"--timeout\", \"1\"])\n            .stdout()\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Function in PHP\nDESCRIPTION: Example of a Dagger Function in PHP that calls a remote API and returns the result. The function uses an Alpine container, installs curl and jq, and fetches data from a random user API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Client;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    public function getUser(Client $client): string\n    {\n        return $client->container()->from('alpine:latest')\n            ->withExec(['apk', 'add', 'curl', 'jq'])\n            ->withExec(['sh', '-c', \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\"])\n            ->stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services (PHP)\nDESCRIPTION: This PHP code shows how to create two interdependent services with custom hostnames. It defines methods to create service A and service B, which can communicate with each other using predefined hostnames.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Module;\nuse Dagger\\Service;\n\nclass MyModule extends Module\n{\n    public function serviceA(): Service\n    {\n        return $this->dag->container()\n            ->from('nginx:alpine')\n            ->withNewFile('/usr/share/nginx/html/index.html', ['contents' => 'Hello from Service A!'])\n            ->withExposedPort(80)\n            ->asService()\n            ->withName('svca');\n    }\n\n    public function serviceB(): Service\n    {\n        return $this->dag->container()\n            ->from('nginx:alpine')\n            ->withNewFile('/usr/share/nginx/html/index.html', ['contents' => 'Hello from Service B!'])\n            ->withExposedPort(80)\n            ->asService()\n            ->withName('svcb');\n    }\n\n    public function services(): Service\n    {\n        $serviceA = $this->serviceA();\n        $serviceB = $this->serviceB();\n        return $this->dag->container()\n            ->from('nginx:alpine')\n            ->withServiceBinding('svca', $serviceA)\n            ->withServiceBinding('svcb', $serviceB)\n            ->withNewFile('/etc/nginx/conf.d/default.conf', [\n                'contents' => '\n                    server {\n                        listen 80;\n                        location /a {\n                            proxy_pass http://svca;\n                        }\n                        location /b {\n                            proxy_pass http://svcb;\n                        }\n                    }\n                ',\n            ])\n            ->withExposedPort(80)\n            ->asService();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GitLab CI Pipeline with Dagger Functions for Testing and Building\nDESCRIPTION: This YAML configuration creates a GitLab pipeline that checks out source code, calls a Dagger Function to test the project, and then calls another Dagger Function to build and publish a container image. It uses a Go application and assumes a forked GitLab repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nservices:\n  - docker:dind\n\nvariables:\n  DOCKER_HOST: tcp://docker:2376\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nbefore_script:\n  - apk add --no-cache curl\n  - curl -L https://dl.dagger.io/dagger/install.sh | sh\n  - mv bin/dagger /usr/local/bin\n  - dagger version\n\nstages:\n  - test\n  - build\n\ntest:\n  stage: test\n  script:\n    - dagger call test --src . --log-format=plain\n\nbuild:\n  stage: build\n  script:\n    - dagger call build --src . --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Connecting and Executing Commands with Dagger PHP SDK\nDESCRIPTION: This snippet demonstrates how to connect to the Dagger PHP SDK, create a container from an image, execute commands within that container, and retrieve the output. It requires Dagger v0.9.3 or later as a prerequisite. The output is limited to the first 300 characters for display purposes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = Dagger::connect();\n$output = $client\n    ->container()\n    ->from('alpine')\n    ->withExec(['apk', 'add', 'curl'])\n    ->withExec(['curl', 'https://dagger.io'])\n    ->stdout();\n\necho substr($output, 0, 300);\n```\n\n----------------------------------------\n\nTITLE: Modifying Copied Directory in Container in PHP\nDESCRIPTION: This PHP function copies a specified directory to the /src path in a container, adds a new file to it, and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Directory;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    public function copyAndModifyDirectory(Directory $source): Container\n    {\n        return dag()->container()\n            ->from('alpine')\n            ->withDirectory('/src', $source)\n            ->withExec(['touch', '/src/new-file']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dagger Interfaces in Go\nDESCRIPTION: Shows how to use the implemented 'Example' module as an argument to a function expecting the 'Fooer' interface in Go. This demonstrates Dagger's automatic interface detection and conversion.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype MyModule struct {\n\tdagger.Object\n}\n\nfunc (m *MyModule) Bar(ctx context.Context, f Fooer) (string, error) {\n\treturn f.Foo(ctx, \"hello\")\n}\n\nfunc (m *MyModule) Test(ctx context.Context) (string, error) {\n\texample := dag.Example()\n\treturn m.Bar(ctx, example)\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Go Dagger Module with Multiple Files\nDESCRIPTION: Demonstrates how to split a Go Dagger module into multiple files and subpackages, explaining file structure and package access rules.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// utils/utils.go\n\nimport \"dagger/<module>/internal/dagger\"\n\nfunc DoThing(client *dagger.Client) *dagger.Directory {\n    // we need to pass *dagger.Client in here, since we don't have access to `dag`\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging and Publishing Container Image to Private Registry in Go\nDESCRIPTION: This Go function tags a just-in-time container image multiple times and publishes it to a private registry. It demonstrates how to create, tag, and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_52\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/tag-publish-image/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Container in Python\nDESCRIPTION: Creates an asynchronous method for building and publishing the constructed container, returning its identifier.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    @function\n    async def build_and_publish(self) -> str:\n        \"\"\"Builds and publishes a container\"\"\"\n        return await self.build().publish(\"ttl.sh/bar\")\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Dagger Interactive Shell\nDESCRIPTION: Shows how to use secrets in Dagger's interactive shell mode. This passes a secret from an environment variable to a container and executes a command using that secret.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/secrets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from alpine:latest |\n  with-secret-variable MY_SECRET env://API_TOKEN |\n  with-exec -- sh -c 'echo this is the secret: $MY_SECRET' |\n  stdout\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for GHCR Publishing\nDESCRIPTION: GitHub Actions workflow configuration for publishing a container image to GitHub Container Registry (GHCR) using Dagger. This example shows how to integrate Dagger into a CI/CD workflow.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\n\non:\n  push:\n    branches: [ main ]\n\npermissions:\n  contents: read\n  packages: write\n\njobs:\n  dagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Dagger\n        uses: dagger/dagger-for-github@v5\n      - name: Dagger project update\n        run: dagger project update\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Call publish function\n        run: |\n          dagger call publish \\\n            --platform=linux/amd64 \\\n            --tag=ghcr.io/${{ github.repository }}:${{ github.sha }}\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates accessing a MariaDB service running on the host from a Dagger Function. It defines a 'userList' method that takes a Service argument and queries the database.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dag, Container, Service } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  async userList(svc: Service): Promise<string> {\n    return dag\n      .container()\n      .from(\"mariadb:10.11.2\")\n      .withServiceBinding(\"db\", svc)\n      .withEnvVariable(\"MYSQL_PWD\", \"secret\")\n      .withExec([\n        \"mysql\",\n        \"-h\", \"db\",\n        \"-u\", \"root\",\n        \"-e\", \"SELECT Host, User FROM mysql.user;\",\n        \"-t\",\n      ])\n      .stdout()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Volumes in Dagger Shell\nDESCRIPTION: This snippet demonstrates how to use cache volumes in Dagger Shell. It sets up a Node.js environment, clones a repository, and installs npm dependencies using a cached volume for faster subsequent runs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/cache-volumes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from node:21 |\n  with-directory /src https://github.com/dagger/hello-dagger |\n  with-workdir /src |\n  with-mounted-cache /root/.npm node-21 |\n  with-exec npm install\n```\n\n----------------------------------------\n\nTITLE: Running Elixir Script with Dagger SDK\nDESCRIPTION: This Elixir script connects to the Dagger client, executes a container with specific Elixir and Erlang versions, and prints the output. Ensure Docker is available and configure the client to connect. It expects a successful connection to the Dagger SDK server and prints the Elixir version.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Elixir\nCODE:\n```\n# ci.exs\nclient = Dagger.connect!()\n\n{:ok, out} =\n  client\n  |> Dagger.Client.container([])\n  |> Dagger.Container.from(\"hexpm/elixir:1.14.4-erlang-25.3-debian-buster-20230227-slim\")\n  |> Dagger.Container.with_exec([\"elixir\", \"--version\"])\n  |> Dagger.Container.stdout()\n\nIO.puts(out)\n\nDagger.close(client)\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Annotations to Docker Image in Go\nDESCRIPTION: This Dagger function adds OpenContainer Initiative (OCI) annotations to an image. It builds a base image and then adds specified annotations to it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_29\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tbase := client.Container().From(\"alpine:latest\")\n\n\tcontainer := base.WithAnnotation(\"org.opencontainers.image.source\", \"https://github.com/dagger/dagger\")\n\tcontainer = container.WithAnnotation(\"org.opencontainers.image.description\", \"This is a test image\")\n\tcontainer = container.WithAnnotation(\"org.opencontainers.image.licenses\", \"Apache-2.0\")\n\n\tref, err := container.Publish(ctx, \"example\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Multi-version Python Testing with Dagger SDK\nDESCRIPTION: Python program using the Dagger SDK to test a Python application against multiple Python versions. It demonstrates creating a Dagger client and using it to run tests in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport anyio\nimport dagger\n\n\nasync def test():\n    versions = [\"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n\n    async with dagger.Connection(dagger.Config(log_output=sys.stderr)) as client:\n        # get reference to the local project\n        src = client.host().directory(\".\")\n\n        async def test_version(version: str):\n            print(f\"Starting tests for Python {version}\")\n\n            python = (\n                client.container()\n                .from_(f\"python:{version}-slim-bullseye\")\n                .with_mounted_directory(\"/src\", src)\n                .with_workdir(\"/src\")\n                .with_exec([\"pip\", \"install\", \"-r\", \"requirements.txt\"])\n                .with_exec([\"pip\", \"install\", \"-r\", \"requirements-dev.txt\"])\n                .with_exec([\"pytest\", \"tests\"])\n            )\n\n            await python.exit_code()\n            print(f\"Tests for Python {version} succeeded!\")\n\n        await anyio.create_task_group().run(\n            lambda: anyio.create_task(test_version(v)) for v in versions\n        )\n\n    print(\"All tasks have finished\")\n\n\nif __name__ == \"__main__\":\n    anyio.run(test)\n```\n\n----------------------------------------\n\nTITLE: Printing Linter Report Contents in Dagger\nDESCRIPTION: This example shows how to use the File.contents() method to print the JSON report of a linter run in Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/ruff |\n  lint https://github.com/dagger/dagger |\n  report |\n  contents\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/ruff |\n  lint https://github.com/dagger/dagger |\n  report |\n  contents\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/ruff call \\\n  lint --source=https://github.com/dagger/dagger \\\n  report \\\n  contents\n```\n\n----------------------------------------\n\nTITLE: Mounting Directory to Container in Python\nDESCRIPTION: This Python function mounts a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass MyModule(dagger.Module):\n    def mount_directory(self, source: dagger.Directory) -> dagger.Container:\n        return (dag.container()\n            .from_(\"alpine\")\n            .with_mounted_directory(\"/src\", source)\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services in TypeScript\nDESCRIPTION: This TypeScript function runs two services, service A and service B, that depend on each other. The services are set up with custom hostnames, 'svca' and 'svcb', allowing each service to communicate with the other by hostname.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=../api/snippets/services/create-interdependent-services/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Copying Directory to Container in Python\nDESCRIPTION: This Python function copies a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass MyModule(dagger.Module):\n    def copy_directory(self, source: dagger.Directory) -> dagger.Container:\n        return (dag.container()\n            .from_(\"alpine\")\n            .with_directory(\"/src\", source)\n        )\n```\n\n----------------------------------------\n\nTITLE: Reading Files from HTTP in Dagger\nDESCRIPTION: Examples of reading files from remote HTTP sources using different Dagger interfaces including System shell, Dagger Shell, and Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'read-file-http https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md'\n```\n\nLANGUAGE: shell\nCODE:\n```\nread-file-http https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call read-file-http --url=https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nread-file-http https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md |\n  file /src/myfile |\n  contents\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nread-file-http https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md | file /src/myfile | contents\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call \\\n  read-file-http --url=https://raw.githubusercontent.com/dagger/dagger/refs/heads/main/README.md \\\n  file --path=/src/myfile \\\n  contents\n```\n\n----------------------------------------\n\nTITLE: Copying Directory to Container in Go\nDESCRIPTION: This Go function copies a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc (m *MyModule) CopyDirectory(ctx context.Context, source *dagger.Directory) (*dagger.Container, error) {\n\treturn dag.Container().From(\"alpine\").WithDirectory(\"/src\", source), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NGINX Service with Specific Port Mapping - Dagger\nDESCRIPTION: This example shows how to start an NGINX service and map NGINX port 80 to host port 8080 using the `--ports` argument. This allows accessing the service on a specific port.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up --ports=8080:80'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up --ports=8080:80\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call container as-service up --ports=8080:80\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Containers in GraphQL\nDESCRIPTION: This query demonstrates how to create two specialized containers from a common base using the proposed Dagger GraphQL API. It shows how to set environment variables and execute commands in each container, illustrating the flexibility of the container model.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/schema/README.md#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nSpecialize two containers from a common base\n\"\"\"\nquery twoContainers {\n  container {\n    from(address: \"alpine\") {\n      debug: withVariable(name: \"DEBUG\", value: \"1\") {\n        id\n        exec(args: [\"env\"]) {\n          stdout\n        }\n      }\n      noDebug: withVariable(name: \"DEBUG\", value: \"0\") {\n        id\n        exec(args: [\"env\"]) {\n          stdout\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions (Go)\nDESCRIPTION: This Go code demonstrates how to access a MariaDB service running on the host from a Dagger Function. It defines a 'userList' function that takes a Service argument and queries the database.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Module struct {}\n\nfunc (m *Module) UserList(ctx context.Context, svc *dagger.Service) (string, error) {\n\treturn dag.Container().\n\t\tFrom(\"mariadb:10.11.2\").\n\t\tWithServiceBinding(\"db\", svc).\n\t\tWithEnvVariable(\"MYSQL_PWD\", \"secret\").\n\t\tWithExec([]string{\n\t\t\t\"mysql\",\n\t\t\t\"-h\", \"db\",\n\t\t\t\"-u\", \"root\",\n\t\t\t\"-e\", \"SELECT Host, User FROM mysql.user;\",\n\t\t\t\"-t\",\n\t\t}).\n\t\tStdout(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Copied Directory in Container in Go\nDESCRIPTION: This Go function copies a specified directory to the /src path in a container, adds a new file to it, and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc (m *MyModule) CopyAndModifyDirectory(ctx context.Context, source *dagger.Directory) (*dagger.Container, error) {\n\treturn dag.Container().From(\"alpine\").WithDirectory(\"/src\", source).WithExec([]string{\"touch\", \"/src/new-file\"}), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel All Function in TypeScript\nDESCRIPTION: TypeScript implementation of an \"all\" function that runs all test functions in parallel using Promise.all.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nexport class Tests {\n  @func()\n  async all(): Promise<void> {\n    await Promise.all([this.firstTest(), this.secondTest()]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel All Function in Python\nDESCRIPTION: Python implementation of an \"all\" function that runs all test functions in parallel using anyio.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport anyio\n\n@object_type\nclass Tests:\n    @function\n    async def all(self):\n        async with anyio.create_task_group() as tg:\n            tg.start_soon(self.first_test)\n            tg.start_soon(self.second_test)\n```\n\n----------------------------------------\n\nTITLE: Publishing Wolfi Container to Registry in Dagger\nDESCRIPTION: This example shows how to publish a container returned by a Wolfi container builder Dagger Function to the 'ttl.sh' registry using the Container.publish() method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/dagger/dagger/modules/wolfi@v0.16.2 | container | publish ttl.sh/my-wolfi'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 | container | publish ttl.sh/my-wolfi\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call container publish --address=ttl.sh/my-wolfi\n```\n\n----------------------------------------\n\nTITLE: Checking with Dagger Modules in Go\nDESCRIPTION: Demonstrates use of Dagger modules for checking a container's security status using Trivy.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Basics) Check(ctx context.Context) (string, error) {\n\tctr := dag.Wolfi().Container()\n\treturn dag.Trivy().ScanContainer(ctx, ctr);\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Pre-call Filtering\nDESCRIPTION: A Dagger Function in PHP that excludes everything in a directory except PHP source code files, showing PHP-specific filter implementation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/fs-filters/pre-call/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Agent Loop Implementation in TypeScript\nDESCRIPTION: This TypeScript code snippet implements an agent loop using Dagger's LLM integration. It creates an LLM agent with an environment and prompts it to complete an assignment. The LLM runs in a loop, calling tools and iterating on its work until completion.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/mcp.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfile=../quickstart/agent/snippets/typescript/src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Function in Go\nDESCRIPTION: Example of a Dagger Function in Go that calls a remote API and returns the result. The function uses an Alpine container, installs curl and jq, and fetches data from a random user API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n)\n\ntype MyModule struct{}\n\nfunc (m *MyModule) GetUser(ctx context.Context) (string, error) {\n\treturn dag.Container().From(\"alpine:latest\").\n\t\tWithExec([]string{\"apk\", \"add\", \"curl\", \"jq\"}).\n\t\tWithExec([]string{\"sh\", \"-c\", \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\"}).\n\t\tStdout(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent in PHP\nDESCRIPTION: PHP code for creating a Dagger Function that uses an LLM to solve a programming assignment. It sets up the environment, defines inputs and outputs, and interacts with the LLM to complete the task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CodingAgent;\n\nuse Dagger\\Client;\nuse Dagger\\Container;\nuse Dagger\\Env;\nuse Dagger\\LLMCompletion;\n\nclass CodingAgent\n{\n    public function goProgram(string $assignment): Container\n    {\n        $client = Client::connect();\n        $model = $client->defaultLLMModel();\n\n        $builder = $client->container()->from(\"golang:latest\");\n\n        $environment = Env::new([\n            \"assignment\" => $assignment,\n        ])->withInputs([\n            \"builder\" => \"A container used to build and run Go programs\",\n        ])->withOutputs([\n            \"completed\" => \"A container with the completed assignment\",\n        ]);\n\n        $prompt = \"You are an expert Go programmer. Your task is to write a Go program that fulfills the given assignment. Write the program, build it, and test it. If there are any errors, fix them and try again. When you are satisfied with the result, return the container with the completed assignment.\";\n\n        $result = $model->complete(LLMCompletion::new()\n            ->withPrompt($prompt)\n            ->withEnvironment($environment)\n            ->withInputs(Env::new([\"builder\" => $builder->id()])));\n\n        return $result->container(\"completed\");\n    }\n}\n\nreturn function (Client $client) {\n    return new CodingAgent();\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory or File to Host in Python\nDESCRIPTION: This Python function demonstrates how to return a just-in-time directory and file, which can be exported to the host using 'dagger call ... export ...'. It shows how to create and manipulate directories and files within a Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/export-file-dir/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive and Returning File in Dagger Function\nDESCRIPTION: This function takes a directory as input, creates a ZIP archive of its contents, and returns the archive as a File. It demonstrates working with directories and files, as well as executing commands in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) Archiver(ctx context.Context, src *Directory) (*File, error) {\n\treturn dag.Container().From(\"alpine:latest\").\n\t\tWithDirectory(\"/src\", src).\n\t\tWithWorkdir(\"/src\").\n\t\tWithExec([]string{\"apk\", \"add\", \"zip\"}).\n\t\tWithExec([]string{\"zip\", \"-r\", \"/out.zip\", \".\"}).\n\t\tFile(\"/out.zip\")\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef archiver(src: Directory) -> File:\n    return (\n        dag.container().from_(\"alpine:latest\")\n        .with_directory(\"/src\", src)\n        .with_workdir(\"/src\")\n        .with_exec([\"apk\", \"add\", \"zip\"])\n        .with_exec([\"zip\", \"-r\", \"/out.zip\", \".\"])\n        .file(\"/out.zip\")\n    )\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function archiver(src: Directory): Promise<File> {\n  return dag\n    .container()\n    .from(\"alpine:latest\")\n    .withDirectory(\"/src\", src)\n    .withWorkdir(\"/src\")\n    .withExec([\"apk\", \"add\", \"zip\"])\n    .withExec([\"zip\", \"-r\", \"/out.zip\", \".\"])\n    .file(\"/out.zip\")\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function archiver(Directory $src): File\n{\n    return $this->dag->container()->from(\"alpine:latest\")\n        ->withDirectory(\"/src\", $src)\n        ->withWorkdir(\"/src\")\n        ->withExec([\"apk\", \"add\", \"zip\"])\n        ->withExec([\"zip\", \"-r\", \"/out.zip\", \".\"])\n        ->file(\"/out.zip\");\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic File archiver(Directory src) {\n    return dag.container().from(\"alpine:latest\")\n        .withDirectory(\"/src\", src)\n        .withWorkdir(\"/src\")\n        .withExec(Arrays.asList(\"apk\", \"add\", \"zip\"))\n        .withExec(Arrays.asList(\"zip\", \"-r\", \"/out.zip\", \".\"))\n        .file(\"/out.zip\");\n}\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP File - Python Implementation\nDESCRIPTION: Python function that uses Dagger's Python SDK to download a file from an HTTP/HTTPS URL and save it to a container at a specified path.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def read_file_http(url: str) -> Container:\n    async with dagger.Connection() as client:\n        container = client.container()\n\n        return container.with_new_file(\n            \"/file\",\n            contents=client.http(url)\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Dagger Functions with PHP\nDESCRIPTION: Example of implementing a Dagger Function with an optional argument in PHP by making it nullable, which allows it to be omitted in Dagger CLI calls.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/functions/arguments-optional/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Exposing Dagger Function Services to the Host\nDESCRIPTION: This code shows how to create an HTTP service in a Dagger Function and expose it to the host system. It includes examples of exposing services on default and custom ports for host access.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'http-service | up'\n\ncurl localhost:8080\n\ndagger -c 'http-service | up --ports 9000:8080'\n\ncurl localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in TypeScript for Dagger Module\nDESCRIPTION: This TypeScript code defines custom types 'Organization' and 'Account' for a GitHub Dagger module. It demonstrates using both class and type definitions for complex data types.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-types.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Github {\n  daggerOrganization(): Organization {\n    return new Organization(\"dagger\")\n  }\n}\n\nclass Organization {\n  constructor(private name: string) {}\n\n  members(): Account[] {\n    return [new Account(\"jane\"), new Account(\"john\")]\n  }\n}\n\nclass Account {\n  constructor(private name: string) {}\n\n  url(): string {\n    return `https://github.com/${this.name}`\n  }\n}\n\n// Alternatively, using types:\ntype Organization = {\n  name: string\n  members: () => Account[]\n}\n\ntype Account = {\n  name: string\n  url: () => string\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions (Java)\nDESCRIPTION: This Java code demonstrates accessing a MariaDB service running on the host from a Dagger Function. It defines a 'userList' method that takes a Service argument and queries the database.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Container;\nimport io.dagger.client.Service;\n\npublic class MyModule {\n    public String userList(Service svc) {\n        return dag.container()\n                .from(\"mariadb:10.11.2\")\n                .withServiceBinding(\"db\", svc)\n                .withEnvVariable(\"MYSQL_PWD\", \"secret\")\n                .withExec(Arrays.asList(\n                        \"mysql\",\n                        \"-h\", \"db\",\n                        \"-u\", \"root\",\n                        \"-e\", \"SELECT Host, User FROM mysql.user;\",\n                        \"-t\"\n                ))\n                .stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Stage Build in Dagger\nDESCRIPTION: Example of performing a multi-stage build in Dagger using different shell interfaces.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'build https://github.com/golang/example#master:hello'\n```\n\nLANGUAGE: shell\nCODE:\n```\nbuild https://github.com/golang/example#master:hello\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call build --src=\"https://github.com/golang/example#master:hello\"\n```\n\n----------------------------------------\n\nTITLE: Execute Container Command to List Directory Contents using Dagger Function Chaining\nDESCRIPTION: This snippet demonstrates chaining a Container.withExec() call to a Wolfi container to execute the 'ls' command and display directory contents. It's shown in three equivalent formats: System shell with heredoc, Dagger interactive shell, and Dagger CLI command format.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec ls /etc/ |\n  stdout\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-exec ls /etc/ |\n  stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container \\\n  with-exec --args=\"ls\",\"/etc/\" \\\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Dagger Shell for Complex Pipeline\nDESCRIPTION: This example demonstrates the use of variables in Dagger Shell to create a complex pipeline. It clones a repository, sets up a Node.js environment, builds an application, and creates an Nginx container with the built files. It showcases variable assignment and reuse in Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/shell.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrepo=$(git https://github.com/dagger/hello-dagger | head | tree)\nenv=$(container | from node:23 | with-directory /app $repo | with-workdir /app)\nbuild=$($env | with-exec npm install | with-exec npm run build | directory ./dist)\ncontainer | from nginx | with-directory /usr/share/nginx/html $build | terminal --cmd=/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Defining Tekton Task for Dagger Execution\nDESCRIPTION: YAML configuration for a custom Tekton Task that installs the Dagger CLI and executes a Dagger Function. This task runs with Docker-in-Docker support and uses a Dagger Engine sidecar to create a containerized environment for pipeline execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/tekton.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: dagger\nspec:\n  params:\n    - name: dagger-cloud-token\n      type: string\n      default: \"\"\n  workspaces:\n    - name: source\n  sidecars:\n    - name: dagger-engine\n      image: registry.dagger.io/engine:v0.9.9\n      args:\n        - session\n      volumeMounts:\n        - name: dagger-socket\n          mountPath: /var/run/dagger.sock\n  volumes:\n    - name: dagger-socket\n      emptyDir: {}\n  steps:\n    - name: run\n      image: docker:24-dind\n      workingDir: $(workspaces.source.path)\n      env:\n        - name: DOCKER_HOST\n          value: tcp://localhost:2375\n        - name: DAGGER_CLOUD_TOKEN\n          value: $(params.dagger-cloud-token)\n        - name: _EXPERIMENTAL_DAGGER_RUNNER_HOST\n          value: unix:///var/run/dagger.sock\n      command:\n        - sh\n        - -c\n        - |\n          set -ex\n\n          # Install dependencies\n          apk add --no-cache curl jq\n\n          # Install dagger CLI\n          cd /usr/local/bin\n          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=0.9.7 sh\n          cd $(workspaces.source.path)\n\n          # Call Dagger function\n          dagger call build\n      volumeMounts:\n        - name: dagger-socket\n          mountPath: /var/run/dagger.sock\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions in Go\nDESCRIPTION: This Go function accepts a Service running on the host, binds it using an alias, and creates a client to access it via the service binding. It uses a MariaDB database service running on host port 3306, aliased as 'db' in the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n```go file=../api/snippets/services/expose-host-services-to-dagger/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Building a New Container in TypeScript\nDESCRIPTION: Constructs a new container by invoking the base container method, adding necessary packages with Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * Builds on top of base container and returns a new container\n   */\n  @func()\n  build(): Container {\n    return this.base().withExec([\"apk\", \"add\", \"bash\", \"git\"])\n  }\n```\n\n----------------------------------------\n\nTITLE: Mounting Directory to Container in Go\nDESCRIPTION: This Go function mounts a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc (m *MyModule) MountDirectory(ctx context.Context, source *dagger.Directory) (*dagger.Container, error) {\n\treturn dag.Container().From(\"alpine\").WithMountedDirectory(\"/src\", source), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Pipeline Failures in Go\nDESCRIPTION: Example of a Go module that demonstrates Dagger's automatic debugging when a pipeline fails. The execution will open an interactive terminal at the point of failure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/debugging-1/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Error Handling in Java\nDESCRIPTION: This Java function performs division and throws an IllegalArgumentException if the denominator is zero. It demonstrates Java's exception handling approach for error management.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic int divide(int a, int b) {\n    if (b == 0) {\n        throw new IllegalArgumentException(\"cannot divide by zero\");\n    }\n    return a / b;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Constructor in Java for Dagger Module\nDESCRIPTION: This Java code shows how to create a simple constructor for a Dagger module. It defines a MyModule class with a name field and a message method, requiring both a public constructor and an empty constructor.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage mymodule;\n\npublic class MyModule {\n    private String name;\n\n    public MyModule() {}\n\n    public MyModule(String name) {\n        this.name = name;\n    }\n\n    public String message() {\n        return \"Hello, \" + name + \"!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Function in Java\nDESCRIPTION: Example of a Dagger Function in Java that calls a remote API and returns the result. The function uses an Alpine container, installs curl and jq, and fetches data from a random user API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Client;\nimport io.dagger.client.Container;\nimport io.dagger.client.QueryError;\n\npublic class MyModule {\n    public String getUser(Client client) throws QueryError {\n        return client.container().from(\"alpine:latest\")\n                .withExec(\"apk\", \"add\", \"curl\", \"jq\")\n                .withExec(\"sh\", \"-c\", \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\")\n                .stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging and Publishing Container Image to Private Registry in TypeScript\nDESCRIPTION: This TypeScript function tags a just-in-time container image multiple times and publishes it to a private registry. It demonstrates how to create, tag, and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/tag-publish-image/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Pre-call Filtering\nDESCRIPTION: A Dagger Function in Go that excludes everything from a directory except Go source code files. It demonstrates how to use the `ignore` parameter with the `.gitignore` syntax.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/fs-filters/pre-call/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Debugging Pipeline Failures in Java\nDESCRIPTION: Example of a Java module that demonstrates Dagger's automatic debugging when a pipeline fails. The execution will open an interactive terminal at the point of failure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/debugging-1/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Error Handling in PHP\nDESCRIPTION: This PHP function performs division and throws an InvalidArgumentException if the denominator is zero. It demonstrates PHP's exception handling for error management.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function divide(int $a, int $b): int\n{\n    if ($b === 0) {\n        throw new \\InvalidArgumentException(\"cannot divide by zero\");\n    }\n    return intdiv($a, $b);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Dependency in TypeScript\nDESCRIPTION: Example of how to access an installed module dependency from a TypeScript Dagger module using the dag client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@func()\\nasync greeting(): Promise<string> {\\n  return await dag.hello().hello()\\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing State as Dagger Functions in TypeScript\nDESCRIPTION: This TypeScript code demonstrates using the @func() decorator to expose a field as a Dagger Function. The 'greeting' field is exposed, while 'name' remains private.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/state.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { func, field } from \"@dagger.io/dagger\"\n\nclass MyModule {\n  @field()\n  @func()\n  greeting: string\n\n  private name: string\n\n  constructor(greeting = \"Hello\", name = \"World\") {\n    this.greeting = greeting\n    this.name = name\n  }\n\n  @func()\n  message(): string {\n    return `${this.greeting}, ${this.name}!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Files as Secrets in Dagger Functions\nDESCRIPTION: This code shows how to accept a GitHub hosts configuration file as a Secret and mount it to a container to authorize requests to GitHub. It demonstrates the pattern of passing file-based secrets to containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github-auth file://$HOME/.config/gh/hosts.yml'\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services (Java)\nDESCRIPTION: This Java code demonstrates creating two interdependent services with custom hostnames. It defines methods to create service A and service B, which can communicate with each other using predefined hostnames.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.client.Container;\nimport io.dagger.client.Service;\n\npublic class MyModule {\n    public Service serviceA() {\n        return dag.container()\n                .from(\"nginx:alpine\")\n                .withNewFile(\"/usr/share/nginx/html/index.html\", dagger.ContainerWithNewFileOpts.builder()\n                        .contents(\"Hello from Service A!\")\n                        .build())\n                .withExposedPort(80)\n                .asService()\n                .withName(\"svca\");\n    }\n\n    public Service serviceB() {\n        return dag.container()\n                .from(\"nginx:alpine\")\n                .withNewFile(\"/usr/share/nginx/html/index.html\", dagger.ContainerWithNewFileOpts.builder()\n                        .contents(\"Hello from Service B!\")\n                        .build())\n                .withExposedPort(80)\n                .asService()\n                .withName(\"svcb\");\n    }\n\n    public Service services() {\n        Service serviceA = this.serviceA();\n        Service serviceB = this.serviceB();\n        return dag.container()\n                .from(\"nginx:alpine\")\n                .withServiceBinding(\"svca\", serviceA)\n                .withServiceBinding(\"svcb\", serviceB)\n                .withNewFile(\"/etc/nginx/conf.d/default.conf\", dagger.ContainerWithNewFileOpts.builder()\n                        .contents(\"\n                            server {\n                                listen 80;\n                                location /a {\n                                    proxy_pass http://svca;\n                                }\n                                location /b {\n                                    proxy_pass http://svcb;\n                                }\n                            }\n                        \")\n                        .build())\n                .withExposedPort(80)\n                .asService();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Container with Installed Packages in PHP\nDESCRIPTION: This PHP function returns an Alpine container with specified packages installed. It shows how to work with containers in Dagger Functions using PHP.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n#[Function]\npublic function alpineBuilder(array $packages): Container\n{\n    return $this->dag->container()->from(\"alpine:latest\")\n        ->withExec(array_merge([\"apk\", \"add\"], $packages));\n}\n```\n\n----------------------------------------\n\nTITLE: Building a New Container in Python\nDESCRIPTION: Expands the functionality to build a new container from the base container by adding packages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n    @function\n    def build(self) -> dagger.Container:\n        \"\"\"Builds on top of base container and returns a new container\"\"\"\n        return self.base().with_exec([\"apk\", \"add\", \"bash\", \"git\"])\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions (Python)\nDESCRIPTION: This Python code shows how to access a MariaDB service running on the host from a Dagger Function. It defines a 'user_list' method that takes a Service argument and queries the database.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n\nclass MyModule(dagger.Module):\n    def user_list(self, svc: dagger.Service) -> str:\n        return (\n            self.dag.container()\n            .from_(\"mariadb:10.11.2\")\n            .with_service_binding(\"db\", svc)\n            .with_env_variable(\"MYSQL_PWD\", \"secret\")\n            .with_exec(\n                [\n                    \"mysql\",\n                    \"-h\",\n                    \"db\",\n                    \"-u\",\n                    \"root\",\n                    \"-e\",\n                    \"SELECT Host, User FROM mysql.user;\",\n                    \"-t\",\n                ]\n            )\n            .stdout()\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Enums in Python for Dagger Functions\nDESCRIPTION: This Python code snippet shows how to implement an enumeration 'Severity' using dagger.Enum base class. It defines a 'scan' function that uses this enum as an argument along with an image reference.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/enumerations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass Severity(dagger.Enum):\n    UNKNOWN = \"UNKNOWN\"\n    LOW = \"LOW\"\n    MEDIUM = \"MEDIUM\"\n    HIGH = \"HIGH\"\n    CRITICAL = \"CRITICAL\"\n\nclass MyModule:\n    def scan(self, ref: str, severity: Severity) -> str:\n        return f\"Scanning {ref} with severity {severity}\"\n\ndef main():\n    dagger.Connection().serve(MyModule())\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Directory Terminal Inspection\nDESCRIPTION: A TypeScript Dagger function that demonstrates using a terminal session to inspect a directory by mounting it in a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  const dir = client.host().directory(\".\", {\n    exclude: [\"node_modules\", \".git\"],\n  })\n\n  console.log(\"Opening terminal session\")\n  dir.terminal()\n}, { LogOutput: process.stdout })\n```\n\n----------------------------------------\n\nTITLE: Invalidating Dagger Cache in Go\nDESCRIPTION: This Dagger function demonstrates how to invalidate the Dagger layer cache by introducing a volatile time variable. It prints the current date and time, with the option to use a cache buster.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_31\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tcontainer := client.Container().From(\"alpine:latest\")\n\n\t// Introduce a volatile variable to invalidate cache\n\tcacheBuster := os.Getenv(\"CACHEBUSTER\")\n\tif cacheBuster != \"\" {\n\t\tcontainer = container.WithEnvVariable(\"CACHEBUSTER\", time.Now().String())\n\t}\n\n\toutput, err := container.WithExec([\"date\"]).Stdout(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn fmt.Sprintf(\"Current date and time: %s\", output), nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Dagger Functions with TypeScript\nDESCRIPTION: Example of implementing a Dagger Function with an optional argument in TypeScript that defaults to 'world' when no name is provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/functions/arguments-optional/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Error Handling in Python\nDESCRIPTION: This Python function performs division and raises a ValueError if the denominator is zero. It demonstrates Python's exception handling approach for error management.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef divide(self, a: int, b: int) -> int:\n    if b == 0:\n        raise ValueError(\"cannot divide by zero\")\n    return a // b\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Agent in Java\nDESCRIPTION: Java code for creating a Dagger Function that uses an LLM to solve a programming assignment. It sets up the environment, defines inputs and outputs, and interacts with the LLM to complete the task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.codingagent;\n\nimport io.dagger.client.*;\n\npublic class CodingAgent {\n    public Container goProgram(String assignment) throws Exception {\n        try (Client client = Client.connect()) {\n            LLMModel model = client.defaultLLMModel();\n\n            Container builder = client.container().from(\"golang:latest\");\n\n            Env environment = Env.of(\"assignment\", assignment)\n                .withInputs(\"builder\", \"A container used to build and run Go programs\")\n                .withOutputs(\"completed\", \"A container with the completed assignment\");\n\n            String prompt = \"You are an expert Go programmer. Your task is to write a Go program that fulfills the given assignment. Write the program, build it, and test it. If there are any errors, fix them and try again. When you are satisfied with the result, return the container with the completed assignment.\";\n\n            LLMCompletion completion = LLMCompletion.builder()\n                .prompt(prompt)\n                .environment(environment)\n                .inputs(Env.of(\"builder\", builder.id()))\n                .build();\n\n            LLMResult result = model.complete(completion);\n\n            return result.container(\"completed\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Services in Go\nDESCRIPTION: This Go function demonstrates how to control a service's lifecycle by explicitly starting and stopping a service. It uses a Redis service as an example, showing how to start and stop the service within the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_43\n\nLANGUAGE: go\nCODE:\n```\n```go file=../api/snippets/services/start-stop-services/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Greeter Module in Python\nDESCRIPTION: Python implementation of a greeter module that provides a function to greet a person. This code would be located in main.py.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/modules/testing/python/src/greeter/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Complex GitHub Actions Workflow with Dagger (Depot Runner)\nDESCRIPTION: This YAML snippet demonstrates a more complex GitHub Actions workflow using a Dagger Powered Depot runner. It includes steps for testing, building, and publishing a Go application with Dagger Functions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: depot-dagger-0.9\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Run Dagger pipeline\n        uses: dagger/dagger-for-github@v5\n        env:\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n        with:\n          version: \"0.9.3\"\n          cmds: |\n            project init\n            project update\n            call test --src .\n            call build --src . \\\n              --image-tag test \\\n              --push true \\\n              --docker-username $DOCKERHUB_USERNAME \\\n              --docker-password $DOCKERHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating Interdependent Services (Python)\nDESCRIPTION: This Python code shows how to create two interdependent services with custom hostnames. It defines methods to create service A and service B, which can communicate with each other using predefined hostnames.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\nclass MyModule(dagger.Module):\n    def service_a(self) -> dagger.Service:\n        return (\n            self.dag.container()\n            .from_(\"nginx:alpine\")\n            .with_new_file(\"/usr/share/nginx/html/index.html\", contents=\"Hello from Service A!\")\n            .with_exposed_port(80)\n            .as_service()\n            .with_name(\"svca\")\n        )\n\n    def service_b(self) -> dagger.Service:\n        return (\n            self.dag.container()\n            .from_(\"nginx:alpine\")\n            .with_new_file(\"/usr/share/nginx/html/index.html\", contents=\"Hello from Service B!\")\n            .with_exposed_port(80)\n            .as_service()\n            .with_name(\"svcb\")\n        )\n\n    def services(self) -> dagger.Service:\n        service_a = self.service_a()\n        service_b = self.service_b()\n        return (\n            self.dag.container()\n            .from_(\"nginx:alpine\")\n            .with_service_binding(\"svca\", service_a)\n            .with_service_binding(\"svcb\", service_b)\n            .with_new_file(\n                \"/etc/nginx/conf.d/default.conf\",\n                contents=\"\"\"\n                server {\n                    listen 80;\n                    location /a {\n                        proxy_pass http://svca;\n                    }\n                    location /b {\n                        proxy_pass http://svcb;\n                    }\n                }\n                \"\"\",\n            )\n            .with_exposed_port(80)\n            .as_service()\n        )\n```\n\n----------------------------------------\n\nTITLE: Debugging Directory Contents in TypeScript\nDESCRIPTION: Creates a debug function that receives a Directory as input and returns the same Directory for inspection in TypeScript.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@func()\ndebug(\n   @argument({ ignore: [\"*\", \"!analytics\"] }) source: Directory,\n): Directory {\n  return source\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Directory from Project in GraphQL\nDESCRIPTION: This snippet demonstrates how to remove a specific directory (node_modules) from a JavaScript project using the proposed Dagger GraphQL API. It utilizes the 'withoutDirectory' field to remove a directory from an existing directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/schema/README.md#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"Remove node_modules from a JS project\"\nquery removeNodeModules($dir: DirectoryID!) {\n  directory(id: $dir) {\n    withoutDirectory(path: \"node_modules\") {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Default Complex Type in TypeScript for Dagger Module\nDESCRIPTION: This TypeScript code shows how to create a constructor with a default complex type (Container) for a Dagger module. It defines a MyModule class with a container property and a version method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, dag } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  constructor(private container: Container = dag.container().from(\"alpine:3.14.0\")) {}\n\n  async version(): Promise<string> {\n    return this.container.withExec([\"cat\", \"/etc/os-release\"]).stdout()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Chaining in Python\nDESCRIPTION: This Python code shows how to implement function chaining in Dagger. It includes functions for setting a name and greeting, and returning a formatted message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Greeter:\n    def __init__(self, name: str, greeting: str):\n        self.name = name\n        self.greeting = greeting\n\n@dagger.function\ndef with_name(name: str) -> Greeter:\n    return Greeter(name, \"Hello\")\n\n@dagger.function\ndef with_greeting(g: Greeter, greeting: str) -> Greeter:\n    g.greeting = greeting\n    return g\n\n@dagger.function\ndef message(g: Greeter) -> str:\n    return f\"{g.greeting}, {g.name}!\"\n```\n\n----------------------------------------\n\nTITLE: Deploying GPU-enabled Dagger Runner on Local Host\nDESCRIPTION: Shell commands to deploy a GPU-enabled Dagger runner on the local host using Docker with NVIDIA GPU support. It extracts the Dagger version, removes any existing engine container, and starts a new privileged container with GPU access.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVERSION=$(dagger version | cut -d' ' -f2)\ndocker rm -f dagger-engine-${VERSION} 2>/dev/null && docker run --gpus all -d --privileged -e _EXPERIMENTAL_DAGGER_GPU_SUPPORT=true --name dagger-engine-${VERSION} registry.dagger.io/engine:${VERSION}-gpu -- --debug\n```\n\n----------------------------------------\n\nTITLE: Using Enums in TypeScript for Dagger Functions\nDESCRIPTION: This TypeScript code snippet demonstrates how to define and use an enumeration 'Severity' in a Dagger Function. It includes a 'scan' function that takes an image reference and a severity filter as arguments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/enumerations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, Enum } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  enum Severity {\n    UNKNOWN = \"UNKNOWN\",\n    LOW = \"LOW\",\n    MEDIUM = \"MEDIUM\",\n    HIGH = \"HIGH\",\n    CRITICAL = \"CRITICAL\",\n  }\n\n  class MyModule {\n    scan(ref: string, severity: Severity): string {\n      return `Scanning ${ref} with severity ${severity}`\n    }\n  }\n\n  await client.serve({\n    handler: new MyModule(),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring Python Dagger Module as a Package\nDESCRIPTION: Shows how to organize a Python Dagger module as a package with multiple files, including __init__.py and main.py setup.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# src/my_module/__init__.py\n\"\"\"My very own Dagger module\"\"\"\nfrom .main import MyModule as MyModule\n```\n\nLANGUAGE: python\nCODE:\n```\n# src/my_module/main.py\nimport dagger\n\nfrom .test import Test  # in src/my_module/test.py\nfrom .lint import Lint  # in src/my_module/lint.py\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def test(self) -> Test:\n        return Test()\n\n    @dagger.function\n    def lint(self) -> Lint:\n        return Lint()\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP File - TypeScript Implementation\nDESCRIPTION: TypeScript function utilizing Dagger's TypeScript SDK to fetch a file from an HTTP/HTTPS URL and save it within a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nasync function readFileHTTP(url: string): Promise<Container> {\n  const client = connect()\n\n  const container = client.container()\n\n  return container.withNewFile(\n    \"/file\",\n    client.http(url)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GitHub API Secret in Dagger Functions (Various Languages)\nDESCRIPTION: Examples showing how to use secrets in Dagger Functions across different programming languages. Each snippet demonstrates receiving a GitHub personal access token as a secret and using it securely without exposing it in logs or filesystem.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/security.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/secrets/go/main.go\n```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/secrets/python/main.py\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/secrets/typescript/index.ts\n```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php file=./snippets/secrets/php/src/MyModule.php\n```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java file=./snippets/secrets/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Enums in Go for Dagger Functions\nDESCRIPTION: This Go code snippet demonstrates how to define and use an enumeration type 'Severity' in a Dagger Function. It includes a 'scan' function that takes an image reference and a severity filter as arguments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/enumerations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Severity string\n\nconst (\n\tUnknown  Severity = \"UNKNOWN\"\n\tLow      Severity = \"LOW\"\n\tMedium   Severity = \"MEDIUM\"\n\tHigh     Severity = \"HIGH\"\n\tCritical Severity = \"CRITICAL\"\n)\n\ntype MyModule struct{}\n\nfunc (m *MyModule) Scan(ctx context.Context, ref string, severity Severity) (string, error) {\n\treturn fmt.Sprintf(\"Scanning %s with severity %s\", ref, severity), nil\n}\n\nfunc main() {\n\tdagger.Serve(dagger.ServeFuncOpts{Struct: &MyModule{}})\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Module Usage in Go\nDESCRIPTION: Complex example in Go that uses a module from Daggerverse to build a Go project and opens an interactive terminal in the build directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Example shows how to use the golang module to build a project\\n// and then use core Dagger API methods to interact with the result\\nfunc (m *Module) Example(\\n\\tctx context.Context,\\n\\tbuildSrc *dagger.Directory,\\n\\tbuildArgs []string,\\n) (*dagger.Terminal, error) {\\n\\t// Call the golang module\\n\\tbuildDir, err := dag.Golang().Build(ctx, buildSrc, buildArgs)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Chain a core Dagger API method\\n\\treturn buildDir.Terminal(dagger.TerminalOpts{})\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Constructor in TypeScript for Dagger Module\nDESCRIPTION: This TypeScript code shows how to create a simple constructor for a Dagger module. It defines a MyModule class with a name property and a message method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class MyModule {\n  constructor(private name: string) {}\n\n  message(): string {\n    return `Hello, ${this.name}!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Dagger Module with Sub-Classes\nDESCRIPTION: Illustrates how to structure a TypeScript Dagger module with sub-classes in separate files, imported into the main class module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nimport { func, object } from \"@dagger.io/dagger\"\n\nimport { Test } from \"./test\" // in src/test.ts\nimport { Lint } from \"./lint\" // in src/lint.ts\n\n@object()\nclass MyModule {\n  @func()\n  test(): Test {\n    return new Test()\n  }\n\n  @func()\n  lint(): Lint {\n    return new Lint()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Paths in TypeScript Dagger Functions\nDESCRIPTION: Demonstrates how to set a default path for a Directory argument in TypeScript using the @argument decorator with a defaultPath parameter. This enables automatic use of the specified path when no value is provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/default-paths.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directory, Container, object, func, dag, argument } from \"@dagger.io/dagger\"\n\n@object()\nexport class MyModule {\n  @func()\n  buildImage(\n    @argument({ defaultPath: \".\" }) source: Directory,\n  ): Container {\n    return dag.container().from(\"alpine\").withDirectory(\"/src\", source)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing State as Dagger Functions in Python\nDESCRIPTION: This Python code shows how to use the dagger.field decorator to expose an attribute as a Dagger Function. The 'greeting' attribute is exposed, while 'name' remains private.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/state.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.module\nclass MyModule:\n    greeting: str = dagger.field(default=\"Hello\")\n    name: str\n\n    def __init__(self, greeting: str = \"Hello\", name: str = \"World\"):\n        self.greeting = greeting\n        self.name = name\n\n    @dagger.function\n    def message(self) -> str:\n        return f\"{self.greeting}, {self.name}!\"\n```\n\n----------------------------------------\n\nTITLE: Complex Module Usage in TypeScript\nDESCRIPTION: Complex example in TypeScript that uses a module from Daggerverse to build a Go project and opens an interactive terminal in the build directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Example shows how to use the golang module to build a project\\n// and then use core Dagger API methods to interact with the result\\n@func()\\nasync example(\\n  buildSrc: Directory,\\n  buildArgs: Array<string>\\n): Promise<Terminal> {\\n  // Call the golang module\\n  const buildDir = await dag.golang().build(\\n    buildSrc,\\n    buildArgs\\n  )\\n\\n  // Chain a core Dagger API method\\n  return buildDir.terminal()\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transient Service for Unit Tests in TypeScript\nDESCRIPTION: This TypeScript function creates a service and binds it to an application container for unit testing. It uses Drupal as an example, creating a database service on-the-fly for running Drupal's unit tests that depend on an active database service.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=../api/snippets/services/test-against-db-service/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Chaining in TypeScript\nDESCRIPTION: This TypeScript code demonstrates function chaining in Dagger. It includes functions for setting a name and greeting, and returning a formatted message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Greeter {\n  name: string\n  greeting: string\n}\n\nexport function withName(name: string): Greeter {\n  return { name, greeting: \"Hello\" }\n}\n\nexport function withGreeting(g: Greeter, greeting: string): Greeter {\n  return { ...g, greeting }\n}\n\nexport function message(g: Greeter): string {\n  return `${g.greeting}, ${g.name}!`\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting and Copying Files to Containers in Go, Python, TypeScript\nDESCRIPTION: Snippets illustrating how to mount or copy files to containers using Dagger in Go, Python, and TypeScript. The operations demonstrate file referencing from both local and remote repositories.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/mount-file/go/main.go\n```\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/mount-file/python/main.py\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/mount-file/typescript/index.ts\n```\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/copy-file/go/main.go\n```\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/copy-file/python/main.py\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/copy-file/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Chaining in PHP\nDESCRIPTION: This PHP code shows how to implement function chaining in Dagger. It includes functions for setting a name and greeting, and returning a formatted message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass Greeter\n{\n    public function __construct(public string $name, public string $greeting)\n    {\n    }\n}\n\n#[Function]\npublic function withName(string $name): Greeter\n{\n    return new Greeter($name, \"Hello\");\n}\n\n#[Function]\npublic function withGreeting(Greeter $g, string $greeting): Greeter\n{\n    return new Greeter($g->name, $greeting);\n}\n\n#[Function]\npublic function message(Greeter $g): string\n{\n    return \"{$g->greeting}, {$g->name}!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directories and Files in GraphQL\nDESCRIPTION: This snippet demonstrates a GraphQL query that creates a directory structure and a file within that structure. It uses the 'withNewDirectory' and 'withNewFile' functions to define the paths and contents. The paths for which entries are being retrieved are 'foo' and 'foo/bar', and it fetches the contents of the newly created file 'greeting'.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/directory/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  directory {\n    withNewDirectory(path: \"foo\") {\n      withNewDirectory(path: \"foo/bar/baz\") {\n        withNewFile(path: \"foo/bar/greeting\", contents: \"hello, world!\\n\") {\n          foo: entries(path: \"foo\")\n          bar: entries(path: \"foo/bar\")\n          greeting: file(path: \"foo/bar/greeting\") {\n            contents\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Single File from Go Build in Dagger\nDESCRIPTION: This example demonstrates how to export a single compiled binary file from the build directory as './my-file' on the host using Dagger Functions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  file ./dagger |\n  export ./my-file\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  file ./dagger |\n  export ./my-file\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.1 call \\\n  build --source=https://github.com/dagger/dagger --args=./cmd/dagger \\\n  file ./dagger \\\n  export ./my-file\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Breakpoints in Java\nDESCRIPTION: Example of a Java module that demonstrates how to set explicit breakpoints in a Dagger pipeline, allowing inspection at specific points during execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/debugging-2/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Pre-call Filtering\nDESCRIPTION: A Dagger Function in Python that excludes everything in a directory except Python source code files, showing how to apply directory filters in Python SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/fs-filters/pre-call/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Arguments in Python\nDESCRIPTION: Example of implementing a Dagger Function with a default value for a string argument in Python.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/functions/arguments-default-string/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Arguments in Dagger Functions\nDESCRIPTION: Shows how to create a Dagger Function that accepts a boolean argument across different programming languages. The function returns a greeting message in uppercase if the 'shout' argument is true.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"strings\"\n)\n\ntype MyModule struct{}\n\n// +dagger:function\nfunc (m *MyModule) Hello(ctx context.Context, shout bool) string {\n\tmessage := \"Hello, World\"\n\tif shout {\n\t\tmessage = strings.ToUpper(message)\n\t}\n\treturn message\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def hello(self, shout: bool) -> str:\n        message = \"Hello, World\"\n        if shout:\n            message = message.upper()\n        return message\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, func, field } from \"@dagger.io/dagger\"\n\n@object()\nexport class MyModule {\n  @func()\n  hello(@field() shout: boolean): string {\n    let message = \"Hello, World\"\n    if (shout) {\n      message = message.toUpperCase()\n    }\n    return message\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Module;\nuse Dagger\\Function;\nuse Dagger\\Field;\n\n#[Module]\nclass MyModule\n{\n    #[Function]\n    public function hello(\n        #[Field] bool $shout\n    ): string {\n        $message = \"Hello, World\";\n        if ($shout) {\n            $message = strtoupper($message);\n        }\n        return $message;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.dagger.*;\n\n@DaggerModule\npublic class MyModule {\n\n    @DaggerFunction\n    public String hello(boolean shout) {\n        String message = \"Hello, World\";\n        if (shout) {\n            message = message.toUpperCase();\n        }\n        return message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transient Service for Unit Tests in Python\nDESCRIPTION: This Python function creates a service and binds it to an application container for unit testing. It uses Drupal as an example, creating a database service on-the-fly for running Drupal's unit tests that depend on an active database service.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n```python file=../api/snippets/services/test-against-db-service/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Functions in TypeScript\nDESCRIPTION: TypeScript implementation of an example function that demonstrates how to use the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nexport class Examples {\n  @func()\n  greeterHello(): Promise<void> {\n    return dag\n      .greeter()\n      .hello(\"World\")\n      .then((_: string) => {\n        // Do something with the greeting\n\n        return;\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dagger Interfaces in TypeScript\nDESCRIPTION: Demonstrates the usage of the implemented 'Example' class as an argument to a method expecting the 'Fooer' interface in TypeScript. This showcases Dagger's capability to work with interfaces in TypeScript.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyModule {\n  async bar(f: Fooer): Promise<string> {\n    return f.foo(\"hello\")\n  }\n\n  async test(): Promise<string> {\n    const example = new Example()\n    return this.bar(example)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dagger Function in PHP\nDESCRIPTION: This PHP code defines a Dagger Function named 'getUser' that uses a container to make an HTTP request to a random user API and return the parsed result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Client;\nuse Dagger\\Container;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    #[Function]\n    public function getUser(Client $client): string\n    {\n        return $client->container()->from('alpine:latest')\n            ->withExec(['apk', 'add', 'curl', 'jq'])\n            ->withExec([\n                'sh', '-c',\n                \"curl -s https://randomuser.me/api/ | jq -r '.results[0].name'\",\n            ])\n            ->stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation for Dagger API Client\nDESCRIPTION: This Rust implementation initializes a GraphQL client, adds HTTP Basic authentication using the Dagger session token, and queries the Dagger API to get the engine version from an Alpine container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse base64::prelude::*;\nuse gql_client::Client;\nuse std::env;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a client for the Dagger API endpoint\n    let dagger_session_port = env::var(\"DAGGER_SESSION_PORT\")?;\n    let dagger_session_token = env::var(\"DAGGER_SESSION_TOKEN\")?;\n\n    // Encode the credentials for HTTP Basic authentication\n    let credentials = BASE64_STANDARD.encode(format!(\"{}:\", dagger_session_token));\n\n    // Build the GraphQL client\n    let client = Client::new(format!(\"http://127.0.0.1:{}/query\", dagger_session_port))\n        .header(\"Authorization\", format!(\"Basic {}\", credentials));\n\n    // Define the GraphQL query to execute\n    let query = r#\"\n    query {\n      container {\n        from(address: \"alpine:latest\") {\n          exec(args: [\"cat\", \"/etc/os-release\"]) {\n            stdout\n          }\n        }\n      }\n    }\n    \"#;\n\n    // Execute the query and get the response\n    let response = client.query::<serde_json::Value>(query).await?;\n\n    // Print the response (this is the output of cat /etc/os-release)\n    println!(\"{}\", response[\"data\"][\"container\"][\"from\"][\"exec\"][\"stdout\"]);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Paths in Python Dagger Functions\nDESCRIPTION: Shows how to set a default path for a Directory argument in Python using the DefaultPath annotation. This allows the Dagger function to use the specified path automatically when the argument is not explicitly provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/default-paths.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dagger import function, object_type, DefaultPath\n\n@object_type\nclass MyModule:\n    @function\n    def build_image(self, source: Directory = DefaultPath(\".\")) -> Container:\n        return dag.container().from_(\"alpine\").with_directory(\"/src\", source)\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Dagger Function for Google Cloud Run Deployment\nDESCRIPTION: This shell command demonstrates how to call the custom 'deploy' Dagger function to deploy a Google Cloud sample application to Google Cloud Run. It specifies project details, image location, and credentials for deployment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/google-cloud-run.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger call deploy \\\n  --project-name=my-project \\\n  --service-location=us-central1 \\\n  --image-address=us-docker.pkg.dev/cloudrun/container/hello \\\n  --service-port=3000 \\\n  --credential=file://my-keyfile.json\n```\n\n----------------------------------------\n\nTITLE: Creating Transient Service for Unit Tests in Go\nDESCRIPTION: This Go function creates a service and binds it to an application container for unit testing. It uses Drupal as an example, creating a database service on-the-fly for running Drupal's unit tests that depend on an active database service.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_40\n\nLANGUAGE: go\nCODE:\n```\n```go file=../api/snippets/services/test-against-db-service/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Defining String Arguments in Dagger Functions\nDESCRIPTION: Demonstrates how to define a Dagger Function that accepts a string argument across different programming languages. The function retrieves user information based on the provided gender.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype User struct {\n\tTitle string `json:\"title\"`\n\tFirst string `json:\"first\"`\n\tLast  string `json:\"last\"`\n}\n\ntype MyModule struct{}\n\n// +dagger:function\nfunc (m *MyModule) GetUser(ctx context.Context, gender string) (*User, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"https://randomuser.me/api/?gender=%s\", gender))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar result struct {\n\t\tResults []User `json:\"results\"`\n\t}\n\n\terr = json.Unmarshal(body, &result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(result.Results) == 0 {\n\t\treturn nil, fmt.Errorf(\"no user found\")\n\t}\n\n\treturn &result.Results[0], nil\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\nimport requests\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def get_user(self, gender: str) -> dict:\n        response = requests.get(f\"https://randomuser.me/api/?gender={gender}\")\n        response.raise_for_status()\n        data = response.json()\n        if not data[\"results\"]:\n            raise ValueError(\"No user found\")\n        user = data[\"results\"][0]\n        return {\n            \"title\": user[\"name\"][\"title\"],\n            \"first\": user[\"name\"][\"first\"],\n            \"last\": user[\"name\"][\"last\"],\n        }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, func, field } from \"@dagger.io/dagger\"\nimport axios from \"axios\"\n\n@object()\nexport class MyModule {\n  @func()\n  async getUser(\n    @field() gender: string\n  ): Promise<{ title: string; first: string; last: string }> {\n    const response = await axios.get(`https://randomuser.me/api/?gender=${gender}`)\n    const user = response.data.results[0]\n    if (!user) {\n      throw new Error(\"No user found\")\n    }\n    return {\n      title: user.name.title,\n      first: user.name.first,\n      last: user.name.last,\n    }\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Module;\nuse Dagger\\Function;\nuse Dagger\\Field;\n\n#[Module]\nclass MyModule\n{\n    #[Function]\n    public function getUser(\n        #[Field] string $gender\n    ): array {\n        $response = file_get_contents(\"https://randomuser.me/api/?gender={$gender}\");\n        $data = json_decode($response, true);\n        if (empty($data['results'])) {\n            throw new \\RuntimeException('No user found');\n        }\n        $user = $data['results'][0];\n        return [\n            'title' => $user['name']['title'],\n            'first' => $user['name']['first'],\n            'last' => $user['name']['last'],\n        ];\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.dagger.*;\nimport io.dagger.dagger.kotlinx.*;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.JsonNode;\n\n@DaggerModule\npublic class MyModule {\n\n    @DaggerFunction\n    public User getUser(String gender) throws Exception {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"https://randomuser.me/api/?gender=\" + gender))\n                .build();\n\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode root = mapper.readTree(response.body());\n        JsonNode results = root.get(\"results\");\n\n        if (results.size() == 0) {\n            throw new RuntimeException(\"No user found\");\n        }\n\n        JsonNode user = results.get(0);\n        JsonNode name = user.get(\"name\");\n\n        return new User(\n            name.get(\"title\").asText(),\n            name.get(\"first\").asText(),\n            name.get(\"last\").asText()\n        );\n    }\n\n    public static class User {\n        public String title;\n        public String first;\n        public String last;\n\n        public User(String title, String first, String last) {\n            this.title = title;\n            this.first = first;\n            this.last = last;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Copied Directory in Container in TypeScript\nDESCRIPTION: This TypeScript function copies a specified directory to the /src path in a container, adds a new file to it, and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, Directory, dag } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  copyAndModifyDirectory(source: Directory): Container {\n    return dag.container().from(\"alpine\").withDirectory(\"/src\", source).withExec([\"touch\", \"/src/new-file\"])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Directory Terminal Inspection\nDESCRIPTION: A Go Dagger function that demonstrates using a terminal session to inspect a directory by mounting it in a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\terr := terminalWithDirectory(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc terminalWithDirectory(ctx context.Context) error {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\tdir := client.Host().Directory(\".\", dagger.HostDirectoryOpts{\n\t\tExclude: []string{\"node_modules\", \".git\"},\n\t})\n\n\tfmt.Println(\"Opening terminal session\")\n\tdir.Terminal()\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Terminal with Alpine Container via System Shell\nDESCRIPTION: Creates an Alpine container and opens an interactive terminal session for debugging.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'container | from alpine | terminal'\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Go Modules in dagger.json\nDESCRIPTION: JSON configuration for accessing private Go modules in a Dagger module. Requires specifying the private repository URL in the goprivate config field.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sdk\": {\n    \"source\": \"go\",\n    \"config\": {\n      \"goprivate\": \"github.com/user/repository\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Constructor in Python for Dagger Module\nDESCRIPTION: This Python code demonstrates how to create an async constructor for a Dagger module using a factory class method named 'create'. It shows how to handle asynchronous default value assignment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    name: str\n\n    @classmethod\n    async def create(cls, name: str = \"World\") -> \"MyModule\":\n        # Perform some async operation to get the default name\n        default_name = await get_default_name()\n        return cls(name=name or default_name)\n\n    def message(self) -> str:\n        return f\"Hello, {self.name}!\"\n\nasync def get_default_name() -> str:\n    # Simulating an async operation\n    return \"Default\"\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Directory Terminal Inspection\nDESCRIPTION: A Python Dagger function that demonstrates using a terminal session to inspect a directory by mounting it in a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport anyio\nimport dagger\n\n\nasync def terminal_with_directory():\n    async with dagger.Connection() as client:\n        dir = client.host().directory(\".\", exclude=[\"node_modules\", \".git\"])\n\n        print(\"Opening terminal session\")\n        dir.terminal()\n\n\nif __name__ == \"__main__\":\n    anyio.run(terminal_with_directory)\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-call Filtering in TypeScript\nDESCRIPTION: Illustrates the use of include and exclude parameters for Directory objects to apply post-call filtering in TypeScript.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// exclude all Markdown files\nconst dirOpts = { exclude: [\"*.md*\"] }\n\n// include only the build output directory\nconst dirOpts = { include: [\"build\"] }\n\n// include only ZIP files\nconst dirOpts = { include: [\"*.zip\"] }\n\n// exclude Git metadata\nconst dirOpts = { exclude: [\"*.git\"] }\n```\n\n----------------------------------------\n\nTITLE: Querying a File and Exporting Contents with GraphQL\nDESCRIPTION: This GraphQL query fetches a file using its ID, retrieves its contents, and then exports those contents to a file named \"greeting\".  The `file` field takes an `id` argument, which is a base64 encoded string representing the file's unique identifier. The `contents` field retrieves the file's content, and the `export` field writes it to a file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/file/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  file(id: \"eyJsbGIiOnsiZGVmIjpbIklqWVNOQWovLy8vLy8vLy8vLzhCRVAvLy8vLy8vLy8vL3dFcUhBb0VMMlp2YnhDa0F4b0dTR1ZzYkc4aEtQLy8vLy8vLy8vLy93RlNBRm9BIiwiQ2trS1IzTm9ZVEkxTmpwak1EQTVPV1U1TURrNFpEVmlObUkyWVdWaFpXWXpObVpsTnpsaU9UUTVOVEF4TnpoalptRmpPRGxsWVdKbE5XRmtZbUprTkdZeFptWXdNV0l3TkdWbSJdLCJtZXRhZGF0YSI6eyJzaGEyNTY6NWNjOGQ1M2VkZTRjYzUyODQ0OTIyYWFhZDlhYjIzMzc3MzY3NWMwMDJjOTM5NGZhYTk0OTg1OTZmNGFjMWRiNiI6eyJjYXBzIjp7ImNvbnN0cmFpbnRzIjp0cnVlLCJwbGF0Zm9ybSI6dHJ1ZX19LCJzaGEyNTY6YzAwOTllOTA5OGQ1YjZiNmFlYWVmMzZmZTc5Yjk0OTUwMTc4Y2ZhYzg5ZWFiZTVhZGJiZDRmMWZmMDFiMDRlZiI6eyJjYXBzIjp7ImZpbGUuYmFzZSI6dHJ1ZX19fSwiU291cmNlIjp7ImxvY2F0aW9ucyI6eyJzaGEyNTY6YzAwOTllOTA5OGQ1YjZiNmFlYWVmMzZmZTc5Yjk0OTUwMTc4Y2ZhYzg5ZWFiZTVhZGJiZDRmMWZmMDFiMDRlZiI6e319fX0sImZpbGUiOiJmb28iLCJwbGF0Zm9ybSI6eyJhcmNoaXRlY3R1cmUiOiIiLCJvcyI6IiJ9fQ==\") {\n    contents\n    export(path: \"greeting\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Wolfi Container as OCI Tarball in Dagger\nDESCRIPTION: This example demonstrates how to export a container returned by a Wolfi container builder Dagger Function as an OCI tarball named '/tmp/tarball.tar' on the host.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/dagger/dagger/modules/wolfi@v0.16.2 | container | export ./tarball.tar'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 | container | export ./tarball.tar\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call container export --path=./tarball.tar\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Pre-call Filtering\nDESCRIPTION: A Dagger Function in TypeScript that excludes everything in a directory except TypeScript source code files, demonstrating TypeScript-specific filter syntax.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/fs-filters/pre-call/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Documentation Example\nDESCRIPTION: Demonstrates documentation patterns for a TypeScript Dagger module including module, function and argument documentation using JSDoc comments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/documentation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A simple example module to say hello.\n *\n * Further documentation for the module here.\n */\n\n/**\n * A group of greeting functions.\n */\n@object()\nclass MyModule {\n  /**\n   * Return a greeting.\n   *\n   * @param greeting The greeting to display\n   * @param name Who to greet\n   */\n  @function()\n  async hello(greeting: string, name: string): Promise<string> {\n    return `${greeting} ${name}!`\n  }\n\n  /**\n   * Return a loud greeting.\n   *\n   * @param greeting The greeting to display\n   * @param name Who to greet\n   */\n  @function()\n  async loudHello(greeting: string, name: string): Promise<string> {\n    return `${greeting} ${name}!`.toUpperCase()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Google Cloud Run using Dagger CLI\nDESCRIPTION: This snippet demonstrates how to use the Dagger CLI to directly call the create-service function from the google-cloud-run module. It specifies project details, image location, and credentials for deployment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/google-cloud-run.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/vvaswani/daggerverse/google-cloud-run@v0.1.5 call create-service \\\n  --project=my-project \\\n  --location=us-central1 \\\n  --image=us-docker.pkg.dev/cloudrun/container/hello \\\n  --http-port=3000 \\\n  --credential=file://my-keyfile.json\n```\n\n----------------------------------------\n\nTITLE: Returning OS Information as String in Dagger Function\nDESCRIPTION: This function takes a container as input and returns operating system information as a string. It demonstrates how to work with containers and execute commands within them.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) OsInfo(ctx context.Context, ctr *Container) (string, error) {\n\treturn ctr.WithExec([]string{\"uname\", \"-a\"}).Stdout(ctx)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef os_info(ctr: Container) -> str:\n    return ctr.with_exec([\"uname\", \"-a\"]).stdout()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function osInfo(ctr: Container): Promise<string> {\n  return ctr.withExec([\"uname\", \"-a\"]).stdout()\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function osInfo(Container $ctr): string\n{\n    return $ctr->withExec([\"uname\", \"-a\"])->stdout();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic String osInfo(Container ctr) {\n    return ctr.withExec(Arrays.asList(\"uname\", \"-a\")).stdout();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Constructor in PHP for Dagger Module\nDESCRIPTION: This PHP code demonstrates how to create a simple constructor for a Dagger module. It defines a MyModule class with a name property and a message method, using the #[DaggerFunction] attribute.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Dagger\\Function\\DaggerFunction;\n\nclass MyModule\n{\n    public function __construct(\n        #[DaggerFunction]\n        private string $name\n    ) {}\n\n    #[DaggerFunction]\n    public function message(): string\n    {\n        return \"Hello, {$this->name}!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Entry Metadata in Dagger Engine\nDESCRIPTION: This snippet shows how to retrieve metadata for all cache entries in the Dagger Engine. It displays the description and disk space used for each entry.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/engine.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger query <<EOF\n{\n  engine {\n    localCache {\n      entrySet {\n        entries {\n          description\n          diskSpaceBytes\n        }\n      }\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Image to Private Registry in TypeScript\nDESCRIPTION: This TypeScript function publishes a just-in-time container image to a private registry. It demonstrates how to create and publish a container image using Dagger, with options for specifying the registry, username, and password.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/publish-image/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Breakpoints in Go\nDESCRIPTION: Example of a Go module that demonstrates how to set explicit breakpoints in a Dagger pipeline, allowing inspection at specific points during execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/debugging-2/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Using Terminal with Alpine Container via Dagger Shell\nDESCRIPTION: Uses Dagger's interactive shell to create an Alpine container and open a terminal session.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | terminal\n```\n\n----------------------------------------\n\nTITLE: Implementing Division with Error Handling in TypeScript\nDESCRIPTION: This TypeScript function performs division and throws an Error if the denominator is zero. It demonstrates TypeScript's error handling using the throw statement.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndivide(a: number, b: number): number {\n    if (b === 0) {\n        throw new Error(\"cannot divide by zero\");\n    }\n    return Math.floor(a / b);\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Container Terminal Debugging\nDESCRIPTION: A Go Dagger function that demonstrates using terminal sessions at different points in a container pipeline to aid debugging.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\terr := terminalWithContainer(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc terminalWithContainer(ctx context.Context) error {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\tcontainer := client.Container().From(\"alpine\")\n\n\tfmt.Println(\"Opening first terminal session\")\n\tcontainer = container.Terminal()\n\n\tcontainer = container.WithExec([]string{\"apk\", \"add\", \"curl\"})\n\n\tfmt.Println(\"Opening second terminal session\")\n\tcontainer = container.Terminal()\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Checking with Dagger Modules in PHP\nDESCRIPTION: Defines a check method for Dagger in PHP, utilizing the Trivy module to scan a specified container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\npublic function check(): string\n{\n  $ctr = dag()\n      ->wolfi()\n      ->container();\n  return dag()\n      ->trivy()\n      ->scanContainer($ctr);\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Garbage Collector Parameters in Dagger Engine\nDESCRIPTION: This snippet demonstrates how to adjust the default parameters for the garbage collector in the Dagger Engine, including maxUsedSpace, reservedSpace, and minFreeSpace.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gc\": {\n    \"maxUsedSpace\": \"200GB\",\n    \"reservedSpace\": \"10GB\",\n    \"minFreeSpace\": \"20%\"\n  },\n}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[worker.oci]\nmaxUsedSpace = \"200GB\"\nreservedSpace = \"10GB\"\nminFreeSpace = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Greeter Module in TypeScript\nDESCRIPTION: TypeScript implementation of a greeter module that provides a function to greet a person. This code would be located in index.ts.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/modules/testing/typescript/src/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Coding Agent in Java\nDESCRIPTION: Java implementation of a Dagger Function that creates a coding agent by integrating an LLM with a Dagger Container environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/llm.mdx#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Container Terminal Debugging\nDESCRIPTION: A Python Dagger function that demonstrates using terminal sessions at different points in a container pipeline to aid debugging.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport anyio\nimport dagger\n\n\nasync def terminal_with_container():\n    async with dagger.Connection() as client:\n        container = client.container().from_(\"alpine\")\n\n        print(\"Opening first terminal session\")\n        container = container.terminal()\n\n        container = container.with_exec([\"apk\", \"add\", \"curl\"])\n\n        print(\"Opening second terminal session\")\n        container = container.terminal()\n\n\nif __name__ == \"__main__\":\n    anyio.run(terminal_with_container)\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-call Filtering in Go\nDESCRIPTION: Demonstrates how to use DirectoryWithDirectoryOpts or ContainerWithDirectoryOpts structs to apply include and exclude patterns for Directory objects in Go.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// exclude all Markdown files\ndirOpts := dagger.ContainerWithDirectoryOpts{\n  Exclude: \"*.md*\",\n}\n\n// include only the build output directory\ndirOpts := dagger.ContainerWithDirectoryOpts{\n  Include: \"build\",\n}\n\n// include only ZIP files\ndirOpts := dagger.DirectoryWithDirectoryOpts{\n  Include: \"*.zip\",\n}\n\n// exclude Git metadata\ndirOpts := dagger.DirectoryWithDirectoryOpts{\n  Exclude: \"*.git\",\n}\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature Template in TypeScript\nDESCRIPTION: TypeScript implementation of a standardized test function signature that returns a Promise that either resolves or rejects.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nexport class Tests {\n  @func()\n  hello(): Promise<void> {\n    return dag\n      .yourModule()\n      .yourFunction()\n      .then(() => {\n        if (false) { // Your error condition here\n          throw new Error(\"test failed\");\n        }\n\n        return;\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Breakpoints in Python\nDESCRIPTION: Example of a Python module that demonstrates how to set explicit breakpoints in a Dagger pipeline, allowing inspection at specific points during execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/debugging-2/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Customized Directory Terminal Inspection\nDESCRIPTION: A Python Dagger function that demonstrates using a customized Ubuntu container with bash shell for inspecting a directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport anyio\nimport dagger\n\n\nasync def terminal_with_customized_directory():\n    async with dagger.Connection() as client:\n        dir = client.host().directory(\".\", exclude=[\"node_modules\", \".git\"])\n\n        print(\"Opening terminal session with Ubuntu\")\n        dir.terminal(\n            container_image=\"ubuntu\",\n            shell=[\"bash\"]\n        )\n\n\nif __name__ == \"__main__\":\n    anyio.run(terminal_with_customized_directory)\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-call Filtering in Python\nDESCRIPTION: Shows how to use include and exclude parameters when working with Directory objects to apply post-call filtering in Python.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# exclude all Markdown files\ndir_opts = {\"exclude\": [\"*.md*\"]}\n\n# include only the build output directory\ndir_opts = {\"include\": [\"build\"]}\n\n# include only ZIP files\ndir_opts = {\"include\": [\"*.zip\"]}\n\n# exclude Git metadata\ndir_opts = {\"exclude\": [\"*.git\"]}\n```\n\n----------------------------------------\n\nTITLE: Returning Container with Installed Packages in Go\nDESCRIPTION: This Go function returns an Alpine container with specified packages installed. It demonstrates how to work with containers in Dagger Functions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) AlpineBuilder(ctx context.Context, packages []string) (*Container, error) {\n\treturn dag.Container().From(\"alpine:latest\").WithExec(append([]string{\"apk\", \"add\"}, packages...)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP File - Go Implementation\nDESCRIPTION: Function to download a file from an HTTP/HTTPS URL and save it to a container. Uses Dagger's Go SDK to create a container and write the downloaded file to a specified path.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadFileHTTP(ctx context.Context, url string) (*Container, error) {\n    client := dagger.Connect(ctx)\n    defer client.Close()\n\n    container := client.Container()\n\n    return container.WithNewFile(\"/file\", dagger.ContainerWithNewFileOpts{\n        Contents: dagger.Client{}.HTTP(url),\n    }), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger CLI Container Argument Usage\nDESCRIPTION: Examples of passing container image references to Dagger Functions using different CLI methods.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'os-info ubuntu:latest'\ndagger call os-info --ctr=ubuntu:latest\ndagger -c 'github.com/jpadams/daggerverse/trivy@v0.3.0 | scan-container index.docker.io/alpine:latest'\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of Customized Directory Terminal Inspection\nDESCRIPTION: A Go Dagger function that demonstrates using a customized Ubuntu container with bash shell for inspecting a directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\terr := terminalWithCustomizedDirectory(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc terminalWithCustomizedDirectory(ctx context.Context) error {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\tdir := client.Host().Directory(\".\", dagger.HostDirectoryOpts{\n\t\tExclude: []string{\"node_modules\", \".git\"},\n\t})\n\n\tfmt.Println(\"Opening terminal session with Ubuntu\")\n\tdir.Terminal(dagger.DirectoryTerminalOpts{\n\t\tContainerImage: \"ubuntu\",\n\t\tShell:          []string{\"bash\"},\n\t})\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Default Complex Type in Go for Dagger Module\nDESCRIPTION: This Go code demonstrates how to create a constructor with a default complex type (Container) for a Dagger module. It defines a MyModule struct with a Container field and implements a version function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype MyModule struct {\n\tContainer *dagger.Container\n}\n\nfunc New(container *dagger.Container) *MyModule {\n\tif container == nil {\n\t\tcontainer = dag.Container().From(\"alpine:3.14.0\")\n\t}\n\treturn &MyModule{Container: container}\n}\n\nfunc (m *MyModule) Version(ctx context.Context) (string, error) {\n\treturn m.Container.WithExec([]string{\"cat\", \"/etc/os-release\"}).Stdout(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Base Container in Java\nDESCRIPTION: Defines a method for obtaining a base container using the Dagger API in Java.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n@Object\npublic class Basics {\n  /**\n   * Returns a base container\n   */\n  @Function\n  public Container base() {\n    return dag().container().from(\"cgr.dev/chainguard/wolfi-base\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Go Filter Pattern Examples\nDESCRIPTION: Useful pattern examples for filtering in Go including how to exclude tests, binaries, dependencies, and Git metadata.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// exclude Go tests and test data\n+ignore=[\"**_test.go\", \"**/testdata/**\"]\n\n// exclude binaries\n+ignore=[\"bin\"]\n\n// exclude Python dependencies\n+ignore=[\"**/.venv\", \"**/__pycache__\"]\n\n// exclude Node.js dependencies\n+ignore=[\"**/node_modules\"]\n\n// exclude Git metadata\n+ignore=[\".git\", \"**/.gitignore\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-call Filtering in PHP\nDESCRIPTION: Demonstrates the use of include and exclude parameters for Directory objects to apply post-call filtering in PHP.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// exclude all Markdown files\n$dirOpts = ['exclude' => ['*.md*']];\n\n// include only the build output directory\n$dirOpts = ['include' => ['build']];\n\n// include only ZIP files\n$dirOpts = ['include' => ['*.zip']];\n\n// exclude Git metadata\n$dirOpts = ['exclude' => ['*.git']];\n```\n\n----------------------------------------\n\nTITLE: Debugging Directory Contents in PHP\nDESCRIPTION: Creates a debug function that receives a Directory as input and returns the same Directory for inspection in PHP.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n    #[DaggerFunction]\n    public function debug(\n        #[Ignore('*'/, '!analytics')]\n        Directory $source,\n    ): Directory {\n        return $source;\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Saved Container State in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use a previously saved container state ID to continue operations. It lists the contents of the /tmp directory in the container created by a previous query.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  container(id: \"YOUR-ID-HERE\") {\n    withExec(args: [\"ls\", \"/tmp\"]) {\n      stdout\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in TypeScript\nDESCRIPTION: Demonstrates function chaining using the TypeScript SDK for Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  const url = await client.container().from(\"alpine:latest\")\n    .withEntrypoint([\"cat\", \"/etc/os-release\"])\n    .publish(\"ttl.sh/my-alpine\")\n\n  console.log(`Published at: ${url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing a Dagger Module Dependency\nDESCRIPTION: Demonstrates how to install a Dagger module as a dependency using the dagger install command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger install github.com/shykes/daggerverse/hello@v0.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Dagger Functions with Python\nDESCRIPTION: Example of implementing a Dagger Function with an optional argument in Python that defaults to 'world' when no name is provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/functions/arguments-optional/python/main.py\n```\n\n----------------------------------------\n\nTITLE: Debugging Pipeline Failures in TypeScript\nDESCRIPTION: Example of a TypeScript module that demonstrates Dagger's automatic debugging when a pipeline fails. The execution will open an interactive terminal at the point of failure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/debugging-1/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Copying Directory to Container in PHP\nDESCRIPTION: This PHP function copies a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Directory;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    public function copyDirectory(Directory $source): Container\n    {\n        return dag()->container()->from('alpine')->withDirectory('/src', $source);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Breakpoints in TypeScript\nDESCRIPTION: Example of a TypeScript module that demonstrates how to set explicit breakpoints in a Dagger pipeline, allowing inspection at specific points during execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/debugging-2/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions in TypeScript\nDESCRIPTION: This TypeScript function accepts a Service running on the host, binds it using an alias, and creates a client to access it via the service binding. It uses a MariaDB database service running on host port 3306, aliased as 'db' in the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=../api/snippets/services/expose-host-services-to-dagger/typescript/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Complex Module Usage in Java\nDESCRIPTION: Complex example in Java that uses a module from Daggerverse to build a Go project and opens an interactive terminal in the build directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Example shows how to use the golang module to build a project\\n// and then use core Dagger API methods to interact with the result\\n@Function\\npublic Terminal example(\\n        Directory buildSrc,\\n        List<String> buildArgs\\n) throws ExecutionException, DaggerQueryException, InterruptedException {\\n    // Call the golang module\\n    Directory buildDir = dag().golang().build(\\n            buildSrc,\\n            buildArgs\\n    );\\n\\n    // Chain a core Dagger API method\\n    return buildDir.terminal();\\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Directories with Filters in Dagger\nDESCRIPTION: Examples of copying directories with exclusion filters using different Dagger interfaces, demonstrating both local and remote repository operations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-directory-with-exclusions ../docs'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-directory-with-exclusions ../docs\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call copy-directory-with-exclusions --source=../docs\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-directory-with-exclusions https://github.com/dagger/dagger#main | directory /src | entries'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-directory-with-exclusions https://github.com/dagger/dagger#main | directory /src | entries\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call \\\n  copy-directory-with-exclusions --source=https://github.com/dagger/dagger#main \\\n  directory --path=/src \\\n  entries\n```\n\n----------------------------------------\n\nTITLE: External Secret Provider Configuration\nDESCRIPTION: Configuration examples for external secret providers like 1Password and Vault, showing environment setup and usage.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport OP_SERVICE_ACCOUNT_TOKEN=\"mytoken\"\ndagger -c 'github-api op://infra/github/credential'\n\nexport VAULT_ADDR='https://example.com:8200'\nexport VAULT_TOKEN=abcd_1234\ndagger -c 'github-api vault://infra/github.credential'\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions (PHP)\nDESCRIPTION: This PHP code shows how to access a MariaDB service running on the host from a Dagger Function. It defines a 'userList' method that takes a Service argument and queries the database.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Module;\nuse Dagger\\Service;\n\nclass MyModule extends Module\n{\n    public function userList(Service $svc): string\n    {\n        return $this->dag->container()\n            ->from('mariadb:10.11.2')\n            ->withServiceBinding('db', $svc)\n            ->withEnvVariable('MYSQL_PWD', 'secret')\n            ->withExec([\n                'mysql',\n                '-h', 'db',\n                '-u', 'root',\n                '-e', 'SELECT Host, User FROM mysql.user;',\n                '-t',\n            ])\n            ->stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Interfaces in TypeScript for Dagger SDK\nDESCRIPTION: Shows the declaration of an interface 'Fooer' with an async function 'foo' in TypeScript for the Dagger SDK. The interface uses TypeScript's async function syntax and Promise return type.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Fooer {\n  foo(arg: string): Promise<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Secret in Shell\nDESCRIPTION: Sets an API token as an environment variable to be used as a secret in Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/secrets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport API_TOKEN=\"guessme\"\n```\n\n----------------------------------------\n\nTITLE: Open Interactive Terminal with Custom Shell in Container using Dagger\nDESCRIPTION: This snippet demonstrates starting an interactive terminal session with a custom shell (zsh) in a Wolfi container with cowsay and zsh packages installed. It shows how to override the default shell using the --cmd argument in Dagger's terminal command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/dagger/dagger/modules/wolfi@v0.16.2 | container --packages=cowsay,zsh | terminal --cmd=zsh'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 | container --packages=cowsay,zsh | terminal --cmd=zsh\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call \\\n  container --packages=\"cowsay,zsh\" \\\n  terminal --cmd=zsh\n```\n\n----------------------------------------\n\nTITLE: Complex Module Usage in Python\nDESCRIPTION: Complex example in Python that uses a module from Daggerverse to build a Go project and opens an interactive terminal in the build directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Example shows how to use the golang module to build a project\\n# and then use core Dagger API methods to interact with the result\\n@function\\nasync def example(\\n    self,\\n    build_src: Directory,\\n    build_args: list[str],\\n) -> Terminal:\\n    # Call the golang module\\n    build_dir = await dag.golang().build(\\n        build_src, build_args\\n    )\\n\\n    # Chain a core Dagger API method\\n    return build_dir.terminal()\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in Go\nDESCRIPTION: Demonstrates how to chain Dagger functions programmatically using the Go SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\turl, err := client.Container().From(\"alpine:latest\").\n\t\tWithEntrypoint([]string{\"cat\", \"/etc/os-release\"}).\n\t\tPublish(ctx, \"ttl.sh/my-alpine\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(\"Published at:\", url)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Dagger Pipeline with Dagger CLI\nDESCRIPTION: Demonstrates the same pipeline using Dagger's command-line interface with explicit function calls.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container \\\n  from --address=alpine \\\n  file --path=/etc/os-release \\\n  contents\n```\n\n----------------------------------------\n\nTITLE: Running a Dagger GraphQL Query to Verify Setup\nDESCRIPTION: Executes a GraphQL query using Dagger CLI to verify the connection to the Dagger Engine in Kubernetes by running a simple container operation that displays kernel info.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger query <<EOF\n{\n    container {\n        from(address:\"alpine\") {\n            withExec(args: [\"uname\", \"-a\"]) { stdout }\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Invoking Dagger Functions with Optional Arguments\nDESCRIPTION: Examples of how to call a Dagger Function with and without its optional argument using different shell interfaces.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'hello --name=John'\n```\n\nLANGUAGE: shell\nCODE:\n```\nhello --name=John\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call hello --name=John\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c hello\n```\n\nLANGUAGE: shell\nCODE:\n```\nhello\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call hello\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Go Modules via go get\nDESCRIPTION: Command to add a Go module (Cobra) to a Dagger module using go get.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/spf13/cobra\n```\n\n----------------------------------------\n\nTITLE: Getting File Size of Archived Directory in Dagger\nDESCRIPTION: This snippet demonstrates how to obtain the size of a ZIP file returned by a file archiving Dagger Function using the File.size() method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/sagikazarmark/daggerverse/arc@40057665476af62e617cc8def9ef5a87735264a9 |\n  archive-directory dagger-cli https://github.com/dagger/dagger#main:cmd/dagger |\n  create zip |\n  size\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/sagikazarmark/daggerverse/arc@40057665476af62e617cc8def9ef5a87735264a9 |\n  archive-directory dagger-cli https://github.com/dagger/dagger#main:cmd/dagger |\n  create zip |\n  size\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/sagikazarmark/daggerverse/arc@40057665476af62e617cc8def9ef5a87735264a9 call \\\n  archive-directory --name=dagger-cli '--directory=https://github.com/dagger/dagger#main:cmd/dagger' \\\n  create --format=zip \\\n  size\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory or File to Host in Go\nDESCRIPTION: This Go function demonstrates how to return a just-in-time directory and file, which can be exported to the host using 'dagger call ... export ...'. It shows how to create and manipulate directories and files within a Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_55\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/export-file-dir/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Default Paths in PHP Dagger Functions\nDESCRIPTION: Shows how to set a default path for a Directory argument in PHP using the #[DefaultPath] Attribute. This allows the Dagger function to automatically use the specified path when no value is explicitly provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/default-paths.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Client\\DefaultPath;\nuse Dagger\\Client\\Function_;\nuse Dagger\\Container;\nuse Dagger\\Directory;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    #[Function_]\n    public function buildImage(\n        #[DefaultPath(\".\")] Directory $source,\n    ): Container {\n        return dag()->container()->from(\"alpine\")->withDirectory(\"/src\", $source);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Arguments in TypeScript\nDESCRIPTION: Example of implementing a Dagger Function with a default value for a string argument in TypeScript.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/functions/arguments-default-string/typescript/index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Chaining in Java\nDESCRIPTION: This Java code demonstrates how to implement function chaining in Dagger. It includes functions for setting a name and greeting, and returning a formatted message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic record Greeter(String name, String greeting) {}\n\n@Function\npublic Greeter withName(String name) {\n    return new Greeter(name, \"Hello\");\n}\n\n@Function\npublic Greeter withGreeting(Greeter g, String greeting) {\n    return new Greeter(g.name(), greeting);\n}\n\n@Function\npublic String message(Greeter g) {\n    return String.format(\"%s, %s!\", g.greeting(), g.name());\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function with GitHub PR URL\nDESCRIPTION: Example of using a GitHub pull request URL as a directory argument when calling a Dagger Function. This allows testing code from specific pull requests without knowing details about the fork or branch.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger call foo --directory=https://github.com/ORGANIZATION/REPOSITORY#pull/NUMBER/merge\n```\n\n----------------------------------------\n\nTITLE: TypeScript Filter Pattern Examples\nDESCRIPTION: Useful pattern examples for filtering in TypeScript including how to exclude tests, binaries, dependencies, and Git metadata.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// exclude Mocha tests\n@argument({ ignore: [\"**.spec.ts\"] })\n\n// exclude binaries\n@argument({ ignore: [\"bin\"] })\n\n// exclude Python dependencies\n@argument({ ignore: [\"**/.venv\", \"**/__pycache__\"] })\n\n// exclude Node.js dependencies\n@argument({ ignore: [\"**/node_modules\"] })\n\n// exclude Git metadata\n@argument({ ignore: [\".git\", \"**/.gitignore\"] })\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Constructor in Go for Dagger Module\nDESCRIPTION: This Go code demonstrates how to create a simple constructor for a Dagger module. It defines a MyModule struct with a Name field and implements a message function that uses the Name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n)\n\ntype MyModule struct {\n\tName string\n}\n\nfunc (m *MyModule) Message(ctx context.Context) string {\n\treturn fmt.Sprintf(\"Hello, %s!\", m.Name)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Interfaces in Go for Dagger SDK\nDESCRIPTION: Demonstrates how to declare an interface 'Fooer' with a single function 'foo' in Go for use with the Dagger SDK. The interface embeds DaggerObject and follows specific signature requirements for Dagger compatibility.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Fooer interface {\n\tDaggerObject\n\tfoo(ctx context.Context, arg string) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Functions in TypeScript\nDESCRIPTION: TypeScript implementation of a test function that verifies the greeter module's hello function works correctly.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nexport class Tests {\n  @func()\n  hello(): Promise<void> {\n    return dag\n      .greeter()\n      .hello(\"World\")\n      .then((value: string) => {\n        if (value != \"Hello, World!\") {\n          throw new Error(\"unexpected greeting\");\n        }\n\n        return;\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enums in Java for Dagger Functions\nDESCRIPTION: These Java code snippets show how to define an enumeration 'Severity' and use it in a Dagger Function. The '@Enum' annotation is used to mark the enum for Dagger recognition.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/enumerations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.dagger.annotation.Enum;\n\n@Enum\npublic enum Severity {\n    UNKNOWN,\n    LOW,\n    MEDIUM,\n    HIGH,\n    CRITICAL\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nimport io.dagger.annotation.Module;\n\n@Module\npublic class MyModule {\n    public String scan(String ref, Severity severity) {\n        return String.format(\"Scanning %s with severity %s\", ref, severity);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger Call Command Syntax\nDESCRIPTION: Command for calling one or more functions interconnected into a pipeline with specific options for module and output handling\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndagger call [options]\n```\n\n----------------------------------------\n\nTITLE: Query Execution with Curl in a Dagger Run\nDESCRIPTION: This example shell command uses `jq` for JSON generation and `curl` for API interaction within a Dagger session. It demonstrates how session environment variables, like DAGGER_SESSION_PORT and DAGGER_SESSION_TOKEN, facilitate API requests.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"jq -n '{query:\\\"{container{id}}\\\"}' | \\\\\\n  dagger run sh -c 'curl -s \\\\\\n    -u $DAGGER_SESSION_TOKEN: \\\\\\n    -H \\\"content-type:application/json\\\" \\\\\\n    -d @- \\\\\\n    http://127.0.0.1:$DAGGER_SESSION_PORT/query'\"\n```\n\n----------------------------------------\n\nTITLE: Parallel All Function in Go\nDESCRIPTION: Go implementation of an \"all\" function that runs all test functions in parallel using a concurrency library.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/sourcegraph/conc/pool\"\n\ntype Tests struct{}\n\nfunc (m *Tests) All(ctx context.Context) error {\n\tp := pool.New().WithErrors().WithContext(ctx)\n\n\tp.Go(m.Hello)\n\tp.Go(m.CustomGreeting)\n\n\treturn p.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Terminal with Alpine Container via Dagger CLI\nDESCRIPTION: Uses Dagger CLI commands to create an Alpine container and open a terminal session.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container from --address=alpine terminal\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Customized Directory Terminal Inspection\nDESCRIPTION: A TypeScript Dagger function that demonstrates using a customized Ubuntu container with bash shell for inspecting a directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/terminal.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n\nconnect(async (client) => {\n  const dir = client.host().directory(\".\", {\n    exclude: [\"node_modules\", \".git\"],\n  })\n\n  console.log(\"Opening terminal session with Ubuntu\")\n  dir.terminal({\n    containerImage: \"ubuntu\",\n    shell: [\"bash\"],\n  })\n}, { LogOutput: process.stdout })\n```\n\n----------------------------------------\n\nTITLE: Importing Dagger SDK in TypeScript\nDESCRIPTION: Example of importing the Dagger SDK in a TypeScript file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from \"@dagger.io/dagger\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Constructor in Python for Dagger Module\nDESCRIPTION: This Python code shows how to create a simple constructor for a Dagger module using the @dagger.object_type decorator. It defines a MyModule class with a name attribute and a message method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    name: str\n\n    def message(self) -> str:\n        return f\"Hello, {self.name}!\"\n```\n\n----------------------------------------\n\nTITLE: Sequential All Function in TypeScript\nDESCRIPTION: TypeScript implementation of an \"all\" function that runs all test functions sequentially.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nexport class Tests {\n  @func()\n  async all(): Promise<void> {\n    await this.hello();\n    await this.customGreeting();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Container in PHP\nDESCRIPTION: Encapsulates the build and publishing logic in a method that returns the image ID after publishing.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n    #[DaggerFunction]\n    #[Doc('Builds and publishes a container')]\n    public function buildAndPublish(): string\n    {\n        return $this\n            ->build()\n            ->publish('ttl.sh/bar');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in Python\nDESCRIPTION: Shows how to chain Dagger functions using the Python SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport anyio\nimport dagger\n\nasync def main():\n    async with dagger.Connection() as client:\n        url = await client.container().from_(\"alpine:latest\").\\\n            with_entrypoint([\"cat\", \"/etc/os-release\"]).\\\n            publish(\"ttl.sh/my-alpine\")\n\n        print(f\"Published at: {url}\")\n\nif __name__ == \"__main__\":\n    anyio.run(main)\n```\n\n----------------------------------------\n\nTITLE: Executing Dagger Function in GitLab CI with Docker Executor\nDESCRIPTION: This YAML configuration demonstrates how to call a Dagger Function in a GitLab CI/CD pipeline using the Docker Machine executor or Docker executor. It sets up a Docker-in-Docker service to provision the Dagger Engine.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nservices:\n  - docker:dind\n\nvariables:\n  DOCKER_HOST: tcp://docker:2376\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nbefore_script:\n  - apk add --no-cache curl\n  - curl -L https://dl.dagger.io/dagger/install.sh | sh\n  - mv bin/dagger /usr/local/bin\n  - dagger version\n\nstages:\n  - build\n\nhello:\n  stage: build\n  script:\n    - dagger call hello-world --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Repository to Container with Dagger Shell\nDESCRIPTION: Shows how to add Dagger's GitHub repository to a container using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-directory /src https://github.com/dagger/dagger\n```\n\n----------------------------------------\n\nTITLE: Returning Container with Installed Packages in TypeScript\nDESCRIPTION: This TypeScript function returns an Alpine container with specified packages installed. It demonstrates container manipulation in Dagger Functions using TypeScript.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function alpineBuilder(packages: string[]): Container {\n  return dag\n    .container()\n    .from(\"alpine:latest\")\n    .withExec([\"apk\", \"add\", ...packages])\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing State as Dagger Functions in Go\nDESCRIPTION: This Go code demonstrates how to expose a struct field as a Dagger Function. The 'greeting' field is public and thus exposed, while the 'name' field remains private.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/state.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n)\n\ntype MyModule struct {\n\tGreeting string\n\tname     string\n}\n\nfunc New(greeting, name string) *MyModule {\n\treturn &MyModule{greeting, name}\n}\n\nfunc (m *MyModule) Message(ctx context.Context) string {\n\treturn fmt.Sprintf(\"%s, %s!\", m.Greeting, m.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger PHP List Return Types\nDESCRIPTION: This PHP code snippet demonstrates how to use lists as return values in Dagger Functions.  It highlights the importance of specifying the subtype of the array using the `ReturnsListOfType` attribute. Annotations are not supported for specifying subtypes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\DaggerFunction;\nuse Dagger\\Attribute\\DaggerObject;\nuse Dagger\\Attribute\\Doc;\nuse Dagger\\Attribute\\ReturnsListOfType;\n\n#[DaggerObject]\nclass Example\n{\n     #[DaggerFunction]\n     #[Doc('The subtype of an array MUST be specified')]\n     public function myInvalidList(): array\n     {\n         // do something...\n     }\n\n     /**\n     * @return int[]\n     */\n     #[DaggerFunction]\n     #[Doc('Annotations are not supported')]\n     public function myStillInvalidList(): array\n     {\n         // do something...\n     }\n\n     #[DaggerFunction]\n     #[Doc(('ReturnsListOfType attribute is supported'))]\n     #[ReturnsListOfType('int')]\n     public function myValidList(): array\n     {\n         // do something...\n     }\n\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Docker Model Runner\nDESCRIPTION: This snippet provides steps to configure the Docker Model Runner, including the command to set environment variables for the model you intend to use with Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/llm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_BASE_URL=http://model-runner.docker.internal/engines/v1/\nOPENAI_MODEL=index.docker.io/ai/qwen2.5:7B-F16\nOPENAI_DISABLE_STREAMING=true\n```\n\n----------------------------------------\n\nTITLE: Basic AWS CodeBuild Configuration for Dagger Integration (YAML)\nDESCRIPTION: A simple buildspec.yml configuration that demonstrates how to call a Dagger Function in an AWS CodeBuild project. It installs the Dagger CLI and executes a basic Dagger command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/aws-codebuild.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: 18\n  pre_build:\n    commands:\n      - cd /usr/local/bin\n      - curl -L https://dl.dagger.io/dagger/install.sh | sh\n      - cd $CODEBUILD_SRC_DIR\n  build:\n    commands:\n      - dagger call hello --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Sandboxing Dagger Functions\nDESCRIPTION: Emphasizes that Dagger Functions operate in a sandboxed environment, ensuring security and reproducibility by requiring explicit passing of external resources.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n# all equivalent\ndagger -c 'base | with-exec apk add bash git | publish ttl.sh/bar'\ndagger -c 'build | publish ttl.sh/bar'\ndagger -c build-and-publish\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Test Module in TypeScript\nDESCRIPTION: Terminal commands to create a TypeScript test module and install dependencies for testing a Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tests\ncd tests\ndagger init --name=tests --sdk=typescript --source=.\ndagger install ..\n```\n\n----------------------------------------\n\nTITLE: Running Custom Dagger Engine with engine.toml\nDESCRIPTION: Docker command to run a custom Dagger Engine with a mounted engine.toml configuration file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm \\\n    -v /var/lib/dagger \\\n    -v $PWD/engine.toml:/etc/dagger/engine.toml \\\n    --name dagger-engine-custom \\\n    --privileged \\\n    registry.dagger.io/engine:${daggerVersion}\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Root Capabilities in engine.toml\nDESCRIPTION: TOML configuration to explicitly enable insecure root capabilities in engine.toml.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\ninsecure-entitlements = [\"security.insecure\"]\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in PHP\nDESCRIPTION: Illustrates how to chain Dagger functions using the PHP SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyNamespace;\n\nuse Dagger\\Client;\nuse Dagger\\Connection;\n\nclass MyModule\n{\n    public function run(): void\n    {\n        $client = connect(function (Client $client) {\n            $url = $client->container()->from('alpine:latest')\n                ->withEntrypoint(['cat', '/etc/os-release'])\n                ->publish('ttl.sh/my-alpine');\n\n            echo \"Published at: $url\\n\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing State as Dagger Functions in Java\nDESCRIPTION: This Java code shows how public fields are automatically exposed as Dagger Functions, and how the @Function annotation can be used to expose private fields. The 'greeting' field is exposed, while 'name' remains private.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/state.mdx#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.annotations.Function;\n\npublic class MyModule {\n    public String greeting;\n    private String name;\n\n    public MyModule(String greeting, String name) {\n        this.greeting = greeting;\n        this.name = name;\n    }\n\n    @Function\n    public String message() {\n        return String.format(\"%s, %s!\", greeting, name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger PHP List Arguments\nDESCRIPTION: This PHP code snippet demonstrates how to use lists as arguments in Dagger Functions.  It highlights the importance of specifying the subtype of the array using the `ListOfType` attribute. Annotations are not supported for specifying subtypes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\DaggerFunction;\nuse Dagger\\Attribute\\DaggerObject;\nuse Dagger\\Attribute\\Doc;\nuse Dagger\\Attribute\\ListOfType;\n\n#[DaggerObject]\nclass Example\n{\n     #[DaggerFunction('The subtype of an array MUST be specified')]\n     public function myInvalidList(\n         array $value,\n     ): string {\n         // do something...\n     }\n\n     /**\n     * @param int[] $value\n     */\n     #[DaggerFunction]\n     #[Doc('Annotations are not supported')]\n     public function myStillInvalidList(\n         array $value,\n     ): string {\n         // do something...\n     }\n\n     #[DaggerFunction]\n     #[Doc('ListOfType attribute is supported')]\n     public function myValidList(\n         #[ListOfType('int')]\n         array $value,\n     ): string {\n         // do something...\n     }\n\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Factory Function in Python for Dagger Module\nDESCRIPTION: This Python code demonstrates how to use a factory function for default values in a Dagger module constructor. It defines a MyModule class with a container attribute using a factory function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\ndef default_container() -> dagger.Container:\n    return dagger.container().from_(\"alpine:3.14.0\")\n\n@dagger.object_type\nclass MyModule:\n    container: dagger.Container = dagger.field(default_factory=default_container)\n\n    async def version(self) -> str:\n        return await self.container.with_exec([\"cat\", \"/etc/os-release\"]).stdout()\n```\n\n----------------------------------------\n\nTITLE: Cloning Repositories in Go with SSH\nDESCRIPTION: Example SSH-based Git repository cloning using Go for Dagger. This includes considerations for SSH_AUTH_SOCK and secure cloning practices.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/clone-git-repository/go/main.go\n```\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/clone-git-repository-ssh/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Exporting and Wiping Go Build Directory in Dagger\nDESCRIPTION: This snippet shows how to export the build directory returned by a Go builder Dagger Function, deleting and replacing files as needed in the './my-build' directory on the host using the '--wipe' argument.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  export ./my-build --wipe\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  export ./my-build --wipe\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.1 call \\\n  build --source=https://github.com/dagger/dagger --args=./cmd/dagger \\\n  export --path=./my-build --wipe\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Labels to Docker Image in Go\nDESCRIPTION: This Dagger function adds OpenContainer Initiative (OCI) labels to an image. It builds a base image and then adds specified labels to it.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_30\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tbase := client.Container().From(\"alpine:latest\")\n\n\tcontainer := base.WithLabel(\"org.opencontainers.image.source\", \"https://github.com/dagger/dagger\")\n\tcontainer = container.WithLabel(\"org.opencontainers.image.description\", \"This is a test image\")\n\tcontainer = container.WithLabel(\"org.opencontainers.image.licenses\", \"Apache-2.0\")\n\n\tref, err := container.Publish(ctx, \"example\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Remote Dagger Module (Shell)\nDESCRIPTION: Shows how to use a Dagger module from a GitHub repository to scan a Docker image using Trivy.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/jpadams/daggerverse/trivy@v0.5.0 |\n  scan-image ubuntu:latest\nEOF\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Dagger Runtime Container\nDESCRIPTION: Examples of copying files to the Dagger runtime container for custom processing, demonstrated in different shell environments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-file ../data.json'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-file ../data.json\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call copy-file --source=../data.json\n```\n\n----------------------------------------\n\nTITLE: Returning Container with Installed Packages in Java\nDESCRIPTION: This Java function returns an Alpine container with specified packages installed. It demonstrates container manipulation in Dagger Functions using Java.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Function\npublic Container alpineBuilder(List<String> packages) {\n    return dag.container().from(\"alpine:latest\")\n            .withExec(Stream.concat(Stream.of(\"apk\", \"add\"), packages.stream())\n                    .toList());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Curl to Query Dagger API\nDESCRIPTION: This snippet demonstrates how to use curl to connect to the Dagger API and run a simple pipeline to retrieve the contents of a file from an Alpine container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho '{\"query\":\"{\\n  container {\\n    from(address:\\\"alpine:latest\\\") {\\n      file(path:\\\"/etc/os-release\\\") {\\n        contents\\n      }\\n    }\\n  }\\n}\"}'|   dagger run sh -c 'curl -s \\n    -u $DAGGER_SESSION_TOKEN: \\n    -H \"content-type:application/json\" \\n    -d @- \\n    http://127.0.0.1:$DAGGER_SESSION_PORT/query'\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-call Filtering in Java\nDESCRIPTION: Shows how to use Container.WithDirectoryArguments class with withInclude and withExclude functions for Directory objects to apply post-call filtering in Java.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// exclude all Markdown files\nvar dirOpts = new Container.WithDirectoryArguments()\n    .withExclude(List.of(\"*.md*\"));\n\n// include only the build output directory\nvar dirOpts = new Container.WithDirectoryArguments()\n    .withInclude(List.of(\"build\"));\n\n// include only ZIP files\nvar dirOpts = new Container.WithDirectoryArguments()\n    .withInclude(List.of(\"*.zip\"));\n\n// exclude Git metadata\nvar dirOpts = new Container.WithDirectoryArguments()\n    .withExclude(List.of(\"*.git\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Ollama\nDESCRIPTION: This snippet outlines the commands to set environment variables for integrating with the Ollama service, including server binding and model pulling specifics.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/llm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOLLAMA_HOST=\"0.0.0.0:11434\" ollama serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nollama pull MODEL-NAME\nollama pull qwen2.5-coder:14b\n```\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_BASE_URL=http://YOUR-IP:11434/v1/ \nOPENAI_MODEL=MODEL-NAME\n```\n\n----------------------------------------\n\nTITLE: Implementing a Greeter Module in Go\nDESCRIPTION: Go implementation of a greeter module that provides a function to greet a person. This code would be located in main.go.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/modules/testing/go/main.go\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dagger Architecture with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the architecture of Dagger, showing the relationships between the Client Host (containing the client tool and session components) and the Runner. It depicts the flow of queries and data between various components.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/d7yxc-operator_manual.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph ClientHost[Client Host]\n        client[Client tool] -- queries --> router\n\n        subgraph cli[Session]\n            router[GraphQL API Server]\n            localdir[Local Directory Synchronization]\n            unixsock[Local Socket Forwarding]\n        end\n    end\n\n    subgraph Runner[Runner]\n        RunnerAPI[Runner API Server]\n        RunnerAPI --> containers[Exec Containers]\n        RunnerAPI --> cache\n        cache <--> containers\n    end\n\n    RunnerAPI <--> Sources[External Container Registries, Git Repos, etc.]\n\n    router --> RunnerAPI\n    localdir <--> RunnerAPI\n    unixsock <--> RunnerAPI\n```\n\n----------------------------------------\n\nTITLE: Publishing Container to Registry with Dagger Shell\nDESCRIPTION: Demonstrates creating, modifying, and publishing a container to a temporary registry using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-new-file /hi.txt \"Hello from Dagger!\" |\n  with-entrypoint cat /hi.txt | publish ttl.sh/hello\n```\n\n----------------------------------------\n\nTITLE: Deploying GPU-enabled Dagger Runner on Fly.io\nDESCRIPTION: Shell commands to deploy a GPU-enabled Dagger runner on Fly.io. It uses environment variables for authentication and calls a Dagger module to handle the deployment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport FLYIO_TOKEN=YOUR-FLY.IO-TOKEN\nexport FLYIO_ORG=YOUR-FLY.IO-ORG-NAME\ndagger -m github.com/samalba/dagger-modules/nvidia-gpu call deploy-dagger-on-fly --token env://FLYIO_TOKEN --org env://FLYIO_ORG\n```\n\n----------------------------------------\n\nTITLE: Sequential All Function in Go\nDESCRIPTION: Go implementation of an \"all\" function that runs all test functions sequentially.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Tests) All(ctx context.Context) error {\n\tvar err error\n\n\terr = m.FirstTest(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = m.SecondTest(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI with install.sh on macOS/Linux\nDESCRIPTION: This command downloads and executes the install.sh script to install the Dagger CLI in /usr/local/bin. It can be used on both macOS and Linux.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sh\n```\n\n----------------------------------------\n\nTITLE: Sequential All Function in Python\nDESCRIPTION: Python implementation of an \"all\" function that runs all test functions sequentially.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@object_type\nclass Tests:\n    @function\n    async def all(self):\n        await self.hello()\n        await self.custom_greeting()\n```\n\n----------------------------------------\n\nTITLE: Querying Container Operations in GraphQL\nDESCRIPTION: This GraphQL query demonstrates a simple Dagger pipeline that downloads an Alpine container image, runs a command, and returns the output. It showcases how each field in the query resolves to a build operation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  container {\n    from(address: \"alpine:latest\") {\n      withExec(args: [\"apk\", \"info\"]) {\n        stdout\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Usage Summary in Dagger Engine\nDESCRIPTION: This snippet demonstrates how to get a high-level summary of cache usage in the Dagger Engine. It returns the total number of entries and the total disk space used by the cache.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/engine.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger query <<EOF\n{\n  engine {\n    localCache {\n      entrySet {\n        entryCount\n        diskSpaceBytes\n      }\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Debugging Pipeline Failures in PHP\nDESCRIPTION: Example of a PHP module that demonstrates Dagger's automatic debugging when a pipeline fails. The execution will open an interactive terminal at the point of failure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/debugging-1/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Checking with Dagger Modules in TypeScript\nDESCRIPTION: Creates a security check functionality in TypeScript using the Dagger framework.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@func()\ncheck(): string {\n  let ctr = dag.wolfi().container()\n  return dag.trivy().scanContainer(ctr);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CircleCI Configuration with Dagger\nDESCRIPTION: Basic CircleCI workflow configuration demonstrating how to call a Dagger Function. Shows the setup for installing the Dagger CLI and executing a simple Dagger command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/circleci.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\njobs:\n  hello:\n    docker:\n      - image: cimg/base:current\n    steps:\n      - run:\n          name: Install Dagger\n          command: |\n            cd /tmp\n            curl -L https://dl.dagger.io/dagger/install.sh | sh\n            sudo mv bin/dagger /usr/local/bin\n            dagger version\n      - run:\n          name: Run Dagger\n          command: |\n            dagger call hello-world\nworkflows:\n  dagger:\n    jobs:\n      - hello\n```\n\n----------------------------------------\n\nTITLE: Using Directory Type in Dagger Pipeline (Shell)\nDESCRIPTION: Illustrates how to use the Directory type to clone a Git repository into a container and list its contents.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ncontainer |\n  with-directory /src https://github.com/dagger/dagger |\n  directory /src |\n  entries\nEOF\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of Pre-call Filtering\nDESCRIPTION: A Dagger Function in Java that excludes everything in a directory except Java source code files, demonstrating Java-specific filter syntax.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/fs-filters/pre-call/java/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Container in Java\nDESCRIPTION: Publishes the newly built container, processing any possible exceptions during the operation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n  /**\n   * Builds and publishes a container\n   */\n  @Function\n  public String buildAndPublish()\n      throws InterruptedException, ExecutionException, DaggerQueryException {\n    return this.build().publish(\"ttl.sh/bar\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Default Complex Type in Java for Dagger Module\nDESCRIPTION: This Java code demonstrates how to create a constructor with a default complex type (Container) for a Dagger module. It defines a MyModule class with a container field and a version method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage mymodule;\n\nimport io.dagger.Container;\n\npublic class MyModule {\n    private Container container;\n\n    public MyModule() {\n        this(Container.from(\"alpine:3.14.0\"));\n    }\n\n    public MyModule(Container container) {\n        this.container = container;\n    }\n\n    public String version() throws Exception {\n        return container.withExec(new String[]{\"cat\", \"/etc/os-release\"}).stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature Template in Go\nDESCRIPTION: Go implementation of a standardized test function signature that returns either nil or an error.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Tests) YourTest(ctx context.Context) error {\n\t// Your test here\n\n\tif false { // Your error condition here\n\t\treturn errors.New(\"test failed\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Concurrent Functions (Dagger CLI)\nDESCRIPTION: Command to execute a Dagger Function that runs multiple test functions concurrently via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\ndagger call --source=. run-all-tests\n```\n\n----------------------------------------\n\nTITLE: Executing a Dagger Run Command\nDESCRIPTION: The `dagger run` command executes a specified command in a Dagger session, displaying live progress in a TUI. The session is automatically set up with necessary ports and tokens. Supports commands written in various programming languages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger run [options] <command>...\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger run go run main.go\\ndagger run node index.mjs\\ndagger run python main.py\"\n```\n\n----------------------------------------\n\nTITLE: Creating Go Workspace for Dagger Module Integration\nDESCRIPTION: Shell commands to set up a Go workspace for integrating Dagger modules with project code. This allows IDE features like go-to-definition to work across the main project and Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# in the root of your repository\ngo work init\ngo work use ./\ngo work use ./path/to/mod\n```\n\n----------------------------------------\n\nTITLE: Using Directory Type in Dagger Pipeline (Dagger CLI)\nDESCRIPTION: Demonstrates the Directory type usage with explicit Dagger CLI function calls.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container \\\n  with-directory --path=/src --directory=https://github.com/dagger/dagger \\\n  directory --path=/src \\\n  entries\n```\n\n----------------------------------------\n\nTITLE: Basic Dagger SDK Usage Example in Rust\nDESCRIPTION: Example showing how to connect to Dagger and execute a container command to get Go version. Uses tokio for async runtime and demonstrates error handling.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> eyre::Result<()> {\n    dagger_sdk::connect(|client| async move {\n        let version = client\n            .container()\n            .from(\"golang:1.19\")\n            .with_exec(vec![\"go\", \"version\"])\n            .stdout()\n            .await?;\n\n        println!(\"Hello from Dagger and {}\", version.trim());\n        Ok(())\n    })\n    .await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Dagger Java SDK\nDESCRIPTION: Configures the Dagger Java SDK dependency in a project's pom.xml file. Requires Java 17+ and uses a snapshot version of the SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/java/README.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.dagger</groupId>\n  <artifactId>dagger-java-sdk</artifactId>\n  <version>0.6.2-SNAPSHOT</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Dagger Functions with Go\nDESCRIPTION: Example of implementing a Dagger Function with an optional argument in Go that defaults to 'world' when no name is provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/functions/arguments-optional/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents in Dagger\nDESCRIPTION: This snippet demonstrates how to list the contents of a directory returned by a Dagger Function using the Directory.entries() method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build . --source=https://github.com/golang/example#master:/hello |\n  directory . |\n  entries\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build . --source=https://github.com/golang/example#master:/hello |\n  directory . |\n  entries\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.1 call \\\n  build --source=https://github.com/golang/example#master:/hello --args=. \\\n  directory --path=. \\\n  entries\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Services to Dagger Functions in Python\nDESCRIPTION: This Python function accepts a Service running on the host, binds it using an alias, and creates a client to access it via the service binding. It uses a MariaDB database service running on host port 3306, aliased as 'db' in the Dagger Function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n```python file=../api/snippets/services/expose-host-services-to-dagger/python/main.py\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Default Paths in Go Dagger Functions\nDESCRIPTION: Demonstrates how to set a default path for a Directory argument in Go using the defaultPath pragma on the source argument. This allows Dagger to automatically use the specified path when no value is provided.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/default-paths.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n)\n\ntype MyModule struct{}\n\n// +dagger:function\nfunc (m *MyModule) BuildImage(ctx context.Context,\n\t// +dagger:default-path .\n\tsource *Directory,\n) (*Container, error) {\n\treturn dag.Container().From(\"alpine\").WithDirectory(\"/src\", source), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building a New Container in Java\nDESCRIPTION: Implements the building logic for a new container based on the base container, adding packages required for execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n  /**\n   * Builds on top of base container and returns a new container\n   */\n  @Function\n  public Container build() {\n    return this.base().withExec(List.of(\"apk\", \"add\", \"bash\", \"git\"));\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Dependency in Go\nDESCRIPTION: Example of how to access an installed module dependency from a Go Dagger module using the dag client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) Greeting(ctx context.Context) (string, error) {\\n  return dag.Hello().Hello(ctx)\\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Directory to Container in TypeScript\nDESCRIPTION: This TypeScript function mounts a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, Directory, dag } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  mountDirectory(source: Directory): Container {\n    return dag.container().from(\"alpine\").withMountedDirectory(\"/src\", source)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a New Container in Go\nDESCRIPTION: Builds on top of the base container created in the previous step, adding additional packages and returning the new container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Builds on top of base container and returns a new container\nfunc (m *Basics) Build() *dagger.Container {\n\treturn m.Base().WithExec([]string{\"apk\", \"add\", \"bash\", \"git\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Evaluation in GraphQL (Execution)\nDESCRIPTION: This GraphQL query is similar to the previous one but requests the stdout of the curl command. This triggers the actual execution of the command, demonstrating how lazy evaluation works in Dagger's API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  container {\n    from(address: \"alpine:latest\") {\n      withExec(args: [\"apk\", \"add\", \"curl\"]) {\n        withExec(args: [\"curl\", \"YOUR-WEBHOOK-URL-HERE\"]) {\n          stdout\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Test Module in Go\nDESCRIPTION: Terminal commands to create a Go test module and install dependencies for testing a Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tests\ncd tests\ndagger init --name=tests --sdk=go --source=.\ndagger install ..\n```\n\n----------------------------------------\n\nTITLE: Using Dagger Shell Syntax in GitHub Actions (Standard Runner)\nDESCRIPTION: This YAML snippet shows how to use Dagger shell syntax instead of Dagger call syntax in a GitHub Actions workflow. It demonstrates the use of chaining and subshell capabilities of Dagger shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Dagger\n        uses: dagger/dagger-for-github@v5\n        with:\n          version: \"0.9.3\"\n          cmds: |    \n            project init\n            project update\n            do {\n              echo \"Hello $(call hello --name world)\"\n            }\n        env:\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Dagger Function from Shell\nDESCRIPTION: These shell commands demonstrate how to call the custom 'get-user' Dagger Function using different methods: system shell, Dagger Shell, and Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-functions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'get-user'\n```\n\nLANGUAGE: shell\nCODE:\n```\nget-user\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call get-user\n```\n\n----------------------------------------\n\nTITLE: Building a Base Container in TypeScript\nDESCRIPTION: Implements a method to return the baseline container setup in TypeScript using Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@object()\nclass Basics {\n  /**\n   * Returns a base container\n   */\n  @func()\n  base(): Container {\n    return dag.container().from(\"cgr.dev/chainguard/wolfi-base\")\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Function Arguments (Shell)\nDESCRIPTION: Shows how to list all optional and required arguments for a specific Dagger Function using context-sensitive help.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/jpadams/daggerverse/trivy@v0.5.0 | scan-image | .help'\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Dagger Pipeline in Dagger Shell\nDESCRIPTION: Shows the same pipeline as above, but executed in Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from alpine |\n  file /etc/os-release |\n  contents\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Arguments in Go\nDESCRIPTION: Example of implementing a Dagger Function with a default value for a string argument in Go.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/functions/arguments-default-string/go/main.go\n```\n\n----------------------------------------\n\nTITLE: Cloning Repositories in PHP\nDESCRIPTION: Example PHP implementation for cloning Git repositories with Dagger, showcasing integration with repository management in containers.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/clone-git-repository/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Building Go Application with Dagger Query Command\nDESCRIPTION: This shell script uses the dagger query command to clone a Go repository, build the application, and save the binary to the host filesystem in two GraphQL queries.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# First query: Clone the Go repository\nrepo=$(dagger query <<EOF\n{\n  git(\n    url: \"https://go.googlesource.com/example\",\n    keepGitDir: false\n  ) {\n    tree(path: \"hello\")\n  }\n}\nEOF\n)\n\n# Extract the directory ID\nsourcedir=$(echo \"$repo\" | grep -o '\"tree\": \"[^\"]*\"' | cut -d '\"' -f 4)\n\n# Second query: Build the application\ndagger query <<EOF\n{\n  directory(id: \"$sourcedir\") {\n    docker {\n      build {\n        containerfile {\n          contents: \"\"\"\n          FROM golang:1.21-alpine\n          WORKDIR /src\n          COPY . .\n          RUN go build -o hello\n          \"\"\"\n        }\n        buildArgs: {\n          BUILDKIT_INLINE_CACHE: \"1\"\n        }\n        context: \".\"\n      }\n    }\n    export(path: \".\", dest: \".\") {\n      __typename\n    }\n  }\n  container {\n    from(address: \"golang:1.21-alpine\") {\n      directory(\n        path: \"/go/bin\"\n      ) {\n        withFile(path: \"hello\", source: id(\"$sourcedir\"), permissions: 448) {\n          export(path: \"hello\", dest: \"dagger-builds-hello\")\n        }\n      }\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Disabling Insecure Root Capabilities in engine.toml\nDESCRIPTION: TOML configuration to disable insecure root capabilities in engine.toml by setting an empty array.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\ninsecure-entitlements = []\n```\n\n----------------------------------------\n\nTITLE: Secret Handling in Dagger CLI\nDESCRIPTION: Examples of passing secrets to Dagger Functions using various secret providers including environment variables, files, and command execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github-api env://GITHUB_API_TOKEN'\ndagger -c 'github-api file://./github.txt'\ndagger -c 'github-api cmd://\"gh auth token\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Tekton Pipeline for Dagger Integration\nDESCRIPTION: YAML configuration for a Tekton Pipeline that integrates Git repository cloning with a Dagger pipeline execution. The pipeline includes two tasks: git-clone and a custom dagger task.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/tekton.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: git-pipeline\nspec:\n  params:\n    - name: git-url\n      type: string\n    - name: dagger-cloud-token\n      type: string\n      default: \"\"\n  workspaces:\n    - name: source\n  tasks:\n    - name: clone\n      taskRef:\n        name: git-clone\n      params:\n      - name: url\n        value: $(params.git-url)\n      workspaces:\n        - name: output\n          workspace: source\n    - name: read\n      runAfter: [\"clone\"]\n      taskRef:\n        name: dagger\n      params:\n        - name: dagger-cloud-token\n          value: $(params.dagger-cloud-token)\n      workspaces:\n        - name: source\n          workspace: source\n```\n\n----------------------------------------\n\nTITLE: Creating Alpine Container with Dagger Shell\nDESCRIPTION: Demonstrates how to create a basic Alpine container using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine\n```\n\n----------------------------------------\n\nTITLE: Mounting Directory to Container in PHP\nDESCRIPTION: This PHP function mounts a specified directory to the /src path in a container and returns the modified container. It accepts a Directory argument which can reference a local filesystem directory or a remote Git repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Container;\nuse Dagger\\Directory;\nuse Dagger\\Module;\n\n#[Module]\nclass MyModule\n{\n    public function mountDirectory(Directory $source): Container\n    {\n        return dag()->container()->from('alpine')->withMountedDirectory('/src', $source);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Dependency in Java\nDESCRIPTION: Example of how to access an installed module dependency from a Java Dagger module using the dag client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Function\\npublic String greeting() throws ExecutionException, DaggerQueryException, InterruptedException {\\n    return dag().hello().hello();\\n}\n```\n\n----------------------------------------\n\nTITLE: Array Arguments in Dagger Functions\nDESCRIPTION: Demonstrates how to pass array arguments to Dagger Functions across different programming languages, using comma-separated lists of values\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfile=./snippets/functions/arguments-array/go/main.go\n```\n\nLANGUAGE: python\nCODE:\n```\nfile=./snippets/functions/arguments-array/python/main.py\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfile=./snippets/functions/arguments-array/typescript/index.ts\n```\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/functions/arguments-array/php/src/MyModule.php\n```\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/functions/arguments-array/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Executing Dagger Function in GitLab CI with Kubernetes Executor\nDESCRIPTION: This YAML configuration shows how to call a Dagger Function in a GitLab CI/CD pipeline using the Kubernetes executor. It assumes pre-provisioned Dagger Engine instances on the nodes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimage: docker:latest\n\nbefore_script:\n  - apk add --no-cache curl\n  - curl -L https://dl.dagger.io/dagger/install.sh | sh\n  - mv bin/dagger /usr/local/bin\n  - dagger version\n\nstages:\n  - build\n\nhello:\n  stage: build\n  tags:\n    - dagger\n  script:\n    - dagger call hello-world --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Credentials with Clone Command\nDESCRIPTION: Shell command to test if Git credentials are properly configured by attempting to clone a private repository, which Dagger would use with the same credentials.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/remote-repositories.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/USER/PRIVATE_REPOSITORY.git\n```\n\n----------------------------------------\n\nTITLE: Exporting Container Image with Dagger (System Shell)\nDESCRIPTION: Command to export a container image as an OCI tarball to a specified path on the host using the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'base | export /home/admin/mycontainer.tgz'\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Dependency in Python\nDESCRIPTION: Example of how to access an installed module dependency from a Python Dagger module using the dag client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@function\\nasync def greeting(self) -> str:\\n  return await dag.hello().hello()\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Functions in Python\nDESCRIPTION: Python implementation of a test function that verifies the greeter module's hello function works correctly.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@object_type\nclass Tests:\n    @function\n    async def hello(self):\n        greeting = await dag.greeter().hello(\"World\")\n\n        if greeting != \"Hello, World!\":\n            raise Exception(\"unexpected greeting\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Client Projects\nDESCRIPTION: These commands initialize project directories and install GraphQL client dependencies for both Rust and PHP to work with the Dagger API.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-project\ncd my-project\ncargo init\ncargo add gql_client@1.0.7\ncargo add serde_json@1.0.125\ncargo add tokio@1.39.3 -F full\ncargo add base64@0.22.1\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdir my-project\ncd my-project\ncomposer require gmostafa/php-graphql-client\n```\n\n----------------------------------------\n\nTITLE: Applying Tekton Configurations and Running Pipeline\nDESCRIPTION: Shell commands to apply the Tekton Task, Pipeline, and PipelineRun configurations to the Kubernetes cluster and execute the pipeline.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/tekton.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f dagger-task.yaml\nkubectl apply -f git-pipeline-yaml\nkubectl create -f git-pipeline-run.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Dagger Pipeline in Shell\nDESCRIPTION: Demonstrates a simple Dagger pipeline that retrieves the contents of /etc/os-release from an Alpine container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ncontainer |\n  from alpine |\n  file /etc/os-release |\n  contents\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building a Base Container in Python\nDESCRIPTION: Defines a method to return a base container using the Dagger library in Python.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@object_type\nclass Basics:\n    @function\n    def base(self) -> dagger.Container:\n        \"\"\"Returns a base container\"\"\"\n        return dag.container().from_(\"cgr.dev/chainguard/wolfi-base\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Insecure Root Capabilities in engine.json\nDESCRIPTION: JSON configuration to disable insecure root capabilities in engine.json.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": {\n    \"insecureRootCapabilities\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Azure Pipeline with Dagger for Testing and Building\nDESCRIPTION: This YAML snippet shows a more advanced Azure Pipelines configuration. It checks out source code, calls a Dagger Function to test the project, and then calls another Function to build and publish a container image. It uses variables for versioning and includes multiple stages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/azure-pipelines.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\n\nvariables:\n  imageName: 'greetings-api'\n  # version numbers are just examples\n  major: 1\n  minor: 0\n  patch: $[counter(variables['minor'], 0)]\n  dagger_version: 0.9.3\n\nstages:\n- stage: Test\n  jobs:\n  - job: Test\n    pool:\n      vmImage: ubuntu-latest\n    steps:\n    - task: GoTool@0\n      inputs:\n        version: '1.20'\n    - task: Go@0\n      inputs:\n        command: 'get'\n        arguments: '-d'\n        workingDirectory: '$(System.DefaultWorkingDirectory)'\n    - bash: |\n        curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=$(dagger_version) sh\n        sudo mv bin/dagger /usr/local/bin\n        dagger version\n      displayName: Install Dagger\n    - bash: |\n        dagger call test --src . --log-format=plain\n      env:\n        DAGGER_CLOUD_TOKEN: $(DAGGER_CLOUD_TOKEN)\n      displayName: Test with Dagger\n\n- stage: Build\n  jobs:\n  - job: Build\n    pool:\n      vmImage: ubuntu-latest\n    steps:\n    - bash: |\n        curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=$(dagger_version) sh\n        sudo mv bin/dagger /usr/local/bin\n        dagger version\n      displayName: Install Dagger\n    - bash: |\n        dagger call build --src . --tag $(imageName):$(major).$(minor).$(patch) --log-format=plain\n      env:\n        DAGGER_CLOUD_TOKEN: $(DAGGER_CLOUD_TOKEN)\n      displayName: Build with Dagger\n```\n\n----------------------------------------\n\nTITLE: Defining a Dagger Object in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to define a Dagger Object.  It uses the `#[DaggerObject]` attribute to mark the class as a Dagger Object. Dagger searches for these objects within the `src/` directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\DaggerObject;\n\n#[DaggerObject]\nclass Example\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module with Java SDK\nDESCRIPTION: Commands to initialize a Dagger module named 'my-module' and set up the development environment for Java SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --name=my-module\ndagger develop --sdk=java\n```\n\n----------------------------------------\n\nTITLE: Example Dagger Function in PHP\nDESCRIPTION: This PHP code snippet shows an example of a Dagger Function within a Dagger Object.  It uses the `#[DaggerFunction]` attribute to mark the method as a Dagger Function, which makes it available for use with the Dagger CLI. It demonstrates accessing the Dagger client using `dag()` to create a container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// ...\n\nuse function Dagger\\dag;\n\n#[DaggerObject]\nclass Example\n{\n     #[DaggerFunction]\n     #[Doc('Echo the value to standard output')]\n     public function containerEcho(string $stringArg): Container\n     {\n         return dag()\n             ->container()\n             ->from('alpine:latest')\n             ->withExec(['echo', $value]);\n     }\n\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Registry Mirrors in Dagger Engine\nDESCRIPTION: This snippet demonstrates how to configure custom registry mirrors in the Dagger Engine using TOML configuration. It shows how to set up mirrors for Docker Hub and other registries.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[registry.\"docker.io\"]\n  mirrors = [\"mirror.gcr.io\"]\n\n[registry.\"docker.io\"]\n  mirrors = [\"mirror.a.com\", \"mirror.b.com\"]\n\n[registry.\"some.other.registry.com\"]\n  mirrors = [\"mirror.foo.com\", \"mirror.bar.com\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Arguments in Java\nDESCRIPTION: Example of implementing a Dagger Function with a default value for a string argument in Java using the @Default annotation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/functions/arguments-default-string/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Setting up SSH in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to set up SSH agent and add a private key in a GitHub Actions workflow. It's useful when SSH keys are required for certain operations in the workflow.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Set up SSH\n  run: |\n    eval \"$(ssh-agent -s)\"\n    ssh-add - <<< '${{ secrets.SSH_PRIVATE_KEY }}'\n```\n\n----------------------------------------\n\nTITLE: Adding Floating-Point Numbers in Dagger Function\nDESCRIPTION: This function takes two floating-point numbers as input and returns their sum. It demonstrates how to work with float arguments and return values in Dagger Functions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) AddFloat(ctx context.Context, a float64, b float64) float64 {\n\treturn a + b\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef add_float(a: float, b: float) -> float:\n    return a + b\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { float } from \"@dagger.io/dagger\"\n\nexport function addFloat(a: number, b: number): float {\n  return a + b\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function addFloat(float $a, float $b): float\n{\n    return $a + $b;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic float addFloat(float a, float b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Binding Type in GraphQL\nDESCRIPTION: Defines the Binding type, representing key-value pairs in the environment. It includes a method for retrieving the value as a specific type.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/environment-api.md#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Binding {\n  key: String!\n  as[Type]: [Type]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tekton PipelineRun for Dagger Execution\nDESCRIPTION: YAML configuration for a Tekton PipelineRun that executes the git-pipeline with specific parameters. It defines a Git repository URL for cloning and an optional Dagger Cloud token for authentication.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/tekton.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  generateName: clone-read-run-\nspec:\n  pipelineRef:\n    name: git-pipeline\n  params:\n    - name: git-url\n      value: https://github.com/kpenfound/greetings-api\n    - name: dagger-cloud-token\n      value: \"\"\n  workspaces:\n    - name: source\n      volumeClaimTemplate:\n        spec:\n          accessModes:\n            - ReadWriteOnce\n          resources:\n            requests:\n              storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Functions in Go\nDESCRIPTION: Go implementation of an example function that demonstrates how to use the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *Examples) GreeterHello(ctx context.Context) error {\n\tgreeting, err := dag.Greeter().Hello(ctx, \"World\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Do something with the greeting\n\t_ = greeting\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Code Interface for SDK Examples in HTML\nDESCRIPTION: Example HTML structure for creating tabbed code snippets across Go, Python, and TypeScript SDKs. This pattern should be used when providing code examples for all available SDK languages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/STYLE_GUIDE.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Tabs groupId=\"language\" queryString=\"sdk\">\n<TabItem value=\"go\" label=\"Go\">\n...\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n...\n</TabItem>\n<TabItem value=\"typescript\" label=\"TypeScript\">\n...\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Running Custom Dagger Engine with engine.json\nDESCRIPTION: Docker command to run a custom Dagger Engine with a mounted engine.json configuration file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm \\\n    -v /var/lib/dagger \\\n    -v $HOME/.config/dagger/engine.json:/etc/dagger/engine.json \\\n    --name dagger-engine-custom \\\n    --privileged \\\n    registry.dagger.io/engine:${daggerVersion}\n```\n\n----------------------------------------\n\nTITLE: Installing Package and Executing Command in Alpine Container\nDESCRIPTION: Demonstrates installing curl package in an Alpine container and using it to retrieve a webpage.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-exec apk add curl | with-exec curl https://dagger.io | stdout\n```\n\n----------------------------------------\n\nTITLE: Dagger PHP Function Arguments\nDESCRIPTION: This PHP code snippet demonstrates how to define arguments for Dagger Functions.  Parameters on a Dagger Function are considered providable arguments, and the `#[Doc]` attribute can be used to add documentation.  The `#[Argument]` attribute is also shown, although it is not required, its presence does not change the behavior of the argument.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\DaggerFunction;\nuse Dagger\\Attribute\\DaggerObject;\nuse Dagger\\Attribute\\Doc;\n\n#[DaggerObject]\nclass Example\n{\n     //...\n\n     #[DaggerFunction]\n     public function myCoolDaggerFunction(\n         string $value,\n     ): string {\n         // do something...\n     }\n\n     #[DaggerFunction]\n     public function myEquallyCoolDaggerFunction(\n         #[Argument]\n         string $value,\n     ): string {\n         // do something...\n     }\n\n     #[DaggerFunction]\n     #[Doc('documentation for function')]\n     public function myWellDocumentedDaggerFunction(\n         #[Doc('documentation for argument')]\n         string $value,\n     ): string {\n         // do something...\n     }\n\n     // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Remote Repository Using Dagger CLI\nDESCRIPTION: Command that uses Dagger to clone a private Git repository by pre-resolving it into a Directory object, specifying the main branch.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/remote-repositories.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndagger call clone --dir git@github.com:private/secret-repo@main\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Root Capabilities in engine.json\nDESCRIPTION: JSON configuration to explicitly enable insecure root capabilities in engine.json.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": {\n    \"insecureRootCapabilities\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enums and Variables as Default Values in Dagger\nDESCRIPTION: Example demonstrating how to use variables and enumerations as default values in Dagger functions, as long as they are exported by the same module. This allows for cleaner code with reusable constants.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Example {\n  A = \"A\",\n  B = \"B\",\n}\n\nexport const defaultValue = \"foo\"\n\n@object()\nclass Test {\n  @func()\n  defaultEnumVar(value: Example = Example.A): Example {\n    return value\n  }\n\n  @func\n  defaultStringVar(value: string = defaultValue): string {\n    return value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List and Call Dagger Module Functions\nDESCRIPTION: Demonstrates listing available functions in a Dagger Java module and calling a specific function with arguments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/java/README.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dagger functions -m my-java-module\n\nName             Description\ncontainer-echo   Returns a container that echoes whatever string argument is provided\ngrep-dir         Returns lines that match a pattern in the files of the provided Directory\n\n$ dagger call -q -m my-java-module container-echo --string-arg \"hello dagger\" stdout\n\nhello dagger\n```\n\n----------------------------------------\n\nTITLE: Using LLM Bindings in System Shell\nDESCRIPTION: This shell script executes a Dagger command in a system shell that creates an Alpine container environment for an LLM agent, then prompts it to install Python development tools. It demonstrates how to use Dagger's LLM bindings outside of interactive mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/mcp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\nbase=\\$(container | from alpine)\nenv=\\$(env |\n  with-container-input 'base' \\$base 'a base container' |\n  with-container-output 'python-dev' 'a container with python dev tools')\nllm |\n  with-env \\$env |\n  with-prompt \"You have an alpine container. Install tools to develop with Python.\" |\n  env |\n  output python-dev |\n  as-container |\n  terminal\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Dagger Functions in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to define Dagger Functions within a Dagger Object.  It uses the `#[DaggerFunction]` attribute to mark a public method as a Dagger Function, making it accessible through the Dagger CLI. The `#[Doc]` attribute can be used to add documentation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\DaggerFunction;\nuse Dagger\\Attribute\\DaggerObject;\nuse Dagger\\Attribute\\Doc;\n\n#[DaggerObject]\nclass Example\n{\n    #[DaggerFunction]\n    public function myCoolDaggerFunction(): void\n    {\n        /**\n         * This is a Dagger Function:\n         * - It has public visibility.\n         * - It has the DaggerFunction Attribute.\n         */\n    }\n\n    #[DaggerFunction]\n    #[Doc('documentation for the function')]\n    public function myDocumentedDaggerFunction(): void\n    {\n        /**\n         * This is a Dagger Function:\n         * - It has public visibility.\n         * - It has the DaggerFunction Attribute.\n         */\n    }\n\n    private function myPublicMethod(): void\n    {\n        /**\n         * This is not a Dagger Function:\n         * - It is missing the DaggerFunction Attribute.\n         */\n    }\n\n    #[DaggerFunction]\n    private function myPrivateMethodWithAPointlessAttribute(): void\n    {\n        /**\n         * This is not a Dagger Function:\n         * - It has private visibility.\n         */\n    }\n\n    private function myPrivateMethod(): void\n    {\n        /**\n         * This is not a Dagger Function:\n         * - It has private visibility.\n         * - It is missing the DaggerFunction Attribute.\n         */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced AWS CodeBuild Configuration for Dagger Integration (YAML)\nDESCRIPTION: A more complex buildspec.yml configuration that demonstrates checking out source code, calling Dagger Functions to test the project, and building and publishing a container image. It uses a Go application as an example.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/aws-codebuild.mdx#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\nenv:\n  variables:\n    DAGGER_MODULE: ci\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: 18\n  pre_build:\n    commands:\n      - cd /usr/local/bin\n      - curl -L https://dl.dagger.io/dagger/install.sh | sh\n      - cd $CODEBUILD_SRC_DIR\n  build:\n    commands:\n      - dagger call test --log-format=plain\n      - |\n        dagger call publish \\\n          --image-tag=${CODEBUILD_RESOLVED_SOURCE_VERSION} \\\n          --registry-user=${REGISTRY_USER} \\\n          --registry-password=${REGISTRY_PASSWORD} \\\n          --log-format=plain\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Dagger Functions with Java\nDESCRIPTION: Example of implementing a Dagger Function with an optional argument in Java using the Optional class, which requires using boxed types instead of primitives.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nfile=./snippets/functions/arguments-optional/java/src/main/java/io/dagger/modules/mymodule/MyModule.java\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Environment with uv and Lock File\nDESCRIPTION: Commands to set up a Python environment using uv package manager with a uv.lock file. It synchronizes dependencies and adds the SDK as an editable package.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuv sync\n```\n\nLANGUAGE: shell\nCODE:\n```\nuv add --editable ./sdk\nrm requirements.lock\n```\n\n----------------------------------------\n\nTITLE: Running AI Model with Dagger GPU Support\nDESCRIPTION: Shell command demonstrating a more complex Dagger Function that uses the GPU to set up an Ollama server, pull a model, and process a text prompt.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/samalba/dagger-modules/nvidia-gpu call ollama-run --prompt \"What color is the sky?\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shared Module Structure with Mermaid\nDESCRIPTION: A mermaid diagram illustrating the structure of a monorepo using a shared module for multiple microservices.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Shared module] --> B[Microservice 1]\n    A[Shared module] --> C[Microservice 2]\n    A[Shared module] --> D[Microservice 3]\n```\n\n----------------------------------------\n\nTITLE: Building a Base Container in Go\nDESCRIPTION: Creates and returns a base container using the Dagger library. This is the foundational step for building containerized applications.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Returns a base container\nfunc (m *Basics) Base() *dagger.Container {\n\treturn dag.Container().From(\"cgr.dev/chainguard/wolfi-base\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Script to Use nerdctl with Lima\nDESCRIPTION: This shell script creates a wrapper for nerdctl to work with Lima, a Linux virtual machine runner for macOS. The script passes all arguments to the 'lima nerdctl' command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/nerdctl.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nlima nerdctl \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger on OpenShift with Taints and Tolerations\nDESCRIPTION: A Helm values.yaml configuration for deploying Dagger on OpenShift. It specifies tolerations for tainted nodes, resource requirements, and container configuration for optimized performance on NVMe drives.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/openshift.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfile=./snippets/openshift.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting NGINX Service with Default Port Mapping - Dagger\nDESCRIPTION: This example demonstrates how to start an NGINX service using Dagger and forward traffic to a specified address via the host. It uses the `as-service` and `up` commands to achieve this.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/nginx@v0.1.0 | container | as-service | up\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/wolfi@v0.16.2 call container as-service up\n```\n\n----------------------------------------\n\nTITLE: Using Go Builder Dagger Module from Public Repository via SSH\nDESCRIPTION: This snippet shows how to use the same Go builder Dagger module from a public GitHub repository, but using SSH authentication. It requires proper SSH authentication configuration on the Dagger host.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/remote-modules.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m git@github.com:kpenfound/dagger-modules/golang@v0.2.0 call \\\n  build --source=https://github.com/dagger/dagger --args=./cmd/dagger \\\n  export --path=./build\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging in engine.toml\nDESCRIPTION: TOML configuration to enable trace logging in engine.toml.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ntrace = true\n```\n\n----------------------------------------\n\nTITLE: Using Native TypeScript Type Keyword with Dagger\nDESCRIPTION: Example of using native TypeScript type keyword to define types without decorators. This can be used to define data objects or primitive types, with all properties of data objects being exposed to the API and CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Example = {\n  a: string\n  b: number\n}\n\ntype Integer = number\ntype Foo = string\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Arguments in Dagger Functions\nDESCRIPTION: Illustrates how to create a Dagger Function that accepts integer arguments across different programming languages. The function adds two integer values and returns the result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n)\n\ntype MyModule struct{}\n\n// +dagger:function\nfunc (m *MyModule) AddInteger(ctx context.Context, a int, b int) int {\n\treturn a + b\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def add_integer(self, a: int, b: int) -> int:\n        return a + b\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, func, field } from \"@dagger.io/dagger\"\n\n@object()\nexport class MyModule {\n  @func()\n  addInteger(@field() a: number, @field() b: number): number {\n    return a + b\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Module;\nuse Dagger\\Function;\nuse Dagger\\Field;\n\n#[Module]\nclass MyModule\n{\n    #[Function]\n    public function addInteger(\n        #[Field] int $a,\n        #[Field] int $b\n    ): int {\n        return $a + $b;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.dagger.*;\n\n@DaggerModule\npublic class MyModule {\n\n    @DaggerFunction\n    public int addInteger(int a, int b) {\n        return a + b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Service Lifecycle in Dagger\nDESCRIPTION: Demonstrates explicit control over service startup and shutdown, particularly useful for applications requiring careful shutdown coordination. Shows how to avoid reliance on the default 10-second grace period.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndagger call test\n```\n\n----------------------------------------\n\nTITLE: Checking with Dagger Modules in Java\nDESCRIPTION: Implements a functionality in Java to check the security status of a container using Dagger and Trivy.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n@Function\npublic String check()\n    throws InterruptedException, ExecutionException, DaggerQueryException {\n  Container ctr = dag()\n      .wolfi()\n      .container();\n  return dag()\n      .trivy()\n      .scanContainer(ctr);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dagger Shell Syntax in GitHub Actions (Depot Runner)\nDESCRIPTION: This YAML snippet shows how to use Dagger shell syntax on a Dagger Powered Depot runner in a GitHub Actions workflow. It demonstrates the use of chaining and subshell capabilities of Dagger shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: depot-dagger-0.9\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Dagger\n        uses: dagger/dagger-for-github@v5\n        with:\n          version: \"0.9.3\"\n          cmds: |    \n            project init\n            project update\n            do {\n              echo \"Hello $(call hello --name world)\"\n            }\n        env:\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Adding Integers in Dagger Function\nDESCRIPTION: This function takes two integers as input and returns their sum. It demonstrates how to work with integer arguments and return values in Dagger Functions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/return-values.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) AddInteger(ctx context.Context, a int, b int) int {\n\treturn a + b\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@function\ndef add_integer(a: int, b: int) -> int:\n    return a + b\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function addInteger(a: number, b: number): number {\n  return a + b\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function addInteger(int $a, int $b): int\n{\n    return $a + $b;\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic int addInteger(int a, int b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with UV pip\nDESCRIPTION: Command to install Python packages from pyproject.toml using UV pip.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -e ./sdk -e .\n```\n\n----------------------------------------\n\nTITLE: Updating a Module Dependency by Path\nDESCRIPTION: Shows how to update a module dependency to the latest version using the full repository path.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ndagger update github.com/shykes/daggerverse/hello\n```\n\n----------------------------------------\n\nTITLE: Interacting with Build Environment\nDESCRIPTION: Command to open an interactive terminal session with the running container of the build environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbuild-env | terminal --cmd=bash\n```\n\n----------------------------------------\n\nTITLE: Accessing Host File in Remote Dagger Module using Dagger Shell\nDESCRIPTION: This snippet shows how to use a remote Dagger module (wolfi) and access a file from the host system. It demonstrates the use of the 'host' function to reference local files when working with remote modules.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/shell.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/wolfi@v0.16.2 |\n  container |\n  with-file /README.md $(host | file ./README.md) |\n  with-exec cat /README.md |\n  stdout\n```\n\n----------------------------------------\n\nTITLE: Building a Base Container in PHP\nDESCRIPTION: Returns a base container within a PHP class definition using Dagger functionalities.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerObject]\nclass Basics\n{\n    #[DaggerFunction]\n    #[Doc('Returns a base container')]\n    public function base(): Container\n    {\n        return dag()\n            ->container()\n            ->from('cgr.dev/chainguard/wolfi-base');\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Hatch Development Environment\nDESCRIPTION: Command to open an editor within the Hatch development environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhatch run dev:vim .\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI with sudo privileges on macOS/Linux\nDESCRIPTION: This command installs the Dagger CLI with sudo privileges when the user account doesn't have sufficient permissions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo -E sh\n```\n\n----------------------------------------\n\nTITLE: Exporting Go Build Directory in Dagger\nDESCRIPTION: This snippet demonstrates how to export the build directory returned by a Go builder Dagger Function to the './my-build' directory on the host.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  export ./my-build\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/kpenfound/dagger-modules/golang@v0.2.1 |\n  build ./cmd/dagger --source=https://github.com/dagger/dagger |\n  export ./my-build\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.1 call \\\n  build --source=https://github.com/dagger/dagger --args=./cmd/dagger \\\n  export --path=./my-build\n```\n\n----------------------------------------\n\nTITLE: Saving Data to Redis Service (Interactive Shell)\nDESCRIPTION: Command to save data to a Redis service that uses a cache volume to persist state via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\nset foo 123\n```\n\n----------------------------------------\n\nTITLE: Updating Dagger CLI with Homebrew\nDESCRIPTION: Commands to update the Dagger CLI using Homebrew package manager. This method updates the currently installed version to the latest available version.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew update\nbrew upgrade dagger\n```\n\n----------------------------------------\n\nTITLE: Configuring Fine-Grained Garbage Collection Policies in Dagger Engine\nDESCRIPTION: This snippet shows how to configure more specific garbage collection policies in the Dagger Engine, including keepDuration and all parameters.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gc\": {\n    \"policies\": [\n      {\n        \"keepDuration\": \"6h\",\n        \"maxUsedSpace\": \"200GB\",\n        \"reservedSpace\": \"10GB\",\n        \"minFreeSpace\": \"20%\"\n      },\n      {\n        \"all\": true,\n        \"maxUsedSpace\": \"50GB\",\n        \"reservedSpace\": \"10GB\",\n        \"minFreeSpace\": \"20%\"\n      }\n    ]\n  },\n}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[worker.oci]\n  keepDuration = \"6h\"\n  maxUsedSpace = \"200GB\"\n  reservedSpace = \"10GB\"\n  minFreeSpace = \"20%\"\n\n  [[worker.oci.gcpolicy]]\n  keepDuration = \"6h\"\n  maxUsedSpace = \"50GB\"\n  reservedSpace = \"10GB\"\n  minFreeSpace = \"20%\"\n```\n\n----------------------------------------\n\nTITLE: Network Service Arguments in Dagger\nDESCRIPTION: Example of passing network service references to Dagger Functions, specifically for PostgreSQL database connections.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -d -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres\n\ndagger <<EOF\ngithub.com/kpenfound/dagger-modules/postgres@v0.1.0 |\n  client tcp://localhost:5432 postgres postgres postgres\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Container as Local Service\nDESCRIPTION: Command to start the built container as a local service and map its ports to the host machine.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbuild | as-service | up --ports=8080:80\n```\n\n----------------------------------------\n\nTITLE: Debugging Directory Contents in Python\nDESCRIPTION: Creates a debug function that receives a Directory as input and returns the same Directory for inspection in Python.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@function\nasync def foo(\n    self,\n    source: Annotated[\n        dagger.Directory, Ignore([\"*\", \"!analytics\"])\n    ],\n) -> dagger.Directory:\n    return source\n```\n\n----------------------------------------\n\nTITLE: GitLab Runner Configuration for Kubernetes Executor\nDESCRIPTION: This YAML configuration sets up a GitLab Runner with taints, tolerations, and pod affinity for the Kubernetes executor. It ensures the runner only executes on nodes with pre-provisioned Dagger Engine instances.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: gitlab-runner\ndata:\n  config.toml: |\n    concurrent = 4\n    check_interval = 30\n    shutdown_timeout = 30\n\n    [session_server]\n      session_timeout = 1800\n\n    [[runners]]\n      name = \"kubernetes-runner\"\n      url = \"YOUR-GITLAB-URL\"\n      token = \"YOUR-GITLAB-RUNNER-TOKEN-REFERENCE\"\n      executor = \"kubernetes\"\n      [runners.kubernetes]\n        namespace = \"{{.Release.Namespace}}\"\n        image = \"ubuntu:20.04\"\n        privileged = false\n        service_account = \"gitlab-admin\"\n        service_account_overwrite_allowed = \"*\"\n        [runners.kubernetes.affinity]\n          nodeAffinity:\n            requiredDuringSchedulingIgnoredDuringExecution:\n              nodeSelectorTerms:\n                - matchExpressions:\n                    - key: dagger-node\n                      operator: In\n                      values:\n                        - \"true\"\n        [runners.kubernetes.node_tolerations]\n          \"dagger-node=true:NoSchedule\" = \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Identifying Container State in GraphQL\nDESCRIPTION: This GraphQL query initializes a container from an Alpine image, creates a file, and returns an identifier representing the container's filesystem state. It showcases how Dagger's API enables state persistence and referencing.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  container {\n    from(address: \"alpine:latest\") {\n      withExec(args: [\"touch\", \"/tmp/myfile\"]) {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function from Dagger CLI\nDESCRIPTION: Command to call the 'get-user' Dagger Function using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndagger call get-user\n```\n\n----------------------------------------\n\nTITLE: Executing the Example Function via CLI\nDESCRIPTION: Example commands to call the Dagger Function from different shell environments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'example https://github.com/golang/example#master:/hello .'\n```\n\n----------------------------------------\n\nTITLE: Running Yarn Build with Dagger CLI\nDESCRIPTION: Shows how to execute a Yarn build command using Dagger. This command uses the local directory as the source and sets the run argument to 'build'. Note that the output will be encoded filesystem bytes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/2ku9n-getting_started.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndagger -p examples/yarn/dagger.json do --local-dir source=. --set runArgs=build\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Default Complex Type in Python for Dagger Module\nDESCRIPTION: This Python code shows how to create a constructor with a default complex type (Container) for a Dagger module. It defines a MyModule class with a container attribute and a version method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    container: dagger.Container = dagger.field(default_factory=lambda: dagger.container().from_(\"alpine:3.14.0\"))\n\n    async def version(self) -> str:\n        return await self.container.with_exec([\"cat\", \"/etc/os-release\"]).stdout()\n```\n\n----------------------------------------\n\nTITLE: Granting Privileged Security Context for Dagger Containers\nDESCRIPTION: OpenShift CLI command to add the privileged Security Context Constraint (SCC) to the default service account in the dagger namespace. This is required for Dagger to run privileged containers with host path mounts.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/openshift.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noc adm policy add-scc-to-user privileged -z default -n dagger\n```\n\n----------------------------------------\n\nTITLE: Alternative Constructor with Default Complex Type in TypeScript for Dagger Module\nDESCRIPTION: This TypeScript code demonstrates an alternative way to create a constructor with a default complex type (Container) for a Dagger module. It defines the default value directly in the field declaration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container, dag } from \"@dagger.io/dagger\"\n\nexport default class MyModule {\n  private container: Container = dag.container().from(\"alpine:3.14.0\")\n\n  constructor(container?: Container) {\n    this.container = container ?? this.container\n  }\n\n  async version(): Promise<string> {\n    return this.container.withExec([\"cat\", \"/etc/os-release\"]).stdout()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Internal Versions Using Dagger Releaser\nDESCRIPTION: Uses the Dagger releaser module to bump version numbers in SDKs, docs, and Helm charts to the target version, then commits the changes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndagger call -m releaser bump --version=\"$ENGINE_VERSION\" -o ./\ngit add docs sdk helm\ngit commit -s -m \"chore: bump dependencies to $ENGINE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Persistent Nodes Architecture Pattern Diagram\nDESCRIPTION: Mermaid diagram illustrating the persistent nodes architecture pattern for Dagger on Kubernetes, showing the relationship between CI runners, Dagger Engine, and the Kubernetes cluster components.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph External APIs\n        SCM\n    end\n    rc --> SCM\n    controlplane --> runner-nodes\n\n    subgraph Kubernetes cluster\n        controlplane{{ Kubernetes control plane }}\n        rc -.-> runner1\n        rc -.-> runnern.1\n        rc -.-> runnern.2\n\n        subgraph support-nodes[Support nodes]\n            rc{{ Runner controller }}\n            cert-manager\n        end\n        subgraph runner-nodes[Runner nodes]\n            direction BT\n            subgraph node-n[Node n]\n                runnern.1{{ CI runner }} --> dagger-engine2[Dagger Engine]\n                runnern.2{{ CI runner }} --> dagger-engine2[Dagger Engine]\n            end\n            subgraph node-1[Node 1]\n                runner1{{ CI runner }} --> dagger-engine[Dagger Engine]\n            end\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation for Dagger API Client\nDESCRIPTION: This PHP implementation creates a GraphQL client for the Dagger API, adds HTTP Basic authentication, and executes a query to retrieve and display the Alpine container's OS release information.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse GraphQL\\Client;\nuse GraphQL\\Exception\\QueryError;\nuse GraphQL\\QueryBuilder\\QueryBuilder;\n\n// Get environment variables for the Dagger session\n$port = getenv('DAGGER_SESSION_PORT');\n$token = getenv('DAGGER_SESSION_TOKEN');\n\n// Create HTTP headers with Basic auth\n$headers = [\n    'Authorization' => 'Basic ' . base64_encode(\"$token:\"),\n];\n\n// Initialize the GraphQL client\n$client = new Client(\n    \"http://127.0.0.1:$port/query\", \n    $headers\n);\n\n// Define the GraphQL query\n$query = <<<'GRAPHQL'\nquery {\n  container {\n    from(address: \"alpine:latest\") {\n      exec(args: [\"cat\", \"/etc/os-release\"]) {\n        stdout\n      }\n    }\n  }\n}\nGRAPQL;\n\ntry {\n    // Execute the query\n    $results = $client->runRawQuery($query);\n    $data = $results->getData();\n    \n    // Print the result\n    echo $data->container->from->exec->stdout;\n} catch (QueryError $e) {\n    // Show the error message\n    echo 'GraphQL query error: ' . $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single Environment Variable (Dagger CLI)\nDESCRIPTION: Command to set a single environment variable in a container via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\ndagger call set-env-var\n```\n\n----------------------------------------\n\nTITLE: Running Dagger JAR in Runtime Container\nDESCRIPTION: This command executes the generated JAR file in the runtime container. It assumes the JAR file is named 'module.jar' and is in the current directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\njava -jar module.jar\n```\n\n----------------------------------------\n\nTITLE: Updating a Module Dependency by Name\nDESCRIPTION: Shows how to update a module dependency to the latest version using just the module name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndagger update hello\n```\n\n----------------------------------------\n\nTITLE: Interactive Dagger Shell Commands\nDESCRIPTION: Shows how to use Dagger Shell interactively to execute container build and publish commands.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n# all equivalent\nbase | with-exec apk add bash git | publish ttl.sh/bar\nbuild | publish ttl.sh/bar\nbuild-and-publish\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment with uv pip Interface\nDESCRIPTION: Commands to create a Python virtual environment and install dependencies using uv's pip interface. It includes setting up the venv and installing requirements from a lock file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv venv\nuv pip install -r requirements.lock -e ./sdk -e .\n```\n\nLANGUAGE: shell\nCODE:\n```\necho 3.11 > .python-version\n```\n\n----------------------------------------\n\nTITLE: Cloning a Remote Repository with SSH Agent Access\nDESCRIPTION: Command that allows a Dagger function to perform a Git clone by passing in the SSH agent socket, giving explicit repository and reference parameters.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/remote-repositories.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndagger call clone-with-ssh --repository git@github.com:private/secret-repo.git \\\n  --ref main --sock \"$SSH_AUTH_SOCK\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Alpine Example with Dagger CLI\nDESCRIPTION: Demonstrates how to use Dagger with an Alpine Linux container to execute a curl command. The example builds an Alpine container with curl installed, then executes a command to fetch the Dagger homepage and returns the first line of stdout.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/2ku9n-getting_started.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndagger -p examples/alpine/dagger.json do <<'EOF'\n{\n  alpine{\n    build(pkgs:[\"curl\"]) {\n      exec(input: {args:[\"curl\", \"https://dagger.io\"]}) {\n        stdout(lines: 1)\n      }\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Evaluation in GraphQL (Setup)\nDESCRIPTION: This GraphQL query sets up a container with curl installed and prepares a curl command to a webhook URL. It returns only the container ID, demonstrating that the curl command is not actually executed due to lazy evaluation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  container {\n    from(address: \"alpine:latest\") {\n      withExec(args: [\"apk\", \"add\", \"curl\"]) {\n        withExec(args: [\"curl\", \"YOUR-WEBHOOK-URL\"]) {\n          id\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Ruff Linter Report in Dagger\nDESCRIPTION: This snippet shows how to export the results of a 'ruff' linter Dagger Function as '/tmp/report.json' on the host.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/chaining.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ngithub.com/dagger/dagger/modules/ruff |\n  lint https://github.com/dagger/dagger |\n  report |\n  export /tmp/report.json\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/dagger/dagger/modules/ruff |\n  lint https://github.com/dagger/dagger |\n  report |\n  export /tmp/report.json\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/dagger/dagger/modules/ruff call \\\n  lint --source https://github.com/dagger/dagger \\\n  report \\\n  export --path=/tmp/report.json\n```\n\n----------------------------------------\n\nTITLE: Installing Golang Module Dependency\nDESCRIPTION: Example of installing the Golang module dependency from the Daggerverse.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndagger install github.com/kpenfound/dagger-modules/golang@v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Getting Dagger Engine Pod Name\nDESCRIPTION: Retrieves the name of a Dagger Engine pod and sets it as an environment variable for later use. Uses kubectl with a selector to find pods managed by the DaemonSet.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDAGGER_ENGINE_POD_NAME=\"$(kubectl get pod \\\n    --selector=name=dagger-dagger-helm-engine --namespace=dagger \\\n    --output=jsonpath='{.items[0].metadata.name}')\"\nexport DAGGER_ENGINE_POD_NAME\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Arguments in PHP\nDESCRIPTION: Example of implementing a Dagger Function with a default value for a string argument in PHP.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/functions/arguments-default-string/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Setting Release Variables in Bash\nDESCRIPTION: Sets up environment variables used throughout the Dagger release process, defining the release branch and repository remote.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# 🚨 change this from `main` to `release-vX.Y.Z` if releasing off a non-main branch\nexport RELEASE_BRANCH=main\n\n# set to whatever github.com/dagger/dagger repo is named for you locally\nexport DAGGER_REPO_REMOTE=$(git remote -v | grep -E \"(github.com.dagger/dagger)\" | head -n 1 | awk '{print $1}')\n```\n\n----------------------------------------\n\nTITLE: Removing Dagger Cache and Config on Linux\nDESCRIPTION: Commands to remove Dagger cache and configuration directories on Linux. This deletes the Dagger-specific folders from the user's home directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.cache/dagger\nrm -rf ~/.config/dagger\n```\n\n----------------------------------------\n\nTITLE: Executing Go Build Script and Verifying Results\nDESCRIPTION: These commands make the shell script executable and run it to build the Go application, then verify the result using the tree command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x ./build.sh\n./build.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ntree\n.\n├── build.sh\n└── dagger-builds-hello\n\n1 directory, 2 files\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables (Dagger CLI)\nDESCRIPTION: Command to set multiple environment variables in a container via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_75\n\nLANGUAGE: shell\nCODE:\n```\ndagger call set-env-vars\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor with Default Complex Type in PHP for Dagger Module\nDESCRIPTION: This PHP code shows how to create a constructor with a default complex type (Container) for a Dagger module. It defines a MyModule class with a container property and a version method.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/constructors.mdx#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Dagger\\Container;\nuse Dagger\\Function\\DaggerFunction;\n\nclass MyModule\n{\n    public function __construct(\n        #[DaggerFunction]\n        private ?Container $container = null\n    ) {\n        $this->container ??= Container::from('alpine:3.14.0');\n    }\n\n    #[DaggerFunction]\n    public function version(): string\n    {\n        return $this->container->withExec(['cat', '/etc/os-release'])->stdout();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Container Image with Dagger CLI\nDESCRIPTION: Command to export a container image as an OCI tarball to a specified path on the host using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\ndagger call base export --path=/home/admin/mycontainer.tgz\n```\n\n----------------------------------------\n\nTITLE: Java Module Documentation Example\nDESCRIPTION: Shows Java documentation patterns for Dagger modules including class-level, method-level, and parameter documentation using Javadoc comments.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/documentation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.module.annotation.ObjectType;\nimport io.dagger.module.annotation.Function;\n\n@ObjectType\npublic class MyModule {\n    /**\n     * Return a greeting.\n     *\n     * @param greeting The greeting to display\n     * @param name Who to greet\n     */\n    @Function\n    public String hello(String greeting, String name) {\n        return greeting + \" \" + name + \"!\";\n    }\n\n    /**\n     * Return a loud greeting.\n     *\n     * @param greeting The greeting to display\n     * @param name Who to greet\n     */\n    @Function\n    public String loudHello(String greeting, String name) {\n        return (greeting + \" \" + name + \"!\").toUpperCase();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger Client Example\nDESCRIPTION: This example showcases a Dagger client implementation, offering a type-safe and convenient way to interact with the Dagger API. It demonstrates a chainable API for building and executing queries with reduced boilerplate.  The goal is to provide autocompletion and documentation within IDEs for a better developer experience.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = await (\n    client.container()\n    .from_(\\\"python\\\")\n    .with_exec([\\\"python\\\", \\\"-V\\\"])\n    .stdout()\n)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Different Build Context in Go\nDESCRIPTION: This Dagger function builds an image from a Dockerfile with a build context that is different from the current working directory. It allows specifying separate source and Dockerfile URLs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_28\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"path/filepath\"\n\n\t\"dagger.io/dagger\"\n)\n\ntype Build struct{}\n\nfunc (m *Build) Build(ctx context.Context, src string, dockerfile string) (string, error) {\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer client.Close()\n\n\tproject := client.Git(src).Branch(\"master\").Tree()\n\n\tdockerfileDir := client.Git(dockerfile).Branch(\"master\").Tree()\n\tdockerfilePath := filepath.Base(dockerfile)\n\n\tbuilder := client.Container().Build(project, dagger.ContainerBuildOpts{\n\t\tDockerfile: dockerfileDir.File(dockerfilePath),\n\t})\n\n\tref, err := builder.Publish(ctx, \"example\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ref, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying HTTP Resource Metadata and Contents\nDESCRIPTION: Executes a GraphQL query to retrieve the size and contents of a web resource from the specified URL. Useful for inspecting and retrieving basic information about HTTP endpoints.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/http/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  http(url: \"http://dagger.io\") {\n    size\n    contents\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Support in TypeScript SDK\nDESCRIPTION: Example showing how to define and implement interfaces in the Dagger TypeScript SDK. Demonstrates interface definition, implementation, and usage patterns.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { func, object } from \"@dagger.io/dagger\"\n\n// Use the `interface` keyword to define an interface.\n// Both method and properties style notation are supported.\nexport interface Duck {\n  quack: () => string\n  superQuack(): Promise<string>\n}\n\n@object()\nexport class Example {\n  @func()\n  duckQuack(duck: Duck): string {\n    return duck.quack()\n  }\n\n  @func()\n  async duckSuperQuack(duck: Duck): Promise<string> {\n    return duck.superQuack()\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, func } from \"@dagger.io/dagger\"\n\n@object()\nexport class TsImpl {\n  @func()\n  async quack(): Promise<string> {\n    return \"quack\"\n  }\n\n  @func()\n  async superQuack(): Promise<string> {\n    return \"QUACK\"\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dag, object, func } from \"@dagger.io/dagger\"\n\n@object()\nexport class Test {\n  @func()\n  async tsQuack(): Promise<string> {\n    return await dag.Example().duckQuack(dag.tsImpl().asExampleDuck())\n  }\n\n  @func()\n  async tsSuperQuack(): Promise<string> {\n    return await dag.Example().duckSuperQuack(dag.tsImpl().asExampleDuck())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Paths in Dagger Module\nDESCRIPTION: Examples of using a Dagger module with a constructor to set default paths, with examples of default and overridden path usage.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c foo\n```\n\nLANGUAGE: shell\nCODE:\n```\nfoo\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call foo\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'my-module --source $(host | directory /src/myapp) | foo'\n```\n\nLANGUAGE: shell\nCODE:\n```\nmy-module --source $(host | directory /src/myapp) | foo\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call --source=/src/myapp foo\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions with Dagger CLI\nDESCRIPTION: Shows how to chain Dagger functions using explicit Dagger CLI commands.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container from --address=\"alpine:latest\" \\\n  with-entrypoint --args=\"cat\",\"/etc/os-release\" \\\n  publish --address=\"ttl.sh/my-alpine\"\n```\n\n----------------------------------------\n\nTITLE: Building Dagger Project with Maven\nDESCRIPTION: This command builds the Dagger project using Maven, cleaning previous builds and packaging the application. It is executed in the runtime build container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Executing Dagger CLI Base Command\nDESCRIPTION: Main command-line interface for running composable workflows in containers with various options and subcommands\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndagger [options] [subcommand | file...]\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function to Get Member URLs\nDESCRIPTION: This shell command demonstrates how to call a Dagger Function from the GitHub module to retrieve all member URLs using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/custom-types.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger call dagger-organization members url\n```\n\n----------------------------------------\n\nTITLE: Creating Archive Site Directory Structure (Shell)\nDESCRIPTION: This snippet outlines the directory structure for the final archived documentation site, including sub-directories for different versions and necessary configuration files.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsite/\n  0.1/\n  0.2/\n  0.9/\n  index.html\n  netlify.toml\n```\n\n----------------------------------------\n\nTITLE: Building with Cached Dependencies (Interactive Shell)\nDESCRIPTION: Command to build an application using cached dependencies via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_68\n\nLANGUAGE: shell\nCODE:\n```\nbuild .\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module with Python SDK\nDESCRIPTION: Commands to initialize a Dagger module named 'my-module' and set up the development environment for Python SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --name=my-module\ndagger develop --sdk=python\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Alpine Container with Dagger Shell\nDESCRIPTION: Shows how to run a command (uname) in an Alpine container and return its output using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-exec uname | stdout\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory with Dagger (Interactive Shell)\nDESCRIPTION: Command to export a directory returned by a Dagger Function to a specified path on the host using Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\nget-dir | export /home/admin/export\n```\n\n----------------------------------------\n\nTITLE: Enum Type Decorator in Dagger\nDESCRIPTION: Decorator for creating enumeration types within the Dagger module system, used for defining fixed sets of values\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/module.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@enum_type\n```\n\n----------------------------------------\n\nTITLE: Building with Cached Dependencies (System Shell)\nDESCRIPTION: Command to build an application using cached dependencies via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_67\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'build .'\n```\n\n----------------------------------------\n\nTITLE: Testing Dagger Cloud Integration Locally\nDESCRIPTION: This shell command demonstrates how to test the Dagger Cloud integration by calling a Dagger Function from the local development host.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/shykes/daggerverse/hello@v0.3.0 call hello\n```\n\n----------------------------------------\n\nTITLE: Executing the Example Function with Dagger CLI\nDESCRIPTION: Example command to call the Dagger Function using explicit parameter flags.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndagger call example --build-src=https://github.com/golang/example#master:/hello --build-args=.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base Image in package.json for Dagger\nDESCRIPTION: Example configuration for setting a custom base image in package.json. This allows using an external custom runtime as the base image for Dagger modules, specifying both the base image and runtime type.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dagger\": {\n    \"baseImage\": \"node:23.2.0-alpine@sha256:ecefaffd4706c5879af52e022fdb8ea30cbd6590e2a30d05347790d690727c6c\",\n    \"runtime\": \"node\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Directory Contents in Go\nDESCRIPTION: Creates a debug function that receives a Directory as input and returns the same Directory for inspection in Go.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *MyModule) Debug(\n  ctx context.Context,\n  // +ignore=[\"*\", \"!analytics\"]\n  source *dagger.Directory,\n) *dagger.Directory {\n  return source\n}\n```\n\n----------------------------------------\n\nTITLE: Using Directory Type in Dagger Pipeline (Dagger Shell)\nDESCRIPTION: Shows the same Directory type usage in Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  with-directory /src https://github.com/dagger/dagger |\n  directory /src |\n  entries\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Symbolic Link for Podman Integration with Dagger\nDESCRIPTION: Creates a symbolic link from the podman executable to /usr/local/bin/docker, allowing Dagger to use Podman as its container runtime. This leverages Podman's Docker CLI compatibility.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/podman.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s $(which podman) /usr/local/bin/docker\n```\n\n----------------------------------------\n\nTITLE: Dagger Config Command Example\nDESCRIPTION: Examples of using the dagger config command to get or set module configuration for local and remote modules\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndagger config -m /path/to/some/dir\ndagger config -m github.com/dagger/hello-dagger\n```\n\n----------------------------------------\n\nTITLE: Implementing Dagger Interface in TypeScript\nDESCRIPTION: Demonstrates the implementation of the 'Fooer' interface in a TypeScript class 'Example'. The class includes an async 'foo' method that fulfills the interface contract.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/interfaces.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Example {\n  async foo(arg: string): Promise<string> {\n    return `Example says: ${arg}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger Module Dependency in dagger.json\nDESCRIPTION: Shows how a module dependency is represented in the dagger.json configuration file after installation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n...\\n\"dependencies\": [\\n  {\\n    \"name\": \"hello\",\\n    \"source\": \"github.com/shykes/daggerverse/hello@54d86c6002d954167796e41886a47c47d95a626d\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Proper Relative Linking in Documentation\nDESCRIPTION: Examples showing the correct and incorrect ways to create internal links in Dagger documentation to prevent broken links.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n❌ This is [a problematic link](/doc-url).\n\n✅ This is [a good link](../relative-doc-file-path.md).\n```\n\n----------------------------------------\n\nTITLE: Checking installed Dagger CLI version on Linux\nDESCRIPTION: This command displays the installed version of the Dagger CLI on Linux.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./bin/dagger version\n# Expected output: dagger v${daggerVersion} (registry.dagger.io/engine:v${daggerVersion}) linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module with Go SDK\nDESCRIPTION: Commands to initialize a Dagger module named 'my-module' and set up the development environment for Go SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --name=my-module\ndagger develop --sdk=go\n```\n\n----------------------------------------\n\nTITLE: Using Dagger as Docker Run Alternative (Shell)\nDESCRIPTION: Shows how to use Dagger as an alternative to 'docker run' by creating a container from a base image and opening a terminal.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'container | from cgr.dev/chainguard/wolfi-base | terminal'\n```\n\n----------------------------------------\n\nTITLE: Building a New Container in PHP\nDESCRIPTION: Expands upon the base container to create a new container by executing package installations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n    #[DaggerFunction]\n    #[Doc('Builds on top of base container and returns a new container')]\n    public function build(): Container\n    {\n        return $this\n            ->base()\n            ->withExec(['apk', 'add', 'bash', 'git']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Field Decorator in Dagger Modules\nDESCRIPTION: Function for defining and configuring fields within Dagger module types, providing metadata and type information\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/module.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfield()\n```\n\n----------------------------------------\n\nTITLE: Creating Example Module in TypeScript\nDESCRIPTION: Terminal commands to create a TypeScript example module that demonstrates and tests the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p examples/typescript\ncd examples/typescript\ndagger init --name=examples/typescript --sdk=typescript --source=.\ndagger install ../..\n```\n\n----------------------------------------\n\nTITLE: Dagger PHP Module Constructor\nDESCRIPTION: These PHP code snippets demonstrate how to use the `__construct` method as a Dagger Function for module initialization. It provides an example of how to inject dependencies like a `Directory` into the module's constructor, making it available to other Dagger Functions within the module.  The first code example shows how the `test` function would be called when no constructor is available, and the second example shows how the code is called with the `Directory` injected via the constructor.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerObject]\nfinal class MyModule\n{\n    #[DaggerFunction]\n    public function test(Directory $source): Container\n    {\n        // ...\n    }\n\n    // ...\n\n```\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerObject]\nfinal class MyModule\n{\n    #[DaggerFunction]\n    public function __construct(\n        public Directory $source\n    ) {\n    }\n\n    #[DaggerFunction]\n    public function test(): Container\n    {\n        // ...\n    }\n\n    // ...\n\n```\n\n----------------------------------------\n\nTITLE: Sending Queries with the Dagger query Command\nDESCRIPTION: The `dagger query` command sends API queries to a dagger engine. If no document file is specified, it reads the query from standard input and can handle multiple queries using an operation name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger query <<EOF\\n{\\n  container {\\n    from(address:\\\"hello-world\\\") {\\n      withExec(args:[\\\"/hello\\\"]) {\\n        stdout\\n      }\\n    }\\n  }\\n}\\nEOF\"\n```\n\n----------------------------------------\n\nTITLE: PHP SDK Release Documentation\nDESCRIPTION: Release history documentation showing version updates, dependency changes, and links to packages and release notes. Each release entry includes Engine version compatibility and action items for users.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## sdk/php/v0.11.3 - 2024-05-08\n\nThis SDK uses 🚙 Engine + 🚗 CLI version `v0.11.3`. [See what changed in that release](https://github.com/dagger/dagger/releases/tag/v0.11.3).\n\n🐘 https://packagist.org/packages/dagger/dagger#v0.11.3\n\n### Dependencies\n- Bump Engine to v0.11.3 by @github-actions in https://github.com/dagger/dagger/pull/7318\n```\n\n----------------------------------------\n\nTITLE: Retrieving Directory ID in GraphQL\nDESCRIPTION: This GraphQL query retrieves the ID of the current directory on the host. It demonstrates how Dagger uses IDs to represent object state at a given time.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  host {\n    directory(path: \".\") {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Directory Contents in Java\nDESCRIPTION: Creates a debug function that receives a Directory as input and returns the same Directory for inspection in Java.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@Function\npublic Directory debug(@Ignore({\"*\", \"!analytics\"}) Directory source) {\n    return source;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Podman Machines on Mac for Dagger Integration\nDESCRIPTION: Commands for accessing and configuring the Podman virtual machine on Mac. These commands list available machines, establish an SSH connection to the default machine, and load the iptable_nat kernel module required for networking.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/podman.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# list podman machines\npodman machine list \n\n# log in to machine\npodman machine ssh podman-machine-default\n\n# execute command\nsudo modprobe iptable_nat\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Include Paths in JSON\nDESCRIPTION: Example of how to configure the 'include' setting in dagger.json to explicitly load files from outside the module directory. This is needed for modules that rely on files like go.mod in parent directories.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"../go.mod\", \"../go.sum\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Dagger Cloud via CLI\nDESCRIPTION: Demonstrates how to log in to Dagger Cloud using the dagger login command, which initiates browser-based authentication with a unique confirmation code.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ dagger login\nBrowser opened to: https://auth.dagger.cloud/activate?user_code=XXXX-YYYY\nConfirmation code: XXXX-YYYY\n```\n\n----------------------------------------\n\nTITLE: Service Interaction with Grace Period\nDESCRIPTION: Shows how to interact with a Redis service using multiple commands, relying on the 10-second grace period. This approach is demonstrated as a non-optimal pattern.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/services.mdx#2025-04-16_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go file=./snippets/services/service-lifecycle-2/go/main.go```\n```\n\nLANGUAGE: python\nCODE:\n```\n```python file=./snippets/services/service-lifecycle-2/python/main.py```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript file=./snippets/services/service-lifecycle-2/typescript/index.ts```\n```\n\nLANGUAGE: php\nCODE:\n```\n```php file=./snippets/services/service-lifecycle-2/php/src/MyModule.php```\n```\n\nLANGUAGE: java\nCODE:\n```\n```java file=./snippets/services/service-lifecycle-2/java/src/main/java/io/dagger/modules/mymodule/MyModule.java```\n```\n\n----------------------------------------\n\nTITLE: Using Git Commit with Sign-off for DCO Compliance\nDESCRIPTION: Command to commit changes with a Developer Certificate of Origin (DCO) sign-off, which is required for all Dagger contributions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Removing Dagger Engine Container\nDESCRIPTION: Docker command to remove the Dagger engine container. This forcefully removes the container and its associated volumes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm --force --volumes \"$(docker ps --quiet --filter='name=^dagger-engine-')\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module for PHP\nDESCRIPTION: Command to initialize a new Dagger module using the PHP SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=php --name=coding-agent\n```\n\n----------------------------------------\n\nTITLE: Accessing Interactive Terminal in Container with Dagger Shell\nDESCRIPTION: Shows how to access an interactive terminal in a container with a new file using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-new-file /hi.txt \"Hello from Dagger!\" | terminal\n```\n\n----------------------------------------\n\nTITLE: Defining Java Dagger Module Description\nDESCRIPTION: Shows how to set the description for a Java Dagger module using a package-info.java file with the @Module annotation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/** My Dagger module */\n@Module\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.module.annotation.Module;\n```\n\n----------------------------------------\n\nTITLE: Displaying Default TypeScript Module Structure\nDESCRIPTION: Demonstrates the default file structure created when initializing a TypeScript-based Dagger module. It includes project configuration files, source code directory, and the TypeScript SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_dagger_module_init.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── LICENSE\n├── package.json\n├── sdk\n├── src\n│   └── index.ts\n└── tsconfig.json\n└── dagger.json\n```\n\n----------------------------------------\n\nTITLE: Initializing a Dagger PHP Module\nDESCRIPTION: This snippet shows the command used to initialize a Dagger module using the Dagger CLI with the PHP SDK. The `<path-to-module>` argument specifies the directory where the module will be initialized. If omitted, the module is initialized in the current directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndagger init --sdk=\"php\" <path-to-module>\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function from System Shell\nDESCRIPTION: Command to call the 'get-user' Dagger Function from the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'get-user'\n```\n\n----------------------------------------\n\nTITLE: Initialize Dagger Java Module Project Structure\nDESCRIPTION: Shows the file and directory structure generated when creating a new Dagger Java module using the 'dagger init' command with the Java SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/java/README.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dagger init --sdk=java my-java-module\n\n$ tree my-java-module\nmy-java-module\n├── dagger.json\n├── pom.xml\n└── src\n    └── main\n        └── java\n            └── io\n                └── dagger\n                    └── modules\n                        └── myjavamodule\n                            ├── MyJavaModule.java\n                            └── package-info.java\n\n8 directories, 4 files\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code with Dagger Python Module Recognition\nDESCRIPTION: Shell command to open Visual Studio Code with proper recognition of Dagger Python modules and dependencies, assuming the use of a virtual environment and the uv package manager.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger develop\nuv run code .\n```\n\n----------------------------------------\n\nTITLE: IP Address Configuration for Ollama\nDESCRIPTION: This snippet helps configure the host IP address that Dagger needs to communicate with the Ollama service, providing commands for both modern and older Linux distributions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/llm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nifconfig | grep \"inet \" | grep -v 127.0.0.1\nip addr | grep \"inet \" | grep -v 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Deploying GPU-enabled Dagger Runner on Lambda Labs\nDESCRIPTION: Shell commands to deploy a GPU-enabled Dagger runner on a Lambda Labs virtual machine, similar to the local host configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nVERSION=$(dagger version | cut -d' ' -f2)\ndocker rm -f dagger-engine-${VERSION} 2>/dev/null && docker run --gpus all -d --privileged -e _EXPERIMENTAL_DAGGER_GPU_SUPPORT=true --name dagger-engine-${VERSION} registry.dagger.io/engine:${VERSION}-gpu -- --debug\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Dagger Cloud Token\nDESCRIPTION: This shell command creates a Kubernetes secret named 'dagger-cloud' with the Dagger Cloud token. The TOKEN placeholder should be replaced with the actual token value.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic dagger-cloud --from-literal=token=TOKEN\n```\n\n----------------------------------------\n\nTITLE: Viewing Dagger Cache Usage Summary\nDESCRIPTION: This command shows a high-level summary of cache usage in the Dagger system. It provides an overview of how the cache is being utilized.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cache.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger core engine local-cache entry-set\n```\n\n----------------------------------------\n\nTITLE: Creating New File in Container with Dagger Shell\nDESCRIPTION: Demonstrates creating a new file with content in an Alpine container using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/basics/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncontainer | from alpine | with-new-file /hi.txt \"Hello from Dagger!\"\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/build-the-application/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Checking Dagger PHP Module Functions\nDESCRIPTION: This snippet demonstrates the command for listing available functions in a Dagger PHP module. The `-m` flag specifies the path to the module.  This will output the available methods within the module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndagger functions -m <path-to-module>\n```\n\n----------------------------------------\n\nTITLE: Installing specific version of Dagger CLI on macOS/Linux\nDESCRIPTION: This command installs a specific version of the Dagger CLI by setting the DAGGER_VERSION environment variable.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${daggerVersion} BIN_DIR=/usr/local/bin sh\n```\n\n----------------------------------------\n\nTITLE: Listing Available Dagger Functions (Shell)\nDESCRIPTION: Demonstrates how to list all available Dagger Functions in a module using context-sensitive help.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c '.help github.com/jpadams/daggerverse/trivy@v0.5.0'\n```\n\n----------------------------------------\n\nTITLE: Organizing PHP Dagger Module with Multiple Classes\nDESCRIPTION: Demonstrates how to structure a PHP Dagger module with multiple classes in separate files, accessed from the main class.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/MyModule.php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace DaggerModule;\n\nuse Dagger\\Attribute\\{DaggerObject, DaggerFunction};\nuse DaggerModule\\Test; // in src/Test.php\nuse DaggerModule\\Lint; // in src/Lint.php\n\nuse function Dagger\\dag;\n\n#[DaggerObject]\nclass MyModule\n{\n    #[DaggerFunction]\n    public function test(): Test\n    {\n        return new Test();\n    }\n\n    #[DaggerFunction]\n    public function lint(): Lint\n    {\n        return new Lint();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Example Function in Dagger Shell\nDESCRIPTION: Example command to call the Dagger Function from Dagger's interactive shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexample https://github.com/golang/example#master:/hello .\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for NodeNext\nDESCRIPTION: JSON configuration snippet to set the TypeScript module system to NodeNext.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"NodeNext\"\n```\n\n----------------------------------------\n\nTITLE: Adding Java Dependencies in Maven pom.xml\nDESCRIPTION: XML configuration for adding a Java dependency (slf4j) to a Maven pom.xml file for a Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <scope>runtime</scope>\n    <version>2.0.16</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agent in Dagger Shell\nDESCRIPTION: Shell commands to interact with the Dagger API, check the help text for the new Dagger Function, verify LLM configuration, and run the AI agent with an assignment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n.help go-program\n\nllm | model\n\ngo-program \"write a curl clone\"\n\ngo-program \"write a curl clone\" | terminal\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in Dagger Shell\nDESCRIPTION: Demonstrates function chaining in Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from alpine:latest |\n  with-entrypoint  cat /etc/os-release |\n  publish ttl.sh/my-alpine\n```\n\n----------------------------------------\n\nTITLE: Running Dagger Application\nDESCRIPTION: Command to run the Dagger application using Cargo\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Complex Dagger Pipeline for Building CLI (Dagger CLI)\nDESCRIPTION: Shows the complex pipeline using explicit Dagger CLI function calls.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndagger core container from --address=\"golang:latest\" \\\n  with-directory --path=\"/src\" --directory=\"https://github.com/dagger/dagger#main\" \\\n  with-workdir --path=\"/src/cmd/dagger\" \\\n  with-exec --args=\"go\",\"build\",\"-o\",\"dagger\",\".\" \\\n  file --path=\"./dagger\" \\\n  export --path=\"./dagger.bin\"\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying Directories with Shell\nDESCRIPTION: Examples of using the Dagger CLI and shell commands to copy and modify directories, incorporating files into containers. Commands are shown for system shell, Dagger Shell, and Dagger CLI configurations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-and-modify-directory ./myapp/'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-and-modify-directory ./myapp/\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call copy-and-modify-directory --source=./myapp/\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-and-modify-directory github.com/dagger/dagger#main'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-and-modify-directory github.com/dagger/dagger#main\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call copy-and-modify-directory --source=github.com/dagger/dagger#main\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-and-modify-directory ssh://git@github.com/user/foo#main'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-and-modify-directory ssh://git@github.com/user/foo#main\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call copy-and-modify-directory --source=ssh://git@github.com/user/foo#main\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'copy-and-modify-directory https://github.com/dagger/dagger#main | directory /src | entries'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncopy-and-modify-directory https://github.com/dagger/dagger#main | directory /src | entries\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call \\\n  copy-and-modify-directory --source=https://github.com/dagger/dagger#main \\\n  directory --path=/src \\\n  entries\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Dagger Function Description\nDESCRIPTION: Demonstrates how to set a custom description for a Java Dagger function using the @Function annotation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Returns the build container\n *\n * @param name The name of the container\n * @return The container\n */\n@Function(description = \"Build container\")\npublic Container build(String name) {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Garbage Collection in Dagger Engine\nDESCRIPTION: This snippet shows how to disable the garbage collector in the Dagger Engine using either JSON or TOML configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"gc\": {\n        \"enabled\": false\n    }\n}\n```\n\nLANGUAGE: toml\nCODE:\n```\n[worker.oci]\ngc = false\n```\n\n----------------------------------------\n\nTITLE: Command-line Example of Passing a Host Directory to Dagger\nDESCRIPTION: An example showing how to clone a Git repository and pass a local directory to a Dagger Function using the command line interface.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/golang/example\ndagger -m github.com/kpenfound/dagger-modules/golang@v0.2.0 call build --source=./example/hello --args=. directory --p\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/multi-stage-build/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Adding SDK as Development Dependency with Poetry\nDESCRIPTION: Commands to add the local SDK as a development dependency and run an editor within the Poetry environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npoetry add --group=dev -e ./sdk\n```\n\nLANGUAGE: shell\nCODE:\n```\npoetry run vim .\n```\n\n----------------------------------------\n\nTITLE: Installing specific version of Dagger CLI on Windows\nDESCRIPTION: This command installs a specific version of the Dagger CLI on Windows by setting the -DaggerVersion parameter.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex;\nInstall-Dagger -DaggerVersion ${daggerVersion}\n```\n\n----------------------------------------\n\nTITLE: Exporting File with Dagger (System Shell)\nDESCRIPTION: Command to export a file returned by a Dagger Function to a specified path on the host using the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'get-file | export /home/admin/myfile'\n```\n\n----------------------------------------\n\nTITLE: Executing Concurrent Functions (System Shell)\nDESCRIPTION: Command to execute a Dagger Function that runs multiple test functions concurrently via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'my-module $(host | directory .) | run-all-tests'\n```\n\n----------------------------------------\n\nTITLE: Creating Example Module in Go\nDESCRIPTION: Terminal commands to create a Go example module that demonstrates and tests the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p examples/go\ncd examples/go\ndagger init --name=examples/go --sdk=go --source=.\ndagger install ../..\n```\n\n----------------------------------------\n\nTITLE: Running the Dagger init Command\nDESCRIPTION: The `dagger init` command initializes a new module at the given path, optionally installing a specified SDK and creating a `dagger.json` file at the module root. This command requires specifying a path and optionally allows defining paths to include, license type, module name, SDK, and source directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger init --sdk=python\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger using Helm on OpenShift\nDESCRIPTION: Helm command to install Dagger in a dedicated namespace using the official Dagger Helm chart. The command creates the namespace if it doesn't exist and applies the custom values configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/openshift.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --create-namespace --install --namespace dagger dagger oci://registry.dagger.io/dagger-helm -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Invoking Dagger Functions with Default Arguments\nDESCRIPTION: Examples of how to call a Dagger Function relying on its default argument values using different shell interfaces.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c hello\n```\n\nLANGUAGE: shell\nCODE:\n```\nhello\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call hello\n```\n\n----------------------------------------\n\nTITLE: Executing Elixir Script in Shell\nDESCRIPTION: Run an Elixir script using the Elixir command-line tool. Replace <ci.exs> with your script file name. Ensure your system has Elixir installed and configured correctly.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ elixir ci.exs\n```\n\n----------------------------------------\n\nTITLE: Directory Inspection Shell Commands\nDESCRIPTION: Commands for inspecting directories and files in Dagger pipelines using interactive terminals.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c simple-directory\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c advanced-directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base Image in pyproject.toml\nDESCRIPTION: A TOML snippet showing how to specify a custom base image for a Python Dagger module in the pyproject.toml file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.dagger]\nbase-image = \"acme/python:3.11\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module\nDESCRIPTION: Commands to initialize a new Dagger module using different SDKs (Go, Python, TypeScript, PHP, or Java).\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=go\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=python\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=typescript\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=php\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=java\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Dependency in PHP\nDESCRIPTION: Example of how to access an installed module dependency from a PHP Dagger module using the dag client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\\npublic function greeting(): string\\n{\\n    return dag()->hello()->hello();\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Container with Mounted Directory in GraphQL\nDESCRIPTION: This snippet shows how to create a container with an app directory mounted into it using the proposed Dagger GraphQL API. It uses the 'withMountedDirectory' field to mount a directory into an empty container.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/schema/README.md#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"An empty container with an app directory mounted into it\"\nquery appContainer($app: DirectoryID!) {\n  container {\n    withMountedDirectory(source: $app, path: \"/app\") {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Creating a Draft PR\nDESCRIPTION: Pushes the release preparation branch to the repository and creates a draft pull request. The PR number is captured for use in subsequent steps.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ngit push $DAGGER_REPO_REMOTE\ngh pr create --draft --title \"chore: prep for $ENGINE_VERSION\" --body \"\" | tee /tmp/prep-pr.txt\nexport RELEASE_PREP_PR=$(cat /tmp/prep-pr.txt | sed -r 's/^[^0-9]*([0-9]+).*/\\1/')\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module for TypeScript\nDESCRIPTION: Command to initialize a new Dagger module using the TypeScript SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=typescript --name=coding-agent\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger Python SDK via pip\nDESCRIPTION: Installation command for the Dagger Python SDK using pip package manager from PyPI repository\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install dagger-io\n```\n\n----------------------------------------\n\nTITLE: Querying Secret Plaintext with GraphQL\nDESCRIPTION: This GraphQL query retrieves the plaintext value of a secret identified by its ID. The secret ID is provided as an argument in the query. The expected output is the plaintext of the secret if it exists.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/secret/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  secret(id: \"eyJob3N0X2VudiI6IkhPTUUifQ==\") {\n    plaintext\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Data to Redis Service (System Shell)\nDESCRIPTION: Command to save data to a Redis service that uses a cache volume to persist state via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'set foo 123'\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger PHP Function with CLI and Constructor\nDESCRIPTION: These snippets show how the function calls will look depending on if a constructor is used. The first example calls the test method with the --dir argument on the test method. The second examples calls the test method with the --dir argument on the class itself. \nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndagger call test --dir=\"path/to/dir\"\n```\n\nLANGUAGE: text\nCODE:\n```\ndagger call --dir=\"path/to/dir\" test\n```\n\n----------------------------------------\n\nTITLE: Running Dagger API Clients with Dagger CLI\nDESCRIPTION: These commands use dagger run to execute the Rust and PHP clients, automating the setup of the Dagger Engine instance and environment variables.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-http.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger run cargo run\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger run php client.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies in pyproject.toml\nDESCRIPTION: TOML configuration for adding Python dependencies in the pyproject.toml file, showing how to specify requirements package.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\ndependencies = [\n    \"requirements>=2.32.3\",\n]\n```\n\n----------------------------------------\n\nTITLE: Manually Pruning Dagger Cache\nDESCRIPTION: This command manually frees up disk space used by the Dagger cache. It can be used to clear cache entries when automatic garbage collection is not sufficient.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cache.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger core engine local-cache prune\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request Example\nDESCRIPTION: This example showcases a direct GraphQL query execution using a client.  It demonstrates the basic structure of a GraphQL query and how to access the result.  While functional, this approach lacks the developer-friendly features of a dedicated Dagger client.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = client.execute(\n    gql(\"\"\"\n        query {\n          container {\n            from(address: \\\"python\\\") {\n              withExec(args: [\\\"python\\\", \\\"-V\\\"]) {\n                stdout\n              }\n            }\n          }\n        }\n        \"\"\"\n    )\n)\nprint(result['container']['from']['withExec']['stdout'])\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function in System Shell\nDESCRIPTION: This shell command demonstrates how to call the divide function using the Dagger CLI in a system shell. It shows the syntax for passing arguments to the function.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'divide 4 2'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Redis Service (Interactive Shell)\nDESCRIPTION: Command to retrieve data from a Redis service that restores state from a cache volume via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\nget foo\n```\n\n----------------------------------------\n\nTITLE: TypeScript SDK Dependencies in package.json\nDESCRIPTION: A JSON snippet showing the initial package.json configuration for a TypeScript Dagger module, including the local SDK dependency.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"typescript\": \"^5.3.2\"\n    \"@dagger.io/dagger\": \"./sdk\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Functions in Python\nDESCRIPTION: Python implementation of an example function that demonstrates how to use the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@object_type\nclass Examples:\n    @function\n    async def greeter_hello(self):\n        greeting = await dag.greeter().hello(\"World\")\n\n       \t# Do something with the greeting\n```\n\n----------------------------------------\n\nTITLE: Test Function Signature Template in Python\nDESCRIPTION: Python implementation of a standardized test function signature that either completes successfully or raises an exception.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@object_type\nclass Tests:\n    @function\n    async def your_test(self):\n        # Your test here\n\n        if false: # Your error condition here\n            raise Exception(\"test failed\")\n```\n\n----------------------------------------\n\nTITLE: Describing Dagger Engine DaemonSet\nDESCRIPTION: Retrieves detailed information about the deployed Dagger Engine DaemonSet in the dagger namespace.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe daemonset/dagger-dagger-helm-engine --namespace=dagger\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module with TypeScript SDK\nDESCRIPTION: Commands to initialize a Dagger module named 'my-module' and set up the development environment for TypeScript SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --name=my-module\ndagger develop --sdk=typescript\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Making PR Ready for Review\nDESCRIPTION: Pushes the final changes and marks the preparation PR as ready for review, taking it out of draft status.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ngit push\ngh pr ready\n```\n\n----------------------------------------\n\nTITLE: Installing Python SDK Locally for Testing\nDESCRIPTION: Command to install the Python SDK from a local path while in a virtual environment for testing purposes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install <PATH TO DAGGER FORK>/sdk/python\n```\n\n----------------------------------------\n\nTITLE: Configuring Go SDK for Local Testing\nDESCRIPTION: Commands to modify Go module dependencies to use a local version of the Dagger SDK for testing changes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -replace dagger.io/dagger=<PATH TO DAGGER FORK>/sdk/go\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: GitLab Runner Deployment for Kubernetes\nDESCRIPTION: This YAML configuration deploys a GitLab Runner in a Kubernetes cluster. It uses the configuration from the previous snippet to ensure the runner operates on nodes with pre-provisioned Dagger Engine instances.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/gitlab.mdx#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gitlab-runner\n  labels:\n    app: gitlab-runner\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gitlab-runner\n  template:\n    metadata:\n      labels:\n        app: gitlab-runner\n    spec:\n      serviceAccountName: gitlab-admin\n      containers:\n      - name: gitlab-runner\n        image: gitlab/gitlab-runner:alpine\n        imagePullPolicy: IfNotPresent\n        command: [\"/usr/bin/dumb-init\", \"--\"]\n        args: [\"sh\", \"-c\", \"cp /scripts/config.toml /etc/gitlab-runner/ && /entrypoint run --user=gitlab-runner --working-directory=/home/gitlab-runner\"]\n        volumeMounts:\n        - name: config\n          mountPath: /scripts\n          readOnly: true\n      volumes:\n      - name: config\n        configMap:\n          name: gitlab-runner\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables (Interactive Shell)\nDESCRIPTION: Command to set multiple environment variables in a container via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\nset-env-vars\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for PHP Dagger Modules\nDESCRIPTION: JSON configuration for composer.json to set up path repository and require the local Dagger SDK package in PHP projects.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"repositories\": [\n  {\n    \"type\": \"path\",\n    \"url\": \"./sdk\"\n  }\n],\n\"require\": {\n  \"dagger/dagger\": \"*@dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single Environment Variable (System Shell)\nDESCRIPTION: Command to set a single environment variable in a container via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c set-env-var\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Packages with npm\nDESCRIPTION: Command to add a TypeScript package (pm2) using npm.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install pm2\n```\n\n----------------------------------------\n\nTITLE: Building with Cached Dependencies (Dagger CLI)\nDESCRIPTION: Command to build an application using cached dependencies via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\ndagger call build --source=.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Builder Example\nDESCRIPTION: This snippet illustrates the use of a GraphQL query builder to dynamically construct queries. It provides a more structured approach compared to raw query strings.  While more flexible, it still involves passing strings for type, field, and argument names, which can be prone to errors.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds = DSLSchema(session.client.schema)\nquery = dsl_gql(\n    DSLQuery(\n        ds.Query.container.select(\n            getattr(ds.Container, \\\"from\\\")(address=\\\"python\\\").select(\n                ds.Container.with_exec(args=[\\\"python\\\", \\\"-V\\\"]).select(\n                    ds.Container.stdout\n                )\n            )\n        )\n))\nresult = session.execute(query)\nprint(result['container']['from']['withExec']['stdout'])\n```\n\n----------------------------------------\n\nTITLE: Graph Representation of Dagger Components and Interactions\nDESCRIPTION: The Mermaid graph visualizes the interaction between the Dagger CLI, GraphQL server, and modules A and B within the Dagger Engine. It highlights the session-based execution and interaction with the core API, extending functionality dynamically through modules.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/internals.mdx#2025-04-16_snippet_6\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph LR;\n\nsubgraph host[\"Client Host\"]\n    cli[\"Dagger CLI\"]\nend\n\nsubgraph runner[\"Dagger Engine\"]\n    direction LR\n    gql[\"GraphQL Server\\n(per-session)\"]\n\n    subgraph core[\"Core\"]\n        ctr[\"Container\"]\n        dir[\"Directory\"]\n        file[\"File\"]\n        etc[\"(etc.)\"]\n    end\n\n    subgraph ModA[\"Module A\"]\n        direction LR\n        FnA1[\"func Build(someArg string) *Container\"]\n        FnA2[\"func Test() error\"]\n        FnA3[\"func Deploy(someArg bool, someOtherArg *Secret) (string, error)\"]\n    end\n\n    subgraph ModB[\"Module B\"]\n        direction LR\n        FnB1[\"def foo(some_arg: int) -> dag.Container:\"]\n        FnB2[\"def bar(some_dir: dag.Directory) -> str:\"]\n    end\nend\n\ngql <-..-> core\n\ngql  <-..-> ModA\n\ngql  <-..-> ModB\n\ncli <-..-> gql\n```\n\n----------------------------------------\n\nTITLE: Exporting Container Image with Dagger (Interactive Shell)\nDESCRIPTION: Command to export a container image as an OCI tarball to a specified path on the host using Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\nbase | export /home/admin/mycontainer.tgz\n```\n\n----------------------------------------\n\nTITLE: Configuring Dagger CLI to Connect to Kubernetes Pod\nDESCRIPTION: Sets up the experimental runner host environment variable to direct Dagger CLI to connect to the Dagger Engine running as a Kubernetes pod.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n_EXPERIMENTAL_DAGGER_RUNNER_HOST=\"kube-pod://$DAGGER_ENGINE_POD_NAME?namespace=dagger\"\nexport _EXPERIMENTAL_DAGGER_RUNNER_HOST\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Test Module in Python\nDESCRIPTION: Terminal commands to create a Python test module and install dependencies for testing a Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tests\ncd tests\ndagger init --name=tests --sdk=python --source=.\ndagger install ..\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module with PHP SDK\nDESCRIPTION: Commands to initialize a Dagger module named 'my-module' and set up the development environment for PHP SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --name=my-module\ndagger develop --sdk=php\n```\n\n----------------------------------------\n\nTITLE: Creating Release Improvement PR\nDESCRIPTION: Commits and pushes the release improvement changes and creates a draft PR to document improvements made during the release process.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ngit add .  # or any other files changed during the last few steps\ngit commit -s -m \"Improve releasing during $ENGINE_VERSION\"\ngit push\ngh pr create --draft --title \"Improve releasing during $ENGINE_VERSION\" --body \"\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Module Dependency by Path\nDESCRIPTION: Shows how to uninstall a module dependency using the full repository path.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ndagger uninstall github.com/shykes/daggerverse/hello\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Dagger SDK\nDESCRIPTION: This command executes all tests for the Dagger SDK. It uses the source parameter to indicate the directory containing the test source files. Running tests is crucial to ensure the stability and reliability of the SDK during development.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/dotnet/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ dagger -m dev test --source=.\n```\n\n----------------------------------------\n\nTITLE: Using Native TypeScript Enum with Dagger\nDESCRIPTION: Example of using native TypeScript enum keyword to define enumerations without decorators in Dagger modules. This allows for more natural TypeScript syntax when defining enumerations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Example {\n  A = \"A\",\n  B = \"B\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Floating-Point Number Arguments in Dagger Functions\nDESCRIPTION: Demonstrates how to create a Dagger Function that accepts floating-point number arguments across different programming languages. The function adds two float values and returns the result.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n)\n\ntype MyModule struct{}\n\n// +dagger:function\nfunc (m *MyModule) AddFloat(ctx context.Context, a float64, b float64) float64 {\n\treturn a + b\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport dagger\n\n@dagger.object_type\nclass MyModule:\n    @dagger.function\n    def add_float(self, a: float, b: float) -> float:\n        return a + b\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, func, field, float } from \"@dagger.io/dagger\"\n\n@object()\nexport class MyModule {\n  @func()\n  addFloat(@field() a: float, @field() b: float): float {\n    return a + b\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyModule;\n\nuse Dagger\\Module;\nuse Dagger\\Function;\nuse Dagger\\Field;\n\n#[Module]\nclass MyModule\n{\n    #[Function]\n    public function addFloat(\n        #[Field] float $a,\n        #[Field] float $b\n    ): float {\n        return $a + $b;\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.dagger.*;\n\n@DaggerModule\npublic class MyModule {\n\n    @DaggerFunction\n    public float addFloat(float a, float b) {\n        return a + b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Filter Pattern Examples\nDESCRIPTION: Useful pattern examples for filtering in PHP including how to exclude tests, binaries, dependencies, and Git metadata.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// exclude PHPUnit tests and test data\n#[Ignore('tests/', '.phpunit.cache', '.phpunit.result.cache')]\n\n// exclude binaries\n#[Ignore('bin')]\n\n// exclude Composer dependencies\n#[Ignore('vendor/')]\n\n// exclude Node.js dependencies\n#[Ignore('**/node_modules')]\n\n// exclude Git metadata\n#[Ignore('.git/', '**/.gitignore')]\n```\n\n----------------------------------------\n\nTITLE: Setting CircleCI Environment Variables for GitHub\nDESCRIPTION: This YAML snippet shows how to set the CIRCLE_PIPELINE_NUMBER environment variable in a CircleCI workflow for GitHub repositories.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CIRCLE_PIPELINE_NUMBER: << pipeline.number >>\n```\n\n----------------------------------------\n\nTITLE: Setting Single Environment Variable (Interactive Shell)\nDESCRIPTION: Command to set a single environment variable in a container via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_71\n\nLANGUAGE: shell\nCODE:\n```\nset-env-var\n```\n\n----------------------------------------\n\nTITLE: Installing a Local Module Dependency\nDESCRIPTION: Example of installing a local module as a dependency using a relative path.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndagger install ./path/to/module\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs for PHP Dagger Development\nDESCRIPTION: Lisp code snippet to configure Emacs with Eglot for PHP development with Dagger, including autocompletion and IntelliSense.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_11\n\nLANGUAGE: lisp\nCODE:\n```\n(require 'eglot)\n(with-eval-after-load 'eglot\n  (add-to-list 'eglot-server-programs\n               '(php-mode . \"phpactor\"))\n  (add-hook 'php-mode-hook 'eglot-ensure))\n```\n\n----------------------------------------\n\nTITLE: Exporting File with Dagger CLI\nDESCRIPTION: Command to export a file returned by a Dagger Function to a specified path on the host using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\ndagger call get-file export --path=/home/admin/myfile\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables (System Shell)\nDESCRIPTION: Command to set multiple environment variables in a container via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c set-env-vars\n```\n\n----------------------------------------\n\nTITLE: Exporting File with Dagger (Interactive Shell)\nDESCRIPTION: Command to export a file returned by a Dagger Function to a specified path on the host using Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\nget-file | export /home/admin/myfile\n```\n\n----------------------------------------\n\nTITLE: Installing Tekton Git Clone Task\nDESCRIPTION: Command to install the git-clone Task from Tekton Hub, which adds repository cloning capabilities to Tekton Pipelines.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/tekton.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntkn hub install task git-clone\n```\n\n----------------------------------------\n\nTITLE: Running the Dagger install Command\nDESCRIPTION: The `dagger install` command installs a local module as a dependency to the current module. It requires specifying the module to install and optionally allows setting the engine API version, module path, and dependency name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger install github.com/shykes/daggerverse/hello@v0.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Example Module in Python\nDESCRIPTION: Terminal commands to create a Python example module that demonstrates and tests the greeter module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-tests.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p examples/python\ncd examples/python\ndagger init --name=examples/python --sdk=python --source=.\ndagger install ../..\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers. The file uses the wildcard (*) user-agent to apply rules to all bots and leaves the Disallow directive empty to permit full site access.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/test-the-application/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Client Connection Exceptions\nDESCRIPTION: Exceptions handling various connection and transport-related errors in Dagger client interactions\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/exceptions.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ClientError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ClientConnectionError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass TransportError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ExecuteTimeoutError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass InvalidQueryError(DaggerError)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Branch for Release\nDESCRIPTION: Git commands to prepare the local branch by syncing with the remote branch being released.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit checkout \"$RELEASE_BRANCH\"\n\ngit pull $DAGGER_REPO_REMOTE \"$RELEASE_BRANCH\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Hierarchical Command Structure in GraphQL Schema\nDESCRIPTION: Example GraphQL schema for implementing a hierarchical command structure, showing how parent commands like 'sdk' can have nested subcommands like 'go' and 'python' with their own specific command implementations.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/extension_implementation.md#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Query {\n    sdk(foo: String!) SDKTargets!\n}\n\ntype SDKTargets {\n    go: GoTargets!\n    python: PythonTargets!\n}\n\ntype GoTargets {\n    build(bar: String!) String!\n}\n\ntype PythonTargets {\n    test(baz: String!) String!\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger Update Example\nDESCRIPTION: Examples showing how to update a module to a specific version or update a local module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n\"dagger update github.com/shykes/daggerverse/hello@v0.3.0\" or \"dagger update hello\"\n```\n\n----------------------------------------\n\nTITLE: Updating CHANGELOG.md Files with Changie Merge\nDESCRIPTION: Merges the generated changes into CHANGELOG.md files for all components, commits these changes, and the release notes files.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nfind . sdk/go sdk/python sdk/typescript sdk/elixir sdk/php sdk/rust helm/dagger -maxdepth 1 -name .changie.yaml -execdir changie merge \\;\nfind . -name .changes -type d -exec git add {} \\;\nfind . -name CHANGELOG.md -type f -exec git add {} \\;\ngit commit -s -m \"chore: add release notes for $ENGINE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic Link for nerdctl as Docker Replacement\nDESCRIPTION: This command creates a symbolic link to the nerdctl executable and names it 'docker', allowing Dagger to use nerdctl as a drop-in replacement for Docker. It requires nerdctl to be already installed on the system.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/nerdctl.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s $(which nerdctl) /usr/local/bin/docker\n```\n\n----------------------------------------\n\nTITLE: Function Decorator for Dagger Modules\nDESCRIPTION: Decorator for defining and registering functions within the Dagger module system, potentially with special metadata or type handling\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/module.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@function\n```\n\n----------------------------------------\n\nTITLE: Testing with Error Handling (Dagger CLI)\nDESCRIPTION: Command to execute a Dagger Function that handles errors gracefully via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_87\n\nLANGUAGE: shell\nCODE:\n```\ndagger call test\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dagger Session Interface (DSI) Basic Flow with Mermaid Sequence Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the basic flow of the Dagger Session Interface (DSI). It shows the interactions between 'dagger run', localhost, SDK, and runner components, including the process of starting a runner, establishing connections, and executing GraphQL queries.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/d7yxc-operator_manual.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant dagger run\n    participant localhost\n    participant SDK\n    participant runner\n\n    alt _EXPERIMENTAL_DAGGER_RUNNER_HOST is NOT set\n        dagger run ->> runner : Start automatically via docker\n    end\n    dagger run ->> runner : Connect\n\n    activate dagger run\n\n    dagger run ->> localhost : Listen\n\n    dagger run ->> SDK : Exec child process with<br>$DAGGER_SESSION_PORT<br>$DAGGER_SESSION_TOKEN\n\n    loop\n        SDK ->> localhost : GraphQL Query Request (HTTP GET)\n        localhost ->> dagger run : GraphQL Query Request (HTTP GET)\n        dagger run ->> runner : Pipeline Execution\n        dagger run ->> localhost : GraphQL Query Response\n        localhost ->> SDK : GraphQL Query Response\n    end\n\n    deactivate dagger run\n```\n\n----------------------------------------\n\nTITLE: Dagger Develop Command Syntax\nDESCRIPTION: Command for preparing a local module for development, installing SDKs, and generating bindings\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndagger develop [options]\n```\n\n----------------------------------------\n\nTITLE: Ed25519 SSH Private Key Definition\nDESCRIPTION: OpenSSH private key using Ed25519 encryption algorithm. Used for secure SSH authentication and data encryption. This is a sensitive credential that should be kept private and secure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/integration/testdata/secretkey.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACDByv6+2VR1qSCok68vmVr1OVtE5+BVNOzAnkCpAoE3OgAAAJjc3cD+3N3A\n/gAAAAtzc2gtZWQyNTUxOQAAACDByv6+2VR1qSCok68vmVr1OVtE5+BVNOzAnkCpAoE3Og\nAAAEB7qb2S5G2DYZXYxFRLXrpCXIExAQG3QJe1dhkIiWTzNcHK/r7ZVHWpIKiTry+ZWvU5\nW0Tn4FU07MCeQKkCgTc6AAAAEGRvbGFub3JAYWxiaW9yaXgBAgMEBQ==\n-----END OPENSSH PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for TypeScript Dagger Modules\nDESCRIPTION: JSON configuration for tsconfig.json to enable experimental decorators and set up path mapping for the Dagger SDK in TypeScript projects.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    \"experimentalDecorators\": true,\n    \"paths\": {\n      \"@dagger.io/dagger\": [\"./sdk\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Calling Auto-generated Dagger Function (Shell)\nDESCRIPTION: Demonstrates how to call an auto-generated Dagger Function 'container-echo' to output a message.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-cli.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'container-echo \"Welcome to Dagger!\" | stdout'\n```\n\n----------------------------------------\n\nTITLE: Auto-Scaled Nodes Architecture Pattern Diagram\nDESCRIPTION: Mermaid diagram illustrating the auto-scaled nodes architecture pattern for Dagger on Kubernetes, showing how a node auto-scaler dynamically provisions and removes runner nodes based on workload.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph External APIs\n        SCM\n    end\n    rc --> SCM\n    controlplane --> runner-nodes\n    as --> controlplane\n\n    subgraph Kubernetes cluster\n        controlplane{{ Kubernetes control plane }}\n        rc -.-> runner1\n        rc -.-> runnern.1\n        rc -.-> runnern.2\n\n        subgraph support-nodes[Support nodes]\n            rc{{ Runner controller }}\n            cert-manager\n            as{{Node auto-scaler}}\n        end\n        subgraph runner-nodes[Runner nodes]\n            direction BT\n            subgraph node-n[Node n]\n                runnern.1{{ CI runner }} --> dagger-engine2[Dagger Engine]\n                runnern.2{{ CI runner }} --> dagger-engine2[Dagger Engine]\n            end\n            subgraph node-1[Node 1]\n                runner1{{ CI runner }} --> dagger-engine[Dagger Engine]\n            end\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Testing Dagger Module from GitHub PR\nDESCRIPTION: Example of calling a Dagger module that exists in a GitHub repository at a specific pull request branch. This allows testing the module's functionality from a specific PR branch.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m github.com/ORGANIZATION/REPOSITORY@pull/NUMBER/merge --help\n```\n\n----------------------------------------\n\nTITLE: Engine Provisioning Exceptions\nDESCRIPTION: Exceptions related to engine setup, download, and session management in Dagger\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/exceptions.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ProvisionError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass DownloadError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass SessionError(DaggerError)\n```\n\n----------------------------------------\n\nTITLE: Verifying the Released CLI Installation\nDESCRIPTION: Downloads and installs the newly released CLI version, creating a version-specific binary and symbolic link to verify the release was successful.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# install the cli to dagger-<version>, and symlink dagger to it\nexport BIN_DIR=$HOME/.local/bin\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=$ENGINE_VERSION sh\nmv $BIN_DIR/dagger{,-$ENGINE_VERSION}\nln -s $BIN_DIR/dagger{-$ENGINE_VERSION,}\n\ndagger version\ndagger core version\n```\n\n----------------------------------------\n\nTITLE: Elixir Project Structure\nDESCRIPTION: This snippet shows the directory structure of an Elixir application, specifically designed as a Dagger module.  It highlights the `lib` directory containing the Elixir source code and the `mix.exs` file for project configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/runtime/template/README.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── lib\n│   └── {{ .AppName }}.ex\n├── mix.exs\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Inspecting Dagger Cache Entries\nDESCRIPTION: This command displays metadata for all cache entries in the Dagger system. It provides detailed information about each cached item.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cache.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger core engine local-cache entry-set entries\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger TypeScript SDK via NPM\nDESCRIPTION: Command to install the Dagger TypeScript SDK as a development dependency in a Node.js project.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @dagger.io/dagger --save-dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Redis Service (Dagger CLI)\nDESCRIPTION: Command to retrieve data from a Redis service that restores state from a cache volume via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_81\n\nLANGUAGE: shell\nCODE:\n```\ndagger call get --key=foo\n```\n\n----------------------------------------\n\nTITLE: Tainting OpenShift Nodes for Dagger Engine\nDESCRIPTION: Command to taint specific nodes in OpenShift to ensure they are dedicated for Dagger Engine workloads. This prevents other workloads from being scheduled on these nodes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/openshift.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noc adm taint nodes NODE-NAME dagger-node=true:NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Linking Project to Local Dagger SDK\nDESCRIPTION: Command to link a project to the local Dagger SDK installation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/my_app # go into your project directory.\nnpm link @dagger.io/dagger # link install the package\n```\n\n----------------------------------------\n\nTITLE: Basic Dagger Uninstall Command\nDESCRIPTION: Command syntax for uninstalling a module as a dependency from the current module. Used for local module dependencies.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndagger uninstall [options] <module>\n```\n\n----------------------------------------\n\nTITLE: Querying Pipeline Container ID with GraphQL\nDESCRIPTION: This GraphQL query retrieves the ID of the container associated with a pipeline named \"build\", which is described as building the app container. The query targets the `pipeline` field, specifying the name and description. It then accesses the `container` field within the pipeline to retrieve its `id`.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/pipeline/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  pipeline(name: \"build\", description: \"Builds the app container\") {\n    container {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Index URLs\nDESCRIPTION: Example of configuring custom PyPI index URLs in pyproject.toml using the UV package installer. These settings control where Python packages are downloaded from.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.uv]\nindex-url = \"https://test.pypi.org/simple\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dagger Cloud Token as Environment Variable\nDESCRIPTION: Shows how to authenticate with Dagger Cloud by setting the DAGGER_CLOUD_TOKEN environment variable as an alternative to using the dagger login command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DAGGER_CLOUD_TOKEN={your token}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Environment with pip\nDESCRIPTION: Steps to set up a Python virtual environment using the standard pip package manager. It creates a venv, activates it, and installs dependencies from a lock file.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npython -m pip install -r requirements.lock -e ./sdk -e .\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function from Dagger Shell\nDESCRIPTION: Command to call the 'get-user' Dagger Function from the Dagger interactive shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nget-user\n```\n\n----------------------------------------\n\nTITLE: Running Dagger Engine with Custom CAs\nDESCRIPTION: Docker command to run a Dagger engine container with custom certificate authorities mounted from the host. The CAs should be placed in the ca-certificates directory and will be automatically installed on Dagger startup.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-ca.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm \\\n    -v /var/lib/dagger \\\n    -v $PWD/ca-certificates:/usr/local/share/ca-certificates/ \\\n    --name dagger-engine-custom \\\n    --privileged \\\n    registry.dagger.io/engine:v${daggerVersion}\n```\n\n----------------------------------------\n\nTITLE: Base Dagger Error Exception\nDESCRIPTION: Root exception class for all Dagger-specific errors, providing a base for more specific exception handling\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/exceptions.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DaggerError(Exception)\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function in GitHub Actions (Depot Runner)\nDESCRIPTION: This YAML snippet demonstrates how to call a Dagger Function on a Dagger Powered Depot runner in a GitHub Actions workflow. It specifies the runner and Dagger versions in the 'runs-on' clause.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/github-actions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: dagger\non:\n  push:\n    branches: [ main ]\n\njobs:\n  dagger:\n    runs-on: depot-dagger-0.9\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Dagger\n        uses: dagger/dagger-for-github@v5\n        with:\n          version: \"0.9.3\"\n          cmds: |    \n            project init\n            project update\n            call hello --name world\n        env:\n          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Decorating Object Types in Dagger\nDESCRIPTION: Decorator for defining object types within the Dagger module system, used for type annotation and metadata handling\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/module.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@object_type\n```\n\n----------------------------------------\n\nTITLE: Running the Publish Function in Dagger Shell\nDESCRIPTION: Command to run the 'publish' Dagger Function using Dagger Shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npublish\n```\n\n----------------------------------------\n\nTITLE: Waiting for Dagger Engine Pods to be Ready\nDESCRIPTION: Checks if the Dagger Engine pods are ready within a timeout period of 60 seconds using kubectl wait command.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl wait --for condition=Ready --timeout=60s pod \\\n    --selector=name=dagger-dagger-helm-engine --namespace=dagger\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Logging in engine.toml\nDESCRIPTION: TOML configuration to disable debug logging in engine.toml.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ndebug = false\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script with Dagger\nDESCRIPTION: Command to execute the JavaScript build script, which will build and test the React application using Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/publish-the-application/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Setting up the Dagger PHP Development Environment\nDESCRIPTION: This snippet shows the command to set up the development environment for a Dagger PHP module. The `-m` flag specifies the path to the module, either a git URL or a relative file path. This command generates SDK classes and creates a `src/` directory if it doesn't exist.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndagger develop -m <path-to-module>\n```\n\n----------------------------------------\n\nTITLE: Dagger Version Command\nDESCRIPTION: Command to display the current Dagger version information.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndagger version\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script with Dagger\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader, which will build and test the React application using Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/publish-the-application/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points in Python Modules\nDESCRIPTION: Example of configuring the main object entry point in pyproject.toml for a Dagger Python module. This setting tells Dagger where to import the main object from.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n\n[project.entry-points.\"dagger.mod\"]\nmain_object = \"my_module.main:MyModule\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: This code snippet imports the DocCardList component from the '@theme/DocCardList' module. It's used to create a list of documentation cards for configuration topics.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Running the Dagger login Command\nDESCRIPTION: The `dagger login` command logs the user into Dagger Cloud. It takes an optional organization parameter and inherits options from parent commands.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger login [options] [org]\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Daemon via Unix Socket with Dagger Functions\nDESCRIPTION: Examples of how to pass a Unix socket (Docker daemon socket) to a Dagger Function using different shell interfaces.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/arguments.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'github.com/sipsma/daggerverse/docker-client@v0.0.1 /var/run/docker.sock | version'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngithub.com/sipsma/daggerverse/docker-client@v0.0.1 /var/run/docker.sock | version\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/sipsma/daggerverse/docker-client@v0.0.1 call \\\n  --sock=/var/run/docker.sock version\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation with Dagger Module\nDESCRIPTION: Commands for testing documentation pull requests and running markdown lint checks using Dagger modules. Shows how to test specific PR changes and generate lint reports.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/_README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# test PR 7422\ndagger call -m github.com/dagger/dagger/docs@pull/7422/head docs server as-service up\n\n## get markdown lint report for PR 7422\ndagger call -m github.com/dagger/dagger/linters/markdown \\\n lint --source https://github.com/dagger/dagger#pull/7422/head \\\n json\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory with Dagger CLI\nDESCRIPTION: Command to export a directory returned by a Dagger Function to a specified path on the host using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ndagger call get-dir export --path=/home/admin/export\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable for Remote Dagger Engine\nDESCRIPTION: Example of setting the environment variable returned by the Fly.io deployment to connect to the remote Dagger Engine.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport _EXPERIMENTAL_DAGGER_RUNNER_HOST=tcp://dagger-v0-14-0-smart-gerhard-2024-12-06.internal:2345\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger Python SDK\nDESCRIPTION: Commands to install the Dagger Python SDK using uv package manager.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nuv add dagger-io\nuv add --script myscript.py dagger-io\n```\n\n----------------------------------------\n\nTITLE: Visualizing Monorepo Project Structure with Mermaid\nDESCRIPTION: A mermaid diagram showing the structure of a monorepo with separate modules for different projects like webapp frontend, backend, utilities, and docs.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Top-level orchestrator module] --> B[Webapp frontend module]\n    A[Top-level orchestrator module] --> C[Webapp backend module]\n    A[Top-level orchestrator module] --> D[Utilities module]\n    A[Top-level orchestrator module] --> E[Docs module]\n```\n\n----------------------------------------\n\nTITLE: Automatic Provisioning CLI Commands\nDESCRIPTION: Example CLI commands for dagger session configuration with workdir and config path settings, along with SDK-specific labels.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndagger session --workdir <path> --config-path <path> --label dagger.io/sdk.name:%s --label dagger.io/sdk.version:%s\n```\n\n----------------------------------------\n\nTITLE: Client Execution Exceptions\nDESCRIPTION: Exceptions related to query and execution errors during client operations, providing detailed error handling for different execution scenarios\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/exceptions.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass QueryError(DaggerError)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ExecError(DaggerError)\n```\n\n----------------------------------------\n\nTITLE: Running Dagger Application\nDESCRIPTION: Command to run the Dagger application using Cargo.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Python Module Structure\nDESCRIPTION: Illustrates the default file structure created when initializing a Python-based Dagger module. It includes project configuration files, source code directory, and the vendored SDK client library.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_dagger_module_init.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── LICENSE\n├── pyproject.toml\n├── uv.lock\n├── sdk\n├── src\n│   └── my_module\n│       ├── __init__.py\n│       └── main.py\n└── dagger.json\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dagger CLI Manually\nDESCRIPTION: Command to manually remove the Dagger CLI from the system. This removes the Dagger binary from the /usr/local/bin directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /usr/local/bin/dagger\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/test-the-application/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Dagger Repository for Contribution\nDESCRIPTION: Commands for forking, cloning the Dagger repository, and setting up the upstream remote to prepare for contributions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Clone repository\ngit clone git@github.com:$YOUR_GITHUB_USER/dagger.git\n\n# Add upstream origin\ngit remote add upstream git@github.com:dagger/dagger.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger Go SDK\nDESCRIPTION: Commands to install the Dagger Go SDK in an existing Go module and update dependencies.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo get dagger.io/dagger@latest\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Path in Dagger PHP Function\nDESCRIPTION: Demonstrates how to specify a default path using the DefaultPath attribute to access directories relative to dagger.json file location. The example shows a basic function structure with a Directory parameter.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\npublic function myDaggerFunction(\n    #[DefaultPath('.')]\n    Directory $dir,\n): Container {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes with Changie Batch\nDESCRIPTION: Runs changie batch for the engine and all SDKs to generate release notes files for the target version.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nfind . sdk/go sdk/python sdk/typescript sdk/elixir sdk/php sdk/rust helm/dagger -maxdepth 1 -name .changie.yaml -execdir changie batch $ENGINE_VERSION \\;\n```\n\n----------------------------------------\n\nTITLE: Saving Data to Redis Service (Dagger CLI)\nDESCRIPTION: Command to save data to a Redis service that uses a cache volume to persist state via the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\ndagger call set --key=foo --value=123\n```\n\n----------------------------------------\n\nTITLE: Stopping Dagger Engine Docker Container\nDESCRIPTION: Shell command to stop the automatically provisioned Dagger Engine Docker container after configuration changes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker rm -f $(docker ps -q --filter \"name=dagger-engine-*\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Go Module Structure\nDESCRIPTION: Shows the default file structure created when initializing a Go-based Dagger module. It includes configuration files, source code directory, and automatically generated helper packages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_dagger_module_init.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── LICENSE\n├── dagger.gen.go\n├── go.mod\n├── go.sum\n├── internal\n│   ├── dagger\n│   ├── querybuilder\n│   └── telemetry\n└── main.go\n└── dagger.json\n```\n\n----------------------------------------\n\nTITLE: Exporting Directory with Dagger (System Shell)\nDESCRIPTION: Command to export a directory returned by a Dagger Function to a specified path on the host using the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'get-dir | export /home/admin/export'\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic Link for Lima-nerdctl Script\nDESCRIPTION: This command creates a symbolic link to the nerdctl shell script wrapper for Lima and names it 'docker', allowing Dagger to use nerdctl through Lima as a replacement for Docker.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/nerdctl.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /usr/local/bin/nerdctl /usr/local/bin/docker\n```\n\n----------------------------------------\n\nTITLE: Destroying Remote Dagger Engine on Fly.io\nDESCRIPTION: Shell commands to unset the remote Dagger Engine environment variable and destroy the provisioned Fly.io application.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nunset _EXPERIMENTAL_DAGGER_RUNNER_HOST\n# Make sure the Fly app name matches the one that was provisioned earlier\ndagger -m github.com/samalba/dagger-modules/nvidia-gpu call destroy-dagger-on-fly --token env://FLYIO_TOKEN --app dagger-v0-14-0-smart-gerhard-2024-12-06\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module for Go\nDESCRIPTION: Command to initialize a new Dagger module using the Go SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=go --name=coding-agent\n```\n\n----------------------------------------\n\nTITLE: Installing development release of Dagger CLI on Windows\nDESCRIPTION: This command installs the latest development release of the Dagger CLI on Windows using PowerShell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex; Install-Dagger -DaggerCommit head\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module for Python\nDESCRIPTION: Command to initialize a new Dagger module using the Python SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=python --name=coding-agent\n```\n\n----------------------------------------\n\nTITLE: Running a Dagger Call\nDESCRIPTION: This command demonstrates how to execute a function (`container-echo`) from the generated Elixir Dagger module using the `dagger` CLI. It passes a string argument (`--string-arg=hello`) and prints the standard output to the console.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/runtime/template/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ dagger call container-echo --string-arg=hello stdout\nHello\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger TypeScript SDK\nDESCRIPTION: Commands to install the Dagger TypeScript SDK using npm or yarn.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n// using npm\nnpm install @dagger.io/dagger@latest --save-dev\n\n// using yarn\nyarn add @dagger.io/dagger --dev\n```\n\n----------------------------------------\n\nTITLE: Chaining Dagger Functions in System Shell\nDESCRIPTION: Shows how to chain Dagger functions using the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndagger <<EOF\ncontainer |\n  from alpine:latest |\n  with-entrypoint  cat /etc/os-release |\n  publish ttl.sh/my-alpine\nEOF\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function in Dagger Shell\nDESCRIPTION: This shell command shows how to call the divide function in Dagger's interactive shell mode. It demonstrates the simplified syntax for function calls in this environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndivide 4 2\n```\n\n----------------------------------------\n\nTITLE: Regenerating GitHub Workflow Files\nDESCRIPTION: Updates the GitHub workflow files to use the newly released Dagger version by regenerating them with the current CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_14\n\nLANGUAGE: console\nCODE:\n```\ndagger call -m .github generate directory --path=.github/workflows export --path=.github/workflows --wipe\n```\n\n----------------------------------------\n\nTITLE: Container Error Handling Shell Commands\nDESCRIPTION: Shell commands for obtaining exit codes and reports from failed container executions using different Dagger interfaces.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'test | exit-code'\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'test | report | contents'\n```\n\n----------------------------------------\n\nTITLE: Pinning Python Interpreter Version\nDESCRIPTION: A shell command to create a .python-version file for specifying the Python interpreter version in a Dagger module.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho \"3.11\" > .python-version\n```\n\n----------------------------------------\n\nTITLE: Updating Go Module Dependencies\nDESCRIPTION: Updates the Go module dependencies in the project and internal CI targets to reference the newly released version of Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# update deps\ngo mod edit -require dagger.io/dagger@$ENGINE_VERSION\ngo mod edit -require github.com/dagger/dagger/engine/distconsts@$ENGINE_VERSION\ngo mod tidy\ncd .dagger\ngo mod edit -require github.com/dagger/dagger/engine/distconsts@$ENGINE_VERSION\ngo mod tidy\ncd ..\n\ndagger develop --recursive .\ndagger develop --recursive ./releaser\n\n# add, commit and push the changes to the PR\ngit add .\ngit commit -s -m \"chore: bump internal tooling to $ENGINE_VERSION\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Manual Screen Recording Process for Documentation\nDESCRIPTION: Series of shell commands for manually creating and editing screen recordings for documentation. Includes setup, recording with asciinema, and conversion to GIF format.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/STYLE_GUIDE.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger logout\nexport PS1=\"$ \" >> ~/.bashrc\n# run each command once to warm the cache before recording\nasciinema rec --overwrite --cols=80 --rows=24  ~/images/debug-breakpoints.asc\nasciinema rec --overwrite --cols=80 --rows=24  ~/images/debug-interactive.asc\nasciinema rec --overwrite --cols=80 --rows=24  ~/images/service-container.asc\nasciinema rec --append --cols=80 --rows=24  ~/images/service-container.asc # in separate console\nasciinema rec --overwrite --cols=80 --rows=24  ~/images/service-host.asc\n# manually edit all .asc files to remove closing `$ exit`\n# manually edit `service-container.asc` file to insert line break `\\n` between terminal outputs\ncd ~/images\ndocker run --rm -it -u $(id -u):$(id -g) -v $PWD:/data agg <file>.asc <file>.gif\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: Imports the DocCardList React component from the theme to display a list of documentation cards without descriptions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList className=\"DocCardList--no-description\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Type for ES Modules\nDESCRIPTION: Command to set the package type to 'module' in package.json for ES module compatibility.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm pkg set type=module\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger Engine DaemonSet with Helm\nDESCRIPTION: Uses the Dagger Helm chart to create a Dagger Engine DaemonSet on a Kubernetes cluster, configuring it to best utilize local NVMe drives, reduce network latency, and simplify routing of Dagger SDK and CLI requests.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/ci/integrations/kubernetes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install --namespace=dagger --create-namespace \\\n    dagger oci://registry.dagger.io/dagger-helm\n```\n\n----------------------------------------\n\nTITLE: Replacing Embedded Snippets with File References (Go)\nDESCRIPTION: This snippet shows the command to run a Go script that replaces embedded code snippets with file references in the documentation files.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo run src/scripts/replace-embeds.go\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Module for Java\nDESCRIPTION: Command to initialize a new Dagger module using the Java SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/agent/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger init --sdk=java --name=coding-agent\n```\n\n----------------------------------------\n\nTITLE: Building Dagger.Codegen with Mix\nDESCRIPTION: These commands detail the process of building the Dagger.Codegen tool. The process begins by fetching the necessary dependencies using `mix deps.get`, followed by creating an executable script using `mix escript.build`. This script enables the tool to be run as a standalone executable.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/dagger_codegen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\n$ mix deps.get\n$ mix escript.build\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger PHP SDK\nDESCRIPTION: Command to install the Dagger PHP SDK using Composer.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require dagger/dagger\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace\nDESCRIPTION: A Go code snippet showing how to configure a Go workspace for managing multiple Dagger modules in a project.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-structure.mdx#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// go.work\ngo 1.21.7\n\nuse (\n\t./path/to/mymodule\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger SDK with Cargo\nDESCRIPTION: Command to add the Dagger SDK as a dependency to a Rust project using Cargo\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo add dagger-sdk\n```\n\n----------------------------------------\n\nTITLE: Object Documentation Examples\nDESCRIPTION: Demonstrates how to document object types and their fields across different programming languages in Dagger modules.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/documentation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dagger import field, object_type\n\n@object_type\nclass User:\n    \"\"\"A user in the system.\"\"\"\n\n    name: str = field(doc=\"The name of the user.\")\n    age: int = field(doc=\"The age of the user.\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A user in the system.\n */\n@object()\nclass User {\n  /**\n   * The name of the user.\n   */\n  @field()\n  name!: string\n\n  /**\n   * The age of the user.\n   */\n  @field()\n  age!: number\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage io.dagger.modules.mymodule;\n\nimport io.dagger.module.annotation.ObjectType;\nimport io.dagger.module.annotation.Field;\n\n/**\n * A user in the system.\n */\n@ObjectType\npublic class User {\n    /**\n     * The name of the user.\n     */\n    @Field\n    public String name;\n\n    /**\n     * The age of the user.\n     */\n    @Field\n    public Integer age;\n}\n```\n\n----------------------------------------\n\nTITLE: Container Debugging Shell Commands\nDESCRIPTION: Commands for executing container debugging functions and opening interactive terminal sessions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c container\n```\n\n----------------------------------------\n\nTITLE: Calling Dagger Function with CLI Arguments\nDESCRIPTION: This shell command illustrates how to call the divide function using the Dagger CLI with named arguments. It shows the syntax for specifying function parameters explicitly.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/error-handling.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndagger call divide --a=4 --b=2\n```\n\n----------------------------------------\n\nTITLE: Tagging and Releasing the New Version\nDESCRIPTION: After confirming all checks are green, this script checks out the release branch, creates a git tag for the new version, and pushes it to trigger the release process.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ngit checkout \"$RELEASE_BRANCH\"\ngit pull \"$DAGGER_REPO_REMOTE\" \"$RELEASE_BRANCH\"\n\nexport ENGINE_GIT_SHA=\"$(git rev-parse --verify HEAD)\"\ngit tag \"$ENGINE_VERSION\" \"$ENGINE_GIT_SHA\"\ngit push \"$DAGGER_REPO_REMOTE\" \"$ENGINE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Adding Go Workspace Files to .gitignore\nDESCRIPTION: Shell commands to add Go workspace files to .gitignore, preventing them from being committed to the repository.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho go.work >> .gitignore\necho go.work.sum >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Application Repository\nDESCRIPTION: Commands to clone the example Vue application repository and set it as the current working directory.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/quickstart/ci/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/dagger/hello-dagger\ncd hello-dagger\n```\n\n----------------------------------------\n\nTITLE: Executing Concurrent Functions (Interactive Shell)\nDESCRIPTION: Command to execute a Dagger Function that runs multiple test functions concurrently via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\nmy-module $(host | directory .) | run-all-tests\n```\n\n----------------------------------------\n\nTITLE: Defining a Flat Command Structure in GraphQL Schema\nDESCRIPTION: Example GraphQL schema for implementing a flat command structure, showing how simple commands like 'build' and 'test' are exposed directly on the Query type.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/extension_implementation.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Query {\n    build(foo: String!) String!\n    test(bar: String!) String!\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Feature Recordings with Dagger CLI\nDESCRIPTION: Shell command for auto-generating screen recordings for feature documentation pages. This uses the docs/recorder module and requires a GitHub token.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/STYLE_GUIDE.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndagger call generate-feature-recordings --base=../current_docs/features/snippets --github-token=<plaintext-token> export --path=/tmp/out\n```\n\n----------------------------------------\n\nTITLE: Running Dagger Examples with Cargo\nDESCRIPTION: Command to run example pipelines from the examples directory using Cargo\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --example first-pipeline\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Module Dependency by Name\nDESCRIPTION: Shows how to uninstall a module dependency using just the module name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/module-dependencies.mdx#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndagger uninstall hello\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with UV\nDESCRIPTION: Command to add a Python package (requests) using the UV package manager.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuv add requests\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger Python SDK via conda\nDESCRIPTION: Installation command for the Dagger Python SDK using conda package manager from conda-forge channel\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install dagger-io\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Build\nDESCRIPTION: Command to install required npm dependencies for the build process\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/multi-stage-build/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Breakpoints in PHP\nDESCRIPTION: Example of a PHP module that demonstrates how to set explicit breakpoints in a Dagger pipeline, allowing inspection at specific points during execution.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/debugging.mdx#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfile=./snippets/debugging-2/php/src/MyModule.php\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet demonstrates how to import React components (Tabs and TabItem) for use in a Markdown file. These components are likely used to create tabbed content within the documentation.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/clients-sdk.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Redis Service (System Shell)\nDESCRIPTION: Command to retrieve data from a Redis service that restores state from a cache volume via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c 'get foo'\n```\n\n----------------------------------------\n\nTITLE: Querying Container from Image Address using GraphQL\nDESCRIPTION: This snippet performs a GraphQL query to obtain configuration details from a specified image address, in this case, 'alpine'. It requires a GraphQL server capable of understanding container queries. The expected input is the image address, and the query returns container-related data like default arguments, entrypoint, platform details, and root filesystem entries.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/container/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  container {\n    from(address: \"alpine\") {\n      defaultArgs\n      entrypoint\n      platform\n      rootfs {\n        entries\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script with Dagger\nDESCRIPTION: Alternative command to execute the JavaScript version of the build script to build and test the React application with Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/existing-dockerfile/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Changie Release Process in Bash\nDESCRIPTION: Sets the CHANGIE_ENGINE_VERSION environment variable to be used during the release process. This is required to interpolate the engine version into SDK release notes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport CHANGIE_ENGINE_VERSION=\"$ENGINE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Testing with Error Handling (Interactive Shell)\nDESCRIPTION: Command to execute a Dagger Function that handles errors gracefully via Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\ntest\n```\n\n----------------------------------------\n\nTITLE: Determining Next Dagger Release Version\nDESCRIPTION: Uses Dagger CLI to determine the next release version based on the current version and specified release type (patch/minor/major).\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport ENGINE_VERSION=\"$(dagger call -m version next-release-version)\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Introspection Response in Node.js\nDESCRIPTION: This code snippet writes the introspection response to a JSON file for debugging purposes. It should be added to the 'website/docs-graphql/custom-theme/data/index.js' file to output the metadata extracted from the core schema.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  fs.writeFileSync(path.resolve(`${__dirname}/../../data/introspection.json`), JSON.stringify(introspectionResponse, null, 2))\n```\n\n----------------------------------------\n\nTITLE: Checking installed Dagger CLI version on macOS\nDESCRIPTION: This command displays the installed version of the Dagger CLI on macOS.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./bin/dagger version\n# Expected output: dagger v${daggerVersion} (registry.dagger.io/engine:v${daggerVersion}) darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger SDK with Cargo\nDESCRIPTION: Command to install the Dagger SDK using Cargo package manager.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --example first-pipeline\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo add dagger-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with Poetry\nDESCRIPTION: Command to add a Python package (requests) using Poetry package manager.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry add requests\n```\n\n----------------------------------------\n\nTITLE: Initializing Dagger Function in Elixir\nDESCRIPTION: This shell command initializes a new Dagger project with the specified SDK. Replace <name> with your project's intended module name. Ensure you have the Dagger CLI installed and compatible with your environment.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ dagger init --sdk=elixir <name>\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders the DocCardList component with a specific className. The className 'DocCardList--no-description' suggests that the list items will not display descriptions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList className=\"DocCardList--no-description\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Default PHP Module Structure\nDESCRIPTION: Shows the default file structure created when initializing a PHP-based Dagger module. It includes project configuration files, source code directory, and the PHP SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_dagger_module_init.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── composer.json\n├── composer.lock\n├── dagger.json\n├── LICENSE\n├── README.md\n├── sdk\n├── src\n│    └── MyModule.php\n└── vendor\n```\n\n----------------------------------------\n\nTITLE: Linking Local Dagger SDK Development Setup\nDESCRIPTION: Commands for creating and using npm links to develop with a local version of the Dagger SDK.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/dagger/sdk/typescript # go into the package directory\nnpm link # creates global link\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Host Interactions\nDESCRIPTION: This GraphQL query demonstrates several host interactions within a Dagger environment. It reads the contents of a specific file, retrieves the values of environment variables (HOME, PWD), and creates a new file with specified content, then exports the changes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/host/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  host {\n    read: directory(path: \".\") {\n      file(path: \".markdownlint.yaml\") {\n        contents\n      }\n    }\n    home: envVariable(name: \"HOME\") {\n      value\n    }\n    pwd: envVariable(name: \"PWD\") {\n      value\n    }\n    write: directory(path: \".\") {\n      withNewFile(path: \"greeting\", contents: \"Hello Dagger!\") {\n        export(path: \".\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script\nDESCRIPTION: Command to execute the JavaScript build script directly with Node.js\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/logging/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Running Development Tasks with Dagger Module\nDESCRIPTION: Shell commands for running various development tasks like testing, linting, formatting, and documentation preview using Dagger module\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m dev\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m dev test default\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m dev lint\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m dev format export --path=.\n```\n\nLANGUAGE: shell\nCODE:\n```\nuv lock -U\n```\n\nLANGUAGE: shell\nCODE:\n```\ndagger call -m dev docs preview up\n```\n\n----------------------------------------\n\nTITLE: Introspecting using Dagger command line\nDESCRIPTION: This command is used to perform introspection on the Dagger SDK, exporting the output to a specified JSON file. It helps developers understand the internal structures and configurations of the SDK. The command requires the path parameter to define where the output will be stored.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/dotnet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ dagger -m dev introspect export --path=./sdk/Dagger.SDK/introspection.json\n```\n\n----------------------------------------\n\nTITLE: Visualizing DSI Advanced Automatic Provisioning Process with Mermaid Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the advanced automatic provisioning process for Dagger's SDK. It shows the interactions between the SDK, CLI distribution, localhost, Dagger session, and runner, including conditional flows for CLI binary download and runner host configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/core/docs/d7yxc-operator_manual.md#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant CLI distribution\n    participant SDK\n    participant localhost\n    participant dagger session\n    participant runner\n\n    alt _EXPERIMENTAL_DAGGER_CLI_BIN is NOT set\n        SDK ->> CLI distribution : https://dl.dagger.io/dagger/releases/<version>/checksums.txt\n        CLI distribution ->> SDK  : HTTP Response\n        SDK ->> CLI distribution : https://dl.dagger.io/dagger/releases/<version>/<platform specific archive>\n        CLI distribution ->> SDK  : HTTP Response\n        SDK ->> SDK : verify downloaded archive matches checksum\n        SDK ->> dagger session : cache CLI bin in XDG_CACHE_HOME\n    end\n\n    SDK ->> dagger session : Fork/exec child process\n\n    alt _EXPERIMENTAL_DAGGER_RUNNER_HOST is NOT set\n        dagger session ->> runner : Start automatically via docker\n    end\n    dagger session ->> runner : Connect\n\n    activate dagger session\n\n    dagger session ->> localhost : Listen\n\n    dagger session ->> SDK : Write JSON encoded port and token to stdout pipe\n\n    loop\n        SDK ->> localhost : GraphQL Query Request (HTTP GET)\n        localhost ->> dagger session : GraphQL Query Request (HTTP GET)\n        dagger session ->> runner : Pipeline Execution\n        dagger session ->> localhost : GraphQL Query Response\n        localhost ->> SDK : GraphQL Query Response\n    end\n\n    deactivate dagger session\n```\n\n----------------------------------------\n\nTITLE: Querying Default Platform in GraphQL\nDESCRIPTION: This snippet executes a GraphQL query to retrieve the default platform value from the API. It does not require any specific dependencies and interacts seamlessly with the GraphQL server for fetching data. The expected output is the current default platform represented in the response.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/defaultPlatform/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"query {\\n  defaultPlatform\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in engine.toml\nDESCRIPTION: TOML configuration to enable debug logging in engine.toml.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ndebug = true\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI interactively on Windows\nDESCRIPTION: This command initiates an interactive installation process for the Dagger CLI on Windows.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex; Install-Dagger -Interactive\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in engine.json\nDESCRIPTION: JSON configuration to set the log level in engine.json. This example sets it to 'error'.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevel\": \"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Error Handling (System Shell)\nDESCRIPTION: Command to execute a Dagger Function that handles errors gracefully via the system shell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/cookbook/cookbook.mdx#2025-04-16_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\ndagger -c test\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI with PowerShell on Windows\nDESCRIPTION: This command downloads and executes the install.ps1 script to install the Dagger CLI on Windows using PowerShell.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex; Install-Dagger\n```\n\n----------------------------------------\n\nTITLE: Universal Web Crawler Permissions\nDESCRIPTION: Allows all web crawlers to access all pages on the Dagger documentation site and specifies the location of the sitemap\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/static/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\\nAllow: /\\nSitemap: https://docs.dagger.io/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring pyproject.toml for Hatch\nDESCRIPTION: TOML configuration for pyproject.toml to allow direct references and add the local SDK library as a dev dependency when using Hatch.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/ide-integration.mdx#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"main\"\nversion = \"0.0.0\"\n\n[tool.hatch.metadata]\nallow-direct-references = true\n\n[tool.hatch.envs.dev]\ndependencies = [\n  \"dagger-io @ {root:uri}/sdk\",\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Dagger SDK from Repository in Elixir\nDESCRIPTION: This Elixir snippet demonstrates how to add the Dagger SDK as a dependency from its GitHub repository. Ensure your project has access to GitHub and include the dependency in your Elixir project configuration.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/elixir/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Elixir\nCODE:\n```\ndef deps do\n  [\n    {:dagger, github: \"dagger/dagger\", sparse: \"sdk/elixir\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Git Contents in a Repository - GraphQL\nDESCRIPTION: This snippet executes a GraphQL query to fetch the contents of the '.git/refs/heads/main' file from the specified Git repository. It requires a valid URL to the Git repository and ensures that the Git directory is retained for accurate querying. The expected output is the contents of the requested file within the Git structure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/git/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  git(url: \"https://github.com/dagger/dagger\", keepGitDir: true) {\n    branch(name: \"main\") {\n      tree {\n        file(path: \".git/refs/heads/main\") {\n          contents\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/logging/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Build Pipeline\nDESCRIPTION: Command to install required npm dependencies for the build system.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/caching/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dagger CLI with Homebrew\nDESCRIPTION: Command to uninstall the Dagger CLI using Homebrew package manager. This removes the Dagger package managed by Homebrew.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall dagger\n```\n\n----------------------------------------\n\nTITLE: Updating a Pull Request with Latest Changes\nDESCRIPTION: Commands for keeping a feature branch up-to-date with the main branch before merging, using git rebase workflow.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Checkout main branch\ngit checkout main\n\n# Update your fork's main branch from upstream\ngit pull upstream main\n\n# Checkout your feature branch\ngit checkout my_feature_branch\n\n# Rebase your feature branch changes on top of the updated main branch\ngit rebase main\n\n# Update your pull request with latest changes\ngit push -f my_feature_branch\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript SDK for Local Testing\nDESCRIPTION: Instructions for building the TypeScript SDK locally and updating package.json to reference the local SDK path for testing.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: json\nCODE:\n```\n\"@dagger.io/dagger\": \"<PATH TO DAGGER FORK>/dagger/sdk/typescript\",\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with pip\nDESCRIPTION: Command to install Python packages from pyproject.toml using standard pip.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install -e ./sdk -e .\n```\n\n----------------------------------------\n\nTITLE: Removing Dagger Cache and Config on macOS\nDESCRIPTION: Commands to remove Dagger cache and configuration directories on macOS. This deletes the Dagger-specific folders from the user's Library.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/install.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/Library/Caches/dagger\nrm -rf ~/Library/Application\\ Support/dagger\n```\n\n----------------------------------------\n\nTITLE: Running the Dagger logout Command\nDESCRIPTION: The `dagger logout` command logs the user out from Dagger Cloud. It integrates with inherited options for managing verbosity and interactivity.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"dagger logout\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Java Module Structure\nDESCRIPTION: Illustrates the default file structure created when initializing a Java-based Dagger module. It includes project configuration files, source code directory, and generated Dagger code for Java-specific library, module types, and entrypoint.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_dagger_module_init.mdx#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── dagger.json\n├── pom.xml\n├── src\n│   └── main\n│       └── java\n│           └── io\n│               └── dagger\n│                   └── modules\n│                       └── mymodule\n│                           ├── MyModule.java\n│                           └── package-info.java\n└── target\n    └── generated-sources\n        ├── dagger-io\n        ├── dagger-module\n        └── entrypoint\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI to custom location on Windows\nDESCRIPTION: This command installs the Dagger CLI to a specified custom location on Windows.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex; Install-Dagger -InstallPath C:\\tools\\dagger\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access all content on the website. The file follows the robots exclusion protocol, specifying that no paths are disallowed for any user agent.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/multi-stage-build/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Defines the default access rules for web crawlers, allowing all user agents full access to the site with no restrictions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/logging/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Java Filter Pattern Examples\nDESCRIPTION: Useful pattern examples for filtering in Java including how to exclude tests, binaries, dependencies, and Git metadata.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/fs-filters.mdx#2025-04-16_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// exclude Java tests and test data\n@Ignore({\"src/test\"})\n\n// exclude binaries\n@Ignore({\"bin\"})\n\n// exclude Python dependencies\n@Ignore({\"**/.venv\", \"**/__pycache__\"})\n\n// exclude Node.js dependencies\n@Ignore({\"**/node_modules\"})\n\n// exclude Git metadata\n@Ignore({\".git\", \"**/.gitignore\"})\n```\n\n----------------------------------------\n\nTITLE: SDK Architecture Diagram\nDESCRIPTION: This diagram illustrates the architecture of a Dagger SDK, highlighting the key components: Codegen, Connect, and Dagger client. It shows the relationships between these components, emphasizing the flow of data and the dependencies between them.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Connect\n        E[Automatic provisioning]\n        G[GraphQL session]\n        E -->|Connection params| G\n    end\n    CG(Codegen)-.-> C\n    Connect-->|GraphQL client| C[Dagger client]\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Volume ID in GraphQL\nDESCRIPTION: This GraphQL query retrieves the ID of a cache volume with the key 'deps'. It uses the cacheVolume query with a key parameter to fetch the corresponding ID.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/cacheVolume/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  cacheVolume(key: \"deps\") {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dagger CLI installation on Windows\nDESCRIPTION: This command verifies the installation of the Dagger CLI on Windows by locating the executable.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nwhere.exe dagger\n# Expected output: C:\\<your home folder>\\dagger\\dagger.exe\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.8.0\nDESCRIPTION: Details breaking changes to the engine API, addition of Host.setSecretFile functionality, and Alpine version update.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.8.0 - 2023-08-03\n\n### 🔥 Breaking Changes\n- engine: remove API deprecations\n- engine: Rename `id` argument in `Container.withRootfs`\n\n### Added\n- engine: implement `Host.setSecretFile` to securely set binary files as secrets\n\n### Fixed\n- engine: Bump Alpine version to fix service DNS resolution\n```\n\n----------------------------------------\n\nTITLE: Importing Examples Component in JSX/MDX\nDESCRIPTION: Imports a React component called 'Examples' from the site's components directory. This component is used to display real-world examples of Dagger in action.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/examples.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Examples from '@site/src/components/Examples';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Build\nDESCRIPTION: Command to install required Node.js dependencies for the build process\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/logging/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Watching SDK Files During Development\nDESCRIPTION: Command to watch and automatically recompile SDK files during development.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/typescript/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/dagger/sdk/typescript # go into the package directory\nyarn watch # Recompile the code when input files are modified\n```\n\n----------------------------------------\n\nTITLE: Dagger Uninstall Example\nDESCRIPTION: Example showing how to uninstall a module named 'hello'.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndagger uninstall hello\n```\n\n----------------------------------------\n\nTITLE: Setting CircleCI Environment Variables for GitLab\nDESCRIPTION: This YAML snippet demonstrates how to set multiple environment variables in a CircleCI workflow for GitLab repositories, including pipeline number, trigger login, repo URL, and repo full name.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CIRCLE_PIPELINE_NUMBER: << pipeline.number >>\n  CIRCLE_PIPELINE_TRIGGER_LOGIN: << pipeline.trigger_parameters.gitlab.user_username >>\n  CIRCLE_PIPELINE_REPO_URL: << pipeline.trigger_parameters.gitlab.repo_url >>\n  CIRCLE_PIPELINE_REPO_FULL_NAME: << pipeline.trigger_parameters.gitlab.repo_name >>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.6.3\nDESCRIPTION: Documents additions of cloud cache functionality and image format compatibility improvements, along with core and CLI fixes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.6.3 - 2023-07-04\n\n### Added\n* cache: Set default Cloud Cache URL\n* engine: Add Cloud Cache token env var\n* core: Improve image publish/export format compatibility\n* core: Send Progrock updates to Cloud\n\n### Fixed\n* core: Use include filter in host.file\n* cli: Fix incorrect subcommand being called\n* engine: Remove old Cache config env from autoprovision\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.6.4\nDESCRIPTION: Lists additions including directory and file sync features, container focus controls, and host directory copying improvements.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.6.4 - 2023-07-19\n\n### Added\n- cli: show total duration at the end of a run\n- engine: add `Directory.Sync`\n- engine: add `File.Sync`\n- engine: add `Container.WithFocus` & `Container.WithoutFocus`\n- engine: add `include` & `exclude` to host dir copy name\n\n### Deprecated\n- engine: deprecate `exitCode`\n\n### Fixed\n- engine: prevent session id from busting caches everywhere\n- engine: optimize `WithDirectory` & `WithFile` via MergeOp\n- engine: remove unimplemented git fields\n- engine: support optionally setting explicit OCI mediatypes\n```\n\n----------------------------------------\n\nTITLE: Dagger Client Abstraction Diagram\nDESCRIPTION: This diagram illustrates the abstraction layers within the Dagger client, highlighting the progression from HTTP requests to the GraphQL endpoint, GraphQL request building, and finally, the Dagger Client itself. It showcases the steps involved in crafting and sending a request.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph C[Dagger Client]\n        subgraph G[GraphQL query builder]\n            subgraph R[GraphQL request]\n                H[HTTP request]\n            end\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI with Homebrew on macOS\nDESCRIPTION: This command installs the latest stable release of the Dagger CLI using Homebrew on macOS.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install dagger/tap/dagger\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabs in Markdown\nDESCRIPTION: This code snippet imports React components for creating tabbed content in Markdown documentation. It uses the '@theme/Tabs' and '@theme/TabItem' components, likely from a documentation framework.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/playground.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install required Node.js dependencies for the project.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/build-the-application/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script\nDESCRIPTION: Command to execute the JavaScript build script\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/test-the-application/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Installing development release of Dagger CLI on macOS/Linux\nDESCRIPTION: This command installs the latest development release of the Dagger CLI on macOS or Linux.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_COMMIT=head sh\n```\n\n----------------------------------------\n\nTITLE: Dagger Update Command\nDESCRIPTION: Command syntax for updating a dependency to its latest version or a specified version. Only works with local modules.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndagger update [options] <module>\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Packages with Composer\nDESCRIPTION: Command to add a PHP package (phpunit) using Composer.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/packages.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require phpunit/phpunit\n```\n\n----------------------------------------\n\nTITLE: Viewing Dagger CLI installation options on Windows\nDESCRIPTION: This command displays all available options for installing the Dagger CLI on Windows.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\niwr -useb https://dl.dagger.io/dagger/install.ps1 | iex; gcm -Name Install-Dagger -Syntax\n```\n\n----------------------------------------\n\nTITLE: Replacing Image Paths in Markdown Files (Markdown)\nDESCRIPTION: This snippet demonstrates the process of updating image paths in Markdown files for archived documentation versions, ensuring that images are correctly referenced in the new directory structure.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Replace `/img` paths with `/0.1/img` paths\n- Replace `/img` paths with `/0.2/img` paths\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Build with Dagger\nDESCRIPTION: Command to install the required npm dependencies before running the build process.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/publish-the-application/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands for Sub-sites (Shell)\nDESCRIPTION: These commands show how to build the documentation sub-sites for different Dagger versions using npm and store the resulting build directories.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:withoutAuth\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Preparation Branch in Git\nDESCRIPTION: Creates a new git branch named after the target version for preparing the release. This branch will contain version bumps and release notes.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b prep-$ENGINE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI in user's home directory on Linux\nDESCRIPTION: This command installs the Dagger CLI in the user's home directory on Linux systems.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=$HOME/.local/bin sh\n```\n\n----------------------------------------\n\nTITLE: Setting CircleCI Environment Variables for Atlassian BitBucket\nDESCRIPTION: This YAML snippet shows how to set the CIRCLE_PIPELINE_NUMBER environment variable in a CircleCI workflow for Atlassian BitBucket repositories.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/cloud.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  CIRCLE_PIPELINE_NUMBER: << pipeline.number >>\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script with Dagger\nDESCRIPTION: Command to execute the TypeScript build script using ts-node loader to build and test the React application with Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/existing-dockerfile/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Noindex Metadata in Docusaurus Config (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add noindex metadata to the Docusaurus configuration file for archived documentation versions, preventing search engines from indexing the archived pages.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthemeConfig: {\n  metadata: [\n    { name: 'robots', content: 'noindex, nofollow' },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Trace Logging in engine.toml\nDESCRIPTION: TOML configuration to disable trace logging in engine.toml.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/engine.mdx#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\ntrace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Announcement Bar in Docusaurus Config (JavaScript)\nDESCRIPTION: This snippet shows how to add an announcement bar to the Docusaurus configuration file for archived documentation versions. It includes the announcement text, styling, and configuration options.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthemeConfig: {\n  //\n  announcementBar: {\n    id: 'unmaintained_docs',\n    content:\n      'This is the documentation for Dagger 0.1.x, which is no longer maintained. We encourage you to upgrade. For up-to-date documentation, visit <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.dagger.io\">docs.dagger.io</a>.',\n    backgroundColor: '#fcc009',\n    textColor: '#000000',\n    isCloseable: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dagger CLI with Windows Package Manager\nDESCRIPTION: This command installs the Dagger CLI using the Windows Package Manager (winget).\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/partials/_install-cli.mdx#2025-04-16_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Dagger.Cli\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script\nDESCRIPTION: Command to execute the JavaScript build script directly with Node.js\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/multi-stage-build/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.8.1\nDESCRIPTION: Documents fixes for CLI command progress display, core image configuration, file exports, and engine version reporting.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.8.1 - 2023-08-04\n\n### Fixed\n- cli: fix `dagger run` not showing command progress\n- core: fix setting image config during multiplatform export+publish\n- core: fix exports of files larger than default grpc max message size\n- engine: report correct engine version by stamping engine image too\n- core: handle v prefix in version compatibility check\n```\n\n----------------------------------------\n\nTITLE: Creating Release Improvement Branch\nDESCRIPTION: Creates a branch for post-release improvements to the release process itself.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b improve-releasing-during-$ENGINE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Deleting Search and Algolia Configuration (JavaScript)\nDESCRIPTION: This snippet shows the process of removing the search bar and Algolia search configuration from the Docusaurus configuration file for archived documentation versions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/ARCHIVING.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete search bar\n{\n  type: \"search\",\n  position: \"right\",\n  className: \"header-searchbar\",\n},\n\n// Delete Algolia search config\nalgolia: {\n  apiKey: \"bffda1490c07dcce81a26a144115cc02\",\n  indexName: \"dagger\",\n  appId: \"XEIYPBWGOI\",\n},\n```\n\n----------------------------------------\n\nTITLE: Generating Quickstart Recordings with Dagger CLI\nDESCRIPTION: Shell command for auto-generating screen recordings specifically for quickstart documentation pages using the Dagger CLI.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/STYLE_GUIDE.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndagger call generate-quickstart-recordings --base=../current_docs/ci/quickstart/snippets export --path=/tmp/out\n```\n\n----------------------------------------\n\nTITLE: Querying Socket Information with GraphQL\nDESCRIPTION: This GraphQL snippet performs a query to retrieve information about a socket based on a specified ID. There are no explicit dependencies, but it assumes that a GraphQL server is running with the appropriate schema to handle the 'socket' query. The query expects a string ID as a parameter and returns the socket ID. The retrieved socket data is limited to the ID field.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/docs-graphql/data/examples/queries/socket/gql.md#2025-04-16_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  socket(id: \\\"eyJob3N0X3BhdGgiOiIvdmFyL3J1bi9kb2NrZXIuc29jayJ9\\\") {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Contributing Guide in Markdown\nDESCRIPTION: This code snippet imports the content of the CONTRIBUTING.md file and displays it in the current document. It uses a custom React component to render the imported content.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/contributing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport PartialContributing from '../../CONTRIBUTING.md';\n\n# Contributing to Dagger\n\n<PartialContributing />\n```\n\n----------------------------------------\n\nTITLE: Implementing Ignore Pattern in Dagger PHP Function\nDESCRIPTION: Shows how to use the Ignore attribute to exclude specific directories from processing. The example demonstrates excluding vendor and tests directories using gitignore syntax.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n#[DaggerFunction]\npublic function myDaggerFunction(\n    #[DefaultPath('.')]\n    #[Ignore('vendor/', 'tests/')]\n    Directory $dir,\n): Container {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dagger CLI Global Options\nDESCRIPTION: Global configuration options applicable across different Dagger CLI commands, including debugging, verbosity, and interaction settings\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/reference/cli.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-llm strings            List of URLs of remote modules allowed to access LLM APIs, or 'all' to bypass restrictions for the entire session\n  -c, --command string               Execute a dagger shell command\n  -d, --debug                        Show debug logs and full verbosity\n  -i, --interactive                  Spawn a terminal on container exec failure\n      --interactive-command string   Change the default command for interactive mode (default \"/bin/sh\")\n  -m, --mod string                   Path to the module directory. Either local path or a remote git repo\n      --model string                 LLM model to use (e.g., 'claude-3-5-sonnet', 'gpt-4o')\n  -E, --no-exit                      Leave the TUI running after completion\n  -M, --no-mod                       Don't load module during shell startup (mutually exclusive with --mod)\n      --progress string              Progress output format (auto, plain, tty) (default \"auto\")\n  -q, --quiet count                  Reduce verbosity (show progress, but clean up at the end)\n  -s, --silent                       Do not show progress at all\n  -v, --verbose count                Increase verbosity (use -vv or -vvv for more)\n  -w, --web                          Open trace URL in a web browser\n```\n\n----------------------------------------\n\nTITLE: Calling a Dagger Function via CLI\nDESCRIPTION: This snippet demonstrates how to call a Dagger function from the command line using the Dagger CLI.  The `-m` flag specifies the path to the module, and the function name `container-echo` is called with the argument `--string-arg`.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/php/runtime/template/README.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndagger call -m <path-to-module> container-echo --string-arg=\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script\nDESCRIPTION: Command to execute the JavaScript build script directly with Node.js.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/build-the-application/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Build Script\nDESCRIPTION: Command to execute the TypeScript build pipeline using ts-node loader.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/caching/app/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm ./build.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Build\nDESCRIPTION: Command to install the required npm dependencies for the build process\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/test-the-application/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules in robots.txt\nDESCRIPTION: Simple robots.txt configuration that sets default access rules for web crawlers. This configuration allows all user agents (*) to access all content on the site with no restrictions.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/existing-dockerfile/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dagger API using dagger.Connect()\nDESCRIPTION: This code snippet demonstrates the general convention for connecting to the Dagger API using a `dagger.Connect()` function.  It receives configuration parameters from the user and returns a client instance for interacting with the Dagger Engine. Closing the GraphQL client session must be handled gracefully.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"# Pseudo: depends on what's most idiomatic for the language\nclient = dagger.Connect(dagger.Config())\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Bump Changes with Changie\nDESCRIPTION: Uses the Changie tool to generate change entries for each SDK and the Helm charts, documenting the engine version bump as a dependency update.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/RELEASING.md#2025-04-16_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nexport GITHUB_USERNAME=$(gh api /user --jq .login)\nfind sdk/go sdk/python sdk/typescript sdk/elixir sdk/php sdk/rust helm/dagger -maxdepth 1 -name .changie.yaml -execdir \\\n      changie new --kind \"Dependencies\" --body \"Bump Engine to $ENGINE_VERSION\" --custom PR=\"$RELEASE_PREP_PR\" --custom Author=\"$GITHUB_USERNAME\" \\;\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component for Dagger Features in JSX\nDESCRIPTION: This code snippet renders the DocCardList component, which automatically generates a list of feature pages for the Dagger project documentation. It's typically used in documentation sites to create an index or overview of available features.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/features/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList   />\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Defines the default access rules for web crawlers. This configuration allows unrestricted access to all web crawlers by specifying a wildcard User-agent and empty Disallow directive.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/caching/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request for Dagger\nDESCRIPTION: Step-by-step commands for creating a feature branch, committing changes with DCO sign-off, and pushing to create a pull request.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new feature branch\ngit checkout -b my_feature_branch\n\n# Make changes to your branch\n# ...\n\n# Commit changes - remember to sign!\ngit commit -s\n\n# Push your new feature branch\ngit push my_feature_branch\n\n# Create a new pull request from https://github.com/dagger/dagger\n```\n\n----------------------------------------\n\nTITLE: Pruning Cache in Dagger Engine\nDESCRIPTION: This snippet shows how to manually free up disk space by pruning the cache in the Dagger Engine. It uses the prune operation on the localCache field of the engine type.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/engine.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndagger query <<EOF\n{\n  engine {\n    localCache {\n      prune\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers (user-agents) to access all pages and directories on the site. This is the most permissive configuration possible.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/build-the-application/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Adding Release Notes Fragment with Changie\nDESCRIPTION: Example of using the changie tool to create release notes for user-facing changes in Dagger.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchangie new\n✔ Kind … Added\n✔ Body … engine: add `Directory.Sync`\n✔ GitHub PR … 5414\n✔ GitHub Author … helderco\n```\n\n----------------------------------------\n\nTITLE: Complex Dagger Pipeline for Building CLI (Dagger Shell)\nDESCRIPTION: Demonstrates the same complex pipeline in Dagger's interactive shell mode.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/api/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncontainer |\n  from golang:latest |\n  with-directory /src https://github.com/dagger/dagger#main |\n  with-workdir /src/cmd/dagger |\n  with-exec -- go build -o dagger . |\n  file ./dagger |\n  export ./dagger.bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers (search engines and bots) to access the entire website. It follows the standard protocol from robotstxt.org and places no restrictions on any paths.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/publish-the-application/app/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Testing GPU Access with Dagger\nDESCRIPTION: Shell command to test if Dagger has access to the GPU by calling a function that returns true if properly configured.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/configuration/custom-runner.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndagger -m github.com/samalba/dagger-modules/nvidia-gpu call has-gpu\n```\n\n----------------------------------------\n\nTITLE: Rendering Examples Component in JSX/MDX\nDESCRIPTION: Renders the imported Examples component within the page content, which will display the collection of Dagger examples to users.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/docs/current_docs/examples.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Examples />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Dagger React Build Project\nDESCRIPTION: Command to install the required Node.js dependencies for the project before building.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/existing-dockerfile/app/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Build Script\nDESCRIPTION: Command to execute the JavaScript build pipeline.\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/rust/crates/dagger-sdk/examples/caching/app/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./build.js\n```\n\n----------------------------------------\n\nTITLE: Dagger Version Warning\nDESCRIPTION: Exception for handling version compatibility warnings in Dagger\nSOURCE: https://github.com/dagger/dagger.git/blob/main/sdk/python/docs/exceptions.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass VersionMismatch(Warning)\n```"
  }
]