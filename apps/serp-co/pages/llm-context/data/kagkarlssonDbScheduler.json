[
  {
    "owner": "kagkarlsson",
    "repo": "db-scheduler",
    "content": "TITLE: Configuration Options for db-scheduler in application.properties\nDESCRIPTION: This snippet showcases configuration options for db-scheduler defined in `application.properties`. These properties control various aspects of the scheduler, such as enabling/disabling, heartbeat interval, polling interval, table name, thread count, and shutdown behavior. The snippet provides an example of setting default values for these configurations.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# application.properties example showing default values\n\ndb-scheduler.enabled=true\ndb-scheduler.heartbeat-interval=5m\ndb-scheduler.missed-heartbeats-limit=6\ndb-scheduler.polling-interval=10s\ndb-scheduler.polling-strategy=fetch\ndb-scheduler.polling-strategy-lower-limit-fraction-of-threads=0.5\ndb-scheduler.polling-strategy-upper-limit-fraction-of-threads=3.0\ndb-scheduler.table-name=scheduled_tasks\ndb-scheduler.immediate-execution-enabled=false\ndb-scheduler.scheduler-name=\ndb-scheduler.threads=10\ndb-scheduler.priority-enabled=false\n\n# Ignored if a custom DbSchedulerStarter bean is defined\ndb-scheduler.delay-startup-until-context-ready=false\n\ndb-scheduler.polling-strategy=fetch\ndb-scheduler.polling-strategy-lower-limit-fraction-of-threads=0.5\ndb-scheduler.polling-strategy-upper-limit-fraction-of-threads=3.0\n\ndb-scheduler.shutdown-max-wait=30m\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Recurring Task Java\nDESCRIPTION: Creates a recurring task that executes every hour. It initializes a Scheduler instance with a data source, registers the hourly task, configures the number of threads, and starts the scheduler. The hourly task is automatically scheduled on startup if it doesn't already exist in the database.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRecurringTask<Void> hourlyTask = Tasks.recurring(\"my-hourly-task\", FixedDelay.ofHours(1))\n        .execute((inst, ctx) -> {\n            System.out.println(\"Executed!\");\n        });\n\nfinal Scheduler scheduler = Scheduler\n        .create(dataSource)\n        .startTasks(hourlyTask)\n        .threads(5)\n        .build();\n\n// hourlyTask is automatically scheduled on startup if not already started (i.e. exists in the db)\nscheduler.start();\n```\n\n----------------------------------------\n\nTITLE: Defining and Starting a Recurring Task Java\nDESCRIPTION: Defines a recurring task that executes every hour. It then configures a Scheduler instance, registers the hourly task for startup, registers a shutdown hook, builds the scheduler, and starts it.  It assumes that `dataSource` is already defined.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRecurringTask<Void> hourlyTask = Tasks.recurring(\"my-hourly-task\", FixedDelay.ofHours(1))\n        .execute((inst, ctx) -> {\n            System.out.println(\"Executed!\");\n        });\n\nfinal Scheduler scheduler = Scheduler\n        .create(dataSource)\n        .startTasks(hourlyTask)\n        .registerShutdownHook()\n        .build();\n\n// hourlyTask is automatically scheduled on startup if not already started (i.e. exists in the db)\nscheduler.start();\n```\n\n----------------------------------------\n\nTITLE: Defining and Scheduling a One-Time Task Java\nDESCRIPTION: Defines a one-time task with custom data and schedules it for execution.  It first defines the task, then creates a scheduler instance registering the one-time task.  Then it schedules the task for execution in the future using the SchedulerClient, along with providing custom data for the execution.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nTaskDescriptor<MyTaskData> MY_TASK =\n    TaskDescriptor.of(\"my-onetime-task\", MyTaskData.class);\n\nOneTimeTask<MyTaskData> myTaskImplementation =\n    Tasks.oneTime(MY_TASK)\n        .execute((inst, ctx) -> {\n              System.out.println(\"Executed! Custom data, Id: \" + inst.getData().id);\n        });\n\nfinal Scheduler scheduler = Scheduler\n    .create(dataSource, myTaskImplementation)\n    .registerShutdownHook()\n    .build();\n\nscheduler.start();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Schedule the task for execution a certain time in the future and optionally provide custom data for the execution\nscheduler.schedule(\n    MY_TASK\n        .instanceWithId(\"1045\")\n        .data(new MyTaskData(1001L))\n        .scheduledTo(Instant.now().plusSeconds(5)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer with Fallback Deserializers in Java\nDESCRIPTION: This snippet shows how to configure the scheduler to use a `SerializerWithFallbackDeserializers`. This allows the scheduler to migrate from Java serialization to a `GsonSerializer` by providing a fallback to the old Java serialization format during deserialization. This ensures that existing serialized task data can still be read after the serializer is changed.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n.serializer(new SerializerWithFallbackDeserializers(new GsonSerializer(), new JavaSerializer()))\n```\n\n----------------------------------------\n\nTITLE: Scheduling Task Instance with Priority - Java\nDESCRIPTION: This snippet demonstrates how to schedule a task instance with a specific priority using the db-scheduler library.  The `priority()` method sets the priority for this specific instance. The scheduler will execute tasks with higher priority values first. This snippet requires the scheduler object and `MY_TASK` task definition to be already defined.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nscheduler.schedule(\n    MY_TASK\n        .instance(\"1\")\n        .priority(100)\n        .scheduledTo(Instant.now()));\n```\n\n----------------------------------------\n\nTITLE: Creating a SchedulerClient Instance in Java\nDESCRIPTION: This snippet demonstrates how to create a `SchedulerClient` instance using its builder.  It requires a `DataSource` and a list of `taskDefinitions`. The `SchedulerClient` is used to interact with persisted future executions, such as listing, rescheduling, or removing executions, without needing a full `Scheduler` instance.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nSchedulerClient.Builder.create(dataSource, taskDefinitions).build()\n```\n\n----------------------------------------\n\nTITLE: Defining Default Task Priority - Java\nDESCRIPTION: This snippet shows how to define a default priority for all tasks of a specific type in db-scheduler. This simplifies management when you want all tasks of a particular type to have the same priority. Requires the `Tasks` class and a `FixedDelay` schedule to be available.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nTasks.recurring(\"my-task\", FixedDelay.ofSeconds(5))\n    .defaultPriority(Priority.LOW)\n    .execute(...);\n```\n\n----------------------------------------\n\nTITLE: Scheduling One-Time Tasks in Batches Java\nDESCRIPTION: Schedules multiple one-time tasks in a batch for immediate execution. It creates a stream of TaskInstance objects, each representing a one-time task, and then uses the scheduler to schedule all tasks in the stream for execution at the current time.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nStream<TaskInstance<?>> taskInstances = Stream.of(\n    MY_TASK.instance(\"my-task-1\", 1),\n    MY_TASK.instance(\"my-task-2\", 2),\n    MY_TASK.instance(\"my-task-3\", 3));\n\nscheduler.scheduleBatch(taskInstances, Instant.now());\n```\n\n----------------------------------------\n\nTITLE: Starting a db-scheduler Task via HTTP using curl\nDESCRIPTION: This command sends a POST request to the /admin/start endpoint to trigger a specific task within the db-scheduler. It requires the taskName to be specified in the JSON payload and uses the application/json content type.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/examples/spring-boot-example/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:8080/admin/start -H \"Content-Type: application/json\" -d '{\"taskName\":\"sample-one-time-task\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Spring Boot Integration\nDESCRIPTION: This snippet shows the Maven dependency required to integrate db-scheduler with a Spring Boot application. The `db-scheduler-spring-boot-starter` dependency simplifies the wiring of the scheduler in Spring Boot projects and automatically includes the core db-scheduler dependency.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n        <groupId>com.github.kagkarlsson</groupId>\n        <artifactId>db-scheduler-spring-boot-starter</artifactId>\n        <version>15.1.1</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Building db-scheduler with Maven\nDESCRIPTION: Builds the db-scheduler project using Maven, skipping tests during the build process.  This command compiles the source code, packages it into a deployable artifact, and skips the execution of unit tests to speed up the build.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Insert Test Data (PostgreSQL)\nDESCRIPTION: This SQL script inserts a large number of rows into the `scheduled_tasks` table. This test data simulates a high volume of scheduled tasks for benchmarking purposes.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/test/benchmark/infra/notes.txt#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO scheduled_tasks (task_name, task_instance, execution_time, picked, version, priority)\n    SELECT 'task1', 'instance'||i::text, now(), false, 1, 0\n    FROM generate_series(1, 1000000) s(i)\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Tables\nDESCRIPTION: This shell script uses psql to execute a SQL script that creates the necessary tables for the DB Scheduler in a PostgreSQL database. It requires setting the PGPASSWORD and PGHOST environment variables.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/test/benchmark/infra/notes.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexport PGPASSWORD=\"<password>\"\nexport PGHOST=\"<ip>\"\n\n# create tables\ncd benchmark/\npsql bench gustavkarlsson < ../../db-scheduler/src/test/resources/postgresql_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency XML\nDESCRIPTION: Adds the db-scheduler dependency to your Maven project. This allows you to use the db-scheduler library in your Java application by defining the group ID, artifact ID, and version.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.kagkarlsson</groupId>\n    <artifactId>db-scheduler</artifactId>\n    <version>15.1.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Building db-scheduler with Maven skipping tests\nDESCRIPTION: Builds the db-scheduler project using Maven, skipping tests during the build process.  The `-DskipTests=true` option is used to prevent the execution of unit tests, potentially reducing the build time.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmvn package -DskipTests=true\n```\n\n----------------------------------------\n\nTITLE: Define MSSQL Server Docker Image\nDESCRIPTION: This snippet defines the Docker image to use for the MSSQL Server. The image is pulled from Microsoft's container registry and specifies the latest version of SQL Server 2022.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/db-scheduler/src/test/resources/container-license-acceptance.txt#_snippet_0\n\nLANGUAGE: Docker\nCODE:\n```\nmcr.microsoft.com/mssql/server:2022-latest\n```\n\n----------------------------------------\n\nTITLE: Run DB Scheduler Benchmark\nDESCRIPTION: This shell command executes the DB Scheduler benchmark application using Java. It requires setting the PGPASSWORD and PGHOST environment variables to connect to the PostgreSQL database.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/test/benchmark/infra/notes.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexport PGPASSWORD=\"<password>\"\nexport PGHOST=\"<ip>\"\njava -jar db-scheduler-benchmark-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Create Index on scheduled_tasks (PostgreSQL)\nDESCRIPTION: This SQL script creates an index on the `scheduled_tasks` table's `execution_time` column. This optimization improves query performance for tasks scheduled to be executed.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/test/benchmark/infra/notes.txt#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncreate index on scheduled_tasks(execution_time asc);\n```\n\n----------------------------------------\n\nTITLE: Cloning the db-scheduler repository\nDESCRIPTION: Clones the db-scheduler repository from GitHub to the local machine, then changes the current directory to the newly cloned repository.\nSOURCE: https://github.com/kagkarlsson/db-scheduler/blob/master/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/kagkarlsson/db-scheduler\ncd db-scheduler\n```"
  }
]