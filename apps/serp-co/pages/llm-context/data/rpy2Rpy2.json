[
  {
    "owner": "rpy2",
    "repo": "rpy2",
    "content": "TITLE: Pandas Integration with rpy2\nDESCRIPTION: Demonstrates conversion between R DataFrames and pandas DataFrames using rpy2\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import pandas2ri\nfrom rpy2.robjects import default_converter\n\nwith (default_converter + pandas2ri.converter).context() as cv:\n    pd_mtcars = mtcars_env['mtcars']\nprint(type(pd_mtcars))\n```\n\n----------------------------------------\n\nTITLE: Python Function Integration with R\nDESCRIPTION: Shows how to create and use a Python function within R/dplyr operations using rternalize\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.rinterface import rternalize\n@rternalize(signature=False)\ndef mean_np(x):\n    import statistics\n    return statistics.mean(x)\n\nfrom rpy2.robjects import globalenv\nglobalenv['mean_np'] = mean_np\n\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(mean_ptw=rl('mean(powertoweight)'),\n               mean_np_ptw=rl('mean_np(powertoweight)'))\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Calling R functions with pandas DataFrames\nDESCRIPTION: Shows how to call R functions (base::summary) with pandas DataFrames by using the converter context manager to handle automatic conversion.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbase = importr('base')\n\nwith (ro.default_converter + pandas2ri.converter).context():\n  df_summary = base.summary(pd_df)\nprint(df_summary)\n```\n\n----------------------------------------\n\nTITLE: Performing linear regression using R's lm function in Python\nDESCRIPTION: This code performs linear regression using R's lm function through rpy2. It fits a model predicting elevation based on latitude and longitude.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstats = importr('stats')\nbase = importr('base')\nfit = stats.lm('elevation_m ~ latd + longd', data=dataf)\nfit\n```\n\n----------------------------------------\n\nTITLE: Converting R data.frame to pandas DataFrame\nDESCRIPTION: Demonstrates converting an R data.frame to a pandas DataFrame using the pandas2ri converter in a context manager.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  pd_from_r_df = ro.conversion.get_conversion().rpy2py(r_df)\n\npd_from_r_df\n```\n\n----------------------------------------\n\nTITLE: Importing Functions for dplyr Pipe Syntax\nDESCRIPTION: Imports individual dplyr functions that would be used with the magrittr pipe-style syntax, though marked as no longer working.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# currently no longer working\nfrom rpy2.robjects.lib.dplyr import (filter,\n                                     mutate,\n                                     group_by,\n                                     summarize)\n\nif False:\n    dataf = (DataFrame(mtcars) >>\n             filter(rl('gear>3')) >>\n             mutate(powertoweight=rl('hp*36/wt')) >>\n             group_by(rl('gear')) >>\n             summarize(mean_ptw=rl('mean(powertoweight)')))\n\n    dataf\n```\n\n----------------------------------------\n\nTITLE: Implementing S4 Methods as Python Functions with Multiple Dispatch\nDESCRIPTION: These snippets demonstrate how to implement S4 methods as Python functions using multiple dispatch, allowing for different implementations based on input types.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom multipledispatch import dispatch\nfrom functools import partial\n\nmy_namespace = dict()\ndispatch = partial(dispatch, namespace=my_namespace)\n\n@dispatch(ExpressionSet)\ndef rowmedians(eset,\n               na_rm=False):\n    res = biobase.rowMedians(eset,\n                             na_rm=na_rm)\n    return res\n\nres = rowmedians(eset_myclass)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import Matrix\n@dispatch(Matrix)\ndef rowmedians(m,\n               na_rm=False):\n    res = biobase.rowMedians(m,\n                             na_rm=na_rm)\n    return res\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.methods import getmethod\nfrom rpy2.robjects.vectors import StrVector\n_rowmedians_matrix = getmethod(StrVector([\"rowMedians\"]),\n                               signature=StrVector([\"matrix\"]))\n@dispatch(Matrix)\ndef rowmedians(m,\n               na_rm=False):\n    res = _rowmedians_matrix(m,\n                             na_rm=na_rm)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in R DataFrames using Python\nDESCRIPTION: Shows how to access elements and columns in R DataFrames using both Python-style and R-style indexing in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n>>> len(dataf)\n2\n>>> dataf[0]\n<Vector - Python:0x8a58c2c / R:0x8e7dd08>\n\n>>> [column.rclass[0] for column in dataf]\n['factor', 'integer']\n\n>>> dataf.rx(1)\n<DataFrame - Python:0x8a584ac / R:0x95a6fb8>\n>>> print(dataf.rx(1))\n  letter\n1      x\n2      y\n3      z\n\n>>> dataf.rx2(1)\n<Vector - Python:0x8a4bfcc / R:0x8e7dd08>\n>>> print(dataf.rx2(1))\n[1] x y z\nLevels: x y z\n\n>>> subdataf = dataf.rx(1, True)\n>>> print(subdataf)\n  letter value\n1      x     1\n>>> rows_i <- robjects.IntVector((1,3))\n>>> subdataf = dataf.rx(rows_i, True)\n>>> print(subdataf)\n  letter value\n1      x     1\n3      z     3\n```\n\n----------------------------------------\n\nTITLE: Importing the rpy2.robjects Module in Python\nDESCRIPTION: Basic example showing how to import the rpy2.robjects module. This is the entry point for accessing R functionality from Python in a user-friendly way.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.robjects as robjects\n```\n\n----------------------------------------\n\nTITLE: Using dplyr Chain Operations\nDESCRIPTION: Demonstrates D3-style chaining of dplyr operations on a DataFrame\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(mean_ptw=rl('mean(powertoweight)'))\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Converting pandas DataFrame to R DataFrame\nDESCRIPTION: Uses rpy2's converters within a context manager to convert a pandas DataFrame object to an R data.frame object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_df = ro.conversion.get_conversion().py2rpy(pd_df)\n\nr_from_pd_df\n```\n\n----------------------------------------\n\nTITLE: Using NumPy Converter with RPy2\nDESCRIPTION: Demonstrates how to create and use a local converter that combines RPy2's default converter with NumPy conversion rules. This allows for controlled conversion of objects between R and NumPy.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/numpy.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import numpy2ri\nfrom rpy2.robjects import default_converter\n\n# Create a converter that starts with rpy2's default converter\n# to which the numpy conversion rules are added.\nnp_cv_rules = default_converter + numpy2ri.converter\n\nwith np_cv_rules:\n    # Anything here and until the `with` block is exited\n    # will use our numpy converter whenever objects are\n    # passed to R or are returned by R while calling\n    # rpy2.robjects functions.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Converting pandas DataFrame to R data.frame\nDESCRIPTION: Demonstrates converting a pandas DataFrame to an R data.frame using the pandas2ri converter in a context manager to limit the scope of the conversion.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_df = ro.conversion.get_conversion().py2rpy(pd_df)\n\nr_from_pd_df\n```\n\n----------------------------------------\n\nTITLE: Calling R Functions in Python with rpy2\nDESCRIPTION: Demonstrates how to call R functions (sum and sort) from Python using rpy2, including the use of keyword arguments.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> rsum = robjects.r['sum']\n>>> rsum(robjects.IntVector([1,2,3]))[0]\n6L\n>>> rsort = robjects.r['sort']\n>>> res = rsort(robjects.IntVector([1,2,3]), decreasing=True)\n>>> print(res.r_repr())\nc(3L, 2L, 1L)\n```\n\n----------------------------------------\n\nTITLE: Calling R Functions as Python Callables\nDESCRIPTION: Demonstrates importing R packages and using their functions as Python callable objects. The example shows importing base, stats, and graphics packages, then using the plot and rnorm functions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_functions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nbase = importr('base')\nstats = importr('stats')\ngraphics = importr('graphics')\n\nplot = graphics.plot\nrnorm = stats.rnorm\nplot(rnorm(100), ylab=\"random\")\n```\n\n----------------------------------------\n\nTITLE: Calling R Functions from Python\nDESCRIPTION: Shows how to call an R function that has been retrieved from R's environment, passing Python arguments that get converted to R values automatically.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nres = r_f(3)\n```\n\n----------------------------------------\n\nTITLE: Using Custom R Environment for Function Calls\nDESCRIPTION: Shows how to use a custom R environment for better code compartmentalization when calling R functions. This example creates a dedicated environment, binds variables, and uses them in the function call.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_functions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import Environment\n\nenv = Environment()\n\nenv['x'] = rnorm(100)\n\nargs = (('x', base.as_symbol('x')),)\n\nplot.rcall(args, env)\n```\n\n----------------------------------------\n\nTITLE: Installing Missing R Packages\nDESCRIPTION: Identifies which required R packages are not installed and installs them using R's install.packages function. This creates a list of packages to install and converts it to an R string vector for the installation function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif not have_tutorial_packages:\n    # R vector of strings\n    from rpy2.robjects.vectors import StrVector\n    # file\n    packnames_to_install = [x for x in packnames if not rpackages.isinstalled(x)]\n    if len(packnames_to_install) > 0:\n        utils.install_packages(StrVector(packnames_to_install))\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 scatter plot in Python using rpy2\nDESCRIPTION: This snippet demonstrates how to create a ggplot2 scatter plot using rpy2 in Python. It plots longitude vs latitude, with point size and color representing area and population.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects.lib.ggplot2 as gp\nfrom rpy2.robjects import rl\n\np = (gp.ggplot(dataf) +\n     gp.aes(x=rl('longd'),\n            y=rl('latd'),\n            color=rl('population_total'),\n            size=rl('area_total_km2')) +\n     gp.geom_point() +\n     gp.scale_color_continuous(trans='log10'))\n```\n\n----------------------------------------\n\nTITLE: Creating and Calling R Functions from Python\nDESCRIPTION: Creates an R function through string evaluation, then accesses and calls it from Python. The function calculates the circumference of a circle given its radius.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrobjects.r('''\n\tf <- function(r, verbose=FALSE) {\n        if (verbose) {\n            cat(\"I am calling f().\\n\")\n        }\n        2 * pi * r \n        }\n        f(3)\n''')\n```\n\n----------------------------------------\n\nTITLE: Installing R Packages from Python using rpy2\nDESCRIPTION: Shows how to programmatically install R packages from Python using rpy2. This includes selecting a CRAN mirror and installing multiple packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects.packages as rpackages\nutils = rpackages.importr('utils')\n\nutils.chooseCRANmirror(ind=1) # select the first mirror in the list\n\npacknames = ('ggplot2', 'hexbin')\nfrom rpy2.robjects.vectors import StrVector\nutils.install_packages(StrVector(packnames))\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Scatter Plot with Smooth Line in Blue in Python using rpy2\nDESCRIPTION: This snippet creates a scatter plot of 'wt' vs 'mpg' from the mtcars dataset with a blue smooth line using ggplot2 in Python via rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg') +\\\n    ggplot2.geom_point() +\\\n    ggplot2.geom_smooth(fill='blue', color='darkblue', size=2)\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating R Matrices in Python\nDESCRIPTION: Demonstrates creating an R matrix from a Python range, accessing elements, and performing matrix operations like addition and multiplication.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> m = robjects.r.matrix(robjects.IntVector(range(10)), nrow=5)\n>>> print(m)\n     [,1] [,2]\n[1,]    0    5\n[2,]    1    6\n[3,]    2    7\n[4,]    3    8\n[5,]    4    9\n\n>>> m = robjects.r.matrix(robjects.IntVector(range(4)), nrow=2)\n>>> print(m.ro + 1)\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n>>> print( m.crossprod(m) )\n     [,1] [,2]\n[1,]    1    3\n[2,]    3   13\n>>> print( m.transpose().dot(m) )\n     [,1] [,2]\n[1,]    1    3\n[2,]    3   13\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagonal Binned Plots with ggplot2\nDESCRIPTION: Creates a hexagonal binned plot to visualize the density of points using R's ggplot2 package. Hexagonal bins provide an alternative to rectangular binning for density visualization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomhexbin-begin\n#-- ggplot2geomhexbin-end\n```\n\n----------------------------------------\n\nTITLE: Using dplyr with Chaining Style\nDESCRIPTION: Demonstrates D3-style chaining of dplyr operations on an R dataframe, including filter, mutate, group_by, and summarize functions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(mean_ptw=rl('mean(powertoweight)'))\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Creating a Color-coded ggplot2 Scatter Plot\nDESCRIPTION: Creates a scatter plot with points color-coded by a third variable using R's ggplot2 package. This demonstrates mapping data variables to visual aesthetics.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2mtcarscolcyl-begin\n#-- ggplot2mtcarscolcyl-end\n```\n\n----------------------------------------\n\nTITLE: Evaluating R Code in Python\nDESCRIPTION: Example of creating and calling an R function through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrobjects.r('''\n        # create a function `f`\n\tf <- function(r, verbose=FALSE) {\n            if (verbose) {\n                cat(\"I am calling f().\\n\")\n            }\n            2 * pi * r \n        }\n\t# call the function `f` with argument value 3\n        f(3)\n\t''')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom S4 Object Conversion\nDESCRIPTION: This snippet shows how to implement a custom conversion function for S4 objects and register it with a Converter in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef rpy2py_s4(obj):\n    if 'ExpressionSet' in obj.rclass:\n        res = ExpressionSet(obj)\n    else:\n        res = robj\n    return res\n\n# try it\nrpy2py_s4(eset)\n\nfrom rpy2.robjects import default_converter\nfrom rpy2.robjects.conversion import Converter\n\nmy_converter = Converter('ExpressionSet-aware converter',\n                         template=default_converter)\n\nfrom rpy2.rinterface import SexpS4\nmy_converter.rpy2py.register(SexpS4, rpy2py_s4)\n\nwith my_converter.context() as cv:\n    eset = biobase.ExpressionSet()\n    print(type(eset))\n```\n\n----------------------------------------\n\nTITLE: Mapping Point Size and Color in ggplot2\nDESCRIPTION: Creates a scatter plot with both color and size aesthetics mapped to variables using R's ggplot2 package. This shows how multiple visual properties can encode different data dimensions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2aescolsize-begin\n#-- ggplot2aescolsize-end\n```\n\n----------------------------------------\n\nTITLE: Adding Group-specific Trend Lines with ggplot2\nDESCRIPTION: Adds separate trend lines for each group in a categorical variable using R's ggplot2 package. This shows how to visualize different relationships within subgroups of data.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2smoothbycyl-begin\n#-- ggplot2smoothbycyl-end\n```\n\n----------------------------------------\n\nTITLE: PCA Example - Python with RPY2\nDESCRIPTION: Python implementation of principal component analysis using RPY2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\n\nbase     = importr('base')\nstats    = importr('stats')\ngraphics = importr('graphics')\n\nm = base.matrix(stats.rnorm(100), ncol = 5)\npca = stats.princomp(m)\ngraphics.plot(pca, main = \"Eigen values\")\nstats.biplot(pca, main = \"biplot\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Rug Plot to a ggplot2 Scatter Plot in Python using rpy2\nDESCRIPTION: This code creates a scatter plot of 'wt' vs 'mpg' from the mtcars dataset and adds a marginal rug plot to both axes using ggplot2 in Python via rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg') +\\\n    ggplot2.geom_point() +\\\n    ggplot2.geom_rug(position=ggplot2.position_jitter(width=0.1, height=0.1))\n```\n\n----------------------------------------\n\nTITLE: Loading R Dataset into Python\nDESCRIPTION: Imports an R dataset (mtcars) for use in Python through rpy2's interface to R packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr, data\ndatasets = importr('datasets')\nmtcars_env = data(datasets).fetch('mtcars')\nmtcars = mtcars_env['mtcars']\n```\n\n----------------------------------------\n\nTITLE: Using Local Context with Statistical Models\nDESCRIPTION: Demonstrates a practical use case of local_context with R's statistical modeling functions, binding data to a symbol to improve the evaluation experience when using functions like lm().\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nfrom rpy2.robjects import rl\n\nstats = importr('stats')\nmtcars = robjects.r('mtcars')\nwith robjects.local_context() as lc:\n    lc['mtcars'] = mtcars\n    fit = stats.lm('mpg ~ gear', data=rl('mtcars'))\n```\n\n----------------------------------------\n\nTITLE: R-Style Vector Extraction\nDESCRIPTION: Shows R-style extraction using rx and rx2 delegators, including boolean indexing and negative indices.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nprint(x.rx(1))\nprint(x.rx('a'))\ni = robjects.IntVector((1, 3))\nprint(x.rx(i))\nb = robjects.BoolVector((False, True, False, True, True))\nprint(x.rx(b))\n```\n\n----------------------------------------\n\nTITLE: Using dplyr on Pandas DataFrame\nDESCRIPTION: Shows how to apply dplyr operations to a pandas DataFrame by converting it to an R data frame first with a conversion context.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith (default_converter + pandas2ri.converter).context() as cv:\n    dataf = (DataFrame(pd_mtcars)\n             .filter(rl('gear>=3'))\n             .mutate(powertoweight=rl('hp*36/wt'))\n             .group_by(rl('gear'))\n             .summarize(mean_ptw=rl('mean(powertoweight)')))\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plots with ggplot2\nDESCRIPTION: Creates a box plot to visualize the distribution of values across categories using R's ggplot2 package. Box plots show median, quartiles, and potential outliers.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomboxplot-begin\n#-- ggplot2geomboxplot-end\n```\n\n----------------------------------------\n\nTITLE: Evaluating R Code Strings in Python using rpy2\nDESCRIPTION: Demonstrates how to evaluate R code contained in Python strings using the robjects.r instance. This allows for on-the-fly execution of R code within a Python environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rinstance.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> print(robjects.r('1+2'))\n[1] 3\n>>> sqr = robjects.r('function(x) x^2')\n\n>>> print(sqr)\nfunction (x)\nx^2\n>>> print(sqr(2))\n[1] 4\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Plot with Facets in Python using rpy2\nDESCRIPTION: This snippet shows how to create a ggplot2 plot with facets in Python using rpy2. It creates a scatter plot of 'wt' vs 'mpg' from the mtcars dataset, split into panels based on the 'cyl' column.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg', color='factor(cyl)', shape='factor(cyl)') +\\\n    ggplot2.geom_point(size=3) +\\\n    ggplot2.geom_smooth(method='lm', se=False) +\\\n    ggplot2.facet_grid(ro.Formula('. ~ cyl'))\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating R DataFrames in Python\nDESCRIPTION: Demonstrates various ways of creating R DataFrames in Python using rpy2, including empty DataFrames, DataFrames from dictionaries, and ordered DataFrames.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n>>> dataf = robjects.DataFrame({})\n\n>>> d = {'a': robjects.IntVector((1,2,3)), 'b': robjects.IntVector((4,5,6))}\n>>> dataf = robject.DataFrame(d)\n\n>>> import rpy2.rlike.container as rlc\n>>> od = rlc.OrdDict([('value', robjects.IntVector((1,2,3))),\n                      ('letter', robjects.StrVector(('x', 'y', 'z')))])\n>>> dataf = robjects.DataFrame(od)\n>>> print(dataf.colnames)\n[1] \"letter\" \"value\"\n\n>>> from rpy2.robjects.vectors import DataFrame, StrVector\n>>> from rpy2.robjects.packages import importr\n>>> base = importr('base')\n>>> dataf = DataFrame({'string': base.I(StrVector('abbab')),\n                         'factor': StrVector('abbab')})\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous R Packages in Python\nDESCRIPTION: Demonstrates how to create an anonymous R package from a string of R code using SignatureTranslatedAnonymousPackage. This is useful for wrapping arbitrary R code as a package-like structure.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\n\nstring = \"\"\"\nsquare <- function(x) {\n    return(x^2)\n}\n\ncube <- function(x) {\n    return(x^3)\n}\n\"\"\"\n\npowerpack = SignatureTranslatedAnonymousPackage(string, \"powerpack\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating R Code as a String\nDESCRIPTION: Shows how to execute R code directly by passing it as a string to the callable robjects.r object, providing an alternative way to access R's pi constant.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npi = robjects.r('pi')\npi[0]\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Histogram with Facets in Python using rpy2\nDESCRIPTION: This code creates a histogram of the 'mpg' column from the mtcars dataset using ggplot2 in Python via rpy2, with facets based on the 'cyl' column.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='mpg') +\\\n    ggplot2.geom_histogram(binwidth=2.5) +\\\n    ggplot2.facet_grid(ro.Formula('cyl ~ .'))\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a pandas DataFrame with Timestamps\nDESCRIPTION: Creates a pandas DataFrame containing a sequence of timestamp objects using pandas' date_range function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npd_df = pd.DataFrame({\n    'Timestamp': pd.date_range('2017-01-01 00:00:00', periods=10, freq='s')\n    })\n    \npd_df\n```\n\n----------------------------------------\n\nTITLE: Linear Models Example - R\nDESCRIPTION: Shows how to perform linear modeling in R, including data setup and model analysis.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_15\n\nLANGUAGE: r\nCODE:\n```\nctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)\ntrt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)\ngroup <- gl(2, 10, 20, labels = c(\"Ctl\",\"Trt\"))\nweight <- c(ctl, trt)\n\nanova(lm.D9 <- lm(weight ~ group))\n\nsummary(lm.D90 <- lm(weight ~ group - 1))# omitting intercept\n```\n\n----------------------------------------\n\nTITLE: Converting R DataFrame to pandas DataFrame\nDESCRIPTION: Uses rpy2's converters within a context manager to convert an R data.frame object to a pandas DataFrame object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  pd_from_r_df = ro.conversion.get_conversion().rpy2py(r_df)\n\npd_from_r_df\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Scatter Plot with 2D Density in Python using rpy2\nDESCRIPTION: This snippet shows how to create a scatter plot with a 2D density overlay using ggplot2 in Python via rpy2. It plots 'wt' vs 'mpg' from the mtcars dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg') +\\\n    ggplot2.geom_point() +\\\n    ggplot2.geom_density2d()\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Using tidyr's spread() function on an R DataFrame\nDESCRIPTION: Demonstrates the spread() function from tidyr to transform data from long to wide format, converting values from the 'x' column into separate columns with values from the 'y' column.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/tidyr.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataf.spread('x', 'y')\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Density Contours with ggplot2\nDESCRIPTION: Creates a 2D kernel density estimate contour plot using R's ggplot2 package. This provides a smoothed representation of point density in a scatter plot.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomdensity2d-begin\n#-- ggplot2geomdensity2d-end\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Scatter Plot with Smooth Line in Python using rpy2\nDESCRIPTION: This snippet demonstrates how to create a scatter plot with a smooth line using ggplot2 in Python via rpy2. It plots 'wt' vs 'mpg' from the mtcars dataset, with color determined by the 'cyl' column.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg', color='factor(cyl)') +\\\n    ggplot2.geom_point() +\\\n    ggplot2.geom_smooth(ggplot2.aes_string(group='cyl'),\n                       method='lm',\n                       se=False,\n                       size=2) +\\\n    ggplot2.scale_colour_brewer(palette='Set1') +\\\n    ggplot2.facet_wrap(ro.Formula('~ cyl')) +\\\n    ggplot2.theme(**{'legend.position': 'none'})\n```\n\n----------------------------------------\n\nTITLE: Loading R Dataset in Python\nDESCRIPTION: Imports and loads the mtcars dataset from R's datasets package using rpy2\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr, data\ndatasets = importr('datasets')\nmtcars_env = data(datasets).fetch('mtcars')\nmtcars = mtcars_env['mtcars']\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating R Sequences in Python\nDESCRIPTION: Demonstrates creating an R sequence and performing addition operations on it using rpy2. Shows the difference between R-style and Python-style addition.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> x = robjects.r.seq(1, 10)\n>>> print(x.ro + 1)\n2:11\n\n>>> print(x + 1)\n[1]  1  2  3  4  5  6  7  8  9 10  1\n```\n\n----------------------------------------\n\nTITLE: Combining Python Variables with R Code Evaluation in rpy2\nDESCRIPTION: Shows how to use Python variables representing R objects within R code strings for evaluation. This technique allows for dynamic R code generation based on Python variables.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rinstance.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> x = robjects.r.rnorm(100)\n>>> robjects.r('hist(%s, xlab=\"x\", main=\"hist(x)\")'  %x.r_repr())\n```\n\n----------------------------------------\n\nTITLE: Creating Plots with R Graphics in Python using rpy2\nDESCRIPTION: Demonstrates how to create plots using R's graphics functions from Python with rpy2, including layout and plot customization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\n\nr = robjects.r\n\nx = robjects.IntVector(range(10))\ny = r.rnorm(10)\n\nr.X11()\n\nr.layout(r.matrix(robjects.IntVector([1,2,3,2]), nrow=2, ncol=2))\nr.plot(r.runif(10), y, xlab=\"runif\", ylab=\"foo/bar\", col=\"red\")\n```\n\n----------------------------------------\n\nTITLE: Creating an R DataFrame using rpy2 vectors\nDESCRIPTION: Creates an R DataFrame with string and integer columns using rpy2's vector types and OrderedDict for column specification.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/tidyr.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import OrderedDict\nfrom rpy2.robjects.vectors import (StrVector,\n                                   IntVector)\ndataf = DataFrame(OrderedDict(x=StrVector((\"a\", \"b\", \"b\")),\n                              y=IntVector((3, 4, 5)),\n\t\t              z=IntVector((6, 7, 8))))\ndataf\n```\n\n----------------------------------------\n\nTITLE: Creating a Box Plot with Lattice\nDESCRIPTION: Demonstrates how to create a box plot using R's lattice package bwplot function through rpy2. Box plots provide a visual summary of the distribution of a dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n#-- bwplot1-begin\n#-- bwplot1-end\n```\n\n----------------------------------------\n\nTITLE: Linear Modeling with R in Python using rpy2\nDESCRIPTION: Shows how to perform linear modeling using R's lm function from Python with rpy2, including data preparation and model summary.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import FloatVector\nfrom rpy2.robjects.packages import importr\nstats = importr('stats')\nbase = importr('base')\n\nctl = FloatVector([4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14])\ntrt = FloatVector([4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69])\ngroup = base.gl(2, 10, 20, labels = ['Ctl','Trt'])\nweight = ctl + trt\n\nrobjects.globalenv['weight'] = weight\nrobjects.globalenv['group'] = group\nlm_D9 = stats.lm('weight ~ group')\nprint(stats.anova(lm_D9))\n\n# omitting the intercept\nlm_D90 = stats.lm('weight ~ group - 1')\nprint(base.summary(lm_D90))\n```\n\n----------------------------------------\n\nTITLE: Initializing RPy2 High-Level Interface\nDESCRIPTION: Basic initialization of rpy2's high-level interface for R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from R Matrices in Python\nDESCRIPTION: Shows various methods of extracting elements from an R matrix using Python-style and R-style indexing in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> m = ro.r.matrix(ro.IntVector(range(2, 8)), nrow=3)\n>>> print(m)\n     [,1] [,2]\n[1,]    2    5\n[2,]    3    6\n[3,]    4    7\n>>> m[0]\n2\n>>> m[5]\n7\n>>> print(m.rx(1))\n[1] 2\n>>> print(m.rx(6))\n[1] 7\n\n>>> print(m.rx(1, 1))\n[1] 2\n>>> print(m.rx(3, 2))\n[1] 7\n\n>>> print(m.rx(True, 1))\n\n>>> print(m.rx(2, True))\n```\n\n----------------------------------------\n\nTITLE: Optimizing Function with R's optim() in Python\nDESCRIPTION: This snippet demonstrates how to define a cost function and use R's optim() function for optimization through rpy2. It uses the higher-level robjects interface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nreturn 100 * (x2 - x1 * x1)**2 + (1 - x1)**2\n\n# starting parameters\nstart_params = FloatVector((-1.2, 1))\n\n# call R's optim() with our cost funtion\nres = stats.optim(start_params, cost_f)\n```\n\n----------------------------------------\n\nTITLE: Checking and Handling R Package Dependencies\nDESCRIPTION: Checks if required R packages are installed and sets a flag to indicate their availability, which is useful for conditional execution of code that depends on these packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# R package names\npacknames = ('ggplot2', 'hexbin')\n\n# import rpy2's package module\nimport rpy2.robjects.packages as rpackages\n\nif all(rpackages.isinstalled(x) for x in packnames):\n    have_tutorial_packages = True\nelse:\n    have_tutorial_packages = False\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe R Operations in Python\nDESCRIPTION: This example demonstrates how to use a lock for thread-safe operations when interacting with R from Python. It's crucial for maintaining coherence in multithreaded environments.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.rinterface_lib import openrlib\n\nwith openrlib.rlock:\n    # (put interactions with R that should not be interrupted by\n    # thread switching here).\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing tidyr DataFrame class from rpy2\nDESCRIPTION: Imports the DataFrame class from rpy2's tidyr library module to enable using tidyr functionality in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/tidyr.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.tidyr import DataFrame\n```\n\n----------------------------------------\n\nTITLE: Using R Functions with pandas DataFrames\nDESCRIPTION: Demonstrates calling an R function (summary) on a pandas DataFrame using automatic conversion within a context manager.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbase = importr('base')\n\nwith (ro.default_converter + pandas2ri.converter).context():\n  df_summary = base.summary(pd_df)\nprint(df_summary)\n```\n\n----------------------------------------\n\nTITLE: Importing dplyr Components\nDESCRIPTION: Imports necessary dplyr components from rpy2 for data manipulation\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.dplyr import DataFrame\nfrom rpy2.robjects import rl\n```\n\n----------------------------------------\n\nTITLE: Using custom viridis color scale in ggplot2 with Python\nDESCRIPTION: This snippet demonstrates the use of the custom viridis color scale in a ggplot2 visualization created with rpy2 in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\np = (gp.ggplot(dataf) +\n     gp.aes(x=rl('longd'),\n            y=rl('latd'),\n            color=rl('population_total'),\n            size=rl('area_total_km2')) +\n     gp.geom_point(alpha=0.5) +\n     gp.scale_x_continuous('Longitude') +\n     gp.scale_y_continuous('Latitude') +\n     gp.scale_size(range=IntVector([1, 18])) +\n     scale_color_viridis(trans='log10') +\n     gp.ggtitle('California Cities: Area and Population') +\n     gp.theme_light(base_size=16))\nimage_png(p)\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Fill Histogram with ggplot2\nDESCRIPTION: Creates a histogram with fill colors indicating different groups using R's ggplot2 package. This shows how to represent categorical variables within a distribution visualization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomhistogramfillcyl-begin\n#-- ggplot2geomhistogramfillcyl-end\n```\n\n----------------------------------------\n\nTITLE: Principal Component Analysis with R in Python using rpy2\nDESCRIPTION: Demonstrates how to perform principal component analysis using R's princomp function from Python with rpy2, including plotting results.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\n\nbase     = importr('base')\nstats    = importr('stats')\ngraphics = importr('graphics')\n\nm = base.matrix(stats.rnorm(100), ncol = 5)\npca = stats.princomp(m)\ngraphics.plot(pca, main = \"Eigen values\")\nstats.biplot(pca, main = \"biplot\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Converter for S4 Objects\nDESCRIPTION: Demonstrates how to register a custom conversion function with rpy2's conversion system by creating a custom Converter object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import default_converter\nfrom rpy2.robjects.conversion import Converter, localconverter\n\nmy_converter = Converter('ExpressionSet-aware converter',\n                         template=default_converter)\n\nfrom rpy2.rinterface import SexpS4\nmy_converter.rpy2py.register(SexpS4, rpy2py_s4)\n```\n\n----------------------------------------\n\nTITLE: Importing tidyr DataFrame in Python\nDESCRIPTION: This snippet imports the DataFrame class from rpy2's tidyr library, enabling the use of tidyr functionality in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/tidyr.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.tidyr import DataFrame\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ggplot2 Scatter Plot\nDESCRIPTION: Creates a basic scatter plot using R's ggplot2 package through rpy2. This example shows the fundamental structure of creating a ggplot2 visualization with data, aesthetics, and geometry.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2mtcars-begin\n#-- ggplot2mtcars-end\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Python-to-R Conversion Function\nDESCRIPTION: Implementation of a custom conversion function that transforms Python tuples into R string vectors. This demonstrates how to create a py2rpy conversion function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.rinterface import StrSexpVector\n\n\ndef tuple_str(tpl):\n    res = StrSexpVector(tpl)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in RPy2\nDESCRIPTION: Shows how to work with R's NA values in RPy2 vectors.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nx = robjects.IntVector(range(3))\nx[0] = robjects.NA_Integer\nprint(x)\nx[0] is robjects.NA_Integer\nx[0] == robjects.NA_Integer\n[y for y in x if y is not robjects.NA_Integer]\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Binned Density Plots with ggplot2\nDESCRIPTION: Creates a 2D binned density plot to visualize the concentration of points in a scatter plot using R's ggplot2 package. This is useful for large datasets with overplotting.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geombin2d-begin\n#-- ggplot2geombin2d-end\n```\n\n----------------------------------------\n\nTITLE: Converting R DataFrame to Pandas DataFrame\nDESCRIPTION: Demonstrates converting an R data frame to a pandas DataFrame using rpy2's conversion context.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import pandas2ri\nfrom rpy2.robjects import default_converter\n\n# Using a conversion context in which the pandas conversion is\n# added to the default conversion rules, the rpy2 object\n# `mtcars` (an R data frame) is converted to a pandas data frame.\nwith (default_converter + pandas2ri.converter).context() as cv:\n    pd_mtcars = mtcars_env['mtcars']\nprint(type(pd_mtcars))\n```\n\n----------------------------------------\n\nTITLE: Automated S4 Class Definition Example\nDESCRIPTION: Example of creating an automated Python wrapper for R's MLE class from stats4 package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nstats4 = importr('stats4')\nfrom rpy2.robjects.methods import RS4Auto_Type\n# use \"six\" for Python2/Python3 compatibility\nimport six\n\nclass MLE(six.with_metaclass(RS4Auto_Type)):\n  __rname__ = 'mle'\n  __rpackagename__ = 'stats4'\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Class for an R S4 Class\nDESCRIPTION: Defines a Python class that extends rpy2's RS4 class to provide a more Pythonic interface to an R S4 class (ExpressionSet).\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.methods import RS4   \nclass ExpressionSet(RS4):\n    pass\n\neset_myclass = ExpressionSet(eset)\n```\n\n----------------------------------------\n\nTITLE: Converting pandas DataFrame with timestamps to R\nDESCRIPTION: Demonstrates converting a pandas DataFrame with timestamp data to an R data.frame using the pandas2ri converter.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_df = ro.conversion.py2rpy(pd_df)\n\nr_from_pd_df\n```\n\n----------------------------------------\n\nTITLE: Creating Factor Vector in RPy2\nDESCRIPTION: Shows creation and usage of R's factor vectors in RPy2, including level handling and item access.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsv = ro.StrVector('ababbc')\nfac = ro.FactorVector(sv)\nprint(fac)\ntuple(fac)\ntuple(fac.levels)\n```\n\n----------------------------------------\n\nTITLE: R-style Indexing Examples in Python\nDESCRIPTION: Demonstrates how to achieve R-style indexing in Python using list comprehensions, including positive and negative indexing.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nl = ('a', 'b', 'c')\nl_i = (0, 2)\n[l[i] for i in l_i]\n['a', 'c']\n\nl = ('a', 'b', 'c') \nl_i = (-1, -2)\n[x for i, x in enumerate(l) if -i not in l_i]\n['a']\n```\n\n----------------------------------------\n\nTITLE: Creating an R DataFrame in Python\nDESCRIPTION: Creates an R DataFrame directly using rpy2's vector constructors, demonstrating how to build R objects in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nr_df = ro.DataFrame({'int_values': ro.IntVector([1,2,3]),\n                     'str_values': ro.StrVector(['abc', 'def', 'ghi'])})\n\nr_df\n```\n\n----------------------------------------\n\nTITLE: Adding Smoothed Trend Lines to ggplot2 Plots\nDESCRIPTION: Adds a smoothed trend line to a scatter plot using R's ggplot2 package. This demonstrates fitting statistical models to visualize relationships in the data.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2addsmooth-begin\n#-- ggplot2addsmooth-end\n```\n\n----------------------------------------\n\nTITLE: Displaying a ggplot2 plot as PNG in Jupyter notebook\nDESCRIPTION: This code shows how to display a ggplot2 plot as a PNG image in a Jupyter notebook using rpy2's image_png function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.ipython.ggplot import image_png\nimage_png(p)\n```\n\n----------------------------------------\n\nTITLE: Converting R Documentation to Python Docstring Format\nDESCRIPTION: Demonstrates how to convert R documentation to a Python-style docstring. This example formats and prints the 'details' section of the documentation for the 'sum' function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rhelp.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> print(''.join(hp.to_docstring(('details',))))\n\n::\n\n  details\n  -------\n\n\n     This is a generic function: methods can be defined for it\n     directly or via the  Summary  group generic.\n     For this to work properly, the arguments   should be\n     unnamed, and dispatch is on the first argument.\n\n     If  na.rm  is  FALSE  an  NA \n     value in any of the arguments will cause\n     a value of  NA  to be returned, otherwise\n     NA  values are ignored.\n\n     Logical true values are regarded as one, false values as zero.\n     For historical reasons,  NULL  is accepted and treated as if it\n     were  integer(0) .\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram using ggplot2 with rpy2 in Python\nDESCRIPTION: Demonstrates how to create a histogram using ggplot2 through rpy2, showcasing the integration of R's ggplot2 package in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib import ggplot2\n\np = ggplot2.ggplot(faithful_data) + \\\n    ggplot2.aes_string(x = \"eruptions\") + \\\n    ggplot2.geom_histogram(fill = \"lightblue\") + \\\n    ggplot2.geom_density(ggplot2.aes_string(y = '..count..'), colour = \"orange\") + \\\n    ggplot2.geom_rug() + \\\n    ggplot2.scale_x_continuous(\"Eruption duration (seconds)\") + \\\n    ggplot2.labs(title = \"Old Faithful eruptions\")\n\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom R-to-Python Class Mapping\nDESCRIPTION: Example of creating a custom Python class to handle specific R objects (linear models) by mapping R class names to Python classes using the rpy2 conversion system.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Lm(rinterface.ListSexpVector):\n    # implement attributes, properties, methods to make the handling of\n```\n\n----------------------------------------\n\nTITLE: Using R Graphics with Python\nDESCRIPTION: Demonstrates creating R graphics using the coplot function through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/interactive.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nr.packages.graphics.coplot(r.Formula('Time ~ conc | Wt'),\n                             r.packages.datasets.Theoph)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram and Density Plot using rpy2 in Python\nDESCRIPTION: Generates a histogram with density plot overlay for the 'eruptions' data using R's graphics and stats packages through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngrdevices = importr('grDevices')\nstats = importr('stats')\ngrdevices.png('faithful_histogram.png', width = 733, height = 550)\ned = faithful_data.rx2(\"eruptions\")\ngraphics.hist(ed, r_base.seq(1.6, 5.2, 0.2), \n               prob = True, col = \"lightblue\",\n               main = \"Old Faithful eruptions\", xlab = \"Eruption duration (seconds)\")\ngraphics.lines(stats.density(ed,bw=0.1), col = \"orange\")\ngraphics.rug(ed)\ngrdevices.dev_off()\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Names in R Vectors\nDESCRIPTION: Shows how to set and access names for elements in an R vector using rpy2. Demonstrates manipulating individual names and retrieving all names.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> x = robjects.r.seq(1, 5)\n>>> x.names = robjects.StrVector('abcde')\n>>> x.names[0]\n'a'\n>>> x.names[0] = 'z'\n>>> tuple(x.names)\n('z', 'b', 'c', 'd', 'e')\n```\n\n----------------------------------------\n\nTITLE: Applying Log Transformation to ggplot2 Axes in Python using rpy2\nDESCRIPTION: This snippet shows how to apply a log transformation to the axes of a ggplot2 plot in Python using rpy2. It plots 'wt' vs 'mpg' from the mtcars dataset with log-transformed axes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.ggplot(mtcars) +\\\n    ggplot2.aes_string(x='wt', y='mpg') +\\\n    ggplot2.geom_point(color='darkblue') +\\\n    ggplot2.geom_smooth(method='lm', color='red') +\\\n    ggplot2.coord_trans(x='log10', y='log10')\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-panel Scatter Plot with Lattice\nDESCRIPTION: Creates a scatter plot with multiple panels based on a grouping variable using R's lattice package. This demonstrates how to use formulas to create separate panels for different data groups.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#-- xyplot3-begin\n#-- xyplot3-end\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using R Graphics Devices in Python with rpy2\nDESCRIPTION: Shows how to import the grDevices package and create a PNG file output device. This example demonstrates opening a graphics device, writing plot code, and properly closing the device to save the output.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\ngrdevices = importr('grDevices')\n\ngrdevices.png(file=\"path/to/file.png\", width=512, height=512)\n# plotting code here   \ngrdevices.dev_off()\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Wireframe Plot with Lattice\nDESCRIPTION: Creates a three-dimensional wireframe plot using R's lattice package through rpy2. Wireframe plots are useful for visualizing 3D surfaces and relationships between variables.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#-- wireframe1-begin\n#-- wireframe1-end\n```\n\n----------------------------------------\n\nTITLE: Python-Style Vector Extraction\nDESCRIPTION: Demonstrates Python-style indexing and extraction from RPy2 vectors, including named vectors.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nx = robjects.r.seq(1, 5)\ntuple(x)\nx.names = robjects.StrVector('abcde')\nprint(x)\nx[0]\nx[4]\nx[-1]\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with ggplot2\nDESCRIPTION: Creates a histogram for visualizing the distribution of a single variable using R's ggplot2 package. This demonstrates changing the geometry to represent data in different ways.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomhistogram-begin\n#-- ggplot2geomhistogram-end\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vector Operations with R Objects\nDESCRIPTION: Illustrates the difference between operating on R vectors directly versus extracting their values first, showing how adding to an R vector returns an R vector while adding to an extracted value returns a Python value.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npiplus2 = robjects.r('pi') + 2\nprint(piplus2.r_repr())\npi0plus2 = robjects.r('pi')[0] + 2\nprint(pi0plus2)\n```\n\n----------------------------------------\n\nTITLE: Creating Color-coded Box Plots with ggplot2\nDESCRIPTION: Creates box plots with color coding to represent a categorical variable using R's ggplot2 package. This combines categorical comparison with group identification.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2aescolboxplot-begin\n#-- ggplot2aescolboxplot-end\n```\n\n----------------------------------------\n\nTITLE: Interpolating R Objects Example - Python\nDESCRIPTION: Demonstrates how to interpolate R objects into R code strings for evaluation using the RPY2 package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nletters = robjects.r['letters']\nrcode = 'paste(%s, collapse=\"-\")' %(letters.r_repr())\nres = robjects.r(rcode)\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Importing R Packages with RPy2\nDESCRIPTION: Demonstrates how to import R packages using rpy2's importr function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\n# import R's \"base\" package\nbase = importr('base')\n\n# import R's \"utils\" package\nutils = importr('utils')\n```\n\n----------------------------------------\n\nTITLE: Creating Frequency Polygons with ggplot2\nDESCRIPTION: Creates frequency polygons (line-based density representations) using R's ggplot2 package. This provides a clearer alternative to overlapping histograms for multiple groups.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n#-- ggplot2geomfreqpolyfillcyl-begin\n#-- ggplot2geomfreqpolyfillcyl-end\n```\n\n----------------------------------------\n\nTITLE: Demonstrating R Vector Usage with Python's enumerate()\nDESCRIPTION: Example showing how R integer vectors can be used with Python's enumerate() function through rpy2's implementation of Python sequence protocol.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rinterface as ri\nri.initr()\n\n# R array of integers\nr_vec = ri.IntSexpVector([1,2,3])\n\n# enumerate() can use our r_vec\nfor i, elt in enumerate(r_vec):\n    print('r_vec[%i]: %i' % (i, elt))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Python Class for S4 Objects\nDESCRIPTION: This code defines a custom Python class that extends rpy2's RS4 class to wrap S4 objects, specifically for ExpressionSet objects.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.methods import RS4   \nclass ExpressionSet(RS4):\n    pass\n\neset_myclass = ExpressionSet(eset)\n```\n\n----------------------------------------\n\nTITLE: Graphics Plot Example - Python\nDESCRIPTION: Creates various plots using R graphics functionality through RPY2, demonstrating layout and plot customization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\n\nr = robjects.r\n\nx = robjects.IntVector(range(10))\ny = r.rnorm(10)\n\nr.X11()\n\nr.layout(r.matrix(robjects.IntVector([1,2,3,2]), nrow=2, ncol=2))\nr.plot(r.runif(10), y, xlab=\"runif\", ylab=\"foo/bar\", col=\"red\")\n```\n\n----------------------------------------\n\nTITLE: Converting R Matrix to NumPy Array with Copy and View\nDESCRIPTION: Shows how to convert an R matrix to NumPy arrays using both numpy.array() (which creates a copy) and numpy.asarray() (which creates a view without copying). Uses the occupationalStatus dataset from R's datasets package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/numpy.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr, data\nimport numpy\n\ndatasets = importr('datasets')\nostatus = data(datasets).fetch('occupationalStatus')['occupationalStatus']\nostatus_np = numpy.array(ostatus)\nostatus_npnc = numpy.asarray(ostatus)\n```\n\n----------------------------------------\n\nTITLE: Creating a pandas DataFrame with timestamp data\nDESCRIPTION: Creates a pandas DataFrame containing a timestamp column for demonstrating date/time conversion between pandas and R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npd_df = pd.DataFrame({\n    'Timestamp': pd.date_range('2017-01-01 00:00:00', periods=10, freq='s')\n    })\n    \npd_df\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-panel Wireframe Plot with Lattice\nDESCRIPTION: Creates a wireframe plot with multiple panels based on a condition variable using R's lattice package. This demonstrates the conditional plotting capabilities of lattice.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#-- wireframe2-begin\n#-- wireframe2-end\n```\n\n----------------------------------------\n\nTITLE: Handling R Function Arguments with Dots\nDESCRIPTION: Shows how to handle R function arguments that contain dots in their names. The example uses the rank function from R's base package, demonstrating the translation of 'na.last' to 'na_last' in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_functions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nbase = importr('base')\n\nbase.rank(0, na_last = True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CRAN Mirror for R Package Installation\nDESCRIPTION: Imports R's utils package and selects a CRAN mirror for downloading R packages, which is a necessary step before installing packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif not have_tutorial_packages:\n    # import R's utility package\n    utils = rpackages.importr('utils')\n    # select a mirror for R packages\n    utils.chooseCRANmirror(ind=1) # select the first mirror in the list\n```\n\n----------------------------------------\n\nTITLE: Creating an S4 Object in rpy2\nDESCRIPTION: Creates an ExpressionSet object (an S4 class from Biobase) by calling the constructor function from the imported R package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\neset = biobase.ExpressionSet()\n```\n\n----------------------------------------\n\nTITLE: Importing RPy2 with Robjects Interface\nDESCRIPTION: Imports the high-level robjects interface from RPy2, which is the main entry point for interacting with R from Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ggplot2 Plot using qplot in Python with rpy2\nDESCRIPTION: This snippet demonstrates how to create a basic ggplot2 plot using the qplot function in Python via rpy2. It creates a scatter plot of 'wt' vs 'mpg' from the mtcars dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\np = ggplot2.qplot('wt', 'mpg', data=mtcars)\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Assigning and Listing Values in R Global Environment\nDESCRIPTION: Demonstrates how to assign a value to a symbol in the R global environment using Python dictionary-like syntax and how to list the contents of the environment using robjects.r.ls().\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> robjects.r.ls(globalenv)\n>>> robjects.globalenv[\"a\"] = 123\n>>> print(robjects.r.ls(globalenv))\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Dispatch for S4 Methods in Python\nDESCRIPTION: Uses the multipledispatch package to create Python functions that mimic R's S4 method dispatch system, allowing methods to be defined for specific Python classes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom multipledispatch import dispatch\nfrom functools import partial\n\nmy_namespace = dict()\ndispatch = partial(dispatch, namespace=my_namespace)\n\n@dispatch(ExpressionSet)\ndef rowmedians(eset,\n               na_rm=False):\n    res = biobase.rowMedians(eset,\n                             na_rm=na_rm)\n    return res\n\nres = rowmedians(eset_myclass)\n```\n\n----------------------------------------\n\nTITLE: Generating Summary Statistics using rpy2 in Python\nDESCRIPTION: Calculates and prints summary statistics for the 'eruptions' column of the faithful dataset using R's summary function through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nedsummary = r_base.summary(faithful_data.rx2(\"eruptions\"))\nfor k, v in edsummary.items():\n   print(\"%s: %.3f\\n\" %(k, v))\n```\n\n----------------------------------------\n\nTITLE: Using tapply Function from rpy2.rlike.functional in Python\nDESCRIPTION: Illustrates the usage of the tapply function from rpy2.rlike.functional, which applies a function to subsets of a sequence based on a factor sequence.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rlike.functional as rlf\nrlf.tapply((1,2,3), ('a', 'b', 'a'), sum)\n[('a', 4), ('b', 2)]\n\nimport rpy2.rlike.container as rlc\ntl = rlc.TaggedList([1, 2, 3], tags = ('a', 'b', 'a'))\nrlf.tapply(tl, tl.tags(), sum)\n[('a', 4), ('b', 2)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Layout with Grid and ggplot2 in Python using rpy2\nDESCRIPTION: This code demonstrates how to create a custom layout using both grid and ggplot2 in Python via rpy2. It creates a layout with multiple plots and text elements.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ngrid.newpage()\nvp = grid.viewport(width=1, height=1, x=0.5, y=0.5,\n                 just=('center', 'center'))\ngrid.Viewport.push(vp)\nlay = grid.layout(3, 2)\nvp2 = grid.viewport(layout = lay)\ngrid.Viewport.push(vp2)\n\np_iris = ggplot2.ggplot(iris) +\\\n         ggplot2.aes_string(x='Sepal.Length', y='Petal.Length',\n                            color='Species') +\\\n         ggplot2.geom_point()\np_mtcars = ggplot2.ggplot(mtcars) +\\\n           ggplot2.aes_string(x='wt', y='mpg', color='factor(cyl)') +\\\n           ggplot2.geom_point()\n\nfor i in (1,2):\n    vp = grid.viewport(layout_pos_col=1, layout_pos_row=i)\n    grid.Viewport.push(vp)\n    p_iris.plot(vp = vp)\n    grid.Viewport.pop()\n    vp = grid.viewport(layout_pos_col=2, layout_pos_row=i)\n    grid.Viewport.push(vp)\n    p_mtcars.plot(vp = vp)\n    grid.Viewport.pop()\n\nvp = grid.viewport(layout_pos_col=1, layout_pos_row=3)\ngrid.Viewport.push(vp)\ngrid.text('Made with rpy2')\ngrid.Viewport.pop()\n\nvp = grid.viewport(layout_pos_col=2, layout_pos_row=3)\ngrid.Viewport.push(vp)\ngrid.text('https://rpy2.github.io')\ngrid.Viewport.pop()\n```\n\n----------------------------------------\n\nTITLE: Creating and using a Formula object in Python with rpy2\nDESCRIPTION: This example demonstrates how to create an R formula in Python using rpy2, setting up the environment with variables, and using it with R's linear model function. It creates x and y vectors and uses them in a formula environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_formulae.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport array\nfrom rpy2.robjects import IntVector, Formula\nfrom rpy2.robjects.packages import importr\nstats = importr('stats')\n\nx = IntVector(range(1, 11))\ny = x.ro + stats.rnorm(10, sd=0.2)\n\nfmla = Formula('y ~ x')\nenv = fmla.environment\nenv['x'] = x\nenv['y'] = y\n\nfit = stats.lm(fmla)\n```\n\n----------------------------------------\n\nTITLE: Accessing S4 Object Properties in Python\nDESCRIPTION: These snippets show how to access various properties of an S4 object in Python, including its type, class, slot names, and slot values.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntype(eset)\n```\n\nLANGUAGE: python\nCODE:\n```\ntuple(eset.rclass)\n```\n\nLANGUAGE: python\nCODE:\n```\ntuple(eset.slotnames())\n```\n\nLANGUAGE: python\nCODE:\n```\n# print keys\nprint(tuple(eset.slots.keys()))\n\n# fetch `phenoData`\nphdat = eset.slots['phenoData']\n\n# phdat is an S4 object itself\npheno_dataf = phdat.slots['data']\n```\n\n----------------------------------------\n\nTITLE: Creating and using a formula in R\nDESCRIPTION: Basic example of creating variables and using a formula with the linear model function in R. This shows how a formula like 'y ~ x' is used in native R code for modeling.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_formulae.rst#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nx <- 1:10\ny <- x + rnorm(10, sd=0.2)\n\nfit <- lm(y ~ x)\n```\n\n----------------------------------------\n\nTITLE: LmList Class Definition\nDESCRIPTION: Implementation of a Python wrapper class for R's lmList S4 class from the lme4 package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#-- LmList-begin\n#-- LmList-end\n```\n\n----------------------------------------\n\nTITLE: Handling NA Values in RPy2\nDESCRIPTION: Demonstrates how NA values in R vectors are handled and operated on in RPy2. Shows that NA values propagate through arithmetic operations.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> rinterface.baseenv['as.integer'](rinterface.StrSexpVector((\"foo\",)))[0]\nNA_integer_\n>>> rinterface.NA_Integer + 1\nNA_integer_\n>>> rinterface.NA_Integer * 10\nNA_integer_\n```\n\n----------------------------------------\n\nTITLE: Creating and Using OrdDict in Python\nDESCRIPTION: Shows how to create and use an OrdDict (ordered dictionary) object from rpy2.rlike.container. OrdDict allows for ordered key-value pairs with support for unnamed items.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = (('a', 123), ('b', 456), ('c', 789))\nnl = rlc.OrdDict(x)\n\nnl['a']\n123\nnl.index('a')\n0\n\nnl[None] = 'no name'\n```\n\n----------------------------------------\n\nTITLE: Using dplyr to examine data frame in R magic cell\nDESCRIPTION: This code uses dplyr in an R magic cell to examine the structure of the imported data frame.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_11\n\nLANGUAGE: r\nCODE:\n```\n%%R -i dataf\n\nrequire(dplyr)\nglimpse(dataf)\n```\n\n----------------------------------------\n\nTITLE: Importing CSV data using R's read.csv function in Python\nDESCRIPTION: This code imports a CSV file from a URL using R's read.csv function through rpy2. It demonstrates how to use R's data import capabilities in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nutils = importr('utils')\n\ndataf = utils.read_csv('https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/'\n                       'master/notebooks_v1/data/california_cities.csv')\n```\n\n----------------------------------------\n\nTITLE: Accessing R Functions from Global Environment\nDESCRIPTION: Demonstrates how to access R functions that have been created in R's global environment, allowing them to be called directly from Python code.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nr_f = robjects.globalenv['f']\nprint(r_f.r_repr())\n```\n\n----------------------------------------\n\nTITLE: Creating ECDF Plot using rpy2 in Python\nDESCRIPTION: Generates an Empirical Cumulative Distribution Function (ECDF) plot for eruptions longer than 3 seconds using R's stats package through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import FloatVector\n\nlong_ed = FloatVector([x for x in ed if x > 3])\ngrdevices.png('faithful_ecdf.png', width = 733, height = 550)\n\nstats = importr('stats')\n\nparams = {'do.points' : False, \n          'verticals' : 1, \n          'main' : \"Empirical cumulative distribution function of \" + \\\n                    \"Old Faithful eruptions longer than 3 seconds\"}\ngraphics.plot(stats.ecdf(long_ed), **params)\nx = r_base.seq(3, 5.4, 0.01)\ngraphics.lines(x, stats.pnorm(x, mean = r_base.mean(long_ed), \n                              sd = r_base.sqrt(stats.var(long_ed))),\n               lty = 3, lwd = 2, col = \"salmon\")\ngrdevices.dev_off()\n```\n\n----------------------------------------\n\nTITLE: Example of NumPy Converter Usage with R's rlogis Function\nDESCRIPTION: Shows a practical example of using the NumPy converter with RPy2 to automatically convert R output to NumPy arrays within a specific context. Uses R's rlogis function from the base package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/numpy.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nstats = importr('base')\nwith np_cv_rules.context():\n    v_np = stats.rlogis(100, location=0, scale=1)\n    # `v_np` is a numpy array\n\n# Outside of the scope of the local converter the\n# result will not be automatically converted to a\n# numpy object.\nv_nonp = stats.rlogis(100, location=0, scale=1)\n```\n\n----------------------------------------\n\nTITLE: Accessing R's pi Constant\nDESCRIPTION: Demonstrates how to access R's built-in constants using the indexing syntax on the robjects.r object, returning R's value of pi as a Python-accessible object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npi = robjects.r['pi']\npi[0]\n```\n\n----------------------------------------\n\nTITLE: Using order Function from rpy2.rlike.indexing in Python\nDESCRIPTION: Shows how to use the order function from rpy2.rlike.indexing to get the indices that would sort a sequence.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rlike.indexing as rli\nx = ('a', 'c', 'b')\no = rli.order(x)\no\n[0, 2, 1]\n[x[i] for i in o]\n['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Using Local Contexts for Temporary Evaluation Environments\nDESCRIPTION: Shows how to use nested local_context managers to create temporary evaluation environments with different symbol definitions, demonstrating environment scoping and masking.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrsrc = 'y + 1'\nif 'y' in robjects.globalenv:\n    del(robjects.globalenv['y'])\nwith robjects.local_context() as lc_a:\n    lc_a['y'] = 2\n    print('In local context a:')\n    print(robjects.r(rsrc))\n    with robjects.local_context() as lc_b:\n        lc_b['y'] = 3\n        print('In local context b (masking a):')\n        print(robjects.r(rsrc))\n    print('Back to local context a:')\n    print(robjects.r(rsrc))\n```\n\n----------------------------------------\n\nTITLE: Creating and Filling R Matrices in Python with rpy2\nDESCRIPTION: Shows how to create an R matrix filled with NA values and then fill it using Python loops, demonstrating matrix indexing in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import NA_Real\nfrom rpy2.rlike.container import TaggedList\nfrom rpy2.robjects.packages import importr\n\nbase = importr('base')\n\n# create a numerical matrix of size 100x10 filled with NAs \nm = base.matrix(NA_Real, nrow=100, ncol=10)\n\n# fill the matrix\nfor row_i in xrange(1, 100+1):\n    for col_i in xrange(1, 10+1):\n        m.rx[TaggedList((row_i, ), (col_i, ))] = row_i + col_i * 100\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Converter Directly\nDESCRIPTION: Example showing how to register a custom conversion function with a Converter object directly. This associates the tuple_str function with Python's tuple class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.conversion import Converter\nseq_converter = Converter('sequence converter')\nseq_converter.py2rpy.register(tuple, tuple_str)\n```\n\n----------------------------------------\n\nTITLE: Installing R Packages via RPy2\nDESCRIPTION: Shows how to install R packages using rpy2's package management functionality.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects.packages as rpackages\n\n# import R's utility package\nutils = rpackages.importr('utils')\n\n# select a mirror for R packages\nutils.chooseCRANmirror(ind=1) # select the first mirror in the list\n```\n\nLANGUAGE: python\nCODE:\n```\n# R package names\npacknames = ('ggplot2', 'hexbin')\n\n# R vector of strings\nfrom rpy2.robjects.vectors import StrVector\n\n# Selectively install what needs to be install.\n# We are fancy, just because we can.\nnames_to_install = [x for x in packnames if not rpackages.isinstalled(x)]\nif len(names_to_install) > 0:\n    utils.install_packages(StrVector(names_to_install))\n```\n\n----------------------------------------\n\nTITLE: Creating a sample pandas DataFrame\nDESCRIPTION: Creates a simple pandas DataFrame with integer and string columns for demonstration purposes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npd_df = pd.DataFrame({'int_values': [1,2,3],\n                      'str_values': ['abc', 'def', 'ghi']})\n\npd_df\n```\n\n----------------------------------------\n\nTITLE: Creating Q-Q Plot using rpy2 in Python\nDESCRIPTION: Generates a Quantile-Quantile (Q-Q) plot for eruptions longer than 3 seconds using R's stats package through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngrdevices.png('faithful_qq.png', width = 733, height = 550)\ngraphics.par(pty=\"s\")\nstats.qqnorm(long_ed,col=\"blue\")\nstats.qqline(long_ed,col=\"red\") # strangely in stats, not in graphics\ngrdevices.dev_off()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Socket-Based R Server with Python and rpy2\nDESCRIPTION: A Python implementation of a socket server that listens on a specified port, evaluates received strings as R code using rpy2, and returns the results. This demonstrates the foundation for a custom R server that can be extended with additional functionality.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/server.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. literalinclude:: _static/demos/rpyserve.py\n```\n\n----------------------------------------\n\nTITLE: Adding a Property to Custom S4 Python Class\nDESCRIPTION: This code adds a property 'exprs' to the custom ExpressionSet Python class, mapping it to the 'assayData' slot in the R object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ExpressionSet(RS4):\n    def _exprs_get(self):\n        return self.slots['assayData']\n    def _exprs_set(self, value):\n        self.slots['assayData'] = value\n    exprs = property(_exprs_get,\n                     _exprs_set,\n                     None,\n                     \"R attribute `exprs`\")\neset_myclass = ExpressionSet(eset)\n\neset_myclass.exprs\n```\n\n----------------------------------------\n\nTITLE: Linear Models Example - Python\nDESCRIPTION: Python implementation of linear modeling using RPY2, equivalent to the R example.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import FloatVector\nfrom rpy2.robjects.packages import importr\nstats = importr('stats')\nbase = importr('base')\n\nctl = FloatVector([4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14])\ntrt = FloatVector([4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69])\ngroup = base.gl(2, 10, 20, labels = [\"Ctl\",\"Trt\"])\nweight = ctl + trt\n\nrobjects.globalenv[\"weight\"] = weight\nrobjects.globalenv[\"group\"] = group\nlm_D9 = stats.lm(\"weight ~ group\")\nprint(stats.anova(lm_D9))\n\n# omitting the intercept\nlm_D90 = stats.lm(\"weight ~ group - 1\")\nprint(base.summary(lm_D90))\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating TaggedList in Python\nDESCRIPTION: Demonstrates the creation and usage of TaggedList from rpy2.rlike.container. TaggedList is similar to named vectors in R, allowing tags to be associated with list items.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntl = rlc.TaggedList([1,2,3])\ntl\n[1, 2, 3]\ntl.tags()\n(None, None, None)\ntl.settag(0, 'a')\ntl.tags()\n('a', None, None)\n\ntl = rlc.TaggedList([1,2,3], tags=('a', 'b', 'c'))\ntl\n[1, 2, 3]\ntl.tags()\n('a', 'b', 'c')\ntl.settag(2, 'a')\ntl.tags()\n('a', 'b', 'a')\nit = tl.iterontag('a')\n[x for x in it]\n[1, 3]\n\n[(t, sum([i for i in tl.iterontag(t)])) for t in set(tl.itertags())]\n[('a', 4), ('b', 2)]\n```\n\n----------------------------------------\n\nTITLE: Matrix Creation and Filling - Python\nDESCRIPTION: Shows how to create and populate an R matrix using Python loops and RPY2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import NA_Real\nfrom rpy2.rlike.container import TaggedList\nfrom rpy2.robjects.packages import importr\n\nbase = importr('base')\n\n# create a numerical matrix of size 100x10 filled with NAs \nm = base.matrix(NA_Real, nrow=100, ncol=10)\n\n# fill the matrix\nfor row_i in xrange(1, 100+1):\n    for col_i in xrange(1, 10+1):\n        m.rx[TaggedList((row_i, ), (col_i, ))] = row_i + col_i * 100\n```\n\n----------------------------------------\n\nTITLE: Using Python Function in dplyr Chain with rternalize\nDESCRIPTION: Creates a Python function that can be called from R using the rternalize decorator, and uses it in a dplyr operation chain.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Define a python function, and make\n# it a function R can use through `rternalize`\nfrom rpy2.rinterface import rternalize\n@rternalize(signature=False)\ndef mean_np(x):\n    import statistics\n    return statistics.mean(x)\n\n# Bind that function to a symbol in R's\n# global environment\nfrom rpy2.robjects import globalenv\nglobalenv['mean_np'] = mean_np\n\n# Write a dplyr chain of operations,\n# using our Python function `mean_np`\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(mean_ptw=rl('mean(powertoweight)'),\n               mean_np_ptw=rl('mean_np(powertoweight)'))\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: R Function Calls in RPy2\nDESCRIPTION: Shows how to call R functions with named arguments through the RPy2 interface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> sum = rinterface.globalenv.find('sum')\n>>> x = rinterface.IntSexpVector([1,2,3])\n>>> s = sum(x)\n>>> s[0]\n6\n>>> rnorm = rinterface.globalenv.find('rnorm')\n>>> rnorm(rinterface.IntSexpVector([1, ]), \n          mean = rinterface.IntSexpVector([2, ]))[0]\n0.32796768001636134\n```\n\n----------------------------------------\n\nTITLE: Implementing a Client for the Socket-Based R Server\nDESCRIPTION: A Python client implementation that connects to the R server, sends R code, and receives the results. This provides a simple interface for executing R code on a remote server.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/server.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. literalinclude:: _static/demos/rpyclient.py\n```\n\n----------------------------------------\n\nTITLE: Adding a Property to a Python Wrapper for an S4 Class\nDESCRIPTION: Extends the ExpressionSet Python class with a property that provides a more Pythonic interface to access the assayData slot, mirroring R's exprs() accessor method.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass ExpressionSet(RS4):\n    def _exprs_get(self):\n        return self.slots['assayData']\n    def _exprs_set(self, value):\n        self.slots['assayData'] = value\n    exprs = property(_exprs_get,\n                     _exprs_set,\n                     None,\n                     \"R attribute `exprs`\")\neset_myclass = ExpressionSet(eset)\n\neset_myclass.exprs\n```\n\n----------------------------------------\n\nTITLE: Importing R Packages in rpy2\nDESCRIPTION: Demonstrates how to import an R package (Biobase from Bioconductor) using rpy2's importr function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nbiobase = importr('Biobase')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatter Plot with Lattice\nDESCRIPTION: Creates a simple scatter plot using R's lattice package xyplot function through rpy2. This example shows how to construct a formula and use it with xyplot to create a basic visualization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#-- xyplot1-begin\n#-- xyplot1-end\n```\n\n----------------------------------------\n\nTITLE: Accessing R Datasets in Python\nDESCRIPTION: Example of importing and accessing R datasets using rpy2's interactive features.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/interactive.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.interactive as r\n>>> import rpy2.interactive.packages # this can take few seconds\n>>> v = r.IntVector((1,2,3))\n>>> r.packages.importr('datasets')\n>>> data = rpy2.interactive.packages.data\n>>> rpackages = r.packages.packages\n>>> env = data(rpackages.datasets).fetch('trees')\n>>> tuple(env['trees'].names)\n('Girth', 'Height', 'Volume')\n```\n\n----------------------------------------\n\nTITLE: Defining Python function callable from R using rpy2\nDESCRIPTION: Demonstrates how to create a Python function that can be called from R using the @ri.rternalize decorator.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import FloatVector\nfrom rpy2.robjects.packages import importr\nimport rpy2.rinterface as ri\nstats = importr('stats')\n\n# cost function, callable from R\n@ri.rternalize\ndef cost_f(x):\n    # Rosenbrock Banana function as a cost function\n    # (as in the R man page for optim())\n    x1, x2 = x\n```\n\n----------------------------------------\n\nTITLE: PCA Example - R\nDESCRIPTION: Demonstrates principal component analysis in R with plotting.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_17\n\nLANGUAGE: r\nCODE:\n```\nm <- matrix(rnorm(100), ncol=5)\npca <- princomp(m)\nplot(pca, main=\"Eigen values\")\nbiplot(pca, main=\"biplot\")\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Converters\nDESCRIPTION: Demonstrates how to combine multiple Converter objects to create a composite set of conversion rules by adding them together.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import default_converter\nconversion_rules = default_converter + seq_converter\n```\n\n----------------------------------------\n\nTITLE: Creating R Vectors in Python with rpy2\nDESCRIPTION: Demonstrates how to create R string, integer, and float vectors using rpy2's robjects module and print their R representations.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> res = robjects.StrVector(['abc', 'def'])\n>>> print(res.r_repr())\nc(\"abc\", \"def\")\n>>> res = robjects.IntVector([1, 2, 3])\n>>> print(res.r_repr())\n1:3\n>>> res = robjects.FloatVector([1.1, 2.2, 3.3])\n>>> print(res.r_repr())\nc(1.1, 2.2, 3.3)\n```\n\n----------------------------------------\n\nTITLE: Creating a ggplot2 Map with Polygons in Python using rpy2\nDESCRIPTION: This code demonstrates how to create a map using polygons with ggplot2 in Python via rpy2. It uses example data to create a simple map representation.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndsf = {'map_id': ro.IntVector((1,1,2,2,3,3,4,4)),\n       'x': ro.FloatVector((0,1,1,2,2,3,3,4)),\n       'y': ro.FloatVector((0,0,1,1,2,2,3,3))}\nmap_data = ro.DataFrame(dsf)\nmap_id_range = range(1, max(dsf['map_id'])+1)\nvals = ro.FloatVector((runif(len(map_id_range))))\ndf_map_info = ro.DataFrame({'map_id': ro.IntVector(map_id_range),\n                            'value': vals})\np = ggplot2.ggplot(map_data) +\\\n    ggplot2.geom_polygon(ggplot2.aes_string(x='x', y='y', group='map_id',\n                                            fill='value'),\n                         data=df_map_info) +\\\n    ggplot2.scale_fill_continuous(low='white', high='red')\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying S3 Classes in Python\nDESCRIPTION: Demonstrates how to create and modify S3 class attributes using rpy2's robjects interface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> x = robjects.IntVector((1, 3))\n>>> tuple(x.rclass)\n('integer',)\n\n>>> x.rclass = robjects.StrVector((\"pair\", \"integer\"))\n>>> tuple(x.rclass)\n('pair', 'integer')\n```\n\n----------------------------------------\n\nTITLE: Using rcall Method for R Function Calls\nDESCRIPTION: Demonstrates an alternative way to call R functions using the rcall method. This approach requires specifying the R environment for evaluation and passing arguments as tuples.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_functions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nbase = importr('base')\nstats = importr('stats')\ngraphics = importr('graphics')\n\nplot = graphics.plot\nrnorm = stats.rnorm\n\nfrom rpy2.robjects import globalenv\n\nargs = (('x', rnorm(100)),)\n\nplot.rcall(args, globalenv)\n```\n\n----------------------------------------\n\nTITLE: Creating R Matrices in Python with rpy2\nDESCRIPTION: Shows how to create an R matrix from a vector using R's matrix function through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> v = robjects.FloatVector([1.1, 2.2, 3.3, 4.4, 5.5, 6.6])\n>>> m = robjects.r['matrix'](v, nrow = 2)\n>>> print(m)\n     [,1] [,2] [,3]\n[1,]  1.1  3.3  5.5\n[2,]  2.2  4.4  6.6\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone-aware Timestamp DataFrame to R\nDESCRIPTION: Shows how timezone information in pandas timestamps is preserved when converting to R, using UTC timezone as an example.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npd_tz_df = pd.DataFrame({\n    'Timestamp': pd.date_range('2017-01-01 00:00:00', periods=10, freq='s',\n                               tz='UTC')\n    })\n    \nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_tz_df = ro.conversion.py2rpy(pd_tz_df)\n\nr_from_pd_tz_df\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager with Default Converter\nDESCRIPTION: Example showing how to use the default converter within a context to ensure conversion rules are properly applied, which is useful for avoiding missing conversion rules errors.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as ro\nwith ro.default_converter.context():\n    # call to rpy2 here.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Customizing R Vector Conversion in rpy2\nDESCRIPTION: Example of customizing the conversion of R numerical vectors to return atomic values when the vector length is one. It demonstrates registering a custom conversion function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\nfrom rpy2.rinterface import SexpVector\n\n@robjects.conversion.rpy2py.register(SexpVector)\ndef my_rpy2py(obj):\n    if len(obj) == 1:\n        obj = obj[0]\n    return obj\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Conversion for Python Tuples in rpy2\nDESCRIPTION: Example of how to handle Python tuples when converting to R objects, which is not supported by default in rpy2. It uses a context manager to apply custom conversion rules locally.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nx = (1, 2, 'c')\n\nfrom rpy2.robjects.packages import importr\nbase = importr('base')\n\n# error here:\n# NotImplementedError: Conversion 'py2rpy' not defined for objects of type '<class 'tuple'>'\nres = base.paste(x, collapse=\"-\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import default_converter\nwith conversion_rules.context():\n    res = base.paste(x, collapse=\"-\")\n```\n\n----------------------------------------\n\nTITLE: Accessing R Function Closure Environment in Python with RPy2\nDESCRIPTION: Shows how to inspect the environment (namespace) of an R function using RPy2. In this example, it examines the environment of the 'plot' function from the 'graphics' package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> plot = rinterface.globalenv.find('plot')\n>>> ls = rinterface.globalenv.find('ls')\n>>> envplot_list = ls(plot.closureEnv())\n>>> [x for x in envplot_ls]\n>>>\n```\n\n----------------------------------------\n\nTITLE: Accessing R Instance and Objects in Python using rpy2\nDESCRIPTION: Demonstrates how to access the R instance and various R objects (vectors, functions) using the robjects.r attribute in Python. This snippet shows the basic usage of rpy2 to interact with R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rinstance.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> robjects.r\n>>> print(robjects.r)\n\n>>> pi = robjects.r.pi\n>>> letters = robjects.r.letters\n\n>>> plot = robjects.r.plot\n>>> dir = robjects.r.dir\n```\n\n----------------------------------------\n\nTITLE: Redirecting R Console Output to a Python List\nDESCRIPTION: Example showing how to capture R console output by redirecting it to a Python list. The original callback is backed up and restored after the operation to maintain normal functionality.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/callbacks.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuf = []\ndef f(x):\n    # function that append its argument to the list 'buf'\n    buf.append(x)\n\n# output from the R console will now be appended to the list 'buf'\nconsolewrite_print_backup = rpy2.rinterface_lib.callbacks.consolewrite_print\nrpy2.rinterface_lib.callbacks.consolewrite_print = f\n\ndate = rinterface.baseenv['date']\nrprint = rinterface.baseenv['print']\nrprint(date())\n\n# the output is in our list (as defined in the function f above)\nprint(buf)\n\n# restore default function\nrpy2.rinterface_lib.callbacks.consolewrite_print = consolewrite_print_backup\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Dispatch for Additional Types\nDESCRIPTION: Adds another implementation to the multipledispatch system, allowing the same function name to work with different input types (in this case, Matrix objects).\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import Matrix\n@dispatch(Matrix)\ndef rowmedians(m,\n               na_rm=False):\n    res = biobase.rowMedians(m,\n                             na_rm=na_rm)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML display for R dataframes in Python\nDESCRIPTION: This snippet configures the HTML display of R dataframes in Python using rpy2. It sets a custom table class for the HTML output.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for R-pandas Integration\nDESCRIPTION: Imports the necessary Python libraries for working with pandas and R objects through rpy2, including the pandas2ri converter for data frame conversion.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr \nfrom rpy2.robjects import pandas2ri\n```\n\n----------------------------------------\n\nTITLE: Creating a complex ggplot2 visualization in Python\nDESCRIPTION: This snippet creates a more complex ggplot2 visualization in Python using rpy2. It includes custom axis labels, color scales, and themes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import IntVector\np = (gp.ggplot(dataf) +\n     gp.aes(x=rl('longd'),\n            y=rl('latd'),\n            color=rl('population_total'),\n            size=rl('area_total_km2')) +\n     gp.geom_point(alpha=0.5) +\n     # Axis definitions.\n     gp.scale_x_continuous('Longitude') +\n     gp.scale_y_continuous('Latitude') +\n     # Custom size range.\n     gp.scale_size(range=IntVector([1, 18])) +\n     # Transform for pop -> color mapping\n     gp.scale_color_continuous(trans='log10') +\n     # Title.\n     gp.ggtitle('California Cities: Area and Population') +\n     # Plot theme and text size.\n     gp.theme_light(base_size=16))\nimage_png(p)\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter-based R Graphical Device in Python\nDESCRIPTION: Creates a custom graphical device class that counts the number of times different graphical primitives (circle, line, text, etc.) are called. This example demonstrates the basic structure needed to implement a custom R graphical device using rpy2's GraphicalDevice class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphicaldevices.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rinterface._rpy_device as rdevice\nfrom collections import Counter\n\nclass BeancounterDevice(rdevice.GraphicalDevice):\n    \"\"\" Graphical devive for R that counts the\n    number of times primitives are called.\"\"\"\n\n    def __init__(self):\n        super(BeancounterDevice, self).__init__()\n        self._ct = Counter()\n\n    def circle(self, x, y, radius):\n        self._ct['circle'] += 1\n\n    def clip(self, x0, x1, y0, y1):\n        self._ct['clip'] += 1\n\n    def line(self, x1, y1, x2, y2):\n        self._ct['lines'] += 1\n\n    def mode(self, mode):\n        self._ct['mode'] += 1\n\n    def rect(self, x0, x1, y0, y1):\n        self._ct['rectangle'] += 1\n\n    def strwidth(self, text):\n        self._ct['strwidth'] += 1\n        return float(0)\n\n    def text(x, y, string, rot, hadj):\n        self._ct['text'] += 1\n```\n\n----------------------------------------\n\nTITLE: Mapping R/S4 Classes to Custom Python Classes in rpy2\nDESCRIPTION: Demonstrates how to map R/S4 classes to custom Python classes using a context manager. It shows mapping for both direct and parent class matching.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects as robjects\nfrom rpy2.robjects.packages import importr\n\nclass LMER(robjects.RS4):\n    \"\"\"Custom class.\"\"\"\n    pass\n\nlme4 = importr('lme4')\n\nres = robjects.r('lmer(Reaction ~ Days + (Days | Subject), sleepstudy)')\n\n# Map the R/S4 class 'lmerMod' to our Python class LMER.\nwith robjects.conversion.converter.rclass_map_context(\n    rinterface.rinterface.SexpS4,\n    {'lmerMod': LMER}\n):\n    res2 = robjects.r('lmer(Reaction ~ Days + (Days | Subject), sleepstudy)')\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MER(robjects.RS4):\n    \"\"\"Custom class.\"\"\"\n    pass\n\nwith robjects.conversion.converter.rclass_map_context(\n    rinterface.rinterface.SexpS4,\n    {'merMod': MER}\n):\n    res3 = robjects.r('lmer(Reaction ~ Days + (Days | Subject), sleepstudy)')\n\nwith robjects.conversion.converter.rclass_map_context(\n    rinterface.rinterface.SexpS4,\n    {'lmerMod': LMER,\n     'merMod': MER}):\n    res4 = robjects.r('lmer(Reaction ~ Days + (Days | Subject), sleepstudy)')\n```\n\n----------------------------------------\n\nTITLE: Manipulating R Vectors in Python\nDESCRIPTION: These examples demonstrate how to work with R vectors in Python, including accessing constants, creating vectors, and handling R's special NA values.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npi = rinterface.globalenv.find('pi')\nlen(pi)\npi[0]\n\nletters = rinterface.globalenv.find('letters') \nlen(letters)\nLETTERS = rinterface.globalenv.find('LETTERS') \n\nfrom rpy2.rinterface_lib import na_values\nmy_naint = na_values.NAIntegerType()\nmy_naint is na_values.NA_Integer\nmy_naint == na_values.NA_Integer\n```\n\n----------------------------------------\n\nTITLE: Accessing S4 Object Slots\nDESCRIPTION: Shows how to access S4 object attributes (slots) through the slots property, which functions like a Python dictionary.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# print keys\nprint(tuple(eset.slots.keys()))\n\n# fetch `phenoData`\nphdat = eset.slots['phenoData']\n\n# phdat is an S4 object itself\npheno_dataf = phdat.slots['data']\n```\n\n----------------------------------------\n\nTITLE: Using the R Client to Query Server Information\nDESCRIPTION: Bash command demonstrating how to use the client to send an R command to check the R version on the server. This example pipes the R command through standard input to the Python client.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/server.rst#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\necho 'R.version' | python rpyclient.py --hostname localhost\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom File Chooser Function for R\nDESCRIPTION: Example of implementing a simple file chooser function that could be used to select CSV files when prompted by R. This function displays a prompt and returns a filename.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/callbacks.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef choose_csv(prompt):\n    print(prompt)\n    return(filename)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Functions from R Functions\nDESCRIPTION: Demonstrates how to dynamically create Python functions from R functions, complete with matching signatures. This example creates an R function and wraps it as a Python function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_functions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nr_func_code = \"\"\"\nfunction(x, y=FALSE, z=\"abc\") {\n  TRUE\n}\n\"\"\"\nr_func = robjects.r(r_func_code)\n\npy_func = robjects.functions.wrap_r_function(r_func, 'py_func')\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp DataFrame to R\nDESCRIPTION: Demonstrates converting a pandas DataFrame with timestamp data to an R data.frame, showing how datetime objects are handled.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_df = ro.conversion.py2rpy(pd_df)\n\nr_from_pd_df\n```\n\n----------------------------------------\n\nTITLE: Preparing a Dataset for ggplot2 Examples\nDESCRIPTION: Sets up a dataset for use with ggplot2 examples. This demonstrates preparing data in the correct format for ggplot2 visualizations.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#-- dataset-begin\n#-- dataset-end\n```\n\n----------------------------------------\n\nTITLE: Renaming matrix columns in Python using rpy2\nDESCRIPTION: Demonstrates how to create an R matrix and rename its columns using rpy2.rinterface in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# import and initialize\nimport rpy2.rinterface as ri\nri.initr()\n\n# make a function to rename column i\ndef rename_col_i(m, i, name):\n    m.do_slot(\"dimnames\")[1][i] = name\n\n# create a matrix\nmatrix = ri.baseenv[\"matrix\"]\nrlist = ri.baseenv[\"list\"]\nm = matrix(ri.baseenv[\":\"](1, 10),\n           nrow = 2,\n           dimnames = rlist(ri.StrSexpVector((\"1\", \"2\")),\n\t                       ri.StrSexpVector((\"a\", \"b\", \"c\", \"d\", \"e\"))))\n\n>>> tuple(m.do_slot(\"dimnames\")[1])\n('a', 'b', 'c', 'd', 'e')\n\n>>> i = 3-1   \n>>> rename_col_i(m, i, ri.StrSexpVector((\"foo\", )))\n>>> tuple(m.do_slot(\"dimnames\")[1])\n('a', 'b', 'foo', 'd', 'e')\n```\n\n----------------------------------------\n\nTITLE: Accessing R Object Attributes in Python\nDESCRIPTION: This snippet shows how to access attributes of R objects using the do_slot method. It demonstrates creating a matrix and accessing its dimensions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmatrix = rinterface.globalenv.find(\"matrix\")\nletters = rinterface.globalenv.find(\"letters\")\nm = matrix(letters, ncol = 2)\n[x for x in m.do_slot(\"dim\")]\n[13, 2]\n```\n\n----------------------------------------\n\nTITLE: Installing rpy2-robjects via pip\nDESCRIPTION: Command to install the rpy2-robjects package from a Python package repository using pip. This installs the specific rpy2-robjects package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/rpy2-robjects/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install rpy2-robjects\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Parameters in R Function Calls with RPy2\nDESCRIPTION: Demonstrates how to use RPy2's MissingArg to explicitly pass missing parameters to R functions, which is useful for operations like matrix subsetting in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nimport rpy2.rinterface as ri\nri.initr()\n\nmatrix = ri.baseenv['matrix']\nextract = ri.baseenv['[']\n\nm = matrix(ri.IntSexpVector(range(1, 11)), nrow = 5, ncol = 2)\n\nn = extract(m, ri.MissingArg, 2)\n```\n\n----------------------------------------\n\nTITLE: Using Python Function with dplyr in Custom Environment\nDESCRIPTION: Demonstrates calling a Python function from dplyr without placing it in R's global environment by using rlang quosures and a custom environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# First we delete our Python callback in globalenv to\n# ensure that we are picking up our callback in our\n# specific environment rather than this one.\ndel(globalenv['mean_np'])\n\nfrom rpy2.robjects import Environment\nmy_env = Environment()\nmy_env['mean_np'] = mean_np\n\n\n# Create an rlang \"quosure\" object within\n# a given environment. We use the R package\n# rlang used by dplyr.\nfrom rpy2.robjects.lib.dplyr import rlang\n\nmyquo = rlang.quo.rcall(\n    [(None, rl('mean_np(rlang::enexpr(powertoweight))'))],\n    environment=my_env\n)\n\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(\n        mean_ptw=rl('mean(powertoweight)'),\n        mean_np_ptw=myquo)\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Importing Biobase Package from Bioconductor\nDESCRIPTION: This code imports the Biobase package from Bioconductor, which is commonly used for working with S4 objects in bioinformatics.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nbiobase = importr('Biobase')\n```\n\n----------------------------------------\n\nTITLE: Converting pandas DataFrame with timezone-aware timestamps to R\nDESCRIPTION: Creates and converts a pandas DataFrame with timezone-aware timestamps (UTC) to an R data.frame, showing how timezones are preserved in conversion.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npd_tz_df = pd.DataFrame({\n    'Timestamp': pd.date_range('2017-01-01 00:00:00', periods=10, freq='s',\n                               tz='UTC')\n    })\n    \nwith (ro.default_converter + pandas2ri.converter).context():\n  r_from_pd_tz_df = ro.conversion.py2rpy(pd_tz_df)\n\nr_from_pd_tz_df\n```\n\n----------------------------------------\n\nTITLE: Changing conversion rules for R magic\nDESCRIPTION: This code shows how to change conversion rules for R magic to a no-op converter, keeping all rpy2 objects as proxy wrappers to R objects.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects\nimport IPython\nipy = IPython.get_ipython()\n\nnoop_conv = rpy2.robjects.conversion.Converter('No-Op')\nnoop_conv.rpy2py.register(rpy2.robjects.RObject,\n                          rpy2.robjects._rpy2py_robject)\n\nipy.magics_manager.registry['RMagics'].options.converter = noop_conv\n```\n\n----------------------------------------\n\nTITLE: Checking Object Type in rpy2\nDESCRIPTION: Shows how to check the type of an R object in Python using the built-in type function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntype(eset)\n```\n\n----------------------------------------\n\nTITLE: Testing rpy2 installation with pytest\nDESCRIPTION: Shell command for running the test suite to verify a successful installation of rpy2 using pytest.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/overview.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest --pyargs 'rpy2.tests'\n```\n\n----------------------------------------\n\nTITLE: Memory-Efficient R Object Handling in Python\nDESCRIPTION: Shows an example of efficiently handling large R objects in a Python loop by explicitly triggering garbage collection after each iteration.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/performances.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects\nimport gc\n\nr = rpy2.robjects.r\n\nr(\"a <- NULL\")\nfor i in range(20):\n    rcode = \"a <- rbind(a, seq(1000000) * 1.0 * %d)\" % i\n    r(rcode)\n    print r(\"sum(a)\")\n    # explicit garbage collection\n    gc.collect()\n```\n\n----------------------------------------\n\nTITLE: Ensuring Default Conversion in Custom Functions\nDESCRIPTION: Demonstrates how to ensure a function always uses rpy2's default conversion rules, regardless of the caller's settings, by using a context manager.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import default_converter\n\ndef my_function(obj):\n    with default_converter.context():\n        # Block of code mixing Python code and calls to R functions\n        # interacting with the objects returned by R in the Python code.\n        # Within this block the conversion rules are the ones of\n        # `default_converter`.\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting Up ggplot2 Package for Grammar of Graphics\nDESCRIPTION: Imports and sets up R's ggplot2 package for use with rpy2. ggplot2 implements the Grammar of Graphics for creating complex, layered visualizations.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n#-- setupggplot2-begin\n#-- setupggplot2-end\n```\n\n----------------------------------------\n\nTITLE: Creating an ExpressionSet S4 Object\nDESCRIPTION: This snippet demonstrates how to create an ExpressionSet S4 object using the Biobase package in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\neset = biobase.ExpressionSet()\n```\n\n----------------------------------------\n\nTITLE: Creating R External Pointers from Python Objects with RPy2\nDESCRIPTION: Illustrates how to create R external pointers from Python objects using RPy2. This can be used to pass Python data structures to R, including custom ctypes structures.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nep = rinterface.SexpExtPtr.from_pyobject('hohoho')\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ctypes\nclass Point2D(ctypes.Structure):\n    _fields_ = [('x', ctypes.c_int),\n                ('y', ctypes.c_int)]\n\npt = Point2D()\n\nep = rinterface.SexpExtPtr.from_pyobject(pt)\n```\n\n----------------------------------------\n\nTITLE: Generating Class Diagram for rpy2.robjects Package in reStructuredText\nDESCRIPTION: This RST directive generates an inheritance diagram for the rpy2.robjects package, including its submodules methods, vectors, and functions. The diagram shows one level of inheritance relationships.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. inheritance-diagram:: rpy2.robjects rpy2.robjects.methods rpy2.robjects.vectors rpy2.robjects.functions\n   :parts: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame Using rpy2 in Python\nDESCRIPTION: This snippet demonstrates how to create a DataFrame using rpy2, combining Python's OrderedDict with R's vector types (StrVector and IntVector).\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/tidyr.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import OrderedDict\nfrom rpy2.robjects.vectors import (StrVector,\n                                   IntVector)\ndataf = DataFrame(OrderedDict(x=StrVector((\"a\", \"b\", \"b\")),\n                              y=IntVector((3, 4, 5)),\n\t\t              z=IntVector((6, 7, 8))))\ndataf\n```\n\n----------------------------------------\n\nTITLE: Accessing R Help Documentation in Python with rpy2\nDESCRIPTION: Shows how to access R's built-in help system from Python using rpy2, including searching for help topics across packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from rpy2.robjects.packages import importr\n>>> utils = importr(\"utils\") \n>>> help_doc = utils.help(\"help\")\n>>> help_doc[0]\n'/where/R/is/installed/library/utils/help/help'\n>>> help_where = utils.help_search(\"help\")\n```\n\n----------------------------------------\n\nTITLE: Alternative approaches for formula evaluation in rpy2\nDESCRIPTION: Two additional methods for evaluating R formulas: using robjects.r to evaluate R code directly, and evaluating R code where all symbols are defined. These methods offer different trade-offs for handling formula contexts.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_formulae.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfit = robjects.r('lm(%s)' %fmla.r_repr())\n```\n\n----------------------------------------\n\nTITLE: Calling R Functions with Named Parameters in Python using RPy2\nDESCRIPTION: Demonstrates how to call R functions with named parameters using RPy2's OrdDict and rcall method. This approach allows preserving the parameter order as it would be in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport rpy2.rlike.container as rpc\nargs = rpc.OrdDict()\nargs['x'] = rinterface.IntSexpVector([1,2,3])\nargs[None] = rinterface.IntSexpVector([4,5])\nargs['y'] = rinterface.IntSexpVector([6, ])\nrlist = rinterface.baseenv['list']\nrl = rlist.rcall(tuple(args.items()), rinterface.globalenv)\n\n>>> [x for x in rl.do_slot(\"names\")]\n['x', '', 'y']\n```\n\n----------------------------------------\n\nTITLE: Installing rpy2 using pip\nDESCRIPTION: Shell commands for installing rpy2 package using pip with various installation options, including minimal installation, test dependencies, and all dependencies.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# minimal\npip install rpy2\n\n# or\n# to run tests\npip install rpy2[test]\n\n# or\n# all dependencies\npip install rpy2[all]\n```\n\n----------------------------------------\n\nTITLE: Parsing R code in Python using rpy2\nDESCRIPTION: Shows how to parse R code into an expression using the parse() function from rpy2.rinterface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> expression = ri.parse('1 + 2')\n\n>>> len(expression)\n1\n>>> len(expression[0])\n3\n\n>>> expression[0][0].typeof\n<RTYPES.SYMSXP: 1>\n>>> tuple(expression[0][1])\n(1.0,)\n>>> tuple(expression[0][2])\n(2.0,)\n```\n\n----------------------------------------\n\nTITLE: Evaluating a formula in a specific R environment\nDESCRIPTION: This approach shows how to evaluate an R formula call within a specific environment using base.eval.rcall. This helps improve the pretty-printing of the resulting model object by avoiding global environment pollution.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_formulae.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import Environment\n\neval_env = Environment()\neval_env['fmla'] = fmla\nbase = importr('base')\n\nfit = base.eval.rcall(base.parse(text = 'lm(fmla)'), stats._env)\n```\n\n----------------------------------------\n\nTITLE: Using Filter Function with Deferred Evaluation in R\nDESCRIPTION: This example demonstrates how R defers expression evaluation, showing a filter operation where 'x > 0' is evaluated in the context of the data frame. This approach is commonly used in R packages like dplyr.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_language.rst#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n## data is a data frame with a column called \"x\".\n## To filter rows with positive values in column \"x\" we can do:\nfilter(data, x > 0)\n```\n\n----------------------------------------\n\nTITLE: Listing S4 Object Slot Names\nDESCRIPTION: Demonstrates how to list the attribute (slot) names of an S4 object using the slotnames method.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntuple(eset.slotnames())\n```\n\n----------------------------------------\n\nTITLE: Importing R Packages in Python with rpy2\nDESCRIPTION: Demonstrates how to import an R package (utils) using rpy2's importr function. This allows access to R functions as Python objects.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\nutils = importr(\"utils\")\n```\n\n----------------------------------------\n\nTITLE: Importing required libraries for R-pandas conversion\nDESCRIPTION: Imports the necessary modules for converting between R and pandas data structures, including pandas, rpy2.robjects, and the pandas2ri converter.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport rpy2.robjects as ro\nfrom rpy2.robjects.packages import importr \nfrom rpy2.robjects import pandas2ri\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing R Objects using Python's pickle\nDESCRIPTION: Demonstrates how to serialize an R StrVector object to a binary format using Python's pickle module and then restore it. This technique allows storing R objects to disk or sharing them between processes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_serialization.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nimport rpy2.robjects as ro\n\nx = ro.StrVector(('a', 'b', 'c'))\n\nx_serialized = pickle.dumps(x, f)\n\nx_again = pickle.loads(x_serialized)\n```\n\n----------------------------------------\n\nTITLE: Accessing R SEXP Pointers with ctypes in Python\nDESCRIPTION: Shows how to use Python's ctypes module to access the underlying R SEXP pointer from a Python object without writing C code.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport ctypes\n\n# Python C API: get the capsule name (of a capsule object)\npycapsule_getname=ctypes.pythonapi.PyCapsule_GetName\npycapsule_getname.argtypes = [ctypes.py_object,]\npycapsule_getname.restype=ctypes.c_char_p\n\n# Python C API: return whether a Python objects is a valid capsule object\npycapsule_isvalid=ctypes.pythonapi.PyCapsule_IsValid\npycapsule_isvalid.argtypes=[ctypes.py_object, ctypes.c_char_p]\npycapsule_isvalid.restype=ctypes.c_bool\n\n# Python C API: return the C pointer\npycapsule_getpointer=ctypes.pythonapi.PyCapsule_GetPointer\npycapsule_getpointer.argtypes=[ctypes.py_object, ctypes.c_char_p]\npycapsule_getpointer.restype=ctypes.c_void_p\n\nclass SexpObject(ctypes.Structure):\n    \"\"\" C structure SexpObject as defined in the C\n        layer of rpy2. \"\"\"\n    _fields_ = [('pycount', ctypes.c_ssize_t),\n                ('rcount', ctypes.c_int),\n                ('sexp', ctypes.c_void_p)]\n\n# Function to extract the pointer to the underlying R object\n# (*SEXPREC, that is SEXP)\nRPY2_CAPSULENAME=b'rpy2.rinterface._rinterface.SEXPOBJ_C_API'\ndef get_sexp(obj):\n    assert pycapsule_isvalid(obj, RPY2_CAPSULENAME)\n    void_p=pycapsule_getpointer(obj, RPY2_CAPSULENAME)\n    return ctypes.cast(void_p, ctypes.POINTER(SexpObject).contents.sexp\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Conversion Function for S4 Objects\nDESCRIPTION: Implements a factory function that conditionally wraps R S4 objects in the appropriate Python class based on their R class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef rpy2py_s4(obj):\n    if 'ExpressionSet' in obj.rclass:\n        res = ExpressionSet(obj)\n    else:\n        res = robj\n    return res\n\n# try it\nrpy2py_s4(eset)\n```\n\n----------------------------------------\n\nTITLE: Optimized LmList Construction\nDESCRIPTION: Alternative approach to building LmList instance with better call storage.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#-- buildLmListBetterCall-begin\n#-- buildLmListBetterCall-end\n```\n\n----------------------------------------\n\nTITLE: Creating Stem-and-Leaf Plot using rpy2 in Python\nDESCRIPTION: Generates a stem-and-leaf plot of the 'eruptions' data using R's graphics package through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngraphics = importr('graphics')\n\nprint(\"Stem-and-leaf plot of Old Faithful eruption duration data\")\ngraphics.stem(faithful_data.rx2(\"eruptions\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a sample R data.frame\nDESCRIPTION: Creates an R data.frame with integer and string vectors for demonstration of R to pandas conversion.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nr_df = ro.DataFrame({'int_values': ro.IntVector([1,2,3]),\n                     'str_values': ro.StrVector(['abc', 'def', 'ghi'])})\n\nr_df\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Console Read Callback in Python for R\nDESCRIPTION: Example of creating a custom console read function to replace the default callback in rpy2. This function customizes the prompt shown to the user when R requests input.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/callbacks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef  my_consoleread(prompt: str) -> str:\n    custom_prompt = f'R is asking this: {promp}'\n    return input(custom_prompt)\n\nrpy2.rinterface_lib.callbacks.consoleread = my_consoleread\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Converter with Decorator Syntax\nDESCRIPTION: Alternative approach to register a conversion function using Python decorator syntax, which is more concise for inline function definitions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_converter = rpy2.robjects.conversion.Converter()\n\n@my_converter.py2rpy(tuple)\ndef tuple_str(tpl):\n    res = StrSexpVector(tpl)\n    return res\n```\n\n----------------------------------------\n\nTITLE: dplyr Operations on Pandas DataFrame\nDESCRIPTION: Shows how to apply dplyr operations on a pandas DataFrame through rpy2 conversion\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith (default_converter + pandas2ri.converter).context() as cv:\n    dataf = (DataFrame(pd_mtcars)\n             .filter(rl('gear>=3'))\n             .mutate(powertoweight=rl('hp*36/wt'))\n             .group_by(rl('gear'))\n             .summarize(mean_ptw=rl('mean(powertoweight)')))\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Demonstrating conversion error without context manager\nDESCRIPTION: Shows the error that occurs when trying to pass a pandas DataFrame to an R function without using the proper conversion context.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  df_summary = base.summary(pd_df)\nexcept NotImplementedError as nie:\n  print('NotImplementedError:')\n  print(nie)\n```\n\n----------------------------------------\n\nTITLE: Building LmList Instance\nDESCRIPTION: Example of creating an LmList instance using Formula and dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#-- buildLmList-begin\n#-- buildLmList-end\n```\n\n----------------------------------------\n\nTITLE: Converting R Letters Vector to NumPy Array\nDESCRIPTION: Demonstrates how to convert an R vector (letters) to a NumPy array using numpy.array(). This creates a copy of the R data in a NumPy array format.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/numpy.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\n\nltr = robjects.r.letters\nltr_np = numpy.array(ltr)\n```\n\n----------------------------------------\n\nTITLE: Setup Code for S4 Class Implementation\nDESCRIPTION: Initial setup code for working with S4 classes, importing required rpy2 modules and utilities.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_oop.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#-- setup-begin\n#-- setup-end\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for rpy2 in Python\nDESCRIPTION: Sets up the necessary imports from rpy2 to interact with R functionality, including DataFrame, importr, and data functions.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.vectors import DataFrame\nfrom rpy2.robjects.packages import importr, data\n\nr_base = importr('base')\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Conversion Rules in rpy2\nDESCRIPTION: Shows how to access and use the active conversion rules within a context manager block in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_convert.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects import default_converter\nfrom rpy2.robjects.conversion import get_conversion\n\ndef my_function(obj):\n    with default_converter.context() as local_converter:\n        # `local_converter` is a rpy2.robjects.conversion.Converter\n        # object.\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nwith default_converter.context() as local_converter:\n    # Conversion objects are not the same.\n    assert local_converter != default_converter\n    assert cv.py2rpy.registry != default_converter.py2rpy\n    assert cv.rpy2py.registry != default_converter.rpy2py\n    # The convertion rules are identical though.\n    assert dict(cv.py2rpy.registry) == dict(default_converter.py2rpy.registry)\n    assert dict(cv.rpy2py.registry) == dict(default_converter.rpy2py.registry)\n```\n\n----------------------------------------\n\nTITLE: Running R code in Jupyter notebook using R magic\nDESCRIPTION: This snippet demonstrates how to run R code in a Jupyter notebook using the R magic command. It prints the R version string.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_10\n\nLANGUAGE: r\nCODE:\n```\n%%R\nR.version.string\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Display of R DataFrames in IPython\nDESCRIPTION: Sets up custom HTML display options for R data frames in IPython by applying the 'docutils' table class styling to R data frames.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Low-Level Conversion Between SexpVector and NumPy Arrays\nDESCRIPTION: Demonstrates low-level conversion between RPy2's SexpVector objects and NumPy arrays using numpy.array() and numpy.asarray(). Shows how changes to a NumPy view affect the underlying R vector.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/numpy.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nrx = rinterface.SexpVector([1,2,3,4], rinterface.INTSXP)\nnx = numpy.array(rx)\nnx_nc = numpy.asarray(rx)\n```\n\n----------------------------------------\n\nTITLE: Vector Item Assignment\nDESCRIPTION: Demonstrates both Python-style and R-style assignment operations on vectors.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nx = robjects.IntVector((1,2,3))\nprint(x)\nx[0] = 9\nprint(x)\nx = robjects.ListVector({'a': 1, 'b': 2, 'c': 3})\nx[x.names.index('b')] = 9\n```\n\n----------------------------------------\n\nTITLE: Environment Manipulation in RPy2\nDESCRIPTION: Demonstrates how to access and modify R environments using Python dictionary-like syntax.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> x = rinterface.IntSexpVector([123, ])\n>>> rinterface.globalenv[\"x\"] = x\n>>> len(x)\n1\n>>> tuple(rinterface.globalenv)\n('x', )\n>>> del(rinterface.globalenv['x'])\n>>> len(x)\n0\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to a ggplot2 Plot in Python using rpy2\nDESCRIPTION: This code demonstrates how to add annotations to a ggplot2 plot in Python using rpy2. It adds a red square annotation to a scatter plot of 'wt' vs 'mpg' from the mtcars dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\np = p + ggplot2.annotate(\"rect\", xmin=1, xmax=5, ymin=2, ymax=4,\n                      fill=\"red\", alpha=0.2)\n```\n\n----------------------------------------\n\nTITLE: Applying tidyr's spread Function in Python\nDESCRIPTION: This code applies the tidyr spread function to the previously created DataFrame, demonstrating how to use R's tidyr functionality in Python through rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/tidyr.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndataf.spread('x', 'y')\n```\n\n----------------------------------------\n\nTITLE: Advanced Environment Management\nDESCRIPTION: Demonstrates using custom environments for R functions and dplyr operations\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndel(globalenv['mean_np'])\n\nfrom rpy2.robjects import Environment\nmy_env = Environment()\nmy_env['mean_np'] = mean_np\n\nfrom rpy2.robjects.lib.dplyr import rlang\n\nmyquo = rlang.quo.rcall(\n    [(None, rl('mean_np(rlang::enexpr(powertoweight))'))],\n    environment=my_env\n)\n\ndataf = (\n    DataFrame(mtcars)\n    .filter(rl('gear>3'))\n    .mutate(powertoweight=rl('hp*36/wt'))\n    .group_by(rl('gear'))\n    .summarize(\n        mean_ptw=rl('mean(powertoweight)'),\n        mean_np_ptw=myquo)\n)\n\ndataf\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into DataFrame using rpy2 in Python\nDESCRIPTION: Demonstrates how to load data from a CSV file into an R DataFrame using rpy2's DataFrame class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfaithful_data = DataFrame.from_csvfile('faithful.dat', sep = \" \")\n```\n\n----------------------------------------\n\nTITLE: Accessing Documentation Page Properties in Python\nDESCRIPTION: Shows how to work with a retrieved documentation page object. The example demonstrates accessing a page for the 'sum' function and viewing its available section keys.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rhelp.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> hp = base_help.fetch('sum')\n\n>>> hp.sections.keys()\n('title', 'name', 'alias', 'keyword', 'description', 'usage', 'arguments', 'deta\nils', 'value', 'section', 'references', 'seealso')\n```\n\n----------------------------------------\n\nTITLE: Getting R Object Class Information\nDESCRIPTION: Displays how to retrieve the R class information for an S4 object using the rclass attribute.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntuple(eset.rclass)\n```\n\n----------------------------------------\n\nTITLE: Using dplyr with SQLite Database\nDESCRIPTION: Shows how to use dplyr with an SQLite database, demonstrating dplyr's ability to translate operations to SQL when data is in a table.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.dplyr import dplyr\n# in-memory SQLite database broken in dplyr's src_sqlite\n# db = dplyr.src_sqlite(\":memory:\")\nimport tempfile\nwith tempfile.NamedTemporaryFile() as db_fh:\n    db = dplyr.src_sqlite(db_fh.name)\n    # copy the table to that database\n    dataf_db = DataFrame(mtcars).copy_to(db, name=\"mtcars\")\n    res = (dataf_db\n           .filter(rl('gear>3'))\n           .mutate(powertoweight=rl('hp*36/wt'))\n           .group_by(rl('gear'))\n           .summarize(mean_ptw=rl('mean(powertoweight)')))\n    print(res)\n# \n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vector in RPy2\nDESCRIPTION: Demonstrates creation of a basic vector object using RPy2's Vector constructor.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/vector.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nx = robjects.Vector(3)\n```\n\n----------------------------------------\n\nTITLE: Creating ggplot2 visualization in R magic cell\nDESCRIPTION: This snippet creates a ggplot2 visualization in an R magic cell, demonstrating how to use R code directly in a Jupyter notebook.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_12\n\nLANGUAGE: r\nCODE:\n```\n%%R -w 800 --type=cairo\n\ncat(\"Running an R code cell.\\n\")\n\np <- ggplot(dataf) +\n     aes(x=longd,\n         y=latd,\n         color=population_total,\n         size=area_total_km2) +\n     geom_point(alpha=0.5) +\n     scale_x_continuous('Longitude') +\n     scale_y_continuous('Latitude') +\n     scale_size(range=c(1, 18)) +\n     scale_color_viridis(trans='log10') +\n     ggtitle('California Cities: Area and Population') +\n     theme_light(base_size=16)\nprint(p)\n```\n\n----------------------------------------\n\nTITLE: Loading R Dataset using rpy2 in Python\nDESCRIPTION: Shows how to load a built-in R dataset ('faithful') using rpy2's data function and the datasets package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/porting-to-rpy2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndatasets = importr('datasets')\nfaithful_data = data(datasets).fetch('faithful')['faithful']\n```\n\n----------------------------------------\n\nTITLE: Checking RPy2 Environment in Python\nDESCRIPTION: Python code to display rpy2's environment information.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.situation\nfor row in rpy2.situation.iter_info():\n    print(row)\n```\n\n----------------------------------------\n\nTITLE: Processing R Events in Python Thread\nDESCRIPTION: This code snippet shows how to process R events in a Python thread to maintain interactivity, particularly for graphical devices. It uses the rinterface_lib.callbacks.process_revents function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.rinterface_lib import callbacks\n\n# Call this function at regular intervals\ncallbacks.process_revents()\n```\n\n----------------------------------------\n\nTITLE: SQL Integration with dplyr\nDESCRIPTION: Shows how to use dplyr with SQLite database integration\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.dplyr import dplyr\nimport tempfile\nwith tempfile.NamedTemporaryFile() as db_fh:\n    db = dplyr.src_sqlite(db_fh.name)\n    dataf_db = DataFrame(mtcars).copy_to(db, name=\"mtcars\")\n    res = (dataf_db\n           .filter(rl('gear>3'))\n           .mutate(powertoweight=rl('hp*36/wt'))\n           .group_by(rl('gear'))\n           .summarize(mean_ptw=rl('mean(powertoweight)')))\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Restoring the Original Cleanup Callback in rpy2\nDESCRIPTION: Code snippet showing how to restore the original cleanup callback after replacing it with a custom one. This ensures the normal R termination behavior is reinstated.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/callbacks.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrpy2.rinterface_lib.callbacks.cleanup = orig_cleanup\n```\n\n----------------------------------------\n\nTITLE: Adding a Line to a ggplot2 Plot in Python using rpy2\nDESCRIPTION: This code shows how to add a line to an existing ggplot2 plot in Python using rpy2. It adds a red line to a scatter plot of 'wt' vs 'mpg' from the mtcars dataset.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\np = p + ggplot2.geom_line(color=\"red\")\np.plot()\n```\n\n----------------------------------------\n\nTITLE: Initializing R Event Processing in Python\nDESCRIPTION: Demonstrates how to start and control the R event processing loop for interactive operations like refreshing graphical devices.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/interactive.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from rpy2.interactive import process_revents\n>>> process_revents.start()\n\n>>> from rpy2.robjects.packages import importr\n>>> from rpy2.robjects.vectors import IntVector\n>>> graphics = importr(\"graphics\")\n>>> graphics.barplot(IntVector((1,3,2,5,4)), ylab=\"Value\")\n```\n\n----------------------------------------\n\nTITLE: Checking RPy2 Environment via Command Line\nDESCRIPTION: Command line utility to report rpy2's environment settings.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m rpy2.situation\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data for Lattice XY Plots\nDESCRIPTION: Preparation code for creating scatter plots with lattice, setting up the dataset and variables. This demonstrates working with the mtcars dataset common in R examples.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#-- setupxyplot-begin\n#-- setupxyplot-end\n```\n\n----------------------------------------\n\nTITLE: Importing R Code from URL as Anonymous Package\nDESCRIPTION: Shows how to fetch R code from a URL and create an anonymous package. This is useful for sourcing R code directly from online repositories.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport urllib2\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\n\nbioc_url = urllib2.urlopen('https://raw.github.com/hadley/stringr/master/R/c.r')\nstring = ''.join(bioc_url.readlines())\n\nstringr_c = SignatureTranslatedAnonymousPackage(string, \"stringr_c\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML rendering for R DataFrames in IPython\nDESCRIPTION: Sets up custom HTML rendering for R data frames in IPython by applying the 'docutils' table class to the HTML output.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/pandas.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Output for R DataFrames\nDESCRIPTION: Applies a custom CSS class to R DataFrames when displayed in IPython by using functools.partial to modify the default HTML renderer.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom R Graphical Device with rpy2\nDESCRIPTION: Demonstrates how to instantiate and use the custom BeancounterDevice with R's graphics package. Creates a plot and shows how to access the counting results.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphicaldevices.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.packages import importr\n\ndev = BeancounterDevice()\n\ngraphics = importr(\"graphics\")\n# plot into our counting device\ngraphics.plot(0, 0)\n\n# Print the counts\nprint(dev._ct)\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure with toctree\nDESCRIPTION: RST markup defining the documentation structure using Sphinx's toctree directive. Links to key documentation sections including overview, introduction, and integration guides.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/getting-started.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   overview\n   introduction\n   generated_rst/notebooks\n   generated_rst/pandas\n   generated_rst/dplyr\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample pandas DataFrame\nDESCRIPTION: Creates a simple pandas DataFrame with integer and string columns for demonstration purposes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npd_df = pd.DataFrame({'int_values': [1,2,3],\n                      'str_values': ['abc', 'def', 'ghi']})\n\npd_df\n```\n\n----------------------------------------\n\nTITLE: Finding R Symbol Origin with rpy2\nDESCRIPTION: Demonstrates how to use the wherefrom function to find the origin package of an R symbol. This is useful for debugging and understanding symbol resolution in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.robjects.packages as rpacks\nenv = rpacks.wherefrom('lm')\nenv.do_slot('name')[0]\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Rendering for R DataFrames\nDESCRIPTION: Sets up HTML rendering configuration for R DataFrames in IPython notebook environment\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Scatter Plot with Lattice\nDESCRIPTION: Creates a scatter plot with color-coded groups using R's lattice package through rpy2. The groups parameter is used to differentiate between different categories in the data.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#-- xyplot2-begin\n#-- xyplot2-end\n```\n\n----------------------------------------\n\nTITLE: Creating named objects in R workspace\nDESCRIPTION: Demonstrates creating named objects in the R workspace using R code. These objects can then be accessed from Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nx <- c(1,2,3)\n\nhyp <- function(x, y) sqrt(x^2 + y^2)\n```\n\n----------------------------------------\n\nTITLE: Customizing R's Cleanup Process to Prevent Quitting\nDESCRIPTION: Example showing how to override R's cleanup callback to prevent programmatic exit attempts. The custom function always returns None to cancel the exit process, and the original callback is restored afterward.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/callbacks.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rinterface\n\nrpy2.rinterface.initr()\n\nrquit = rpy2.rinterface.baseenv['q']\n\ndef my_cleanup(saveact, status, runlast):\n    # cancel all attempts to quit R programmatically\n    print(\"One can't escape...\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Loading R magic extension in Jupyter notebook\nDESCRIPTION: This code loads the R magic extension in a Jupyter notebook, allowing the use of R code cells.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n```\n\n----------------------------------------\n\nTITLE: Extending ggplot2 with viridis color scale in Python\nDESCRIPTION: This code demonstrates how to extend ggplot2 with the viridis color scale package in Python using rpy2. It creates a new color scale class and function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nviridis = importr('viridis')\nclass ScaleColorViridis(gp.ScaleColour):\n    _constructor = viridis.scale_color_viridis\nscale_color_viridis = ScaleColorViridis.new\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML rendering for R dataframes in rpy2\nDESCRIPTION: Customizes the HTML rendering of R dataframes to use the 'docutils' table class by creating a partial function from html_rdataframe.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/tidyr.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Importing dplyr Functions\nDESCRIPTION: Imports the necessary dplyr functionality from rpy2's libraries to enable data manipulation.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.lib.dplyr import DataFrame\nfrom rpy2.robjects import rl\n```\n\n----------------------------------------\n\nTITLE: Iterating Through R Environment Objects\nDESCRIPTION: Shows how to iterate through all symbols (keys) contained in an R environment by treating it as an iterable object in Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> env = robjects.r.baseenv()\n>>> [x for x in env]\n<a long list returned>\n```\n\n----------------------------------------\n\nTITLE: Sum Function Implementation in R\nDESCRIPTION: Demonstrates a naive implementation of a sum function in R for benchmarking purposes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/performances.rst#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n#-- purer_sum-begin\npurer_sum <- function(x) {\n  total <- 0\n  for (elt in x) {\n    total <- total + elt\n  }\n  return(total)\n}\n#-- purer_sum-end\n```\n\n----------------------------------------\n\nTITLE: Caution When Modifying Built-in R Objects\nDESCRIPTION: Illustrates the potential issues when overriding built-in R objects like 'pi' and how to restore the original value using robjects.r.rm().\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> globalenv[\"pi\"] = 123\n>>> print(robjects.r.pi)\n[1] 123\n>>>\n>>> robjects.r.rm(\"pi\")\n>>> print(robjects.r.pi)\n[1] 3.1415926535897931\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated SQL from dplyr\nDESCRIPTION: Shows how to view the SQL code generated by dplyr operations using the show_query function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsilent = dplyr.show_query(res)\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Rendering for R Objects in Python\nDESCRIPTION: This code initializes HTML rendering for R objects in a Jupyter notebook environment, allowing for pretty display of R data frames.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/tidyr.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.ipython.html\nrpy2.ipython.html.init_printing()\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for R Libraries\nDESCRIPTION: Environment variable configuration to help the system locate R shared libraries when R is not installed in a system location.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=\"$(python -m rpy2.situation LD_LIBRARY_PATH)\":${LD_LIBRARY_PATH}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Converter with localconverter\nDESCRIPTION: Shows how to use the localconverter context manager to temporarily apply a custom converter that automatically converts matching R objects to Python class instances.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith localconverter(my_converter) as cv:\n    eset = biobase.ExpressionSet()\n    print(type(eset))\n```\n\n----------------------------------------\n\nTITLE: Sum Function Implementation in Python\nDESCRIPTION: Shows a naive implementation of a sum function in Python for benchmarking purposes.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/performances.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#-- purepython_sum-begin\ndef purepython_sum(x):\n    total = 0\n    for elt in x:\n        total += elt\n    return total\n#-- purepython_sum-end\n```\n\n----------------------------------------\n\nTITLE: Importing and Checking RPy2 Version\nDESCRIPTION: Shows how to import rpy2 and check its version number.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/introduction.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2\nprint(rpy2.__version__)\n```\n\n----------------------------------------\n\nTITLE: Accessing R Objects Using __getitem__ in Python with rpy2\nDESCRIPTION: Shows how to safely access R objects using the __getitem__ method on robjects.r. This approach is recommended for better safety and to avoid issues with naming conflicts between Python and R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rinstance.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> as_null = robjects.r['as.null']\n\n>>> robjects.globalenv['foo'] = 1.2\n>>> foo = robjects.r['foo']\n>>> foo[0]\n1.2\n\n>>> robjects.r['rm']('foo')\n>>> robjects.r['foo']\nLookupError: 'foo' not found\n\n>>> foo[0]\n1.2\n```\n\n----------------------------------------\n\nTITLE: Checking for existing rpy2 installation in Python\nDESCRIPTION: Code snippet to verify if an older version of rpy2 is installed by importing the package and checking its path.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2\nrpy2.__path__\n```\n\n----------------------------------------\n\nTITLE: Developer Installation from Source\nDESCRIPTION: Installation commands for developers to install RPy2 from source tree, including all component packages.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install ./rpy2-rinterface/ ./rpy2-robjects/ .\n```\n\n----------------------------------------\n\nTITLE: Optimizing Method Dispatch with Prefetched R Methods\nDESCRIPTION: Demonstrates a performance optimization by prefetching the specific R method for a given signature, avoiding the overhead of R's method dispatch system.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.robjects.methods import getmethod\nfrom rpy2.robjects.vectors import StrVector\n_rowmedians_matrix = getmethod(StrVector([\"rowMedians\"]),\n                               signature=StrVector([\"matrix\"]))\n@dispatch(Matrix)\ndef rowmedians(m,\n               na_rm=False):\n    res = _rowmedians_matrix(m,\n                             na_rm=na_rm)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Displaying R magic options in Jupyter notebook\nDESCRIPTION: This code displays the current R magic options in a Jupyter notebook.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n%Roptions show\n```\n\n----------------------------------------\n\nTITLE: Checking R's NAMED Attribute\nDESCRIPTION: Demonstrates how to check the NAMED attribute of R objects and how it changes when objects are assigned to variables in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.rinterface as ri\n>>> ri.initr()\n0\n>>> ri.baseenv['letters'].named\n0\n\n>>> ri.baseenv['assign'](ri.StrSexpVector((\"mine\", )), ri.baseenv['letters'])\n<rpy2.rinterface.SexpVector - Python:0xb77ad280 / R:0xa23c5c0>\n>>> tuple(ri.globalenv)\n(\"mine\", )\n>>> ri.globalenv[\"mine\"].named\n2\n```\n\n----------------------------------------\n\nTITLE: Simple R Code Execution\nDESCRIPTION: Examples of R code execution showing how to access the pi constant directly in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_12\n\nLANGUAGE: r\nCODE:\n```\npi\n```\n\n----------------------------------------\n\nTITLE: Setting Up Helper Functions for Graphics Examples\nDESCRIPTION: Helper setup code for running graphics examples, part of the documentation demo scripts. This code isn't shown in full but is referenced in the documentation.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#-- setup-begin\n#-- setup-end\n```\n\n----------------------------------------\n\nTITLE: Enabling HTML display for R objects in Jupyter notebooks\nDESCRIPTION: This snippet enables custom HTML display for R objects in Jupyter notebooks using rpy2's HTML initialization function.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.ipython.html\nrpy2.ipython.html.init_printing()\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML rendering for R objects in Jupyter notebook\nDESCRIPTION: Sets up HTML rendering for R objects to enable pretty display of R data frames in a Jupyter notebook environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/tidyr.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.ipython.html\nrpy2.ipython.html.init_printing()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for RPy2\nDESCRIPTION: This snippet lists the required Python packages for the RPy2 project. It includes cffi (version 1.10.0 or higher), jinja2, pytz, tzlocal, and packaging (conditionally required only on Windows platforms).\nSOURCE: https://github.com/rpy2/rpy2/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncffi>=1.10.0\njinja2\npytz\ntzlocal\npackaging;platform_system=='Windows'\n```\n\n----------------------------------------\n\nTITLE: Creating anonymous R objects in Python\nDESCRIPTION: Shows how to create an R vector as an anonymous object in Python using rpy2.rinterface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> x = rinterface.IntVector((1,2,3))\n```\n\n----------------------------------------\n\nTITLE: Handling Conversion Errors Outside Context Manager\nDESCRIPTION: Shows the error that occurs when trying to use a pandas DataFrame with R functions without the proper conversion context.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/pandas.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  df_summary = base.summary(pd_df)\nexcept NotImplementedError as nie:\n  print('NotImplementedError:')\n  print(nie)\n```\n\n----------------------------------------\n\nTITLE: Installing RPy2 with All Optional Dependencies\nDESCRIPTION: Installation command that includes all optional dependencies including numpy, pandas, and ipython.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install 'rpy2[all]'\n```\n\n----------------------------------------\n\nTITLE: Importing the Lattice Package for Statistical Graphics\nDESCRIPTION: Demonstrates importing R's lattice package for statistical graphics using rpy2. This package provides tools for creating trellis graphs for multivariate data visualization.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/graphics.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#-- setuplattice-begin\n#-- setuplattice-end\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Display for R Objects\nDESCRIPTION: Sets up pretty display rendering for R objects in IPython notebook\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/dplyr.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.ipython.html\nrpy2.ipython.html.init_printing()\n```\n\n----------------------------------------\n\nTITLE: Installing rpy2 via pip\nDESCRIPTION: Alternative command to install the entire rpy2 package, which includes rpy2-robjects, using pip. This installs the full rpy2 package.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/rpy2-robjects/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install rpy2\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Rendering for R DataFrames in IPython\nDESCRIPTION: Modifies the HTML rendering function for R DataFrames in IPython by using partial function application to set a default table class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/s4class.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Using Global Environment for Symbol Resolution\nDESCRIPTION: Demonstrates how to solve the previous error by adding the required symbol to the global environment, allowing the R code to find and use it.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> robjects.globalenv['y'] = 2\n>>> res = robjects.r('y + 1')\n>>> print(res)\n[1] 3\n```\n\n----------------------------------------\n\nTITLE: Installing RPy2 with Test Dependencies\nDESCRIPTION: Installation command that includes additional dependencies required for running unit tests.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install 'rpy2[test]'\n```\n\n----------------------------------------\n\nTITLE: Importing rpy2.rlike.container Module in Python\nDESCRIPTION: Demonstrates how to import the rpy2.rlike.container module, which provides R-like container data structures for Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rlike.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.rlike.container as rlc\n```\n\n----------------------------------------\n\nTITLE: Renaming matrix columns in R\nDESCRIPTION: Example of renaming a column in an R matrix using native R code.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n# create a matrix\nm <- matrix(1:10, nrow = 2,\n               dimnames = list(c(\"1\", \"2\"),\n\t                       c(\"a\", \"b\", \"c\", \"d\", \"e\")))\n# rename the third column\ni <- 3\ncolnames(m)[i] <- \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Accessing R Object Reference Count in Python\nDESCRIPTION: Demonstrates how to check the reference count of R objects in rpy2 and how the count increases when creating new Python references to the same R object.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.rinterface as ri\n>>> ri.initr()\n>>> x = ri.IntSexpVector([1,2,3])\n>>> x.__sexp_refcount__\n1\n```\n\n----------------------------------------\n\nTITLE: Handling Symbol Evaluation Errors in R\nDESCRIPTION: Shows what happens when trying to evaluate R code that references a non-existent symbol, resulting in an RRuntimeError.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_environments.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> res = robjects.r('y + 1')\nRRuntimeError: Error in (function (expr, envir = parent.frame(), enclos = if (is.list(envir) ||  : \n  object 'y' not found\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Rendering for R Objects\nDESCRIPTION: Sets up pretty display for R data frames in a Jupyter notebook environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rpy2.ipython.html\nrpy2.ipython.html.init_printing()\n```\n\n----------------------------------------\n\nTITLE: Running RPy2 Tests with pytest\nDESCRIPTION: Command to run the test suite for RPy2 using pytest.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest rpy2-rinterface/ rpy2-robjects/\n```\n\n----------------------------------------\n\nTITLE: Refreshing R magic options to factory settings\nDESCRIPTION: This snippet demonstrates how to refresh R magic options to their factory settings.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n%Roptions refresh\n```\n\n----------------------------------------\n\nTITLE: Querying R Documentation Pages by Topic in Python\nDESCRIPTION: Demonstrates how to import the help module from rpy2.robjects and access documentation for a package. This example retrieves help documentation for the 'base' package in R.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rhelp.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.robjects.help as rh\n>>> base_help = rh.Package('base')\n>>> base_help.fetch('sum')\n```\n\n----------------------------------------\n\nTITLE: Checking Protected R Objects in rpy2\nDESCRIPTION: Shows how to verify that an R object is protected from garbage collection by rpy2 and how to check the number of Python objects protecting it.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> x.rid in (elt[0] for elt in ri.protected_rids())\nTrue\n\n>>> [elt[1] for elt in ri.protected_rids() if elt[0]==x.rid]\n[1]\n```\n\n----------------------------------------\n\nTITLE: Importing rpy2.rinterface module in Python\nDESCRIPTION: Demonstrates how to import the rpy2.rinterface module, which provides low-level access to R functionality.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import rpy2.rinterface as rinterface\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Rendering for R DataFrames\nDESCRIPTION: Sets up HTML rendering for R DataFrames with specific table styling for better display in notebooks.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/dplyr.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Running RPy2 Tests with Code Coverage\nDESCRIPTION: Command to run tests with code coverage reporting for various RPy2 components using pytest-cov.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=rpy2.rinterface_lib \\\n       --cov=rpy2.rinterface \\\n       --cov=rpy2.ipython \\\n       --cov=rpy2.robject \\\n       rpy2-rinterface/ rpy2-robjects/\n```\n\n----------------------------------------\n\nTITLE: Using the SEXP Retrieval Function\nDESCRIPTION: Shows how to use the get_sexp function to retrieve the SEXP pointer for the R global environment.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rpy2.rinterface import globalenv\n# Pointer to SEXPREC for the R Global Environment\nsexp=get_sexp(globalenv)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: This snippet lists various Python packages that are likely required for a project. It includes packages for data analysis, visualization, Jupyter notebooks, and R integration.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nipython\njupyterlab\nmultipledispatch\nnbconvert\nnotedown\nnumpy\npandas\npygraphviz\nrpy2\nsphinx\n```\n\n----------------------------------------\n\nTITLE: Python Variable Assignment vs. Explicit R Object Wrapping\nDESCRIPTION: Demonstrates the difference between Python variable assignment (which doesn't increase the reference count) and explicitly wrapping an R object (which does increase the count).\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> y = x\n>>> [elt[1] for elt in ri.protected_rids() if elt[0]==x.rid]\n[1]\n\n>>> z = ri.IntSexpVector(x)\n>>> [elt[1] for elt in ri.protected_rids() if elt[0]==x.rid]\n[2]\n>>> x.rid == z.rid\nTrue\n\n>>> del(x); del(y) # remember that we did `y = x`\n>>> [elt[1] for elt in ri.protected_rids() if elt[0]==z.rid]\n[1]\n```\n\n----------------------------------------\n\nTITLE: Conditional Warning Block in reStructuredText\nDESCRIPTION: A conditional block that displays a warning message for development versions of rpy2. It uses the 'ifconfig' directive to check the release version and includes a warning about using development versions in production.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. ifconfig:: release.endswith('dev') or release[:-1].endswith('alpha')\n\n   .. warning::\n      This documentation describe the rpy2 package version |version| on |today|.\n      It is still under development. While care is taken to keep the\n      development branch functional\n      at all times, and this documentation up-to-date temporary issues\n      may appear.\n      Please remember that this is software under development.\n\n      Use a released version of the package for production.\n```\n\n----------------------------------------\n\nTITLE: Upgrading rpy2 with pip\nDESCRIPTION: Shell command for upgrading an existing rpy2 installation to the latest version using pip.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/overview.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# recommended:\npip install rpy2 --upgrade\n```\n\n----------------------------------------\n\nTITLE: Triggering Garbage Collection in Python\nDESCRIPTION: Demonstrates how to explicitly trigger garbage collection in Python to manage memory usage when working with large R objects.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/performances.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gc\ngc.collect()\n```\n\n----------------------------------------\n\nTITLE: Checking Reference Count with Multiple Python Variables\nDESCRIPTION: Shows how the reference count increases when multiple Python variables reference the same R object, and how to check if R objects have the same underlying identity.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> letters = ri.baseenv['letters']\n>>> letters.__sexp_refcount__\n1\n>>> letters_again = ri.baseenv['letters']\n>>> # check that the R ID is the same\n>>> letters_again.rid == letters.rid\nTrue\n>>> # reference count has increased\n>>> letters_again.__sexp_refcount__\n2\n>>> letters.__sexp_refcount__\n2\n```\n\n----------------------------------------\n\nTITLE: PySexpObject C Structure Definition\nDESCRIPTION: Shows the C structure definition for PySexpObject, which is how Python objects wrap R objects in rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    PyObject_HEAD \n    SexpObject *sObj;\n} PySexpObject;\n```\n\n----------------------------------------\n\nTITLE: Conditional Image Inclusion in reStructuredText\nDESCRIPTION: A conditional block that includes an image (rpy2 logo) only in HTML output. It uses the 'only' directive to specify HTML-specific content.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. only:: html\n\n   .. image:: _static/rpy2_logo.png\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Display for R DataFrames in IPython\nDESCRIPTION: This snippet configures the HTML display of R DataFrames in IPython by setting a custom table class.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/s4class.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Table of Contents in reStructuredText\nDESCRIPTION: Multiple table of contents directives for different sections of the documentation. Each toctree specifies the maximum depth and includes relevant document files.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   getting-started\n   porting-to-rpy2\n\n.. toctree::\n   :maxdepth: 3\n\n   high-level\n\n.. toctree::\n   :maxdepth: 3\n\n   interactive\n\n.. toctree::\n   :maxdepth: 3\n\n   numpy\n\n.. toctree::\n   :maxdepth: 3\n\n   rinterface\n   rinterface-memorymanagement\n\n.. toctree::\n   :maxdepth: 3\n\n   rlike\n   miscellaneous\n\n.. toctree::\n   :maxdepth: 2\n\n   appendix\n```\n\n----------------------------------------\n\nTITLE: Installing rpy2 from source archive\nDESCRIPTION: Shell commands to extract and install rpy2 from a downloaded source archive using either standard setup.py or pip.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/overview.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf <rpy_package>.tar.gz\ncd <rpy_package>\n\n  \npython setup.py build install\n# or\npip install .\n# or (to install requirements to test\npip install .[test]\n```\n\n----------------------------------------\n\nTITLE: Changing default width for graphics device options\nDESCRIPTION: This code shows how to change the default width for graphics device options in R magic.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n(\n    ipy.magics_manager.registry['RMagics'].graphics_device\n    ._options_display\n    .width\n) = 10\n```\n\n----------------------------------------\n\nTITLE: Accessing and Deleting the SEXP Capsule\nDESCRIPTION: Shows how to access the underlying capsule for an R object in Python and how deleting it affects garbage collection.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> letters_cstruct = letters.__sexp__\n>>> del(letters, letters_again)\n\nThe underlying R object is available for collection after the capsule\nis deleted (that particular object won't be deleted because R itself tracks it\nas part of the base package).\n\n>>> del(letters_cstruct)\n```\n\n----------------------------------------\n\nTITLE: Defining Appendix Section with toctree in reStructuredText\nDESCRIPTION: This snippet uses the toctree directive to include a 'changes' document in the appendix section of the rpy2 documentation. The toctree directive is used to create a table of contents.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/appendix.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n########\nAppendix\n########\n\n.. toctree::\n\n   changes\n```\n\n----------------------------------------\n\nTITLE: Running the R Socket Server from Command Line\nDESCRIPTION: Command to start the R server listening on localhost port 9090, which will accept R code via socket connections and execute it.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/server.rst#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npython rpyserve.py --hostname localhost\n```\n\n----------------------------------------\n\nTITLE: IPython Source Code Copyright Banner\nDESCRIPTION: Standard copyright and license banner that should be included in all IPython source code files to indicate copyright and license terms.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/rpy2-robjects/src/rpy2/ipython/ipython-COPYING.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Copyright (c) 2010, IPython Development Team.\n#\n# Distributed under the terms of the Modified BSD License.\n#\n# The full license is in the file COPYING.txt, distributed with this software.\n#-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Changing default graphics device for R magic\nDESCRIPTION: This snippet demonstrates how to change the default graphics device for R magic to SVG.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/jupyter.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\nipy = IPython.get_ipython()\nipy.magics_manager.registry['RMagics'].options.graphics_device_name = 'svg'\n```\n\n----------------------------------------\n\nTITLE: SexpObject C Structure Definition\nDESCRIPTION: Shows the C structure definition for SexpObject, which contains the reference counts and pointer to the R SEXPREC.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface-memorymanagement.rst#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct {\n    Py_ssize_t pycount;\n    int rcount;\n    SEXP sexp;\n} SexpObject;\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for RPy2 Documentation\nDESCRIPTION: ReStructuredText markup defining a table of contents (toctree) directive that lists documentation pages for miscellaneous RPy2 topics.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/miscellaneous.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   callbacks\n   server\n   related_projects\n   performances\n   graphicaldevices\n```\n\n----------------------------------------\n\nTITLE: Managing R Event Processing Thread\nDESCRIPTION: Shows how to stop event processing and control the processing interval.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/interactive.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> process_revents.stop()\n\n>>> process_revents.EventProcessor.interval\n0.2\n\n>>> process_revents.EventProcessor.interval = 1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Rendering for R DataFrames in Python\nDESCRIPTION: This snippet configures the HTML rendering for R DataFrames in Python using rpy2. It sets a custom table class for the rendered output.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/_static/notebooks/tidyr.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom rpy2.ipython import html\nhtml.html_rdataframe=partial(html.html_rdataframe, table_class=\"docutils\")\n```\n\n----------------------------------------\n\nTITLE: Installing rpy2-rinterface via pip\nDESCRIPTION: Command to install the rpy2-rinterface package from Python package repositories using pip. This installs the low-level R interface component of rpy2.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/rpy2-rinterface/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install rpy2-rinterface\n```\n\n----------------------------------------\n\nTITLE: Initializing R environment in Python using rpy2\nDESCRIPTION: Shows how to initialize the embedded R environment using the initr() function from rpy2.rinterface.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rinterface.initr()\n```\n\n----------------------------------------\n\nTITLE: NA Value Behavior with Python Functions\nDESCRIPTION: Shows how Python functions handling R vectors with NA values may behave differently from R's native handling.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/rinterface.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> x = rinterface.IntSexpVector((1, rinterface.NA_Integer, 2))\n>>> sum(x)\n3\n>>> max(x)\n2\n>>> min(x)\nNA_integer_\n```\n\n----------------------------------------\n\nTITLE: Benchmark Setup for Sum Functions\nDESCRIPTION: Sets up different types of sequences for benchmarking sum functions in R and Python.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/performances.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#-- setup_sum-begin\nimport array\nimport numpy\nfrom rpy2.robjects.vectors import FloatVector\nfrom rpy2.rinterface import FloatSexpVector\n\nN = 20000\n\nlst = [x for x in range(1, N+1)]\narr = array.array('f', lst)\nnpv = numpy.array(lst)\nrv = FloatVector(lst)\nriv = FloatSexpVector(lst)\n#-- setup_sum-end\n```\n\n----------------------------------------\n\nTITLE: Handling R Symbol Translation in Python\nDESCRIPTION: Shows how to handle R symbols with special characters when importing packages. This example provides a custom translation dictionary for R function names.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/robjects_rpackages.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nd = {'print.me': 'print_dot_me', 'print_me': 'print_uscore_me'}\nthatpackage = importr('thatpackage', robject_translations = d)\n```\n\n----------------------------------------\n\nTITLE: Setting RST Document Structure for RPy2 Changes\nDESCRIPTION: RST directives for configuring documentation structure, including table of contents depth setting and inclusion of an external NEWS file for change documentation.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/changes.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:tocdepth: 2\n\n.. _changes:\n\nChanges in rpy2\n***************\n\n.. include:: ../NEWS\n```\n\n----------------------------------------\n\nTITLE: Developer Installation with All Dependencies\nDESCRIPTION: Installation commands for developers to install RPy2 from source with all optional dependencies.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install ./rpy2-rinterface'[all]' ./rpy2-robjects'[all]' '.[all]'\n```\n\n----------------------------------------\n\nTITLE: Installing RPy2 Package via pip\nDESCRIPTION: Basic installation command for RPy2 package from PyPI repository using pip.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install rpy2\n```\n\n----------------------------------------\n\nTITLE: Loading RPy2 IPython Extension\nDESCRIPTION: Loads the RPy2 IPython extension which enables the use of R code directly in IPython notebooks using the %%R magic command.\nSOURCE: https://github.com/rpy2/rpy2/blob/master/doc/notebooks/introduction_nb.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n```"
  }
]