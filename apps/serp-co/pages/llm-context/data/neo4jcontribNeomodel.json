[
  {
    "owner": "neo4j-contrib",
    "repo": "neomodel",
    "content": "TITLE: Async Dunder Method Equivalents in Neomodel\nDESCRIPTION: Shows how various Python dunder methods (__len__, __bool__, __contains__, __getitem__) work in the async context with Neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Examples below are taken from the various tests. Please check them for more examples.\n# Length\ndogs_bonanza = await Dog.nodes.get_len()\n# Sync equivalent - __len__\ndogs_bonanza = len(Dog.nodes)\n# Note that len(Dog.nodes) is more efficient than Dog.nodes.__len__\n\n# Existence\nassert not await Customer.nodes.filter(email=\"jim7@aol.com\").check_bool()\n# Sync equivalent - __bool__\nassert not Customer.nodes.filter(email=\"jim7@aol.com\")\n# Also works for check_nonzero => __nonzero__\n\n# Contains\nassert await Coffee.nodes.check_contains(aCoffeeNode)\n# Sync equivalent - __contains__\nassert aCoffeeNode in Coffee.nodes\n\n# Get item\nassert len(list((await Coffee.nodes)[1:])) == 2\n# Sync equivalent - __getitem__\nassert len(list(Coffee.nodes[1:])) == 2\n```\n\n----------------------------------------\n\nTITLE: Defining Node Entities and Relationships in Neomodel\nDESCRIPTION: Example showing how to define structured nodes and their relationships for Country, City, and Person entities.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import (config, StructuredNode, StringProperty, IntegerProperty,\n    UniqueIdProperty, RelationshipTo)\n\nconfig.DATABASE_URL = 'bolt://neo4j_username:neo4j_password@localhost:7687'\n\nclass Country(StructuredNode):\n    code = StringProperty(unique_index=True, required=True)\n\nclass City(StructuredNode):\n    name = StringProperty(required=True)\n    country = RelationshipTo(Country, 'FROM_COUNTRY')\n\nclass Person(StructuredNode):\n    uid = UniqueIdProperty()\n    name = StringProperty(unique_index=True)\n    age = IntegerProperty(index=True, default=0)\n\n    # traverse outgoing IS_FROM relations, inflate to Country objects\n    country = RelationshipTo(Country, 'IS_FROM')\n\n    # traverse outgoing LIVES_IN relations, inflate to City objects\n    city = RelationshipTo(City, 'LIVES_IN')\n```\n\n----------------------------------------\n\nTITLE: Complex Neomodel Query with Multiple Operations\nDESCRIPTION: A comprehensive example showing how to combine filters, ordering, fetch_relations, subqueries, and annotations in a complex Neomodel query.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# These are the class definitions used for the query below\nclass HasCourseRel(AsyncStructuredRel):\n    level = StringProperty()\n    start_date = DateTimeProperty()\n    end_date = DateTimeProperty()\n\n\nclass Course(AsyncStructuredNode):\n    name = StringProperty()\n\n\nclass Building(AsyncStructuredNode):\n    name = StringProperty()\n\n\nclass Student(AsyncStructuredNode):\n    name = StringProperty()\n\n    parents = AsyncRelationshipTo(\"Student\", \"HAS_PARENT\", model=AsyncStructuredRel)\n    children = AsyncRelationshipFrom(\"Student\", \"HAS_PARENT\", model=AsyncStructuredRel)\n    lives_in = AsyncRelationshipTo(Building, \"LIVES_IN\", model=AsyncStructuredRel)\n    courses = AsyncRelationshipTo(Course, \"HAS_COURSE\", model=HasCourseRel)\n    preferred_course = AsyncRelationshipTo(\n        Course,\n        \"HAS_PREFERRED_COURSE\",\n        model=AsyncStructuredRel,\n        cardinality=AsyncZeroOrOne,\n    )\n\n# This is the query\nfull_nodeset = (\n    await Student.nodes.filter(name__istartswith=\"m\", lives_in__name=\"Eiffel Tower\") # Combine filters\n    .order_by(\"name\")\n    .fetch_relations(\n        \"parents\",\n        Optional(\"children__preferred_course\"),\n    ) # Combine fetch_relations\n    .subquery(\n        Student.nodes.fetch_relations(\"courses\") # Root variable student will be auto-injected here\n        .intermediate_transform(\n            {\"rel\": RelationNameResolver(\"courses\")},\n            ordering=[\n                RawCypher(\"toInteger(split(rel.level, '.')[0])\"),\n                RawCypher(\"toInteger(split(rel.level, '.')[1])\"),\n                \"rel.end_date\",\n                \"rel.start_date\",\n            ], # Intermediate ordering\n        )\n        .annotate(\n            latest_course=Last(Collect(\"rel\")),\n        ),\n        [\"latest_course\"],\n    )\n)\n\n# Using async, we need to do 2 await\n# One is for subquery, the other is for resolve_subgraph\n# It only runs a single Cypher query though\nsubgraph = await full_nodeset.annotate(\n    children=Collect(NodeNameResolver(\"children\"), distinct=True),\n    children_preferred_course=Collect(\n        NodeNameResolver(\"children__preferred_course\"), distinct=True\n    ),\n).resolve_subgraph()\n```\n\n----------------------------------------\n\nTITLE: Establishing and Querying Relationships with Properties in Neomodel (Python)\nDESCRIPTION: Shows how to establish connections between nodes with relationship properties and how to query these relationships. This example demonstrates connecting Person nodes and accessing relationship data.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrel = jim.friends.connect(bob, {'since': yesterday, 'met': 'Paris'})\n\nprint(rel.start_node().name) # jim\nprint(rel.end_node().name) # bob\n\nrel.met = \"Amsterdam\"\nrel.save()\n\nrel = jim.friends.relationship(bob)\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering with Q Objects\nDESCRIPTION: Advanced filtering examples using Q objects for complex logical operations including AND, OR, and NOT conditions.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnot_middle_priced_arabicas = Coffee.nodes.filter(\n    Q(name__icontains='arabica'),\n    Q(price__lt=5) | Q(price__gt=10)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Inheritance in Neomodel Relationships (Python)\nDESCRIPTION: Demonstrates how to use inheritance with nodes in Neomodel relationships. This example defines a base Person class and specialized TechnicalPerson and PilotPerson classes, showing how they can be connected through relationships.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PersonalRelationship(neomodel.StructuredRel):\n    on_date = neomodel.DateProperty(default_now = True)\n\nclass BasePerson(neomodel.StructuredNode):\n    name = neomodel.StringProperty(required = True, unique_index = True)\n    friends_with = neomodel.RelationshipTo(\"BasePerson\", \"FRIENDS_WITH\", model = PersonalRelationship)\n\nclass TechnicalPerson(BasePerson):\n    expertise = neomodel.StringProperty(required = True)\n\nclass PilotPerson(BasePerson):\n    airplane = neomodel.StringProperty(required = True)\n```\n\n----------------------------------------\n\nTITLE: Defining Node and Relationship Models with Indexes in Python using Neomodel\nDESCRIPTION: This snippet demonstrates how to define node and relationship models with various property types and indexes using Neomodel. It includes examples of unique indexes, regular indexes, and relationship properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/schema_management.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import (StructuredNode, StructuredRel, StringProperty,\n    IntegerProperty, RelationshipTo)\n    \nclass LocatedIn(StructuredRel):\n    since = IntegerProperty(index=True)\n\nclass Country(StructuredNode):\n    code = StringProperty(unique_index=True)\n\nclass City(StructuredNode):\n    name = StringProperty(index=True)\n    country = RelationshipTo(Country, 'FROM_COUNTRY', model=LocatedIn)\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Node with Required Properties in Neomodel\nDESCRIPTION: Example of a Person StructuredNode class with mandatory and optional properties. The full_name field is required, while email is optional. UniqueIdProperty is used to generate a unique identifier for each Person node.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    uid = UniqueIdProperty()\n    full_name = StringProperty(required = True)\n    email = EmailProperty()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Path of Instantiated Objects with Cypher Query (Python)\nDESCRIPTION: Demonstrates how to retrieve a whole path of already instantiated objects corresponding to nodes and relationship classes with a single Cypher query. The result is a NeomodelPath object containing instantiated node and relationship objects.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nq = db.cypher_query(\"MATCH p=(:CityOfResidence)<-[:LIVES_IN]-(:PersonOfInterest)-[:IS_FROM]->(:CountryOfOrigin) RETURN p LIMIT 1\", \n                    resolve_objects = True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j Database Connection in Python\nDESCRIPTION: Sets up the database connection URL for Neomodel to connect to Neo4j instance.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import config\nconfig.DATABASE_URL = 'bolt://neo4j_username:neo4j_password@localhost:7687'\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Context Manager in Python\nDESCRIPTION: Demonstrates how to use transactions in Neomodel using a context manager. This approach automatically handles committing or rolling back the transaction.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\n\nwith db.transaction:\n    Person(name='Bob').save()\n```\n\n----------------------------------------\n\nTITLE: Advanced Intermediate Transformation Example in Neomodel\nDESCRIPTION: A comprehensive example of intermediate_transform with multiple variables, resolvers, source properties, and ordering options. Shows how to control which variables are included in the return statement.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/advanced_query_operations.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait Coffee.nodes.fetch_relations(\"suppliers\")\n    .intermediate_transform(\n        {\n            \"coffee\": \"coffee\",\n            \"suppliers\": NodeNameResolver(\"suppliers\"),\n            \"r\": RelationNameResolver(\"suppliers\"),\n            \"coffee\": {\"source\": \"coffee\", \"include_in_return\": True}, # Only coffee will be returned\n            \"suppliers\": {\"source\": NodeNameResolver(\"suppliers\")},\n            \"r\": {\"source\": RelationNameResolver(\"suppliers\")},\n            \"cost\": {\n                \"source\": NodeNameResolver(\"suppliers\"),\n                \"source_prop\": \"delivery_cost\",\n            },\n        },\n        distinct=True,\n        ordering=[\"-r.since\"],\n    )\n    .annotate(oldest_supplier=Last(Collect(\"suppliers\")))\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Operations with Neomodel Nodes\nDESCRIPTION: Shows how to perform Create, Read, Update, and Delete operations on nodes using Neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\njim = Person(name='Jim', age=3).save() # Create\njim.age = 4\njim.save() # Update, (with validation)\njim.delete()\njim.refresh() # reload properties from the database\njim.element_id # neo4j internal element id\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Traversal in Neomodel\nDESCRIPTION: Demonstrates how to create an explicit traversal in Neomodel by defining traversal parameters and instantiating a Traversal object. This approach provides fine-grained control over node traversal, allowing specification of node classes, relationship direction, and relation types.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndefinition = dict(node_class=Person, direction=OUTGOING,\n                  relation_type=None, model=None)\nrelations_traversal = Traversal(jim, Person.__label__,\n                                definition)\nall_jims_relations = relations_traversal.all()\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Multiple Nodes in Neomodel\nDESCRIPTION: Demonstrates the create_or_update() method which atomically creates or updates nodes based on their required/unique properties. This allows for data synchronization in a single operation.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/batch.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npeople = Person.create_or_update(\n    {'name': 'Tim', 'age': 83},\n    {'name': 'Bob', 'age': 23},\n    {'name': 'Jill', 'age': 34},\n)\n\nmore_people = Person.create_or_update(\n    {'name': 'Tim', 'age': 73},\n    {'name': 'Bob', 'age': 35},\n    {'name': 'Jane', 'age': 24},\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Standalone Cypher Query with Neomodel (Python)\nDESCRIPTION: Shows how to execute a standalone Cypher query using the db.cypher_query method from Neomodel. The 'resolve_objects' parameter can be set to automatically inflate returned nodes to their defined classes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\nresults, meta = db.cypher_query(query, params, resolve_objects=True)\n```\n\n----------------------------------------\n\nTITLE: Async OGM with Neomodel\nDESCRIPTION: Demonstrates Object-Graph Mapping (OGM) with async support in Neomodel, including class definitions and basic database operations.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Note that properties do not change, but nodes and relationships now have an Async prefix\nfrom neomodel import (AsyncStructuredNode, StringProperty, IntegerProperty,\n    UniqueIdProperty, AsyncRelationshipTo)\n\nclass Country(AsyncStructuredNode):\n    code = StringProperty(unique_index=True, required=True)\n\nclass City(AsyncStructuredNode):\n    name = StringProperty(required=True)\n    country = AsyncRelationshipTo(Country, 'FROM_COUNTRY')\n\n# Operations that interact with the database are now async\n# Return all nodes\n# Note that the nodes object is awaitable as is\nall_nodes = await Country.nodes\n\n# Relationships\ngermany = await Country(code='DE').save()\nawait jim.country.connect(germany)\n```\n\n----------------------------------------\n\nTITLE: Defining Node Models for Neo4j Graph in Python using Neomodel\nDESCRIPTION: This snippet defines three StructuredNode classes (Country, Supplier, and Coffee) to represent nodes in a Neo4j graph. It demonstrates how to set up properties and relationships between nodes using Neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Country(StructuredNode):\n    country_code = StringProperty(unique_index=True)\n    name = StringProperty()\n\nclass Supplier(StructuredNode):\n    name = StringProperty()\n    delivery_cost = IntegerProperty()\n    country = RelationshipTo(Country, 'ESTABLISHED_IN')\n\nclass Coffee(StructuredNode):\n    name = StringProperty(unique_index=True)\n    price = IntegerProperty()\n    suppliers = RelationshipFrom(Supplier, 'SUPPLIES')\n```\n\n----------------------------------------\n\nTITLE: Configuring Neomodel Driver Connection Parameters\nDESCRIPTION: Adjusts various driver configuration options for the Neo4j connection in Neomodel. These parameters control connection pooling, timeouts, encryption, and other connection behaviors.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfig.MAX_CONNECTION_POOL_SIZE = 100  # default\nconfig.CONNECTION_ACQUISITION_TIMEOUT = 60.0  # default\nconfig.CONNECTION_TIMEOUT = 30.0  # default\nconfig.ENCRYPTED = False  # default\nconfig.KEEP_ALIVE = True  # default\nconfig.MAX_CONNECTION_LIFETIME = 3600  # default\nconfig.MAX_CONNECTION_POOL_SIZE = 100  # default\nconfig.MAX_TRANSACTION_RETRY_TIME = 30.0  # default\nconfig.RESOLVER = None  # default\nconfig.TRUST = neo4j.TRUST_SYSTEM_CA_SIGNED_CERTIFICATES  # default\nconfig.USER_AGENT = neomodel/v5.4.5  # default\n```\n\n----------------------------------------\n\nTITLE: Filtering with Relationship Traversals\nDESCRIPTION: Example of filtering nodes based on relationship properties and connected nodes, including date-based filtering.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsince_date = datetime(2007, 1, 1)\njava_old_timers = Coffee.nodes.filter(\n        name='Java',\n        suppliers__delivery_cost__gt=5,\n        **{\"suppliers|since__lt\": since_date}\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Neo4j Node Model with Various Property Types using Neomodel in Python\nDESCRIPTION: This class demonstrates the use of different property types available in Neomodel, including array, float, boolean, point (spatial), string, date, datetime, and integer properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass EveryPropertyTypeNode(StructuredNode):\n    array_property = ArrayProperty(StringProperty())\n    float_property = FloatProperty()\n    boolean_property = BooleanProperty()\n    point_property = PointProperty(crs='wgs-84')\n    string_property = StringProperty()\n    date_property = DateProperty()\n    datetime_property = DateTimeProperty()\n    integer_property = IntegerProperty()\n```\n\n----------------------------------------\n\nTITLE: Setting Neo4j Credentials Using Environment Variables\nDESCRIPTION: Demonstrates how to use environment variables to store and access Neo4j credentials securely. This approach avoids hardcoding credentials in your code, which is a security best practice.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom neomodel import config\n\nconfig.DATABASE_URL = os.environ[\"NEO4J_BOLT_URL\"]\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Nodes in Neomodel Relationships (Python)\nDESCRIPTION: Shows how to create and connect nodes of different inherited types using Neomodel relationships. This example creates TechnicalPerson and PilotPerson instances and establishes friendships between them.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nA = TechnicalPerson(name = \"Grumpy\", expertise = \"Grumpiness\").save()\nB = TechnicalPerson(name = \"Happy\", expertise = \"Unicorns\"}).save()\nC = TechnicalPerson(name = \"Sleepy\", expertise = \"Pillows\"}).save()\n\nD = PilotPerson(name = \"Porco Rosso\", airplane = \"Savoia-Marchetti\").save()\nE = PilotPerson(name = \"Jack Dalton\", airplane = \"Beechcraft Model 18\").save()\n\nA.friends_with.connect(B)\nB.friends_with.connect(C)\nC.friends_with.connect(A)\n\nD.friends_with.connect(E)\n\nA.friends_with.connect(D)\nE.friends_with.connect(C)\n\nfor some_friend in A.friends_with:\n    print(some_friend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cardinality Constraints on Relationships in Neomodel (Python)\nDESCRIPTION: Demonstrates how to enforce cardinality constraints on relationships in Neomodel. This example shows a one-to-one relationship between Person and Car nodes using the 'OWNS' relationship type.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    car = RelationshipTo('Car', 'OWNS', cardinality=One)\n\nclass Car(StructuredNode):\n    owner = RelationshipFrom('Person', 'OWNS', cardinality=One)\n```\n\n----------------------------------------\n\nTITLE: Executing Cypher Query in StructuredNode Class Method (Python)\nDESCRIPTION: Demonstrates how to execute a Cypher query within a StructuredNode class method to retrieve and inflate related nodes. The method uses the 'cypher' function and inflates the results to the correct node type.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    def friends(self):\n        results, columns = self.cypher(\"MATCH (a:Person) WHERE id(a)=$self MATCH (a)-[:FRIEND]->(b) RETURN b\")\n        return [self.inflate(row[0]) for row in results]\n```\n\n----------------------------------------\n\nTITLE: Querying and Resolving Inherited Relationships in Neomodel (Python)\nDESCRIPTION: Shows how to query relationships and resolve them to their proper models in Neomodel. This example demonstrates querying FRIENDS_WITH relationships and accessing the nodes at their endpoints.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nZ = neomodel.db.cypher_query(\"MATCH (:BasePerson)-[r:FRIENDS_WITH]->(:BasePerson) RETURN r\", resolve_objects=True)\n\nu = Z[0][0][0].start_node()\n```\n\n----------------------------------------\n\nTITLE: Using get_or_create with Relationships in Neomodel\nDESCRIPTION: Demonstrates how to use get_or_create() with the relationship parameter to match nodes based on relationships rather than globally. This enables creating nodes with the same properties but in different relationships.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/batch.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Dog(StructuredNode):\n    name = StringProperty(required=True)\n    owner = RelationshipTo('Person', 'owner')\n\nclass Person(StructuredNode):\n    name = StringProperty(unique_index=True)\n    pets = RelationshipFrom('Dog', 'owner')\n\nbob = Person.get_or_create({\"name\": \"Bob\"})[0]\nbobs_gizmo = Dog.get_or_create({\"name\": \"Gizmo\"}, relationship=bob.pets)\n\ntim = Person.get_or_create({\"name\": \"Tim\"})[0]\ntims_gizmo = Dog.get_or_create({\"name\": \"Gizmo\"}, relationship=tim.pets)\n\n# not the same gizmo\nassert bobs_gizmo[0] != tims_gizmo[0]\n```\n\n----------------------------------------\n\nTITLE: Working with Relationships in Neomodel\nDESCRIPTION: Demonstrates how to create and manage relationships between nodes using Neomodel's relationship methods.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngermany = Country(code='DE').save()\njim.country.connect(germany)\nberlin = City(name='Berlin').save()\nberlin.country.connect(germany)\njim.city.connect(berlin)\n\nif jim.country.is_connected(germany):\n    print(\"Jim's from Germany\")\n\nfor p in germany.inhabitant.all():\n    print(p.name) # Jim\n\nlen(germany.inhabitant) # 1\n\n# Find people called 'Jim' in germany\ngermany.inhabitant.filter(name='Jim')\n\n# Find all the people called in germany except 'Jim'\ngermany.inhabitant.exclude(name='Jim')\n\n# Remove Jim's country relationship with Germany\njim.country.disconnect(germany)\n\nusa = Country(code='US').save()\njim.country.connect(usa)\njim.country.connect(germany)\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Constraints with StringProperty in Neomodel\nDESCRIPTION: Shows how to create a StringProperty with predefined choices using a dictionary. This example defines a sex property with three possible values (F, M, O) and their display representations, allowing for user-friendly display of values.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    SEXES = {'F': 'Female', 'M': 'Male', 'O': 'Other'}\n    sex = StringProperty(required=True, choices=SEXES)\n\ntim = Person(sex='M').save()\ntim.sex # M\ntim.get_sex_display() # 'Male'\n```\n\n----------------------------------------\n\nTITLE: Neomodel Utility Functions for Database Management (Python)\nDESCRIPTION: Provides utility functions for clearing the Neo4j database, including options to drop constraints and indexes, and changing the database password. These functions help with database maintenance and setup.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Deletes all nodes and relationships.\n# Optionally, can drop all constraints and/or indexes. It preserves the default lookup indexes\nclear_neo4j_database(db, clear_constraints=False, clear_indexes=False)\n\n# Change database password (you will need to call db.set_connection(...) to reset connection)\nchange_neo4j_password(db, user, new_password)\n```\n\n----------------------------------------\n\nTITLE: Defining Undirected Relationships in Neomodel (Python)\nDESCRIPTION: Demonstrates how to establish an undirected relationship between two entities using the Relationship class in Neomodel. This example defines a 'FRIEND' relationship between Person nodes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    friends = Relationship('Person', 'FRIEND')\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Base Classes in Neomodel\nDESCRIPTION: Demonstrates how to create abstract base classes in neomodel using the __abstract_node__ property. This allows for creating node hierarchies without creating corresponding database nodes for the abstract classes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass User(StructuredNode):\n    __abstract_node__ = True\n    name = StringProperty(unique_index=True)\n\nclass Shopper(User):\n    balance = IntegerProperty(index=True)\n\n    def credit_account(self, amount):\n        self.balance = self.balance + int(amount)\n        self.save()\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management in Python with Neomodel\nDESCRIPTION: Illustrates manual transaction management in Neomodel, including beginning a transaction, committing changes, and handling rollbacks in case of exceptions.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.begin()\ntry:\n    new_user = Person(name=username, email=email).save()\n    send_email(new_user)\n    db.commit()\nexcept Exception as e:\n    db.rollback()\n```\n\n----------------------------------------\n\nTITLE: Basic Node Filtering in Neomodel\nDESCRIPTION: Examples of basic node filtering using .nodes.filter() and .nodes.get() methods. Shows error handling for non-existent nodes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhigh_end_coffees = Coffee.nodes.filter(price__gt=2)\n\ntry:\n    java = Coffee.nodes.get(name='Java')\nexcept DoesNotExist:\n    print(\"Couldn't find coffee 'Java'\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Ordering with RawCypher\nDESCRIPTION: Example of using RawCypher for complex ordering operations, such as ordering by transformed version numbers.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.sync_.match import RawCypher\n\nclass SoftwareDependency(AsyncStructuredNode):\n    name = StringProperty()\n    version = StringProperty()\n\nSoftwareDependency(name=\"Package2\", version=\"1.4.0\").save()\nSoftwareDependency(name=\"Package3\", version=\"2.5.5\").save()\n\nlatest_dep = SoftwareDependency.nodes.order_by(\n    RawCypher(\"toInteger(split($n.version, '.')[0]) DESC\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Read and Write Transactions in Python with Neomodel\nDESCRIPTION: Demonstrates the use of explicit read and write transactions in Neomodel, which is important for Neo4j causal cluster deployments.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith db.read_transaction:\n    ...\n\nwith db.write_transaction:\n    ...\n\nwith db.transaction:\n    # This designates the transaction as WRITE even if \n    # the the enclosed block of code will not modify the \n    # database state.\n```\n\nLANGUAGE: python\nCODE:\n```\n@db.write_transaction\ndef update_user_name(uid, name):\n    user = Person.nodes.filter(uid=uid)[0]\n    user.name = name\n    user.save()\n\n@db.read_transaction\ndef get_all_users():\n    return Person.nodes.all()\n\n@db.transaction # By default a WRITE transaction\n...\n```\n\nLANGUAGE: python\nCODE:\n```\ndb.begin(\"WRITE\")\n...\ndb.begin(\"READ\")\n...\ndb.begin() # By default a **WRITE** transaction\n```\n\n----------------------------------------\n\nTITLE: Creating a Node with UniqueIdProperty in Neomodel\nDESCRIPTION: Shows how to define and query a node using UniqueIdProperty, which generates unique identifiers for nodes. This example creates a Person class with a uid property and demonstrates how to retrieve a Person node by its unique identifier.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    uid = UniqueIdProperty()\n\nPerson.nodes.get(uid='a12df...')\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating Nodes in Neomodel\nDESCRIPTION: Shows how to use the get_or_create() method for atomically retrieving existing nodes or creating them if they don't exist. This is useful for ensuring specific nodes exist while avoiding duplicates.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/batch.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npeople = Person.get_or_create(\n    {'name': 'Tim'},\n    {'name': 'Bob'},\n)\n\npeople_with_jill = Person.get_or_create(\n    {'name': 'Tim'},\n    {'name': 'Bob'},\n    {'name': 'Jill'},\n)\n# are same nodes\nassert people[0] == people_with_jill[0]\nassert people[1] == people_with_jill[1]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Nodes with Transaction in Neomodel\nDESCRIPTION: Creates multiple Person nodes within a single transaction. This example demonstrates creating three people with name and age properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/batch.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith db.transaction:\n    people = Person.create(\n        {'name': 'Tim', 'age': 83},\n        {'name': 'Bob', 'age': 23},\n        {'name': 'Jill', 'age': 34},\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Async Operations with Neomodel\nDESCRIPTION: Examples of basic async operations using Neo4j driver's async support, including executing Cypher queries asynchronously.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import adb\nresults, meta = await adb.cypher_query(\"RETURN 'Hello World' as message\")\n```\n\n----------------------------------------\n\nTITLE: Changing Neo4j Connection at Runtime in Neomodel\nDESCRIPTION: Demonstrates how to change the Neo4j connection at runtime using the db.set_connection method. Supports both URL-based (auto-managed) and driver-based (self-managed) connections.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\n# Using URL - auto-managed\ndb.set_connection(url='bolt://neo4j:neo4j@localhost:7687')\n\n# Using self-managed driver\ndb.set_connection(driver=my_driver)\n```\n\n----------------------------------------\n\nTITLE: Using Mixins to Share Functionality Between Node Classes\nDESCRIPTION: Shows how to use Python mixins to share properties and methods between different node classes without using inheritance from StructuredNode. This provides a way to compose node classes with reusable components.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserMixin:\n    name = StringProperty(unique_index=True)\n    password = StringProperty()\n\nclass CreditMixin:\n    balance = IntegerProperty(index=True)\n\n    def credit_account(self, amount):\n        self.balance = self.balance + int(amount)\n        self.save()\n\nclass Shopper(StructuredNode, UserMixin, CreditMixin):\n    pass\n\njim = Shopper(name='jimmy', balance=300).save()\njim.credit_account(50)\n```\n\n----------------------------------------\n\nTITLE: Overriding StructuredNode Constructor in Neomodel\nDESCRIPTION: Demonstrates how to properly override the __init__ constructor in StructuredNode subclasses. It's essential to call super().__init__() and pass parameters via kwargs to maintain proper object initialization.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Item(StructuredNode):\n    name = StringProperty(unique_index=True)\n    uid = StringProperty(unique_index=True)\n\n    def __init__(self, product=None, *args, **kwargs):\n        if product is not None:\n            self.product = product\n            kwargs[\"uid\"] = 'g.' + str(self.product.pk)\n            kwargs[\"name\"] = self.product.product_name\n        super().__init__(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Managing Bookmarks in Neomodel Transactions\nDESCRIPTION: Shows how to use bookmarks in Neomodel transactions, which is crucial for ensuring data consistency in Neo4j causal clusters.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntransaction = db.transaction\ntransaction.bookmarks = [bookmark1, bookmark2]\nwith transaction:\n    # All database access happens after completion of the transactions\n    # listed in bookmark1 and bookmark2\n\nbookmark = transaction.last_bookmark\n```\n\nLANGUAGE: python\nCODE:\n```\n@db.write_transaction.with_bookmarks\ndef update_user_name(uid, name):\n    user = Person.nodes.filter(uid=uid)[0]\n    user.name = name\n    user.save()\n\n@db.read_transaction.with_bookmarks\ndef get_all_users():\n    return Person.nodes.all()\n\n\nresult, bookmark = update_user_name(uid, name)\n\nusers, last_bookmark = get_all_users(bookmarks=[bookmark])\nfor user in users:\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\ndb.begin(bookmarks=[bookmark])\ntry:\n    new_user = Person(name=username, email=email).save()\n    send_email(new_user)\n    bookmark = db.commit()\nexcept Exception as e:\n    db.rollback()\n```\n\n----------------------------------------\n\nTITLE: Using ArrayProperty with Type Specification in Neomodel\nDESCRIPTION: Demonstrates how to define an ArrayProperty that contains strings. The StringProperty class is passed as the first argument to specify the type of elements in the array, ensuring type validation for each element.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    names = ArrayProperty(StringProperty(), required=True)\n\nbob = Person(names=['bob', 'rob', 'robert']).save()\n```\n\n----------------------------------------\n\nTITLE: Defining Default String Property with UUID in Python Neomodel\nDESCRIPTION: Demonstrates how to assign a UUID-generating function as a default value for a StringProperty in Neomodel. This example uses the uuid4 function from the uuid module to automatically generate unique identifiers.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom uuid import uuid4\nmy_id = StringProperty(unique_index=True, default=uuid4)\n```\n\n----------------------------------------\n\nTITLE: Converting Cypher Query Result to NumPy Array (Python)\nDESCRIPTION: Demonstrates how to use the NumPy integration in Neomodel to convert a Cypher query result into a NumPy ndarray. Requires the 'numpy' extra to be installed.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\nfrom neomodel.integration.numpy import to_ndarray\n\narray = to_ndarray(db.cypher_query(\"MATCH (a:Person) RETURN a.name AS name, a.born AS born\"))\n```\n\n----------------------------------------\n\nTITLE: Traversing Relations in Neo4j with Neomodel's traverse_relations Method\nDESCRIPTION: This code demonstrates how to use the traverse_relations method to find Coffee nodes that have a supplier and retrieve the country of that supplier. It generates a Cypher MATCH clause to enforce the existence of a specific path.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCoffee.nodes.traverse_relations(country='suppliers__country').all()\n```\n\n----------------------------------------\n\nTITLE: Generated Cypher Query from Complex Neomodel Operation\nDESCRIPTION: Shows the Cypher query that would be generated from the complex Neomodel query in the previous example.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_11\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (student:Student)-[r1:`HAS_PARENT`]->(student_parents:Student)\nMATCH (student)-[r4:`LIVES_IN`]->(building_lives_in:Building)\nOPTIONAL MATCH (student)<-[r2:`HAS_PARENT`]-(student_children:Student)-[r3:`HAS_PREFERRED_COURSE`]->(course_children__preferred_course:Course)\nWITH *\n# building_lives_in_name_1 = \"Eiffel Tower\"\n# student_name_1 = \"(?i)m.*\"\nWHERE building_lives_in.name = $building_lives_in_name_1 AND student.name =~ $student_name_1\nCALL {\n    WITH student\n    MATCH (student)-[r1:`HAS_COURSE`]->(course_courses:Course)\n    WITH r1 AS rel\n    ORDER BY toInteger(split(rel.level, '.')[0]),toInteger(split(rel.level, '.')[1]),rel.end_date,rel.start_date\n    RETURN last(collect(rel)) AS latest_course\n}\nRETURN latest_course, student, student_parents, r1, student_children, r2, course_children__preferred_course, r3, building_lives_in, r4, collect(DISTINCT student_children) AS children, collect(DISTINCT course_children__preferred_course) AS children_preferred_course\nORDER BY student.name\n```\n\n----------------------------------------\n\nTITLE: Implementing User Impersonation in Neomodel Transactions\nDESCRIPTION: Demonstrates how to use impersonation in Neomodel transactions, a feature available in Neo4j Enterprise Edition. It allows executing transactions as a different user.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\n\nwith db.impersonate(user=\"writeuser\"):\n    Person(name='Bob').save()\n```\n\nLANGUAGE: python\nCODE:\n```\n@db.impersonate(user=\"writeuser\")\ndef update_user_name(uid, name):\n    user = Person.nodes.filter(uid=uid)[0]\n    user.name = name\n    user.save()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\n\n@db.impersonate(user=\"tempuser\")\n# Both transactions will be run as the same impersonated user\ndef func0():\n    @db.transaction()\n    def func1():\n        ...\n\n    @db.transaction()\n    def func2():\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Properties with StructuredRel in Neomodel (Python)\nDESCRIPTION: Illustrates how to define properties for relationships using StructuredRel in Neomodel. This example creates a FriendRel model with date and string properties for a 'FRIEND' relationship between Person nodes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FriendRel(StructuredRel):\n    since = DateTimeProperty(\n        default=lambda: datetime.now(pytz.utc),\n        index=True\n    )\n    met = StringProperty()\n    meeting_id = StringProperty(unique_index=True)\n\nclass Person(StructuredNode):\n    name = StringProperty()\n    friends = RelationshipTo('Person', 'FRIEND', model=FriendRel)\n```\n\n----------------------------------------\n\nTITLE: Implementing post_create Hook for Person Node in Python\nDESCRIPTION: Demonstrates how to implement a post_create hook for a Person node. This hook is called after a new node is created and can be used for additional actions like sending a welcome email.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/hooks.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n\n    def post_create(self):\n        email_welcome_message(self)\n```\n\n----------------------------------------\n\nTITLE: Using Parallel Runtime for Read Transactions in Neomodel\nDESCRIPTION: Illustrates how to use the parallel runtime feature for read transactions in Neo4j Enterprise Edition (version 5.13+) with Neomodel. This can potentially improve performance for certain read operations.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\n\nwith db.parallel_read_transaction:\n    # It works for both neomodel-generated and custom Cypher queries\n    parallel_count_1 = len(Coffee.nodes)\n    parallel_count_2 = db.cypher_query(\"MATCH (n:Coffee) RETURN count(n)\")\n```\n\n----------------------------------------\n\nTITLE: Defining Neo4j Model Structure with Neomodel\nDESCRIPTION: Sample model definitions showing supplier and coffee entities with their relationships and properties. Includes a structured relationship class for supplier connections.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SupplierRel(StructuredRel):\n    since = DateTimeProperty(default=datetime.now)\n\n\nclass Supplier(StructuredNode):\n    name = StringProperty()\n    delivery_cost = IntegerProperty()\n\n\nclass Coffee(StructuredNode):\n    name = StringProperty(unique_index=True)\n    price = IntegerProperty()\n    suppliers = RelationshipFrom(Supplier, 'SUPPLIES', model=SupplierRel)\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Labels for Nodes in Neomodel\nDESCRIPTION: Demonstrates how to define optional labels for nodes using the __optional_labels__ property. This allows nodes to have additional labels beyond those derived from their class hierarchy.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Shopper(StructuredNode):\n    __optional_labels__ = [\"SuperSaver\", \"SeniorDiscount\"]\n    balance = IntegerProperty(index=True)\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Neomodel\nDESCRIPTION: Example of performing a Cypher subquery in neomodel with the subquery method. This allows for operations to be performed in isolation from the rest of the query, with controlled context sharing.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/advanced_query_operations.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.sync_match import Collect, Last\n\n# This will create a CALL{} subquery\n# And return a variable named supps usable in the rest of your query\nCoffee.nodes.filter(name=\"Espresso\")\n.subquery(\n    Coffee.nodes.traverse_relations(suppliers=\"suppliers\")\n    .intermediate_transform(\n        {\"suppliers\": {\"source\": \"suppliers\"}}, ordering=[\"suppliers.delivery_cost\"]\n    )\n    .annotate(supps=Last(Collect(\"suppliers\"))),\n    [\"supps\"],\n    [NodeNameResolver(\"self\")]\n)\n```\n\n----------------------------------------\n\nTITLE: Using fetch_relations() to Retrieve Additional Relations in Neomodel\nDESCRIPTION: Demonstrates how to fetch one or more relations within the same call to fetch_relations(), including both optional and non-optional relations.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPerson.nodes.fetch_relations('city__country', Optional('country')).all()\n```\n\n----------------------------------------\n\nTITLE: Defining Directed Relationships with Cross-Module References in Neomodel (Python)\nDESCRIPTION: Shows how to define directed relationships in Neomodel, including references to classes in other modules to avoid cyclic imports. This example defines 'CAR' and 'VAN' relationships for a Garage node.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Garage(StructuredNode):\n    cars = RelationshipTo('transport.models.Car', 'CAR')\n    vans = RelationshipTo('.models.Van', 'VAN')\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j Indexes and Constraints for a Single Class\nDESCRIPTION: Shows how to manually install indexes and constraints for a single Neomodel class. This is an alternative to using the neomodel_install_labels script.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import install_labels\ninstall_labels(YourClass)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting and Replacing Relationships in Neo4j using Neomodel\nDESCRIPTION: Shows how to disconnect all relationships of a specific type and how to replace existing relationships with new ones.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Remove all of Jim's country relationships\njim.country.disconnect_all()\n\njim.country.connect(usa)\n# Replace Jim's country relationship with a new one\njim.country.replace(germany)\n```\n\n----------------------------------------\n\nTITLE: Defining a Neo4j Relationship Model with Neomodel in Python\nDESCRIPTION: This class defines a 'RelRel' relationship model with string properties. It shows how to create indexed and uniquely indexed properties for relationships.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass RelRel(StructuredRel):\n    some_index_property = StringProperty(index=True)\n    some_unique_property = StringProperty(unique_index=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j Indexes and Constraints for All Classes\nDESCRIPTION: Demonstrates how to install indexes and constraints for all Neomodel classes in an application. This automatically discovers and configures all model classes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport yourapp  # make sure your app is loaded\nfrom neomodel import install_all_labels\n\ninstall_all_labels()\n# Output:\n# Setting up labels and constraints...\n# Found yourapp.models.User\n# + Creating unique constraint for name on label User for class yourapp.models.User\n# ...\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Methods for StructuredNode in Python\nDESCRIPTION: Lists the available hook methods for StructuredNode subclasses in neomodel. These methods are called at specific points in the node lifecycle and do not accept any arguments.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/hooks.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npre_save, post_save, pre_delete, post_delete, post_create\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship Model for Neomodel Traversal\nDESCRIPTION: This code demonstrates how to define a relationship model, which is required for using fetch_relations. It shows setting up a relationship to a Country node with a default StructuredRel model.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    country = RelationshipTo(Country, 'IS_FROM', model=StructuredRel)\n```\n\n----------------------------------------\n\nTITLE: Defining PointProperty in a StructuredNode\nDESCRIPTION: Shows how to define a PointProperty in a StructuredNode class, specifying the coordinate reference system (CRS) for validation purposes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/spatial_properties.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.contrib import spatial_properties as neomodel_spatial \n\nclass SomeEntity(neomodel.StructuredNode):\n    entity_id = neomodel.UniqueIdProperty()\n    location = neomodel_spatial.PointProperty(crs='wgs-84')\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Nodes with Point Properties\nDESCRIPTION: Demonstrates how to create and update Node instances with Point properties, showing how to instantiate a Node with a Point property and how to update that property.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/spatial_properties.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmy_entity = SomeEntity(location=neomodel.contrib.spatial_properties.NeomodelPoint((0.0,0.0), crs='wgs-84')).save()\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_entity.location=neomodel.contrib.spatial_properties.NeomodelPoint((4.0,4.0), crs='wgs-84'))\nmy_entity.save()\n```\n\n----------------------------------------\n\nTITLE: Setting up DateTimeFormatProperty with Custom Format in Neomodel\nDESCRIPTION: Example of using DateTimeFormatProperty with a custom format string. This property stores datetime objects as formatted strings using the specified pattern, in this case storing the datetime as 'YYYY-MM-DD HH:mm:ss'.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncreated = DateTimeFormatProperty(format=\"%Y-%m-%d %H:%M:%S\")\n```\n\n----------------------------------------\n\nTITLE: Closing Neo4j Connection in Neomodel\nDESCRIPTION: Shows how to properly close a Neo4j connection and optionally set up a new one. This is important for resource management, especially with Neo4j version 5 where driver auto-close is deprecated.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\ndb.close_connection()\n\n# If you then want a new connection\ndb.set_connection(url=url)\n```\n\n----------------------------------------\n\nTITLE: Node Ordering in Neomodel\nDESCRIPTION: Examples of ordering nodes by properties in ascending and descending order, including random ordering.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/filtering_ordering.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Ascending sort\nfor coffee in Coffee.nodes.order_by('price'):\n    print(coffee, coffee.price)\n\n# Descending sort\nfor supplier in Supplier.nodes.order_by('-delivery_cost'):\n    print(supplier, supplier.delivery_cost)\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Labels in Neomodel\nDESCRIPTION: Shows how to override the default node label (which uses the class name) by setting the __label__ property on a node class. This provides flexibility in naming database entities.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PersonClass(StructuredNode):\n    __label__ = \"Person\"\n    name = StringProperty(unique_index=True)\n```\n\n----------------------------------------\n\nTITLE: Resolving Subgraphs in Neomodel Fetch Relations Results\nDESCRIPTION: This snippet demonstrates how to use the resolve_subgraph method to get a list of 'subgraphs' where each returned StructuredNode element contains its relations and neighbour nodes, providing a more structured result.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = Coffee.nodes.fetch_relations('suppliers__country').resolve_subgraph().all()\n```\n\n----------------------------------------\n\nTITLE: Using Optional Match in Neomodel Traversals\nDESCRIPTION: This snippet demonstrates how to use an OPTIONAL MATCH statement in both traverse_relations and fetch_relations methods. It shows how to make certain parts of the traversal optional.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.match import Optional\n\n# Return the Person nodes, and if they have suppliers, return the suppliers as well\nresults = Coffee.nodes.fetch_relations(Optional('suppliers')).all()\n```\n\n----------------------------------------\n\nTITLE: Accessing End Node in Neo4j Relationship\nDESCRIPTION: Demonstrates how to access the end node of a relationship in Neo4j using the end_node() method. This allows you to retrieve the node at the destination of a relationship path.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nv = Z[0][0][0].end_node()\n```\n\n----------------------------------------\n\nTITLE: Importing Neomodel Components\nDESCRIPTION: Imports required classes and properties from neomodel library including core node/relationship types and various property types.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import StructuredNode, StringProperty, RelationshipTo, StructuredRel, ZeroOrOne, ArrayProperty, FloatProperty, BooleanProperty, DateProperty, DateTimeProperty, IntegerProperty\nfrom neomodel.contrib.spatial_properties import PointProperty\n```\n\n----------------------------------------\n\nTITLE: Converting Cypher Query Result to Pandas DataFrame (Python)\nDESCRIPTION: Shows how to use the Pandas integration in Neomodel to convert a Cypher query result into a Pandas DataFrame. Requires the 'pandas' extra to be installed.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/cypher.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\nfrom neomodel.integration.pandas import to_dataframe, to_series\n\ndf = to_dataframe(db.cypher_query(\"MATCH (a:Person) RETURN a.name AS name, a.born AS born\"))\nseries = to_series(db.cypher_query(\"MATCH (a:Person) RETURN a.name AS name\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing NeomodelPoint Coordinates\nDESCRIPTION: Examples of accessing coordinates from NeomodelPoint objects, showing the distinction between Cartesian and geographical points with their specific accessors.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/spatial_properties.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnew_object = neomodel.contrib.spatial_properties.NeomodelPoint(x=0.0, y=0.0, z=12.0)\nprint(\"The x component of new_object equals {}\".format(new_object.x))\n```\n\n----------------------------------------\n\nTITLE: Using default_now Parameter with DateTimeProperty in Neomodel\nDESCRIPTION: Shows how to use the default_now parameter with DateTimeProperty to automatically set the property to the current time when a node is created. This is useful for tracking creation timestamps.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncreated = DateTimeProperty(default_now=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Relationship Inheritance in Neomodel (Python)\nDESCRIPTION: Demonstrates how to extend relationship classes in Neomodel. This example creates a PersonalRelationshipWithStrength class that inherits from PersonalRelationship and adds a strength property.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass PersonalRelationshipWithStrength(PersonalRelationship):\n    on_date = neomodel.DateProperty(default_now = True)\n    strength = neomodel.FloatProperty(default = 1.0)\n\nclass ExtendedBasePerson(BasePerson):\n    name = neomodel.StringProperty(required = True, unique_index = True)\n    role = neomodel.StringProperty(required = True)\n    friends_with = neomodel.RelationshipTo(\"BasePerson\", \"FRIENDS_WITH\", model = PersonalRelationshipWithStrength)\n```\n\n----------------------------------------\n\nTITLE: Importing Neomodel Classes and Properties for Neo4j Modeling in Python\nDESCRIPTION: This snippet imports necessary classes and properties from Neomodel to define Neo4j node and relationship models. It includes various property types and spatial properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom neomodel import StructuredNode, StringProperty, RelationshipTo, StructuredRel, ZeroOrOne, ArrayProperty, FloatProperty, BooleanProperty, DateProperty, DateTimeProperty, IntegerProperty\nfrom neomodel.contrib.spatial_properties import PointProperty\n```\n\n----------------------------------------\n\nTITLE: Defining Node with Multiple Index Types in Python using Neomodel\nDESCRIPTION: This example illustrates how to define a node with multiple index types on its properties, including a regular index, a fulltext index, and a vector index. It demonstrates the use of FulltextIndex and VectorIndex classes with their configuration options.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/schema_management.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import StructuredNode, StringProperty, FulltextIndex, VectorIndex\nclass VeryIndexedNode(StructuredNode):\n    name = StringProperty(\n        index=True,\n        fulltext_index=FulltextIndex(analyzer='english', eventually_consistent=True)\n    )\n    name_embedding = ArrayProperty(\n        FloatProperty(),\n        vector_index=VectorIndex(dimensions=512, similarity_function='euclidean')\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Neo4j Database Name in Neomodel\nDESCRIPTION: Demonstrates two methods for specifying a custom Neo4j database name: including it in the URL or setting it separately with config.DATABASE_NAME.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Using the URL only\nconfig.DATABASE_URL = 'bolt://neo4j:neo4j@localhost:7687/mydb`\n\n# Using config option\nconfig.DATABASE_URL = 'bolt://neo4j:neo4j@localhost:7687`\nconfig.DATABASE_NAME = 'mydb'\n```\n\n----------------------------------------\n\nTITLE: Importing Neomodel Components for Node Definitions in Python\nDESCRIPTION: Imports necessary classes and properties from the neomodel library to define Neo4j node structures. Includes standard property types and a spatial property type from the contrib module.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_light.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import StructuredNode, StringProperty, RelationshipTo, ArrayProperty, FloatProperty, BooleanProperty, DateProperty, DateTimeProperty, IntegerProperty\nfrom neomodel.contrib.spatial_properties import PointProperty\n```\n\n----------------------------------------\n\nTITLE: Using Intermediate Transformations in Neomodel Queries\nDESCRIPTION: Examples of using intermediate_transform method to add a WITH clause to queries. This enables operations on results before returning them, like ordering before applying aggregation methods.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/advanced_query_operations.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.sync_.match import Collect, Last\n\n# This will return all Coffee nodes, with their most expensive supplier\nCoffee.nodes.traverse_relations(suppliers=\"suppliers\")\n    .intermediate_transform(\n        {\"suppliers\": {\"source\": \"suppliers\"}}, ordering=[\"suppliers.delivery_cost\"]\n    )\n    .annotate(supps=Last(Collect(\"suppliers\")))\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Variables in Neomodel Traversals\nDESCRIPTION: This code shows how to use the unique_variables method to ensure that the same variable name is used for traversed nodes when chaining traversals, guaranteeing consistent node traversal.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnodeset = (\n    Supplier.nodes.fetch_relations(\"coffees\", \"coffees__species\")\n    .filter(coffees__name=\"Nescafe\")\n    .unique_variables(\"coffees\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Neo4j Node Model with Only Relationships using Neomodel in Python\nDESCRIPTION: This class defines a node model that only has a relationship to other nodes of the same type, without any properties of its own. It showcases defining relationships without node properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass NoPropertyRelNode(StructuredNode):\n    no_prop_rel = RelationshipTo(\"NoPropertyRelNode\", \"NO_PROP_REL\", cardinality=ZeroOrOne)\n```\n\n----------------------------------------\n\nTITLE: Applying Transaction Decorator to Python Function\nDESCRIPTION: Shows how to use the transaction decorator on a function in Neomodel. This ensures that the entire function execution is wrapped in a transaction.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/transactions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@db.transaction\ndef update_user_name(uid, name):\n    user = Person.nodes.filter(uid=uid)[0]\n    user.name = name\n    user.save()\n```\n\n----------------------------------------\n\nTITLE: Creating NeomodelPoint Objects\nDESCRIPTION: Shows different ways to instantiate NeomodelPoint objects, including using the copy constructor, creating from shapely.geometry.Point objects, and direct instantiation with coordinates.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/spatial_properties.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnew_object = neomodel.contrib.spatial_properties.NeomodelPoint(old_object);\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_object = neomodel.contrib.spatial_properties.NeomodelPoint(shapely.geometry.Point((0.0,0.0)), crs='cartesian');\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_object = neomodel.contrib.spatial_properties.NeomodelPoint((0.0,0.0))\n```\n\nLANGUAGE: python\nCODE:\n```\nnew_object = neomodel.contrib.spatial_properties.NeomodelPoint(x=0.0, y=0.0, z=12.0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Neo4j Node Model with Only Relationships using Neomodel in Python\nDESCRIPTION: This class, NoPropertyRelNode, shows how to define a node model that only has relationships without any properties. It defines a relationship to itself named 'NO_PROP_REL'.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7_light.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass NoPropertyRelNode(StructuredNode):\n    no_prop_rel = RelationshipTo(\"NoPropertyRelNode\", \"NO_PROP_REL\")\n```\n\n----------------------------------------\n\nTITLE: Using Aggregation Methods with Annotate in Neomodel Queries\nDESCRIPTION: Examples of using aggregation methods (Collect, Last) with the annotate method in neomodel. Shows how to collect properties and get the last element of a collection, with an option for distinct values.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/advanced_query_operations.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.sync_.match import Collect, Last\n\n# distinct is optional, and defaults to False. When true, objects are deduplicated\nSupplier.nodes.traverse_relations(available_species=\"coffees__species\")\n    .annotate(Collect(\"available_species\", distinct=True))\n    .all()\n\n# Last is used to get the last element of a list\nSupplier.nodes.traverse_relations(available_species=\"coffees__species\")\n    .annotate(Last(Collect(\"last_species\")))\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Creating a Node with Point Property in Cypher\nDESCRIPTION: Demonstrates how to create a Node with a 'location' property of type Point in Neo4j using Cypher. Shows both simple coordinate definition and explicit CRS specification.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/spatial_properties.rst#2025-04-23_snippet_0\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE (a:SomeLabel{location:point({x:0.0,y:0.0})});\n```\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE (a:SomeLabel{location:point({x:0,y:0, crs:'cartesian'})});\n```\n\n----------------------------------------\n\nTITLE: Creating a Node Class without Properties in Neomodel\nDESCRIPTION: Defines a NoPropertyNode class that inherits from StructuredNode but doesn't declare any properties. This is likely used to test edge cases where nodes exist in the graph without any specific properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_light.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass NoPropertyNode(StructuredNode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Name Resolvers in Neomodel for Variable References\nDESCRIPTION: Example of using NodeNameResolver and RelationshipNameResolver to reference Cypher variables without explicit aliasing. This is particularly useful for fetch_relations where explicit aliases cannot be set.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/advanced_query_operations.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel.sync_match import Collect, NodeNameResolver, RelationshipNameResolver\n\nSupplier.nodes.fetch_relations(\"coffees__species\")\n    .annotate(\n        all_species=Collect(NodeNameResolver(\"coffees__species\"), distinct=True),\n        all_species_rels=Collect(\n            RelationNameResolver(\"coffees__species\"), distinct=True\n        ),\n    )\n    .all()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Property Type Node\nDESCRIPTION: Demonstrates all available property types in Neomodel including array, float, boolean, point, string, date, datetime, and integer properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass EveryPropertyTypeNode(StructuredNode):\n    array_property = ArrayProperty(StringProperty())\n    float_property = FloatProperty()\n    boolean_property = BooleanProperty()\n    point_property = PointProperty(crs='wgs-84')\n    string_property = StringProperty()\n    date_property = DateProperty()\n    datetime_property = DateTimeProperty()\n    integer_property = IntegerProperty()\n```\n\n----------------------------------------\n\nTITLE: Implementing Database-Specific Labels in Neomodel Enterprise\nDESCRIPTION: Shows how to define classes that share the same label but are specific to different databases using the __target_databases__ property. This feature is only available in Neo4j Enterprise Edition with multiple databases.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass PatientOne(AsyncStructuredNode):\n    __label__ = \"Patient\"\n    __target_databases__ = [\"db_one\"]\n    name = StringProperty()\n\nclass PatientTwo(AsyncStructuredNode):\n    __label__ = \"Patient\"\n    __target_databases__ = [\"db_two\"]\n    identifier = StringProperty()\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations in Neo4j with Neomodel's fetch_relations Method\nDESCRIPTION: This snippet shows how to use the fetch_relations method to retrieve all traversed objects (nodes and relations) in a path from Coffee to Country through Supplier.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/traversal.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCoffee.nodes.fetch_relations(country='suppliers__country').all()\n```\n\n----------------------------------------\n\nTITLE: Defining a Neo4j Node Model with Relationships using Neomodel in Python\nDESCRIPTION: This class defines a 'ScriptsTestNode' model with string properties and relationships to other nodes of the same type. It demonstrates indexing and unique constraints on properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ScriptsTestNode(StructuredNode):\n    personal_id = StringProperty(unique_index=True)\n    name = StringProperty(index=True)\n    rel = RelationshipTo(\"ScriptsTestNode\", \"REL\", cardinality=ZeroOrOne, model=\"RelRel\")\n    other_rel = RelationshipTo(\"ScriptsTestNode\", \"OTHER_REL\", cardinality=ZeroOrOne)\n```\n\n----------------------------------------\n\nTITLE: Installing Neomodel from GitHub\nDESCRIPTION: Command to install the latest development version of Neomodel directly from GitHub repository.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install git+git://github.com/neo4j-contrib/neomodel.git@HEAD#egg=neomodel-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Neomodel Classes and Properties for Neo4j Node Modeling in Python\nDESCRIPTION: This snippet imports necessary classes and properties from Neomodel to define Neo4j node models. It includes basic property types, relationship definitions, and spatial properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7_light.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom neomodel import StructuredNode, StringProperty, RelationshipTo, ArrayProperty, FloatProperty, BooleanProperty, DateProperty, DateTimeProperty, IntegerProperty\nfrom neomodel.contrib.spatial_properties import PointProperty\n```\n\n----------------------------------------\n\nTITLE: Implementing Node with All Property Types in Neo4j using Neomodel\nDESCRIPTION: Defines an EveryPropertyTypeNode class that demonstrates all available property types in neomodel. Includes array, float, boolean, spatial point, string, date, datetime, and integer properties for comprehensive testing.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_light.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass EveryPropertyTypeNode(StructuredNode):\n    array_property = ArrayProperty(StringProperty())\n    float_property = FloatProperty()\n    boolean_property = BooleanProperty()\n    point_property = PointProperty(crs='wgs-84')\n    string_property = StringProperty()\n    date_property = DateProperty()\n    datetime_property = DateTimeProperty()\n    integer_property = IntegerProperty()\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints and Indexes to Neo4j Database using Neomodel CLI\nDESCRIPTION: This snippet shows the command to apply constraints and indexes defined in Neomodel models to a Neo4j database using the neomodel_install_labels script. It demonstrates how to specify the application file and database connection URL.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/schema_management.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ neomodel_install_labels yourapp.py someapp.models --db bolt://neo4j_username:neo4j_password@localhost:7687\n```\n\n----------------------------------------\n\nTITLE: Installing Neomodel via pip\nDESCRIPTION: Command to install Neomodel package from PyPI using pip package manager.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install neomodel\n```\n\n----------------------------------------\n\nTITLE: Installing Neomodel with Pip\nDESCRIPTION: Commands for installing neomodel using pip, with options for including Rust driver extension and optional dependencies.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install neomodel ($ source dev # To install all things needed in a Python3 venv)\n\n# neomodel can use the Rust extension to the Neo4j driver for faster transport, to install use:\n\n$ pip install neomodel[rust-driver-ext]\n\n# neomodel has some optional dependencies (Shapely, pandas, numpy), to install these use:\n\n$ pip install neomodel[extras, rust-driver-ext]\n```\n\n----------------------------------------\n\nTITLE: Class Hierarchy for Automatic Class Resolution Example\nDESCRIPTION: Demonstrates defining a node class hierarchy that illustrates how neomodel builds its node-class registry for automatic class resolution. The registry maps sets of labels to specific node classes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport neomodel\n\n\nclass BasePerson(neomodel.StructuredNode):\n    pass\n\n\nclass TechnicalPerson(BasePerson):\n    pass\n\n\nclass PilotPerson(BasePerson):\n    pass\n\n\nclass UserClass(StructuredNode):\n    __label__ = \"User\"\n```\n\n----------------------------------------\n\nTITLE: Setting Neo4j Connection URL in Neomodel\nDESCRIPTION: Sets the connection URL for Neomodel to connect to a Neo4j database. Uses the config.DATABASE_URL parameter to specify the bolt protocol connection string.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfig.DATABASE_URL = 'bolt://neo4j:neo4j@localhost:7687`\n```\n\n----------------------------------------\n\nTITLE: Setting Default DateTime Property with Lambda Function in Neomodel\nDESCRIPTION: Illustrates how to use a lambda function to provide the current UTC time as a default value for a DateTimeProperty. This approach uses the datetime.now() function with the pytz library to ensure timezone-aware timestamps.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_datetime = DateTimeProperty(default=lambda: datetime.now(pytz.utc))\n```\n\n----------------------------------------\n\nTITLE: Executing Cypher Query with Object Resolution in Neomodel\nDESCRIPTION: Shows a cypher query execution to retrieve relationships of type BUDDIES_WITH between BasePerson nodes. The query uses the resolve_objects parameter which would raise a RelationshipClassNotDefined exception if the relationship type isn't defined in the model.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/relationships.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nZ = neomodel.db.cypher_query(\"MATCH (:BasePerson)-[r:BUDDIES_WITH]->(:BasePerson) RETURN r\", resolve_objects=True)\n```\n\n----------------------------------------\n\nTITLE: Querying Neo4j Patient Nodes with Object Resolution in Python\nDESCRIPTION: This code snippet demonstrates how to query Neo4j for Patient nodes and resolve the results to PatientOne model instances. The query uses the cypher_query method with the resolve_objects parameter set to True.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npatients = db.cypher_query(\"MATCH (n:Patient) RETURN n\", resolve_objects=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Neomodel Tests\nDESCRIPTION: Environment variable configuration for running neomodel test suite against a Neo4j database.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export NEO4J_BOLT_URL=bolt://<username>:<password>@localhost:7687 # check your username and password\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Neo4j Node Model with Relationships using Neomodel in Python\nDESCRIPTION: This class defines a ScriptsTestNode model with string properties and two types of relationships to itself. It demonstrates the use of unique and non-unique indexed properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7_light.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ScriptsTestNode(StructuredNode):\n    personal_id = StringProperty(unique_index=True)\n    name = StringProperty(index=True)\n    rel = RelationshipTo(\"ScriptsTestNode\", \"REL\")\n    other_rel = RelationshipTo(\"ScriptsTestNode\", \"OTHER_REL\")\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies and Running Tests\nDESCRIPTION: Commands for setting up a development environment and running the neomodel test suite with pytest.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements-dev.txt\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Executing Direct Cypher Queries with Neomodel\nDESCRIPTION: Demonstrates how to run raw Cypher queries using Neomodel's db interface.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/getting_started.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom neomodel import db\nresults, meta = db.cypher_query(\"RETURN 'Hello World' as message\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Database Property Names in Neomodel\nDESCRIPTION: Shows how to specify a different property name at the database level using db_property. This example defines a property 'name_' in Python that maps to 'name' in the database, with getter and setter methods for clean access.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    name_ = StringProperty(db_property='name')\n\n    @property\n    def name(self):\n        return self.name_.lower() if self.name_ else None\n\n    @name.setter\n    def name(self, value):\n        self.name_ = value\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Test Node with Relationships in Neo4j using Neomodel\nDESCRIPTION: Creates a ScriptsTestNode class that inherits from StructuredNode with string properties and self-referential relationships. It defines indexed properties and two different relationship types to instances of the same class.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_light.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScriptsTestNode(StructuredNode):\n    personal_id = StringProperty(unique_index=True)\n    name = StringProperty(index=True)\n    rel = RelationshipTo(\"ScriptsTestNode\", \"REL\")\n    other_rel = RelationshipTo(\"ScriptsTestNode\", \"OTHER_REL\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Neo4j Node Model with Neomodel in Python\nDESCRIPTION: This class defines a node model without any properties, demonstrating that it's possible to create nodes without specific attributes in Neo4j using Neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass NoPropertyNode(StructuredNode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic Node Model with Relationships\nDESCRIPTION: Defines a ScriptsTestNode class with string properties and two relationships. Includes indexed properties and cardinality constraints.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScriptsTestNode(StructuredNode):\n    personal_id = StringProperty(unique_index=True)\n    name = StringProperty(index=True)\n    rel = RelationshipTo(\"ScriptsTestNode\", \"REL\", cardinality=ZeroOrOne, model=\"RelRel\")\n    other_rel = RelationshipTo(\"ScriptsTestNode\", \"OTHER_REL\", cardinality=ZeroOrOne)\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Neo4j Node Model without Properties using Neomodel in Python\nDESCRIPTION: This class, NoPropertyNode, demonstrates the creation of a node model without any properties. It can be used when only the node's existence is relevant without additional attributes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7_light.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass NoPropertyNode(StructuredNode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-managed Neo4j Driver in Neomodel\nDESCRIPTION: Creates a custom Neo4j driver instance and assigns it to Neomodel. This approach allows utilizing driver options that Neomodel doesn't implement directly, such as SSO authentication tokens.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom neo4j import GraphDatabase\nmy_driver = GraphDatabase().driver('bolt://localhost:7687', auth=('neo4j', 'password'))\nconfig.DRIVER = my_driver\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive Neo4j Node Model with Various Property Types in Python\nDESCRIPTION: This class, EveryPropertyTypeNode, showcases the use of different property types available in Neomodel, including array, float, boolean, point (spatial), string, date, datetime, and integer properties.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7_light.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass EveryPropertyTypeNode(StructuredNode):\n    array_property = ArrayProperty(StringProperty())\n    float_property = FloatProperty()\n    boolean_property = BooleanProperty()\n    point_property = PointProperty(crs='wgs-84')\n    string_property = StringProperty()\n    date_property = DateProperty()\n    datetime_property = DateTimeProperty()\n    integer_property = IntegerProperty()\n```\n\n----------------------------------------\n\nTITLE: Creating Property Aliases with AliasProperty in Neomodel\nDESCRIPTION: Demonstrates how to use AliasProperty to create an alias to another property. This example creates a 'name' alias for the 'full_name' property, allowing queries on either property name to work identically.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/properties.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Person(StructuredNode):\n    full_name = StringProperty(index=True)\n    name = AliasProperty(to='full_name')\n\nPerson.nodes.filter(name='Jim') # just works\n```\n\n----------------------------------------\n\nTITLE: Enforcing Timezone Usage for DateTime Properties\nDESCRIPTION: Configures Neomodel to require all DateTime values to include timezone information before being serialized to UTC epoch. This helps ensure consistent datetime handling in the database.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/configuration.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconfig.FORCE_TIMEZONE = True  # default False\n```\n\n----------------------------------------\n\nTITLE: Relationship Model Definition\nDESCRIPTION: Defines a RelRel class that models relationship properties, including an indexed string property and a non-indexed string property.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RelRel(StructuredRel):\n    some_index_property = StringProperty(index=True)\n    some_unique_property = StringProperty()\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Neomodel with Neo4j Driver Version Specification\nDESCRIPTION: Specifies two dependencies required for the neomodel project: sphinx_copybutton for documentation functionality and neo4j Python driver version 5.19.0 or compatible versions indicated by the tilde operator.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx_copybutton\nneo4j~=5.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Node Models for the Same Neo4j Label with Database Targeting\nDESCRIPTION: This code defines two AsyncStructuredNode classes (GeneralPatient and PatientOne) that both map to the same Neo4j label 'Patient'. PatientOne uses the __target_databases__ attribute to specify it should be used with a specific database 'db_one'.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass GeneralPatient(AsyncStructuredNode):\n    __label__ = \"Patient\"\n    name = StringProperty()\n\nclass PatientOne(AsyncStructuredNode):\n    __label__ = \"Patient\"\n    __target_databases__ = [\"db_one\"]\n    name = StringProperty()\n```\n\n----------------------------------------\n\nTITLE: Using AsyncUtil for Conditional Async/Sync Code\nDESCRIPTION: Python code example demonstrating how to use AsyncUtil to create conditional code paths for async and sync versions of neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# neomodel/async_/core.py\nfrom neomodel._async_compat.util import AsyncUtil\n\n# AsyncUtil.is_async_code is always True\nif AsyncUtil.is_async_code:\n    # Specific async code\n    # This one gets run when in async mode\n    assert await Coffee.nodes.check_contains(2)\nelse:\n    # Specific sync code\n    # This one gest run when in sync mode\n    assert 2 in Coffee.nodes\n```\n\n----------------------------------------\n\nTITLE: Empty Node Models\nDESCRIPTION: Defines two minimal node models - one with no properties and another with only a relationship definition.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_pre_5_7.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass NoPropertyNode(StructuredNode):\n    pass\n\n\nclass NoPropertyRelNode(StructuredNode):\n    no_prop_rel = RelationshipTo(\"NoPropertyRelNode\", \"NO_PROP_REL\", cardinality=ZeroOrOne)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Connection Tests\nDESCRIPTION: Configuration of environment variables required for running the connection tests in neomodel.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export AURA_TEST_DB_USER=username\n$ export AURA_TEST_DB_PASSWORD=password\n$ export AURA_TEST_DB_HOSTNAME=url\n```\n\n----------------------------------------\n\nTITLE: Specifying Neo4j Python Driver Dependency\nDESCRIPTION: This line specifies a dependency on the Neo4j Python driver with a version constraint of 5.28.1 or any compatible version within the same major version. The tilde-equals operator (~=) ensures that only patch and minor version updates are accepted.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nneo4j~=5.28.1\n```\n\n----------------------------------------\n\nTITLE: Transpiling Async Code to Sync\nDESCRIPTION: Commands for automatically transpiling asynchronous code to synchronous code using unasync library during neomodel development.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/make-unasync\nisort .\nblack .\n```\n\n----------------------------------------\n\nTITLE: Implementing Node with Relationship but No Properties in Neomodel\nDESCRIPTION: Creates a NoPropertyRelNode class that has no property definitions but includes a self-referential relationship. This class demonstrates that nodes can be connected even without property attributes.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/test/data/neomodel_inspect_database_output_light.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass NoPropertyRelNode(StructuredNode):\n    no_prop_rel = RelationshipTo(\"NoPropertyRelNode\", \"NO_PROP_REL\")\n```\n\n----------------------------------------\n\nTITLE: Installing Neomodel from GitHub\nDESCRIPTION: Command for installing the latest development version of neomodel directly from GitHub repository.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install git+git://github.com/neo4j-contrib/neomodel.git@HEAD#egg=neomodel-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection for Database-Specific Classes\nDESCRIPTION: Shows how to set a specific database connection for working with database-specific node classes. This is used in conjunction with the __target_databases__ property.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/doc/source/extending.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndb.set_connection(\"bolt://neo4j:password@localhost:7687/db_one\")\n```\n\n----------------------------------------\n\nTITLE: Installing Neomodel Dependencies with Extra Requirements\nDESCRIPTION: Configuration for installing Neomodel package with additional optional dependencies and development tools including testing frameworks, code formatters, and type checkers.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .[extras]\n\nunasync>=0.5.0\npytest>=7.1\npytest-asyncio>=0.19.0\npytest-cov>=4.0\npytest-mock\npre-commit\nblack\nisort\nmypy>=1.11\npandas-stubs\ntypes-pytz\ntypes-shapely\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Tests\nDESCRIPTION: Command for running neomodel test suite against all supported Python interpreters and Neo4j versions using docker-compose.\nSOURCE: https://github.com/neo4j-contrib/neomodel/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# in the project's root folder:\n$ sh ./tests-with-docker-compose.sh\n```"
  }
]