[
  {
    "owner": "spatie",
    "repo": "laravel-permission",
    "content": "TITLE: Adding HasRoles Trait to User Model in Laravel\nDESCRIPTION: Demonstrates how to add the HasRoles trait to a User model, which enables role and permission functionality in the Laravel application.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n    use HasRoles;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing User Permissions and Roles in Laravel\nDESCRIPTION: Demonstrates how to add permissions to users directly or through roles using the Laravel Permission package. Shows how to grant specific permissions to users and assign roles that have permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Adding permissions to a user\n$user->givePermissionTo('edit articles');\n\n// Adding permissions via a role\n$user->assignRole('writer');\n\n$role->givePermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Syncing Multiple Permissions to Roles in Laravel\nDESCRIPTION: Shows how to sync multiple permissions to a role or multiple roles to a permission using syncPermissions() or syncRoles() methods.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$role->syncPermissions($permissions);\n$permission->syncRoles($roles);\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions and Roles in Laravel\nDESCRIPTION: Demonstrates how to add permissions directly to a user and via roles using the Laravel Permission package. It shows assigning a permission to a user, assigning a role to a user, and giving a permission to a role.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Adding permissions to a user\n$user->givePermissionTo('edit articles');\n\n// Adding permissions via a role\n$user->assignRole('writer');\n\n$role->givePermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Using Role and Permission Scopes in Laravel Queries\nDESCRIPTION: Demonstrates how to use the role, withoutRole, permission, and withoutPermission scopes to filter users based on their roles and permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = User::role('writer')->get(); // Returns only users with the role 'writer'\n$nonEditors = User::withoutRole('editor')->get(); // Returns only users without the role 'editor'\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to Roles in Laravel\nDESCRIPTION: Demonstrates two methods to assign a permission to a role: either calling givePermissionTo() on the role or assignRole() on the permission.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$role->givePermissionTo($permission);\n$permission->assignRole($role);\n```\n\n----------------------------------------\n\nTITLE: Creating Roles and Permissions in Laravel\nDESCRIPTION: Shows how to create new Role and Permission models in Laravel using the Spatie Permission package. Both require a name attribute to be set.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n\n$role = Role::create(['name' => 'writer']);\n$permission = Permission::create(['name' => 'edit articles']);\n```\n\n----------------------------------------\n\nTITLE: Checking Direct Permissions with hasPermissionTo\nDESCRIPTION: Demonstrates how to check if a user has a specific permission using the hasPermissionTo method. Note that this does not support Super-Admin functionality.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user->hasPermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Removing Permissions from Roles in Laravel\nDESCRIPTION: Demonstrates how to remove a permission from a role using either revokePermissionTo() on the role or removeRole() on the permission.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$role->revokePermissionTo($permission);\n$permission->removeRole($role);\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users in Laravel Permission\nDESCRIPTION: Demonstrates how to assign one or multiple roles to a user. Roles can be assigned individually, as multiple arguments, or as an array.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user->assignRole('writer');\n\n// You can also assign multiple roles at once\n$user->assignRole('writer', 'admin');\n// or as an array\n$user->assignRole(['writer', 'admin']);\n```\n\n----------------------------------------\n\nTITLE: Role Check Using @role Directive in Laravel Blade\nDESCRIPTION: Demonstrates how to check if a user has a specific role using the @role directive with else condition.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n@role('writer')\n    I am a writer!\n@else\n    I am not a writer...\n@endrole\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Permissions with hasAnyPermission\nDESCRIPTION: Demonstrates how to check if a user has any of an array of permissions using the hasAnyPermission method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user->hasAnyPermission(['edit articles', 'publish articles', 'unpublish articles']);\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Permissions in Laravel\nDESCRIPTION: Shows how to query users who have or don't have specific permissions using the permission and withoutPermission scopes.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = User::permission('edit articles')->get(); // Returns only users with the permission 'edit articles' (inherited or directly)\n$usersWhoCannotEditArticles = User::withoutPermission('edit articles')->get(); // Returns all users without the permission 'edit articles' (inherited or directly)\n```\n\n----------------------------------------\n\nTITLE: Adding HasRoles Trait to User Model\nDESCRIPTION: PHP code snippet showing how to add the required HasRoles trait to your User model for implementing role-based permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-laravel.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// The User model requires this trait\nuse HasRoles;\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Permissions in Laravel Permission\nDESCRIPTION: Demonstrates how to retrieve direct permissions, permissions via roles, and all effective permissions for a user.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Direct permissions\n$user->getDirectPermissions() // Or $user->permissions;\n\n// Permissions inherited from the user's roles\n$user->getPermissionsViaRoles();\n\n// All permissions which apply on the user (inherited and direct)\n$user->getAllPermissions();\n```\n\n----------------------------------------\n\nTITLE: Complete Roles and Permissions Seeder Implementation\nDESCRIPTION: A full seeder class that demonstrates the proper sequence of creating permissions, refreshing the cache, and assigning permissions to roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n\nclass RolesAndPermissionsSeeder extends Seeder\n{\n    public function run(): void\n    {\n        // Reset cached roles and permissions\n        app()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\n\n        // create permissions\n        Permission::create(['name' => 'edit articles']);\n        Permission::create(['name' => 'delete articles']);\n        Permission::create(['name' => 'publish articles']);\n        Permission::create(['name' => 'unpublish articles']);\n\n        // update cache to know about the newly created permissions (required if using WithoutModelEvents in seeders)\n        app()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\n\n\n        // create roles and assign created permissions\n\n        // this can be done as separate statements\n        $role = Role::create(['name' => 'writer']);\n        $role->givePermissionTo('edit articles');\n\n        // or may be done by chaining\n        $role = Role::create(['name' => 'moderator'])\n            ->givePermissionTo(['publish articles', 'unpublish articles']);\n\n        $role = Role::create(['name' => 'super-admin']);\n        $role->givePermissionTo(Permission::all());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Direct Permissions to Users in Laravel Permission\nDESCRIPTION: Demonstrates how to assign permissions directly to users in addition to role-based permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$role = Role::findByName('writer');\n$role->givePermissionTo('edit articles');\n\n$user->assignRole('writer');\n\n$user->givePermissionTo('delete articles');\n```\n\n----------------------------------------\n\nTITLE: Using Default Laravel Authorization Middleware for Permissions\nDESCRIPTION: Examples of using Laravel's built-in middleware for permission checks with the 'can' directive in route groups. Includes both standard usage and static method approach introduced in Laravel 10.9+.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => ['can:publish articles']], function () { ... });\n\n// or with static method (requires Laravel 10.9+)\nRoute::group(['middleware' => [\\Illuminate\\Auth\\Middleware\\Authorize::using('publish articles')]], function () { ... });\n```\n\n----------------------------------------\n\nTITLE: Giving Direct Permissions to Users in Laravel Permission\nDESCRIPTION: Demonstrates how to give permissions directly to users. Shows three approaches: giving a single permission, giving multiple permissions at once, and passing an array of permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user->givePermissionTo('edit articles');\n\n// You can also give multiple permission at once\n$user->givePermissionTo('edit articles', 'delete articles');\n\n// You may also pass an array\n$user->givePermissionTo(['edit articles', 'delete articles']);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Permissions in Laravel\nDESCRIPTION: Shows different methods to retrieve permissions for a user including directly assigned permissions, permissions via roles, or all permissions combined.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// get a list of all permissions directly assigned to the user\n$permissionNames = $user->getPermissionNames(); // collection of name strings\n$permissions = $user->permissions; // collection of permission objects\n\n// get all permissions for the user, either directly, or from roles, or from both\n$permissions = $user->getDirectPermissions();\n$permissions = $user->getPermissionsViaRoles();\n$permissions = $user->getAllPermissions();\n\n// get the names of the user's roles\n$roles = $user->getRoleNames(); // Returns a collection\n```\n\n----------------------------------------\n\nTITLE: Using Permission Middleware in Routes\nDESCRIPTION: Examples of applying role and permission middleware in route groups. Shows basic usage, guard specification, multiple middleware, and using the pipe character for OR logic between multiple roles or permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => ['role:manager']], function () { ... });\nRoute::group(['middleware' => ['permission:publish articles']], function () { ... });\nRoute::group(['middleware' => ['role_or_permission:publish articles']], function () { ... });\n\n// for a specific guard:\nRoute::group(['middleware' => ['role:manager,api']], function () { ... });\n\n// multiple middleware\nRoute::group(['middleware' => ['role:manager','permission:publish articles']], function () { ... });\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple User Roles with hasAnyRole in Laravel Permission\nDESCRIPTION: Demonstrates how to check if a user has any of the specified roles using the hasAnyRole method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user->hasAnyRole(['writer', 'reader']);\n// or\n$user->hasAnyRole('writer', 'reader');\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to Roles in Laravel Permission\nDESCRIPTION: Shows how to give a specific permission to a role using the givePermissionTo method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$role->givePermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Multiple Roles Check Using @hasanyrole in Laravel Blade\nDESCRIPTION: Demonstrates checking if a user has any role from a collection of roles or pipe-separated string.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n@hasanyrole($collectionOfRoles)\n    I have one or more of these roles!\n@else\n    I have none of these roles...\n@endhasanyrole\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions from Roles in Laravel Permission\nDESCRIPTION: Shows how to remove a specific permission from a role using the revokePermissionTo method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$role->revokePermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Permission and Role Seeder Implementation\nDESCRIPTION: Database seeder class that creates initial permissions, roles, and demo users with assigned roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/new-app.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Permission;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\PermissionRegistrar;\n\nclass PermissionsDemoSeeder extends Seeder\n{\n    public function run(): void\n    {\n        app()[PermissionRegistrar::class]->forgetCachedPermissions();\n\n        Permission::create(['name' => 'edit articles']);\n        Permission::create(['name' => 'delete articles']);\n        Permission::create(['name' => 'publish articles']);\n        Permission::create(['name' => 'unpublish articles']);\n\n        $role1 = Role::create(['name' => 'writer']);\n        $role1->givePermissionTo('edit articles');\n        $role1->givePermissionTo('delete articles');\n\n        $role2 = Role::create(['name' => 'admin']);\n        $role2->givePermissionTo('publish articles');\n        $role2->givePermissionTo('unpublish articles');\n\n        $role3 = Role::create(['name' => 'Super-Admin']);\n\n        $user = \\App\\Models\\User::factory()->create([\n            'name' => 'Example User',\n            'email' => 'tester@example.com',\n        ]);\n        $user->assignRole($role1);\n\n        $user = \\App\\Models\\User::factory()->create([\n            'name' => 'Example Admin User',\n            'email' => 'admin@example.com',\n        ]);\n        $user->assignRole($role2);\n\n        $user = \\App\\Models\\User::factory()->create([\n            'name' => 'Example Super-Admin User',\n            'email' => 'superadmin@example.com',\n        ]);\n        $user->assignRole($role3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Wildcard Permissions\nDESCRIPTION: Examples of creating wildcard permissions and assigning them to users, demonstrating that 'posts.*' is equivalent to 'posts'.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/wildcard-permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nPermission::create(['name'=>'posts.*']);\n$user->givePermissionTo('posts.*');\n// is the same as\nPermission::create(['name'=>'posts']);\n$user->givePermissionTo('posts');\n```\n\n----------------------------------------\n\nTITLE: Using Eloquent Relationships with Roles and Permissions in Laravel\nDESCRIPTION: Demonstrates standard Eloquent relationship queries to retrieve users with their roles, permissions, or to query roles directly.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$allUsersWithAllTheirRoles = User::with('roles')->get();\n$allUsersWithAllTheirDirectPermissions = User::with('permissions')->get();\n$allRolesInDatabase = Role::all()->pluck('name');\n$usersWithoutAnyRoles = User::doesntHave('roles')->get();\n$allRolesExceptAandB = Role::whereNotIn('name', ['role A', 'role B'])->get();\n```\n\n----------------------------------------\n\nTITLE: Checking All Permissions with hasAllPermissions\nDESCRIPTION: Shows how to check if a user has all permissions from an array using the hasAllPermissions method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user->hasAllPermissions(['edit articles', 'publish articles', 'unpublish articles']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Super-Admin with Gate::before in Laravel 11\nDESCRIPTION: This snippet shows how to use Gate::before to grant all permissions to a 'Super Admin' role in Laravel 11. It should be placed in the boot() method of AppServiceProvider.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/super-admin.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Gate;\n// ...\npublic function boot()\n{\n    // Implicitly grant \"Super Admin\" role all permissions\n    // This works in the app by using gate-related functions like auth()->user->can() and @can()\n    Gate::before(function ($user, $ability) {\n        return $user->hasRole('Super Admin') ? true : null;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Permission Check with Gate::before() in Laravel\nDESCRIPTION: This snippet demonstrates how to create a custom permission check by overriding the default Gate::before() behavior. The example shows implementing a token-based permission check where permissions are stored as claims in an access token rather than in the database.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/custom-permission-check.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Gate;\n\npublic function boot()\n{\n    ...\n\n    Gate::before(function ($user, $ability) {\n        return $user->hasTokenPermission($ability) ?: null;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Roles using Artisan Command in Laravel Permission\nDESCRIPTION: Creates a new role using the permission:create-role Artisan command. This command accepts a role name as the first argument.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-role writer\n```\n\n----------------------------------------\n\nTITLE: Checking Direct User Permissions in Laravel Permission\nDESCRIPTION: Shows how to check if a user has specific, all, or any direct permissions using various methods.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Check if the user has Direct permission\n$user->hasDirectPermission('edit articles')\n\n// Check if the user has All direct permissions\n$user->hasAllDirectPermissions(['edit articles', 'delete articles']);\n\n// Check if the user has Any permission directly\n$user->hasAnyDirectPermission(['create articles', 'delete articles']);\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Laravel's Can Function\nDESCRIPTION: Shows how to check if a user has a specific permission using Laravel's default 'can' function, which is integrated with the package's permission system.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->can('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Resetting Permission Cache in Laravel Permission\nDESCRIPTION: Manually resets the permission cache using the permission:cache-reset Artisan command. This is useful when cache inconsistencies occur, though using the package API is recommended for better efficiency.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:cache-reset\n```\n\n----------------------------------------\n\nTITLE: Checking User Roles in Laravel Permission\nDESCRIPTION: Shows how to check if a user has a specific role or at least one role from an array of roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user->hasRole('writer');\n\n// or at least one role from an array of roles:\n$user->hasRole(['editor', 'moderator']);\n```\n\n----------------------------------------\n\nTITLE: Using Blade Directives for Permission Checks\nDESCRIPTION: Demonstrates the use of Blade directives to check permissions in view files, allowing conditional rendering based on user permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@can('edit articles')\n...\n@endcan\n```\n\n----------------------------------------\n\nTITLE: Defining Role Enum in PHP\nDESCRIPTION: Example of creating a backed enum for roles with a custom label helper method. The enum defines role cases and maps them to database values.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/enums.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Enums;\n\nenum RolesEnum: string\n{\n    // case NAMEINAPP = 'name-in-database';\n\n    case WRITER = 'writer';\n    case EDITOR = 'editor';\n    case USERMANAGER = 'user-manager';\n\n    // extra helper to allow for greater customization of displayed values, without disclosing the name/value data directly\n    public function label(): string\n    {\n        return match ($this) {\n            static::WRITER => 'Writers',\n            static::EDITOR => 'Editors',\n            static::USERMANAGER => 'User Managers',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Middleware Aliases in Laravel 9/10\nDESCRIPTION: Code for registering middleware aliases in Laravel 9 and 10's app/Http/Kernel.php file. Shows the transition from $routeMiddleware in Laravel 9 to $middlewareAliases in Laravel 10+.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Laravel 9 uses $routeMiddleware = [\n//protected $routeMiddleware = [\n// Laravel 10+ uses $middlewareAliases = [\nprotected $middlewareAliases = [\n    // ...\n    'role' => \\Spatie\\Permission\\Middleware\\RoleMiddleware::class,\n    'permission' => \\Spatie\\Permission\\Middleware\\PermissionMiddleware::class,\n    'role_or_permission' => \\Spatie\\Permission\\Middleware\\RoleOrPermissionMiddleware::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Laravel\nDESCRIPTION: Shows how to verify if a user has a specific permission using Laravel's default 'can' function. All permissions are registered on Laravel's gate for authorization checks.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->can('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Authorization Examples with Enums\nDESCRIPTION: Examples of using enums for authorization checks, including direct enum usage and value conversion for Gate operations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/enums.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// the following are identical because `hasPermissionTo` is aware of `BackedEnum` support:\n$user->hasPermissionTo(PermissionsEnum::VIEWPOSTS);\n$user->hasPermissionTo(PermissionsEnum::VIEWPOSTS->value);\n\n// when calling Gate features, such as Model Policies, etc, prior to Laravel v11.23.0\n$user->can(PermissionsEnum::VIEWPOSTS->value);\n$model->can(PermissionsEnum::VIEWPOSTS->value);\n\n// Blade directives:\n@can(PermissionsEnum::VIEWPOSTS->value)\n```\n\n----------------------------------------\n\nTITLE: Extending Spatie Role Model in Laravel\nDESCRIPTION: This example shows how to extend the Spatie\\Permission\\Models\\Role model in Laravel. It demonstrates creating a custom Role model that inherits from the package's Role model.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/extending.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Models;\nuse Spatie\\Permission\\Models\\Role as SpatieRole;\n\nclass Role extends SpatieRole\n{\n    // You might set a public property like guard_name or connection, or override other Eloquent Model methods/properties\n}\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Permission Migrations\nDESCRIPTION: Artisan command to run the migrations that create the necessary database tables for the permission package.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-laravel.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with Laravel's Can Method\nDESCRIPTION: Shows how to check if a user has a permission using Laravel's default can method, which also supports Super-Admin functionality provided by Laravel's Gate.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user->can('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Using Permission Middleware via Static Methods\nDESCRIPTION: Examples of applying permission middleware using the static 'using' method. Demonstrates how to pass parameters as strings or arrays for roles, permissions, or combinations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => [\\Spatie\\Permission\\Middleware\\RoleMiddleware::using('manager')]], function () { ... });\nRoute::group(['middleware' => [\\Spatie\\Permission\\Middleware\\PermissionMiddleware::using('publish articles|edit articles')]], function () { ... });\nRoute::group(['middleware' => [\\Spatie\\Permission\\Middleware\\RoleOrPermissionMiddleware::using(['manager', 'edit articles'])]], function () { ... });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic User Model for Laravel Permission Package\nDESCRIPTION: A minimal example of a User model configured for the Laravel Permission package. The model extends Authenticatable and uses the HasRoles trait to enable role and permission functionality.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/prerequisites.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n    use HasRoles;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions using Artisan Command in Laravel Permission\nDESCRIPTION: Creates a new permission using the permission:create-permission Artisan command. This command accepts a permission name as the first argument, which may contain spaces.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-permission \"edit articles\"\n```\n\n----------------------------------------\n\nTITLE: Applying Permission Middleware in Laravel 10 Controllers\nDESCRIPTION: Examples of registering permission middleware in the constructor of controllers for Laravel 10 and older versions. Shows different combinations of middleware, including using guard specification.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    // examples:\n    $this->middleware(['role:manager','permission:publish articles|edit articles']);\n    $this->middleware(['role_or_permission:manager|edit articles']);\n    // or with specific guard\n    $this->middleware(['role_or_permission:manager|edit articles,api']);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Role Permissions in Laravel Permission\nDESCRIPTION: Demonstrates how to check if a role has a specific permission using the hasPermissionTo method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$role->hasPermissionTo('edit articles');\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions with Guard Specification in Laravel Permission\nDESCRIPTION: Creates a new permission for a specific guard by specifying the guard name as the second argument to the permission:create-permission command.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-permission \"edit articles\" web\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for Specific Guards in Laravel\nDESCRIPTION: Shows how to check if a user has a specific permission for a particular guard by passing the guard name as the second parameter to the hasPermissionTo method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->hasPermissionTo('publish articles', 'admin');\n```\n\n----------------------------------------\n\nTITLE: Check All Roles Using @hasallroles in Laravel Blade\nDESCRIPTION: Shows how to verify if a user has all specified roles using @hasallroles directive.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n@hasallroles($collectionOfRoles)\n    I have all of these roles!\n@else\n    I do not have all of these roles...\n@endhasallroles\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Team Support in Laravel Permission\nDESCRIPTION: Creates a role with team functionality enabled by using the --team-id parameter. The command accepts the team ID and can be used with or without guard specification.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-role --team-id=1 writer\nphp artisan permission:create-role writer api --team-id=1\n```\n\n----------------------------------------\n\nTITLE: Implementing guardName Method for Multiple Guards in Laravel\nDESCRIPTION: Implements a guardName method on the User model that returns an array of allowed guards, providing an alternative to the $guard_name property for supporting multiple guards.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    public function guardName() { return ['web', 'admin']; }\n```\n\n----------------------------------------\n\nTITLE: Checking All User Roles with hasAllRoles in Laravel Permission\nDESCRIPTION: Shows how to verify if a user has all of the specified roles using the hasAllRoles method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user->hasAllRoles(Role::all());\n```\n\n----------------------------------------\n\nTITLE: Forcing a Single Guard Name in Laravel Permission\nDESCRIPTION: Overrides the getDefaultGuardName method in the User model to force the use of a single guard ('web') for all permission/role operations, which prevents the need to duplicate roles and permissions across multiple guards.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    protected function getDefaultGuardName(): string { return 'web'; }\n```\n\n----------------------------------------\n\nTITLE: Enabling Wildcard Permissions in Laravel Configuration\nDESCRIPTION: Configuration setting in the Laravel Permission package to enable wildcard permissions functionality.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/wildcard-permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// config/permission.php\n'enable_wildcard_permission' => true,\n```\n\n----------------------------------------\n\nTITLE: Checking Exact User Roles with hasExactRoles in Laravel Permission\nDESCRIPTION: Demonstrates how to check if a user has exactly all of the specified roles, no more and no less.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user->hasExactRoles(Role::all());\n```\n\n----------------------------------------\n\nTITLE: Displaying Roles and Permissions in Console with Laravel Permission\nDESCRIPTION: Shows a table of all roles and permissions per guard in the console using the permission:show Artisan command.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:show\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Team Associations in Laravel\nDESCRIPTION: Examples of creating roles with different team associations including global roles and team-specific roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// with null team_id it creates a global role; global roles can be assigned to any team and they are unique\nRole::create(['name' => 'writer', 'team_id' => null]);\n\n// creates a role with team_id = 1; team roles can have the same name on different teams\nRole::create(['name' => 'reader', 'team_id' => 1]);\n\n// creating a role without team_id makes the role take the default global team_id\nRole::create(['name' => 'reviewer']);\n```\n\n----------------------------------------\n\nTITLE: Checking Various Post Permissions with Wildcards\nDESCRIPTION: Examples showing how users with wildcard permissions can perform various actions on posts.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/wildcard-permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// will be true\n$user->can('posts.create');\n$user->can('posts.edit');\n$user->can('posts.delete');\n```\n\n----------------------------------------\n\nTITLE: Implementing Policy before() Method for Super-Admin Check\nDESCRIPTION: This code demonstrates how to use the before() method in a Policy class to grant super-admin control. It checks if the user has the 'Super Admin' role before performing any other authorization checks.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/super-admin.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User; // could be any Authorizable model\n\n/**\n * Perform pre-authorization checks on the model.\n */\npublic function before(User $user, string $ability): ?bool\n{\n    if ($user->hasRole('Super Admin')) {\n        return true;\n    }\n \n    return null; // see the note above in Gate::before about why null must be returned here.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Role Permissions in Laravel Permission\nDESCRIPTION: Shows different ways to access and manipulate the permissions collection associated with a role.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// get collection\n$role->permissions;\n\n// return only the permission names:\n$role->permissions->pluck('name');\n\n// count the number of permissions assigned to a role\ncount($role->permissions);\n// or\n$role->permissions->count();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Complex Subpart Permissions\nDESCRIPTION: Examples of creating complex permission schemes using subparts separated by commas to define multiple resources, actions, or targets at once.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/wildcard-permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// user can only do the actions create, update and view on both resources posts and users\nPermission::create(['name'=>'posts,users.create,update,view']);\n$user->givePermissionTo('posts,users.create,update,view');\n\n// user can do the actions create, update, view on any available resource\nPermission::create(['name'=>'*.create,update,view']);\n$user->givePermissionTo('*.create,update,view');\n\n// user can do any action on posts with ids 1, 4 and 6 \nPermission::create(['name'=>'posts.*.1,4,6']);\n$user->givePermissionTo('posts.*.1,4,6');\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Permission Package via Composer\nDESCRIPTION: Command to install the Laravel Permission package using Composer package manager.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-laravel.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-permission\n```\n\n----------------------------------------\n\nTITLE: Permission Check with Additional Conditions in Laravel Blade\nDESCRIPTION: Shows how to combine permission checks with other conditions using if statements and the auth helper.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@if(auth()->user()->can('edit articles') && $some_other_condition)\n  //\n@endif\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check Using @can Directive in Laravel Blade\nDESCRIPTION: Demonstrates how to check if a user has a specific permission using Laravel's native @can directive.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@can('edit articles')\n  //\n@endcan\n```\n\n----------------------------------------\n\nTITLE: User Seeding with Factory States in Laravel\nDESCRIPTION: An example showing how to use factory states to assign roles after creating users, demonstrating both factory definition and seeder implementation.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Factory:\n    public function definition() {...}\n\n    public function active(): static\n    {\n        return $this->state(fn (array $attributes) => [\n            'status' => 1,\n            ])\n            ->afterCreating(function (User $user) {\n                $user->assignRole('ActiveMember');\n            });\n    }\n\n// Seeder:\n// To create 4 users using this 'active' state in a Seeder:\nUser::factory(4)->active()->create();\n```\n\n----------------------------------------\n\nTITLE: Role Check Using Auth Helper in Laravel Blade\nDESCRIPTION: Shows how to check roles using the auth helper and hasRole method directly.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n@if(auth()->user()->hasRole('writer'))\n  //\n@endif\n```\n\n----------------------------------------\n\nTITLE: Role Check Using @hasrole Directive in Laravel Blade\nDESCRIPTION: Alternative syntax for checking user roles using the @hasrole directive.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n@hasrole('writer')\n    I am a writer!\n@else\n    I am not a writer...\n@endhasrole\n```\n\n----------------------------------------\n\nTITLE: Syncing Role Permissions in Laravel Permission\nDESCRIPTION: Demonstrates how to sync permissions by removing all current permissions and replacing them with a new set.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$role->syncPermissions(['edit articles', 'delete articles']);\n```\n\n----------------------------------------\n\nTITLE: Syncing User Permissions in Laravel Permission\nDESCRIPTION: Demonstrates how to revoke existing permissions and add new ones in a single operation using the syncPermissions method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->syncPermissions(['edit articles', 'delete articles']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Super-Admin with Gate::after\nDESCRIPTION: This snippet demonstrates how to use Gate::after to implement a Super-Admin check. This approach is useful when you want to allow Super Admins to bypass most restrictions but still respect certain app-wide limitations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/super-admin.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// somewhere in a service provider\n\nGate::after(function ($user, $ability) {\n   return $user->hasRole('Super Admin'); // note this returns boolean\n});\n```\n\n----------------------------------------\n\nTITLE: Inverse Role Check Using @unlessrole in Laravel Blade\nDESCRIPTION: Demonstrates how to perform inverse role checking using the @unlessrole directive.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n@unlessrole('does not have this role')\n    I do not have the role\n@else\n    I do have the role\n@endunlessrole\n```\n\n----------------------------------------\n\nTITLE: Removing Roles from Users in Laravel Permission\nDESCRIPTION: Shows how to remove a specific role from a user using the removeRole method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->removeRole('writer');\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions by ID in Laravel Permission\nDESCRIPTION: Shows how to check if a user has a permission by using the permission's ID instead of its name. Demonstrates three different ways to reference the permission ID.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user->hasPermissionTo('1');\n$user->hasPermissionTo(Permission::find(1)->id);\n$user->hasPermissionTo($somePermission->id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Teams Permission in Laravel Config\nDESCRIPTION: Basic configuration settings in permission.php config file to enable teams feature and set custom team foreign key.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// config/permission.php\n'teams' => true,\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/permission.php\n'team_foreign_key' => 'custom_team_id',\n```\n\n----------------------------------------\n\nTITLE: Syncing User Roles in Laravel Permission\nDESCRIPTION: Demonstrates how to sync roles by removing all current roles and replacing them with a new set of roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/role-permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// All current roles will be removed from the user and replaced by the array given\n$user->syncRoles(['writer', 'admin']);\n```\n\n----------------------------------------\n\nTITLE: Counting Users with a Specific Role in Laravel\nDESCRIPTION: Shows how to count users who have a specific role by combining Eloquent queries with collection filtering.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/basic-usage.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$managersCount = User::with('roles')->get()->filter(\n    fn ($user) => $user->roles->where('name', 'Manager')->toArray()\n)->count();\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Priority in Laravel AppServiceProvider\nDESCRIPTION: Setup for middleware priority in the AppServiceProvider to ensure proper handling of team permissions before route binding.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\YourCustomMiddlewareClass;\nuse Illuminate\\Foundation\\Http\\Kernel;\nuse Illuminate\\Routing\\Middleware\\SubstituteBindings;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function register(): void\n    {\n        //\n    }\n\n    public function boot(): void\n    {\n        /** @var Kernel $kernel */\n        $kernel = app()->make(Kernel::class);\n\n        $kernel->addToMiddlewarePriorityBefore(\n            SubstituteBindings::class,\n            YourCustomMiddlewareClass::class,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Guards-Specific Roles and Permissions in Laravel\nDESCRIPTION: Demonstrates how to create roles and permissions for specific guards by specifying the guard_name parameter. This allows managing different permission sets for different authentication systems.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Create a manager role for users authenticating with the admin guard:\n$role = Role::create(['guard_name' => 'admin', 'name' => 'manager']);\n\n// Define a `publish articles` permission for the admin users belonging to the admin guard\n$permission = Permission::create(['guard_name' => 'admin', 'name' => 'publish articles']);\n\n// Define a *different* `publish articles` permission for the regular users belonging to the web guard\n$permission = Permission::create(['guard_name' => 'web', 'name' => 'publish articles']);\n```\n\n----------------------------------------\n\nTITLE: User Seeding with Role Assignment without Factory States\nDESCRIPTION: An alternative approach to seed multiple users and assign roles to each, without using factory states, using the each method on the collection.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Seeder:\nUser::factory()\n    ->count(50)\n    ->create()\n    ->each(function ($user) {\n        $user->assignRole('Member');\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Super Admin Role Assignment in Team Model\nDESCRIPTION: Example of automatically assigning super admin role when creating new teams using model boot method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Models;\n\nclass YourTeamModel extends \\Illuminate\\Database\\Eloquent\\Model\n{\n    // ...\n    public static function boot()\n    {\n        parent::boot();\n\n        // here assign this team to a global user with global default role\n        self::created(function ($model) {\n           // temporary: get session team_id for restore at end\n           $session_team_id = getPermissionsTeamId();\n           // set actual new team_id to package instance\n           setPermissionsTeamId($model);\n           // get the admin user and assign roles/permissions on new team model\n           User::find('your_user_id')->assignRole('Super Admin');\n           // restore session team_id to package instance using temporary value stored above\n           setPermissionsTeamId($session_team_id);\n        });\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blade Directives with Multiple Guards in Laravel\nDESCRIPTION: Demonstrates how to use the @role blade directive with a specific guard by passing the guard name as the second parameter, allowing for guard-specific role checks in templates.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n@role('super-admin', 'admin')\n    I am a super-admin!\n@else\n    I am not a super-admin...\n@endrole\n```\n\n----------------------------------------\n\nTITLE: Optimizing Permission Seeding with Eloquent Insert\nDESCRIPTION: A technique for speeding up seeding of large datasets by using Eloquent's insert method instead of create, bypassing internal checks.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    $arrayOfPermissionNames = ['writer', 'editor'];\n    $permissions = collect($arrayOfPermissionNames)->map(function ($permission) {\n        return ['name' => $permission, 'guard_name' => 'web'];\n    });\n\n    Permission::insert($permissions->toArray());\n```\n\n----------------------------------------\n\nTITLE: Extending Passport Client Model with HasRoles for Laravel Permission\nDESCRIPTION: This code snippet demonstrates how to extend Laravel Passport's Client model to implement HasRoles functionality. It adds the necessary traits and interfaces to make the Client work with the permission system and specifies the API guard name.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/passport.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;\nuse Illuminate\\Foundation\\Auth\\Access\\Authorizable;\nuse Laravel\\Passport\\Client as BaseClient;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass Client extends BaseClient implements AuthorizableContract\n{\n    use HasRoles;\n    use Authorizable;\n\n    public $guard_name = 'api';\n    \n    // or\n    \n    public function guardName()\n    {\n        return 'api';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OR Logic with Multiple Roles/Permissions in Middleware\nDESCRIPTION: Examples of specifying multiple roles or permissions using the pipe character as an OR operator in route middleware. Also shows how to specify a guard for permission checks.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => ['role:manager|writer']], function () { ... });\nRoute::group(['middleware' => ['permission:publish articles|edit articles']], function () { ... });\nRoute::group(['middleware' => ['role_or_permission:manager|edit articles']], function () { ... });\n\n// for a specific guard\nRoute::group(['middleware' => ['permission:publish articles|edit articles,api']], function () { ... });\n```\n\n----------------------------------------\n\nTITLE: Optimizing Permission and Role Seeding with Direct DB Queries\nDESCRIPTION: An advanced technique using direct DB queries to efficiently seed roles and permissions with many-to-many relationships, with a warning about cache management.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$permissionsByRole = [\n    'admin' => ['restore posts', 'force delete posts'],\n    'editor' => ['create a post', 'update a post', 'delete a post'],\n    'viewer' => ['view all posts', 'view a post']\n];\n\n$insertPermissions = fn ($role) => collect($permissionsByRole[$role])\n    ->map(fn ($name) => DB::table('permissions')->insertGetId(['name' => $name, 'guard_name' => 'web']))\n    ->toArray();\n\n$permissionIdsByRole = [\n    'admin' => $insertPermissions('admin'),\n    'editor' => $insertPermissions('editor'),\n    'viewer' => $insertPermissions('viewer')\n];\n\nforeach ($permissionIdsByRole as $role => $permissionIds) {\n    $role = Role::whereName($role)->first();\n\n    DB::table('role_has_permissions')\n        ->insert(\n            collect($permissionIds)->map(fn ($id) => [\n                'role_id' => $role->id,\n                'permission_id' => $id\n            ])->toArray()\n        );\n}\n\n// and also add the command to flush the cache again now after doing all these inserts\n```\n\n----------------------------------------\n\nTITLE: Updating Permission Config for Passport Client Credentials\nDESCRIPTION: Configuration update needed in the Laravel Permission package config file to enable Passport Client Credentials Grant support. Setting this flag to true enables the proper permission checks for Passport clients.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/passport.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/permission.php\n'use_passport_client_credentials' => true,\n```\n\n----------------------------------------\n\nTITLE: Using Permission Checks in Laravel Blade Templates\nDESCRIPTION: Examples of how to use Laravel's @can directive in Blade templates to check for specific permissions rather than roles. This approach leverages Laravel's Gate functionality for permission verification.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/best-practices/roles-vs-permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n@can('view member addresses')\n```\n\nLANGUAGE: blade\nCODE:\n```\n@can('edit document')\n```\n\n----------------------------------------\n\nTITLE: Managing Team Permissions and Role Relations in Laravel\nDESCRIPTION: Example of switching active team ID and refreshing role/permission relations for proper authorization checks.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// set active global team_id\nsetPermissionsTeamId($new_team_id);\n\n// $user = Auth::user();\n\n// unset cached model relations so new team relations will get reloaded\n$user->unsetRelation('roles')->unsetRelation('permissions');\n\n// Now you can check:\n$roles = $user->roles;\n$hasRole = $user->hasRole('my_role');\n$user->hasPermissionTo('foo');\n$user->can('bar');\n// etc\n```\n\n----------------------------------------\n\nTITLE: Adding Description Fields to Permissions and Roles Tables in Laravel Migration\nDESCRIPTION: This migration adds a nullable 'description' string field to both the permissions and roles tables in Laravel.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/extending.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function up()\n{\n    Schema::table('permissions', function (Blueprint $table) {\n        $table->string('description')->nullable();\n    });\n    Schema::table('roles', function (Blueprint $table) {\n        $table->string('description')->nullable();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Changes for UUID Implementation\nDESCRIPTION: Diff showing necessary changes to permission tables migration file to support UUID fields for models, roles, and permissions\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// note: this is done in two places in the default migration file, so edit both places:\n-  $table->unsignedBigInteger($columnNames['model_morph_key'])\n+  $table->uuid($columnNames['model_morph_key'])\n```\n\n----------------------------------------\n\nTITLE: Exact Roles Check Using @hasexactroles in Laravel Blade\nDESCRIPTION: Shows how to check if a user has exactly the specified roles and no others.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n@hasexactroles('writer|admin')\n    I am both a writer and an admin and nothing else!\n@else\n    I do not have all of these roles or have more other roles...\n@endhasexactroles\n```\n\n----------------------------------------\n\nTITLE: Extended Migration Changes for Role and Permission UUIDs\nDESCRIPTION: Comprehensive diff showing all required changes to migration file for implementing UUIDs in roles and permissions tables\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n    Schema::create($tableNames['permissions'], function (Blueprint $table) {\n-        $table->bigIncrements('id'); // permission id\n+        $table->uuid('uuid')->primary()->unique(); // permission id\n//...\n    });\n\n    Schema::create($tableNames['roles'], function (Blueprint $table) {\n-        $table->bigIncrements('id'); // role id\n+        $table->uuid('uuid')->primary()->unique(); // role id\n//...\n    });\n\n    Schema::create($tableNames['model_has_permissions'], function (Blueprint $table) use ($tableNames, $columnNames) {\n-        $table->unsignedBigInteger($pivotPermission);\n+        $table->uuid($pivotPermission);\n        $table->string('model_type');\n//...\n        $table->foreign($pivotPermission)\n-            ->references('id') // permission id\n+            ->references('uuid') // permission id\n            ->on($tableNames['permissions'])\n            ->onDelete('cascade');\n//...\n\n    Schema::create($tableNames['model_has_roles'], function (Blueprint $table) use ($tableNames, $columnNames) {\n-        $table->unsignedBigInteger($pivotRole);\n+        $table->uuid($pivotRole);\n//...\n        $table->foreign($pivotRole)\n-            ->references('id') // role id\n+            ->references('uuid') // role id\n            ->on($tableNames['roles'])\n            ->onDelete('cascade');//...\n\n    Schema::create($tableNames['role_has_permissions'], function (Blueprint $table) use ($tableNames) {\n-        $table->unsignedBigInteger($pivotPermission);\n-        $table->unsignedBigInteger($pivotRole);\n+        $table->uuid($pivotPermission);\n+        $table->uuid($pivotRole);\n\n         $table->foreign($pivotPermission)\n-            ->references('id') // permission id\n+            ->references('uuid') // permission id\n            ->on($tableNames['permissions'])\n            ->onDelete('cascade');\n\n         $table->foreign($pivotRole)\n-            ->references('id') // role id\n+            ->references('uuid') // role id\n            ->on($tableNames['roles'])\n            ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Configuration Changes for UUID Implementation\nDESCRIPTION: Configuration file changes to support UUID field naming in the permission.php config file\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n        'column_names' => [    \n        /*\n         * Change this if you want to name the related pivots other than defaults\n         */\n        'role_pivot_key' => null, //default 'role_id',\n        'permission_pivot_key' => null, //default 'permission_id',\n\n        /*\n         * Change this if you want to name the related model primary key other than\n         * `model_id`.\n         *\n         * For example, this would be nice if your primary keys are all UUIDs. In\n         * that case, name this `model_uuid`.\n         */\n-            'model_morph_key' => 'model_id',\n+            'model_morph_key' => 'model_uuid',\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Linked Permissions in Laravel Permission\nDESCRIPTION: Creates a new role and attaches specified permissions to it in a single command. The permissions are provided as a pipe-separated string in the third argument.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-role writer web \"create articles|edit articles\"\n```\n\n----------------------------------------\n\nTITLE: Artisan Commands for Model Creation\nDESCRIPTION: Commands to create Role and Permission models in Laravel\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:model Role\nphp artisan make:model Permission\n```\n\n----------------------------------------\n\nTITLE: Custom Permission Model Implementation\nDESCRIPTION: Extended Permission model implementation with UUID support using Laravel's HasUuids trait\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Spatie\\Permission\\Models\\Permission as SpatiePermission;\n\nclass Permission extends SpatiePermission\n{\n    use HasFactory;\n    use HasUuids;\n    protected $primaryKey = 'uuid';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Teams Permission Middleware in Laravel\nDESCRIPTION: Custom middleware implementation to handle team permissions by setting the global team_id from session or other authentication methods.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/teams-permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Http\\Middleware;\n\nclass TeamsPermission\n{\n    \n    public function handle($request, \\Closure $next){\n        if(!empty(auth()->user())){\n            // session value set on login\n            setPermissionsTeamId(session('team_id'));\n        }\n        // other custom ways to get team_id\n        /*if(!empty(auth('api')->user())){\n            // `getTeamIdFromToken()` example of custom method for getting the set team_id \n            setPermissionsTeamId(auth('api')->user()->getTeamIdFromToken());\n        }*/\n        \n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Role Model Implementation\nDESCRIPTION: Extended Role model implementation with UUID support using Laravel's HasUuids trait\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Spatie\\Permission\\Models\\Role as SpatieRole;\n\nclass Role extends SpatieRole\n{\n    use HasFactory;\n    use HasUuids;\n    protected $primaryKey = 'uuid';\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Config Model Updates\nDESCRIPTION: Changes to permission config file to use custom Role and Permission models\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/uuid.md#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n    'models' => [\n\n        /*\n         * When using the \"HasPermissions\" trait from this package, we need to know which\n         * Eloquent model should be used to retrieve your permissions. Of course, it\n         * is often just the \"Permission\" model but you may use whatever you like.\n         *\n         * The model you want to use as a Permission model needs to implement the\n         * `Spatie\\Permission\\Contracts\\Permission` contract.\n         */\n\n-        'permission' => Spatie\\Permission\\Models\\Permission::class\n+        'permission' => \\App\\Models\\Permission::class,\n\n        /*\n         * When using the \"HasRoles\" trait from this package, we need to know which\n         * Eloquent model should be used to retrieve your roles. Of course, it\n         * is often just the \"Role\" model but you may use whatever you like.\n         *\n         * The model you want to use as a Role model needs to implement the\n         * `Spatie\\Permission\\Contracts\\Role` contract.\n         */\n\n-        'role' => Spatie\\Permission\\Models\\Role::class,\n+        'role' => \\App\\Models\\Role::class,\n```\n\n----------------------------------------\n\nTITLE: Supported BackedEnum Methods\nDESCRIPTION: Comprehensive list of package methods that support direct BackedEnum parameters for role and permission management.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/enums.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\t$user->assignRole(RolesEnum::WRITER);\n\t$user->removeRole(RolesEnum::EDITOR);\n\n    $role->givePermissionTo(PermissionsEnum::EDITPOSTS);\n    $role->revokePermissionTo(PermissionsEnum::EDITPOSTS);\n\n    $user->givePermissionTo(PermissionsEnum::EDITPOSTS);\n    $user->revokePermissionTo(PermissionsEnum::EDITPOSTS);\n\n\t$user->hasPermissionTo(PermissionsEnum::EDITPOSTS);\n\t$user->hasAnyPermission([PermissionsEnum::EDITPOSTS, PermissionsEnum::VIEWPOSTS]);\n\t$user->hasDirectPermission(PermissionsEnum::EDITPOSTS);\n    \n    $user->hasRole(RolesEnum::WRITER);\n    $user->hasAllRoles([RolesEnum::WRITER, RolesEnum::EDITOR]);\n    $user->hasExactRoles([RolesEnum::WRITER, RolesEnum::EDITOR, RolesEnum::MANAGER]);\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Permission Package Files\nDESCRIPTION: Artisan command to publish the package's migration files and configuration file to your Laravel application.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-laravel.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\n```\n\n----------------------------------------\n\nTITLE: Available Laravel Permission Events\nDESCRIPTION: Lists the four event classes available in the Laravel Permission package since version 6.15.0. These events are fired when roles or permissions are attached or detached from models.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Spatie\\Permission\\Events\\RoleAttached::class\n\\Spatie\\Permission\\Events\\RoleDetached::class\n\\Spatie\\Permission\\Events\\PermissionAttached::class\n\\Spatie\\Permission\\Events\\PermissionDetached::class\n```\n\n----------------------------------------\n\nTITLE: Automatic Cache Refresh for Role and Permission Manipulation in PHP\nDESCRIPTION: Demonstrates built-in functions for manipulating roles and permissions that automatically reset the cache and reload relations for the current model record.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// When handling permissions assigned to roles:\n$role->givePermissionTo('edit articles');\n$role->revokePermissionTo('edit articles');\n$role->syncPermissions(params);\n\n// When linking roles to permissions:\n$permission->assignRole('writer');\n$permission->removeRole('writer');\n$permission->syncRoles(params);\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Model Method Calls in Laravel Permission\nDESCRIPTION: Update method calls in custom models to use the static accessor syntax instead of the object accessor syntax.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/upgrading.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->permissionClass::\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Passport Client Model in AuthServiceProvider\nDESCRIPTION: This code should be added to the boot method of AuthServiceProvider to register the extended Client model with Passport. It tells Laravel Passport to use the custom Client model implementation instead of the default one.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/passport.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPassport::useClientModel(\\App\\Models\\Client::class); // Use the namespace of your extended Client.\n```\n\n----------------------------------------\n\nTITLE: Handling Permission Exceptions in Laravel 11\nDESCRIPTION: This code snippet demonstrates how to override the UnauthorizedException from the spatie/laravel-permission package in Laravel 11 by defining a custom renderer in the bootstrap/app.php file. It returns a JSON response with a custom message and a 403 status code.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/exceptions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->render(function (\\Spatie\\Permission\\Exceptions\\UnauthorizedException $e, $request) {\n        return response()->json([\n            'responseMessage' => 'You do not have the required authorization.',\n            'responseStatus'  => 403,\n        ]);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Enums\nDESCRIPTION: Example showing how to create roles using enums, demonstrating the requirement to use the enum's value property when creating new roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/enums.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n  $role = app(Role::class)->findOrCreate(RolesEnum::WRITER->value, 'web');\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Middleware Aliases in Laravel 11\nDESCRIPTION: Code for registering the package's middleware aliases in Laravel 11's bootstrap/app.php file. Includes RoleMiddleware, PermissionMiddleware, and RoleOrPermissionMiddleware.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    ->withMiddleware(function (Middleware $middleware) {\n        $middleware->alias([\n            'role' => \\Spatie\\Permission\\Middleware\\RoleMiddleware::class,\n            'permission' => \\Spatie\\Permission\\Middleware\\PermissionMiddleware::class,\n            'role_or_permission' => \\Spatie\\Permission\\Middleware\\RoleOrPermissionMiddleware::class,\n        ]);\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Adding Description Fields in Laravel\nDESCRIPTION: This snippet shows how to create a migration to add a 'description' field to both the permissions and roles tables in Laravel.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/extending.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan make:migration add_description_to_permissions_tables\n```\n\n----------------------------------------\n\nTITLE: Configuring User Model to Support Multiple Guards\nDESCRIPTION: Sets the $guard_name property on the User model to an array of allowed guards, enabling the user to have roles and permissions from multiple guard systems.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/multiple-guards.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    protected $guard_name = ['web', 'admin'];\n```\n\n----------------------------------------\n\nTITLE: Applying Permission Middleware in Laravel 11 Controllers\nDESCRIPTION: Examples of registering permission middleware in Laravel 11 controllers using the HasMiddleware interface and middleware() method. Shows various middleware configurations including aliases, pipe-separated values, and guard specifications.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic static function middleware(): array\n{\n    return [\n        // examples with aliases, pipe-separated names, guards, etc:\n        'role_or_permission:manager|edit articles',\n        new Middleware('role:author', only: ['index']),\n        new Middleware(\\Spatie\\Permission\\Middleware\\RoleMiddleware::using('manager'), except:['show']),\n        new Middleware(\\Spatie\\Permission\\Middleware\\PermissionMiddleware::using('delete records,api'), only:['destroy']),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 'role' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @role directive in PhpStorm's Blade template support. This directive checks if a user has a specific role.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasRole', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Guard-Specific Permission Check in Laravel Blade\nDESCRIPTION: Example of checking permissions against a specific guard using the @can directive.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/blade-directives.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@can('edit articles', 'guard_name')\n  //\n@endcan\n```\n\n----------------------------------------\n\nTITLE: User-Specific Role and Permission Assignments in PHP\nDESCRIPTION: Examples of operations on a User model that do not trigger a cache reset, as user-related assignments are kept in-memory since v4.4.0.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// These operations on a User do not call a cache-reset, because the User-related assignments are in-memory.\n$user->assignRole('writer');\n$user->removeRole('writer');\n$user->syncRoles(params);\n```\n\n----------------------------------------\n\nTITLE: Configuring 'hasrole' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @hasrole directive in PhpStorm's Blade template support. Alternative syntax for checking if a user has a specific role.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasRole', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Permission Exceptions in Laravel 10\nDESCRIPTION: This code snippet shows how to override the UnauthorizedException from the spatie/laravel-permission package in Laravel 10 by registering a custom renderer in the app/Exceptions/Handler.php file. It returns a JSON response with a custom message and a 403 status code.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/exceptions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    $this->renderable(function (\\Spatie\\Permission\\Exceptions\\UnauthorizedException $e, $request) {\n        return response()->json([\n            'responseMessage' => 'You do not have the required authorization.',\n            'responseStatus'  => 403,\n        ]);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Reinitializing Cache for PermissionRegistrar in PHP\nDESCRIPTION: Code to reinitialize the cache of the PermissionRegistrar after switching tenants or changing cache configuration in a multi-tenant application.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\napp()->make(\\Spatie\\Permission\\PermissionRegistrar::class)->initializeCache();\n```\n\n----------------------------------------\n\nTITLE: Flushing Permission Cache in Laravel\nDESCRIPTION: A code snippet demonstrating how to reset cached roles and permissions to avoid cache conflict errors during seeding operations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/seeding.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// reset cached roles and permissions\napp()[\\Spatie\\Permission\\PermissionRegistrar::class]->forgetCachedPermissions();\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies for Laravel Permission\nDESCRIPTION: Update the composer.json file to specify the new major version of the Laravel Permission package and run the composer update command.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/upgrading.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"spatie/laravel-permission\": \"^6.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update spatie/laravel-permission\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware for Laravel-Permission in Lumen\nDESCRIPTION: PHP code to register the permission and role middleware in the Lumen bootstrap file. These middleware need to be cloned from the Spatie namespace into your application namespace.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$app->routeMiddleware([\n    'auth'       => App\\Http\\Middleware\\Authenticate::class,\n    'permission' => App\\Http\\Middleware\\PermissionMiddleware::class, // cloned from Spatie\\Permission\\Middleware\n    'role'       => App\\Http\\Middleware\\RoleMiddleware::class,  // cloned from Spatie\\Permission\\Middleware\n]);\n```\n\n----------------------------------------\n\nTITLE: Database Seeding with LazilyRefreshDatabase\nDESCRIPTION: Event listener setup for seeding permissions when using LazilyRefreshDatabase trait. Ensures proper permission registration after database refresh.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen(DatabaseRefreshed::class, function () {\n    $this->artisan('db:seed', ['--class' => RoleAndPermissionSeeder::class]);\n    $this->app->make(\\Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Wildcard Permission String\nDESCRIPTION: Example of a wildcard permission string structured in three parts representing resource, action, and target.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/wildcard-permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$permission = 'posts.create.1';\n```\n\n----------------------------------------\n\nTITLE: Registering Laravel-Permission ServiceProvider in Lumen\nDESCRIPTION: PHP code to configure the permission package, create a cache alias, and register the PermissionServiceProvider in the Lumen bootstrap file.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$app->configure('permission');\n$app->alias('cache', \\Illuminate\\Cache\\CacheManager::class);  // if you don't have this already\n$app->register(Spatie\\Permission\\PermissionServiceProvider::class);\n```\n\n----------------------------------------\n\nTITLE: Excluding Timestamps from JSON Output in Laravel Permission Models\nDESCRIPTION: Code snippet demonstrating how to exclude pivot timestamps from JSON output in Role and Permission models by adding them to the hidden property.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/timestamps.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    protected $hidden = ['pivot'];\n```\n\n----------------------------------------\n\nTITLE: Overriding getMorphClass Method for Child User Models in Laravel\nDESCRIPTION: This snippet demonstrates how to override the getMorphClass method in a child user model to use the parent's permissions/roles. This approach sacrifices the child's independence for roles/permissions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/extending.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getMorphClass()\n{\n    return 'users';\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Migration for Database String Length Constraints\nDESCRIPTION: Code snippet showing how to adjust string column lengths in the permission tables migration to address MySQL/MariaDB index key length limitations. This modification is necessary for databases with specific ROW_FORMAT configurations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/prerequisites.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)\n    $table->string('guard_name'); // For MyISAM use string('guard_name', 25);\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions with create() Method in Laravel Permission\nDESCRIPTION: Shows how to create a new permission using the standard create() method. While easy to use, this approach may be less performant on large databases.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/best-practices/performance.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPermission::create([attributes]);\n```\n\n----------------------------------------\n\nTITLE: Clearing Permission Cache in Test Setup\nDESCRIPTION: Implementation of setUp() method to clear permission cache during tests. This ensures proper registration of roles and permissions created during testing.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n    protected function setUp(): void\n    {\n        // first include all the normal setUp operations\n        parent::setUp();\n\n        // now de-register all the roles and permissions by clearing the permission cache\n        $this->app->make(\\Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions();\n    }\n```\n\n----------------------------------------\n\nTITLE: Laravel Auth Scaffolding Installation\nDESCRIPTION: Commands to install and setup basic Laravel authentication scaffolding using Bootstrap.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/new-app.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require laravel/ui --dev\nphp artisan ui bootstrap --auth\n# npm install && npm run build\ngit add . && git commit -m \"Setup auth scaffold\"\n```\n\n----------------------------------------\n\nTITLE: Using Laravel's Permission Check Methods\nDESCRIPTION: Example of Laravel's can() method for checking permissions programmatically in PHP code rather than relying on role checks. This method integrates with Laravel's authorization system.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/best-practices/roles-vs-permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->hasRole('Editor')\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Reset in PHP for Laravel Permission Package\nDESCRIPTION: Code snippet to manually reset the cache for the Spatie Laravel Permission package using application code.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\napp()->make(\\Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions();\n```\n\n----------------------------------------\n\nTITLE: Using forgetCachedPermissions Method Instead of Directly Accessing Cache in Laravel\nDESCRIPTION: Recommended change for clearing permission cache using the built-in forgetCachedPermissions() method rather than directly accessing the cache facade. This ensures proper handling of tagged cache entries.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- app()['cache']->forget('spatie.permission.cache');\n+ $this->app->make(\\Spatie\\Permission\\PermissionRegistrar::class)->forgetCachedPermissions();\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Model Policy with Permission Checks in Laravel\nDESCRIPTION: This PostPolicy class demonstrates how to combine application logic with permission checks using the spatie/laravel-permission package. It includes methods for controlling access to view, create, update, and delete posts, with different permission checks for published/unpublished posts and owner-specific actions.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/best-practices/using-policies.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass PostPolicy\n{\n    use HandlesAuthorization;\n\n    public function view(?User $user, Post $post): bool\n    {\n        if ($post->published) {\n            return true;\n        }\n\n        // visitors cannot view unpublished items\n        if ($user === null) {\n            return false;\n        }\n\n        // admin overrides published status\n        if ($user->can('view unpublished posts')) {\n            return true;\n        }\n\n        // authors can view their own unpublished posts\n        return $user->id == $post->user_id;\n    }\n\n    public function create(User $user): bool\n    {\n        return $user->can('create posts');\n    }\n\n    public function update(User $user, Post $post): bool\n    {\n        if ($user->can('edit all posts')) {\n            return true;\n        }\n\n        if ($user->can('edit own posts')) {\n            return $user->id == $post->user_id;\n        }\n    }\n\n    public function delete(User $user, Post $post): bool\n    {\n        if ($user->can('delete any post')) {\n            return true;\n        }\n\n        if ($user->can('delete own posts')) {\n            return $user->id == $post->user_id;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Laravel Config Cache\nDESCRIPTION: Commands to clear the Laravel configuration cache to ensure the package can access the permission config settings for migrations.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-laravel.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan optimize:clear\n# or\nphp artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring 'elserole' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @elserole directive in PhpStorm's Blade template support. This directive allows creating else conditions when checking for roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php elseif(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasRole', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Initial Laravel Project Setup with SQLite\nDESCRIPTION: Commands for creating a new Laravel project with SQLite database, installing Spatie permissions package, and configuring the User model.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/new-app.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ~/Sites\nlaravel new mypermissionsdemo\ncd mypermissionsdemo\ngit init\ngit add .\ngit commit -m \"Fresh Laravel Install\"\ncp -n .env.example .env\nsed -i '' 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env\nsed -i '' 's/DB_DATABASE=/#DB_DATABASE=/' .env\ntouch database/database.sqlite\ncomposer require spatie/laravel-permission\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\ngit add .\ngit commit -m \"Add Spatie Laravel Permissions package\"\nphp artisan migrate:fresh\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Reset Using Artisan Command for Laravel Permission\nDESCRIPTION: Artisan command to manually reset the cache for the Spatie Laravel Permission package.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:cache-reset\n```\n\n----------------------------------------\n\nTITLE: Configuring 'hasanyrole' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @hasanyrole directive in PhpStorm's Blade template support. Checks if a user has any of the specified roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasAnyRole', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Dashboard View Permission Examples\nDESCRIPTION: Example of implementing permission-based content display in a Laravel Blade view.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/new-app.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"p-6 text-gray-900\">\n    {{ __('You\\'re logged in!') }}\n</div>\n@can('edit articles')\nYou can EDIT ARTICLES.\n@endcan\n@can('publish articles')\nYou can PUBLISH ARTICLES.\n@endcan\n@can('only super-admins can see this section')\nCongratulations, you are a super-admin!\n@endcan\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel-Permission Package via Composer in Lumen\nDESCRIPTION: Command to install the spatie/laravel-permission package using Composer.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-permission\n```\n\n----------------------------------------\n\nTITLE: Configuring 'hasallroles' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @hasallroles directive in PhpStorm's Blade template support. Checks if a user has all of the specified roles.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasAllRoles', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Setup Commands\nDESCRIPTION: Commands for initializing and pushing the demo application to a GitHub repository.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/new-app.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add origin git@github.com:YOURUSERNAME/REPONAME.git\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Copying Required Configuration and Migration Files for Laravel-Permission in Lumen\nDESCRIPTION: Commands to create necessary directories and copy permission configuration and migration files from the vendor directory to the appropriate locations in your Lumen project.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p config\ncp vendor/spatie/laravel-permission/config/permission.php config/permission.php\ncp vendor/spatie/laravel-permission/database/migrations/create_permission_tables.php.stub database/migrations/2018_01_01_000000_create_permission_tables.php\n```\n\n----------------------------------------\n\nTITLE: Configuring 'unlessrole' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @unlessrole directive in PhpStorm's Blade template support. Checks if a user does not have a specific role.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(! \\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasRole', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Copying Authentication Configuration File in Lumen\nDESCRIPTION: Command to copy the auth configuration file from the Lumen framework vendor directory if it doesn't already exist in your project.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp vendor/laravel/lumen-framework/config/auth.php config/auth.php\n```\n\n----------------------------------------\n\nTITLE: Registering AuthServiceProvider in Lumen\nDESCRIPTION: PHP code to register the AuthServiceProvider in the Lumen bootstrap file, which is required since the Authorization layer uses guards.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$app->register(App\\Providers\\AuthServiceProvider::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring 'hasexactroles' Blade Directive in PhpStorm\nDESCRIPTION: Configuration settings for the @hasexactroles directive in PhpStorm's Blade template support. Checks if a user has exactly the specified roles, no more and no less.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/advanced-usage/phpstorm.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php if(\\Spatie\\Permission\\PermissionServiceProvider::bladeMethodWrapper('hasExactRoles', {})): ?>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Laravel-Permission in Lumen\nDESCRIPTION: Command to execute the migrations that create the necessary database tables for the permission package.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/installation-lumen.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions with make() and saveOrFail() for Better Performance\nDESCRIPTION: Demonstrates a more performant approach to creating permissions on large databases by using make() to instantiate the permission object and saveOrFail() to persist it.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/best-practices/performance.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$permission = Permission::make([attributes]); \n$permission->saveOrFail();\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Laravel Permission Package\nDESCRIPTION: Command to run the test suite for the Laravel Permission package using Composer.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Converting Permission IDs from Strings to Integers in Laravel\nDESCRIPTION: Convert an array of permission IDs from strings to integers when passing them to package methods, to avoid lookup errors.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/upgrading.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncollect($validated['permission'])->map(fn($val)=>(int)$val)\n```\n\n----------------------------------------\n\nTITLE: Using @elserole Blade Directive in Laravel Permission Package\nDESCRIPTION: Example usage of the @elserole Blade directive for conditional view rendering based on user roles. This allows different content to be displayed depending on which role a user has.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@role('roleA')\n // user hasRole 'roleA'\n@elserole('roleB')\n // user hasRole 'roleB' but not 'roleA'\n@endrole\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Guard Specification in Laravel Permission\nDESCRIPTION: Creates a new role for a specific guard by specifying the guard name as the second argument to the permission:create-role command.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/artisan.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan permission:create-role writer web\n```\n\n----------------------------------------\n\nTITLE: Checking Mixed Permission Types with hasAnyPermission\nDESCRIPTION: Demonstrates how to check permissions using a mix of permission names and IDs in the hasAnyPermission method.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$user->hasAnyPermission(['edit articles', 1, 5]);\n```\n\n----------------------------------------\n\nTITLE: Revoking Direct Permissions from Users in Laravel Permission\nDESCRIPTION: Shows how to revoke a permission that was directly assigned to a user.\nSOURCE: https://github.com/spatie/laravel-permission/blob/main/docs/basic-usage/direct-permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->revokePermissionTo('edit articles');\n```"
  }
]