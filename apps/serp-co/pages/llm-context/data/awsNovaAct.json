[
  {
    "owner": "aws",
    "repo": "nova-act",
    "content": "TITLE: Executing basic web automation with Nova Act in script mode\nDESCRIPTION: Basic script demonstrating how to use Nova Act to automate searching for a coffee maker on Amazon, selecting the first result, and adding it to the cart.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom nova_act import NovaAct\n\nwith NovaAct(starting_page=\"https://www.amazon.com\") as nova:\n    nova.act(\"search for a coffee maker\")\n    nova.act(\"select the first result\")\n    nova.act(\"scroll down or up until you see 'add to cart' and then click 'add to cart'\")\n```\n\n----------------------------------------\n\nTITLE: Extracting structured data from web pages with Nova Act and Pydantic\nDESCRIPTION: Example demonstrating how to extract structured data from web pages using Nova Act with Pydantic models to define the schema for parsing.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom nova_act import NovaAct, ActResult\n\n\nclass Book(BaseModel):\n    title: str\n    author: str\n\nclass BookList(BaseModel):\n    books: list[Book]\n\n\ndef get_books(year: int) -> BookList | None:\n    \"\"\"\n    Get top NYT top books of the year and return as a BookList. Return None if there is an error.\n    \"\"\"\n    with NovaAct(\n        starting_page=f\"https://en.wikipedia.org/wiki/List_of_The_New_York_Times_number-one_books_of_{year}#Fiction\"\n    ) as nova:\n        result = nova.act(\"Return the books in the Fiction list\",\n                       # Specify the schema for parsing.\n                       schema=BookList.model_json_schema())\n        if not result.matches_schema:\n            # act response did not match the schema ¯\\_(ツ)_/¯\n            return None\n        # Parse the JSON into the pydantic model.\n        book_list = BookList.model_validate(result.parsed_response)\n        return book_list\n```\n\n----------------------------------------\n\nTITLE: Running parallel browser sessions using NovaAct in Python\nDESCRIPTION: Demonstrates how to run multiple NovaAct browser sessions concurrently using Python's ThreadPoolExecutor to parallelize tasks such as retrieving book data from multiple years simultaneously. Depends on the `nova_act` library and assumes existence of a `get_books` function that returns books for a given year. Uses exception handling for ActError to skip years with errors. Inputs are years in a specified range, outputs a combined list of books across those years.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nfrom nova_act import ActError, NovaAct\n\n\n# Accumulate the complete list here.\nall_books = []\n# Set max workers to the max number of active browser sessions.\nwith ThreadPoolExecutor(max_workers=10) as executor:\n    # Get all books from years 2010 to 2024 in parallel.\n    future_to_books = {\n        executor.submit(get_books, year): year for year in range(2010, 2025)\n    }\n    # Collect the results in ot all_books.\n    for future in as_completed(future_to_books.keys()):\n        try:\n            year = future_to_books[future]\n            book_list = future.result()\n            if book_list is not None:\n                all_books.extend(book_list.books)\n        except ActError as exc:\n            print(f\"Skipping year due to error: {exc}\")\n\nprint(f\"Found {len(all_books)} books:\\n{all_books}\")\n```\n\n----------------------------------------\n\nTITLE: Using Nova Act in interactive mode\nDESCRIPTION: Example of using Nova Act in an interactive Python shell to perform web actions step by step.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom nova_act import NovaAct\nnova = NovaAct(starting_page=\"https://www.amazon.com\")\nnova.start()\nnova.act(\"search for a coffee maker\")\n\n# After completion, enter the next command\nnova.act(\"select the first result\")\n```\n\n----------------------------------------\n\nTITLE: Configuring authenticated sessions with persistent browser state in NovaAct using Python\nDESCRIPTION: Shows how to use an existing Chromium user data directory with NovaAct to preserve authenticated browser sessions across runs by disabling the default cloning of the user data directory. Requires creating or specifying a user data directory and passing `user_data_dir` and `clone_user_data_dir=False` to the NovaAct constructor. Allows manual login during the session, after which authentication state is saved. Useful for workflows requiring persistent login states.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom nova_act import NovaAct\n\nos.makedirs(user_data_dir, exist_ok=True)\n\nwith NovaAct(starting_page=\"https://amazon.com/\", user_data_dir=user_data_dir, clone_user_data_dir=False) as nova:\n    input(\"Log into your websites, then press enter...\")\n    # Add your nova.act() statements here.\n\nprint(f\"User data dir saved to {user_data_dir=}\")\n```\n\n----------------------------------------\n\nTITLE: Entering sensitive information securely in NovaAct automation with Playwright in Python\nDESCRIPTION: Illustrates how to securely input sensitive data such as passwords during browser automation with NovaAct without exposing the data to the language model. The approach instructs NovaAct to focus on the input field, then uses the Playwright API directly (e.g., `nova.page.keyboard.type()`) to enter the sensitive string, here collected via `getpass` to avoid echoing in the command line. Highlights a known issue with focusing input elements and provides a workaround.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Sign in.\nnova.act(\"enter username janedoe and click on the password field\")\n# Collect the password from the command line and enter it via playwright. (Does not get sent over the network.)\nnova.page.keyboard.type(getpass())\n# Now that username and password is filled in, ask NovaAct to proceed.\nnova.act(\"sign in\")\n```\n\n----------------------------------------\n\nTITLE: Performing website search actions using NovaAct in Python\nDESCRIPTION: Shows simple interaction with a website to perform a search operation using NovaAct. The snippet demonstrates navigating to a URL and instructing NovaAct to search for a term. It also includes a note on instructing NovaAct to press enter to initiate the search if the model has difficulty identifying the search button.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nnova.go_to_url(website_url)\nnova.act(\"search for cats\")\n\n# Alternative if manual initiation is needed\nnova.act(\"search for cats. type enter to initiate the search.\")\n```\n\n----------------------------------------\n\nTITLE: Downloading files on web pages using NovaAct and Playwright in Python\nDESCRIPTION: Provides two methods to download files: first, capturing downloads triggered by browser UI actions using Playwright's `expect_download()` context manager combined with NovaAct's act method; second, downloading the current page content directly via Playwright's request API. Demonstrates saving the downloaded content to a specified file path. Useful for automating downloads of buttons or documents such as PDFs.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Ask playwright to capture any downloads, then actuate the page to initiate it.\nwith nova.page.expect_download() as download_info:\n    nova.act(\"click on the download button\")\n\n# Temp path for the download is available.\nprint(f\"Downloaded file {download_info.value.path()}\")\n\n# Now save the downloaded file permanently to a location of your choice.\ndownload_info.value.save_as(\"my_downloaded_file\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Download the content using Playwright's request.\nresponse = nova.page.request.get(nova.page.url)\nwith open(\"downloaded.pdf\", \"wb\") as f:\n    f.write(response.body())\n```\n\n----------------------------------------\n\nTITLE: Specifying date ranges for browser automation actions using NovaAct in Python\nDESCRIPTION: Shows a simple example of instructing NovaAct to pick date ranges by specifying absolute start and end dates in natural language. This method is recommended for date selections on web interfaces.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nnova.act(\"select dates march 23 to march 28\")\n```\n\n----------------------------------------\n\nTITLE: Overriding the browser user agent string in NovaAct using Python\nDESCRIPTION: Explains how to customize the browser user agent string by passing the `user_agent` parameter when instantiating the NovaAct class. This allows simulation of different browser identities or versions during automation.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nnova = NovaAct(..., user_agent=\"MyUserAgent/2.7\")\n```\n\n----------------------------------------\n\nTITLE: Viewing act traces and enabling logging in NovaAct automation environment\nDESCRIPTION: Documents how to access self-contained HTML files with detailed traces of each `act()` call generated by NovaAct, as well as how to configure logging levels via the `NOVA_ACT_LOG_LEVEL` environment variable using Python logging numeric levels. The trace files' location is output after each act, and the logs directory can be customized via constructor parameters.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n> ** View your act run here: /var/folders/6k/75j3vkvs62z0lrz5bgcwq0gw0000gq/T/tmpk7_23qte_nova_act_logs/15d2a29f-a495-42fb-96c5-0fdd0295d337/act_844b076b-be57-4014-b4d8-6abed1ac7a5e_output.html\n```\n\n----------------------------------------\n\nTITLE: Using Playwright Page Object with NovaAct\nDESCRIPTION: Demonstrates how to access and use the underlying Playwright Page object from NovaAct to perform direct browser interactions such as taking screenshots, retrieving DOM content, and typing keyboard input.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nscreenshot_bytes = nova.page.screenshot()\ndom_string = nova.page.content()\nnova.page.keyboard.type(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: NovaAct ActResult and ActMetadata Class Definitions\nDESCRIPTION: Defines the structure of ActResult and ActMetadata classes that are returned by NovaAct's act() method. ActResult contains the response data and metadata, while ActMetadata contains execution information like session ID, number of steps, and timing.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass ActResult:\n    response: str | None\n    parsed_response: Union[Dict[str, Any], List[Any], str, int, float, bool] | None\n    valid_json: bool | None\n    matches_schema: bool | None\n    metadata: ActMetadata\n\nclass ActMetadata:\n    session_id: str | None\n    act_id: str | None\n    num_steps_executed: int\n    start_time: float\n    end_time: float\n    prompt: string\n```\n\n----------------------------------------\n\nTITLE: Detecting and handling captchas during NovaAct automation in Python\nDESCRIPTION: Demonstrates how to detect the presence of captchas on a webpage using NovaAct's `act()` method with a boolean schema, and pause the automation workflow to allow manual captcha solving by the user before resuming. This approach requires user intervention since NovaAct does not solve captchas automatically.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresult = nova.act(\"Is there a captcha on the screen?\", schema=BOOL_SCHEMA)\nif result.matches_schema and result.parsed_response:\n    input(\"Please solve the captcha and hit return when done\")\n...\n```\n\n----------------------------------------\n\nTITLE: Getting boolean responses from Nova Act\nDESCRIPTION: Example showing how to use Nova Act with a predefined boolean schema to get simple yes/no answers from web pages.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom nova_act import NovaAct, BOOL_SCHEMA\n\nwith NovaAct(starting_page=\"https://www.amazon.com\") as nova:\n    result = nova.act(\"Am I logged in?\", schema=BOOL_SCHEMA)\n    if not result.matches_schema:\n        # act response did not match the schema ¯\\_(ツ)_/¯\n        print(f\"Invalid result: {result=}\")\n    else:\n        # result.parsed_response is now a bool\n        if result.parsed_response:\n            print(\"You are logged in\")\n        else:\n            print(\"You are not logged in\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Nova Act API key as environment variable\nDESCRIPTION: Command to set up the Nova Act API key as an environment variable for authentication.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport NOVA_ACT_API_KEY=\"your_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nova Act package\nDESCRIPTION: Command to install the Nova Act package using pip package manager.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install nova-act\n```\n\n----------------------------------------\n\nTITLE: Installing Google Chrome for Nova Act\nDESCRIPTION: Optional command to install Google Chrome browser using Playwright, which is recommended for optimal Nova Act performance.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nplaywright install chrome\n```\n\n----------------------------------------\n\nTITLE: Building Nova Act SDK from source\nDESCRIPTION: Commands to build the Nova Act SDK from source code, installing it in development mode and creating a wheel package.\nSOURCE: https://github.com/aws/nova-act/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install --editable '.[dev]'\npython -m build --wheel --no-isolation --outdir dist/ .\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies\nDESCRIPTION: This snippet lists Python dependencies used in the project. It includes packages like cryptography, pandas, playwright, and requests. Pydantic is specified with a minimum version.\nSOURCE: https://github.com/aws/nova-act/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncryptography\nfire\ninstall_playwright\njsonschema\npandas\npillow\nplaywright==1.48.0\npydantic>=2.10.6\nrequests\nretry\npytz\n```"
  }
]