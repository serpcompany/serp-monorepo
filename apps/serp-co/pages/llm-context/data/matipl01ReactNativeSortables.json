[
  {
    "owner": "matipl01",
    "repo": "react-native-sortables",
    "content": "TITLE: Implementing Sortable Grid in React Native\nDESCRIPTION: This snippet demonstrates how to create a basic Sortable Grid using the react-native-sortables package. It includes importing necessary components, setting up data, defining a render item function, and configuring the Sortable.Grid component with essential props.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/usage.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 12 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Grid() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <Sortable.Grid\n      columns={3}\n      data={DATA} // Pass your data here\n      renderItem={renderItem}\n      rowGap={10}\n      columnGap={10}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: '#36877F',\n    height: 100,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sortable Flex Layout in React Native\nDESCRIPTION: A basic example of using the Sortable.Flex component from react-native-sortables to create a flexible, sortable layout of country names. The component requires no mandatory props and can render any children with customizable gap and padding.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/usage.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, View, StyleSheet } from 'react-native';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = [\n  'Poland',\n  'Germany',\n  'France',\n  'Italy',\n  'Spain',\n  'Portugal',\n  'Greece',\n  'Great Britain',\n  'United States',\n  'Canada',\n  'Australia',\n  'New Zealand'\n];\n\nexport default function Flex() {\n  return (\n    <Sortable.Flex gap={10} padding={10}>\n      {/* You can render anything within the Sortable.Flex component */}\n      {DATA.map(item => (\n        <View style={styles.cell} key={item}>\n          <Text>{item}</Text>\n        </View>\n      ))}\n    </Sortable.Flex>\n  );\n}\n\nconst styles = StyleSheet.create({\n  cell: {\n    backgroundColor: '#36877F',\n    borderRadius: 9999,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sortable Grid in React Native\nDESCRIPTION: Example of how to use the Sortable.Grid component from React Native Sortables to create a sortable grid layout with customizable items.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 12 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Grid() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <Sortable.Grid\n      columns={3}\n      data={DATA}\n      renderItem={renderItem}\n      rowGap={10}\n      columnGap={10}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: '#36877F',\n    height: 100,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll SortableGrid Component in React Native\nDESCRIPTION: A complete example showing how to implement a scrollable grid with auto-scroll functionality using react-native-sortables. The component renders a grid of items that can be reordered with automatic scrolling when items are dragged near the edges. It utilizes react-native-reanimated for smooth animations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/auto-scroll.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Animated, { useAnimatedRef } from 'react-native-reanimated';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 30 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const scrollableRef = useAnimatedRef<Animated.ScrollView>();\n\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <Animated.ScrollView\n      contentContainerStyle={styles.contentContainer}\n      ref={scrollableRef}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={3}\n        data={DATA}\n        renderItem={renderItem}\n        rowGap={10}\n        scrollableRef={scrollableRef} // required for auto scroll\n        // autoScrollActivationOffset={75}\n        // autoScrollSpeed={1}\n        // autoScrollEnabled={true}\n      />\n    </Animated.ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  contentContainer: {\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Drop Indicator with React Native Sortables\nDESCRIPTION: A basic implementation of a custom Drop Indicator component that extends the default styling by adding rounded corners. It demonstrates how to create and use a custom component with the Sortable.Grid component.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/customization/drop-indicator.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport type { DropIndicatorComponentProps } from 'react-native-sortables';\n\nfunction CustomDropIndicator({\n  style // style from the `dropIndicatorStyle` prop or a default style\n}: DropIndicatorComponentProps) {\n  return <View style={[style, { borderRadius: '100%' }]} />;\n}\n\nexport default function Grid() {\n  return (\n    <Sortable.Grid\n      DropIndicatorComponent={CustomDropIndicator}\n      // ... other props\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid with Sortable.Pressable in React Native\nDESCRIPTION: This code snippet demonstrates how to create a sortable grid using the react-native-sortables library. It includes a delete button for each item using Sortable.Pressable to properly handle press events without interfering with drag operations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/touchables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useState } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 4 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Grid() {\n  const [data, setData] = useState(DATA);\n\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n        <Sortable.Pressable\n          style={styles.deleteButton}\n          onPress={() => setData(prev => prev.filter(i => i !== item))}>\n          <Text style={styles.text}>Delete</Text>\n        </Sortable.Pressable>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columns={2}\n        data={data}\n        renderItem={renderItem}\n        rowGap={10}\n        columnGap={10}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10\n  },\n  card: {\n    backgroundColor: '#36877F',\n    height: 100,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 10\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  deleteButton: {\n    backgroundColor: '#6AA67C',\n    padding: 10,\n    borderRadius: 10\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Snap in React Native Sortables Grid\nDESCRIPTION: This code snippet demonstrates how to implement a sortable grid with item snap functionality using React Native Sortables. It creates a grid of items that can be reordered, with customizable snap behavior when items are pressed.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/item-snap.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 4 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={2}\n        data={DATA}\n        renderItem={renderItem}\n        rowGap={10}\n        // enableActiveItemSnap={true}\n        // snapOffsetX='50%'\n        // snapOffsetY='50%'\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  container: {\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Handle in React Native Sortable Grid\nDESCRIPTION: Example implementation of a sortable grid with custom drag handles using react-native-sortables. The component uses FontAwesome icons for the handle and demonstrates proper setup of styles, data rendering, and handle configuration. Requires @fortawesome/react-native-fontawesome and react-native-sortables dependencies.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/handle.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 8 }, (_, index) => `Item ${index + 1}`);\n\nexport default function PlaygroundExample() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n        {/* Wraps the handle component (an icon in this case) */}\n        <Sortable.Handle>\n          <FontAwesomeIcon color='white' icon={faGripVertical} />\n        </Sortable.Handle>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        activeItemScale={1.05}\n        columns={1}\n        data={DATA}\n        overDrag='vertical'\n        renderItem={renderItem}\n        rowGap={10}\n        customHandle // must be set to use a custom handle\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 12,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: 24\n  },\n  container: {\n    padding: 16\n  },\n  text: {\n    color: 'white',\n    flex: 1,\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Height Items in React Native Sortable Grid\nDESCRIPTION: A React Native component that demonstrates the Sortable Grid's ability to handle items with different heights. It creates a 3-column grid with randomly sized items, using the react-native-sortables package. Each item is rendered with a random height between 50 and 200 pixels.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/different-item-heights.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 12 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View\n        style={[\n          styles.card,\n          { height: Math.random() * 150 + 50 } // random height for demo purposes\n        ]}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={3}\n        data={DATA}\n        renderItem={renderItem}\n        rowGap={10}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  container: {\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Drop Indicator Component with Animations\nDESCRIPTION: This advanced example demonstrates creating a fully custom drop indicator using the DropIndicatorComponent prop. It uses react-native-reanimated to create dynamic color interpolation and spring animations that respond to the drop position and active state changes.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/drop-indicator.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Animated, {\n  interpolateColor,\n  useAnimatedReaction,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSequence,\n  withSpring,\n  withTiming\n} from 'react-native-reanimated';\nimport type {\n  DropIndicatorComponentProps,\n  SortableGridRenderItem\n} from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={3}\n        data={DATA}\n        DropIndicatorComponent={DropIndicator}\n        renderItem={renderItem}\n        rowGap={10}\n        showDropIndicator\n      />\n    </View>\n  );\n}\n\nfunction DropIndicator({\n  activeAnimationProgress,\n  activeItemKey,\n  dropIndex,\n  orderedItemKeys,\n  style\n}: DropIndicatorComponentProps) {\n  const itemsCount = useDerivedValue(() => orderedItemKeys.value.length);\n  const indexes = useDerivedValue(() =>\n    Array.from({ length: itemsCount.value }, (_, i) => i)\n  );\n  const colors = useDerivedValue(() =>\n    Array.from({ length: itemsCount.value }, (_, i) => {\n      const hue = (360 / itemsCount.value) * i;\n      return `hsl(${hue}, 100%, 50%)`;\n    })\n  );\n\n  const scale = useSharedValue(0);\n  const colorIndex = useSharedValue(0);\n  const showIndicator = useDerivedValue(\n    () => activeAnimationProgress.value > 0.2 && activeItemKey.value !== null\n  );\n\n  useAnimatedReaction(\n    () => ({\n      count: itemsCount.value,\n      index: dropIndex.value,\n      show: showIndicator.value\n    }),\n    ({ count, index, show }, prev) => {\n      if (show !== prev?.show) {\n        scale.value = withSpring(+show);\n      } else if (show && index !== prev?.index) {\n        colorIndex.value = withTiming(index % count);\n        scale.value = withSequence(\n          withTiming(0.75, { duration: 100 }),\n          withSpring(1)\n        );\n      }\n    }\n  );\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    backgroundColor: interpolateColor(\n      colorIndex.value,\n      indexes.value,\n      colors.value\n    ),\n    transform: [{ scale: scale.value }]\n  }));\n\n  return (\n    <Animated.View style={[style, styles.customIndicator, animatedStyle]} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  container: {\n    padding: 10\n  },\n  customIndicator: { borderStyle: 'solid' },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DragEnd Callback in React Native Sortables\nDESCRIPTION: Type definitions for the onDragEnd callback, including the SortableFlexDragEndCallback function type and SortableFlexDragEndParams interface with properties for tracking item movement and order changes.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ntype SortableFlexDragEndCallback = (params: SortableFlexDragEndParams) => void;\n\ntype SortableFlexDragEndParams = {\n  key: string;\n  fromIndex: number;\n  toIndex: number;\n  indexToKey: Array<string>;\n  keyToIndex: Record<string, number>;\n  order: <I>(data: Array<I>) => Array<I>; // returns new array with items in the new order\n};\n```\n\n----------------------------------------\n\nTITLE: Using Handle Component in react-native-sortables\nDESCRIPTION: Example of how to use the Handle component within a sortable component's child. The Handle component allows dragging an item by a specific area instead of the whole item.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/helper-components/handle.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Sortable from 'react-native-sortables';\n\n// ... other components\n<Sortable.Handle>\n  {/* ... other components */}\n  <HandleComponent />\n  {/* ... other components */}\n</Sortable.Handle>;\n// ... other components\n```\n\n----------------------------------------\n\nTITLE: Using Sortable.Pressable Component in React Native Sortables\nDESCRIPTION: This example demonstrates how to use the Sortable.Pressable component within a sortable component's child item. The onPress event handler logs a message when the component is pressed, and the component is designed to prevent conflicts with drag gestures.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/helper-components/touchables.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Sortable from 'react-native-sortables';\n\n// ... other components\n<Sortable.Pressable\n  onPress={() => {\n    console.log('pressed');\n  }}>\n  {/* ... other components */}\n</Sortable.Pressable>;\n// ... other components\n```\n\n----------------------------------------\n\nTITLE: Defining DragMove Callback Types in TypeScript\nDESCRIPTION: Type definitions for drag move callback parameters including key, fromIndex and touchData properties. Used to handle drag movement events in the sortable component.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype DragMoveCallback = (params: DragMoveParams) => void;\n\ntype DragMoveParams = {\n  key: string;\n  fromIndex: number;\n  touchData: TouchData;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sortable Layer Component in React Native\nDESCRIPTION: Example usage of the Sortable.Layer component to manage zIndex when dragging items. The component wraps a Sortable.Grid or Sortable.Flex component to ensure dragged items remain visible above other components.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/helper-components/layer.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Sortable from 'react-native-sortables';\n\n// ... other components\n<Sortable.Layer>\n  {/* ... other components */}\n  <Sortable.Grid // or Sortable.Flex\n  // ... sortable grid props\n  />\n  {/* ... other components */}\n</Sortable.Layer>;\n// ... other components\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Drop Indicator in React Native Sortables Grid\nDESCRIPTION: This example demonstrates the basic implementation of a drop indicator in a Sortable.Grid component. The showDropIndicator prop enables a visual indicator that shows where items will be dropped when rearranging elements in the grid.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/drop-indicator.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={3}\n        data={DATA}\n        renderItem={renderItem}\n        rowGap={10}\n        showDropIndicator\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  container: {\n    padding: 10\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Drop Indicator Style in React Native Sortables\nDESCRIPTION: This example shows how to customize the style of the drop indicator using the dropIndicatorStyle prop. It applies custom background color, border style, and opacity to make the indicator match the app's design.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/drop-indicator.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { SortableGridRenderItem } from 'react-native-sortables';\nimport Sortable from 'react-native-sortables';\n\nconst DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);\n\nexport default function Example() {\n  const renderItem = useCallback<SortableGridRenderItem<string>>(\n    ({ item }) => (\n      <View style={styles.card}>\n        <Text style={styles.text}>{item}</Text>\n      </View>\n    ),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <Sortable.Grid\n        columnGap={10}\n        columns={3}\n        data={DATA}\n        dropIndicatorStyle={styles.dropIndicator} // Custom style\n        renderItem={renderItem}\n        rowGap={10}\n        showDropIndicator\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    alignItems: 'center',\n    backgroundColor: '#36877F',\n    borderRadius: 10,\n    height: 100,\n    justifyContent: 'center'\n  },\n  container: {\n    padding: 10\n  },\n  dropIndicator: {\n    backgroundColor: 'rgba(54, 135, 127, 0.5)',\n    borderColor: '#36877f',\n    borderStyle: 'solid',\n    borderWidth: 5\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definition for LayoutTransition in React Native Sortables\nDESCRIPTION: Defines the LayoutTransition type used for the itemsLayout prop. It supports BaseAnimationBuilder, animation function, or builder class for configuring item transition animations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype LayoutTransition =\n  | BaseAnimationBuilder\n  | LayoutAnimationFunction\n  | typeof BaseAnimationBuilder;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Item Snap in React Native Sortables\nDESCRIPTION: This code snippet shows how to customize the item snap behavior in React Native Sortables. It demonstrates setting custom snap offset values for both X and Y axes, allowing for fine-tuned control over the item transformation when pressed.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/item-snap.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nsnapOffsetX='120%'\nsnapOffsetY={10}\n```\n\n----------------------------------------\n\nTITLE: Custom Auto-Scroll Activation Offset Configuration\nDESCRIPTION: Example of configuring a custom activation offset for the auto-scroll functionality. This determines the distance from the edge at which auto-scrolling begins.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/auto-scroll.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nautoScrollActivationOffset={200}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for LayoutAnimation in React Native Sortables\nDESCRIPTION: Defines the LayoutAnimation type used for itemEntering and itemExiting props. It can be a BaseAnimationBuilder, an animation function, or a builder class for flexible animation definition.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype LayoutAnimation =\n  | BaseAnimationBuilder\n  | EntryExitAnimationFunction\n  | typeof BaseAnimationBuilder;\n```\n\n----------------------------------------\n\nTITLE: Custom Auto-Scroll Speed Configuration\nDESCRIPTION: Example of setting a custom speed for the auto-scroll functionality. This determines how fast the content scrolls when auto-scroll is activated.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/examples/auto-scroll.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nautoScrollSpeed={0.2}\n```\n\n----------------------------------------\n\nTITLE: SortableGrid RenderItem Type Definitions\nDESCRIPTION: Type definitions for the renderItem prop function and its associated info parameter structure.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype SortableGridRenderItem<T> = (\n  info: SortableGridRenderItemInfo<T>\n) => JSX.Element;\n\ntype SortableGridRenderItemInfo<T> = {\n  item: T;\n  index: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for DropIndicatorComponentProps in React Native Sortables\nDESCRIPTION: Defines the props interface for custom drop indicator components. Includes shared values for tracking animation progress, active item state, drop position, and container layout information.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype DropIndicatorComponentProps = {\n  /** Progress of the active item animation (from 0 to 1) */\n  activeAnimationProgress: SharedValue<number>;\n  /** Key of the currently dragged item, or null if no item is being dragged */\n  activeItemKey: SharedValue<null | string>;\n  /** Current index where the dragged item would be dropped */\n  dropIndex: SharedValue<number>;\n  /** Current position where the item would be dropped */\n  dropPosition: SharedValue<Vector>;\n  /** Array of item keys in their current order */\n  orderedItemKeys: SharedValue<Array<string>>;\n  /** Style to be applied to the drop indicator */\n  style: ViewStyle;\n};\n```\n\n----------------------------------------\n\nTITLE: Default Styling for Drop Indicator in React Native Sortables\nDESCRIPTION: The default style object that is applied to the Drop Indicator component when no custom styles are provided. It defines basic visual properties like background color, border style, and border radius.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/customization/drop-indicator.mdx#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n  borderColor: 'black',\n  borderRadius: 10,\n  borderStyle: 'dashed',\n  borderWidth: 2,\n  flex: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DragStart Callback in React Native Sortables\nDESCRIPTION: Type definitions for the onDragStart callback, including the DragStartCallback function type and DragStartParams interface with key and fromIndex properties.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype DragStartCallback = (params: DragStartParams) => void;\n\ntype DragStartParams = {\n  key: string;\n  fromIndex: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for DragMove Callback in React Native Sortables\nDESCRIPTION: Type definitions for the onDragMove callback, including the DragMoveCallback function type and DragMoveParams interface with properties for tracking the dragged item and touch data.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntype DragMoveCallback = (params: DragMoveParams) => void;\n\ntype DragMoveParams = {\n  key: string;\n  fromIndex: number;\n  touchData: TouchData;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for OrderChange Callback in React Native Sortables\nDESCRIPTION: Type definitions for the onOrderChange callback, including the OrderChangeCallback function type and OrderChangeParams interface with properties for tracking index and key mapping during drag operations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype OrderChangeCallback = (params: OrderChangeParams) => void;\n\ntype OrderChangeParams = {\n  key: string;\n  fromIndex: number;\n  toIndex: number;\n  indexToKey: Array<string>;\n  keyToIndex: Record<string, number>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Worklet Function for onDragStart in React Native Sortables\nDESCRIPTION: Example of implementing a recommended worklet function for the onDragStart callback to run directly on the UI thread for better performance. Requires the 'worklet' directive at the start of the function body.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDragStart = useCallback((params: DragStartParams) => {\n  'worklet';\n  // Your code here\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Plain JS Function for onDragStart in React Native Sortables\nDESCRIPTION: Example of implementing a plain JavaScript function for the onDragStart callback. This runs on the JS thread using runOnJS, which is less performant due to thread jumping.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDragStart = useCallback((params: DragStartParams) => {\n  // Your code here\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Sortables using yarn\nDESCRIPTION: Command to install the React Native Sortables library using yarn package manager.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-sortables\n```\n\n----------------------------------------\n\nTITLE: Worklet Callback Implementation Example\nDESCRIPTION: Example showing how to implement a worklet callback function for drag start events with better performance.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDragStart = useCallback((params: DragStartParams) => {\n  'worklet';\n  // Your code here\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Plain JS Callback Implementation Example\nDESCRIPTION: Example showing how to implement a regular JavaScript callback function for drag events.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDragStart = useCallback((params: DragStartParams) => {\n  // Your code here\n}, []);\n```\n\n----------------------------------------\n\nTITLE: SortableFlexStrategy Type Definition for React Native Sortables\nDESCRIPTION: Type definition for the SortableFlexStrategy which can be either the string 'insert' or a SortableFlexStrategyFactory function. This controls how items are reordered during drag operations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SortableFlexStrategy = 'insert' | SortableFlexStrategyFactory;\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Offset in React Native Sortables\nDESCRIPTION: Defines the Offset type used in snapOffsetX and snapOffsetY props. It can be either a percentage string or a number value, allowing flexible positioning of items relative to their dimensions.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Offset = `${number}%` | number;\n```\n\n----------------------------------------\n\nTITLE: Offset Type Definition\nDESCRIPTION: Type definition for offset values that can be either percentage strings or numbers.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Offset = `${number}%` | number;\n```\n\n----------------------------------------\n\nTITLE: Running Example Apps with Shorthand Commands\nDESCRIPTION: Shorthand commands for running different example applications from the project root. These commands simplify the development workflow when testing with different example apps.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn example:fabric start\nyarn example:paper android\nyarn example:expo ios\n```\n\n----------------------------------------\n\nTITLE: Default Drop Indicator Style Configuration\nDESCRIPTION: Default style configuration object for the drop indicator component showing visual feedback for item positioning.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n  borderColor: 'black',\n  borderRadius: 10,\n  borderStyle: 'dashed',\n  borderWidth: 2,\n  flex: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Drop Indicator Component Props Interface\nDESCRIPTION: TypeScript interface defining the props passed to custom drop indicator components, including animation progress and position values.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype DropIndicatorComponentProps = {\n  /** Progress of the active item animation (from 0 to 1) */\n  activeAnimationProgress: SharedValue<number>;\n  /** Key of the currently dragged item, or null if no item is being dragged */\n  activeItemKey: SharedValue<null | string>;\n  /** Current index where the dragged item would be dropped */\n  dropIndex: SharedValue<number>;\n  /** Current position where the item would be dropped */\n  dropPosition: SharedValue<Vector>;\n  /** Array of item keys in their current order */\n  orderedItemKeys: SharedValue<Array<string>>;\n  /** Style to be applied to the drop indicator */\n  style: ViewStyle;\n};\n```\n\n----------------------------------------\n\nTITLE: Layout Animation Type Definitions\nDESCRIPTION: Type definitions for layout animations used in entering, exiting, and transition animations.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype LayoutAnimation =\n  | BaseAnimationBuilder\n  | EntryExitAnimationFunction\n  | typeof BaseAnimationBuilder;\n```\n\n----------------------------------------\n\nTITLE: Defining Animatable Type in TypeScript for React Native Sortables\nDESCRIPTION: Type definition for Animatable<T> which allows properties to accept either a Reanimated Shared Value or a static value of the specified type.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/props.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Animatable<T> = SharedValue<T> | T;\n```\n\n----------------------------------------\n\nTITLE: Defining Animatable Type in TypeScript\nDESCRIPTION: Type definition for Animatable values that can be either static or Reanimated shared values.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/props.mdx#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Animatable<T> = SharedValue<T> | T;\n```\n\n----------------------------------------\n\nTITLE: Starting an Example App for React Native Sortables\nDESCRIPTION: Commands to start different example apps for testing and developing React Native Sortables.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd example/fabric  # or any other example\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-sortables via NPM\nDESCRIPTION: Command to install react-native-sortables package using NPM package manager.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/getting-started.mdx#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-native-sortables\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-sortables via Yarn\nDESCRIPTION: Command to install react-native-sortables package using Yarn package manager.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/getting-started.mdx#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-native-sortables\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Sortables using npm\nDESCRIPTION: Command to install the React Native Sortables library using npm package manager.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-sortables\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up React Native Sortables for Local Development\nDESCRIPTION: Bash commands for cloning the React Native Sortables repository and setting up the development environment.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MatiPl01/react-native-sortables.git\ncd react-native-sortables\nyarn\nyarn pod  # iOS only\n```\n\n----------------------------------------\n\nTITLE: Running Example Apps from Project Root\nDESCRIPTION: Commands to run different example apps for React Native Sortables from the project root directory.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn example:fabric start\nyarn example:paper android\nyarn example:expo ios\n```\n\n----------------------------------------\n\nTITLE: Setting up the React Native Sortables Development Environment\nDESCRIPTION: Commands for installing dependencies and setting up iOS pods for the React Native Sortables project. This is the initial setup required before starting development.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn pod  # iOS only\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Environment with Example App\nDESCRIPTION: Commands for navigating to an example app directory and starting the development server. This allows testing changes in a real application environment.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd example/fabric  # or any other example\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn package manager\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website\nDESCRIPTION: Command to generate static website content in the build directory for production deployment\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website with SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Basic markdown structure for the documentation page including a warning notice and links to predefined strategies documentation.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/customization/custom-ordering-strategies.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 3\ndescription: ''\n---\n\n# Custom Ordering Strategies\n\n:::warning\n\nThis page of documentation **hasn't been added yet**.\n\nIf you want to create a custom ordering strategy, **refer to the source code** and look at the **implementation of predefined** ordering strategies.\n\n:::\n\n## Props\n\nYou can find predefined ordering strategies in the respective component's props documentation page:\n\n- [Sortable Grid](/grid/props#strategy)\n- [Sortable Flex](/flex/props#strategy)\n```\n\n----------------------------------------\n\nTITLE: Importing Video Banner in React Native\nDESCRIPTION: This snippet demonstrates how to import a video file for use as a banner in a React Native application using the '@site' alias.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/intro.mdx#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport bannerVideo from '@site/static/video/banner.mp4';\n```\n\n----------------------------------------\n\nTITLE: Rendering Autoplay Video in React Native JSX\nDESCRIPTION: This code shows how to render an autoplay video element in React Native JSX, with attributes for looping, muting, and setting the width.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/intro.mdx#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<video autoPlay loop muted width='100%' src={bannerVideo} />\n```\n\n----------------------------------------\n\nTITLE: Importing Video Asset in JSX/MDX\nDESCRIPTION: Code snippet demonstrating how to import and display a video asset in a MDX documentation file using React syntax.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/grid/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport gridVideo from '@site/static/video/grid.mp4';\n\n<video autoPlay loop muted width='100%' src={gridVideo} />\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using JSX in an MDX blog post. The code shows a simple button component with an onClick event handler that displays an alert when clicked.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/blog/2021-08-01-mdx-blog-post.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Command to start local development server with hot-reload capability for real-time changes\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Frontmatter in Docusaurus Blog Post\nDESCRIPTION: This code snippet shows the frontmatter section of a Markdown file for a Docusaurus blog post. It defines metadata such as slug, title, authors, and tags.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/blog/2021-08-26-welcome/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: welcome\ntitle: Welcome\nauthors: [slorber, yangshun]\ntags: [facebook, hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Autoplay Video in Markdown\nDESCRIPTION: This code embeds an autoplaying, looping, muted video with full width in the Markdown document. It uses the imported video asset.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/overview.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<video autoPlay loop muted width='100%' src={flexVideo} />\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website without SSH\nDESCRIPTION: Command to deploy the website using GitHub username authentication\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Video Asset in Markdown\nDESCRIPTION: This snippet demonstrates how to import a video asset in a Markdown file, likely for use in a documentation site built with a static site generator.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/docs/flex/overview.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport flexVideo from '@site/static/video/flex.mp4';\n```\n\n----------------------------------------\n\nTITLE: Using Truncation Comment in Docusaurus Blog Post\nDESCRIPTION: Demonstrates how to use HTML comments to control blog post preview length in Docusaurus. The truncate comment determines where the post summary ends in list views.\nSOURCE: https://github.com/matipl01/react-native-sortables/blob/main/packages/docs/blog/2019-05-29-long-blog-post.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```"
  }
]