[
  {
    "owner": "firebase",
    "repo": "firebase-ios-sdk",
    "content": "TITLE: Installing Firebase with Combine Support via CocoaPods\nDESCRIPTION: This snippet shows how to add Firebase with Combine support to a Podfile for CocoaPods installation. It includes Firebase/Auth, Firebase/Analytics, and Firebase/FirebaseCombineSwift pods.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '14.0'\n\ntarget 'YourApp' do\n  use_frameworks!\n\n  pod 'Firebase/Auth'\n  pod 'Firebase/Analytics'\n  pod 'Firebase/FirebaseCombineSwift'\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Firestore with Not-In and Not-Equal-To Operators in Swift\nDESCRIPTION: Demonstrates the usage of new query operators 'whereField(_:notIn:)' and 'whereField(_:isNotEqualTo:)' introduced in version 1.18.0. These operators allow for more complex querying capabilities in Firestore.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nwhereField(\"fieldName\", notIn: [\"value1\", \"value2\"])\nwhereField(\"fieldName\", isNotEqualTo: \"value\")\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Dependencies in Package.swift\nDESCRIPTION: Swift Package Manager configuration showing how to add Firebase as a dependency in the Package.swift manifest file. Specifies the package source and version constraints.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/SwiftPackageManager.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(\n    name: \"Firebase\",\n    url: \"https://github.com/firebase/firebase-ios-sdk.git\",\n    .upToNextMajor(from: \"10.4.0\")\n  ),\n\n  // Any other dependencies you have...\n],\n```\n\n----------------------------------------\n\nTITLE: Handling Server Timestamps in Firebase iOS SDK\nDESCRIPTION: Demonstrates how to handle server timestamps when retrieving document data using the updated data method with serverTimestampBehavior parameter.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\ndata(serverTimestampBehavior: .estimate)\n```\n\n----------------------------------------\n\nTITLE: Calling Firebase Functions with Combine (With Parameters)\nDESCRIPTION: This snippet shows how to call a Firebase Function named 'helloWorld' with a parameter using Combine. It handles the completion and receives the function result.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet helloWorld = Functions.functions().httpsCallable(\"helloWorld\")\nhelloWorld.call(\"Peter\")\n  .sink { completion in\n    switch completion {\n      case .finished:\n        print(\"Finished\")\n      case let .failure(error):\n        print(\"\\(error.localizedDescription)\")\n    }\n  } receiveValue: { functionResult in\n    if let result = functionResult.data as? String {\n      print(\"The function returned: \\(result)\")\n    }\n  }\n  .store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Signing in with Google Credentials using Firebase Auth and Combine\nDESCRIPTION: This complex snippet demonstrates signing in with Google credentials, handling multi-factor authentication, and using various Combine operators to manage the authentication flow.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error?) {\n  // ...\n  if let error {\n    // ...\n    return\n  }\n\n  guard let authentication = user.authentication else { return }\n  let credential = GoogleAuthProvider.credential(withIDToken: authentication.idToken,\n                                                 accessToken: authentication.accessToken)\n  Auth.auth()\n    .signIn(withCredential: credential)\n    .mapError { $0 as NSError }\n    .tryCatch(handleError)\n    .sink { /* ... */ } receiveValue: {  /* ... */  }\n    .store(in: &subscriptions)\n}\n\nprivate func handleError(_ error: NSError) throws -> AnyPublisher<AuthDataResult, Error> {\n  guard isMFAEnabled && error.code == AuthErrorCode.secondFactorRequired.rawValue\n  else { throw error }\n\n  // The user is a multi-factor user. Second factor challenge is required.\n  let resolver = error.userInfo[AuthErrorUserInfoMultiFactorResolverKey] as! MultiFactorResolver\n  let displayNameString = resolver.hints.compactMap(\\.displayName).joined(separator: \" \")\n\n  return showTextInputPrompt(withMessage: \"Select factor to sign in\\n\\(displayNameString)\")\n    .compactMap { displayName in\n      resolver.hints.first(where: { displayName == $0.displayName }) as? PhoneMultiFactorInfo\n    }\n    .flatMap { [unowned self] factorInfo in\n      PhoneAuthProvider.provider()\n        .verifyPhoneNumber(withMultiFactorInfo: factorInfo, multiFactorSession: resolver.session)\n        .zip(self.showTextInputPrompt(withMessage: \"Verification code for \\(factorInfo.displayName ?? \"\")\"))\n        .map { (verificationID, verificationCode) in\n          let credential = PhoneAuthProvider.provider().credential(withVerificationID: verificationID,\n                                                                   verificationCode: verificationCode)\n          return PhoneMultiFactorGenerator.assertion(with: credential)\n        }\n    }\n    .flatMap { assertion in\n      resolver.resolveSignIn(withAssertion: assertion)\n    }\n    .eraseToAnyPublisher()\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Firebase Auth Result to User UID with Combine\nDESCRIPTION: This snippet shows how to sign in anonymously, map the result to the user's UID, handle errors, and assign the result to a property using Combine operators.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nAuth.auth().signInAnonymously()\n  .map { result in\n    result.user.uid\n  }\n  .replaceError(with: \"(unable to sign in anonymously)\")\n  .assign(to: \\.uid, on: self)\n  .store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Array Contains Query in Firebase iOS SDK\nDESCRIPTION: Shows how to use the whereField(_:arrayContains:) query filter to find documents where an array field contains a specific element.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nwhereField(_:arrayContains:)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async/Await Pattern in Swift\nDESCRIPTION: Demonstrates the preferred async/await pattern for asynchronous operations compared to the older completion handler approach.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/firebase-api-guidelines.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// ✔ Preferred async/await form.\npublic func fetchData() async throws -> Data { ... }\n\n// x Pre Swift Structured Concurrency. No longer preferred.\npublic func fetchData(completion: (Data, any Error) -> Void) { ... }\n```\n\n----------------------------------------\n\nTITLE: Clearing Firestore Persistence in Swift\nDESCRIPTION: Demonstrates the usage of 'clearPersistence()' method introduced in version 1.4.0. This method clears persistent storage including pending writes and cached documents, useful for writing reliable tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nfirestore.clearPersistence()\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth createUser with Future in Swift Combine\nDESCRIPTION: Example implementation of the Auth.createUser method using Combine's Future pattern. The code demonstrates how to wrap the existing callback-based API into a Future that returns either an AuthDataResult or Error, without requiring weak self capture in the outer closure.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/DECISIONS.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension Auth {\n    public func createUser(withEmail email: String,\n                           password: String) -> Future<AuthDataResult, Error> {\n      Future<AuthDataResult, Error> { /* [weak self]  <-- not required */ promise in\n        self?.createUser(withEmail: email, password: password) { authDataResult, error in\n          if let error {\n            promise(.failure(error))\n          } else if let authDataResult {\n            promise(.success(authDataResult))\n          }\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Screen View Events in SwiftUI (Before Implementation)\nDESCRIPTION: Shows how screen view events were logged in SwiftUI before the manual screen view API was introduced. Demonstrates two approaches: logging with screen name, class, and custom parameters or logging with just a screen name.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAnalytics/README.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  var body: some View {\n    Text(\"Hello, world!\")\n      // Logging screen name with class and a custom parameter.\n      .onAppear {\n        Analytics.logEvent(AnalyticsEventScreenView,\n                           parameters: [AnalyticsParameterScreenName: \"main_content\",\n                                        AnalyticsParameterScreenClass: \"ContentView\",\n                                        \"my_custom_param\": 5])\n      }\n\n       // OR Logging screen name only.\n      .onAppear {\n        Analytics.logEvent(AnalyticsEventScreenView,\n                           parameters: [AnalyticsParameterScreenName: \"main_content\"])\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Instance Firebase Component\nDESCRIPTION: Implementation of a Firebase component (Functions) that maintains a single instance per FIRApp. Shows component registration, instance creation, and public access methods.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n// FIRFunctions.m\n\n/// Empty protocol to register Functions as a component with Core.\n@protocol FIRFunctionsInstanceProvider\n@end\n\n/// Privately conform to the protocol for component registration.\n@interface FIRFunctions () <FIRFunctionsInstanceProvider, FIRLibrary>\n@end\n\n@implementation FIRFunctions\n\n+ (void)load {\n  NSString *version = @\"<# Fetch the version here #>\";\n  [FIRApp registerInternalLibrary:self withName:@\"fire-fun\" withVersion:version];\n}\n\n/// The array of components to register with Core. Since Functions is a leaf node and\n/// doesn't provide any functionality to other frameworks, it should use Core for instance\n/// management only.\n+ (NSArray<FIRComponent *> *)componentsToRegister {\n  // Each component needs a block for Core to call in order to instantiate instances of the\n  // desired class.\n  FIRComponentCreationBlock creationBlock =\n    ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n      // We want the same instance to be returned when requested from the container, enable\n      // `isCacheable`.\n      *isCacheable = YES;\n\n      // Use an appropriate initializer and inject anything required from the container.\n      return [[FIRFunctions alloc] initWithApp:container.app];\n    };\n\n  // Create the component that can create instances of `FIRFunctions`.\n  FIRComponent *internalProvider =\n      [FIRComponent componentWithProtocol:@protocol(FIRFunctionsInstanceProvider)\n                            creationBlock:creationBlock];\n\n  // Return the array of components, in this case only the internal instance provider.\n  return @[ internalProvider ];\n}\n\n// The public entry point for the SDK.\n+ (FIRFunctions *)functionsForApp:(FIRApp *)app {\n  // Get the instance from the `FIRApp`'s container. This will create a new instance the\n  // first time it is called, and since `isCacheable` is set in the component creation\n  // block, it will return the existing instance on subsequent calls.\n  id<FIRFunctionsInstanceProvider> instance =\n      FIR_COMPONENT(FIRFunctionsInstanceProvider, app.container);\n\n  // In the component creation block, we return an instance of `FIRFunctions`. Cast it and\n  // return it.\n  return (FIRFunctions *)instance;\n}\n\n// ... Other `FIRFunctions` methods.\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Logging Screen View Events in SwiftUI (After Implementation)\nDESCRIPTION: Demonstrates the new manual screen view event logging API that simplifies tracking screen views in SwiftUI. Shows two approaches: logging with screen name, class, and custom parameters or logging with just a screen name.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAnalytics/README.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  var body: some View {\n    Text(\"Hello, world!\")\n       // Logging screen name with class and a custom parameter.\n      .analyticsScreen(name: \"main_content\",\n                       class: \"ContentView\",\n                       extraParameters: [\"my_custom_param\": 5])\n\n      // OR Logging screen name only, class and extra parameters are optional.\n      .analyticsScreen(name: \"main_content\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Pending Writes in Firestore using Swift\nDESCRIPTION: Demonstrates the usage of the 'waitForPendingWrites()' method introduced in version 1.5.0. This method returns a promise that resolves when all pending writes are acknowledged by the Firestore backend.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nfirestore.waitForPendingWrites()\n```\n\n----------------------------------------\n\nTITLE: Listening to Document Changes in Firebase iOS SDK\nDESCRIPTION: Demonstrates how to listen for document changes including metadata changes using the updated addSnapshotListener method.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\naddSnapshotListener(includeMetadataChanges:true)\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Dynamic Links for Passwordless Authentication in iOS\nDESCRIPTION: Implementation of the SceneDelegate function that handles incoming dynamic links for email link/passwordless authentication. The function verifies if the incoming URL is a Firebase Auth sign-in link, saves it to UserDefaults, and posts a notification to continue the authentication process.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Tests/SampleSwift/README.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// SceneDelegate.swift\n\nprivate func handleIncomingDynamicLink(_ incomingURL: URL) {\n\n    let link = incomingURL.absoluteString\n\n    // Here, we check if our dynamic link is a sign-link (the one we emailed our user!)\n    if Auth.auth().isSignIn(withEmailLink: link) {\n\n        // Save the link as it will be used in the next step to complete login\n        UserDefaults.standard.set(link, forKey: \"Link\")\n\n        // Post a notification to the PasswordlessViewController to resume authentication\n        NotificationCenter.default.post(Notification(name: Notification.Name(\"PasswordlessEmailNotificationSuccess\")))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Deadlocks in Firebase Auth with Internal Method Pattern\nDESCRIPTION: Pattern for implementing public synchronous methods that need to be callable from both public and private contexts. This approach prevents deadlocks that would occur when calling dispatch_sync from within the same queue by creating an internal implementation that doesn't use dispatch_sync.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Docs/threading.md#2025-04-11_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\n- (ReturnType)somethingInternal {\n  // Compute result.\n  return computedResult;\n}\n\n- (ReturnType)something {\n  __block ReturnType result;\n  dispatch_sync(FIRAuthGlobalWorkQueue(), ^{\n    result = [self somethingInternal];\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Logging Example With APIs (After Implementation)\nDESCRIPTION: Shows how the new APIs streamline event logging, with the implementation of the analyticsScreen extension method that encapsulates the screen view tracking logic.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAnalytics/README.md#2025-04-11_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Text(\"Welcome to our App!\")\n                .padding()\n            Button(\"Click Me!\") {\n                // Directly using Firebase's logEvent method to log the button click.\n                Analytics.logEvent(\"button_clicked\", parameters: nil)\n            }\n        }\n        // Using the new manual screen view event logging API to log the screen view.\n        .analyticsScreen(name: \"main_content\")\n    }\n}\n\n\n// Introducing a manual screen view event logging API.\nextension View {\n    func analyticsScreen(name: String, class screenClass: String? = nil, extraParameters: [String: Any]? = nil) -> some View {\n        onAppear {\n            var params: [String: Any] = [AnalyticsParameterScreenName: name]\n            if let screenClass {\n                params[AnalyticsParameterScreenClass] = screenClass\n            }\n            if let extraParameters {\n                params.merge(extraParameters) { _, new in new }\n            }\n            Analytics.logEvent(AnalyticsEventScreenView, parameters: params)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Firebase Database in Swift\nDESCRIPTION: Shows the usage of the getData() method to retrieve data from the server when the cache is stale.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDatabase/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nDatabaseQuery#getData\n```\n\n----------------------------------------\n\nTITLE: Array Operations in Firebase iOS SDK\nDESCRIPTION: Demonstrates how to use FieldValue.arrayUnion() and FieldValue.arrayRemove() to atomically add and remove elements from an array field in a document.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nFieldValue.arrayUnion()\nFieldValue.arrayRemove()\n```\n\n----------------------------------------\n\nTITLE: Example Git Workflow for Firebase iOS SDK Contribution\nDESCRIPTION: This snippet demonstrates a typical Git workflow for contributing to the Firebase iOS SDK, including updating the local main branch, creating a feature branch, committing changes, pushing to remote, and opening a pull request.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n# Update your local main\ngit checkout main\ngit pull\n\n# Create a development branch\ngit checkout -b my_feature_or_bug_fix\n\n# Code, commit, repeat\ngit commit -m \"a helpful commit message\"\n\n# Push your local branch to the remote\ngit push --set-upstream origin my_feature_or_bug_fix\n\n# Open a pull request on github.com\n\n# Resolve review feedback on opened PR\ngit commit -m \"implemented suggestion\"\ngit push\n\n# Once your PR has been reviewed and all feedback addressed, it\n# will be approved and merged by a project member. 🎉\n```\n\n----------------------------------------\n\nTITLE: Connecting to Firebase Database Emulator in Swift\nDESCRIPTION: Demonstrates how to connect to the Firebase Database Emulator by specifying the emulator host URL and optional namespace.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDatabase/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nDatabase.database(url: \"http://<emulator_host>/\")\n```\n\nLANGUAGE: Swift\nCODE:\n```\nDatabase.database(url: \"http://<emulator_host>/?ns=<namespace>\")\n```\n\n----------------------------------------\n\nTITLE: Querying Across Collections in Firebase iOS SDK\nDESCRIPTION: Demonstrates how to query across all collections in a Firebase database with a given collection ID using the Firestore.collectionGroup() method.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nFirestore.collectionGroup()\n```\n\n----------------------------------------\n\nTITLE: Incrementing Field Values in Firebase iOS SDK\nDESCRIPTION: Shows how to use FieldValue.increment() to safely increment or decrement numeric field values without transactions in updateData(_:) and setData(_:merge:) operations.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nFieldValue.increment()\n```\n\n----------------------------------------\n\nTITLE: Using Structs for Type-Safe Value Handling\nDESCRIPTION: Shows how to use structs to model type-safe values instead of using Any or AnyObject types in Swift APIs.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/firebase-api-guidelines.md#2025-04-11_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\npublic struct CustomValue {\n  public static func string(_ string: String) -> Self { ... }\n  public static func integer(_ integer: Int) -> Self { ... }\n}\n\nfunc setValues(_ values: [String: CustomValue]) async throws { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding FirebaseFirestoreTestingSupport Dependency with Swift Package Manager\nDESCRIPTION: Configuration snippet for adding the FirebaseFirestoreTestingSupport library to a project using Swift Package Manager. This allows tests to access fake implementations of Firebase types.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseTestingSupport/README.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    ...\n    \"FirebaseFirestoreTestingSupport\"\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Asynchronous Methods in Firebase Auth for Thread Safety\nDESCRIPTION: Pattern for implementing public asynchronous methods that dispatch to the auth global work queue and ensure callbacks are executed on the main queue. This approach protects against thread-safety issues by processing work in a serial queue while providing a developer-friendly callback mechanism.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Docs/threading.md#2025-04-11_snippet_0\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)doSomethingWithCompletion:(nullable CompletionBlock)completion {\n  dispatch_async(FIRAuthGlobalWorkQueue(), ^{\n    // Do things...\n    if (completion) {\n      dispatch_async(dispatch_get_main_queue(), ^{\n        completion(args);\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Firestore Network (Swift)\nDESCRIPTION: These code snippets demonstrate the new methods for explicit network management in Firestore. The disableNetwork() method can be used to take the app offline, while enableNetwork() brings it back online.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nFirestore.firestore().disableNetwork()\nFirestore.firestore().enableNetwork()\n```\n\n----------------------------------------\n\nTITLE: Updating Token Retrieval Method in Swift/Objective-C\nDESCRIPTION: Deprecates getTokenWithCompletion in favor of getIDTokenWithCompletion on FIRUser. This change aligns with the naming convention for ID tokens in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n// Old (pre-4.0.0):\nuser.getToken { (token, error) in\n    // Handle token or error\n}\n\n// New (4.0.0+):\nuser.getIDToken { (token, error) in\n    // Handle ID token or error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase In-App Messaging Campaign Configuration in JSON\nDESCRIPTION: Complete JSON structure for Firebase In-App Messaging campaigns, including different message types (modal, banner, card), triggering conditions, styling, action buttons, and expiration settings.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/Tests/Unit/TestJsonDataFromFetch.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"13313766398414028800\",\n        \"campaignStartTimeMillis\": \"1523986039000\",\n        \"campaignEndTimeMillis\": \"1526986039000\",\n        \"campaignName\": \"first campaign\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"I heard you like In-App Messages\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"text\": \"This is message body\",\n            \"hexColor\": \"#000000\"\n          },\n          \"imageUrl\": \"https://image.com/5GCaq8sWMgk\",\n          \"actionButton\": {\n            \"text\": {\n              \"text\": \"Learn More\",\n              \"hexColor\": \"#ffffff\"\n            },\n            \"buttonHexColor\": \"#000000\"\n          },\n          \"action\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#fffff8\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        },\n        {\n          \"event\": {\n            \"name\": \"jackpot\"\n          }\n        }\n      ],\n      \"dataBundle\": {\n        \"a\":\"b\",\n        \"c\":\"d\"\n      }\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"9350598726327992320\",\n        \"campaignStartTimeMillis\": \"1523985333000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"Inception1\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"Test 2\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"imageUrl\": \"https://image.com/5GCaq8sWMgk.jpg\",\n          \"actionButton\": {\n            \"text\": {\n              \"text\": \"Learn More\",\n              \"hexColor\": \"#ffffff\"\n            },\n            \"buttonHexColor\": \"#000000\"\n          },\n          \"action\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        },\n        {\n          \"event\": {\n            \"name\": \"jackpot\"\n          }\n        }\n      ]\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"14819094573862617088\",\n        \"campaignStartTimeMillis\": \"1519934825000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"Top banner\"\n      },\n      \"content\": {\n        \"banner\": {\n          \"title\": {\n            \"text\": \"Hey everybody!\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"text\": \"This is an in-app message!  Now go to Screen 2!\",\n            \"hexColor\": \"#000000\"\n          },\n          \"imageUrl\": \"https://image.com/5YYCaq8sWMgk.png\",\n          \"action\": {\n            \"actionUrl\": \"https://test-app.firebaseapp.com/Calculator/screen2\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"event\": {\n            \"name\": \"jackpot\"\n          }\n        }\n      ]\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"5595722537007841280\",\n        \"campaignStartTimeMillis\": \"1519934650000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"Ducks on foreground\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"Look, it's a duck!\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"text\": \"It's a very nice duck.\",\n            \"hexColor\": \"#000000\"\n          },\n          \"imageUrl\": \"https://image.com/5YYCaq8sWMgkff.png\",\n          \"actionButton\": {\n            \"text\": {\n              \"text\": \"Go to Google.com\",\n              \"hexColor\": \"#ffffff\"\n            },\n            \"buttonHexColor\": \"#000000\"\n          },\n          \"action\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ]\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"5432869654332221\",\n        \"campaignStartTimeMillis\": \"1519934650000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"Super Bowl LIV\"\n      },\n      \"content\": {\n        \"card\": {\n          \"title\": {\n            \"text\": \"Eagles are going to win\",\n            \"hexColor\": \"#004953\"\n          },\n          \"body\": {\n            \"text\": \"Start of a dynasty.\",\n            \"hexColor\": \"#004953\"\n          },\n          \"portraitImageUrl\": \"https://image.com/birds.png\",\n          \"landscapeImageUrl\": \"https://image.com/ls_birds.png\",\n          \"primaryActionButton\": {\n            \"text\": {\n              \"text\": \"Win Super Bowl LIV\",\n              \"hexColor\": \"#000000\"\n            },\n            \"buttonHexColor\": \"#ffffff\"\n          },\n          \"secondaryActionButton\": {\n            \"text\": {\n              \"text\": \"Win Super Bowl LV\",\n              \"hexColor\": \"#000000\"\n            },\n            \"buttonHexColor\": \"#ffffff\"\n          },\n          \"primaryAction\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"secondaryAction\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ]\n    },\n    {\n      \"experimentalPayload\": {\n        \"campaignId\": \"687787988989\",\n        \"campaignStartTimeMillis\": \"1519934650000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"Super Bowl LV\",\n        \"experimentPayload\" : {\n          \"experimentId\": \"_exp_1\",\n          \"experimentStartTimeMillis\": \"1582143484729\",\n          \"overflowPolicy\": \"DISCARD_OLDEST\",\n          \"timeToLiveMillis\": \"15552000000\",\n          \"triggerTimeoutMillis\": \"15552000000\",\n          \"variantId\": \"1\"\n        }\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"Eagles are going to win\",\n            \"hexColor\": \"#004953\"\n          },\n          \"actionButton\": {\n            \"text\": {\n              \"text\": \"Open\",\n              \"hexColor\": \"#1a0dab\"\n            },\n            \"buttonHexColor\": \"#000000\"\n          },\n          \"action\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ]\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"1234567890\",\n        \"campaignStartTimeMillis\": \"1519934650000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"URL Validation\"\n      },\n      \"content\": {\n        \"card\": {\n          \"title\": {\n            \"text\": \"Let's check some weird URLs!\",\n            \"hexColor\": \"#004953\"\n          },\n          \"portraitImageUrl\": \" https:// example.com/ recoverable_image_url \",\n          \"landscapeImageUrl\": \"http://example.com/image_url_without_https.jpg\",\n          \"primaryActionButton\": {\n            \"text\": {\n              \"text\": \"Malformatted but Recoverable URL\",\n              \"hexColor\": \"#000000\"\n            },\n            \"buttonHexColor\": \"#ffffff\"\n          },\n          \"secondaryActionButton\": {\n            \"text\": {\n              \"text\": \"Invalid URL\",\n              \"hexColor\": \"#000000\"\n            },\n            \"buttonHexColor\": \"#ffffff\"\n          },\n          \"primaryAction\": {\n            \"actionUrl\": \"http:// example.com / recoverable_action_url_without_https \"\n          },\n          \"secondaryAction\": {\n            \"actionUrl\": \"\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ]\n    }\n  ],\n  \"expirationEpochTimestampMillis\": \"1537896430193\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshots in Sync Listener to Firestore in Swift\nDESCRIPTION: Shows how to use the new 'addSnapshotsInSyncListener()' method added in version 1.6.0. This method notifies when all snapshot listeners are in sync with each other.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfirestore.addSnapshotsInSyncListener()\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwordless Authentication URL in Swift\nDESCRIPTION: Code snippet showing how to set up the URL string for passwordless authentication using Firebase Dynamic Links. The URL is constructed using an authorized domain for deep linking.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Tests/SampleSwift/README.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet stringURL = \"https://\\(authorizedDomain)/login\"\n```\n\n----------------------------------------\n\nTITLE: Signing in Anonymously with Firebase Auth using Combine\nDESCRIPTION: This snippet demonstrates how to sign in anonymously using Firebase Auth with Combine. It uses the sink operator to handle completion and receive the auth result.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nAuth.auth().signInAnonymously()\n  .sink { completion in\n    switch completion {\n    case .finished:\n      print(\"Finished\")\n    case let .failure(error):\n      print(\"\\(error.localizedDescription)\")\n    }\n  } receiveValue: { authDataResult in\n  }\n  .store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Merging Data in Firebase iOS SDK\nDESCRIPTION: Shows how to merge data when setting document data using the simplified setData method with a merge parameter.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nsetData([\"a\": \"b\"], merge: true)\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Messaging via Local Path in CocoaPods\nDESCRIPTION: Ruby code demonstrating how to use a local checkout of the firebase-ios-sdk repository to access FirebaseMessaging using CocoaPods.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'\npod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'\n```\n\n----------------------------------------\n\nTITLE: Defining Constants Using Case-less Enum in Swift\nDESCRIPTION: Demonstrates the preferred way to define constants in Swift using a case-less enum instead of global constants.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/firebase-api-guidelines.md#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\npublic enum NetworkConstants {\n  public static let httpPostMethod = \"POST\"\n  public static let httpGetMethod = \"GET\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DynamicLink in Swift\nDESCRIPTION: Creates a DynamicLink object using the componentsWithLink method. This method is introduced as a replacement for the deprecated componentsWithLink:domain: method.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDynamicLinks/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet components = DynamicLinkComponents(link: URL(string: \"https://example.com\")!, domainURIPrefix: \"https://example.page.link\")\n```\n\n----------------------------------------\n\nTITLE: Checking Document Existence in Firebase iOS SDK\nDESCRIPTION: Demonstrates the updated way to check for document existence using FIRDocumentSnapshot after a breaking change in FIRTransaction.getDocument().\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nif (snapshot.exists) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Podspec Dependency in Objective-C\nDESCRIPTION: This snippet shows how to specify a dependency on another Firebase pod in a podspec file. It demonstrates setting a version requirement that allows minor version updates.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewPod.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ns.dependency 'FirebaseCore', '~> 6.6'\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerValue Increment in Swift for Firebase Database\nDESCRIPTION: Added ServerValue.increment() method to support atomic field value increments without transactions in Firebase Database.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDatabase/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nServerValue.increment()\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Synchronous Methods in Firebase Auth for Thread Safety\nDESCRIPTION: Pattern for implementing public synchronous methods that dispatch synchronously to the auth global work queue. This approach ensures thread-safety for methods that need to return values immediately while protecting shared resources.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Docs/threading.md#2025-04-11_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n- (ReturnType)something {\n  __block ReturnType result;\n  dispatch_sync(FIRAuthGlobalWorkQueue(), ^{\n    // Compute result.\n    result = computedResult;\n  });\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Size in Firebase iOS SDK\nDESCRIPTION: Shows how to configure the cache size for on-disk persistence in Firestore using FIRFirestoreSettings.cacheSizeBytes.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nFIRFirestoreSettings.cacheSizeBytes = kFIRFirestoreCacheSizeUnlimited\n```\n\n----------------------------------------\n\nTITLE: Authentication Provider ID Enum Implementation\nDESCRIPTION: Introduction of AuthProviderID enum to replace string-based provider IDs in Swift.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nAuthProviderID // New enum type for auth provider identification\n// Replaces String-typed productIDs\n```\n\n----------------------------------------\n\nTITLE: Platform Version Specification with @available Attribute\nDESCRIPTION: Shows how to properly specify platform version requirements for APIs using the @available attribute in Swift.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/firebase-api-guidelines.md#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS 13, tvOS 13, macOS 10.15, macCatalyst 13, watchOS 7, *)\nfunc myNewAPI() { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Pagination in Firebase Database for Swift\nDESCRIPTION: Demonstrates the use of queryStartingAfterValue and queryEndingBeforeValue for implementing pagination in Firebase Database queries.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDatabase/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nFIRDatabaseQuery#{queryStartingAfterValue,queryEndingBeforeValue}\n```\n\n----------------------------------------\n\nTITLE: Updating FIRAuth Instance Handling in Swift/Objective-C\nDESCRIPTION: Changes factory methods to return non-null FIRAuth instances or raise an exception, instead of returning nullable instances. This improves type safety and error handling in the SDK.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// Old (pre-4.0.0):\nlet auth: FIRAuth? = FIRAuth.auth()\n\n// New (4.0.0+):\nlet auth: FIRAuth = FIRAuth.auth() // Will throw an exception if fails\n```\n\n----------------------------------------\n\nTITLE: Committing a WriteBatch without a Completion Handler (Swift)\nDESCRIPTION: This code snippet shows the usage of the new commit method for FIRWriteBatch that doesn't require a completion handler. This allows for simpler code when you don't need to perform any actions after the commit.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nwriteBatch.commit()\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Multi-Database Provider Protocol in Objective-C\nDESCRIPTION: Defines a protocol for a Firestore provider that can manage multiple database instances per FIRApp. It includes methods for storing and creating Firestore instances.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\n@protocol FSTFirestoreMultiDBProvider\n\n/// Cached instances of Firestore objects.\n@property(nonatomic, strong) NSMutableDictionary<NSString *, FIRFirestore *> *instances;\n\n/// Firestore can be initialized with an app as well as a database. The instance provider is already\n/// associated with a `FIRApp` so pass in any other required parameters (in this case, just the\n/// database string).\n- (FIRFirestore *)firestoreForDatabase:(NSString *)database;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Setting Timestamp Behavior in FirestoreSettings (Swift)\nDESCRIPTION: This code snippet demonstrates how to enable the new Timestamp class for timestamp fields in Firestore. It sets the 'areTimestampsInSnapshotsEnabled' property in FirestoreSettings to true, which will cause DocumentSnapshots to return Timestamp objects instead of system Dates for timestamp fields.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nFirestoreSettings.areTimestampsInSnapshotsEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase URL via Console\nDESCRIPTION: The repository URL used to add Firebase iOS SDK package in Xcode\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/SwiftPackageManager.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhttps://github.com/firebase/firebase-ios-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Using FieldValue.delete() with SetOptions.merge() (Swift)\nDESCRIPTION: This code snippet illustrates the ability to use FieldValue.delete() in combination with SetOptions.merge(). This allows for deleting specific fields when updating a document with a merge operation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\ndocumentRef.setData([\"fieldToDelete\": FieldValue.delete()], merge: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Target Dependencies\nDESCRIPTION: Swift Package Manager target configuration showing how to add specific Firebase products as dependencies to a target in Package.swift\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/SwiftPackageManager.md#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.target(\n  name: \"MyTargetName\",\n  dependencies: [\n    // The product(s) you want (e.g. FirebaseAuth).\n    .product(name: \"FirebaseAuth\", package: \"Firebase\"),\n  ]\n),\n```\n\n----------------------------------------\n\nTITLE: Accessing Firestore Instance in Objective-C\nDESCRIPTION: Shows how to retrieve a Firestore instance using the component container in the Firestore class.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n+ (instancetype)firestoreForApp:(FIRApp *)app database:(NSString *)database {\n  id<FSTFirestoreMultiDBProvider> provider =\n      FIR_COMPONENT(FSTFirestoreMultiDBProvider, app.container);\n  return [provider firestoreForDatabase:database];\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating Firestore Instance in Swift\nDESCRIPTION: Shows how to use the 'terminate()' method added in version 1.5.0. This method terminates the Firestore instance and releases held resources. It can be followed by 'clearPersistence()' to wipe persisted data.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nfirestore.terminate()\n// Optionally, after termination\nfirestore.clearPersistence()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firestore Workspace with CocoaPods in iOS\nDESCRIPTION: Commands to set up a Firestore workspace using CocoaPods. This sequence navigates to the Firestore example directory, updates pod dependencies, and opens the Xcode workspace for development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd Firestore/Example\n$ pod update\n$ open Firestore.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Experiment Settings in JSON\nDESCRIPTION: JSON configuration that defines experiment parameters for Firebase iOS SDK, including experiment and variant IDs, timing settings, event logging configurations, and ongoing experiments tracking. This configuration controls the behavior of A/B testing or feature flag experiments.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload4.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_1\",\n  \"variantId\": \"v3\",\n  \"experimentStartTime\": \"2021-05-09T00:00:00.000Z\",\n  \"triggerTimeoutMillis\": 15892000000,\n  \"timeToLiveMillis\": 15892000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\",\n  \"overflowPolicy\": 2,\n  \"ongoingExperiments\": [\n    {\n      \"experimentId\": \"exp_2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pasteboard Retrieval for Dynamic Links in iOS\nDESCRIPTION: Enables or disables fetching dynamic links from the Pasteboard using a Plist property. This configuration is useful for controlling the behavior of dynamic link retrieval in iOS 14 and later.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDynamicLinks/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<key>FirebaseDeepLinkPasteboardRetrievalEnabled</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Authentication Error Handling Update\nDESCRIPTION: Change in error handling for invalid user tokens, replacing fatalError with proper error throwing.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nthrow AuthErrorCode.invalidUserToken // New error handling\n// Replaces previous fatalError\n```\n\n----------------------------------------\n\nTITLE: Adding FirebaseFirestoreTestingSupport Dependency with CocoaPods\nDESCRIPTION: Configuration snippet for adding the FirebaseFirestoreTestingSupport library to a test target using CocoaPods. This allows test targets to access fake implementations of Firebase types.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseTestingSupport/README.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntests.dependency 'FirebaseFirestoreTestingSupport', '~> 1.0'\n```\n\n----------------------------------------\n\nTITLE: Displaying Class Implementation Conflict Warning in iOS Console\nDESCRIPTION: This console output shows a warning message indicating that a class (FIRApp) is implemented in multiple locations, which can lead to undefined behavior in the application.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/firebase_in_libraries.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nobjc[40943]: Class FIRApp is implemented in both\n~/Library/Developer/Xcode/DerivedData/FrameworkTest-apqjxlyrxvkbhhafhaypsbdquref/Build/Products/Debug-iphonesimulator/DynamicFramework.framework/DynamicFramework\n(0x10b2a87f8) and\n~/Library/Developer/CoreSimulator/Devices/4821F959-24A6-4D78-A102-4C5703103D99/data/Containers/Bundle/Application/F017D210-113A-4DAF-9E17-BDE455E71E06/FrameworkTest.app/FrameworkTest\n(0x10ad2d348). One of the two will be used. Which one is undefined.\n```\n\n----------------------------------------\n\nTITLE: Replicating Binary Size Measurement for Released SDK (Bash)\nDESCRIPTION: This Bash script demonstrates how to replicate a binary size measurement for a released SDK locally. It clones the cocoapods-size repository and runs a Python script to measure the size of the FirebaseABTesting SDK.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/health_metrics/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/cocoapods-size\ncd cocoapods-size\npython3 measure_cocoapod_size.py --cocoapods FirebaseABTesting\n```\n\n----------------------------------------\n\nTITLE: Implementing Firestore Component and Instance Provider in Objective-C\nDESCRIPTION: Demonstrates the implementation of a Firestore component that manages multiple database instances. It includes methods for initialization, instance creation, and component registration.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface FSTFirestoreComponent : NSObject <FSTFirestoreMultiDBProvider, FIRLibrary>\n\n@property(nonatomic, weak, readonly) FIRApp *app;\n@property(nonatomic, strong) NSMutableDictionary<NSString *, FIRFirestore *> *instances;\n\n- (FIRFirestore *)firestoreForDatabase:(NSString *)database;\n- (instancetype)initWithApp:(FIRApp *)app NS_DESIGNATED_INITIALIZER;\n- (instancetype)init NS_UNAVAILABLE;\n@end\n\n@implementation FSTFirestoreInstanceProvider\n\n@synthesize instances = _instances;\n\n+ (void)load {\n  NSString *version = @\"<# Fetch the version here #>\";\n  [FIRApp registerInternalLibrary:self withName:@\"fire-fst\" withVersion:version];\n}\n\n- (instancetype)initWithApp:(FIRApp *)app {\n  self = [super init];\n  if (self) {\n    _instances = [[NSMutableDictionary alloc] init];\n    _app = app;\n  }\n  return self;\n}\n\n- (FIRFirestore *)firestoreForDatabase:(NSString *)database {\n  // Regular initialization code to create Firestore instances with required parameters...\n}\n\n+ (NSArray<FIRComponent *> *)componentsToRegister {\n  FIRComponentCreationBlock creationBlock =\n    ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n      *isCacheable = YES;\n      return [[FIRFirestoreComponent alloc] initWithApp:container.app];\n    };\n  FIRComponent *firestoreProvider =\n      [FIRComponent componentWithProtocol:@protocol(FSTFirestoreMultiDBProvider)\n                            creationBlock:creationBlock];\n  return @[ firestoreProvider ];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Adding ObjC Linker Flag in Xcode Build Settings\nDESCRIPTION: Instructions for adding the '-ObjC' flag to Other Linker Settings in Xcode. This step is necessary for proper integration of Firebase SDKs.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/Template/README.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-ObjC\n```\n\n----------------------------------------\n\nTITLE: Documenting Firebase iOS SDK Version 10.26.0 Release\nDESCRIPTION: Announces the initial release of the Vertex AI for Firebase SDK in public preview, with a link to getting started documentation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseVertexAI/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 10.26.0\n- [feature] Initial release of the Vertex AI for Firebase SDK (public preview).\n  Learn how to\n  [get started](https://firebase.google.com/docs/vertex-ai/get-started?platform=ios)\n  with the SDK in your app.\n```\n\n----------------------------------------\n\nTITLE: Renaming Swift API Types for Firebase In-App Messaging\nDESCRIPTION: This snippet shows the renaming of several Swift API types in the Firebase In-App Messaging SDK. It includes changes to dismiss types, display message types, trigger types, and error types.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nFIRInAppMessagingDismissType → InAppMessagingDismissType\nFIRInAppMessagingDisplayMessageType → InAppMessagingDisplayMessageType\nFIRInAppMessagingDisplayTriggerType → InAppMessagingDisplayTriggerType\nFIAMDisplayRenderErrorType → InAppMessagingDisplayRenderError\n```\n\n----------------------------------------\n\nTITLE: Running CoverageReportGenerator for Pull Requests in Swift\nDESCRIPTION: This command runs the CoverageReportGenerator tool for pull requests. It generates a coverage report and posts it as a comment on the pull request. The command includes parameters for the repository, commit SHA, authentication token, xcresult directory, log link, pull request number, and base commit.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/health_metrics/generate_code_coverage_report/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift run CoverageReportGenerator --presubmit \"${REPO}\" --commit \"${GITHUB_SHA}\" --token \"${TOKEN}\" \\\n--xcresult-dir \"${XCRESULT_DIR}\" --log-link \"${}\" --pull-request-num \"${PULL_REQUEST_NUM}\" \\\n--base-commit \"${BASE_COMMIT}\" --branch \"${BRANCH}\"\n```\n\n----------------------------------------\n\nTITLE: Performing Diagnostics for Firebase Dynamic Links in Swift\nDESCRIPTION: Executes a self-diagnostic to identify Firebase Dynamic Links configuration issues. This method helps in troubleshooting and ensuring proper setup of Dynamic Links.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseDynamicLinks/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nFIRDynamicLinks.performDiagnostics { completion in\n    // Handle diagnostic results\n}\n```\n\n----------------------------------------\n\nTITLE: Message ID Access Example - iOS Firebase Messaging\nDESCRIPTION: Code reference showing how to access message ID from FIRMessagingRemoteMessage object, introduced in version 3.2.0\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseMessaging/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nFIRMessagingRemoteMessage *message = ...; // Your message object\nNSString *messageID = message.messageID;\n```\n\n----------------------------------------\n\nTITLE: Checking Required FirebaseOptions Parameters\nDESCRIPTION: Code that validates required Firebase configuration parameters. An exception is thrown when APIKey, googleAppID, or projectID are missing from FirebaseOptions.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\nFIROptions.projectID\nFIROptions.APIKey\n```\n\n----------------------------------------\n\nTITLE: Accessing InstallationsErrorDomain in Swift\nDESCRIPTION: Reference to the renamed error domain in Swift, changed from kFirebaseInstallationsErrorDomain to InstallationsErrorDomain in version 9.0.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nInstallationsErrorDomain\n```\n\n----------------------------------------\n\nTITLE: Registering Swift Library Component in Firebase iOS SDK\nDESCRIPTION: This code snippet demonstrates how to register a Swift library component in the Firebase iOS SDK. It shows an example of creating a component for Firebase Functions and detecting it in the FIRApp class.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewProduct.md#2025-04-11_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nFunctionsComponent.swift\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nFIRApp.m\n```\n\n----------------------------------------\n\nTITLE: Generating CocoaPods Development Workspace\nDESCRIPTION: Command to generate a development workspace using CocoaPods for a specific Firebase module. This uses the cocoapods-generate plugin to create a workspace from a podspec file.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios\n```\n\n----------------------------------------\n\nTITLE: FCM Auto-init Configuration - iOS Firebase Messaging\nDESCRIPTION: Configuration example for enabling/disabling automatic FCM token generation using the autoInitEnabled property\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseMessaging/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n// Configure automatic FCM token generation\nFIRMessaging.messaging.autoInitEnabled = YES; // or NO to disable\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Combine Development Environment\nDESCRIPTION: Initial setup commands to install required utilities and check environment configuration for Firebase Combine development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/DEVELOPING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/setup_check.sh\n$ ./scripts/setup_bundler.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Combine Libraries in Firebase iOS SDK\nDESCRIPTION: This snippet shows how to uncomment the Combine library definitions in the Package.swift file to enable Combine support for Firebase. It includes both the commented and uncommented versions of the code.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Example/CombineSample/README.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n    // TODO: Re-enable after API review passes.\n    // .library(\n    //   name: \"FirebaseCombineSwift-Beta\",\n    //   targets: [\"FirebaseCombineSwift\"]\n    // ),\n    // .library(\n    //   name: \"FirebaseAuthCombineSwift-Beta\",\n    //   targets: [\"FirebaseAuthCombineSwift\"]\n    // ),\n    // .library(\n    //   name: \"FirebaseFunctionsCombineSwift-Beta\",\n    //   targets: [\"FirebaseFunctionsCombineSwift\"]\n    // ),\n    // .library(\n    //   name: \"FirebaseStorageCombineSwift-Beta\",\n    //   targets: [\"FirebaseStorageCombineSwift\"]\n    // ),\n```\n\nLANGUAGE: swift\nCODE:\n```\n    // TODO: Re-enable after API review passes.\n    .library(\n      name: \"FirebaseCombineSwift-Beta\",\n      targets: [\"FirebaseCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseAuthCombineSwift-Beta\",\n      targets: [\"FirebaseAuthCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseFunctionsCombineSwift-Beta\",\n      targets: [\"FirebaseFunctionsCombineSwift\"]\n    ),\n    .library(\n      name: \"FirebaseStorageCombineSwift-Beta\",\n      targets: [\"FirebaseStorageCombineSwift\"]\n    ),\n```\n\n----------------------------------------\n\nTITLE: Conditional Import for External Dependencies\nDESCRIPTION: Shows how to handle imports for external dependencies with conditional compilation for Swift Package Manager versus other build systems.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/HeadersImports.md#2025-04-11_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#if SWIFT_PACKAGE\n@import GTMSessionFetcherCore;\n#else\n#import <GTMSessionFetcher/GTMSessionFetcher.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: Firebase Carthage Dependencies Configuration\nDESCRIPTION: Cartfile configuration showing available Firebase component dependencies. FirebaseAnalyticsBinary is required, while other components are optional based on project needs.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Carthage.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseABTestingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAdMobBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAnalyticsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAppCheckBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAppDistributionBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseAuthBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseCrashlyticsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseDatabaseBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseDynamicLinksBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseFirestoreBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseFunctionsBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseGoogleSignInBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseInAppMessagingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseMLModelDownloaderBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseMessagingBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebasePerformanceBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseRemoteConfigBinary.json\"\nbinary \"https://dl.google.com/dl/firebase/ios/carthage/FirebaseStorageBinary.json\"\n```\n\n----------------------------------------\n\nTITLE: Direct Message Delivery Configuration - iOS Firebase Messaging\nDESCRIPTION: Setting up direct channel message delivery configuration using useFIRMessagingDelegateForDirectMessageDelivery flag for consistent delivery across iOS versions\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseMessaging/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n// Set flag for consistent message delivery across iOS versions\nFIRMessaging.messaging.useFIRMessagingDelegateForDirectMessageDelivery = YES;\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Crashlytics Development\nDESCRIPTION: Commands for installing required dependencies including protobuf and nanopb-generator via Homebrew, and protobuf Python package via easy_install.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Crashlytics/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install protobuf nanopb-generator\neasy_install protobuf python\n```\n\n----------------------------------------\n\nTITLE: Running CoverageReportGenerator for Pull Requests in GitHub Actions\nDESCRIPTION: This example shows how to use the CoverageReportGenerator in a GitHub Actions workflow for pull requests. It includes specific GitHub Actions environment variables and uses gcloud for authentication.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/health_metrics/generate_code_coverage_report/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift run CoverageReportGenerator --presubmit \"firebase/firebase-ios-sdk\" --commit \"${GITHUB_SHA}\" \\\n--token $(gcloud auth print-identity-token) --xcresult-dir \"/Users/runner/test/codecoverage\" \\\n--log-link \"https://github.com/firebase/firebase-ios-sdk/actions/runs/${GITHUB_RUN_ID}\" \\\n--pull-request-num ${{github.event.pull_request.number}} --base-commit \"$base_commit\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Component Registration in Objective-C\nDESCRIPTION: Demonstrates how to register the Auth component with Firebase Core, including conforming to necessary protocols, implementing the +load method, and defining componentsToRegister.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface FIRAuth () <FIRAuthInteroperable, FIRLibrary>\n@end\n\n+ (void)load {\n  // Remember to register in +load!\n  NSString *version = @\"<# Fetch the version here #>\";\n  [FIRApp registerInternalLibrary:self withName:@\"fire-auth\" withVersion:version];\n}\n\n/// The components to register with Core.\n+ (NSArray<FIRComponent *> *)componentsToRegister {\n  // Provide a component that will return an instance of `FIRAuth`.\n  FIRComponentCreationBlock authCreationBlock =\n      ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n        // Cache so the same `FIRAuth` instance is returned each time.\n        *isCacheable = YES;\n        return [[FIRAuth alloc] initWithApp:container.app];\n      };\n  FIRComponent *authInterop =\n      [FIRComponent componentWithProtocol:@protocol(FIRAuthInteroperable)\n                            creationBlock:authCreationBlock];\n  return @[authInterop];\n}\n\n// The public entry point for the SDK.\n+ (FIRAuth *)authForApp:(FIRApp *)app {\n  // Use the instance from the provided app's container.\n  id<FIRAuthInteroperable> auth = FIR_COMPONENT(FIRAuthInteroperable, app.container);\n  return (FIRAuth *)auth;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auth Dependency in Functions in Objective-C\nDESCRIPTION: Shows how to use the injected Auth instance in the Functions class to check for a signed-in user.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSString *userID = [auth getUserID];\nif (userID) {\n  // Auth is available and a user is signed in!\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out FirebaseAppDistributionInternal Changes in Git\nDESCRIPTION: Shell commands for creating a new branch and copying FirebaseAppDistributionInternal changes from the development branch to prepare for a PR to main. These commands ensure CI builds can access the latest internal implementation without affecting the public version.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAppDistributionInternal/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b fad/appdistributioninternal\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout fad/in-app-feedback FirebaseAppDistributionInternal/\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling for Email Signins in Swift/Objective-C\nDESCRIPTION: Changes the error code from ERROR_EMAIL_ALREADY_IN_USE to ERROR_ACCOUNT_EXISTS_WITH_DIFFERENT_CREDENTIAL when the email used in signInWithCredential: is already associated with another account.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n// Old (pre-4.0.0):\nif error.code == FIRAuthErrorCode.errorCodeEmailAlreadyInUse {\n    // Handle email already in use\n}\n\n// New (4.0.0+):\nif error.code == FIRAuthErrorCode.errorCodeAccountExistsWithDifferentCredential {\n    // Handle account exists with different credential\n}\n```\n\n----------------------------------------\n\nTITLE: Running CoverageReportGenerator for Merges in GitHub Actions\nDESCRIPTION: This command demonstrates how to use the CoverageReportGenerator for merge events or postsubmit tests in a GitHub Actions workflow. It adds new coverage data to the Metrics Service storage, including the branch information.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/health_metrics/generate_code_coverage_report/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswift run CoverageReportGenerator --merge \"firebase/firebase-ios-sdk\" --commit \"${GITHUB_SHA}\" \\\n--token $(gcloud auth print-identity-token) --xcresult-dir \"/Users/runner/test/codecoverage\" \\\n--log-link \"https://github.com/firebase/firebase-ios-sdk/actions/runs/${GITHUB_RUN_ID}\" --branch \\\n\"${GITHUB_REF##*/}\"\n```\n\n----------------------------------------\n\nTITLE: Calling Firebase Functions with Combine (No Parameters)\nDESCRIPTION: This snippet demonstrates how to call a Firebase Function named 'helloWorld' without parameters using Combine. It handles the completion and receives the function result.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/README.md#2025-04-11_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet helloWorld = Functions.functions().httpsCallable(\"helloWorld\")\nhelloWorld.call()\n  .sink { completion in\n    switch completion {\n      case .finished:\n        print(\"Finished\")\n      case let .failure(error):\n        print(\"\\(error.localizedDescription)\")\n    }\n  } receiveValue: { functionResult in\n    if let result = functionResult.data as? String {\n      print(\"The function returned: \\(result)\")\n    }\n  }\n  .store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Registering Firebase Library with Core\nDESCRIPTION: Example showing how to register a Firebase framework with Core in the +load method. This registration must happen at load time to allow Core to resolve dependencies before class initialization.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"FirebaseCore/Extension/FirebaseCoreInternal.h\"\n\n@interface FIRFoo <FIRLibrary>\n@end\n\n@implementation FIRFoo\n\n+ (void)load {\n  // Register with Core as a library. The version should be fetched from a constant defined\n  // elsewhere, but that's not covered or relevant for this example.\n  [FIRApp registerInternalLibrary:self\n                         withName:@\"fire-foo\"\n                      withVersion:@\"1.0.0\"];\n}\n\n// TODO: Conform to `FIRLibrary`. See later sections for more information.\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Building Firestore with Swift Package Manager\nDESCRIPTION: Command to build the Firestore SDK using Swift Package Manager. This uses the build script with the 'spm' flag, which is primarily used for CI builds rather than regular development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscripts/build.sh Firestore iOS spm\n```\n\n----------------------------------------\n\nTITLE: Authentication API Property Change in Swift\nDESCRIPTION: Code change demonstrating the deprecation of 'dynamicLinkDomain' in favor of 'linkDomain' for ActionCodeSettings.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nActionCodeSettings.linkDomain // New property\nActionCodeSettings.dynamicLinkDomain // Deprecated property\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Experiment Parameters in JSON\nDESCRIPTION: This JSON object defines the configuration for a Firebase experiment. It includes experiment and variant IDs, start time, timeout and TTL values, event logging specifications, overflow policy, and a list of ongoing experiments.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload3.txt#2025-04-11_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"experimentId\": \"exp_3\",\n  \"variantId\": \"v200\",\n  \"experimentStartTime\": \"2020-08-29T00:00:00.000Z\",\n  \"triggerTimeoutMillis\": 19552000000,\n  \"timeToLiveMillis\": 19552000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\",\n  \"overflowPolicy\": 0,\n  \"ongoingExperiments\": [\n    {\n      \"experimentId\": \"exp_2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying CocoaPods Versions for Zip Builder in JSON (Swift)\nDESCRIPTION: This JSON snippet demonstrates how to specify CocoaPods and their versions for the zip-builder tool. It allows for explicit version control of pods to be included in the zip distribution.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/README.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"GoogleDataTransport\",\n    \"version\" : \"3.2.0\"\n  },\n  {\n    \"name\": \"FirebaseMessaging\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring CocoaPods Source Files for Private Headers\nDESCRIPTION: Example showing how to configure a CocoaPods podspec to include private headers and interop files from other Firebase libraries.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/HeadersImports.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n  s.source_files = [ 'FirebaseFoo/Sources/**/*.[mh]'\n                     'FirebaseAuth/Interop/*.h',\n                     'FirebaseCore/Internal/*.h',\n                   ]\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Example\nDESCRIPTION: Environment variable key-value pairs for configuring different Firebase environments (Autopush/Staging/Prod).\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseSessions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFor \"AUTOPUSH\" - \"FirebaseSessionsRunEnvironment\" -> \"AUTOPUSH\"/\"autopush\"\nFor \"STAGING\" - \"FirebaseSessionsRunEnvironment\" -> \"STAGING\"/\"staging\"\nFor \"PROD\" - \"FirebaseSessionsRunEnvironment\" -> \"PROD\"/\"prod\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase App Distribution SDK Development Environment\nDESCRIPTION: Commands for setting up the development environment for the Firebase App Distribution SDK. This includes generating the project workspace using CocoaPods and opening it in Xcode.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAppDistribution/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npod gen FirebaseAppDistribution.podspec\n```\n\nLANGUAGE: bash\nCODE:\n```\nopen gen/FirebaseAppDistribution/FirebaseAppDistribution.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Header in Swift/Objective-C\nDESCRIPTION: Code snippet showing how to import the Firebase header file in Swift or Objective-C projects after integration. This allows access to Firebase SDK functionality.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/Template/README.md#2025-04-11_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n#import \"Firebase.h\"\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Emulator for Integration Tests\nDESCRIPTION: Shell command to start the Cloud Functions Local Emulator for integration testing. This script downloads necessary libraries via npm and sets up the backend environment.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseFunctions/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBackend/start.sh\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Storage in Objective-C++\nDESCRIPTION: Updated import statement for accessing Firebase Storage APIs in Objective-C++ code.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCore/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Objective-C++\nCODE:\n```\n#import <FirebaseStorage/FirebaseStorage-Swift.h>\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Target XCConfig for Firebase Pods\nDESCRIPTION: This snippet demonstrates how to configure build settings in a podspec file for Firebase pods. It includes setting the C language standard, defining preprocessor macros, and configuring header search paths.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewPod.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ns.pod_target_xcconfig = {\n  'GCC_C_LANGUAGE_STANDARD' => 'c99',\n  'GCC_PREPROCESSOR_DEFINITIONS' => 'FIRLibrary_VERSION=1.0.0',\n  'HEADER_SEARCH_PATHS' => '\"${PODS_TARGET_SRCROOT}\"'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LLDB for Improved Firestore Debugging\nDESCRIPTION: LLDB command to improve the debugger experience for Firestore. This imports a Python script that contains custom type formatters for Firestore internals, making them more readable in LLDB and Xcode's debugger.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_3\n\nLANGUAGE: lldb\nCODE:\n```\ncommand script import ~/path/to/firebase-ios-sdk/scripts/lldb/firestore.py\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for Firebase Performance Monitoring iOS Production Environment\nDESCRIPTION: Generates the Xcode project specifically for the production environment of Firebase Performance Monitoring iOS SDK.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsh generate_project.sh -e \"prod\"\n```\n\n----------------------------------------\n\nTITLE: Generating Crashlytics Project Workspace\nDESCRIPTION: Command to generate the Xcode workspace for Crashlytics development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Crashlytics/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCrashlytics/generate_project.sh\n```\n\n----------------------------------------\n\nTITLE: gRPC Root Certificate Generation for Firestore in CMake\nDESCRIPTION: Configures the generation of C++ source files containing embedded gRPC root certificates necessary for establishing SSL connections. The certificates are embedded as a char array in the binary for secure connections.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n## gRPC Certificates\n\n# Source files should be generated in place so that the Xcode build can pick\n# them up.\nset(OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/remote)\n\nset(\n  GRPC_ROOT_CERTIFICATE_SOURCES\n  ${OUTPUT_DIR}/grpc_root_certificates_generated.h  # NOLINT(generated)\n  ${OUTPUT_DIR}/grpc_root_certificates_generated.cc # NOLINT(generated)\n)\n\n# `roots.pem` is a file containing root certificates that is distributed\n# alongside gRPC and is necessary to establish SSL connections. Embed this file\n# into the binary by converting it to a char array.\nadd_custom_command(\n  COMMENT \"Generating root certificates for embedding\"\n  OUTPUT\n  ${GRPC_ROOT_CERTIFICATE_SOURCES}\n  COMMAND\n  ${MY_PYTHON_EXECUTABLE} ${FIREBASE_SOURCE_DIR}/scripts/binary_to_array.py\n  --output_header=${OUTPUT_DIR}/grpc_root_certificates_generated.h\n  --output_source=${OUTPUT_DIR}/grpc_root_certificates_generated.cc\n  --cpp_namespace=firebase::firestore::remote\n  --array=grpc_root_certificates_generated_data\n  --array_size=grpc_root_certificates_generated_size\n  ${FIREBASE_EXTERNAL_SOURCE_DIR}/grpc/etc/roots.pem\n  VERBATIM\n  DEPENDS\n  grpc\n  ${FIREBASE_SOURCE_DIR}/scripts/binary_to_array.py\n  ${FIREBASE_EXTERNAL_SOURCE_DIR}/grpc/etc/roots.pem\n)\n\n# gRPC certificates have to be regenerated manually on each new gRPC release\n# (which typically has updated certificates).\nadd_custom_target(\n  firestore_gen_grpc_certs\n  DEPENDS ${GRPC_ROOT_CERTIFICATE_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Firebase iOS SDK Version 10.28.0 Changes\nDESCRIPTION: Details changes in version 10.28.0, including updates to Gemini model references and added community support for tvOS and visionOS.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseVertexAI/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 10.28.0\n- [changed] Removed uses of the `gemini-1.5-flash-preview-0514` model in docs\n  and samples. Developers should now use the auto-updated versions,\n  `gemini-1.5-pro` or `gemini-1.5-flash`, or a specific stable version; see\n  [available model names](https://firebase.google.com/docs/vertex-ai/gemini-models#available-model-names)\n  for more details. (#13099)\n- [feature] Added community support for tvOS and visionOS. (#13090, #13092)\n```\n\n----------------------------------------\n\nTITLE: Firebase In-App Message Campaign Configuration\nDESCRIPTION: JSON structure defining multiple in-app messaging campaigns with modal displays, triggers, and styling. Includes campaign metadata, visual styling properties, action buttons, trigger conditions, and test campaign flags.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/Tests/Unit/TestJsonDataWithTestMessageFromFetch.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"2108810525516234752\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"FAST\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ],\n      \"isTestCampaign\": true\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"13313766398414028800\",\n        \"campaignStartTimeMillis\": \"1523986039000\",\n        \"campaignEndTimeMillis\": \"9223372036854775807\",\n        \"campaignName\": \"copy of Inception1\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"I heard you like In-App Messages\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"imageUrl\": \"https://google.com/an_image\",\n          \"actionButton\": {\n            \"text\": {\n              \"text\": \"Learn More\",\n              \"hexColor\": \"#ffffff\"\n            },\n            \"buttonHexColor\": \"#000000\"\n          },\n          \"action\": {\n            \"actionUrl\": \"https://www.google.com\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"priority\": {\n        \"value\": 1\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        },\n        {\n          \"event\": {\n            \"name\": \"jackpot\"\n          }\n        }\n      ]\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"2108810525516234752\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"FAST\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ],\n      \"dataBundle\": {\n        \"a\":\"b\",\n        \"c\":\"d\"\n      },\n      \"isTestCampaign\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notifications in iOS App Delegate\nDESCRIPTION: Demonstrates the method signature for handling remote notifications in the iOS app delegate, which had a completion handler issue fixed in version 7.1.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)\n```\n\n----------------------------------------\n\nTITLE: Installing Proto Build Prerequisites\nDESCRIPTION: Installs required dependencies for building protocol buffers using Homebrew, including automake, libtool, protobuf, golang and cmake.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install automake libtool protobuf golang cmake\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for Firebase Performance Monitoring iOS Autopush Environment\nDESCRIPTION: Generates the Xcode project for the Autopush environment. Events generated in this environment are processed on staging servers and not available on the public console.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh generate_project.sh -e \"autopush\"\n```\n\n----------------------------------------\n\nTITLE: Deprecating FIREmailPasswordAuthProvider in Swift/Objective-C\nDESCRIPTION: Deprecates FIREmailPasswordAuthProvider in favor of FIREmailAuthProvider. Developers should update their code to use the new provider class for email authentication.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n// Old (pre-4.0.0):\nlet credential = FIREmailPasswordAuthProvider.credential(withEmail: email, password: password)\n\n// New (4.0.0+):\nlet credential = FIREmailAuthProvider.credential(withEmail: email, password: password)\n```\n\n----------------------------------------\n\nTITLE: Documenting Firebase iOS SDK Version 10.27.0 Changes\nDESCRIPTION: Outlines changes in version 10.27.0, including updates to Gemini model references and improvements in logging for Vertex AI API issues.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseVertexAI/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 10.27.0\n- [changed] Removed uses of the `gemini-1.5-pro-preview-0409` model in docs and\n  samples. Developers should now use `gemini-1.5-pro-preview-0514` or\n  `gemini-1.5-flash-preview-0514`; see\n  [available model names](https://firebase.google.com/docs/vertex-ai/gemini-models#available-model-names)\n  for more details. (#12979)\n- [changed] Logged additional details when required APIs for Vertex AI are\n  not enabled or response payloads when requests fail. (#13007, #13009)\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Plugin to Podfile\nDESCRIPTION: Ruby code snippet showing how to add the ProtoCompiler-gRPCPlugin to a Podfile for generating gRPC code.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/README.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npod '!ProtoCompiler-gRPCPlugin'\n```\n\n----------------------------------------\n\nTITLE: Regenerating Xcode Project for Firebase Performance Monitoring iOS\nDESCRIPTION: Regenerates the Xcode project by first deleting the old project. This is useful for ensuring a clean project generation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsh generate_project.sh -c\n```\n\n----------------------------------------\n\nTITLE: Enabling Firestore Source Distribution for visionOS in Swift\nDESCRIPTION: This command opens an Xcode project with the FIREBASE_SOURCE_FIRESTORE environment variable set, enabling the Firestore source distribution for visionOS compatibility when using Swift Package Manager.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopen --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Configuring FirebaseCore Framework Build in CMake\nDESCRIPTION: Sets up the build configuration for the FirebaseCore framework, including source files, version information, and dependencies. It also defines platform-specific settings and linkage.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCore/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE)\n  return()\nendif()\n\n# GoogleUtilities is an external dependency without its own cmake configuration.\ninclude(GoogleUtilities)\n\nfile(GLOB headers Sources/Private/*.h Sources/Public/FirebaseCore/*.h)\nfile(GLOB sources Sources/*.m)\n\npodspec_version(version ${PROJECT_SOURCE_DIR}/FirebaseCore.podspec)\nfirebase_version(firebase_version ${PROJECT_SOURCE_DIR}/FirebaseCore.podspec)\n\nfirebase_ios_add_framework(\n  FirebaseCore DISABLE_STRICT_WARNINGS EXCLUDE_FROM_ALL ${headers} ${sources}\n)\n\nfirebase_ios_framework_public_headers(FirebaseCore ${headers})\n\ntarget_compile_definitions(\n  FirebaseCore PRIVATE\n  Firebase_VERSION=${firebase_version}\n  # This macro is defined and used to exclude symbols from the\n  # FirebaseCoreInternal Swift module, which is not yet configured to build\n  # for CMake builds.\n  FIREBASE_BUILD_CMAKE=1\n)\n\ntarget_link_libraries(\n  FirebaseCore PRIVATE\n  \"-framework Foundation\"\n  GoogleUtilities\n)\n\nif(IOS)\n  target_link_libraries(FirebaseCore PRIVATE \"-framework UIKit\")\nelseif(APPLE)\n  target_link_libraries(FirebaseCore PRIVATE \"-framework AppKit\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Firestore Core Library Configuration in CMake\nDESCRIPTION: Configures and builds the main firestore_core library with all necessary source files. Includes platform-specific implementations for Apple platforms and links against required dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n## firestore_core\n\n\nfirebase_ios_glob(\n  core_sources\n  include/firebase/firestore/*.h\n  src/*.cc\n  src/*.h\n  src/api/*.cc\n  src/api/*.h\n  src/bundle/*.cc\n  src/bundle/*.h\n  src/core/*.cc\n  src/core/*.h\n  src/credentials/*.cc\n  src/credentials/*.h\n  src/immutable/*.cc\n  src/immutable/*.h\n  src/index/*.cc\n  src/index/*.h\n  src/local/*.cc\n  src/local/*.h\n  src/model/*.cc\n  src/model/*.h\n  src/model/mutation/*.cc\n  src/model/mutation/*.h\n  src/nanopb/*.cc\n  src/nanopb/*.h\n  src/objc/*.h\n  src/remote/*.cc\n  src/remote/*.h\n  EXCLUDE ${nanopb_sources}\n)\n\nif(APPLE)\n  firebase_ios_glob(\n    core_sources APPEND\n    src/credentials/firebase_app_check_credentials_provider_apple.*\n    src/credentials/firebase_auth_credentials_provider_apple.*\n    src/remote/connectivity_monitor_apple.mm\n    src/remote/firebase_metadata_provider_apple.mm\n  )\nendif()\n\n\nfirebase_ios_add_library(firestore_core ${core_sources})\n\npodspec_version(version ${PROJECT_SOURCE_DIR}/FirebaseFirestore.podspec)\n\ntarget_compile_definitions(\n  firestore_core PRIVATE\n  FIRFirestore_VERSION=${version}\n)\n\ntarget_include_directories(\n  firestore_core PUBLIC\n  ${PROJECT_SOURCE_DIR}/Firestore/core/include\n)\n\ntarget_link_libraries(\n  firestore_core PUBLIC\n  LevelDB::LevelDB\n  absl::base\n  absl::flat_hash_map\n  absl::memory\n  absl::meta\n  absl::optional\n  absl::strings\n  firestore_nanopb\n  firestore_protos_nanopb\n  firestore_util\n  grpc++\n  protobuf-nanopb-static\n)\n\nif(APPLE)\n  target_link_libraries(\n    firestore_core PUBLIC\n    \"-framework Foundation\"\n    \"-framework SystemConfiguration\"\n    FirebaseAppCheckInterop\n    FirebaseAuthInterop\n    FirebaseCore\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Protobuf Files for Firebase iOS SDK\nDESCRIPTION: Commands for installing protobuf via Homebrew and executing the proto generation script. The process requires verification of protobuf version in the generation script before running it.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/ProtoSupport/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install protobuf\n```\n\nLANGUAGE: shell\nCODE:\n```\n./generate_protos.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Firebase Performance Project for Production Environment\nDESCRIPTION: Shell command to generate a Firebase Performance test app project configured for the production environment. This needs to be run from the FirebasePerformance directory.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/Tests/TestApp/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh generate_project.sh -e \"prod\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Firestore iOS Framework in CMake\nDESCRIPTION: This CMake snippet sets up the Firebase Firestore framework for iOS. It checks for Apple platform and Objective-C inclusion, glob-selects source and header files, and configures the framework with public headers and dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Source/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE)\n  return()\nendif()\n\nif(NOT FIRESTORE_INCLUDE_OBJC)\n  return()\nendif()\n\nfile(GLOB headers Public/FirebaseFirestore/*.h)\nfile(GLOB sources API/*.h API/*.m API/*.mm)\n\nfirebase_ios_add_framework(FirebaseFirestore ${headers} ${sources})\nfirebase_ios_framework_public_headers(FirebaseFirestore ${headers})\n\ntarget_link_libraries(\n  FirebaseFirestore PUBLIC\n  FirebaseAppCheckInterop\n  FirebaseAuthInterop\n  FirebaseCore\n  absl_strings\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Firebase Combine Development Project\nDESCRIPTION: Command to generate and open the development project using CocoaPods Generate with local sources for iOS platform.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/DEVELOPING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pod gen FirebaseCombineSwift.podspec --local-sources=./ --auto-open --platforms=ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase In-App Messaging Test Campaign with Foreground Trigger in JSON\nDESCRIPTION: JSON configuration for a Firebase In-App Messaging test campaign that displays a modal with body text. The message is triggered when the app comes to the foreground and includes campaign identification and styling properties.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/Tests/Unit/JsonDataWithInvalidMessagesFromFetch.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"2108810525516234752\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ],\n      \"isTestCampaign\": true\n    },\n\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"2108810525516234752\"\n      },\n      \"content\": {\n        \"modal\": {\n          \"title\": {\n            \"text\": \"FAST\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n    },\n    {\n      \"vanillaPayload\": {\n        \"campaignId\": \"2108810525516234752\"\n      },\n      \"content\": {\n        \"unknown-type\": {\n          \"title\": {\n            \"text\": \"FAST\",\n            \"hexColor\": \"#000000\"\n          },\n          \"body\": {\n            \"hexColor\": \"#000000\"\n          },\n          \"backgroundHexColor\": \"#ffffff\"\n        }\n      },\n      \"triggeringConditions\": [\n        {\n          \"fiamTrigger\": \"ON_FOREGROUND\"\n        }\n      ],\n      \"isTestCampaign\": true\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Firebase Performance Project for Autopush Environment\nDESCRIPTION: Shell commands to generate a Firebase Performance test app project configured for the autopush (staging) environment. This can be run with or without explicitly specifying the autopush environment.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/Tests/TestApp/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsh generate_project.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh generate_project.sh -e \"autopush\"\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Zip Distribution with Custom Specs and Artifact Retention\nDESCRIPTION: This Swift command builds a releaseable Firebase zip file using custom spec repos and keeps build artifacts for debugging. It updates the pod repo and uses a staging spec repository.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/DEVELOP.md#2025-04-11_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswift run zip-builder --update-pod-repo \\\n--custom-spec-repos https://github.com/firebase/SpecsStaging.git \\\n--keep-build-artifacts\n```\n\n----------------------------------------\n\nTITLE: Running Firestore Emulator for Testing\nDESCRIPTION: Command to start the Firestore emulator for running integration tests. This provides a faster testing environment compared to using production Firebase services.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscripts/run_firestore_emulator.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Firestore via Git Branch in CocoaPods\nDESCRIPTION: Ruby code showing how to access FirebaseFirestore source code from a specific branch in the firebase-ios-sdk repository using CocoaPods.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'\npod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for FirebaseRemoteConfig in Swift\nDESCRIPTION: This command uses CocoaPods to generate an Xcode project for FirebaseRemoteConfig. It's part of the local development setup process for running Remote Config tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseRemoteConfig/Tests/Swift/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npod gen FirebaseRemoteConfig.podspec --local-sources=./ --auto-open --platforms=ios\n```\n\n----------------------------------------\n\nTITLE: Building Protocol Buffers\nDESCRIPTION: Commands to build protocol buffers from the repository root by creating a build directory, running cmake configuration and generating protos.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd firebase-ios-sdk  # the root of this repo, not Firestore/Protos\nmkdir -p build\ncd build\ncmake ..\nmake -j generate_protos\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods and CocoaPods-Generate for Firebase Performance Monitoring iOS\nDESCRIPTION: Installs the necessary Ruby gems (CocoaPods and CocoaPods-Generate) for working with the Firebase Performance Monitoring iOS SDK. This step is a prerequisite for generating the Xcode project.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install --user cocoapods cocoapods-generate\n```\n\n----------------------------------------\n\nTITLE: Generating CocoaPods Project for FirebaseFirestoreTestingSupport Development\nDESCRIPTION: Command to generate a CocoaPods-based project for developing the FirebaseFirestoreTestingSupport library. This automatically opens the generated project with iOS as the target platform.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseTestingSupport/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npod gen --auto-open --local-sources=./ FirebaseFirestoreTestingSupport.podspec --platforms=ios\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Build Commands\nDESCRIPTION: Basic sequence of commands for preparing and executing a CMake build of the Firebase iOS SDK outside the source tree.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\ncmake --build .\ncmake --build . --target test\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Storage in Swift\nDESCRIPTION: Updated import statement for Firebase Storage in Swift code after beta version graduation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCore/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport FirebaseStorage\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC and Dependencies for Firebase iOS SDK\nDESCRIPTION: Configures gRPC and its dependencies (Abseil, BoringSSL, Protobuf, etc.) with special handling for mobile platforms like iOS and Android.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# gRPC\n\n# Force disable Abseil's tests, which don't compile under VS2017.\nset(ABSL_RUN_TESTS OFF CACHE BOOL \"Disable Abseil tests\" FORCE)\n\n# libcurl and c-ares conflict in their usage of this variable. Prevent\n# libcurl's setting of this variable from affecting the c-ares build that's\n# pulled in indirectly via gRPC.\nunset(RANDOM_FILE CACHE)\n\nset(CARES_INSTALL OFF CACHE BOOL \"Disabled\")\n\nset(protobuf_BUILD_TESTS OFF CACHE BOOL \"Disabled\")\n# See https://github.com/protocolbuffers/protobuf/issues/12185#issuecomment-1887892723\nset(protobuf_INSTALL OFF)\nset(utf8_range_ENABLE_INSTALL OFF)\n\nif(IOS OR ANDROID)\n  # C-Ares includes a number of example binaries (e.g. `ahost`) that fail to\n  # build when compiling for non-host targets.\n  set(gRPC_CARES_PROVIDER none CACHE STRING \"Don't use C-Ares\")\n\n  # protoc needs to be built for the host to be able to invoke it during the\n  # build.\n  set(protobuf_BUILD_PROTOC_BINARIES OFF CACHE BOOL \"Disabled\")\nendif()\n\nif(ANDROID OR IOS)\n  set(OPENSSL_FOUND FALSE)\nelse()\n  find_package(OpenSSL QUIET)\nendif()\n\nif(OPENSSL_FOUND)\n  set(gRPC_SSL_PROVIDER package CACHE STRING \"Use external OpenSSL\")\nelse()\n  set(BORINGSSL_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src)\nendif()\n\nfind_package(ZLIB QUIET)\nif(ZLIB_FOUND)\n  set(gRPC_ZLIB_PROVIDER package CACHE STRING \"Use external ZLIB\")\nelse()\n  set(ZLIB_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/zlib)\nendif()\n\nfind_package(re2 QUIET)\nif(RE2_FOUND)\n  set(gRPC_RE2_PROVIDER package CACHE STRING \"Use external re2\")\nelse()\n  set(RE2_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/re2)\nendif()\n\nset(gRPC_BUILD_TESTS OFF CACHE BOOL \"Disable gRPC tests\")\nset(gRPC_BUILD_CODEGEN OFF CACHE BOOL \"Disable gRPC codegen\")\nset(gRPC_BUILD_CSHARP_EXT OFF CACHE BOOL \"Disable gRPC C# extensions\")\nset(gRPC_INSTALL OFF CACHE BOOL \"Disable gRPC installation\")\n\nset(ABSL_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/abseil-cpp)\nset(CARES_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/cares)\nset(PROTOBUF_ROOT_DIR ${FIREBASE_EXTERNAL_SOURCE_DIR}/protobuf)\n\nadd_external_subdirectory(grpc)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with Homebrew\nDESCRIPTION: Commands to install the required code styling tools (clang-format and mint) using Homebrew. These tools are needed to maintain code style consistency in the Firebase iOS SDK repository.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nbrew install clang-format@20\nbrew install mint\n```\n\n----------------------------------------\n\nTITLE: Building Firestore from Command Line for iOS\nDESCRIPTION: Commands to build the Firestore SDK from the command line. This approach uses an environment variable to specify the platform before updating pods, followed by running the build script targeting the iOS platform.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPLATFORM=iOS pod update --project-directory=Firestore/Example\nscripts/build.sh Firestore iOS\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Homebrew on macOS\nDESCRIPTION: Commands for installing the required development tools for building Firebase iOS SDK on macOS using the Homebrew package manager.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake\nbrew install golang\nbrew install ccache     # optional\nbrew install ninja      # optional\ngem install cocoapods   # may need sudo\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Functions in Swift\nDESCRIPTION: Updated import statement for Firebase Functions in Swift code after beta version graduation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCore/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport FirebaseFunctions\n```\n\n----------------------------------------\n\nTITLE: Opening FirebaseFunctions Workspace\nDESCRIPTION: Command to open the FirebaseFunctions Xcode workspace after the pod installation is complete.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseFunctions/README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopen FirebaseFunctions.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Firebase Installations Item Validation\nDESCRIPTION: Reference to FIRInstallationsItem validation that was enhanced in version 1.7.1 to catch potential storage issues.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\nFIRInstallationsItem\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands for installing the required development tools for building Firebase iOS SDK on Ubuntu using apt-get.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential\nsudo apt-get install cmake\nsudo apt-get install ccache       # optional\nsudo apt-get install ninja-build  # optional\n\nsudo apt-get install golang\n```\n\n----------------------------------------\n\nTITLE: Style Script Usage Documentation\nDESCRIPTION: Documentation for the style.sh script showing various usage options. The script can format all eligible files, files changed since a specific branch, or specific files and directories.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Usage:\n# ./scripts/style.sh [branch-name | filenames]\n#\n# With no arguments, formats all eligible files in the repo\n# Pass a branch name to format all eligible files changed since that branch\n# Pass a specific file or directory name to format just files found there\n#\n# Commonly\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test for Firebase iOS SDK\nDESCRIPTION: Sets up Google Test framework for testing when tests are enabled, creating necessary aliases for GTest and GMock.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Googletest\nif(FIREBASE_IOS_BUILD_TESTS)\n  set(gtest_force_shared_crt ON CACHE BOOL \"Use shared run-time\")\n  add_external_subdirectory(googletest)\n  firebase_ios_add_alias(GTest::GTest gtest)\n  firebase_ios_add_alias(GTest::Main gtest_main)\n  firebase_ios_add_alias(GMock::GMock gmock)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Subprojects to the Build\nDESCRIPTION: Includes various Firebase component subdirectories in the build, such as AppCheck, Core, Firestore, and Auth.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# XCTest\nif(APPLE)\n  find_package(XCTest)\nendif()\n\n\nif(FIREBASE_IOS_BUILD_TESTS)\n  enable_testing()\nendif()\n\nadd_subdirectory(FirebaseAppCheck/Interop)\nadd_subdirectory(FirebaseCore)\nadd_subdirectory(Firestore)\nadd_subdirectory(FirebaseAuth/Interop)\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Check for Firebase Combine\nDESCRIPTION: Command to verify code compliance with the coding styleguide before checking in changes.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCombineSwift/DEVELOPING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/check.sh --allow-dirty\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Chocolatey on Windows\nDESCRIPTION: Commands for installing the required development tools for building Firebase iOS SDK on Windows using the Chocolatey package manager.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nchoco install git\nchoco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\nchoco install ninja\n\n# Build scripts use bash and python\nchoco install msys2\n\n# Required for building gRPC and its dependencies\nchoco install activeperl\nchoco install golang\nchoco install nasm\n\n# Optional: can speed up builds\nchoco install openssl\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for Firebase Performance Monitoring iOS Development\nDESCRIPTION: Generates the Xcode project for developing with Firebase Performance Monitoring iOS SDK. This is the basic command for most development scenarios.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebasePerformance/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh generate_project.sh\n```\n\n----------------------------------------\n\nTITLE: Firestore Util Library Configuration in CMake\nDESCRIPTION: Configures and builds the firestore_util library with the appropriate source files and dependencies. Sets compile definitions and links against required libraries based on the platform.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  src/util/config_detected.h.in\n  src/util/config_detected.h  # NOLINT(generated)\n)\n\n\nfirebase_ios_add_library(firestore_util EXCLUDE_FROM_ALL ${util_sources})\n\ntarget_compile_definitions(\n  firestore_util PUBLIC\n  FIRESTORE_HAVE_CONFIG_DETECTED_H\n)\n\ntarget_link_libraries(\n  firestore_util PUBLIC\n  absl::base\n  absl::flat_hash_map\n  absl::memory\n  absl::meta\n  absl::optional\n  absl::strings\n  absl::time\n  protobuf-nanopb-static\n  firestore_protos_nanopb\n  grpc++\n)\n\nif(HAVE_OPENSSL_RAND_H)\n  target_link_libraries(\n    firestore_util PRIVATE\n    OpenSSL::Crypto\n  )\nendif()\n\nif(APPLE)\n  target_link_libraries(\n    firestore_util PUBLIC\n    \"-framework CoreFoundation\"\n    \"-framework Foundation\"\n    FirebaseCore\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Empty JSON for Carthage Build\nDESCRIPTION: This code snippet refers to creating an empty JSON file to enable the Carthage build for the new Firebase product. It's part of the release process for supporting multiple package managers.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewProduct.md#2025-04-11_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nReleaseTooling/Sources/CarthageJSON/[NewProduct].json\n```\n\n----------------------------------------\n\nTITLE: Defining a New SDK Coverage Job in GitHub Actions Workflow (YAML)\nDESCRIPTION: This YAML snippet shows how to add a new SDK coverage job to the existing GitHub Actions workflow. It includes conditional execution, environment setup, and artifact uploading steps.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/health_metrics/README.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npod-lib-lint-newsdk:\n    needs: check\n    # Don't run on private repo unless it is a PR.\n    if: always() && github.repository == 'Firebase/firebase-ios-sdk' && (needs.check.outputs.newsdk_run_job == 'true'|| github.event.pull_request.merged)\n    runs-on: macOS-latest\n    strategy:\n      matrix:\n        target: [iOS]\n    steps:\n    - uses: actions/checkout@v3\n    - uses: ruby/setup-ruby@359bebbc29cbe6c87da6bc9ea3bc930432750108\n      with:\n        ruby-version: '2.7'\n    - name: Setup Bundler\n      run: scripts/setup_bundler.sh\n    - name: Build and test\n      run: ./scripts/health_metrics/pod_test_code_coverage_report.sh FirebaseNewSDK \"${{ matrix.target }}\"\n    - uses: actions/upload-artifact@v3\n      with:\n        name: codecoverage\n        path: /Users/runner/*.xcresult\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase iOS Experiment Settings\nDESCRIPTION: JSON configuration object that defines experiment parameters including IDs, timing thresholds, and event logging names. Specifies experiment and variant identifiers, start time, timeout duration, TTL, and custom event names for different experiment states.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload5.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_2\",\n  \"variantId\": \"v2\",\n  \"experimentStartTimeMillis\": \"143\",\n  \"triggerTimeoutMillis\": 17392000000,\n  \"timeToLiveMillis\": 17392000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Dependency using Homebrew\nDESCRIPTION: Command to install the Protobuf prerequisite needed for updating the Sessions Proto files.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseSessions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install protobuf\n```\n\n----------------------------------------\n\nTITLE: Updating Firebase Podspec for New Product\nDESCRIPTION: This code snippet refers to updating the Firebase.podspec file to include the new Firebase product. It's essential for integrating the new SDK with the main Firebase distribution.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewProduct.md#2025-04-11_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nFirebase.podspec\n```\n\n----------------------------------------\n\nTITLE: Remote Test Target Dependencies\nDESCRIPTION: Links all required libraries and testing frameworks to the remote test target\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  firestore_remote_test PRIVATE\n  GMock::GMock\n  absl_base\n  firestore_core\n  firestore_protos_protobuf\n  firestore_remote_testing\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Firebase iOS SDK Changes in Markdown\nDESCRIPTION: This code snippet is a markdown-formatted changelog for the Firebase iOS SDK. It covers multiple versions, detailing additions, fixes, and changes to the SDK, particularly focusing on the In-App Messaging feature.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/Sources/DefaultUI/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.15.5\n- [added] Added support for UIScene based application lifecycle (#3927).\n- [fixed] Fixed storyboard layout error in Xcode 11 (#3748).\n\n# 0.15.2\n- [fixed] Fixed bug with body text color for card messages (#3286).\n\n# 0.15.0\n- [added] Added support for card in-app messages (#2947).\n- [added] Added direct triggering (via FIAM SDK) of in-app messages (#3081).\n\n# 0.13.1\n- [fixed] Fixed a crash (#2498) that occurred when integrating In-App Messaging into NativeScript apps.\n\n# 0.13.0\n- [added] Added a feature allowing developers to programmatically register a delegate for updates on in-app engagement (impression, click, display errors).\n\n# 0.12.0\n- [changed] UI functionality of Firebase In-App Messaging spun off into FirebaseInAppMessagingDisplay.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Composite Indexes for Firestore Testing\nDESCRIPTION: Terraform commands for creating the required composite indexes in a Firebase project. These commands initialize Terraform and apply the index configuration to the specified project, which is necessary for running certain query tests against production.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply -var=\"project_id=<your-project-id>\" -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Opening Project with Source Firestore for visionOS\nDESCRIPTION: Terminal command for developers using Firestore on visionOS to use a source distribution rather than the default binary distribution by setting the FIREBASE_SOURCE_FIRESTORE environment variable when opening the project.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Firebase iOS SDK Build in CMake\nDESCRIPTION: Includes various subdirectories in the CMake build process for the Firebase iOS SDK. This includes Protos, Source, core, fuzzing, and Example directories.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Protos)\nadd_subdirectory(Source)\nadd_subdirectory(core)\nadd_subdirectory(fuzzing)\n\nadd_subdirectory(Example)\n```\n\n----------------------------------------\n\nTITLE: Version Mapping Placeholder Section\nDESCRIPTION: Section marked with __VERSIONS__ placeholder that maps xcframeworks to their corresponding Firebase SDK versions in CocoaPods.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/Template/METADATA.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n__VERSIONS__\n```\n\n----------------------------------------\n\nTITLE: Adding New Product to Firebase Manifest\nDESCRIPTION: This code snippet indicates where to add the new Firebase product in the Firebase manifest file. This step is crucial for releasing the new SDK with Firebase.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/AddNewProduct.md#2025-04-11_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nReleaseTooling/Sources/FirebaseManifest/FirebaseManifest.swift\n```\n\n----------------------------------------\n\nTITLE: Firestore Nanopb Library Configuration in CMake\nDESCRIPTION: Configures the firestore_nanopb library which contains Nanopb-related utilities used from generated Nanopb messages. These utilities are not specific to Firestore but are used within the component.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n## firestore_nanopb\n\n# Nanopb-related utilities that not specific to Firestore and are used from\n# generated nanopb messages.\n\nfirebase_ios_glob(\n  nanopb_sources\n  src/nanopb/byte_string.*\n  src/nanopb/nanopb_util.*\n  src/nanopb/pretty_printing.*\n)\n\nfirebase_ios_add_library(firestore_nanopb EXCLUDE_FROM_ALL ${nanopb_sources})\n\ntarget_link_libraries(\n  firestore_nanopb PUBLIC\n  absl_strings\n  firestore_util\n  protobuf-nanopb-static\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Symbol Collision Test Project\nDESCRIPTION: These commands clone the Firebase iOS SDK repository, navigate to the SymbolCollisionTest directory, install pod dependencies, and open the Xcode workspace for building.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/SymbolCollisionTest/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:firebase/firebase-ios-sdk.git\ncd firebase-ios-sdk/SymbolCollisionTest\npod install\nopen SymbolCollisionTest.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Generating Access Token for Firebase Remote Config in Swift\nDESCRIPTION: This bash command generates an access token for Firebase Remote Config using a service account JSON file. It's part of the local development setup process for running Remote Config API tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseRemoteConfig/Tests/Swift/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_access_token.sh local_dev PATH/TO/ServiceAccount.json FirebaseRemoteConfig/Tests/Swift/AccessToken.json\n```\n\n----------------------------------------\n\nTITLE: Creating Nanopb Library Target\nDESCRIPTION: Defines and configures the firestore_protos_nanopb library target with necessary include directories and dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_add_library(\n  firestore_protos_nanopb DISABLE_STRICT_WARNINGS EXCLUDE_FROM_ALL\n  ${NANOPB_GENERATED_SOURCES}\n)\n\ntarget_include_directories(\n  firestore_protos_nanopb PUBLIC\n  ${CMAKE_CURRENT_LIST_DIR}/nanopb\n)\n\ntarget_link_libraries(\n  firestore_protos_nanopb PUBLIC\n  firestore_nanopb\n  protobuf-nanopb-static\n  absl_strings\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase iOS Experiment Settings in JSON\nDESCRIPTION: Defines experiment configuration including IDs, timestamps, timeout settings, event logging names, and policy parameters. The structure includes experiment and variant identifiers, timing controls, custom event logging names, and overflow policy settings.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload2.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_2\",\n  \"variantId\": \"v200\",\n  \"experimentStartTime\": \"2020-06-01T16:00:00.000Z\",\n  \"triggerTimeoutMillis\": 15452000000,\n  \"timeToLiveMillis\": 15452000000,\n  \"setEventToLog\": \"set_event_override\",\n  \"activateEventToLog\": \"activate_event_override\",\n  \"clearEventToLog\": \"clear_event_override\",\n  \"timeoutEventToLog\": \"timeout_event_override\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event_override\",\n  \"overflowPolicy\": 1,\n  \"ongoingExperiments\": [\n    {\n      \"experimentId\": \"exp_1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SecureRandom Implementation Selection for Firestore in CMake\nDESCRIPTION: Chooses the appropriate secure random number generation implementation based on platform capabilities. Prefers arc4random if available, falls back to OpenSSL if present, and errors if no secure random source is found.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Choose SecureRandom implementation\ncheck_symbol_exists(arc4random stdlib.h HAVE_ARC4RANDOM)\n\nif(TARGET OpenSSL::Crypto)\n  get_target_property(\n    CMAKE_REQUIRED_INCLUDES OpenSSL::Crypto INTERFACE_INCLUDE_DIRECTORIES\n  )\n  check_include_files(openssl/rand.h HAVE_OPENSSL_RAND_H)\nendif()\n\nfirebase_ios_glob(\n  util_sources EXCLUDE src/util/secure_random_*.cc\n)\nif(HAVE_ARC4RANDOM)\n  firebase_ios_glob(\n    util_sources APPEND\n    src/util/secure_random_arc4random.cc\n  )\nelseif(HAVE_OPENSSL_RAND_H)\n  firebase_ios_glob(\n    util_sources APPEND\n    src/util/secure_random_openssl.cc\n  )\nelse()\n  message(\n    FATAL_ERROR\n    \"Don't know how to get high quality random numbers on this platform.\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Source Files\nDESCRIPTION: Defines lists of Protocol Buffer file roots for both custom Firestore protos and well-known Google protobuf types.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n  PROTO_FILE_ROOTS\n  firestore/local/maybe_document\n  firestore/local/mutation\n  firestore/local/target\n  firestore/bundle\n  google/api/annotations\n  google/api/http\n  google/firestore/admin/index\n  google/firestore/v1/aggregation_result\n  google/firestore/v1/bloom_filter\n  google/firestore/v1/common\n  google/firestore/v1/document\n  google/firestore/v1/firestore\n  google/firestore/v1/query\n  google/firestore/v1/write\n  google/rpc/status\n  google/type/latlng\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Firestore Benchmark in CMake\nDESCRIPTION: Links the benchmark executable with required libraries including FirebaseFirestore, benchmark framework libraries, and Firestore test utilities. These dependencies provide the functionality needed for running and measuring performance tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Benchmarks/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n  firestore_remote_document_cache_benchmark PRIVATE\n  FirebaseFirestore\n  benchmark\n  benchmark_main\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Linker for Firebase iOS SDK\nDESCRIPTION: Allows specification of a custom linker (like mold) to potentially speed up build times during development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n  FIREBASE_LD_EXECUTABLE\n  \"\"\n  CACHE\n  STRING\n  \"The filename of the C/C++ linker to use. \\\n    For example, the default linker for clang and gcc is ld. \\\n    Using a fast linker, like mold (https://github.com/rui314/mold), \\\n    could be useful during development to reduce build/test cycle times.\"\n)\n\nif(NOT (\"${FIREBASE_LD_EXECUTABLE}\" STREQUAL \"\"))\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fuse-ld=${FIREBASE_LD_EXECUTABLE}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fuse-ld=${FIREBASE_LD_EXECUTABLE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring nanopb for Firebase iOS SDK\nDESCRIPTION: Sets up nanopb, a small Protocol Buffers implementation for microcontrollers and embedded systems, with specific configuration for Firebase's needs.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# nanopb\nset(nanopb_BUILD_GENERATOR ON CACHE BOOL \"Enable the nanopb generator\")\nset(nanopb_MSVC_STATIC_RUNTIME OFF CACHE BOOL \"Link static runtime libraries\")\nadd_external_subdirectory(nanopb)\n\ntarget_compile_definitions(\n  protobuf-nanopb-static PUBLIC\n  -DPB_FIELD_32BIT -DPB_ENABLE_MALLOC -DPB_NO_PACKED_STRUCTS=1\n)\n\n# Enable #include <nanopb/pb.h>\ntarget_include_directories(\n  protobuf-nanopb-static INTERFACE\n  $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/nanopb>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Functions in Objective-C++\nDESCRIPTION: Updated import statement for accessing Firebase Functions APIs in Objective-C++ code.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseCore/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Objective-C++\nCODE:\n```\n#import <FirebaseFunctions/FirebaseFunctions-Swift.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Proto Generation Commands\nDESCRIPTION: Sets up custom commands for generating Protocol Buffer source files for both Nanopb and C++ implementations.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  COMMENT \"Generating nanopb sources\"\n  OUTPUT ${NANOPB_GENERATED_SOURCES}\n  COMMAND\n    ${MY_PYTHON_EXECUTABLE}\n      ${CMAKE_CURRENT_SOURCE_DIR}/build_protos.py\n      --nanopb\n      --protoc=$<TARGET_FILE:protoc>\n      --pythonpath=${PROTOBUF_DIR}/python:${NANOPB_DIR}/generator\n      --output_dir=${OUTPUT_DIR}\n      ${PROTO_INCLUDES}\n  VERBATIM\n  DEPENDS\n    protoc\n    ${CMAKE_CURRENT_SOURCE_DIR}/build_protos.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/nanopb_cpp_generator.py\n    ${CMAKE_CURRENT_SOURCE_DIR}/lib/pretty_printing.py\n    ${NANOPB_PYTHON}\n    ${PROTOBUF_PYTHON}\n    ${PROTO_FILES}\n    ${PROTO_FILES_OPTIONS}\n    ${WELL_KNOWN_PROTO_FILES}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Remote Document Cache Benchmark Executable in CMake\nDESCRIPTION: Adds an executable target for the Firestore remote document cache benchmark using the firebase_ios_add_executable macro. This specifies the target name and the source file to compile.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Benchmarks/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_executable(\n  firestore_remote_document_cache_benchmark\n  remote_document_cache_benchmark.mm\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Field Value Benchmark in CMake\nDESCRIPTION: Sets up the benchmark build for Firestore field value if FIREBASE_IOS_BUILD_BENCHMARKS is enabled. It adds an executable for the benchmark and links it with necessary libraries including absl::variant, benchmark, benchmark_main, firestore_core, and firestore_testutil.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/model/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(FIREBASE_IOS_BUILD_BENCHMARKS)\n  firebase_ios_add_executable(\n    firestore_field_value_benchmark\n    field_value_benchmark.cc\n  )\n\n  target_link_libraries(\n    firestore_field_value_benchmark PRIVATE\n    absl::variant\n    benchmark\n    benchmark_main\n    firestore_core\n    firestore_testutil\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Advanced CMake Build on macOS/Linux\nDESCRIPTION: Example of using Ninja generator with custom download directory for building Firebase iOS SDK on macOS or Linux.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -H. -Bbuild -G Ninja -DFIREBASE_DOWNLOAD_DIR:PATH=$HOME/.downloads\ncd build\nninja && ninja test\n```\n\n----------------------------------------\n\nTITLE: Running Style Script for Firebase iOS SDK\nDESCRIPTION: This shell command runs the style script to check and fix code style issues in your branch. It should be used before submitting a pull request to ensure compliance with the project's style guidelines.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n# ./scripts/style.sh your_branch\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Environment for Proto Generation\nDESCRIPTION: Sets up the Python interpreter with required dependencies for proto generation using the FirebaseSetupPythonInterpreter function.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Protos/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(python_setup)\nFirebaseSetupPythonInterpreter(\n  OUTVAR MY_PYTHON_EXECUTABLE\n  KEY FirestoreProtos\n  REQUIREMENTS six\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Firestore Objective-C Directory Configuration in CMake\nDESCRIPTION: Checks if Objective-C support is enabled for Firestore and conditionally adds relevant subdirectories to the build. It adds directories for benchmarks, the main app implementation, and various test suites if the FIRESTORE_INCLUDE_OBJC flag is set.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIRESTORE_INCLUDE_OBJC)\n  return()\nendif()\n\nadd_subdirectory(Benchmarks)\n\nadd_subdirectory(App)\nadd_subdirectory(Tests/API)\nadd_subdirectory(Tests/Integration)\nadd_subdirectory(Tests/SpecTests)\nadd_subdirectory(Tests/Util)\n```\n\n----------------------------------------\n\nTITLE: Logger Implementation Selection for Firestore in CMake\nDESCRIPTION: Selects the appropriate logger implementation based on the target platform. Uses the Apple-specific logger for iOS and falls back to a standard IO implementation for other platforms.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Choose Logger implementation\nfirebase_ios_glob(\n  util_sources EXCLUDE src/util/log_*\n)\n\n# TODO(wilhuff): Can this be if(APPLE)?\nif(IOS)\n  firebase_ios_glob(\n    util_sources APPEND src/util/log_apple.mm\n  )\nelse()\n  firebase_ios_glob(\n    util_sources APPEND src/util/log_stdio.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Library for Firebase iOS SDK\nDESCRIPTION: Sets up Google Benchmark library for performance benchmarking when benchmarks are enabled, with special handling for iOS platform.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Benchmark\nif(FIREBASE_IOS_BUILD_BENCHMARKS)\n  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_EXCEPTIONS OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL \"Firestore disabled\")\n  set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL \"Firestore disabled\")\n\n  if(IOS)\n    # benchmark uses CMake's try_run, which doesn't work out of the box when\n    # compiling for iOS.\n    set(HAVE_STD_REGEX ON CACHE BOOL \"iOS has std::regex\")\n    set(HAVE_POSIX_REGEX ON CACHE BOOL \"iOS has POSIX regex.h\")\n    set(HAVE_STEADY_CLOCK ON CACHE BOOL \"iOS has std::chrono::steady_clock\")\n  endif()\n\n  add_external_subdirectory(benchmark)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ccache for Firebase iOS SDK\nDESCRIPTION: Enables ccache compilation cache if available, which can significantly speed up rebuilds by caching compiled objects.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Enable the ccache compilation cache, if available.\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  message(STATUS \"Found ccache: ${CCACHE_PROGRAM}\")\n  set(CMAKE_C_COMPILER_LAUNCHER   \"${CCACHE_PROGRAM}\")\n  set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS-Specific Firestore Objective-C Host App in CMake\nDESCRIPTION: Sets up the macOS version of the Firestore Objective-C host app, including source files, required frameworks (AppKit and Foundation), and bundle properties.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/App/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  # Assume macOS\n\n  file(GLOB sources macOS/*.h macOS/*.m)\n  firebase_ios_add_executable(firestore_objc_host_app MACOSX_BUNDLE ${sources})\n\n  target_link_libraries(\n    firestore_objc_host_app PRIVATE\n    \"-framework AppKit\"\n    \"-framework Foundation\"\n  )\n\n  set_target_properties(\n    firestore_objc_host_app PROPERTIES\n    MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/macOS/Info.plist\n    RESOURCE GoogleService-Info.plist\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy and LevelDB for Firebase iOS SDK\nDESCRIPTION: Sets up Snappy compression library and LevelDB key-value store database used by Firestore, disabling tests and benchmarks.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Snappy\nset(SNAPPY_BUILD_TESTS OFF CACHE BOOL \"Firestore disabled\")\nset(SNAPPY_BUILD_BENCHMARKS OFF CACHE BOOL \"Firestore disabled\")\nadd_external_subdirectory(snappy)\nfirebase_ios_add_alias(Snappy::Snappy snappy)\n\n# LevelDB\nset(LEVELDB_BUILD_TESTS OFF CACHE BOOL \"Firestore disabled\")\nset(LEVELDB_BUILD_BENCHMARKS OFF CACHE BOOL \"Firestore disabled\")\nset(LEVELDB_INSTALL OFF CACHE BOOL \"Firestore disabled\")\nadd_external_subdirectory(leveldb)\nfirebase_ios_add_alias(LevelDB::LevelDB leveldb)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Model Test Build in CMake\nDESCRIPTION: Sets up the test build for the Firestore model component if FIREBASE_IOS_BUILD_TESTS is enabled. It adds a test executable and links it with necessary libraries including GMock, absl_strings, firestore_core, and firestore_testutil.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/model/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FIREBASE_IOS_BUILD_TESTS)\n  firebase_ios_add_test(firestore_model_test ${sources})\n\n  target_link_libraries(\n    firestore_model_test PRIVATE\n    GMock::GMock\n    absl_strings\n    firestore_core\n    firestore_testutil\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Styling Code for a Specific Directory\nDESCRIPTION: Command to run the style script on a specific directory to format code according to project conventions. This example shows formatting code in the FirebaseStorage/Sources/ directory.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./scripts/style.sh FirebaseStorage/Sources/\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS-Specific Firestore Objective-C Host App in CMake\nDESCRIPTION: Sets up the iOS version of the Firestore Objective-C host app, including source files, required frameworks (Foundation and UIKit), and bundle properties.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/App/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(IOS)\n  file(GLOB sources iOS/*.h iOS/*.m)\n  firebase_ios_add_executable(firestore_objc_host_app MACOSX_BUNDLE ${sources})\n\n  target_link_libraries(\n    firestore_objc_host_app PRIVATE\n    \"-framework Foundation\"\n    \"-framework UIKit\"\n  )\n\n  set_target_properties(\n    firestore_objc_host_app PROPERTIES\n    MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/iOS/Firestore-Info.plist\n    RESOURCE GoogleService-Info.plist\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies for Firebase iOS SDK\nDESCRIPTION: Sets up CMake policies including disallowing mixing keyword and non-keyword forms of target_link_libraries, reporting AppleClang separately from Clang, enabling rpath by default, and handling Ninja phony rules for dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Disallow mixing keyword and non-keyword forms of target_link_libraries\nif(POLICY CMP0023)\n  cmake_policy(SET CMP0023 NEW)\nendif()\n\n# Report AppleClang separately from Clang. Their version numbers are different.\n# https://cmake.org/cmake/help/v3.0/policy/CMP0025.html\nif(POLICY CMP0025)\n  cmake_policy(SET CMP0025 NEW)\nendif()\n\n# Enable rpath by default\nif(POLICY CMP0042)\n  cmake_policy(SET CMP0042 NEW)\nendif()\n\n# Generate Ninja phony rules for unknown dependencies in the build tree and\n# don't complain about doing so. Our dependencies aren't good about declaring\n# BYPRODUCTS and we mix them all into a single superbuild so we can't enable\n# this policy until all dependencies are capable of doing so.\nif(POLICY CMP0058)\n  cmake_policy(SET CMP0058 OLD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Styling a Specific File\nDESCRIPTION: Command to run the style script on a single file. This allows developers to format just the files they've modified.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n./scripts/style.sh FirebaseStorage/Sources/Storage.swift\n```\n\n----------------------------------------\n\nTITLE: Firebase Auth Interop Framework Generation\nDESCRIPTION: Configures and generates the Firebase Auth Interop framework by gathering header files, generating dummy sources, and setting up framework properties.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Interop/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB headers Public/FirebaseAuthInterop/*.h)\nfirebase_ios_generate_dummy_source(FirebaseAuthInterop sources)\n\nfirebase_ios_add_framework(\n  FirebaseAuthInterop DISABLE_STRICT_WARNINGS EXCLUDE_FROM_ALL\n  ${headers} ${sources}\n)\n\nfirebase_ios_framework_public_headers(FirebaseAuthInterop ${headers})\n```\n\n----------------------------------------\n\nTITLE: Event Logging Example Without APIs (Before Implementation)\nDESCRIPTION: Demonstrates how event logging was implemented before the custom APIs, requiring separate onAppear blocks for screen view tracking and explicit event logging for user actions.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAnalytics/README.md#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Text(\"Welcome to our App!\")\n                .padding()\n            Button(\"Click Me!\") {\n                // Logging a custom event when the button is clicked.\n                Analytics.logEvent(\"button_clicked\", parameters: nil)\n            }\n        }\n        .onAppear {\n            // Logging the screen view event when the ContentView appears.\n            Analytics.logEvent(AnalyticsEventScreenView, parameters: [AnalyticsParameterScreenName: \"main_content\"])\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform Detection and Early Return for Firestore CMake\nDESCRIPTION: Checks if the target platform is Apple-based and returns early if not, since this configuration is only applicable to Apple platforms.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/App/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Firebase iOS SDK\nDESCRIPTION: Configures build options for enabling benchmarks and tests, which can be toggled on or off as needed.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\noption(\n  FIREBASE_IOS_BUILD_BENCHMARKS\n  \"Enable building of C++ and Objective-C benchmarks for this project\"\n  OFF\n)\n\noption(\n  FIREBASE_IOS_BUILD_TESTS\n  \"Enable building of C++ and Objective-C tests for this project\"\n  ON\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nanopb Test Build in Firebase iOS SDK\nDESCRIPTION: CMake configuration that handles the conditional compilation of Nanopb tests. It checks if tests are enabled, collects source files, and sets up the test target with required dependencies including GMock and Firestore components.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/nanopb/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n\nfile(GLOB sources *.cc *.h)\nfirebase_ios_add_test(firestore_nanopb_test ${sources})\n\ntarget_link_libraries(\n  firestore_nanopb_test PRIVATE\n  GMock::GMock\n  firestore_core\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore API Tests Build in CMake\nDESCRIPTION: This snippet sets up the Firestore API test build configuration. It first checks if tests should be built using the FIREBASE_IOS_BUILD_TESTS flag, collects all .cc source files in the directory, creates a test target, and links the necessary dependencies including GMock and the Firestore core library.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/api/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n\nfile(GLOB sources *.cc)\nfirebase_ios_add_test(firestore_api_test ${sources})\n\ntarget_link_libraries(\n  firestore_api_test PRIVATE\n  GMock::GMock\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: Executor Implementation Selection for Firestore in CMake\nDESCRIPTION: Determines which Executor implementation to use based on the availability of libdispatch. On platforms with libdispatch (typically Apple platforms), it uses ExecutorLibdispatch; otherwise, it falls back to ExecutorStd.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Choose Executor implementation\n\n# Comment out this check on macOS to build with ExecutorStd instead of\n# ExecutorLibdispatch.\ncheck_symbol_exists(dispatch_async_f dispatch/dispatch.h HAVE_LIBDISPATCH)\n\nfirebase_ios_glob(\n  util_sources EXCLUDE src/util/executor_*\n)\nif(HAVE_LIBDISPATCH)\n  firebase_ios_glob(\n    util_sources APPEND src/util/executor_libdispatch.*\n  )\nelse()\n  firebase_ios_glob(\n    util_sources APPEND src/util/executor_std.*\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Immutable Tests in CMake for Firebase iOS SDK\nDESCRIPTION: This CMake script sets up the test configuration for Firestore immutable tests. It first checks if tests are enabled, then collects source files with glob patterns, adds them as a test target, and links the necessary dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/immutable/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n\nfile(GLOB sources *.cc *.h)\nfirebase_ios_add_test(firestore_immutable_test ${sources})\n\ntarget_link_libraries(\n  firestore_immutable_test PRIVATE\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Firestore Objective-C Build Option in CMake\nDESCRIPTION: Defines a CMake option to control whether the Firestore Objective-C layer should be built. This allows the firebase-cpp-sdk to avoid unnecessary builds of Objective-C APIs and tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(FIRESTORE_INCLUDE_OBJC \"Build the Firestore Objective-C layer\" ON)\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase Installation ID Change Notification in Swift\nDESCRIPTION: Swift notification key for Installation ID changes, renamed from kFIRInstallationIDDidChangeNotificationAppNameKey to InstallationIDDidChangeAppNameKey in version 7.0.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nInstallationIDDidChangeAppNameKey\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Integration Test Build in CMake\nDESCRIPTION: Sets up the build configuration for Firestore Objective-C integration tests. Includes source files, links required libraries, and configures test resources. Only builds when tests are enabled and targeting Apple platforms.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Tests/Integration/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS OR NOT APPLE)\n  return()\nendif()\n\nfile(GLOB sources *.h *.mm API/*.h API/*.mm ../../App/GoogleService-Info.plist)\n\nfirebase_ios_add_objc_test(\n  firestore_objc_integration_test\n  firestore_objc_host_app\n  ${sources}\n)\n\ntarget_link_libraries(\n  firestore_objc_integration_test PRIVATE\n  FirebaseFirestore\n  firestore_core\n  firestore_objc_testing\n)\n\nset_target_properties(\n  firestore_objc_integration_test PROPERTIES\n  RESOURCE ../../App/GoogleService-Info.plist\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Vertex AI Mock Responses via Shell Script\nDESCRIPTION: Shell script path for updating mock response files required for unit testing. The script downloads test data from the vertexai-sdk-test-data repository.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseVertexAI/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscripts/update_vertexai_responses.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing GULHeartbeatDateStorage\nDESCRIPTION: Reference to GULHeartbeatDateStorage access that was moved out of the main thread in version 1.1.1 for performance improvements.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\nGULHeartbeatDateStorage\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Objective-C Testing Library in CMake\nDESCRIPTION: Sets up the Firestore Objective-C testing library by globbing source files and defining library dependencies. The configuration checks if tests are enabled and if building for Apple platforms before proceeding with the library setup.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Tests/Util/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS OR NOT APPLE)\n  return()\nendif()\n\nfile(GLOB sources *.h *.mm)\nfirebase_ios_add_library(firestore_objc_testing ${sources})\n\ntarget_link_libraries(\n  firestore_objc_testing PUBLIC\n  ${XCTest_LIBRARIES}\n  FirebaseFirestore\n  GTest::GTest\n  absl_strings\n  firestore_remote_testing\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Apple Platform Check in CMake\nDESCRIPTION: Conditional check to ensure the build only proceeds on Apple platforms, exiting if not running on Apple systems.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAppCheck/Interop/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Build Configuration in CMake\nDESCRIPTION: Checks if tests should be built and exits if not enabled\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase iOS Bundle Test Build\nDESCRIPTION: CMake configuration that conditionally builds bundle tests and links required dependencies. The script checks for test build flag, compiles all .cc source files, and links against GMock, firestore core, protobuf, and test utilities.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/bundle/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n    return()\nendif()\n\nfile(GLOB sources *.cc)\nfirebase_ios_add_test(firestore_bundle_test ${sources})\n\ntarget_link_libraries(\n        firestore_bundle_test PRIVATE\n        GMock::GMock\n        firestore_core\n        firestore_protos_protobuf\n        firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase Version in Swift/Objective-C\nDESCRIPTION: Shows how to access the Firebase version after the removal of global variables FirebaseAuthVersionNum and FirebaseAuthVersionStr in version 7.0.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nFirebaseVersion()\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\nFIRFirebaseVersion()\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Objective-C Specification Tests in CMake\nDESCRIPTION: This CMake configuration sets up Objective-C specification tests for Firestore. It first checks if tests are enabled and if building for Apple platforms, then configures the test target with necessary source files and dependencies. It also ensures tests run in the correct working directory for proper path resolution.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Tests/SpecTests/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS OR NOT APPLE)\n  return()\nendif()\n\nfile(GLOB sources *.h *.mm)\n\nfirebase_ios_add_objc_test(\n  firestore_objc_spec_test\n  firestore_objc_host_app\n  ${sources}\n)\n\ntarget_link_libraries(\n  firestore_objc_spec_test PRIVATE\n  FirebaseFirestore\n  firestore_local_testing\n  firestore_objc_testing\n  firestore_remote_testing\n)\n\n# Force this to run in the project-wide binary directory so that relative\n# paths used during compilation are usable.\nset_property(\n  TEST firestore_objc_spec_test PROPERTY\n  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Auth Components with Shared Instance in Objective-C\nDESCRIPTION: This code snippet demonstrates how to register multiple Auth components (FIRAuthCombinedInterop, FIRAuthUserInterop, and FIRAuthSignInInterop) while sharing a single Auth instance. It uses a combined protocol and creation blocks to achieve this functionality.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_9\n\nLANGUAGE: Objective-C\nCODE:\n```\n+ (NSArray<FIRComponent *> *)componentsToRegister {\n  // Standard creation block to get an instance of Auth.\n  FIRComponentCreationBlock authBlock =\n    ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n      *isCacheable = YES;\n      return [[FIRAuth alloc] initWithApp:container.app];\n    };\n\n  FIRComponentCreationBlock combinedBlock =\n    ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n      // No need to cache, let it use the cached value from the combined component.\n      return FIR_COMPONENT(FIRAuthCombinedInterop, container);\n    };\n\n  // Declare the three components provided.\n  FIRComponent *authComponent =\n      [FIRComponent componentWithProtocol:@protocol(FIRAuthCombinedInterop)\n                            creationBlock:authBlock];\n\n  // Both the user and sign in components depend on the previous component as\n  // declared in the dependency above.\n\n  FIRComponent *userComponent =\n      [FIRComponent componentWithProtocol:@protocol(FIRAuthUserInterop)\n                      instantiationTiming:FIRInstantiationTimingLazy\n                            creationBlock:combinedBlock];\n\n  FIRComponent *signInComponent =\n      [FIRComponent componentWithProtocol:@protocol(FIRAuthSignInInterop)\n                      instantiationTiming:FIRInstantiationTimingLazy\n                            creationBlock:combinedBlock];\n\n  return @[ authComponent, userComponent, signInComponent ];\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Firestore Test Utility in CMake\nDESCRIPTION: Sets up library dependencies for the 'firestore_testutil' target, including Google Test, Google Mock, and Abseil libraries.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/testutil/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n  firestore_testutil\n  GMock::GMock\n  GTest::GTest\n  absl_strings\n  absl_time\n  firestore_core\n  firestore_remote_testing\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Benchmark Builds\nDESCRIPTION: Configures benchmark builds for the Firebase iOS SDK, including platform-specific benchmarks and their dependencies.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/util/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(FIREBASE_IOS_BUILD_BENCHMARKS)\n  firebase_ios_add_executable(\n    firestore_ordered_code_benchmark\n    ordered_code_benchmark.cc\n  )\n\n  target_link_libraries(\n    firestore_ordered_code_benchmark PRIVATE\n    benchmark\n    benchmark_main\n    firestore_core\n  )\nendif()\n\nif(FIREBASE_IOS_BUILD_BENCHMARKS AND APPLE)\n  firebase_ios_add_executable(\n    firestore_string_apple_benchmark\n    string_apple_benchmark.mm\n  )\n\n  target_link_libraries(\n    firestore_string_apple_benchmark PRIVATE\n    benchmark\n    benchmark_main\n    firestore_core\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Objective-C API Tests with CMake\nDESCRIPTION: This CMake script configures the Firestore Objective-C API tests. It first checks if tests should be built based on build flags and platform, then collects all test source files and sets up the test target with necessary dependencies including FirebaseFirestore and the testing library.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Tests/API/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS OR NOT APPLE)\n  return()\nendif()\n\nfile(GLOB sources *.h *.mm)\nfirebase_ios_add_objc_test(\n  firestore_objc_api_test\n  firestore_objc_host_app\n  ${sources}\n)\ntarget_link_libraries(\n  firestore_objc_api_test PRIVATE\n  FirebaseFirestore\n  firestore_objc_testing\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake C++ Extensions and Compiler Flags\nDESCRIPTION: Configures basic CMake C++ settings and compiler flags. Enables C++ extensions and adds a specific compiler flag for non-MSVC compilers to allow zero-length printf strings in tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/util/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_EXTENSIONS ON)\n\n# Required to allow 0 length printf style strings for testing purposes.\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-format-zero-length\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Firestore Remote Testing Library Configuration\nDESCRIPTION: Adds a library target for firestore remote testing with specified sources\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_add_library(\n  firestore_remote_testing EXCLUDE_FROM_ALL\n  ${remote_testing_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Source File Globbing for Firestore Test Utility in CMake\nDESCRIPTION: Collects source files for the Firestore test utility, excluding 'app_testing.h'. For Apple platforms, it includes 'app_testing.*' files.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/testutil/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_glob(sources *.cc *.h EXCLUDE app_testing.h)\nif(APPLE)\n  firebase_ios_glob(sources APPEND app_testing.*)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Firebase iOS SDK Repository via HTTPS\nDESCRIPTION: Command to clone the Firebase iOS SDK repository using HTTPS. This is the first step to get the codebase locally for development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/firebase/firebase-ios-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Check for Firestore Benchmarks in CMake\nDESCRIPTION: Checks if benchmarks are enabled and if the target platform is Apple. If either condition is not met, the script returns early without configuring the benchmark build.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/Example/Benchmarks/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_BENCHMARKS OR NOT APPLE)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Firestore Test Utility Library in CMake for Firebase iOS SDK\nDESCRIPTION: Creates the 'firestore_testutil' library using the collected source files, excluding it from the default build target.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/testutil/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_library(firestore_testutil EXCLUDE_FROM_ALL ${sources})\n```\n\n----------------------------------------\n\nTITLE: Apple-Specific Library Linking for Firestore Test Utility in CMake\nDESCRIPTION: Adds Apple-specific library dependencies (XCTest and FirebaseCore) when building for Apple platforms.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/testutil/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  target_link_libraries(\n    firestore_testutil\n    ${XCTest_LIBRARIES}\n    FirebaseCore\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Swift Constant in Firebase In-App Messaging\nDESCRIPTION: This code snippet indicates the removal of a deprecated 'foo' constant from the Swift InAppMessagingPreviewHelpers API in Firebase In-App Messaging SDK.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nRemoved `foo` constant from Swift `InAppMessagingPreviewHelpers` API\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Build Configuration in CMake for Firebase iOS SDK\nDESCRIPTION: Checks if tests are enabled for the Firebase iOS SDK build. If not, the script exits early.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/testutil/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Build Configuration in CMake for Firestore Types Test\nDESCRIPTION: Configures the build process for Firestore types test in CMake. The code only proceeds if FIREBASE_IOS_BUILD_TESTS is enabled. It collects all .cc source files in the directory, adds them to a test target, and links the required dependencies including absl_time and firestore_core libraries.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n\nfile(GLOB sources *.cc)  # not .mm\nfirebase_ios_add_test(firestore_types_test ${sources})\n\ntarget_link_libraries(\n  firestore_types_test PRIVATE\n  absl_time\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: Using UserAccessGroup in Firebase Auth\nDESCRIPTION: Mentions the handling of calls to useUserAccessGroup soon after configuration, which was fixed in version 6.5.2.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nuseUserAccessGroup\n```\n\n----------------------------------------\n\nTITLE: Firestore Remote Test Target Configuration\nDESCRIPTION: Adds the main test target for firestore remote testing\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_add_test(firestore_remote_test ${sources})\n```\n\n----------------------------------------\n\nTITLE: Cloning Firebase iOS SDK Repository via SSH\nDESCRIPTION: Command to clone the Firebase iOS SDK repository using SSH. An alternative to HTTPS cloning for developers who have SSH keys set up with GitHub.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:firebase/firebase-ios-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Build Sources\nDESCRIPTION: Configures test build sources for Firebase iOS SDK, including platform-specific file selection and conditional inclusion of libdispatch tests based on availability.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/util/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FIREBASE_IOS_BUILD_TESTS)\n  firebase_ios_glob(\n    sources *.cc *.h\n    EXCLUDE *_benchmark.cc *_std_test.cc\n  )\n\n  if(APPLE)\n    firebase_ios_glob(\n      sources APPEND *.mm\n      EXCLUDE *_benchmark.mm *_libdispatch_test.mm\n    )\n  endif()\n\n  if(HAVE_LIBDISPATCH)\n    firebase_ios_glob(sources APPEND *_libdispatch_test.mm)\n  else()\n    firebase_ios_glob(sources APPEND *_std_test.cc)\n  endif()\n\n  firebase_ios_add_test(firestore_util_test ${sources})\n\n  target_link_libraries(\n    firestore_util_test PRIVATE\n    GMock::GMock\n    absl_base\n    absl_optional\n    absl_strings\n    firestore_core\n    firestore_testutil\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Test Dependencies for Local Tests\nDESCRIPTION: Links all required testing dependencies including GMock, core libraries, and testing utilities.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/local/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  firestore_local_test PRIVATE\n  GMock::GMock\n  firestore_core\n  firestore_local_testing\n  firestore_protos_protobuf\n  firestore_remote_testing\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ResourcePath Fuzzing Target in CMake for Firebase iOS SDK\nDESCRIPTION: Configures the ResourcePath fuzzing target, reusing the FieldPath dictionary and corpus, using the firebase_ios_add_fuzz_test build rule.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/fuzzing/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_fuzz_test(\n  firestore_resourcepath_fuzzer\n  DICTIONARY ${fuzzing_resources}/FieldPath/fieldpath.dictionary\n  CORPUS     ${fuzzing_resources}/FieldPath/Corpus\n  resourcepath_fuzzer.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Serializer Fuzzing Target in CMake for Firebase iOS SDK\nDESCRIPTION: Configures the serializer fuzzing target using the firebase_ios_add_fuzz_test build rule. It specifies the dictionary and corpus for the serializer fuzzer.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/fuzzing/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_fuzz_test(\n  firestore_serializer_fuzzer\n  DICTIONARY ${fuzzing_resources}/Serializer/serializer.dictionary\n  CORPUS     ${fuzzing_resources}/Serializer/Corpus/BinaryProtos\n  serializer_fuzzer.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase iOS Test Build\nDESCRIPTION: Conditional CMake configuration that controls test compilation and links required test dependencies for the Firestore core module. Only executes if FIREBASE_IOS_BUILD_TESTS is enabled.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/core/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT FIREBASE_IOS_BUILD_TESTS)\n  return()\nendif()\n\nfile(GLOB sources *.cc)\nfirebase_ios_add_test(firestore_core_test ${sources})\n\ntarget_link_libraries(\n  firestore_core_test PRIVATE\n  GMock::GMock\n  firestore_core\n  firestore_testutil\n)\n```\n\n----------------------------------------\n\nTITLE: Remote Testing Library Dependencies\nDESCRIPTION: Links required libraries to the firestore remote testing target\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  firestore_remote_testing PUBLIC\n  absl_memory\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: File Path Reference\nDESCRIPTION: References to key workflow and script files in the repository structure that are part of the CI system.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/ContinuousIntegration.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncheck.yml\nspm.yml\nzip.yml\nscripts/create_spec_repo\nrelease.yml\nprerelease.yml\nspectesting.yml\ngenerate_issues.yml\ntest_coverage.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Firebase iOS SDK Dependencies\nDESCRIPTION: Sets up the CMake project for downloading Firebase iOS SDK dependencies. It defines the minimum CMake version, project name, module paths, and download directory. Then it includes multiple external libraries and tools required for the project.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/cmake/external/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5.1)\nproject(Firebase-download C CXX)\n\nlist(\n  APPEND\n  CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_LIST_DIR}\n  ${CMAKE_CURRENT_LIST_DIR}/..\n)\n\nset(\n  FIREBASE_DOWNLOAD_DIR\n  ${PROJECT_BINARY_DIR}/downloads\n  CACHE PATH \"Where to store downloaded files\"\n)\n\ninclude(abseil-cpp)\ninclude(benchmark)\ninclude(boringssl)\ninclude(c-ares)\ninclude(googletest)\ninclude(GoogleUtilities)\ninclude(grpc)\ninclude(snappy)\ninclude(leveldb)\ninclude(libfuzzer)\ninclude(nanopb)\ninclude(protobuf)\ninclude(re2)\ninclude(zlib)\n```\n\n----------------------------------------\n\nTITLE: Generating FirebaseFunctions Workspace with CocoaPods\nDESCRIPTION: Commands to generate and open an Xcode workspace for developing the FirebaseFunctions CocoaPod. Shows both individual commands and the combined approach using pod gen.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseFunctions/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npod gen FirebaseFunctions.podspec --local-sources=./\nopen gen/FirebaseFunctions/FirebaseFunctions.xcworkspace\n```\n\nLANGUAGE: shell\nCODE:\n```\npod gen FirebaseFunctions.podspec --auto-open --gen-directory=\"gen\" --clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase A/B Testing Experiment in JSON\nDESCRIPTION: This JSON configuration defines a Firebase A/B Testing experiment with ID 'exp_1' and variant 'var_1'. It specifies various experiment parameters including trigger events, timeouts, event logging configurations, and overflow policy settings. The configuration also includes a list of ongoing experiments.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseRemoteConfig/Tests/Unit/TestABTPayload.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_1\",\n  \"variantId\": \"var_1\",\n  \"triggerEvent\": \"customTrigger\",\n  \"experimentStartTime\": \"1970-05-23T21:21:18.000Z\",\n  \"triggerTimeoutMillis\": 15552000000,\n  \"timeToLiveMillis\": 15552000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\",\n  \"overflowPolicy\": 2,\n  \"ongoingExperiments\": [\n    {\n      \"experimentId\": \"exp_1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored User for Access Group in Firebase Auth\nDESCRIPTION: Refers to a method for retrieving a stored user for an access group, which had its return type corrected to be non-null in version 6.1.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\ngetStoredUserForAccessGroup:error:\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Example\nDESCRIPTION: Example reference to a GitHub issue number showing test report format.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/ContinuousIntegration.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#7797\n```\n\n----------------------------------------\n\nTITLE: Dependency Graph Placeholder Section\nDESCRIPTION: Section marked with __INTEGRATION__ placeholder that explains SDK dependencies using the notation (~> X) to indicate required xcframeworks.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/Template/METADATA.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n__INTEGRATION__\n```\n\n----------------------------------------\n\nTITLE: Test Source Files Globbing\nDESCRIPTION: Collects all test source files excluding the remote testing sources\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_glob(\n  sources *.cc *.h\n  EXCLUDE ${remote_testing_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Clang-specific Diagnostic Pragmas in C++\nDESCRIPTION: This snippet adds Clang-specific diagnostic pragmas to ignore deprecation warnings. It is inserted at the beginning of the file, after the include guard.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/cmake/external/abseil-cpp.patch.txt#2025-04-11_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Added by firebase-ios-sdk/cmake/external/abseil-cpp.patch.txt\n#if __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated\"\n#endif  // __clang__\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace for Functions Example\nDESCRIPTION: Command to initialize the Firebase Functions example workspace using CocoaPods, preparing it for integration testing.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseFunctions/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Sources with Glob Pattern\nDESCRIPTION: Collects test source files using glob pattern while excluding the local testing sources.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/local/CMakeLists.txt#2025-04-11_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_glob(\n  sources *.cc *.h\n  EXCLUDE ${local_testing_sources}\n)\nfirebase_ios_add_test(firestore_local_test ${sources})\n```\n\n----------------------------------------\n\nTITLE: Closing Clang-specific Diagnostic Pragmas in C++\nDESCRIPTION: This snippet closes the Clang-specific diagnostic pragmas that were opened at the beginning of the file. It is inserted at the end of the file, before the closing include guard.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/cmake/external/abseil-cpp.patch.txt#2025-04-11_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Added by firebase-ios-sdk/cmake/external/abseil-cpp.patch.txt\n#if __clang__\n#pragma clang diagnostic pop\n#endif  // __clang__\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Testing Sources in CMake\nDESCRIPTION: Defines the source files needed for local testing functionality in the Firestore module.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/local/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n  local_testing_sources\n  counting_query_engine.cc\n  counting_query_engine.h\n  persistence_testing.cc\n  persistence_testing.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining FieldPath Fuzzing Target in CMake for Firebase iOS SDK\nDESCRIPTION: Sets up the FieldPath fuzzing target with its dictionary and corpus using the firebase_ios_add_fuzz_test build rule.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/fuzzing/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_fuzz_test(\n  firestore_fieldpath_fuzzer\n  DICTIONARY ${fuzzing_resources}/FieldPath/fieldpath.dictionary\n  CORPUS     ${fuzzing_resources}/FieldPath/Corpus\n  fieldpath_fuzzer.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Selection for Firestore Util Library in CMake\nDESCRIPTION: Selects the appropriate source files for the firestore_util library based on the target platform (Apple, Windows, or Linux/UNIX). This ensures platform-specific implementations are used while excluding incompatible source files.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfile(\n  GLOB util_sources\n  src/util/*.cc\n  src/util/*.h\n)\n\nif(APPLE)\n  firebase_ios_glob(\n    util_sources APPEND src/util/*.mm\n    EXCLUDE src/util/*_win.cc\n  )\n\nelseif(WIN32)\n  firebase_ios_glob(\n    util_sources EXCLUDE\n    src/util/*_apple.*\n    src/util/*_posix.*\n  )\n\nelse()\n  # Linux and other UNIX systems.\n  firebase_ios_glob(\n    util_sources EXCLUDE\n    src/util/*_apple.cc\n    src/util/*_win.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Firestore Test Directories Configuration in CMake\nDESCRIPTION: Sets up the test directories for various components of the Firestore library. Each subdirectory contains tests for specific parts of the Firestore implementation.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/CMakeLists.txt#2025-04-11_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(test/unit/testutil)\nadd_subdirectory(test/unit)\nadd_subdirectory(test/unit/api)\nadd_subdirectory(test/unit/bundle)\nadd_subdirectory(test/unit/credentials)\nadd_subdirectory(test/unit/core)\nadd_subdirectory(test/unit/immutable)\nadd_subdirectory(test/unit/local)\nadd_subdirectory(test/unit/model)\nadd_subdirectory(test/unit/objc)\nadd_subdirectory(test/unit/nanopb)\nadd_subdirectory(test/unit/remote)\nadd_subdirectory(test/unit/util)\n```\n\n----------------------------------------\n\nTITLE: Adding Firestore Local Testing Library in CMake\nDESCRIPTION: Creates a library target for Firestore local testing components, excluding it from default build targets.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/local/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfirebase_ios_add_library(\n  firestore_local_testing\n  EXCLUDE_FROM_ALL\n  ${local_testing_sources}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring BoringSSL and OpenSSL Compatibility for Firebase iOS SDK\nDESCRIPTION: Sets up BoringSSL to look like OpenSSL when external OpenSSL is not found, ensuring compatibility with libraries expecting OpenSSL.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMakeLists.txt#2025-04-11_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Fix up targets included by boringssl (ver: b9232f9e27e5668bc0414879dcdedb2a59ea75f2)\n# We might be able to remove this with newer versions.\nif(CXX_CLANG)\n  if(TARGET crypto)\n    target_compile_options(\n      crypto PRIVATE\n      -Wno-unused-but-set-variable\n    )\n  endif()\nendif()\n\nif(MSVC)\n  # Disable warnings about unsafe use of std::copy\n  target_compile_definitions(\n    absl_strings PUBLIC\n    _SCL_SECURE_NO_WARNINGS=1\n  )\nendif()\n\nif(NOT OPENSSL_FOUND)\n  # Not using outboard OpenSSL so set up BoringSSL to look like it.\n  firebase_ios_add_alias(OpenSSL::Crypto crypto)\n  target_include_directories(\n    crypto INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src/include>\n  )\n\n  firebase_ios_add_alias(OpenSSL::SSL ssl)\n  target_include_directories(\n    ssl INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/boringssl/src/include>\n  )\nendif()\n\nif(NOT ZLIB_FOUND)\n  target_include_directories(\n    zlibstatic INTERFACE\n    $<BUILD_INTERFACE:${FIREBASE_EXTERNAL_SOURCE_DIR}/grpc/third_party/zlib>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Remote Testing Sources Glob Configuration\nDESCRIPTION: Defines source files for remote testing functionality using GLOB\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/remote/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(\n  GLOB remote_testing_sources\n  create_noop_connectivity_monitor.*\n  fake_target_metadata_provider.*\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Generated Xcode Workspace\nDESCRIPTION: Command to open the generated Xcode workspace for Crashlytics development.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Crashlytics/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopen gen/FirebaseCrashlytics/FirebaseCrashlytics.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Dependency to Functions Component in Objective-C\nDESCRIPTION: Demonstrates how to add a dependency on FIRAuthInterop when registering the Functions component. It includes retrieving the Auth instance and injecting it into the Functions constructor.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\n+ (NSArray<FIRComponent *> *)componentsToRegister {\n  FIRComponentCreationBlock creationBlock =\n    ^id _Nullable(FIRComponentContainer *container, BOOL *isCacheable) {\n      *isCacheable = YES;\n\n      id<FIRAuthInterop> auth = FIR_COMPONENT(FIRAuthInterop, container);\n\n      return [[FIRFunctions alloc] initWithApp:container.app auth:auth];\n    };\n\n  FIRComponent *internalProvider =\n      [FIRComponent componentWithProtocol:@protocol(FIRFunctionsInstanceProvider)\n                      instantiationTiming:FIRInstantiationTimingLazy\n                            creationBlock:creationBlock];\n\n  return @[ internalProvider ];\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request Reference Example\nDESCRIPTION: Example reference to a GitHub pull request showing code coverage report format.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/docs/ContinuousIntegration.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#7788#issuecomment-807690514\n```\n\n----------------------------------------\n\nTITLE: Styling Code for a Specific Branch\nDESCRIPTION: Command to run the style script on all files changed in a specific branch. This helps maintain code style consistency when working on a feature branch.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./scripts/style.sh fix-storage-bug\n```\n\n----------------------------------------\n\nTITLE: Firebase App Check Interop Framework Configuration\nDESCRIPTION: Configures the Firebase App Check Interop framework by gathering header files, generating dummy sources, and setting up the framework with public headers. Uses glob pattern to collect all public headers.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAppCheck/Interop/CMakeLists.txt#2025-04-11_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB headers Public/FirebaseAppCheckInterop/*.h)\nfirebase_ios_generate_dummy_source(FirebaseAppCheckInterop sources)\n\nfirebase_ios_add_framework(\n  FirebaseAppCheckInterop DISABLE_STRICT_WARNINGS EXCLUDE_FROM_ALL\n  ${headers} ${sources}\n)\n\nfirebase_ios_framework_public_headers(FirebaseAppCheckInterop ${headers})\n```\n\n----------------------------------------\n\nTITLE: Opening Firebase Package with Swift Package Manager for Development\nDESCRIPTION: Command to open the main package definition for development using Swift Package Manager. After opening, you can select or add a scheme for the test target to make modifications and run tests.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseTestingSupport/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nxed Package.swift\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Interoperability Protocol in Objective-C\nDESCRIPTION: Defines a simple protocol 'FIRAuthInterop' that Auth could conform to and provide to other frameworks. It includes a method to get the current Auth user's UID.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Interop/FirebaseComponentSystem.md#2025-04-11_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n@protocol FIRAuthInterop\n/// Get the current Auth user's UID. Returns nil if there is no user signed in.\n- (nullable NSString *)getUserID;\n@end\n```\n\n----------------------------------------\n\nTITLE: Globbing Firestore Model Source Files in CMake\nDESCRIPTION: Uses a custom Firebase iOS globbing function to include all .cc and .h files in the current directory and mutation subdirectory for the Firestore model component.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/model/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_glob(\n  sources *.cc *.h mutation/*.cc mutation/*.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Standard Library Linker Flag in Xcode Build Settings\nDESCRIPTION: Instructions for adding the '-lc++' flag to Other Linker Settings in Xcode. This step is required for linking the C++ standard library, which is needed by some Firebase SDKs.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/ReleaseTooling/Template/README.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-lc++\n```\n\n----------------------------------------\n\nTITLE: Linking Core Dependencies for Local Testing Library\nDESCRIPTION: Links the Firestore core library to the local testing library.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/core/test/unit/local/CMakeLists.txt#2025-04-11_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  firestore_local_testing PRIVATE\n  firestore_core\n)\n```\n\n----------------------------------------\n\nTITLE: Firebase Emulator Setup Command for Firestore Sample\nDESCRIPTION: Command to launch the local Firebase Emulator Suite referenced in the instructions. This script allows developers to run the Firestore sample against a local emulator rather than production servers.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Example/FirestoreSample/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrun.sh\n```\n\n----------------------------------------\n\nTITLE: Advanced CMake Build on Windows\nDESCRIPTION: Example of using Ninja generator with custom download directory and OpenSSL path for building Firebase iOS SDK on Windows.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/CMAKE.md#2025-04-11_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir %USERPROFILE%\\AppData\\LocalLow\\CMake\ncmake -H. -Bbuild -G Ninja ^\n    -DFIREBASE_DOWNLOAD_DIR:PATH=%USERPROFILE%\\AppData\\LocalLow\\CMake ^\n    -DOPENSSL_ROOT_DIR:Path=\"c:\\Program Files\\OpenSSL-Win64\"\n```\n\n----------------------------------------\n\nTITLE: Platform Check for Apple Systems\nDESCRIPTION: Checks if the build platform is Apple-based, returns if not applicable.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseAuth/Interop/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase Version in Objective-C\nDESCRIPTION: Methods to access Firebase version information, replacing the deprecated FIRInstallationsVersionStr global variable in version 7.0.0.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInstallations/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nFirebaseVersion() // or\nFIRFirebaseVersion()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Environment in CMake for Firebase iOS SDK\nDESCRIPTION: Sets up the fuzzing environment, including finding the fuzzer library and setting the fuzzing resources directory. It also defines common link libraries for the fuzzing targets.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/fuzzing/CMakeLists.txt#2025-04-11_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT FUZZING)\n  return()\nendif()\n\nfind_package(Fuzzer REQUIRED)\n\nset(\n  fuzzing_resources\n  ${FIREBASE_SOURCE_DIR}/Firestore/Example/FuzzTests/FuzzingResources\n)\n\nlink_libraries(firestore_core firestore_util)\n```\n\n----------------------------------------\n\nTITLE: Defining LevelDB Fuzzing Target in CMake for Firebase iOS SDK\nDESCRIPTION: Sets up the LevelDB fuzzing target with its dictionary using the firebase_ios_add_fuzz_test build rule. This target doesn't specify a corpus.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Firestore/fuzzing/CMakeLists.txt#2025-04-11_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfirebase_ios_add_fuzz_test(\n  firestore_leveldb_fuzzer\n  DICTIONARY ${fuzzing_resources}/LevelDb/leveldb.dictionary\n  leveldb_fuzzer.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Firebase InAppMessaging Display SDK Test Project\nDESCRIPTION: This command sequence demonstrates how to prepare and run the Firebase InAppMessaging Display SDK test project. It includes navigating to the example directory, updating CocoaPods dependencies, opening the Xcode workspace, and instructions for running tests or the sample app.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseInAppMessaging/Tests/Integration/DefaultUITestApp/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd InAppMessaging/Example\n$ pod update\n$ open InAppMessagingDisplay-Sample.xcworkspace\nSelect the FiamDisplaySwiftExample scheme\n⌘-u to build and run the UI tests or ⌘-R to run the sample app.\n```\n\n----------------------------------------\n\nTITLE: Configuring Podspec Presubmit Test Job in GitHub Actions for Firebase iOS SDK\nDESCRIPTION: This YAML snippet defines a GitHub Actions job for running podspec presubmit tests. It specifically targets the FirebaseDatabase podspec, using multiple sources for validation and skipping tests. The job runs on macOS and is triggered for pull requests that haven't been merged or closed.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/create_spec_repo/README.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npodspec-presubmit:\n    # Don't run on private repo unless it is a PR.\n    if: github.repository == 'Firebase/firebase-ios-sdk' && github.event.pull_request.merged != true && github.event.action != 'closed'\n    runs-on: macOS-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: ruby/setup-ruby@359bebbc29cbe6c87da6bc9ea3bc930432750108\n      with:\n        ruby-version: '2.7'\n    - name: Setup Bundler\n      run: scripts/setup_bundler.sh\n    - name: Build and test\n      run: scripts/third_party/travis/retry.sh pod spec lint FirebaseDatabase.podspec --skip-tests --sources='https://github.com/firebase/SpecsTesting','https://github.com/firebase/SpecsDev.git','https://github.com/firebase/SpecsStaging.git','https://cdn.cocoapods.org/'\n```\n\n----------------------------------------\n\nTITLE: Installing Carthage via Homebrew\nDESCRIPTION: Commands to install Carthage package manager using Homebrew on macOS\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/Carthage.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew update\n$ brew install carthage\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase A/B Testing Experiment in JSON\nDESCRIPTION: This JSON configuration specifies the parameters for a Firebase A/B Testing experiment, including identifiers, trigger events, timeouts, event logging names, and policies. It defines timestamps, duration constraints, and tracking for ongoing experiments.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload1.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_1\",\n  \"variantId\": \"var_1\",\n  \"triggerEvent\": \"customTrigger\",\n  \"experimentStartTime\": \"2020-04-08T16:44:39.023Z\",\n  \"triggerTimeoutMillis\": 15552000000,\n  \"timeToLiveMillis\": 15552000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\",\n  \"overflowPolicy\": 2,\n  \"ongoingExperiments\": [\n    {\n      \"experimentId\": \"exp_1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Experiment Settings in JSON\nDESCRIPTION: JSON configuration object that defines experiment parameters including IDs, timing constraints, event logging triggers, and policy settings. Contains experiment and variant identifiers, timeout settings in milliseconds, and custom event logging names.\nSOURCE: https://github.com/firebase/firebase-ios-sdk/blob/main/FirebaseABTesting/Tests/Unit/Resources/TestABTPayload6.txt#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentId\": \"exp_1\",\n  \"variantId\": \"var_2\",\n  \"experimentStartTime\": \"2020-04-08T16:44:39.023Z\",\n  \"triggerTimeoutMillis\": 15552000000,\n  \"timeToLiveMillis\": 15552000000,\n  \"setEventToLog\": \"set_event\",\n  \"activateEventToLog\": \"activate_event\",\n  \"clearEventToLog\": \"clear_event\",\n  \"timeoutEventToLog\": \"timeout_event\",\n  \"ttlExpiryEventToLog\": \"ttl_expiry_event\",\n  \"overflowPolicy\": 2\n}\n```"
  }
]