[
  {
    "owner": "chris1610",
    "repo": "sidetable",
    "content": "TITLE: Quickstart Usage of Sidetable in Python\nDESCRIPTION: Basic example of importing sidetable, creating a DataFrame, and using its key functions - frequency tables, missing value analysis, and adding subtotals to grouped data.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sidetable\nimport pandas as pd\n\n# Create your DataFrame\ndf = pd.read_csv(myfile.csv)\n\n# Build a frequency table for one or more columns\ndf.stb.freq(['column1', 'column2'])\n\n# See what data is missing\ndf.stb.missing()\n\n# Group data and add a subtotal\ndf.groupby(['column1', 'column2'])['col3'].sum().stb.subtotal()\n```\n\n----------------------------------------\n\nTITLE: Importing Sidetable and Preparing Sample Data\nDESCRIPTION: Basic setup for using sidetable with a sample dataset. This snippet imports the necessary packages and loads the Titanic dataset from seaborn for demonstration purposes.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport sidetable\nimport seaborn as sns\n\ndf = sns.load_dataset('titanic')\n```\n\n----------------------------------------\n\nTITLE: Installing Sidetable with pip\nDESCRIPTION: Command for installing the sidetable package using pip. This is the recommended installation method as it will install the most recent stable release.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n$ python -m pip install sidetable\n```\n\n----------------------------------------\n\nTITLE: Basic Frequency Analysis with Sidetable\nDESCRIPTION: Shows the simplified sidetable freq() method which combines counts, percentages, and cumulative totals in a single table.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['class'])\n```\n\n----------------------------------------\n\nTITLE: Analyzing Missing Values with sidetable in Python\nDESCRIPTION: Uses sidetable's missing() method to display count and percentage of missing values in each column of a DataFrame. The output shows columns sorted by missing value count with total entries for reference.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.missing()\n```\n\n----------------------------------------\n\nTITLE: Adding Subtotals to Grouped DataFrames in Python\nDESCRIPTION: This snippet demonstrates how to group data by multiple columns, perform aggregation, and add subtotals using the sidetable extension. It groups the Titanic dataset by sex and class, sums the fare values, and adds subtotals for each group and a grand total.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['sex', 'class']).agg({'fare': ['sum']}).stb.subtotal()\n```\n\n----------------------------------------\n\nTITLE: Multi-column Grouping with Sidetable\nDESCRIPTION: Shows how to create frequency tables with multiple columns as grouping variables using the freq method.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['sex', 'class'])\n```\n\n----------------------------------------\n\nTITLE: Column Statistics Summary with Sidetable counts()\nDESCRIPTION: Shows the counts() method that provides a summary of unique values, most and least frequent values for each column in the DataFrame.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.counts()\n```\n\n----------------------------------------\n\nTITLE: Flattening a MultiIndex DataFrame with sidetable in Python\nDESCRIPTION: Basic usage of the sidetable flatten method to convert a complex, nested DataFrame structure into a simple flat table with readable column names.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack().stb.flatten()\n```\n\n----------------------------------------\n\nTITLE: Adding Grand Total to DataFrame with sidetable in Python\nDESCRIPTION: Uses sidetable's subtotal() function to add a grand total row to a DataFrame. This summarizes numeric columns with appropriate aggregation functions and adds the result as a labeled row at the bottom.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.subtotal()\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Values in Frequency Analysis with sidetable\nDESCRIPTION: Illustrates how missing values can affect the results of frequency analysis using sidetable. The example uses the 'deck' variable which contains many missing values.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['deck'])\n```\n\n----------------------------------------\n\nTITLE: Filling Missing Values in Categorical Data for sidetable Analysis\nDESCRIPTION: Demonstrates how to handle missing values in categorical data by adding a new category and using fillna() before applying sidetable's freq() method.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndf['deck_fillna'] = df['deck'].cat.add_categories('UNK').fillna('UNK')\ndf.stb.freq(['deck_fillna'])\n```\n\n----------------------------------------\n\nTITLE: Value-based Frequency Analysis with Sidetable\nDESCRIPTION: Demonstrates using the value parameter to sum values from another column rather than counting occurrences.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['class'], value='fare')\n```\n\n----------------------------------------\n\nTITLE: Threshold-based Grouping with Sidetable\nDESCRIPTION: Shows how to use the thresh parameter to group entries below a certain cumulative percentage threshold into an 'other' category.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['class', 'who'], value='fare', thresh=80)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-level Subtotals in Grouped Data with sidetable in Python\nDESCRIPTION: Applies subtotal() to a grouped DataFrame to generate subtotals at each level of grouping. This example groups by sex, class, and embark_town and aggregates fare sums, with subtotals calculated for each grouping level.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['sex', 'class', 'embark_town']).agg({'fare': ['sum']}).stb.subtotal()\n```\n\n----------------------------------------\n\nTITLE: Customizing the flatten operation with additional parameters in Python\nDESCRIPTION: Advanced usage of sidetable's flatten method with custom separator, index control, and level reorganization to tailor the output format to specific needs.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfares = df.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack()\nfares.stb.flatten(sep='|', reset=False, levels=[0,2])\n```\n\n----------------------------------------\n\nTITLE: Formatting as Percentages with Custom Options in sidetable\nDESCRIPTION: Advanced example showing how to format values as percentages with custom precision and a table caption. This sets precision to 0 for whole percentages and adds 'Fare Percentage' as the table caption.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'}).div(df['fare'].sum()).stb.pretty(precision=0, caption=\"Fare Percentage\")\n```\n\n----------------------------------------\n\nTITLE: Binning Continuous Data for Frequency Analysis in Python\nDESCRIPTION: Shows how to bin continuous data using pandas qcut() function before applying sidetable's freq() method. This approach creates more meaningful categories for analysis.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndf['fare_bin'] = pd.qcut(df['fare'], q=4, labels=['low', 'medium', 'high', 'x-high'])\ndf.stb.freq(['fare_bin'])\n```\n\n----------------------------------------\n\nTITLE: Multi-level Frequency Analysis with sidetable\nDESCRIPTION: Shows how to perform frequency analysis on multiple variables using sidetable. This example analyzes the combination of 'deck' and 'class' variables.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['deck', 'class'])\n```\n\n----------------------------------------\n\nTITLE: Including Zero-count Combinations in sidetable Frequency Analysis\nDESCRIPTION: Demonstrates how to include combinations with zero counts in the frequency analysis by using the clip_0=False parameter in sidetable's freq() method.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['deck', 'class'], clip_0=False)\n```\n\n----------------------------------------\n\nTITLE: Styled Frequency Analysis with Sidetable\nDESCRIPTION: Demonstrates using the style parameter to format percentages and large numbers for better readability in the output table.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['class'], style=True)\n```\n\n----------------------------------------\n\nTITLE: Filtered Column Statistics with Sidetable\nDESCRIPTION: Demonstrates filtering the columns included in the counts() summary using the exclude parameter to omit numeric columns.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.counts(exclude='number')\n```\n\n----------------------------------------\n\nTITLE: Styling Missing Value Analysis Output with sidetable in Python\nDESCRIPTION: Applies formatting to the missing values table by setting style=True. This formats the percentage column with a percent sign and improves readability of the output table.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.missing(style=True)\n```\n\n----------------------------------------\n\nTITLE: Filtering Missing Value Analysis in sidetable for Python\nDESCRIPTION: Combines styling with filtering to show only columns that have missing values by setting clip_0=True. This eliminates columns with zero missing values from the results for a more concise view.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.missing(clip_0=True, style=True)\n```\n\n----------------------------------------\n\nTITLE: Customizing Subtotal Levels in sidetable for Python\nDESCRIPTION: Demonstrates controlling which levels receive subtotals by using the sub_level parameter. This example only adds subtotals at the first and second grouping levels (sex and class) but not at the third level.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsummary_table = df.groupby(['sex', 'class', 'embark_town']).agg({'fare': ['sum']})\nsummary_table.stb.subtotal(sub_level=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiIndex DataFrame with groupby and unstack in Python\nDESCRIPTION: Example of creating a complex DataFrame with a multiindex structure using groupby and unstack operations to analyze fare sums and age means across different categories.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack()\n```\n\n----------------------------------------\n\nTITLE: Grouping and Summing Data in pandas with sidetable\nDESCRIPTION: Basic example of grouping data by two columns and calculating the sum of 'fare' column. This creates a grouped DataFrame that will be formatted in the subsequent examples.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'})\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with sidetable's pretty() Method\nDESCRIPTION: Example of using the stb.pretty() method to format numerical values with appropriate magnitude indicators. This formats the fare values with 'k' for thousands to maintain consistent magnitude representation.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'}).div(df['fare'].sum()).stb.pretty()\n```\n\n----------------------------------------\n\nTITLE: Frequency Analysis on Continuous Variable in Python using sidetable\nDESCRIPTION: Demonstrates how to use sidetable's freq() method on a continuous variable 'fare'. This approach may not be useful for variables with many unique values.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['fare'])\n```\n\n----------------------------------------\n\nTITLE: Flattening Hierarchical DataFrame Columns in Python\nDESCRIPTION: This snippet shows how to transform a hierarchical column structure into a flat table using sidetable. It groups Titanic data by embark town, class and sex, calculates sum of fare and mean of age, then unstacks and flattens the results.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntitanic.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack().stb.flatten()\n```\n\n----------------------------------------\n\nTITLE: Updating Sidetable Installation with pip\nDESCRIPTION: Command for updating sidetable to the latest version using pip. This ensures you have the most recent stable release.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n$  python -m pip install -U sidetable\n```\n\n----------------------------------------\n\nTITLE: Installing Sidetable with conda\nDESCRIPTION: Command for installing sidetable using conda from the conda-forge channel, providing an alternative installation method for conda users.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\n$ conda install -c conda-forge sidetable\n```\n\n----------------------------------------\n\nTITLE: Basic Pandas value_counts() Usage\nDESCRIPTION: Shows the standard pandas value_counts() method for counting occurrences and getting percentage distributions separately.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf['class'].value_counts()\n\nThird     491\nFirst     216\nSecond    184\nName: class, dtype: int64\n\ndf['class'].value_counts(normalize=True)\n\nThird     0.551066\nFirst     0.242424\nSecond    0.206510\nName: class, dtype: float64\n```\n\n----------------------------------------\n\nTITLE: Combining Count and Percentage with Standard Pandas\nDESCRIPTION: Demonstrates how to combine value_counts() with normalized results using pandas concat, which is verbose and complex.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npd.concat([df['class'].value_counts().rename('count'), \n        df['class'].value_counts(normalize=True).mul(100).rename('percentage')], axis=1)\n```\n\n----------------------------------------\n\nTITLE: Custom Label for Threshold Grouping in Sidetable\nDESCRIPTION: Demonstrates customizing the label for the threshold-based grouping with the other_label parameter.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndf.stb.freq(['class', 'who'], value='fare', thresh=80, other_label='All others')\n```\n\n----------------------------------------\n\nTITLE: Cloning the sidetable Repository for Local Development\nDESCRIPTION: Instructions for cloning a fork of the sidetable repository to begin local development. This is the first step in the contribution process after forking the repository on GitHub.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:your_name_here/sidetable.git\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for sidetable\nDESCRIPTION: Commands to navigate to the sidetable directory and install development dependencies using pipenv. This prepares the development environment with all necessary tools and packages.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd sidetable/\n$ pipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch in Git\nDESCRIPTION: Command to create a new Git branch for developing a feature or fixing a bug. This keeps changes isolated from the main codebase until they're ready to be merged.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality and Tests for sidetable\nDESCRIPTION: Commands to run flake8 for code quality checks and tests to ensure changes don't break existing functionality. These steps should be completed before submitting a pull request.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ flake8 sidetable tests\n$ python setup.py test or py.test\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: Git commands to commit changes and push them to GitHub. These steps prepare your changes for submission as a pull request to the main repository.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests for sidetable\nDESCRIPTION: Commands to run specific tests instead of the full test suite. This is useful for quickly validating changes to a specific part of the codebase.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\n$ cd /tests\n$ py.test test_sidetable.py\n```\n\n----------------------------------------\n\nTITLE: Deploying sidetable Package\nDESCRIPTION: Commands for maintainers to build and deploy a new version of sidetable to PyPI. This is executed after all changes are committed and a new version is ready for release.\nSOURCE: https://github.com/chris1610/sidetable/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython setup.py sdist bdist_wheel\ntwine upload dist/* --verbose\n```"
  }
]