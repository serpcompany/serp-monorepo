[
  {
    "owner": "swc-project",
    "repo": "swc",
    "content": "TITLE: Implementing SWC Plugin in Rust\nDESCRIPTION: This code snippet demonstrates how to implement the Plugin trait for a custom SWC plugin. It includes implementations for metadata, program transform, and module transform methods.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_plugin_runner/tests/fixture/swc_internal_plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\nstruct MyPlugin;\n\nimpl Plugin for MyPlugin {\n    fn metadata(&self) -> PluginMetadata {\n        PluginMetadata {\n            name: \"my-plugin\".to_string(),\n            version: \"1.0.0\".to_string(),\n        }\n    }\n\n    fn create_program_transform(\n        &self,\n        cm: Arc<SourceMap>,\n        config: &HashMap<String, JSWord>,\n    ) -> PluginResult<Arc<dyn ProgramTransform>> {\n        // Implement program transform\n    }\n\n    fn create_module_transform(\n        &self,\n        cm: Arc<SourceMap>,\n        config: &HashMap<String, JSWord>,\n    ) -> PluginResult<Arc<dyn ModuleTransform>> {\n        // Implement module transform\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SWC Testing\nDESCRIPTION: Commands to set essential environment variables for running SWC tests, including stack trace settings, path configuration, and stack size settings.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RUST_BACKTRACE=full\nexport PATH=\"$PATH:$PWD/node_modules/.bin\"\nexport RUST_MIN_STACK=16777216\n```\n\n----------------------------------------\n\nTITLE: Transforming JavaScript 'using' declaration into try-catch-finally blocks\nDESCRIPTION: This snippet demonstrates how SWC transforms a JavaScript 'using' declaration pattern into a structured try-catch-finally block. The transformation handles resource acquisition, potential errors, and ensures proper cleanup through the _usingCtx object.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_transforms_proposal/tests/explicit-resource-management/source-maps/top-level/source-map-visual.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Original code:\nbefore;\nusing x = fn();\ndoSomethingWith(x);\nafter;\n\n// Transformed code:\ntry {\n  before;\n  var x = _usingCtx.u(fn());\n  doSomethingWith(x);\n  after;\n} catch (_) {\n  _usingCtx.e = _;\n} finally {\n  _usingCtx.d();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Execution Tests for SWC Minifier\nDESCRIPTION: Command to run execution tests for the SWC minifier with debug logging enabled. The debug output helps identify which code is responsible for specific optimizations by searching for 'change' in the logs.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/exec.sh\n```\n\n----------------------------------------\n\nTITLE: Transforming For-Using Loop to Try-Catch-Finally in JavaScript\nDESCRIPTION: This snippet shows how SWC transforms a 'for (using x of it)' loop into equivalent code with proper resource management using try-catch-finally blocks. The transformation ensures proper initialization, usage, and disposal of resources even when exceptions occur.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_transforms_proposal/tests/explicit-resource-management/source-maps/for-of/source-map-visual.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Original code (left side):\nfor (using x of it) {\n  doSomethingWith(x);\n}\n\n// Transformed code (right side):\nfor (const _x of it) try {\n  var _usingCtx = babelHelpers.usingCtx();\n  const x = _usingCtx.u(_x);\n  doSomethingWith(x);\n} catch (_) {\n  _usingCtx.e = _;\n} finally {\n  _usingCtx.d();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing SWC Crates Command\nDESCRIPTION: Command for publishing all modified crates in the swc-project/swc repository after changes have been merged. The --no-verify flag skips verification steps to streamline the process.\nSOURCE: https://github.com/swc-project/swc/blob/main/MAINTENANCE.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo mono publish --no-verify\n```\n\n----------------------------------------\n\nTITLE: Transforming JavaScript 'using' Statement to try-catch-finally Pattern\nDESCRIPTION: Shows how a 'using' statement is transformed into a try-catch-finally block that manages resource lifecycle. The original code with 'using x = fn()' is converted to equivalent code that properly initializes, uses, and disposes of the resource.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_transforms_proposal/tests/explicit-resource-management/source-maps/block/source-map-visual.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Original code\n{\n  using x = fn();\n  doSomethingWith(x);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Transformed code\ntry {\n  var _usingCtx = babelHelpers.usingCtx();\n  const x = _usingCtx.u(fn());\n  doSomethingWith(x);\n} catch (_) {\n  _usingCtx.e = _;\n} finally {\n  _usingCtx.d();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for SWC Project\nDESCRIPTION: Example of a changeset markdown file used for changelog management in SWC, showing version bump specifications for affected packages and the change description.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\nswc_core: patch\nswc_ecma_transforms_base: patch\n---\n\nfix(es/renamer): Check `preserved` in normal renaming mode\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Fixture Tests with Debug Logging\nDESCRIPTION: Command to run filtered fixture tests with debug logging enabled. This allows developers to locate the exact code location responsible for optimization changes.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh foo --features debug\n```\n\n----------------------------------------\n\nTITLE: Running Execution Tests in SWC Project Using Bash\nDESCRIPTION: Command for running execution tests to verify if changes are working correctly. This script should be run after making any changes to ensure functionality is maintained.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/.AI.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/exec.sh\n```\n\n----------------------------------------\n\nTITLE: Adding WebAssembly Target for SWC Development\nDESCRIPTION: Command to add the WebAssembly target using rustup, necessary for WASM-related functionality in SWC.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-wasip1\n```\n\n----------------------------------------\n\nTITLE: Running Fixture Tests in SWC Project Using Bash\nDESCRIPTION: Command for running fixture tests to verify output against expected results. This test validates the correctness of transformations and other operations.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/.AI.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh\n```\n\n----------------------------------------\n\nTITLE: JavaScript ReferenceError Stack Trace\nDESCRIPTION: A stack trace showing a ReferenceError where 'call' is not defined. The error occurs in a function named 'foo' and propagates through asynchronous generator functions and Promise handling code.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-622/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow call();\n```\n\n----------------------------------------\n\nTITLE: Defining SWC Plugin Trait in Rust\nDESCRIPTION: This code snippet defines the Plugin trait for SWC, which includes methods for metadata, configuration, and transformations. It specifies the interface that all SWC plugins must implement.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_plugin_runner/tests/fixture/swc_internal_plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait Plugin: Send + Sync {\n    fn metadata(&self) -> PluginMetadata;\n    fn create_program_transform(\n        &self,\n        _cm: Arc<SourceMap>,\n        _plugin_config: &HashMap<String, JSWord>,\n    ) -> PluginResult<Arc<dyn ProgramTransform>>;\n    fn create_module_transform(\n        &self,\n        _cm: Arc<SourceMap>,\n        _plugin_config: &HashMap<String, JSWord>,\n    ) -> PluginResult<Arc<dyn ModuleTransform>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fixture Tests for SWC Minifier\nDESCRIPTION: Commands to run fixture tests for the SWC minifier. Includes options to filter tests by name and enable debug logging to identify code locations responsible for optimizations.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh\n```\n\n----------------------------------------\n\nTITLE: Running SWC Tests with V1 Features\nDESCRIPTION: Command to run all SWC tests with version 1 features and filesystem cache enabled, using the Cargo test runner.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --all --no-default-features --features swc_v1 --features filesystem_cache\n```\n\n----------------------------------------\n\nTITLE: Purchase Order XML Structure\nDESCRIPTION: A complete XML document defining a purchase order with order metadata, shipping and billing addresses, delivery notes, and item details including part numbers, quantities, and prices.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\">\n<PurchaseOrder>\n  OrderDate=\"1999-10-20\"\n  PurchaseOrderNumber=\"99503\"\n  \"\n    \"\n  <Address>\n    Type=\"Shipping\"\n    \"\n        \"\n    <Name>\n      \"Ellen Adams\"\n    \"\n        \"\n    <Street>\n      \"123 Maple Street\"\n    \"\n        \"\n    <City>\n      \"Mill Valley\"\n    \"\n        \"\n    <State>\n      \"CA\"\n    \"\n        \"\n    <Zip>\n      \"10999\"\n    \"\n        \"\n    <Country>\n      \"USA\"\n    \"\n    \"\n  \"\n    \"\n  <Address>\n    Type=\"Billing\"\n    \"\n        \"\n    <Name>\n      \"Tai Yee\"\n    \"\n        \"\n    <Street>\n      \"8 Oak Avenue\"\n    \"\n        \"\n    <City>\n      \"Old Town\"\n    \"\n        \"\n    <State>\n      \"PA\"\n    \"\n        \"\n    <Zip>\n      \"95819\"\n    \"\n        \"\n    <Country>\n      \"USA\"\n    \"\n    \"\n  \"\n    \"\n  <DeliveryNotes>\n    \"Please leave packages in shed by driveway.\"\n  \"\n    \"\n  <Items>\n    \"\n        \"\n    <Item>\n      PartNumber=\"872-AA\"\n      \"\n            \"\n      <ProductName>\n        \"Lawnmower\"\n      \"\n            \"\n      <Quantity>\n        \"1\"\n      \"\n            \"\n      <USPrice>\n        \"148.95\"\n      \"\n            \"\n      <Comment>\n        \"Confirm this is electric\"\n      \"\n        \"\n    \"\n        \"\n    <Item>\n      PartNumber=\"926-AA\"\n      \"\n            \"\n      <ProductName>\n        \"Baby Monitor\"\n      \"\n            \"\n      <Quantity>\n        \"2\"\n      \"\n            \"\n      <USPrice>\n        \"39.98\"\n      \"\n            \"\n      <ShipDate>\n        \"1999-05-21\"\n      \"\n        \"\n    \"\n    \"\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Generating Babel AST Output File\nDESCRIPTION: Command to generate the expected Babel AST output file in JSON format using the babelgen.js utility script. Requires @babel/parser dependency to be installed via npm.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_estree_compat/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode babelgen.js fixtures/my-test/input.js > fixtures/my-test/output.json\n```\n\n----------------------------------------\n\nTITLE: Creating Test Fixture Directory and Input File\nDESCRIPTION: Commands to create a new test fixture directory and add a JavaScript input file for testing SWC to Babel AST conversion.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_estree_compat/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir fixtures/my-test\necho \"var a = true;\" > fixtures/my-test/input.js\n```\n\n----------------------------------------\n\nTITLE: Profiling the SWC Minifier on macOS\nDESCRIPTION: A bash script to profile the SWC minifier on macOS by instrumenting code against an input directory. The script is used to analyze performance characteristics of the minifier.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/instrument/all.sh path/to/input/dir\n```\n\n----------------------------------------\n\nTITLE: Registering SWC Plugin in Rust\nDESCRIPTION: This code snippet shows how to register a custom SWC plugin using the register_plugin macro. It demonstrates the process of making the plugin available for use in SWC.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_plugin_runner/tests/fixture/swc_internal_plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nregister_plugin!(\"my-plugin\", MyPlugin::default());\n```\n\n----------------------------------------\n\nTITLE: Fetching Git Submodules in SWC Project\nDESCRIPTION: Command to initialize and update all git submodules, necessary to pull in ECMAScript test suites for SWC development.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variable Declaration with Same Names in Different Scopes\nDESCRIPTION: This snippet demonstrates how variables with the same name in different scopes are handled in JavaScript. It shows two 'a' variables declared in different scopes, illustrating scope isolation.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 1;\n{\n    let a = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Binary Expression Output\nDESCRIPTION: This JavaScript snippet shows the final output after the AST is processed by the fixer and then printed by the code generator. The parentheses ensure proper operator precedence.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n(1 + 2) * 3;\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Fixture Tests for SWC Minifier\nDESCRIPTION: Command to run specific fixture tests by filtering with a keyword. Only test cases containing the specified string in their file path will be executed.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh foo\n```\n\n----------------------------------------\n\nTITLE: Creating an Architecture Decision Record in Markdown\nDESCRIPTION: This snippet provides a complete template for an Architecture Decision Record (ADR) in Markdown format. It includes sections for title, status, decision makers, context, options, outcome, consequences, and pros/cons analysis.\nSOURCE: https://github.com/swc-project/swc/blob/main/docs/adr/template.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [short title of solved problem and solution]\n\n- Status: [proposed | rejected | accepted | deprecated | … | superseded by [ADR-0005](0005-example.md)] <!-- optional -->\n- Deciders: [list everyone involved in the decision] <!-- optional -->\n- Date: [YYYY-MM-DD when the decision was last updated] <!-- optional -->\n\nTechnical Story: [description | ticket/issue URL] <!-- optional -->\n\n## Context and Problem Statement\n\n[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]\n\n## Decision Drivers <!-- optional -->\n\n- [driver 1, e.g., a force, facing concern, …]\n- [driver 2, e.g., a force, facing concern, …]\n- … <!-- numbers of drivers can vary -->\n\n## Considered Options\n\n- [option 1]\n- [option 2]\n- [option 3]\n- … <!-- numbers of options can vary -->\n\n## Decision Outcome\n\nChosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\n\n### Positive Consequences <!-- optional -->\n\n- [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …]\n- …\n\n### Negative Consequences <!-- optional -->\n\n- [e.g., compromising quality attribute, follow-up decisions required, …]\n- …\n\n## Pros and Cons of the Options <!-- optional -->\n\n### [option 1]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n- Good, because [argument a]\n- Good, because [argument b]\n- Bad, because [argument c]\n- … <!-- numbers of pros and cons can vary -->\n\n### [option 2]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n- Good, because [argument a]\n- Good, because [argument b]\n- Bad, because [argument c]\n- … <!-- numbers of pros and cons can vary -->\n\n### [option 3]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n- Good, because [argument a]\n- Good, because [argument b]\n- Bad, because [argument c]\n- … <!-- numbers of pros and cons can vary -->\n\n## Links <!-- optional -->\n\n- [Link type] [Link to ADR] <!-- example: Refined by [ADR-0005](0005-example.md) -->\n- … <!-- numbers of links can vary -->\n```\n\n----------------------------------------\n\nTITLE: Defining Test Structure for SWC CSS Parser in Markdown\nDESCRIPTION: This snippet outlines the structure of the test directories for the SWC CSS parser. It describes three main test directories: fixture, error, and identity, explaining their purposes and contents.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_css_parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Structure\n\n## tests\n\n### `/tests/fuxture`\n\nCSS -> Parsed ast -> JSON.\n\n### `/tests/error`\n\nError reporting test.\n\n### `/tests/identity`\n\nThese tests ensure that `input.css` and `input.explicit.css` is parsed identically.\nThese are copied from `esbuild`, by modifying the test suite.\n\nThe name of a test is `base64_url(md5(name))`.\n```\n\n----------------------------------------\n\nTITLE: Installing SWC Types Package\nDESCRIPTION: The package name for SWC types, which can be used to install the package using npm or yarn.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @swc/types\n```\n\n----------------------------------------\n\nTITLE: Executing Test Files in JavaScript and TypeScript\nDESCRIPTION: Files named 'exec.js' or 'exec.ts' in the 'tests/exec' directory are executed to compare output between original and transpiled source code.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexec.js\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexec.ts\n```\n\n----------------------------------------\n\nTITLE: Complete XML Document Structure for Person Data\nDESCRIPTION: This XML document defines a hierarchical structure for storing person records with detailed information including contact details, personal attributes, and nested address information. The document includes two person entries with various attributes and demonstrates XML features like attributes, nested elements, empty nodes, and commented-out sections.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic-2/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\">\n| <any_name>\n|   attr=\"https://example.com/somepath\"\n|   \"\n    \"\n|   <person>\n|     id=\"101\"\n|     \"\n        \"\n|     <phone>\n|       \"+122233344550\"\n|     \"\n        \"\n|     <name>\n|       \"Jack\"\n|     \"\n        \"\n|     <phone>\n|       \"+122233344551\"\n|     \"\n        \"\n|     <age>\n|       \"33\"\n|     \"\n        \"\n|     <emptyNode>\n|     \"\n        \"\n|     <booleanNode>\n|       \"false\"\n|     \"\n        \"\n|     <booleanNode>\n|       \"true\"\n|     \"\n        \"\n|     <selfclosing>\n|     \"\n        \"\n|     <selfclosing>\n|       with=\"value\"\n|     \"\n        \"\n|     <married>\n|       attr=\"val 2\"\n|       firstTime=\"No\"\n|       \"Yes\"\n|     \"\n        \"\n|     <birthday>\n|       \"Wed, 28 Mar 1979 12:13:14 +0300\"\n|     \"\n        \"\n|     <address>\n|       \"\n            \"\n|       <city>\n|         \"New York\"\n|       \"\n            \"\n|       <street>\n|         \"Park Ave\"\n|       \"\n            \"\n|       <buildingNo>\n|         \"1\"\n|       \"\n            \"\n|       <flatNo>\n|         \"1\"\n|       \"\n        \"\n|     \"\n        \"\n|     <address>\n|       \"\n            \"\n|       <city>\n|         \"Boston\"\n|       \"\n            \"\n|       <street>\n|         \"Centre St\"\n|       \"\n            \"\n|       <buildingNo>\n|         \"33\"\n|       \"\n            \"\n|       <flatNo>\n|         \"24\"\n|       \"\n        \"\n|     \"\n    \"\n|   \"\n    \"\n|   <person>\n|     id=\"102\"\n|     \"\n        \"\n|     <phone>\n|       \"+122233344553\"\n|     \"\n        \"\n|     <name>\n|       \"Boris\"\n|     \"\n        \"\n|     <phone>\n|       \"+122233344554\"\n|     \"\n        \"\n|     <age>\n|       \"34\"\n|     \"\n\"\n|     <!--     TODO    <married ns:firstTime=\"Yes\"><![CDATA[<some>Jack</some>]]><![CDATA[Jack]]></married> -->\n|     \"\n        \"\n|     <birthday>\n|       \"Mon, 31 Aug 1970 02:03:04 +0300\"\n|     \"\n        \"\n|     <ns:address>\n|       \"\n\"\n|       <!--     TODO        <city><![CDATA[<some>Jack</some>]]></city> -->\n|       \"\n            \"\n|       <street>\n|         \"Kahovka\"\n|       \"\n            \"\n|       <buildingNo>\n|         \"1\"\n|       \"\n            \"\n|       <flatNo>\n|         \"2\"\n|       \"\n        \"\n|     \"\n        \"\n|     <address>\n|       \"\n            \"\n|       <city>\n|         \"Tula\"\n|       \"\n            \"\n|       <street>\n|         \"Lenina\"\n|       \"\n            \"\n|       <buildingNo>\n|         \"3\"\n|       \"\n            \"\n|       <flatNo>\n|         \"78\"\n|       \"\n        \"\n|     \"\n    \"\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ES Minifier Feature in Markdown\nDESCRIPTION: This snippet describes improvements to the ES minifier, including dropping more patterns with `PURE` marker and supporting mangle cache.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(es/minifier)** Drop more patterns with `PURE` marker ([#9478](https://github.com/swc-project/swc/issues/9478)) ([ede1a52](https://github.com/swc-project/swc/commit/ede1a52cb8fb681ca08c54880c75c9b115c7a906))\n\n- **(es/minifier)** Support mangle cache ([#9489](https://github.com/swc-project/swc/issues/9489)) ([af922d8](https://github.com/swc-project/swc/commit/af922d83e58596021476006564edb6270069d437))\n```\n\n----------------------------------------\n\nTITLE: Transforming Switch Statement to Try-Catch Block in JavaScript\nDESCRIPTION: This snippet shows the transformation of a switch statement into a try-catch-finally block. It uses a '_usingCtx' helper for context management and exception handling. The original switch cases are converted to conditional statements within the try block.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_transforms_proposal/tests/explicit-resource-management/source-maps/switch/source-map-visual.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f() {\n  try {\n    var _usingCtx = babelHelpers.usingCtx();\n    switch (v) {\n      case 0:\n        const x = _usingCtx.u(0);\n        break;\n      default:\n        const y = _usingCtx.u(1);\n        break;\n    }\n  } catch (_) {\n    _usingCtx.e = _;\n  } finally {\n    _usingCtx.d();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript for Stack Trace Testing\nDESCRIPTION: This snippet shows a minimal JavaScript example that throws an error to test stack trace generation. The error is deliberately thrown with the message 'Boom' to verify proper stack trace formatting.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2018/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Importing Quote Functions from SWC Core in Rust\nDESCRIPTION: This snippet demonstrates how to import the quote and quote_expr functions from the swc_core crate, which replaces the previous swc_ecma_quote imports. These functions are used for quoting in the SWC project.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_quote/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nswc_core::quote\n```\n\nLANGUAGE: Rust\nCODE:\n```\nswc_core::quote_expr\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript with Stack Trace\nDESCRIPTION: Code snippet demonstrating throwing a new Error object with 'Boom' message and the resulting stack trace showing file paths and line numbers.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2016/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Referencing CommonJS require\nDESCRIPTION: Example showing CommonJS require syntax support mentioned in features list\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_bundler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in JavaScript Test Case\nDESCRIPTION: A simple code snippet that throws a new Error with the message 'Boom', used to test stacktrace formatting in the SWC compiler.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es5/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript (ES2020)\nDESCRIPTION: This snippet demonstrates throwing a new Error with a custom message. It's used to test error handling and stack trace generation in an ES2020 environment.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2020/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Running Script to Update SWC Crates\nDESCRIPTION: A curl command that fetches and executes a script to update all SWC crates to their latest versions. The script updates dependencies and runs a build to verify everything works properly.\nSOURCE: https://github.com/swc-project/swc/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/swc-project/swc/main/scripts/update-all-swc-crates.sh | bash -s\n```\n\n----------------------------------------\n\nTITLE: Complete XML Document with Various Comment Formats\nDESCRIPTION: This XML document demonstrates different comment structures and nested elements. It includes multiple comment syntax variations and DocumentElement structures with attributes and child elements.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/comments/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--  My Comment  -->\n<root>\n  \"\n    \"\n  <!-- comment -->\n  \"\n    \"\n  <!-- <head> -->\n  \"\n    \"\n  <!-- <!-x -->\n  \"\n    \"\n  <!-- <!x -->\n  \"\n    \"\n  <!-- <<!x -->\n  \"\n    \"\n  <!-- <<!-x -->\n  \"\n    \"\n  <!-- <x -->\n  \"\n    \"\n  <!-- <> -->\n  \"\n    \"\n  <!-- < -->\n  \"\n    \"\n  <!-- <! -->\n  \"\n    \"\n  <!--  -->\n  \"\n    \"\n  <!-- -a->-a -->\n  \"\n    \"\n  <!-- -<!-test-> -->\n  \"\n    \"\n  <DocumentElement>\n    myAttribute=\"myAttributeValue\"\n    \"\n        \"\n    <!--  My Comment  -->\n    \"\n        \"\n    <ChildElement>\n      \"Element Value\"\n    \"\n    \"\n  \"\n    \"\n  <DocumentElement>\n    myAttribute=\"my Attribute Value\"\n    \"\n        \"\n    <ChildElement>\n      \"\n        Element \"\n      <!--  My Comment  -->\n      \" Value\n        \"\n    \"\n    \"\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Commands to navigate to the example directory and install required npm packages\nSOURCE: https://github.com/swc-project/swc/blob/main/bindings/binding_core_wasm/example/readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd swc/wasm/example\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XML/HTML Tag Structures\nDESCRIPTION: This code snippet showcases various XML and HTML tag structures including root elements, start and end tags, empty tags, tags with content, and tags using namespaces. It also includes examples of tags written in non-Latin scripts.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/tags/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n  \"\n\"\n  <z>\n  <a>\n  \"\n\"\n  <!--  start tag and end tag  -->\n  \"\n\"\n  <start-tag>\n    \"Start\"\n  \"\n\"\n  <!--  empty tag  -->\n  \"\n\"\n  <short-tag>\n  \"\n\"\n  <test>\n  \"\n\"\n  <test>\n  \"\n\"\n  <тест>\n  \"\n\"\n  <тест>\n    \"test\"\n  \"\n\"\n  <html:bar>\n  \"\n\"\n  <html:bar>\n    \"test\"\n  \"\n\"\n  <俄语>\n    լեզու=\"ռուսերեն\"\n    \"данные\"\n  \"\n\"\n  <svg:circle>\n  \"\n\"\n  <:circle>\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ES Parser Feature in Markdown\nDESCRIPTION: This snippet outlines a change in the ES parser to disallow `let let` syntax.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(es/parser)** Disallow `let let` ([#9484](https://github.com/swc-project/swc/issues/9484)) ([1121bc0](https://github.com/swc-project/swc/commit/1121bc0dc161520a418945dbc610c30adc7ab3aa))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variables with Hygiene IDs\nDESCRIPTION: This code shows how the SWC resolver pass marks identifiers with hygiene IDs (indicated by # followed by numbers). The IDs help distinguish between variables with the same name but in different scopes.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet a#0 = 1;\n{\n  let a#1 = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Library Size Comparison Table in Markdown\nDESCRIPTION: Markdown table displaying size metrics for popular JavaScript libraries. Shows original size, compressed size, and gzipped size for each library file.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/tests/libs-size.snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| File | Original Size | Compressed Size | Gzipped Size |\n| --- | --- | --- | --- |\n| antd.js | 6.38 MiB | 2.06 MiB | 445.44 KiB |\n| d3.js | 542.74 KiB | 261.63 KiB | 85.57 KiB |\n| echarts.js | 3.41 MiB | 977.96 KiB | 314.33 KiB |\n| jquery.js | 280.89 KiB | 87.80 KiB | 30.21 KiB |\n| lodash.js | 531.35 KiB | 68.91 KiB | 24.60 KiB |\n| moment.js | 169.83 KiB | 57.40 KiB | 18.26 KiB |\n| react.js | 70.45 KiB | 22.44 KiB | 8.04 KiB |\n| terser.js | 1.08 MiB | 446.78 KiB | 120.52 KiB |\n| three.js | 1.19 MiB | 630.84 KiB | 154.81 KiB |\n| typescript.js | 10.45 MiB | 3.18 MiB | 840.79 KiB |\n| victory.js | 2.30 MiB | 694.32 KiB | 154.28 KiB |\n| vue.js | 334.13 KiB | 113.72 KiB | 41.82 KiB |\n```\n\n----------------------------------------\n\nTITLE: Structuring XML with CDATA and Escaped Characters\nDESCRIPTION: This XML snippet showcases the structure of a document with a root element, description, comments, and a CDATA section. It demonstrates how to handle CEND sequences and use CDATA to include special characters without breaking XML parsing.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/cdata/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n  <description>\n    An example of escaped CENDs\n  </description>\n\n  <!--  This text contains a CEND ]]>  -->\n\n  <!--  In this first case we put the ]] at the end of the first CDATA block\n         and the > in the second CDATA block  -->\n\n  <exampleOfACDATA>\n    <![CDATA[\n    Since this is a CDATA section\n    I can use all sorts of reserved characters\n    but my document is still well formed!\n    ]]>\n  </exampleOfACDATA>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Package for macOS x64\nDESCRIPTION: This code snippet shows the npm package name for the macOS x64 binary of SWC core. It is used to reference the specific architecture and platform version of the SWC compiler.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/darwin-x64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/core-darwin-x64`\n```\n\n----------------------------------------\n\nTITLE: Basic XML Attribute Testing\nDESCRIPTION: Collection of XML elements testing different attribute value patterns including single/double quotes, nested quotes, namespaced attributes, empty values, and special characters.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/attribute/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n  <foo a=\"b\"/>\n  <foo a=\"test\">test</foo>\n  <foo a=\"\"test1\"\" b=\"'test2'\"/>\n  <foo a=\"\"test1\"\" b=\"'test2'\">test</foo>\n  <foo foo:a=\"test\">test</foo>\n  <foo bar:b=\"'test2'\" foo:a=\"\"test1\"\">test</foo>\n  <foo a=\"test1\"/>\n  <foo foo=\"\"/>\n  <foo foo=\"'\"/>\n  <foo foo=\"\"/>\n  <foo foo=\"\"\"/>\n  <MyElement myAttribute=\"attribute value\"/>\n  <MyElement myAttribute=\"attribute\n    value\"/>\n  <MyElement myAttribute2=\"attribute value\" nsA:myAttribute1=\"attribute value\">...</MyElement>\n  <foo attributeName=\"He said \"OK\"\"/>\n  <foo attributeName=\"He said <OK<\"/>\n  <foo attributeName=\"He said >OK>\"/>\n  <foo attributeName=\"He said >OK>\"/>\n  <foo attributeName=\"He said 'OK'\"/>\n  <foo attributeName=\"He said &OK&\"/>\n  <foo a=\"b\" c=\"d\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for SWC Development\nDESCRIPTION: Command to install JavaScript dependencies using Yarn package manager, which is required for SWC development and testing.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Windows 32-bit MSVC Binary Package\nDESCRIPTION: This code snippet shows the npm package name for the Windows 32-bit MSVC binary of @swc/core. It specifies the exact architecture and compiler toolchain used for this binary distribution.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/win32-ia32-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/core-win32-ia32-msvc`\n```\n\n----------------------------------------\n\nTITLE: JavaScript Variables After Hygiene Pass\nDESCRIPTION: This snippet demonstrates the result after the hygiene pass is applied. Variables with different hygiene IDs are renamed to have different symbols, preserving the semantics of the original code while making identifiers unique.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 1;\n{\n    let a1 = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for SWC to Babel AST Conversion\nDESCRIPTION: This command executes the test suite for the SWC to Babel AST conversion process using Cargo, the Rust package manager. It runs all tests defined in the project.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_estree_compat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Package for Linux ARM64 GNU\nDESCRIPTION: This code snippet defines the package name for the ARM64 GNU binary of SWC Core. It's used to identify and reference this specific build of the SWC compiler for Linux systems using the aarch64-unknown-linux-gnu architecture.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-arm64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/core-linux-arm64-gnu`\n```\n\n----------------------------------------\n\nTITLE: Rust Binary Expression AST After Fixer\nDESCRIPTION: This code shows how the fixer pass modifies the binary expression AST to add proper parentheses, ensuring operator precedence is respected when the code is generated.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet v = BinExpr {\n    left: \"(1 + 2)\",\n    op: \"*\",\n    right: \"3\",\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Windows Binary Package\nDESCRIPTION: This code snippet defines the package name for the Windows-specific binary of the SWC minifier. It targets the x86_64 architecture and is compiled with MSVC.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/minifier-win32-x64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Updating and Bumping SWC Plugins Script\nDESCRIPTION: Shell script command for updating dependencies and bumping versions of crates and npm packages in the swc-project/plugins repository. This prepares the changes for automatic publishing via CI.\nSOURCE: https://github.com/swc-project/swc/blob/main/MAINTENANCE.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/update-bump-all.sh\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Package for Linux ARM GNUEABIHF\nDESCRIPTION: This code snippet shows the package name for the ARM-based Linux (GNUEABIHF) binary of @swc/core. It is used to identify and reference this specific distribution of the SWC compiler.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-arm-gnueabihf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/core-linux-arm-gnueabihf`\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific SWC Package\nDESCRIPTION: Command to run tests for a specific package in the SWC project, in this example targeting the ECMAScript transforms package with all features enabled.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p swc_ecma_transforms --all-features\n```\n\n----------------------------------------\n\nTITLE: Running SWC ECMAScript Fast Parser Tests with Cargo\nDESCRIPTION: Command to execute the test suite for the swc_ecma_fast_parser package using Cargo. This should be run after making any changes to verify functionality.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_fast_parser/.AI.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -p swc_ecma_fast_parser\n```\n\n----------------------------------------\n\nTITLE: Adding Overlay Path for SWC Logo\nDESCRIPTION: Defines an additional path that overlays part of the previous paths. This path uses a black stroke and medium thickness, possibly to create emphasis or depth in the logo design.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n<path\n  d=\"M20,48l10,12v13m0-13l10-12\"\n  stroke=\"#000\"\n  stroke-width=\"5\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running SWC Tests with V2 Features\nDESCRIPTION: Command to run all SWC tests with version 2 features and filesystem cache enabled, using the Cargo test runner.\nSOURCE: https://github.com/swc-project/swc/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --all --no-default-features --features swc_v2 --features filesystem_cache\n```\n\n----------------------------------------\n\nTITLE: Running Deno Runtime Unit Tests via Command Line\nDESCRIPTION: Provides various command-line examples for running unit tests using the `unit_test_runner.ts` script. It includes options for running all tests, specific subsets, and debugging.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/deno-unit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run all tests. Spawns worker processes for each discovered permission\n# combination:\ntarget/debug/deno run -A cli/tests/unit/unit_test_runner.ts --master\n\n# By default all output of worker processes is discarded; for debug purposes\n# the --verbose flag preserves output from the worker\ntarget/debug/deno run -A cli/tests/unit/unit_test_runner.ts --master --verbose\n\n# Run subset of tests that don't require any permissions\ntarget/debug/deno run --unstable cli/tests/unit/unit_test_runner.ts\n\n# Run subset tests that require \"net\" and \"read\" permissions\ntarget/debug/deno run --unstable --allow-net --allow-read cli/tests/unit/unit_test_runner.ts\n\n# \"worker\" mode communicates with parent using TCP socket on provided address;\n# after initial setup drops permissions to specified set. It shouldn't be used\n# directly, only be \"master\" process.\ntarget/debug/deno run -A cli/tests/unit/unit_test_runner.ts --worker --addr=127.0.0.1:4500 --perms=net,write,run\n\n# Run specific tests\ntarget/debug/deno run --unstable --allow-net cli/tests/unit/unit_test_runner.ts -- netTcpListenClose\n\nRUST_BACKTRACE=1 cargo run -- run --unstable --allow-read --allow-write cli/tests/unit/unit_test_runner.ts -- netUnixDialListen\n```\n\n----------------------------------------\n\nTITLE: Defining SWC Logo SVG Structure\nDESCRIPTION: Defines the overall structure of the SVG logo, including the viewBox and namespace declarations. This forms the container for all the graphical elements of the logo.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<svg\n  viewBox=\"0 0 83 121\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Background in SVG\nDESCRIPTION: This snippet defines a white circular background for the icon using the <circle> element, specifying its center coordinates and radius.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/svg/dom.txt#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<circle\n  cx=\"37.637\"\n  cy=\"28.806\"\n  fill=\"#FFFFFF\"\n  r=\"28.276\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures in SWC Project Using Bash\nDESCRIPTION: Command for running fixture tests with the UPDATE environment variable set to update the expected output fixtures. This is useful when intentionally changing behavior that affects test outputs.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_minifier/.AI.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUPDATE=1 ./scripts/test.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SVG Document Structure\nDESCRIPTION: A minimal SVG document structure with DOCTYPE declaration and root element containing a text node with the value \"test\".\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset-2/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<!DOCTYPE svg>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Starting Webpack Dev Server\nDESCRIPTION: Commands to navigate to the example directory and start the webpack development server\nSOURCE: https://github.com/swc-project/swc/blob/main/bindings/binding_core_wasm/example/readme.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd swc/wasm/example\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Defining XML Note Structure\nDESCRIPTION: This XML snippet defines the structure of a note, including 'to', 'from', 'heading', and 'body' elements. It demonstrates basic XML syntax and nesting of elements.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/no-quotes/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<note>\n  \"\n    \"\n  <to>\n    \"Tove\"\n  \"\n    \"\n  <from>\n    \"Jani\"\n  \"\n    \"\n  <heading>\n    foo=\"bar>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n</note>\"\n```\n\n----------------------------------------\n\nTITLE: Building SWC Web Release\nDESCRIPTION: Commands to navigate to the SWC WASM directory and build the web release version\nSOURCE: https://github.com/swc-project/swc/blob/main/bindings/binding_core_wasm/example/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd swc/wasm\n./scripts/build_web_release.sh\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Root and Child Elements\nDESCRIPTION: This XML snippet defines a root element containing a child element 'c' with two attributes 'a' and 'b', both set to the value 'v'.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-no-space-between/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n| <root>\n|   \"\n    \"\n|   <c>\n|     a=\"v\"\n|     b=\"v\"\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ES TypeScript Feature in Markdown\nDESCRIPTION: This snippet describes the addition of `native_class_properties` to skip reordering of class properties initializations in TypeScript.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(es/typescript)** Add `native_class_properties ` to skip reordering of class properties inits ([#9421](https://github.com/swc-project/swc/issues/9421)) ([d2929d1](https://github.com/swc-project/swc/commit/d2929d1ce61a00360cc0596441041571a958da23))\n```\n\n----------------------------------------\n\nTITLE: Defining HTML-like Element Structure with Attributes\nDESCRIPTION: This snippet demonstrates a basic HTML-like structure with nested elements and an attribute assignment. It shows a root element containing a child element with the attribute 'foo' set to 'test'.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-unquoted/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n| <root>\n|   \"\n    \"\n|   <c>\n|     foo=\"test\"\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Documenting ES Decorators Feature in Markdown\nDESCRIPTION: This snippet outlines the groundwork laid for stage 3 decorators in the ES decorators module.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(es/decorators)** Groundwork for stage 3 decorator ([#9450](https://github.com/swc-project/swc/issues/9450)) ([238ba8b](https://github.com/swc-project/swc/commit/238ba8b1d2220202129595185bd4411b9415cc99))\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Document Structure with DOCTYPE and Root Element in XML\nDESCRIPTION: This snippet shows the basic structure of an SVG document with a DOCTYPE declaration and a root element containing a text node. It demonstrates the minimal required elements for a valid SVG document.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset-4/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE svg>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Visit Feature in Markdown\nDESCRIPTION: This snippet describes the addition of experimental traverse APIs to the visit module.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(visit)** Add experimental traverse APIs ([#9464](https://github.com/swc-project/swc/issues/9464)) ([3ee8980](https://github.com/swc-project/swc/commit/3ee8980dbe82587285e4920420687ab7ac7c5cdf))\n```\n\n----------------------------------------\n\nTITLE: Rust Binary Expression AST Creation\nDESCRIPTION: This Rust code snippet demonstrates how a binary expression is created in the AST. It shows a multiplication of two expressions without proper parentheses, which will later be fixed by the fixer pass.\nSOURCE: https://github.com/swc-project/swc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet v = BinExpr {\n    left: \"1 + 2\",\n    op: \"*\",\n    right: \"3\",\n};\n```\n\n----------------------------------------\n\nTITLE: XML Structure with CDATA Sections and Nested Content\nDESCRIPTION: An XML document structure showing how to handle CDATA end sequences by splitting them across different CDATA blocks. The example includes a DocumentElement with a nested foo element containing text content.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/cdata_section/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n    \n<description>\n  An example of escaped CENDs\n</description>\n    \n<!--  This text contains a CEND ]]>  -->\n    \n<!--  In this first case we put the ]] at the end of the first CDATA block\n       and the > in the second CDATA block  -->\n    \n<exampleOfACDATA>\n  \n  \n</exampleOfACDATA>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<p>\n      \n  \n</p>\n    \n<p>\n</p>\n    \n<p>\n</p>\n    \n<DocumentElement>\n      \n  <foo>\n        bar\n    foo\n      \n  </foo>\n</DocumentElement>\n```\n\n----------------------------------------\n\nTITLE: Documenting Feature Addition for HTML Bindings in Markdown\nDESCRIPTION: This snippet documents a new feature allowing the use of 'lightningcss' as a minifier in HTML bindings.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(bindings/html)** Allow using `lightningcss` as minfiier ([#9462](https://github.com/swc-project/swc/issues/9462)) ([74d6478](https://github.com/swc-project/swc/commit/74d6478be1eb8cdf1df096c360c159db64b64d8a))\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Nested Elements in XML\nDESCRIPTION: This snippet demonstrates an XML-like structure with a root element containing multiple 'foo' elements. Each 'foo' element has a 'bar' attribute set to '<'. The structure is simple but showcases basic XML nesting and attribute assignment.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-value/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n| <root>\n|   \"\n    \"\n|   <foo>\n|     bar=\"<\"\n|   \"\n    \"\n|   <foo>\n|     bar=\"<\"\n|   \"\n    \"\n|   <foo>\n|     bar=\"<\"\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: XML Document with Special Characters and Attributes\nDESCRIPTION: An XML document structure with processing instructions and various elements containing special characters, Unicode symbols, and text with quotation marks. The document includes elements for handling multilingual content and copyright information.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/entity/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet href=\"copy.css\" type=\"text/css\"?>\n<root>\n  \"\n    \"\n  <h>\n    a=\"noti;\"\n  \"\n    \"\n  <h>\n    a=\"lang=\"\n  \"\n    \"\n  <test>\n    test=\"Ӓ\"\n  \"\n    \"\n  <test>\n    test=\"Ē\"\n  \"\n    \"\n  <Geschlecht>\n    \"♂\"\n  \"\n    \"\n  <copyright>\n    \"O'Reilly & Associates\"\n  \"\n    \"\n  <foo>\n    \"©©™™\"\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Running Issue Check Script in Shell\nDESCRIPTION: A shell script is provided to automatically unignore fixed tests, helping maintain an up-to-date test suite.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/check-issues.sh\n```\n\n----------------------------------------\n\nTITLE: Deprecated Package Usage Warning for SWC Polyfill\nDESCRIPTION: A warning message indicating that @swc/polyfill is deprecated and providing guidance on the recommended alternative approach using core-js and regenerator-runtime/runtime separately.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_ecma_preset_env/tests/fixtures/corejs3/entry-babel-polyfill/stderr.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`@swc/polyfill` is deprecated. Please, use required parts of `core-js`\n  and `regenerator-runtime/runtime` separately\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure with DOCTYPE Declaration\nDESCRIPTION: A minimal XML document that includes a DOCTYPE declaration for 'greeting', a root element, and a text node with the value \"test\".\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset_empty/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Root Element and Processing Instruction\nDESCRIPTION: This snippet demonstrates a basic XML structure with a root element and a processing instruction. It includes an empty root element and a processing instruction with the target 'foo'.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-9/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n| <root>\n|   \"\n    \"\n<?foo ? >\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: XML Processing Instructions Syntax Examples\nDESCRIPTION: A comprehensive set of XML processing instruction test cases covering standard declarations, different attribute combinations, and edge cases. Includes variations of version, encoding, and standalone attributes with different quote styles.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/pi/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml-stylesheet type=\"text/xsl\" href=\"/Content/Glossary/main.xsl\">\n<?xslt ma>\n<?xslt m>\n<?xslt >\n<?xslt >\n<?xml-stylesheet >\n<?foo version=\"1.0\">\n<?foo version='1.0'>\n<?foo version='1.0' encoding=\"UTF-8\">\n<?foo version='1.0' encoding='UTF-8'>\n<?foo version='1.0' encoding='utf-8'>\n<?foo version='1.0' encoding='EUC-JP'>\n<?foo version='1.0' encoding='UTF-8' standalone='yes'>\n<?foo version='1.0' encoding='UTF-8' standalone='no'>\n<?foo version='1.0' standalone='no'>\n<?foo version='1.0' standalone='no' >\n<?foo >\n<?f ?oo>\n<?f ?oo?>\n<?f ?????>\n<?test aaa >\n<?test ? >\n<?test a a a >\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Root Element and Comments\nDESCRIPTION: This XML snippet defines a document structure with a root element and includes nested comments. It demonstrates the basic XML syntax and unconventional use of comments within the structure.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-20/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- <!-x\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Root and Child Elements\nDESCRIPTION: This XML snippet defines a root element containing a child element 'c' with an attribute 'foo'. The structure includes some whitespace and a closing root tag.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-partially-quoted-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n    \"\n    \"\n    <c>\n        foo=\"test></c>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Icon Structure and Metadata in XML\nDESCRIPTION: This snippet defines the overall structure of an SVG file, including XML version, DOCTYPE, and the root SVG element with various attributes for size, viewbox, and namespaces.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/svg/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n<svg\n  enable-background=\"new 5.5 -3.5 64 64\"\n  height=\"64px\"\n  id=\"Layer_1\"\n  version=\"1.0\"\n  viewBox=\"5.5 -3.5 64 64\"\n  width=\"64px\"\n  x=\"0px\"\n  xml:space=\"preserve\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n  y=\"0px\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure for People List in XML\nDESCRIPTION: This XML snippet defines a structure for storing information about people. It includes a root element 'people_list' and nested 'person' elements containing fields for name, birthdate, and gender. The structure allows for multiple person entries within the list.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\">\n<!DOCTYPE people_list>\n<people_list>\n  \"\n    \"\n  <person>\n    \"\n        \"\n    <name>\n      \"Fred Bloggs\"\n    \"\n        \"\n    <birthdate>\n      \"2008-11-27\"\n    \"\n        \"\n    <gender>\n      \"Male\"\n    \"\n    \"\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace Demo in JavaScript\nDESCRIPTION: Shows a basic error being thrown and its resulting stack trace output including function names, file paths, and line numbers. The trace shows the error originating in getStackTrace() and propagating through namedCallingFunction().\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-7506/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Malformed XML Structure\nDESCRIPTION: This code snippet shows an example of a malformed XML document. It includes an incomplete XML declaration, mismatched quotes, and an improperly closed comment. This serves as an example of what not to do when writing XML.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-15/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!---\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Throwing and Propagating Errors in JavaScript Constructors\nDESCRIPTION: This snippet shows how an error is thrown in a constructor and propagated through parent constructors and anonymous functions. It demonstrates the structure of a stack trace in JavaScript.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-9742/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow new Error('foo')\n```\n\n----------------------------------------\n\nTITLE: Creating Malformed XML Document with Errors\nDESCRIPTION: This XML snippet demonstrates common errors in XML structure, including mismatched tags, improper comment formatting, and invalid content placement. It serves as an example of what not to do when creating XML documents.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-13/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!--!\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure for a Note in XML\nDESCRIPTION: This XML snippet defines the structure of a note document. It includes elements for the recipient (to), sender (from), a heading, and the body content of the note. The structure is designed to represent a simple message or reminder.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/basic/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body>\n</note>\n```\n\n----------------------------------------\n\nTITLE: Defining Thin Stroke Paths for SWC Logo\nDESCRIPTION: Creates a group of paths with thinner strokes (6px width) that complement the thicker paths. These paths add more detail and structure to the logo design.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<g\n  stroke-width=\"6\"\n>\n  <path\n    d=\"M8,4c-8,9-5,30,17,49\"\n    stroke=\"#FD4\"\n  />\n  <path\n    d=\"M79,25c-22-6-32,14-42,26\"\n    stroke=\"#D25\"\n  />\n  <path\n    d=\"M10,118c23-8,20-30,20-44\"\n    stroke=\"#8CE\"\n  />\n  <path\n    d=\"M20,48l10,12v13m0-13l10-12\"\n    stroke=\"#FFF\"\n  />\n</g>\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript\nDESCRIPTION: Demonstrates throwing a custom error with the message 'Boom' and its resulting stack trace. Shows how errors propagate through different scopes and anonymous functions.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2017/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure with DOCTYPE and Root Element\nDESCRIPTION: This XML snippet shows the structure of a document with a DOCTYPE declaration referencing 'hello.dtd' and 'goodbye.dtd', followed by a root element containing the text 'test'.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/public_id-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting \"hello.dtd\" \"goodbye.dtd\">\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Path for Icon Shape in SVG\nDESCRIPTION: This snippet contains a complex path definition that creates the stylized 'i' shape of the icon. It includes multiple curve and line commands to form the detailed outline of the icon.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/svg/dom.txt#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<path\n  d=\"M37.443-3.5c8.988,0,16.57,3.085,22.742,9.257C66.393,11.967,69.5,19.548,69.5,28.5c0,8.991-3.049,16.476-9.145,22.456    C53.879,57.319,46.242,60.5,37.443,60.5c-8.649,0-16.153-3.144-22.514-9.43C8.644,44.784,5.5,37.262,5.5,28.5    c0-8.761,3.144-16.342,9.429-22.742C21.101-0.415,28.604-3.5,37.443-3.5z M37.557,2.272c-7.276,0-13.428,2.553-18.457,7.657    c-5.22,5.334-7.829,11.525-7.829,18.572c0,7.086,2.59,13.22,7.77,18.398c5.181,5.182,11.352,7.771,18.514,7.771    c7.123,0,13.334-2.607,18.629-7.828c5.029-4.838,7.543-10.952,7.543-18.343c0-7.276-2.553-13.465-7.656-18.571    C50.967,4.824,44.795,2.272,37.557,2.272z M46.129,20.557v13.085h-3.656v15.542h-9.944V33.643h-3.656V20.557    c0-0.572,0.2-1.057,0.599-1.457c0.401-0.399,0.887-0.6,1.457-0.6h13.144c0.533,0,1.01,0.2,1.428,0.6    C45.918,19.5,46.129,19.986,46.129,20.557z M33.042,12.329c0-3.008,1.485-4.514,4.458-4.514s4.457,1.504,4.457,4.514    c0,2.971-1.486,4.457-4.457,4.457S33.042,15.3,33.042,12.329z\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Nested Comments\nDESCRIPTION: This XML snippet demonstrates the structure of an XML document with a root element and nested comments. It includes an XML declaration, root tags, and comments containing special characters and nested comment syntax.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-21/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!-x-\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Creating Main Graphic Group for SWC Logo\nDESCRIPTION: Establishes the main group of graphical elements with shared styling properties like fill and stroke-linecap. This group contains all the visual components of the logo.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<g\n  fill=\"none\"\n  stroke-linecap=\"round\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Comments\nDESCRIPTION: This snippet shows a basic XML document structure including the XML declaration, root element, and comments. It contains some unusual formatting and potentially malformed elements.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-31/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- ---x>\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining Thick Stroke Paths for SWC Logo\nDESCRIPTION: Creates a group of paths with thick strokes (8px width) that form part of the logo. These paths use different colors and create distinct shapes within the overall design.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<g\n  stroke-width=\"8\"\n>\n  <path\n    d=\"M23,40l2,13l-13-2\"\n    stroke=\"#FD4\"\n  />\n  <path\n    d=\"M36,40l-1,13l13-3\"\n    stroke=\"#D25\"\n  />\n  <path\n    d=\"M23,80l7-11l7,11\"\n    stroke=\"#8CE\"\n  />\n</g>\n```\n\n----------------------------------------\n\nTITLE: Defining Empty XML Document Structure\nDESCRIPTION: This snippet shows the basic structure of an empty XML document with a processing instruction.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-5/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?fo ?o>\n```\n\n----------------------------------------\n\nTITLE: Basic XML Structure with Comment\nDESCRIPTION: Demonstrates a minimal XML document structure with an HTML-style comment and a root DocumentElement tag.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/comment-no-dtd/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!--  My Comment  -->\n<DocumentElement>\n```\n\n----------------------------------------\n\nTITLE: XML Document with DOCTYPE Declaration and DTD References\nDESCRIPTION: An XML document that declares its DOCTYPE with references to two DTD files ('hello.dtd' and 'goodbye.dtd') and contains a simple root element with text content. This structure defines both the document type and content hierarchy.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/public_id/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting \"hello.dtd\" \"goodbye.dtd\">\n<root>\n  \"test\"\n\n```\n\n----------------------------------------\n\nTITLE: Documenting ES Common Feature in Markdown\nDESCRIPTION: This snippet describes the introduction of pure `Span` and `BytePos` to handle `#__PURE__` in the ES common module.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(es/common)** Introduce pure `Span` and `BytePos` to handle `#__PURE__` ([#9539](https://github.com/swc-project/swc/issues/9539)) ([f63a481](https://github.com/swc-project/swc/commit/f63a481833ebe9b5eae0708ee69b6a50b946ee28))\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure for a Note\nDESCRIPTION: This XML snippet defines the structure of a note, including elements for the recipient, sender, heading, and body. It demonstrates basic XML document structure and element nesting.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/non-whitespace-before/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<note>\n  <to>\n    \"Tove\"\n  </to>\n  <from>\n    \"Jani\"\n  </from>\n  <heading>\n    \"Reminder\"\n  </heading>\n  <body>\n    \"Don't forget me this weekend!\"\n  </body>\n</note>\n```\n\n----------------------------------------\n\nTITLE: Documenting Plugin Runner Feature in Markdown\nDESCRIPTION: This snippet outlines an improvement to error messages in the plugin runner.\nSOURCE: https://github.com/swc-project/swc/blob/main/CHANGELOG-CORE.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- **(plugin/runner)** Improve error message ([#9502](https://github.com/swc-project/swc/issues/9502)) ([da52930](https://github.com/swc-project/swc/commit/da529304fe23bcb1a15c25811f928ebf91207ef0))\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the basic structure of an XML document, including the XML declaration, root element, and a comment. It also includes empty string content within the root element.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-39/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- -- -->\n  \"\n\"\n</root>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure with Comments\nDESCRIPTION: This snippet shows the structure of an XML document including the XML declaration, root element, and nested comments. It demonstrates basic XML syntax and comment usage.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-10/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Nested Comments in XML\nDESCRIPTION: This XML snippet defines a basic structure with a root element and includes nested comments. It demonstrates the use of XML declaration, root element, and comment syntax, including a nested comment structure.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-16/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- <!--x\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic XML Document Structure with Root Element\nDESCRIPTION: This XML document includes a document declaration with UTF-8 encoding, a root element containing whitespace and text content, and a comment section. The comment structure appears to be malformed with nested comment markers.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-25/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <!x--\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with PHP Processing Instruction\nDESCRIPTION: This snippet shows an XML structure with a root element, a 'foo' element, and includes a PHP processing instruction. The structure also contains empty string nodes, which may be placeholders for content.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-2/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version='1.0'encoding='UTF-8'>\n| <root>\n|   \"\n    \"\n|   <foo>\n<? foo>\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure for a Note\nDESCRIPTION: This XML snippet defines the structure of a note document. It includes the XML declaration and a root 'note' element with child elements for recipient, sender, heading, and body content.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/non-whitespace-after/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body>\n</note>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document with a root element and an empty comment. It includes the XML declaration specifying version and encoding.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-4/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!--  -->\n  \"\n\"\n</root>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Processing Instruction for 'foo'\nDESCRIPTION: This snippet shows an XML processing instruction for 'foo'. Processing instructions are used to provide instructions to XML processors or applications that handle XML data.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-10/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?foo ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document including the XML declaration, root element, and comments. It demonstrates proper XML syntax and nesting.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-9/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- <\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: A skeleton XML structure with document declaration, root element, and empty content strings. Includes a commented section.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-14/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <! -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Including Text Element in SWC Logo\nDESCRIPTION: Adds a text element to the SVG logo. The content is simply \"Text\", which may be a placeholder for actual text to be included in the final logo design.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/basic/dom.txt#2025-04-21_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<text>\n  Text\n</text>\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript\nDESCRIPTION: Code snippet demonstrating throwing a new Error with message 'Boom'. Shows how errors are thrown and the resulting stack trace format.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2015/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic XML Document Structure with Comments\nDESCRIPTION: This snippet shows the structure of an XML document with the XML declaration, a root element containing some whitespace, and a partially commented-out XML tag.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-23/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <!x\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Nested XML/HTML Tag Structure with Attribute\nDESCRIPTION: A simple XML or HTML structure with a root element containing a nested 'foo' element. The 'foo' element has an attribute 'bar' set to the ampersand character, which is a special character in XML/HTML.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-character-reference/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n| <root>\n|   \"\n    \"\n|   <foo>\n|     bar=\"&\"\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in JavaScript for Stacktrace Testing\nDESCRIPTION: A simple code snippet that throws an 'Error' with the message 'Boom'. This is used to test how the SWC compiler handles stacktraces in ES2019 mode.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/issue-1796/es2019/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow new Error('Boom');\n```\n\n----------------------------------------\n\nTITLE: Basic XML Document Structure with Root Element and Comment\nDESCRIPTION: This XML snippet shows a basic document structure with an XML declaration, a root element containing whitespace, and a multi-line comment. The document uses UTF-8 encoding as specified in the declaration.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-24/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!x-\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Empty Attribute\nDESCRIPTION: An HTML element with the attribute 'a' set to an empty string.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-no-equal/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<c>\n  a=\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in JavaScript\nDESCRIPTION: A simple JavaScript code snippet that throws an Error with the message 'Boom'. This is part of a test case for checking stacktrace formatting in the SWC project.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/case-1/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Boom')\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Root Element and Comments\nDESCRIPTION: This XML snippet shows the structure of a basic XML document. It includes the XML declaration, a root element, escaped quotation marks, and an incomplete comment. The XML declaration specifies UTF-8 encoding.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-2/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- --!\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Multiple Attributes\nDESCRIPTION: An HTML element with attribute 'a' set to 'b' and attribute 'q' set to an empty string.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-no-equal/dom.txt#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<c>\n  a=\"b\"\n  q=\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in JavaScript for Stack Trace Testing\nDESCRIPTION: This code snippet intentionally throws an error to generate a stack trace. It's used to test error handling and stack trace formatting in Deno environments.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/stacktrace/deno-10014/output/stacks.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow new Error(\"Hello\");\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document. It includes the XML declaration, root element, empty text nodes, and a comment. This structure serves as a template for more complex XML documents.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-33/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- -- -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document. It includes the XML declaration, root element, empty text nodes, and a comment. This structure serves as a template for more complex XML documents.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-35/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- a- -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Basic XML Document Structure with DOCTYPE Declaration\nDESCRIPTION: A simple XML document that starts with a DOCTYPE declaration referencing 'hello.dtd'. The document contains a root element with a text node inside it.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/system_id/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting \"\" \"hello.dtd\">\n<root>\n  \"Text\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Comments\nDESCRIPTION: This XML snippet defines a basic structure with a root element, includes a comment about grading (B+, B, or B-), and contains intentional whitespace. It serves as a template for XML formatting.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-36/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!--  B+, B, or B- -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure with DOCTYPE Declaration\nDESCRIPTION: Shows a simple XML/SGML document with a DOCTYPE declaration referencing an external DTD file called 'hello.dtd', followed by a root element containing text.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/system_id-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting \"\" \"hello.dtd\">\n<root>\n  \"Text\"\n\n```\n\n----------------------------------------\n\nTITLE: SVG Document with Root Element\nDESCRIPTION: Basic SVG document structure showing DOCTYPE declaration and root element containing a text value.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: svg\nCODE:\n```\n<!DOCTYPE svg>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Comments\nDESCRIPTION: This XML snippet shows a basic document structure with a root element and some unusual comment syntax. It includes an XML declaration, whitespace, and nested comments.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-17/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!--x-\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Incomplete SVG Document Structure\nDESCRIPTION: An example of a malformed SVG/XML document that shows incorrect structure with missing closing tags and improper nesting. Contains only doctype, root element and a text node.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset-3/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE svg>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic XML Document Structure\nDESCRIPTION: An XML document example with a root element, text content, and comments. Note that there's an error in the XML declaration (missing closing '?') and improper comment syntax.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-29/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- -!->\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: XML Document Structure with HTML Comments\nDESCRIPTION: A basic XML file with a root element containing text nodes and an HTML comment syntax. The comment structure appears to be testing edge cases in XML/HTML parsing.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-30/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- --!x>\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Root and Child Elements in XML\nDESCRIPTION: This XML snippet demonstrates the structure of a simple document with a root element containing a child element. The child element 'c' has an attribute 'foo' with the value 'test'. Note that there's an unclosed attribute value, which may be a syntax error.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/attribute-partially-quoted/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n  \"\n    \"\n  <c>\n    foo=\"test></c>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Basic XML Document with Nested Comments\nDESCRIPTION: This XML document demonstrates an XML declaration with UTF-8 encoding and a root element containing text nodes and nested comment structures. The document contains syntax errors including an unclosed comment tag and potential attempts at XML injection.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-18/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <!--x--\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining XML Root Element and Processing Instruction\nDESCRIPTION: This snippet shows the structure of an XML document with a root element and a processing instruction. The root element is empty, and the processing instruction uses the 'foo' target.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-7/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n    \"\n    \"\n<? ?foo?>\n    \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure with DOCTYPE and Root Element\nDESCRIPTION: This XML snippet shows the structure of a basic XML document. It includes a DOCTYPE declaration for 'greeting', defines a root element, and contains a text node with the value 'test'.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/only-name/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Malformed XML Document with Syntax Errors\nDESCRIPTION: This code snippet demonstrates an XML document with multiple syntax errors including an incorrect XML declaration (missing closing ?>), malformed comment structure, and dangling quotes. The document is incomplete and would fail validation.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-22/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!-x--\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for better_scoped_tls\nDESCRIPTION: Demonstrates the improved error message displayed when a thread local variable is accessed without properly using the .set method. This improvement over the original scoped-tls library helps developers identify the source of the error more easily.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/better_scoped_tls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou should perform this operation in the closure passed to `set` of better_scoped_tls::tests::TESTTLS\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic XML Document Structure with DOCTYPE Declaration\nDESCRIPTION: Demonstrates the structure of a minimal XML document with a DOCTYPE declaration for 'greeting', a root element, and a text node containing a quoted string.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset_empty-2/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests in TypeScript for Deno Runtime\nDESCRIPTION: Demonstrates how to create unit tests using the `unitTest()` function in Deno. It shows a simple test and a more complex test with conditional execution and permission settings.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc/tests/deno-unit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unitTest } from \"./test_util.ts\";\n\nunitTest(function simpleTestFn(): void {\n  // test code here\n});\n\nunitTest({\n    ignore: Deno.build.os === \"windows\",\n    perms: { read: true, write: true },\n  },\n  function complexTestFn(): void {\n    // test code here\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple XML Document with DOCTYPE Declaration\nDESCRIPTION: A basic XML document structure with a DOCTYPE declaration named 'greeting' and a root element containing a text node with the value \"test\".\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/fixture/document_type/internal_subset_empty-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE greeting>\n<root>\n  \"test\"\n```\n\n----------------------------------------\n\nTITLE: Invalid XML Document Structure with Syntax Errors\nDESCRIPTION: This snippet shows an XML document with several syntax errors: missing closing angle bracket in the XML declaration, unescaped quotes within elements, and an improperly formatted and unterminated comment section.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-3/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- --\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Project Package in JSON\nDESCRIPTION: Defines the package configuration for the SWC project, including dependencies, scripts, and project metadata. It specifies build commands, test scripts, and various development tools used in the project.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/jsdoc/tests/fixtures/src/ignored.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"swc\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Super-fast alternative for babel\",\n  \"author\": \"강동윤 <kdy1997.dev@gmail.com>\",\n  \"license\": \"Apache-2.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/swc-project/swc.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/swc-project/swc/issues\"\n  },\n  \"homepage\": \"https://swc.rs\",\n  \"engines\": {\n    \"node\": \">= 10\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:node && npm run build:browser\",\n    \"build:node\": \"napi create-npm-dir -t npm && cargo-cp-artifact -nc index.node -- cargo build --message-format=json-render-diagnostics\",\n    \"build:browser\": \"npx swc ./src -d ./lib -s\",\n    \"test\": \"jest --config jest.config.js\",\n    \"test:jest\": \"jest\",\n    \"test:karma\": \"karma start --single-run --browsers ChromeHeadless karma.conf.js\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n  \"devDependencies\": {\n    \"@napi-rs/cli\": \"^2.14.1\",\n    \"@swc/cli\": \"^0.1.62\",\n    \"@swc/core\": \"^1.3.35\",\n    \"@types/jest\": \"^29.4.0\",\n    \"@types/node\": \"^18.11.18\",\n    \"cargo-cp-artifact\": \"^0.1\",\n    \"jest\": \"^29.4.1\",\n    \"karma\": \"^6.4.1\",\n    \"karma-chrome-launcher\": \"^3.1.1\",\n    \"karma-cli\": \"^2.0.0\",\n    \"karma-firefox-launcher\": \"^2.1.2\",\n    \"karma-mocha\": \"^2.0.1\",\n    \"karma-webpack\": \"^5.0.0\",\n    \"mocha\": \"^10.2.0\",\n    \"ts-jest\": \"^29.0.5\",\n    \"typescript\": \"^4.9.5\",\n    \"webpack\": \"^5.75.0\",\n    \"webpack-cli\": \"^5.0.1\"\n  },\n  \"dependencies\": {\n    \"@napi-rs/cli\": \"^2.14.1\",\n    \"@swc/core\": \"^1.3.35\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty XML Processing Instruction in SWC Project Root\nDESCRIPTION: This code snippet contains an empty XML processing instruction. It may be a placeholder or used for testing purposes within the SWC project structure.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/pi/bad-pi-11/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<? ?test?>\n```\n\n----------------------------------------\n\nTITLE: Referencing SWC Core Linux x64 Musl Package in Markdown\nDESCRIPTION: This snippet shows how to reference the specific SWC core package for Linux x64 with Musl libc in a Markdown document. It uses a code block to highlight the package name.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-x64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n@swc/core-linux-x64-musl\n```\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure with Special Characters\nDESCRIPTION: This XML snippet shows the basic structure of an XML document, including the XML declaration, root element, and handling of special characters and comments.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-27/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- <!<!--x -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in Plaintext\nDESCRIPTION: This code snippet shows a simple plaintext output. It appears to be an example or placeholder within the documentation.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/jsdoc/tests/fixtures/markdowntest.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    this is some code\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Binary for Windows x64 MSVC\nDESCRIPTION: This code snippet defines the package name for the Windows x64 MSVC binary of @swc/core. It uses a platform-specific naming convention to indicate the target architecture and compiler.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/core-win32-x64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Document with Root Element and Comment\nDESCRIPTION: A basic XML document structure that includes a document declaration, root element, double quotes as content, and a comment tag. This demonstrates the fundamental structure of an XML file with proper syntax.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-28/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <!-<!--x -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Package for macOS x64\nDESCRIPTION: This code snippet defines the package name for the SWC minifier binary targeted at x86_64 architecture on macOS (Darwin). It provides the specific package identifier used for distribution and installation of this binary version.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/darwin-x64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/minifier-darwin-x64`\n```\n\n----------------------------------------\n\nTITLE: Basic XML Document Structure with Comments and Special Characters\nDESCRIPTION: This XML document shows a root element containing quoted text and a comment tag. It demonstrates proper XML comment syntax and handling of whitespace and special characters.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-26/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <<!--x -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Referencing SWC Minifier Linux x64 GNU Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @swc/minifier-linux-x64-gnu package in a Markdown file. It specifies the package name and describes its purpose as the x86_64-unknown-linux-gnu binary for @swc/minifier.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/minifier-linux-x64-gnu`\n\nThis is the **x86_64-unknown-linux-gnu** binary for `@swc/minifier`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Root Element\nDESCRIPTION: This snippet demonstrates the structure of a minimal XML document. It includes the XML declaration, root element, and placeholders for content and comments.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-6/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!--  -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Identifying SWC HTML Package for macOS x64\nDESCRIPTION: This markdown snippet identifies the specific binary package for @swc/html, targeting the x86_64-apple-darwin architecture. It's used to clearly label the package for macOS x64 systems.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/darwin-x64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/html-darwin-x64`\n\nThis is the **x86_64-apple-darwin** binary for `@swc/html`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document with XML declaration, root element, and comment placeholders. It provides a template for creating XML files.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-1/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!--  -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Package for Linux ARM64 MUSL\nDESCRIPTION: This code snippet identifies the specific binary package for @swc/html designed for the aarch64-unknown-linux-musl platform. It's crucial for users who need to use SWC HTML on Linux ARM64 systems with MUSL libc.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@swc/html-linux-arm64-musl`\n\nThis is the **aarch64-unknown-linux-musl** binary for `@swc/html`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document with a root element, empty text nodes, and a comment. It includes the XML declaration, root element, and proper nesting.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-32/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!-- - -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Binary for ARM Linux in Markdown\nDESCRIPTION: This code snippet defines the package name for the ARM Linux (armv7-unknown-linux-gnueabihf) binary of @swc/html. It uses a Markdown code block to highlight the package name.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/linux-arm-gnueabihf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n@swc/html-linux-arm-gnueabihf\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Structure with Root Element\nDESCRIPTION: This XML snippet declares the XML version, defines a root element, and includes empty content and comment tags. It serves as a skeleton for building more complex XML documents.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-37/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!--  -->\n|   \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Windows Binary Package in Markdown\nDESCRIPTION: This code snippet defines the package name and target architecture for the Windows binary of @swc/html. It uses Markdown syntax to format the package name as inline code and emphasize the architecture specification.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/win32-ia32-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/html-win32-ia32-msvc`\n\nThis is the **i686-pc-windows-msvc** binary for `@swc/html`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic XML Document Structure\nDESCRIPTION: This snippet shows the structure of a basic XML document. It includes the XML declaration, root element, and a comment placeholder. The content within the root element is empty.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-38/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  \"\n    \"\n  <!--  -->\n  \"\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Document Structure with Custom Elements\nDESCRIPTION: This XML snippet defines various elements and productions for an XML-based language or schema. It includes definitions for characters, CDATA sections, DOCTYPE declarations, and custom productions using a mix of XML elements and embedded pseudo-code.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-40/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n<foo>\n  \"\n    \"\n  <!--  def='NT-Char' -->\n  <!--  -->\n  \"Char* ']]>' \"\n  <nt>\n    def=\"NT-Char\"\n    \"Char\"\n  \"*))\n']]>'\n\"\n  <com>\n    \"CDATA sections\"\n  \"\n\"\n  <rhs>\n    \"| '<!DOCTYPE'\n(\"\n    <nt>\n      def=\"NT-Char\"\n      \"Char\"\n    \" - ('[' | ']'))+\n('[\n\"\n    <nt>\n      def=\"NT-simpleDTD\"\n      \"simpleDTD\"\n    \"*\n']')? '>'\"\n  \"\n\"\n  <com>\n    \"doc type declaration\"\n  \"\n\"\n  <prod>\n    id=\"NT-simpleDTD\"\n    <lhs>\n      \"simpleDTD\"\n    \"\n\"\n    <rhs>\n      \"'<!&como;'\n(\"\n      <nt>\n        def=\"NT-Char\"\n        \"Char\"\n      \"* -\n(\"\n      <nt>\n        def=\"NT-Char\"\n        \"Char\"\n      \"* '&comc;' \"\n      <nt>\n        def=\"NT-Char\"\n        \"Char\"\n      \"*))\n'&comc;>'\"\n    \"-->\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining SWC Core Binary Architecture\nDESCRIPTION: This code snippet specifies the exact architecture and platform for which this binary of @swc/core is compiled. It indicates that the binary is for ARM v7 processors running on Linux with the GNU EABI hard-float ABI.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-arm-gnueabihf/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n**armv7-unknown-linux-gnueabihf**\n```\n\n----------------------------------------\n\nTITLE: Specifying Windows ARM64 Binary Package for SWC Core in Markdown\nDESCRIPTION: This snippet defines the package name for the Windows ARM64 binary of @swc/core using Markdown syntax. It specifies the target architecture as aarch64-pc-windows-msvc.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@swc/core-win32-arm64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Package for Linux x64 GNU\nDESCRIPTION: This code snippet shows the package name for the x86_64-unknown-linux-gnu binary of @swc/core. It's used to identify and reference this specific build of the SWC core library for Linux systems with x64 architecture using the GNU toolchain.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/core-linux-x64-gnu`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Package for Windows x64 in Markdown\nDESCRIPTION: This snippet defines the package name and specifies the target architecture for the SWC HTML binary. It uses Markdown syntax to format the package name as inline code and the architecture details in bold.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/html-win32-x64-msvc`\n\nThis is the **x86_64-pc-windows-msvc** binary for `@swc/html`\n```\n\n----------------------------------------\n\nTITLE: Referencing SWC Minifier Package for Linux ARM64 GNU\nDESCRIPTION: This code snippet shows the npm package name for the SWC minifier binary targeting the aarch64-unknown-linux-gnu architecture. It is used to reference the specific binary distribution in project dependencies or installation commands.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/linux-arm64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/minifier-linux-arm64-gnu`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Package for Linux x64 GNU\nDESCRIPTION: This code snippet defines the package name for the SWC HTML compiler binary targeting the x86_64-unknown-linux-gnu platform. It's typically used in package.json or similar configuration files to specify dependencies.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/html-linux-x64-gnu`\n```\n\n----------------------------------------\n\nTITLE: Referencing SWC Minifier Linux ARM64 MUSL Package in Markdown\nDESCRIPTION: This code snippet shows the package name for the SWC minifier binary targeting aarch64-unknown-linux-musl. It's used to identify and reference this specific build of the minifier.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/minifier-linux-arm64-musl`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Binary for Linux ARM64 GNU\nDESCRIPTION: This code snippet defines the package name for the SWC HTML binary specifically built for the aarch64-unknown-linux-gnu platform. It uses a code fence in Markdown to highlight the package name.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/linux-arm64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n@swc/html-linux-arm64-gnu\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Binary for Linux x64 Musl in Markdown\nDESCRIPTION: This snippet identifies the specific binary distribution of the @swc/minifier package for the x86_64-unknown-linux-musl architecture. It's crucial for users to understand which binary version they are using for compatibility and deployment purposes.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/linux-x64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/minifier-linux-x64-musl`\n\nThis is the **x86_64-unknown-linux-musl** binary for `@swc/minifier`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Package for Linux x64 Musl\nDESCRIPTION: This code block defines the package name for the SWC HTML compiler binary specifically built for x86_64-unknown-linux-musl platforms. It is used to identify and reference this particular binary distribution.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/linux-x64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@swc/html-linux-x64-musl`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Core Package for Linux ARM64 MUSL in Markdown\nDESCRIPTION: This code snippet defines the package name for the ARM64 MUSL binary of @swc/core. It specifies the target architecture as aarch64-unknown-linux-musl.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/core/scripts/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/core-linux-arm64-musl`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC HTML Package for Windows ARM64\nDESCRIPTION: This code snippet defines the package name for the Windows ARM64 version of the @swc/html binary. It targets the aarch64-pc-windows-msvc platform specifically.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/html-win32-arm64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Package for Linux ARM\nDESCRIPTION: This code snippet shows the npm package name for the ARM-specific binary of SWC minifier targeting Linux systems with GNU EABI hard-float ABI. It is used to reference the correct binary version for armv7-unknown-linux-gnueabihf architecture.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/linux-arm-gnueabihf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@swc/minifier-linux-arm-gnueabihf`\n```\n\n----------------------------------------\n\nTITLE: Displaying SWC Minifier Binary Information in Markdown\nDESCRIPTION: This snippet presents the name of the npm package for the SWC minifier Windows binary and specifies the target architecture. It uses Markdown formatting to highlight key information.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/win32-ia32-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/minifier-win32-ia32-msvc`\n\nThis is the **i686-pc-windows-msvc** binary for `@swc/minifier`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Package for Windows ARM64\nDESCRIPTION: This code snippet defines the package name for the SWC minifier binary targeting Windows ARM64 architecture. It uses the npm scoped package naming convention.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@swc/minifier-win32-arm64-msvc`\n```\n\n----------------------------------------\n\nTITLE: Specifying SWC Minifier Package for macOS ARM64\nDESCRIPTION: This code snippet shows the package name for the SWC minifier binary specifically built for macOS systems with ARM64 architecture (Apple Silicon).\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/minifier/scripts/npm/darwin-arm64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@swc/minifier-darwin-arm64`\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name for SWC HTML Darwin ARM64 Binary\nDESCRIPTION: This code snippet shows the package name for the ARM64 macOS binary of @swc/html. It emphasizes that this is specifically for the aarch64-apple-darwin architecture.\nSOURCE: https://github.com/swc-project/swc/blob/main/packages/html/scripts/npm/darwin-arm64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@swc/html-darwin-arm64`\n```\n\n----------------------------------------\n\nTITLE: Defining Incomplete XML Structure with Comments\nDESCRIPTION: This snippet shows an incomplete XML document structure with a root element and some commented content. The XML declaration is present, but the document is not properly closed and contains syntax errors.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-8/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- x\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining Malformed XML Document with Incomplete Comments\nDESCRIPTION: This XML document contains a root element with some whitespace content and an incomplete XML comment structure. The document is not well-formed as the comment appears to be improperly terminated with the closing comment tag on a separate line outside the root element.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-11/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n| <root>\n|   \"\n    \"\n|   <!-- <!-\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining an Invalid XML Document with Malformed Structure\nDESCRIPTION: This code snippet shows an XML document with several syntax errors including an incomplete XML declaration, improperly formatted content inside the root element, and incorrectly nested comment tags that extend beyond the root element's closing tag.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-12/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!--\n</root>\n\n -->\n```\n\n----------------------------------------\n\nTITLE: Defining an XML Document with Invalid Syntax\nDESCRIPTION: This XML snippet demonstrates an improperly formed XML document with declaration, root element, and malformed comments. It contains syntax errors including unclosed elements and improperly nested comments.\nSOURCE: https://github.com/swc-project/swc/blob/main/crates/swc_xml_parser/tests/recovery/comments/bad-19/dom.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\">\n| <root>\n|   \"\n    \"\n|   <!-- <!--x -->\n|   \"\n\"\n```"
  }
]