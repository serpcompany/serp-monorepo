[
  {
    "owner": "axios",
    "repo": "axios-docs",
    "content": "TITLE: Configuring Axios HTTP Requests in JavaScript\nDESCRIPTION: Complete reference for all configuration options available when making HTTP requests with Axios. This includes URL configuration, request methods, data transformation, authentication, response handling, timeout settings, and advanced features like proxying and request cancellation.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/req_config.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  // NOTE: params that are null or undefined are not rendered in the URL.\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Request Options in JavaScript\nDESCRIPTION: Complete configuration object showing all available options for making HTTP requests with Axios. Includes settings for URL configuration, request/response handling, authentication, timeout management, proxying, and various Node.js and browser-specific options.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/req_config.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api',\n\n  // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`.\n  // When set to true (default), absolute values for `url` will override `baseUrl`.\n  // When set to false, absolute values for `url` will always be prepended by `baseUrl`.\n  allowAbsoluteUrls: true,\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  // NOTE: params that are null or undefined are not rendered in the URL.\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function (params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // Disable if supplying a custom httpAgent/httpsAgent to manage proxying requests.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `signal` and instance of AbortController can be used to cancel the request\n  signal: new AbortController().signal,\n\n  // (Deprecatred) `cancelToken` specifies a cancel token that can also be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Multipart Form Data with Axios in JavaScript\nDESCRIPTION: This snippet demonstrates how to post multipart form data using Axios. It includes file upload and sets the Content-Type header to multipart/form-data.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/post_example.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = await axios.post('https://httpbin.org/post', {\n    firstName: 'Fred',\n    lastName: 'Flintstone',\n    orders: [1, 2, 3],\n    photo: document.querySelector('#fileInput').files\n  }, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Axios Config Object\nDESCRIPTION: Demonstrates how to send a POST request using Axios by passing a configuration object that specifies the HTTP method, URL, and request payload data.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/api_intro.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Catching and Handling Different Types of Axios Errors in JavaScript\nDESCRIPTION: This snippet demonstrates how to catch and handle different types of errors that can occur when making an HTTP request with Axios. It distinguishes between server response errors, request errors, and setup errors.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/handling_errors.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Catching and Analyzing Axios Errors in JavaScript\nDESCRIPTION: This snippet demonstrates how to catch and analyze different types of errors that may occur during an Axios request. It shows how to handle server responses outside the 2xx range, requests that receive no response, and errors during request setup.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/handling_errors.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Performing POST Request with Axios\nDESCRIPTION: Demonstrates how to make a POST request to send user data with Axios. The example shows sending firstName and lastName fields in the request body and handling the response using promises.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/post_example.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Catching and Analyzing Axios Errors in JavaScript\nDESCRIPTION: This snippet demonstrates how to catch and analyze different types of errors that may occur during an Axios request. It shows how to handle server responses outside the 2xx range, requests that receive no response, and errors during request setup.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/handling_errors.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Browser FormData Submission with Axios\nDESCRIPTION: Example of creating and submitting FormData in a browser environment using Axios. Shows how to append fields, files, and binary data.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Blob([1,2,3]));\nform.append('my_file', fileInput.files[0]);\n\naxios.post('https://example.com', form)\n```\n\n----------------------------------------\n\nTITLE: Capturing and Handling Axios Errors in JavaScript\nDESCRIPTION: This snippet demonstrates how to catch and handle different types of errors that may occur during an Axios request. It checks for response errors, request errors, and other types of errors, logging relevant information for each case.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/fr/handling_errors.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // la requête a été faite et le code de réponse du serveur n'est pas dans\n      // la plage 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // la requête a été faite mais aucune réponse n'a été reçue\n      // `error.request` est une instance de XMLHttpRequest dans le navigateur\n      // et une instance de http.ClientRequest avec node.js\n      console.log(error.request);\n    } else {\n      // quelque chose s'est passé lors de la construction de la requête et cela\n      // a provoqué une erreur\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request with Axios\nDESCRIPTION: Shows the simplified syntax for making a GET request using Axios by just passing the URL parameter. GET is the default HTTP method when not specified.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/api_intro.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxios('/user/12345');\n```\n\n----------------------------------------\n\nTITLE: Sending URL-encoded data using URLSearchParams in browser\nDESCRIPTION: This snippet demonstrates how to use the URLSearchParams API to send URL-encoded data in a POST request using Axios in a browser environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Axios Defaults in JavaScript\nDESCRIPTION: This snippet demonstrates how to set default configuration values that will apply to all Axios requests globally. It includes setting a base URL, authorization headers, and default content type for POST requests.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/config_defaults.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams for URL-Encoded Data in Browser\nDESCRIPTION: Demonstrates how to use the URLSearchParams API to send form-encoded data in browser environments using Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Axios Defaults in JavaScript\nDESCRIPTION: This snippet demonstrates how to set global default configuration values for all Axios requests, including the base URL, authorization headers, and content type headers.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/config_defaults.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Direct FileList Submission\nDESCRIPTION: Shows how to directly submit FileList objects using Axios's postForm method.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)\n```\n\n----------------------------------------\n\nTITLE: Configurando Valores Globales Predeterminados en Axios\nDESCRIPTION: Establece configuraciones globales por defecto para todas las solicitudes Axios, incluyendo URL base, headers de autorización y tipo de contenido para solicitudes POST.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/es/config_defaults.md#2025-04-08_snippet_0\n\nLANGUAGE: js\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Setting Axios Request Timeout with AbortSignal.timeout()\nDESCRIPTION: Uses the AbortSignal.timeout() API (available in Node.js 17.3+) to automatically cancel an Axios request after a specified timeout period.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/foo/bar', {\n   signal: AbortSignal.timeout(5000) //Aborts request after 5 seconds\n}).then(function(response) {\n   //...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Axios Defaults in JavaScript\nDESCRIPTION: This snippet demonstrates how to set global default configurations for Axios. It sets a base URL, a common authorization header, and a default content type for POST requests.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/kr/config_defaults.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Using toJSON for Detailed Error Information in Axios\nDESCRIPTION: This snippet demonstrates how to use the toJSON method on the error object to get more detailed information about an HTTP error when using Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/handling_errors.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Requests with Axios\nDESCRIPTION: Demonstrates three different methods of making GET requests with Axios: using promise chains with URL parameters, using a params object, and using async/await syntax. Includes error handling and request lifecycle management.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/example.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced FormData Submission with Special Notation\nDESCRIPTION: Demonstrates using special notation for object serialization and file uploads in FormData.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {\n  'myObj{}': {x: 1, s: \"foo\"},\n  'files[]': document.querySelector('#fileInput').files \n}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Requests with Axios\nDESCRIPTION: Demonstrates three different approaches to making GET requests with Axios: using promise chains, query parameters in options object, and async/await syntax. Includes error handling and response processing.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/example.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios');\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios for URL-encoded data using qs library (ES6)\nDESCRIPTION: This ES6 example demonstrates how to configure Axios options to send URL-encoded data using the qs library, explicitly setting the content-type header.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n----------------------------------------\n\nTITLE: Creating Axios Instance with Custom Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Axios instance with a custom configuration. It sets a base URL, timeout, and custom header for all requests made with this instance.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/instance.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n----------------------------------------\n\nTITLE: Legacy Node.js FormData Handling\nDESCRIPTION: FormData handling for older Axios versions (pre-1.3.0) using the form-data package.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Axios Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Axios instance with custom configuration options. It sets a base URL, timeout, and custom header for all requests made with this instance.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/instance.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Axios Requests with CancelToken Source\nDESCRIPTION: Shows how to cancel requests using the deprecated CancelToken.source() factory method. This approach allows passing a cancellation message and includes error handling for canceled requests.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/cancellation.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\n----------------------------------------\n\nTITLE: Adding Request and Response Interceptors in Axios\nDESCRIPTION: This snippet demonstrates how to add request and response interceptors in Axios. Request interceptors are executed before a request is sent, while response interceptors are executed after receiving a response. Both types of interceptors can modify the request/response or handle errors.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Request and Response Interceptors in Axios\nDESCRIPTION: This snippet demonstrates how to add both request and response interceptors in Axios. Request interceptors run before a request is sent, while response interceptors run after a response is received but before the promise is settled.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/interceptors.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Performing a POST Request with JSON Data in JavaScript using Axios\nDESCRIPTION: This snippet shows how to send a POST request with JSON data using Axios. It includes error handling with a .catch() block.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/post_example.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Requests with AbortController\nDESCRIPTION: Uses the modern AbortController API to cancel an Axios request. This is the recommended approach since v0.22.0 for terminating connections before they complete.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Request with AbortController in JavaScript\nDESCRIPTION: Demonstrates how to use AbortController to cancel an Axios GET request. This method is supported from Axios v0.22.0 onwards and aligns with the fetch API cancellation approach.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/cancellation.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n----------------------------------------\n\nTITLE: Canceling Axios Requests with AbortController\nDESCRIPTION: Demonstrates how to cancel Axios requests using the AbortController API, which is the recommended approach since v0.22.0. The AbortController provides a standardized way to abort requests using the signal property.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/cancellation.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling with validateStatus in Axios\nDESCRIPTION: This snippet shows how to use the validateStatus config option in Axios to customize which HTTP status codes should throw an error. In this example, it resolves for status codes less than 500.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/handling_errors.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Conditions with validateStatus in Axios\nDESCRIPTION: This snippet shows how to use the validateStatus config option in Axios to define which HTTP status codes should throw an error. In this example, it's set to throw an error only for status codes 500 and above.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/handling_errors.md#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Conditions with validateStatus in Axios\nDESCRIPTION: This snippet shows how to use the validateStatus config option in Axios to define which HTTP status codes should throw an error. In this example, it's set to throw an error only for status codes 500 and above.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/handling_errors.md#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Axios Error Validation in JavaScript\nDESCRIPTION: This code snippet shows how to use the validateStatus configuration option in Axios to customize which HTTP status codes should trigger an error. In this example, only status codes 500 and above will be treated as errors.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/fr/handling_errors.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // la requête résout tant que le code de sa réponse est\n                         // inférieur à 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Axios Response Object Structure\nDESCRIPTION: The complete schema of an Axios response object. It includes the server response data, HTTP status code, status text, response headers, the original request configuration, and the request object itself.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/res_schema.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  // As of HTTP/2 status text is blank or unsupported.\n  // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lower cased and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Response Object Structure in JavaScript\nDESCRIPTION: This snippet outlines the structure of the response object returned by Axios. It includes properties such as data, status, statusText, headers, config, and request, each with a brief explanation of its purpose.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/res_schema.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  // As of HTTP/2 status text is blank or unsupported.\n  // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lower cased and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams for URL-Encoding in Browser with Axios\nDESCRIPTION: Demonstrates how to use the browser's URLSearchParams API to serialize data for a POST request in application/x-www-form-urlencoded format using Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Custom Axios Instances in JavaScript\nDESCRIPTION: This snippet shows how to create a custom Axios instance with its own default configurations. It demonstrates setting defaults during instance creation and altering them afterward.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/config_defaults.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Axios Instances with Custom Defaults\nDESCRIPTION: This snippet shows how to create a custom Axios instance with its own default configuration. It demonstrates setting defaults during creation and modifying them afterward.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/config_defaults.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Configurando Instancias Personalizadas de Axios\nDESCRIPTION: Crea y configura instancias personalizadas de Axios con sus propios valores predeterminados, permitiendo múltiples configuraciones en una misma aplicación.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/es/config_defaults.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Establecer configuraciones por defecto al crear la instancia\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Modificar valores por defecto después que una instancia ha sido creada\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Custom Axios Instances in JavaScript\nDESCRIPTION: This example shows how to create a custom Axios instance with default settings and how to modify its defaults after creation. It sets a base URL during instance creation and adds an authorization header afterwards.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/kr/config_defaults.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 인스턴스를 생성할때 config 기본값 설정하기\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// 인스턴스를 만든 후 기본값 변경하기\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Concurrent Requests with Axios in JavaScript\nDESCRIPTION: This snippet demonstrates how to perform multiple concurrent requests using Axios and Promise.all(). It shows two methods: using async/await and using .then().\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/post_example.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nconst [acct, perm] = await Promise.all([getUserAccount(), getUserPermissions()]);\n\n// OR\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function ([acct, perm]) {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Concurrent Requests with Axios\nDESCRIPTION: Shows how to perform multiple HTTP GET requests concurrently using Promise.all() with Axios. The example fetches both user account data and permissions simultaneously for improved performance.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/post_example.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Axios Response with Promise Chains\nDESCRIPTION: Example showing how to access various properties of the Axios response object using the Promise's then() method. It demonstrates accessing the response data, status code, status text, headers, and configuration.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/res_schema.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Accessing Axios Response Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to access various properties of the Axios response object using the promise-based 'then' method. It shows logging of data, status, statusText, headers, and config properties.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/res_schema.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Using qs Library for URL-Encoding with Axios\nDESCRIPTION: Shows how to use the qs library to stringify an object for a POST request in application/x-www-form-urlencoded format with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n----------------------------------------\n\nTITLE: Sending URL-encoded data using qs library in browser\nDESCRIPTION: This snippet shows how to use the qs library to stringify data and send it as URL-encoded content in an Axios POST request in a browser environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n----------------------------------------\n\nTITLE: Using qs Library for URL-Encoded Data\nDESCRIPTION: Shows how to use the qs library to stringify and send form-encoded data with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n----------------------------------------\n\nTITLE: Custom Timeout Implementation with AbortController\nDESCRIPTION: Creates a helper function that generates an AbortSignal with a timeout. This approach provides a cross-browser compatible solution for automatic request cancellation after a specified duration.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction newAbortSignal(timeoutMs) {\n  const abortController = new AbortController();\n  setTimeout(() => abortController.abort(), timeoutMs || 0);\n\n  return abortController.signal;\n}\n\naxios.get('/foo/bar', {\n   signal: newAbortSignal(5000) //Aborts request after 5 seconds\n}).then(function(response) {\n   //...\n});\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Request with CancelToken Source in JavaScript\nDESCRIPTION: Shows how to use the deprecated CancelToken.source() method to cancel Axios GET and POST requests. This approach is based on the withdrawn cancelable promises proposal and shouldn't be used in new projects.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/cancellation.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\n----------------------------------------\n\nTITLE: Using querystring Module in Node.js with Axios\nDESCRIPTION: Shows how to use the Node.js querystring module to stringify data for a POST request with Axios in a Node.js environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n----------------------------------------\n\nTITLE: Sending URL-encoded data using querystring module in Node.js\nDESCRIPTION: This snippet illustrates how to use the Node.js querystring module to stringify data for URL-encoded POST requests with Axios in a Node.js environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n----------------------------------------\n\nTITLE: Using querystring Module in Node.js\nDESCRIPTION: Shows how to use Node.js built-in querystring module to stringify data for Axios requests.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams from url Module in Node.js with Axios\nDESCRIPTION: Demonstrates using the URLSearchParams class from Node.js url module to stringify data for a POST request with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams from url module in Node.js\nDESCRIPTION: This example shows how to use the URLSearchParams class from the Node.js url module to create URL-encoded data for Axios POST requests in a Node.js environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n```\n\n----------------------------------------\n\nTITLE: Using URLSearchParams in Node.js\nDESCRIPTION: Demonstrates using Node.js URL module's URLSearchParams for request data formatting.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = require('url');\nconst params = new url.URLSearchParams({ foo: 'bar' });\naxios.post('http://something.com/', params.toString());\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Axios in TypeScript\nDESCRIPTION: Demonstrates how to use Axios with TypeScript to make a GET request. Shows the basic import syntax and a simple GET request with a query parameter.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/notes.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Axios in TypeScript\nDESCRIPTION: Demonstrates how to import and use Axios to make a GET request in TypeScript. Shows the basic syntax for making an HTTP GET request with a query parameter.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/notes.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n----------------------------------------\n\nTITLE: Downloading Image Stream with Axios in Node.js\nDESCRIPTION: Shows how to download and save an image file using Axios in Node.js by setting responseType to stream and piping the response to a write stream.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/api_intro.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios({\n  method: 'get',\n  url: 'http://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n----------------------------------------\n\nTITLE: Axios Form Submission Using PostForm Shorthand\nDESCRIPTION: Demonstrates using Axios's postForm shorthand method for simpler form submissions with automatic serialization.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naxios.postForm('https://httpbin.org/post', {\n  my_field: 'my value',\n  my_buffer: new Blob([1,2,3]),\n  my_file:  fileInput.files // FileList will be unwrapped as sepate fields\n});\n```\n\n----------------------------------------\n\nTITLE: Using Axios Automatic Serialization for URL-Encoded Data\nDESCRIPTION: Demonstrates Axios's automatic serialization of complex nested objects to URL-encoded format when the content-type header is set appropriately.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n};\n\nawait axios.post('https://postman-echo.com/post', data,\n  {headers: {'content-type': 'application/x-www-form-urlencoded'}}\n);\n```\n\n----------------------------------------\n\nTITLE: Sending form data using form-data library in Node.js\nDESCRIPTION: This snippet demonstrates how to use the form-data library to create and send multipart form data in an Axios POST request, including file uploads, in a Node.js environment.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form, { headers: form.getHeaders() })\n```\n\n----------------------------------------\n\nTITLE: Using form-data Library in Node.js\nDESCRIPTION: Shows how to handle multipart form data using the form-data library with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FormData = require('form-data');\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form, { headers: form.getHeaders() })\n```\n\n----------------------------------------\n\nTITLE: Server Response Format for URL-Encoded Data\nDESCRIPTION: Shows how the server interprets and formats URL-encoded data submitted through Axios, including the structure of nested arrays and objects.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }\n```\n\n----------------------------------------\n\nTITLE: Using interceptor for FormData headers in Axios\nDESCRIPTION: This code snippet shows how to use an Axios request interceptor to automatically set the appropriate headers when sending FormData, ensuring proper handling of multipart form data.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/urlencoded.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use(config => {\n  if (config.data instanceof FormData) {\n    Object.assign(config.headers, config.data.getHeaders());\n  }\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Axios Interceptor for FormData Headers\nDESCRIPTION: Demonstrates how to use an Axios interceptor to automatically handle FormData headers.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use(config => {\n  if (config.data instanceof FormData) {\n    Object.assign(config.headers, config.data.getHeaders());\n  }\n  return config;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios with CommonJS and TypeScript Support\nDESCRIPTION: Shows how to import Axios using CommonJS require() while maintaining TypeScript typings for autocomplete and parameter validation.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/example.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios with TypeScript in CommonJS\nDESCRIPTION: Shows how to properly import Axios in a CommonJS environment while maintaining TypeScript typings for autocomplete and parameter validation.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/example.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed Error Information with toJSON in Axios\nDESCRIPTION: This snippet demonstrates how to use the toJSON method to obtain more detailed information about an HTTP error in Axios. It logs the JSON representation of the error object, which includes additional details about the failed request.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/handling_errors.md#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n----------------------------------------\n\nTITLE: Obtaining Detailed Error Information with Axios in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the toJSON method on an Axios error object to obtain more detailed information about an HTTP error. This can be useful for logging or debugging purposes.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/fr/handling_errors.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Config Precedence in Axios\nDESCRIPTION: This example illustrates the order of precedence for configuration values in Axios. It shows how request-specific configs override instance defaults, which in turn override library defaults.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/config_defaults.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Axios Config Precedence Order\nDESCRIPTION: This example illustrates the order of precedence for Axios configuration settings. It shows how request-specific config overrides instance defaults, which in turn override library defaults.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/config_defaults.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Implementando Orden de Precedencia en Configuraciones de Axios\nDESCRIPTION: Demuestra el orden de precedencia de configuraciones en Axios, donde los valores específicos de la petición tienen prioridad sobre los valores predeterminados de la instancia y de la biblioteca.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/es/config_defaults.md#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Crear una instancia usando la configuración por defecto proveída por la librería\n// En este punto el valor del tiempo de espera es `0`, ya que es el valor predeterminado de la librería.\nconst instance = axios.create();\n\n// Sobrescribir el tiempo de espera predeterminado para la librería\n// Ahora todas las peticiones que usen esta instancia esperaran 2.5 segundos antes de ser canceladas\ninstance.defaults.timeout = 2500;\n\n// Sobrescribir el tiempo máximo de espera cuando se sabe que la petición tomara mucho tiempo\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Axios Configuration Priority in JavaScript\nDESCRIPTION: This snippet illustrates the priority order of Axios configurations. It shows how to create an instance with library defaults, override the timeout setting for all requests, and then override it again for a specific request.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/kr/config_defaults.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 라이브러리에서 제공하는 config 기본값을 사용하여 인스턴스 만들기\n// 이 때 timeout 값은 라이브러리의 기본값인 '0'입니다.\nconst instance = axios.create();\n\n// 라이브러리에 대한 timeout 값 재정의\n// 이제 모든 요청은 시간 초과 전 2.5초 대기하는 인스턴스를 사용합니다.\ninstance.defaults.timeout = 2500;\n\n// 시간이 오래 걸리는 요청에 대한 timeout 값 재정의\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Removing an Interceptor in Axios\nDESCRIPTION: This snippet shows how to remove a previously added interceptor in Axios. It demonstrates storing the interceptor in a variable when adding it, and then using the eject method to remove it later.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/interceptors.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n----------------------------------------\n\nTITLE: Removing Axios Interceptors\nDESCRIPTION: This snippet shows how to remove a previously added interceptor using the eject method. The interceptor must first be saved to a variable when it's created, which can then be passed to the eject method.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/interceptors.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n----------------------------------------\n\nTITLE: Adding Interceptors to Custom Axios Instance\nDESCRIPTION: This snippet illustrates how to add interceptors to a custom instance of Axios. It first creates a custom instance using axios.create(), then adds a request interceptor to that instance.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/interceptors.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Adding Interceptors to a Custom Axios Instance\nDESCRIPTION: This snippet demonstrates how to add interceptors to a custom instance of Axios rather than the global axios object. Custom instances can have their own configuration and interceptors.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/interceptors.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Posting an HTML Form as JSON with Axios in JavaScript\nDESCRIPTION: This snippet shows how to post an HTML form as JSON data using Axios. It sets the Content-Type header to application/json.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/post_example.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = await axios.post('/user', document.querySelector('#my-form'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Requests with CancelToken Source (Deprecated)\nDESCRIPTION: Uses the deprecated CancelToken.source() factory to create a token for cancelling Axios requests. This approach allows providing a custom cancellation message but is not recommended for new projects.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\n----------------------------------------\n\nTITLE: Using Both AbortController and CancelToken for Axios Requests in JavaScript\nDESCRIPTION: Illustrates how to use both AbortController and CancelToken APIs simultaneously for the same request during the transition period. This approach provides backward compatibility while adopting the newer cancellation method.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/cancellation.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token,\n  signal: controller.signal\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n// OR\ncontroller.abort(); // the message parameter is not supported\n```\n\n----------------------------------------\n\nTITLE: Using Both AbortController and CancelToken\nDESCRIPTION: Shows how to use both cancellation APIs simultaneously during the transition period. This approach supports both modern and legacy cancellation methods in the same request.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/cancellation.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token,\n  signal: controller.signal\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n// OR\ncontroller.abort(); // the message parameter is not supported\n```\n\n----------------------------------------\n\nTITLE: Node.js FormData Creation and Submission\nDESCRIPTION: Shows how to create and submit FormData in Node.js environment using Axios with Blob support.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Blob(['some content']));\n\naxios.post('https://example.com', form)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Requests with CancelToken Constructor (Deprecated)\nDESCRIPTION: Creates a cancellation token using the CancelToken constructor with an executor function. This method provides more control over the cancellation reference but is deprecated since v0.22.0.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Cancelling Axios Request with CancelToken Constructor in JavaScript\nDESCRIPTION: Demonstrates how to create a cancel token using the CancelToken constructor with an executor function. This method allows for more flexible cancellation control but is also deprecated.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/cancellation.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Canceling Axios Requests with CancelToken Constructor\nDESCRIPTION: Demonstrates cancellation using the CancelToken constructor with an executor function. This approach provides more direct control over the cancel function.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ja/cancellation.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Posting URL Encoded Form Data with Axios in JavaScript\nDESCRIPTION: This snippet shows how to post URL encoded form data using Axios. It sets the Content-Type header to application/x-www-form-urlencoded.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/post_example.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = await axios.post('https://httpbin.org/post', {\n    firstName: 'Fred',\n    lastName: 'Flintstone',\n    orders: [1, 2, 3]\n  }, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Node.js File Upload with FormData\nDESCRIPTION: Example of uploading files in Node.js using the formdata-node package for file handling.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fileFromPath} from 'formdata-node/file-from-path'\n\nform.append('my_field', 'my value');\nform.append('my_file', await fileFromPath('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)\n```\n\n----------------------------------------\n\nTITLE: Using qs Library with ES6 Import and Explicit Headers in Axios\nDESCRIPTION: Demonstrates an alternative approach using ES6 imports with the qs library, explicitly setting content-type headers for a POST request with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n----------------------------------------\n\nTITLE: Using qs Library with ES6 Import and Explicit Headers in Axios\nDESCRIPTION: Demonstrates an alternative approach using ES6 imports with the qs library, explicitly setting content-type headers for a POST request with Axios.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n----------------------------------------\n\nTITLE: Extended qs Usage with Custom Headers\nDESCRIPTION: Demonstrates a more complete example of using qs library with custom headers and configuration options.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/urlencoded.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);\n```\n\n----------------------------------------\n\nTITLE: Using Both AbortController and CancelToken Together in Axios\nDESCRIPTION: Demonstrates using both the modern AbortController and deprecated CancelToken APIs together during the transition period. This allows backward compatibility while adopting the newer approach.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/cancellation.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token,\n  signal: controller.signal\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n// OR\ncontroller.abort(); // the message parameter is not supported\n```\n\n----------------------------------------\n\nTITLE: Automatic FormData Serialization\nDESCRIPTION: Demonstrates Axios's automatic object serialization to FormData when Content-Type is set to multipart/form-data.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\naxios.post('https://httpbin.org/post', {\n  user: {\n    name: 'Dmitriy'\n  },\n  file: fs.createReadStream('/foo/bar.jpg')\n}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Complex Object Serialization Example\nDESCRIPTION: Example object structure demonstrating various data types that can be serialized to FormData.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\n----------------------------------------\n\nTITLE: FormData Manual Serialization Steps\nDESCRIPTION: Shows the internal steps Axios performs when serializing complex objects to FormData.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/multipart.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');\n```\n\n----------------------------------------\n\nTITLE: Express.js Server Example for Handling URL-Encoded Bodies\nDESCRIPTION: Demonstrates an Express.js server setup with body-parser to properly handle and decode URL-encoded request bodies, supporting nested objects.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/urlencoded.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  var app = express();\n  \n  app.use(bodyParser.urlencoded({ extended: true })); // support url-encoded bodies\n  \n  app.post('/', function (req, res, next) {\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Installing Axios with npm\nDESCRIPTION: Command to install Axios using npm package manager.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios using npm\nDESCRIPTION: Command to install Axios using the Node Package Manager (npm).\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios with Bower\nDESCRIPTION: Command to install Axios using Bower package manager.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios using Bower\nDESCRIPTION: Command to install Axios using the Bower package manager.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/intro.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios with Yarn\nDESCRIPTION: Command to install Axios using Yarn package manager.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add axios\n```\n\n----------------------------------------\n\nTITLE: Installing Axios using Yarn\nDESCRIPTION: Command to install Axios using the Yarn package manager.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/intro.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add axios\n```\n\n----------------------------------------\n\nTITLE: Including Axios via jsDelivr CDN\nDESCRIPTION: HTML script tag to include Axios from jsDelivr CDN in a web page.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Axios via jsDelivr CDN\nDESCRIPTION: HTML script tag to include Axios in a web page using the jsDelivr Content Delivery Network.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/intro.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Axios via unpkg CDN\nDESCRIPTION: HTML script tag to include Axios from unpkg CDN in a web page.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Axios via unpkg CDN\nDESCRIPTION: HTML script tag to include Axios in a web page using the unpkg Content Delivery Network.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/intro.md#2025-04-08_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Axios CommonJS Modules\nDESCRIPTION: JavaScript code to import Axios CommonJS modules for browser and Node.js environments using require.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/intro.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios/dist/browser/axios.cjs'); // browser\nconst axios = require('axios/dist/node/axios.cjs'); // node\n```\n\n----------------------------------------\n\nTITLE: Importing Language Configuration in JavaScript\nDESCRIPTION: This snippet shows how to import a language configuration file in the root configuration. It uses a dynamic import based on the language shortcut.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/translating.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {language-shortcut}Config = require('./{language-shortcut}.config.js');\n```\n\n----------------------------------------\n\nTITLE: Importing Language Configuration in JavaScript\nDESCRIPTION: Code snippet showing how to import a language configuration file into the main configuration.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/translating.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {language-shortcut}Config = require('./{language-shortcut}.config.js');\n```\n\n----------------------------------------\n\nTITLE: Registering Language Configuration in JavaScript\nDESCRIPTION: This code demonstrates how to add a new language configuration to the 'langs' constant in the root configuration file. It includes the language name, prefix, and imported configuration object.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/translating.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst langs = [\n  ...\n  {\n    name: 'Some name that uniquely identifies your language, for example \"English\" or \"German\"',\n    prefix: \"The same prefix as in the configuration file\",\n    config: {language-shortcut}Config // The configuration object you imported earlier\n  }\n  ...\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Language Configuration to Langs Array\nDESCRIPTION: Code snippet demonstrating how to add a new language configuration object to the langs array in the main configuration file.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/ar/translating.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst langs = [\n  ...\n  {\n    name: 'Some name that uniquely identifies your language, for example \"English\" or \"German\"',\n    prefix: \"The same prefix as in the configuration file\",\n    config: {language-shortcut}Config // The configuration object you imported earlier\n  }\n  ...\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Sponsor Profile Data in JSON\nDESCRIPTION: This JSON structure allows sponsors to provide additional information for their sponsorship profile. It includes fields for display name, links, images, description, and social media profiles. This data can be placed in a 'sponsor.json' file in a GitHub repository named 'axios-sponsor'.\nSOURCE: https://github.com/axios/axios-docs/blob/master/posts/en/sponsor.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"displayName\": \"Umbrella Corporation\",\n      \"targetLink\": \"https://umbrellacorp.com/\",\n      \"alt\": \"Umbrella Corporation\",\n      \"image\": \"https://fake.com/logo.png\",\n      \"image_dark\": \"https://fake.com/logo_dark.png\",\n      \"description\": \"The Umbrella Corporation is a pharmaceutical company\",  \n      \"website\": \"https://google.com/\",\n      \"github\": \"https://github.com/fakeGitHib\",\n      \"icon\": \"https://fake.com/icon.png\",\n      \"video\": \"https://www.youtube.com/embed/isosE4Bowh0\",\n      \"twitter\": \"https://x.com/profile\",\n      \"showCaption\": true,\n      \"crown\": false,\n      \"hide\": false,\n      \"links\": {\n        \"link1\": \"https://google.com/\",\n        \"link2\": \"https://google.com/\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Inert Static Site Generator CLI\nDESCRIPTION: Command to globally install the Inert static site generator CLI tool using either npm or yarn package managers.\nSOURCE: https://github.com/axios/axios-docs/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g inert-ssg # yarn global add inert-ssg\n```\n\n----------------------------------------\n\nTITLE: Building Axios Documentation Site\nDESCRIPTION: Command to build the documentation site using Inert, which processes markdown files into HTML and compiles SCSS styles into the public directory.\nSOURCE: https://github.com/axios/axios-docs/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninert build\n```\n\n----------------------------------------\n\nTITLE: Installing Inert CLI for Axios Documentation Development\nDESCRIPTION: Instructions for setting up the Inert CLI tool, which is required for building the Axios documentation. This includes removing any existing inert-cli installation and installing the inert-ssg package globally.\nSOURCE: https://github.com/axios/axios-docs/blob/master/CONTRIBUTING.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g inert-ssg\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add inert-ssg\n```\n\nLANGUAGE: bash\nCODE:\n```\ninert build\n```"
  }
]