[
  {
    "owner": "bazelbuild",
    "repo": "bazel-website",
    "content": "TITLE: Defining Parameterized Aspect in Python (Proposal #1)\nDESCRIPTION: Demonstrates how to define a parameterized aspect using the first proposal. It includes declaring supported parameter values, defining aspect attributes and implementation based on parameters, and specifying how rules can use the aspect.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/parameterized-aspects.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSUPPORTED_API_VERSIONS = [\"1\",\"2\",\"3\"]\n\ndef _py_aspect_attrs(api_version):\n    if api_version = \"1\":\n        return { '_protoc' : attr.label(default = \"//tools/protoc:v1\") }\n    else if api_version == \"2\":\n….\n\ndef _py_aspect_impl(target, ctx, params):\n    if params.api_version == \"1\": ….\npy_proto_aspect = aspect(implementation = _py_aspect_impl,\n    # params declare all aspect parameters with all possible values\n    params = { 'api_version' : set(SUPPORTED_API_VERSIONS) },\n    attr_aspects = ['deps'],\n    # rhs of attrs can still be dictionary if no dependencies on params\n    attrs = _py_aspect_attrs,\n)\n# Can be omitted, see below.\ndef _py_proto_library_parameter_extractor(py_api_version, some_other_attr):\n    return { 'api_version' : str(py_api_version), }\npy_proto_library = rule(implementation = _py_proto_library_impl,\n    attrs = {\n        'py_api_version' : attr.int()\n        'deps': attr.label_list(aspect = py_proto_aspect,\n                # Can be omitted: the default extractor\n                # just strs all rule attributes with the same\n                # names as aspect parameters.\n                aspect_parameter_extractor = _py_proto_library_parameter_extractor,\n        ),\n        'some_other_attr' : attr.string(),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Java-Transpiling Skylark Rule with Native Compilation\nDESCRIPTION: Implementation of a Skylark rule that transpiles its sources to Java and then uses native Java compilation functionality, demonstrating how to leverage native implementations and maintain compatibility.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-08-04-extensibility-for-native-rules.md#2025-04-09_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Implementation of a rule that transpiles to Java and invokes a native\n# compilation\ndef _bread_library_impl(ctx):\n    bread_sources = [f for src in ctx.attrs.src for f in src.files]\n    generated_java_files = _invoke_bread_transpiler(ctx, bread_sources)\n    # lang.java.provider is a declared provider for Java\n    java_deps = [target[lang.java.provider] for target in ctx.attrs.deps]\n    # create a native compilation action\n    java_p = lang.java.compile(ctx,\n                srcs = generated_java_files,\n                # information about dependencies is just a lang.java.provider\n                deps = java_deps,\n                ...)\n    # java_p is a lang.java.provider representing the result of compilation\n    # action we return that provider and immediately java_library rule can depend\n    # on us\n    return [java_p, ...]\n\n# Implementation of a rule that compiles to JVM bytecode directly\ndef _scala_library_impl(ctx):\n    # collect dependency jars to pass to the compile action\n    dep_jars = [dep[java.lang.provider].jar for dep in ctx.attrs.deps]\n    jar_output = ctx.new_file(...)\n    ... construct compilation actions ...\n    # build a provider that passes all transitive information\n    transitive_p = lang.java.transitive(\n                      [dep[java.lang.provider] for dep in ctx.attrs.deps])\n    java_p = lang.java.provider(\n                transitive_p,\n                jar = jar_output,\n                # update transitive information that we care about\n                transitive_jars =\n                    transitive_p.transitive_jars | set(jar_output),\n                    ... whatever other information is needed ...)\n    # return java.lang.provider\n    return [java_p, ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Aspect in Bazel with Python\nDESCRIPTION: This code snippet demonstrates how to create a parameterized aspect in Bazel using Python. It defines a custom parameter extractor function and a rule that applies an aspect with parameters. The example shows how to pass rule attributes to the aspect and handle computed defaults.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/parameterized-aspects.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _py_proto_library_parameter_extractor(py_api_version, some_other_attr):\n    return { 'api_version' : str(py_api_version), }\npy_proto_library = rule(implementation = _py_proto_library_impl,\n    attrs = {\n        'py_api_version' : attr.int()\n        'deps': attr.label_list(aspect = py_proto_aspect,\n                aspect_parameter_extractor = _py_proto_library_parameter_extractor,\n        ),\n        'some_other_attr' : attr.string(),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Aspect in Python (Proposal #2)\nDESCRIPTION: Shows an alternative approach for defining parameterized aspects where aspect parameters are treated as explicit attributes. It includes defining supported parameter values, aspect attributes with computed defaults, and aspect implementation.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/parameterized-aspects.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSUPPORTED_API_VERSIONS = [\"1\",\"2\",\"3\"]\n\n# For rules, configured default function has access to cfg as well, we\n# do not support it in aspects\ndef _py_aspect_protoc(attr_map):\n    if attr_map.api_version = \"1\":\n        return Label(\"//tools/protoc:v1\")\n      else if attr_map.api_version \"2\":\n        …\n\ndef _py_aspect_impl(target, ctx):\n    if ctx.attrs.api_version == \"1\": ….\n\npy_proto_aspect = aspect(implementation = _py_aspect_impl,\n    attr_aspects = ['deps'],\n    attrs = {\n        # For aspect implicit attributes, we allow computed defaults.\n        # We still require defaults for all implicit attributes\n        '_protoc' : attr.label(default = _py_aspect_protoc)\n        # We allow non-implicit attributes. They MUST declare a range of\n        # possible values, and they MUST be of a limited set of types\n        # (initially just strings)\n        'api_version' : attr.string(values = SUPPORTED_API_VERSIONS)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Provider Declaration in Skylark\nDESCRIPTION: Demonstrates how to create and use a custom provider in Skylark. The example shows the provider declaration, construction in a rule implementation, and specification in the rule definition.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# rust.bzl\n\n# Introduces a provider. `rust_provider` is now both a function\n# that can be used to construct the provider instance,\n# and a \"symbol\" that can be used to access it.\nrust_provider = provider()\n\ndef _impl(ctx):\n  # `rust_provider` is used as struct-like constructor\n  # it accepts the same arguments as a standard `struct` function\n  rust = rust_provider(defines = \"-DFOO\", ...)\n  # return value of rule implementation function\n  # is just a list of providers; their \"names\" are specified\n  # by their constructors, see below\n  return [ctx.provider(files = ...), rust]\nrust_library = rule(implementation = _impl,\n  # Optional declaration; the rule MUST provide all the\n  # providers in this list\n  providers = [rust_provider])\n```\n\n----------------------------------------\n\nTITLE: Defining JDK Repository Rule in Skylark\nDESCRIPTION: Example of creating a custom repository rule for JDK configuration using the repository_rule construct, specifying implementation function and attributes.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-07-02-skylark-remote-repositories.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\njdk_repository = repository_rule(\n  implementation = my_impl,\n  attrs = {\n     \"java_home\": attr.string(mandatory=False),\n     \"java_version\": attr.string(default=\"1.8\"),\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Setup Macro in Skylark\nDESCRIPTION: A Skylark macro that sets up Java dependencies by creating a local repository for JDK and establishing necessary bindings for Java compilation targets.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-07-02-skylark-remote-repositories.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef setup_java():\n  native.new_local_repository(name = \"jdk-local\", path = \"/usr/share/java/jdk8\", build_file = \"jdk.BUILD\")\n  for target in [\"jni_header\", \"jni_md_header\", \"langtools\", \"bootclasspath\", \"extdir\", \"toolchain\", \"jdk\", \"java\", \"javac\", \"jar\"]:\n    native.bind(name=target, actual=\"@%s//:%s\" % (name, target))\n  native.bind(name=\"jni_md_header-linux\", actual=\"@%s//:jni_md_header\" % name)\n  native.bind(name=\"jni_md_header-darwin\", actual=\"@%s//:jni_md_header\" % name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Label-keyed Dictionary in Bazel Build Rules\nDESCRIPTION: Example demonstrating the usage of label-keyed string dictionaries in Bazel build rules, showing flag definition, config_setting, transition_rule, and library_rule implementations. Illustrates both testing and setting configuration flags.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2017-03-03-label-keyed-string-dict-type.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nflag_rule(\n    name = \"beep\",\n    values = [\"boop\", \"bop\", \"bump\"],\n    default = \"bump\"\n)\n\nconfig_setting(\n    name = \"beep#boop\",\n    flag_values = {\n        \":beep\": \"boop\"\n    }\n)\n\ntransition_rule(\n    name = \"configuration\",\n    deps = [\n      \":lib\"\n    ],\n    sets_flags = {\n      \":beep\": \"boop\"\n    }\n)\n\nlibrary_rule(\n    name = \"lib\"\n    deps = select({\n      \":beep#boop\": [\":boop_dep\"],\n      \"//conditions:default\": [\":other_dep\"]\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Declared Provider from a Dependency\nDESCRIPTION: Shows how to access a provider from a dependency using the provider declaration as a key. This pattern allows for type-safe access to providers.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Example of how to access the provider\n\nload(\":rust.bzl\", \"rust_provider\")\n\ndef _impl(ctx):\n  dep = ctx.attr.deps[0] # Target object\n  # `rust_provider` is used as a key to access a particular\n  # provider\n  defines = dep[rust_provider].defines ...\n```\n\n----------------------------------------\n\nTITLE: Executing gcc command in Skylark\nDESCRIPTION: Example of using the proposed execute() method to run gcc and get include paths. This demonstrates how Skylark could interact with the system compiler to gather configuration information.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-02-16-cpp-autoconf.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexecute([\"gcc\", \"-v\"])\n```\n\n----------------------------------------\n\nTITLE: Writing CROSSTOOL file using Skylark template\nDESCRIPTION: Example of using the proposed template() method to generate a CROSSTOOL file. This shows how Skylark could dynamically create configuration files based on detected system information.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-02-16-cpp-autoconf.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntemplate(\"CROSSTOOL\", Label(\"@bazel_tools//tools/cpp:CROSSTOOL.tpl\"), variables)\n```\n\n----------------------------------------\n\nTITLE: Example Rule Sandwich Pattern in Bazel\nDESCRIPTION: Illustrates a common pattern where Skylark rules need to interact with native rules, with both depending on each other in a sandwich-like structure.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-08-04-extensibility-for-native-rules.md#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbread_library(name = \"top\", …)\njava_library(name = \"meat\", deps = [\":top\", …], …)\nbread_library(name = \"bottom\", deps = [\":meat\", …])\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Providers from a Rule Implementation\nDESCRIPTION: Demonstrates different ways to return providers from a rule implementation function, including returning a list of providers or a single provider.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn [defaults, rust, cc]\nreturn ctx.provider(files = set())\n```\n\n----------------------------------------\n\nTITLE: Declaring Providers in Rule Definition\nDESCRIPTION: Shows how to declare the providers that a rule will return, allowing for better documentation and verification that the rule implementation returns the required providers.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrust_provider = provider()\n\nrust_library = rule(implementation = _impl,\n  # Optional declaration; the rule MUST provide all the\n  # providers in this list\n  providers = [rust_provider])\n```\n\n----------------------------------------\n\nTITLE: Documenting Providers with Fields List\nDESCRIPTION: Demonstrates how to add documentation and field specifications to a provider declaration, improving discoverability and validation of provider contents.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrust_provider = provider(\n  doc = \"This provider contains Rust information ...\",\n  fields = [\"defines\", \"transitive_deps\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mutable Structs in Skylark\nDESCRIPTION: Example showing how structs and tuples can be mutable through contained mutable lists, which affects their usability in sets.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/saner-skylark-sets.md#2025-04-09_snippet_0\n\nLANGUAGE: skylark\nCODE:\n```\nl = [27, 42, 30]  # This list is mutable (inside a function definition)\nt = (l, 42)  # This tuple is mutable, since l can be modified\ns = struct(field = l)  # This struct is mutable, since l can be modified\n```\n\n----------------------------------------\n\nTITLE: Requesting Node Evaluation in SkyFunction (Java)\nDESCRIPTION: Demonstrates how a SkyFunction can request the evaluation of another node using the Environment interface. If the node is not available, the function returns null and is later re-invoked.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skyframe.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSkyValue value = env.getValue(key);\nif (value == null) {\n  return null;\n}\n// Continue processing with the value\n```\n\n----------------------------------------\n\nTITLE: Parallel Node Evaluation Request in SkyFunction (Java)\nDESCRIPTION: Shows how a SkyFunction can request the evaluation of multiple nodes in parallel using the Environment interface.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skyframe.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMap<SkyKey, SkyValue> values = env.getValues(keys);\nif (env.valuesMissing()) {\n  return null;\n}\n// Continue processing with the values\n```\n\n----------------------------------------\n\nTITLE: Defining Repository Rule with Environment Variable Dependency in Python\nDESCRIPTION: Example of using the proposed 'environ' attribute in a repository_rule to trigger invalidation when specified environment variables change. This allows repository rules to be re-fetched when relevant environment variables are modified.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-10-18-repository-invalidation.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_repo = repository_rule(impl = _impl, environ = [\"FOO\", \"BAR\"])\n```\n\n----------------------------------------\n\nTITLE: Using Zipper Tool Examples for Python on Windows\nDESCRIPTION: Examples demonstrating the new zipper tool functionality that allows specifying actual paths for files in the archive. This feature enables proper packaging of Python code with its required directory structure, including adding empty __init__.py files where needed.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-09-05-build-python-on-windows.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ zipper cC x.zip a/b/lib.py                  # Add file a/b/lib.py\n$ zipper cC x.zip a/b/__init__.py=            # Add an empty file at a/b/__init__.py\n$ zipper cC x.zip a/b/main.py=foo/bar/bin.py  # Add file foo/bar/bin.py as a/b/main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Environment Variables in Bazel's Global RC File\nDESCRIPTION: Sample configuration for Bazel's global rc-file that passes common environment variables (PATH, LD_LIBRARY_PATH, TMPDIR) to actions and tests to ensure backward compatibility with existing projects.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-06-21-environment.md#2025-04-09_snippet_0\n\nLANGUAGE: bazel\nCODE:\n```\nbuild --action_env=PATH\nbuild --action_env=LD_LIBRARY_PATH\nbuild --action_env=TMPDIR\nbuild --test_env=PATH\nbuild --test_env=LD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Supporting Legacy Providers in Skylark\nDESCRIPTION: Demonstrates backward compatibility with the legacy provider model where providers are identified by simple names, allowing for gradual migration.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _impl(ctx):\n  ...\n  return struct(\n    legacy_provider = struct(...),\n    files = set(...),\n    providers = [rust])\n```\n\n----------------------------------------\n\nTITLE: Mixing Old and New Provider Styles\nDESCRIPTION: Shows how to expose the same provider both through the old style (simple name) and the new style (provider declaration) for backwards compatibility during migration.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _impl(ctx):\n  ...\n  return struct(rust = rust, providers = [rust])\n```\n\n----------------------------------------\n\nTITLE: Documenting Provider Fields with Descriptions\nDESCRIPTION: Shows how to provide detailed documentation for each field in a provider by using a dictionary mapping field names to documentation strings.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/skylark/declared-providers.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrust_provider = provider(\n  doc = \"This provider contains Rust information ...\",\n  fields = {\n    \"defines\": \"doc for define\",\n    \"transitive_deps\": \"doc for transitive deps,\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Bazel Configuration in Python/Skylark\nDESCRIPTION: Example configuration script demonstrating how to define a configuration for Bazel tooling using a Skylark-like syntax. The script specifies the package name, detection methods, and configurable attributes.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-03-06-bazel-init.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconfiguration(\n\tname,              # name of the tools package to configure\n\tautodetect_method, # the auto detection method\n\tgenerate_method,   # the actual package generation\n\tload_method,       # A method to load the attributes presented\n\t                   #            to the user from the package\n\tattrs = {          # List of attributes this script propose\n\t\t\"jdk_path\": String,\n\t\t\"__some_other_path\": String,  # not user-settable\n\t\t\"jdk_version\": Integer,\n\t})\n```\n\n----------------------------------------\n\nTITLE: Generating Bazel Build Configuration for Java\nDESCRIPTION: Function to generate BUILD files and repository configurations for Java toolchain setup. Creates JDK bindings, sets up Java toolchain with specified version, and installs required build tools.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-03-06-bazel-init.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef generate_method(attrs):\n  scratch_file(\"BUILD.jdk\", \"\"\"\nContent of the jdk BUILD file.\n\"\"\")\n  local_repository(name = \"jdk\", path = attrs.jdk_path, build_file = \"BUILD.jdk\")\n  bind(\"@jdk//jdk\", \"jdk\")  # also add a filegroup(\"jdk\", \"//external:jdk\")\n  java_toolchain(name = \"toolchain\", source = attrs.java_version, target = attrs.java_version)\n  install_target(__BAZEL_REPOSITORY__, __BAZEL_VERSION__, \"//src/java_tools/buildjar:JavaBuilder_deploy.jar\")\n  install_target(__BAZEL_REPOSITORY__, __BAZEL_VERSION__, \"//src/java_tools/buildjar:JavaBuilder_deploy.jar\")\n  copy(\"https://ijar_url\", \"ijar\")\n```\n\n----------------------------------------\n\nTITLE: Loading Bazel Package Attributes for Java Configuration\nDESCRIPTION: Function to load and process package attributes for Java configuration. Queries existing toolchain settings and repository configurations to determine Java version and JDK path.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-03-06-bazel-init.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef load_method(attrs, query):\n  java_toolchain = query.getOne(kind(\"java_toolchain\", \"...\"))\n  if java_toolchain:\n    attrs.jdk_version = max(java_toolchain.source, java_toolchain.target)\n  jdk = query.getOne(attr(\"name\", \"jdk\", kind(\"local_repository\", \"...\")))\n  if jdk:\n    attrs.jdk_path = jdk.path\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Environment Autodetection in Bazel\nDESCRIPTION: Function to automatically detect and configure Java environment settings. Determines Java version and JDK path from environment variables or system-specific locations. Falls back to default values and includes error handling for missing JDK.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2015-03-06-bazel-init.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef autodetect_method(env, attrs):\n  if not attrs.java_version:  # If not given in the command line nor loaded\n    attrs.java_version = 8\n  if not attrs.jdk_path:\n    if env.has(\"JDK_HOME\"):\n      attrs.jdk_path = env.get(\"JDK_HOME\")\n    elif env.os = \"darwin\":\n      attrs.jdk_path = system(\"/usr/libexec/java_home -v 1.\" + attrs.java_version + \"+\")\n    else:\n      attrs.jdk_path = basename(basename(readlink(env.path.find(java))))\n    if not attrs.jdk_path:\n      fail(\"Could not find JDK home, please set it with `bazel init java:jdk_path=/path/to/jdk`\")\n   attrs.__some_other_path = first(glob([\"/usr/bin/java\", \"/usr/local/bin/java\"]))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flagless Multiplatform Builds in Bazel\nDESCRIPTION: Example BUILD file configuration showing how to create platform-specific build targets without requiring command-line flags. This demonstrates defining cc_binary targets for both Linux and Mac platforms that can be built with a single command.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cat a/BUILD\ncc_binary(name = \"app_for_linux\", platforms = [\"//platforms:linux\"])\ncc_binary(name = \"app_for_mac\", platforms = [\"//platforms:mac\"])\n\n$ bazel build //a:all # No command line flags!\n```\n\n----------------------------------------\n\nTITLE: Referencing Android Binary Feature Flag in Java Test\nDESCRIPTION: This code snippet shows a reference to a feature flag implementation in an Android binary test. It demonstrates how users can manually tag rules to avoid duplication under certain feature flags.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncom/google/devtools/build/lib/rules/android/AndroidBinaryTest.java#L3107\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Configuration Trimming in Java\nDESCRIPTION: This code snippet shows how to enable the test configuration trimming feature in Bazel. It's referenced in the context of improving Bazel's update speed on test timeout changes.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/google/devtools/build/lib/analysis/test/TestConfiguration.java#L121~\n```\n\n----------------------------------------\n\nTITLE: Implementing IdentifierEvalException for Rule Name Typo Suggestions in Java\nDESCRIPTION: Example implementation of a subclass of ContextualEvalException that can detect typos in rule names and provide suggestions. This class uses a mapping of common typos to their correct forms to generate helpful suggestions when users make mistakes in BUILD files.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-26-implementing-beautiful-error-messages.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class IdentifierEvalException extends ContextualEvalException {\n public static final Map<String, String> TYPOS = Map.of(\n    \"cclibrary\", \"cc_library\",\n    etc...\n  )\n  public IdentifierEvalException(Identifier identifier, Location loc) {...}\n  @Override\n  protected Suggestion generateSuggestion() {\n    if (TYPOS.keySet().contains(identifier.getName()) {\n      return TypoSuggestion(identifier, TYPOS.get(identifier.getName()));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example BUILD File with Non-Iterable Error in Python\nDESCRIPTION: Example Python code in a BUILD file that demonstrates the type of error that would benefit from the improved error reporting. It shows an attempt to iterate over a select() object, which is not iterable.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-26-implementing-beautiful-error-messages.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_obj = select({\n  \":something\": [1],\n  \"other\": [2],\n})\n\nt = [x for x in my_obj]\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Iterable Select Statement in Bazel (Starlark)\nDESCRIPTION: Demonstrates an error when attempting to iterate over a 'select' statement, which is not iterable. The improved error message provides more context and suggests valid iterable types.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\nmy_obj = select({\n    \":something\": [1],\n    \"other\": [2],\n})\nt = [x for x in my_obj]\n```\n\n----------------------------------------\n\nTITLE: Detecting Dependency Cycles in Bazel Build (Starlark)\nDESCRIPTION: Illustrates a cyclic dependency error involving multiple rules. The improved message clearly shows the cycle path and suggests modifying at least one of the dependencies to break the cycle.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_10\n\nLANGUAGE: starlark\nCODE:\n```\ncc_binary(\n    name = \"bin\",\n    deps = [\":lib\"],\n)\ncc_library(\n    name = \"lib\",\n    srcs = [\":src\"],\n)\ngenrule(\n    name = \"src\",\n    outs = [\"file.cc\"],\n    cmd = \"touch $@\",\n    tools = [\":bin\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Conflicting Generated Files in Bazel (Starlark)\nDESCRIPTION: Shows an error when two rules generate the same output file. The improved message provides details about both conflicting rules, including their definitions and locations in the build files.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_11\n\nLANGUAGE: starlark\nCODE:\n```\n# ext.bzl\ndef foo(name):\n      native.genrule(\n      name = name,\n      outs = [\"file.cc\"],\n      cmd = \"touch $@\",\n)\n\n# BUILD\nload(\":ext.bzl\", \"foo\")\nfoo(\"src2\")\nfiles = [\"file.cc\"]\ngenrule(\n    name = \"src\",\n    outs = var,\n    cmd = \"touch $@\",\n)\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid Keyword Argument in Glob Function (Starlark)\nDESCRIPTION: Illustrates an error when using an incorrect keyword argument 'excludes' instead of 'exclude' in the glob function. The improved message suggests the correct keyword and provides a link to relevant documentation.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_2\n\nLANGUAGE: starlark\nCODE:\n```\nglob([\"*.cc\"], excludes = [\"foo.cc\"])\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Rule Name in Bazel (Starlark)\nDESCRIPTION: Shows an error when using an undefined rule name 'cclibrary'. The improved message suggests the correct rule name 'cc_library' as a potential fix.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_3\n\nLANGUAGE: starlark\nCODE:\n```\ncclibrary(name = \"x\")\n```\n\n----------------------------------------\n\nTITLE: Correcting Deps Attribute Type in cc_library Rule (Starlark)\nDESCRIPTION: Demonstrates a type mismatch error in the 'deps' attribute of a cc_library rule. The improved message clearly states the expected type and suggests the correct syntax for a list of labels.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_4\n\nLANGUAGE: starlark\nCODE:\n```\ncc_library(\n    name = \"x\",\n    deps = \":lib\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Variable Type Mismatch in cc_library Rule (Starlark)\nDESCRIPTION: Shows a type mismatch error when using a variable in the 'deps' attribute of a cc_library rule. The improved message suggests wrapping the variable in a list to match the expected type.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_5\n\nLANGUAGE: starlark\nCODE:\n```\nVAR = \":lib\"\ncc_library(\n    name = \"x\",\n    deps = VAR,\n)\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid Label Format in cc_library Rule (Starlark)\nDESCRIPTION: Illustrates an error when using an invalid label format in the 'deps' attribute. The improved message explains the correct format for labels relative to the root and suggests a fix.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_6\n\nLANGUAGE: starlark\nCODE:\n```\ncc_library(\n    name = \"name\",\n    deps = [\"/test/foo.cc\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling File Extension Mismatch in cc_library Rule (Starlark)\nDESCRIPTION: Shows an error when a file with an unexpected extension is used in the 'srcs' attribute of a cc_library rule. The improved message lists the expected file extensions and provides information about the actual file generated.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_7\n\nLANGUAGE: starlark\nCODE:\n```\ncc_library(\n    name = \"name\",\n    srcs = [\":x\"],\n)\ngenrule(\n    name = \"x\",\n    outs = [\"file.ext\"],\n    cmd = \"touch $@\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Testonly Dependency in Non-Test Target (Starlark)\nDESCRIPTION: Demonstrates an error when a non-test target depends on a testonly target. The improved message suggests possible solutions, including marking the dependent target as testonly or removing the testonly attribute from the dependency.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_8\n\nLANGUAGE: starlark\nCODE:\n```\ncc_library(\n    name = \"name\",\n    deps = [\"//base:scheduling_domain-test\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Visibility Issues in cc_library Rule (Starlark)\nDESCRIPTION: Shows a visibility error when trying to use a file that is not visible to the current target. The improved message suggests ways to resolve the visibility issue and provides information about the current visibility of the file.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_9\n\nLANGUAGE: starlark\nCODE:\n```\ncc_library(\n    name = \"name\",\n    srcs = [\"//base:arena.cc\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Syntax Error in List Comprehension (Starlark)\nDESCRIPTION: Shows a syntax error in a list comprehension where the expression is missing. The improved error message clearly indicates the expected expression and points to the exact location of the error.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-05-23-beautiful-error-messages.md#2025-04-09_snippet_1\n\nLANGUAGE: starlark\nCODE:\n```\nt = [x for x in]\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Conflicting Repository Definitions in Bazel\nDESCRIPTION: Example error message that would be displayed when conflicting definitions of a repository are found in different WORKSPACE files. It shows the path to each definition and the chain of dependencies that requested each version.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-09-19-recursive-ws-parsing.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nERROR: Conflicting definitions of 'foo': bazel-external/y/WORKSPACE:2 repository(name = 'foo' version = '1')\n  requested by bazel-external/x/WORKSPACE:2 repository(name = 'y')\n  requested by WORKSPACE:3 repository(name = 'x')\nvs. bazel-external/a/WORKSPACE:2 repository(name = 'foo' version = '2')\n  requested by WORKSPACE:2 repository(name = 'a')\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Diamond Dependency Conflicts in Bazel\nDESCRIPTION: Example error message for diamond dependency conflicts, showing how Bazel would report the dependency chain for conflicting versions of the same repository in a diamond dependency pattern.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-09-19-recursive-ws-parsing.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nERROR: Conflicting definitions of 'foo': bazel-external/x/WORKSPACE:2 repository(name = 'foo' version = '2')\n  requested by WORKSPACE:2 repository(name = 'x')\nvs. bazel-external/z/WORKSPACE:2 repository(name = 'foo' version = '1')\n  requested by bazel-external/y/WORKSPACE:2 repository(name = 'z')\n  requested by WORKSPACE:3 repository(name = 'y')\n```\n\n----------------------------------------\n\nTITLE: Example Bazel BUILD File with Potential Version Conflicts\nDESCRIPTION: A sample BUILD file demonstrating how different targets can depend on different versions of the same external repository, which would cause conflicts when both targets are built together.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-09-19-recursive-ws-parsing.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncc_library(\n    name = \"bar\",\n    deps = [\"@x//:dep\"],  # using @foo version 2\n)\n\ncc_library(\n    name = \"baz\",\n    deps = [\"@y//:dep\"],  # using @foo version 1\n)\n```\n\n----------------------------------------\n\nTITLE: Running Python Binaries on Windows\nDESCRIPTION: Commands showing how to execute the generated Python binary, which is essentially a zip file with a shebang. This approach works both in Unix-like environments and on Windows command line.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-09-05-build-python-on-windows.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bazel-bin/foo/bar/bin\n$ python ./bazel-bin/foo/bar/bin\n```\n\n----------------------------------------\n\nTITLE: OptionsParsed Protocol Buffer Message Definition\nDESCRIPTION: Protocol buffer message definition that specifies how command line options are currently structured in Bazel's Build Event Protocol. Contains fields for startup options and command line options, both explicit and effective.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2017-07-13-improved-command-line-reporting.md#2025-04-09_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage OptionsParsed {\n  repeated string startup_options = 1;\n  repeated string explicit_startup_options = 2;\n  repeated string cmd_line = 3;\n  repeated string explicit_cmd_line = 4;\n  blaze.invocation_policy.InvocationPolicy invocation_policy = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Proto Label Enum Implementation\nDESCRIPTION: Proto enum implementation suggestion for maintaining consistent option labels and tags in Bazel. This approach enforces label consistency and requires proper documentation of each option.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2017-07-13-improved-command-line-reporting.md#2025-04-09_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nenum DocumentationCategory {\n  // Documentation categories for options\n}\n\nenum OptionEffectTag {\n  // Tags describing option effects\n  NO_OP = 0;  // For options with no effects\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Bazel Repository\nDESCRIPTION: Command to clone the Bazel source code repository from GitHub.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/getting_started.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bazelbuild/bazel.git\n```\n\n----------------------------------------\n\nTITLE: Building Bazel on Linux/macOS\nDESCRIPTION: Commands to build Bazel from source on Unix-based systems.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/getting_started.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd bazel\nbazel build //src:bazel\n```\n\n----------------------------------------\n\nTITLE: Building Bazel on Windows\nDESCRIPTION: Commands to build Bazel from source on Windows systems, specifying a custom output root.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/getting_started.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd bazel\nbazel --output_user_root=c:\\tmp build //src:bazel.exe\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration Settings\nDESCRIPTION: Bazel configuration settings for enabling debug mode with symbols for both C++ and Java code.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/getting_started.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nbuild:debug -c dbg\nbuild:debug --javacopt=\"-g\"\nbuild:debug --copt=\"-g\"\nbuild:debug --strip=\"never\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Protoc Compilation\nDESCRIPTION: Shows how to specify the protoc binary location via the PROTOC environment variable when building Bazel from source. This is one of three supported build methods for bootstrapping Bazel.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-10-11-distribution-artifact.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPROTOC=/path/to/protoc compile.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing Bazel Sandbox Configuration in Java\nDESCRIPTION: This code snippet shows the location of user-configurable sandbox options in the Bazel source code. It refers to a specific file and line number where blacklisted files or directories can be configured.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/_posts/2016-06-02-sandboxing.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncom.google.devtools.build.lib.sandbox.SandboxOptions.java#L96\n```\n\n----------------------------------------\n\nTITLE: Adding Incompatible Flag Metadata in Java\nDESCRIPTION: Code snippet showing how to add metadata tags for incompatible change flags in Bazel. The flag must start with 'incompatible_' and include the OptionMetadataTag.INCOMPATIBLE_CHANGE metadata tag.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/breaking-changes-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n      metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n```\n\n----------------------------------------\n\nTITLE: Using Bazelisk with incompatible flags in Bazel migration\nDESCRIPTION: Command examples for using Bazelisk to test Bazel projects with incompatible flags. The first command tests with all incompatible flags for changes with migration labels, and the second command tries every flag and reports unsuccessful builds.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/updating-bazel.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazelisk --strict\n```\n\nLANGUAGE: bash\nCODE:\n```\nbazelisk --migrate\n```\n\n----------------------------------------\n\nTITLE: Building Bazel Chocolatey Package with PowerShell\nDESCRIPTION: PowerShell commands to build the Bazel Chocolatey package. The script takes version and mode parameters, with mode values supporting 'local', 'rc', and 'release'. The result is a .nupkg file in the chocolatey directory.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/windows-chocolatey-maintenance.md#2025-04-09_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npushd scripts/packages/chocolatey\n  ./build.ps1 -version 0.3.2 -mode local\npopd\n```\n\n----------------------------------------\n\nTITLE: Testing Chocolatey Package Uninstallation\nDESCRIPTION: Command to uninstall the Bazel package from the system using Chocolatey. This should be used after testing installation to verify the uninstall process works correctly.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/windows-chocolatey-maintenance.md#2025-04-09_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nchoco uninstall bazel\n# should remove bazel from the system\n```\n\n----------------------------------------\n\nTITLE: Releasing Bazel Chocolatey Package\nDESCRIPTION: PowerShell commands for building, testing, and pushing a new Bazel release to the Chocolatey repository. The process requires updating parameters.json with the new release URI and checksum before building.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/windows-chocolatey-maintenance.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n./build.ps1 -version <version> -isRelease\n./test.ps1 -version <version>\n# if the test.ps1 passes\nchoco push bazel.x.y.z.nupkg --source https://chocolatey.org/\n```\n\n----------------------------------------\n\nTITLE: Testing Bazel Package Installation in Scoop on Windows\nDESCRIPTION: Commands to uninstall, reinstall, and test the Bazel package in Scoop to verify the updated package works correctly. This sequence ensures the package functions properly before submission.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/windows-scoop-maintenance.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscoop uninstall bazel\nscoop install bazel\nbazel version\nbazel something_else\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Scoop Repository Contributions\nDESCRIPTION: Command to add your forked repository as a remote to the local Scoop repository clone. This is necessary for first-time contributors who need to push changes to their fork before creating a pull request.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/maintaining/windows-scoop-maintenance.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add mine FORK_URL\n```\n\n----------------------------------------\n\nTITLE: Searching for Specific Files with Regex Escaping in Bazel Repository\nDESCRIPTION: Examples of searching for files with periods in their names, showing how to escape the period character in regular expressions or use quotes for literal searches.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/browse-and-search-user-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfoo\\.java\n\"foo.java\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Line Wrapping in Bazel Docs\nDESCRIPTION: This snippet shows how to properly wrap lines at 80 characters in Markdown files for Bazel documentation, with an exception for long links or code snippets that should start on a new line.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/docs-style.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWhere possible, use Markdown instead of HTML in your files. Follow the\n[GitHub Markdown Syntax Guide](https://guides.github.com/features/mastering-markdown/#syntax)\nfor recommended Markdown style.\n```\n\n----------------------------------------\n\nTITLE: Specifying Language for Code Blocks in Bazel Docs\nDESCRIPTION: This example demonstrates how to specify the language for a code block in Markdown, which is used in Bazel documentation to properly format and highlight code snippets.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/basics/docs-style.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```shell\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for Roadmap Status Indicators\nDESCRIPTION: CSS styles defining the visual appearance of status indicators, padding, and info boxes used in the roadmap document.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2019/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.padbottom { padding-bottom: 10px; }\n.etabox {\n  background: #EFEFEF;\n  color: #38761D;\n  font-size: 15px;\n  font-weight: bold;\n  display: inline;\n  padding: 6px;\n  margin-right: 10px;\n}\n.donestatus {\n  color: #00D000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n.inprogressstatus {\n  color: #D0D000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n.notstartedstatus {\n  color: #D00000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplatform Build Example in Bazel\nDESCRIPTION: Shell command example showing how to build multiple platform targets without command line flags in Bazel.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2019/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cat a/BUILD\ncc_binary(name = \"app_for_linux\", platforms = [\"//platforms:linux\"])\ncc_binary(name = \"app_for_mac\", platforms = [\"//platforms:mac\"])\n\n$ bazel build //a:all # No command line flags!\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for Bazel Roadmap Page\nDESCRIPTION: CSS styling for the Bazel Configurability roadmap page, including styles for padding, status indicators (done, in progress, not started), and ETA boxes to visually distinguish between different completion statuses and timeframes.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2020/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  .padbottom { padding-bottom: 10px; }\n  .etabox {\n    background: #EFEFEF;\n    color: #38761D;\n    font-size: 15px;\n    font-weight: bold;\n    display: inline;\n    padding: 6px;\n    margin-right: 10px;\n  }\n  .donestatus {\n    color: #00D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .inprogressstatus {\n    color: #D0D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .notstartedstatus {\n    color: #D00000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Status Indicators in CSS\nDESCRIPTION: CSS styles for the roadmap status indicators, defining different colors for completed, in-progress, and not-started items. The styles use green for done items, yellow for in-progress items, and red for not-started items, with consistent padding and font-weight.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2019/remote-execution.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.padbottom { padding-bottom: 10px; }\n  .donestatus {\n    color: #00D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .inprogressstatus {\n    color: #D0D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .notstartedstatus {\n    color: #D00000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n```\n\n----------------------------------------\n\nTITLE: Styling Roadmap Status Indicators in HTML/CSS\nDESCRIPTION: Defines CSS styles for displaying the status of roadmap items using color-coded indicators and bold text. Includes styles for 'done', 'in progress', and 'not started' statuses.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/cpp.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  .padbottom { padding-bottom: 10px; }\n  .donestatus {\n    color: #00D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .inprogressstatus {\n    color: #D0D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .notstartedstatus {\n    color: #D00000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling Coverage Status Indicators in HTML/CSS\nDESCRIPTION: Defines CSS styles for displaying the status of roadmap items (done, in progress, not started) with color-coded labels.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/coverage.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  .padbottom { padding-bottom: 10px; }\n  .donestatus {\n    color: #00D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .inprogressstatus {\n    color: #D0D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .notstartedstatus {\n    color: #D00000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for Roadmap Status Indicators\nDESCRIPTION: CSS styles defining the visual appearance of roadmap elements including padding, status boxes, and colored status indicators for different states (done, dropped, in progress).\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/build-api.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.padbottom { padding-bottom: 10px; }\n.etabox {\n  background: #EFEFEF;\n  color: #38761D;\n  font-size: 15px;\n  font-weight: bold;\n  display: inline;\n  padding: 6px;\n  margin-right: 10px;\n}\n.donestatus {\n  color: #00D000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n.droppedstatus {\n  color: #D00000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n.inprogressstatus {\n  color: #D0D000;\n  font-weight: bold;\n  padding-left: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML/CSS for Roadmap Status Indicators\nDESCRIPTION: CSS styles defining formatting for roadmap status indicators, including padding, background colors, and status labels. The styles create visual indicators for project completion status and timeline estimates.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML/CSS\nCODE:\n```\n<style>\n  .padbottom { padding-bottom: 10px; }\n  .etabox {\n    background: #EFEFEF;\n    color: #38761D;\n    font-size: 15px;\n    font-weight: bold;\n    display: inline;\n    padding: 6px;\n    margin-right: 10px;\n  }\n  .donestatus {\n    color: #00D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .inprogressstatus {\n    color: #D0D000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n  .notstartedstatus {\n    color: #D00000;\n    font-weight: bold;\n    padding-left: 10px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Structuring Bazel Community Experts Page with HTML\nDESCRIPTION: This HTML snippet defines the structure of the Bazel Community Experts page. It includes sections for a hero banner, company listings, and a contact section for potential new experts. The layout uses Bootstrap classes for responsive design.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/experts.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"home\">\n  <div class=\"landing-section hero\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-sm-8\">\n          <p class=\"hero-tagline\">{Fast, Correct} - Choose two</p>\n          <h1 class=\"hero-title\">Bazel Community Experts</h1>\n        </div>\n        <div class=\"col-sm-4 hidden-xs\">\n          <img src=\"images/bazel-icon.svg\" title=\"Bazel\" alt=\"Bazel logo\" class=\"logo-md img-responsive\">\n        </div>\n        <p class=\"hero-tagline-sub\">Companies who have provided significant contributions to the Bazel community and can help with your project</p>\n      </div>\n    </div>\n  </div>\n\n  <!-- Expert listings sections -->\n  <div class=\"landing-section experts\">\n    <!-- Repeated for multiple rows of experts -->\n  </div>\n\n  <div class=\"beta\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <p>\n            <b>Would like to be on this list? </b><br>\n            If you are interested in being listed as a community expert, please contact <a href=\"mailto:bazel-experts@bazel.build\">bazel-experts@bazel.build</a>.\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter in Markdown\nDESCRIPTION: YAML front matter that specifies the Jekyll layout and page title for the Bazel roadmap page. This metadata is used by Jekyll to generate the appropriate page structure in the site build process.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/roadmap.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: contribute\ntitle: Roadmap\n---\n```\n\n----------------------------------------\n\nTITLE: Styling 404 Error Message as Bazel Build Output in HTML\nDESCRIPTION: This code snippet creates a pre-formatted text block that mimics a Bazel build command output for a non-existent target. It uses inline CSS for coloring error and info messages.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/404.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<pre>\n$ bazel build :what-you-were-looking-for\n...............\n<b><span style=\"color: red;\">ERROR</span></b>: no such page ':what-you-were-looking-for': BUILD file not found on package path.\n<b><span style=\"color: green;\">INFO</span></b>: Elapsed time: 0.567s\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Markdown Design Document Header\nDESCRIPTION: Required header format for Markdown-based design documents showing basic metadata fields.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/designs/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: contribute\ntitle: Design Documents\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the contribute layout page with title specification.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/naming.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: contribute\ntitle: Naming a Bazel related project\n---\n```\n\n----------------------------------------\n\nTITLE: Sample C++ BUILD File Reference\nDESCRIPTION: Reference to a simple example BUILD file showing C++ build configuration in Bazel\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/bazelbuild/bazel/blob/master/examples/cpp/BUILD\n```\n\n----------------------------------------\n\nTITLE: Complex Bazel BUILD File Example\nDESCRIPTION: Reference to Bazel's own source code BUILD file as a complex example of build configuration\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/bazelbuild/bazel/blob/master/src/BUILD\n```\n\n----------------------------------------\n\nTITLE: Documenting Bootstrap Dependency in Markdown\nDESCRIPTION: Markdown documentation specifying Bootstrap version 3.3.6 and its MIT license information.\nSOURCE: https://github.com/bazelbuild/bazel-website/blob/master/third_party/css/bootstrap/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Bootstrap](https://github.com/twbs/bootstrap)\n\n* Version: 3.3.6\n* License: MIT\n```"
  }
]