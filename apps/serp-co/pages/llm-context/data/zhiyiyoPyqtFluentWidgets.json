[
  {
    "owner": "zhiyiyo",
    "repo": "pyqt-fluent-widgets",
    "content": "TITLE: Applying Style Sheet Based on Theme - Python\nDESCRIPTION: This code snippet demonstrates how to create a `StyleSheet` class that inherits from `StyleSheetBase` and overrides the `path()` method to dynamically determine the path to the QSS file based on the current theme (light or dark). It uses the `qconfig` object to access the current theme and applies the style sheet to a `MainWindow` widget.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/theme.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nfrom qfluentwidgets import StyleSheetBase, Theme, isDarkTheme, qconfig\n\n\nclass StyleSheet(StyleSheetBase, Enum):\n    \"\"\" Style sheet  \"\"\"\n\n    MAIN_WINDOW = \"main_window\"\n\n    def path(self, theme=Theme.AUTO):\n        theme = qconfig.theme if theme == Theme.AUTO else theme\n        return f\"app/resource/qss/{theme.value.lower()}/{self.value}.qss\"\n\n\nclass MainWindow(QWidget):\n\n    def __init__(self, parent=None):\n        super().__init__(parent=parent)\n\n        # apply style sheet to main window\n        StyleSheet.MAIN_WINDOW.apply(self)\n```\n\n----------------------------------------\n\nTITLE: Defining and Loading Configuration in PyQt-Fluent-Widgets (Python)\nDESCRIPTION: This code snippet demonstrates how to define configuration items using ConfigItem and QConfig classes in PyQt-Fluent-Widgets. It includes examples of different configuration types like boolean, color, options, and range, along with validators and serializers. The code also shows how to load the configuration from a JSON file using qconfig.load().\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/settings.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MvQuality(Enum):\n    \"\"\" MV quality enumeration class \"\"\"\n\n    FULL_HD = \"Full HD\"\n    HD = \"HD\"\n    SD = \"SD\"\n    LD = \"LD\"\n\n    @staticmethod\n    def values():\n        return [q.value for q in MvQuality]\n\n\nclass Config(QConfig):\n    \"\"\" Config of application \"\"\"\n\n    # main window\n    enableAcrylic = ConfigItem(\"MainWindow\", \"EnableAcrylic\", False, BoolValidator())\n    playBarColor = ColorConfigItem(\"MainWindow\", \"PlayBarColor\", \"#225C7F\")\n    themeMode = OptionsConfigItem(\"MainWindow\", \"ThemeMode\", \"Light\", OptionsValidator([\"Light\", \"Dark\", \"Auto\"]), restart=True)\n    recentPlaysNumber = RangeConfigItem(\"MainWindow\", \"RecentPlayNumbers\", 300, RangeValidator(10, 300))\n\n    # online\n    onlineMvQuality = OptionsConfigItem(\"Online\", \"MvQuality\", MvQuality.FULL_HD, OptionsValidator(MvQuality), EnumSerializer(MvQuality))\n\n\n# create config object and initialize it\ncfg = Config()\nqconfig.load('config/config.json', cfg)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fluent Icons in Python\nDESCRIPTION: This code snippet demonstrates how to create custom icons within the PyQt-Fluent-Widgets framework.  It inherits from `FluentIconBase` and uses an `Enum` to define the available icons. The `path()` method is overridden to return the correct SVG file path based on the current theme. The example assumes that SVG icon files are available under the `/icons` directory in the appropriate naming convention (e.g., `Add_Light.svg`, `Add_Dark.svg`, `Add_System.svg`).\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/icon.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom qfluentwidgets import getIconColor, Theme, FluentIconBase\n\n\nclass MyFluentIcon(FluentIconBase, Enum):\n    \"\"\" Custom icons \"\"\"\n\n    ADD = \"Add\"\n    CUT = \"Cut\"\n    COPY = \"Copy\"\n\n    def path(self, theme=Theme.AUTO):\n        return f':/icons/{self.value}_{getIconColor(theme)}.svg'\n```\n\n----------------------------------------\n\nTITLE: Adding Widget in NavigationInterface with addWidget()\nDESCRIPTION: This code snippet shows the signature of the `addWidget` method used to add custom widgets to the `NavigationInterface`. The method requires parameters such as a unique `routeKey`, the `NavigationWidget` itself, an optional `onClick` function, the `position` where to add the widget (TOP, SCROLL, or BOTTOM), and an optional `tooltip`. A `parentRouteKey` can be specified to add to a `NavigationTreeWidgetBase`.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/navigation.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef addWidget(\n    self,\n    routeKey: str,\n    widget: NavigationWidget,\n    onClick=None,\n    position=NavigationItemPosition.TOP,\n    tooltip: str = None,\n    parentRouteKey: str = None\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Avatar Widget with NavigationWidget in PyQt\nDESCRIPTION: This code snippet demonstrates how to create a custom navigation widget, `AvatarWidget`, by inheriting from `NavigationWidget`. It overrides the `paintEvent` method to draw a custom avatar and optionally display text when the widget is not in a compacted state. It shows how to handle mouse press events and theme changes for consistent styling.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/navigation.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qfluentwidgets import NavigationWidget\n\n\nclass AvatarWidget(NavigationWidget):\n    \"\"\" Avatar widget \"\"\"\n\n    def __init__(self, parent=None):\n        super().__init__(isSelectable=False, parent=parent)\n        self.avatar = QImage('resource/shoko.png').scaled(\n            24, 24, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n\n    def paintEvent(self, e):\n        painter = QPainter(self)\n        painter.setRenderHints(\n            QPainter.SmoothPixmapTransform | QPainter.Antialiasing)\n\n        painter.setPen(Qt.NoPen)\n\n        if self.isPressed:\n            painter.setOpacity(0.7)\n\n        # draw background\n        if self.isEnter:\n            c = 255 if isDarkTheme() else 0\n            painter.setBrush(QColor(c, c, c, 10))\n            painter.drawRoundedRect(self.rect(), 5, 5)\n\n        # draw avatar\n        painter.setBrush(QBrush(self.avatar))\n        painter.translate(8, 6)\n        painter.drawEllipse(0, 0, 24, 24)\n        painter.translate(-8, -6)\n\n        if not self.isCompacted:\n            painter.setPen(Qt.white if isDarkTheme() else Qt.black)\n            font = QFont('Segoe UI')\n            font.setPixelSize(14)\n            painter.setFont(font)\n            painter.drawText(QRect(44, 0, 255, 36), Qt.AlignVCenter, 'zhiyiYo')\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Full Version)\nDESCRIPTION: This command installs the full-featured version of the PyQt-Fluent-Widgets package using pip.  It specifies the package name with the `[full]` extra and uses a specific index URL. This includes all features like AcrylicLabel.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip install \"PyQt-Fluent-Widgets[full]\" -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Full) Shell\nDESCRIPTION: Installs the full-featured version of PyQt-Fluent-Widgets using pip. It uses the specified PyPI mirror. The `[full]` extra installs all dependencies for all features.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/quick-start.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install \"PyQt-Fluent-Widgets[full]\" -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Running a Demo Application\nDESCRIPTION: These commands demonstrate how to navigate to the `gallery` example directory and run the `demo.py` script.  This assumes PyQt-Fluent-Widgets has been installed. It allows users to test and explore the widgets provided by the library.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/gallery\npython demo.py\n```\n\n----------------------------------------\n\nTITLE: Running PyQt-Fluent-Widgets Demo Python\nDESCRIPTION: Navigates to the `examples/gallery` directory and runs the `demo.py` script using Python. This demonstrates how to execute example applications provided with the PyQt-Fluent-Widgets package.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/quick-start.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncd examples/gallery\npython demo.py\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Full)\nDESCRIPTION: This command installs the full version of PyQt-Fluent-Widgets, including all components and features. It uses pip and specifies a custom index URL for package installation. This version provides the complete set of Fluent Design widgets.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/README_zh.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install \"PyQt-Fluent-Widgets[full]\" -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Lightweight)\nDESCRIPTION: This command installs the lightweight version of PyQt-Fluent-Widgets, which excludes acrylic components. It uses pip and specifies a custom index URL for package installation. This version is suitable for environments where acrylic effects are not required.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/README_zh.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install PyQt-Fluent-Widgets -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Lite Version)\nDESCRIPTION: This command installs the lite version of the PyQt-Fluent-Widgets package using pip.  It specifies the package name and uses a specific index URL. AcrylicLabel is not available in this version.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install PyQt-Fluent-Widgets -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Running PyQt-Fluent-Widgets Demo\nDESCRIPTION: This command navigates to the gallery example directory and runs the demo.py script using Python. This allows users to test and explore the features of the PyQt-Fluent-Widgets library. Requires Python and PyQt-Fluent-Widgets to be installed.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/README_zh.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/gallery\npython demo.py\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt-Fluent-Widgets (Lite) Shell\nDESCRIPTION: Installs the lite version of PyQt-Fluent-Widgets using pip. The lite version excludes the ``AcrylicLabel`` component. It uses the specified PyPI mirror.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/quick-start.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install PyQt-Fluent-Widgets -i https://pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Content Rendering\nDESCRIPTION: This snippet renders the contents of the module, including classes, functions, and attributes. It filters for visible children and generates an `autoapisummary` for each type if enabled in the AutoAPI options.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/_templates/python/module.rst#_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if obj.all is not none %}\n{% set visible_children = obj.children|selectattr(\"short_name\", \"in\", obj.all)|list %}\n{% elif obj.type is equalto(\"package\") %}\n{% set visible_children = obj.children|selectattr(\"display\")|list %}\n{% else %}\n{% set visible_children = obj.children|selectattr(\"display\")|rejectattr(\"imported\")|list %}\n{% endif %}\n{% if visible_children %}\n{{ obj.type|title }} Contents\n{{ \"-\" * obj.type|length }}---------\n\n{% set visible_classes = visible_children|selectattr(\"type\", \"equalto\", \"class\")|list %}\n{% set visible_functions = visible_children|selectattr(\"type\", \"equalto\", \"function\")|list %}\n{% set visible_attributes = visible_children|selectattr(\"type\", \"equalto\", \"data\")|list %}\n{% if \"show-module-summary\" in autoapi_options and (visible_classes or visible_functions) %}\n{% block classes scoped %}\n{% if visible_classes %}\n\n\n.. autoapisummary::\n\n{% for klass in visible_classes %}\n   {{ klass.id }}\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n\n{% block functions scoped %}\n{% if visible_functions %}\n\n\n.. autoapisummary::\n\n{% for function in visible_functions %}\n   {{ function.id }}\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n\n{% block attributes scoped %}\n{% if visible_attributes %}\n\n\n.. autoapisummary::\n\n{% for attribute in visible_attributes %}\n   {{ attribute.id }}\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n{% endif %}\n{% for obj_item in visible_children %}\n{{ obj_item.render()|indent(0) }}\n{% endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Subpackage Tctree\nDESCRIPTION: This snippet generates a table of contents (toctree) for subpackages within the current module. It filters for visible subpackages (those with `display` set to true) and creates links to their respective index pages.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/_templates/python/module.rst#_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set visible_subpackages = obj.subpackages|selectattr(\"display\")|list %}\n{% if visible_subpackages %}\n\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 3\n\n{% for subpackage in visible_subpackages %}\n   {{ subpackage.short_name }}/index.rst\n{% endfor %}\n\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Submodule Tctree\nDESCRIPTION: This snippet generates a table of contents (toctree) for submodules within the current module, similar to the subpackage toctree. It filters for visible submodules and creates links to their index pages.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/_templates/python/module.rst#_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n{% set visible_submodules = obj.submodules|selectattr(\"display\")|list %}\n{% if visible_submodules %}\n\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n{% for submodule in visible_submodules %}\n   {{ submodule.short_name }}/index.rst\n{% endfor %}\n\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Docstring Rendering\nDESCRIPTION: This snippet renders the docstring of the documented module. It uses the `autoapi-nested-parse` directive to properly parse and format the docstring content.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/_templates/python/module.rst#_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if obj.docstring %}\n.. autoapi-nested-parse::\n\n   {{ obj.docstring|indent(3) }}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Module Directive\nDESCRIPTION: This snippet defines the Sphinx directive for documenting a Python module using AutoAPI. It specifies the module's name.\nSOURCE: https://github.com/zhiyiyo/pyqt-fluent-widgets/blob/master/docs/source/_templates/python/module.rst#_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n.. py:module:: {{ obj.name }}\n```"
  }
]