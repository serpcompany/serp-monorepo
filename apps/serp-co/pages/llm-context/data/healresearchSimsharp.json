[
  {
    "owner": "heal-research",
    "repo": "simsharp",
    "content": "TITLE: Implementing M/M/1 Queuing System in C# using SimSharp\nDESCRIPTION: This code snippet demonstrates how to model an m/m/1 queuing system using SimSharp. It includes process definitions for queue generation and item processing, as well as simulation setup and execution. The model also showcases the use of monitoring capabilities introduced in Sim# 3.2.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing static SimSharp.Distributions;\n\nExponentialTime ARRIVAL = EXP(TimeSpan.FromSeconds(...));\nExponentialTime PROCESSING = EXP(TimeSpan.FromSeconds(...));\nTimeSpan SIMULATION_TIME = TimeSpan.FromHours(...);\n\nIEnumerable<Event> MM1Q(Simulation env, Resource server) {\n  while (true) {\n    yield return env.Timeout(ARRIVAL);\n    env.Process(Item(env, server));\n  }\n}\n\nIEnumerable<Event> Item(Simulation env, Resource server) {\n  using (var s = server.Request()) {\n    yield return s;\n    yield return env.Timeout(PROCESSING);\n    Console.WriteLine(\"Duration {0}\", env.Now - s.Time);\n  }\n}\n\nvoid RunSimulation() {\n  var env = new Simulation(randomSeed: 42);\n  var server = new Resource(env, capacity: 1) {\n    QueueLength = new TimeSeriesMonitor(env, collect: true)\n  };\n  env.Process(MM1Q(env, server));\n  env.Run(SIMULATION_TIME);\n  Console.WriteLine(server.QueueLength.Summarize());\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Process Implementation in Sim#\nDESCRIPTION: Demonstrates a simple process that outputs simulation time at intervals of 3 time units. Shows process definition and simulation environment setup.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nstatic IEnumerable<Event> AProcess(Simulation env) {\n  env.Log(\"The time is {0}\", env.NowD);\n  yield return env.TimeoutD(3.0);\n  env.Log(\"The time is {0}\", env.NowD);\n  yield return env.TimeoutD(3.0);\n  env.Log(\"The time is {0}\", env.NowD);\n}\n\nstatic void Main(string[] args) {\n  var env = new Simulation();\n  env.Process(AProcess(env));\n  env.Run();\n}\n// outputs:\n//The time is 0\n//The time is 3\n//The time is 6\n```\n\n----------------------------------------\n\nTITLE: Distribution-based Customer Arrival Process\nDESCRIPTION: Shows how to implement a customer arrival process using parameterized distributions, demonstrating the use of Sim#'s distribution system.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nusing SimSharp;\nusing static SimSharp.Distributions;\n\nnamespace MyApplication {\n  public class MyModel {\n    IEnumerable<Event> CustomerArrival(Simulation env, IDistribution<TimeSpan> arrivalDist) {\n      while (true) {\n        yield return env.Timeout(arrivalDist);\n        // Logic of creating a customer\n      }\n    }\n\n    public void Run() {\n      var env = new Simulation();\n      // Exponential distribution with a mean of 5\n      env.Process(CustomerArrival(env, EXP(TimeSpan.FromMinutes(5))));\n      env.Run(TimeSpan.FromHours(24));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Resource with Monitors in C#\nDESCRIPTION: This snippet demonstrates how to create a server resource with monitoring for utilization and waiting time. It uses TimeSeriesMonitor for utilization and SampleMonitor for waiting time.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/docs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar env = new Simulation();\nvar server = new Resource(env, capacity: 5) {\n  Utilization = new TimeSeriesMonitor(env),\n  WaitingTime = new SampleMonitor()\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Process Interruptions in SimSharp\nDESCRIPTION: This code snippet shows how to handle process interruptions in SimSharp. Unlike SimPy, SimSharp requires explicit checking for interruptions after each yield statement due to limitations in the .NET Framework.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nif (Environment.ActiveProcess.HandleFault()) {...}\n```\n\n----------------------------------------\n\nTITLE: Using Distribution Shortcuts in SimSharp\nDESCRIPTION: This snippet demonstrates how to use distribution shortcuts in SimSharp. By using a static import of SimSharp.Distributions, you can use distribution methods without a qualifier, making the code more concise.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing static SimSharp.Distributions;\n// ... additional code excluded\nyield return env.TimeoutD(UNIF(10, 20));\n```\n\n----------------------------------------\n\nTITLE: Creating a Report for Simulation Statistics in C#\nDESCRIPTION: This code creates a report builder to summarize multiple monitors and print selected statistical properties. It demonstrates how to add various measures, set output, specify separator, and configure periodic updates.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/docs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar report = Report.CreateBuilder(env)\n  .Add(\"Utilization\", utilization, Report.Measures.Mean | Report.Measures.StdDev)\n  .Add(\"WIP\", wip, Report.Measures.Min | Report.Measures.Mean | Report.Measures.Max)\n  .Add(\"Leadtime\", leadtime, Report.Measures.Min | Report.Measures.Mean | Report.Measures.Max)\n  .Add(\"WaitingTime\", waitingtime, Report.Measures.Min | Report.Measures.Mean | Report.Measures.Max)\n  .SetOutput(env.Logger) // use a \"new StreamWriter(\"report.csv\")\" to direct to a file\n  .SetSeparator(\"\\t\")\n  .SetPeriodicUpdate(TimeSpan.FromDays(7), withHeaders: true)\n  .Build();\n```\n\n----------------------------------------\n\nTITLE: Initializing SimSharp Environment with Default Timestep\nDESCRIPTION: This code demonstrates how to initialize a SimSharp environment with a default timestep. This is useful when using both the standard API (based on TimeSpan) and the D-API (based on double) in the same simulation.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar env = new Simulation(defaultStep: TimeSpan.FromMinutes(1));\n```\n\n----------------------------------------\n\nTITLE: Installing Sim# via dotnet CLI\nDESCRIPTION: Command to add the Sim# package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/heal-research/SimSharp/blob/master/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package SimSharp\n```"
  }
]