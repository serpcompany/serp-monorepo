[
  {
    "owner": "c3lang",
    "repo": "c3c",
    "content": "TITLE: Implementing Generic Stack Module in C3\nDESCRIPTION: This snippet demonstrates C3's generic modules feature by implementing a parameterized stack data structure. The module defines push, pop, and empty operations that work with any type specified at instantiation time.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nmodule stack {Type};\n// Above: the parameterized type is applied to the entire module.\n\nstruct Stack\n{\n    usz capacity;\n    usz size;\n    Type* elems;\n}\n\n// The type methods offers dot syntax calls,\n// so this function can either be called \n// Stack.push(&my_stack, ...) or\n// my_stack.push(...)\nfn void Stack.push(Stack* this, Type element)\n{\n    if (this.capacity == this.size)\n    {\n        this.capacity *= 2;\n        if (this.capacity < 16) this.capacity = 16;\n        this.elems = realloc(this.elems, Type.sizeof * this.capacity);\n    }\n    this.elems[this.size++] = element;\n}\n\nfn Type Stack.pop(Stack* this)\n{\n    assert(this.size > 0);\n    return this.elems[--this.size];\n}\n\nfn bool Stack.empty(Stack* this)\n{\n    return !this.size;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C3 Compiler Executable and Source Files\nDESCRIPTION: Defines the main C3 compiler executable target and lists all source files that should be compiled and linked to create the final compiler binary.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(c3c\n        src/build/builder.c\n        src/build/build_options.c\n        src/build/project_creation.c\n        src/build/project_manipulation.c\n        src/build/libraries.c\n        src/compiler/ast.c\n        src/compiler/bigint.c\n        src/compiler/codegen_general.c\n        src/compiler/compiler.c\n        src/compiler/compiler.h\n        src/compiler/subprocess.c\n        src/compiler/subprocess.h\n        src/compiler/context.c\n        src/compiler/copying.c\n        src/compiler/diagnostics.c\n        src/compiler/float.c\n        src/compiler/headers.c\n        src/compiler/json_output.c\n        src/compiler/lexer.c\n        src/compiler/linker.c\n        src/compiler/abi/c_abi_aarch64.c\n        src/compiler/abi/c_abi.c\n        src/compiler/abi/c_abi_riscv.c\n        src/compiler/abi/c_abi_wasm.c\n        src/compiler/abi/c_abi_win64.c\n        src/compiler/abi/c_abi_x64.c\n        src/compiler/abi/c_abi_x86.c\n        src/compiler/module.c\n        src/compiler/number.c\n        src/compiler/parse_expr.c\n        src/compiler/parse_global.c\n        src/compiler/parser.c\n        src/compiler/parser_internal.h\n        src/compiler/parse_stmt.c\n        src/compiler/sema_casts.c\n        src/compiler/sema_decls.c\n        src/compiler/sema_expr.c\n        src/compiler/sema_internal.h\n        src/compiler/sema_name_resolution.c\n        src/compiler/sema_errors.c\n        src/compiler/sema_builtins.c\n        src/compiler/sema_initializers.c\n        src/compiler/semantic_analyser.c\n        src/compiler/sema_passes.c\n        src/compiler/sema_stmts.c\n        src/compiler/sema_types.c\n        src/compiler/source_file.c\n        src/compiler/symtab.c\n        src/compiler/target.c\n        src/compiler/sema_asm.c\n        src/compiler_tests/benchmark.c\n        src/compiler_tests/tests.c\n        src/compiler/tokens.c\n        src/compiler/types.c\n        src/main.c\n        src/utils/errors.c\n        src/utils/file_utils.c\n        src/utils/find_msvc.c\n        src/utils/malloc.c\n        src/utils/stringutils.c\n        src/utils/taskqueue.c\n        src/utils/json.c\n        src/build/project.c\n        src/utils/vmem.c\n        src/utils/vmem.h\n        src/utils/whereami.c\n        src/utils/cpus.c\n        src/utils/unzipper.c\n        src/compiler/c_codegen.c\n        src/compiler/decltable.c\n        src/compiler/mac_support.c\n        src/compiler/windows_support.c\n        src/compiler/codegen_asm.c\n        src/compiler/asm_target.c\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Program in C3\nDESCRIPTION: Example of a 'Hello World' program written in the C3 programming language. This snippet demonstrates the basic structure of a C3 program, including module declaration, import statement, and main function.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nmodule hello_world;\nimport std::io;\n\nfn void main()\n{\n   io::printn(\"Hello, world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LLVM Backend for C3 Compiler\nDESCRIPTION: Adds LLVM-specific source files and configurations when the C3_WITH_LLVM option is enabled, including linking with LLVM libraries and setting up C++ wrappers for LLVM integration.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(C3_WITH_LLVM)\n    target_sources(c3c PRIVATE\n            src/compiler/llvm_codegen.c\n            src/compiler/llvm_codegen_debug_info.c\n            src/compiler/llvm_codegen_expr.c\n            src/compiler/llvm_codegen_function.c\n            src/compiler/llvm_codegen_instr.c\n            src/compiler/llvm_codegen_module.c\n            src/compiler/llvm_codegen_stmt.c\n            src/compiler/llvm_codegen_type.c\n            src/compiler/llvm_codegen_value.c\n            src/compiler/llvm_codegen_storeload.c\n            src/compiler/llvm_codegen_builtins.c)\n\n    target_compile_definitions(c3c PUBLIC LLVM_AVAILABLE=1)\n    add_library(c3c_wrappers STATIC wrapper/src/wrapper.cpp)\nelse()\n    target_sources(c3c PRIVATE src/utils/hostinfo.c)\n    target_compile_definitions(c3c PUBLIC LLVM_AVAILABLE=0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Generic Stack Module with Different Types in C3\nDESCRIPTION: This snippet demonstrates how to use the generic stack module with different types. It shows the instantiation of both integer and double stack types, and illustrates C3's zero initialization, value methods, and C function integration.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nimport stack;\n\n// Define our new types, the first will implicitly create \n// a complete copy of the entire Stack module with \"Type\" set to \"int\"\nalias IntStack = Stack {int};\n// The second creates another copy with \"Type\" set to \"double\"\nalias DoubleStack = Stack {double};\n\n// If we had added \"alias IntStack2 = Stack {int}\"\n// no additional copy would have been made (since we already\n// have an parameterization of Stack {int} so it would\n// be same as declaring IntStack2 an alias of IntStack\n\n// Importing an external C function is straightforward\n// here is an example of importing libc's printf:\nextern fn int printf(char* format, ...);\n\nfn void main()\n{\n    IntStack stack;\n    // Note that C3 uses zero initialization by default\n    // so the above is equivalent to IntStack stack = {};\n    \n    stack.push(1);\n    // The above can also be written IntStack.push(&stack, 1); \n    \n    stack.push(2);\n    \n    // Prints pop: 2\n    printf(\"pop: %d\\n\", stack.pop());\n    // Prints pop: 1\n    printf(\"pop: %d\\n\", stack.pop());\n    \n    DoubleStack dstack;\n    dstack.push(2.3);\n    dstack.push(3.141);\n    dstack.push(1.1235);\n    // Prints pop: 1.123500\n    printf(\"pop: %f\\n\", dstack.pop());\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a C3 Program\nDESCRIPTION: Command to compile a C3 program using the c3c compiler. This snippet shows how to compile a 'main.c3' file using the c3c command-line interface.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nc3c compile main.c3\n```\n\n----------------------------------------\n\nTITLE: Defining functions in C3 vs C/C++\nDESCRIPTION: Illustrates how functions are defined in C3 compared to C/C++. C3 can use either C-style syntax or a syntax with the return type after a colon.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_6\n\nLANGUAGE: c3\nCODE:\n```\nint add(int a, int b) { return a + b; }\n// Or\nadd(a : int, b : int) : int { return a + b; }\n```\n\nLANGUAGE: c\nCODE:\n```\nint add(int a, int b) { return a + b; }\n```\n\n----------------------------------------\n\nTITLE: Variable declarations in C3 vs C/C++\nDESCRIPTION: Shows how variables are declared in C3 compared to C/C++. C3 places the type after the variable name with a colon, while C/C++ places the type before.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_3\n\nLANGUAGE: c3\nCODE:\n```\nint a = 1;\nfloat b = 2.0;\nbool c = true;\n// Or\na : int = 1;\nb : float = 2.0;\nc : bool = true;\n```\n\nLANGUAGE: c\nCODE:\n```\nint a = 1;\nfloat b = 2.0;\nbool c = true;\n```\n\n----------------------------------------\n\nTITLE: Struct declarations in C3 vs C/C++\nDESCRIPTION: Shows how structs are declared in C3 compared to C/C++. C3 uses a simpler syntax without requiring the 'struct' keyword for variable declarations.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_5\n\nLANGUAGE: c3\nCODE:\n```\nstruct Foo { int a; }\n// Usage\nFoo foo;\n```\n\nLANGUAGE: c\nCODE:\n```\nstruct Foo { int a; };\n// Usage\nstruct Foo foo;\n```\n\n----------------------------------------\n\nTITLE: Array Initialization Syntax in C3\nDESCRIPTION: Example of the supported array initialization syntax in C3, allowing for inline declaration and initialization.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_12\n\nLANGUAGE: C3\nCODE:\n```\nint[*] { 1, 2, 3 }\n```\n\n----------------------------------------\n\nTITLE: Pointer declaration syntax in C3 vs C/C++\nDESCRIPTION: Shows the syntax for declaring pointers in C3 vs C/C++. C3 uses '*' after the type name, while C/C++ uses '*' before the variable name.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_7\n\nLANGUAGE: c3\nCODE:\n```\nint* a;\n// Or\na : int*;\n```\n\nLANGUAGE: c\nCODE:\n```\nint *a;\n```\n\n----------------------------------------\n\nTITLE: Swizzling Assignment in C3\nDESCRIPTION: Example of swizzling assignment syntax in C3, which allows for direct manipulation of vector components. This feature, added in v0.7.0, enables assigning values to specific components of a vector using swizzle notation.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_0\n\nLANGUAGE: C3\nCODE:\n```\nabc.xz += { 5, 10 };\n```\n\n----------------------------------------\n\nTITLE: Correct C3 Function and Variable Naming\nDESCRIPTION: Example showing the correct snake_case naming convention for variables, functions, methods, and globals in C3 code.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_4\n\nLANGUAGE: c3\nCODE:\n```\nint some_global = 1;\n\nfn void open_file(String special_file)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining integer constants in C3 vs C/C++\nDESCRIPTION: Demonstrates how integer constants are defined in C3 compared to C/C++. C3 uses 'def' for compile-time constants, while C uses macros or const.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c3\nCODE:\n```\ndef FOO = 1;\n```\n\nLANGUAGE: c\nCODE:\n```\n#define FOO 1\n// or\nconst int FOO = 1;\n```\n\n----------------------------------------\n\nTITLE: Type aliases in C3 vs C/C++\nDESCRIPTION: Demonstrates how type aliases are defined in C3 vs C/C++. C3 uses the 'def' keyword, while C uses 'typedef' and C++ can use 'using'.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_4\n\nLANGUAGE: c3\nCODE:\n```\ndef IntArray = int[];\n```\n\nLANGUAGE: c\nCODE:\n```\ntypedef int IntArray[];\n```\n\nLANGUAGE: c++\nCODE:\n```\nusing IntArray = int[];\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Build Options for C3 Compiler\nDESCRIPTION: Sets up Microsoft Visual C++ compiler-specific options, including warning suppressions, runtime libraries, and sanitizer integration.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    message(\"Adding MSVC options\")\n    target_compile_options(c3c PRIVATE /wd4068 /wd4090 /WX /Wv:18)\n    if(C3_WITH_LLVM)\n        target_compile_options(c3c_wrappers PUBLIC /wd4624 /wd4267 /wd4244 /WX /Wv:18)\n        if(NOT LLVM_ENABLE_RTTI)\n            target_compile_options(c3c_wrappers PUBLIC /GR-)\n        endif()\n        target_link_options(c3c_wrappers PUBLIC /ignore:4099)\n    endif()\n    if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        target_compile_options(c3c PUBLIC /MTd)\n        if (C3_WITH_LLVM)\n            target_compile_options(c3c_wrappers PUBLIC /MTd)\n        endif()\n        target_compile_options(miniz PUBLIC /MTd)\n        if (C3_USE_TB)\n            target_compile_options(tilde-backend PUBLIC /MTd)\n        endif()\n    else()\n        target_compile_options(c3c PUBLIC /MT)\n        if (C3_WITH_LLVM)\n            target_compile_options(c3c_wrappers PUBLIC /MT)\n        endif()\n        target_compile_options(miniz PUBLIC /MT)\n        if (C3_USE_TB)\n            target_compile_options(tilde-backend PUBLIC /MT)\n        endif()\n    endif()\n    if(C3_WITH_LLVM)\n        set(clang_lib_dir ${llvm_dir}/lib/clang/${C3_LLVM_VERSION}/lib/windows)\n        set(sanitizer_runtime_libraries\n                ${clang_lib_dir}/clang_rt.asan-x86_64.lib\n                ${clang_lib_dir}/clang_rt.asan_dynamic-x86_64.lib\n                ${clang_lib_dir}/clang_rt.asan_dynamic-x86_64.dll\n                ${clang_lib_dir}/clang_rt.asan_dynamic_runtime_thunk-x86_64.lib)\n    endif()\nelse()\n    message(STATUS \"using gcc/clang warning switches\")\n    target_link_options(c3c PRIVATE -pthread)\n    if (C3_WITH_LLVM AND NOT LLVM_ENABLE_RTTI)\n        target_compile_options(c3c_wrappers PRIVATE -fno-rtti)\n    endif()\n    target_compile_options(c3c PRIVATE -pthread -Wall -Werror -Wno-unknown-pragmas -Wno-unused-result\n            -Wno-unused-function -Wno-unused-variable -Wno-unused-parameter)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining enum constants in C3 vs C/C++\nDESCRIPTION: Shows how enum constants are defined in C3 compared to C/C++. C3 uses explicit enum definitions with the 'enum' keyword.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c3\nCODE:\n```\nenum Foo { A, B, C }\n```\n\nLANGUAGE: c\nCODE:\n```\nenum Foo { A, B, C };\n```\n\n----------------------------------------\n\nTITLE: Modern Generic Syntax in C3\nDESCRIPTION: New syntax for generic types in C3, changed from Foo(<int>) to Foo{int}. This represents the modern approach to generic type instantiation introduced in v0.7.0.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_3\n\nLANGUAGE: C3\nCODE:\n```\nFoo {int}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for C3 Compiler\nDESCRIPTION: Sets up library linking for the C3 compiler based on whether LLVM is enabled or not, including miniz and LLVM/LLD libraries.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(C3_WITH_LLVM)\n    target_link_libraries(c3c ${llvm_libs} miniz c3c_wrappers ${lld_libs})\n\n    target_include_directories(c3c PRIVATE\n            \"${CMAKE_SOURCE_DIR}/wrapper/include/\")\n\n    target_include_directories(c3c_wrappers PRIVATE\n            \"${CMAKE_SOURCE_DIR}/wrapper/include/\")\n\n    target_link_libraries(c3c_wrappers ${llvm_libs} ${lld_libs})\n\nelse()\n\n    target_link_libraries(c3c ${llvm_libs} miniz ${lld_libs})\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using macros for function-like operations in C3 vs C/C++\nDESCRIPTION: Illustrates how macros are used for function-like operations in C3 vs C/C++. C3 uses the 'macro' keyword with a specific syntax, while C uses the preprocessor with '#define'.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/opengl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: c3\nCODE:\n```\nmacro FOO(x) => x + 2;\n```\n\nLANGUAGE: c\nCODE:\n```\n#define FOO(x) ((x) + 2)\n```\n\n----------------------------------------\n\nTITLE: Correct C3 Brace Placement Example\nDESCRIPTION: Example showing the correct way to place braces in C3 code, following the Allman style with opening braces on a new line.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_1\n\nLANGUAGE: c3\nCODE:\n```\nfn void foo(String bar)\n{\n  @pool() \n  {\n    ...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tilde Backend for C3 Compiler\nDESCRIPTION: Sets up the Tilde backend integration when C3_USE_TB is enabled, including source files, dependencies, and compiler definitions.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (C3_USE_TB)\n    file(GLOB tilde-sources\n            tilde-backend/src/tb/*.c\n            tilde-backend/src/tb/codegen/*.c\n            tilde-backend/src/tb/bigint/*.c\n            tilde-backend/src/tb/objects/*.c\n            tilde-backend/src/tb/system/*.c\n            tilde-backend/src/tb/debug/cv/*.c\n            tilde-backend/src/tb/opt/*.c\n            tilde-backend/src/tb/x64/*.c\n            tilde-backend/src/tb/wasm/*.c\n            tilde-backend/src/tb/aarch64/*.c\n    )\n    target_sources(c3c PRIVATE\n            src/compiler/tilde_codegen.c\n            src/compiler/tilde_codegen_instr.c\n            src/compiler/tilde_codegen_value.c\n            src/compiler/tilde_codegen_storeload.c\n            src/compiler/tilde_codegen_expr.c\n            src/compiler/tilde_codegen_stmt.c\n            src/compiler/tilde_codegen_type.c\n            src/compiler/tilde_codegen_abi.c\n            src/compiler/tilde_codegen_storeload.c)\n\n    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=1)\n    target_link_libraries(c3c tilde-backend)\n    add_library(tilde-backend STATIC ${tilde-sources})\n    target_include_directories(tilde-backend PRIVATE\n            \"${CMAKE_SOURCE_DIR}/tilde-backend/src/\" \"${CMAKE_SOURCE_DIR}/tilde-backend/include\")\n\n    target_include_directories(c3c PRIVATE\n            \"${CMAKE_SOURCE_DIR}/tilde-backend/include/\")\n\nelse()\n\n    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=0)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Correct C3 Type Naming Convention\nDESCRIPTION: Example showing the correct PascalCase naming convention for type names in C3 code.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_2\n\nLANGUAGE: c3\nCODE:\n```\nenum MyEnum\n{\n  ABC,\n  DEF\n}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments Syntax in C3\nDESCRIPTION: Example of the new named arguments syntax in C3 using 'arg: x' notation, which replaces the deprecated '.arg = x' style.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_10\n\nLANGUAGE: C3\nCODE:\n```\narg: x\n```\n\n----------------------------------------\n\nTITLE: Configuring CURL Integration for C3 Compiler\nDESCRIPTION: Sets up CURL library integration when available, including libraries, include directories, and compiler definitions.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif (CURL_FOUND)\n    target_link_libraries(c3c ${CURL_LIBRARIES})\n    target_include_directories(c3c PRIVATE ${CURL_INCLUDES})\n    target_compile_definitions(c3c PUBLIC CURL_FOUND=1)\nelse()\n    target_compile_definitions(c3c PUBLIC CURL_FOUND=0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Format String Validation in C3\nDESCRIPTION: Example of the @format attribute for compile-time printf validation, added in v0.7.0. This feature ensures that format strings match their arguments at compile time.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_1\n\nLANGUAGE: C3\nCODE:\n```\n@format\n```\n\n----------------------------------------\n\nTITLE: Short Function Syntax with Memory Pool in C3\nDESCRIPTION: Example of using short function syntax with memory pool allocation in C3. This demonstrates the ability to combine the arrow return syntax with memory management annotations.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_4\n\nLANGUAGE: C3\nCODE:\n```\nfn int test() => @pool() { return 1; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Runtime for C3 Compiler\nDESCRIPTION: Sets up sanitizer runtime libraries when using LLVM with sanitizers, including platform-specific adjustments for Apple platforms.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif (C3_WITH_LLVM AND DEFINED sanitizer_runtime_libraries)\n    add_custom_command(TARGET c3c POST_BUILD\n            COMMAND \"${CMAKE_COMMAND}\" -E rm -rf -- $<TARGET_FILE_DIR:c3c>/c3c_rt\n            COMMAND \"${CMAKE_COMMAND}\" -E make_directory $<TARGET_FILE_DIR:c3c>/c3c_rt\n            COMMAND \"${CMAKE_COMMAND}\" -E copy ${sanitizer_runtime_libraries} $<TARGET_FILE_DIR:c3c>/c3c_rt\n            VERBATIM\n            COMMENT \"Copying sanitizer runtime libraries to output directory\")\n\n    if (APPLE)\n        # Change LC_ID_DYLIB to be rpath-based instead of having an absolute path\n        add_custom_command(TARGET c3c POST_BUILD\n                COMMAND find $<TARGET_FILE_DIR:c3c>/c3c_rt -type f -name \"*.dylib\" -execdir ${LLVM_TOOLS_BINARY_DIR}/llvm-install-name-tool -id @rpath/{} {} $<SEMICOLON>\n                VERBATIM)\n    endif()\n\n    install(DIRECTORY $<TARGET_FILE_DIR:c3c>/c3c_rt/ DESTINATION bin/c3c_rt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Array Cast Initialization in C3\nDESCRIPTION: Example of array initialization using cast syntax in C3, allowing for direct initialization of arrays with a specified size or as variable-length arrays.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_6\n\nLANGUAGE: C3\nCODE:\n```\n(int[*]) { 1, 2 }\n```\n\n----------------------------------------\n\nTITLE: Inferred Type on Body Parameters in C3\nDESCRIPTION: Example of using inferred types on body parameters in C3, allowing for cleaner function definitions with memory allocation specifications.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_2\n\nLANGUAGE: C3\nCODE:\n```\n@stack_mem(1024; alloc) { ... };\n```\n\n----------------------------------------\n\nTITLE: Adding Miniz Compression Library\nDESCRIPTION: Adds the miniz compression library as a static library dependency for the C3 compiler.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(miniz STATIC dependencies/miniz/miniz.c)\n```\n\n----------------------------------------\n\nTITLE: Installing C3 Compiler on Arch Linux using Package Manager\nDESCRIPTION: Commands to install the C3 compiler (c3c) on Arch Linux using various package managers. This snippet shows how to use pacman, paru, yay, or aura to install c3c from the official 'extra' repository.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S c3c\n# or paru -S c3c\n# or yay -S c3c\n# or aura -A c3c\n```\n\n----------------------------------------\n\nTITLE: Compile-time Array Assignment in C3\nDESCRIPTION: Example of compile-time array assignment operation in C3, showing how arrays can be manipulated at compile time using assignment operators.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_5\n\nLANGUAGE: C3\nCODE:\n```\n$c[1] += 3\n```\n\n----------------------------------------\n\nTITLE: Running RISC-V Example with Make\nDESCRIPTION: Command to execute the RISC-V example using Make build system.\nSOURCE: https://github.com/c3lang/c3c/blob/master/resources/examples/embedded/riscv-qemu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Components with C3 Syntax\nDESCRIPTION: Example of accessing array components in C3 using subscript notation like list[1][2], which was fixed in issue #1665.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_8\n\nLANGUAGE: C3\nCODE:\n```\nlist[1][2]\n```\n\n----------------------------------------\n\nTITLE: Vector to Slice Conversion in C3\nDESCRIPTION: Example of array initialization syntax in C3, allowing for implicit conversion from vector to slice.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_9\n\nLANGUAGE: C3\nCODE:\n```\nint[*] $x = { 1, 2, 3, 4 }\n```\n\n----------------------------------------\n\nTITLE: Null Pointer Error Example in C3\nDESCRIPTION: Example of code that previously incorrectly inserted a null check for a null pointer dereference operation.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_14\n\nLANGUAGE: C3\nCODE:\n```\n(uptr)&((Foo*)null).a\n```\n\n----------------------------------------\n\nTITLE: Compile-Time String Slicing in C3\nDESCRIPTION: Example of compile-time string slicing that is now supported in C3, enabling manipulation of string literals at compile time.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_13\n\nLANGUAGE: C3\nCODE:\n```\nZString a = foo ? \"a\" : \"b\";\n```\n\n----------------------------------------\n\nTITLE: Installing C3 Compiler on Windows using Scoop\nDESCRIPTION: Command to install the C3 compiler (c3c) on Windows using the Scoop package manager. This snippet shows how to install c3c from the 'Main' bucket.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nscoop install c3\n```\n\n----------------------------------------\n\nTITLE: Incorrect C3 Brace Placement Example\nDESCRIPTION: Example showing the incorrect way to place braces in C3 code. The opening brace should be on the next line, not at the end of the function declaration line.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_0\n\nLANGUAGE: c3\nCODE:\n```\nfn void foo(String bar) {\n  @pool() {\n    ...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing C3 Compiler on Arch Linux from AUR\nDESCRIPTION: Commands to install the C3 compiler (c3c) on Arch Linux from the Arch User Repository (AUR). This snippet shows how to use AUR package managers or manually clone and build the package.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nparu -S c3c-git\n# or yay -S c3c-git\n# or aura -A c3c-git\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://aur.archlinux.org/c3c-git.git\ncd c3c-git\nmakepkg -si\n```\n\n----------------------------------------\n\nTITLE: Code Examples in C3 Language\nDESCRIPTION: Various code examples referenced in the changelog including conversions, assignments and declarations.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_7\n\nLANGUAGE: C3\nCODE:\n```\n$foo = 1;\n```\n\nLANGUAGE: C3\nCODE:\n```\nreturn (any)&foo\n```\n\nLANGUAGE: C3\nCODE:\n```\nString! a; char* b = a.ptr;\n```\n\nLANGUAGE: C3\nCODE:\n```\nz <<= { 1, 2 }\n```\n\nLANGUAGE: C3\nCODE:\n```\nfn void! main()\n```\n\n----------------------------------------\n\nTITLE: Building C3 Compiler using Docker\nDESCRIPTION: Command to build the C3 compiler (c3c) using a Docker container with Ubuntu. This snippet shows how to specify the Ubuntu version using an environment variable.\nSOURCE: https://github.com/c3lang/c3c/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUBUNTU_VERSION=20.04 ./build-with-docker.sh\n```\n\n----------------------------------------\n\nTITLE: C Dynamic Array Creation Example\nDESCRIPTION: Example showing how to create and add elements to a dynamic array in C using the arena allocator in the C3C compiler.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nFoo *foos = NULL;\nvec_add(foos, (Foo) { 1, 2 });\n```\n\n----------------------------------------\n\nTITLE: Ternary Expression with Function Calls in C3\nDESCRIPTION: Example of a ternary operation with function calls, which previously caused a compiler crash if both returned void!.\nSOURCE: https://github.com/c3lang/c3c/blob/master/releasenotes.md#2025-04-23_snippet_11\n\nLANGUAGE: C3\nCODE:\n```\na > 0 ? f() : g()\n```\n\n----------------------------------------\n\nTITLE: Incorrect C3 Type Naming Convention\nDESCRIPTION: Example showing the incorrect Ada_Case naming convention for type names in C3 code, which should be avoided.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_3\n\nLANGUAGE: c3\nCODE:\n```\nenum My_Enum\n{\n  ABC,\n  DEF\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect C3 Function and Variable Naming\nDESCRIPTION: Example showing the incorrect camelCase naming convention for variables, functions, methods, and globals in C3 code, which should be avoided.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CODESTYLE.md#2025-04-23_snippet_5\n\nLANGUAGE: c3\nCODE:\n```\nint someGlobal = 1;\n\nfn void openFile(String specialFile)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C3 Compiler Installation\nDESCRIPTION: Sets up installation targets for the C3 compiler binary, library files, and man pages (on non-Windows platforms).\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS c3c DESTINATION bin)\ninstall(DIRECTORY lib/ DESTINATION lib/c3)\n\n# Man page install (OSX/Linux only)\nif (NOT WIN32)\n    install(FILES c3c.1 DESTINATION \"share/man/man1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Flags Configuration\nDESCRIPTION: Sets up compiler flags for both MSVC and non-MSVC environments, including debug and release configurations. Configures optimization levels, debug symbols, and sanitizer options.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    message(STATUS \"MSVC version ${MSVC_VERSION}\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /O2 /EHsc /utf-8\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /O2 /EHsc /utf-8\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Od /Zi /EHa /utf-8\")\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Od /Zi /EHa /utf-8\")\nelse()\n    if (true)\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -O0 -fno-exceptions\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3 -O0 -fno-exceptions\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -gdwarf-3 -O3 -fno-exceptions\")\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gdwarf-3 -fno-exceptions\")\n    else()\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -gdwarf-3 -O3 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3 -O1 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -gdwarf-3 -O3 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gdwarf-3 -O1 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined,address -fno-exceptions\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Version Detection and Project Setup\nDESCRIPTION: Reads the compiler version from version.h and sets up the project with the detected version. Includes basic CMake configuration and installation directory setup.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nfile(READ \"src/version.h\" ver)\nif (NOT ${ver} MATCHES \"COMPILER_VERSION \\\"([0-9]+.[0-9]+.[0-9]+)\\\"\")\n    message(FATAL_ERROR \"Compiler version could not be parsed from version.h\")\nendif()\n\nproject(c3c VERSION ${CMAKE_MATCH_1})\nmessage(\"C3C version: ${CMAKE_PROJECT_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Clangd LSP Support in CMake\nDESCRIPTION: Sets up support for the Clangd Language Server Protocol by enabling the export of compile commands and creating a symlink to the compile_commands.json file.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\noption(C3_ENABLE_CLANGD_LSP \"Enable/Disable output of compile commands during generation.\" OFF)\nif(C3_ENABLE_CLANGD_LSP)\n    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n    execute_process(\n            COMMAND ${CMAKE_COMMAND} -E create_symlink\n            ${CMAKE_BINARY_DIR}/compile_commands.json\n            ${CMAKE_SOURCE_DIR}/compile_commands.json\n    )\nendif(C3_ENABLE_CLANGD_LSP)\n```\n\n----------------------------------------\n\nTITLE: Dependencies and Optional Features Configuration\nDESCRIPTION: Configures optional features like mimalloc integration, LLVM version handling, and Git submodule management. Sets up build options and fetches external dependencies.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(C3_LINK_DYNAMIC \"link dynamically with LLVM/LLD libs\")\n\nset(C3_LLVM_VERSION \"auto\" CACHE STRING \"Use LLVM version [default: auto]\")\noption(C3_USE_MIMALLOC \"Use built-in mimalloc\" OFF)\noption(C3_USE_TB \"Use TB\" OFF)\nset(C3_MIMALLOC_TAG \"v1.7.3\" CACHE STRING \"Used version of mimalloc\")\noption(C3_WITH_LLVM \"Build with LLVM\" ON)\noption(C3_LLD_DIR \"Use custom LLD directory\" \"\")\noption(LLVM_CRT_LIBRARY_DIR \"Use custom llvm's compiler-rt directory\" \"\")\n\nset(C3_USE_MIMALLOC OFF)\nif(C3_USE_MIMALLOC)\n    option(MI_BUILD_TESTS OFF)\n    option(MI_BUILD_SHARED OFF)\n    option(MI_PADDING OFF)\n    option(MI_DEBUG_FULL OFF)\n    FetchContent_Declare(\n            mimalloc\n            GIT_REPOSITORY https://github.com/microsoft/mimalloc.git\n            GIT_TAG ${C3_MIMALLOC_TAG}\n    )\n    FetchContent_MakeAvailable(mimalloc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up LLVM Library Directories and Version Check\nDESCRIPTION: Configures LLVM library directories, performs version checking to ensure LLVM 15.0 or later is used, and sets up include directories and definitions.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n    if (EXISTS /usr/lib)\n        # Some systems (such as Alpine Linux) seem to put some of the relevant\n        # LLVM files in /usr/lib, but this doesn't seem to be included in the\n        # value of LLVM_LIBRARY_DIRS.\n        list(APPEND LLVM_LIBRARY_DIRS /usr/lib)\n    endif()\n\n    message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\n    message(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\n    message(STATUS \"Libraries located in: ${LLVM_LIBRARY_DIRS}\")\n\n    if (NOT LLVM_PACKAGE_VERSION VERSION_GREATER_EQUAL 15.0)\n        message(FATAL_ERROR \"LLVM version 15.0 or later is required.\")\n    endif()\n\n    if(LLVM_ENABLE_RTTI)\n        message(STATUS \"LLVM was built with RTTI\")\n    else()\n        message(STATUS \"LLVM was not built with RTTI\")\n    endif()\n\n    string(REPLACE \".\" \";\" VERSION_LIST ${LLVM_PACKAGE_VERSION})\n    list(GET VERSION_LIST 0 LLVM_MAJOR_VERSION)\n\n    include_directories(${LLVM_INCLUDE_DIRS})\n    link_directories(${LLVM_LIBRARY_DIRS})\n    add_definitions(${LLVM_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Hash Generation in CMake\nDESCRIPTION: Sets up custom commands to generate git_hash.h with different behavior depending on whether the build is within a git repository or not.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(GIT_FOUND AND EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    # We are inside of a git repository so rebuilding the hash every time something changes.\n    add_custom_command(\n            OUTPUT ${CMAKE_BINARY_DIR}/git_hash.h\n            COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_LIST_DIR}/git_hash.cmake\"\n            DEPENDS \"${CMAKE_CURRENT_LIST_DIR}/.git\")\nelse()\n    # We are NOT inside of a git repository. Building the has only once.\n    add_custom_command(\n            OUTPUT ${CMAKE_BINARY_DIR}/git_hash.h\n            COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_LIST_DIR}/git_hash.cmake\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LLVM Integration for Windows with MSVC\nDESCRIPTION: Configures LLVM integration for Windows with MSVC by downloading the appropriate LLVM libraries based on build type and setting up necessary directories and packages.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(C3_WITH_LLVM)\n    if(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n        if (C3_LLVM_VERSION STREQUAL \"auto\")\n            set(C3_LLVM_VERSION \"19\")\n        endif()\n        FetchContent_Declare(\n                LLVM_Windows\n                URL https://github.com/c3lang/win-llvm/releases/download/llvm_19_1_5/llvm-19.1.5-windows-amd64-msvc17-libcmt.7z\n        )\n        FetchContent_Declare(\n                LLVM_Windows_debug\n                URL https://github.com/c3lang/win-llvm/releases/download/llvm_19_1_5/llvm-19.1.5-windows-amd64-msvc17-libcmt-dbg.7z\n        )\n        if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n            message(\"Loading Windows LLVM debug libraries, this may take a while...\")\n            FetchContent_MakeAvailable(LLVM_Windows_debug)\n            set(llvm_dir ${llvm_windows_debug_SOURCE_DIR})\n        else()\n            message(\"Loading Windows LLVM libraries, this may take a while...\")\n            FetchContent_MakeAvailable(LLVM_Windows)\n            set(llvm_dir ${llvm_windows_SOURCE_DIR})\n        endif()\n        set(CMAKE_SYSTEM_PREFIX_PATH ${llvm_dir} ${CMAKE_SYSTEM_PREFIX_PATH})\n\n        find_package(LLVM REQUIRED CONFIG)\n        find_package(LLD REQUIRED CONFIG)\n    else()\n        if (NOT C3_LLVM_VERSION STREQUAL \"auto\")\n            find_package(LLVM ${C3_LLVM_VERSION} REQUIRED CONFIG)\n        else()\n            find_package(LLVM REQUIRED CONFIG)\n        endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LLVM Static Linking Components\nDESCRIPTION: Sets up static linking to LLVM components by defining necessary LLVM components, mapping them to library names, and setting up custom LLD directory if specified.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n    if(NOT C3_LINK_DYNAMIC)\n        set(LLVM_LINK_COMPONENTS\n                AllTargetsAsmParsers\n                AllTargetsCodeGens\n                AllTargetsDescs\n                AllTargetsDisassemblers\n                AllTargetsInfos\n                Analysis\n                AsmPrinter\n                BitReader\n                Core\n                DebugInfoPDB\n                InstCombine\n                IrReader\n                LibDriver\n                Linker\n                LTO\n                MC\n                MCDisassembler\n                native\n                nativecodegen\n                Object\n                Option\n                ScalarOpts\n                Support\n                Target\n                TransformUtils\n                WindowsManifest\n                WindowsDriver\n        )\n\n        llvm_map_components_to_libnames(llvm_libs ${LLVM_LINK_COMPONENTS})\n\n        if(NOT ${C3_LLD_DIR} EQUAL \"\" AND EXISTS ${C3_LLD_DIR})\n            message(\"C3_LLD_DIR: \" ${C3_LLD_DIR})\n            set(LLVM_LIBRARY_DIRS\n                    \"${LLVM_LIBRARY_DIRS}\"\n                    \"${C3_LLD_DIR}\"\n            )\n            list(REMOVE_DUPLICATES LLVM_LIBRARY_DIRS)\n        endif()\n```\n\n----------------------------------------\n\nTITLE: Copying Library Files to Binary Directory\nDESCRIPTION: Ensures the lib directory is properly set up in the binary directory by first removing any existing copies and then copying from the source directory.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT(${CMAKE_BINARY_DIR} EQUAL ${CMAKE_SOURCE_DIR}))\n    file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib)\n    file(COPY ${CMAKE_SOURCE_DIR}/lib DESTINATION ${CMAKE_BINARY_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for C3 Compiler\nDESCRIPTION: Configures include directories for the C3 compiler and the miniz library dependency.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(c3c PRIVATE\n        \"${CMAKE_SOURCE_DIR}/src/\"\n        \"${CMAKE_BINARY_DIR}\")\n\ntarget_include_directories(miniz PUBLIC\n        \"${CMAKE_SOURCE_DIR}/dependencies/miniz/\")\n```\n\n----------------------------------------\n\nTITLE: Finding Static LLD Libraries\nDESCRIPTION: Locates various LLD (LLVM linker) static libraries including COFF, Common, ELF, MachO, MinGW and WebAssembly formats.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n        # These don't seem to be reliable on windows.\n        message(STATUS \"using find_library\")\n        find_library(LLD_COFF NAMES liblldCOFF.dylib lldCOFF.lib lldCOFF.a liblldCOFF.dll.a liblldCOFF.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_COMMON NAMES liblldCommon.dylib lldCommon.lib lldCommon.a liblldCommon.dll.a liblldCommon.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_ELF NAMES liblldELF.dylib lldELF.lib lldELF.a liblldELF.dll.a liblldELF.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MACHO NAMES liblldMachO.dylib lldMachO.lib lldMachO.a liblldMachO.dll.a liblldMachO.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MINGW NAMES liblldMinGW.dylib lldMinGW.lib lldMinGW.a liblldMinGW.dll.a liblldMinGW.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_WASM NAMES liblldWasm.dylib lldWasm.lib lldWasm.a liblldWasm.dll.a liblldWasm.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n```\n\n----------------------------------------\n\nTITLE: Finding Dynamic LLVM and LLD Libraries\nDESCRIPTION: Handles the dynamic linking case by finding the appropriate shared library versions of LLVM and LLD components.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n    else()\n        find_library(LLVM NAMES libLLVM.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        set(llvm_libs ${LLVM})\n\n        # These don't seem to be reliable on windows.\n        message(STATUS \"using find_library\")\n        find_library(LLD_COFF NAMES liblldCOFF.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_COMMON NAMES liblldCommon.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_ELF NAMES liblldELF.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MACHO NAMES liblldMachO.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MINGW NAMES liblldMinGW.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_WASM NAMES liblldWasm.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Libraries and Sanitizers\nDESCRIPTION: Finds additional LLVM components including LoongArch architecture support and platform-specific sanitizer libraries for macOS.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(C3_WITH_LLVM)\n    find_library(LLD_LOONG NAMES libLLVMLoongArchCodeGen.lib libLLVMLoongArchAsmParser.lib libLLVMLoongArchCodeGen.a libLLVMLoongArchAsmParser.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n    set(lld_libs\n            ${LLD_COFF}\n            ${LLD_WASM}\n            ${LLD_MINGW}\n            ${LLD_ELF}\n            ${LLD_MACHO}\n            ${LLD_COMMON}\n    )\n\n    if (APPLE)\n        set(lld_libs ${lld_libs} xar)\n        find_file(RT_ASAN_DYNAMIC NAMES libclang_rt.asan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\" ${LLVM_CRT_LIBRARY_DIR})\n        find_file(RT_TSAN_DYNAMIC NAMES libclang_rt.tsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\" ${LLVM_CRT_LIBRARY_DIR})\n        find_file(RT_UBSAN_DYNAMIC NAMES libclang_rt.ubsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\" ${LLVM_CRT_LIBRARY_DIR})\n        find_file(RT_LSAN_DYNAMIC NAMES libclang_rt.lsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\" ${LLVM_CRT_LIBRARY_DIR})\n        set(sanitizer_runtime_libraries\n                ${RT_ASAN_DYNAMIC}\n                ${RT_TSAN_DYNAMIC}\n                # Unused\n                # ${RT_UBSAN_DYNAMIC}\n                # ${RT_LSAN_DYNAMIC}\n        )\n    endif()\n\n    message(STATUS \"linking to llvm libs ${lld_libs}\")\n    message(STATUS \"Found lld libs ${lld_libs}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Allocator for C3 Compiler\nDESCRIPTION: Links the mimalloc memory allocator library when C3_USE_MIMALLOC is enabled.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(C3_USE_MIMALLOC)\n    target_link_libraries(c3c mimalloc-static)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Libraries for C3 Compiler\nDESCRIPTION: Links the Windows-specific Winhttp library when building on Windows platforms.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n    target_link_libraries(c3c Winhttp.lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MinGW Stack Size for C3 Compiler\nDESCRIPTION: Increases the stack size when building with MinGW to prevent stack overflow issues.\nSOURCE: https://github.com/c3lang/c3c/blob/master/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(MINGW)\n    message(\"Increase stack for msys\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--stack,8388608\")\nendif ()\n```"
  }
]