[
  {
    "owner": "hynek",
    "repo": "structlog",
    "content": "TITLE: Configuring structlog for Development and Production Environments\nDESCRIPTION: Example showing how to configure structlog processors differently based on the execution environment. Uses pretty printing for development (terminal) and JSON output for production. Includes support for structured tracebacks.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/logging-best-practices.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport structlog\n\nshared_processors = [\n    # Processors that have nothing to do with output,\n    # e.g., add timestamps or log level names.\n]\nif sys.stderr.isatty():\n    # Pretty printing when we run in a terminal session.\n    # Automatically prints pretty tracebacks when \"rich\" is installed\n    processors = shared_processors + [\n        structlog.dev.ConsoleRenderer(),\n    ]\nelse:\n    # Print JSON when we run, e.g., in a Docker container.\n    # Also print structured tracebacks.\n    processors = shared_processors + [\n        structlog.processors.dict_tracebacks,\n        structlog.processors.JSONRenderer(),\n    ]\nstructlog.configure(processors)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of structlog in Python\nDESCRIPTION: Demonstrates the simplest usage of structlog to create a logger and log a message with additional key-value pairs.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import structlog\n>>> log = structlog.get_logger()\n>>> log.info(\"hello, %s!\", \"world\", key=\"value!\", more_than_strings=[1, 2, 3])  # doctest: +SKIP\n2022-10-07 10:41:29 [info     ] hello, world!   key=value! more_than_strings=[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog with Default Settings\nDESCRIPTION: Equivalent configuration to achieve the default behavior of structlog, including processors, wrapper class, context class, and logger factory.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport structlog\n\nstructlog.configure(\n    processors=[\n        structlog.contextvars.merge_contextvars,\n        structlog.processors.add_log_level,\n        structlog.processors.StackInfoRenderer(),\n        structlog.dev.set_exc_info,\n        structlog.processors.TimeStamper(fmt=\"%Y-%m-%d %H:%M:%S\", utc=False),\n        structlog.dev.ConsoleRenderer()\n    ],\n    wrapper_class=structlog.make_filtering_bound_logger(logging.NOTSET),\n    context_class=dict,\n    logger_factory=structlog.PrintLoggerFactory(),\n    cache_logger_on_first_use=False\n)\nlog = structlog.get_logger()\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog with JSONRenderer\nDESCRIPTION: Demonstrates how to configure structlog to render log entries as JSON using the JSONRenderer processor.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> structlog.configure(processors=[structlog.processors.JSONRenderer()])\n>>> structlog.get_logger().info(\"hi\")\n{\"event\": \"hi\"}\n```\n\n----------------------------------------\n\nTITLE: Basic structlog Logger Import and Initialization\nDESCRIPTION: Shows the minimal boilerplate needed to import and initialize a structlog logger in application code.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nlogger = structlog.get_logger()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Logging Configuration with DictConfig\nDESCRIPTION: Complete example showing how to configure colored console output and plain file logging using dictConfig.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport logging.config\nimport structlog\n\ntimestamper = structlog.processors.TimeStamper(fmt=\"%Y-%m-%d %H:%M:%S\")\npre_chain = [\n    structlog.stdlib.add_log_level,\n    structlog.stdlib.ExtraAdder(),\n    timestamper,\n]\n\ndef extract_from_record(_, __, event_dict):\n    record = event_dict[\"_record\"]\n    event_dict[\"thread_name\"] = record.threadName\n    event_dict[\"process_name\"] = record.processName\n    return event_dict\n\nlogging.config.dictConfig({\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"plain\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processors\": [\n                structlog.stdlib.ProcessorFormatter.remove_processors_meta,\n                structlog.dev.ConsoleRenderer(colors=False),\n            ],\n            \"foreign_pre_chain\": pre_chain,\n        },\n        \"colored\": {\n            \"()\": structlog.stdlib.ProcessorFormatter,\n            \"processors\": [\n                extract_from_record,\n                structlog.stdlib.ProcessorFormatter.remove_processors_meta,\n                structlog.dev.ConsoleRenderer(colors=True),\n            ],\n            \"foreign_pre_chain\": pre_chain,\n        },\n    },\n    \"handlers\": {\n        \"default\": {\n            \"level\": \"DEBUG\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"colored\",\n        },\n        \"file\": {\n            \"level\": \"DEBUG\",\n            \"class\": \"logging.handlers.WatchedFileHandler\",\n            \"filename\": \"test.log\",\n            \"formatter\": \"plain\",\n        },\n    },\n    \"loggers\": {\n        \"\": {\n            \"handlers\": [\"default\", \"file\"],\n            \"level\": \"DEBUG\",\n            \"propagate\": True,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Production-Ready structlog in Python\nDESCRIPTION: This snippet presents a comprehensive configuration for structlog optimized for production use. It includes caching, efficient filtering, context variable support, exception handling, timestamping, and fast JSON rendering using orjson.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/performance.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport orjson\nimport structlog\n\nstructlog.configure(\n    cache_logger_on_first_use=True,\n    wrapper_class=structlog.make_filtering_bound_logger(logging.INFO),\n    processors=[\n        structlog.contextvars.merge_contextvars,\n        structlog.processors.add_log_level,\n        structlog.processors.format_exc_info,\n        structlog.processors.TimeStamper(fmt=\"iso\", utc=True),\n        structlog.processors.JSONRenderer(serializer=orjson.dumps),\n    ],\n    logger_factory=structlog.BytesLoggerFactory(),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic structlog Usage with Key-Value Logging\nDESCRIPTION: Demonstrates how to initialize a structlog logger and log events with key-value pairs. Shows the basic syntax for structured logging without requiring string formatting.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/why.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog import get_logger\n>>> log = get_logger()\n>>> log.info(\"key_value_logging\", out_of_the_box=True, effort=0)\n2020-11-18 09:17:09 [info     ] key_value_logging    effort=0 out_of_the_box=True\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Structured Logging with structlog\nDESCRIPTION: Basic configuration to output structured logs in JSON format using structlog processors including level filtering, timestamp addition, stack trace rendering, and JSON formatting.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.TimeStamper(fmt=\"iso\"),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n        structlog.processors.UnicodeDecoder(),\n        structlog.processors.CallsiteParameterAdder(\n            {\n                structlog.processors.CallsiteParameter.FILENAME,\n                structlog.processors.CallsiteParameter.FUNC_NAME,\n                structlog.processors.CallsiteParameter.LINENO,\n            }\n        ),\n        structlog.processors.JSONRenderer()\n    ],\n    wrapper_class=structlog.stdlib.BoundLogger,\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    cache_logger_on_first_use=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using structlog's contextvars Module\nDESCRIPTION: Basic example showing how to import and use structlog's contextvars module to bind, clear, and manage context variables for logging. This snippet demonstrates the fundamental workflow including context configuration and key-value rendering.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/contextvars.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.contextvars import (\n...     bind_contextvars,\n...     bound_contextvars,\n...     clear_contextvars,\n...     merge_contextvars,\n...     unbind_contextvars,\n... )\n>>> from structlog import configure\n>>> configure(\n...     processors=[\n...         merge_contextvars,\n...         structlog.processors.KeyValueRenderer(key_order=[\"event\", \"a\"]),\n...     ]\n... )\n>>> log = structlog.get_logger()\n>>> # At the top of your request handler (or, ideally, some general\n>>> # middleware), clear the contextvars-local context and bind some common\n>>> # values:\n>>> clear_contextvars()\n>>> bind_contextvars(a=1, b=2)\n{'a': <Token var=<ContextVar name='structlog_a' default=Ellipsis at ...> at ...>, 'b': <Token var=<ContextVar name='structlog_b' default=Ellipsis at ...> at ...>}\n>>> # Then use loggers as per normal\n>>> # (perhaps by using structlog.get_logger() to create them).\n>>> log.info(\"hello\")\nevent='hello' a=1 b=2\n>>> # Use unbind_contextvars to remove a variable from the context.\n>>> unbind_contextvars(\"b\")\n>>> log.info(\"world\")\nevent='world' a=1\n>>> # You can also bind key-value pairs temporarily.\n>>> with bound_contextvars(b=2):\n...    log.info(\"hi\")\nevent='hi' a=1 b=2\n>>> # Now it's gone again.\n>>> log.info(\"hi\")\nevent='hi' a=1\n>>> # And when we clear the contextvars state again, it goes away.\n>>> # a=None is printed due to the key_order argument passed to\n>>> # KeyValueRenderer, but it is NOT present anymore.\n>>> clear_contextvars()\n>>> log.info(\"hi there\")\nevent='hi there' a=None\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating a Basic Bound Logger in Python\nDESCRIPTION: Demonstrates how to import structlog and create a bound logger with additional context data. Shows binding a key-value pair to a logger instance.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/bound-loggers.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nlogger = structlog.get_logger()\n\nlog = logger.bind(foo=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog with Custom Processor\nDESCRIPTION: Shows how to configure structlog to use a custom processor (timestamper) along with the KeyValueRenderer.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> structlog.configure(processors=[timestamper, structlog.processors.KeyValueRenderer()])\n>>> structlog.get_logger().info(\"hi\")  # doctest: +SKIP\nevent='hi' time='2018-01-21T09:37:36.976816'\n```\n\n----------------------------------------\n\nTITLE: Configuring Structlog with Processor Chain in Python\nDESCRIPTION: Demonstrates how to set up a structlog logger with a chain of processors f1, f2, and f3, and bind a context value.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/processors.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstructlog.configure(processors=[f1, f2, f3])\nlog = structlog.get_logger().bind(x=42)\n```\n\n----------------------------------------\n\nTITLE: Setting up JSON Logging with python-json-logger\nDESCRIPTION: Configuration to format all log entries (including non-structlog ones) as JSON using the python-json-logger library.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nfrom pythonjsonlogger import jsonlogger\n\nhandler = logging.StreamHandler(sys.stdout)\nhandler.setFormatter(jsonlogger.JsonFormatter())\nroot_logger = logging.getLogger()\nroot_logger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Using JSONRenderer with structlog in Python\nDESCRIPTION: Shows how to use the JSONRenderer processor to format log events as JSON. Includes examples of basic usage and handling custom objects through the __structlog__ method.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import JSONRenderer\n>>> JSONRenderer(sort_keys=True)(None, \"\", {\"a\": 42, \"b\": [1, 2, 3]})\n'{\"a\": 42, \"b\": [1, 2, 3]}'\n\n>>> class C1:\n...     def __structlog__(self):\n...         return [\"C1!\"]\n...     def __repr__(self):\n...         return \"__structlog__ took precedence\"\n>>> class C2:\n...     def __repr__(self):\n...         return \"No __structlog__, so this is used.\"\n>>> from structlog.processors import JSONRenderer\n>>> JSONRenderer(sort_keys=True)(None, \"\", {\"c1\": C1(), \"c2\": C2()})\n'{\"c1\": [\"C1!\"], \"c2\": \"No __structlog__, so this is used.\"}'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> structlog.configure(\n...     processors=[\n...         structlog.processors.dict_tracebacks,\n...         structlog.processors.JSONRenderer(),\n...     ],\n... )\n>>> log = structlog.get_logger()\n>>> var = \"spam\"\n>>> try:\n...     1 / 0\n... except ZeroDivisionError:\n...     log.exception(\"Cannot compute!\")\n{\"event\": \"Cannot compute!\", \"exception\": [{\"exc_type\": \"ZeroDivisionError\", \"exc_value\": \"division by zero\", \"exc_notes\": [], \"syntax_error\": null, \"is_cause\": false, \"frames\": [{\"filename\": \"<doctest default[3]>\", \"lineno\": 2, \"name\": \"<module>\", \"locals\": {..., \"var\": \"'spam'\"}}]}]}\n```\n\n----------------------------------------\n\nTITLE: Using Exception Handling Processors in structlog\nDESCRIPTION: Demonstrates format_exc_info and dict_tracebacks processors for formatting exception information in structured logs. Shows how to convert exception tracebacks to text and dictionary formats.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import format_exc_info\n>>> try:\n...     raise ValueError\n... except ValueError:\n...     format_exc_info(None, \"\", {\"exc_info\": True})  # doctest: +ELLIPSIS\n{'exception': 'Traceback (most recent call last):...\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import dict_tracebacks\n>>> try:\n...     raise ValueError(\"onoes\")\n... except ValueError:\n...     dict_tracebacks(None, \"\", {\"exc_info\": True})  # doctest: +ELLIPSIS\n{'exception': [{'exc_type': 'ValueError', 'exc_value': 'onoes', ..., 'frames': [{'filename': ...\n```\n\n----------------------------------------\n\nTITLE: Using Type Hints with Structlog Logger\nDESCRIPTION: Demonstrates how to use type hints with structlog.get_logger() by explicitly typing the logger variable. Shows type checking behavior with valid and invalid method calls.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/typing.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nlogger: structlog.stdlib.BoundLogger = structlog.get_logger()\nlogger.info(\"hi\")  # <- ok\nlogger.msg(\"hi\")   # <- Mypy: 'error: \"BoundLogger\" has no attribute \"msg\"'\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Processor in structlog\nDESCRIPTION: Example of creating a custom processor to add a timestamp to every event dictionary.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> def timestamper(_, __, event_dict):\n...     event_dict[\"time\"] = datetime.datetime.now().isoformat()\n...     return event_dict\n```\n\n----------------------------------------\n\nTITLE: Flask Integration with structlog's contextvars\nDESCRIPTION: Complete example showing how to integrate Flask with structlog's contextvars to bind request-specific information (request ID, URL path, peer IP) to every log entry using thread-local storage via context variables.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/contextvars.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\nimport uuid\n\nimport flask\n\nfrom .some_module import some_function\n\nimport structlog\n\nlogger = structlog.get_logger()\napp = flask.Flask(__name__)\n\n@app.route(\"/login\", methods=[\"POST\", \"GET\"])\ndef some_route():\n    # You would put this into some kind of middleware or processor so it's set\n    # automatically for all requests in all views.\n    structlog.contextvars.clear_contextvars()\n    structlog.contextvars.bind_contextvars(\n        view=flask.request.path,\n        request_id=str(uuid.uuid4()),\n        peer=flask.request.access_route[0],\n    )\n    # End of belongs-to-middleware.\n\n    log = logger.bind()\n    # do something\n    # ...\n    log.info(\"user logged in\", user=\"test-user\")\n    # ...\n    some_function()\n    # ...\n    return \"logged in!\"\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(\n        format=\"%(message)s\", stream=sys.stdout, level=logging.INFO\n    )\n    structlog.configure(\n        processors=[\n            structlog.contextvars.merge_contextvars,  # <--!!!\n            structlog.processors.KeyValueRenderer(\n                key_order=[\"event\", \"view\", \"peer\"]\n            ),\n        ],\n        logger_factory=structlog.stdlib.LoggerFactory(),\n    )\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog-based Formatter within logging\nDESCRIPTION: Initial setup for using structlog's ProcessorFormatter as a logging.Formatter for both structlog and standard logging entries.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport structlog\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n    ],\n    logger_factory=structlog.stdlib.LoggerFactory(),\n)\n\nformatter = structlog.stdlib.ProcessorFormatter(\n    processors=[structlog.dev.ConsoleRenderer()],\n)\n\nhandler = logging.StreamHandler()\n```\n\n----------------------------------------\n\nTITLE: Advanced ProcessorFormatter Configuration\nDESCRIPTION: Configuration example showing how to add timestamps, log levels, and custom processors to structlog setup.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntimestamper = structlog.processors.TimeStamper(fmt=\"%Y-%m-%d %H:%M:%S\")\nshared_processors = [\n    structlog.stdlib.add_log_level,\n    timestamper,\n]\n\nstructlog.configure(\n    processors=shared_processors + [\n        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,\n    ],\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    cache_logger_on_first_use=True,\n)\n\nformatter = structlog.stdlib.ProcessorFormatter(\n    foreign_pre_chain=shared_processors,\n    processors=[\n        structlog.stdlib.ProcessorFormatter.remove_processors_meta,\n        structlog.dev.ConsoleRenderer(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Library Logger Factory Example\nDESCRIPTION: Shows how to configure and use the standard library LoggerFactory with structlog for basic logging output.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog import get_logger, configure\n>>> from structlog.stdlib import LoggerFactory\n>>> configure(logger_factory=LoggerFactory())\n>>> log = get_logger()\n>>> log.critical(\"this is too easy!\")\nevent='this is too easy!'\n```\n\n----------------------------------------\n\nTITLE: Configuring ConsoleRenderer with Custom Column Formatting in Python\nDESCRIPTION: Shows how to create a customized ConsoleRenderer with specific column formatting for timestamps, events, and other key-value pairs. The example uses Colorama to define ANSI color styles for different parts of the log output.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/console-output.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\nimport colorama\n\ncr = structlog.dev.ConsoleRenderer(\n    columns=[\n        # Render the timestamp without the key name in yellow.\n        structlog.dev.Column(\n            \"timestamp\",\n            structlog.dev.KeyValueColumnFormatter(\n                key_style=None,\n                value_style=colorama.Fore.YELLOW,\n                reset_style=colorama.Style.RESET_ALL,\n                value_repr=str,\n            ),\n        ),\n        # Render the event without the key name in bright magenta.\n        structlog.dev.Column(\n            \"event\",\n            structlog.dev.KeyValueColumnFormatter(\n                key_style=None,\n                value_style=colorama.Style.BRIGHT + colorama.Fore.MAGENTA,\n                reset_style=colorama.Style.RESET_ALL,\n                value_repr=str,\n            ),\n        ),\n        # Default formatter for all keys not explicitly mentioned. The key is\n        # cyan, the value is green.\n        structlog.dev.Column(\n            \"\",\n            structlog.dev.KeyValueColumnFormatter(\n                key_style=colorama.Fore.CYAN,\n                value_style=colorama.Fore.GREEN,\n                reset_style=colorama.Style.RESET_ALL,\n                value_repr=str,\n            ),\n        ),\n    ]\n)\n\nstructlog.configure(processors=structlog.get_config()[\"processors\"][:-1]+[cr])\n```\n\n----------------------------------------\n\nTITLE: Integrating Structlog with Celery Logger\nDESCRIPTION: Shows how to wrap Celery's task logger with Structlog for consistent logging in Celery tasks.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom celery.utils.log import get_task_logger\n\nlogger = structlog.wrap_logger(get_task_logger(__name__))\n```\n\n----------------------------------------\n\nTITLE: Configuring Level Filtering for Bound Loggers in Python\nDESCRIPTION: Shows how to configure structlog to filter log messages based on their level, using the standard logging module's level constants.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/bound-loggers.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import structlog\n>>> logger = structlog.get_logger()\n>>> logger.debug(\"hi!\")\n2022-10-15 11:39:03 [debug    ] hi!\n>>> import logging\n>>> structlog.configure(wrapper_class=structlog.make_filtering_bound_logger(logging.INFO))\n>>> logger.debug(\"hi!\")\n# no output!\n```\n\n----------------------------------------\n\nTITLE: Using Thread-local Context in structlog\nDESCRIPTION: Demonstrates how to use thread-local context storage for global data like peer IP using contextvars.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> structlog.contextvars.bind_contextvars(peer_ip=\"1.2.3.4\")\n>>> structlog.get_logger().info(\"something\")\n2022-10-10 10:18:05 [info     ] something    peer_ip=1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Context Binding with structlog\nDESCRIPTION: Demonstrates how to bind key-value pairs to logger instances, creating a context that persists across multiple log calls. Shows rebinding values for the same keys.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/why.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> log = log.bind(user=\"anonymous\", some_key=23)\n>>> log = log.bind(user=\"hynek\", another_key=42)\n>>> log.info(\"user.logged_in\", happy=True)\n2020-11-18 09:18:28 [info     ] user.logged_in    another_key=42 happy=True some_key=23 user=hynek\n```\n\n----------------------------------------\n\nTITLE: Using KeyValueRenderer in structlog\nDESCRIPTION: Demonstrates the KeyValueRenderer processor which formats log events as key-value pairs. Shows examples of basic formatting and controlling key order.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import KeyValueRenderer\n>>> KeyValueRenderer(sort_keys=True)(None, \"\", {\"a\": 42, \"b\": [1, 2, 3]})\n'a=42 b=[1, 2, 3]'\n>>> KeyValueRenderer(key_order=[\"b\", \"a\"])(None, \"\",\n...                                       {\"a\": 42, \"b\": [1, 2, 3]})\n'b=[1, 2, 3] a=42'\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Integration with Structlog\nDESCRIPTION: Processor implementation for enriching Structlog events with OpenTelemetry span information.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ndef add_open_telemetry_spans(_, __, event_dict):\n    span = trace.get_current_span()\n    if not span.is_recording():\n        event_dict[\"span\"] = None\n        return event_dict\n\n    ctx = span.get_span_context()\n    parent = getattr(span, \"parent\", None)\n\n    event_dict[\"span\"] = {\n        \"span_id\": format(ctx.span_id, \"016x\"),\n        \"trace_id\": format(ctx.trace_id, \"032x\"),\n        \"parent_span_id\": None if not parent else format(parent.span_id, \"016x\"),\n    }\n\n    return event_dict\n```\n\n----------------------------------------\n\nTITLE: Using LogfmtRenderer in structlog\nDESCRIPTION: Shows how to use the LogfmtRenderer processor which formats log events in logfmt format. Includes examples of handling different data types and controlling output format.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import LogfmtRenderer\n>>> event_dict = {\"a\": 42, \"b\": [1, 2, 3], \"flag\": True}\n>>> LogfmtRenderer(sort_keys=True)(None, \"\", event_dict)\n'a=42 b=\"[1, 2, 3]\" flag'\n>>> LogfmtRenderer(key_order=[\"b\", \"a\"], bool_as_flag=False)(None, \"\", event_dict)\n'b=\"[1, 2, 3]\" a=42 flag=true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Structlog for Twisted Integration\nDESCRIPTION: Comprehensive configuration example for integrating structlog with Twisted, including processors, logger factory, and wrapper class setup.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/twisted.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nstructlog.configure(\n   processors=[\n       structlog.processors.StackInfoRenderer(),\n       structlog.twisted.JSONRenderer()\n   ],\n   context_class=dict,\n   logger_factory=structlog.twisted.LoggerFactory(),\n   wrapper_class=structlog.twisted.BoundLogger,\n   cache_logger_on_first_use=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Flask Request Handler\nDESCRIPTION: Shows how to connect the request details binding function to a Flask application.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request_started\n\nrequest_started.connect(bind_request_details, app)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Setup with ProcessorFormatter\nDESCRIPTION: Basic configuration of logging handlers and formatters for both standard logging and structlog.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhandler.setFormatter(formatter)\nroot_logger = logging.getLogger()\nroot_logger.addHandler(handler)\nroot_logger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Flask Request Details Binding for Structlog\nDESCRIPTION: Signal handler implementation for binding Flask request details to Structlog context variables.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef bind_request_details(sender: Flask, **extras: dict[str, Any]) -> None:\n    structlog.contextvars.clear_contextvars()\n    structlog.contextvars.bind_contextvars(\n        request_id=request.headers.get(\"X-Unique-ID\", \"NONE\"),\n        peer=peer,\n    )\n\n    if current_user.is_authenticated:\n        structlog.contextvars.bind_contextvars(\n            user_id=current_user.get_id(),\n        )\n```\n\n----------------------------------------\n\nTITLE: Logging Usage Examples\nDESCRIPTION: Demonstrates how to use both standard logging and structlog in practice.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport structlog\n\nlogging.getLogger(\"stdlog\").info(\"woo\")\nstructlog.get_logger(\"structlog\").info(\"amazing\", events=\"oh yes\")\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog with logging-based Formatters\nDESCRIPTION: Configuration to use structlog for building event dictionaries while leaving formatting to the standard library logging module.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport structlog\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.StackInfoRenderer(),\n        structlog.processors.format_exc_info,\n        structlog.processors.UnicodeDecoder(),\n        structlog.stdlib.render_to_log_kwargs,\n    ],\n    logger_factory=structlog.stdlib.LoggerFactory(),\n    wrapper_class=structlog.stdlib.BoundLogger,\n    cache_logger_on_first_use=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Using TimeStamper and MaybeTimeStamper in structlog\nDESCRIPTION: Shows how to use TimeStamper and MaybeTimeStamper processors to add timestamps to log events. Includes examples of different timestamp formats and conditional timestamping.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import TimeStamper\n>>> TimeStamper()(None, \"\", {})  # doctest: +SKIP\n{'timestamp': 1378994017}\n>>> TimeStamper(fmt=\"iso\")(None, \"\", {})  # doctest: +SKIP\n{'timestamp': '2013-09-12T13:54:26.996778Z'}\n>>> TimeStamper(fmt=\"%Y\", key=\"year\")(None, \"\", {})  # doctest: +SKIP\n{'year': '2013'}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.processors import MaybeTimeStamper\n>>> MaybeTimeStamper()(None, \"\", {})  # doctest: +SKIP\n{'timestamp': 1690036074.494428}\n>>> MaybeTimeStamper()(None, \"\", {\"timestamp\": 42})\n{'timestamp': 42}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Twisted and Structlog\nDESCRIPTION: Demonstrates how to use structlog with Twisted's error handling. The example shows trapping a specific exception and logging it with additional context.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/twisted.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef onError(fail):\n     failure = fail.trap(MoonExploded)\n     log.err(failure, _why=\"event-that-happened\")\n```\n\n----------------------------------------\n\nTITLE: Creating Local Logger for Frequent Logging in Python\nDESCRIPTION: This snippet demonstrates how to create a local logger for frequent logging without binding, which is more efficient than repeatedly calling log methods on loggers returned by structlog.get_logger().\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/performance.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlogger = structlog.get_logger()\ndef f():\n    log = logger.bind()\n    for i in range(1000000000):\n       log.info(\"iterated\", i=i)\n```\n\n----------------------------------------\n\nTITLE: Pyramid Tween for Structlog Context\nDESCRIPTION: Implementation of a Pyramid tween that stores request-specific data in Structlog context variables.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass StructLogTween:\n    handler: Callable[[Request], Response]\n    registry: Registry\n\n    def __call__(self, request: Request) -> Response:\n        structlog.contextvars.clear_contextvars()\n        structlog.contextvars.bind_contextvars(\n            peer=request.client_addr,\n            request_id=request.headers.get(\"X-Unique-ID\", \"NONE\"),\n            user_agent=request.environ.get(\"HTTP_USER_AGENT\", \"UNKNOWN\"),\n            user=request.authenticated_userid,\n        )\n\n        return self.handler(request)\n```\n\n----------------------------------------\n\nTITLE: Using Async Logging Methods in structlog\nDESCRIPTION: Example of using both synchronous and asynchronous logging methods in structlog within an asyncio context.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import asyncio\n>>> logger = structlog.get_logger()\n>>> async def f():\n...     await logger.ainfo(\"async hi!\")\n...\n>>> logger.info(\"Loop isn't running yet, but we can log!\")\n2023-04-06 07:25:48 [info     ] Loop isn't running yet, but we can log!\n>>> asyncio.run(f())\n2023-04-06 07:26:08 [info     ] async hi!\n```\n\n----------------------------------------\n\nTITLE: Supporting Module for Flask Example\nDESCRIPTION: Module that demonstrates how context variables set in the main Flask application are available to functions in imported modules, showing the power of context-local storage across module boundaries.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/contextvars.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom structlog import get_logger\n\nlogger = get_logger()\n\ndef some_function():\n    # ...\n    logger.error(\"user did something\", something=\"shot_in_foot\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Manually Wrapping Loggers with Custom Processors in Python\nDESCRIPTION: Example of manually wrapping a custom logger with structlog, defining a custom processor function, and demonstrating binding/unbinding context values.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/bound-loggers.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import structlog\n>>> class CustomPrintLogger:\n...     def msg(self, message):\n...         print(message)\n>>> def proc(logger, method_name, event_dict):\n...     print(\"I got called with\", event_dict)\n...     return repr(event_dict)\n>>> log = structlog.wrap_logger(\n...     CustomPrintLogger(),\n...     wrapper_class=structlog.BoundLogger,\n...     processors=[proc],\n... )\n>>> log2 = log.bind(x=42)\n>>> log == log2\nFalse\n>>> log.msg(\"hello world\")\nI got called with {'event': 'hello world'}\n{'event': 'hello world'}\n>>> log2.msg(\"hello world\")\nI got called with {'x': 42, 'event': 'hello world'}\n{'x': 42, 'event': 'hello world'}\n>>> log3 = log2.unbind(\"x\")\n>>> log == log3\nTrue\n>>> log3.msg(\"nothing bound anymore\", foo=\"but you can structure the event too\")\nI got called with {'foo': 'but you can structure the event too', 'event': 'nothing bound anymore'}\n{'foo': 'but you can structure the event too', 'event': 'nothing bound anymore'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wrapped Dictionary for Thread-Local Storage in Python\nDESCRIPTION: This snippet shows how to create and use thread-local dictionary-like objects using structlog.threadlocal.wrap_dict. All instances of the wrapped class share the same data within a thread.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/thread-local.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.threadlocal import wrap_dict\n>>> WrappedDictClass = wrap_dict(dict)\n>>> d1 = WrappedDictClass({\"a\": 1})\n>>> d2 = WrappedDictClass({\"b\": 2})\n>>> d3 = WrappedDictClass()\n>>> d3[\"c\"] = 3\n>>> d1 is d3\nFalse\n>>> d1 == d2 == d3 == WrappedDictClass()\nTrue\n>>> d3  # doctest: +ELLIPSIS\n<WrappedDict-...({'a': 1, 'b': 2, 'c': 3})>\n```\n\n----------------------------------------\n\nTITLE: Adding UNIX Timestamp to Log Entries with Python Processor\nDESCRIPTION: Defines a processor function that adds a UNIX timestamp to each log entry's event dictionary.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/processors.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport calendar\nimport time\n\ndef timestamper(logger, log_method, event_dict):\n    event_dict[\"timestamp\"] = calendar.timegm(time.gmtime())\n    return event_dict\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread-Local Context in Python with structlog\nDESCRIPTION: This snippet shows how to configure structlog to use thread-local context by passing the wrapped dictionary class to the configure function.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/thread-local.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure(context_class=WrappedDictClass)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Processor for Timestamp Addition\nDESCRIPTION: Shows how to create a custom processor function that adds a timestamp to each log entry. Demonstrates the processor pipeline concept where each function receives and returns a dictionary.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/why.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef timestamper(logger, log_method, event_dict):\n    \"\"\"Add a timestamp to each log entry.\"\"\"\n    event_dict[\"timestamp\"] = time.time()\n    return event_dict\n```\n\n----------------------------------------\n\nTITLE: Using tmp_bind Context Manager with structlog Thread-Local Loggers\nDESCRIPTION: This snippet demonstrates how to temporarily bind values to a logger using the tmp_bind context manager, which saves and restores the logger state before and after the context block.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/thread-local.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> log.bind(x=42)  # doctest: +ELLIPSIS\n<BoundLoggerFilteringAtNotset(context=<WrappedDict-...({'x': 42})>, ...)>\n>>> log.msg(\"event!\")\nx=42 event='event!'\n>>> with tmp_bind(log, x=23, y=\"foo\") as tmp_log:\n...     tmp_log.msg(\"another event!\")\nx=23 y='foo' event='another event!'\n>>> log.msg(\"one last event!\")\nx=42 event='one last event!'\n```\n\n----------------------------------------\n\nTITLE: Binding Celery Task Metadata to Structlog Context\nDESCRIPTION: Demonstrates how to automatically bind Celery task metadata to Structlog context variables using signals.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/frameworks.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import signals\n\n@signals.task_prerun.connect\ndef on_task_prerun(sender, task_id, task, args, kwargs, **_):\n    structlog.contextvars.bind_contextvars(task_id=task_id, task_name=task.name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Caching in structlog\nDESCRIPTION: This code shows how to enable caching of loggers on first use, which improves performance but has limitations with later configurations and pickling.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/performance.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure(cache_logger_on_first_use=True)\n```\n\n----------------------------------------\n\nTITLE: Using CapturingLogger for Testing in Python\nDESCRIPTION: Demonstrates how to use the CapturingLogger class from structlog.testing to capture log calls for testing. The example shows creating a logger, making log calls, and examining the captured calls.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/api.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pprint import pprint\n>>> cl = structlog.testing.CapturingLogger()\n>>> cl.info(\"hello\")\n>>> cl.info(\"hello\", when=\"again\")\n>>> pprint(cl.calls)\n[CapturedCall(method_name='info', args=('hello',), kwargs={}),\n CapturedCall(method_name='info', args=('hello',), kwargs={'when': 'again'})]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Log Entry from Optimized structlog Configuration\nDESCRIPTION: This snippet shows an example of a JSON-formatted log entry produced by the optimized structlog configuration, including event, level, and timestamp fields.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/performance.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"event\":\"hello\",\"level\":\"info\",\"timestamp\":\"2023-11-02T08:03:38.298565Z\"}\n```\n\n----------------------------------------\n\nTITLE: Using contextvars.Token with structlog\nDESCRIPTION: Example of using the contextvars.Token objects returned by bind_contextvars to temporarily override and then restore context variables to their original values, similar to how contextvars.ContextVar.reset works.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/contextvars.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef foo():\n    bind_contextvars(a=1)\n    _helper()\n    log.info(\"a is restored!\")  # a=1\n\ndef _helper():\n    tokens = bind_contextvars(a=2)\n    log.info(\"a is overridden\")  # a=2\n    reset_contextvars(**tokens)\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop-All Processor in Python for Structlog\nDESCRIPTION: Defines a processor function that drops all log entries by raising a DropEvent exception.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/processors.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom structlog import DropEvent\n\ndef dropper(logger, method_name, event_dict):\n    raise DropEvent\n```\n\n----------------------------------------\n\nTITLE: Replacing Only the Last Processor in structlog Configuration\nDESCRIPTION: Demonstrates how to update structlog's configuration by replacing only the last processor in the chain, which is a common pattern when customizing the ConsoleRenderer.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/console-output.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstructlog.configure(processors=structlog.get_config()[\"processors\"][:-1]+[cr])\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Log Entry Dropping in Python for Structlog\nDESCRIPTION: Defines a ConditionalDropper class that drops log entries based on a specific peer value, demonstrating more complex filtering logic.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/processors.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ConditionalDropper:\n    def __init__(self, peer_to_ignore):\n        self._peer_to_ignore = peer_to_ignore\n\n    def __call__(self, logger, method_name, event_dict):\n        \"\"\"\n        >>> cd = ConditionalDropper(\"127.0.0.1\")\n        >>> cd(None, \"\", {\"event\": \"foo\", \"peer\": \"10.0.0.1\"})\n        {'peer': '10.0.0.1', 'event': 'foo'}\n        >>> cd(None, \"\", {\"event\": \"foo\", \"peer\": \"127.0.0.1\"})\n        Traceback (most recent call last):\n        ...\n        DropEvent\n        \"\"\"\n        if event_dict.get(\"peer\") == self._peer_to_ignore:\n            raise DropEvent\n\n        return event_dict\n```\n\n----------------------------------------\n\nTITLE: Configuring Structlog with EventAdapter\nDESCRIPTION: Shows how to configure structlog to use the EventAdapter processor with a KeyValueRenderer for Twisted integration.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/twisted.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconfigure(processors=[EventAdapter(KeyValueRenderer())])\n```\n\n----------------------------------------\n\nTITLE: Checking structlog Configuration Status\nDESCRIPTION: Demonstrates how to check if structlog is configured and how to set up a basic logger factory configuration.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> structlog.is_configured()\nFalse\n>>> structlog.configure(logger_factory=structlog.stdlib.LoggerFactory())\n>>> structlog.is_configured()\nTrue\n>>> cfg = structlog.get_config()\n>>> cfg[\"logger_factory\"]\n<class 'structlog.stdlib.LoggerFactory'>\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with structlog\nDESCRIPTION: Shows that structlog still supports traditional string interpolation using positional arguments, maintaining compatibility with string-based logging approaches.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/why.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> log.info(\"Hello, %s!\", \"world\")\n2022-10-10 07:19:25 [info     ] Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Configuring structlog ProcessorFormatter Example\nDESCRIPTION: Code demonstrating usage of ProcessorFormatter with standard library logging, showing how to pass foreign log record args to the event dictionary.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstructlog.stdlib.ProcessorFormatter(pass_foreign_args=True)\n```\n\n----------------------------------------\n\nTITLE: Installing structlog via pip\nDESCRIPTION: Command to install structlog package using pip. Additional instructions for installing Rich or better-exceptions for pretty exceptions, and Colorama for Windows users.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install structlog\n```\n\n----------------------------------------\n\nTITLE: Configuring ConsoleRenderer Colors\nDESCRIPTION: Example showing how to configure colors and styles for the ConsoleRenderer in structlog.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstructlog.dev.ConsoleRenderer(force_colors=True, level_styles=custom_styles)\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents Structure\nDESCRIPTION: Sphinx toctree directives defining the documentation structure and organization, broken into sections for basics, development features, integrations, and references.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:maxdepth: 2\n:caption: Basics\n\ngetting-started\nbound-loggers\nconfiguration\nprocessors\ncontextvars\nexceptions\n```\n\n----------------------------------------\n\nTITLE: Using ProcessorFormatter with Logging\nDESCRIPTION: Example showing ProcessorFormatter configuration with keep_exc_info and keep_stack_info parameters.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstructlog.stdlib.ProcessorFormatter(keep_exc_info=False, keep_stack_info=False)\n```\n\n----------------------------------------\n\nTITLE: Generating Sponsor Links with Python\nDESCRIPTION: Python code using tomllib to read sponsor information from pyproject.toml and generate HTML sponsor links. This is used in documentation build process.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This is mainly called from RTD's pre_build job!\n\nimport pathlib, tomllib\n\nfor sponsor in tomllib.loads(pathlib.Path(\"pyproject.toml\").read_text())[\"tool\"][\"sponcon\"][\"sponsors\"]:\n      print(f'<a href=\"{sponsor[\"url\"]}\"><img title=\"{sponsor[\"title\"]}\" src=\"_static/sponsors/{sponsor[\"img\"]}\" width=\"190\" /></a>')\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging Output\nDESCRIPTION: Configuration for standard library logging to output to stdout in a 12 Factor App compatible way.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    stream=sys.stdout,\n    level=logging.INFO,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging with Python's Standard Library\nDESCRIPTION: Sets up basic logging configuration to direct log messages with INFO level and above to standard output with minimal formatting.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/standard-library.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(\n    format=\"%(message)s\",\n    stream=sys.stdout,\n    level=logging.INFO,\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting the No-Operation Debug Method After Filtering\nDESCRIPTION: Demonstrates how to inspect the debug method after configuring level filtering, showing that it becomes a no-operation function returning None when filtered out.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/bound-loggers.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import inspect\n>>> print(inspect.getsource(logger.debug))\ndef _nop(self: Any, event: str, **kw: Any) -> Any:\n    return None\n```\n\n----------------------------------------\n\nTITLE: Running Twisted with JSON Logging\nDESCRIPTION: Command-line example of running a Twisted web server with plainJSONStdOutLogger for clean JSON logging to stdout.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/twisted.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ twistd -n --logger structlog.twisted.plainJSONStdOutLogger web\n```\n\n----------------------------------------\n\nTITLE: Processor Chain Configuration\nDESCRIPTION: Example showing the processor chain configuration with format_exc_info processor removed.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstructlog.configure(wrapper_class=structlog.BoundLogger)\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtering Logger in Structlog\nDESCRIPTION: Example of configuring a filtering bound logger with a minimum logging level of INFO.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfigure(wrapper_class=make_filtering_bound_logger(logging.INFO))\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes in Version 25.2.0\nDESCRIPTION: Lists the changes, additions, and fixes made in version 25.2.0 of structlog, including new features, behavioral changes, and bug fixes.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [25.2.0](https://github.com/hynek/structlog/compare/25.1.0...25.2.0) - 2025-03-11\n\n### Added\n\n- `structlog.tracebacks.Stack` now includes an `exc_notes` field reflecting the notes attached to the exception.\n  [#684](https://github.com/hynek/structlog/pull/684)\n\n\n### Changed\n\n- `structlog.stdlib.BoundLogger`'s binding-related methods now also return `Self`.\n  [#694](https://github.com/hynek/structlog/pull/694)\n\n- `structlog.processors.TimeStamper` now produces internally timezone-aware `datetime` objects.\n  Default output hasn't changed, but you can now use `%z` in your *fmt* string.\n  [#709](https://github.com/hynek/structlog/pull/709)\n\n\n### Fixed\n\n-  Expose `structlog.dev.RichTracebackFormatter` for imports.\n   [#699](https://github.com/hynek/structlog/pull/699)\n-  Expose `structlog.processors.LogfmtRenderer` for imports.\n   [#701](https://github.com/hynek/structlog/pull/701)\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Wrapped Dictionary Classes in Python with structlog\nDESCRIPTION: This snippet demonstrates that each call to wrap_dict() returns a completely new wrapped class with a unique name, making them distinct from each other.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/thread-local.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from structlog.threadlocal import wrap_dict\n>>> WrappedDictClass = wrap_dict(dict)\n>>> AnotherWrappedDictClass = wrap_dict(dict)\n>>> WrappedDictClass() != AnotherWrappedDictClass()\nTrue\n>>> WrappedDictClass.__name__  # doctest: +SKIP\nWrappedDict-41e8382d-bee5-430e-ad7d-133c844695cc\n>>> AnotherWrappedDictClass.__name__   # doctest: +SKIP\nWrappedDict-e0fc330e-e5eb-42ee-bcec-ffd7bd09ad09\n```\n\n----------------------------------------\n\nTITLE: Building Context in structlog\nDESCRIPTION: Example of using bind() to build context in a hypothetical web application view, demonstrating how to avoid repetition in logging calls.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef view(request):\n    log = log.bind(\n        user_agent=request.get(\"HTTP_USER_AGENT\", \"UNKNOWN\"),\n        peer_ip=request.client_addr,\n    )\n\n    if foo := request.get(\"foo\"):\n        log = log.bind(foo=foo)\n\n    if something:\n        log.info(\"something\")\n        return \"something\"\n    elif something_else:\n        log.info(\"something_else\")\n        return \"something_else\"\n    else:\n        log.info(\"else\")\n        return \"else\"\n```\n\n----------------------------------------\n\nTITLE: Including Tutorials Section from README in Markdown\nDESCRIPTION: This code snippet uses a Markdown include directive to embed the tutorials section from the project's README file into the current document. It specifies the start and end points for the inclusion.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../README.md\n:start-after: <!-- begin tutorials -->\n:end-before: <!-- end tutorials -->\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Format and Versioning Scheme\nDESCRIPTION: Explains the changelog format and versioning scheme used for the structlog project. It specifies using Keep a Changelog format and Calendar Versioning, with details on how version numbers are assigned.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe format is based on [Keep a Changelog](https://keepachangelog.com/) and this project adheres to [Calendar Versioning](https://calver.org/).\n\nThe **first number** of the version is the year.\nThe **second number** is incremented with each release, starting at 1 for each year.\nThe **third number** is for emergencies when we need to start branches for older releases.\n```\n\n----------------------------------------\n\nTITLE: Linking to Unreleased Changes on GitHub\nDESCRIPTION: Provides a link to compare the latest released version with the current development state on GitHub, showing unreleased changes.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [Unreleased](https://github.com/hynek/structlog/compare/25.2.0...HEAD)\n```\n\n----------------------------------------\n\nTITLE: Tomllib Sponsor Image Generation in Python\nDESCRIPTION: A Python code snippet that reads sponsor information from a pyproject.toml file and generates HTML image tags for each sponsor. The code uses tomllib to parse TOML data and outputs formatted HTML with sponsor logos, titles, and URLs.\nSOURCE: https://github.com/hynek/structlog/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pathlib, tomllib\n\nfor sponsor in tomllib.loads(pathlib.Path(\"pyproject.toml\").read_text())[\"tool\"][\"sponcon\"][\"sponsors\"]:\n      print(f'<a href=\"{sponsor[\"url\"]}\"><img title=\"{sponsor[\"title\"]}\" src=\"docs/_static/sponsors/{sponsor[\"img\"]}\" width=\"190\" /></a>')\n```\n\n----------------------------------------\n\nTITLE: Using reStructuredText Directives in Markdown\nDESCRIPTION: Shows how to use reStructuredText-style directives like 'seealso' and 'glossary' within Markdown documentation for enhanced formatting and cross-referencing.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/glossary.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::{glossary}\n\nEvent Dictionary\n    Often abbreviated as *event dict*.\n    It's a dictionary that contains all the information that is logged, with the `event` key having the special role of being the name of the event.\n\n    It's the result of the values bound to the {term}`bound logger`'s context and the key-value pairs passed to the logging method.\n    It is then passed through the {term}`processor` chain that can add, modify, and even remove key-value pairs.\n\n:::\n\n:::{seealso}\n{doc}`bound-loggers`\n:::\n```\n\n----------------------------------------\n\nTITLE: Referencing structlog Classes in Markdown\nDESCRIPTION: Demonstrates how to reference structlog classes and functions in Markdown documentation using reStructuredText-style directives.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/glossary.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{class}`structlog.typing.BindableLogger`\n{func}`structlog.get_logger`\n{class}`structlog.BoundLogger`\n{class}`structlog.stdlib.BoundLogger`\n{func}`structlog.make_filtering_bound_logger`\n{class}`structlog.PrintLogger`\n{class}`logging.Logger`\n```\n\n----------------------------------------\n\nTITLE: Including Credits Section from README.md Using Sphinx\nDESCRIPTION: Sphinx directive to include the Credits section from the project's README.md file using the myst_parser extension.\nSOURCE: https://github.com/hynek/structlog/blob/main/docs/license.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{include} ../README.md\n:parser: myst_parser.sphinx_\n:start-after: \"## Credits\"\n:end-before: <!-- begin-meta -->\n```\n\n----------------------------------------\n\nTITLE: Git Format Placeholders Configuration\nDESCRIPTION: Defines Git format placeholders that will be replaced with actual values during Git export operations. Includes commit hash, commit date in ISO format, and a description that matches version tags.\nSOURCE: https://github.com/hynek/structlog/blob/main/.git_archival.txt#2025-04-17_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\n```\n\n----------------------------------------\n\nTITLE: Logging with String Interpolation in Python\nDESCRIPTION: Example showing string interpolation usage with FilteringBoundLogger, demonstrating how to format log messages with variables.\nSOURCE: https://github.com/hynek/structlog/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> log.info(\"Hello %s! The answer is %d.\", \"World\", 42, x=1)\n2022-10-07 10:04.31 [info     ] Hello World! The answer is 42. x=1\n```"
  }
]