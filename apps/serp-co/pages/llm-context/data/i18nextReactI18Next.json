[
  {
    "owner": "i18next",
    "repo": "react-i18next",
    "content": "TITLE: Installing react-i18next v10+ Using npm\nDESCRIPTION: Command for installing the latest version of react-i18next (version 10 or above) which uses React hooks. This version requires React 16.8.0+ or React Native 0.59.0+.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ >=v10.0.0\nnpm i react-i18next\n```\n\n----------------------------------------\n\nTITLE: React Component Without Internationalization\nDESCRIPTION: Example of React JSX code before implementing internationalization with react-i18next. Shows basic content display with dynamic values.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n...\n<div>Just simple content</div>\n<div>\n  Hello <strong title=\"this is your name\">{name}</strong>, you have {count} unread message(s). <Link to=\"/msgs\">Go to messages</Link>.\n</div>\n...\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Enzyme in JavaScript\nDESCRIPTION: The ./src/MyComponent.test.js file demonstrates how to use Enzyme for testing React components in the project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/test-jest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ./src/MyComponent.test.js\n// Example of using Enzyme to test a React component\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Button Component - React - JavaScript\nDESCRIPTION: Illustrates the creation of a simple, reusable Button component using React and ES6 class syntax. The snippet highlights default export usage and requires the 'react' package. The Button component can be imported by other files using default import syntax. Key points include using 'export default' and standard React component structure.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Jest Tests in React\nDESCRIPTION: Example of a basic Jest test for a sum function in React. Demonstrates how to use Jest's expect() function for making assertions and the general structure of a test case.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a React Component (JavaScript)\nDESCRIPTION: Illustrates the definition of a simple React class component named `Button`. It imports `React` and `Component` and uses `export default` to make the `Button` component available for import in other files.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n----------------------------------------\n\nTITLE: React Component With react-i18next Internationalization\nDESCRIPTION: Example of the same React component after implementing internationalization using react-i18next's t function and Trans component. Shows how to handle translation keys, variables, and nested components.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n...\n<div>{t('simpleContent')}</div>\n<Trans i18nKey=\"userMessagesUnread\" count={count}>\n  Hello <strong title={t('nameTitle')}>{{name}}</strong>, you have {{count}} unread message. <Link to=\"/msgs\">Go to messages</Link>.\n</Trans>\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme for React Component Testing\nDESCRIPTION: Commands to install Enzyme and its dependencies for more advanced React component testing. Enzyme allows for shallow rendering and full mounting of components.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save enzyme react-test-renderer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add enzyme react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure for React Application\nDESCRIPTION: Shows the standard folder structure for a React application created with Create React App, highlighting key files and directories required for the build process. Files inside src/ are processed by Webpack while public/ contains static assets.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next with React Options - React-i18next (JavaScript)\nDESCRIPTION: Shows how to initialize i18next with configuration options specific to react-i18next integration. The dependency is the 'i18next' library and any necessary i18n plugins. Key parameters inside the 'react' property configure translation update bindings, namespace mode, and reference usage. The input is a configuration object passed to i18next.init; the output is the initialized i18next instance. Limitations: options should match the documented API, and 'translateFuncName' cannot be overridden this way.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ni18next.init({\n  // ... other options\n  react: {\n    wait: false,\n    withRef: false,\n    bindI18n: 'languageChanged loaded',\n    bindStore: 'added removed',\n    nsMode: 'default'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Test in JavaScript\nDESCRIPTION: The ./src/App.test.js file contains a basic test from create-react-app, serving as an example of how to test React components.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/test-jest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ./src/App.test.js\n// Basic test example from create-react-app\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Debugging React Apps\nDESCRIPTION: This JSON configuration sets up Visual Studio Code for debugging a React application. It specifies Chrome as the debugger, sets the localhost URL, and configures source map overrides for accurate debugging.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Chrome\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceRoot}/src\",\n      \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Smoke Test with ReactDOM in JavaScript\nDESCRIPTION: A simple smoke test that verifies a React component renders without crashing by mounting it to a DOM element. This is the most basic test you'll find in src/App.test.js and provides value with minimal effort.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Translate HOC Defaults - React-i18next (JavaScript)\nDESCRIPTION: Demonstrates how to globally set default options for the react-i18next translate higher-order component. Requires the 'react-i18next' module as a dependency. The 'setDefaults' method configures parameters such as wait mode, reference passing, event bindings, namespace behavior, and translate function naming. Input is an options object; no direct output is returned. Note: These values will apply for all subsequent uses of the translate HOC.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport translate from 'react-i18next';\n\ntranslate.setDefaults({\n  wait: false,\n  withRef: false,\n  bindI18n: 'languageChanged loaded',\n  bindStore: 'added removed',\n  nsMode: 'default',\n  translateFuncName: 't'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook CLI Globally for React Component Development\nDESCRIPTION: Command to install the Storybook command line interface globally using npm. This tool allows developers to develop UI components in isolation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Testing Component Output with Enzyme and Jest Matchers\nDESCRIPTION: An example test that asserts specific component output using Enzyme's shallow rendering and Jest's built-in expectation matchers. This test verifies that the App component renders a welcome message.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting i18n Instance for translate HOC - React-i18next (JavaScript)\nDESCRIPTION: Demonstrates how to set the i18n instance for the react-i18next translate higher-order component (HOC). Requires both the 'react-i18next' and a configured 'i18n' instance as dependencies. The 'setI18n' method is called on the imported translate object, allowing all components using translate HOC to share the configured i18n instance; the input is an i18n configuration object, and no output is returned.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport translate from 'react-i18next';\nimport i18n from './i18n';\n\ntranslate.setI18n(i18n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in React-i18next Project\nDESCRIPTION: This snippet shows how to setup an ESLint configuration file (.eslintrc) that extends the default react-app rules to enable editor integration for linting in the React-i18next project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"extends\": \"react-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for Automatic Code Formatting in React\nDESCRIPTION: This snippet demonstrates how to configure Prettier for automatic code formatting in a React project. It shows the necessary npm packages to install and the changes required in the package.json file to enable pre-commit formatting.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\"\n  },\n  \"lint-staged\": {\n    \"src/**/*.{js,jsx,json,css}\": [\n      \"prettier --single-quote --write\",\n      \"git add\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in a React Application\nDESCRIPTION: Command to initialize Storybook in an existing React application directory. This sets up the necessary configuration files for developing components in isolation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_64\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Test Example for JavaScript Functions\nDESCRIPTION: A simple Jest test example demonstrating how to test a sum function. Shows the basic structure of a test with the it() function and expectations using the expect() matcher toEqual().\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_45\n\nLANGUAGE: js\nCODE:\n```\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing react-i18next Package with npm\nDESCRIPTION: Command for installing react-i18next package from npm, which is the recommended way to add the library to a React project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# npm package\n$ npm install react-i18next\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugging for React-i18next\nDESCRIPTION: This JSON configuration sets up debugging in Visual Studio Code for the React-i18next application. It defines a Chrome debugger configuration that connects to the local development server and properly maps source files.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Chrome\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceRoot}/src\",\n      \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Moment.js Locales in JavaScript\nDESCRIPTION: Demonstrates how to import multiple Moment.js locales and switch between them using moment.locale(). This allows for dynamic locale switching in applications that need multilingual date formatting.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: Importing ICU Macro Components in react-i18next v7.10.0+\nDESCRIPTION: Shows how to import the `Trans`, `Plural`, and `Select` components from the `react-i18next/icu.macro` babel macro, introduced in v7.10.0. This macro allows for a more natural JSX-like syntax when working with the ICU message format, which could otherwise result in invalid JSX syntax within React components.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trans, Plural, Select } from `react-i18next/icu.macro`\n```\n\n----------------------------------------\n\nTITLE: Specific Output Testing with Enzyme and Jest\nDESCRIPTION: An example of testing specific component output using Enzyme's shallow rendering and Jest's expect assertions.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router with Basename for Relative Paths\nDESCRIPTION: JavaScript code demonstrating how to configure React Router with a basename prop for serving the app from a subdirectory.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in React Project\nDESCRIPTION: This snippet shows how to configure ESLint for a React project by creating an .eslintrc file in the project root. It extends the 'react-app' configuration to ensure consistent linting rules.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"extends\": \"react-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Named Variable with ES6 Modules - JavaScript\nDESCRIPTION: Shows how to export a named variable using ES6 module syntax. This snippet defines a string constant and exports it as a named export. Understanding named vs default exports is important for workable and maintainable module structures. No external dependencies are required.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst moduleA = 'Hello';\n\nexport { moduleA };\n\n```\n\n----------------------------------------\n\nTITLE: Available NPM Scripts Commands\nDESCRIPTION: Lists the core npm commands available for development, testing, and building the application, with descriptions of their functionality.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\nnpm test\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for Automatic Code Formatting in React Projects\nDESCRIPTION: This snippet demonstrates how to set up Prettier for automatic code formatting in a React project. It adds a precommit hook using husky and configures lint-staged to run Prettier on staged files before committing.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\"\n  },\n  \"lint-staged\": {\n    \"src/**/*.{js,jsx,json,css}\": [\n      \"prettier --single-quote --write\",\n      \"git add\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing jest-enzyme in Test Setup File\nDESCRIPTION: Code to import jest-enzyme in the test setup file, making its matchers available in every test.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'jest-enzyme';\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Splitting with Dynamic Import in React (JavaScript)\nDESCRIPTION: Implements code splitting in a React `App` component. It uses the dynamic `import()` syntax within a click handler to load `./moduleA` only when the button is clicked. The loaded module's content is accessed via the resolved promise.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch((err) => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy Version of react-i18next Using npm\nDESCRIPTION: Command for installing the legacy version (v9.0.10) of react-i18next for projects using older React versions or those not ready to migrate to hooks-based API.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ v9.0.10 (legacy)\nnpm i react-i18next@legacy\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Imports in React Component - React - JavaScript\nDESCRIPTION: Presents a React Button component that imports a CSS stylesheet, demonstrating how to use CSS classes within JavaScript/JSX. This setup requires a build system (like Webpack) that supports importing CSS in JS files. The Button renders a div with the '.Button' class, applying imported styles to the rendered HTML. This approach enables modular, component-scoped styling and hot-reloading in development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Project Structure for React Application\nDESCRIPTION: Shows the standard folder structure for a Create React App project, including required files and directories for building the application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\n----------------------------------------\n\nTITLE: Dynamic Code Splitting with React Component - React - JavaScript\nDESCRIPTION: Implements code splitting in a React component using the dynamic import() function. The component defines a click handler that loads 'moduleA' asynchronously and uses it upon resolution. Dependencies are React and a local module. Inputs include user click events, and outputs are handled within the Promise chain (then/catch). This approach optimizes load performance by splitting code into chunks loaded on demand.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch((err) => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Assertion Libraries\nDESCRIPTION: Example of importing third-party assertion libraries like Chai and Sinon for use in Jest tests. This allows for using familiar assertion styles in React component tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Component in JavaScript\nDESCRIPTION: Demonstrates how to import a custom React component and use it within another component. This example imports a Button component into a DangerButton component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Proxy Settings in package.json\nDESCRIPTION: More detailed proxy configuration using an object with specific settings for different paths. This allows for more fine-grained control over proxying behavior including WebSocket support and SSL.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Smoke Test with Enzyme's Shallow Rendering\nDESCRIPTION: A smoke test using Enzyme's shallow rendering method. Unlike ReactDOM.render(), this only renders the component one level deep without rendering child components, making it ideal for isolated unit tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme for Enhanced React Testing\nDESCRIPTION: Commands to install jest-enzyme, which provides additional Jest matchers for testing React components with Enzyme.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-enzyme\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Using jest-enzyme for Simplified Test Assertions\nDESCRIPTION: An example of using jest-enzyme to simplify test assertions with more readable matchers. This snippet shows how to test for the presence of a React element in a component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(wrapper).toContainReact(welcome);\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in JSX Components\nDESCRIPTION: Example showing how to access environment variables in a React component. Demonstrates reading NODE_ENV (built-in) and a custom REACT_APP_SECRET_CODE variable from process.env.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing DangerButton with Button - React - JavaScript\nDESCRIPTION: Demonstrates component composition by creating a DangerButton component that imports and reuses the Button component. Dependencies include React and the locally defined Button module. The DangerButton renders Button with a specific 'color' prop set to 'red' to signify danger, promoting code reuse and clear component hierarchies.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n\n```\n\n----------------------------------------\n\nTITLE: Running tests with npm test\nDESCRIPTION: Command to launch the test runner in interactive watch mode, which automatically runs tests when files are changed.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment with localStorage Mock\nDESCRIPTION: An example of setting up a test environment by mocking the localStorage API. This is useful for testing components that interact with localStorage.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn(),\n};\nglobal.localStorage = localStorageMock;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router with Basename\nDESCRIPTION: JavaScript example demonstrating how to configure React Router v4 with a basename for proper link handling in subdirectory deployments.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom React Component (JavaScript)\nDESCRIPTION: Shows how to import a custom component (`Button` from `./Button.js`) into another component (`DangerButton`). The `DangerButton` then renders the imported `Button` component, passing a `color` prop.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server for React App Deployment\nDESCRIPTION: JavaScript code to set up an Express server for serving a production build of a React app, including static file serving and routing to index.html.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Writing Flexbox CSS for React Components\nDESCRIPTION: Illustrates how to write CSS using flexbox for React components. This CSS will be post-processed by Autoprefixer.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running tests on the React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple-multi-namespaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running development server with npm start\nDESCRIPTION: Command to run the React application in development mode, which opens the app at http://localhost:3000 in your browser with hot reloading enabled.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles into a React Component (JavaScript)\nDESCRIPTION: Shows how to import a CSS file (`./Button.css`) directly into a React component (`Button.js`). Webpack processes this import, making the styles defined in `Button.css` available to the component, typically applied using the `className` prop.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in .env File\nDESCRIPTION: Example of defining permanent environment variables in a .env file at the root of a React project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\n----------------------------------------\n\nTITLE: Modifying Express for Client-Side Routing\nDESCRIPTION: Diff showing how to modify an Express server configuration to handle client-side routing by serving index.html for all paths.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_76\n\nLANGUAGE: diff\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in React JSX Component\nDESCRIPTION: Example of accessing environment variables in a React component's render method, showing both NODE_ENV and custom REACT_APP_SECRET_CODE variables.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Styleguidist Development Server\nDESCRIPTION: Command to start the Styleguidist development server, which allows you to view and develop components in isolation with interactive documentation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\nnpm run styleguide\n```\n\n----------------------------------------\n\nTITLE: Setting CI Environment Variable for React Testing\nDESCRIPTION: Commands to set the CI environment variable for running tests in a continuous integration environment or to force a single test run.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Command to start the React development server. This script runs the app in development mode, allowing for live reloading and displaying lint errors in the console.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code Based on NODE_ENV\nDESCRIPTION: Shows how to conditionally execute code based on the NODE_ENV environment variable. This example disables analytics in non-production environments.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Proxy in package.json\nDESCRIPTION: Specific configuration for proxying WebSocket connections. This setup enables proxying WebSocket requests through the development server to a compatible WebSocket backend.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS in React Component\nDESCRIPTION: Demonstrates how to import and use CSS styles in a React component using Webpack's CSS handling capabilities.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the React Application with i18next and Locize\nDESCRIPTION: Command to start the React application that has been set up with i18next and Locize integration. This allows developers to run the application locally for testing and development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/locize/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm start\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CI Flag in Linux/macOS Bash\nDESCRIPTION: Commands to run tests and build with the CI environment variable in Linux or macOS Bash. Setting CI=true forces Jest to run tests once instead of in watch mode and causes the build to fail on linter warnings.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Command to build the app for production. This creates an optimized build in the 'build' folder, ready for deployment.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Exporting React Component in JavaScript\nDESCRIPTION: Illustrates how to create and export a React component using ES6 module syntax. This example defines a Button component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don't forget to use export default!\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy in package.json\nDESCRIPTION: Example configuration for setting up an API proxy in a React application by adding a proxy field to package.json. This allows requests to be redirected to a specified backend server during development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\",\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme Testing Library with npm\nDESCRIPTION: Command to install Enzyme and react-test-renderer using npm. Enzyme is a JavaScript testing utility for React that makes it easier to test React components' output.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save enzyme react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Starts the React application in development mode, opening it in the browser and enabling live reloading.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple-multi-namespaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React application for production, creating optimized and minified files in the 'build' folder.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple-multi-namespaces/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Command to launch the test runner in interactive watch mode. This is used for running the project's test suite and monitoring for changes.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Splitting with Dynamic Import in React\nDESCRIPTION: Demonstrates how to use dynamic import for code splitting in a React component. This example loads a module on button click.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch((err) => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Multiple Proxy Paths Configuration\nDESCRIPTION: Extended proxy configuration showing different path matching patterns and their corresponding targets\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n    },\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n    },\n    \"/bar/*.html\": {\n      \"target\": \"<url_3>\"\n    },\n    \"/baz/**/*.html\": {\n      \"target\": \"<url_4>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Smoke Test for React Component Using ReactDOM\nDESCRIPTION: A simple smoke test that renders a React component and checks if it renders without crashing. This test uses ReactDOM.render() to mount the component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with Yarn\nDESCRIPTION: Starts the React application in development mode, enabling live reloading and displaying lint errors in the console.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-icu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Building and Running Production Server\nDESCRIPTION: Commands to build the project for production and start the production server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/razzle-ssr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm run build\n# npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in React Projects\nDESCRIPTION: This snippet shows how to configure ESLint for a React project by creating an .eslintrc file in the project root. It extends the 'react-app' configuration to provide a minimal set of linting rules.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"extends\": \"react-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in React\nDESCRIPTION: Demonstrates how to properly access global variables from the window object to avoid linter warnings.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Basic API Proxy Configuration in package.json\nDESCRIPTION: Simple proxy configuration to redirect API requests to a different port during development\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\"\n```\n\n----------------------------------------\n\nTITLE: Basic Smoke Test for React Component using ReactDOM\nDESCRIPTION: A simple smoke test that renders a React component using ReactDOM and checks if it renders without crashing. This test provides a good starting point for component testing.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Express Server for Client-Side Routing\nDESCRIPTION: Diff showing how to modify an Express server configuration to handle client-side routing by serving index.html for all unknown paths.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\n----------------------------------------\n\nTITLE: Deploying React App with Static Server\nDESCRIPTION: Commands to install and run 'serve' for hosting a production build of a React app on a static server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g serve\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage in React Components\nDESCRIPTION: Demonstrates how to use environment variables within a React component's render method.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS in React Application\nDESCRIPTION: Code to import Bootstrap CSS and theme CSS files in a React application's index.js file. The comment indicates proper import ordering to ensure component styles take precedence.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Importing React Bootstrap Components\nDESCRIPTION: Demonstrates how to import specific React Bootstrap components for use in a React application component file.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\n----------------------------------------\n\nTITLE: Shallow Rendering Smoke Test with Enzyme\nDESCRIPTION: A smoke test using Enzyme's shallow rendering API. This test only renders the top-level component without rendering child components.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Using basename with React Router for Relative Paths\nDESCRIPTION: JavaScript example demonstrating how to use the basename prop with React Router's BrowserRouter component for apps deployed at a subdirectory.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Using Serve for Static Deployment\nDESCRIPTION: Commands to install and use the 'serve' package for hosting the static build files on port 5000.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g serve\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Conditional Code Based on Environment\nDESCRIPTION: Shows how to conditionally execute code based on the NODE_ENV environment variable.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing public folder assets in JavaScript\nDESCRIPTION: JavaScript example showing how to access assets from the public folder in React components using process.env.PUBLIC_URL. This approach should be used sparingly as it lacks the benefits of Webpack's asset processing.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in \"Adding Images and Fonts\" above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CSS preprocessing with React scripts\nDESCRIPTION: Diff showing how to modify package.json to run CSS preprocessing tasks alongside React scripts. This setup allows for automatically building CSS when running the development server or creating a production build.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged in package.json\nDESCRIPTION: This diff shows how to add the lint-staged configuration to package.json that defines which files to format with Prettier before committing in the React-i18next project. It targets JavaScript, JSX, JSON, and CSS files in the src directory.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n  \"dependencies\": {\n    // ...\n  },\n+ \"lint-staged\": {\n+   \"src/**/*.{js,jsx,json,css}\": [\n+     \"prettier --single-quote --write\",\n+     \"git add\"\n+   ]\n+ },\n  \"scripts\": {\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Moment.js Locales in React\nDESCRIPTION: This snippet demonstrates how to explicitly import Moment.js locales to keep bundle size smaller. By default, Moment.js only includes English, so other locales must be imported individually as needed.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Deploying React App to Firebase Hosting\nDESCRIPTION: Displays the output of the 'firebase deploy' command after creating a production build. Shows the deployment process and provides the hosting URL for accessing the deployed application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_80\n\nLANGUAGE: sh\nCODE:\n```\n=== Deploying to 'example-app-fd690'...\n\ni  deploying database, hosting\n✔  database: rules ready to deploy.\ni  hosting: preparing build directory for upload...\nUploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n✔  hosting: 8 files uploaded successfully\ni  starting release process (may take several minutes)...\n\n✔  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/example-app-fd690/overview\nHosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Proxy Endpoints with Path Matching\nDESCRIPTION: Advanced proxy configuration that supports multiple endpoints with different targets and options. Demonstrates path matching patterns using wildcards for specific routes.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/*.html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/**/*.html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Variable using Named Export (JavaScript)\nDESCRIPTION: Defines a constant string `moduleA` and exports it using a named export. This module is intended to be dynamically imported in the code splitting example.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Include Paths in package.json (JSON)\nDESCRIPTION: Modifies the `build-css` and `watch-css` scripts in `package.json` to include the `--include-path` option. This allows importing Sass files from `./src` and `./node_modules` without using relative paths.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\n----------------------------------------\n\nTITLE: Integrating Sass Scripts into Start/Build Commands (Diff)\nDESCRIPTION: Updates the `scripts` section in `package.json` to integrate Sass compilation with the main development and build processes using `npm-run-all`. The `start` script now runs `watch-css` and `start-js` (renamed from `react-scripts start`) in parallel (`-p`). The `build` script runs `build-css` sequentially before `react-scripts build`.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Importing Sass Files (SCSS)\nDESCRIPTION: Demonstrates how to import Sass files using the `@import` directive. The first example shows importing a local partial from a `styles` subdirectory within `src`, and the second shows importing CSS directly from an installed node module (`nprogress`), enabled by the `--include-path` configuration.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy Scripts for GitHub Pages in package.json\nDESCRIPTION: Shows how to modify the scripts section in package.json to add deployment commands for GitHub Pages using the gh-pages package. These scripts automate the build and deployment process.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_82\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Running React Native iOS App\nDESCRIPTION: Commands to start the React Native application on iOS platform using either npm or yarn package managers.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeProject/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Exporting Module in JavaScript for Code Splitting\nDESCRIPTION: Shows how to export a module that can be dynamically imported for code splitting in React applications.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Assertion Libraries for React Testing\nDESCRIPTION: Example of importing third-party assertion libraries like Sinon and Chai for use in React component tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Adding Sass Build/Watch Scripts to package.json (Diff)\nDESCRIPTION: Adds `build-css` and `watch-css` scripts to the `scripts` section of `package.json`. `build-css` compiles Sass files from `src/` to `src/`, and `watch-css` does the same but also watches for changes recursively.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: CSS Example Before Autoprefixer Processing (CSS)\nDESCRIPTION: Provides an example of CSS code using modern properties like flexbox (`display: flex`, `flex-direction`, `align-items`) before it is processed by Autoprefixer.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring homepage in package.json for GitHub Pages\nDESCRIPTION: JavaScript configuration showing how to add the homepage field to package.json, which is essential for proper path resolution when deploying to GitHub Pages.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_83\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Server for React Native\nDESCRIPTION: Commands to start the Metro JavaScript bundler for a React Native project using either npm or Yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeLocizeProject/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Server Data Injection\nDESCRIPTION: HTML template showing how to inject data from the server as a global JavaScript variable. The placeholder __SERVER_DATA__ can be replaced with actual JSON data on the server before sending the response.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_45\n\nLANGUAGE: js\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Assertion Libraries\nDESCRIPTION: Example of importing third-party assertion libraries like Chai and Sinon for use in tests. While Jest's built-in matchers are recommended, this allows for using other libraries if preferred.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Setting up jest-enzyme in setupTests.js\nDESCRIPTION: Code to import jest-enzyme in the setupTests.js file, making its matchers available in all test files. This setup file is automatically executed before running tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'jest-enzyme';\n```\n\n----------------------------------------\n\nTITLE: Auto-prefixed CSS Output for React Components\nDESCRIPTION: Shows the result of Autoprefixer processing on CSS, adding vendor prefixes for better cross-browser compatibility.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage for Flexible Deployment Paths\nDESCRIPTION: JSON snippet showing how to set the homepage in package.json to allow serving the app from different paths without rebuilding.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n  \"homepage\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on Android\nDESCRIPTION: Commands to start a React Native application on Android using either npm or Yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeLocizeProject/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Importing and using images in React components\nDESCRIPTION: Example of importing and using an image file directly in a React component. Webpack handles the image inclusion in the bundle and provides the correct path.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Importing Images in JavaScript (JavaScript)\nDESCRIPTION: Demonstrates importing an image file (`logo.png`) directly into a JavaScript module using Webpack's file loader. The import statement makes Webpack include the image in the build process. The imported variable (`logo`) holds the final URL path to the image, which can be used in React components, for example, as the `src` attribute of an `<img>` tag.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist for Component Documentation\nDESCRIPTION: These commands install React Styleguidist using npm or yarn, which is used for creating interactive component documentation and style guides.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_58\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for React Components\nDESCRIPTION: Example of setting up a test environment by mocking localStorage in a setupTests.js file, which is automatically executed before running tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn(),\n};\nglobal.localStorage = localStorageMock;\n```\n\n----------------------------------------\n\nTITLE: Configuring homepage in package.json for GitHub Pages\nDESCRIPTION: Example of adding the homepage field to package.json for GitHub Pages deployment. This specifies the base URL where the application will be served from.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_69\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm (Shell)\nDESCRIPTION: Demonstrates how to install a new dependency, like `react-router`, into a Create React App project using the Node Package Manager (npm). The `--save` flag ensures the dependency is added to the project's `package.json`.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-router\n```\n\n----------------------------------------\n\nTITLE: Building for production with npm run build\nDESCRIPTION: Command to build the app for production, creating optimized bundles in the build folder with minified code and hashed filenames.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using imported images in CSS\nDESCRIPTION: Example of referencing an image file in CSS. Webpack processes the relative path and replaces it with the correct path from the compiled bundle.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts to package.json\nDESCRIPTION: Diff showing how to add Styleguidist scripts to your package.json file. These scripts enable running the style guide server and building the static style guide.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Jest Test Example for JavaScript Functions\nDESCRIPTION: A basic Jest test example that demonstrates how to test a sum function. Shows the use of it() blocks, imports, and Jest's expect() assertions with the toEqual matcher.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_46\n\nLANGUAGE: js\nCODE:\n```\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - JavaScript/Node.js - Shell\nDESCRIPTION: Demonstrates installing the 'react-router' library into a React project using npm. This snippet requires Node.js and npm to be available in the environment. 'react-router' is added to the project's package.json dependencies, making it available for import in application code.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-router\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm in React Project\nDESCRIPTION: Demonstrates how to install additional dependencies in a React project using npm. The example shows installing react-router.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-router\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Component Output with Jest and Enzyme\nDESCRIPTION: An example of testing specific component output using Jest matchers and Enzyme's shallow rendering. This test checks if the component renders a specific welcome message.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Old Interpolation Syntax in react-i18next Pre-v8.0.0\nDESCRIPTION: Shows the previous interpolation syntax used with the `Trans` component in react-i18next before version 8.0.0. This format required wrapping interpolated values like `{{name}}` within nested pseudo-tags (e.g., `<0>...</0>`). While still functional in later versions for backward compatibility, the simpler syntax introduced in v8.0.0 is preferred.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'Hello <1><0>{{name}}</0></1>, you have <3>{{count}}</3> message. Open <5>hear</5>.'\n```\n\n----------------------------------------\n\nTITLE: Running Styleguidist Server\nDESCRIPTION: This command starts the Styleguidist server, which provides an interactive environment for viewing and developing component documentation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\nnpm run styleguide\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables from Window Object in JavaScript\nDESCRIPTION: Shows how to properly access global variables from the window object to avoid linter warnings. This approach makes it explicit that you are intentionally using a global variable rather than having a typo.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using yarn (Shell)\nDESCRIPTION: Shows the alternative command using Yarn to add a new dependency, such as `react-router`, to the project. Yarn automatically saves the dependency to `package.json`.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-router\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with npm\nDESCRIPTION: Command to install node-sass-chokidar, a recommended Sass preprocessor for React applications, using npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Environment Setup in setupTests.js\nDESCRIPTION: Example of a setupTests.js file that mocks the localStorage browser API. This file is automatically executed before running tests and allows for global setup and mocking of browser APIs.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn(),\n};\nglobal.localStorage = localStorageMock;\n```\n\n----------------------------------------\n\nTITLE: CSS Flexbox Container Example - CSS\nDESCRIPTION: Displays a basic CSS class for an element using Flexbox. Defines flex properties such as 'display: flex', 'flex-direction: row', and 'align-items: center'. This approach improves layout control in web applications. No special dependencies are needed but browser support for flexbox is required.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Configuration using Firebase CLI\nDESCRIPTION: Terminal output showing the Firebase initialization process for a React application. It demonstrates setting up Firebase hosting, configuring the public directory as 'build', and setting up single-page app behavior.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? database.rules.json\n✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\nFuture modifications to database.rules.json will update Database Rules when you run\nfirebase deploy.\n\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? build\n? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n✔  Wrote build/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Accessing public folder assets in React components\nDESCRIPTION: Example of how to access assets from the public folder in JavaScript code using process.env.PUBLIC_URL. This approach should be used sparingly as it bypasses Webpack's asset optimization.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in \"Adding Images and Fonts\" above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar via npm (Shell)\nDESCRIPTION: Installs the `node-sass-chokidar` package as a development dependency using npm. This package provides a command-line interface for Sass compilation and is recommended over `node-sass` due to better handling of file watching and performance in certain environments.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all via npm (Shell)\nDESCRIPTION: Installs the `npm-run-all` package as a development dependency using npm. This utility is used to run multiple npm scripts in parallel or sequentially, enabling the integration of CSS preprocessing steps with the standard `start` and `build` scripts.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme Testing Library with yarn\nDESCRIPTION: Command to install Enzyme and react-test-renderer using yarn. This is an alternative to using npm for installing the required testing dependencies.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nyarn add enzyme react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for React Component\nDESCRIPTION: Shows how to define CSS styles for a React component in a separate CSS file.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  padding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Homepage in package.json for Relative Paths\nDESCRIPTION: JavaScript example showing how to configure the homepage field in package.json for hosting the app in a subdirectory.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in JavaScript (JavaScript)\nDESCRIPTION: Shows how to reference an asset from the `public` folder within JavaScript code using the `process.env.PUBLIC_URL` environment variable. This provides the absolute path to the `public` directory and is used here to construct the `src` attribute for an `<img>` tag. This method is an 'escape hatch' and generally less preferred than importing assets directly.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Bootstrap with npm\nDESCRIPTION: Command to install React Bootstrap and Bootstrap (version 3) dependencies using npm package manager.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all via Yarn (Shell)\nDESCRIPTION: Installs the `npm-run-all` package as a development dependency using Yarn. This utility facilitates running multiple npm scripts concurrently, allowing CSS watching and the development server to run together.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme with yarn\nDESCRIPTION: Command to install jest-enzyme using yarn. This is an alternative to npm for installing the jest-enzyme package that provides additional Jest matchers for React testing.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Smoke Test using Enzyme's Shallow Rendering\nDESCRIPTION: A smoke test that uses Enzyme's shallow rendering to test a React component. This method is useful for unit testing components in isolation from their children.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Redirects for Client-side Routing\nDESCRIPTION: Content for the _redirects file needed to support client-side routing with pushState in Netlify deployments. This configuration ensures all routes are handled by the single-page application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_87\n\nLANGUAGE: sh\nCODE:\n```\n/*  /index.html  200\n```\n\n----------------------------------------\n\nTITLE: Using imported images in CSS\nDESCRIPTION: CSS example demonstrating how to reference an image file in CSS styles. Webpack processes these relative paths and replaces them with the final paths from the compiled bundle.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Bootstrap with yarn\nDESCRIPTION: Command to install React Bootstrap and Bootstrap (version 3) dependencies using yarn package manager.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer in Create React App (npm)\nDESCRIPTION: Command to install the source-map-explorer package using npm for analyzing JavaScript bundle sizes in a Create React App project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code Debugger for React\nDESCRIPTION: This JSON configuration sets up the Visual Studio Code debugger for a React application. It specifies the Chrome debugger, the local development server URL, and source map configurations for accurate debugging.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Chrome\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceRoot}/src\",\n      \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using jest-enzyme for Simplified Test Assertions\nDESCRIPTION: A simplified test assertion using jest-enzyme matchers. This library provides more readable matchers specifically designed for testing React components with Enzyme.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(wrapper).toContainReact(welcome);\n```\n\n----------------------------------------\n\nTITLE: Importing and using images in React components\nDESCRIPTION: JavaScript example showing how to import and use an image file in a React component. This demonstrates Webpack's asset handling which processes the import and provides the correct URL for the image.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Importing React Bootstrap Components\nDESCRIPTION: Example of importing specific React Bootstrap components for use in a React application component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages package using npm\nDESCRIPTION: Terminal command for installing the gh-pages package as a dependency, which is used for deploying React applications to GitHub Pages.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_85\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save gh-pages\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist with npm\nDESCRIPTION: Command to install React Styleguidist as a dependency in your project using npm. Styleguidist creates a style guide and isolated component development environment.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Development on Linux/macOS\nDESCRIPTION: Command to enable HTTPS for the development server on Linux or macOS using Bash. Sets the HTTPS environment variable to true for the npm start command.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in package.json for API Requests\nDESCRIPTION: A basic configuration to proxy API requests to a different server during development. This allows frontend code to make requests to paths like '/api/todos' without needing to specify the full backend URL.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\",\n```\n\n----------------------------------------\n\nTITLE: Using Images in CSS (CSS)\nDESCRIPTION: Shows how to reference an image file using a relative path within a CSS file (`.Logo` class). Webpack processes these relative URLs (starting with `./`), replacing them with the final, hashed path of the image in the compiled bundle.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Analytics Disabling Based on Environment\nDESCRIPTION: Code snippet showing how to conditionally disable analytics in non-production environments using NODE_ENV.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages Package via NPM\nDESCRIPTION: Command to install the gh-pages package as a dependency using npm. This package is required for deploying React applications to GitHub Pages.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save gh-pages\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist with Yarn\nDESCRIPTION: Alternative command to install React Styleguidist as a dependency using Yarn package manager instead of npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_66\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Adding Sass compilation scripts to package.json\nDESCRIPTION: A diff showing how to modify the package.json file to add Sass compilation scripts that build and watch for changes in Sass files.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Advanced Proxy Configuration with Multiple Endpoints\nDESCRIPTION: Complex proxy configuration in package.json supporting multiple endpoints with different targets and options\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing public folder assets in HTML\nDESCRIPTION: HTML example showing how to reference assets in the public folder using the %PUBLIC_URL% placeholder. This method bypasses Webpack processing for assets that need to remain untouched.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in HTML Template\nDESCRIPTION: Example of using environment variables in the public/index.html file, where they will be replaced at build time.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages Package via Yarn\nDESCRIPTION: Command to install the gh-pages package as a dependency using yarn. This is an alternative to using npm for managing the dependency required for GitHub Pages deployment.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_84\n\nLANGUAGE: sh\nCODE:\n```\nyarn add gh-pages\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist with NPM\nDESCRIPTION: Command to install React Styleguidist as a project dependency using npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_64\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass with include paths in package.json\nDESCRIPTION: Commands for the package.json file that enable importing Sass files without using relative paths by adding include path options.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Proxy Paths in package.json\nDESCRIPTION: Advanced proxy configuration with multiple paths and pattern matching. This setup demonstrates how to proxy different paths to different backend URLs with specific options for each path.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/*.html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/**/*.html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing assets in public folder from HTML\nDESCRIPTION: Example of how to reference assets placed in the public folder from the HTML file using the %PUBLIC_URL% placeholder, which gets replaced with the correct path during build.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in HTML\nDESCRIPTION: Example of using environment variables in HTML files using the %VARIABLE_NAME% syntax, which gets replaced during the build process.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer for React Bundle Analysis\nDESCRIPTION: Commands to install source-map-explorer using npm or yarn for analyzing JavaScript bundle sizes in a Create React App project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_61\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save source-map-explorer\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Starting Styleguidist Server\nDESCRIPTION: Command to start the Styleguidist development server for component documentation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\nnpm run styleguide\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Server Data Injection\nDESCRIPTION: HTML template with a placeholder for injecting server data as a global variable. The server can replace the placeholder with actual JSON data before sending the response to the client.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_48\n\nLANGUAGE: js\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Homepage in package.json for Relative Paths\nDESCRIPTION: JSON snippet showing how to specify the homepage in package.json to build a Create React App project for deployment at a specific path.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\n----------------------------------------\n\nTITLE: Using Sass imports with include paths\nDESCRIPTION: Example of how to import Sass files using the configured include paths. Shows importing both a local file from src directory and a CSS file from a node module.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_18\n\nLANGUAGE: scss\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Dynamic Meta Tag Placeholders\nDESCRIPTION: HTML template that includes placeholder variables for dynamic meta tags. These placeholders can be replaced server-side based on the current URL.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\" />\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\" />\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm run eject\nDESCRIPTION: Command to eject from Create React App, which copies all configuration files and dependencies directly into your project. This is a one-way operation that gives you full control over the build configuration.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Installing and Running react-i18next Storybook Example\nDESCRIPTION: This bash script shows the commands to install dependencies, start the React app, and launch Storybook for a project using react-i18next. It outlines the basic setup process for getting the internationalization example running.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/storybook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nyarn install\n\n# Start the React app\nyarn start\n\n# Start Storybook\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Meta Tag Placeholders for Server-Side Rendering\nDESCRIPTION: HTML template with placeholder values for dynamic meta tags that can be replaced on the server before sending the response. This allows for SEO-friendly meta tags that reflect the current URL or content.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\" />\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\" />\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for parallel CSS processing\nDESCRIPTION: A diff showing how to modify package.json scripts to run CSS preprocessing in parallel with the React development server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Moment.js Locale\nDESCRIPTION: Example of how to import a specific locale for Moment.js. By default, only the English locale is loaded to keep bundle sizes smaller.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Dynamic Meta Tag Placeholders\nDESCRIPTION: HTML template with placeholder values for dynamic meta tags. These placeholders can be replaced server-side to generate dynamic meta tags based on the current URL.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\" />\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\" />\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook CLI for React Component Development\nDESCRIPTION: This command installs the Storybook CLI globally, which is used to set up Storybook for React component development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite with Yarn\nDESCRIPTION: Launches the test runner in interactive watch mode for running and monitoring tests in the React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-icu/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### `yarn test`\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in HTML\nDESCRIPTION: Example of using environment variables in the public/index.html file.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Adding Sass compilation scripts to package.json\nDESCRIPTION: Diff showing how to modify package.json to add scripts for building and watching Sass files. The build-css script compiles Sass to CSS, while watch-css does the same but continuously watches for changes.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in JavaScript\nDESCRIPTION: Demonstrates how to properly access global variables from window object to avoid linter complaints when using scripts that declare global variables.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Installing Code Formatting Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for automatic code formatting in the React-i18next project, including husky for git hooks, lint-staged for running scripts on staged files, and prettier for code formatting.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save husky lint-staged prettier\n```\n\n----------------------------------------\n\nTITLE: Setting CI Environment Variable for Windows\nDESCRIPTION: Commands to set the CI environment variable on Windows, which forces Jest to run tests once and enables linter warnings check during build.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_60\n\nLANGUAGE: batch\nCODE:\n```\nset CI=true&&npm test\n```\n\nLANGUAGE: batch\nCODE:\n```\nset CI=true&&npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Component Styles in a CSS File (CSS)\nDESCRIPTION: A basic CSS file (`Button.css`) containing styles for a class named `.Button`. This file demonstrates how to define styles that can be imported and used within a React component.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  padding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Travis CI Configuration for React Projects\nDESCRIPTION: A sample .travis.yml configuration file for setting up continuous integration with Travis CI. This configuration specifies Node.js version, caching for node_modules, and runs build and test scripts.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server for React App\nDESCRIPTION: JavaScript code for setting up an Express server to serve a React app from the build folder on port 9000.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Updating Watchman on macOS with Homebrew\nDESCRIPTION: Commands to fix Watchman-related issues that cause npm test to hang on macOS Sierra. This involves shutting down the Watchman server and reinstalling it via Homebrew.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Installing Code Formatting Dependencies with yarn\nDESCRIPTION: This alternative command uses yarn instead of npm to install the code formatting dependencies (husky, lint-staged, and prettier) for the React-i18next project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add husky lint-staged prettier\n```\n\n----------------------------------------\n\nTITLE: Setting CI Environment Variable for Linux/macOS\nDESCRIPTION: Commands to set the CI environment variable on Linux or macOS, which forces Jest to run tests once and enables linter warnings check during build.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Autoprefixed CSS Flexbox - CSS\nDESCRIPTION: Shows the automatically processed CSS output with vendor prefixes for Flexbox, generated by tools like Autoprefixer. This improves cross-browser compatibility. Usually, such post-processing is handled during build time by a toolchain including Webpack and PostCSS.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Travis CI Configuration for React Project\nDESCRIPTION: A sample .travis.yml configuration file for setting up continuous integration with Travis CI for a React project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Server for Create React App Production Build\nDESCRIPTION: JavaScript code snippet demonstrating how to set up an Express server to serve a Create React App production build, including handling the root path.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages package using yarn\nDESCRIPTION: Alternative terminal command for installing the gh-pages package using Yarn package manager instead of npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_86\n\nLANGUAGE: sh\nCODE:\n```\nyarn add gh-pages\n```\n\n----------------------------------------\n\nTITLE: Adding Precommit Hook to package.json\nDESCRIPTION: This diff shows how to modify the scripts section in package.json to add a precommit hook that will run lint-staged before each commit, enabling automatic code formatting in the React-i18next project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CI Flag in Windows Command Prompt\nDESCRIPTION: Commands to run tests and build with the CI environment variable in Windows command prompt. Setting CI=true forces Jest to run tests once instead of in watch mode and causes the build to fail on linter warnings.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_58\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm test\n```\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm run build\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in HTML (HTML)\nDESCRIPTION: Illustrates how to reference an asset located in the `public` folder from within `index.html`. The special placeholder `%PUBLIC_URL%` is used, which Create React App replaces with the correct absolute path to the public folder during the build process. This example links a favicon.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache .htaccess for Client-Side Routing\nDESCRIPTION: Apache .htaccess configuration to enable client-side routing in a Create React App project by redirecting all requests to index.html.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_75\n\nLANGUAGE: apache\nCODE:\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass include paths in package.json\nDESCRIPTION: Commands for setting up include paths in Sass compilation, allowing for imports without relative paths. This enables importing from both src directory and node_modules.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to GitHub Pages with npm run deploy\nDESCRIPTION: Command to deploy the React application to GitHub Pages after configuring the necessary scripts in package.json. This triggers the build and deployment process.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_85\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with npm\nDESCRIPTION: Command to install the Sass compiler utility node-sass-chokidar using npm. This tool is recommended over node-sass due to its better handling of file watching and performance issues.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Commands for setting environment variables in Windows and Unix-based systems.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_36\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Importing React Bootstrap Components\nDESCRIPTION: Example of importing specific React Bootstrap components for use in a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\n----------------------------------------\n\nTITLE: Updating Express Server for Client-Side Routing\nDESCRIPTION: A diff showing how to modify the Express server configuration to support client-side routing by serving index.html for all routes.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\n----------------------------------------\n\nTITLE: Adding Source Map Explorer Script to package.json\nDESCRIPTION: JSON diff showing how to add the analyze script to the package.json file for running source-map-explorer on the built JavaScript bundle.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Running Build and Analysis Commands\nDESCRIPTION: Commands to build the production app and then analyze the bundle size using source-map-explorer.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_72\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run analyze\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap with yarn in React Project\nDESCRIPTION: Command to install React Bootstrap and Bootstrap CSS using yarn as an alternative to npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Development on Linux/macOS using Bash\nDESCRIPTION: Command to enable HTTPS for the development server on Linux or macOS systems using Bash. This sets the HTTPS environment variable to true when starting the development server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment Variables File (.env)\nDESCRIPTION: Example of a .env file content that defines permanent environment variables for a React application. This file should be checked into source control.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify redirects for client-side routing\nDESCRIPTION: Configuration for the Netlify _redirects file that ensures client-side routing works correctly by redirecting all paths to index.html with a 200 status code.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_89\n\nLANGUAGE: sh\nCODE:\n```\n/*  /index.html  200\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Linux/macOS Development Environment\nDESCRIPTION: Command to start a Create React App development server with HTTPS enabled in Linux or macOS using Bash. This allows the development server to serve pages over HTTPS.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer with npm\nDESCRIPTION: Command to install the source-map-explorer package using npm, which helps analyze JavaScript bundle sizes using source maps.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash\nDESCRIPTION: Command for setting temporary environment variables in Linux/macOS Bash shell before running a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash (Linux, macOS)\nDESCRIPTION: Shows how to set temporary environment variables in Bash shell before running a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Proxy in package.json\nDESCRIPTION: Configuration example for setting up a WebSocket proxy in a React application. This setup enables WebSocket communication through the development server to a backend WebSocket server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Static Server for Create React App\nDESCRIPTION: Commands to install the 'serve' package globally and use it to serve the built Create React App project on port 5000.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_71\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g serve\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Windows Development Environment\nDESCRIPTION: Command to start a Create React App development server with HTTPS enabled in Windows cmd.exe. This is useful when proxying requests to an API server that uses HTTPS.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_45\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer in Create React App (yarn)\nDESCRIPTION: Command to install the source-map-explorer package using yarn for analyzing JavaScript bundle sizes in a Create React App project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\nyarn add source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: CORS Error Example\nDESCRIPTION: Example of CORS error message that occurs without proper proxy configuration\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_38\n\nLANGUAGE: text\nCODE:\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\n----------------------------------------\n\nTITLE: Running React Native Android App\nDESCRIPTION: Commands to start the React Native application on Android platform using either npm or yarn package managers.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeProject/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Server Data Injection in React\nDESCRIPTION: HTML template with a placeholder for injecting server data as a global variable. This allows the server to pass initial data to the client-side application without additional API calls.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_44\n\nLANGUAGE: js\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Netlify Manual Deployment Commands for React Application\nDESCRIPTION: Shell commands for manual deployment of a React application to Netlify's CDN using the netlify-cli tool.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_71\n\nLANGUAGE: sh\nCODE:\n```\nnpm install netlify-cli\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Development on Windows\nDESCRIPTION: Command to enable HTTPS for the development server on Windows using cmd.exe. Sets the HTTPS environment variable to true before starting the npm development server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_42\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook CLI Globally\nDESCRIPTION: Command to install the Storybook CLI tool globally using npm for React component development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Proxy with Single Target\nDESCRIPTION: Example of a more detailed proxy configuration in package.json that allows for specific path matching and additional options like WebSocket support.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying React Application to Firebase Hosting\nDESCRIPTION: Terminal output showing the deployment process when running 'firebase deploy'. This displays the deployment of database rules and hosting files to Firebase.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\n=== Deploying to 'example-app-fd690'...\n\ni  deploying database, hosting\n✔  database: rules ready to deploy.\ni  hosting: preparing build directory for upload...\nUploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n✔  hosting: 8 files uploaded successfully\ni  starting release process (may take several minutes)...\n\n✔  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/example-app-fd690/overview\nHosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Importing Moment.js Locales in JavaScript\nDESCRIPTION: Example of how to import specific Moment.js locales into your bundle. This is necessary because Moment.js only includes the English locale by default to reduce bundle size.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage in package.json for GitHub Pages\nDESCRIPTION: Shows how to add the 'homepage' field to package.json for GitHub Pages deployment. This field sets the root URL in the built HTML file for proper asset paths.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_81\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Command Line\nDESCRIPTION: Command for setting temporary environment variables in Windows cmd.exe before running a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_34\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n----------------------------------------\n\nTITLE: Adding Source Map Explorer Script to package.json\nDESCRIPTION: A diff showing how to add the analyze script to the package.json file for running source-map-explorer on the production build.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: WebSocket Proxy Configuration\nDESCRIPTION: Proxy configuration specifically for WebSocket connections with ws flag enabled\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"proxy\": {\n    \"/socket\": {\n      \"target\": \"ws://<socket_url>\",\n      \"ws\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Watchman on macOS using Homebrew to Fix npm test Hanging\nDESCRIPTION: These commands help fix the npm test hanging issue on macOS Sierra by updating or reinstalling Watchman. The commands shut down the Watchman server, update Homebrew, and reinstall Watchman to the latest version.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Moment.js Locales in React\nDESCRIPTION: This code shows how to import multiple Moment.js locales and switch between them at runtime. The moment.locale() function is used to change the active locale, but only works with locales that have been explicitly imported.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI for Manual Deployment\nDESCRIPTION: Commands to install the Netlify CLI and deploy a React application to Netlify's CDN. This approach allows for manual deployment of the build folder.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_86\n\nLANGUAGE: sh\nCODE:\n```\nnpm install netlify-cli\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with Yarn\nDESCRIPTION: Creates a production-ready build of the React application, optimizing and minifying the code for deployment.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-icu/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### `yarn build`\n```\n\n----------------------------------------\n\nTITLE: Disabling jsdom in package.json Test Configuration\nDESCRIPTION: A diff showing how to modify package.json to disable the jsdom environment for tests that don't need browser globals. This can make tests run faster but limits which React APIs can be used in tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn - JavaScript/Node.js - Shell\nDESCRIPTION: Shows how to install the 'react-router' library using yarn as the package manager. Assumes yarn is installed globally. This will add 'react-router' to the dependencies, similar to npm, enabling its use throughout the project.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-router\n\n```\n\n----------------------------------------\n\nTITLE: Updating Watchman on macOS with Homebrew to fix npm test hanging issues\nDESCRIPTION: Commands to update Watchman on macOS using Homebrew. This addresses the issue where npm test hangs on macOS Sierra, often related to Watchman installation problems.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Development on Windows using CMD\nDESCRIPTION: Command to enable HTTPS for the development server on Windows systems using cmd.exe. This sets the HTTPS environment variable to true before starting the development server.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_41\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with yarn\nDESCRIPTION: Command to install node-sass-chokidar, a recommended Sass preprocessor for React applications, using yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all with yarn\nDESCRIPTION: Command to install npm-run-all package using yarn, which enables running multiple npm scripts in parallel.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Example package.json Scripts for Testing\nDESCRIPTION: Example of the scripts section in package.json showing the default test configuration with jsdom environment enabled. This is the default setup for testing React applications.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\"\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme for Enhanced React Testing\nDESCRIPTION: Commands to install jest-enzyme, which provides additional Jest matchers for Enzyme assertions. Includes options for both npm and yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-enzyme\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Displaying Serve Command Options\nDESCRIPTION: Command to show the full list of options available for the 'serve' package used to host static sites.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_72\n\nLANGUAGE: sh\nCODE:\n```\nserve -h\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Pages Deployment Scripts to package.json\nDESCRIPTION: Diff showing the addition of predeploy and deploy scripts to package.json for GitHub Pages deployment using gh-pages.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_70\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all for parallel script execution\nDESCRIPTION: Command to install npm-run-all package which allows running multiple npm scripts in parallel, useful for combining CSS preprocessing with React development.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all with yarn\nDESCRIPTION: Alternative command to install npm-run-all using yarn package manager instead of npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS\nDESCRIPTION: Shows how to import Bootstrap CSS and theme files in a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration for Client-Side Routing\nDESCRIPTION: Apache .htaccess configuration to enable client-side routing by redirecting all requests to index.html.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_77\n\nLANGUAGE: sh\nCODE:\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Displaying Serve Help Options\nDESCRIPTION: Command to display all available options for the 'serve' package.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\nserve -h\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Project for React Application Deployment\nDESCRIPTION: Terminal output showing the Firebase initialization process when running 'firebase init'. This displays the project setup, database configuration, and hosting setup for a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? database.rules.json\n✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\nFuture modifications to database.rules.json will update Database Rules when you run\nfirebase deploy.\n\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? build\n? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n✔  Wrote build/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer with yarn\nDESCRIPTION: Command to install the source-map-explorer package using yarn as an alternative to npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_70\n\nLANGUAGE: sh\nCODE:\n```\nyarn add source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with yarn\nDESCRIPTION: Alternative command to install node-sass-chokidar using yarn package manager instead of npm.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap Dependencies\nDESCRIPTION: Commands for installing React Bootstrap and Bootstrap dependencies using npm or yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save react-bootstrap bootstrap@3\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Setting Homepage for Relative Asset Paths\nDESCRIPTION: JavaScript snippet showing how to configure package.json's homepage field to use relative paths for all assets.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n  \"homepage\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Mocking react-i18next Components in JavaScript\nDESCRIPTION: The ./__mocks__ directory contains mocks for react-i18next components, specifically the translate function and Trans component. Other components should be mocked as needed.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/test-jest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ./__mocks__/react-i18next.js\n// Mock implementation for translate and Trans\n// Add other component mocks as needed\n```\n\n----------------------------------------\n\nTITLE: Disabling jsdom in Jest Configuration\nDESCRIPTION: An example of how to disable jsdom in the Jest configuration by removing the --env=jsdom flag from the test script in package.json. This can speed up tests that don't require a DOM environment.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Analyze Script to package.json\nDESCRIPTION: Diff showing how to add the analyze script to package.json for running source-map-explorer on build files.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar via Yarn (Shell)\nDESCRIPTION: Installs the `node-sass-chokidar` package as a development dependency using Yarn. This package provides a command-line interface for Sass compilation and is recommended over `node-sass` due to better handling of file watching and performance in certain environments.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS in React Application\nDESCRIPTION: Code for importing Bootstrap CSS and theme CSS in the main index.js file of a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Adding deployment scripts for GitHub Pages\nDESCRIPTION: Diff showing the modifications needed in package.json to add predeploy and deploy scripts for GitHub Pages deployment using the gh-pages package.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_84\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Illustrating Simplified Interpolation Syntax in react-i18next v8.0.0+\nDESCRIPTION: Demonstrates the simplified interpolation syntax introduced in react-i18next v8.0.0 for the `Trans` component. This syntax eliminates the need for extra nested tags (like `<0>...</0>`) around interpolated variables (e.g., `{{name}}`, `{{count}}`), making the translation string cleaner and more intuitive.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n'Hello <1>{{name}}</1>, you have {{count}} message. Open <5>hear</5>.'\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in a React Project\nDESCRIPTION: This command sets up Storybook in an existing React project directory, creating necessary configuration files and example stories.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme with npm\nDESCRIPTION: Command to install jest-enzyme using npm. This package provides additional matchers for Jest that make Enzyme-based React component tests more readable.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap with npm in React Project\nDESCRIPTION: Command to install React Bootstrap and Bootstrap CSS using npm for integration with React applications.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Pages deployment\nDESCRIPTION: Terminal command to trigger the deployment process to GitHub Pages, which will run the predeploy script followed by the deploy script defined in package.json.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_87\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts to package.json\nDESCRIPTION: This diff shows the addition of Styleguidist scripts to the package.json file, enabling the running of the style guide server and building the static style guide.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts to Package.json\nDESCRIPTION: Diff showing the addition of Styleguidist-specific scripts to package.json configuration.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all for parallel script execution\nDESCRIPTION: Command to install npm-run-all using npm, which allows for running multiple npm scripts in parallel. This is useful for running both the CSS watcher and React development server simultaneously.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Deploying React App to ZEIT Now\nDESCRIPTION: Commands to deploy a React application to Now (ZEIT) after building the application. This shows how to navigate to the build directory and deploy it with a custom name.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_88\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\ncd build\nnow --name your-project-name\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Folder Structure in Markdown\nDESCRIPTION: Shows the expected folder structure of a newly created React project using create-react-app. This structure includes the main directories and files that are essential for the project to function.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist with Yarn\nDESCRIPTION: Alternative command to install React Styleguidist using Yarn package manager.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme for React Component Testing\nDESCRIPTION: Commands to install Enzyme and its dependencies for testing React components. Provides options for both npm and yarn package managers.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save enzyme react-test-renderer\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add enzyme react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Moment.js Locales\nDESCRIPTION: Example showing how to import multiple Moment.js locales and switch between them. This demonstrates importing both French and Spanish locales and then setting French as the active locale.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: CSS Example After Autoprefixer Processing (CSS)\nDESCRIPTION: Displays the output CSS after Autoprefixer has automatically added vendor prefixes (e.g., `-webkit-`, `-ms-`) to ensure cross-browser compatibility for properties like flexbox.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in Project\nDESCRIPTION: Command to initialize Storybook within an existing React application directory.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with React i18next\nDESCRIPTION: Command to start the development server for React i18next project built with Razzle.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/razzle-ssr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm start\n```\n\n----------------------------------------\n\nTITLE: Defining a Button CSS Class - CSS\nDESCRIPTION: Defines a CSS class named '.Button' with specific padding to style a button component. The CSS file should be imported into the Button.js file to apply styles via Webpack. No dependencies are needed, but integration with JavaScript/React requires a compatible build configuration (such as Webpack's CSS handling).\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-localstorage/README.md#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  padding: 20px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn in React Project\nDESCRIPTION: Shows how to install additional dependencies in a React project using Yarn. The example demonstrates installing react-router.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-router\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files into the project for full control. This is a one-way operation and should be used with caution.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-icu/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### `yarn eject`\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for React App Testing\nDESCRIPTION: A sample Travis CI configuration file for running tests and builds for a React application. This setup caches node_modules and runs both build and test scripts.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Ejects the project from Create React App, exposing all configuration files and dependencies for full control. This is a one-way operation.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple-multi-namespaces/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler in React Native\nDESCRIPTION: Commands to start the Metro JavaScript bundler for React Native development using either npm or yarn package managers.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeProject/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing Sass files with custom paths\nDESCRIPTION: Example of how to import Sass files using include paths, both from a local styles directory and from node_modules.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: Running React Native App on iOS\nDESCRIPTION: Commands to start a React Native application on iOS using either npm or Yarn.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/ReactNativeLocizeProject/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Path for Surge Deployment\nDESCRIPTION: Example of specifying the build folder path when deploying a React application with Surge. This ensures Surge deploys the compiled production build rather than the source files.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_89\n\nLANGUAGE: sh\nCODE:\n```\n       project path: /path/to/project/build\n```\n\n----------------------------------------\n\nTITLE: Installing and deploying to Netlify\nDESCRIPTION: Terminal commands for installing the Netlify CLI and manually deploying a React application to Netlify's CDN, specifying the build directory as the deployment source.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_88\n\nLANGUAGE: sh\nCODE:\n```\nnpm install netlify-cli\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Project with Firebase CLI\nDESCRIPTION: Shows the output of running 'firebase init' command to set up Firebase hosting for a React application. This configures the project with database rules and single-page app settings.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react/README.md#2025-04-23_snippet_79\n\nLANGUAGE: sh\nCODE:\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? database.rules.json\n✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\nFuture modifications to database.rules.json will update Database Rules when you run\nfirebase deploy.\n\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? build\n? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n✔  Wrote build/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase with Firebase CLI\nDESCRIPTION: Terminal output showing the deployment process to Firebase hosting. Displays the upload progress, successful deployment confirmation, and the final hosting URL for the application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_82\n\nLANGUAGE: sh\nCODE:\n```\n=== Deploying to 'example-app-fd690'...\n\ni  deploying database, hosting\n✔  database: rules ready to deploy.\ni  hosting: preparing build directory for upload...\nUploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n✔  hosting: 8 files uploaded successfully\ni  starting release process (may take several minutes)...\n\n✔  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/example-app-fd690/overview\nHosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet defines the rules for web crawlers, allowing them to access all parts of the website. It specifies that the rules apply to all user agents and does not disallow any specific paths.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Setting Default Robot Access Rules\nDESCRIPTION: Configures default access rules for all web crawlers. Uses the standard robots.txt syntax to allow full access by not specifying any disallow rules.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-icu/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website. It specifies no disallowed paths, effectively granting full access to all user agents.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-typescript/simple-multi-namespaces/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Setting Default Crawler Access Rules in robots.txt\nDESCRIPTION: Basic robots.txt configuration that defines access rules for all web crawlers using the wildcard user-agent (*)\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/razzle-ssr/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Command Prompt\nDESCRIPTION: Shows how to set temporary environment variables in Windows command prompt before running a React application.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/react-component-lib/README.md#2025-04-23_snippet_38\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Adapter in JavaScript\nDESCRIPTION: The ./src/setupTests.js file sets up the adapter for using Enzyme in the project's tests.\nSOURCE: https://github.com/i18next/react-i18next/blob/master/example/test-jest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ./src/setupTests.js\n// Configure Enzyme adapter for React\n```"
  }
]