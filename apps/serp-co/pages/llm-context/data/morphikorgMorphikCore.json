[
  {
    "owner": "morphik-org",
    "repo": "morphik-core",
    "content": "TITLE: Ingesting Files Using Morphik Python SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Morphik client and ingest a file. It requires the Morphik Python SDK and an API key/URI to connect to the Morphik service.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom morphik import Morphik\n\nmorphik = Morphik(\"<your-morphik-uri>\")\nmorphik.ingest_file(\"path/to/your/super/complex/file.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Using Morphik Synchronous Client\nDESCRIPTION: Example demonstrating how to use the synchronous Morphik client for document ingestion, chunk retrieval, and RAG queries. Shows client initialization, text and file ingestion, retrieval, and querying with optional filters.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom morphik import Morphik\n\n# Initialize client - connects to localhost:8000 by default\ndb = Morphik()\n\n# Or with authentication URI (for production)\n# db = Morphik(\"morphik://owner_id:token@api.morphik.ai\")\n\n# Ingest a text document\ndoc = db.ingest_text(\n    content=\"Your document content\",\n    metadata={\"title\": \"Example Document\"}\n)\n\n# Ingest a file\ndoc = db.ingest_file(\n    file=\"path/to/document.pdf\",\n    metadata={\"category\": \"reports\"}\n)\n\n# Retrieve relevant chunks\nchunks = db.retrieve_chunks(\n    query=\"Your search query\",\n    filters={\"category\": \"reports\"}\n)\n\n# Query with RAG\nresponse = db.query(\n    query=\"Summarize the key points in the document\",\n    filters={\"category\": \"reports\"}\n)\n\nprint(response.completion)\n```\n\n----------------------------------------\n\nTITLE: Querying Documents Using Morphik Python SDK\nDESCRIPTION: This code snippet shows how to query previously ingested documents using the Morphik client. It demonstrates a natural language query that can extract specific information from technical documentation.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmorphik.query(\"What's the height of screw 14-A in the chair assembly instructions?\")\n```\n\n----------------------------------------\n\nTITLE: Using Morphik Asynchronous Client\nDESCRIPTION: Example demonstrating how to use the asynchronous Morphik client for document ingestion and RAG queries. Shows client initialization with context manager, text ingestion, and querying with async/await syntax.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom morphik.async_ import AsyncMorphik\n\nasync def main():\n    # Initialize async client - connects to localhost:8000 by default\n    async with AsyncMorphik() as db:\n\n    # Or with authentication URI (for production)\n    # async with AsyncMorphik(\"morphik://owner_id:token@api.morphik.ai\") as db:\n        # Ingest a text document\n        doc = await db.ingest_text(\n            content=\"Your document content\",\n            metadata={\"title\": \"Example Document\"}\n        )\n\n        # Query with RAG\n        response = await db.query(\n            query=\"Summarize the key points in the document\",\n        )\n\n        print(response.completion)\n\n# Run the async function\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: First-time Docker Compose Setup for Morphik Core\nDESCRIPTION: Command to build and start all Docker containers for the first time, including downloading AI models and initializing the PostgreSQL database.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Containers for Morphik Core\nDESCRIPTION: Commands for starting and stopping Morphik Core services using Docker Compose after initial setup.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up    # Start all services\ndocker compose down  # Stop all services\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Morphik Core in Docker\nDESCRIPTION: The default morphik.toml configuration file contents optimized for Docker deployment, including API, AI model, database, and storage settings.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[api]\nhost = \"0.0.0.0\"  # Important: Use 0.0.0.0 for Docker\nport = 8000\n\n[completion]\nprovider = \"ollama\"\nmodel_name = \"llama3.2\"\nbase_url = \"http://ollama:11434\"  # Use Docker service name\n\n[embedding]\nprovider = \"ollama\"\nmodel_name = \"nomic-embed-text\"\nbase_url = \"http://ollama:11434\"  # Use Docker service name\n\n[database]\nprovider = \"postgres\"\n\n[vector_store]\nprovider = \"pgvector\"\n\n[storage]\nprovider = \"local\"\nstorage_path = \"/app/storage\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Morphik Core Repository\nDESCRIPTION: Commands to clone the Morphik Core repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/morphik-org/morphik-core.git\ncd morphik-core\n```\n\n----------------------------------------\n\nTITLE: Integrating MorphikUI Component in React Application\nDESCRIPTION: Example of how to import and use the MorphikUI component in a React application. Shows basic configuration with connection URI, API base URL, and event handling.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MorphikUI } from '@morphik/ui';\n\nexport default function YourApp() {\n  return (\n    <MorphikUI\n      connectionUri=\"your-connection-uri\"\n      apiBaseUrl=\"http://your-api-base-url\"\n      isReadOnlyUri={false}\n      onUriChange={(uri) => console.log('URI changed:', uri)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Morphik SDK with pip\nDESCRIPTION: Command to install the Morphik Python client SDK using pip package manager.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install morphik\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Morphik Core\nDESCRIPTION: Sample .env file content for customizing Morphik Core settings, including security keys, API keys, and network configuration.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nJWT_SECRET_KEY=your-secure-key-here  # Important: Change in production\nOPENAI_API_KEY=sk-...                # Only if using OpenAI\nHOST=0.0.0.0                         # Leave as is for Docker\nPORT=8000                            # Change if needed\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration in Docker Compose for Morphik Core\nDESCRIPTION: YAML snippet showing how to mount a custom configuration file in the Docker Compose setup for Morphik Core.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  morphik:\n    volumes:\n      - ./my-custom-morphik.toml:/app/morphik.toml\n```\n\n----------------------------------------\n\nTITLE: Running Morphik Example Scripts\nDESCRIPTION: Commands to run the provided example scripts demonstrating basic usage of the Morphik SDK in both synchronous and asynchronous modes.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run synchronous example\npython -m morphik.tests.example_usage\n\n# Run asynchronous example\npython -m morphik.tests.example_usage --async\n```\n\n----------------------------------------\n\nTITLE: Resetting Morphik Core Docker Environment\nDESCRIPTION: Command to completely reset the Docker environment, which will delete all data and models by removing volumes.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Running Morphik SDK Tests\nDESCRIPTION: Commands to install test dependencies and run tests for the Morphik SDK. Includes options for running all tests, specific test modules, skipping live tests, and specifying custom server URLs.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r test_requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests (requires a running Morphik server)\npytest morphik/tests/ -v\n\n# Run specific test modules\npytest morphik/tests/test_sync.py -v\npytest morphik/tests/test_async.py -v\n\n# Skip tests if you don't have a running server\nSKIP_LIVE_TESTS=1 pytest morphik/tests/ -v\n\n# Specify a custom server URL for tests\nMORPHIK_TEST_URL=http://custom-server:8000 pytest morphik/tests/ -v\n```\n\n----------------------------------------\n\nTITLE: Running Morphik SDK Tests with Pytest in Bash\nDESCRIPTION: Commands for running both synchronous and asynchronous tests for the Morphik SDK. Tests connect to localhost:8000 by default, but a custom server URL can be specified using the MORPHIK_TEST_URL environment variable.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/morphik/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using default localhost:8000 URL\npytest test_sync.py test_async.py -v\n\n# Tests connect to localhost:8000 by default\n# No need to specify a URL unless you want to test against a different server\n\n# With a custom server URL (optional)\nMORPHIK_TEST_URL=http://custom-url:8000 pytest test_sync.py -v\n```\n\n----------------------------------------\n\nTITLE: Database Connection Verification for Morphik Core\nDESCRIPTION: Command to directly connect to the PostgreSQL database inside Docker to verify database connectivity.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec postgres psql -U morphik -d morphik\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Logs for Troubleshooting Morphik Core\nDESCRIPTION: Commands for viewing logs of all services or specific services to troubleshoot issues with Morphik Core Docker deployment.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/DOCKER.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# View all logs\ndocker compose logs\n\n# View specific service logs\ndocker compose logs morphik\ndocker compose logs postgres\ndocker compose logs ollama\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Morphik Python SDK to PyPI\nDESCRIPTION: This snippet shows the commands needed to build and publish the Morphik Python SDK to PyPI. It includes installing build tools, cleaning previous builds, building the package, checking the distribution files, and uploading to PyPI.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/PUBLISH.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ensure you've activated the correct python environment\npip install build twine\n\nrm -rf dist\npython -m build\ntwine check dist/*\ntwine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Installing Morphik UI Package with npm\nDESCRIPTION: Command to install the @morphik/ui package using npm. This is required before importing the component in your React application.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @morphik/ui\n```\n\n----------------------------------------\n\nTITLE: Building and Running Production Version\nDESCRIPTION: Commands to build the Morphik UI for production use and start the production server. This optimizes the application for performance.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the Next.js development server for local testing and development of the Morphik UI.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Development\nDESCRIPTION: Command to install all necessary dependencies for developing with the Morphik UI component. Required before starting the development server.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Morphik SDK Example Scripts in Bash\nDESCRIPTION: Commands for executing the example usage script in both synchronous and asynchronous modes, demonstrating basic usage of the Morphik SDK.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/morphik/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run synchronous example\npython example_usage.py\n\n# Run asynchronous example\npython example_usage.py --async\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing @morphik/ui Package\nDESCRIPTION: Commands to build the package, perform a dry-run check, and publish to npm with public access.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/PUBLISHING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:package\nnpm pack --dry-run\nnpm publish --access public\n```\n\n----------------------------------------\n\nTITLE: Installing @morphik/ui from Local Directory or GitHub\nDESCRIPTION: Commands to install the package from a local directory or directly from the GitHub repository for testing purposes.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/PUBLISHING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install /path/to/morphik-core/ui-component\nnpm install github:morphik-org/morphik-core#subdirectory=ui-component\n```\n\n----------------------------------------\n\nTITLE: Local Development with npm link\nDESCRIPTION: Commands to use npm link for local development and testing of the package.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/PUBLISHING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\nnpm link @morphik/ui\n```\n\n----------------------------------------\n\nTITLE: Disabling Morphik Telemetry in Python Code\nDESCRIPTION: Programmatically disables the Morphik telemetry system by setting an environment variable within Python code. This approach allows controlling telemetry collection at runtime in Python applications.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/docs/telemetry.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"DATABRIDGE_TELEMETRY_ENABLED\"] = \"0\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Morphik Telemetry via Environment Variable in Bash\nDESCRIPTION: Sets an environment variable to disable the Morphik telemetry system from the command line. Setting DATABRIDGE_TELEMETRY_ENABLED to 0 turns off all anonymous data collection.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/docs/telemetry.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABRIDGE_TELEMETRY_ENABLED=0\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in npm\nDESCRIPTION: Commands to update the package version in package.json following semantic versioning principles.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/PUBLISHING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm version patch  # For bug fixes\nnpm version minor  # For new features\nnpm version major  # For breaking changes\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Release\nDESCRIPTION: Commands to create and push a git tag for the release using the version from package.json.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/ee/ui-component/PUBLISHING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v$(node -p \"require('./package.json').version\")\ngit push origin v$(node -p \"require('./package.json').version\")\n```\n\n----------------------------------------\n\nTITLE: Running Manual Code Formatting Script in Bash\nDESCRIPTION: Command to manually format all Python files in the project using the format.sh script. This executes isort, black, and ruff in sequence to ensure consistent code formatting across the codebase.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/format.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Model in TOML Configuration File\nDESCRIPTION: TOML configuration snippet for specifying which language model to use for the SciER evaluation. Includes settings for the graph model and entity resolution.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/evaluations/Science graphs (SciER)/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[graph]\nmodel = \"openai_gpt4o\" # Reference to a key in registered_models\nenable_entity_resolution = true\n```\n\n----------------------------------------\n\nTITLE: Running Graph Creation Script in Bash\nDESCRIPTION: Command to run the SciER evaluation script that creates a knowledge graph using the specified model.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/evaluations/Science graphs (SciER)/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scier_evaluation.py --model-name gpt4o\n```\n\n----------------------------------------\n\nTITLE: Running Graph Evaluation Script in Bash\nDESCRIPTION: Command to evaluate a previously created knowledge graph against the ground truth annotations.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/evaluations/Science graphs (SciER)/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython evaluate_result.py --graph-name scier_gpt4o_12345678\n```\n\n----------------------------------------\n\nTITLE: Defining Python Testing Dependencies in requirements.txt\nDESCRIPTION: This snippet lists the required Python packages for testing the MorphikCore project. It specifies exact versions for pytest and pytest-asyncio, while setting minimum version requirements for httpx and Pillow.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/sdks/python/test_requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest==7.4.0\npytest-asyncio==0.21.1\nhttpx>=0.24.1\nPillow>=10.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API Key in Bash\nDESCRIPTION: Command to export the OpenAI API key as an environment variable for use in the evaluation scripts.\nSOURCE: https://github.com/morphik-org/morphik-core/blob/main/evaluations/Science graphs (SciER)/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_key_here\n```"
  }
]