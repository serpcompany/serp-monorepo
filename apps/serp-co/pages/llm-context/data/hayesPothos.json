[
  {
    "owner": "hayes",
    "repo": "pothos",
    "content": "TITLE: Installing Pothos and GraphQL Yoga\nDESCRIPTION: Command to install the required dependencies for building GraphQL APIs with Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @pothos/core graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Server with Pothos in TypeScript\nDESCRIPTION: A simple Hello World example showing how to create a GraphQL server using Pothos. The example initializes a schema builder, defines a query type with a hello field that accepts a name argument, and sets up a server using graphql-yoga.\nSOURCE: https://github.com/hayes/pothos/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga';\nimport { createServer } from 'node:http';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic GraphQL Server with Pothos\nDESCRIPTION: Demonstrates setting up a basic GraphQL server using Pothos with graphql-yoga. Creates a simple query field 'hello' that accepts a name argument and returns a greeting string.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport { createYoga } from 'graphql-yoga';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Pothos\nDESCRIPTION: TypeScript configuration to ensure type safety when using Pothos. Sets the 'strict' mode to true in tsconfig.json.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/index.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Query Types in Pothos\nDESCRIPTION: Demonstrates how to define a Query type with different field types including scalar, object, and list responses using builder.queryType(). Shows implementation of a Giraffe object type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/queries-mutations-and-subscriptions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    // Add query for a simple scalar type\n    hello: t.string({\n      resolve: () => 'hello, world!',\n    }),\n    // Add a query for an object type\n    giraffe: t.field({\n      type: Giraffe,\n      resolve: () => ({\n        name: 'James',\n      }),\n    }),\n    // Add a query for a list of objects\n    giraffes: t.field({\n      type: [Giraffe],\n      resolve: () => [\n        {\n          name: 'James',\n        },\n      ],\n    }),\n  }),\n});\n\nconst Giraffe = builder.objectRef<{ name: string }>('Giraffe');\n\nGiraffe.implement({\n  fields: (t) => ({\n    name: t.exposeString('name'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Error Plugin Implementation in TypeScript\nDESCRIPTION: Demonstrates basic setup and usage of the errors plugin with a simple error handling example.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [],\n  },\n});\n\nbuilder.objectType(Error, {\n  name: 'Error',\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      errors: {\n        types: [Error],\n      },\n      args: {\n        name: t.arg.string({ required: false }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.slice(0, 1) !== name.slice(0, 1).toUpperCase()) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Fields for Objects and Interfaces in Pothos\nDESCRIPTION: Demonstrates how to create helper functions that add common fields across multiple object types using Pothos ObjectRef. The example adds 'id' and 'idLength' fields to multiple object types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/patterns.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObjectRef } from '@pothos/core';\nimport builder from './builder';\n\nfunction addCommonFields(refs: ObjectRef<unknown, { id: string }>[]) {\n  for (const ref of refs) {\n    builder.objectFields(ref, (t) => ({\n      id: t.exposeID('id', {}),\n      idLength: t.int({\n        resolve: (parent) => parent.id.length,\n      }),\n    }));\n  }\n}\n\nconst WithCommonFields1 = builder.objectRef<{ id: string }>('WithCommonFields1').implement({});\nconst WithCommonFields2 = builder.objectRef<{ id: string }>('WithCommonFields2').implement({});\n\naddCommonFields([WithCommonFields1, WithCommonFields2]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Prisma Object Types and Queries in TypeScript\nDESCRIPTION: Demonstrates how to create GraphQL types based on Prisma models, including field exposure, relations, and custom query optimization. Shows implementation of query types and prisma fields with proper type safety.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    bio: t.string({\n      select: {\n        profile: {\n          select: {\n            bio: true,\n          },\n        },\n      },\n      resolve: (user) => user.profile.bio,\n    }),\n    posts: t.relation('posts', {\n      args: {\n        oldestFirst: t.arg.boolean(),\n      },\n      query: (args, context) => ({\n        orderBy: {\n          createdAt: args.oldestFirst ? 'asc' : 'desc',\n        },\n      }),\n    }),\n    postsConnection: t.relatedConnection('posts', {\n      cursor: 'id',\n    }),\n  }),\n});\n\nbuilder.prismaNode('Post', {\n  id: { field: 'id' },\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.prismaField({\n      type: 'User',\n      resolve: async (query, root, args, ctx, info) =>\n        prisma.user.findUniqueOrThrow({\n          ...query,\n          where: { id: ctx.userId },\n        }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Object Reference Implementation Pattern\nDESCRIPTION: Demonstrates the correct way to implement object references to avoid circular dependency issues by separating reference creation and implementation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/circular-references.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// May cause issues\nexport const User = builder.objectRef<IUser>('User').implement({...});\n\n// Should be safe\nexport const User = builder.objectRef<IUser>('User')\n\nUser.implement({...});\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Arguments using t.arg Method in Pothos\nDESCRIPTION: This snippet demonstrates how to define scalar arguments using the t.arg method in Pothos. It creates a string field with a string argument.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    string: t.string({\n      args: {\n        string: t.arg({\n          type: 'String',\n          description: 'String arg',\n        }),\n      },\n      resolve: (parent, args) => args.string,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma fields and relations in Pothos\nDESCRIPTION: This code snippet defines a query type and two Prisma object types (`User` and `Post`) using the Pothos framework. It uses `t.prismaField` to fetch a user by ID and `t.relation` to define relations between users and posts, enabling pre-loading of related data.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.prismaField({\n      type: 'User',\n      resolve: async (query, root, args, ctx, info) =>\n        prisma.user.findUniqueOrThrow({\n          ...query,\n          where: { id: ctx.userId },\n        }),\n    }),\n  }),\n});\n\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    posts: t.relation('posts'),\n  }),\n});\n\nbuilder.prismaObject('Post', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Server with Yoga\nDESCRIPTION: Creating and configuring a GraphQL server using graphql-yoga with the Pothos schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http';\nimport { createYoga } from 'graphql-yoga';\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n  context: (ctx) => ({\n    user: { id: Number.parseInt(ctx.request.headers.get('x-user-id') ?? '1', 10) },\n  }),\n});\n\nexport const server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutations in Pothos\nDESCRIPTION: Shows how to implement mutations using builder.mutationType() and builder.mutationField(). Includes examples of mutations with arguments and async operations.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/queries-mutations-and-subscriptions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.mutationType({\n  fields: (t) => ({\n    // Add mutation that returns a simple boolean\n    post: t.boolean({\n      args: {\n        message: t.arg.string(),\n      },\n      resolve: async (root, args) => {\n        // Do something with the message\n        const success = await messageClient.postMessage(args.message);\n\n        return success;\n      },\n    }),\n  }),\n});\n\nbuilder.mutationField('createGiraffe', (t) =>\n  t.field({\n    type: Giraffe,\n    args: {\n      name: t.arg.string(),\n    },\n    resolve: async (root, args) => {\n      const giraffe = {\n        name: args.name,\n      };\n\n      await db.giraffes.create(giraffe);\n\n      return giraffe;\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GraphQL Server with Pothos\nDESCRIPTION: Demonstrates setting up a basic GraphQL server using Pothos with a simple 'hello' query. Shows integration with graphql-yoga and HTTP server setup.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga';\nimport { createServer } from 'node:http';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000, () => {\n  console.log('Visit http://localhost:3000/graphql');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Object Fields with References in Pothos\nDESCRIPTION: This snippet demonstrates how to define an object field using a reference to a type with a backing model in the schema builder. It creates a 'giraffe' field of type 'Giraffe' on the Query type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Objects: { Giraffe: { name: string } };\n}>({});\n\nbuilder.queryType({\n  fields: t => ({\n    giraffe: t.field({\n      description: 'A giraffe'\n      type: 'Giraffe',\n      resolve: () => ({ name: 'Gina' }),\n    }),:\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Error Plugin Integration in TypeScript\nDESCRIPTION: Example demonstrating how to set up the Errors plugin with Pothos SchemaBuilder, create a basic Error type, and implement error handling in a query resolver.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [],\n  },\n});\n\nbuilder.objectType(Error, {\n  name: 'Error',\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      errors: {\n        types: [Error],\n      },\n      args: {\n        name: t.arg.string({ required: false }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.slice(0, 1) !== name.slice(0, 1).toUpperCase()) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Zod Schemas with Client Code - createZodSchema Helper\nDESCRIPTION: Example showing how to use the createZodSchema helper to create and share zod schemas from validation options objects between server and client code.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// shared\nimport { ValidationOptions } from '@pothos/plugin-zod';\n\nconst numberValidation: ValidationOptions<number> = {\n  max: 5,\n};\n\n// server\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.boolean({\n      args: {\n        num: t.arg.int({\n          validate: numberValidation,\n        }),\n      },\n      resolve: () => true,\n    }),\n  });\n});\n\n// client\nimport { createZodSchema } from '@pothos/plugin-zod';\n\nconst validator = createZodSchema(numberValidator);\n\nvalidator.parse(3) // pass\nvalidator.parse('3') // fail\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Schema Builder with Federation Plugin\nDESCRIPTION: Configures the Pothos SchemaBuilder with the DirectivePlugin and FederationPlugin. The federation plugin should be listed after plugins that wrap resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport FederationPlugin from '@pothos/plugin-federation';\nconst builder = new SchemaBuilder({\n  plugins: [DirectivePlugin, FederationPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pothos GraphQL Schema with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a basic Pothos GraphQL schema. It creates a schema builder, defines a Query type with a hello field that returns a string, and builds the schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/complex-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBuilder } from '@hayes/pothos';\n\nconst builder = createBuilder();\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      resolve: () => 'world',\n    }),\n  }),\n});\n\nconst schema = builder.toSchema();\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriptions in Pothos\nDESCRIPTION: Demonstrates how to implement GraphQL subscriptions using builder.subscriptionType() with PubSub pattern for real-time updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/queries-mutations-and-subscriptions.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.mutationType({\n  fields: (t) => ({\n    incrementCount: t.int({\n      resolve: (_parent, _args, ctx) => {\n        ctx.count.value += 1;\n        ctx.pubSub.publish('COUNT_INCREMENT', ctx.count.value);\n        return ctx.count.value;\n      },\n    }),\n  }),\n});\n\nbuilder.subscriptionType({\n  fields: (t) => ({\n    incrementedCount: t.int({\n      subscribe: (_parent, _args, ctx) => ctx.pubSub.subscribe('COUNT_INCREMENT'),\n      resolve: (count) => count,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic GraphQL Server with Pothos\nDESCRIPTION: A basic 'Hello World' example demonstrating how to set up a GraphQL server using Pothos with graphql-yoga. Shows creating a schema builder, defining a query type with a parameterized hello field, and starting an HTTP server.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http';\nimport { createYoga } from 'graphql-yoga';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Exporting Pothos GraphQL Schema in TypeScript\nDESCRIPTION: This snippet demonstrates how to export a built Pothos GraphQL schema. It imports the builder, type definitions, and exports the schema for use in generating client types and potentially in the server.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// schema.ts\n\n// Import the builder\nimport builder from './builder';\n\n// Import your type definitions\nimport './types/Query';\nimport './types/User';\nimport './types/Posts';\n\n// Build and export the schema\nexport const schema = builder.toSchema();\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaTypes Interface in TypeScript\nDESCRIPTION: Type definition for SchemaTypes which configures the schema builder. Includes context, objects, inputs, interfaces, scalars and default field behaviors.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SchemaTypes {\n  // Shape of the context arg in your resolvers\n  Context?: object;\n  // A map of Object type names to their backing models.\n  Objects?: object;\n  // A map of Input type names to their backing models.\n  Inputs?: object;\n  // A map of Interface type names to their backing models.\n  Interfaces?: object;\n  // Map of scalar names to Input and Output shapes.\n  Scalars?: {\n    [s: string]: {\n      Input: unknown;\n      Output: unknown;\n    };\n  };\n  // When set to false, fields will be NonNullable by default\n  DefaultFieldNullability?: false;\n  // When provided, input fields and arguments will be required by default\n  DefaultInputFieldRequiredness?: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Type for Giraffe\nDESCRIPTION: Defining a root Query type with a field that returns a Giraffe object.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    giraffe: t.field({\n      type: GiraffeRef,\n      resolve: () => ({\n        name: 'James',\n        birthday: new Date(Date.UTC(2012, 11, 12)),\n        heightInMeters: 5.2,\n      }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Blog Application\nDESCRIPTION: Complete GraphQL schema for a blog application with User, Post, and Comment types. The schema defines relationships between these entities and includes query operations for fetching posts and users.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/nextjs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]!\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Errors Plugin with Validation Plugin in Pothos\nDESCRIPTION: Example showing how to use the errors plugin with the validation plugin, demonstrating how to define types for handling ZodErrors in the GraphQL schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Util for flattening zod errors into something easier to represent in your Schema.\nfunction flattenErrors(\n  error: ZodFormattedError<unknown>,\n  path: string[],\n): { path: string[]; message: string }[] {\n    const errors = error._errors.map((message) => ({\n    path,\n    message,\n  }));\n\n  Object.keys(error).forEach((key) => {\n    if (key !== '_errors') {\n      errors.push(\n        ...flattenErrors((error as Record<string, unknown>)[key] as ZodFormattedError<unknown>, [\n          ...path,\n          key,\n        ]),\n      );\n    }\n  });\n\n  return errors;\n}\n\n// A type for the individual validation issues\nconst ZodFieldError = builder\n  .objectRef<{\n    message: string;\n    path: string[];\n  }>('ZodFieldError')\n  .implement({\n    fields: (t) => ({\n      message: t.exposeString('message'),\n      path: t.exposeStringList('path'),\n    }),\n  });\n\n// The actual error type\nbuilder.objectType(ZodError, {\n  name: 'ZodError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    fieldErrors: t.field({\n      type: [ZodFieldError],\n      resolve: (err) => flattenErrors(err.format(), []),\n    }),\n  }),\n});\n\nbuilder.queryField('fieldWIthValidation', (t) =>\n  t.boolean({\n    errors: {\n      types: [ZodError],\n    },\n    args: {\n      string: t.arg.string({\n        validate: {\n          type: 'string',\n          minLength: 3,\n        },\n      }),\n    },\n    resolve: () => true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Arguments in Pothos\nDESCRIPTION: This snippet shows how to define fields with arguments in Pothos. It creates a 'giraffeByName' field on the Query type that takes a 'name' argument.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    giraffeByName: t.field({\n      type: 'Giraffe',\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (root, args) => {\n        if (args.name !== 'Gina') {\n          throw new NotFoundError(`Unknown Giraffe ${name}`);\n        }\n\n        return { name: 'Gina' };\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Query Fields in Pothos\nDESCRIPTION: Shows how to add individual query fields using builder.queryField() method. This approach allows for splitting up queries across multiple files.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/queries-mutations-and-subscriptions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// You will still need to define the `Query` type somewhere in your schema to add individual query fields\nbuilder.queryType({});\n\nbuilder.queryField('hello', (t) =>\n  t.string({\n    resolve: () => 'hello, world!',\n  }),\n);\n\nbuilder.queryField('giraffe', (t) =>\n  t.field({\n    type: Giraffe,\n    resolve: () => ({\n      name: 'James',\n    }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Server with Context\nDESCRIPTION: Creates a GraphQL Yoga server with context initialization for user authentication.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/context.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst yoga = createYoga({\n  schema,\n  context: async ({ req }) => ({\n    // This part is up to you!\n    currentUser: await getUserFromAuthHeader(req.headers.authorization),\n  }),\n});\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Fields with Field Method in Pothos\nDESCRIPTION: This snippet demonstrates how to define a scalar field using the field method in Pothos. It creates a 'name' field of type String on the Query type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    name: t.field({\n      description: 'Name field',\n      type: 'String',\n      resolve: () => 'Gina',\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple GraphQL Schema with Pothos\nDESCRIPTION: Demonstrates how to create a basic GraphQL schema using Pothos. Defines a query type with a 'hello' field that accepts an optional 'name' argument.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/index.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst schema = builder.toSchema();\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema Example with Simple Objects\nDESCRIPTION: Comprehensive example showing how to create and use simple objects, interfaces, and queries with the plugin. Demonstrates creating contact info, node interface, user type, and query resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-simple-objects/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\n\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n\nconst ContactInfo = builder.simpleObject('ContactInfo', {\n  fields: (t) => ({\n    email: t.string({\n      nullable: false,\n    }),\n    phoneNumber: t.string({\n      nullable: true,\n    }),\n  }),\n});\n\nconst Node = builder.simpleInterface('Node', {\n  fields: (t) => ({\n    id: t.id({\n      nullable: false,\n    }),\n  }),\n});\n\nconst UserType = builder.simpleObject(\n  'User',\n  {\n    interfaces: [Node],\n    fields: (t) => ({\n      firstName: t.string(),\n      lastName: t.string(),\n      contactInfo: t.field({\n        type: ContactInfo,\n        nullable: false,\n      }),\n    }),\n  },\n  // You can add additional fields with resolvers with a third fields argument\n  (t) => ({\n    fullName: t.string({\n      resolve: (user) => `${user.firstName} ${user.lastName}`,\n    }),\n  }),\n);\n\nbuilder.queryType({\n  fields: (t) => ({\n    user: t.field({\n      type: UserType,\n      args: {\n        id: t.arg.id({ required: true }),\n      },\n      resolve: (parent, args, { User }) => {\n        return {\n          id: '1003',\n          firstName: 'Leia',\n          lastName: 'Organa',\n          contactInfo: {\n            email: 'leia@example.com',\n            phoneNumber: null,\n          },\n        };\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types and Queries\nDESCRIPTION: Core GraphQL schema definition showing types for User, Post, Comment entities and their relationships. Includes Query type with operations for fetching posts and users with pagination support.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]!\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Scalar Arguments in Pothos\nDESCRIPTION: This example demonstrates how to create arguments of non-scalar types, including enums and input types, using the t.arg method.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst LengthUnit = builder.enumType('LengthUnit', {\n  values: { Feet: {}, Meters: {} },\n});\n\nconst Giraffe = builder.objectType('Giraffe', {\n  fields: t => ({\n    height: t.float({\n      args: {\n        unit: t.arg({\n          type: LengthUnit,\n        }),\n      },\n      resolve: (parent, args) =>\n        args.unit === 'Feet' ? parent.heightInMeters * 3.281 : parent.heightInMeters,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Nested List Fields in Pothos\nDESCRIPTION: This snippet shows how to create nested list fields using t.listRef in Pothos. It defines an 'example' field on the Query type that returns a list of lists of strings, with nullable inner lists.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    example: t.field({\n      type: t.listRef(\n        t.listRef('String'),\n        // items are non-nullable by default, this can be overridden\n        // by passing `nullable: true`\n        { nullable: true },\n      ),\n      resolve: (parent, args) => {\n        return [['a', 'b'], ['c', 'd'], null];\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Pothos\nDESCRIPTION: This schema defines a GraphQL API with User, Post, and Comment types and their relationships. It includes Query type with methods to fetch posts and users, supporting pagination for posts.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/helix/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]!\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface in Object Type Definition\nDESCRIPTION: Shows how to implement an interface in a Pothos object type definition. Defines a Giraffe type that implements the Animal interface with isTypeOf check for runtime type verification.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/interfaces.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(Giraffe, {\n  name: 'Giraffe',\n  interfaces: [Animal],\n  isTypeOf: (value) => value instanceof Giraffe,\n  fields: (t) => ({\n    name: t.exposeString('name', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Loadable Object Type in Pothos\nDESCRIPTION: Example of defining a loadable object type 'User' with a loader function that fetches users by their IDs. This demonstrates the core builder.loadableObject method for creating entities that can be batch-loaded.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  // load will be called with ids of users that need to be loaded\n  // Note that the types for keys (and context if present) are required\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    username: t.string({\n      // the shape of parent will be inferred from `loadUsersById()` above\n      resolve: (parent) => parent.username,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Input Objects with Pothos\nDESCRIPTION: Demonstrates how to create a basic input type using builder.inputType and implement it in a mutation. The example creates a GiraffeInput type with name, birthdate, and height fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inputs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst GiraffeInput = builder.inputType('GiraffeInput', {\n  fields: (t) => ({\n    name: t.string({ required: true }),\n    birthdate: t.string({ required: true }),\n    height: t.float({ required: true }),\n  }),\n});\n\nbuilder.mutationType({\n  fields: (t) => ({\n    createGiraffe: t.field({\n      type: Giraffe,\n      args: {\n        input: t.arg({ type: GiraffeInput, required: true }),\n      },\n      resolve: (root, args) =>\n        new Giraffe(args.input.name, new Date(args.input.birthdate), args.input.height),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Schema with Smart Subscriptions Plugin - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set up a Pothos SchemaBuilder with the Smart Subscriptions Plugin. Key parameters include debounceDelay and subscribe/unsubscribe callbacks. It integrates Smart Subscriptions into the schema, enabling the registration and management of subscriptions for GraphQL queries.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SmartSubscriptionsPlugin from '@pothos/plugin-smart-subscriptions';\n\nconst builder = new SchemaBuilder({\n  plugins: [SmartSubscriptionsPlugin],\n  smartSubscriptions: {\n    debounceDelay: number | null;\n    subscribe: (\n      name: string,\n      context: Context,\n      cb: (err: unknown, data?: unknown) => void,\n    ) => Promise<void> | void;\n    unsubscribe: (name: string, context: Context) => Promise<void> | void;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL types with Prisma models\nDESCRIPTION: This snippet demonstrates how to create GraphQL object types (User and Post) using the `builder.objectRef` method and link them to Prisma models. It defines fields for each type and uses Prisma queries to resolve the relationships between them, such as fetching a user's posts or a post's author.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/without-a-plugin.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Post, PrismaClient, User } from '@prisma/client';\n\nconst db = new PrismaClient();\nconst UserObject = builder.objectRef<User>('User');\nconst PostObject = builder.objectRef<Post>('Post');\n\nUserObject.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    posts: t.field({\n      type: [PostObject],\n      resolve: (user) =>\n        db.post.findMany({\n          where: { authorId: user.id },\n        }),\n    }),\n  }),\n});\n\nPostObject.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    title: t.exposeString('title'),\n    author: t.field({\n      type: UserObject,\n      resolve: (post) => db.user.findUniqueOrThrow({ where: { id: post.authorId } }),\n    }),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.field({\n      type: UserObject,\n      resolve: (root, args, ctx) => db.user.findUniqueOrThrow({ where: { id: ctx.userId } }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up SchemaBuilder with Add GraphQL Plugin\nDESCRIPTION: This snippet illustrates the setup of a SchemaBuilder in TypeScript by incorporating the AddGraphQLPlugin. This setup is essential for adding existing GraphQL schemas to the Pothos API.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AddGraphQLPlugin from '@pothos/plugin-add-graphql';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Authorization Rules\nDESCRIPTION: Example showing how to add authorization rules to specific query fields using the AuthZ plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    users: t.field({\n      type: [User],\n      authz: {\n        rules: ['IsAuthenticated'],\n      },\n      resolve: () => users,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Base Classes for Animal Interface in TypeScript\nDESCRIPTION: Defines the base Animal class, Giraffe subclass, and Diet enum that will be used to demonstrate interface implementations in Pothos. The Animal class serves as the interface blueprint while Giraffe implements specific properties.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/interfaces.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Animal {\n  diet: Diet;\n\n  constructor(diet: Diet) {\n    this.diet = diet;\n  }\n}\n\nexport class Giraffe extends Animal {\n  name: string;\n  birthday: Date;\n  heightInMeters: number;\n\n  constructor(name: string, birthday: Date, heightInMeters: number) {\n    super(Diet.HERBIVOROUS);\n\n    this.name = name;\n    this.birthday = birthday;\n    this.heightInMeters = heightInMeters;\n  }\n}\nexport enum Diet {\n  HERBIVOROUS,\n  CARNIVOROUS,\n  OMNIVORIOUS,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma Fields to Pothos Query\nDESCRIPTION: Introduces `t.prismaField` for defining fields in queries that resolve to Prisma types. Requires Pothos and Prisma clients. The `resolve` function utilizes a `query` parameter for nesting and optimizing data loading.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/objects.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.prismaField({\n      type: 'User',\n      resolve: async (query, root, args, ctx, info) =>\n        prisma.user.findUniqueOrThrow({\n          ...query,\n          where: { id: ctx.userId },\n        }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Loadable User Object\nDESCRIPTION: Defines a User type as a loadable object with a load function that fetches users by ID and exposes fields on the type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  // load will be called with ids of users that need to be loaded\n  // Note that the types for keys (and context if present) are required\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    username: t.string({\n      // the shape of parent will be inferred from `loadUsersById()` above\n      resolve: (parent) => parent.username,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining List Arguments in Pothos\nDESCRIPTION: This example demonstrates how to create list arguments by wrapping the type in an array or using helpers. It shows both string list and array of strings approaches.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    giraffeNameChecker: t.booleanList({\n      args: {\n        names: t.arg.stringList({\n          required: true,\n        }),\n        moreNames: t.arg({\n          type: ['String'],\n          required: true,\n        }),\n      },\n      resolve: (parent, args) => {\n        return [...args.names, ...args.moreNames].filter((name) =>\n          ['Gina', 'James'].includes(name),\n        );\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Hello World GraphQL Server with Pothos\nDESCRIPTION: A basic example showing how to create a GraphQL server with Pothos that implements a hello world query with an optional name parameter.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'graphql-yoga';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string({}),\n      },\n      resolve: (_, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nserve(yoga, {\n  onListen({ hostname, port }) {\n    console.log(`Listening on http://${hostname}:${port}/graphql`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Type Names in Pothos\nDESCRIPTION: Shows how to set up custom naming functions for the generated result and union types in the errors plugin configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const builderWithCustomErrorTypeNames = new SchemaBuilder<{}>({ \n  plugins: [ErrorPlugin, ValidationPlugin],\n  errors: {\n    defaultTypes: [Error],\n    defaultResultOptions: {\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_Custom`,\n    },\n    defaultUnionOptions: {\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_Custom`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Nullable Fields in Pothos\nDESCRIPTION: This snippet shows how to define non-nullable fields in Pothos. It demonstrates creating non-nullable scalar fields, non-nullable lists, and lists with nullable items.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    nonNullableField: t.field({\n      type: 'String',\n      nullable: false,\n      resolve: () => null,\n    }),\n    nonNullableString: t.string({\n      nullable: false,\n      resolve: () => null,\n    }),\n    nonNullableList: t.field({\n      type: ['String'],\n      nullable: false,\n      resolve: () => null,\n    }),\n    sparseList: t.field({\n      type: ['String'],\n      nullable: {\n        list: false,\n        items: true,\n      },\n      resolve: () => [null],\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Errors Plugin with Pothos GraphQL Schema Builder\nDESCRIPTION: Example showing how to initialize the Pothos schema builder with the Errors plugin and create a basic query with error handling. The code demonstrates setting up an Error object type and defining a query field that can throw errors.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [],\n  },\n});\n\nbuilder.objectType(Error, {\n  name: 'Error',\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      errors: {\n        types: [Error],\n      },\n      args: {\n        name: t.arg.string({ required: false }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.slice(0, 1) !== name.slice(0, 1).toUpperCase()) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Query Types with Context Usage\nDESCRIPTION: Implements query types that utilize the context object to access the current user and expose user fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/context.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    currentUser: t.field({\n      type: User,\n      resolve: (root, args, context) => context.currentUser,\n    }),\n  }),\n});\n\nbuilder.objectType(User, {\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    firstName: t.exposeString('firstName', {}),\n    username: t.exposeString('username', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types with Pothos Schema Builder\nDESCRIPTION: Demonstrates how to define Union types with a list of object types, including type definitions and resolution logic. Shows implementation of GiraffeFact union type with string and numeric variants.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/unions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Objects: {\n    GiraffeStringFact: { factKind: 'string'; fact: string };\n    GiraffeNumericFact: { factKind: 'number'; fact: string; value: number };\n  };\n}>({});\n\nbuilder.objectType('GiraffeStringFact', {\n  fields: (t) => ({\n    fact: t.exposeString('fact', {}),\n  }),\n});\n\nconst GiraffeNumericFact = builder.objectType('GiraffeNumericFact', {\n  fields: (t) => ({\n    fact: t.exposeString('fact', {}),\n    value: t.exposeFloat('value', {}),\n  }),\n});\n\nconst GiraffeFact = builder.unionType('GiraffeFact', {\n  types: ['GiraffeStringFact', GiraffeNumericFact],\n  resolveType: (fact) => {\n    switch (fact.factKind) {\n      case 'number':\n        return GiraffeNumericFact;\n      case 'string':\n        return 'GiraffeStringFact';\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Type-Level Authorization\nDESCRIPTION: Examples of implementing type-level authorization and field-specific scope overrides.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Context: Context;\n  AuthScopes: {\n    loggedIn: boolean;\n  };\n}>({\n  scopeAuth: {\n    runScopesOnType: true,\n    authScopes: async (context) => ({\n      loggedIn: !!context.User,\n    }),\n  },\n  plugins: [ScopeAuthPlugin],\n});\n\nbuilder.objectType(Article, {\n  runScopesOnType: true,\n  authScopes: {\n    readArticle: true,\n  },\n  fields: (t) => ({\n    title: t.exposeString('title', {\n      skipTypeScopes: true,\n    }),\n    content: t.exposeString('title', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Methods for Scalar Fields in Pothos\nDESCRIPTION: This snippet shows how to use convenience methods to define various scalar fields (id, int, float, boolean, string) and their list counterparts on the Query type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    id: t.id({ resolve: () => '123' }),\n    int: t.int({ resolve: () => 123 }),\n    float: t.float({ resolve: () => 1.23 }),\n    boolean: t.boolean({ resolve: () => false }),\n    string: t.string({ resolve: () => 'abc' }),\n    idList: t.idList({ resolve: () => ['123'] }),\n    intList: t.intList({ resolve: () => [123] }),\n    floatList: t.floatList({ resolve: () => [1.23] }),\n    booleanList: t.booleanList({ resolve: () => [false] }),\n    stringList: t.stringList({ resolve: () => ['abc'] }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in Queries\nDESCRIPTION: Shows how to use the defined Union types in a query field, returning an array of mixed fact types. Demonstrates practical implementation with concrete examples of both string and numeric facts.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/unions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryField('giraffeFacts', (t) =>\n  t.field({\n    type: [GiraffeFact],\n    resolve: () => {\n      const fact1 = {\n        factKind: 'string',\n        fact: 'A giraffe's spots are much like human fingerprints. No two individual giraffes have exactly the same pattern',\n      } as const;\n\n      const fact2 = {\n        factKind: 'number',\n        fact: 'Top speed (MPH)',\n        value: 35,\n      } as const;\n\n      return [fact1, fact2];\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Zod Plugin Setup with Field Validation\nDESCRIPTION: Example showing how to initialize the SchemaBuilder with ZodPlugin and implement basic field argument validation.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ZodPlugin from '@pothos/plugin-zod';\nconst builder = new SchemaBuilder({\n  plugins: [ZodPlugin],\n  zod: {\n    // optionally customize how errors are formatted\n    validationError: (zodError, args, context, info) => {\n      // the default behavior is to just throw the zod error directly\n      return zodError;\n    },\n  },\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    simple: t.boolean({\n      args: {\n        // Validate individual args\n        email: t.arg.string({\n          validate: {\n            email: true,\n          },\n        }),\n        phone: t.arg.string(),\n      },\n      // Validate all args together\n      validate: (args) => !!args.phone || !!args.email,\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SchemaBuilder Default Nullability Settings in TypeScript\nDESCRIPTION: Examples showing how to configure SchemaBuilder to change default nullability for output fields and required status for input fields. Demonstrates setting type parameters and builder options for both scenarios.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/changing-default-nullability.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a Builder that makes output fields nullable by default\nexport const builder = new SchemaBuilder<{\n  DefaultFieldNullability: false;\n}>({\\n  defaultFieldNullability: false,\n});\n\n// Create a Builder that makes input fields and arguments required by default\nexport const builder = new SchemaBuilder<{\n  DefaultInputFieldRequiredness: true;\n}>({\\n  defaultInputFieldRequiredness: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Interface Pattern in TypeScript\nDESCRIPTION: Recommended approach for error handling, showing how to set up an Error interface, BaseError type, and custom error classes that implement the interface for consistent querying.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [Error],\n  },\n});\n\nconst ErrorInterface = builder.interfaceRef<Error>('Error').implement({\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.objectType(Error, {\n  name: 'BaseError',\n  interfaces: [ErrorInterface],\n});\n\nclass LengthError extends Error {\n  minLength: number;\n\n  constructor(minLength: number) {\n    super(`string length should be at least ${minLength}`);\n\n    this.minLength = minLength;\n    this.name = 'LengthError';\n  }\n}\n\nbuilder.objectType(LengthError, {\n  name: 'LengthError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    minLength: t.exposeInt('minLength'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    // Simple error handling just using base error class\n    hello: t.string({\n      errors: {},\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (!name.startsWith(name.slice(0, 1).toUpperCase())) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n    // Handling custom errors\n    helloWithMinLength: t.string({\n      errors: {\n        types: [LengthError],\n      },\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.length < 5) {\n          throw new LengthError(5);\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Positive Integer Scalar\nDESCRIPTION: Illustrates creating a custom scalar type with value validation to ensure only positive integers are accepted\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/scalars.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Scalars: {\n    PositiveInt: {\n      Input: number;\n      Output: number;\n    };\n  };\n}>({});\n\nbuilder.scalarType('PositiveInt', {\n  serialize: (n) => n,\n  parseValue: (n) => {\n    if (n >= 0) {\n      return n;\n    }\n\n    throw new Error('Value must be positive');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Objects and Interfaces Using Simple Objects Plugin in Pothos\nDESCRIPTION: Provides an example of defining a simple object and interface with fields in Pothos using the Simple Objects Plugin. Includes fields with nullable options and a fullName resolver. Dependencies include '@pothos/core' and '@pothos/plugin-simple-objects'.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/simple-objects.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\n\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n\nconst ContactInfo = builder.simpleObject('ContactInfo', {\n  fields: (t) => ({\n    email: t.string({\n      nullable: false,\n    }),\n    phoneNumber: t.string({\n      nullable: true,\n    }),\n  }),\n});\n\nconst Node = builder.simpleInterface('Node', {\n  fields: (t) => ({\n    id: t.id({\n      nullable: false,\n    }),\n  }),\n});\n\nconst UserType = builder.simpleObject(\n  'User',\n  {\n    interfaces: [Node],\n    fields: (t) => ({\n      firstName: t.string(),\n      lastName: t.string(),\n      contactInfo: t.field({\n        type: ContactInfo,\n        nullable: false,\n      }),\n    }),\n  },\n  // You can add additional fields with resolvers with a third fields argument\n  (t) => ({\n    fullName: t.string({\n      resolve: (user) => `${user.firstName} ${user.lastName}`,\n    }),\n  }),\n);\n\nbuilder.queryType({\n  fields: (t) => ({\n    user: t.field({\n      type: UserType,\n      args: {\n        id: t.arg.id({ required: true }),\n      },\n      resolve: (parent, args, { User }) => {\n        return {\n          id: '1003',\n          firstName: 'Leia',\n          lastName: 'Organa',\n          contactInfo: {\n            email: 'leia@example.com',\n            phoneNumber: null,\n          },\n        };\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Using Dataloaders in Pothos\nDESCRIPTION: Example showing how to manually access and use dataloaders within resolvers. Demonstrates creating a loadable object and then accessing its dataloader via the getDataloader method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// create loadable object\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n\nbuilder.queryField('user', (t) =>\n  t.field({\n    type: User,\n    resolve: (parent, args, context) => {\n      // get data loader for User type\n      const loader = User.getDataloader(context);\n\n      // manually load a user\n      return loader.load('123');\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Input Fields in Pothos\nDESCRIPTION: Demonstrates how to create reusable input field definitions that can be applied to multiple input types in a Pothos schema. Shows implementation with type-safe field definitions.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/patterns.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InputFieldBuilder } from '@pothos/core';\nimport builder, { TypesWithDefault } from './builder';\n\nfunction createInputFields(t: InputFieldBuilder<TypesWithDefault, 'InputObject'>) {\n  return {\n    id: t.id({}),\n    reason: t.field({ type: 'String', required: false }),\n  };\n}\n\nbuilder.inputType('InputWithCommonFields1', {\n  fields: (t) => ({\n    ...createInputFields(t),\n  }),\n});\n\nbuilder.inputType('InputWithCommonFields2', {\n  fields: (t) => ({\n    ...createInputFields(t),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Composite Authorization Rules\nDESCRIPTION: Example of defining composite authorization rules using OR logic between multiple rules.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst Post = builder.objectRef<IPost>('Post');\n\nPost.implement({\n  authz: {\n    compositeRules: [{ or: ['CanReadPost', 'IsAdmin'] }],\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Schema Builder with Prisma Plugin\nDESCRIPTION: Sets up the Pothos schema builder with the Prisma plugin. This involves importing necessary modules, initializing the Prisma client, and configuring the builder with the Prisma plugin and client. It also showcases various configuration options for the plugin, such as exposing descriptions and filtering connection total counts.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"import SchemaBuilder from '@pothos/core';\\nimport { PrismaClient } from '@prisma/client';\\nimport PrismaPlugin from '@pothos/plugin-prisma';\\n// This is the default location for the generator, but this can be\\n// customized as described above.\\n// Using a type only import will help avoid issues with undeclared\\n// exports in esm mode\\nimport type PrismaTypes from '@pothos/plugin-prisma/generated';\\n\\nconst prisma = new PrismaClient({});\\n\\nconst builder = new SchemaBuilder<{\\n  PrismaTypes: PrismaTypes;\\n}>({\\n  plugins: [PrismaPlugin],\\n  prisma: {\\n    client: prisma,\\n    // defaults to false, uses /// comments from prisma schema as descriptions\\n    // for object types, relations and exposed fields.\\n    // descriptions can be omitted by setting description to false\\n    exposeDescriptions: boolean | { models: boolean, fields: boolean },\\n    // use where clause from prismaRelatedConnection for totalCount (defaults to true)\\n    filterConnectionTotalCount: true,\\n    // warn when not using a query parameter correctly\\n    onUnusedQuery: process.env.NODE_ENV === 'production' ? null : 'warn',\\n  },\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Object Helper with Inferred Schema Types\nDESCRIPTION: Shows how to create a helper function for objects with ID fields using builder.$inferSchemaTypes to access the builder's type configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inferring-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype BuilderTypes = typeof builder.$inferSchemaTypes;\n\nfunction createObjectWithId<T extends { id: string }>(\n  name: string,\n  fields: (t: PothosSchemaTypes.ObjectFieldBuilder<BuilderTypes, T>) => FieldMap,\n) {\n  const ref = builder.objectRef<T>(name);\n\n  ref.implement({\n    fields: (t) => ({\n      ...fields(t),\n      id: t.id({\n        resolve: (parent) => parent.id,\n        nullable: false,\n      }),\n    }),\n  });\n\n  return ref;\n}\n\ncreateObjectWithId<{\n  id: string;\n  name: string;\n}>('User', (t) => ({\n  name: t.exposeString('name'),\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Scope Auth Plugin\nDESCRIPTION: Basic setup of the Pothos schema builder with scope auth plugin, including type definitions and scope initialization.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport ScopeAuthPlugin from '@pothos/plugin-scope-auth';\n\ntype MyPerms = 'readStuff' | 'updateStuff' | 'readArticle';\n\nconst builder = new SchemaBuilder<{\n  AuthScopes: {\n    public: boolean;\n    employee: boolean;\n    deferredScope: boolean;\n    customPerm: MyPerms;\n  };\n}>({ \n  plugins: [ScopeAuthPlugin],\n  scopeAuth: {\n    authorizeOnSubscribe: true,\n    authScopes: async (context) => ({\n      public: !!context.User,\n      employee: await context.User.isEmployee(),\n      deferredScope: () => context.User.isEmployee(),\n      customPerm: (perm) => context.permissionService.hasPermission(context.User, perm),\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma Node with ID Field\nDESCRIPTION: This code snippet defines a Prisma node for the 'Post' model using `builder.prismaNode`. It specifies the database field 'id' to use for the node's ID and exposes the 'title' field as a string and the 'author' as a relation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relay.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaNode('Post', {\n  // This set's what database field to use for the nodes id field\n  id: { field: 'id' },\n  // fields work just like they do for builder.prismaObject\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Helper for Async Iterators with Smart Subscriptions - TypeScript\nDESCRIPTION: This snippet provides a utility function to integrate async iterators with smart subscriptions by creating subscription options from an async iterable iterator using Pothos's plugin mechanism.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  smartSubscriptions: {\n    ...subscribeOptionsFromIterator((name, { pubsub }) => {\n      return pubsub.asyncIterableIterator(name);\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing User Class and SchemaBuilder with Context Type\nDESCRIPTION: Defines a User class with basic properties and creates a SchemaBuilder instance with a typed Context containing currentUser.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/context.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  id: string;\n  firstName: string;\n  username: string;\n\n  constructor(id: string, firstName: string, username: string) {\n    this.id = id;\n    this.firstName = firstName;\n    this.username = username;\n  }\n}\n\nconst builder = new SchemaBuilder<{\n  Context: {\n    currentUser: User;\n  };\n}>({});\n```\n\n----------------------------------------\n\nTITLE: Implementing Relations Between Drizzle Objects\nDESCRIPTION: Demonstrates how to expose Drizzle table relationships as GraphQL fields, automatically mapping the relation structure defined in the Drizzle schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.drizzleObject('profiles', {\n  name: 'Profile',\n  fields: (t) => ({\n    bio: t.exposeString('bio'),\n  }),\n});\n\nbuilder.drizzleObject('posts', {\n  name: 'Post',\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n\nbuilder.drizzleObject('users', {\n  name: 'User',\n  fields: (t) => ({\n    firstName: t.exposeString('first_name'),\n    profile: t.relation('profile'),\n    posts: t.relation('posts'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing Entities in Pothos\nDESCRIPTION: Demonstrates how to define an object type and convert it to an entity by providing a key and a method to load the entity. This example creates a User entity.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserType = builder.objectRef<User>('User').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    name: t.exposeString('name'),\n    username: t.exposeString('username'),\n  }),\n});\n\nbuilder.asEntity(UserType, {\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: (user, users) => users.find(({ id }) => user.id === id),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Entities in Pothos\nDESCRIPTION: Creating an entity type with key fields and reference resolution for federation\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserType = builder.objectRef<User>('User').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    name: t.exposeString('name'),\n    username: t.exposeString('username'),\n  }),\n});\n\nbuilder.asEntity(UserType, {\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: (user, users) => users.find(({ id }) => user.id === id),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a GraphQL Server with GraphQL Yoga\nDESCRIPTION: Shows how to create a GraphQL server using graphql-yoga and the schema generated by Pothos. Sets up an HTTP server listening on port 3000.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/index.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga';\nimport { createServer } from 'node:http';\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Object Types with Pothos\nDESCRIPTION: Defines object types in Pothos using Prisma models. Dependencies include Pothos and Prisma. The `name` is the model this type represents, while `options` define fields and object behavior, leveraging Pothos for type integration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/objects.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  // Optional name for the object, defaults to the name of the prisma model\n  name: 'PostAuthor',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n  }),\n});\n\nbuilder.prismaObject('Post', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    title: t.exposeString('title'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Context Modification with Auth Scopes\nDESCRIPTION: Demonstrates how to modify TypeScript context types based on authentication scopes, providing better type safety in resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Context = {\n  user: User | null;\n};\n\nconst builder = new SchemaBuilder<{\n  Context: Context;\n  AuthScopes: {\n    loggedIn: boolean;\n  };\n  AuthContexts: {\n    loggedIn: Context & { user: User };\n  };\n}>({\n  plugins: [ScopeAuthPlugin],\n  authScopes: async (context) => ({\n    loggedIn: !!context.user,\n  }),\n});\n\nbuilder.queryField('currentId', (t) =>\n  t.authField({\n    type: 'ID',\n    authScopes: {\n      loggedIn: true,\n    },\n    resolve: (parent, args, context) => context.user.id,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Level Authorization Rules\nDESCRIPTION: Implementation of authorization rules at the type level using objectRef.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Post = builder.objectRef<IPost>('Post');\n\nPost.implement({\n  authz: {\n    rules: ['CanReadPost'],\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SchemaBuilder with Multiple Pothos Plugins\nDESCRIPTION: Demonstrates how to integrate the Drizzle plugin with other Pothos plugins like Relay and WithInput for enhanced functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as schema from './schema';\nimport { drizzle } from 'drizzle-orm/...';\nimport SchemaBuilder from '@pothos/core';\nimport DrizzlePlugin from '@pothos/plugin-drizzle';\nimport RelayPlugin from '@pothos/plugin-scope-auth';\nimport WithInputPlugin from '@pothos/plugin-with-input';\n\nconst db = drizzle(client, { schema });\n\nexport interface PothosTypes {\n  DrizzleSchema: typeof schema;\n}\n\nconst builder = new SchemaBuilder<PothosTypes>({\n  plugins: [RelayPlugin, WithInputPlugin, DrizzlePlugin],\n  drizzle: {\n    client: db,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Selections to Fields (TypeScript)\nDESCRIPTION: This example demonstrates how to add custom selections to specific fields within a Prisma object using Pothos.  It uses the `select` option within a field definition to specify which nested fields should be included in the query when that particular field is queried. This enables fine-grained control over the data loaded from the database.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/selections.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nbuilder.prismaObject('User', {\n  select: {\n    id: true,\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    bio: t.string({\n      // This will select user.profile.bio when the the `bio` field is queried\n      select: {\n        profile: {\n          select: {\n            bio: true,\n          },\n        },\n      },\n      resolve: (user) => user.profile.bio,\n    }),\n  }),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Circular Reference Example in TypeScript\nDESCRIPTION: Demonstrates how Pothos handles circular references between User and Post types by deferring field resolution until schema building time.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/circular-references.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// user.ts\nimport { Post } from './post'\n\nexport const User = builder.objectType('User', {\n    fields: t => ({ posts: t.expose('posts', { type: [Post]}) }),\n})\n\n// post.ts\nimport { User } from './user'\n\nexport const Post = builder.objectType('Post', {\n    fields: t => ({ author: t.expose('author', {{ type: User }}) }),\n})\n\n// schema.js\nexport const schema = builder.toSchema()\n```\n\n----------------------------------------\n\nTITLE: Using Context Dataloader Helpers in Resolvers\nDESCRIPTION: Example showing how to use the context helper methods for dataloaders in GraphQL resolvers. Demonstrates four different approaches to loading data using the context helpers defined previously.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  fromContext1: t.field({\n    type: User,\n    resolve: (root, args, { userLoader }) => userLoader.load('123'),\n  }),\n  fromContext2: t.field({\n    type: User,\n    resolve: (root, args, { getLoader }) => getLoader(User).load('456'),\n  }),\n  fromContext3: t.field({\n    type: User,\n    resolve: (root, args, { load }) => load(User, '789'),\n  }),\n  fromContext4: t.field({\n    type: [User],\n    resolve: (root, args, { loadMany }) => loadMany(User, ['123', '456']),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Pothos Schema Builder with Federation Plugin\nDESCRIPTION: Setting up the schema builder with Federation and Directive plugins\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport FederationPlugin from '@pothos/plugin-federation';\nconst builder = new SchemaBuilder({\n  plugins: [DirectivePlugin, FederationPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Extended Options for Field Subscriptions - TypeScript\nDESCRIPTION: Expands upon field subscriptions by introducing filtering and cache invalidation options for the 'answers' field in a 'Poll' object. It enables re-fetching capabilities and control over subscription-triggered updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      type: ['Answer'],\n      canRefetch: true,\n      subscribe: (subscriptions, poll) =>\n        subscriptions.register(`poll-answers/${poll.id}`, {\n          filter: (value) => true | false,\n          invalidateCache: (value) => context.PollCache.remove(poll.id),\n        }),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types with Pothos\nDESCRIPTION: A GraphQL schema definition that establishes the core types - User, Post, Comment, and Query. The schema includes relationships between entities and defines the main query entry points for fetching posts and users.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/graphql-shield/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Type Definition in Pothos\nDESCRIPTION: Demonstrates how to define an interface type and enum in Pothos using the builder pattern. Creates an AnimalFromClass interface with a diet field and defines the Diet enum type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/interfaces.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.interfaceType(Animal, {\n  name: 'AnimalFromClass',\n  fields: (t) => ({\n    diet: t.expose('diet', {\n      type: Diet,\n    }),\n  }),\n});\n\nbuilder.enumType(Diet, {\n  name: 'Diet',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Object Variant (Member) in Pothos\nDESCRIPTION: This code defines another 'User' Prisma object with the 'Member' variant, also implementing the 'User' interface. It exposes the 'bio' string field. Similar to the 'Admin' variant, it inherits the fields from the 'User' interface.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/interfaces.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  variant: 'Member',\n  interfaces: [User],\n  fields: (t) => ({\n    bio: t.exposeString('bio'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Relations\nDESCRIPTION: This code snippet demonstrates how to add arguments, filtering and sorting to a relation using the `query` option. It defines a boolean argument `oldestFirst` to control the sorting order of posts by creation date.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    posts: t.relation('posts', {\n      // We can define arguments like any other field\n      args: {\n        oldestFirst: t.arg.boolean(),\n      },\n      // Then we can generate our query conditions based on the arguments\n      query: (args, context) => ({\n        orderBy: {\n          createdAt: args.oldestFirst ? 'asc' : 'desc',\n        },\n      }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Object Reference in Pothos\nDESCRIPTION: Creating an ObjectRef for the Giraffe type using SchemaBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({});\nconst GiraffeRef = builder.objectRef<Giraffe>('Giraffe');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pothos with SubGraph Plugin\nDESCRIPTION: Example showing how to initialize a Pothos schema builder with the SubGraph plugin and configure subgraph options. It also shows how to generate different schema variants.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-sub-graph/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SubGraphPlugin from '@pothos/plugin-sub-graph';\nconst builder = new SchemaBuilder<{\n  SubGraphs: 'Public' | 'Internal';\n}>({\n  plugins: [SubGraphPlugin],\n  subGraphs: {\n    defaultForTypes: [],\n    fieldsInheritFromTypes: true,\n  },\n});\n\n//in another file:\n\nconst schema = builder.toSchema();\nconst publicSchema = builder.toSchema({ subGraph: 'Public' });\nconst internalSchema = builder.toSchema({ subGraph: 'Internal' });\n\n// You can also build a graph using multiple subgraphs:\nconst combinedSchema = builder.toSchema({ subGraph: ['Internal', 'Public'] });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Field Mocking in Pothos\nDESCRIPTION: Example showing how to define a query field and mock its resolver. Demonstrates creating a field with an unimplemented resolver and providing a mock implementation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/mocks.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Query: {\n      someField: (parent, args, context, info) => 'Mock result!',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Subscription Query Field - TypeScript\nDESCRIPTION: Defines a query field 'polls' with smart subscriptions turned on, registers 'poll-added' and 'poll-deleted' events. It demonstrates setting up a subscription logic for a query field, handling both the subscription registration and resolution of subscribed data.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  polls: t.field({\n    type: ['Poll'],\n    smartSubscription: true,\n    subscribe: (subscriptions, root, args, ctx, info) => {\n      subscriptions.register('poll-added')\n      subscriptions.register('poll-deleted')\n    },\n    resolve: (root, args, ctx, info) => {\n      return ctx.getThings();\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Using loadableList for One-to-Many Relationships\nDESCRIPTION: Example showing how to use the loadableList method for one-to-many relationships, specifically loading posts for a user. This handles the case of loading a list of records from a single ID.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Loading multiple Posts\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadableList({\n    // type is singular, but will create a list field\n    type: Post,\n    // will be called with ids of all the users, and should return `Post[][]`\n    load: (ids: number[], context) => context.postsByUserIds(ids),\n    resolve: (user, args) => user.id,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Giraffe Interface Type in TypeScript\nDESCRIPTION: TypeScript interface definition for a Giraffe object with basic properties including name, birthday, and height.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Giraffe {\n  name: string;\n  birthday: Date;\n  heightInMeters: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Subscription Options\nDESCRIPTION: Extended field subscription configuration with filtering, cache invalidation, and refetch capabilities\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      type: ['Answer'],\n      canRefetch: true,\n      subscribe: (subscriptions, poll) =>\n        subscriptions.register(`poll-answers/${poll.id}`, {\n          filter: (value) => true | false,\n          invalidateCache: (value) => context.PollCache.remove(poll.id),\n        }),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Relay-Compatible API with Prisma\nDESCRIPTION: A complete GraphQL schema demonstrating a Relay-compatible API with Node interfaces, connections for pagination, and proper type relationships. The schema includes User, Post, and Comment types with appropriate relationships and query capabilities.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-relay/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment implements Node {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype Post implements Node {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  node(id: ID!): Node\n  nodes(ids: [ID!]!): [Node]!\n  post(id: ID!): Post\n  posts(after: ID, before: ID, first: Int, last: Int): QueryPostsConnection!\n  user(id: ID!): User\n}\n\ntype QueryPostsConnection {\n  edges: [QueryPostsConnectionEdge]!\n  pageInfo: PageInfo!\n}\n\ntype QueryPostsConnectionEdge {\n  cursor: String!\n  node: Post!\n}\n\ntype User implements Node {\n  comments(after: ID, before: ID, first: Int, last: Int): UserCommentsConnection!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n\ntype UserCommentsConnection {\n  edges: [UserCommentsConnectionEdge]!\n  pageInfo: PageInfo!\n}\n\ntype UserCommentsConnectionEdge {\n  cursor: String!\n  node: Comment!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Indirect Relations with nestedSelection in Typescript\nDESCRIPTION: Illustrates how to define a GraphQL field that exposes data from a nested relationship, commonly used for many-to-many relations using a custom join table (e.g., PostMedia). It explains how `nestedSelection` passed to `select` is used to pre-load relations based on the GraphQL query.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/indirect-relations.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostDraft = builder.prismaObject('Post', {\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    media: t.field({\n      select: (args, ctx, nestedSelection) => ({\n        media: {\n          select: {\n            // This will look at what fields are queried on Media\n            // and automatically select uploadedBy if that relation is requested\n            media: nestedSelection(\n              // This arument is the default query for the media relation\n              // It could be something like: `{ select: { id: true } }` instead\n              true,\n            ),\n          },\n        },\n      }),\n      type: [Media],\n      resolve: (post) => post.media.map(({ media }) => media),\n    }),\n  }),\n});\n\nconst Media = builder.prismaObject('Media', {\n  select: {\n    id: true,\n  },\n  fields: (t) => ({\n    url: t.exposeString('url'),\n    uploadedBy: t.relation('uploadedBy'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Atomic Integer Update Operations\nDESCRIPTION: Example of defining input types for atomic operations on integer fields like increment and decrement.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst IntUpdate = builder.prismaIntAtomicUpdate();\n// or with options\nconst IntUpdate = builder.prismaIntAtomicUpdate({\n  name: 'IntUpdate',\n  ops: ['increment', 'decrement'],\n});\n\nexport const PostUpdate = builder.prismaUpdate('Post', {\n  name: 'PostUpdate',\n  fields: () => ({\n    title: 'String',\n    views: IntUpdate,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Object Subscription Options in Pothos\nDESCRIPTION: Extended example of object subscriptions with additional options including filtering events, cache invalidation, and selective refetching of data for better performance.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`, {\n      filter: (value) => true | false,\n      invalidateCache: (value) => context.PollCache.remove(poll.id),\n      refetch: ():  => context.Polls.fetchByID(poll.id)!),\n    });\n  },\n  fields: (t) => ({\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Examples for Interface Types\nDESCRIPTION: Shows example GraphQL queries demonstrating how to query interface fields and use inline fragments to access type-specific fields when querying interface types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/interfaces.mdx#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  giraffe {\n    name\n    diet\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  animal {\n    diet\n    ... on Giraffe {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with Zod Validation in TypeScript\nDESCRIPTION: Example of integrating the Errors plugin with Zod validation, including helper functions for flattening Zod errors and creating custom error types for validation issues.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Util for flattening zod errors into something easier to represent in your Schema.\nfunction flattenErrors(\n  error: ZodFormattedError<unknown>,\n  path: string[],\n): { path: string[]; message: string }[] {\n  // eslint-disable-next-line no-underscore-dangle\n  const errors = error._errors.map((message) => ({\n    path,\n    message,\n  }));\n\n  Object.keys(error).forEach((key) => {\n    if (key !== '_errors') {\n      errors.push(\n        ...flattenErrors((error as Record<string, unknown>)[key] as ZodFormattedError<unknown>, [\n          ...path,\n          key,\n        ]),\n      );\n    }\n  });\n\n  return errors;\n}\n\n// A type for the individual validation issues\nconst ZodFieldError = builder\n  .objectRef<{\n    message: string;\n    path: string[];\n  }>('ZodFieldError')\n  .implement({\n    fields: (t) => ({\n      message: t.exposeString('message'),\n      path: t.exposeStringList('path'),\n    }),\n  });\n\n// The actual error type\nbuilder.objectType(ZodError, {\n  name: 'ZodError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    fieldErrors: t.field({\n      type: [ZodFieldError],\n      resolve: (err) => flattenErrors(err.format(), []),\n    }),\n  }),\n});\n\nbuilder.queryField('fieldWIthValidation', (t) =>\n  t.boolean({\n    errors: {\n      types: [ZodError],\n    },\n    args: {\n      string: t.arg.string({\n        validate: {\n          type: 'string',\n          minLength: 3,\n        },\n      }),\n    },\n    resolve: () => true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Arguments using Convenience Methods in Pothos\nDESCRIPTION: This snippet shows how to use convenience methods to define various scalar arguments including id, int, float, boolean, and their list variants.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    withArgs: t.stringList({\n      args: {\n        id: t.arg.id(),\n        int: t.arg.int(),\n        float: t.arg.float(),\n        boolean: t.arg.boolean(),\n        string: t.arg.string(),\n        idList: t.arg.idList(),\n        intList: t.arg.intList(),\n        floatList: t.arg.floatList(),\n        booleanList: t.arg.booleanList(),\n        stringList: t.arg.stringList(),\n      },\n      resolve: (root, args) => Object.keys(args),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized Queries Without t.prismaField (TypeScript)\nDESCRIPTION: This code demonstrates how to optimize queries in Pothos when you can't directly use `t.prismaField`. It utilizes the `queryFromInfo` helper to extract selections from the GraphQL query info and apply them to a Prisma query. This is useful for mutations, or when combining Pothos with other plugins, to ensure only the requested fields are loaded from the database.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/selections.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst Post = builder.prismaObject('Post', {...});\n\nbuilder.objectRef<{success: boolean;post?: Post}>('CreatePostResult').implement({\n  fields: (t) => ({\n    success: t.boolean(),\n    post: t.field({\n      type: Post,\n      nullable:\n      resolve: (result) => result.post,\n    }),\n  }),\n});\n\nbuilder.mutationField(\n  'createPost',\n  {\n    args: (t) => ({\n      title: t.string({ required: true }),\n      ...\n    }),\n  },\n  {\n    resolve: async (parent, args, context, info) => {\n      if (!validateCreatePostArgs(args)) {\n        return {\n          success: false,\n        }\n      }\n\n      const post = prisma.city.create({\n        ...queryFromInfo({\n          context,\n          info,\n          // nested path where the selections for this type can be found\n          path: ['post']\n          // optionally you can pass a custom initial selection, generally you wouldn't need this\n          // but if the field at `path` is not selected, the initial selection set may be empty\n          select: {\n            comments: true,\n          },\n        }),\n        data: {\n          title: args.input.title,\n          ...\n        },\n      });\n\n      return {\n        success: true,\n        post,\n      }\n    },\n  },\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Reference with Fields\nDESCRIPTION: Implementing the Giraffe ObjectRef with description and field definitions including exposed and computed fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nGiraffeRef.implement(Giraffe, {\n  fields: (t) => ({\n    name: t.exposeString('name'),\n    height: t.exposeFloat('heightInMeters'),\n    age: t.int({\n      resolve: (parent) => {\n        // Do some date math to get an approximate age from a birthday\n        const ageDifMs = Date.now() - parent.birthday.getTime();\n        const ageDate = new Date(ageDifMs); // milliseconds from epoch\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom GraphQL Date Scalar\nDESCRIPTION: Demonstrates how to add a custom Date scalar type to Pothos SchemaBuilder with explicit input and output type definitions\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/scalars.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Scalars: {\n    Date: {\n      Input: Date;\n      Output: Date;\n    };\n  };\n}>({});\n\nbuilder.addScalarType('Date', CustomDateScalar);\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Handling Implementation\nDESCRIPTION: Shows recommended usage pattern with custom error types and interface implementation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [Error],\n  },\n});\n\nconst ErrorInterface = builder.interfaceRef<Error>('Error').implement({\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.objectType(Error, {\n  name: 'BaseError',\n  interfaces: [ErrorInterface],\n});\n\nclass LengthError extends Error {\n  minLength: number;\n\n  constructor(minLength: number) {\n    super(`string length should be at least ${minLength}`);\n\n    this.minLength = minLength;\n    this.name = 'LengthError';\n  }\n}\n\nbuilder.objectType(LengthError, {\n  name: 'LengthError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    minLength: t.exposeInt('minLength'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      errors: {},\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (!name.startsWith(name.slice(0, 1).toUpperCase())) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n    helloWithMinLength: t.string({\n      errors: {\n        types: [LengthError],\n      },\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.length < 5) {\n          throw new LengthError(5);\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma Interface with Variants in Pothos\nDESCRIPTION: This code snippet defines a 'User' interface using `builder.prismaInterface` in Pothos, exposing 'id' and 'email' fields. It also sets up a `resolveType` method to determine the specific variant ('Admin' or 'Member') based on the 'isAdmin' property of the user object. This interface serves as a base for defining different user types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/interfaces.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaInterface('User', {\n  name: 'User',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n  }),\n  resolveType: (user) => {\n    return user.isAdmin ? 'Admin' : 'Member';\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Object References to Avoid Circular Dependencies\nDESCRIPTION: Shows how to use object references to define types before their fields, preventing circular reference issues.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/circular-references.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const User = builder.objectRef<IUser>('User');\n\nbuilder.objectType(User, {\n  field: (t) => ({\n    // Circular references here won't cause issues, because User is already defined above\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Input Types for Update Mutations\nDESCRIPTION: Example of defining input types for update mutations, including handling relations and nested updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const UserUpdate: InputObjectRef<Prisma.Prisma.UserUpdateInput> = builder.prismaUpdate(\n  'User',\n  {\n    name: 'UserUpdate',\n    fields: () => ({\n      id: 'Int',\n      email: 'String',\n      name: 'String',\n      // inputs for relations need to be defined separately as shown below\n      profile: UserUpdateProfile,\n      posts: UserUpdatePosts,\n    }),\n  },\n);\n\nexport const UserUpdateProfile = builder.prismaUpdateRelation('User', 'profile', {\n  fields: () => ({\n    // created with builder.prismaCreate\n    create: ProfileCreateWithoutUser,\n    // created with builder.prismaUpdate\n    update: ProfileUpdateWithoutUser,\n    // created with builder.prismaWhereUnique\n    connect: ProfileUniqueFilter,\n  }),\n});\n\nexport const UserUpdatePosts = builder.prismaUpdateRelation('User', 'posts', {\n  fields: () => ({\n    // Not all update methods need to be defined\n    // created with builder.prismaCreate\n    create: PostCreateWithoutAuthor,\n    // created with builder.prismaCreateMany\n    createMany: {\n      skipDuplicates: 'Boolean',\n      data: PostCreateManyWithoutAuthor,\n    },\n    // created with builder.prismaWhereUnique\n    set: PostUniqueFilter,\n    // created with builder.prismaWhereUnique\n    disconnect: PostUniqueFilter,\n    delete: PostUniqueFilter,\n    connect: PostUniqueFilter,\n\n    update: {\n      // created with builder.prismaWhereUnique\n      where: PostUniqueFilter,\n      // created with builder.prismaUpdate\n      data: PostUpdateWithoutAuthor,\n    },\n    updateMany: {\n      // created with builder.prismaWhere\n      where: PostWithoutAuthorFilter,\n      // created with builder.prismaUpdate\n      data: PostUpdateWithoutAuthor,\n    },\n    // created with builder.prismaWhere\n    deleteMany: PostWithoutAuthorFilter,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Helper for Async Iterators with Smart Subscriptions\nDESCRIPTION: Helper setup for using SmartSubscriptions plugin with async iterators, simplifying subscription setup with PubSub implementations.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  smartSubscriptions: {\n    ...subscribeOptionsFromIterator((name, { pubsub }) => {\n      return pubsub.asyncIterator(name);\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pothos Directives Plugin\nDESCRIPTION: Example showing how to set up and configure the directives plugin with Pothos SchemaBuilder, including rate limit directive implementation and schema generation.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-directives/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport { rateLimitDirective } from 'graphql-rate-limit-directive';\n\nconst builder = new SchemaBuilder<{\n  Directives: {\n    rateLimit: {\n      locations: 'OBJECT' | 'FIELD_DEFINITION';\n      args: { limit: number, duration: number };\n    };\n  };\n}>({\n  plugins: [DirectivePlugin],\n  directives: {\n    useGraphQLToolsUnorderedDirectives: true,\n  }\n});\n\nbuilder.queryType({\n  directives: {\n    rateLimit: { limit: 5, duration: 60 },\n  },\n  fields: (t) => ({\n    hello: t.string({ resolve: () => 'world' });\n  });\n});\n\nconst { rateLimitDirectiveTransformer } = rateLimitDirective();\nconst schema = rateLimitDirectiveTransformer(builder.toSchema());\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Selections in Drizzle Objects\nDESCRIPTION: Defines selections on individual fields to retrieve only the necessary data for each field resolution, improving query performance.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserRef = builder.drizzleObject('users', {\n  name: 'User',\n  select: {\n    // By default all columns are selected, so this is required to default to an empty selection\n    columns: {},\n  },\n  fields: (t) => ({\n    fullName: t.string({\n      select: {\n        columns: { first_name: true, last_name: true },\n      },\n      resolve: (user, args, ctx, info) => `${user.first_name} ${user.last_name}`,\n    }),\n    bio: t.string({\n      select: {\n        // Currently, adding a selection without explicitly defining columns will cause all columns to be selected\n        columns: {},\n        with: { profile: true },\n      },\n      resolve: (user) => user.profile.bio,\n    }),\n    email: t.string({\n      select: {\n        columns: {},\n        extras: {\n          lowercaseName: sql<string>`lower(${users.firstName})`.as('lowercaseName'),\n        },\n      },\n      resolve: (user) => `${user.lowercaseName}@example.com`,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Entities in Pothos\nDESCRIPTION: Shows how to define interface entities using asEntity method, introduced in Federation 2.3 for federating interface definitions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst Media = builder.interfaceRef<{ id: string }>('Media').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    ...\n  }),\n});\n\nbuilder.asEntity(Media, {\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: ({ id }) => loadMediaById(id),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Required Arguments in Pothos\nDESCRIPTION: This snippet shows how to make arguments required by passing 'required: true' in the argument options. It also demonstrates how to make list items optional.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    nullableArgs: t.stringList({\n      args: {\n        optional: t.arg.string(),\n        required: t.arg.string({ required: true }),\n        requiredList: t.arg.stringList({ required: true }),\n        sparseList: t.stringList({\n          required: {\n            list: true,\n            items: false,\n          },\n        }),\n      },\n      resolve: (parent, args) => Object.keys(args),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Arguments in Selections (TypeScript)\nDESCRIPTION: This snippet illustrates how to use arguments to dynamically construct selections for a field in a Pothos Prisma object. The `select` option is defined as a function that receives the arguments passed to the field and uses them to construct a custom selection based on those arguments. This allows for dynamic query optimization based on client-provided input.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/selections.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst PostDraft = builder.prismaObject('Post', {\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    commentFromDate: t.string({\n      args: {\n        date: t.arg({ type: 'Date', required: true }),\n      },\n      select: (args) => ({\n        comments: {\n          take: 1,\n          where: {\n            createdAt: {\n              gt: args.date,\n            },\n          },\n        },\n      }),\n      resolve: (post) => post.comments[0]?.content,\n    }),\n  }),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Input Types in Pothos\nDESCRIPTION: Shows how to create input types with recursive references using builder.inputRef and TypeScript interfaces. This example creates a RecursiveGiraffeInput that can include an array of friend giraffes.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inputs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RecursiveGiraffeInputShape {\n  name: string;\n  birthdate: string;\n  height: number;\n  friends?: RecursiveGiraffeInputShape[];\n}\n\nconst RecursiveGiraffeInput = builder\n  .inputRef<RecursiveGiraffeInputShape>('RecursiveGiraffeInput')\n  .implement({\n    fields: (t) => ({\n      name: t.string({ required: true }),\n      birthdate: t.string({ required: true }),\n      height: t.float({ required: true }),\n      friends: t.field({\n        type: [RecursiveGiraffeInput],\n      }),\n    }),\n  });\n\nbuilder.mutationType({\n  fields: (t) => ({\n    createGiraffeWithFriends: t.field({\n      type: [Giraffe],\n      args: {\n        input: t.arg({ type: RecursiveGiraffeInput, required: true }),\n      },\n      resolve: (root, args) => {\n        const friends = (args.input.friends || []).map(\n          (friend) =>\n            new Giraffe(args.input.name, new Date(args.input.birthdate), args.input.height),\n        );\n\n        return [\n          new Giraffe(args.input.name, new Date(args.input.birthdate), args.input.height),\n          ...friends,\n        ];\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Smart Subscriptions Plugin with Pothos\nDESCRIPTION: Basic setup code for integrating the Smart Subscriptions plugin with Pothos SchemaBuilder. Configures subscription handling options including debounce delay, subscribe and unsubscribe callbacks.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SmartSubscriptionsPlugin from '@pothos/plugin-smart-subscriptions';\n\nconst builder = new SchemaBuilder({\n  plugins: [SmartSubscriptionsPlugin],\n  smartSubscriptions: {\n    debounceDelay: number | null;\n    subscribe: (\n      name: string,\n      context: Context,\n      cb: (err: unknown, data?: unknown) => void,\n    ) => Promise<void> | void;\n    unsubscribe: (name: string, context: Context) => Promise<void> | void;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Object Reference in TypeScript with Pothos\nDESCRIPTION: This snippet demonstrates how to create and implement an object reference using Pothos builder in TypeScript. It's used when a full class definition isn't necessary for a data shape.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/app-layout.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectRef<Shape>(name).implement({...})\n```\n\n----------------------------------------\n\nTITLE: Using Interface as Query Return Type\nDESCRIPTION: Demonstrates how to use an interface as a return type in a GraphQL query field definition. Creates an animal query that returns a Giraffe instance implementing the Animal interface.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/interfaces.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  animal: t.field({\n    type: 'Animal',\n    resolve: () => new Giraffe('James', new Date(Date.UTC(2012, 11, 12)), 5.2),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining List Fields in Pothos\nDESCRIPTION: This snippet demonstrates how to create list fields in Pothos. It defines a 'giraffes' field returning a list of 'Giraffe' objects and a 'giraffeNames' field returning a list of strings.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: t => ({\n    giraffes: t.field({\n      description: 'multiple giraffes'\n      type: ['Giraffe'],\n      resolve: () => [{ name: 'Gina' }, { name: 'James' }],\n    }),\n    giraffeNames: t.field({\n      type: ['String'],\n      resolve: () => ['Gina', 'James'],\n    })\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Type Names in SchemaBuilder Configuration\nDESCRIPTION: Example of configuring custom naming conventions for the generated error result and union types using the SchemaBuilder options.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const builderWithCustomErrorTypeNames = new SchemaBuilder<{}>({ \n  plugins: [ErrorPlugin, ValidationPlugin],\n  errors: {\n    defaultTypes: [Error],\n    defaultResultOptions: {\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_Custom`,\n    },\n    defaultUnionOptions: {\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_Custom`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Arguments for GraphQL Fields in Pothos\nDESCRIPTION: Shows how to create reusable argument definitions that can be applied to multiple fields in a Pothos schema. Includes type definitions and demonstrates usage in mutation fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/patterns.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArgBuilder, InputFieldBuilder } from '@pothos/core';\n\nexport interface SchemaTypes {\n  Scalars: {\n    ID: {\n      Input: string;\n      Output: string;\n    };\n  };\n}\nexport type TypesWithDefaults = PothosSchemaTypes.ExtendDefaultTypes<SchemaTypes>;\n\nconst builder = new SchemaBuilder<SchemaTypes>({});\n\nfunction createCommonArgs(arg: ArgBuilder<TypesWithDefaults>) {\n  return {\n    id: arg.id({}),\n    reason: arg({ type: 'String', required: false }),\n  };\n}\n\nbuilder.mutationType({\n  fields: (t) => ({\n    mutation1: t.boolean({\n      args: {\n        ...createCommonArgs(t.arg),\n      },\n      resolve: (parent, args) => !!args.reason,\n    }),\n    mutation2: t.boolean({\n      args: {\n        ...createCommonArgs(t.arg),\n      },\n      resolve: (parent, args) => !!args.reason,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma Object Variant\nDESCRIPTION: This snippet shows how to define a GraphQL type variant based on a Prisma model using the `variant` option. It defines a 'Viewer' variant for the 'User' model with a single 'id' field.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/variants.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Viewer = builder.prismaObject('User', {\n  variant: 'Viewer',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataloader Options in Pothos\nDESCRIPTION: Example of providing additional configuration options for dataloaders, such as setting maximum batch size. Shows how to use the loaderOptions property for both loadable objects and loadable fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  loaderOptions: { maxBatchSize: 20 },\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({ id: t.exposeID('id', {}) }),\n});\n\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadable({\n    type: [Post],\n    loaderOptions: { maxBatchSize: 20 },\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.postIDs,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Objects using Pothos Builder Methods\nDESCRIPTION: Examples of adding GraphQL object types using Pothos builder methods, including type overrides and field modifications.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserRef = builder.addGraphQLObject<UserType>(\n  existingSchema.getType('User') as GraphQLObjectType,\n  {\n    // Optionally you can override the types name\n    name: 'AddedUser',\n    // You can also pass in any other options you can define for normal object types\n    description: 'This type represents Users',\n  },\n);\n\nconst PostRef = builder.addGraphQLObject<{\n  id: string;\n  title: string;\n  content: string;\n}>(existingSchema.getType('Post') as GraphQLObjectType, {\n  fields: (t) => ({\n    // remove existing title field from type\n    title: null,\n    // add new titleField\n    postTitle: t.exposeString('title'),\n  }),\n});\n\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [PostRef],\n    resolve: () => loadPosts(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Prisma and Pothos Generator Output\nDESCRIPTION: Shows how to synchronize the output paths for both the Prisma client and the Pothos generator. This ensures that the `clientOutput` option of the Pothos generator matches the `output` option of the Prisma client generator.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\n\"generator client {\\n  provider = \\\"prisma-client\\\"\\n  output   = \\\"./prisma-client\\\"\\n}\\n\\ngenerator pothos {\\n  provider     = \\\"prisma-pothos-types\\\"\\n  clientOutput = \\\"./prisma-client\\\"\\n  output       = \\\"./pothos-types.ts\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using With-Input Plugin with Prisma Integration\nDESCRIPTION: Example of using t.prismaFieldWithInput to add Prisma fields with input objects when using the Prisma plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryField('user', (t) =>\n  t.prismaFieldWithInput({\n    type: 'User',\n    input: {\n      id: t.input.id({ required: true }),\n    },\n    nullable: true,\n    resolve: (query, _, args) =>\n      prisma.user.findUnique({\n        where: {\n          id: Number.parseInt(args.input.id, 10),\n        },\n        ...query,\n      }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Query Fields with References\nDESCRIPTION: Shows how to define query fields using references of previously added GraphQL types. This allows for constructing queries that resolve data based on structured type references.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [PostRef],\n    resolve: () => loadPosts(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema with SubGraph Plugin - TypeScript\nDESCRIPTION: Sets up a SchemaBuilder with the SubGraph plugin to manage different sub-selections of a GraphQL schema. Includes configuration for sub-graphs such as `Public` and `Internal`, and demonstrates building the schema for different sub-graph variants. Dependencies include the SubGraph plugin from Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/sub-graph.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SubGraphPlugin from '@pothos/plugin-sub-graph';\nconst builder = new SchemaBuilder<{\n  SubGraphs: 'Public' | 'Internal';\n}>({\n  plugins: [SubGraphPlugin],\n  subGraphs: {\n    defaultForTypes: [],\n    fieldsInheritFromTypes: true,\n  },\n});\n\n//in another file:\n\nconst schema = builder.toSchema();\nconst publicSchema = builder.toSchema({ subGraph: 'Public' });\nconst internalSchema = builder.toSchema({ subGraph: 'Internal' });\n\n// You can also build a graph using multiple subgraphs:\nconst combinedSchema = builder.toSchema({ subGraph: ['Internal', 'Public'] });\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Relay-Compatible Connections\nDESCRIPTION: This GraphQL schema defines types for User, Post, Comment, and their relationships. It includes Relay-compatible connections with windowed pagination support, featuring custom types like PageCursor and PageCursors for advanced pagination control.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ninterface Node {\n  id: ID!\n}\n\ntype PageCursor {\n  cursor: String!\n  isCurrent: Boolean!\n  pageNumber: Int!\n}\n\ntype PageCursors {\n  around: [PageCursor!]!\n  first: PageCursor!\n  last: PageCursor!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype Post implements Node {\n  author: User\n  comments(after: ID, before: ID, first: Int, last: Int): PostCommentsConnection!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype PostCommentsConnection {\n  edges: [PostCommentsConnectionEdge]!\n  pageCursors: PageCursors!\n  pageInfo: PageInfo!\n}\n\ntype PostCommentsConnectionEdge {\n  cursor: String!\n  node: Comment!\n}\n\ntype Query {\n  node(id: ID!): Node\n  nodes(ids: [ID!]!): [Node]!\n  post(id: ID!): Post\n  posts(after: ID, before: ID, first: Int, last: Int): QueryPostsConnection!\n  user(id: ID!): User\n}\n\ntype QueryPostsConnection {\n  edges: [QueryPostsConnectionEdge]!\n  pageCursors: PageCursors!\n  pageInfo: PageInfo!\n}\n\ntype QueryPostsConnectionEdge {\n  cursor: String!\n  node: Post!\n}\n\ntype User implements Node {\n  comments(after: ID, before: ID, first: Int, last: Int): UserCommentsConnection!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts(after: ID, before: ID, first: Int, last: Int): UserPostsConnection!\n}\n\ntype UserCommentsConnection {\n  edges: [UserCommentsConnectionEdge]!\n  pageCursors: PageCursors!\n  pageInfo: PageInfo!\n}\n\ntype UserCommentsConnectionEdge {\n  cursor: String!\n  node: Comment!\n}\n\ntype UserPostsConnection {\n  edges: [UserPostsConnectionEdge]!\n  pageCursors: PageCursors!\n  pageInfo: PageInfo!\n}\n\ntype UserPostsConnectionEdge {\n  cursor: String!\n  node: Post!\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Simple Objects with Additional Fields\nDESCRIPTION: Shows how to extend simple objects by adding complex fields with resolvers using the objectType method\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-simple-objects/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(UserType, (t) => ({\n  fullName: t.string({\n    resolve: (user) => `${user.firstName} ${user.lastName}`,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Builder Interface in TypeScript\nDESCRIPTION: Example showing how to improve type error readability by defining a separate named interface for Pothos builder types. This demonstrates proper context type definition with strict TypeScript configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/troubleshooting.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PothosTypes {\n  Context: {\n    user: {\n      id: string;\n    };\n  };\n}\n\nconst builder = new SchemaBuilder<PothosTypes>({...});\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Object Variant (Admin) in Pothos\nDESCRIPTION: This code defines a 'User' Prisma object with the 'Admin' variant, implementing the previously defined 'User' interface. It exposes the 'isAdmin' boolean field. By specifying the interface, the 'Admin' variant inherits the fields defined in the 'User' interface.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/interfaces.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  variant: 'Admin',\n  interfaces: [User],\n  fields: (t) => ({\n    isAdmin: t.exposeBoolean('isAdmin'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Types for Scalars and Enums\nDESCRIPTION: Examples of creating filter types for scalar values and enum types using the prismaFilter builder method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst StringFilter = builder.prismaFilter('String', {\n  ops: ['contains', 'equals', 'startsWith', 'not'],\n});\n\nexport const IDFilter = builder.prismaFilter('Int', {\n  ops: ['equals', 'not'],\n});\n\nbuilder.enumType(MyEnum, { name: 'MyEnum' });\nconst MyEnumFilter = builder.prismaFilter(MyEnum, {\n  ops: ['not', 'equals'],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Zod Validation Plugin with Pothos SchemaBuilder\nDESCRIPTION: Basic setup example showing how to initialize the SchemaBuilder with the ZodPlugin and configure validation behavior.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ZodPlugin from '@pothos/plugin-zod';\nconst builder = new SchemaBuilder({\n  plugins: [ZodPlugin],\n  zod: {\n    // optionally customize how errors are formatted\n    validationError: (zodError, args, context, info) => {\n      // the default behavior is to just throw the zod error directly\n      return zodError;\n    },\n  },\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    simple: t.boolean({\n      nullable: true,\n      args: {\n        // Validate individual args\n        email: t.arg.string({\n          validate: {\n            email: true,\n          },\n        }),\n        phone: t.arg.string(),\n      },\n      // Validate all args together\n      validate: (args) => !!args.phone || !!args.email,\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up SubGraph Plugin with Pothos Schema Builder\nDESCRIPTION: Basic setup for the SubGraph plugin with Pothos, defining 'Public' and 'Internal' subgraphs and configuring default options. Shows how to create schema variants for different API access levels.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-sub-graph/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SubGraphPlugin from '@pothos/plugin-sub-graph';\nconst builder = new SchemaBuilder<{\n  SubGraphs: 'Public' | 'Internal';\n}>({\n  plugins: [SubGraphPlugin],\n  subGraphs: {\n    defaultForTypes: [],\n    fieldsInheritFromTypes: true,\n  },\n});\n\n//in another file:\n\nconst schema = builder.toSchema();\nconst publicSchema = builder.toSchema({ subGraph: 'Public' });\nconst internalSchema = builder.toSchema({ subGraph: 'Internal' });\n\n// You can also build a graph using multiple subgraphs:\nconst combinedSchema = builder.toSchema({ subGraph: ['Internal', 'Public'] });\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Object from Drizzle Table\nDESCRIPTION: Creates a GraphQL Object type based on a Drizzle table using drizzleObject method, exposing database columns as GraphQL fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserRef = builder.drizzleObject('users', {\n  name: 'User',\n  fields: (t) => ({\n    firstName: t.exposeString('first_name'),\n    lastName: t.exposeString('last_name'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Filters for Prisma Objects\nDESCRIPTION: Example of defining filter types for Prisma objects that are compatible with Prisma's \"where\" clause.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserWhere = builder.prismaWhere('User', {\n  fields: {\n    id: IDFilter,\n  },\n});\n\nconst PostFilter = builder.prismaWhere('Post', {\n  fields: (t) => ({\n    // You can use either filters\n    id: IDFilter,\n    // or scalar types to only support equality\n    title: 'String',\n    createdAt: 'DateTime',\n    // Relations are supported by referencing other scalars\n    author: UserFilter,\n    // use t.field to provide other field options\n    authorId: t.field({ type: IDFilter, description: 'filter by author id' }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Subscriptions Plugin for Pothos\nDESCRIPTION: Command to install the Smart Subscriptions plugin for Pothos using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-smart-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Inferring Input and Object Types from Refs in TypeScript\nDESCRIPTION: Demonstrates how to use $inferInput and $inferType properties on Pothos refs to extract TypeScript types from input types and Prisma objects.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inferring-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyInput = builder.inputType('MyInput', {\n  fields: (t) => ({\n    id: t.id({ required: true }),\n    name: t.string({ required: true }),\n  }),\n});\n\n// { id: string; name: string; }\ntype MyInputShape = typeof MyInput.$inferInput;\n\n// infer the shape of the Prisma User model\nconst UserRef = builder.prismaObject('User', {});\ntype UserType = typeof UserRef.$inferType;\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriptions for Objects - TypeScript\nDESCRIPTION: This snippet demonstrates how to register subscriptions for a 'Poll' object type. For each 'Poll' object, a subscription is registered based on the poll's id, enabling dynamic subscription management as poll objects are included in query results.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`)\n  },\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({...}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Input Objects Using Builder Methods\nDESCRIPTION: Shows how to add input object types to a schema with the use of builder methods, allowing customization of input fields for schema operations.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostFilter = builder.addGraphQLInput<{ title?: string, tags? string[] }>(\n  existingSchema.getType('PostFilter') as GraphQLInputObjectType,\n  {\n    // input options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Federation Plugin with Pothos\nDESCRIPTION: Initializing the SchemaBuilder with the Federation and Directive plugins.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport FederationPlugin from '@pothos/plugin-federation';\nconst builder = new SchemaBuilder({\n  // If you are using other plugins, the federation plugin should be listed after plugins like auth that wrap resolvers\n  plugins: [DirectivePlugin, FederationPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema from Errors Plugin Example\nDESCRIPTION: Shows the GraphQL schema that would be generated from the previous example. Demonstrates how the errors plugin creates a union type that includes both the error type and a success type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Error {\n  message: String!\n}\n\ntype Query {\n  hello(name: String!): QueryHelloResult\n}\n\nunion QueryHelloResult = Error | QueryHelloSuccess\n\ntype QueryHelloSuccess {\n  data: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested List Arguments in Pothos\nDESCRIPTION: This snippet shows how to use t.arg.listRef to create nested list arguments, including a list of list of strings and a list of list of nullable strings.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/args.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst Query = builder.queryType({\n  fields: (t) => ({\n    example: t.boolean({\n      args: {\n        listOfListOfStrings: t.arg({\n          type: t.arg.listRef(t.arg.listRef('String')),\n        }),\n        listOfListOfNullableStrings: t.arg({\n          type: t.arg.listRef(\n            // By default listRef creates a list of Non-null items\n            // This can be overridden by passing in required: false\n            t.arg.listRef('String', { required: false }),\n            { required: true },\n          ),\n        }),\n      },\n      resolve: (parent, args) => {\n        return true;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Results from Load Function\nDESCRIPTION: This snippet demonstrates how to use the `sort` option to correctly map results to the provided IDs when the `load` function doesn't return them in the same order. The `sort` function accepts a result object and returns its ID.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  sort: user => user.id,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Complexity Calculation Based on Arguments\nDESCRIPTION: Advanced example showing how to calculate field complexity dynamically based on query arguments or context in Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    args: {\n      limit: t.arg.int(),\n    },\n    // base multiplier on how many posts are being requested\n    complexity: (args, ctx) => ({ field: 5, multiplier: args.limit ?? 5 }),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Extending External Entities in Pothos\nDESCRIPTION: Shows how to extend external entities using builder.externalRef. This example extends a Product entity with additional fields and implements a requires directive.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ProductRef = builder.externalRef(\n  'Product',\n  builder.selection<{ upc: string }>('upc'),\n  (entity) => {\n    const product = inventory.find(({ upc }) => upc === entity.upc);\n    return product && { ...entity, ...product };\n  },\n);\n\nProductRef.implement({\n  externalFields: (t) => ({\n    price: t.float(),\n    weight: t.float(),\n  }),\n  fields: (t) => ({\n    upc: t.exposeString('upc'),\n    inStock: t.exposeBoolean('inStock'),\n    shippingEstimate: t.float({\n      requires: builder.selection<{ weight?: number; price?: number }>('price weight'),\n      resolve: (data) => {\n        if ((data.price ?? 0) > 1000) {\n          return 0;\n        }\n        return (data.weight ?? 0) * 0.5;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Subscription Query\nDESCRIPTION: Example GraphQL query for using the smart subscription\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  polls {\n    question\n    answers {\n      id\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Queries with Filtering and Ordering\nDESCRIPTION: Shows how to customize relation fields with filtering, ordering, and pagination by specifying a query option that accepts GraphQL arguments.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.drizzleObject('users', {\n  name: 'User',\n  fields: (t) => ({\n    firstName: t.exposeString('first_name'),\n    posts: t.relation('posts', {\n      args: {\n        limit: t.arg.int(),\n        offset: t.arg.int(),\n      },\n      query: (args) => ({\n        limit: args.limit ?? 10,\n        offset: args.offset ?? 0,\n        where: (post, { eq }) => eq(post.published, true),\n        orderBy: (post, { desc }) => desc(post.updatedAt),\n      }),\n    }),\n    drafts: t.relation('posts', {\n      query: {\n        where: (post, { eq }) => eq(post.published, false),\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Enum in Pothos\nDESCRIPTION: Demonstrates how to define a basic TypeScript enum and register it with Pothos builder. Creates a Diet enum with three values.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Diet {\n  HERBIVOROUS,\n  CARNIVOROUS,\n  OMNIVORIOUS,\n}\n\nbuilder.enumType(Diet, {\n  name: 'Diet',\n});\n```\n\n----------------------------------------\n\nTITLE: Including Relations on Prisma Objects (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to always pre-load a relation (profile) when a User object is loaded in Pothos. It uses the `include` option in the `builder.prismaObject` configuration to specify the relations to always include in the query. This ensures that the related data is always available for fields defined on the User type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/selections.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nbuilder.prismaObject('User', {\n  // This will always include the profile when a user object is loaded.  Deeply nested relations can\n  // also be included this way.\n  include: {\n    profile: true,\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    bio: t.string({\n      // The profile relation will always be loaded, and user will now be typed to include the\n      // profile field so you can return the bio from the nested profile relation.\n      resolve: (user) => user.profile.bio,\n    }),\n  }),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Zod Schema Integration\nDESCRIPTION: Example of using custom zod schemas for validation instead of built-in validation options.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    list: t.boolean({\n      args: {\n        max5: t.arg.int({\n          validate: {\n            schema: zod.number().int().max(5),\n          },\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Import and Initialization in TypeScript\nDESCRIPTION: Demonstrates the change in how plugins are imported and initialized in GiraphQL 2.0, moving from string-based plugin names to direct plugin imports.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v2.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nimport '@pothos/plugin-simple-objects';\nconst builder = new SchemaBuilder({\n  plugins: ['PothosSimpleObjects'],\n});\n\n// new\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriptions for Fields in Pothos\nDESCRIPTION: Example showing how to register subscriptions for specific fields within an object type. This allows for more granular subscription handling at the field level.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      nullable: true,\n      type: ['Answer'],\n      subscribe: (subscriptions, poll) => subscriptions.register(`poll-answers/${poll.id}`),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Protocol Context Handling\nDESCRIPTION: Shows how to handle different context types for HTTP and WebSocket protocols using TypeScript discriminated unions.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/context.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Context =\n  | {\n      isSubscription: false;\n      http: \"HTTP specific context field.\"\n    }\n  | {\n      isSubscription: true;\n      websocket: \"Websocket specific context field.\";\n    };\n\nconst builder = new SchemaBuilder<{\n  Context: Context;\n}>({});\n\nbuilder.mutationType({\n  fields: (t) => ({\n    incrementCount: t.int({\n      resolve: (parent, args, ctx) => {\n        if (ctx.isSubscription === false) {\n          // Access the HTTP protocol specific context fields.\n          ctx.http;\n        } else {\n          // Access the Websocket protocol specific context fields.\n          ctx.websocket;\n        }\n      },\n    }),\n  }),\n});\n\nbuilder.subscriptionType({\n  fields: (t) => ({\n    currentCount: t.int({\n      subscribe: (parent, args, ctx) => {\n        if (ctx.isSubscription === false) {\n          // Access the HTTP protocol specific context fields.\n          ctx.http;\n        } else {\n          // Access the Websocket protocol specific context fields.\n          ctx.websocket;\n        }\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: List Validation Configuration\nDESCRIPTION: Shows how to validate lists with multiple validation rules including item validation and length constraints.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    list: t.boolean({\n      args: {\n        list: t.arg.stringList({\n          validate: {\n            items: {\n              email: true,\n            },\n            maxLength: 3,\n          },\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Type with Loadable Ref\nDESCRIPTION: This snippet demonstrates how to implement an object type using a loadable ref. It uses `builder.objectType` and passes the previously defined `User` ref as the type. It also demonstrates how to define the fields for the object type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObjectRef('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n});\n\nbuilder.objectType(User, {\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Messages with Zod Plugin\nDESCRIPTION: Example showing how to provide custom error messages for field validation using the Zod plugin's message option.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    withMessage: t.boolean({\n      nullable: true,\n      args: {\n        email: t.arg.string({\n          validate: {\n            email: [true, { message: 'invalid email address' }],\n          },\n        }),\n        phone: t.arg.string(),\n      },\n      validate: [\n        (args) => !!args.phone || !!args.email,\n        { message: 'Must provide either phone number or email address' },\n      ],\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading Prisma Client for Each Request\nDESCRIPTION: Demonstrates how to dynamically load or create the Prisma client for each request, enabling scenarios like periodically re-creating clients or creating read-only clients for specific users. This approach provides flexibility in managing Prisma client instances based on context.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"import SchemaBuilder from '@pothos/core';\\nimport { PrismaClient, Prisma } from '@prisma/client';\\nimport PrismaPlugin from '@pothos/plugin-prisma';\\nimport type PrismaTypes from '@pothos/plugin-prisma/generated';\\n\\nconst prisma = new PrismaClient({});\\n\\nconst readOnlyPrisma = new PrismaClient({\\n  datasources: {\\n    db: {\\n      url: process.env.READ_ONLY_REPLICA_URL,\\n    },\\n  },\\n});\\n\\nconst builder = new SchemaBuilder<{\\n  Context: { user: { isAdmin: boolean } };\\n  PrismaTypes: PrismaTypes;\\n}>({\\n  plugins: [PrismaPlugin],\\n  prisma: {\\n    client: (ctx) => (ctx.user.isAdmin ? prisma : readOnlyPrisma),\\n    // Because the prisma client is loaded dynamically, we need to explicitly provide the some information about the prisma schema\\n    dmmf: Prisma.dmmf,\\n  },\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Creating Enum from String Array in Pothos\nDESCRIPTION: Shows how to create an enum type from an array of strings using const assertion for proper TypeScript typing.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const LengthUnit = builder.enumType('LengthUnit', {\n  values: ['Feet', 'Meters'] as const,\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Enum Creation Methods using Object Keys/Values\nDESCRIPTION: Demonstrates alternative methods of creating enums using Object.keys or Object.values from a const object.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst VehicleType = {\n  sedan: 'SEDAN',\n  suv: 'SUV',\n  truck: 'TRUCK',\n  motorcycle: 'MOTORCYCLE',\n} as const;\n\nconst VehicleTypeEnum = builder.enumType('VehicleType', {\n  values: Object.values(VehicleType),\n});\n// Or\nconst VehicleTypeEnum = builder.enumType('VehicleType', {\n  values: Object.keys(VehicleType) as (keyof typeof VehicleType)[],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Introspection\nDESCRIPTION: This TypeScript snippet shows how to configure GraphQL Code Generator to use introspection from a development or production server instead of a schema file. This method requires the server to have introspection enabled.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: 'https://localhost:3000/graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Maps for Pothos\nDESCRIPTION: JSON configuration for import maps to properly set up Pothos dependencies and plugins with correct versioning.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"graphql\": \"https://esm.sh/graphql@16.6.0\",\n    \"graphql-yoga\": \"https://esm.sh/graphql-yoga?external=graphql\",\n    \"@pothos/core\": \"https://esm.sh/*@pothos/core@3.23.1\",\n    \"@pothos/plugin-relay\": \"https://esm.sh/*@pothos/plugin-relay@3.30.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Federation Schema and Server\nDESCRIPTION: Building and starting an Apollo Server with a federated subgraph schema\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = builder.toSubGraphSchema({\n  linkUrl: 'https://specs.apollo.dev/federation/v2.3',\n  federationDirectives: ['@key', '@external', '@requires', '@provides'],\n});\n\nconst server = new ApolloServer({\n  schema,\n});\n\nstartStandaloneServer(server, { listen: { port: 4000 } })\n  .then(({ url }) => {\n    console.log(`🚀 Server ready at ${url}`);\n  })\n  .catch((error) => {\n    throw error;\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Inputs using With-Input Plugin\nDESCRIPTION: Example of defining a query field with an input object using the With-Input Plugin. It demonstrates the usage of t.fieldWithInput and t.input for creating input fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      input: {\n        // Note that this uses a new t.input field builder for defining input fields\n        id: t.input.id({ required: true }),\n      },\n      type: 'ID',\n      resolve: (root, args) => args.input.id,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Type-Level Field Selections in Drizzle Objects\nDESCRIPTION: Configures specific columns, relations, and SQL expressions to select when resolving a Drizzle object, optimizing database queries.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserRef = builder.drizzleObject('users', {\n  name: 'User',\n  select: {\n    columns: {\n      first_name: true,\n      last_name: true,\n    },\n    with: {\n      profile: true,\n    },\n    extras: {\n      lowercaseName: sql<string>`lower(${users.firstName})`.as('lowercaseName'),\n    },\n  },\n  fields: (t) => ({\n    fullName: t.string({\n      resolve: (user, args, ctx, info) => `${user.first_name} ${user.last_name}`,\n    }),\n    bio: t.string({\n      resolve: (user) => user.profile.bio,\n    }),\n    email: t.string({\n      resolve: (user) => `${user.lowercaseName}@example.com`,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Drizzle Objects\nDESCRIPTION: Demonstrates how to add custom fields to a Drizzle object that don't directly correspond to database columns, using custom resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserRef = builder.drizzleObject('users', {\n  name: 'User',\n  fields: (t) => ({\n    fullName: t.string({\n      resolve: (user, args, ctx, info) => `${user.first_name} ${user.last_name}`,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Pothos Schema\nDESCRIPTION: This TypeScript snippet configures GraphQL Code Generator to import and use the Pothos schema. It sets up the schema source, document patterns, and output directory for generated client types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\nimport { printSchema } from 'graphql';\nimport { schema } from './src/schema';\n\nconst config: CodegenConfig = {\n  schema: printSchema(schema),\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Enum with Value Objects in Pothos\nDESCRIPTION: Demonstrates creating an enum with detailed value objects that include descriptions and custom internal values.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GiraffeSpecies = builder.enumType('GiraffeSpecies', {\n  values: {\n    Southern: {\n      description: 'Also known as two-horned giraffe',\n      value: 'giraffa',\n    },\n    Masai: {\n      value: 'tippelskirchi',\n    },\n    Reticulated: {\n      value: 'reticulata',\n    },\n    Northern: {\n      value: 'camelopardalis',\n    },\n  } as const,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Loadable Fields with Individual Dataloaders\nDESCRIPTION: Example of defining loadable fields for more granular data loading. Shows how to create fields that load Posts, with single and multiple item variants using t.loadable.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Normal object that the fields below will load\ninterface PostShape {\n  id: string;\n  title: string;\n  content: string;\n}\n\nconst Post = builder.objectRef<PostShape>('Post').implement({\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    title: t.exposeString('title', {}),\n    content: t.exposeString('title', {}),\n  }),\n});\n\n// Loading a single Post\nbuilder.objectField(User, 'latestPost', (t) =>\n  t.loadable({\n    type: Post,\n    // will be called with ids of latest posts for all users in query\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.lastPostID,\n  }),\n);\n// Loading multiple Posts\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadable({\n    type: [Post],\n    // will be called with ids of posts loaded for all users in query\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.postIDs,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pothos Directive Plugin\nDESCRIPTION: Example of setting up and configuring the directive plugin with rate limiting, including schema builder initialization and directive application. Shows type definitions and schema transformation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/directives.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport { rateLimitDirective } from 'graphql-rate-limit-directive';\n\nconst builder = new SchemaBuilder<{\n  Directives: {\n    rateLimit: {\n      locations: 'OBJECT' | 'FIELD_DEFINITION';\n      args: { limit: number, duration: number };\n    };\n  };\n}>({\n  plugins: [DirectivePlugin],\n  directives: {\n    useGraphQLToolsUnorderedDirectives: true,\n  }\n});\n\nbuilder.queryType({\n  directives: {\n    rateLimit: { limit: 5, duration: 60 },\n  },\n  fields: (t) => ({\n    hello: t.string({ resolve: () => 'world' });\n  });\n});\n\nconst { rateLimitDirectiveTransformer } = rateLimitDirective();\nconst schema = rateLimitDirectiveTransformer(builder.toSchema());\n```\n\n----------------------------------------\n\nTITLE: Per-Field Input Argument Nullability\nDESCRIPTION: Example of setting input argument nullability for a specific field using argOptions.required.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      type: 'Boolean',\n      argOptions: {\n        required: false,\n      },\n      input: {\n        someInput: t.input.boolean({}),\n      },\n      resolve: (root, args) => {\n        return args.input?.someInput;\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Complexity Plugin\nDESCRIPTION: NPM installation command for the Pothos complexity plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @pothos/plugin-complexity\n```\n\n----------------------------------------\n\nTITLE: Granting Access to Fields with Grant Scopes in Pothos\nDESCRIPTION: This snippet shows how to grant access to fields in Pothos using grantScopes. It differentiates between regular and granted scopes, allowing a field to grant the scope 'readArticle' which can access 'Article' fields without other common scopes. Useful for conditionally providing access without altering main scope definitions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    freeArticle: t.field({\n      grantScopes: ['readArticle'],\n      grantScopes: (parent, args, context, info) => ['readArticle'],\n    }),\n  }),\n});\n\nbuilder.objectType(Article, {\n  authScopes: {\n    public: true,\n    $granted: 'readArticle',\n  },\n  fields: (t) => ({\n    title: t.exposeString('title', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to Existing Types in Pothos\nDESCRIPTION: This snippet demonstrates how to add fields to existing types in Pothos. It adds a 'giraffe' field to the Query type and an 'ageInDogYears' field to the Giraffe type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  giraffe: t.field({\n    type: Giraffe,\n    resolve: () => new Giraffe('James', new Date(Date.UTC(2012, 11, 12)), 5.2),\n  }),\n}));\n\nbuilder.objectField(Giraffe, 'ageInDogYears', (t) =>\n  t.int({\n    resolve: (parent) => parent.age * 7,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Type Naming Conventions\nDESCRIPTION: Example of customizing the default naming convention for input types using a custom name callback.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport WithInputPlugin from '@pothos/plugin-with-input';\nconst builder = new SchemaBuilder({\n  plugins: [WithInputPlugin],\n  withInput: {\n    typeOptions: {\n      name: ({ parentTypeName, fieldName }) => {\n        const capitalizedFieldName = `${fieldName[0].toUpperCase()}${fieldName.slice(1)}`;\n        // This will remove the default Query/Mutation prefix from the input type name\n        if (parentTypeName === 'Query' || parentTypeName === 'Mutation') {\n          return `${capitalizedFieldName}Input`;\n        }\n\n        return `${parentTypeName}${capitalizedFieldName}Input`;\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Field Directives in Pothos\nDESCRIPTION: Demonstrates how to apply federation directives like @shareable, @tag, @inaccessible, and @override directly when defining a field.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nt.field({\n  type: 'String',\n  shareable: true,\n  tag: ['someTag'],\n  inaccessible: true,\n  override: { from: 'users' },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Loadable Object Ref\nDESCRIPTION: This snippet shows how to define a loadable object ref using `builder.loadableObjectRef`. It separates the definition and implementation to avoid circular reference issues. It defines the `load` function and implements the object with a field.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObjectRef('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n});\n\nUser.implement({\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for User, Post, and Comment Types\nDESCRIPTION: This GraphQL schema defines the structure of the API, including User, Post, and Comment types with their relationships. It also specifies Query operations for fetching posts and users.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/simple-interfaces/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Objects Using Builder Methods\nDESCRIPTION: Demonstrates how to add and customize GraphQL object types using builder methods, ensuring type safety and providing options for renaming and customizing fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Passing in a generic type is recommended to ensure type-safety\nconst UserRef = builder.addGraphQLObject<UserType>(\n  existingSchema.getType('User') as GraphQLObjectType,\n  {\n    // Optionally you can override the types name\n    name: 'AddedUser',\n    // You can also pass in any other options you can define for normal object types\n    description: 'This type represents Users',\n  },\n);\n\nconst PostRef = builder.addGraphQLObject<{\n  id: string;\n  title: string;\n  content: string;\n}>(existingSchema.getType('Post') as GraphQLObjectType, {\n  fields: (t) => ({\n    // remove existing title field from type\n    title: null,\n    // add new titleField\n    postTitle: t.exposeString('title'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying ComposeDirective in Pothos\nDESCRIPTION: Shows how to apply the @composeDirective directive when building the subgraph schema, including adding custom directives and schema links.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = builder.toSubGraphSchema({\n  composeDirectives: ['@custom'],\n  schemaDirectives: {\n    link: { url: 'https://myspecs.dev/myCustomDirective/v1.0', import: ['@custom'] },\n  },\n  directives: [\n    new GraphQLDirective({\n      locations: [DirectiveLocation.OBJECT, DirectiveLocation.INTERFACE],\n      name: 'custom',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Loadable Fields for Posts\nDESCRIPTION: Demonstrates how to create more granular dataloaders with loadable fields, including single-value and list fields for Post objects.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Normal object that the fields below will load\ninterface PostShape {\n  id: string;\n  title: string;\n  content: string;\n}\n\nconst Post = builder.objectRef<PostShape>('Post').implement({\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    title: t.exposeString('title', {}),\n    content: t.exposeString('title', {}),\n  }),\n});\n\n// Loading a single Post\nbuilder.objectField(User, 'latestPost', (t) =>\n  t.loadable({\n    type: Post,\n    // will be called with ids of latest posts for all users in query\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.lastPostID,\n  }),\n);\n// Loading multiple Posts\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadable({\n    type: [Post],\n    // will be called with ids of posts loaded for all users in query\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.postIDs,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating List Filters for Scalars\nDESCRIPTION: Example of creating filter types for lists of scalar values.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const StringListFilter = builder.prismaScalarListFilter('String', {\n  name: 'StringListFilter',\n  ops: ['has', 'hasSome', 'hasEvery', 'isEmpty', 'equals'],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Provides Directive in Pothos Federation\nDESCRIPTION: Implementing an external reference and using the provides method to add a @provides directive.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserType = builder.externalRef('User', builder.selection<{ id: string }>('id')).implement({\n  externalFields: (t) => ({\n    // The field that will be provided\n    username: t.string(),\n  }),\n  fields: (t) => ({\n    id: t.exposeID('id'),\n  }),\n});\n\nconst ReviewType = builder.objectRef<Review>('Review');\nReviewType.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    body: t.exposeString('body'),\n    author: t.field({\n      // using UserType.provides<...>(...) instead of just UserType adds the provide annotations\n      // and ensures the resolved value includes data for the provided field\n      // The generic in Type.provides works the same as the `builder.selection` method.\n      type: UserType.provides<{ username: string }>('username'),\n      resolve: (review) => ({\n        id: review.authorID,\n        username: usernames.find((username) => username.id === review.authorID)!.username,\n      }),\n    }),\n    product: t.field({\n      type: Product,\n      resolve: (review) => ({ upc: review.product.upc }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Validation Plugin for Pothos\nDESCRIPTION: Command to install both the zod package and the Pothos zod plugin using yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add zod @pothos/plugin-zod\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Authentication\nDESCRIPTION: Example of adding authentication requirements to a specific query field using the scope auth plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    message: t.string({\n      authScopes: {\n        public: true,\n      },\n      resolve: () => 'hi',\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Provides Directive in Pothos\nDESCRIPTION: Demonstrates how to add a @provides directive by implementing an external ref and using the .provides method. This example provides a username field for a User type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserType = builder.externalRef('User', builder.selection<{ id: string }>('id')).implement({\n  externalFields: (t) => ({\n    username: t.string(),\n  }),\n  fields: (t) => ({\n    id: t.exposeID('id'),\n  }),\n});\n\nconst ReviewType = builder.objectRef<Review>('Review');\nReviewType.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    body: t.exposeString('body'),\n    author: t.field({\n      type: UserType.provides<{ username: string }>('username'),\n      resolve: (review) => ({\n        id: review.authorID,\n        username: usernames.find((username) => username.id === review.authorID)!.username,\n      }),\n    }),\n    product: t.field({\n      type: Product,\n      resolve: (review) => ({ upc: review.product.upc }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Interfaces with InterfaceObject in Pothos\nDESCRIPTION: Demonstrates how to extend interfaces from another subgraph by creating an interfaceObject, a feature introduced in Federation 2.3.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst Media = builder.objectRef<{ id: string }>('Media').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    // add new MediaFields here that are available on all implementors of the `Media` type\n  }),\n});\n\nbuilder.asEntity(Media, {\n  interfaceObject: true,\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: (ref) => ref,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Pothos Schema to SDL File using TypeScript\nDESCRIPTION: Example showing how to create a basic Pothos schema with a query type, convert it to SDL format using graphql utilities, and save it to a file. Uses printSchema and lexicographicSortSchema from the graphql package for formatting.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/printing-schemas.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeFileSync } from 'fs';\nimport { printSchema, lexicographicSortSchema } from 'graphql';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string(),\n      },\n      resolve: (parent, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst schema = builder.toSchema();\nconst schemaAsString = printSchema(lexicographicSortSchema(schema));\n\nwriteFileSync('/path/to/schema.graphql', schemaAsString);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Pothos\nDESCRIPTION: A GraphQL schema definition showing the structure of User, Post, and Comment types with their relationships. The schema includes queries for fetching posts and users by ID, as well as a paginated posts query.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/simple-classes/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Type Options Interface\nDESCRIPTION: Interface definition for Mutation type options, including description and fields configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MutationTypeOptions = {\n  description?: string;\n  fields: FieldsFunction;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Query Fields with Loadable Objects\nDESCRIPTION: Example showing how to define GraphQL query fields that return loadable objects. This demonstrates the flexibility of returning either IDs that will be loaded or already loaded objects.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    user: t.field({\n      type: User,\n      args: {\n        id: t.arg.string({ required: true }),\n      },\n      // Here we can just return the ID directly rather than loading the user ourselves\n      resolve: (root, args) => args.id,\n    }),\n    currentUser: t.field({\n      type: User,\n      // If we already have the user, we use it, and the dataloader will not be called\n      resolve: (root, args, context) => context.currentUser,\n    }),\n    users: t.field({\n      type: [User],\n      args: {\n        ids: t.arg.stringList({ required: true }),\n      },\n      // Mixing ids and user objects also works\n      resolve: (_root, args, context) => [...args.ids, context.CurrentUser],\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Context Types for Dataloader Integration\nDESCRIPTION: Example showing how to extend the TypeScript types for your context to support dataloader operations. This includes types for specific loaders, a getLoader helper, and methods for loading single or multiple resources.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoadableRef } from '@pothos/plugin-dataloader';\n\nexport interface ContextType {\n  userLoader: DataLoader<string, { id: number }>; // expose a specific loader\n  getLoader: <K, V>(ref: LoadableRef<K, V, ContextType>) => DataLoader<K, V>; // helper to get a loader from a ref\n  load: <K, V>(ref: LoadableRef<K, V, ContextType>, id: K) => Promise<V>; // helper for loading a single resource\n  loadMany: <K, V>(ref: LoadableRef<K, V, ContextType>, ids: K[]) => Promise<(Error | V)[]>; // helper for loading many\n  // other context fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Input Objects\nDESCRIPTION: Example of creating a GraphQL field with an input object using the fieldWithInput method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      input: {\n        // Note that this uses a new t.input field builder for defining input fields\n        id: t.input.id({ required: true }),\n      },\n      type: 'ID',\n      resolve: (root, args) => args.input.id,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Object and Argument Names\nDESCRIPTION: Example of customizing the input object type name and argument name using typeOptions and argOptions in the With-Input Plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      typeOptions: {\n        name: 'CustomInputTypeName',\n        // Additional options for the input type can be added here\n      },\n      argOptions: {\n        name: 'customArgName',\n        // Additional options for the input argument can be added here\n      },\n      input: {\n        id: t.input.id({ required: true }),\n      },\n      type: 'ID',\n      // inputs are now under `customArgName`\n      resolve: (root, args) => args.customArgName.id,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.0.3\nDESCRIPTION: Documents a patch change fixing the ignoreError option in the sentry tracing plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.3\n\n### Patch Changes\n\n- 2a4f293: Fix ignoreError option in sentry tracing plugin\n```\n\n----------------------------------------\n\nTITLE: Creating OrderBy Input Types\nDESCRIPTION: Example of creating input types for ordering query results.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserOrderBy = builder.prismaOrderBy('User', {\n  fields: {\n    name: true,\n  },\n});\n\nexport const PostOrderBy = builder.prismaOrderBy('Post', {\n  fields: () => ({\n    id: true,\n    title: true,\n    createdAt: true,\n    author: UserOrderBy,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Validating All Arguments Together with a Zod Schema\nDESCRIPTION: Example showing how to validate all field arguments together using a comprehensive zod schema object.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    simple: t.boolean({\n      nullable: true,\n      args: {\n        email: t.arg.string(),\n        phone: t.arg.string(),\n      },\n      // Validate all args together using own zod schema\n      validate: {\n        schema: zod.object({\n          email: zod.string().email(),\n          phone: zod.string(),\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Naming Conventions for Input Types\nDESCRIPTION: Example of customizing the default naming conventions for input types by providing a name callback in withInput.typeOptions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport WithInputPlugin from '@pothos/plugin-with-input';\nconst builder = new SchemaBuilder({\n  plugins: [WithInputPlugin],\n  withInput: {\n    typeOptions: {\n      name: ({ parentTypeName, fieldName }) => {\n        const capitalizedFieldName = `${fieldName[0].toUpperCase()}${fieldName.slice(1)}`;\n        // This will remove the default Query/Mutation prefix from the input type name\n        if (parentTypeName === 'Query' || parentTypeName === 'Mutation') {\n          return `${capitalizedFieldName}Input`;\n        }\n\n        return `${parentTypeName}${capitalizedFieldName}Input`;\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Subscription Options in Pothos\nDESCRIPTION: Extended example of field subscriptions with additional options including canRefetch for selective field updates, filtering, and cache invalidation for optimized subscription handling.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      nullable: true,\n      type: ['Answer'],\n      canRefetch: true,\n      subscribe: (subscriptions, poll) =>\n        subscriptions.register(`poll-answers/${poll.id}`, {\n          filter: (value) => true | false,\n          invalidateCache: (value) => context.PollCache.remove(poll.id),\n        }),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FieldOptions Type in TypeScript\nDESCRIPTION: This code snippet defines the FieldOptions type, which is used to configure fields in Pothos. It includes options for type, args, nullable, description, deprecationReason, and resolve function.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/field-builder.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FieldOptions = {\n  type: ReturnType;\n  args?: Args;\n  nullable?: boolean;\n  description?: string;\n  deprecationReason?: string;\n  resolve: (parent, args, context, info): ResolveValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Scalars from graphql-scalars Library\nDESCRIPTION: Demonstrates importing and adding scalar types from the graphql-scalars library with explicit type definitions\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/scalars.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateResolver, JSONResolver } from 'graphql-scalars';\n\nconst builder = new SchemaBuilder<{\n  Scalars: {\n    JSON: {\n      Input: unknown;\n      Output: unknown;\n    };\n    Date: {\n      Input: Date;\n      Output: Date;\n    };\n  };\n}>({});\n\nbuilder.addScalarType('JSON', JSONResolver);\nbuilder.addScalarType('Date', DateResolver);\n```\n\n----------------------------------------\n\nTITLE: Selecting nested GraphQL fields with nestedSelection in Typescript\nDESCRIPTION: Demonstrates how to use `nestedSelection` to select fields from a nested GraphQL field, specifically within a `User` object to fetch `Post` previews. It showcases limiting the number of posts to load using `take` and using typeName to get selections for a specific object type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/indirect-relations.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostRef = builder.prismaObject('Post', {\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    content: t.exposeString('content'),\n    author: t.relation('author'),\n  }),\n});\n\nconst PostPreview = builder.objectRef<Post>('PostPreview').implement({\n  fields: (t) => ({\n    post: t.field({\n      type: PostRef,\n      resolve: (post) => post,\n    }),\n    preview: t.string({\n      nullable: true,\n      resolve: (post) => post.content?.slice(10),\n    }),\n  }),\n});\n\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    postPreviews: t.field({\n      select: (args, ctx, nestedSelection) => ({\n        posts: nestedSelection(\n          {\n            // limit the number of postPreviews to load\n            take: 2,\n          },\n          // Look at the selections in postPreviews.post to determine what relations/fields to select\n          ['post'],\n          // (optional) If the field returns a union or interface, you can pass a typeName to get selections for a specific object type\n          'Post',\n        ),\n      }),\n      type: [PostPreview],\n      resolve: (user) => user.posts,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Pothos Plugin Configuration with Custom Types\nDESCRIPTION: Advanced example showing how to configure a Pothos plugin with custom type definitions for auth scopes.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/using-plugins.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport ScopeAuthPlugin from '@pothos/plugin-scope-auth';\n\nconst builder = new SchemaBuilder<{\n  AuthScopes: {\n    example: string;\n  };\n}>({\n  plugins: [ScopeAuthPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Specific Authorization in Pothos GraphQL\nDESCRIPTION: Demonstrates how to define field-level authorization using custom permission scopes. Shows implementation of article access control using authScopes.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    articles: t.field({\n      type: [Article],\n      authScopes: {\n        customPerm: 'readArticle',\n      },\n      resolve: () => Article.getSome(),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Pothos Plugin Configuration\nDESCRIPTION: Basic example of importing and configuring a Pothos plugin in the schema builder.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/using-plugins.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport ScopeAuthPlugin from '@pothos/plugin-scope-auth';\n\nconst builder = new SchemaBuilder({\n  plugins: [ScopeAuthPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Version Change Log Entry\nDESCRIPTION: Markdown formatted changelog entries showing version updates and dependency changes for Pothos plugins\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/complex-app/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [5ea5ce24]\n  - @pothos/plugin-prisma@3.47.0\n  - @pothos/plugin-prisma-utils@0.8.0\n  - @pothos/plugin-scope-auth@3.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type with SubGraph Options - TypeScript\nDESCRIPTION: Shows how to define a query type in a Pothos schema with options for sub-graphs. It illustrates setting default sub-graphs for fields and individual field sub-graph specifications. Implements error handling in field resolvers. Requires a Pothos schema with SubGraph configurations and options.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/sub-graph.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  // Query type will be available in default, Public, and Internal schemas\n  subGraphs: ['Public', 'Internal'],\n  // Fields on the Query object will now default to not being a part of any subgraph\n  defaultForFields: [];\n  fields: (t) => ({\n    someField: t.string({\n      // someField will be in the default schema and \"Internal\" sub graph, but\n      // not present in the Public sub graph\n      subGraphs: ['Internal']\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ID Formatting and Find Unique\nDESCRIPTION: This code snippet defines a Prisma node with a custom resolver for the `id` field and a `findUnique` option. The `resolve` function converts the post's ID to a string. The `findUnique` function is used to load the node by its ID, parsing the ID string into a number.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relay.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaNode('Post', {\n  id: { resolve: (post) => String(post.id) },\n  // The return value will be passed as the `where` of a `prisma.post.findUnique`\n  findUnique: (id) => ({ id: Number.parseInt(id, 10) }),\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Strategies for Authorization Scopes in Pothos\nDESCRIPTION: This snippet highlights how to cache authorization scopes using cache keys in Pothos, ensuring efficient and accurate caching for complex authorization logic. By using JSON.stringify, it converts complex objects into a consistent cache key, although faster-stable-stringify is recommended for handling circular references.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Context: Context;\n  AuthScopes: {\n    loggedIn: boolean;\n  };\n}>({\n  scopeAuth: {\n    cacheKey: (val) => JSON.stringify(val),\n    authScopes: async (context) => ({\n      loggedIn: !!context.User,\n    }),\n  },\n  plugins: [ScopeAuthPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Relations\nDESCRIPTION: This code snippet demonstrates how to add arguments, filtering and sorting to a relation using the `query` option. It defines a boolean argument `oldestFirst` to control the sorting order of posts by creation date.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    posts: t.relation('posts', {\n      // We can define arguments like any other field\n      args: {\n        oldestFirst: t.arg.boolean(),\n      },\n      // Then we can generate our query conditions based on the arguments\n      query: (args, context) => ({\n        orderBy: {\n          createdAt: args.oldestFirst ? 'asc' : 'desc',\n        },\n      }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Enums Using Builder Methods\nDESCRIPTION: Demonstrates how to define enum types within a schema using builder methods, allowing for clean integration and customization of enum values.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst OrderBy = builder.addGraphQLEnum<'Asc' | 'Desc'>(\n  existingSchema.getType('OrderBy') as GraphQLEnumType,\n  {\n    // enum options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Schema from Error Plugin\nDESCRIPTION: The GraphQL schema produced by the Errors plugin example, showing how it transforms the query field into a union type that includes both the success case and the error case.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Error {\n  message: String!\n}\n\ntype Query {\n  hello(name: String!): QueryHelloResult\n}\n\nunion QueryHelloResult = Error | QueryHelloSuccess\n\ntype QueryHelloSuccess {\n  data: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Query Fields with queryFields in Pothos\nDESCRIPTION: Demonstrates how to add multiple query fields at once using the builder.queryFields() method.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/queries-mutations-and-subscriptions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  hello: t.string({\n    resolve: () => 'hello, world!',\n  }),\n  giraffe: t.field({\n    type: Giraffe,\n    resolve: () => ({\n      name: 'James',\n    }),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Constructing GraphQL Unions Using Builder Methods\nDESCRIPTION: Shows how to add union types to a schema using builder methods, allowing multiple types to be defined under a single alias with customizable options.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst SearchResult = builder.addGraphQLUnion<User | Post>(\n  existingSchema.getType('SearchResult') as GraphQLUnionType,\n  {\n    // union options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Level Authorization Scopes in Pothos\nDESCRIPTION: This snippet shows how to set type-level authorization scopes in Pothos. The authScope function determines access based on the 'parent' state, allowing access to the 'public' scope if the article is published, or requiring 'employee' scope otherwise. Essential for managing access at the type level with flexibility.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(Article, {\n  authScope: (parent, context) => {\n    if (parent.isPublished()) {\n      return {\n        public: true,\n      };\n    }\n    return {\n      employee: true,\n    };\n  },\n  fields: (t) => ({\n    title: t.exposeString('title', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Unions using Builder Methods\nDESCRIPTION: Example showing how to add a GraphQL union type using the addGraphQLUnion builder method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst SearchResult = builder.addGraphQLUnion<User | Post>(\n  existingSchema.getType('SearchResult') as GraphQLUnionType,\n  {\n    // union options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema Example\nDESCRIPTION: The resulting GraphQL schema showing the generated input type and query field.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  example(input: QueryExampleInput!): ID!\n}\n\ninput QueryExampleInput {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields on Prisma Objects (TypeScript)\nDESCRIPTION: This snippet shows how to select specific fields from a Prisma object instead of loading all columns. It uses the `select` option in `builder.prismaObject` to specify the fields to be included in the query. This is useful when dealing with tables with many columns or columns containing large payloads to avoid unnecessary data loading.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/selections.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nbuilder.prismaObject('User', {\n  select: {\n    id: true,\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n  }),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pothos Complexity Plugin\nDESCRIPTION: Basic setup for importing and adding the complexity plugin to a Pothos SchemaBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ComplexityPlugin from '@pothos/plugin-complexity';\n\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Directives Plugin in TypeScript\nDESCRIPTION: Demonstrates how to set up and use the Pothos Directives Plugin, including importing necessary modules, configuring the SchemaBuilder, and applying directives to schema types and fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-directives/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DirectivePlugin from '@pothos/plugin-directives';\nimport { rateLimitDirective } from 'graphql-rate-limit-directive';\n\nconst builder = new SchemaBuilder<{\n  Directives: {\n    rateLimit: {\n      locations: 'OBJECT' | 'FIELD_DEFINITION';\n      args: { limit: number, duration: number };\n    };\n  };\n}>({\n  plugins: [DirectivePlugin],\n  directives: {\n    useGraphQLToolsUnorderedDirectives: true,\n  }\n});\n\nbuilder.queryType({\n  directives: {\n    rateLimit: { limit: 5, duration: 60 },\n  },\n  fields: (t) => ({\n    hello: t.string({ resolve: () => 'world' });\n  });\n});\n\nconst { rateLimitDirectiveTransformer } = rateLimitDirective();\nconst schema = rateLimitDirectiveTransformer(builder.toSchema());\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Subscription Query Field\nDESCRIPTION: Example of creating a smart subscription query field with registration and resolution logic\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  polls: t.field({\n    type: ['Poll'],\n    smartSubscription: true,\n    subscribe: (subscriptions, root, args, ctx, info) => {\n      subscriptions.register('poll-added')\n      subscriptions.register('poll-deleted')\n    },\n    resolve: (root, args, ctx, info) => {\n      return ctx.getThings();\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Input Types with SchemaBuilder Generic Types\nDESCRIPTION: Demonstrates an alternative approach to defining input types using SchemaBuilder generics. This method is useful when working with multiple schema builders.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inputs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Inputs: {\n    GiraffeInput: {\n      name: string;\n      birthdate: string;\n      height: number;\n    };\n  };\n}>({});\n\nbuilder.inputType('GiraffeInput', {\n  fields: (t) => ({\n    name: t.string({ required: true }),\n    birthdate: t.string({ required: true }),\n    height: t.float({ required: true }),\n  }),\n});\n\nbuilder.mutationType({\n  fields: (t) => ({\n    createGiraffe: t.field({\n      type: Giraffe,\n      args: {\n        input: t.arg({ type: 'GiraffeInput', required: true }),\n      },\n      resolve: (root, args) =>\n        new Giraffe(args.input.name, new Date(args.input.birthdate), args.input.height),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Objects and Queries with Updated API\nDESCRIPTION: Shows how to define Prisma objects and query fields using the new delegate-based approach instead of model names. Includes examples of exposing fields, relations, and creating query resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject(prisma.post, {\n  findUnique: (post) => ({ id: post.id }),\n  fields: (t) => ({\n    id: t.exposeID(\"id\"),\n    title: t.exposeString(\"title\"),\n    author: t.relation(\"author\"),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.prismaField({\n      type: prisma.user,\n      resolve: async (query, root, args, ctx, info) =>\n        prisma.user.findUniqueOrThrow({\n          ...query,\n          where: { id: ctx.userId },\n        }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Field-Level Subscription Registration\nDESCRIPTION: Implementation of field-level subscription registration for specific field updates\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      type: ['Answer'],\n      subscribe: (subscriptions, poll) => subscriptions.register(`poll-answers/${poll.id}`),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Granted Scopes within Pothos Object Types\nDESCRIPTION: This example illustrates the use of dynamic granted scopes in Pothos to modify field access conditions. The grantScopes function returns different scopes based on the user's role and the article's status, significantly reducing repetitive logic and improving scope management efficiency.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(Article, {\n  grantScopes: (article, context) => {\n    if (context.User.id === article.author.id) {\n      return ['author', 'readArticle'];\n    }\n    if (article.isDraft()) {\n      return [];\n    }\n    return ['readArticle'];\n  },\n  fields: (t) => ({\n    title: t.exposeString('title', {\n      authScopes: {\n        $granted: 'readArticle',\n      },\n    }),\n    content: t.exposeString('content', {\n      authScopes: {\n        $granted: 'readArticle',\n      },\n    }),\n    viewCount: t.exposeInt('viewCount', {\n      authScopes: {\n        $granted: 'author',\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authorization Settings in Pothos\nDESCRIPTION: Shows how to set up global authorization configuration including custom error handling and scope initialization. Includes error treatment options and unauthorized error customization.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Context: Context;\n  AuthScopes: {\n    loggedIn: boolean;\n  };\n}>({\n  scopeAuth: {\n    treatErrorsAsUnauthorized: true,\n    unauthorizedError: (parent, context, info, result) => new Error(`Not authorized`),\n    authScopes: async (context) => ({\n      loggedIn: !!context.User,\n    }),\n  },\n  plugins: [ScopeAuthPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Schema with Prisma Utils Plugin\nDESCRIPTION: Example of initializing a Pothos schema builder with the Prisma plugin and Prisma Utils plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport { PrismaClient } from '@prisma/client';\nimport type PrismaTypes from '@pothos/plugin-prisma/generated';\nimport PrismaPlugin from '@pothos/plugin-prisma';\nimport PrismaUtils from '@pothos/plugin-prisma-utils';\n\nexport const prisma = new PrismaClient({});\n\nexport default new SchemaBuilder<{\n  Scalars: {\n    DateTime: {\n      Input: Date;\n      Output: Date;\n    };\n  };\n  PrismaTypes: PrismaTypes;\n}>({  \n  plugins: [PrismaPlugin, PrismaUtils],\n  prisma: {\n    client: prisma,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type for Current User in TypeScript\nDESCRIPTION: This snippet defines a query type to fetch the currently logged-in user using the Viewer type. It utilizes the drizzleField to resolve the user based on the session context.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    me: t.drizzleField({\n      // We can use the ref returned by builder.drizzleObject to define our `drizzleField`\n      type: Viewer,\n      resolve: (query, root, args, ctx) =>\n        db.query.users.findFirst(\n          query({\n            where: (user, { eq }) => eq(user.id, ctx.user.id),\n          }),\n        ),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Recommended Error Handling Pattern with Interfaces\nDESCRIPTION: Shows a recommended approach to error handling using an Error interface, BaseError object type, and custom error types. This pattern provides consistent error querying while allowing for specialized error information.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport ErrorsPlugin from '@pothos/plugin-errors';\nconst builder = new SchemaBuilder({\n  plugins: [ErrorsPlugin],\n  errors: {\n    defaultTypes: [Error],\n  },\n});\n\nconst ErrorInterface = builder.interfaceRef<Error>('Error').implement({\n  fields: (t) => ({\n    message: t.exposeString('message'),\n  }),\n});\n\nbuilder.objectType(Error, {\n  name: 'BaseError',\n  interfaces: [ErrorInterface],\n});\n\nclass LengthError extends Error {\n  minLength: number;\n\n  constructor(minLength: number) {\n    super(`string length should be at least ${minLength}`);\n\n    this.minLength = minLength;\n    this.name = 'LengthError';\n  }\n}\n\nbuilder.objectType(LengthError, {\n  name: 'LengthError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    minLength: t.exposeInt('minLength'),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    // Simple error handling just using base error class\n    hello: t.string({\n      errors: {},\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (!name.startsWith(name.slice(0, 1).toUpperCase())) {\n          throw new Error('name must be capitalized');\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n    // Handling custom errors\n    helloWithMinLength: t.string({\n      errors: {\n        types: [LengthError],\n      },\n      args: {\n        name: t.arg.string({ required: true }),\n      },\n      resolve: (parent, { name }) => {\n        if (name.length < 5) {\n          throw new LengthError(5);\n        }\n\n        return `hello, ${name || 'World'}`;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Types to Pothos Schema Builder\nDESCRIPTION: Example of adding existing GraphQL types or an entire schema to the Pothos schema builder during initialization.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    // You can add individual types\n    // This accepts Any GraphQLNamedType (Objects, Interface, Unions, Enums, Scalars, and InputObjects)\n    types: [schema.getType('User'), schema.getType('Post')],\n    // Or you can add an entire external schema\n    schema: externalSchema,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Resolved Resources Manually\nDESCRIPTION: This snippet shows how to use the `cacheResolved` option to manually cache resources loaded in a resolver. The `cacheResolved` function converts the loaded object into its cache key (in this case, the user's ID).\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  cacheResolved: user => user.id,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Pagination Arguments with Builder Inference\nDESCRIPTION: Demonstrates creating a reusable pagination arguments helper that infers types from any provided schema builder instance.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/inferring-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createPaginationArgs<Types extends SchemaTypes>(\n  builder: PothosSchemaTypes.SchemaBuilder<Types>,\n) {\n  return builder.args((t) => ({\n    limit: t.int(),\n    offset: t.int(),\n  }));\n}\n\nbuilder.queryField('getUsers', (t) =>\n  t.field({\n    type: [Shaveable],\n    args: {\n      ...createPaginationArgs(builder),\n    },\n    resolve: () => [],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Datamodel for Edge Runtimes\nDESCRIPTION: Configures the Pothos generator to generate the datamodel for use in edge runtimes like Cloudflare Workers, where the Prisma client no longer exposes the DMMF datamodel. This involves setting the `generateDatamodel` option to `true` in the Pothos generator configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\n\"generator pothos {\\n  provider          = \\\"prisma-pothos-types\\\"\\n  clientOutput      = \\\"@prisma/client\\\"\\n  output            = \\\"./pothos-types.ts\\\"\\n  generateDatamodel = true\\n  documentation     = false\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Building Subgraph Schema and Starting Apollo Server\nDESCRIPTION: Shows how to build the subgraph schema using toSubGraphSchema method and start an Apollo Server instance with the generated schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = builder.toSubGraphSchema({\n  linkUrl: 'https://specs.apollo.dev/federation/v2.3',\n  federationDirectives: ['@key', '@external', '@requires', '@provides'],\n});\n\nconst server = new ApolloServer({\n  schema,\n});\n\nstartStandaloneServer(server, { listen: { port: 4000 } })\n  .then(({ url }) => {\n    console.log(`🚀 Server ready at ${url}`);\n  })\n  .catch((error) => {\n    throw error;\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Types to SchemaBuilder\nDESCRIPTION: Example showing how to add individual GraphQL types or an entire external schema to the SchemaBuilder during initialization.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    // You can add individual types\n    // This accepts Any GraphQLNamedType (Objects, Interface, Unions, Enums, Scalars, and InputObjects)\n    types: [schema.getType('User'), schema.getType('Post')],\n    // Or you can add an entire external schema\n    schema: externalSchema,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Added Types in Schema Fields\nDESCRIPTION: Shows how to reference added types in schema fields by extending SchemaBuilder with specific types. This helps to ensure type safety when defining fields using these types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder<{\n  Objects: {\n    User: UserType;\n  };\n  Interfaces: {\n    ExampleInterface: { id: string };\n  };\n  Scalars: {\n    DateTime: {\n      Output: Date;\n      Input: Date;\n    };\n  };\n}>({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    types: [\n      existingSchema.getType('User'),\n      existingSchema.getType('ExampleInterface'),\n      existingSchema.getType('DateTime'),\n    ],\n  },\n});\n\nbuilder.queryFields((t) => ({\n  user: t.field({ type: 'User', resolve: () => getUser() }),\n  exampleInterface: t.field({ type: 'ExampleInterface', resolve: () => getThings() }),\n  now: t.field({ type: 'DateTime', resolve: () => new Date() }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting up Add-GraphQL Plugin with SchemaBuilder\nDESCRIPTION: Basic setup for integrating the Add-GraphQL plugin into a Pothos SchemaBuilder instance.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AddGraphQLPlugin from '@pothos/plugin-add-graphql';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Relations\nDESCRIPTION: This code shows how to count related posts using `t.relationCount`. A filter is added to only count published posts.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaObject('User', {\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    postCount: t.relationCount('posts', {\n      where: {\n        published: true,\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Root Query Fields with Drizzle Objects\nDESCRIPTION: Defines root query fields that return Drizzle objects, providing entry points into the graph of data and handling query arguments and selections.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    post: t.drizzleField({\n      type: 'posts',\n      args: {\n        id: t.arg.id({ required: true }),\n      },\n      resolve: (query, root, args, ctx) =>\n        db.query.posts.findFirst(\n          query({\n            where: eq(posts.id, Number.parseInt(args.id, 10)),\n          }),\n        ),\n    }),\n    posts: t.drizzleField({\n      type: ['posts'],\n      resolve: (query, root, args, ctx) => db.query.posts.findMany(query()),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Mocks Plugin in TypeScript\nDESCRIPTION: Initializes a SchemaBuilder with the MocksPlugin to enable mocking capabilities in the GraphQL schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport MocksPlugin from '@pothos/plugin-mocks';\nconst builder = new SchemaBuilder({\n  plugins: [MocksPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Type Options in TypeScript\nDESCRIPTION: Type definition for scalar type configuration options. Includes serialization and parsing functions along with optional description and extensions.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n// Serializes an internal value to include in a response.\nserialize: GraphQLScalarSerializer<OutputShape>;\n// Parses an externally provided value to use as an input.\nparseValue?: GraphQLScalarValueParser<InputShape>;\n// Parses an externally provided literal value to use as an input.\nparseLiteral?: GraphQLScalarLiteralParser<InputShape>;\nextensions?: Readonly<Record<string, unknown>>;\n```\n\n----------------------------------------\n\nTITLE: Directive Definition Formats\nDESCRIPTION: Examples of two supported formats for defining directives on fields or types in Pothos, showing both array and object notation.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-directives/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directives: [\n    {\n      name: \"validation\",\n      args: {\n        regex: \"/abc+/\"\n      }\n    },\n    {\n      name: \"required\",\n      args: {},\n    }\n  ],\n  // or\n  directives: {\n    validation: {\n      regex: \"/abc+/\"\n    },\n    required: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Variants in Fields\nDESCRIPTION: This snippet demonstrates referencing variants from other variants. It shows how to reference the primary 'User' variant from the 'Viewer' variant and vice versa, along with conditional null handling for the 'viewer' field.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/variants.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Viewer = builder.prismaObject('User', {\n  variant: 'Viewer',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    // Using the model name ('User') will reference the primary variant\n    user: t.variant('User'),\n  });\n});\n\nconst User = builder.prismaNode('User', {\n  id: {\n    resolve: (user) => user.id,\n  },\n  fields: (t) => ({\n    // To reference another variant, use the returned object Ref instead of the model name:\n    viewer: t.variant(Viewer, {\n      // return null for viewer if the parent User is not the current user\n      isNull: (user, args, ctx) => user.id !== ctx.user.id,\n    }),\n    email: t.exposeString('email'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ID Scalar Type\nDESCRIPTION: Shows how to customize the default ID scalar type by specifying custom input and output types with broader type support\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/scalars.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Scalars: {\n    ID: {\n      Input: string;\n      Output: string | number | bigint;\n    };\n  };\n}>({});\n```\n\n----------------------------------------\n\nTITLE: Defining Directives in Pothos\nDESCRIPTION: Shows two different formats for defining directives on fields or types in Pothos. The first format uses an array of directive objects, while the second uses an object with directive names as keys.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-directives/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directives: [\n    {\n      name: \"validation\",\n      args: {\n        regex: \"/abc+/\"\n      }\n    },\n    {\n      name: \"required\",\n      args: {},\n    }\n  ],\n  // or\n  directives: {\n    validation: {\n      regex: \"/abc+/\"\n    },\n    required: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separate Field Definition Pattern\nDESCRIPTION: Illustrates how to define fields separately to break circular dependencies between types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/circular-references.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const User = builder.objectRef<UserType>('User').implement({\n  fields: (t) => ({ posts: t.expose('posts', { type: [Post] }) }),\n});\n\nexport const Post = builder.objectRef<PostType>('Post').implement({\n  fields: (t) => ({\n    // No more circular reference\n  }),\n});\n\nbuilder.objectField(Post, 'author', (t) => t.expose({ type: User }));\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Server with Pothos in Deno\nDESCRIPTION: TypeScript implementation of a basic GraphQL server using Pothos schema builder and GraphQL Yoga, including a simple hello query.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'graphql-yoga';\nimport SchemaBuilder from '@pothos/core';\n\nconst builder = new SchemaBuilder({});\n\nbuilder.queryType({\n  fields: (t) => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string({}),\n      },\n      resolve: (_, { name }) => `hello, ${name || 'World'}`,\n    }),\n  }),\n});\n\nconst yoga = createYoga({\n  schema: builder.toSchema(),\n});\n\nserve(yoga, {\n  onListen({ hostname, port }) {\n    console.log(`Listening on http://${hostname}:${port}/graphql`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up With-Input Plugin in Pothos\nDESCRIPTION: TypeScript code to set up the With-Input Plugin in a Pothos SchemaBuilder. It includes optional configuration for typeOptions and argOptions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport WithInputPlugin from '@pothos/plugin-with-input';\nconst builder = new SchemaBuilder({\n  plugins: [WithInputPlugin],\n  // optional\n  withInput: {\n    typeOptions: {\n      // default options for Input object types created by this plugin\n    },\n    argOptions: {\n      // set required: false to override default behavior\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating List Filters for Prisma Objects\nDESCRIPTION: Example of creating filter types for lists of Prisma objects.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserListFilter = builder.prismaListFilter(UserWhere, {\n  ops: ['every', 'some', 'none'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Mocking in Pothos\nDESCRIPTION: Example demonstrating how to mock both resolve and subscribe functions for a subscription field. Shows the structure for providing separate mocks for both the resolver and subscriber.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/mocks.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.subscriptionType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n      subscribe: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Subscription: {\n      someField: {\n        resolve: (parent, args, context, info) => 'Mock result!',\n        subscribe: (parent, args, context, info) => {\n          /* return a mock async iterator */\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Field Mocks to a Pothos GraphQL Schema\nDESCRIPTION: Creates a query field and then mocks its implementation through the mocks option in builder.toSchema(). The mock replaces the original resolver during execution.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Query: {\n      someField: (parent, args, context, info) => 'Mock result!',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Import Best Practices for Avoiding Circular Dependencies\nDESCRIPTION: Shows the recommended approach for handling imports in index files to prevent circular dependency issues.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/circular-references.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nexport * from './enums';\nexport * from './objects';\n// better\nimport './enums';\nimport './objects';\n```\n\n----------------------------------------\n\nTITLE: Using optional resolvers with fallback queries\nDESCRIPTION: This snippet demonstrates how to make the inclusion of related data optional. It modifies the `PostObject` definition to allow for an optional `author` field and provides a fallback mechanism that queries the database for the author if it's not already included in the post object. This approach offers flexibility in data fetching based on the parent resolver's needs.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/without-a-plugin.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostObject = builder.objectRef<Post & { author?: User }>('Post');\n\nPostObject.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    title: t.exposeString('title'),\n    author: t.field({\n      type: UserObject,\n      resolve: (post) =>\n        post.author ?? db.user.findUnique({ rejectOnNotFound: true, where: { id: post.authorId } }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Complexity Analysis\nDESCRIPTION: Sample GraphQL query demonstrating complexity calculation with nested fields and lists\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    # complexity = 131 (posts + 10 * (2 + 11))\n    author {\n      # complexity = 2 (author + 1 * name)\n      name # complexity = 1, depth: 3\n    }\n    comments {\n      # complexity = 11 (comments + 10 * comment)\n      comment # complexity = 1, depth: 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Schema AST Plugin\nDESCRIPTION: This TypeScript snippet configures GraphQL Code Generator to generate both client types and a schema.graphql file using the schema-ast plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// codegen.ts\nimport { printSchema } from 'graphql';\nimport type { CodegenConfig } from '@graphql-codegen/cli';\nimport { schema } from './src/schema';\n\nconst config: CodegenConfig = {\n  schema: printSchema(schema),\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n    },\n    'schema.graphql': {\n      plugins: ['schema-ast'],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Factory with Dataloader Support\nDESCRIPTION: Example of creating a context factory function that includes dataloader helpers. This demonstrates how to set up getter methods that provide access to dataloaders and helper functions for loading data.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initContextCache } from '@pothos/core';\nimport { LoadableRef, rejectErrors } from '@pothos/plugin-dataloader';\n\nexport const createContext = (req, res): ContextType => ({\n  // Adding this will prevent any issues if you server implementation\n  // copies or extends the context object before passing it to your resolvers\n  ...initContextCache(),\n\n  // using getters allows us to access the context object using `this`\n  get userLoader() {\n    return User.getDataloader(this);\n  },\n  get getLoader() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>) => ref.getDataloader(this);\n  },\n  get load() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>, id: K) => ref.getDataloader(this).load(id);\n  },\n  get loadMany() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>, ids: K[]) =>\n      rejectErrors(ref.getDataloader(this).loadMany(ids));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator with Schema File\nDESCRIPTION: This TypeScript snippet demonstrates how to configure GraphQL Code Generator to use a schema file instead of importing the schema directly. This approach offers benefits like easier code reviews and better interoperability with other GraphQL tools.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  schema: './path/to/schema.graphql',\n  documents: ['src/**/*.tsx'],\n  generates: {\n    './src/gql/': {\n      preset: 'client',\n      plugins: [],\n    },\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Simple Objects Plugin in Pothos\nDESCRIPTION: Illustrates setting up the Simple Objects Plugin in a Pothos schema. Involves importing the plugin and adding it to the schema builder's plugins array. This setup is required to use the plugin's functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/simple-objects.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Limits and Defaults\nDESCRIPTION: Setting up default complexity values and query limits with both inline and context-based configurations\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n\n  complexity: {\n    defaultComplexity: 1,\n    defaultListMultiplier: 10,\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n    // or\n    limit: (ctx) => ({\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    }),\n  },\n});\n// or\nconst schema = builder.toSchema({\n  complexity: {\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos Mocks Plugin\nDESCRIPTION: Configuration code to initialize the Pothos schema builder with the mocks plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-mocks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport MocksPlugin from '@pothos/plugin-mocks';\nconst builder = new SchemaBuilder({\n  plugins: [MocksPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Enum from Const Object in Pothos\nDESCRIPTION: Shows how to create an enum type from a const-asserted object using Object.fromEntries and Object.entries for conversion.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst VehicleType = {\n  sedan: 'SEDAN',\n  suv: 'SUV',\n  truck: 'TRUCK',\n  motorcycle: 'MOTORCYCLE',\n} as const;\n\nconst VehicleTypeEnum = builder.enumType('VehicleType', {\n  values: Object.fromEntries(\n    Object.entries(VehicleType).map(([name, value]) => [name, { value }]),\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dataloader Errors with rejectErrors\nDESCRIPTION: Demonstrates how to manually handle errors from dataloaders using the rejectErrors helper function.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rejectErrors } from '@pothos/plugin-dataloader';\n\nbuilder.queryField('user', (t) =>\n  t.field({\n    type: [User],\n    resolve: (parent, args, context) => {\n      const loader = User.getDataloader(context);\n\n      return rejectErrors(loader.loadMany(['123', '456']));\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing ID Scalar Types (TypeScript)\nDESCRIPTION: Example of customizing the ID scalar type definitions in the SchemaBuilder configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v4.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Scalars: {\n    ID: {\n      Input: number | string;\n      Output: number | string;\n    };\n  };\n}>({});\n```\n\n----------------------------------------\n\nTITLE: Extending External Federation Entities\nDESCRIPTION: Implementing external entity references with field requirements and resolvers\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ProductRef = builder.externalRef(\n  'Product',\n  builder.selection<{ upc: string }>('upc'),\n  (entity) => {\n    const product = inventory.find(({ upc }) => upc === entity.upc);\n    return product && { ...entity, ...product };\n  },\n);\n\nProductRef.implement({\n  externalFields: (t) => ({\n    price: t.float(),\n    weight: t.float(),\n  }),\n  fields: (t) => ({\n    upc: t.exposeString('upc'),\n    inStock: t.exposeBoolean('inStock'),\n    shippingEstimate: t.float({\n      requires: builder.selection<{ weight?: number; price?: number }>('price weight'),\n      resolve: (data) => {\n        if ((data.price ?? 0) > 1000) {\n          return 0;\n        }\n        return (data.weight ?? 0) * 0.5;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Entities in Pothos Federation\nDESCRIPTION: Creating an interface entity with a key and reference resolver using asEntity.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst Media = builder.interfaceRef<{ id: string }>('Media').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    ...\n  }),\n});\n\nbuilder.asEntity(Media, {\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: ({ id }) => loadMediaById(id),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Scalars using Pothos Builder Methods\nDESCRIPTION: Example of adding an existing GraphQL scalar type using Pothos builder methods.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.addScalarType('DateTime', existingSchema.getType('DateTime') as GraphQLScalar, {\n  // scalar options\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query Example - GraphQL\nDESCRIPTION: An example GraphQL subscription query that listens for changes to polls, retrieving questions and answers. It illustrates how to query smartly subscribed fields in a GraphQL operation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  polls {\n    question\n    answers {\n      id\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pothos Generator to Prisma Schema\nDESCRIPTION: Adds a Pothos generator to the Prisma schema. This generator is responsible for generating types that Pothos uses to understand the Prisma schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n\"generator pothos {\\n  provider = \\\"prisma-pothos-types\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Smart Subscriptions Plugin\nDESCRIPTION: Initial setup configuration for the smart subscriptions plugin including debounce delay and subscription handlers\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SmartSubscriptionsPlugin from '@pothos/plugin-smart-subscriptions';\n\nconst builder = new SchemaBuilder({\n  plugins: [SmartSubscriptionsPlugin],\n  smartSubscriptions: {\n    debounceDelay: number | null;\n    subscribe: (\n      name: string,\n      context: Context,\n      cb: (err: unknown, data?: unknown) => void,\n    ) => Promise<void> | void;\n    unsubscribe: (name: string, context: Context) => Promise<void> | void;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Interfaces using Builder Methods\nDESCRIPTION: Example showing how to add a GraphQL interface type using the addGraphQLInterface builder method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst NodeRef = builder.addGraphQLInterface<NodeShape>(\n  existingSchema.getType('Node') as GraphQLInterfaceType,\n  {\n    // interface options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up With-Input Plugin in SchemaBuilder\nDESCRIPTION: Configuration of the With-Input plugin in the SchemaBuilder, including optional typeOptions and argOptions settings.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport WithInputPlugin from '@pothos/plugin-with-input';\nconst builder = new SchemaBuilder({\n  plugins: [WithInputPlugin],\n  // optional\n  withInput: {\n    typeOptions: {\n      // default options for Input object types created by this plugin\n    },\n    argOptions: {\n      // set required: false to override default behavior\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Minor Version Change - Prisma Filtered Relations\nDESCRIPTION: Added support for filtered relations counts in Prisma\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- 50a60d92: Support prisma filtered relations counts\n```\n\n----------------------------------------\n\nTITLE: Full Arguments Validation with Zod Schema\nDESCRIPTION: Demonstrates how to validate all arguments together using a complete zod schema object.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    simple: t.boolean({\n      args: {\n        email: t.arg.string(),\n        phone: t.arg.string(),\n      },\n      // Validate all args together using own zod schema\n      validate: {\n        schema: zod.object({\n          email: zod.string().email(),\n          phone: zod.string(),\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Directive Formats\nDESCRIPTION: Examples of different formats for defining directives in Pothos, showing both array and object notation for directive configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/directives.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directives: [\n    {\n      name: \"validation\",\n      args: {\n        regex: \"/abc+/\"\n      }\n    },\n    {\n      name: \"required\",\n      args: {},\n    }\n  ],\n  // or\n  directives: {\n    validation: {\n      regex: \"/abc+/\"\n    },\n    required: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Loadable Node with Relay Plugin - TypeScript\nDESCRIPTION: This snippet defines a loadable node named UserNode that extracts the user's ID and loads users by their ID from the context. It includes the load function and a resolver for the ID.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserNode = builder.loadableNode('UserNode', {\n  id: {\n    resolve: (user) => user.id,\n  },\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({}),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dataloader Errors with rejectErrors Helper\nDESCRIPTION: Example of using the rejectErrors helper function to properly handle errors when manually using dataloader's loadMany method. This ensures errors are properly propagated through the GraphQL resolution process.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rejectErrors } from '@pothos/plugin-dataloader';\n\nbuilder.queryField('user', (t) =>\n  t.field({\n    type: [User],\n    resolve: (parent, args, context) => {\n      const loader = User.getDataloader(context);\n\n      return rejectErrors(loader.loadMany(['123', '456']));\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type Options in TypeScript\nDESCRIPTION: Type definition for enum type configuration options. Includes optional description, values, and name properties.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnionTypeOptions = {\n  description?: string;\n  values?: Values;\n  name?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Including Unreachable Types in SubGraph - TypeScript\nDESCRIPTION: Demonstrates how to explicitly include unresolved types in a sub-graph using conditions such as the presence of a resolvable key. Useful when implementing federated schemas with the Federation plugin in conjunction with the SubGraph plugin. Dependencies include both Federation and SubGraph plugins from Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/sub-graph.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport FederationPlugin, { hasResolvableKey } from '@pothos/plugin-federation';\nimport SubGraphPlugin from '@pothos/plugin-sub-graph';\n\nconst builder = new SchemaBuilder<{\n  SubGraphs: 'Public' | 'Internal';\n}>({\n  plugins: [SubGraphPlugin, FederationPlugin],\n  subGraphs: {\n    explicitlyIncludeType: (type, subGraphs) => hasResolvableKey(type)\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Interfaces Using Builder Methods\nDESCRIPTION: Illustrates the use of builder methods to add GraphQL interface types to a schema. This provides the flexibility to define interfaces with specific options needed for the schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst NodeRef = builder.addGraphQLInterface<NodeShape>(\n  existingSchema.getType('Node') as GraphQLInterfaceType,\n  {\n    // interface options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling prismaUtils in Prisma Schema\nDESCRIPTION: Configuration for enabling the prismaUtils feature in your schema.prisma file through the pothos generator.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator pothos {\n  provider     = \"prisma-pothos-types\"\n  // Enable prismaUtils feature\n  prismaUtils  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Nodes in TypeScript\nDESCRIPTION: This snippet demonstrates how to define relay nodes using drizzleNode, specifying the user ID field for the nodes and exposing user fields 'firstName' and 'lastName'.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.drizzleNode('users', {\n  name: 'User',\n  id: {\n    column: (user) => user.id,\n    // other options for the ID field can be passed here\n  },\n  fields: (t) => ({\n    firstName: t.exposeString('firstName'),\n    lastName: t.exposeString('lastName'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Simple Objects Plugin with Yarn\nDESCRIPTION: Command to install the Simple Objects Plugin package using Yarn package manager\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-simple-objects/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-simple-objects\n```\n\n----------------------------------------\n\nTITLE: Minor Version Change - Abstract Return Shape\nDESCRIPTION: Changed behavior to only use abstractReturnShapeKey when resolveType is not provided\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- c5b1e2d3: Only use abstractReturnShapeKey when resolveType is not provided\n```\n\n----------------------------------------\n\nTITLE: Creating Input Types for Create Mutations\nDESCRIPTION: Example of defining input types for create mutations, including handling of relations.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InputObjectRef } from '@pothos/core';\nimport { Prisma } from '@prisma/client';\n\nexport const UserCreate: InputObjectRef<Prisma.UserCreateInput> = builder.prismaCreate('User', {\n  name: 'UserCreate',\n  fields: () => ({\n    // scalars\n    id: 'Int',\n    email: 'String',\n    name: 'String',\n    // inputs for relations need to be defined separately as shown below\n    profile: UserCreateProfile,\n    // create fields for list relations are defined just like normal relations.\n    // Pothos will automatically handle making the inputs lists\n    posts: UserCreatePosts,\n  }),\n});\n\nexport const UserCreateProfile = builder.prismaCreateRelation('User', 'profile', {\n  fields: () => ({\n    // created with builder.prismaCreate as shown above for User\n    create: ProfileCreateWithoutUser,\n    // created with builder.prismaWhere\n    connect: ProfileUniqueFilter,\n  }),\n});\n\nexport const UserCreatePosts = builder.prismaCreateRelation('User', 'posts', {\n  fields: () => ({\n    // created with builder.prismaCreate as shown above for User\n    create: PostCreateWithoutAuthor,\n    // created with builder.prismaWhere\n    connect: PostUniqueFilter,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Input Argument Nullability\nDESCRIPTION: Setting up global defaults for input argument nullability using WithInputArgRequired type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{ WithInputArgRequired: false }>({\n  plugins: [WithInputPlugin],\n  withInput: {\n    argOptions: {\n      required: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Loadable Node Ref for Relay\nDESCRIPTION: This snippet illustrates how to define a loadable node ref for Relay using `builder.loadableNodeRef`. Similar to the previous example, it helps avoid circular references by separating definition and implementation. It includes `load`, `id` and `isTypeOf` configurations.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Or with relay\nconst UserNode = builder.loadableNodeRef('UserNode', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  id: {\n    resolve: (user) => user.id,\n  },\n});\n\nUserNode.implement({\n  isTypeOf: (obj) => obj instanceof User,\n  fields: (t) => ({}),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Input Type Options in TypeScript\nDESCRIPTION: Type definition for input type configuration options. Includes optional description and required fields property.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype InputTypeOptions = {\n  description?: string;\n  fields: InputShape;\n};\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using Error Fragments\nDESCRIPTION: Example of how to query a field that uses the errors plugin, showing the use of fragments to handle both success and error cases in the response.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"World\") {\n    __typename\n    ... on Error {\n      message\n    }\n    ... on QueryHelloSuccess {\n      data\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Context Cache for Plugins\nDESCRIPTION: Demonstrates how to initialize context cache for Pothos plugins to ensure proper functionality when context is modified.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/context.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initContextCache } from '@pothos/core';\n\nconst server = createYoga({\n  schema: builder.toSchema(),\n  context: async ({ req }) => ({\n    ...initContextCache(),\n\n    currentUser: await getUserFromAuthHeader(req.headers.authorization),\n  }),\n});\n\nconst server = createServer(yoga);\n\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Complexity Based on Arguments\nDESCRIPTION: Example of setting a field's complexity dynamically based on the arguments passed to the field or the context value.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    args: {\n      limit: t.arg.int(),\n    },\n    // base multiplier on how many posts are being requested\n    complexity: (args, ctx) => ({ field: 5, multiplier: args.limit ?? 5 }),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Enums using Pothos Builder Methods\nDESCRIPTION: Example of adding a GraphQL enum type using Pothos builder methods.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst OrderBy = builder.addGraphQLEnum<'Asc' | 'Desc'>(\n  existingSchema.getType('OrderBy') as GraphQLEnumType,\n  {\n    // enum options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Related Connections in TypeScript\nDESCRIPTION: This snippet shows how to implement related connections in a GraphQL API using drizzleNode. It defines a posts field that represents a connection to the user's posts.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.drizzleNode('users', {\n  name: 'User',\n  fields: (t) => ({\n    posts: t.relatedConnection('posts'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Datamodel with Pothos Builder\nDESCRIPTION: Demonstrates how to use the `getDatamodel` function (generated when `generateDatamodel` is enabled) with the Pothos schema builder.  This is required when using Prisma in edge runtimes, as the DMMF is not directly exposed by the Prisma client.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"import SchemaBuilder from '@pothos/core';\\nimport { PrismaClient, Prisma } from '@prisma/client';\\nimport PrismaPlugin from '@pothos/plugin-prisma';\\nimport type PrismaTypes from '@pothos/plugin-prisma/generated';\\nimport { getDatamodel } from '@pothos/plugin-prisma/generated';\\n\\nconst prisma = new PrismaClient({});\\n\\nconst builder = new SchemaBuilder<{\\n  Context: { user: { isAdmin: boolean } };\\n  PrismaTypes: PrismaTypes;\\n}>({\\n  plugins: [PrismaPlugin],\\n  prisma: {\\n    client: prisma,\\n    dmmf: getDatamodel(),\\n  },\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Adding Types to SchemaBuilder on Initialization\nDESCRIPTION: Illustrates how to add existing GraphQL types or entire schemas during SchemaBuilder initialization. Types added are automatically included if not overwritten by other types sharing their name.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    // You can add individual types\n    // This accepts Any GraphQLNamedType (Objects, Interface, Unions, Enums, Scalars, and InputObjects)\n    types: [existingSchema.getType('User'), existingSchema.getType('Post')],\n    // Or you can add an entire external schema\n    schema: existingSchema,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Object Subscription Options\nDESCRIPTION: Extended object subscription configuration with filtering, cache invalidation, and refetch options\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`, {\n      filter: (value) => true | false,\n      invalidateCache: (value) => context.PollCache.remove(poll.id),\n      refetch: ():  => context.Polls.fetchByID(poll.id)!),\n    });\n  },\n  fields: (t) => ({\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Viewer Type with Variants in TypeScript\nDESCRIPTION: This snippet defines a Viewer type representing the current user using the drizzleObject API, allowing access to user-specific fields and related posts. The 'drafts' field fetches unpublished posts associated with the user.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Viewer type representing the current user\nexport const Viewer = builder.drizzleObject('users', {\n  variant: 'Viewer',\n  select: {\n    columns: {},\n  },\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    // A reference to the normal user type so normal user fields can be queried\n    user: t.variant('users'),\n    // Adding drafts to View allows a user to fetch their own drafts without exposing it for Other Users in the API\n    drafts: t.relation('posts', {\n      query: {\n        where: (post, { eq }) => eq(post.published, false),\n        orderBy: (post, ops) => ops.desc(post.updatedAt),\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Setup in TypeScript\nDESCRIPTION: Initializes the Schema Builder with Simple Objects Plugin configuration\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-simple-objects/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Using @pothos/deno Package\nDESCRIPTION: Example of using the bundled @pothos/deno package with Skypack CDN for dependency management.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'https://cdn.skypack.dev/graphql-yoga@3.1.1';\nimport SchemaBuilder from 'https://esm.sh/@pothos/deno/packages/core/mod.ts';\nimport RelayPlugin from 'https://esm.sh/@pothos/deno/packages/plugin-relay/mod.ts';\n```\n\n----------------------------------------\n\nTITLE: Extending Simple Objects with Additional Fields\nDESCRIPTION: Example showing how to extend simple objects with additional fields using the builder.objectType method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-simple-objects/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(UserType, (t) => ({\n  fullName: t.string({\n    resolve: (user) => `${user.firstName} ${user.lastName}`,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Limits in SchemaBuilder\nDESCRIPTION: Example showing how to configure default complexity values and limits when creating a SchemaBuilder instance or when building the schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n  defaultComplexity: 1,\n  defaultListMultiplier: 10,\n  complexity: {\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n    // or\n    limit: (ctx) => ({\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    }),\n  },\n});\n// or\nconst schema = builder.toSchema({\n  complexity: {\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Major Release 2.0.0 in Markdown\nDESCRIPTION: Describes the major changes in version 2.0.0, including the release of Pothos v4 and readme updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/test-utils/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0\n\n### Major Changes\n\n- 29841a8: Release Pothos v4 🎉 see https://pothos-graphql.dev/docs/migrations/v4 for more details\n\n### Patch Changes\n\n- c1e6dcb: update readmes\n```\n\n----------------------------------------\n\nTITLE: Using Added GraphQL Object References in Field Definitions\nDESCRIPTION: Example demonstrating how to use the GraphQL object references returned from addGraphQLObject in field definitions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [PostRef],\n    resolve: () => loadPosts(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Prisma include query\nDESCRIPTION: This TypeScript code shows the Prisma include query that Pothos generates for the GraphQL query in the previous example. It includes nested includes for `posts` and `author`.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  include: {\n    posts: {\n      include: {\n        author: true;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Messages Example\nDESCRIPTION: Demonstrates how to add custom validation messages to field arguments.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    withMessage: t.boolean({\n      args: {\n        email: t.arg.string({\n          validate: {\n            email: [true, { message: 'invalid email address' }],\n          },\n        }),\n        phone: t.arg.string(),\n      },\n      validate: [\n        (args) => !!args.phone || !!args.email,\n        { message: 'Must provide either phone number or email address' },\n      ],\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Mocks in GraphQL Schema\nDESCRIPTION: Example showing how to create a query field and mock its resolver using the builder.toSchema method\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-mocks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Query: {\n      someField: (parent, args, context, info) => 'Mock result!',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Nullability (TypeScript)\nDESCRIPTION: Shows how to configure default field nullability settings in the SchemaBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v4.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const builder = new SchemaBuilder<{\n  DefaultFieldNullability: false;\n}>({\n  defaultFieldNullability: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Zod Validation Integration Example\nDESCRIPTION: Demonstrates integration with Zod validation plugin and custom error handling.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flattenErrors(\n  error: ZodFormattedError<unknown>,\n  path: string[],\n): { path: string[]; message: string }[] {\n    const errors = error._errors.map((message) => ({\n    path,\n    message,\n  }));\n\n  Object.keys(error).forEach((key) => {\n    if (key !== '_errors') {\n      errors.push(\n        ...flattenErrors((error as Record<string, unknown>)[key] as ZodFormattedError<unknown>, [\n          ...path,\n          key,\n        ]),\n      );\n    }\n  });\n\n  return errors;\n}\n\nconst ZodFieldError = builder\n  .objectRef<{\n    message: string;\n    path: string[];\n  }>('ZodFieldError')\n  .implement({\n    fields: (t) => ({\n      message: t.exposeString('message'),\n      path: t.exposeStringList('path'),\n    }),\n  });\n\nbuilder.objectType(ZodError, {\n  name: 'ZodError',\n  interfaces: [ErrorInterface],\n  fields: (t) => ({\n    fieldErrors: t.field({\n      type: [ZodFieldError],\n      resolve: (err) => flattenErrors(err.format(), []),\n    }),\n  }),\n});\n\nbuilder.queryField('fieldWIthValidation', (t) =>\n  t.boolean({\n    errors: {\n      types: [ZodError],\n    },\n    args: {\n      string: t.arg.string({\n        validate: {\n          type: 'string',\n          minLength: 3,\n        },\n      }),\n    },\n    resolve: () => true,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Loadable Node with Relay\nDESCRIPTION: This snippet demonstrates how to create a loadable node using the `loadableNode` method when using the Relay plugin. It defines the `id` resolver and the `load` function for fetching users by their IDs.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserNode = builder.loadableNode('UserNode', {\n  id: {\n    resolve: (user) => user.id,\n  },\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({}),\n});\n```\n\n----------------------------------------\n\nTITLE: Deno Project Configuration\nDESCRIPTION: Basic Deno configuration file referencing the import map.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"import_map.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Complexity Utility Function Usage\nDESCRIPTION: Example of using the complexityFromQuery utility function to calculate query complexity\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst complexity = complexityFromQuery(query, {\n  schema: schema,\n  // Complexity can be calculated based on the context and arguments,\n  // so you may need to provide valid values for the context and arguments.\n  // Both are optional, and will default to empty objects.\n  context: {},\n  variables: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Nodes\nDESCRIPTION: This code snippet shows how to handle cases where a record is not found in the database when executing the `node(id: ID!)` query. By setting `nullable: true`, the query will return `null` instead of throwing an error if the record is not found.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relay.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.prismaNode('Post', {\n  id: { resolve: (post) => String(post.id) },\n  nullable: true,\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Resolved Values in a Resolver - TypeScript\nDESCRIPTION: This snippet demonstrates how to cache resolved values loaded manually in a resolver by using the cacheResolved option, which takes a function to convert the loaded object into its cache key.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  cacheResolved: user => user.id,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Limits in SchemaBuilder\nDESCRIPTION: Configuration options for setting default complexity values and query limits in the SchemaBuilder constructor or when building the schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n  defaultComplexity: 1,\n  defaultListMultiplier: 10,\n  complexity: {\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n    // or\n    limit: (ctx) => ({\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    }),\n  },\n});\n// or\nconst schema = builder.toSchema({\n  complexity: {\n    limit: {\n      complexity: 500,\n      depth: 10,\n      breadth: 50,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Zod Schemas with Client Code - Schema Approach\nDESCRIPTION: Example showing how to define Zod schemas in an external file to share validation logic between server and client code using the schema option.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// shared\nimport { ValidationOptions } from '@pothos/plugin-zod';\n\nconst numberValidation = zod.number().max(5);\n\n// server\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.boolean({\n      args: {\n        num: t.arg.int({\n          validate: {\n            schema: numberValidation,\n          }\n        }),\n      },\n      resolve: () => true,\n    }),\n  });\n});\n\n// client\nnumberValidator.parse(3) // pass\nnumberValidator.parse('3') // fail\n```\n\n----------------------------------------\n\nTITLE: Validation Query Example\nDESCRIPTION: Example GraphQL query demonstrating how to handle validation errors.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  validation(string: \"a\") {\n    __typename\n    ... on QueryValidationSuccess {\n      data\n    }\n    ... on ZodError {\n      fieldErrors {\n        message\n        path\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema Example\nDESCRIPTION: Shows the resulting GraphQL schema structure after implementing the errors plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Error {\n  message: String!\n}\n\ntype Query {\n  hello(name: String!): QueryHelloResult\n}\n\nunion QueryHelloResult = Error | QueryHelloSuccess\n\ntype QueryHelloSuccess {\n  data: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Complexity Configuration\nDESCRIPTION: Examples of setting custom complexity values for fields with different configuration approaches\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: 20,\n  }),\n}));\n\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: { field: 5, multiplier: 20 },\n  }),\n}));\n\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    args: {\n      limit: t.arg.int(),\n    },\n    // base multiplier on how many posts are being requested\n    complexity: (args, ctx) => ({ field: 5, multiplier: args.limit ?? 5 }),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Setup in TypeScript\nDESCRIPTION: Initial setup of the complexity plugin with SchemaBuilder\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/complexity.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ComplexityPlugin from '@pothos/plugin-complexity';\n\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query demonstrating parallel requests with different delay times to test tracing\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/open-telemetry/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  fastHello: hello(delay: 10)\n  slowHello: hello(delay: 1000)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Authorization Checks\nDESCRIPTION: Implementation of custom error handling for authorization checks, including re-throwing of authorization errors and custom error handling logic.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport ScopeAuthPlugin, { AuthFailure, AuthScopeFailureType } from '@pothos/plugin-scope-auth';\n\nfunction throwFirstError(failure: AuthFailure) {\n  if ('error' in failure && failure.error) {\n    throw failure.error;\n  }\n\n  if (\n    failure.kind === AuthScopeFailureType.AnyAuthScopes ||\n    failure.kind === AuthScopeFailureType.AllAuthScopes\n  ) {\n    for (const child of failure.failures) {\n      throwFirstError(child);\n    }\n  }\n}\n\nconst builder = new SchemaBuilder<{\n  Context: Context;\n  AuthScopes: {\n    loggedIn: boolean;\n  };\n}>({\n  scopeAuth: {\n    treatErrorsAsUnauthorized: true,\n    unauthorizedError: (parent, context, info, result) => {\n      throwFirstError(result.failure);\n      return new Error(`Not authorized`);\n    },\n  },\n  plugins: [ScopeAuthPlugin],\n  authScopes: async (context) => ({\n    loggedIn: !!context.User,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Field Complexity with Custom Multiplier\nDESCRIPTION: Example of setting both field complexity value and multiplier for more precise complexity control in Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: { field: 5, multiplier: 20 },\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Running Example Applications\nDESCRIPTION: Commands to navigate to and start example applications, with options for standard start mode or development watch mode if supported by the example.\nSOURCE: https://github.com/hayes/pothos/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/path-to-example-app\npnpm start\n# or\npnpm dev # If the example supports a dev/watch mode\n```\n\n----------------------------------------\n\nTITLE: Using Custom Zod Schemas for Field Validation\nDESCRIPTION: Example showing how to use your own predefined zod schemas for field validation instead of using the validation options.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    list: t.boolean({\n      nullable: true,\n      args: {\n        max5: t.arg.int({\n          validate: {\n            schema: zod.number().int().max(5),\n          },\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Enums using Builder Methods\nDESCRIPTION: Example showing how to add a GraphQL enum type using the addGraphQLEnum builder method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst OrderBy = builder.addGraphQLEnum<'Asc' | 'Desc'>(\n  existingSchema.getType('OrderBy') as GraphQLEnumType,\n  {\n    // enum options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Federation Dependencies with NPM\nDESCRIPTION: Installing required packages for Federation support including the Pothos federation plugin, directives plugin, and Apollo subgraph\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-federation @pothos/plugin-directives @apollo/subgraph\n```\n\n----------------------------------------\n\nTITLE: Explicitly Including Types in SubGraph with Federation Plugin\nDESCRIPTION: Advanced example showing how to explicitly include types in a subgraph that might not be directly reachable, using the Federation plugin's key directive detection.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-sub-graph/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport FederationPlugin, { hasResolvableKey } from '@pothos/plugin-federation';\nimport SubGraphPlugin from '@pothos/plugin-sub-graph';\n\nconst builder = new SchemaBuilder<{\n  SubGraphs: 'Public' | 'Internal';\n}>({\n  plugins: [SubGraphPlugin, FederationPlugin],\n  subGraphs: {\n    explicitlyIncludeType: (type, subGraphs) => hasResolvableKey(type)\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Complexity for a Field\nDESCRIPTION: Example of setting a custom complexity value on a field in the schema builder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: 20,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Extending Context with Dataloader Types\nDESCRIPTION: Defines TypeScript interfaces to add loader methods to the context object for easier access to dataloaders.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoadableRef } from '@pothos/plugin-dataloader';\n\nexport interface ContextType {\n  userLoader: DataLoader<string, { id: number }>; // expose a specific loader\n  getLoader: <K, V>(ref: LoadableRef<K, V, ContextType>) => DataLoader<K, V>; // helper to get a loader from a ref\n  load: <K, V>(ref: LoadableRef<K, V, ContextType>, id: K) => Promise<V>; // helper for loading a single resource\n  loadMany: <K, V>(ref: LoadableRef<K, V, ContextType>, ids: K[]) => Promise<(Error | V)[]>; // helper for loading many\n  // other context fields\n}\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Markdown-formatted version headers and change categories for the changelog entries\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 2.0.0 - 2021-02-16\n\n#### 💥 Breaking\n\n#### 📦 Dependencies\n\n#### 📘 Docs\n\n#### 🛠 Internals\n\n### 2.0.0-alpha.1 - 2021-02-10\n\n#### 🛠 Internals\n\n# 2.0.0-alpha.0 - 2021-02-10\n\n#### 💥 Breaking\n\n#### 🚀 Updates\n\n### 1.2.1 - 2021-02-07\n\n#### 🐞 Fixes\n\n# [1.1.0]\n\n### 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Complexity with Field and Multiplier\nDESCRIPTION: Example of setting both a field complexity value and a multiplier for a field in the schema builder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: { field: 5, multiplier: 20 },\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriptions for Objects in Pothos\nDESCRIPTION: Example of defining a Poll object type with subscription registration. The subscribe function registers a subscription for each Poll instance based on its ID.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`)\n  },\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({...}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Input Objects using Pothos Builder Methods\nDESCRIPTION: Example of adding a GraphQL input object type using Pothos builder methods.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostFilter = builder.addGraphQLInput<{ title?: string, tags? string[] }>(\n  existingSchema.getType('PostFilter') as GraphQLInputObjectType,\n  {\n    // input options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Using Dataloaders\nDESCRIPTION: Shows how to manually access and use dataloaders for loadable objects by getting the dataloader from the object reference.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// create loadable object\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n\nbuilder.queryField('user', (t) =>\n  t.field({\n    type: User,\n    resolve: (parent, args, context) => {\n      // get data loader for User type\n      const loader = User.getDataloader(context);\n\n      // manually load a user\n      return loader.load('123');\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Field Options Type in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of field options for GraphQL arguments. Includes type definition, required flag, description and deprecation reason fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/arg-builder.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FieldOptions = {\n  type: ReturnType;\n  required?: boolean;\n  description?: string;\n  deprecationReason?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Objects with Simple Objects Plugin in Pothos\nDESCRIPTION: Shows how to extend an existing object type to add additional fields with resolvers. This example builds upon the previously defined 'UserType' and demonstrates adding a 'fullName' field using builder.objectType.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/simple-objects.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(UserType, (t) => ({\n  fullName: t.string({\n    resolve: (user) => `${user.firstName} ${user.lastName}`,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Object Type Options Interface\nDESCRIPTION: Interface definition for Object type options, including description, fields, interfaces, type checking, and naming configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ObjectTypeOptions = {\n  description?: string;\n  fields: FieldsFunction;\n  interfaces?: Interfaces;\n  isTypeOf: (obj: InterfaceShape) => boolean;\n  name?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Extended Subscription Options for Objects - TypeScript\nDESCRIPTION: Provides additional options for subscriptions on 'Poll' objects, including custom event filtering and cache invalidation. These options allow fine-grained control over subscription behaviors and data management.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`, {\n      filter: (value) => true | false,\n      invalidateCache: (value) => context.PollCache.remove(poll.id),\n      refetch: ():  => context.Polls.fetchByID(poll.id)!),\n    });\n  },\n  fields: (t) => ({\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Building Federated Schema and Starting Apollo Server\nDESCRIPTION: Using toSubGraphSchema to create a federated schema and starting an Apollo Server instance.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Use new `toSubGraphSchema` method to add subGraph specific types and queries to the schema\nconst schema = builder.toSubGraphSchema({\n  // defaults to v2.3\n  linkUrl: 'https://specs.apollo.dev/federation/v2.3',\n});\n\nconst server = new ApolloServer({\n  schema,\n});\n\nstartStandaloneServer(server, { listen: { port: 4000 } })\n  .then(({ url }) => {\n    console.log(`🚀 Server ready at ${url}`);\n  })\n  .catch((error) => {\n    throw error;\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Enum Types in Pothos\nDESCRIPTION: This snippet shows how to define fields using enum types in Pothos. It creates an enum 'LengthUnit' and uses it in a 'preferredNeckLengthUnit' field on the 'Giraffe' type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst LengthUnit = builder.enumType('LengthUnit', {\n  values: { Feet: {}, Meters: {} },\n});\n\nbuilder.objectType('Giraffe', {\n  fields: (t) => ({\n    preferredNeckLengthUnit: t.field({\n      type: LengthUnit,\n      resolve: () => 'Feet',\n    }),\n  }),\n});\n\nbuilder.queryType({\n  fields: (t) => ({\n    giraffe: t.field({\n      type: 'Giraffe',\n      resolve: () => ({ name: 'Gina' }),\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the GraphQL Server\nDESCRIPTION: Launches the GraphQL server using pnpm start command\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/open-telemetry/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Applying composeDirective in Pothos Federation\nDESCRIPTION: Adding the @composeDirective directive when building the subgraph schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const schema = builder.toSubGraphSchema({\n  // This adds the @composeDirective directive\n  composeDirectives: ['@custom'],\n  // composeDirective requires an @link directive on the schema pointing the the url for your directive\n  schemaDirectives: {\n    link: { url: 'https://myspecs.dev/myCustomDirective/v1.0', import: ['@custom'] },\n  },\n  // You currently also need to provide an actual implementation for your Directive\n  directives: [\n    new GraphQLDirective({\n      locations: [DirectiveLocation.OBJECT, DirectiveLocation.INTERFACE],\n      name: 'custom',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Schema for With-Input Example\nDESCRIPTION: The GraphQL schema produced by the previous TypeScript example, showing the generated Query type and Input type.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  example(input: QueryExampleInput!): ID!\n}\n\ninput QueryExampleInput {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Subscriptions for Fields - TypeScript\nDESCRIPTION: This snippet shows how to register subscriptions for a field of an object type, in this case 'answers' in 'Poll'. Subscriptions are registered for changes to poll answers, facilitating automatic updates when the data changes.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({\n      type: ['Answer'],\n      subscribe: (subscriptions, poll) => subscriptions.register(`poll-answers/${poll.id}`),\n      resolve: (parent, args, context, info) => {\n        return parent.answers;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Query Field in TypeScript with Pothos\nDESCRIPTION: This code shows how to define a query field using the Pothos builder in TypeScript. It's used for co-locating queries with their corresponding types.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/app-layout.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryField\n```\n\n----------------------------------------\n\nTITLE: Using complexityFromQuery Utility\nDESCRIPTION: Example of using the complexityFromQuery utility function to calculate the complexity of a GraphQL query programmatically.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst complexity = complexityFromQuery(query, {\n  schema: schema,\n  // Complexity can be calculated based on the context and arguments,\n  // so you may need to provide valid values for the context and arguments.\n  // Both are optional, and will default to empty objects.\n  context: {},\n  variables: {},\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query retrieves the current user's posts and the author of each post. It demonstrates how nested relations can be queried.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/relations.mdx#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  me {\n    posts {\n      author {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Object-Level Subscriptions\nDESCRIPTION: Implementation of object-level subscription registration with basic configuration\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType('Poll', {\n  subscribe: (subscriptions, poll, context) => {\n    subscriptions.register(`poll/${poll.id}`)\n  },\n  fields: (t) => ({\n    question: t.exposeString('question', {}),\n    answers: t.field({...}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SchemaBuilder with Drizzle Plugin\nDESCRIPTION: Sets up a Pothos SchemaBuilder with the Drizzle plugin, configuring the Drizzle client and schema as dependencies.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as schema from './schema';\nimport { drizzle } from 'drizzle-orm/...';\nimport SchemaBuilder from '@pothos/core';\nimport DrizzlePlugin from '@pothos/plugin-drizzle';\n\nconst db = drizzle(client, { schema });\n\nexport interface PothosTypes {\n  DrizzleSchema: typeof schema;\n}\n\nconst builder = new SchemaBuilder<PothosTypes>({\n  plugins: [DrizzlePlugin],\n  drizzle: {\n    client: db,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Load Results by ID - TypeScript\nDESCRIPTION: This snippet implements sorting of results from the load function based on the order of provided IDs. A sort function is provided to ensure correct mapping of results to their IDs.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  sort: user => user.id,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Field Directives in Pothos Federation\nDESCRIPTION: Demonstrating how to apply various field directives like @shareable, @tag, @inaccessible, and @override.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nt.field({\n  type: 'String',\n  shareable: true,\n  tag: ['someTag'],\n  inaccessible: true,\n  override: { from: 'users' },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Add GraphQL Plugin\nDESCRIPTION: This snippet demonstrates how to install the Add GraphQL Plugin using npm. This plugin is necessary to add existing GraphQL types to a Pothos project.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-add-graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Generator for Pothos\nDESCRIPTION: Configuration snippet showing how to update the Prisma schema generator from GiraphQL to Pothos types. This change is required when migrating to Pothos 3.0.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/giraphql-pothos.mdx#2025-04-18_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator pothos {\n  provider = \"prisma-pothos-types\"\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Notes\nDESCRIPTION: Important note about plugin ordering and error handling behavior when using errors plugin with Prisma plugin. The errors plugin must be listed before the validation plugin for proper functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### With the prisma plugin\n```\n\n----------------------------------------\n\nTITLE: Interface Type Options Definition\nDESCRIPTION: Interface definition for Interface type options, including description, fields, interfaces, and naming configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype InterfaceTypeOptions = {\n  description?: string;\n  fields: FieldsFunction;\n  interfaces?: Interfaces;\n  name?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Unauthorized Response Handling\nDESCRIPTION: Shows how to implement custom handling of unauthorized access attempts by returning alternative values instead of throwing errors.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    articles: t.field({\n      type: [Article],\n      authScopes: {\n        customPerm: 'readArticle',\n      },\n      resolve: () => Article.getSome(),\n      unauthorizedResolver: () => [],\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Input Field Options Type in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of field options for input fields. Includes type definition, required flag, description, and deprecation reason properties.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/input-field-builder.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FieldOptions = {\n  type: ReturnType;\n  required?: boolean;\n  description?: string;\n  deprecationReason?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Pothos Types\nDESCRIPTION: Executes the Prisma generate command. This command regenerates the Prisma client and also generates the types required by the Pothos Prisma plugin based on the `pothos` generator defined in the Prisma schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"npx prisma generate\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Circular References\nDESCRIPTION: This snippet demonstrates how to resolve circular reference issues that can occur when using Prisma object refs to reference each other. It uses `builder.prismaObjectField` to split out the field definition for one of the relationships.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/variants.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Viewer = builder.prismaObject('User', {\n  variant: 'Viewer',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    user: t.variant(User),\n  });\n});\n\nconst User = builder.prismaNode('User', {\n  interfaces: [Named],\n  id: {\n    resolve: (user) => user.id,\n  },\n  fields: (t) => ({\n    email: t.exposeString('email'),\n  }),\n});\n\n// Viewer references the `User` ref in its field definition,\n// referencing the `User` in fields would cause a circular type issue\nbuilder.prismaObjectField(Viewer, 'user', t.variant(User));\n```\n\n----------------------------------------\n\nTITLE: Extending External Entities in Pothos Federation\nDESCRIPTION: Using externalRef to extend entities from other services and adding new fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ProductRef = builder.externalRef(\n  'Product',\n  builder.selection<{ upc: string }>('upc'),\n  (entity) => {\n    const product = inventory.find(({ upc }) => upc === entity.upc);\n\n    // extends the entity ({upc: string}) with other product details available in this service\n    return product && { ...entity, ...product };\n  },\n);\n\nProductRef.implement({\n  // Additional external fields can be defined here which can be used by `requires` or `provides` directives\n  externalFields: (t) => ({\n    price: t.float(),\n    weight: t.float(),\n  }),\n  fields: (t) => ({\n    // exposes properties added during loading of the entity above\n    upc: t.exposeString('upc'),\n    inStock: t.exposeBoolean('inStock'),\n    shippingEstimate: t.float({\n      // fields can add a `requires` directive for any of the externalFields defined above\n      // which will be made available as part of the first arg in the resolver.\n      requires: builder.selection<{ weight?: number; price?: number }>('price weight'),\n      resolve: (data) => {\n        // free for expensive items\n        if ((data.price ?? 0) > 1000) {\n          return 0;\n        }\n        // estimate is based on weight\n        return (data.weight ?? 0) * 0.5;\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Add-GraphQL Plugin for Pothos\nDESCRIPTION: Command to install the Add-GraphQL plugin for Pothos using yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-add-graphql\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Object Type and Argument Names\nDESCRIPTION: Example showing how to customize the input type name and argument name using typeOptions and argOptions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      typeOptions: {\n        name: 'CustomInputTypeName',\n        // Additional options for the input type can be added here\n      },\n      argOptions: {\n        name: 'customArgName',\n        // Additional options for the input argument can be added here\n      },\n      input: {\n        id: t.input.id({ required: true }),\n      },\n      type: 'ID',\n      // inputs are now under `customArgName`\n      resolve: (root, args) => args.customArgName.id,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Direct Dependencies Import Without Import Maps\nDESCRIPTION: Alternative approach to importing dependencies directly using ESM.sh with specific version pinning.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'https://esm.sh/graphql-yoga@3.1.1?deps=graphql@16.6.0';\nimport SchemaBuilder from 'https://esm.sh/@pothos/core@3.23.1?deps=graphql@16.6.0';\nimport RelayPlugin from 'https://esm.sh/@pothos/plugin-relay@3.30.0?deps=graphql@16.6.0,@pothos/core@3.23.1';\n```\n\n----------------------------------------\n\nTITLE: Running Deno Application\nDESCRIPTION: Command to run the Deno application with network permissions.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Setting up Pothos AuthZ Plugin\nDESCRIPTION: Basic setup for the AuthZ plugin with SchemaBuilder configuration. Defines the AuthZRule type that maps to rule keys.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AuthzPlugin from '@pothos/plugin-authz';\n\nconst builder = new SchemaBuilder<{\n  AuthZRule: keyof typeof rules;\n}>({ \n  plugins: [AuthzPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Factory with Dataloader Helpers\nDESCRIPTION: Shows how to create a context factory function that includes dataloader helper methods for easier access to dataloaders.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initContextCache } from '@pothos/core';\nimport { LoadableRef, rejectErrors } from '@pothos/plugin-dataloader';\n\nexport const createContext = (req, res): ContextType => ({\n  // Adding this will prevent any issues if you server implementation\n  // copies or extends the context object before passing it to your resolvers\n  ...initContextCache(),\n\n  // using getters allows us to access the context object using `this`\n  get userLoader() {\n    return User.getDataloader(this);\n  },\n  get getLoader() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>) => ref.getDataloader(this);\n  },\n  get load() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>, id: K) => ref.getDataloader(this).load(id);\n  },\n  get loadMany() {\n    return <K, V>(ref: LoadableRef<K, V, ContextType>, ids: K[]) =>\n      rejectErrors(ref.getDataloader(this).loadMany(ids));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Type with SubGraph Options in Pothos\nDESCRIPTION: Example of defining a query type with SubGraph options, demonstrating how to specify which fields should be available in which subgraphs. Shows field-level configuration for access control.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-sub-graph/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  // Query type will be available in default, Public, and Internal schemas\n  subGraphs: ['Public', 'Internal'],\n  // Fields on the Query object will now default to not being a part of any subgraph\n  defaultSubGraphsForFields: [];\n  fields: (t) => ({\n    someField: t.string({\n      // someField will be in the default schema and \"Internal\" sub graph, but\n      // not present in the Public sub graph\n      subGraphs: ['Internal']\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Validation Errors\nDESCRIPTION: Example query that demonstrates how to handle validation errors in a GraphQL query using fragments to access both success data and validation error details.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  validation(string: \"a\") {\n    __typename\n    ... on QueryValidationSuccess {\n      data\n    }\n    ... on ZodError {\n      fieldErrors {\n        message\n        path\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FieldOptions Interface for Plugin Compatibility in TypeScript\nDESCRIPTION: This code snippet showcases updates to the `FieldOptionsByKind` interface, which now incorporates `InferredFieldOptionsByKind` to allow plugins to alter the 'resolve' option more flexibly. The change mandates explicit inclusion of 'resolve' types if previously extending built-in field option interfaces.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v4.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FieldOptionsByKind<\\n  Types extends SchemaTypes,\\n  ParentShape,\\n  Type extends TypeParam<Types>,\\n  Nullable extends FieldNullability<Type>,\\n  Args extends InputFieldMap,\\n  ResolveShape,\\n  ResolveReturnShape,\\n> {\\n- CustomObjectObject: CustomOptions<Types> &\\n-   PothosSchemaTypes.ObjectFieldOptions<\\n-     Types,\\n-     ParentShape,\\n-     Type,\\n-     Nullable,\\n-     Args,\\n-     ResolveReturnShape\\n-   >;\\n+ CustomObjectObject: CustomOptions<Types> &\\n+   PothosSchemaTypes.ObjectFieldOptions<\\n+     Types,\\n+     ParentShape,\\n+     Type,\\n+     Nullable,\\n+     Args,\\n+     ResolveReturnShape\\n+   > &\\n+   InferredFieldOptionsByKind<\\n+     Types,\\n+     Types['InferredFieldOptionsKind'],\\n+     ParentShape,\\n+     Type,\\n+     Nullable,\\n+     Args,\\n+     ResolveReturnShape\\n+   >;\\n}\n```\n\n----------------------------------------\n\nTITLE: Error Plugin Configuration Example - TypeScript\nDESCRIPTION: Example showing how to configure the Error Plugin with custom type names for error handling in Pothos GraphQL.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const builderWithCustomErrorTypeNames = new SchemaBuilder<{}>({\\n  plugins: [ErrorPlugin, ValidationPlugin],\\n  errorOptions: {\\n    defaultTypes: [Error],\\n    defaultResultOptions: {\\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_CustomResult`,\\n    },\\n    defaultUnionOptions: {\\n      name: ({ parentTypeName, fieldName }) => `${fieldName}_CustomUnion`,\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Subscription Field in Pothos\nDESCRIPTION: Example of creating a query field that also functions as a subscription. The smartSubscription flag enables this field to be used in subscriptions, with subscription registration for poll events.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  polls: t.field({\n    type: ['Poll'],\n    smartSubscription: true,\n    subscribe: (subscriptions, root, args, ctx, info) => {\n      subscriptions.register('poll-added')\n      subscriptions.register('poll-delted')\n    },\n    resolve: (root, args, ctx, info) => {\n      return ctx.getThings();\n    },\n  }),\n}))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Examples\nDESCRIPTION: Example GraphQL queries demonstrating how to fetch user data, posts, and nested relations with the implemented schema. Shows both simple and complex query structures.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/index.mdx#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  me {\n    email\n    posts {\n      title\n      author {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  me {\n    email\n    posts {\n      title\n      author {\n        id\n      }\n    }\n    oldPosts: posts(oldestFirst: true) {\n      title\n      author {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Type Names in Pothos with-input Plugin\nDESCRIPTION: Example showing how to customize the naming convention for input types using the typeOptions.name configuration in the with-input plugin. Demonstrates removing Query/Mutation prefix from input type names.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport WithInputPlugin from \"@pothos/plugin-with-input\";\nconst builder = new SchemaBuilder({\n  plugins: [WithInputPlugin],\n  withInput: {\n    typeOptions: {\n      name: ({ parentTypeName, fieldName }) => {\n        const capitalizedFieldName = `${fieldName[0].toUpperCase()}${fieldName.slice(1)}`;\n        // This will remove the default Query/Mutation prefix from the input type name\n        if (parentTypeName === \"Query\" || parentTypeName === \"Mutation\") {\n          return `${capitalizedFieldName}Input`;\n        }\n\n        return `${parentTypeName}${capitalizedFieldName}Input`;\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Complexity Analysis\nDESCRIPTION: A sample GraphQL query demonstrating how complexity is calculated, showing a query with a complexity of 131, depth of 3, and breadth of 5.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    # complexity = 131 (posts + 10 * (2 + 11))\n    author {\n      # complexity = 2 (author + 1 * name)\n      name # complexity = 1, depth: 3\n    }\n    comments {\n      # complexity = 11 (comments + 10 * comment)\n      comment # complexity = 1, depth: 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Union Type Options in TypeScript\nDESCRIPTION: Type definition for union type configuration options. Includes description, member types array, and type resolution function.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnionTypeOptions = {\n  description?: string;\n  types: Member[] | (() => Member[]);\n  resolveType: (parent: UnionShape, context) => MaybePromise<GraphQLObjectType | TypeName>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Scalar Type Definitions to GraphQL Code Generator Config\nDESCRIPTION: This TypeScript snippet shows how to add scalar type definitions (UUID and DateTime) to the GraphQL Code Generator configuration to prevent them from resolving to 'any'.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CodegenConfig = {\n  ...,\n  config: {\n    scalars: {\n      UUID: 'string',\n      DateTime: 'Date',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Pothos Mocks Plugin\nDESCRIPTION: Setup code to initialize the Pothos schema builder with the mocks plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/mocks.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport MocksPlugin from '@pothos/plugin-mocks';\nconst builder = new SchemaBuilder({\n  plugins: [MocksPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Boolean Input Field Methods in TypeScript\nDESCRIPTION: Shows the migration from deprecated bool/boolList methods to the new boolean/booleanList methods in InputFieldBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v2.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Old\nt.arg.bool({});\nt.arg.boolList({});\n// New\nt.arg.boolean();\nt.arg.booleanList();\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Directives Plugin\nDESCRIPTION: Command to install the Pothos directives plugin using yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-directives/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-directives\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in Pothos with Federation\nDESCRIPTION: Creating an object type and converting it to a federated entity with a key and reference resolver.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserType = builder.objectRef<User>('User').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    name: t.exposeString('name'),\n    username: t.exposeString('username'),\n  }),\n});\n\nbuilder.asEntity(UserType, {\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: (user, users) => users.find(({ id }) => user.id === id),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Interfaces using Pothos Builder Methods\nDESCRIPTION: Example of adding a GraphQL interface type using Pothos builder methods.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst NodeRef = builder.addGraphQLInterface<NodeShape>(\n  existingSchema.getType('Node') as GraphQLInterfaceType,\n  {\n    // interface options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pothos with Dataloader Plugin\nDESCRIPTION: Initial setup code for integrating the dataloader plugin with Pothos schema builder. This imports the plugin and adds it to the SchemaBuilder configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DataloaderPlugin from '@pothos/plugin-dataloader';\n\nconst builder = new SchemaBuilder({\n  plugins: [DataloaderPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Shared toKey Method for Caching and Sorting\nDESCRIPTION: This snippet illustrates the usage of the `toKey` option to define a single function for extracting the key from a loaded object, which can be used for both `cacheResolved` and `sort`. It simplifies the configuration when both features are needed.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  toKey: user => user.id,\n  cacheResolved: true,\n  sort: true,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Prisma Integration Example\nDESCRIPTION: Using the With-Input plugin with Prisma to create a field that queries a User model.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryField('user', (t) =>\n  t.prismaFieldWithInput({\n    type: 'User',\n    input: {\n      id: t.input.id({ required: true }),\n    },\n    resolve: (query, _, args) =>\n      prisma.user.findUnique({\n        where: {\n          id: Number.parseInt(args.input.id, 10),\n        },\n        ...query,\n      }),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Federation Plugin and Dependencies\nDESCRIPTION: Commands to install the required packages for using the Federation plugin with Pothos.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-federation @pothos/plugin-directives @apollo/subgraph\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @apollo/server\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Complexity Calculation\nDESCRIPTION: A sample GraphQL query that demonstrates how complexity is calculated based on field selections, depth, and breadth.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    # complexity = 131 (posts + 10 * (2 + 11))\n    author {\n      # complexity = 2 (author + 1 * name)\n      name # complexity = 1, depth: 3\n    }\n    comments {\n      # complexity = 11 (comments + 10 * comment)\n      comment # complexity = 1, depth: 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration of GraphQL Scalars in Pothos\nDESCRIPTION: Displays how to integrate existing scalar types into a Pothos schema without new methods, leveraging Pothos's built-in scalar type addition functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/add-graphql.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.addScalarType('DateTime', existingSchema.getType('DateTime') as GraphQLScalar, {\n  // scalar options\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Complexity Plugin\nDESCRIPTION: Command to install the Pothos complexity plugin using yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-complexity/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-complexity\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Object Types with Builder Methods\nDESCRIPTION: Examples showing how to add GraphQL object types using builder methods, including how to override type names, provide descriptions, and modify fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Passing in a generic type is recommended to ensure type-safety\nconst UserRef = builder.addGraphQLObject<UserType>(\n  existingSchema.getType('User') as GraphQLObjectType,\n  {\n    // Optionally you can override the types name\n    name: 'AddedUser',\n    // You can also pass in any other options you can define for normal object types\n    description: 'This type represents Users',\n  },\n);\n\nconst PostRef = builder.addGraphQLObject<{\n  id: string;\n  title: string;\n  content: string;\n}>(existingSchema.getType('Post') as GraphQLObjectType, {\n  fields: (t) => ({\n    // remove existing title field from type\n    title: null,\n    // add new titleField\n    postTitle: t.exposeString('title'),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Loadable Node Reference Using Relay - TypeScript\nDESCRIPTION: This snippet shows how to create a loadable node reference using Relay for UserNode, specifying a load function and implementing fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserNode = builder.loadableNodeRef('UserNode', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  id: {\n    resolve: (user) => user.id,\n  },\n});\n\nUserNode.implement({\n  isTypeOf: (obj) => obj instanceof User,\n  fields: (t) => ({}),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Loadable Object Reference with Relay Plugin - TypeScript\nDESCRIPTION: This snippet defines a loadable object reference for User. It uses the load function to fetch users by their ID and implements the corresponding fields to expose the ID.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObjectRef('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n});\n\nUser.implement({\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Subscriptions Plugin\nDESCRIPTION: NPM installation command for the Pothos smart subscriptions plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-smart-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Extending Interfaces with interfaceObject in Pothos Federation\nDESCRIPTION: Using interfaceObject to extend interfaces from another subGraph.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst Media = builder.objectRef<{ id: string }>('Media').implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    // add new MediaFields here that are available on all implementors of the `Media` type\n  }),\n});\n\nbuilder.asEntity(Media, {\n  interfaceObject: true,\n  key: builder.selection<{ id: string }>('id'),\n  resolveReference: (ref) => ref,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Maps for Deno Dependencies\nDESCRIPTION: JSON configuration for mapping external dependencies in Deno, including GraphQL, GraphQL Yoga, and Pothos core/plugins.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/deno.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"graphql\": \"https://esm.sh/graphql@16.6.0\",\n    \"graphql-yoga\": \"https://esm.sh/graphql-yoga?external=graphql\",\n    \"@pothos/core\": \"https://esm.sh/*@pothos/core@3.23.1\",\n    \"@pothos/plugin-relay\": \"https://esm.sh/*@pothos/plugin-relay@3.30.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dataloader Plugin Dependencies\nDESCRIPTION: Command to install both the dataloader package and Pothos dataloader plugin using yarn.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dataloader @pothos/plugin-dataloader\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query to fetch Giraffe data from the API.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/objects.mdx#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  giraffe {\n    name\n    age\n    height\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.4.0\nDESCRIPTION: Version update with field options args changes and dependency updates\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.0 - 2021-06-11\n\n#### 🚀 Updates\n\n- make field options args optional when empty ([ae71648](https://github.com/hayes/giraphql/commit/ae71648))\n\n#### 📦 Dependencies\n\n- update dev deps ([813d9d0](https://github.com/hayes/giraphql/commit/813d9d0))\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataloader Options\nDESCRIPTION: Demonstrates how to provide additional options for dataloaders using loaderOptions, such as setting maxBatchSize.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  loaderOptions: { maxBatchSize: 20 },\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  fields: (t) => ({ id: t.exposeID('id', {}) }),\n});\n\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadable({\n    type: [Post],\n    loaderOptions: { maxBatchSize: 20 },\n    load: (ids: number[], context) => context.loadPosts(ids),\n    resolve: (user, args) => user.postIDs,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Execute Function\nDESCRIPTION: Example of wrapping the GraphQL execute function with AuthZ rules implementation.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute } from 'graphql';\nimport { wrapExecuteFn } from '@graphql-authz/core';\nimport rules from './auth-rules';\n\nconst wrappedExecute = wrapExecuteFn(execute, { rules });\n```\n\n----------------------------------------\n\nTITLE: Installing Simple Objects Plugin for Pothos\nDESCRIPTION: Demonstrates how to install the Simple Objects Plugin for Pothos using npm. Required to enable simplified object and interface definition within a Pothos schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/simple-objects.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-simple-objects\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Prisma Plugin\nDESCRIPTION: Installs the Pothos Prisma plugin as a dependency using npm. This allows Pothos to integrate with Prisma and generate GraphQL schemas based on your Prisma schema.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"npm install --save @pothos/plugin-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Iterator Helper\nDESCRIPTION: Helper configuration for using async iterators with smart subscriptions\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder({\n  smartSubscriptions: {\n    ...subscribeOptionsFromIterator((name, { pubsub }) => {\n      return pubsub.asyncIterableIterator(name);\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Setup in TypeScript\nDESCRIPTION: Basic setup code to initialize the Simple Objects Plugin with Pothos SchemaBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-simple-objects/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example of how to query a field that implements error handling using fragments.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"World\") {\n    __typename\n    ... on Error {\n      message\n    }\n    ... on QueryHelloSuccess {\n      data\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Schema AST Plugin for GraphQL Code Generator\nDESCRIPTION: This snippet shows the npm command to install the schema-ast plugin, which is used to generate a schema.graphql file.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save -D @graphql-codegen/schema-ast\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dataloader Plugin\nDESCRIPTION: Configures the Pothos SchemaBuilder to use the dataloader plugin by importing and adding it to the plugins array.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DataloaderPlugin from '@pothos/plugin-dataloader';\n\nconst builder = new SchemaBuilder({\n  plugins: [DataloaderPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scalar Types in Query Fields\nDESCRIPTION: Shows how to use custom Date and PositiveInt scalar types in defining query fields\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/scalars.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  date: t.field({\n    type: 'Date',\n    resolve: () => new Date(),\n  }),\n\n  positive: t.field({\n    type: 'PositiveInt',\n    resolve: () => 5,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Shared toKey Method for Key Extraction - TypeScript\nDESCRIPTION: This snippet defines a loadable object using a shared toKey function for extracting the cache key, simplifying the setup by using the same function for cacheResolved and sort options.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst User = builder.loadableObject('User', {\n  load: (ids: string[], context: ContextType) => context.loadUsersById(ids),\n  toKey: user => user.id,\n  cacheResolved: true,\n  sort: true,\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n    ...\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Simple Objects Plugin with Yarn\nDESCRIPTION: Command to install the Simple Objects Plugin package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-simple-objects/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-simple-objects\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Plugin Dependencies\nDESCRIPTION: Commands for installing the required zod package and Pothos zod plugin using npm.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-zod/README.md#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save zod @pothos/plugin-zod\n```\n\n----------------------------------------\n\nTITLE: Direct Imports Configuration for Pothos\nDESCRIPTION: Example of importing Pothos dependencies directly without import maps, using ESM with specific version pinning.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'https://esm.sh/graphql-yoga@3.1.1?deps=graphql@16.6.0';\nimport SchemaBuilder from 'https://esm.sh/@pothos/core@3.23.1?deps=graphql@16.6.0';\nimport RelayPlugin from 'https://esm.sh/@pothos/plugin-relay@3.30.0?deps=graphql@16.6.0,@pothos/core@3.23.1';\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Mocks Plugin\nDESCRIPTION: Command to install the Pothos mocks plugin package via npm\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/mocks.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-mocks\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Options in SchemaBuilder (TypeScript)\nDESCRIPTION: Shows how to restore v3.x defaults when upgrading to Pothos 4.0 by configuring SchemaBuilder options.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v4.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Defaults: 'v3';\n}>({\n  defaults: 'v3',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Scope Auth Plugin\nDESCRIPTION: Command to install the Pothos scope auth plugin using yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-scope-auth\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Plugin Example\nDESCRIPTION: Example showing how to install a Pothos plugin (scope-auth) using npm.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/using-plugins.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-scope-auth\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition with Prisma for Users, Posts, and Comments with Subscriptions\nDESCRIPTION: The complete GraphQL schema showing type definitions for Users, Posts, and Comments, along with Query, Mutation, and Subscription operations. The schema includes interfaces for subscription events and specialized event types for Posts and Users that implement these interfaces.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-subscriptions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Mutation {\n  createPost(authorId: ID!, content: String!, title: String!): Post!\n  createUser(firstName: String!, lastName: String!): User!\n  deletePost(id: ID!): Post\n  deleteUser(id: ID!): User\n  updatePost(content: String, id: ID!, title: String): Post\n  updateUser(firstName: String, id: ID!, lastName: String): User\n}\n\nenum MutationType {\n  CREATED\n  DELETED\n  UPDATED\n}\n\ntype Post {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]!\n  user(id: ID!): User\n}\n\ntype Subscription {\n  post(id: ID!): SubscriptionPostEvent\n  posts: SubscriptionPostEvent!\n  user(id: ID!): SubscriptionUserEvent\n  users: SubscriptionUserEvent!\n}\n\ninterface SubscriptionEvent {\n  mutationType: String!\n}\n\ntype SubscriptionPostEvent implements SubscriptionEvent {\n  mutationType: String!\n  post: Post\n}\n\ntype SubscriptionUserEvent implements SubscriptionEvent {\n  mutationType: String!\n  user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Input Argument Nullability on a Per-Field Basis\nDESCRIPTION: Example of setting the input argument nullability for a specific field using argOptions.required.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    example: t.fieldWithInput({\n      type: 'Boolean',\n      nullable: true,\n      argOptions: {\n        required: false,\n      },\n      input: {\n        someInput: t.input.boolean({}),\n      },\n      resolve: (root, args) => {\n        return args.input?.someInput;\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Drizzle Plugin Package\nDESCRIPTION: Command to install the Pothos Drizzle plugin package using npm package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @pothos/plugin-drizzle\n```\n\n----------------------------------------\n\nTITLE: Query Type Options Interface\nDESCRIPTION: Interface definition for Query type options, including description and fields configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryTypeOptions = {\n  description?: string;\n  fields: FieldsFunction;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pothos Generator with Options\nDESCRIPTION: Demonstrates configuring the Pothos generator with additional options, including specifying the client output path and the output path for the generated types.  This configuration allows customizing where the generated code imports the PrismaClient from and where the generated types are written to.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/setup.mdx#2025-04-18_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\n\"generator pothos {\\n  provider = \\\"prisma-pothos-types\\\"\\n  clientOutput = \\\"@prisma/client\\\"\\n  output = \\\"./pothos-types.ts\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Subscription Query\nDESCRIPTION: Sample GraphQL query showing how to use the smart subscription to retrieve poll data with real-time updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-smart-subscriptions/README.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubsciption {\n  polls {\n    question\n    answers {\n      id\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Complexity Plugin with Yarn\nDESCRIPTION: Command to install the Pothos complexity plugin using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-complexity\n```\n\n----------------------------------------\n\nTITLE: Installing Add-GraphQL Plugin for Pothos\nDESCRIPTION: Command to install the Add-GraphQL plugin package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-add-graphql\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Subscriptions Plugin - Package Installer\nDESCRIPTION: This snippet demonstrates how to install the Smart Subscriptions Plugin for Pothos using npm. This is a prerequisite for using smart subscriptions in your Pothos project.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/smart-subscriptions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-smart-subscriptions\n```\n\n----------------------------------------\n\nTITLE: Exposing Fields from Underlying Data in Pothos\nDESCRIPTION: This snippet demonstrates how to expose fields from underlying data in Pothos. It uses the 'exposeString' helper to create a 'name' field on the 'Giraffe' type.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/fields.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{\n  Objects: { Giraffe: { name: string } };\n}>({});\n\nbuilder.objectType('Giraffe', {\n  fields: (t) => ({\n    name: t.exposeString('name', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: The core GraphQL schema defining types for Users, Posts, Comments along with Query, Mutation, and Subscription operations. Includes relationships between entities and basic CRUD functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-smart-subscriptions-apollo/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User!\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Mutation {\n  createOneUser(firstName: String!, lastName: String!): User!\n}\n\ntype Post {\n  author: User!\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  countManyUser: Int!\n}\n\ntype Subscription {\n  countManyUser: Int!\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SubGraph Plugin for Pothos with Yarn\nDESCRIPTION: Command to install the SubGraph plugin for Pothos using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-sub-graph/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-sub-graph\n```\n\n----------------------------------------\n\nTITLE: SchemaBuilder Options Type Definition\nDESCRIPTION: Type definition for SchemaBuilder options, which is currently empty but can be extended by plugins.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype SchemaBuilderOptions = {};\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.4.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.4.0, adding support for Prisma 6.0.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.4.0\n\n### Minor Changes\n\n- ea9981f: Support prisma 6.0\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Errors Plugin with Yarn\nDESCRIPTION: Command to install the @pothos/plugin-errors package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-errors\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos AuthZ Plugin\nDESCRIPTION: Command to install the Pothos AuthZ plugin using npm package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/authz.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-authz\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Blog Application\nDESCRIPTION: A GraphQL schema defining a blog-like data model with User, Post, and Comment types. The schema includes relationships between these entities and query endpoints for retrieving data.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/envelope-helix-fastify/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  author: User\n  comment: String!\n  id: ID!\n  post: Post!\n}\n\ntype Post {\n  author: User\n  comments: [Comment!]!\n  content: String!\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  post(id: ID!): Post\n  posts(skip: Int, take: Int): [Post!]\n  user(id: ID!): User\n}\n\ntype User {\n  comments: [Comment!]!\n  firstName: String!\n  fullName: String!\n  id: ID!\n  lastName: String!\n  posts: [Post!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with Tailwind CSS using npm or Yarn\nDESCRIPTION: These commands create a new Next.js project with Tailwind CSS integration using either npm's create-next-app or Yarn. They set up the project structure and install necessary dependencies for a Next.js application with Tailwind CSS styling.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-tailwindcss with-tailwindcss-app\n# or\nyarn create next-app --example with-tailwindcss with-tailwindcss-app\n```\n\n----------------------------------------\n\nTITLE: Running Pothos Server\nDESCRIPTION: Command to run the Pothos GraphQL server using Deno with network permissions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Dataloader Plugin Dependencies\nDESCRIPTION: Command to install the required dependencies for using the Pothos dataloader plugin, including both the dataloader package and the Pothos plugin itself.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dataloader @pothos/plugin-dataloader\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.4.1 Patch in Markdown\nDESCRIPTION: Documents the patch changes in version 4.4.1, improving inference of multiple interfaces.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.4.1\n\n### Patch Changes\n\n- d874bce: Improve inference of multiple interfaces\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Mocks in GraphQL Schema\nDESCRIPTION: Example demonstrating how to create and mock both resolve and subscribe functions for a subscription field\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-mocks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.subscriptionType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n      subscribe: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Subscription: {\n      someField: {\n        resolve: (parent, args, context, info) => 'Mock result!',\n        subscribe: (parent, args, context, info) => {\n          /* return a mock async iterator */\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Cards in JSX\nDESCRIPTION: JSX code for rendering a collection of card components that display information about Pothos plugins. Each card contains a title, link, and description of a specific plugin's functionality.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Add GraphQL\"\n    href=\"/docs/plugins/add-graphql\"\n    description={'Add existing GraphQL types to your schema'}\n  />\n\n<Card\n  title=\"Auth\"\n  href=\"/docs/plugins/scope-auth\"\n  description={'Add global, type level, or field level authorization checks to your schema'}\n/>\n\n<Card\n  title=\"Complexity\"\n  href=\"/docs/plugins/complexity\"\n  description={'A plugin for defining and limiting complexity of queries'}\n/>\n<Card\n  title=\"Dataloader\"\n  href=\"/docs/plugins/dataloader\"\n  description={'Quickly define data-loaders for your types and fields to avoid n+1 queries.'}\n/>\n\n<Card\n  title=\"Directives\"\n  href=\"/docs/plugins/directives\"\n  description={'Integrate with existing schema graphql directives in a type-safe way.'}\n/>\n\n<Card\n  title=\"Drizzle\"\n  href=\"/docs/plugins/drizzle\"\n  description={\n    'A plugin to support efficient queries through drizzles relational query builder API'\n  }\n/>\n\n<Card\n  title=\"Errors\"\n  href=\"/docs/plugins/errors\"\n  description={\n    'A plugin for easily including error types in your GraphQL schema and hooking up error types to resolvers.'\n  }\n/>\n\n<Card\n  title=\"Mocks\"\n  href=\"/docs/plugins/mocks\"\n  description={'Add mock resolvers for easier testing'}\n/>\n\n<Card\n  title=\"Prisma\"\n  href=\"/docs/plugins/prisma\"\n  description={\n    'A plugin for more efficient integration with prisma that can help solve n+1 issues and more efficiently resolve queries'\n  }\n/>\n\n<Card\n  title=\"Relay\"\n  href=\"/docs/plugins/relay\"\n  description={\n    'Easy to use builder methods for defining relay style nodes and connections, and helpful utilities for cursor based pagination.'\n  }\n/>\n\n<Card\n  title=\"Simple Objects\"\n  href=\"/docs/plugins/simple-objects\"\n  description={'Define simple object types without resolvers or manual type definitions.'}\n/>\n\n<Card\n  title=\"Smart Subscriptions\"\n  href=\"/docs/plugins/smart-subscriptions\"\n  description={'Make any part of your graph subscribable to get live updates as your data changes.'}\n/>\n\n<Card\n  title=\"Sub-Graph\"\n  href=\"/docs/plugins/sub-graph\"\n  description={\n    'Build multiple subsets of your graph to easily share code between internal and external APIs.'\n  }\n/>\n\n<Card\n  title=\"Tracing\"\n  href=\"/docs/plugins/tracing\"\n  description={\n    'Add tracing for resolver execution, with support for opentelemetry, newrelic, century, logging, and custom tracers'\n  }\n/>\n\n<Card\n  title=\"With-Input\"\n  href=\"/docs/plugins/with-input\"\n  description={'Define fields with inline input objects'}\n/>\n\n  <Card\n    title=\"Zod Validation\"\n    href=\"/docs/plugins/zod\"\n    description={'Validating your inputs and arguments'}\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Regenerating Types for Examples and Tests\nDESCRIPTION: Command to regenerate any auto-generated TypeScript types across all packages in the repository using the generate script.\nSOURCE: https://github.com/hayes/pothos/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run -r generate\n```\n\n----------------------------------------\n\nTITLE: Updating Validation Plugin Import (TypeScript)\nDESCRIPTION: Demonstrates how to update the validation plugin import from @pothos/plugin-validation to @pothos/plugin-zod.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/migrations/v4.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- import ValidationPlugin from '@pothos/plugin-validation';\n+ import ZodPlugin from '@pothos/plugin-zod';\n\nconst builder = new SchemaBuilder({\n-  plugins: [ValidationPlugin],\n+  plugins: [ZodPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Type with SubGraph Options\nDESCRIPTION: Example demonstrating how to define a query type with subgraph configurations. This shows how to make types available in specific subgraphs and how to configure field visibility.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-sub-graph/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  // Query type will be available in default, Public, and Internal schemas\n  subGraphs: ['Public', 'Internal'],\n  // Fields on the Query object will now default to not being a part of any subgraph\n  defaultSubGraphsForFields: [];\n  fields: (t) => ({\n    someField: t.string({\n      // someField will be in the default schema and \"Internal\" sub graph, but\n      // not present in the Public sub graph\n      subGraphs: ['Internal']\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Initial Release\nDESCRIPTION: Initial release changelog entries detailing dataloader plugin implementation and support\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-alpha.1 - 2021-05-08\n\n#### 🚀 Updates\n\n- add dataloader plugin ([2e2403a](https://github.com/hayes/giraphql/commit/2e2403a))\n- support more dataloader flows and add tests ([adf9408](https://github.com/hayes/giraphql/commit/adf9408))\n\n#### 🐞 Fixes\n\n- rename duplicate field in example ([8c55d1f](https://github.com/hayes/giraphql/commit/8c55d1f))\n- update snapshots with new test fields ([a7cc628](https://github.com/hayes/giraphql/commit/a7cc628))\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages with pnpm\nDESCRIPTION: Commands to install project dependencies and build all packages using pnpm package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Directives Plugin\nDESCRIPTION: Command to install the Pothos Directives Plugin using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-directives/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-directives\n```\n\n----------------------------------------\n\nTITLE: Dependency Update - Pothos Relay Plugin Version\nDESCRIPTION: Update of the Relay plugin dependency to version 3.26.0\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [631dea27]\n  - @pothos/plugin-relay@3.26.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: Markdown formatted changelog entry showing version history and dependency updates\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/simple-interfaces/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @pothos-examples/simple-interfaces\n\n## 3.1.7\n\n### Patch Changes\n\n- Updated dependencies [c306fd7]\n  - @pothos/core@4.6.0\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Packages\nDESCRIPTION: This snippet shows the npm commands to install the necessary packages for GraphQL Code Generator, including GraphQL, TypeScript, and the client preset.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/generating-client-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save graphql\nnpm install --save -D typescript @graphql-codegen/cli @graphql-codegen/client-preset\n```\n\n----------------------------------------\n\nTITLE: Installing With-Input Plugin via NPM\nDESCRIPTION: Command to install the @pothos/plugin-with-input package as a dependency.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-with-input/README.md#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-with-input\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Complete changelog documenting version history and changes including major releases, minor updates, and patches. Notable changes include migration to v4, interface improvements, dependency updates, and build process changes.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-simple-objects/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 4.1.1\n\n### Patch Changes\n\n- d874bce: Improve inference of multiple interfaces\n\n## 4.1.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n\n## 4.0.3\n\n### Patch Changes\n\n- Updated dependencies [777f6de]\n  - @pothos/core@4.0.2\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Update for @pothos/plugin-federation in Markdown\nDESCRIPTION: This snippet shows the format used to document version updates in the changelog. It includes the version number, change type (Patch, Minor, Major), and a brief description of the changes made.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.2\n\n### Patch Changes\n\n- d874bce: Improve inference of multiple interfaces\n```\n\n----------------------------------------\n\nTITLE: Optimizing queries by including related data\nDESCRIPTION: This snippet improves performance by including the author data directly in the Post object resolution. It modifies the `PostObject` definition to include the `author` field in the object's shape and updates the query for fetching posts to include the author. This avoids making separate queries for each post's author, thus reducing the number of database queries.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/without-a-plugin.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserObject = builder.objectRef<User>('User');\n// We add the author here in the objectRef\nconst PostObject = builder.objectRef<Post & { author: User }>('Post');\n\nUserObject.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    email: t.exposeString('email'),\n    posts: t.field({\n      type: [PostObject],\n      resolve: (user) =>\n        db.post.findMany({\n          // We now need to include the author when we query for posts\n          include: {\n            author: true,\n          },\n          where: { authorId: user.id },\n        }),\n    }),\n  }),\n});\n\nPostObject.implement({\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    title: t.exposeString('title'),\n    author: t.field({\n      type: UserObject,\n      // Now we can just return the author from the post instead of querying for it\n      resolve: (post) => post.author,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos SubGraph Plugin with Yarn\nDESCRIPTION: Command to install the Pothos SubGraph plugin package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-sub-graph/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-sub-graph\n```\n\n----------------------------------------\n\nTITLE: Changelog entries for Pothos project\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, dependency updates and patch changes across multiple Pothos packages and plugins.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-federation/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 971f1aad: Update dev dependencies\n- Updated dependencies [971f1aad]\n- Updated dependencies [971f1aad]\n  - @pothos/plugin-federation@3.0.0\n  - @pothos/plugin-directives@3.3.1\n  - @pothos/core@3.6.0\n  - @pothos/plugin-prisma@3.4.0\n\n## 2.1.3\n\n### Patch Changes\n\n- Updated dependencies [a8e31a70]\n  - @pothos/core@3.6.0\n  - @pothos/plugin-directives@3.3.0\n  - @pothos/plugin-prisma@3.4.0\n  - @pothos/plugin-relay@3.10.0\n  - @pothos/plugin-federation@0.4.0\n\n## 2.1.2\n\n### Patch Changes\n\n- Updated dependencies [241a385f]\n  - @pothos/plugin-prisma@3.3.0\n  - @pothos/plugin-relay@3.9.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pothos Complexity Plugin\nDESCRIPTION: Basic setup for importing and adding the Complexity Plugin to a Pothos SchemaBuilder instance.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ComplexityPlugin from '@pothos/plugin-complexity';\n\nconst builder = new SchemaBuilder({\n  plugins: [ComplexityPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed changelog entries documenting version changes, updates, and patches for the @pothos/plugin-prisma-utils plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma-utils/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @pothos/plugin-prisma-utils\n\n## 1.3.0\n\n### Minor Changes\n\n- 9cfb6a7: cache input mappings accross resolvers to reduce memory ussage in large schemas\n\n## 1.2.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.3.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.3.0, exporting the client cache for reset during requests.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0\n\n### Minor Changes\n\n- aadc82c: export client cache so it can be reset during request\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default for Input Argument Nullability\nDESCRIPTION: Example of configuring the global default for input argument nullability when creating the SchemaBuilder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst builder = new SchemaBuilder<{ WithInputArgRequired: false }>({\n  plugins: [WithInputPlugin],\n  withInput: {\n    argOptions: {\n      required: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.3.1 Patch in Markdown\nDESCRIPTION: Documents the patch changes in version 4.3.1, modifying when the client is loaded during database requests.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.1\n\n### Patch Changes\n\n- 52a70e9: Load client when db request is initialized rather than caching on model loader\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.2.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.2.0, replacing ESLint and Prettier with Biome.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n```\n\n----------------------------------------\n\nTITLE: Version 1.1.0 Release Notes\nDESCRIPTION: Release notes documenting version bump from 1.1.0-alpha.0 to 1.1.0 for @giraphql/plugin-mocks package.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [1.1.0](https://github.com/hayes/giraphql/compare/@giraphql/plugin-mocks@1.1.0-alpha.0...@giraphql/plugin-mocks@1.1.0) (2020-10-21)\n\n**Note:** Version bump only for package @giraphql/plugin-mocks\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.2.2 Patch in Markdown\nDESCRIPTION: Documents the patch changes in version 4.2.2, fixing reference relay options in the Prisma plugin.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.2\n\n### Patch Changes\n\n- 2f91f2b: Fix ref relay options in plugin-prisma\n```\n\n----------------------------------------\n\nTITLE: Referencing Added Types with Generic Type Parameters\nDESCRIPTION: Example showing how to reference added GraphQL types by including them in the SchemaBuilder's generic type parameters for objects, interfaces, and scalars.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder<{\n  Objects: {\n    User: UserType;\n  };\n  Interfaces: {\n    ExampleInterface: { id: string };\n  };\n  Scalars: {\n    DateTime: {\n      Output: Date;\n      Input: Date;\n    };\n  };\n}>({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    types: [\n      existingSchema.getType('User'),\n      existingSchema.getType('ExampleInterface'),\n      existingSchema.getType('DateTime'),\n    ],\n  },\n});\n\nbuilder.queryFields((t) => ({\n  user: t.field({ type: 'User', resolve: () => getUser() }),\n  exampleInterface: t.field({ type: 'ExampleInterface', resolve: () => getThings() }),\n  now: t.field({ type: 'DateTime', resolve: () => new Date() }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.1.1\nDESCRIPTION: Documents a patch change removing @sentry/tracing from @pothos/sentry-tracing.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.1\n\n### Patch Changes\n\n- 951988d: Remove @sentry/tracing from @pothos/sentry-tracing\n```\n\n----------------------------------------\n\nTITLE: Pothos Deno Package Import Example\nDESCRIPTION: Example showing how to import Pothos modules using the @pothos/deno package with Skypack CDN.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts';\nimport { createYoga } from 'https://cdn.skypack.dev/graphql-yoga@3.1.1';\nimport SchemaBuilder from 'https://esm.sh/@pothos/deno/packages/core/mod.ts';\nimport RelayPlugin from 'https://esm.sh/@pothos/deno/packages/plugin-relay/mod.ts';\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Mocks Plugin\nDESCRIPTION: Command to install the Pothos mocks plugin using yarn package manager\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-mocks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-mocks\n```\n\n----------------------------------------\n\nTITLE: Minor Version Change - Optional Schema Options\nDESCRIPTION: Making options objects optional on toSchema, queryType, and mutationType methods\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- d67764b5: Make options objecst on toSchema, queryType, and mutationType optional\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.2.1 Patch in Markdown\nDESCRIPTION: Documents the patch changes in version 4.2.1, fixing issues with PrismaRefs for field types breaking model inference.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.2.1\n\n### Patch Changes\n\n- fc44ea7: Fix a few cases where passing PrismaRefs for field types breaks model inference\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.6.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.6.0, adding support for a new prisma-client generator.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.6.0\n\n### Minor Changes\n\n- 955229a: Add support for new prisma-client generator\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Federation Plugin and Dependencies\nDESCRIPTION: Commands to install the required packages for using the Pothos Federation Plugin, including the directives plugin and Apollo subgraph.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-federation/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-federation @pothos/plugin-directives @apollo/subgraph\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @apollo/server\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates in Markdown\nDESCRIPTION: Markdown changelog entries documenting version changes and updates to the Pothos Relay plugin, including changes like renaming from GiraphQL to Pothos, adding loadManyWithoutCache option, and making edge nullability configurable.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-relay/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- ab4a9ae4: Fix some type compatibility issues when skipLibCheck is false\n\n## 3.3.0\n\n### Minor Changes\n\n- eb9c33b8: Add loadManyWithoutCache option to dataloader to avoid double caching in loadableNode\n\n## 3.2.0\n\n### Minor Changes\n\n- 2d9b21cd: Make edge nullability configurable at both the builder and field level\n- 695c9b2d: Make relay node nullability configurable\n\n### Patch Changes\n\n- 2d9b21cd: Use workspace:* for dev dependencies on pothos packages\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.0.1\nDESCRIPTION: Documents a fix for the GraphQL peer dependency version and updates to core dependencies.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.1\n\n### Patch Changes\n\n- 9bd203e: Fix graphql peer dependency version to match documented minumum version\n- Updated dependencies [9bd203e]\n  - @pothos/core@4.0.1\n  - @pothos/plugin-tracing@1.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server\nDESCRIPTION: Optional installation of Apollo Server for hosting the federated schema\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/federation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @apollo/server\n```\n\n----------------------------------------\n\nTITLE: Installing SubGraph Plugin for Pothos - package-install\nDESCRIPTION: Installs the `@pothos/plugin-sub-graph` package needed to create sub-selections in Pothos-based GraphQL schemas. This is a prerequisite for using the SubGraph functionality in your application.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/sub-graph.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-sub-graph\n```\n\n----------------------------------------\n\nTITLE: Version History Entry\nDESCRIPTION: A markdown changelog entry showing version updates and dependency changes\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/prisma-smart-subscriptions-apollo/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @pothos-examples/prisma-smart-subscriptions-apollo\n\n## 3.1.15\n\n### Patch Changes\n\n- Updated dependencies [955229a]\n  - @pothos/plugin-prisma@4.6.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Documents version changes and dependency updates across multiple releases, including patches and minor version bumps for Pothos core and various plugins.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/complex-app/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [11929311]\n  - @pothos/core@3.22.0\n  - @pothos/plugin-dataloader@3.12.0\n  - @pothos/plugin-prisma@3.35.0\n  - @pothos/plugin-prisma-utils@0.4.0\n  - @pothos/plugin-relay@3.28.0\n  - @pothos/plugin-scope-auth@3.14.0\n  - @pothos/plugin-simple-objects@3.6.0\n  - @pothos/plugin-validation@3.8.0\n\n## 1.3.4\n\n### Patch Changes\n\n- aa18acb7: update dev dependencies\n- Updated dependencies [aa18acb7]\n- Updated dependencies [aa18acb7]\n  - @pothos/core@3.21.1\n  - @pothos/plugin-dataloader@3.11.1\n  - @pothos/plugin-prisma@3.34.1\n  - @pothos/plugin-prisma-utils@0.3.1\n  - @pothos/plugin-relay@3.27.1\n  - @pothos/plugin-scope-auth@3.13.1\n  - @pothos/plugin-simple-objects@3.5.1\n  - @pothos/plugin-validation@3.7.1\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.5.0-alpha.0\nDESCRIPTION: Version bump entry noting addition of errors plugin\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-dataloader/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.0-alpha.0 - 2021-06-28\n\n#### 🚀 Updates\n\n- add errors plugin ([88509b4](https://github.com/hayes/giraphql/commit/88509b4))\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.0.0\nDESCRIPTION: Documents the release of Pothos v4, including readme updates and dependency changes.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0\n\n### Minor Changes\n\n- 29841a8: Release Pothos v4 🎉 see https://pothos-graphql.dev/docs/migrations/v4 for more details\n\n### Patch Changes\n\n- c1e6dcb: update readmes\n- Updated dependencies [c1e6dcb]\n- Updated dependencies [29841a8]\n  - @pothos/plugin-tracing@1.0.0\n  - @pothos/core@4.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs the required project dependencies using pnpm package manager\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/open-telemetry/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initial Release Changelog\nDESCRIPTION: Documentation of the initial 1.0.0 release of the package.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n### 1.0.0\n\nInitial release\n```\n\n----------------------------------------\n\nTITLE: Changelog Version History in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version history, changes, and updates for the Pothos auth plugin, starting from version 4.1.2 down to earlier versions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 4.1.2\n\n### Patch Changes\n\n- c2c504b: Fix parent type on on withAuth fields\n\n## 4.1.1\n\n### Patch Changes\n\n- 174c7b0: Bind `authScopes` loaders to returned provider\n\n## 4.1.0\n\n### Minor Changes \n\n- 27af377: replace eslint and prettier with biome\n\n## 4.0.2\n\n### Patch Changes\n\n- Updated dependencies [777f6de]\n  - @pothos/core@4.0.2\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Input Objects using Builder Methods\nDESCRIPTION: Example showing how to add a GraphQL input object type using the addGraphQLInput builder method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostFilter = builder.addGraphQLInput<{ title?: string, tags? string[] }>(\n  existingSchema.getType('PostFilter') as GraphQLInputObjectType,\n  {\n    // input options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Version Update History in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version updates and dependency changes for the @pothos-examples/prisma-relay package. Each entry includes version number and associated dependency updates.\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/relay-windowed-pagination/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @pothos-examples/prisma-relay\n\n## 3.1.10\n\n### Patch Changes\n\n- Updated dependencies [c306fd7]\n  - @pothos/core@4.6.0\n  - @pothos/plugin-relay@4.4.1\n```\n\n----------------------------------------\n\nTITLE: Using Enum Types in Pothos Object Fields\nDESCRIPTION: Demonstrates practical usage of enum types as arguments and field return types in Pothos object fields.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/guide/enums.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectFields('Giraffe', (t) => ({\n  height: t.float({\n    args: {\n      unit: t.arg({\n        type: LengthUnit,\n        required: true,\n        defaultValue: 'Meters',\n      }),\n    },\n    resolve: (parent, args) =>\n      args.unit === 'Meters' ? parent.heightInMeters : parent.heightInMeters * 3.281,\n  }),\n  diet: t.field({\n    description:\n      'While Giraffes are herbivores, they do eat the bones of dead animals to get extra calcium',\n    type: Diet,\n    resolve: () => Diet.HERBIVOROUS,\n  }),\n  species: t.field({\n    type: GiraffeSpecies,\n    resolve: () => 'camelopardalis' as const,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Packages\nDESCRIPTION: Example command showing how to run tests for a specific package (in this case @pothos/core) using the pnpm filter command with vitest.\nSOURCE: https://github.com/hayes/pothos/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @pothos/core exec vitest\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Unions using Pothos Builder Methods\nDESCRIPTION: Example of adding a GraphQL union type using Pothos builder methods.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst SearchResult = builder.addGraphQLUnion<User | Post>(\n  existingSchema.getType('SearchResult') as GraphQLUnionType,\n  {\n    // union options\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Errors Plugin with Yarn\nDESCRIPTION: Command for installing the Pothos errors plugin package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-errors/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-errors\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.5.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.5.0, skipping query field selections within deferred fragments.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.5.0\n\n### Minor Changes\n\n- 2c0e072: Skip querying field selections within `@defer`red fragments\n```\n\n----------------------------------------\n\nTITLE: Project TODO Checklist in Markdown\nDESCRIPTION: A markdown checklist tracking the implementation status of various features including connections, data loading, GraphQL interfaces, and testing components.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/TODO.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## TODO\n\n- [x] connections\n- [ ] connection helpers\n- [ ] query usage checks\n- [x] normalize extras callback functions before merging\n- [x] with input integration\n- [x] errors integration\n- [x] drizzle field methods on builder\n- [x] drizzle refs\n- [x] drizzle interface types\n- [x] relay nodes\n- [ ] tests\n- [x] docs\n- [x] variants\n- [x] fallback dataloader\n- [ ] custom dataloader override\n- [x] default selections for id/data-loading\n- [ ] interface check for compatibility of implementors\n- [ ] totalCount API\n- [ ] Indirect many to many connections (requires v2 relational API)\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Scalars using Existing Pothos Method\nDESCRIPTION: Example demonstrating how to add a GraphQL scalar from an existing schema using Pothos' built-in addScalarType method.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-add-graphql/README.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.addScalarType('DateTime', existingSchema.getType('DateTime') as GraphQLScalar, {\n  // scalar options\n});\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema Implementation with Simple Objects\nDESCRIPTION: Demonstrates a full implementation including simple objects, interfaces, field definitions, and query type setup with resolvers\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-simple-objects/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core';\nimport SimpleObjectsPlugin from '@pothos/plugin-simple-objects';\n\nconst builder = new SchemaBuilder({\n  plugins: [SimpleObjectsPlugin],\n});\n\nconst ContactInfo = builder.simpleObject('ContactInfo', {\n  fields: (t) => ({\n    email: t.string({\n      nullable: false,\n    }),\n    phoneNumber: t.string({\n      nullable: true,\n    }),\n  }),\n});\n\nconst Node = builder.simpleInterface('Node', {\n  fields: (t) => ({\n    id: t.id({\n      nullable: false,\n    }),\n  }),\n});\n\nconst UserType = builder.simpleObject(\n  'User',\n  {\n    interfaces: [Node],\n    fields: (t) => ({\n      firstName: t.string(),\n      lastName: t.string(),\n      contactInfo: t.field({\n        type: ContactInfo,\n        nullable: false,\n      }),\n    }),\n  },\n  (t) => ({\n    fullName: t.string({\n      resolve: (user) => `${user.firstName} ${user.lastName}`,\n    }),\n  }),\n);\n\nbuilder.queryType({\n  fields: (t) => ({\n    user: t.field({\n      type: UserType,\n      args: {\n        id: t.arg.id({ required: true }),\n      },\n      resolve: (parent, args, { User }) => {\n        return {\n          id: '1003',\n          firstName: 'Leia',\n          lastName: 'Organa',\n          contactInfo: {\n            email: 'leia@example.com',\n            phoneNumber: null,\n          },\n        };\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Mocks Plugin via Yarn\nDESCRIPTION: Command to install the @pothos/plugin-mocks package using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-mocks\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.1.0\nDESCRIPTION: Documents a minor change replacing eslint and prettier with biome.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: A markdown formatted changelog documenting version history of the Pothos library, including major releases, minor updates, and patch changes. Each entry includes version numbers, commit hashes, and descriptions of changes.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/converter/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 4.3.0\n\n### Minor Changes\n\n- c306fd7: Support adding 'Subscription', 'Query', and 'Mutation' as non-root objects when using custom names for root types\n\n## 4.2.0\n\n### Minor Changes\n\n- 456da16: Add support for custom names on Root types\n\n## 4.1.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 4.1.0 Release in Markdown\nDESCRIPTION: Documents the minor changes in version 4.1.0, improving queryFromInfo typing and using a shared directive name for indirect resolutions.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.1.0\n\n### Minor Changes\n\n- 307340a: Improve queryFromInfo typing\n- 307340a: Use a shared directive name for defining indirect resolutions\n```\n\n----------------------------------------\n\nTITLE: Displaying Version 2.1.0 Changes in Markdown\nDESCRIPTION: Documents minor changes in version 2.1.0, replacing eslint and prettier with biome.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/test-utils/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n```\n\n----------------------------------------\n\nTITLE: Running All Tests\nDESCRIPTION: Command to run the test suite for all packages in the Pothos project.\nSOURCE: https://github.com/hayes/pothos/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Showing Version 2.0.1 Patch in Markdown\nDESCRIPTION: Details a patch update in version 2.0.1, fixing the GraphQL peer dependency version.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/test-utils/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.1\n\n### Patch Changes\n\n- 9bd203e: Fix graphql peer dependency version to match documented minumum version\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries showing version updates and dependency changes for the @pothos/website package, tracking its relationship with @pothos/core.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [1ecea46]\n  - @pothos/core@3.41.2\n```\n\n----------------------------------------\n\nTITLE: Using Variants in Relations\nDESCRIPTION: This snippet shows how to use variants when defining relations between Prisma models. It defines a 'PostDraft' variant and demonstrates how to specify it for a relation using the `type` option, filtering results using the `query` option.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/prisma/variants.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst PostDraft = builder.prismaNode('Post', {\n  variant: 'PostDraft'\n  // This set's what database field to use for the nodes id field\n  id: { field: 'id' },\n  // fields work just like they do for builder.prismaObject\n  fields: (t) => ({\n    title: t.exposeString('title'),\n    author: t.relation('author'),\n  }),\n});\n\nconst Viewer = builder.prismaObject('User', {\n  variant: 'Viewer',\n  fields: (t) => ({\n    id: t.exposeID('id'),\n    drafts: t.relation('posts', {\n      // This will cause this relation to use the PostDraft variant rather than the default Post variant\n      type: PostDraft,\n      query: { where: { draft: true } },\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, dependencies updates, and feature additions for the @pothos/plugin-tracing package.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-tracing/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @pothos/plugin-tracing\n\n## 1.1.0\n\n### Minor Changes\n\n- 27af377: replace eslint and prettier with biome\n\n## 1.0.2\n\n### Patch Changes\n\n- Updated dependencies [777f6de]\n  - @pothos/core@4.0.2\n\n## 1.0.1\n\n### Patch Changes\n\n- 9bd203e: Fix graphql peer dependency version to match documented minumum version\n- Updated dependencies [9bd203e]\n  - @pothos/core@4.0.1\n\n## 1.0.0\n\n### Minor Changes\n\n- 29841a8: Release Pothos v4 🎉 see https://pothos-graphql.dev/docs/migrations/v4 for more details\n\n### Patch Changes\n\n- c1e6dcb: update readmes\n- Updated dependencies [c1e6dcb]\n- Updated dependencies [29841a8]\n  - @pothos/core@4.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Authorization Scopes in Pothos\nDESCRIPTION: This code snippet demonstrates how to define authorization scopes for a field in a Pothos object type. The field 'viewCount' uses an authScopes function to check if the user is the author or to require employee scope otherwise. This method facilitates conditional access control. Requires surrounding Pothos builder setup.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-scope-auth/README.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(Article, {\n  fields: (t) => ({\n    viewCount: t.exposeInt('viewCount', {\n      authScopes: (article, args, context, info) => {\n        if (context.User.id === article.author.id) {\n          return true;\n        }\n        return {\n          employee: true,\n        };\n      },\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Deno Configuration for Pothos\nDESCRIPTION: Basic Deno configuration file that specifies the import map location.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"import_map.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Container\nDESCRIPTION: Starts a Zipkin container in Docker for tracing visualization on port 9411\nSOURCE: https://github.com/hayes/pothos/blob/main/examples/open-telemetry/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Fields with Loadable Objects\nDESCRIPTION: Shows how to implement query fields that return loadable User objects, demonstrating how IDs are automatically loaded when needed.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    user: t.field({\n      type: User,\n      args: {\n        id: t.arg.string({ required: true }),\n      },\n      // Here we can just return the ID directly rather than loading the user ourselves\n      resolve: (root, args) => args.id,\n    }),\n    currentUser: t.field({\n      type: User,\n      // If we already have the user, we use it, and the dataloader will not be called\n      resolve: (root, args, context) => context.currentUser,\n    }),\n    users: t.field({\n      type: [User],\n      args: {\n        ids: t.arg.stringList({ required: true }),\n      },\n      // Mixing ids and user objects also works\n      resolve: (_root, args, context) => [...args.ids, context.CurrentUser],\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Added Types in Pothos Schema Builder\nDESCRIPTION: Demonstrates how to reference added types when defining fields in the Pothos schema, including objects, interfaces, and scalars.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existingSchema } from './existing-schema-location';\n\nconst builder = new SchemaBuilder<{\n  Objects: {\n    User: UserType;\n  };\n  Interfaces: {\n    ExampleInterface: { id: string };\n  };\n  Scalars: {\n    DateTime: {\n      Output: Date;\n      Input: Date;\n    };\n  };\n}>({\n  plugins: [AddGraphQLPlugin],\n  add: {\n    types: [\n      existingSchema.getType('User'),\n      existingSchema.getType('ExampleInterface'),\n      existingSchema.getType('DateTime'),\n    ],\n  },\n});\n\nbuilder.queryFields((t) => ({\n  user: t.field({ type: 'User', resolve: () => getUser() }),\n  exampleInterface: t.field({ type: 'ExampleInterface', resolve: () => getThings() }),\n  now: t.field({ type: 'DateTime', resolve: () => new Date() }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Mocking Subscription Resolvers in Pothos GraphQL\nDESCRIPTION: Demonstrates how to mock both the resolve and subscribe functions for a subscription field. The mocks are provided as nested objects with separate implementations for each function.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-mocks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.subscriptionType({\n  fields: (t) => ({\n    someField: t.string({\n      resolve: () => {\n        throw new Error('Not implemented');\n      },\n      subscribe: () => {\n        throw new Error('Not implemented');\n      },\n    }),\n  }),\n});\n\nbuilder.toSchema({\n  mocks: {\n    Subscription: {\n      someField: {\n        resolve: (parent, args, context, info) => 'Mock result!',\n        subscribe: (parent, args, context, info) => {\n          /* return a mock async iterator */\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context-Based Dataloader Helpers in Resolvers\nDESCRIPTION: Demonstrates different ways to use the context-based dataloader helpers in GraphQL resolvers.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  fromContext1: t.field({\n    type: User,\n    resolve: (root, args, { userLoader }) => userLoader.load('123'),\n  }),\n  fromContext2: t.field({\n    type: User,\n    resolve: (root, args, { getLoader }) => getLoader(User).load('456'),\n  }),\n  fromContext3: t.field({\n    type: User,\n    resolve: (root, args, { load }) => load(User, '789'),\n  }),\n  fromContext4: t.field({\n    type: [User],\n    resolve: (root, args, { loadMany }) => loadMany(User, ['123', '456']),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Drizzle Connection for Posts in TypeScript\nDESCRIPTION: This snippet defines a drizzleConnection for fetching published posts. It specifies the ordering of posts based on their IDs in descending order.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-drizzle/README.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.drizzleConnection({\n    type: 'posts',\n    resolve: (query, root, args, ctx) =>\n      db.query.posts.findMany(\n        query({\n          where: (post, { eq }) => eq(post.published, true),\n          orderBy: (post) => ({ desc: post.id }),\n        }),\n      ),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Relationships with loadableList\nDESCRIPTION: Shows how to use loadableList to handle one-to-many relationships, where a single ID can load multiple records.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Loading multiple Posts\nbuilder.objectField(User, 'posts', (t) =>\n  t.loadableList({\n    // type is singular, but will create a list field\n    type: Post,\n    // will be called with ids of all the users, and should return `Post[][]`\n    load: (ids: number[], context) => context.postsByUserIds(ids),\n    resolve: (user, args) => user.id,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Handling Validation Errors\nDESCRIPTION: Example query that demonstrates how to handle validation errors by including fragments for both the success case and the ZodError case to access field-level validation errors.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  validation(string: \"a\") {\n    __typename\n    ... on QueryValidationSuccess {\n      data\n    }\n    ... on ZodError {\n      fieldErrors {\n        message\n        path\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Lists with Zod Plugin in Pothos\nDESCRIPTION: Example demonstrating how to validate list arguments by applying validation to individual list items and the overall list properties.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-zod/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryType({\n  fields: (t) => ({\n    list: t.boolean({\n      nullable: true,\n      args: {\n        list: t.arg.stringList({\n          validate: {\n            items: {\n              email: true,\n            },\n            maxLength: 3,\n          },\n        }),\n      },\n      resolve: () => true,\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Plugin with SchemaBuilder in TypeScript\nDESCRIPTION: Example showing how to initialize the Prisma plugin with SchemaBuilder after the type propagation redesign. Demonstrates the removal of PrismaClient from builder types.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-prisma/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport PrismaPlugin, { PrismaTypes } from \"@giraphql/plugin-prisma\";\n\nexport default new SchemaBuilder<{}>({ \n  prisma: {\n    client: prisma,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Error Handling\nDESCRIPTION: Demonstrates how to query a field that uses the Errors plugin, using fragments to handle both success and error cases in the response.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-errors/README.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"World\") {\n    __typename\n    ... on Error {\n      message\n    }\n    ... on QueryHelloSuccess {\n      data\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Type for Loadable Object - TypeScript\nDESCRIPTION: This snippet defines an object type for the User loadable object, specifying the necessary fields. It represents an integration of loadable references with object types.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-dataloader/README.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.objectType(User, {\n  fields: (t) => ({\n    id: t.exposeID('id', {}),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using complexityFromQuery Utility Function\nDESCRIPTION: Example of using the complexityFromQuery utility to programmatically calculate the complexity of a GraphQL query with custom options.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst complexity = complexityFromQuery(query, {\n  schema: schema,\n  // Complexity can be calculated based on the context and arguments,\n  // so you may need to provide valid values for the context and arguments.\n  // Both are optional, and will default to empty objects.\n  context: {},\n  variables: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Field Complexity in Pothos\nDESCRIPTION: Examples of defining custom complexity values for fields in a Pothos schema, including static values and dynamic calculations based on arguments.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-complexity/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbuilder.queryFields((t) => ({\n  posts: t.field({\n    type: [Post],\n    complexity: 20,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 1.0.2\nDESCRIPTION: Documents dependency updates for @pothos/core and @pothos/plugin-tracing.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/tracing-sentry/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.2\n\n### Patch Changes\n\n- Updated dependencies [777f6de]\n  - @pothos/core@4.0.2\n  - @pothos/plugin-tracing@1.0.2\n```\n\n----------------------------------------\n\nTITLE: Subscription Type Options Interface\nDESCRIPTION: Interface definition for Subscription type options, including description and fields configuration.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/api/schema-builder.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype SubscriptionTypeOptions = {\n  description?: string;\n  fields: FieldsFunction;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Add-GraphQL Plugin in Pothos\nDESCRIPTION: TypeScript code to import and set up the Add-GraphQL plugin in a Pothos schema builder.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/plugin-add-graphql/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AddGraphQLPlugin from '@pothos/plugin-add-graphql';\n\nconst builder = new SchemaBuilder({\n  plugins: [AddGraphQLPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing With-Input Plugin for Pothos\nDESCRIPTION: Command to install the With-Input Plugin using Yarn package manager.\nSOURCE: https://github.com/hayes/pothos/blob/main/packages/deno/packages/plugin-with-input/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @pothos/plugin-with-input\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Errors Plugin\nDESCRIPTION: NPM command to install the Pothos errors plugin package.\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/errors.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-errors\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos Directive Plugin\nDESCRIPTION: NPM command to install the Pothos directive plugin package\nSOURCE: https://github.com/hayes/pothos/blob/main/website/content/docs/plugins/directives.mdx#2025-04-18_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install --save @pothos/plugin-directives\n```"
  }
]