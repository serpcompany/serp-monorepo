[
  {
    "owner": "ar-js-org",
    "repo": "ar.js",
    "content": "TITLE: Implementing Image Tracking with AR.js and A-Frame\nDESCRIPTION: This snippet demonstrates how to set up image tracking AR using AR.js and A-Frame. It includes the necessary script imports, styling for a loader, and an A-Frame scene configuration for tracking an image and displaying a 3D model.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/gh/aframevr/aframe@1.6.0/dist/aframe-master.min.js\"></script>\n<script src=\"https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js\"></script>\n\n<style>\n  .arjs-loader {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    z-index: 9999;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .arjs-loader div {\n    text-align: center;\n    font-size: 1.25em;\n    color: white;\n  }\n</style>\n\n<body style=\"margin : 0px; overflow: hidden;\">\n  <!-- minimal loader shown until image descriptors are loaded -->\n  <div class=\"arjs-loader\">\n    <div>Loading, please wait...</div>\n  </div>\n  <a-scene\n    vr-mode-ui=\"enabled: false;\"\n    renderer=\"logarithmicDepthBuffer: true; precision: medium;\"\n    embedded\n    arjs=\"trackingMethod: best; sourceType: webcam;debugUIEnabled: false;\"\n  >\n    <!-- we use cors proxy to avoid cross-origin problems ATTENTION! you need to set up your server -->\n    <a-nft\n      type=\"nft\"\n      url=\"your-server/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/trex-image/trex\"\n      smooth=\"true\"\n      smoothCount=\"10\"\n      smoothTolerance=\".01\"\n      smoothThreshold=\"5\"\n    >\n      <a-entity\n        gltf-model=\"your-server/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/scene.gltf\"\n        scale=\"5 5 5\"\n        position=\"150 300 -100\"\n      >\n      </a-entity>\n    </a-nft>\n    <a-entity camera></a-entity>\n  </a-scene>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing Marker-Based AR with AR.js and A-Frame\nDESCRIPTION: This snippet demonstrates how to set up marker-based AR using AR.js and A-Frame. It includes the necessary script imports and an A-Frame scene configuration for tracking a Hiro marker and displaying a 3D model.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <script src=\"https://aframe.io/releases/1.6.0/aframe.min.js\"></script>\n    <!-- we import arjs version without NFT but with marker + location based support -->\n    <script src=\"https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js\"></script>\n    <body style=\"margin : 0px; overflow: hidden;\">\n        <a-scene embedded arjs>\n        <a-marker preset=\"hiro\">\n            <!-- we use cors proxy to avoid cross-origin problems ATTENTION! you need to set up your server -->\n            <a-entity\n            position=\"0 0 0\"\n            scale=\"0.05 0.05 0.05\"\n            gltf-model=\"your-server/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/scene.gltf\"\n            ></a-entity>\n        </a-marker>\n        <a-entity camera></a-entity>\n        </a-scene>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Location-Based AR with AR.js and A-Frame\nDESCRIPTION: This snippet shows how to create a location-based AR experience using AR.js and A-Frame. It includes script imports and an A-Frame scene setup with a GPS-enabled camera and a text entity positioned at specific GPS coordinates.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>GeoAR.js demo</title>\n    <script src=\"https://aframe.io/releases/1.6.0/aframe.min.js\"></script>\n    <script src=\"https://unpkg.com/aframe-look-at-component@1.0.0/dist/aframe-look-at-component.min.js\"></script>\n    <script src=\"https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js\"></script>\n  </head>\n\n  <body>\n    <a-scene\n      vr-mode-ui=\"enabled: false\"\n      arjs=\"sourceType: webcam; videoTexture: true; debugUIEnabled: false;\"\n    >\n      <a-text\n        value=\"This content will always face you.\"\n        look-at=\"[gps-camera]\"\n        scale=\"120 120 120\"\n        gps-entity-place=\"latitude: <add-your-latitude>; longitude: <add-your-longitude>;\"\n      ></a-text>\n      <a-camera gps-camera rotation-reader> </a-camera>\n    </a-scene>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing AR.js with ES Module Syntax using Import Maps\nDESCRIPTION: Example showing how to import ar-threex.mjs using the ES module syntax with an import map. This demonstrates the recommended way to import AR.js modules alongside three.js in version 3.4.6 and later.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n// Example importing ar-threex.mjs\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"three\": \"https://cdn.jsdelivr.net/npm/three@0.164.0/build/three.module.js\",\n    \"threex\": \"./path/to/ar-threex.mjs\",\n  }\n}\n</script>\n\n<script type=\"module\">\nimport * as THREE from 'three';\nimport { ArToolkitSource, ArToolkitContext, ArMarkerControls }  from 'threex'\n\n// Your AR.js code here\n</script>\n```\n\n----------------------------------------\n\nTITLE: Executing AR.js Release Process in Bash\nDESCRIPTION: This bash script outlines the step-by-step process for releasing a new version of AR.js. It covers updating documentation, building the project, managing Git branches and tags, publishing to NPM, and updating related resources like CodePen examples.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/HOW_TO_RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Update following files:\nCHANGELOG.md\nthree.js/src/threex/arjs-context.js\npackage.json\nREADME.md\n\n# Build everything - aka a-frame and three.js\nnpm install\nnpm run build\n\n# Commit everything\ngit add . && git commit -a -m 'Last commit before release' && git push\n\n# Go to master branch\ngit checkout master\n\n# Merge dev branch into master branch\ngit merge dev\n\n# tag the release\ngit tag <tag>\n\n# push the tag on github\ngit push origin --tags\n\n# push commits tag on github\ngit push\n\n# publish on NPM (only if have proper credentials)\nnpm publish\n\n# Come back to dev branch\ngit checkout dev\n\n\n# update the a-frame codepen if needed\nopen \"https://codepen.io/jeromeetienne/pen/mRqqzb?editors=1000#0\"\n```\n\n----------------------------------------\n\nTITLE: Example List in Markdown\nDESCRIPTION: A markdown list documenting various AR.js location-based component examples, including basic implementations, POI displays, and advanced geodata rendering.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/aframe/examples/location-based/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Examples for A-Frame `new-location-based` components\n\nThese examples have been written specifically, or adapted, for the `new-location-based` components available in AR.js 3.4.0 upwards.\n\n- `hello-world` : A basic Hello World example, using only HTML, which shows a box 0.001 degrees north of your location.\n\n- `multiple-boxes` : An extension of the `hello-world` example with four boxes, to the north, south, east and west of your current location.\n\n- `always-face-user` : Displays text 0.001 degrees north of your current location, using the third-party A-Frame look-at component to make the text always face the camera.\n\n- `click-places` : Demonstrates how you can add click events to your AR objects, making use of A-Frame's `cursor` and `raycaster` components.\n\n- `basic-js` : Basic JavaScript example which dynamically creates four boxes to the north, south, east and west of your initial GPS position (whatever that is). Allows you to enter a \"fake\" latitude and longitude for testing on a desktop.\n\n- `basic-js-modules` : version of `basic-js` which uses an ES6 import to include AR.js. Requires building using Webpack: a `webpack.config.js` is provided.\n\n- `show-distance` : version of `basic-js` which shows the distance to a given object when you click on it.\n\n- `poi` : Demonstrates downloading POIs from an OpenStreetMap-based GeoJSON API and adding them to the scene as objects, with text labels.\n\n- `poi-component` : Similar to `poi`, but demonstrating the use of a custom A-Frame component to download and display the POIs.\n\n- `osm-ways` : A more complex example showing how more specialised geodata can be rendered with AR.js. Downloads OpenStreetMap ways (roads, paths) from a GeoJSON API, reprojects them into Spherical Mercator, and adds them to the scene as polylines made up of individual triangles.\n\n- `avoid-shaking` : A version of `basic-js` with a smoothing factor applied to reduce shaking effects.\n```\n\n----------------------------------------\n\nTITLE: Generating Synthetic Test Videos with CCapture.js\nDESCRIPTION: Reference to CCapture.js as a tool for generating synthetic test videos by drawing a three.js scene and converting it into a movie format. This approach provides better control over test content including resolution, lighting, angles, and transition speeds.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/test/TODO.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps://github.com/spite/ccapture.js/\n```\n\n----------------------------------------\n\nTITLE: Running AR.js Test Suite\nDESCRIPTION: Command to execute the test suite for AR.js project.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing AR.js Test Dependencies with NPM\nDESCRIPTION: Command to install the required npm packages for running AR.js tests.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating AR.js Issue Template in Markdown\nDESCRIPTION: A structured template for GitHub issues that helps users provide all necessary information when reporting bugs or requesting features for AR.js. Includes sections for behavior description, reproduction steps, system specifications, and feature request motivation.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/ISSUE_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Please don't delete this template or we'll close your issue -->\n<!-- Before creating an issue please make sure you are using the latest version of AR.js. -->\n<!-- Before creating an issue please make a search on open and closed issues, maybe your question is already answered. -->\n<!-- ⚠️ Important: please check the old AR.js repository's issues: https://github.com/jeromeetienne/AR.js/issues probably your question had been already answered there ⚠️ -->\n\n**Do you want to request a *feature* or report a *bug*?**\n\n<!-- Please ask questions/requests of support on StackOverflow or on the AR.js Gitter (https://gitter.im/AR-js). -->\n<!-- Issues that are not AR.js bugs or feature requests will be closed. -->\n\n**What is the current behavior?**\n\n**If the current behavior is a bug, please provide the steps to reproduce.**\n\n<!-- A great way to do this is to provide an external url, with ar runnable example (like a codepen, glitch) -->\n<!-- Check if the issue can be reproduced in one of our demos/examples -->\n\n**Please mention other relevant information such as the browser version, Operating System and Device Name**\n\n**What is the expected behavior?**\n\n**If this is a feature request, what is motivation or use case for changing the behavior?**\n```\n\n----------------------------------------\n\nTITLE: Markdown Pull Request Template\nDESCRIPTION: A standardized template for submitting pull requests to the AR.js project. Includes sections for describing changes, referencing issues, testing procedures, and breaking changes. Emphasizes the requirement to submit PRs against the 'dev' branch.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Please, don't delete this template or we'll close your issue -->\n\n**⚠️ All PRs have to be done versus 'dev' branch, so be aware of that, or we'll close your issue ⚠️**\n\n**What kind of change does this PR introduce?**\n<!-- Can be a new feature, a bugfix, or refactoring, etc -->\n\n**Can it be referenced to an Issue? If so what is the issue # ?**\n\n**How can we test it?**\n<!-- All information can be found about our tests in https://github.com/jeromeetienne/AR.js/blob/master/test/TODO.md -->\n<!-- At the moment we don't explicitly require tests, because it's not streamlined yet -->\n\n**Summary**\n<!-- State here what problem the PR solves and what is the proposed solution -->\n\n**Does this PR introduce a breaking change?**\n\n**Please TEST your PR before proposing it. Specify here what device you have used for tests, version of OS and version of Browser**\n\n**Other information**\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: Complete markdown formatted code of conduct document adapted from the Contributor Covenant version 1.4, defining community standards and enforcement policies.\nSOURCE: https://github.com/ar-js-org/ar.js/blob/master/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\\n\\n## Our Pledge\\n\\nIn the interest of fostering an open and welcoming environment, we as\\ncontributors and maintainers pledge to making participation in our project and\\nour community a harassment-free experience for everyone, regardless of age, body\\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\\nlevel of experience, education, socio-economic status, nationality, personal\\nappearance, race, religion, or sexual identity and orientation.\\n\\n## Our Standards\\n\\nExamples of behavior that contributes to creating a positive environment\\ninclude:\\n\\n* Using welcoming and inclusive language\\n* Being respectful of differing viewpoints and experiences\\n* Gracefully accepting constructive criticism\\n* Focusing on what is best for the community\\n* Showing empathy towards other community members\n```"
  }
]