[
  {
    "owner": "lancedb",
    "repo": "lancedb",
    "content": "TITLE: Defining Table Interface in TypeScript for LanceDB\nDESCRIPTION: This code snippet defines the Table interface for LanceDB, including various methods for data manipulation, indexing, and querying. It specifies the structure and capabilities of a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Table.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Table<T> {\n  add: (data: Table<any> | Record<string, unknown>[]) => Promise<number>;\n  countRows: (filter?: string) => Promise<number>;\n  createIndex: (indexParams: IvfPQIndexConfig) => Promise<any>;\n  createScalarIndex: (column: string, replace?: boolean) => Promise<void>;\n  delete: (filter: string) => Promise<void>;\n  indexStats: (indexName: string) => Promise<IndexStats>;\n  listIndices: () => Promise<VectorIndex[]>;\n  mergeInsert: (on: string, data: Table<any> | Record<string, unknown>[], args: MergeInsertArgs) => Promise<void>;\n  name: string;\n  overwrite: (data: Table<any> | Record<string, unknown>[]) => Promise<number>;\n  schema: Promise<Schema<any>>;\n  search: (query: T) => Query<T>;\n  addColumns: (columns: Column[]) => Promise<void>;\n  alterColumns: (columns: Column[]) => Promise<void>;\n  dropColumns: (columns: string[]) => Promise<void>;\n  filter: (filter: string) => Query<T>;\n  withMiddleware: (middleware: Middleware) => Table<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from Pandas DataFrame (Async API)\nDESCRIPTION: This snippet shows how to import Pandas and create a LanceDB table directly from a Pandas DataFrame using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_python.py:create_table_pandas_async\"\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Index in LanceDB Table\nDESCRIPTION: Creates a scalar index on a specified column in a LanceDB table. This can speed up scans with filter expressions on the indexed column.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst con = await lancedb.connect('././lancedb')\nconst table = await con.openTable('images')\nawait table.createScalarIndex('my_col')\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in TypeScript\nDESCRIPTION: Establishes a connection to a LanceDB instance using either a URI string or connection options. Supports local, cloud storage, and remote database connections.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnect(uri: string): Promise<Connection>\nconnect(opts: Partial<ConnectionOptions>): Promise<Connection>\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Operations in Python\nDESCRIPTION: Demonstrates creating a connection to LanceDB, creating a table with vector data, and performing vector search operations in Python.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\nuri = \"data/sample-lancedb\"\ndb = lancedb.connect(uri)\ntable = db.create_table(\"my_table\",\n                         data=[{\"vector\": [3.1, 4.1], \"item\": \"foo\", \"price\": 10.0},\n                               {\"vector\": [5.9, 26.5], \"item\": \"bar\", \"price\": 20.0}])\nresult = table.search([100, 100]).limit(2).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Using the Embedding API with OpenAI in LanceDB (TypeScript)\nDESCRIPTION: Demonstrates how to use the Embedding API with OpenAI in LanceDB using TypeScript for the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAIEmbedding } from \"@lancedb/lancedb\";\n\nconst embedding = new OpenAIEmbedding({\n  model: \"text-embedding-ada-002\",\n});\n\nconst table = await db.createTable(\"my_table\", [\n  { text: \"This is a test\", label: \"test\" },\n  { text: \"This is another test\", label: \"test\" },\n  { text: \"This is a third test\", label: \"test\" },\n], {\n  embedding\n});\n\nconst results = await table.search(\"This is a query\").limit(2).execute();\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Operations in JavaScript\nDESCRIPTION: Demonstrates creating a connection to LanceDB, creating a table with vector data, performing vector search operations, and querying data based on criteria in JavaScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\n\nconst db = await lancedb.connect(\"data/sample-lancedb\");\nconst table = await db.createTable(\"vectors\", [\n\t{ id: 1, vector: [0.1, 0.2], item: \"foo\", price: 10 },\n\t{ id: 2, vector: [1.1, 1.2], item: \"bar\", price: 50 },\n], {mode: 'overwrite'});\n\n\nconst query = table.vectorSearch([0.1, 0.3]).limit(2);\nconst results = await query.toArray();\n\n// You can also search for rows by specific criteria without involving a vector search.\nconst rowsByCriteria = await table.query().where(\"price >= 10\").toArray();\n```\n\n----------------------------------------\n\nTITLE: Adding Text Documents to LanceDB Vector Store\nDESCRIPTION: Shows how to add new text documents to a LanceDB vector store along with metadata. Also demonstrates how to explore the table contents by converting to a pandas DataFrame.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvector_store.add_texts(texts = ['test_123'], metadatas =[{'source' :'wiki'}]) \n\n#Additionaly, to explore the table you can load it into a df or save it in a csv file:\n\ntbl = vector_store.get_table()\nprint(\"tbl:\", tbl)\npd_df = tbl.to_pandas()\npd_df.to_csv(\"docsearch.csv\", index=False)\n\n# you can also create a new vector store object using an older connection object:\nvector_store = LanceDB(connection=tbl, embedding=embeddings)\n```\n\n----------------------------------------\n\nTITLE: Opening Tables with Embedding Functions in LanceDB\nDESCRIPTION: An overloaded version of the openTable method that accepts an embedding function. This allows for automatic embedding generation when using the table for vector search operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **openTable**\\<`T`\\>(`name`, `embeddings`): `Promise`\\<[`Table`](../interfaces/Table.md)\\<`T`\\>\\>\n\nOpen a table in the database.\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `name` | `string` | The name of the table. |\n| `embeddings` | [`EmbeddingFunction`](../interfaces/EmbeddingFunction.md)\\<`T`\\> | An embedding function to use on this Table |\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reranker Class in Python with LanceDB\nDESCRIPTION: Example implementation of a custom Reranker class that extends LanceDB's base Reranker. The class includes methods for hybrid reranking, vector reranking, and full-text search reranking using PyArrow tables.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import Reranker\nimport pyarrow as pa\n\nclass MyReranker(Reranker):\n    def __init__(self, param1, param2, ..., return_score=\"relevance\"):\n\n\n    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table):\n        # Use the built-in merging function\n        combined_result = self.merge_results(vector_results, fts_results)\n\n        # Do something with the combined results\n        return combined_result\n\n    def rerank_vector(self, query: str, vector_results: pa.Table):\n        # Do something with the vector results\n        return vector_results\n\n    def rerank_fts(self, query: str, fts_results: pa.Table):\n        # Do something with the FTS results\n        return fts_results\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty LanceDB Table in Python\nDESCRIPTION: Shows how to create an empty LanceDB table with a specified schema using both synchronous and asynchronous APIs in Python.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_empty_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_empty_table_async\"\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Embedding Function in Python\nDESCRIPTION: This snippet demonstrates how to use the OpenAI embedding function in Python to create vector embeddings for text data, add them to a LanceDB table, and perform a vector search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nfunc = get_registry().get(\"openai\").create(name=\"text-embedding-ada-002\")\n\nclass Words(LanceModel):\n    text: str = func.SourceField()\n    vector: Vector(func.ndims()) = func.VectorField()\n\ntable = db.create_table(\"words\", schema=Words, mode=\"overwrite\")\ntable.add(\n    [\n        {\"text\": \"hello world\"},\n        {\"text\": \"goodbye world\"}\n    ]\n    )\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Creating an IVF-PQ Index in LanceDB\nDESCRIPTION: Creates an IVF-PQ index on a table for a 1536-dimensional vector with specified metric, partitions, and sub-vectors. The index enables efficient approximate nearest neighbor search with configurable trade-offs between speed and accuracy.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/concepts/index_ivfpq.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Create and train the index for a 1536-dimensional vector\n# Make sure you have enough data in the table for an effective training step\ntbl.create_index(metric=\"l2\", num_partitions=256, num_sub_vectors=96)\n```\n\n----------------------------------------\n\nTITLE: Adding New Columns in LanceDB - TypeScript\nDESCRIPTION: Demonstrates how to add new columns to existing tables in TypeScript\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:add_columns\"\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing Table in LanceDB (TypeScript)\nDESCRIPTION: Shows how to open an existing table in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst tbl = await db.openTable(\"myTable\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tbl = await db.openTable(\"myTable\");\n```\n\n----------------------------------------\n\nTITLE: Converting Search Results to Python Dictionaries\nDESCRIPTION: Demonstrates how to return search results as a list of Python dictionaries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_list\"\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Initial Data in Python\nDESCRIPTION: Demonstrates how to create a LanceDB table and insert initial data using both synchronous and asynchronous APIs in Python.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_table_pandas\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_table_async\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:create_table_async_pandas\"\n```\n\n----------------------------------------\n\nTITLE: Basic Reranking with LanceDB and Cohere\nDESCRIPTION: Example showing how to use CohereReranker with LanceDB for vector, FTS, and hybrid search. Demonstrates table creation, embedding configuration, and search execution with reranking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import CohereReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", data)\nreranker = CohereReranker(api_key=\"your_api_key\")\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\")\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in Python\nDESCRIPTION: Shows how to connect to a LanceDB database using both synchronous and asynchronous APIs in Python.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_basic.py:set_uri\"\n--8<-- \"python/python/tests/docs/test_basic.py:connect\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_basic.py:set_uri\"\n--8<-- \"python/python/tests/docs/test_basic.py:connect_async\"\n```\n\n----------------------------------------\n\nTITLE: Vector Search in LanceDB (Rust)\nDESCRIPTION: Shows how to perform a vector search for nearest neighbors in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse futures::TryStreamExt;\n\nlet query = vec![2.1, 3.1, 4.2];\nlet mut results = table.search(&query).limit(3).execute().await?;\nwhile let Some(batch) = results.try_next().await? {\n    println!(\"{:?}\", batch);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere Reranker with LanceDB\nDESCRIPTION: Complete example showing how to set up and use the Cohere Reranker with LanceDB, including table creation, data insertion, and different search types (vector, FTS, and hybrid search). Demonstrates integration with sentence transformers for embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/cohere.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import CohereReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = CohereReranker(api_key=\"key\")\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n\n```\n\n----------------------------------------\n\nTITLE: Performing semantic search with LanceDB\nDESCRIPTION: Code to accept a user query and search the LanceDB table for relevant transcript contexts that will be used to generate a response.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = await rl.question('Prompt: ')\nconst results = await tbl\n  .search(query)\n  .select(['title', 'text', 'context'])\n  .limit(3)\n  .execute()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hybrid Search with LanceDB (Sync API)\nDESCRIPTION: This snippet demonstrates how to perform hybrid search in LanceDB using the synchronous API. It imports necessary libraries, defines a document class, and shows how to combine semantic and full-text search with a reranker.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/hybrid_search/hybrid_search.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:import-os\"\n--8<-- \"python/python/tests/docs/test_search.py:import-openai\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_search.py:import-embeddings\"\n--8<-- \"python/python/tests/docs/test_search.py:import-pydantic\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb-fts\"\n--8<-- \"python/python/tests/docs/test_search.py:import-openai-embeddings\"\n--8<-- \"python/python/tests/docs/test_search.py:class-Documents\"\n--8<-- \"python/python/tests/docs/test_search.py:basic_hybrid_search\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in Python (Sync API)\nDESCRIPTION: This snippet demonstrates how to import LanceDB and connect to a database using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_python.py:connect_to_lancedb\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying LanceDB Vector Store with Llama-Index\nDESCRIPTION: Sets up a LanceDB vector store with Llama-Index, loads documents, creates an index, and performs a filtered retrieval query. This shows the basic workflow of document embedding and retrieval with metadata filtering.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/llamaIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\n# Uncomment to see debug logs\n# logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n# logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n\nfrom llama_index.core import SimpleDirectoryReader, Document, StorageContext\nfrom llama_index.core import VectorStoreIndex\nfrom llama_index.vector_stores.lancedb import LanceDBVectorStore\nimport textwrap\nimport openai\n\nopenai.api_key = \"sk-...\"\n\ndocuments = SimpleDirectoryReader(\"./data/your-data-dir/\").load_data()\nprint(\"Document ID:\", documents[0].doc_id, \"Document Hash:\", documents[0].hash)\n\n## For LanceDB cloud :\n# vector_store = LanceDBVectorStore( \n#     uri=\"db://db_name\", # your remote DB URI\n#     api_key=\"sk_..\", # lancedb cloud api key\n#     region=\"your-region\" # the region you configured\n#     ...\n# )\n\nvector_store = LanceDBVectorStore(\n    uri=\"./lancedb\", mode=\"overwrite\", query_type=\"vector\"\n)\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\n\nindex = VectorStoreIndex.from_documents(\n    documents, storage_context=storage_context\n)\nlance_filter = \"metadata.file_name = 'paul_graham_essay.txt' \"\nretriever = index.as_retriever(vector_store_kwargs={\"where\": lance_filter})\nresponse = retriever.retrieve(\"What did the author do growing up?\")\n```\n\n----------------------------------------\n\nTITLE: Querying HNSW Index in LanceDB with Python\nDESCRIPTION: Demonstrates how to perform vector similarity search using the constructed HNSW index. Uses random vector as query input and returns top 2 closest matches.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/concepts/index_hnsw.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Search using a random 1536-dimensional embedding\ntbl.search(np.random.random((1536))) \\\n    .limit(2) \\\n    .to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Deleting Data in TypeScript\nDESCRIPTION: Example showing how to delete rows from a LanceDB table using a filter expression in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.delete('item = \"fizz\"')\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Data in LanceDB using TypeScript\nDESCRIPTION: Creates a new table and initializes it with data. Two overloads are provided: one with an options object, and another with separate parameters for name, data, and options. Returns a Promise resolving to a Table object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createTable(options): Promise<Table>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createTable(\n   name,\n   data,\n   options?): Promise<Table>\n```\n\n----------------------------------------\n\nTITLE: Generating Query Execution Plan Explanation in LanceDB\nDESCRIPTION: Demonstrates how to create a LanceDB table, perform a query, and generate an explanation of the query execution plan.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\"\nconst db = await lancedb.connect(\"./.lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { vector: [1.1, 0.9], id: \"1\" },\n]);\nconst plan = await table.query().nearestTo([0.5, 0.2]).explainPlan();\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Usage Example in JavaScript\nDESCRIPTION: Demonstrates connecting to a LanceDB database, creating a table with vector data, and performing a vector similarity search. Shows core functionality including table creation and vector search operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lancedb = require('vectordb');\nconst db = await lancedb.connect('data/sample-lancedb');\nconst table = await db.createTable(\"my_table\",\n      [{ id: 1, vector: [0.1, 1.0], item: \"foo\", price: 10.0 },\n      { id: 2, vector: [3.9, 0.5], item: \"bar\", price: 20.0 }])\nconst results = await table.search([0.1, 0.3]).limit(20).execute();\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Combination Reranker with LanceDB in Python\nDESCRIPTION: Demonstrates how to use LinearCombinationReranker with LanceDB to perform hybrid search on text data. Shows the complete workflow including database connection, schema definition, data insertion, and executing hybrid search with reranking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/linear_combination.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import LinearCombinationReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = LinearCombinationReranker()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Usage in JavaScript\nDESCRIPTION: Demonstrates how to connect to a LanceDB database, create a table with vector and scalar data, and perform a vector search. The example includes importing the library, creating a connection, inserting data, and executing a search query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"data/sample-lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { id: 1, vector: [0.1, 1.0], item: \"foo\", price: 10.0 },\n  { id: 2, vector: [3.9, 0.5], item: \"bar\", price: 20.0 },\n]);\nconst results = await table.vectorSearch([0.1, 0.3]).limit(20).toArray();\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Setting up LanceDB Document Retrieval with Embeddings\nDESCRIPTION: Demonstrates how to create a LanceDB table with embedded vectors using sentence transformers, add documents, and perform vector search. Uses the BAAI/bge-small-en-v1.5 model for embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/corrective_rag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nmodel = get_registry().get(\"sentence-transformers\").create(name=\"BAAI/bge-small-en-v1.5\", device=\"cpu\")\n\nclass Docs(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ntable = db.create_table(\"docs\", schema=Docs)\n\n# considering chunks are in list format\ndf = pd.DataFrame({\"text\":chunks})\ntable.add(data=df)\n\n# as per document feeded\nquery = \"How Transformers work?\" \nactual = table.search(query).limit(1).to_list()[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Using the Embedding API with OpenAI in LanceDB (Python)\nDESCRIPTION: Shows how to use the Embedding API with OpenAI in LanceDB using Python for the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.embeddings import OpenAIEmbedding\n\nembedding = OpenAIEmbedding(model=\"text-embedding-ada-002\")\ntable = db.create_table(\n    \"my_table\",\n    data=[\n        {\"text\": \"This is a test\", \"label\": \"test\"},\n        {\"text\": \"This is another test\", \"label\": \"test\"},\n        {\"text\": \"This is a third test\", \"label\": \"test\"},\n    ],\n    embedding=embedding,\n)\n\nresults = table.search(\"This is a query\").limit(2).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Querying LanceDB Using Embedding Function in Python\nDESCRIPTION: This snippet shows how to perform a vector search in LanceDB using an embedding function. It generates a query vector from input text and searches for the 10 closest vectors in the table, returning results as a pandas DataFrame.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/legacy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery = \"What's the best pizza topping?\"\nquery_vector = embed_func([query])[0]\nresults = (\n   tbl.search(query_vector)\n   .limit(10)\n   .to_pandas()\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB Vector Store with LangChain and OpenAI Embeddings\nDESCRIPTION: A quick start example showing how to load documents, split them, create embeddings using OpenAI, and initialize a LanceDB vector store for similarity search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain.document_loaders import TextLoader\nfrom langchain.vectorstores import LanceDB\nfrom langchain_openai import OpenAIEmbeddings\nfrom langchain_text_splitters import CharacterTextSplitter\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-...\"\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\") # Replace with your data path\ndocuments = loader.load()\n\ndocuments = CharacterTextSplitter().split_documents(documents)\nembeddings = OpenAIEmbeddings()\n\ndocsearch = LanceDB.from_documents(documents, embeddings)\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(query)\nprint(docs[0].page_content)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty LanceDB Table with Schema\nDESCRIPTION: Demonstrates creating an empty LanceDB table by defining only the schema, which can be populated later using the add method.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\n\nclass Model(LanceModel):\n      vector: Vector(2)\n\ntbl = db.create_table(\"table6\", schema=Model.to_arrow_schema())\n```\n\n----------------------------------------\n\nTITLE: Configuring FTS with Stemming in Python\nDESCRIPTION: Creates a full-text search index with English stemming enabled, which reduces words to their root form to improve search results. Shows how to configure the tokenizer with language-specific stemming in both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntbl.create_index(\"text\", FullTextSearchIndex(\n    tokenizer_name=\"en_stem\",\n    use_tantivy=False\n))\n```\n\n----------------------------------------\n\nTITLE: Executing Hybrid Search in LanceDB\nDESCRIPTION: This snippet shows how to perform a hybrid search in LanceDB, which combines vector and full-text search. It uses the default LinearCombinationReranker to combine and rank the results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/1_query_types.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable.search(quries[0], query_type=\"hybrid\").limit(5).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Converting Search Results to Pydantic Models\nDESCRIPTION: Shows how to retrieve search results as Pydantic models, noting that the _distance field is discarded as it's not part of the LanceSchema.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Vector Search in LanceDB (Python)\nDESCRIPTION: Shows how to perform a vector search for nearest neighbors in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nresults = tbl.search([2.1, 3.1, 4.2]).limit(3).to_df()\n```\n\nLANGUAGE: python\nCODE:\n```\nresults = await tbl.search([2.1, 3.1, 4.2]).limit(3).to_df()\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Pydantic Models\nDESCRIPTION: Demonstrates creating LanceDB tables using Pydantic models to define the schema, specifically with LanceModel which extends from pydantic.BaseModel.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-Content\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_from_pydantic\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-Content\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_from_pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Reranker with LanceDB Search\nDESCRIPTION: Demonstrates how to set up and use OpenAI reranker with LanceDB for different search types (vector, FTS, and hybrid). The example shows data initialization, table creation, and performing searches with reranking using various query types.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/openai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import OpenaiReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = OpenaiReranker()\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing RRF Reranker with LanceDB Hybrid Search\nDESCRIPTION: Demonstrates how to use the RRF Reranker with LanceDB hybrid search functionality. The example shows table creation with embedded vectors, FTS index creation, and performing hybrid search with reranking. Uses sentence-transformers for embeddings and includes schema definition.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/rrf.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import RRFReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = RRFReranker()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Executing Local Query with GraphRAG\nDESCRIPTION: Command to execute a local query using GraphRAG, providing detailed and specific answers based on entity context.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/graph_rag.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m graphrag.query --root  dataset-dir --method local \"query-question\"\n```\n\n----------------------------------------\n\nTITLE: Using Sentence Transformers Embedding Function in Python\nDESCRIPTION: This snippet shows how to use the Sentence Transformers embedding function in Python to create vector embeddings for text data, add them to a LanceDB table, and perform a vector search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nmodel = get_registry().get(\"sentence-transformers\").create(name=\"BAAI/bge-small-en-v1.5\", device=\"cpu\")\n\nclass Words(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ntable = db.create_table(\"words\", schema=Words)\ntable.add(\n    [\n        {\"text\": \"hello world\"},\n        {\"text\": \"goodbye world\"}\n    ]\n)\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Async Vector Search with Python\nDESCRIPTION: Implementation of vector search using Python's async API for better performance in asynchronous contexts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:exhaustive_search_async\"\n```\n\n----------------------------------------\n\nTITLE: Vector Search in LanceDB (TypeScript)\nDESCRIPTION: Demonstrates how to perform a vector search for nearest neighbors in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await tbl.search([2.1, 3.1, 4.2]).limit(3).execute();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await tbl.search([2.1, 3.1, 4.2]).limit(3);\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Vector and Text Query for Hybrid Search (Async API)\nDESCRIPTION: This snippet shows how to manually pass vector embeddings and text queries for hybrid search using the asynchronous API. This pattern is helpful when working with external embedding services.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/hybrid_search/hybrid_search.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:hybrid_search_pass_vector_text_async\"\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operations in LanceDB with Python (Sync)\nDESCRIPTION: This code snippet demonstrates how to perform an upsert operation using the merge_insert API in LanceDB with Python's synchronous interface. It updates existing rows and inserts new ones based on a matching key.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:upsert_basic\"\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Database and Table with Embeddings\nDESCRIPTION: Connects to a LanceDB database and creates a table with sample data. The code initializes the database, defines sample data with text fields, and creates a table with the embedding function attached for vector generation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Link a folder and create a table with data\nconst db = await lancedb.connect('data/sample-lancedb')\n\n// You can also import any other data, but make sure that you have a column\n// for the embedding function to use.\nconst data = [\n    { id: 1, text: 'Cherry', type: 'fruit' },\n    { id: 2, text: 'Carrot', type: 'vegetable' },\n    { id: 3, text: 'Potato', type: 'vegetable' },\n    { id: 4, text: 'Apple', type: 'fruit' },\n    { id: 5, text: 'Banana', type: 'fruit' }\n]\n\n// Create the table with the embedding function\nconst table = await db.createTable('food_table', data, \"create\", embed_fun)\n```\n\n----------------------------------------\n\nTITLE: Creating an ANN Index in LanceDB (Python)\nDESCRIPTION: Demonstrates how to create an Approximate Nearest Neighbor (ANN) index in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntbl.create_index(num_partitions=4, num_sub_vectors=4)\n```\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.create_index(num_partitions=4, num_sub_vectors=4)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedding Functions from Registry in Python\nDESCRIPTION: Demonstrates how to get the global embedding function registry in Python and create a CLIP embedding function instance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.embeddings import get_registry\n\nregistry = get_registry()\nclip = registry.get(\"open-clip\").create()\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in LanceDB with TypeScript\nDESCRIPTION: Creates a new table in the database with optional initialization data. The method accepts table name, data, embedding functions and write options to configure the new table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **createTable**\\<`T`\\>(`name`, `data?`, `optsOrEmbedding?`, `opt?`): `Promise`\\<[`Table`](../interfaces/Table.md)\\<`T`\\>\\>\n\nCreates a new Table, optionally initializing it with new data.\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `name` | `string` \\| [`CreateTableOptions`](../interfaces/CreateTableOptions.md)\\<`T`\\> |\n| `data?` | `Table`\\<`any`\\> \\| `Record`\\<`string`, `unknown`\\>[] |\n| `optsOrEmbedding?` | [`WriteOptions`](../interfaces/WriteOptions.md) \\| [`EmbeddingFunction`](../interfaces/EmbeddingFunction.md)\\<`T`\\> |\n| `opt?` | [`WriteOptions`](../interfaces/WriteOptions.md) |\n\n#### Returns\n\n`Promise`\\<[`Table`](../interfaces/Table.md)\\<`T`\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Model with Embedding Fields in Python\nDESCRIPTION: Creates a Pydantic model that defines the schema for a table, including vector and source fields that use the CLIP embedding function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Pets(LanceModel):\n    vector: Vector(clip.ndims()) = clip.VectorField()\n    image_uri: str = clip.SourceField()\n```\n\n----------------------------------------\n\nTITLE: Scanning Full Dataset in LanceDB Table using TypeScript\nDESCRIPTION: Illustrates how to scan the entire dataset in a LanceDB table without any specific ordering, returning all rows in batches.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const batch of table.query()) {\n  console.log(batch);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-text Search in LanceDB\nDESCRIPTION: This snippet demonstrates how to create a full-text search index and perform a full-text search query in LanceDB. It includes creating the index and executing the search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/1_query_types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable.create_fts_index(\"context\", replace=True)\ntable.search(quries[0], query_type=\"fts\").limit(5).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Table from JavaScript Objects in TypeScript\nDESCRIPTION: Converts an array of JavaScript objects to an Arrow Table, supporting nested fields and vector columns. Allows schema specification and customization of vector column types.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/modules.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nmakeArrowTable(data: Record<string, any>[], options?: Partial<MakeArrowTableOptions>): ArrowTable\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Method in TypeScript\nDESCRIPTION: Defines the select method which specifies which columns to return in the query results. It can also create dynamic columns based on existing columns using SQL-like expressions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nselect(columns): this\n```\n\n----------------------------------------\n\nTITLE: Setting up Document Retrieval with LanceDB and LangChain\nDESCRIPTION: Configures a document retrieval system using LangChain and LanceDB. Loads documents from URLs, splits them into chunks, and creates a vector store with OpenAI embeddings for retrieval.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/agentic_rag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_community.vectorstores import LanceDB\nfrom langchain_openai import OpenAIEmbeddings\n\nurls = [\n    \"https://content.dgft.gov.in/Website/CIEP.pdf\",\n    \"https://content.dgft.gov.in/Website/GAE.pdf\",\n    \"https://content.dgft.gov.in/Website/HTE.pdf\",\n]\n\n\ndocs = [WebBaseLoader(url).load() for url in urls]\ndocs_list = [item for sublist in docs for item in sublist]\n\ntext_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\n    chunk_size=100, chunk_overlap=50\n)\ndoc_splits = text_splitter.split_documents(docs_list)\n\n# add documents in LanceDB\nvectorstore = LanceDB.from_documents(\n    documents=doc_splits,\n    embedding=OpenAIEmbeddings(),\n)\nretriever = vectorstore.as_retriever()\n```\n\n----------------------------------------\n\nTITLE: Reranking Search Results with LinearCombinationReranker in Python\nDESCRIPTION: This snippet demonstrates how to use the LinearCombinationReranker to rerank hybrid search results in LanceDB. It imports the reranker, creates an instance, and applies it to the search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/2_reranking.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import LinearCombinationReranker\n\nreranker = LinearCombinationReranker()\ntable.search(quries[0], query_type=\"hybrid\").rerank(reranker=reranker).limit(5).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Implementing VoyageAI Reranker with LanceDB\nDESCRIPTION: Demonstrates how to set up and use VoyageAI Reranker with LanceDB for vector, FTS, and hybrid search operations. The example shows table creation, data insertion, and different search methods with reranking functionality.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/voyageai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import VoyageAIReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = VoyageAIReranker(model_name=\"rerank-2\")\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lambda Function for Vector Search\nDESCRIPTION: This Python script implements an AWS Lambda function that connects to a LanceDB table stored on S3 and performs vector similarity search. It accepts a query vector as input, validates it, performs the search, and returns the results as JSON.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_lancedb_with_s3_and_lambda.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport numpy as np\nimport lancedb\n\ndb = lancedb.connect(\"s3://eto-public/tables\")\ntable = db.open_table(\"vector_example\")\n\ndef handler(event, context):\n    status_code = 200\n\n    if event['query_vector'] is None:\n        status_code = 404\n        return {\n            \"statusCode\": status_code,\n            \"headers\": {\n                \"Content-Type\": \"application/json\"\n            },\n            \"body\": json.dumps({\n                \"Error \": \"No vector to query was issued\"\n            })\n        }\n    \n    # Shape of SIFT is (128,1M), d=float32\n    query_vector = np.array(event['query_vector'], dtype=np.float32)\n\n    rs = table.search(query_vector).limit(2).to_list()\n\n    return {\n        \"statusCode\": status_code,\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": json.dumps(rs)\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a QA Chain with LangChain and LanceDB for Document Retrieval\nDESCRIPTION: Builds a question-answering chain using LangChain that splits documents, creates embeddings with OpenAI, stores them in LanceDB, and constructs a retrieval-based QA system. This function handles the entire pipeline from document processing to answering queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef qanda_langchain(query):\n    download_docs()\n    docs = store_docs()\n\n    text_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=1000,\n        chunk_overlap=200,\n    )\n    documents = text_splitter.split_documents(docs)\n    embeddings = OpenAIEmbeddings()\n\n    db = lancedb.connect(db_path) \n    table = db.create_table(\"pandas_docs\", data=[\n        {\"vector\": embeddings.embed_query(\"Hello World\"), \"text\": \"Hello World\", \"id\": \"1\"}\n    ], mode=\"overwrite\")\n    docsearch = LanceDB.from_documents(documents, embeddings, connection=table)\n    qa = RetrievalQA.from_chain_type(llm=OpenAI(), chain_type=\"stuff\", retriever=docsearch.as_retriever())\n    return qa.run(query)\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Filtering with Vector Search in Python\nDESCRIPTION: Shows how to use complex SQL expressions with IN clauses and logical operators for filtering during vector search operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/sql.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous client\ntbl.search([100, 102]).where(\n    \"(item IN ('item 0', 'item 2')) AND (id > 10)\"\n).to_arrow()\n# Asynchronous client\nawait (\n    async_tbl.query()\n    .where(\"(item IN ('item 0', 'item 2')) AND (id > 10)\")\n    .nearest_to([100, 102])\n    .to_arrow()\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a LanceDB Database\nDESCRIPTION: Establishes a connection to a LanceDB database in the current directory.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"./.lancedb\")\n```\n\n----------------------------------------\n\nTITLE: Vector Similarity Search in LanceDB Table using TypeScript\nDESCRIPTION: Shows how to perform a vector similarity search on a LanceDB table, finding the 10 closest rows to a query vector [1.0, 2.0, 3.0] in the 'vector' column, with additional filtering and selection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const batch of table\n  .query()\n  .where(\"id > 1\")\n  .select([\"id\"])\n  .limit(20)) {\n  console.log(batch);\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search with TypeScript\nDESCRIPTION: TypeScript implementation of vector search using the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/search.test.ts:import\"\n\n--8<-- \"nodejs/examples/search.test.ts:search1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FTS with ASCII Folding in Python\nDESCRIPTION: Creates a full-text search index with ASCII folding to handle accented characters by converting them to their ASCII equivalents. This is useful for languages with accents and diacritical marks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntbl.create_index(\"text\", FullTextSearchIndex(\n    use_tantivy=False,\n    tokenizer_options=[\"ascii_folding\"],\n))\n```\n\n----------------------------------------\n\nTITLE: Incremental Indexing for FTS in TypeScript\nDESCRIPTION: Shows how to add new records to a table and trigger index optimization in TypeScript, which updates the FTS index incrementally without reindexing the entire table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.add([{ vector: [3.1, 4.1], text: \"Frodo was a happy puppy\" }]);\nawait tbl.optimize();\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB table with OpenAI embeddings\nDESCRIPTION: Code to initialize LanceDB, create embeddings for the transcript data using OpenAI's embedding function, and store the vectors in a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// You need to provide an OpenAI API key, here we read it from the OPENAI_API_KEY environment variable\nconst apiKey = process.env.OPENAI_API_KEY\n// The embedding function will create embeddings for the 'context' column\nconst embedFunction = new lancedb.OpenAIEmbeddingFunction('context', apiKey)\n// Connects to LanceDB\nconst db = await lancedb.connect('data/youtube-lancedb')\nconst tbl = await db.createTable('vectors', data, embedFunction)\n```\n\n----------------------------------------\n\nTITLE: Setting up LanceDB with Hugging Face Embeddings\nDESCRIPTION: This snippet demonstrates how to set up LanceDB with Hugging Face embeddings, create a schema, and add data to a table. It also includes loading a dataset and defining queries for later use.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/1_query_types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport pandas as pd\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import Vector, LanceModel\n\ndb = lancedb.connect(\"~/lancedb/query_types\")\ndf = pd.read_csv(\"data_qa.csv\")\n\nembed_fcn = get_registry().get(\"huggingface\").create(name=\"BAAI/bge-small-en-v1.\")\n\nclass Schema(LanceModel):\n    context: str = embed_fcn.SourceField()\n    vector: Vector(embed_fcn.ndims()) = embed_fcn.VectorField()\n\ntable = db.create_table(\"qa\", schema=Schema)\ntable.add(df[[\"context\"]].to_dict(orient=\"records\"))\n\nqueries = df[\"query\"].tolist()\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search Implementation in TypeScript\nDESCRIPTION: Creates a LanceDB table with sample data in TypeScript, creates a full-text search index on the 'text' column, and performs a search query. Shows how to structure the operations in JavaScript/TypeScript environments.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst uri = \"data/sample-lancedb\"\nconst db = await lancedb.connect(uri);\n\nconst data = [\n{ vector: [3.1, 4.1], text: \"Frodo was a happy puppy\" },\n{ vector: [5.9, 26.5], text: \"There are several kittens playing\" },\n];\nconst tbl = await db.createTable(\"my_table\", data, { mode: \"overwrite\" });\nawait tbl.createIndex(\"text\", {\n    config: lancedb.Index.fts(),\n});\n\nawait tbl\n    .search(\"puppy\", \"fts\")\n    .select([\"text\"])\n    .limit(10)\n    .toArray();\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with LanceDB\nDESCRIPTION: Executes a vector similarity search using the embedding function. The query text is converted to a vector embedding and compared against the stored vectors using cosine similarity, with the top 2 closest matches returned.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Query the table\nconst results = await table\n    .search(\"a sweet fruit to eat\")\n    .metricType(\"cosine\")\n    .limit(2)\n    .execute()\nconsole.log(results.map(r => r.text))\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hybrid Search with LanceDB (Async API)\nDESCRIPTION: This snippet shows how to perform hybrid search in LanceDB using the asynchronous API. It includes the same imports and document class definition as the sync API example, but demonstrates the async implementation pattern.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/hybrid_search/hybrid_search.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:import-os\"\n--8<-- \"python/python/tests/docs/test_search.py:import-openai\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_search.py:import-embeddings\"\n--8<-- \"python/python/tests/docs/test_search.py:import-pydantic\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb-fts\"\n--8<-- \"python/python/tests/docs/test_search.py:import-openai-embeddings\"\n--8<-- \"python/python/tests/docs/test_search.py:class-Documents\"\n--8<-- \"python/python/tests/docs/test_search.py:basic_hybrid_search_async\"\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Vector and Text Query for Hybrid Search (Sync API)\nDESCRIPTION: This snippet demonstrates how to manually pass vector embeddings and text queries for hybrid search using the synchronous API. This approach is useful when using a separate embedding service or not using the embedding API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/hybrid_search/hybrid_search.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:hybrid_search_pass_vector_text\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Execute Method in TypeScript\nDESCRIPTION: Defines the protected execute method which executes the query and returns the results as a RecordBatchIterator. It handles multi-threading and applies backpressure for large result sets.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprotected execute(options?): RecordBatchIterator\n```\n\n----------------------------------------\n\nTITLE: Adding Records to LanceDB Table in TypeScript\nDESCRIPTION: Inserts new records into the table. Accepts data and optional AddDataOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract add(data, options?): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Query Class in TypeScript for LanceDB\nDESCRIPTION: This code defines the Query class for LanceDB, which is used to build and execute nearest neighbor queries. It includes various methods for configuring the query, such as limit, refineFactor, and metricType.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/Query.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Query<T> {\n  constructor(query?: T, tbl?: any, embeddings?: EmbeddingFunction<T>) {\n    // Constructor implementation\n  }\n\n  limit(value: number): Query<T> {\n    // Implementation\n  }\n\n  refineFactor(value: number): Query<T> {\n    // Implementation\n  }\n\n  nprobes(value: number): Query<T> {\n    // Implementation\n  }\n\n  filter(value: string): Query<T> {\n    // Implementation\n  }\n\n  where(value: string): Query<T> {\n    // Implementation\n  }\n\n  select(value: string[]): Query<T> {\n    // Implementation\n  }\n\n  metricType(value: MetricType): Query<T> {\n    // Implementation\n  }\n\n  prefilter(value: boolean): Query<T> {\n    // Implementation\n  }\n\n  fastSearch(value: boolean): Query<T> {\n    // Implementation\n  }\n\n  execute<T>(): Promise<T[]> {\n    // Implementation\n  }\n\n  private isElectron(): boolean {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Evaluation Functions for Embedding Models\nDESCRIPTION: Creates functions to evaluate embedding models using the Hit Rate metric on various query types. Supports both vector search and hybrid search with rerankers.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ragged.dataset import CSVDataset, SquadDataset\nfrom ragged.rag import llamaIndexRAG\nfrom ragged.metrics.retriever.hit_rate import HitRate\nfrom ragged.search_utils import QueryType\n\n\ndef evaluate_vector(\n    dataset,\n    embed_model_name_or_path,\n    top_k=5,\n):\n  dataset = CSVDataset(dataset)\n\n  hit_rate = HitRate(dataset, embed_model_kwarg={\"name\": embed_model_name_or_path})\n\n  print(hit_rate.evaluate(top_k, query_type=QueryType.VECTOR))\n\n\ndef evaluate_all(\n    dataset,\n    embed_model_name_or_path,\n    reranker,\n    top_k=5,\n):\n  dataset = CSVDataset(dataset)\n  hit_rate = HitRate(dataset, embed_model_kwarg={\"name\": embed_model_name_or_path}, reranker=reranker)\n\n  print(hit_rate.evaluate(top_k, query_type=QueryType.ALL))\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Pandas DataFrames\nDESCRIPTION: Shows how to create LanceDB tables from Pandas DataFrames, which are converted to Arrow tables internally before being written to disk.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_from_pandas\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_from_pandas\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Embedding Function in Python\nDESCRIPTION: This snippet shows how to create an embedding function using OpenAI's embeddings API. It requires setting up the OpenAI API key and uses the 'text-embedding-ada-002' model to generate embeddings for input text.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/legacy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nimport os\n\n# Configuring the environment variable OPENAI_API_KEY\nif \"OPENAI_API_KEY\" not in os.environ:\n# OR set the key here as a variable\nopenai.api_key = \"sk-...\"\n\nclient = openai.OpenAI()\n\ndef embed_func(c):    \n    rs = client.embeddings.create(input=c, model=\"text-embedding-ada-002\")\n    return [record.embedding for record in rs[\"data\"]]\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with LanceDB and Llama-Index\nDESCRIPTION: Implements hybrid search functionality using LanceDB with Llama-Index by adding a ColbertReranker. This combines vector similarity search with additional re-ranking to improve result quality and relevance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/llamaIndex.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import ColbertReranker\n\nreranker = ColbertReranker()\nvector_store._add_reranker(reranker)\n\nquery_engine = index.as_query_engine(\n    filters=query_filters,\n    vector_store_kwargs={\n        \"query_type\": \"hybrid\",\n    }\n)\n\nresponse = query_engine.query(\"How much did Viaweb charge per month?\")\n```\n\n----------------------------------------\n\nTITLE: Vector Search with IVF_PQ Index in Python (Async API)\nDESCRIPTION: Demonstrates vector similarity search using a pre-built IVF_PQ index with the asynchronous Python API. The search returns the nearest neighbors to the query vector.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search_async\"\n```\n\n----------------------------------------\n\nTITLE: Searching with Text and Images in Python\nDESCRIPTION: Demonstrates how to search a table using either text or image queries with the CLIP embedding function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresults = (\n    table.search(\"dog\")\n        .limit(10)\n        .to_pandas()\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing VectorColumnOptions in TypeScript\nDESCRIPTION: Creates a new instance of VectorColumnOptions. It accepts an optional parameter 'values' of type Partial<VectorColumnOptions>.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/VectorColumnOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew VectorColumnOptions(values?): VectorColumnOptions\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Pandas DataFrame\nDESCRIPTION: Demonstrates creating a LanceDB table from a pandas DataFrame containing vector and metadata columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndata = pd.DataFrame(\n    {\n        \"vector\": [[1.1, 1.2, 1.3, 1.4], [0.2, 1.8, 0.4, 3.6]],\n        \"lat\": [45.5, 40.1],\n        \"long\": [-122.7, -74.1],\n    }\n)\ndb.create_table(\"my_table_pandas\", data)\ndb[\"my_table_pandas\"].head()\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Pandas DataFrame in Python\nDESCRIPTION: Examples showing how to add data to a LanceDB table using a pandas DataFrame with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_from_pandas\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_async_from_pandas\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Modal Image and Stub for LanceDB Integration\nDESCRIPTION: Configures the Modal environment by defining the required dependencies and creating a Modal Stub with the necessary image and secrets. This setup includes installing LanceDB, LangChain, OpenAI, and other dependencies.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlancedb_image = Image.debian_slim().pip_install(\n    \"lancedb\",\n    \"langchain\",\n    \"openai\",\n    \"pandas\",\n    \"tiktoken\",\n    \"unstructured\",\n    \"tabulate\"\n)\n\nstub = Stub(\n    name=\"example-langchain-lancedb\",\n    image=lancedb_image,\n    secrets=[Secret.from_name(\"my-openai-secret\")],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Label List Index in TypeScript\nDESCRIPTION: Creates a label list index for List<T> columns to support queries with array_contains_all and array_contains_any using an underlying bitmap index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic labelList(): Index\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search with Text Query\nDESCRIPTION: Python code demonstrating how to perform a semantic search using a text query converted to embeddings\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninfer_clip_payload = {\n    \"text\": \"cat\",\n}\n\nres = requests.post(\n    f\"{SERVER_URL}/clip/embed_text?api_key={API_KEY}\",\n    json=infer_clip_payload,\n)\n\nembeddings = res.json()['embeddings']\n\ndf = tbl.search(embeddings[0]).limit(3).to_list()\n\nprint(\"Results:\")\n\nfor i in df:\n    print(i[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Query Builder for LanceDB Table in TypeScript\nDESCRIPTION: Initiates a Query Builder for constructing and executing queries on the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nabstract query(): Query\n```\n\n----------------------------------------\n\nTITLE: Implementing Limit Method in TypeScript\nDESCRIPTION: Defines the limit method which sets the maximum number of results to return from the query. By default, a plain search has no limit.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlimit(limit): this\n```\n\n----------------------------------------\n\nTITLE: Upserting Data in Python\nDESCRIPTION: Examples showing how to upsert (insert or update) data in a LanceDB table using the merge_insert API in Python with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:upsert_basic\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:upsert_basic_async\"\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table and Ingesting Data\nDESCRIPTION: This snippet creates a local LanceDB connection, initializes a table with the defined schema, and ingests the context data into the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\ndb = lancedb.connect(\"~/lancedb/\")\ntbl = db.create_table(\"qa_data\", schema=Schema, mode=\"overwrite\")\n\ncontexts = [\n    {\"text\": context} for context in data[\"context\"].unique()\n]\nprint(contexts[0:5])\ntbl.add(contexts)\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Search with Filtering in Python\nDESCRIPTION: Demonstrates basic vector search with pre-filtering using both synchronous and asynchronous clients. Shows how to combine vector search with WHERE clause filtering.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/sql.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous client\nresult = tbl.search([0.5, 0.2]).where(\"id = 10\", prefilter=True).limit(1).to_arrow()\n# Asynchronous client\nresult = await async_tbl.query().where(\"id = 10\").nearest_to([0.5, 0.2]).limit(1).to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a LanceDB Vector Store\nDESCRIPTION: This code shows how to create a LanceDB vector store from documents using OpenAI embeddings and then query it for relevant documents. The retriever is used to find documents related to the query \"How adaptive RAG works\".\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/adaptive_rag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# add documents in LanceDB\nvectorstore = LanceDB.from_documents(\n    documents=doc_splits,\n    embedding=OpenAIEmbeddings(),\n)\nretriever = vectorstore.as_retriever()\n\n# query using defined retriever\nquestion = \"How adaptive RAG works\"\ndocs = retriever.get_relevant_documents(question)\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Post-filtering in TypeScript\nDESCRIPTION: Demonstrates how to apply a post-filter condition to full-text search results in TypeScript, filtering the data after retrieving search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl\n.search(\"apple\")\n.select([\"id\", \"doc\"])\n.limit(10)\n.where(\"meta='foo'\")\n.prefilter(false)\n.toArray();\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty LanceDB Table in TypeScript\nDESCRIPTION: Demonstrates how to create an empty LanceDB table with a specified schema in TypeScript using the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_empty_table\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LanceDB and TransformersJS\nDESCRIPTION: Commands to install the required npm packages for using LanceDB with TransformersJS. The vectordb package provides access to LanceDB functionality, while @xenova/transformers enables the use of transformer models for embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vectordb\nnpm i @xenova/transformers\n```\n\n----------------------------------------\n\nTITLE: Basic Full-Text Search Implementation in Python\nDESCRIPTION: Creates a LanceDB table with sample data, creates a full-text search index on the 'text' column, and performs a keyword search for 'puppy' with native FTS. The example demonstrates both synchronous and asynchronous API usage.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.indexes.fts import FullTextSearchIndex\n\nuri = \"data/sample-lancedb\"\ndb = lancedb.connect(uri)\n\ndata = [\n    {\"vector\": [3.1, 4.1], \"text\": \"Frodo was a happy puppy\"},\n    {\"vector\": [5.9, 26.5], \"text\": \"There are several kittens playing\"},\n]\ntbl = db.create_table(\"my_table\", data=data, mode=\"overwrite\")\ntbl.create_index(\"text\", FullTextSearchIndex(use_tantivy=False))\n\ntbl.search(\"puppy\", query_type=\"fts\").select([\"text\"]).limit(10).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Using Embedding Functions with TypeScript SDK\nDESCRIPTION: Example of importing and using embedding functions in TypeScript with the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n--8<-- \"nodejs/examples/embedding.test.ts:imports\"\n--8<-- \"nodejs/examples/embedding.test.ts:embedding_function\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB with URI and Optional Parameters in TypeScript\nDESCRIPTION: This function connects to a LanceDB instance using a URI and optional connection options. It supports local, cloud storage, and remote database connections.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction connect(uri, options?): Promise<Connection>\n```\n\n----------------------------------------\n\nTITLE: Vector Search with IVF_PQ Index in Python (Sync API)\nDESCRIPTION: Shows how to perform a vector similarity search using a pre-built IVF_PQ index with the synchronous Python API. The search returns the nearest neighbors to the query vector.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Column Property in TypeScript\nDESCRIPTION: Specifies the source column property that indicates which column contains the input data to be embedded.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/EmbeddingFunctionConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsourceColumn: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Python\nDESCRIPTION: Examples showing how to update rows in a LanceDB table using SQL-like syntax with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:update_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:update_table_async\"\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Embedding Function in TypeScript\nDESCRIPTION: This snippet shows how to use the OpenAI embedding function in TypeScript to create vector embeddings for text data in a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n--8<--- \"nodejs/examples/embedding.test.ts:imports\"\n--8<--- \"nodejs/examples/embedding.test.ts:openai_embeddings\"\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Base with OpenAI Embedder in LanceDB\nDESCRIPTION: Initializes a TextKnowledgeBase using LanceDB with OpenAI embeddings for storing and querying text documents. Configures database location, table name, and number of documents to return in queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create knowledge Base with OpenAIEmbedder in LanceDB\nknowledge_base = TextKnowledgeBase(\n    path=\"transcript.txt\",\n    vector_db=LanceDb(\n        embedder=OpenAIEmbedder(api_key = openai.api_key),\n        table_name=\"transcript_documents\",\n        uri=\"./t3mp/.lancedb\",\n    ),\n    num_documents = 10\n)\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Scalar Prefiltering in Python\nDESCRIPTION: Shows how to combine vector similarity search with scalar filtering using indexed columns for improved performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\n# Connect to a database\ndb = lancedb.connect(\"data\")\n\n# Open an existing table\ntbl = db.open_table(\"books\")\n\n# Vector search with a prefilter on the book_id column\ntbl.search([1.2] * 1536).where(\"book_id != 3\").limit(10).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB Table with ImageBind Embeddings\nDESCRIPTION: Sets up a LanceDB table with ImageBind embeddings support by defining a pydantic model and adding multi-modal data. The code demonstrates creating a table schema that handles text, image, and audio inputs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/imagebind_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(tmp_path)\nfunc = get_registry().get(\"imagebind\").create()\n\nclass ImageBindModel(LanceModel):\n    text: str\n    image_uri: str = func.SourceField()\n    audio_path: str\n    vector: Vector(func.ndims()) = func.VectorField()\n\n# add locally accessible image paths\ntext_list=[\"A dog.\", \"A car\", \"A bird\"]\nimage_paths=[\".assets/dog_image.jpg\", \".assets/car_image.jpg\", \".assets/bird_image.jpg\"]\naudio_paths=[\".assets/dog_audio.wav\", \".assets/car_audio.wav\", \".assets/bird_audio.wav\"]\n\n# Load data\ninputs = [\n    {\"text\": a, \"audio_path\": b, \"image_uri\": c}\n    for a, b, c in zip(text_list, audio_paths, image_paths)\n]\n\n#create table and add data\ntable = db.create_table(\"img_bind\", schema=ImageBindModel)\ntable.add(inputs)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table and Adding Data with Auto-Embedding in Python\nDESCRIPTION: Shows how to create a LanceDB table with the defined schema and add data without manually generating embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndb = lancedb.connect(\"~/lancedb\")\ntable = db.create_table(\"pets\", schema=Pets)\n\ntable.add([{\"image_uri\": u} for u in uris])\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table with Nested Schema\nDESCRIPTION: Shows how to set up a LanceDB table with a nested schema using both synchronous and asynchronous APIs. Includes necessary imports and Pydantic model definition.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:import-datetime\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_search.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_search.py:import-numpy\"\n--8<-- \"python/python/tests/docs/test_search.py:import-pydantic-base-model\"\n--8<-- \"python/python/tests/docs/test_search.py:class-definition\"\n--8<-- \"python/python/tests/docs/test_search.py:create_table_with_nested_schema\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Jina Reranker with LanceDB\nDESCRIPTION: Example demonstrating the setup and usage of Jina Reranker with LanceDB, including vector, FTS, and hybrid search implementations. Shows how to configure the environment, create a table with embeddings, and perform different types of searches with reranking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/jina.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import JinaReranker\n\nos.environ['JINA_API_KEY'] = \"jina_*\"\n\n\nembedder = get_registry().get(\"jina\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = JinaReranker(api_key=\"key\")\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Query Analysis with LangChain and OpenAI\nDESCRIPTION: This snippet demonstrates how to implement query analysis for Adaptive RAG using LangChain and OpenAI's function calling capabilities. It defines a RouteQuery class to determine whether to route a query to a vector store or web search based on the query's complexity.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/adaptive_rag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\n\nclass RouteQuery(BaseModel):\n    \"\"\"Route a user query to the most relevant datasource.\"\"\"\n\n    datasource: Literal[\"vectorstore\", \"web_search\"] = Field(\n        ...,\n        description=\"Given a user question choose to route it to web search or a vectorstore.\",\n    )\n\n\n# LLM with function call\nllm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)\nstructured_llm_router = llm.with_structured_output(RouteQuery)\n```\n\n----------------------------------------\n\nTITLE: Processing and Storing Documentation with Metadata in LangChain\nDESCRIPTION: Processes HTML documentation files using LangChain's UnstructuredHTMLLoader, adds custom metadata such as title and version, and caches the processed documents. The function either processes the files or loads previously cached documents.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef store_docs():\n    docs = []\n\n    if not docs_path.exists():\n        for p in Path(\"pandas_docs/pandas.documentation\").rglob(\"*.html\"):\n            if p.is_dir():\n                continue\n            loader = UnstructuredHTMLLoader(p)\n            raw_document = loader.load()\n\n            m = {}\n            m[\"title\"] = get_document_title(raw_document[0])\n            m[\"version\"] = \"2.0rc0\"\n            raw_document[0].metadata = raw_document[0].metadata | m\n            raw_document[0].metadata[\"source\"] = str(raw_document[0].metadata[\"source\"])\n            docs = docs + raw_document\n\n        with docs_path.open(\"wb\") as fh:\n            pickle.dump(docs, fh)\n    else:\n        with docs_path.open(\"rb\") as fh:\n            docs = pickle.load(fh)\n\n    return docs\n```\n\n----------------------------------------\n\nTITLE: Vector Search with IVF_PQ Index in Rust\nDESCRIPTION: Shows how to perform a vector similarity search using a pre-built IVF_PQ index with the Rust SDK. The search returns the nearest neighbors to the query vector.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n--8<-- \"rust/lancedb/examples/ivf_pq.rs:search1\"\n```\n\n----------------------------------------\n\nTITLE: Ingesting Pydantic Models with LanceDB Embedding API\nDESCRIPTION: Examples showing how to add Pydantic models with automatic vectorization using LanceDB's embedding API with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-embeddings\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_with_embedding\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-embeddings\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_with_embedding\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross Encoder Reranking in LanceDB with Python\nDESCRIPTION: Demonstrates how to use Cross Encoder Reranker with LanceDB for vector, FTS, and hybrid search operations. The example shows table creation, data insertion, and different search methods using sentence-transformers embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/cross_encoder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import CrossEncoderReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = CrossEncoderReranker()\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Vector Search with IVF_PQ Index in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Shows how to perform a vector similarity search using a pre-built IVF_PQ index with the modern @lancedb/lancedb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/ann_indexes.test.ts:search1\"\n```\n\n----------------------------------------\n\nTITLE: Similarity Search with Relevance Scores in LanceDB\nDESCRIPTION: Shows how to perform a similarity search that returns both matching documents and their relevance scores, which indicate how closely each document matches the query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndocs = docsearch.similarity_search_with_relevance_scores(query)\nprint(\"relevance score - \", docs[0][1])\nprint(\"text- \", docs[0][0].page_content[:1000])\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in LanceDB (Async API)\nDESCRIPTION: This snippet shows how to perform a vector similarity search using the LanceDB Python API with the asynchronous interface.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:vector_search_async\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Data in Python\nDESCRIPTION: Examples showing how to delete rows from a LanceDB table using filters with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_row\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_row_async\"\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from PyArrow RecordBatch Iterator (Sync API)\nDESCRIPTION: Demonstrates how to create a LanceDB table using a PyArrow RecordBatch iterator for handling large datasets efficiently with the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:make_batches\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_from_batch\"\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search Implementation in Rust\nDESCRIPTION: Demonstrates how to connect to a LanceDB database in Rust, create a table with sample records, build a full-text search index, and execute a search query. Showcases the Rust-specific API for LanceDB operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet uri = \"data/sample-lancedb\";\nlet db = connect(uri).execute().await?;\nlet initial_data: Box<dyn RecordBatchReader + Send> = create_some_records()?;\nlet tbl = db\n    .create_table(\"my_table\", initial_data)\n    .execute()\n    .await?;\ntbl\n    .create_index(&[\"text\"], Index::FTS(FtsIndexBuilder::default()))\n    .execute()\n    .await?;\n\ntbl\n    .query()\n    .full_text_search(FullTextSearchQuery::new(\"puppy\".to_owned()))\n    .select(lancedb::query::Select::Columns(vec![\"text\".to_owned()]))\n    .limit(10)\n    .execute()\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Searching with Text in TypeScript\nDESCRIPTION: Example of searching a table using text with the @lancedb/lancedb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await table.search(\"What's the best pizza topping?\")\n    .limit(10)\n    .toArray()\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Pre-filtering in Python (Async)\nDESCRIPTION: Asynchronous implementation of filtering full-text search results with a pre-filter condition based on metadata. Uses the async API to perform the search and filter operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.search(\"puppy\", query_type=\"fts\")\\\n         .select([\"id\", \"doc\"])\\\n         .limit(10)\\\n         .where(\"meta='foo'\")\\\n         .to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Creating an HNSW-PQ Index in TypeScript\nDESCRIPTION: Creates a Hierarchical Navigable Small World - Product Quantization index, which is a variant of the HNSW algorithm using product quantization to compress vectors. It accepts optional HnswPqOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic hnswPq(options?): Index\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 LanceDB Database with Options in TypeScript\nDESCRIPTION: An example of connecting to a LanceDB database stored in S3, with additional storage options specified.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst conn = await connect(\n  \"s3://bucket/path/to/database\",\n  {storageOptions: {timeout: \"60s\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Dictionaries in Python\nDESCRIPTION: Shows how to create LanceDB tables from dictionaries, with options for handling existing tables (exist_ok and overwrite modes).\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_exist_ok\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_exist_ok\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_overwrite\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_overwrite\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HyDE with LangChain and LanceDB for Advanced RAG\nDESCRIPTION: This code demonstrates how to implement Hypothetical Document Embeddings (HyDE) using LangChain and LanceDB. It initializes the necessary components including OpenAI's LLM and embeddings, creates a HyDE embedder, sets up a LanceDB retriever, defines a prompt template for answering questions, and performs vector similarity search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/advanced_techniques/hyde.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.llms import OpenAI\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain, HypotheticalDocumentEmbedder\nfrom langchain.vectorstores import LanceDB\n\n# set OPENAI_API_KEY as env variable before this step\n# initialize LLM and embedding function\nllm = OpenAI()\nemebeddings = OpenAIEmbeddings()\n\n# HyDE embedding\nembeddings = HypotheticalDocumentEmbedder(llm_chain=llm_chain,base_embeddings=embeddings)\n\n# load dataset\n\n# LanceDB retriever\nretriever = LanceDB.from_documents(documents, embeddings, connection=table)\n\n# prompt template\nprompt_template = \"\"\"\nAs a knowledgeable and helpful research assistant, your task is to provide informative answers based on the given context. Use your extensive knowledge base to offer clear, concise, and accurate responses to the user's inquiries.\nif quetion is not related to documents simply say you dont know\nQuestion: {question}\n\nAnswer:\n\"\"\"\n\nprompt = PromptTemplate(input_variables=[\"question\"], template=prompt_template)\n\n# LLM Chain\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n\n# vector search\nretriever.similarity_search(query)\nllm_chain.run(query)\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Vector Store in Python\nDESCRIPTION: This snippet demonstrates how to use the add_images() method to add images to the vector store. It automatically creates embeddings for the images and adds them to the store. The method takes a list of image URIs (local file system paths) and returns a list of IDs for the added images.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvec_store.add_images(uris=image_uris) \n# here image_uris are local fs paths to the images.\n```\n\n----------------------------------------\n\nTITLE: Opening Existing LanceDB Table (Sync API)\nDESCRIPTION: Illustrates how to open an existing table in a LanceDB database using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:open_table\"\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Pre-filtering in Python\nDESCRIPTION: Demonstrates how to apply a pre-filter condition to full-text search results to narrow down matches based on metadata. Pre-filtering happens before the FTS search, which can improve performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntbl.search(\"puppy\", query_type=\"fts\")\\\n   .select([\"id\", \"doc\"])\\\n   .limit(10)\\\n   .where(\"meta='foo'\")\\\n   .to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Converting a LanceDB Table to Pandas DataFrame\nDESCRIPTION: Shows how to convert a LanceDB table to a pandas DataFrame to view its contents after operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntbl.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Utility Function for LanceDB\nDESCRIPTION: This function provides a utility for searching the LanceDB table with different query types and rerankers, including vector search, full-text search, and hybrid search with optional reranking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import Reranker\n\nVALID_QUERY_TYPES = [\"vector\", \"fts\", \"hybrid\", \"rerank_vector\", \"rerank_fts\"]\n\ndef search_table(table: lancedb.table, reranker:Reranker, query_type: str, query_string: str, top_k:int=5, overfetch_factor:int=2):\n    if query_type not in VALID_QUERY_TYPES:\n        raise ValueError(f\"Invalid query type: {query_type}\")\n    if query_type in [\"hybrid\", \"rerank_vector\", \"rerank_fts\"] and reranker is None:\n        raise ValueError(f\"Reranker must be provided for query type: {query_type}\")\n\n    if query_type in [\"vector\", \"fts\"]:\n        rs = table.search(query_string, query_type=query_type).limit(top_k).to_pandas()\n    elif query_type == [\"rerank_vector\", \"rerank_fts\"]:\n        rs = table.search(query_string, query_type=query_type).rerank(reranker=reranker).limit(overfetch_factor*top_k).to_pandas()\n    elif query_type == \"hybrid\":\n        rs = table.search(query_string, query_type=query_type).rerank(reranker=reranker).limit(top_k).to_pandas()\n\n    return rs\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionOptions Interface for LanceDB in TypeScript\nDESCRIPTION: This interface specifies the connection options for LanceDB, including properties for API key, client configuration, host override, read consistency interval, region, and storage options. It supports both cloud and OSS versions of LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionOptions {\n    apiKey?: string;\n    clientConfig?: ClientConfig;\n    hostOverride?: string;\n    readConsistencyInterval?: number;\n    region?: string;\n    storageOptions?: Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-vector Reranking with CrossEncoder\nDESCRIPTION: Example demonstrating how to perform multi-vector reranking using CrossEncoderReranker, searching across multiple vector columns and combining results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import CrossEncoderReranker\n\nreranker = CrossEncoderReranker()\n\nquery = \"hello\"\n\nres1 = table.search(query, vector_column_name=\"vector\").limit(3)\nres2 = table.search(query, vector_column_name=\"text_vector\").limit(3)\nres3 = table.search(query, vector_column_name=\"meta_vector\").limit(3)\n\nreranked = reranker.rerank_multivector([res1, res2, res3],  deduplicate=True)\n```\n\n----------------------------------------\n\nTITLE: Creating AI Assistant with Ollama LLaMA\nDESCRIPTION: Sets up an AI assistant using Ollama's LLaMA 3.1 model to analyze YouTube video transcripts. Configures the assistant with same instructions as OpenAI version for transcript analysis and highlight generation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# define an assistant with llama3.1 llm and reference to the knowledge base created above\nassistant = Assistant(\n    llm=Ollama(model=\"llama3.1\"),\n    description=\"\"\"You are an Expert in explaining youtube video transcripts. You are a bot that takes transcript of a video and answer the question based on it.\n\n    This is transcript for the above timestamp: {relevant_document}\n    The user input is: {user_input}\n    generate highlights only when asked.\n    When asked to generate highlights from the video, understand the context for each timestamp and create key highlight points, answer in following way - \n    [timestamp] - highlight 1\n    [timestamp] - highlight 2\n    ... so on\n\n    Your task is to understand the user question, and provide an answer using the provided contexts. Your answers are correct, high-quality, and written by an domain expert. If the provided context does not contain the answer, simply state,'The provided context does not have the answer.'\"\"\",\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Scalar Prefiltering in Python (Async)\nDESCRIPTION: Demonstrates how to perform vector similarity search with scalar prefiltering asynchronously in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\n# Connect to a database asynchronously\ndb = await lancedb.connect_async(\"data\")\n\n# Open an existing table asynchronously\ntbl = await db.open_table(\"books\")\n\n# Vector search with a prefilter on the book_id column asynchronously\nresults = await tbl.search([1.2] * 1536).where(\"book_id != 3\").limit(10).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Listing LanceDB Tables (Async API)\nDESCRIPTION: Shows how to retrieve a list of all tables in a LanceDB database using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:list_tables_async\"\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Polars DataFrame in Python\nDESCRIPTION: Examples showing how to add data to a LanceDB table using a Polars DataFrame with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_from_polars\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_async_from_polars\"\n```\n\n----------------------------------------\n\nTITLE: Creating FTS Index with Position Information for Phrase Queries in Python (Async)\nDESCRIPTION: Asynchronous implementation of creating a full-text search index with position information enabled for phrase queries. Allows searching for exact word sequences like 'the old man and the sea'.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.create_index(\"text\", FullTextSearchIndex(\n    with_position=True,\n    use_tantivy=False\n))\n```\n\n----------------------------------------\n\nTITLE: Performing Vector-Based Similarity Search in LanceDB\nDESCRIPTION: Example of performing similarity search using a pre-computed embedding vector rather than text. This allows direct vector similarity comparisons in the vector space.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocs = docsearch.similarity_search_by_vector(query)\nprint(docs[0].page_content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Methods in TypeScript\nDESCRIPTION: Defines various query methods such as fastSearch, filter, fullTextSearch, limit, offset, select, where, and withRowId. These methods allow for customizing and refining the query execution.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfastSearch(): this\nfilter(predicate): this\nfullTextSearch(query, options?): this\nlimit(limit): this\noffset(offset): this\nselect(columns): this\nwhere(predicate): this\nwithRowId(): this\n```\n\n----------------------------------------\n\nTITLE: Creating a New Table with Overwrite Mode\nDESCRIPTION: Demonstrates creating a new LanceDB table with the 'overwrite' mode, which replaces any existing table with the same name.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(\n                    {\n                        \"vector\": [[3.1, 4.1], [1, 1]],\n                        \"item\": [\"foo\", \"bar\"],\n                        \"price\": [10.0, 20.0],\n                    })\n\ntbl = db.create_table(\"table7\", data=df, mode=\"overwrite\")\n```\n\n----------------------------------------\n\nTITLE: Listing Table Names in LanceDB (TypeScript)\nDESCRIPTION: Demonstrates how to get a list of all table names in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(await db.tableNames());\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(await db.tableNames());\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in LanceDB (Sync API)\nDESCRIPTION: This code demonstrates how to perform a vector similarity search using the LanceDB Python API with the synchronous interface.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:vector_search\"\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Search with LanceDB in JavaScript\nDESCRIPTION: Demonstrates creating a LanceDB connection, creating a table with vector data, and performing a vector similarity search. Shows basic table operations including data insertion and querying.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"data/sample-lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { id: 1, vector: [0.1, 1.0], item: \"foo\", price: 10.0 },\n  { id: 2, vector: [3.9, 0.5], item: \"bar\", price: 20.0 },\n]);\nconst results = await table.vectorSearch([0.1, 0.3]).limit(20).toArray();\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Creating RRFReranker Instance in TypeScript\nDESCRIPTION: This static method creates a new instance of the RRFReranker. It takes an optional 'k' parameter (default value 60) and returns a promise resolving to a new RRFReranker instance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/rerankers/classes/RRFReranker.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic create(k): Promise<RRFReranker>\n```\n\n----------------------------------------\n\nTITLE: Filtering Full-text Search Results in LanceDB\nDESCRIPTION: Example of applying post-filtering to full-text search results using the where clause.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable.search(\"puppy\").limit(10).where(\"meta='foo'\").to_list()\n```\n\n----------------------------------------\n\nTITLE: Connecting to AWS S3 using Python\nDESCRIPTION: Code examples for connecting to AWS S3 using both sync and async Python APIs in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"s3://bucket/path\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\"s3://bucket/path\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Grading and Query Rewriting Agents\nDESCRIPTION: Defines agent functions for grading document relevance and rewriting queries. Uses OpenAI's GPT-4 models to assess document relevance and improve query formulation for better search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/agentic_rag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef grade_documents(state) -> Literal[\"generate\", \"rewrite\"]:\n    class grade(BaseModel):\n        binary_score: str = Field(description=\"Relevance score 'yes' or 'no'\")\n\n    model = ChatOpenAI(temperature=0, model=\"gpt-4-0125-preview\", streaming=True)\n    llm_with_tool = model.with_structured_output(grade)\n    prompt = PromptTemplate(\n        template=\"\"\"You are a grader assessing relevance of a retrieved document to a user question. \\n\n        Here is the retrieved document: \\n\\n {context} \\n\\n\n        Here is the user question: {question} \\n\n        If the document contains keyword(s) or semantic meaning related to the user question, grade it as relevant. \\n\n        Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question.\"\"\",\n        input_variables=[\"context\", \"question\"],\n    )\n    chain = prompt | llm_with_tool\n\n    messages = state[\"messages\"]\n    last_message = messages[-1]\n    question = messages[0].content\n    docs = last_message.content\n\n    scored_result = chain.invoke({\"question\": question, \"context\": docs})\n    score = scored_result.binary_score\n\n    return \"generate\" if score == \"yes\" else \"rewrite\"\n\n\ndef agent(state):\n    messages = state[\"messages\"]\n    model = ChatOpenAI(temperature=0, streaming=True, model=\"gpt-4-turbo\")\n    model = model.bind_tools(tools)\n    response = model.invoke(messages)\n    return {\"messages\": [response]}\n\n\ndef rewrite(state):\n    messages = state[\"messages\"]\n    question = messages[0].content\n    msg = [\n        HumanMessage(\n            content=f\"\"\" \\n\n            Look at the input and try to reason about the underlying semantic intent / meaning. \\n\n            Here is the initial question:\n            \\n ------- \\n\n            {question}\n            \\n ------- \\n\n            Formulate an improved question: \"\"\",\n        )\n    ]\n    model = ChatOpenAI(temperature=0, model=\"gpt-4-0125-preview\", streaming=True)\n    response = model.invoke(msg)\n    return {\"messages\": [response]}\n```\n\n----------------------------------------\n\nTITLE: Adding Data with PyArrow Table in Python\nDESCRIPTION: Examples showing how to add data to a LanceDB table using a PyArrow table with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_from_pyarrow\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_async_from_pyarrow\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Arrays in TypeScript\nDESCRIPTION: Demonstrates creating LanceDB tables from arrays of records in TypeScript with options for schema definition, handling existing tables, and overwriting tables.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_table\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_table_with_schema\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_table_exists_ok\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_table_overwrite\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/basic_legacy.ts:create_table\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/basic_legacy.ts:create_table_with_schema\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = await con.createTable(tableName, data, {\n    writeMode: WriteMode.Overwrite\n})\n```\n\n----------------------------------------\n\nTITLE: Updating LanceDB Table Records with SQL Expression in TypeScript\nDESCRIPTION: Shows how to update existing records in a LanceDB table using SQL expressions to modify column values based on their current values.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntable.update({where:\"x = 2\", valuesSql:{\"x\": \"x + 1\"}})\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Initial Data in TypeScript\nDESCRIPTION: Shows how to create a LanceDB table and insert initial data in TypeScript using the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_table\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FTS with ASCII Folding in Python (Async)\nDESCRIPTION: Asynchronous implementation of creating a full-text search index with ASCII folding to normalize special characters. Helps with searches involving text with diacritical marks and accents.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.create_index(\"text\", FullTextSearchIndex(\n    use_tantivy=False,\n    tokenizer_options=[\"ascii_folding\"],\n))\n```\n\n----------------------------------------\n\nTITLE: Defining MetricType Enum in TypeScript for LanceDB\nDESCRIPTION: Enumeration of distance metrics used for vector similarity search in LanceDB. It includes L2 (Euclidean distance), Cosine (Cosine distance), and Dot (Dot product) metrics.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/enums/MetricType.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum MetricType {\n  L2 = \"l2\",       // Euclidean distance\n  Cosine = \"cosine\", // Cosine distance\n  Dot = \"dot\"       // Dot product\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Multiple Text Columns for Full-text Search\nDESCRIPTION: Example showing how to create a full-text search index on multiple text columns in a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable.create_fts_index([\"title\", \"content\"], use_tantivy=True, replace=True)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from a LanceDB Table Using a Filter\nDESCRIPTION: Shows how to delete records from a LanceDB table by applying a filter expression that matches specific metadata values.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntbl.delete('item = \"fizz\"')\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table with DataFrame Iterator and Pydantic Schema\nDESCRIPTION: Shows how to create a LanceDB table using an iterator of pandas DataFrames combined with a Pydantic schema definition, useful for processing large datasets in chunks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\nimport pandas as pd\n\nclass PydanticSchema(LanceModel):\n    vector: Vector(2)\n    item: str\n    price: float\n\ndef make_batches():\n    for i in range(5):\n        yield pd.DataFrame(\n                {\n                    \"vector\": [[3.1, 4.1], [1, 1]],\n                    \"item\": [\"foo\", \"bar\"],\n                    \"price\": [10.0, 20.0],\n                })\n\ntbl = db.create_table(\"table5\", make_batches(), schema=PydanticSchema)\ntbl.schema\n```\n\n----------------------------------------\n\nTITLE: Opening a Table in LanceDB using TypeScript\nDESCRIPTION: Opens a table in the LanceDB database. Takes the table name and optional opening options as parameters. Returns a Promise resolving to a Table object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nabstract openTable(name, options?): Promise<Table>\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with Credentials in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Illustrates how to connect to an S3 bucket using LanceDB's TypeScript API with explicit AWS credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\n    \"s3://bucket/path\",\n    {\n        storageOptions: {\n            awsAccessKeyId: \"my-access-key\",\n            awsSecretAccessKey: \"my-secret-key\",\n            awsSessionToken: \"my-session-token\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Table Names in LanceDB with TypeScript\nDESCRIPTION: Lists all table names in the LanceDB database. Tables are returned in lexicographical order. Takes optional paging options and returns a Promise resolving to an array of table names.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nabstract tableNames(options?): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table with Pydantic Schema (Sync API)\nDESCRIPTION: Demonstrates the creation of an empty LanceDB table using a Pydantic schema with the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-Item\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_empty_table_pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Replace Range Operations in LanceDB with Python (Sync)\nDESCRIPTION: This code snippet demonstrates how to replace a range of rows in LanceDB using the merge_insert API with Python's synchronous interface. It replaces all matching chunks for a given document ID, deleting any that are not in the new data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:replace_range\"\n```\n\n----------------------------------------\n\nTITLE: Creating IVF_PQ Index in Python (Sync API)\nDESCRIPTION: Demonstrates how to create an IVF_PQ vector index on a table using LanceDB's synchronous Python API. The example includes importing the necessary libraries and creating the index with default parameters.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_index.py:import-numpy\"\n--8<-- \"python/python/tests/docs/test_guide_index.py:create_ann_index\"\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up OpenAI Assistant\nDESCRIPTION: This code snippet demonstrates how to import required libraries and set up an OpenAI-based assistant using phidata and LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os, openai\nfrom rich.prompt import Prompt\nfrom phi.assistant import Assistant\nfrom phi.knowledge.text import TextKnowledgeBase\nfrom phi.vectordb.lancedb import LanceDb\nfrom phi.llm.openai import OpenAIChat\nfrom phi.embedder.openai import OpenAIEmbedder\nfrom transcript import extract_transcript\n\nif \"OPENAI_API_KEY\" not in os.environ:\n# OR set the key here as a variable\n    openai.api_key = \"sk-...\"\n\n# The code below creates a file \"transcript.txt\" in the directory, the txt file will be used below\nyoutube_url = \"https://www.youtube.com/watch?v=Xs33-Gzl8Mo\" \nsegment_duration = 20\ntranscript_text,dict_transcript = extract_transcript(youtube_url,segment_duration)\n```\n\n----------------------------------------\n\nTITLE: Integrating watsonx.ai Embeddings with LanceDB in Python\nDESCRIPTION: Python code demonstrating how to use watsonx.ai embeddings with LanceDB. It includes creating an embedding function, defining a LanceModel, adding data to a table, and performing a vector search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/ibm_watsonx_ai_embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import EmbeddingFunctionRegistry\n\nwatsonx_embed = EmbeddingFunctionRegistry\n  .get_instance()\n  .get(\"watsonx\")\n  .create(\n    name=\"ibm/slate-125m-english-rtrvr\",\n    # Uncomment and set these if not using environment variables\n    # api_key=\"your_api_key_here\",\n    # project_id=\"your_project_id_here\",\n    # url=\"your_watsonx_url_here\",\n    # params={...},\n  )\n\nclass TextModel(LanceModel):\n    text: str = watsonx_embed.SourceField()\n    vector: Vector(watsonx_embed.ndims()) = watsonx_embed.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"},\n]\n\ndb = lancedb.connect(\"~/.lancedb\")\ntbl = db.create_table(\"watsonx_test\", schema=TextModel, mode=\"overwrite\")\n\ntbl.add(data)\n\nrs = tbl.search(\"hello\").limit(1).to_pandas()\nprint(rs)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage with Python Sync API\nDESCRIPTION: Demonstrates how to connect LanceDB to Google Cloud Storage using the Python synchronous API. It specifies the path to the service account JSON file in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"gs://my-bucket/my-database\",\n    storage_options={\n        \"service_account\": \"path/to/service-account.json\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using BAAI Embedding Model with LanceDB\nDESCRIPTION: Example code demonstrating how to use a BAAI embedding model from the HuggingFace Hub with LanceDB. It shows the complete flow from initializing the model to performing a vector search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/sentence_transformers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nmodel = get_registry().get(\"sentence-transformers\").create(name=\"BAAI/bge-small-en-v1.5\", device=\"cpu\")\n\nclass Words(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ntable = db.create_table(\"words\", schema=Words)\ntable.add(\n    [\n        {\"text\": \"hello world\"},\n        {\"text\": \"goodbye world\"}\n    ]\n)\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a LanceDB Table with OpenAI Embeddings in Python\nDESCRIPTION: This snippet demonstrates how to create a LanceDB table using OpenAI embeddings, add data to it, and perform a vector search. It uses the 'text-embedding-ada-002' model and creates a custom schema with a text field and a vector field.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/openai_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nfunc = get_registry().get(\"openai\").create(name=\"text-embedding-ada-002\")\n\nclass Words(LanceModel):\n    text: str = func.SourceField()\n    vector: Vector(func.ndims()) = func.VectorField()\n\ntable = db.create_table(\"words\", schema=Words, mode=\"overwrite\")\ntable.add(\n    [\n        {\"text\": \"hello world\"},\n        {\"text\": \"goodbye world\"}\n    ]\n    )\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filtering in Python (Sync API)\nDESCRIPTION: Example of vector search with additional filtering criteria using a where clause in the synchronous Python API. This allows combining vector similarity with metadata filtering.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search_with_filter\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nearest To Text Method in TypeScript\nDESCRIPTION: Defines the nearestToText method which performs a nearest neighbor search based on text input. It accepts either a string query or a FullTextQuery object, along with optional column specifications.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnearestToText(query, columns?): Query\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns in LanceDB - Python\nDESCRIPTION: Shows how to remove columns from tables in Python using both sync and async APIs\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:drop_columns\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:drop_columns_async\"\n```\n\n----------------------------------------\n\nTITLE: Implementing dropTable Method for LanceDB Connection in TypeScript\nDESCRIPTION: Defines the dropTable method to remove an existing table from the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **dropTable**(`name`): `Promise`\\<`void`\\>\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Row in Python\nDESCRIPTION: Examples showing how to delete a specific row from a LanceDB table by filtering on a column value with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_specific_row\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_specific_row_async\"\n```\n\n----------------------------------------\n\nTITLE: Generic Syntax for Initializing Embedding Models in Python\nDESCRIPTION: This snippet shows the general syntax for creating a configured instance of an embedding function with a chosen model. It uses the registry to get the model and then creates an instance with specified parameters.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/default_embedding_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodel = get_registry().get(\"model_id\").create(...params)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateTableOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the CreateTableOptions interface with various properties for configuring table creation in LanceDB. It includes deprecated properties and their replacements, as well as options for handling existing tables and specifying storage configurations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateTableOptions {\n  optional dataStorageVersion: string;\n  optional embeddingFunction: EmbeddingFunctionConfig;\n  optional enableV2ManifestPaths: boolean;\n  existOk: boolean;\n  mode: \"overwrite\" | \"create\";\n  optional schema: SchemaLike;\n  optional storageOptions: Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data in TypeScript\nDESCRIPTION: Example showing how to add data to a LanceDB table in TypeScript by providing an array of objects.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait tbl.add(\n    [\n        {vector: [1.3, 1.4], item: \"fizz\", price: 100.0},\n        {vector: [9.5, 56.2], item: \"buzz\", price: 200.0}\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Table with Custom Schema in TypeScript\nDESCRIPTION: Example of using makeArrowTable with a custom schema to create an Arrow Table. It demonstrates defining fields with various data types including FixedSizeList for vector data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/makeArrowTable.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromTableToBuffer, makeArrowTable } from \"../arrow\";\nimport { Field, FixedSizeList, Float16, Float32, Int32, Schema } from \"apache-arrow\";\n\nconst schema = new Schema([\n  new Field(\"a\", new Int32()),\n  new Field(\"b\", new Float32()),\n  new Field(\"c\", new FixedSizeList(3, new Field(\"item\", new Float16()))),\n ]);\n const table = makeArrowTable([\n   { a: 1, b: 2, c: [1, 2, 3] },\n   { a: 4, b: 5, c: [4, 5, 6] },\n   { a: 7, b: 8, c: [7, 8, 9] },\n ], { schema });\n```\n\n----------------------------------------\n\nTITLE: Implementing Analyze Plan Method in TypeScript\nDESCRIPTION: Defines the analyzePlan method which executes the query and returns the physical query plan with runtime metrics. This is useful for debugging and performance analysis.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nanalyzePlan(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Prefilter in LanceDB Table\nDESCRIPTION: Performs a vector search with a prefilter condition in a LanceDB table. This can be optimized if the prefilter column has a scalar index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await table.search([1.0, 2.0]).where('my_col != 7').prefilter(true);\n```\n\n----------------------------------------\n\nTITLE: Using Embedding Functions with LanceDB Cloud in Python\nDESCRIPTION: This snippet demonstrates how to use embedding functions with LanceDB cloud, where embeddings are generated on the source device and sent to the cloud. The example uses the OpenAI embedding function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\nos.environ['OPENAI_API_KEY'] = \"...\"\n\ndb = lancedb.connect(\n  uri=\"db://....\",\n  api_key=\"sk_...\",\n  region=\"us-east-1\"\n)\nfunc = get_registry().get(\"openai\").create()\n\nclass Words(LanceModel):\n    text: str = func.SourceField()\n    vector: Vector(func.ndims()) = func.VectorField()\n\ntable = db.create_table(\"words\", schema=Words)\ntable.add([\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n])\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Creating a prompt for OpenAI completion\nDESCRIPTION: Function to construct a prompt combining the user's query and relevant transcript contexts retrieved from LanceDB, ensuring it stays within token limits for the OpenAI API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createPrompt (query, context) {\n    let prompt =\n        'Answer the question based on the context below.\\n\\n' +\n        'Context:\\n'\n\n    // need to make sure our prompt is not larger than max size\n    prompt = prompt + context.map(c => c.context).join('\\n\\n---\\n\\n').substring(0, 3750)\n    prompt = prompt + `\\n\\nQuestion: ${query}\\nAnswer:`\n    return prompt\n}\n```\n\n----------------------------------------\n\nTITLE: Similarity Search Implementation\nDESCRIPTION: Implementing similarity search with reranking and different query types\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import LinearCombinationReranker\n\nreranker = LinearCombinationReranker(weight=0.3)\n\ndocsearch = LanceDB.from_documents(documents, embeddings, reranker=reranker)\nquery = \"What did the president say about Ketanji Brown Jackson\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage with Python Async API\nDESCRIPTION: Shows how to connect LanceDB to Google Cloud Storage using the Python asynchronous API. It includes the path to the service account JSON file in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"gs://my-bucket/my-database\",\n    storage_options={\n        \"service_account\": \"path/to/service-account.json\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Post-filtering in Python (Async)\nDESCRIPTION: Asynchronous implementation of applying a post-filter condition to full-text search results. The filter is applied after retrieving the search results, allowing for more complex filtering logic.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.search(\"apple\", query_type=\"fts\")\\\n         .select([\"id\", \"doc\"])\\\n         .limit(10)\\\n         .where(\"meta='foo'\", prefilter=False)\\\n         .to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Converting Search Results to Pandas DataFrame\nDESCRIPTION: Shows how to get search results as a Pandas DataFrame, including options for flattening nested schemas to different levels.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_pandas\"\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_pandas_flatten_true\"\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_pandas_flatten_1\"\n```\n\n----------------------------------------\n\nTITLE: Querying with an IVF-PQ Index in LanceDB\nDESCRIPTION: Performs a vector similarity search using the IVF-PQ index with configurable parameters for controlling search accuracy and performance. The query uses nprobes to determine search spread and refine_factor for result reranking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/concepts/index_ivfpq.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Search using a random 1536-dimensional embedding\ntbl.search(np.random.random((1536))) \\\n    .limit(2) \\\n    .nprobes(20) \\\n    .refine_factor(10) \\\n    .to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Executing LanceDB Query and Analyzing Plan\nDESCRIPTION: Demonstrates how to create a LanceDB table, perform a query, and analyze the execution plan with runtime metrics.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\"\n\nconst db = await lancedb.connect(\"./.lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { vector: [1.1, 0.9], id: \"1\" },\n]);\n\nconst plan = await table.query().nearestTo([0.5, 0.2]).analyzePlan();\n\nExample output (with runtime metrics inlined):\nAnalyzeExec verbose=true, metrics=[]\n ProjectionExec: expr=[id@3 as id, vector@0 as vector, _distance@2 as _distance], metrics=[output_rows=1, elapsed_compute=3.292µs]\n  Take: columns=\"vector, _rowid, _distance, (id)\", metrics=[output_rows=1, elapsed_compute=66.001µs, batches_processed=1, bytes_read=8, iops=1, requests=1]\n   CoalesceBatchesExec: target_batch_size=1024, metrics=[output_rows=1, elapsed_compute=3.333µs]\n    GlobalLimitExec: skip=0, fetch=10, metrics=[output_rows=1, elapsed_compute=167ns]\n     FilterExec: _distance@2 IS NOT NULL, metrics=[output_rows=1, elapsed_compute=8.542µs]\n      SortExec: TopK(fetch=10), expr=[_distance@2 ASC NULLS LAST], metrics=[output_rows=1, elapsed_compute=63.25µs, row_replacements=1]\n       KNNVectorDistance: metric=l2, metrics=[output_rows=1, elapsed_compute=114.333µs, output_batches=1]\n        LanceScan: uri=/path/to/data, projection=[vector], row_id=true, row_addr=false, ordered=false, metrics=[output_rows=1, elapsed_compute=103.626µs, bytes_read=549, iops=2, requests=2]\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing Table in LanceDB (Python)\nDESCRIPTION: Demonstrates how to open an existing table in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntbl = db.open_table(\"myTable\")\n```\n\nLANGUAGE: python\nCODE:\n```\ntbl = await db.open_table(\"myTable\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FTS with Stemming in Python (Async)\nDESCRIPTION: Asynchronous implementation of creating a full-text search index with English stemming for text normalization. This allows for better matching of variations of the same word during search operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.create_index(\"text\", FullTextSearchIndex(\n    tokenizer_name=\"en_stem\",\n    use_tantivy=False\n))\n```\n\n----------------------------------------\n\nTITLE: Querying with Scalar Indices in Python (Async)\nDESCRIPTION: Shows how to perform filtered queries asynchronously with scalar indices in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\n# Connect to a database asynchronously\ndb = await lancedb.connect_async(\"data\")\n\n# Open an existing table asynchronously\ntbl = await db.open_table(\"books\")\n\n# Query with a filter that will use the scalar index on book_id asynchronously\nresults = await tbl.search().where(\"book_id = 2\").limit(10).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Collection Methods in TypeScript\nDESCRIPTION: Defines methods for collecting query results in different formats: toArray for an array of objects and toArrow for an Arrow Table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntoArray(options?): Promise<any[]>\ntoArrow(options?): Promise<Table<any>>\n```\n\n----------------------------------------\n\nTITLE: Filtering Data in LanceDB Table\nDESCRIPTION: Creates a filter query to find all rows matching specified criteria in a LanceDB table. The filter syntax is similar to SQL WHERE clauses.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await table.where('my_col = 7').execute();\n```\n\n----------------------------------------\n\nTITLE: Upserting Data in TypeScript\nDESCRIPTION: Example showing how to upsert (insert or update) data in a LanceDB table using the mergeInsert API in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/merge_insert.test.ts:upsert_basic\"\n```\n\n----------------------------------------\n\nTITLE: Altering Column Properties in LanceDB Table in TypeScript\nDESCRIPTION: Modifies the name or nullability of columns. Accepts an array of ColumnAlteration objects.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nabstract alterColumns(columnAlterations): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Search with ColbertReranker\nDESCRIPTION: Set up hybrid search using ColbertReranker and query the index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import ColbertReranker\n\nreranker = ColbertReranker()\nvector_store._add_reranker(reranker)\n\nquery_engine = index.as_query_engine(\n    filters=query_filters,\n    # vector_store_kwargs={\n    #     \"query_type\": \"fts\",\n    # },\n)\n\nresponse = query_engine.query(\"How much did Viaweb charge per month?\")\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a LanceDB Table (Python)\nDESCRIPTION: Demonstrates how to add more data to an existing table in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntbl.add([\n    {\"vector\": [1.1, 2.3, 3.5], \"item\": \"more data\", \"price\": 20.5},\n    {\"vector\": [2.5, 1.2, 4.9], \"item\": \"even more\", \"price\": 100},\n])\n```\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.add([\n    {\"vector\": [1.1, 2.3, 3.5], \"item\": \"more data\", \"price\": 20.5},\n    {\"vector\": [2.5, 1.2, 4.9], \"item\": \"even more\", \"price\": 100},\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB with OpenClip Embeddings\nDESCRIPTION: Sets up a LanceDB database with OpenClip embeddings using Pydantic models. Demonstrates how to create a table schema that supports both image URIs and bytes as source fields.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/openclip_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(tmp_path)\nfunc = get_registry().get(\"open-clip\").create()\n\nclass Images(LanceModel):\n    label: str\n    image_uri: str = func.SourceField() # image uri as the source\n    image_bytes: bytes = func.SourceField() # image bytes as the source\n    vector: Vector(func.ndims()) = func.VectorField() # vector column \n    vec_from_bytes: Vector(func.ndims()) = func.VectorField() # Another vector column \n\ntable = db.create_table(\"images\", schema=Images)\nlabels = [\"cat\", \"cat\", \"dog\", \"dog\", \"horse\", \"horse\"]\nuris = [\n    \"http://farm1.staticflickr.com/53/167798175_7c7845bbbd_z.jpg\",\n    \"http://farm1.staticflickr.com/134/332220238_da527d8140_z.jpg\",\n    \"http://farm9.staticflickr.com/8387/8602747737_2e5c2a45d4_z.jpg\",\n    \"http://farm5.staticflickr.com/4092/5017326486_1f46057f5f_z.jpg\",\n    \"http://farm9.staticflickr.com/8216/8434969557_d37882c42d_z.jpg\",\n    \"http://farm6.staticflickr.com/5142/5835678453_4f3a4edb45_z.jpg\",\n]\n# get each uri as bytes\nimage_bytes = [requests.get(uri).content for uri in uris]\ntable.add(\n    pd.DataFrame({\"label\": labels, \"image_uri\": uris, \"image_bytes\": image_bytes})\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Embedding Function in TypeScript\nDESCRIPTION: Shows how to initialize the OpenAI embedding function in TypeScript using an API key to create embeddings for the 'text' column.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as lancedb from '@lancedb/lancedb'\nimport { getRegistry } from '@lancedb/lancedb/embeddings'\n\n// You need to provide an OpenAI API key\nconst apiKey = \"sk-...\"\n// The embedding function will create embeddings for the 'text' column\nconst func = getRegistry().get(\"openai\").create({apiKey})\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Fine-tuned Embedding Model\nDESCRIPTION: Gets the fine-tuned embedding model from the fine-tuning engine for use in evaluation and downstream tasks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nembed_model = finetune_engine.get_finetuned_model()\n\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Iterator in Python\nDESCRIPTION: Examples showing how to add data to a LanceDB table using an iterator of batches with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:make_batches_for_add\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_from_batch\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:make_batches_for_add\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_async_from_batch\"\n```\n\n----------------------------------------\n\nTITLE: Creating an HNSW-SQ Index in TypeScript\nDESCRIPTION: Creates a Hierarchical Navigable Small World - Scalar Quantization index, which is a variant of the HNSW algorithm using scalar quantization to compress vectors. It accepts optional HnswSqOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic hnswSq(options?): Index\n```\n\n----------------------------------------\n\nTITLE: Loading and Chunking PDF Documents\nDESCRIPTION: Loads Airbnb's financial report PDF and splits it into manageable chunks using LangChain's text splitter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders import PyPDFLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\n# Load $ABNB's financial report. This may take 1-2 minutes since the PDF is large\nsec_filing_pdf = \"https://d18rn0p25nwr6d.cloudfront.net/CIK-0001559720/8a9ebed0-815a-469a-87eb-1767d21d8cec.pdf\"\n\n# Create your PDF loader\nloader = PyPDFLoader(sec_filing_pdf)\n\n# Load the PDF document\ndocuments = loader.load()\n\n# Chunk the financial report\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=1024, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Hybrid Search with LinearCombinationReranker in LanceDB\nDESCRIPTION: This snippet demonstrates the use of hybrid search with LinearCombinationReranker in LanceDB and evaluates its hit-rate performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import LinearCombinationReranker # LanceDB hybrid search uses LinearCombinationReranker by default\n\nreranker = LinearCombinationReranker(weight=0.7)\nhit_rate_hybrid = hit_rate(data, tbl, \"hybrid\", reranker=reranker)\n\nprint(f\"\\n Hybrid Search with LinearCombinationReranker Hit Rate: {hit_rate_hybrid}\")\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filtering in Python (Async API)\nDESCRIPTION: Example of vector search with additional filtering criteria using a where clause in the asynchronous Python API. This allows combining vector similarity with metadata filtering.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search_async_with_filter\"\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Chatbot with Knowledge Base\nDESCRIPTION: Sets up an interactive CLI chatbot that can access and respond to queries using the loaded knowledge base. Includes an exit condition and markdown formatting support.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nassistant.print_response(\"Ask me about something from the knowledge base\")\nwhile True:\n    message = Prompt.ask(f\"[bold] :sunglasses: User [/bold]\")\n    if message in (\"exit\", \"bye\"):\n        break\n    assistant.print_response(message, markdown=True)\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Search by Vector with Relevance Scores in Python\nDESCRIPTION: This snippet demonstrates how to use the similarity_search_by_vector_with_relevance_scores() method to find documents similar to a query embedding vector. It returns the most similar documents along with their relevance scores.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndocs = docsearch.similarity_search_by_vector_with_relevance_scores(query_embedding)\nprint(\"relevance score - \", docs[0][1])\nprint(\"text- \", docs[0][0].page_content[:1000])\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Indices in TypeScript\nDESCRIPTION: Shows how to create BTREE and BITMAP indices in LanceDB using the TypeScript client.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await lancedb.connect(\"data\");\nconst tbl = await db.openTable(\"my_vectors\");\n\nawait tbl.create_index(\"book_id\");\nawait tlb.create_index(\"publisher\", { config: lancedb.Index.bitmap() })\n```\n\n----------------------------------------\n\nTITLE: Implementing To Array Method in TypeScript\nDESCRIPTION: Defines the toArray method which collects the query results as an array of objects. It accepts optional QueryExecutionOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntoArray(options?): Promise<any[]>\n```\n\n----------------------------------------\n\nTITLE: Implementing explainPlan Method in TypeScript\nDESCRIPTION: Defines the explainPlan method which generates an explanation of the query execution plan. It can provide a more detailed explanation if the verbose parameter is set to true.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexplainPlan(verbose): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from PyArrow Table with Float16 Support\nDESCRIPTION: Demonstrates creating a LanceDB table directly from a PyArrow table with float16 vector type, showing LanceDB's support for different numeric precisions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\ndim = 16\ntotal = 2\nschema = pa.schema(\n    [\n        pa.field(\"vector\", pa.list_(pa.float16(), dim)),\n        pa.field(\"text\", pa.string())\n    ]\n)\ndata = pa.Table.from_arrays(\n    [\n        pa.array([np.random.randn(dim).astype(np.float16) for _ in range(total)],\n                pa.list_(pa.float16(), dim)),\n        pa.array([\"foo\", \"bar\"])\n    ],\n    [\"vector\", \"text\"],\n)\n\ntbl = db.create_table(\"f16_tbl\", data, schema=schema)\ntbl.schema\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying the QA Dataset using Pandas\nDESCRIPTION: This snippet loads the downloaded CSV file into a Pandas DataFrame and displays its contents for inspection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndata = pd.read_csv(\"data_qa.csv\")\n\ndata\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in LanceDB Table with TypeScript\nDESCRIPTION: Counts the total number of rows in the dataset, optionally applying a filter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nabstract countRows(filter?): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Reranking Different Query Types with CohereReranker in Python\nDESCRIPTION: This snippet demonstrates how to apply the CohereReranker to different query types in LanceDB: hybrid search, vector search, and full-text search (fts). It shows the syntax for reranking each query type and limiting the results to 5.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/2_reranking.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# rerank hybrid search results\ntable.search(quries[0], query_type=\"hybrid\").rerank(reranker=reranker).limit(5).to_pandas()\n\n# rerank vector search results\ntable.search(quries[0], query_type=\"vector\").rerank(reranker=reranker).limit(5).to_pandas()\n\n# rerank fts search results\ntable.search(quries[0], query_type=\"fts\").rerank(reranker=reranker).limit(5).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Adding New Columns to LanceDB Table in TypeScript\nDESCRIPTION: Adds new columns with defined values using SQL expressions. Takes an array of AddColumnsSql objects.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract addColumns(newColumnTransforms): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Post-filtering in Python\nDESCRIPTION: Shows how to apply a post-filter condition to full-text search results. Post-filtering happens after the FTS search, which can be useful when the pre-filter might exclude relevant matches.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntbl.search(\"apple\", query_type=\"fts\")\\\n   .select([\"id\", \"doc\"])\\\n   .limit(10)\\\n   .where(\"meta='foo'\", prefilter=False)\\\n   .to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB Connection in Python\nDESCRIPTION: Demonstrates how to import LanceDB and create a database connection using either the synchronous or asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:connect\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:connect_async\"\n```\n\n----------------------------------------\n\nTITLE: Exhaustive Vector Search with Python\nDESCRIPTION: Demonstrates basic vector search functionality using exhaustive kNN search with Python's sync API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:exhaustive_search\"\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Pydantic Model in Python\nDESCRIPTION: Examples showing how to add data to a LanceDB table using Pydantic models with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_from_pydantic\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:add_table_async_from_pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API to LanceDB pipeline in Python\nDESCRIPTION: Python script that configures a REST API source to fetch movie data from OMDb API and load it into a LanceDB table. It includes authentication, pagination, and resource configuration for the API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Import necessary modules\nimport dlt\nfrom rest_api import rest_api_source\n\n# Configure the REST API source\nmovies_source = rest_api_source(\n    {\n        \"client\": {\n            \"base_url\": \"https://www.omdbapi.com/\",\n            \"auth\": { # authentication strategy for the OMDb API\n                \"type\": \"api_key\",\n                \"name\": \"apikey\",\n                \"api_key\": dlt.secrets[\"sources.rest_api.api_token\"], # read API credentials directly from secrets.toml\n                \"location\": \"query\"\n            },\n            \"paginator\": { # pagination strategy for the OMDb API \n                \"type\": \"page_number\",\n                \"base_page\": 1,\n                \"total_path\": \"totalResults\",\n                \"maximum_page\": 5\n            }\n        },\n        \"resources\": [ # list of API endpoints to request\n            {\n                \"name\": \"movie_search\",\n                \"endpoint\": {\n                    \"path\": \"/\",\n                    \"params\": {\n                        \"s\": \"godzilla\",\n                        \"type\": \"movie\"\n                    }\n                }\n            }\n        ]\n    })\n\n\nif __name__ == \"__main__\":\n    # Create a pipeline object\n    pipeline = dlt.pipeline(\n        pipeline_name='movies_pipeline',\n        destination='lancedb', # this tells dlt to load the data into LanceDB\n        dataset_name='movies_data_pipeline',\n    )\n\n    # Run the pipeline\n    load_info = pipeline.run(movies_source)\n\n    # pretty print the information on data that was loaded\n    print(load_info)\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table\nDESCRIPTION: Creates a new table from pandas dataframe after dropping any existing table\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndb.drop_table(\"rick_and_morty\", ignore_missing=True)\ntable = db.create_table(\"rick_and_morty\", df)\ntable.head().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table Using RecordBatch Iterator\nDESCRIPTION: Demonstrates creating a LanceDB table using a PyArrow RecordBatch iterator, which is recommended for large datasets to process data in batches without loading everything into memory.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\n\ndef make_batches():\n    for i in range(5):\n        yield pa.RecordBatch.from_arrays(\n            [\n                pa.array([[3.1, 4.1], [5.9, 26.5]],\n                        pa.list_(pa.float32(), 2)),\n                pa.array([\"foo\", \"bar\"]),\n                pa.array([10.0, 20.0]),\n            ],\n            [\"vector\", \"item\", \"price\"],\n        )\n\nschema = pa.schema([\n    pa.field(\"vector\", pa.list_(pa.float32(), 2)),\n    pa.field(\"item\", pa.utf8()),\n    pa.field(\"price\", pa.float32()),\n])\n\ndb.create_table(\"table4\", make_batches(), schema=schema)\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in LanceDB\nDESCRIPTION: This snippet shows how to perform a vector search in LanceDB using the default query type. It demonstrates two equivalent ways to execute a vector search query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/1_query_types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable.search(quries[0], query_type=\"vector\").limit(5).to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\ntable.search(quries[0]).limit(5).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Registering Secrets in Embedding Configuration with TypeScript\nDESCRIPTION: Shows how to register an OpenAI API key as a secret variable in the embedding registry in TypeScript, ensuring sensitive data isn't stored in table metadata.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/variables_and_secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"lancedb\";\n\n// Set the API key as a variable in the embedding registry\nlancedb.embedding.setVar(\"OPENAI_API_KEY\", \"your-api-key\");\n\n// Reference the variable in the embedding configuration\nconst db = await lancedb.connect(\"/tmp/my-db\");\nconst table = await db.createTable(\"my_table\", [\n  { text: \"hello world\" },\n], {\n  embedding: {\n    function: \"openai\",\n    apiKey: \"$env:OPENAI_API_KEY\",  // Reference the variable\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Data in @lancedb/lancedb TypeScript\nDESCRIPTION: Example showing how to update rows in a LanceDB table using the new @lancedb/lancedb package in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\n\nconst db = await lancedb.connect(\"./.lancedb\");\n\nconst data = [\n    {x: 1, vector: [1, 2]},\n    {x: 2, vector: [3, 4]},\n    {x: 3, vector: [5, 6]},\n];\nconst tbl = await db.createTable(\"my_table\", data)\n\nawait tbl.update({vector: [10, 10]}, { where: \"x = 2\"})\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3-compatible stores with Python Sync API\nDESCRIPTION: Demonstrates how to connect LanceDB to S3-compatible stores like MinIO using the Python synchronous API. It specifies both region and endpoint in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"s3://bucket/path\",\n    storage_options={\n        \"region\": \"us-east-1\",\n        \"endpoint\": \"http://minio:9000\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Without Vector Search in Python\nDESCRIPTION: Demonstrates how to perform filtering operations without vector search functionality using both synchronous and asynchronous clients.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/sql.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous client\ntbl.search().where(\"id = 10\").limit(10).to_arrow()\n# Asynchronous client\nawait async_tbl.query().where(\"id = 10\").limit(10).to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Implementing To Arrow Method in TypeScript\nDESCRIPTION: Defines the toArrow method which collects the query results as an Arrow Table. It accepts optional QueryExecutionOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntoArrow(options?): Promise<Table<any>>\n```\n\n----------------------------------------\n\nTITLE: Filtering LanceDB Query with SQL-like Predicate in TypeScript\nDESCRIPTION: The 'where' method applies a filter to the query using an SQL-like predicate string. It supports simple comparisons and logical operators. The method returns the query instance for method chaining.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nwhere(predicate): this\n```\n\nLANGUAGE: typescript\nCODE:\n```\nx > 10\ny > 0 AND y < 100\nx > 5 OR y = 'test'\n\nFiltering performance can often be improved by creating a scalar index\non the filter column(s).\n```\n\n----------------------------------------\n\nTITLE: Loading Generated QA Embedding Datasets from JSON\nDESCRIPTION: Loads the previously saved training and validation datasets from their respective JSON files for use in the fine-tuning process.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Load again\ntrain_dataset = EmbeddingQAFinetuneDataset.from_json(\"train_dataset.json\")\n\nval_dataset = EmbeddingQAFinetuneDataset.from_json(\"val_dataset.json\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Statistics in LanceDB TypeScript\nDESCRIPTION: Retrieves statistics for a specified index. Returns undefined if the index doesn't exist.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nabstract indexStats(name): Promise<undefined | IndexStatistics>\n```\n\n----------------------------------------\n\nTITLE: Initializing Document Retriever with LanceDB\nDESCRIPTION: Sets up a document retriever using LangChain components. Loads web content, splits it into chunks, and creates a vector store using LanceDB with OpenAI embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/self_rag.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_community.vectorstores import LanceDB\nfrom langchain_openai import OpenAIEmbeddings\n\nurls = [\n    \"https://lilianweng.github.io/posts/2023-06-23-agent/\",\n    \"https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/\",\n    \"https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/\",\n]\n\n\ndocs = [WebBaseLoader(url).load() for url in urls]\ndocs_list = [item for sublist in docs for item in sublist]\n\ntext_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\n    chunk_size=100, chunk_overlap=50\n)\ndoc_splits = text_splitter.split_documents(docs_list)\n\n# add documents in LanceDB\nvectorstore = LanceDB.from_documents(\n    documents=doc_splits,\n    embedding=OpenAIEmbeddings(),\n)\nretriever = vectorstore.as_retriever()\n```\n\n----------------------------------------\n\nTITLE: Generate Embeddings Abstract Method\nDESCRIPTION: Abstract method that must be implemented by concrete classes to generate embeddings from text inputs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract generateEmbeddings(texts, ...args): Promise<number[][] | Float32Array[] | Float64Array[]>\n```\n\n----------------------------------------\n\nTITLE: Implementing createTable Method for LanceDB Connection in TypeScript\nDESCRIPTION: Defines multiple overloads of the createTable method to create new tables with various options, including data initialization and embedding functions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **createTable**\\<`T`\\>(`«destructured»`): `Promise`\\<[`Table`](Table.md)\\<`T`\\>\\>\n\n▸ **createTable**(`name`, `data`): `Promise`\\<[`Table`](Table.md)\\<`number`[]\\>\\>\n\n▸ **createTable**(`name`, `data`, `options`): `Promise`\\<[`Table`](Table.md)\\<`number`[]\\>\\>\n\n▸ **createTable**\\<`T`\\>(`name`, `data`, `embeddings`): `Promise`\\<[`Table`](Table.md)\\<`T`\\>\\>\n\n▸ **createTable**\\<`T`\\>(`name`, `data`, `embeddings`, `options`): `Promise`\\<[`Table`](Table.md)\\<`T`\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Applying Embedding Function to Data in LanceDB with Python\nDESCRIPTION: This code demonstrates how to apply an embedding function to raw data in a pandas DataFrame and create a LanceDB table with the generated embeddings. It uses the 'with_embeddings' function to process the data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/legacy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom lancedb.embeddings import with_embeddings\n\ndf = pd.DataFrame(\n    [\n        {\"text\": \"pepperoni\"},\n        {\"text\": \"pineapple\"}\n    ]\n)\ndata = with_embeddings(embed_func, df)\n\n# The output is used to create / append to a table\ntbl = db.create_table(\"my_table\", data=data)\n```\n\n----------------------------------------\n\nTITLE: Integrating Gemini Embeddings with LanceDB in Python\nDESCRIPTION: This code snippet demonstrates how to use Gemini embeddings with LanceDB to create a vector database for text data. It includes setting up a LanceModel, creating a table, adding data, and performing a vector search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/gemini_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport pandas as pd\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\n\nmodel = get_registry().get(\"gemini-text\").create()\n\nclass TextModel(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ndf = pd.DataFrame({\"text\": [\"hello world\", \"goodbye world\"]})\ndb = lancedb.connect(\"~/.lancedb\")\ntbl = db.create_table(\"test\", schema=TextModel, mode=\"overwrite\")\n\ntbl.add(df)\nrs = tbl.search(\"hello\").limit(1).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from PyArrow RecordBatch Iterator (Async API)\nDESCRIPTION: Shows the process of creating a LanceDB table using a PyArrow RecordBatch iterator for large datasets using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:make_batches\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_from_batch\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FLARE with Langchain and LanceDB\nDESCRIPTION: This code demonstrates how to set up a FLARE (Forward-Looking Active REtrieval) chain using Langchain and LanceDB as the vector store. The implementation creates a retriever from a LanceDB vector store and configures a FlareChain with parameters for maximum generation length and minimum probability threshold.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/advanced_techniques/flare.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.vectorstores import LanceDB\nfrom langchain.document_loaders import ArxivLoader\nfrom langchain.chains import FlareChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\n\nllm = OpenAI()\n\n# load dataset\n\n# LanceDB retriever\nvector_store = LanceDB.from_documents(doc_chunks, embeddings, connection=table)\nretriever = vector_store.as_retriever()\n\n# define flare chain\nflare = FlareChain.from_llm(llm=llm,retriever=vector_store_retriever,max_generation_len=300,min_prob=0.45)\n\nresult = flare.run(input_text)\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Column Selection in Python (Sync API)\nDESCRIPTION: Example of vector search with column projection using a select clause in the synchronous Python API. This allows retrieving only specific columns in the results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search_with_select\"\n```\n\n----------------------------------------\n\nTITLE: Generating QA Embedding Pairs with Llama-index in Python\nDESCRIPTION: This code uses Llama-index to load and parse a CSV dataset, then generates synthetic question-answer pairs for embedding model training. It processes both training and validation datasets using OpenAI's GPT-3.5-turbo model.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/3_embed_tuning.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.node_parser import SentenceSplitter\nfrom llama_index.readers.file import PagedCSVReader\nfrom llama_index.finetuning import generate_qa_embedding_pairs\nfrom llama_index.core.evaluation import EmbeddingQAFinetuneDataset\n\ndef load_corpus(file):\n    loader = PagedCSVReader(encoding=\"utf-8\")\n    docs = loader.load_data(file=Path(file))\n\n    parser = SentenceSplitter()\n    nodes = parser.get_nodes_from_documents(docs)\n\n    return nodes\n\nfrom llama_index.llms.openai import OpenAI\n\n\ntrain_dataset = generate_qa_embedding_pairs(\n    llm=OpenAI(model=\"gpt-3.5-turbo\"), nodes=train_nodes, verbose=False\n)\nval_dataset = generate_qa_embedding_pairs(\n    llm=OpenAI(model=\"gpt-3.5-turbo\"), nodes=val_nodes, verbose=False\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operations in LanceDB with Python (Async)\nDESCRIPTION: This code snippet demonstrates how to perform an upsert operation using the merge_insert API in LanceDB with Python's asynchronous interface. It updates existing rows and inserts new ones based on a matching key.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:upsert_basic_async\"\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Table in LanceDB with TypeScript\nDESCRIPTION: Creates a new empty table in LanceDB. It requires a name, schema, and optional creation options. Returns a Promise resolving to a Table object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createEmptyTable(\n   name,\n   schema,\n   options?): Promise<Table>\n```\n\n----------------------------------------\n\nTITLE: Multimodal Support Setup\nDESCRIPTION: Setting up multimodal support with OpenCLIP embeddings and image handling\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_experimental.open_clip import OpenCLIPEmbeddings\n\nvec_store = LanceDB(\n    table_name=\"multimodal_test\",\n    embedding=OpenCLIPEmbeddings(),\n)\n\nvec_store.add_images(uris=image_uris)\nvec_store.add_texts(texts)\n```\n\n----------------------------------------\n\nTITLE: Creating IVF_PQ Index in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates how to create an IVF_PQ vector index on a table using the modern @lancedb/lancedb TypeScript package. The example includes importing the library and ingesting data with index creation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n--8<--- \"nodejs/examples/ann_indexes.test.ts:import\"\n\n--8<-- \"nodejs/examples/ann_indexes.test.ts:ingest\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 Express with TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates connecting LanceDB to an S3 Express endpoint using the @lancedb/lancedb TypeScript package. It includes the s3Express option and uses a bucket name with the required suffix.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\n    \"s3://my-bucket--use1-az4--x-s3/path\",\n    {\n        storageOptions: {\n            region: \"us-east-1\",\n            s3Express: \"true\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating IVF_PQ Index in Rust\nDESCRIPTION: Demonstrates how to create an IVF_PQ vector index in Rust using the LanceDB Rust SDK. The code shows the table creation and index building process with the IvfPqIndexBuilder.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n--8<-- \"rust/lancedb/examples/ivf_pq.rs:create_index\"\n```\n\n----------------------------------------\n\nTITLE: Defining LocalTable Class in TypeScript\nDESCRIPTION: Defines the LocalTable class which implements the Table interface. It includes constructors, properties, and methods for managing a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LocalTable<T> implements Table<T> {\n  private _tbl: any;\n  private readonly _name: string;\n  private readonly _isElectron: boolean;\n  private readonly _embeddings?: EmbeddingFunction<T>;\n  private readonly _options: () => ConnectionOptions;\n\n  constructor(tbl: any, name: string, options: ConnectionOptions);\n  constructor(tbl: any, name: string, options: ConnectionOptions, embeddings: EmbeddingFunction<T>);\n  constructor(tbl: any, name: string, options: ConnectionOptions, embeddings?: EmbeddingFunction<T>) {\n    // Constructor implementation\n  }\n\n  // ... other methods and properties\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Column Selection in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates vector search with column projection using a select clause in the modern @lancedb/lancedb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/ann_indexes.test.ts:search3\"\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table with Sample Data\nDESCRIPTION: Initializes a LanceDB connection and creates a table with vector and scalar data\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/duckdb.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\ndb = lancedb.connect(\"data/sample-lancedb\")\ndata = [\n    {\"vector\": [3.1, 4.1], \"item\": \"foo\", \"price\": 10.0},\n    {\"vector\": [5.9, 26.5], \"item\": \"bar\", \"price\": 20.0}\n]\ntable = db.create_table(\"pd_table\", data=data)\n```\n\n----------------------------------------\n\nTITLE: Listing Versions of LanceDB Table in TypeScript\nDESCRIPTION: Returns a list of all versions of the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nabstract listVersions(): Promise<Version[]>\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning Embedding Model with SentenceTransformersFinetuneEngine in Python\nDESCRIPTION: This code demonstrates how to fine-tune a pre-trained embedding model (BGE-small) using Llama-index's SentenceTransformersFinetuneEngine. The model is trained on synthetic QA pairs and saved to a local directory for later use in retrieval tasks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/3_embed_tuning.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.finetuning import SentenceTransformersFinetuneEngine\n\nfinetune_engine = SentenceTransformersFinetuneEngine(\n    train_dataset,\n    model_id=\"BAAI/bge-small-en-v1.5\",\n    model_output_path=\"tuned_model\",\n    val_dataset=val_dataset,\n)\nfinetune_engine.finetune()\nembed_model = finetune_engine.get_finetuned_model()\n```\n\n----------------------------------------\n\nTITLE: Embedding Text Data with OpenAI in TypeScript\nDESCRIPTION: Method to create vector representations for an array of string data using OpenAI's embedding API. This function implements the embed method from the EmbeddingFunction interface and returns a promise of a 2D array of numbers.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/OpenAIEmbeddingFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **embed**(`data`): `Promise`\\<`number`[][]\\>\n\nCreates a vector representation for the given values.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `data` | `string`[] |\n\n#### Returns\n\n`Promise`\\<`number`[][]\\>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage using Python\nDESCRIPTION: Code examples for connecting to Google Cloud Storage using both sync and async Python APIs in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"gs://bucket/path\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\"gs://bucket/path\")\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table with Custom PyArrow Schema\nDESCRIPTION: Creates a LanceDB table with a custom PyArrow schema to control data types and structure. The schema defines vector as a list of float32 values with a fixed length.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\n\ncustom_schema = pa.schema([\npa.field(\"vector\", pa.list_(pa.float32(), 4)),\npa.field(\"lat\", pa.float32()),\npa.field(\"long\", pa.float32())\n])\n\ntable = db.create_table(\"table3\", data, schema=custom_schema, mode=\"overwrite\")\ntable.schema\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from Pandas DataFrame (Sync API)\nDESCRIPTION: This code demonstrates how to import Pandas and create a LanceDB table directly from a Pandas DataFrame using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-pandas\"\n--8<-- \"python/python/tests/docs/test_python.py:create_table_pandas\"\n```\n\n----------------------------------------\n\nTITLE: Updating Scalar Indices in Python\nDESCRIPTION: Shows how to update scalar indices after modifying table data by using the optimize method in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Add new data to the table\ntbl.add([{\"vector\": [7, 8], \"book_id\": 4}])\n\n# Update the scalar index to include the new data\ntbl.optimize()\n```\n\n----------------------------------------\n\nTITLE: Reading and parsing transcript data in JavaScript\nDESCRIPTION: Code to read the downloaded transcript file, parse JSON lines, and create context by merging text chunks using the contextualize function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lines = (await fs.readFile(INPUT_FILE_NAME, 'utf-8'))\n  .toString()\n  .split('\\n')\n  .filter(line => line.length > 0)\n  .map(line => JSON.parse(line))\n\nconst data = contextualize(lines, 20, 'video_id')\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Indices in Python\nDESCRIPTION: Demonstrates how to create different types of scalar indices (BTREE and BITMAP) in a LanceDB table using the Python API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.index import ScalarIndex, BitmapIndex, BTreeIndex\n\n# Connect to a database\ndb = lancedb.connect(\"data\")\n\n# Open an existing table\ntbl = db.open_table(\"my_vectors\")\n\n# Create a BTREE index on the 'book_id' column\ntbl.create_index(\"book_id\", index_type=BTreeIndex())\n\n# Create a BITMAP index on the 'publisher' column\ntbl.create_index(\"publisher\", index_type=BitmapIndex())\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Existing Index\nDESCRIPTION: Demonstrate how to add new data to an existing index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nnodes = [node.node for node in response]\n\ndel index\n\nindex = VectorStoreIndex.from_documents(\n    [Document(text=\"The sky is purple in Portland, Maine\")],\n    uri=\"/tmp/new_dataset\",\n)\n\nindex.insert_nodes(nodes)\n```\n\n----------------------------------------\n\nTITLE: Using Async Connection in LanceDB\nDESCRIPTION: Implementation of the new Connection class with async close method and context manager support. The close method eagerly frees resources, particularly HTTP connections for remote connections. Connection closure is optional as resources are freed during garbage collection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/ASYNC_MIGRATION.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with connection:\n    # connection will be automatically closed\n    pass\n\n# or manually\nawait connection.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table with Pydantic Schema (Async API)\nDESCRIPTION: Shows the process of creating an empty LanceDB table using a Pydantic schema with the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb-pydantic\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-Item\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_empty_table_async_pydantic\"\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a LanceDB Table (TypeScript)\nDESCRIPTION: Shows how to add more data to an existing table in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.add([\n  { vector: [1.1, 2.3, 3.5], item: \"more data\", price: 20.5 },\n  { vector: [2.5, 1.2, 4.9], item: \"even more\", price: 100 },\n]);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.add([\n  { vector: [1.1, 2.3, 3.5], item: \"more data\", price: 20.5 },\n  { vector: [2.5, 1.2, 4.9], item: \"even more\", price: 100 },\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up LanceDB and Calculating Embeddings\nDESCRIPTION: Python script to initialize LanceDB, process images using CLIP, and store their embeddings\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport cv2\nimport supervision as sv\nimport requests\n\nimport lancedb\n\ndb = lancedb.connect(\"./embeddings\")\n\nIMAGE_DIR = \"images/\"\nAPI_KEY = os.environ.get(\"ROBOFLOW_API_KEY\")\nSERVER_URL = \"http://localhost:9001\"\n\nresults = []\n\nfor i, image in enumerate(os.listdir(IMAGE_DIR)):\n    infer_clip_payload = {\n        #Images can be provided as urls or as base64 encoded strings\n        \"image\": {\n            \"type\": \"base64\",\n            \"value\": base64.b64encode(open(IMAGE_DIR + image, \"rb\").read()).decode(\"utf-8\"),\n        },\n    }\n\n    res = requests.post(\n        f\"{SERVER_URL}/clip/embed_image?api_key={API_KEY}\",\n        json=infer_clip_payload,\n    )\n\n    embeddings = res.json()['embeddings']\n\n    print(\"Calculated embedding for image: \", image)\n\n    image = {\"vector\": embeddings[0], \"name\": os.path.join(IMAGE_DIR, image)}\n\n    results.append(image)\n\ntbl = db.create_table(\"images\", data=results)\n\ntbl.create_fts_index(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from a LanceDB Table (Python)\nDESCRIPTION: Shows how to delete rows from a table in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ntbl.delete(\"item = 'more data'\")\n```\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.delete(\"item = 'more data'\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Custom Reranker in Python\nDESCRIPTION: Example implementation of a custom reranker by subclassing the Reranker class. Shows implementation of rerank_hybrid(), rerank_vector(), and rerank_fts() methods with basic structure for processing vector and full-text search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/custom_reranker.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import Reranker\nimport pyarrow as pa\n\nclass MyReranker(Reranker):\n    def __init__(self, param1, param2, ..., return_score=\"relevance\"):\n        super().__init__(return_score)\n        self.param1 = param1\n        self.param2 = param2\n\n    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table):\n        # Use the built-in merging function\n        combined_result = self.merge_results(vector_results, fts_results)\n\n        # Do something with the combined results\n        # ...\n\n        # Return the combined results\n        return combined_result\n\n    def rerank_vector(self, query: str, vector_results: pa.Table):\n        # Do something with the vector results\n        # ...\n\n        # Return the vector results\n        return vector_results\n\n    def rerank_fts(self, query: str, fts_results: pa.Table):\n        # Do something with the FTS results\n        # ...\n\n        # Return the FTS results\n        return fts_results\n```\n\n----------------------------------------\n\nTITLE: Updating Scalar Indices in Rust\nDESCRIPTION: Demonstrates how to add new data to a LanceDB table and update scalar indices using the optimize method in Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet more_data: Box<dyn RecordBatchReader + Send> = create_some_records()?;\ntbl.add(more_data).execute().await?;\ntbl.optimize(OptimizeAction::All).execute().await?;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Query Filters\nDESCRIPTION: Define metadata filters for querying the index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.vector_stores import (\n    MetadataFilters,\n    FilterOperator,\n    FilterCondition,\n    MetadataFilter,\n)\n\nfrom datetime import datetime\n\n\nquery_filters = MetadataFilters(\n    filters=[\n        MetadataFilter(\n            key=\"creation_date\",\n            operator=FilterOperator.EQ,\n            value=datetime.now().strftime(\"%Y-%m-%d\"),\n        ),\n        MetadataFilter(\n            key=\"file_size\", value=75040, operator=FilterOperator.GT\n        ),\n    ],\n    condition=FilterCondition.AND,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Fine-tuning Embedding Models\nDESCRIPTION: Installs all necessary Python packages for fine-tuning embedding models, including LlamaIndex components, OpenAI integrations, and LanceDB vector store dependencies.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install llama-index-llms-openai llama-index-embeddings-openai llama-index-finetuning llama-index-readers-file scikit-learn llama-index-embeddings-huggingface llama-index-vector-stores-lancedb pyarrow==12.0.1 -qq\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table with Nested Schema (Async API)\nDESCRIPTION: Demonstrates the creation of a LanceDB table with a nested schema using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_nested_schema\"\n```\n\n----------------------------------------\n\nTITLE: Filtering with MetadataFilters in LanceDB and Llama-Index\nDESCRIPTION: Demonstrates how to use the MetadataFilters class from Llama-Index to create structured metadata filters for LanceDB queries. This example shows filters with equality and greater-than operators combined with an AND condition.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/llamaIndex.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core.vector_stores import (\n    MetadataFilters,\n    FilterOperator,\n    FilterCondition,\n    MetadataFilter,\n)\n\nquery_filters = MetadataFilters(\n    filters=[\n        MetadataFilter(\n            key=\"creation_date\", operator=FilterOperator.EQ, value=\"2024-05-23\"\n        ),\n        MetadataFilter(\n            key=\"file_size\", value=75040, operator=FilterOperator.GT\n        ),\n    ],\n    condition=FilterCondition.AND,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Text Search Index in TypeScript\nDESCRIPTION: Creates a full text search index for string columns, enabling full text searches with results ordered by relevance using BM25. It can be combined with filters and accepts optional FtsOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fts(options?): Index\n```\n\n----------------------------------------\n\nTITLE: Downloading and Creating a LanceDB Table from SIFT Dataset\nDESCRIPTION: This snippet shows how to download a Lance-format SIFT dataset, convert it to a pandas DataFrame, and create a LanceDB table from it. This is the initial setup for storing vector data that will later be moved to S3.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_lancedb_with_s3_and_lambda.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lance\nsift_dataset = lance.dataset(\"/path/to/local/vec_data.lance\")\ndf = sift_dataset.to_table().to_pandas()\n\nimport lancedb\ndb = lancedb.connect(\".\")\ntable = db.create_table(\"vector_example\", df)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Custom PyArrow Schema\nDESCRIPTION: Demonstrates creating tables with a custom PyArrow schema to have more control over how data is stored, particularly for vector columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_custom_schema\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_custom_schema\"\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Pydantic Model\nDESCRIPTION: Shows how to create a LanceDB table using a Pydantic model to define the schema. The model includes a vector field and metadata fields with a computed property.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.pydantic import Vector, LanceModel\n\nclass Content(LanceModel):\n    movie_id: int\n    vector: Vector(128)\n    genres: str\n    title: str\n    imdb_id: int\n        \n    @property\n    def imdb_url(self) -> str:\n        return f\"https://www.imdb.com/title/tt{self.imdb_id}\"\n\nimport pyarrow as pa\ndb = lancedb.connect(\"~/.lancedb\")\ntable_name = \"movielens_small\"\ntable = db.create_table(table_name, schema=Content)\ntable.schema\n```\n\n----------------------------------------\n\nTITLE: Updating Scalar Indices in Python (Async)\nDESCRIPTION: Demonstrates how to update scalar indices asynchronously after adding new data to a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Add new data to the table asynchronously\nawait tbl.add([{\"vector\": [7, 8], \"book_id\": 4}])\n\n# Update the scalar index to include the new data asynchronously\nawait tbl.optimize()\n```\n\n----------------------------------------\n\nTITLE: Setting Device Parameters with Runtime Variables in Python\nDESCRIPTION: Demonstrates how to dynamically set the device parameter for embedding functions based on GPU availability at runtime, with a fallback to CPU if necessary.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/variables_and_secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport torch\n\n# Check if a GPU is available and set the device variable accordingly\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nlancedb.embedding.set_var(\"DEVICE\", device)\n\n# Reference the variable in the embedding configuration\ndb = lancedb.connect(\"/tmp/my-db\")\ntable = db.create_table(\n    \"my_table\",\n    data=[{\"text\": \"hello world\"}],\n    embedding={\n        \"function\": \"sentence-transformers\",\n        \"device\": \"$env:DEVICE:cpu\",  # Fallback to \"cpu\" if the variable isn't set\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Full-text Search Results in LanceDB\nDESCRIPTION: Example showing how to pre-sort documents and specify ordering when searching with full-text search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable.create_fts_index([\"content\"], use_tantivy=True, ordering_field_names=[\"id\"], replace=True)\n\n(table.search(\"puppy\", ordering_field_name=\"id\")\n .limit(20)\n .to_list())\n```\n\n----------------------------------------\n\nTITLE: Registering Secrets in Embedding Configuration with Python\nDESCRIPTION: Demonstrates how to register an OpenAI API key as a secret variable in the embedding registry in Python, avoiding hardcoded sensitive data in table metadata.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/variables_and_secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\n# Set the API key as a variable in the embedding registry\nlancedb.embedding.set_var(\"OPENAI_API_KEY\", \"your-api-key\")\n\n# Reference the variable in the embedding configuration\ndb = lancedb.connect(\"/tmp/my-db\")\ntable = db.create_table(\n    \"my_table\",\n    data=[{\"text\": \"hello world\"}],\n    embedding={\n        \"function\": \"openai\",\n        \"api_key\": \"$env:OPENAI_API_KEY\",  # Reference the variable\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Binary Vector Search Implementation\nDESCRIPTION: Implementation of binary vector search using hamming distance metric.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_binary_vector.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_binary_vector.py:sync_binary_vector\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Distance Metric Type in TypeScript\nDESCRIPTION: Defines the distance metric type for vector similarity calculations. Supports L2 (Euclidean), cosine, and dot product distance metrics with different characteristics and ranges.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional distanceType: \"l2\" | \"cosine\" | \"dot\";\n```\n\n----------------------------------------\n\nTITLE: Enhanced Cohere Reranker with Filtering\nDESCRIPTION: Implementation of a modified Cohere Reranker that adds filtering capabilities. Extends CohereReranker to filter results based on text content while preserving the original reranking functionality.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/custom_reranker.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union\nimport pandas as pd\nfrom lancedb.rerankers import CohereReranker\n\nclass ModifiedCohereReranker(CohereReranker):\n    def __init__(self, filters: Union[str, List[str]], **kwargs):\n        super().__init__(**kwargs)\n        filters = filters if isinstance(filters, list) else [filters]\n        self.filters = filters\n\n    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table)-> pa.Table:\n        combined_result = super().rerank_hybrid(query, vector_results, fts_results)\n        df = combined_result.to_pandas()\n        for filter in self.filters:\n            df = df.query(\"not text.str.contains(@filter)\")\n\n        return pa.Table.from_pandas(df)\n\n    def rerank_vector(self, query: str, vector_results: pa.Table)-> pa.Table:\n        vector_results = super().rerank_vector(query, vector_results)\n        df = vector_results.to_pandas()\n        for filter in self.filters:\n            df = df.query(\"not text.str.contains(@filter)\")\n\n        return pa.Table.from_pandas(df)\n\n    def rerank_fts(self, query: str, fts_results: pa.Table)-> pa.Table:\n        fts_results = super().rerank_fts(query, fts_results)\n        df = fts_results.to_pandas()\n        for filter in self.filters:\n            df = df.query(\"not text.str.contains(@filter)\")\n\n        return pa.Table.from_pandas(df)\n```\n\n----------------------------------------\n\nTITLE: Updating Table Values Using SQL Expression - Python\nDESCRIPTION: Demonstrates how to update table values using SQL expressions through synchronous and asynchronous APIs in Python\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:update_table_sql\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:update_table_sql_async\"\n```\n\n----------------------------------------\n\nTITLE: Performing Max Marginal Relevance Search in Python\nDESCRIPTION: This snippet shows how to use the max_marginal_relevance_search() method to find diverse documents similar to a query string. It also demonstrates the use of max_marginal_relevance_search_by_vector() which takes an embedding vector instead of a string query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = docsearch.max_marginal_relevance_search(\n        query=\"text\"\n    )\nresult_texts = [doc.page_content for doc in result]\nprint(result_texts)\n\n## search by vector :\nresult = docsearch.max_marginal_relevance_search_by_vector(\n        embeddings.embed_query(\"text\")\n    )\nresult_texts = [doc.page_content for doc in result]\nprint(result_texts)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage using TypeScript\nDESCRIPTION: Code examples for connecting to Azure Blob Storage using TypeScript with both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"az://bucket/path\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\"az://bucket/path\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a LanceDB Table with Ollama Embeddings\nDESCRIPTION: This snippet shows the complete process of connecting to LanceDB, configuring Ollama embeddings, creating a schema with vector fields, adding data, and performing a similarity search. It uses the nomic-embed-text model as the default embedding model and demonstrates a simple search workflow.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/ollama_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndb = lancedb.connect(\"/tmp/db\")\nfunc = get_registry().get(\"ollama\").create(name=\"nomic-embed-text\")\n\nclass Words(LanceModel):\n    text: str = func.SourceField()\n    vector: Vector(func.ndims()) = func.VectorField()\n\ntable = db.create_table(\"words\", schema=Words, mode=\"overwrite\")\ntable.add([\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n])\n\nquery = \"greetings\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Creating an IVF Flat Index in TypeScript\nDESCRIPTION: Creates an IVF Flat index that groups vectors into partitions of similar vectors. It's useful for vector similarity search but can be slow and memory-intensive for large datasets. Accepts optional IvfFlatOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ivfFlat(options?): Index\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Pre-filtering in Rust\nDESCRIPTION: Demonstrates how to apply a filter condition to full-text search results in Rust using the 'only_if' method to filter before performing the search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\ntable\n    .query()\n    .full_text_search(FullTextSearchQuery::new(\"puppy\".to_owned()))\n    .select(lancedb::query::Select::Columns(vec![\"doc\".to_owned()]))\n    .limit(10)\n    .only_if(\"meta='foo'\")\n    .execute()\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Basic DuckDB Query on LanceDB Table\nDESCRIPTION: Demonstrates converting LanceDB table to Arrow format and executing a SELECT query using DuckDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/duckdb.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport duckdb\n\narrow_table = table.to_lance()\n\nduckdb.query(\"SELECT * FROM arrow_table\")\n```\n\n----------------------------------------\n\nTITLE: Using Huggingface Models with LanceDB for Vector Search\nDESCRIPTION: This example demonstrates how to use a Huggingface embedding model with LanceDB. It shows the process of initializing a model, defining a schema with vector embeddings, adding data to a table, and performing a semantic search query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/huggingface_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport pandas as pd\n\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\n\nmodel = get_registry().get(\"huggingface\").create(name='facebook/bart-base')\n\nclass Words(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ndf = pd.DataFrame({\"text\": [\"hi hello sayonara\", \"goodbye world\"]})\ntable = db.create_table(\"greets\", schema=Words)\ntable.add(df)\nquery = \"old greeting\"\nactual = table.search(query).limit(1).to_pydantic(Words)[0]\nprint(actual.text)\n```\n\n----------------------------------------\n\nTITLE: Implementing AnswersDotAI Rerankers with LanceDB for Vector, FTS, and Hybrid Search\nDESCRIPTION: This code demonstrates how to set up and use AnswersDotAI rerankers with LanceDB. It shows the process of creating a database, defining a schema with embedding vectors, adding data, and performing searches with reranking. The example covers vector search, FTS search, and hybrid search approaches.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/answerdotai.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import AnswerdotaiRerankers\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = AnswerdotaiRerankers()\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing CohereReranker for Search Results in Python\nDESCRIPTION: This code snippet shows how to use the CohereReranker to rerank search results. It requires the 'cohere' package to be installed and a COHERE_API_KEY to be set in the environment. The example uses the 'rerank-english-v3.0' model.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/2_reranking.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import CohereReranker\n\n# use Cohere reranker v3\nreranker = CohereReranker(model_name=\"rerank-english-v3.0\") # default model is \"rerank-english-v2.0\"\n```\n\n----------------------------------------\n\nTITLE: Generating QA Embedding Pairs for Training and Validation\nDESCRIPTION: Uses OpenAI's GPT-3.5-turbo to generate question-answer pairs from the text nodes for both training and validation datasets. Saves the generated datasets as JSON files.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.llms.openai import OpenAI\n\n\ntrain_dataset = generate_qa_embedding_pairs(\n    llm=OpenAI(model=\"gpt-3.5-turbo\"), nodes=train_nodes, verbose=False\n)\nval_dataset = generate_qa_embedding_pairs(\n    llm=OpenAI(model=\"gpt-3.5-turbo\"), nodes=val_nodes, verbose=False\n)\n\ntrain_dataset.save_json(\"train_dataset.json\")\nval_dataset.save_json(\"val_dataset.json\")\n```\n\n----------------------------------------\n\nTITLE: Implementing execute Method in TypeScript\nDESCRIPTION: Defines the protected execute method which executes the query and returns the results as a RecordBatchIterator. It supports options for query execution and applies backpressure for large result sets.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprotected execute(options?): RecordBatchIterator\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI client for completions\nDESCRIPTION: Code to initialize the OpenAI client with API key configuration for generating responses to user queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst configuration = new Configuration({ apiKey })\nconst openai = new OpenAIApi(configuration)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Hybrid Search with CrossEncoderReranker in LanceDB\nDESCRIPTION: This code evaluates the performance of hybrid search using CrossEncoderReranker in LanceDB, which utilizes a more sophisticated reranking approach.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import JinaReranker, CrossEncoderReranker, CohereReranker\n\nreranker = CrossEncoderReranker()\nhit_rate_hybrid = hit_rate(data, tbl, \"hybrid\", reranker=reranker)\nprint(f\" \\n Hybrid Search with CrossEncoderReranker Hit Rate: {hit_rate_hybrid}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vector and Scalar Indices in LanceDB\nDESCRIPTION: Demonstrates how to create different types of indices in LanceDB. Vector indices improve search performance for vector similarity queries, while scalar indices help with filtering on non-vector columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# for creating vector index\nvector_store.create_index(vector_col='vector', metric = 'cosine')\n\n# for creating scalar index(for non-vector columns)\nvector_store.create_index(col_name='text')\n```\n\n----------------------------------------\n\nTITLE: Updating Matched Rows in MergeInsertBuilder\nDESCRIPTION: Configures the merge operation to update all matched rows. An optional condition can be specified to limit which matched rows are updated.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MergeInsertBuilder.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwhenMatchedUpdateAll(options?): MergeInsertBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Knowledge Base with Ollama Embedder in LanceDB\nDESCRIPTION: Initializes a TextKnowledgeBase using LanceDB with Ollama embeddings for storing and querying text documents. Uses the nomic-embed-text model with 768 dimensions for embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create knowledge Base with OllamaEmbedder in LanceDB\nknowledge_base = TextKnowledgeBase(\n    path=\"transcript.txt\",\n    vector_db=LanceDb(\n        embedder=OllamaEmbedder(model=\"nomic-embed-text\",dimensions=768),\n        table_name=\"transcript_documents\",\n        uri=\"./t2mp/.lancedb\",\n    ),\n    num_documents = 10\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an IVF-PQ Index in TypeScript\nDESCRIPTION: Creates an IVF-PQ index that stores compressed copies of vectors grouped into partitions. It offers a trade-off between index size, search speed, and accuracy. Training on large datasets can be slow and memory-intensive. Accepts optional IvfPqOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic ivfPq(options?): Index\n```\n\n----------------------------------------\n\nTITLE: Async Basic Full-Text Search Implementation in Python\nDESCRIPTION: Demonstrates the asynchronous API for creating a LanceDB table, creating a full-text search index, and performing keyword searches. This allows for non-blocking operations in asynchronous applications.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.indexes.fts import FullTextSearchIndex\n\nuri = \"data/sample-lancedb\"\ndb = await lancedb.connect_async(uri)\n\ndata = [\n    {\"vector\": [3.1, 4.1], \"text\": \"Frodo was a happy puppy\"},\n    {\"vector\": [5.9, 26.5], \"text\": \"There are several kittens playing\"},\n]\ntbl = await db.create_table(\"my_table\", data=data, mode=\"overwrite\")\nawait tbl.create_index(\"text\", FullTextSearchIndex(use_tantivy=False))\n\nresult = await tbl.search(\"puppy\", query_type=\"fts\").select([\"text\"]).limit(10).to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Internal Table Creation Implementation in LanceDB\nDESCRIPTION: This is a private implementation method for table creation that handles the actual creation logic. It accepts structured parameters for table name, data, schema, embedding function and write options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n▸ `Private` **createTableImpl**\\<`T`\\>(`«destructured»`): `Promise`\\<[`Table`](../interfaces/Table.md)\\<`T`\\>\\>\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `«destructured»` | `Object` |\n| › `data?` | `Table`\\<`any`\\> \\| `Record`\\<`string`, `unknown`\\>[] |\n| › `embeddingFunction?` | [`EmbeddingFunction`](../interfaces/EmbeddingFunction.md)\\<`T`\\> |\n| › `name` | `string` |\n| › `schema?` | `Schema`\\<`any`\\> |\n| › `writeOptions?` | [`WriteOptions`](../interfaces/WriteOptions.md) |\n```\n\n----------------------------------------\n\nTITLE: Implementing VoyageAI Embeddings with LanceDB in Python\nDESCRIPTION: Example of using VoyageAI embeddings with LanceDB to create and populate a table with vector embeddings. The code demonstrates setting up the embedding function, defining a schema model, and adding data to a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/voyageai_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    import lancedb\n    from lancedb.pydantic import LanceModel, Vector\n    from lancedb.embeddings import EmbeddingFunctionRegistry\n\n    voyageai = EmbeddingFunctionRegistry\n        .get_instance()\n        .get(\"voyageai\")\n        .create(name=\"voyage-3\")\n\n    class TextModel(LanceModel):\n        text: str = voyageai.SourceField()\n        vector: Vector(voyageai.ndims()) =  voyageai.VectorField()\n\n    data = [ { \"text\": \"hello world\" },\n            { \"text\": \"goodbye world\" }]\n\n    db = lancedb.connect(\"~/.lancedb\")\n    tbl = db.create_table(\"test\", schema=TextModel, mode=\"overwrite\")\n\n    tbl.add(data)\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a LanceDB Table Using an Iterator\nDESCRIPTION: Demonstrates adding a large dataset to an existing LanceDB table using an iterator of dictionaries, which processes data in batches.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef make_batches():\n    for i in range(5):\n        yield [\n                  {\"vector\": [3.1, 4.1], \"item\": \"foo\", \"price\": 10.0},\n                  {\"vector\": [1, 1], \"item\": \"bar\", \"price\": 20.0},\n              ]\ntbl.add(make_batches())\n```\n\n----------------------------------------\n\nTITLE: Using Language-specific Tokenization in LanceDB FTS\nDESCRIPTION: Example of creating a full-text search index with language-specific tokenization using English stemming.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable.create_fts_index(\"content\", use_tantivy=True, tokenizer_name=\"en_stem\", replace=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing tableNames Method for LanceDB Connection in TypeScript\nDESCRIPTION: Defines the tableNames method to retrieve a list of all table names in the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **tableNames**(): `Promise`\\<`string`[]\\>\n```\n\n----------------------------------------\n\nTITLE: Using the EmbeddingFunctionRegistry in TypeScript\nDESCRIPTION: Example showing how to use the getRegistry function to access the global registry instance and retrieve a specific embedding function implementation (OpenAI in this case).\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/functions/getRegistry.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst registry = getRegistry();\nconst openai = registry.get(\"openai\").create();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bedrock Text Embeddings with LanceDB\nDESCRIPTION: Complete example showing how to use AWS Bedrock text embeddings with LanceDB, including model setup, schema definition, and vector search implementation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/aws_bedrock_embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\nimport pandas as pd\n\nmodel = get_registry().get(\"bedrock-text\").create()\n\nclass TextModel(LanceModel):\n    text: str = model.SourceField()\n    vector: Vector(model.ndims()) = model.VectorField()\n\ndf = pd.DataFrame({\"text\": [\"hello world\", \"goodbye world\"]})\ndb = lancedb.connect(\"tmp_path\")\ntbl = db.create_table(\"test\", schema=TextModel, mode=\"overwrite\")\n\ntbl.add(df)\nrs = tbl.search(\"hello\").limit(1).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Creating FTS Index with Position Information for Phrase Queries in Python\nDESCRIPTION: Configures a full-text search index to store position information, enabling phrase queries. This increases index size but allows for more precise matching of multi-word phrases in exact order.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntbl.create_index(\"text\", FullTextSearchIndex(\n    with_position=True,\n    use_tantivy=False\n))\n```\n\n----------------------------------------\n\nTITLE: Creating IVF_PQ Index in Python (Async API)\nDESCRIPTION: Shows how to create an IVF_PQ vector index on a table using LanceDB's asynchronous Python API. The example includes imports and the async implementation of the index creation method.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_index.py:import-numpy\"\n--8<-- \"python/python/tests/docs/test_guide_index.py:import-lancedb-ivfpq\"\n--8<-- \"python/python/tests/docs/test_guide_index.py:create_ann_index_async\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage using Python\nDESCRIPTION: Code examples for connecting to Azure Blob Storage using both sync and async Python APIs in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"az://bucket/path\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\"az://bucket/path\")\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB with TransformersJS\nDESCRIPTION: Sets up the necessary imports and initializes the transformer model pipeline. This creates a pipeline using the all-MiniLM-L6-v2 model for feature extraction, which will be used to generate vector embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lancedb = require('vectordb')\nconst { pipeline } = await import('@xenova/transformers')\nconst pipe = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n```\n\n----------------------------------------\n\nTITLE: Initializing the Sentence Transformer Fine-tuning Engine\nDESCRIPTION: Sets up the fine-tuning engine for a sentence transformer model (BGE-small-en-v1.5) with the prepared training and validation datasets. Handles GPU detection for optimal training performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nfrom llama_index.finetuning import SentenceTransformersFinetuneEngine\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nfinetune_engine = SentenceTransformersFinetuneEngine(\n    train_dataset,\n    model_id=\"BAAI/bge-small-en-v1.5\",\n    model_output_path=\"tuned_model\",\n    val_dataset=val_dataset,\n    device=device\n)\n```\n\n----------------------------------------\n\nTITLE: Updating LanceDB Table Records with Condition in TypeScript\nDESCRIPTION: Demonstrates how to update existing records in a LanceDB table by specifying a condition and new values for specific columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntable.update({where:\"x = 2\", values:{\"vector\": [10, 10]}})\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in TypeScript\nDESCRIPTION: Demonstrates how to connect to a LanceDB database in TypeScript using the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nimport * as arrow from \"apache-arrow\";\n\n--8<-- \"nodejs/examples/basic.test.ts:connect\"\n```\n\n----------------------------------------\n\nTITLE: Constructing MatchQuery in TypeScript\nDESCRIPTION: Creates a new instance of MatchQuery with specified query text, column name, and optional parameters. The constructor allows setting boost factor, fuzziness level, and maximum expansions for the query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MatchQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MatchQuery(\n   query,\n   column,\n   options?): MatchQuery\n```\n\n----------------------------------------\n\nTITLE: Performing Image Search with ImageBind\nDESCRIPTION: Executes an image-based search query using ImageBind embeddings to find similar entries in the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/imagebind_embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery_image = \"./assets/dog_image2.jpg\" #download an image and enter that path here\nactual = table.search(query_image).limit(1).to_pydantic(ImageBindModel)[0]\nprint(actual.text == \"dog\")\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filtering in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates vector search with additional filtering criteria using a where clause in the modern @lancedb/lancedb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/ann_indexes.test.ts:search2\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere Embeddings with LanceDB in Python\nDESCRIPTION: Demonstrates how to integrate Cohere embeddings with LanceDB, including table creation, model definition, and data insertion. Requires cohere package installation and COHERE_API_KEY environment variable. Uses the embed-multilingual-v2.0 model for text embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/cohere_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import EmbeddingFunctionRegistry\n\ncohere = EmbeddingFunctionRegistry\n    .get_instance()\n    .get(\"cohere\")\n    .create(name=\"embed-multilingual-v2.0\")\n\nclass TextModel(LanceModel):\n    text: str = cohere.SourceField()\n    vector: Vector(cohere.ndims()) =  cohere.VectorField()\n\ndata = [ { \"text\": \"hello world\" },\n        { \"text\": \"goodbye world\" }]\n\ndb = lancedb.connect(\"~/.lancedb\")\ntbl = db.create_table(\"test\", schema=TextModel, mode=\"overwrite\")\n\ntbl.add(data)\n```\n\n----------------------------------------\n\nTITLE: Creating an ANN Index in LanceDB (TypeScript)\nDESCRIPTION: Shows how to create an Approximate Nearest Neighbor (ANN) index in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.createIndex({\n  numPartitions: 4,\n  numSubVectors: 4,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.createIndex({\n  numPartitions: 256,\n  numSubVectors: 96,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableQuery Interface in TypeScript for LanceDB\nDESCRIPTION: This code snippet defines the ExecutableQuery interface, which includes methods for executing queries, fetching results, and retrieving the query plan in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ExecutableQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExecutableQuery {\n    /**\n     * Execute the query and return the results\n     */\n    execute(): Promise<Array<Record<string, unknown>>>\n\n    /**\n     * Execute the query and return a stream of results\n     */\n    stream(): AsyncIterable<Record<string, unknown>>\n\n    /**\n     * Get the query plan\n     */\n    explain(): Promise<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Images to LanceDB\nDESCRIPTION: Python code showing how to add more images to an existing LanceDB table using batches\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef make_batches():\n    for i in range(5):\n        yield [\n                {\"vector\": [3.1, 4.1], \"name\": \"image1.png\"},\n                {\"vector\": [5.9, 26.5], \"name\": \"image2.png\"}\n            ]\n\ntbl = db.open_table(\"images\")\ntbl.add(make_batches())\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Instructor Embeddings with LanceDB\nDESCRIPTION: This code demonstrates how to initialize an Instructor embedding function with custom instructions, define a schema with vector fields, create a LanceDB table, and add text documents with automatically generated embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/instructor_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry, InstuctorEmbeddingFunction\n\ninstructor = get_registry().get(\"instructor\").create(\n                            source_instruction=\"represent the docuement for retreival\",\n                            query_instruction=\"represent the document for retreiving the most similar documents\"\n                            )\n\nclass Schema(LanceModel):\n    vector: Vector(instructor.ndims()) = instructor.VectorField()\n    text: str = instructor.SourceField()\n\ndb = lancedb.connect(\"~/.lancedb\")\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\n\ntexts = [{\"text\": \"Capitalism has been dominant in the Western world since the end of feudalism, but most feel[who?] that...\"},\n        {\"text\": \"The disparate impact theory is especially controversial under the Fair Housing Act because the Act...\"},\n        {\"text\": \"Disparate impact in United States labor law refers to practices in employment, housing, and other areas that..\"}]\n\ntbl.add(texts)\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Embedding Function in Rust\nDESCRIPTION: This snippet demonstrates how to use the OpenAI embedding function in Rust to create vector embeddings for text data in a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/index.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n--8<--- \"rust/lancedb/examples/openai.rs:imports\"\n--8<--- \"rust/lancedb/examples/openai.rs:openai_embeddings\"\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from PyArrow RecordBatch Iterator (Async API)\nDESCRIPTION: This snippet shows how to create a LanceDB table from an iterator of PyArrow RecordBatches, useful for larger-than-memory datasets, using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-iterable\"\n--8<-- \"python/python/tests/docs/test_python.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_python.py:make_batches\"\n--8<-- \"python/python/tests/docs/test_python.py:create_table_iterable_async\"\n```\n\n----------------------------------------\n\nTITLE: Defining Corpus Loading Function for Text Nodes\nDESCRIPTION: Creates a function to load the corpus as LlamaIndex text nodes, which splits the documents into sentences for better retrieval. Uses PagedCSVReader and SentenceSplitter to process the documents.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom llama_index.core.node_parser import SentenceSplitter\nfrom llama_index.readers.file import PagedCSVReader\n\ndef load_corpus(file, verbose=False):\n    if verbose:\n        print(f\"Loading files {file}...\")\n\n    loader = PagedCSVReader(encoding=\"utf-8\")\n    docs = loader.load_data(file=Path(file))\n\n    if verbose:\n        print(f\"Loaded {len(docs)} docs\")\n\n    parser = SentenceSplitter()\n    nodes = parser.get_nodes_from_documents(docs, show_progress=verbose)\n\n    if verbose:\n        print(f\"Parsed {len(nodes)} nodes\")\n\n    return nodes\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with Credentials in Python (Async API)\nDESCRIPTION: Shows how to connect to an S3 bucket using LanceDB's asynchronous Python API with explicit AWS credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"s3://bucket/path\",\n    storage_options={\n        \"aws_access_key_id\": \"my-access-key\",\n        \"aws_secret_access_key\": \"my-secret-key\",\n        \"aws_session_token\": \"my-session-token\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-modal OpenClip Embedding Function in Python for LanceDB\nDESCRIPTION: This code snippet defines the OpenClipEmbeddings class, which extends the EmbeddingFunction interface to support multi-modal search using OpenClip. It includes methods for initializing the model, computing embeddings for both text and images, and handling various input formats.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/custom_embedding_function.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@register(\"open-clip\")\nclass OpenClipEmbeddings(EmbeddingFunction):\n    name: str = \"ViT-B-32\"\n    pretrained: str = \"laion2b_s34b_b79k\"\n    device: str = \"cpu\"\n    batch_size: int = 64\n    normalize: bool = True\n    _model = PrivateAttr()\n    _preprocess = PrivateAttr()\n    _tokenizer = PrivateAttr()\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        open_clip = attempt_import_or_raise(\"open_clip\", \"open-clip\") # EmbeddingFunction util to import external libs and raise if not found\n        model, _, preprocess = open_clip.create_model_and_transforms(\n            self.name, pretrained=self.pretrained\n        )\n        model.to(self.device)\n        self._model, self._preprocess = model, preprocess\n        self._tokenizer = open_clip.get_tokenizer(self.name)\n        self._ndims = None\n\n    def ndims(self):\n        if self._ndims is None:\n            self._ndims = self.generate_text_embeddings(\"foo\").shape[0]\n        return self._ndims\n\n    def compute_query_embeddings(\n        self, query: Union[str, \"PIL.Image.Image\"], *args, **kwargs\n    ) -> List[np.ndarray]:\n        \"\"\"\n        Compute the embeddings for a given user query\n\n        Parameters\n        ----------\n        query : Union[str, PIL.Image.Image]\n            The query to embed. A query can be either text or an image.\n        \"\"\"\n        if isinstance(query, str):\n            return [self.generate_text_embeddings(query)]\n        else:\n            PIL = attempt_import_or_raise(\"PIL\", \"pillow\")\n            if isinstance(query, PIL.Image.Image):\n                return [self.generate_image_embedding(query)]\n            else:\n                raise TypeError(\"OpenClip supports str or PIL Image as query\")\n\n    def generate_text_embeddings(self, text: str) -> np.ndarray:\n        torch = attempt_import_or_raise(\"torch\")\n        text = self.sanitize_input(text)\n        text = self._tokenizer(text)\n        text.to(self.device)\n        with torch.no_grad():\n            text_features = self._model.encode_text(text.to(self.device))\n            if self.normalize:\n                text_features /= text_features.norm(dim=-1, keepdim=True)\n            return text_features.cpu().numpy().squeeze()\n\n    def sanitize_input(self, images: IMAGES) -> Union[List[bytes], np.ndarray]:\n        \"\"\"\n        Sanitize the input to the embedding function.\n        \"\"\"\n        if isinstance(images, (str, bytes)):\n            images = [images]\n        elif isinstance(images, pa.Array):\n            images = images.to_pylist()\n        elif isinstance(images, pa.ChunkedArray):\n            images = images.combine_chunks().to_pylist()\n        return images\n\n    def compute_source_embeddings(\n        self, images: IMAGES, *args, **kwargs\n    ) -> List[np.array]:\n        \"\"\"\n        Get the embeddings for the given images\n        \"\"\"\n        images = self.sanitize_input(images)\n        embeddings = []\n        for i in range(0, len(images), self.batch_size):\n            j = min(i + self.batch_size, len(images))\n            batch = images[i:j]\n            embeddings.extend(self._parallel_get(batch))\n        return embeddings\n\n    def _parallel_get(self, images: Union[List[str], List[bytes]]) -> List[np.ndarray]:\n        \"\"\"\n        Issue concurrent requests to retrieve the image data\n        \"\"\"\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            futures = [\n                executor.submit(self.generate_image_embedding, image)\n                for image in images\n            ]\n            return [future.result() for future in futures]\n\n    def generate_image_embedding(\n        self, image: Union[str, bytes, \"PIL.Image.Image\"]\n    ) -> np.ndarray:\n        \"\"\"\n        Generate the embedding for a single image\n\n        Parameters\n        ----------\n        image : Union[str, bytes, PIL.Image.Image]\n            The image to embed. If the image is a str, it is treated as a uri.\n            If the image is bytes, it is treated as the raw image bytes.\n        \"\"\"\n        torch = attempt_import_or_raise(\"torch\")\n        # TODO handle retry and errors for https\n        image = self._to_pil(image)\n        image = self._preprocess(image).unsqueeze(0)\n        with torch.no_grad():\n            return self._encode_and_normalize_image(image)\n\n    def _to_pil(self, image: Union[str, bytes]):\n        PIL = attempt_import_or_raise(\"PIL\", \"pillow\")\n        if isinstance(image, bytes):\n            return PIL.Image.open(io.BytesIO(image))\n        if isinstance(image, PIL.Image.Image):\n            return image\n        elif isinstance(image, str):\n            parsed = urlparse.urlparse(image)\n            # TODO handle drive letter on windows.\n            if parsed.scheme == \"file\":\n                return PIL.Image.open(parsed.path)\n            elif parsed.scheme == \"\":\n                return PIL.Image.open(image if os.name == \"nt\" else parsed.path)\n            elif parsed.scheme.startswith(\"http\"):\n                return PIL.Image.open(io.BytesIO(url_retrieve(image)))\n            else:\n                raise NotImplementedError(\"Only local and http(s) urls are supported\")\n\n    def _encode_and_normalize_image(self, image_tensor: \"torch.Tensor\"):\n        \"\"\"\n        encode a single image tensor and optionally normalize the output\n        \"\"\"\n        image_features = self._model.encode_image(image_tensor)\n        if self.normalize:\n            image_features /= image_features.norm(dim=-1, keepdim=True)\n        return image_features.cpu().numpy().squeeze()\n```\n\n----------------------------------------\n\nTITLE: Defining IntoSql Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the IntoSql type alias, which is a union type representing various data types that can be converted into SQL-compatible values. It includes primitive types, Date objects, array buffers, and nested arrays of the same type.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/IntoSql.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IntoSql =\n  | string\n  | number\n  | boolean\n  | null\n  | Date\n  | ArrayBufferLike\n  | Buffer\n  | IntoSql[];\n```\n\n----------------------------------------\n\nTITLE: Setting Strong Consistency in Python (Async)\nDESCRIPTION: Shows how to set strong read consistency using timedelta(0) in asynchronous Python API. This ensures real-time consistency checks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\ndb = await lance.connect_async(\"./data\", read_consistency_interval=timedelta(0))\ntbl = await db.open_table(\"my_table\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Embedding Functions in TypeScript\nDESCRIPTION: Example showing how to use a custom embedding function in the TypeScript implementation of LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/custom_embedding_function.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n--8<--- \"nodejs/examples/custom_embedding_function.test.ts:call_custom_function\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global EmbeddingFunctionRegistry Instance in TypeScript\nDESCRIPTION: A utility function that returns the global instance of the EmbeddingFunctionRegistry. This registry contains registered embedding functions that can be accessed and utilized in applications.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/functions/getRegistry.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getRegistry(): EmbeddingFunctionRegistry\n```\n\n----------------------------------------\n\nTITLE: Altering Columns in LanceDB - Python\nDESCRIPTION: Shows how to modify column properties including name, nullability, and data type in Python\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:alter_columns\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:alter_columns_async\"\n```\n\n----------------------------------------\n\nTITLE: Constructing MergeInsertBuilder in TypeScript\nDESCRIPTION: Creates a new instance of MergeInsertBuilder. This constructor is for internal use only and requires a NativeMergeInsertBuilder and a Schema.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MergeInsertBuilder.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MergeInsertBuilder(native, schema): MergeInsertBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Jina Embeddings with LanceDB for Image Data\nDESCRIPTION: This example demonstrates how to set up LanceDB with Jina embeddings for processing image data. It shows configuration of the embedding function, definition of a Pydantic model for the table schema, and adding image data to the table using both image URLs and binary content.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/jina_multimodal_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport requests\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\nimport pandas as pd\n\nos.environ['JINA_API_KEY'] = 'jina_*'\n\ndb = lancedb.connect(\"~/.lancedb\")\nfunc = get_registry().get(\"jina\").create()\n\n\nclass Images(LanceModel):\n    label: str\n    image_uri: str = func.SourceField()  # image uri as the source\n    image_bytes: bytes = func.SourceField()  # image bytes as the source\n    vector: Vector(func.ndims()) = func.VectorField()  # vector column\n    vec_from_bytes: Vector(func.ndims()) = func.VectorField()  # Another vector column\n\n\ntable = db.create_table(\"images\", schema=Images)\nlabels = [\"cat\", \"cat\", \"dog\", \"dog\", \"horse\", \"horse\"]\nuris = [\n    \"http://farm1.staticflickr.com/53/167798175_7c7845bbbd_z.jpg\",\n    \"http://farm1.staticflickr.com/134/332220238_da527d8140_z.jpg\",\n    \"http://farm9.staticflickr.com/8387/8602747737_2e5c2a45d4_z.jpg\",\n    \"http://farm5.staticflickr.com/4092/5017326486_1f46057f5f_z.jpg\",\n    \"http://farm9.staticflickr.com/8216/8434969557_d37882c42d_z.jpg\",\n    \"http://farm6.staticflickr.com/5142/5835678453_4f3a4edb45_z.jpg\",\n]\n# get each uri as bytes\nimage_bytes = [requests.get(uri).content for uri in uris]\ntable.add(\n  pd.DataFrame({\"label\": labels, \"image_uri\": uris, \"image_bytes\": image_bytes})\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Merge Insert Operation in TypeScript\nDESCRIPTION: Executes the merge insert operation with the provided data. This method updates the Table but doesn't return any value.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MergeInsertBuilder.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexecute(data): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Prewarming Index for LanceDB Table in TypeScript\nDESCRIPTION: Loads a specified index into memory to potentially reduce cold-start time for future queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nabstract prewarmIndex(name): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Contextualizing transcript text chunks\nDESCRIPTION: Function that groups transcript chunks by video_id and creates expanded context for each item by looking back at previous chunks, providing more complete conversational context.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction contextualize (rows, contextSize, groupColumn) {\n  const grouped = []\n  rows.forEach(row => {\n    if (!grouped[row[groupColumn]]) {\n      grouped[row[groupColumn]] = []\n    }\n    grouped[row[groupColumn]].push(row)\n  })\n\n  const data = []\n  Object.keys(grouped).forEach(key => {\n    for (let i = 0; i < grouped[key].length; i++) {\n      const start = i - contextSize > 0 ? i - contextSize : 0\n      grouped[key][i].context = grouped[key].slice(start, i + 1).map(r => r.text).join(' ')\n    }\n    data.push(...grouped[key])\n  })\n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Table Names in LanceDB with TypeScript\nDESCRIPTION: Retrieves the names of all tables in the database. This method returns a promise that resolves to an array of table name strings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **tableNames**(): `Promise`\\<`string`[]\\>\n\nGet the names of all tables in the database.\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Grading and Query Rewriting\nDESCRIPTION: Defines functions for grading retrieved documents and rewriting queries. Uses GPT-4 to evaluate document relevance and improve search queries when needed.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/self_rag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef grade_documents(state) -> Literal[\"generate\", \"rewrite\"]:\n    class grade(BaseModel):\n        binary_score: str = Field(description=\"Relevance score 'yes' or 'no'\")\n\n    model = ChatOpenAI(temperature=0, model=\"gpt-4-0125-preview\", streaming=True)\n    llm_with_tool = model.with_structured_output(grade)\n    prompt = PromptTemplate(\n        template=\"\"\"You are a grader assessing relevance of a retrieved document to a user question. \\n\n        Here is the retrieved document: \\n\\n {context} \\n\\n\n        Here is the user question: {question} \\n\n        If the document contains keyword(s) or semantic meaning related to the user question, grade it as relevant. \\n\n        Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question.\"\"\",\n        input_variables=[\"context\", \"question\"],\n    )\n    chain = prompt | llm_with_tool\n\n    messages = state[\"messages\"]\n    last_message = messages[-1]\n    question = messages[0].content\n    docs = last_message.content\n\n    scored_result = chain.invoke({\"question\": question, \"context\": docs})\n    score = scored_result.binary_score\n\n    return \"generate\" if score == \"yes\" else \"rewrite\"\n\n\ndef rewrite(state):\n    messages = state[\"messages\"]\n    question = messages[0].content\n    msg = [\n        HumanMessage(\n            content=f\"\"\" \\n\n            Look at the input and try to reason about the underlying semantic intent / meaning. \\n\n            Here is the initial question:\n            \\n ------- \\n\n            {question}\n            \\n ------- \\n\n            Formulate an improved question: \"\"\",\n        )\n    ]\n    model = ChatOpenAI(temperature=0, model=\"gpt-4-0125-preview\", streaming=True)\n    response = model.invoke(msg)\n    return {\"messages\": [response]}\n```\n\n----------------------------------------\n\nTITLE: Using explainPlan Method in TypeScript\nDESCRIPTION: Demonstrates how to use the explainPlan method to get an explanation of the query execution plan for a nearest neighbor search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\"\nconst db = await lancedb.connect(\"./.lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { vector: [1.1, 0.9], id: \"1\" },\n]);\nconst plan = await table.query().nearestTo([0.5, 0.2]).explainPlan();\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Initial Data in Rust\nDESCRIPTION: Demonstrates how to create a LanceDB table and insert initial data in Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n--8<-- \"rust/lancedb/examples/simple.rs:create_table\"\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Text Search Index\nDESCRIPTION: Creates a full-text search index on the text field in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable = db._table\ntable.create_fts_index(\"text\")\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset and Computing Similarity Index with LanceDB in Python\nDESCRIPTION: Python code to load a dataset into FiftyOne, compute embeddings, and create a similarity index using LanceDB as the backend.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fiftyone as fo\nimport fiftyone.brain as fob\nimport fiftyone.zoo as foz\n\n# Step 1: Load your data into FiftyOne\ndataset = foz.load_zoo_dataset(\"quickstart\")\n\n# Steps 2 and 3: Compute embeddings and create a similarity index\nlancedb_index = fob.compute_similarity(\n    dataset, \n    model=\"clip-vit-base32-torch\",\n    brain_key=\"lancedb_index\",\n    backend=\"lancedb\",\n)\n```\n\n----------------------------------------\n\nTITLE: Querying LanceDB Table with SQL-style Filtering in TypeScript\nDESCRIPTION: Demonstrates how to perform a SQL-style query on a LanceDB table, filtering rows where 'id' is greater than 1, selecting only the 'id' column, and limiting the result to 20 rows.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const batch of table\n  .query()\n  .where(\"id > 1\")\n  .select([\"id\"])\n  .limit(20)) {\n  console.log(batch);\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filter in LanceDB (Async API)\nDESCRIPTION: This snippet shows how to perform a vector similarity search with a filter using the LanceDB Python API and the asynchronous interface.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:vector_search_with_filter_async\"\n```\n\n----------------------------------------\n\nTITLE: Installing sentence-transformers for Hugging Face Embeddings\nDESCRIPTION: This snippet shows how to install the sentence-transformers library using pip, which is required for using Hugging Face embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sentence-transformers\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table with PyArrow Schema (Async API)\nDESCRIPTION: Shows how to create an empty LanceDB table using a PyArrow schema with the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_empty_table_async\"\n```\n\n----------------------------------------\n\nTITLE: Searching with an Image Query in Python\nDESCRIPTION: Shows how to perform a vector search using an image as the query instead of text.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\np = Path(\"path/to/images/samoyed_100.jpg\")\nquery_image = Image.open(p)\nresults = (\n    table.search(query_image)\n        .limit(10)\n        .to_pandas()\n)\n```\n\n----------------------------------------\n\nTITLE: Altering Columns in LanceDB - TypeScript\nDESCRIPTION: Demonstrates how to modify column properties in TypeScript\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:alter_columns\"\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operations in LanceDB with TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform an upsert operation using the mergeInsert API in LanceDB with TypeScript. It updates existing rows and inserts new ones based on a matching key.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/merge_insert.test.ts:upsert_basic\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Arrow Tables\nDESCRIPTION: Demonstrates creating LanceDB tables directly from Arrow tables, including support for float16 data type.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-numpy\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_from_arrow_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-polars\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-numpy\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_from_arrow_table\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with DynamoDB Commit Store in Python (Async API)\nDESCRIPTION: Shows how to connect to an S3 bucket using LanceDB's asynchronous Python API with a DynamoDB commit store for concurrent writes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"s3+ddb://bucket/path?ddbTableName=my-dynamodb-table\",\n)\n```\n\n----------------------------------------\n\nTITLE: Querying with Scalar Indices in TypeScript\nDESCRIPTION: Shows how to perform a filtered query in LanceDB that utilizes scalar indices using TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await lancedb.connect(\"data\");\nconst tbl = await db.openTable(\"books\");\n\nawait tbl\n  .query()\n  .where(\"book_id = 2\")\n  .limit(10)\n  .toArray();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for phidata and LanceDB Integration\nDESCRIPTION: This snippet shows how to install the necessary packages for integrating LanceDB with phidata in a virtual environment.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install lancedb phidata youtube_transcript_api openai ollama numpy pandas\n```\n\n----------------------------------------\n\nTITLE: Opening Tables in LanceDB with TypeScript\nDESCRIPTION: Opens an existing table in the database with optional embedding function configuration. This method has several overloaded versions to support different use cases.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **openTable**(`name`): `Promise`\\<[`Table`](../interfaces/Table.md)\\<`number`[]\\>\\>\n\nOpen a table in the database.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `name` | `string` | The name of the table. |\n\n#### Returns\n\n`Promise`\\<[`Table`](../interfaces/Table.md)\\<`number`[]\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB with URI and Options in Single Object in TypeScript\nDESCRIPTION: An example of using the connect function with a single options object that includes both the URI and additional connection options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst conn = await connect({\n  uri: \"/path/to/database\",\n  storageOptions: {timeout: \"60s\"}\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript EmbeddingFunction Interface Definition\nDESCRIPTION: TypeScript interface that defines an embedding function for automatically creating vector representations of data. It includes properties for source and destination columns, embedding dimension, data type, and the core embed method.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/EmbeddingFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface EmbeddingFunction<T> {\n  sourceColumn: string;\n  destColumn?: string;\n  embeddingDataType?: Float<Floats>;\n  embeddingDimension?: number;\n  excludeSource?: boolean;\n  embed: (data: T[]) => Promise<number[][]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Integration with LanceDB\nDESCRIPTION: Demonstrates the basic setup of a Pydantic model integration with LanceDB, including imports, model definition, and database connection setup.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pydantic.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_pydantic_integration.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_pydantic_integration.py:base_model\"\n\n--8<-- \"python/python/tests/docs/test_pydantic_integration.py:set_url\"\n--8<-- \"python/python/tests/docs/test_pydantic_integration.py:base_example\"\n```\n\n----------------------------------------\n\nTITLE: Document Loading and Embedding Setup\nDESCRIPTION: Loading text documents and initializing OpenAI embeddings with document splitting\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.document_loaders import TextLoader\nfrom langchain_community.vectorstores import LanceDB\nfrom langchain_openai import OpenAIEmbeddings\nfrom langchain_text_splitters import CharacterTextSplitter\n\nloader = TextLoader(\"../../how_to/state_of_the_union.txt\")\ndocuments = loader.load()\n\ndocuments = CharacterTextSplitter().split_documents(documents)\nembeddings = OpenAIEmbeddings()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugging Face Embedding Function in Python\nDESCRIPTION: This code demonstrates how to create an embedding function using the sentence-transformers library with the 'paraphrase-albert-small-v2' model. The function takes a batch of sentences and returns their embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/legacy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\n\nname=\"paraphrase-albert-small-v2\"\nmodel = SentenceTransformer(name)\n\n# used for both training and querying\ndef embed_func(batch):\n    return [model.encode(sentence) for sentence in batch]\n```\n\n----------------------------------------\n\nTITLE: Implementing ColBERT Reranker with LanceDB\nDESCRIPTION: Demonstrates how to set up and use ColBERT reranker with LanceDB, including table creation, data insertion, and different search types. Shows implementation with sentence transformers and various search methods including vector, FTS, and hybrid search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/colbert.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\nimport lancedb\nfrom lancedb.embeddings import get_registry\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.rerankers import ColbertReranker\n\nembedder = get_registry().get(\"sentence-transformers\").create()\ndb = lancedb.connect(\"~/.lancedb\")\n\nclass Schema(LanceModel):\n    text: str = embedder.SourceField()\n    vector: Vector(embedder.ndims()) = embedder.VectorField()\n\ndata = [\n    {\"text\": \"hello world\"},\n    {\"text\": \"goodbye world\"}\n    ]\ntbl = db.create_table(\"test\", schema=Schema, mode=\"overwrite\")\ntbl.add(data)\nreranker = ColbertReranker()\n\n# Run vector search with a reranker\nresult = tbl.search(\"hello\").rerank(reranker=reranker).to_list() \n\n# Run FTS search with a reranker\nresult = tbl.search(\"hello\", query_type=\"fts\").rerank(reranker=reranker).to_list()\n\n# Run hybrid search with a reranker\ntbl.create_fts_index(\"text\", replace=True)\nresult = tbl.search(\"hello\", query_type=\"hybrid\").rerank(reranker=reranker).to_list()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Addition Mode in LanceDB TypeScript Interface\nDESCRIPTION: Defines the mode property that controls how data is added to a table. The mode can be either 'append' to add new data alongside existing data, or 'overwrite' to replace all existing data in the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/AddDataOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode: \"append\" | \"overwrite\";\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Preview Releases\nDESCRIPTION: Demonstrates how to install preview releases of LanceDB for Python, TypeScript, and Rust, which contain the latest features and bug fixes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install --pre --extra-index-url https://pypi.fury.io/lancedb/ lancedb\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @lancedb/lancedb@preview\n```\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nlancedb = { git = \"https://github.com/lancedb/lancedb.git\", tag = \"vX.Y.Z-beta.N\" }\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage with LanceDB in TypeScript (@lancedb/lancedb)\nDESCRIPTION: Example of connecting to an Azure Blob Storage container using the current TypeScript LanceDB package with explicit storage account credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\n    \"az://my-container/my-database\",\n    {\n        storageOptions: {\n            accountName: \"some-account\",\n            accountKey: \"some-key\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FtsOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the FtsOptions interface with various optional properties for configuring full text search indexing. It includes options for ASCII folding, tokenization, language settings, case sensitivity, token length limits, stop word removal, stemming, and position tracking.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/FtsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FtsOptions {\n  optional asciiFolding: boolean;\n  optional baseTokenizer: \"raw\" | \"simple\" | \"whitespace\";\n  optional language: string;\n  optional lowercase: boolean;\n  optional maxTokenLength: number;\n  optional removeStopWords: boolean;\n  optional stem: boolean;\n  optional withPosition: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Document Pretty Printing Utility\nDESCRIPTION: Defines a helper function to print documents with proper formatting and spacing.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef pretty_print(docs):\n    for doc in docs:\n        print(doc + \"\\n\\n\")\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing Table in LanceDB (Rust)\nDESCRIPTION: Demonstrates how to open an existing table in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nlet table = conn.open_table(\"my_table\").await?;\n```\n\n----------------------------------------\n\nTITLE: Vector Field Method\nDESCRIPTION: Method used with LanceSchema to provide a declarative data model for vector fields.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvectorField(optionsOrDatatype?): [DataType<Type, any>, Map<string, EmbeddingFunction<any, FunctionOptions>>]\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table for Commit Store in Python\nDESCRIPTION: Python code to create a DynamoDB table with the required schema for use as a LanceDB commit store.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\ndynamodb = boto3.client(\"dynamodb\")\ntable = dynamodb.create_table(\n    TableName=table_name,\n    KeySchema=[\n        {\"AttributeName\": \"base_uri\", \"KeyType\": \"HASH\"},\n        {\"AttributeName\": \"version\", \"KeyType\": \"RANGE\"},\n    ],\n    AttributeDefinitions=[\n        {\"AttributeName\": \"base_uri\", \"AttributeType\": \"S\"},\n        {\"AttributeName\": \"version\", \"AttributeType\": \"N\"},\n    ],\n    ProvisionedThroughput={\"ReadCapacityUnits\": 1, \"WriteCapacityUnits\": 1},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a B-tree Index in TypeScript\nDESCRIPTION: Creates a B-tree index for scalar columns, storing a copy of the column in sorted order. It's efficient for scalar columns with mostly distinct values and highly selective queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic btree(): Index\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Indices in Python (Async)\nDESCRIPTION: Shows how to create scalar indices asynchronously in LanceDB using the Python async API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nfrom lancedb.index import ScalarIndex, BitmapIndex, BTreeIndex\n\n# Connect to a database asynchronously\ndb = await lancedb.connect_async(\"data\")\n\n# Open an existing table asynchronously\ntbl = await db.open_table(\"my_vectors\")\n\n# Create a BTREE index on the 'book_id' column asynchronously\nawait tbl.create_index(\"book_id\", index_type=BTreeIndex())\n\n# Create a BITMAP index on the 'publisher' column asynchronously\nawait tbl.create_index(\"publisher\", index_type=BitmapIndex())\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up LanceDB Index in FiftyOne with Python\nDESCRIPTION: Python code to delete the LanceDB table and remove the run record from FiftyOne after using the similarity index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Step 5 (optional): Cleanup\n\n# Delete the LanceDB table\nlancedb_index.cleanup()\n\n# Delete run record from FiftyOne\ndataset.delete_brain_run(\"lancedb_index\")\n```\n\n----------------------------------------\n\nTITLE: Splitting Data into Training and Validation Sets\nDESCRIPTION: Uses scikit-learn's train_test_split to divide the dataset into training and validation sets with an 80/20 split. Saves both sets as separate CSV files.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.model_selection import train_test_split\n\n# Randomly shuffle df.\n#df = df.sample(frac=1, random_state=42)\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\n\ntrain_df.to_csv(\"train_data_qa.csv\", index=False)\nval_df.to_csv(\"val_data_qa.csv\", index=False)\n```\n\n----------------------------------------\n\nTITLE: Performing Image-Based Search with OpenClip\nDESCRIPTION: Shows how to perform image-based searches using OpenClip embeddings in LanceDB, supporting both direct image queries and custom vector columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/openclip_embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# image search\nquery_image_uri = \"http://farm1.staticflickr.com/200/467715466_ed4a31801f_z.jpg\"\nimage_bytes = requests.get(query_image_uri).content\nquery_image = Image.open(io.BytesIO(image_bytes))\nactual = table.search(query_image).limit(1).to_pydantic(Images)[0]\nprint(actual.label == \"dog\")\n\n# image search using a custom vector column\nother = (\n    table.search(query_image, vector_column_name=\"vec_from_bytes\")\n    .limit(1)\n    .to_pydantic(Images)[0]\n)\nprint(actual.label)\n```\n\n----------------------------------------\n\nTITLE: Defining IvfPQIndexConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the configuration options for an IVF-PQ (Inverted File with Product Quantization) vector index in LanceDB. This includes parameters for specifying the column to index, index name, metric type, partitioning settings, product quantization parameters, and caching options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/IvfPQIndexConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IvfPQIndexConfig {\n  /** The column to be indexed */\n  column?: string;\n  \n  /** A unique name for the index */\n  index_name?: string;\n  \n  /** Metric type, l2 or Cosine */\n  metric_type?: MetricType;\n  \n  /** The number of partitions this index */\n  num_partitions?: number;\n  \n  /** The max number of iterations for kmeans training. */\n  max_iters?: number;\n  \n  /** Train as optimized product quantization. */\n  use_opq?: boolean;\n  \n  /** Number of subvectors to build PQ code */\n  num_sub_vectors?: number;\n  \n  /** The number of bits to present one PQ centroid. */\n  num_bits?: number;\n  \n  /** Max number of iterations to train OPQ, if `use_opq` is true. */\n  max_opq_iters?: number;\n  \n  /** Replace an existing index with the same name if it exists. */\n  replace?: boolean;\n  \n  /** Cache size of the index */\n  index_cache_size?: number;\n  \n  type: \"ivf_pq\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models with Search Results\nDESCRIPTION: Demonstrates how to convert search results to Pydantic model instances to use custom utility methods.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrs = table.search(query_image).limit(3).to_pydantic(Pets)\nrs[2].image\n```\n\n----------------------------------------\n\nTITLE: Adding Data to an Existing LanceDB Table\nDESCRIPTION: Shows how to add new records to an existing LanceDB table using a list of dictionaries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n        {\"vector\": [1.3, 1.4], \"item\": \"fizz\", \"price\": 100.0},\n        {\"vector\": [9.5, 56.2], \"item\": \"buzz\", \"price\": 200.0}\n]\ntbl.add(data)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing LanceDB Database with API Key\nDESCRIPTION: Example showing how to connect to an existing LanceDB database using a URL, API key, and region. This is typically used for cloud-based LanceDB instances.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_url = \"db://lang_test\" # url of db you created\napi_key = \"xxxxx\" # your API key\nregion=\"us-east-1-dev\"  # your selected region\n\nvector_store = LanceDB(\n    uri=db_url,\n    api_key=api_key, #(dont include for local API)\n    region=region, #(dont include for local API)\n    embedding=embeddings,\n    table_name='langchain_test' # Optional\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiVector Search with LanceDB in Python\nDESCRIPTION: This code snippet demonstrates how to use LanceDB's MultiVector type to create a table with multiple vectors per item, create an index, and perform search operations with both single and multiple vector queries. It uses numpy for vector generation and pyarrow for schema definition.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/multi-vector.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport numpy as np\nimport pyarrow as pa\n\ndb = lancedb.connect(\"data/multivector_demo\")\nschema = pa.schema(\n    [\n        pa.field(\"id\", pa.int64()),\n        # float16, float32, and float64 are supported\n        pa.field(\"vector\", pa.list_(pa.list_(pa.float32(), 256))),\n    ]\n)\ndata = [\n    {\n        \"id\": i,\n        \"vector\": np.random.random(size=(2, 256)).tolist(),\n    }\n    for i in range(1024)\n]\ntbl = db.create_table(\"my_table\", data=data, schema=schema)\n\n# only cosine similarity is supported for multi-vectors\ntbl.create_index(metric=\"cosine\")\n\n# query with single vector\nquery = np.random.random(256).astype(np.float16)\ntbl.search(query).to_arrow()\n\n# query with multiple vectors\nquery = np.random.random(size=(2, 256))\ntbl.search(query).to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Defining Read Consistency Interval Property for LanceDB OSS in TypeScript\nDESCRIPTION: This property definition specifies an optional read consistency interval in seconds for LanceDB OSS. It determines how often to check for updates from other processes, affecting consistency and performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional readConsistencyInterval: number;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage with LanceDB in Python (Async API)\nDESCRIPTION: Example of connecting to an Azure Blob Storage container using LanceDB's asynchronous Python API with explicit storage account credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"az://my-container/my-database\",\n    storage_options={\n        account_name: \"some-account\",\n        account_key: \"some-key\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Update Filter Options in TypeScript\nDESCRIPTION: Interface definition for update operations in LanceDB that specifies a where clause filter. The where property accepts an SQL filter expression to limit which rows will be affected by the update operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/UpdateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: string;\n```\n\n----------------------------------------\n\nTITLE: Insert-if-not-exists Operations in LanceDB with Python (Async)\nDESCRIPTION: This code snippet demonstrates how to perform an insert-if-not-exists operation using the merge_insert API in LanceDB with Python's asynchronous interface. It only inserts rows that don't have a match in the target table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:insert_if_not_exists_async\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nearest To Method in TypeScript\nDESCRIPTION: Defines the nearestTo method which finds the nearest vectors to a given query vector. It converts a plain query to a vector query and handles vector column selection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnearestTo(vector): VectorQuery\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table for Commit Store in JavaScript\nDESCRIPTION: JavaScript code to create a DynamoDB table with the required schema for use as a LanceDB commit store.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  CreateTableCommand,\n  DynamoDBClient,\n} from \"@aws-sdk/client-dynamodb\";\n\nconst dynamodb = new DynamoDBClient({\n  region: CONFIG.awsRegion,\n  credentials: {\n    accessKeyId: CONFIG.awsAccessKeyId,\n    secretAccessKey: CONFIG.awsSecretAccessKey,\n  },\n  endpoint: CONFIG.awsEndpoint,\n});\nconst command = new CreateTableCommand({\n  TableName: table_name,\n  AttributeDefinitions: [\n    {\n      AttributeName: \"base_uri\",\n      AttributeType: \"S\",\n    },\n    {\n      AttributeName: \"version\",\n      AttributeType: \"N\",\n    },\n  ],\n  KeySchema: [\n    { AttributeName: \"base_uri\", KeyType: \"HASH\" },\n    { AttributeName: \"version\", KeyType: \"RANGE\" },\n  ],\n  ProvisionedThroughput: {\n    ReadCapacityUnits: 1,\n    WriteCapacityUnits: 1,\n  },\n});\nawait client.send(command);\n```\n\n----------------------------------------\n\nTITLE: Defining Schema and Embedding Model for LanceDB Ingestion\nDESCRIPTION: This code defines a Pydantic schema for the data and sets up an embedding model using LanceDB's Embedding API for automatic vectorization of the dataset and queries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import get_registry\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nembed_model = get_registry().get(\"huggingface\").create(name=\"BAAI/bge-small-en-v1.5\", device=device)\n\nclass Schema(LanceModel):\n    text: str = embed_model.SourceField()\n    vector: Vector(embed_model.ndims()) = embed_model.VectorField()\n```\n\n----------------------------------------\n\nTITLE: Compute Source Embeddings Method\nDESCRIPTION: Method to create vector representations for multiple text inputs, returning arrays of numeric arrays or typed arrays.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncomputeSourceEmbeddings(data): Promise<number[][] | Float32Array[] | Float64Array[]>\n```\n\n----------------------------------------\n\nTITLE: Compute Query Embeddings Method\nDESCRIPTION: Method to compute embeddings for a single text query, returning a numeric array or typed array.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncomputeQueryEmbeddings(data): Promise<number[] | Float32Array | Float64Array>\n```\n\n----------------------------------------\n\nTITLE: Loading Training and Validation Data as Text Nodes\nDESCRIPTION: Processes the training and validation CSV files into LlamaIndex text nodes using the previously defined load_corpus function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntrain_nodes = load_corpus(\"train_data_qa.csv\", verbose=True)\nval_nodes = load_corpus(\"val_data_qa.csv\", verbose=True)\n```\n\n----------------------------------------\n\nTITLE: Reranking Hybrid Results with RRF in TypeScript\nDESCRIPTION: This method reranks the results using the Reciprocal Rank Fusion (RRF) algorithm. It takes a query string, vector results, and full-text search results as input, and returns a promise resolving to a reranked RecordBatch.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/rerankers/classes/RRFReranker.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrerankHybrid(\n   query,\n   vecResults,\n   ftsResults): Promise<RecordBatch<any>>\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Table with Custom Vector Columns in TypeScript\nDESCRIPTION: Example of using makeArrowTable with custom vector column names and types. It demonstrates how to specify multiple vector columns with different data types.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/makeArrowTable.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = new Schema([\n  new Field('a', new Float64()),\n  new Field('b', new Float64()),\n  new Field('vec1', new FixedSizeList(3, new Field('item', new Float16()))),\n  new Field('vec2', new FixedSizeList(3, new Field('item', new Float16())))\n]);\nconst table = makeArrowTable([\n  { a: 1, b: 2, vec1: [1, 2, 3], vec2: [2, 4, 6] },\n  { a: 4, b: 5, vec1: [4, 5, 6], vec2: [8, 10, 12] },\n  { a: 7, b: 8, vec1: [7, 8, 9], vec2: [14, 16, 18] }\n], {\n  vectorColumns: {\n    vec1: { type: new Float16() },\n    vec2: { type: new Float16() }\n  }\n}\nassert.deepEqual(table.schema, schema)\n```\n\n----------------------------------------\n\nTITLE: Multivector Search Implementation\nDESCRIPTION: Implementation of multivector search supporting multiple vectors per item.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_multivector.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_multivector.py:sync_multivector\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in LanceDB - Python\nDESCRIPTION: Shows how to permanently remove tables using both synchronous and asynchronous APIs in Python\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:drop_table\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:drop_table_async\"\n```\n\n----------------------------------------\n\nTITLE: Insert-if-not-exists Operations in LanceDB with Python (Sync)\nDESCRIPTION: This code snippet demonstrates how to perform an insert-if-not-exists operation using the merge_insert API in LanceDB with Python's synchronous interface. It only inserts rows that don't have a match in the target table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:insert_if_not_exists\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fast Search Method in TypeScript\nDESCRIPTION: Defines the fastSearch method which skips searching un-indexed data for faster search at the cost of potentially missing some data. It returns the current instance for method chaining.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfastSearch(): this\n```\n\n----------------------------------------\n\nTITLE: Defining IndexStats Interface in TypeScript\nDESCRIPTION: This code snippet defines the IndexStats interface with properties for index statistics. It includes optional and required fields for various metrics related to the index.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/IndexStats.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IndexStats {\n  distanceType?: string;\n  indexType: string;\n  numIndexedRows: null | number;\n  numIndices?: number;\n  numUnindexedRows: null | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Distance Range Search Implementation\nDESCRIPTION: Vector search implementation with distance range constraints.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_distance_range.py:imports\"\n\n--8<-- \"python/python/tests/docs/test_distance_range.py:sync_distance_range\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables from Polars DataFrames\nDESCRIPTION: Shows how to create LanceDB tables from Polars DataFrames, a modern DataFrame library written in Rust with PyArrow integration under the hood.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-polars\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_from_polars\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-polars\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_async_from_polars\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Columns in LanceDB - Python\nDESCRIPTION: Shows how to add new columns to existing tables with SQL expressions in Python\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:add_columns\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_basic.py:add_columns_async\"\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table with PyArrow Schema (Sync API)\nDESCRIPTION: Illustrates the creation of an empty LanceDB table using a PyArrow schema with the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_empty_table\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in TypeScript\nDESCRIPTION: Optional property to specify object storage configuration as key-value pairs. These settings can override the connection-level storage options. Detailed options are documented in the LanceDB storage guide.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/OpenTableOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional storageOptions: Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Existence Handling Property in TypeScript\nDESCRIPTION: This property determines whether an error should be raised if the table already exists when the mode is 'create'. If set to true, no error will be raised if the table exists.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexistOk: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Merge Insert Builder for LanceDB Table in TypeScript\nDESCRIPTION: Initiates a merge insert operation on specified columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nabstract mergeInsert(on): MergeInsertBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Type in TypeScript\nDESCRIPTION: Returns the type of the full-text query. This method is part of the FullTextQuery interface implementation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/BoostQuery.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nqueryType(): FullTextQueryType\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Documentation Dataset\nDESCRIPTION: Downloads a pre-generated dataset containing Pandas 2.0 documentation in HTML format from an S3 bucket and extracts it for processing. This function prepares the raw data for further processing and vectorization.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef download_docs():\n    pandas_docs = requests.get(\"https://eto-public.s3.us-west-2.amazonaws.com/datasets/pandas_docs/pandas.documentation.zip\")\n    with open(Path(\"pandas.documentation.zip\"), \"wb\") as f:\n        f.write(pandas_docs.content)\n\n    file = zipfile.ZipFile(Path(\"pandas.documentation.zip\"))\n    file.extractall(path=Path(\"pandas_docs\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Embedding Function in MakeArrowTableOptions\nDESCRIPTION: Optional property for specifying an embedding function that will be used to generate vector embeddings for data. This allows automatic conversion of data to vector representations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/MakeArrowTableOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **embeddings**: [`EmbeddingFunction`](../interfaces/EmbeddingFunction.md)\\<`any`\\>\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB via NPM\nDESCRIPTION: Command to install the vectordb package using npm package manager. The package automatically downloads the appropriate native library for the user's platform.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vectordb\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from LanceDB Table in TypeScript\nDESCRIPTION: Deletes rows from the table that satisfy the given predicate.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nabstract delete(predicate): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Generic Table Opening Method in LanceDB\nDESCRIPTION: A simplified overloaded version of openTable that supports optional embedding function. This provides a more flexible interface for opening tables with type parameters.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **openTable**\\<`T`\\>(`name`, `embeddings?`): `Promise`\\<[`Table`](../interfaces/Table.md)\\<`T`\\>\\>\n\n#### Type parameters\n\n| Name |\n| :------ |\n| `T` |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `name` | `string` |\n| `embeddings?` | [`EmbeddingFunction`](../interfaces/EmbeddingFunction.md)\\<`T`\\> |\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Grading and Filtering for CRAG\nDESCRIPTION: Implements document grading functionality using OpenAI's GPT-4 model to assess document relevance and filter out irrelevant documents. Includes web search triggering logic when documents are insufficient.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/corrective_rag.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef grade_documents(state):\n    \"\"\"\n        Determines whether the retrieved documents are relevant to the question\n\n        Args:\n            state (dict): The current graph state\n\n        Returns:\n            state (dict): Updates documents key with relevant documents\n        \"\"\"\n\n    state_dict = state[\"keys\"]\n    question = state_dict[\"question\"]\n    documents = state_dict[\"documents\"]\n\n    class grade(BaseModel):\n        \"\"\"\n            Binary score for relevance check\n        \"\"\"\n\n        binary_score: str = Field(description=\"Relevance score 'yes' or 'no'\")\n\n    model = ChatOpenAI(temperature=0, model=\"gpt-4-0125-preview\", streaming=True)\n    # grading using openai\n    grade_tool_oai = convert_to_openai_tool(grade)\n    llm_with_tool = model.bind(\n        tools=[convert_to_openai_tool(grade_tool_oai)],\n        tool_choice={\"type\": \"function\", \"function\": {\"name\": \"grade\"}},\n    )\n\n    parser_tool = PydanticToolsParser(tools=[grade])\n    prompt = PromptTemplate(\n        template=\"\"\"You are a grader assessing relevance of a retrieved document to a user question. \\n\n        Here is the retrieved document: \\n\\n {context} \\n\\n\n        Here is the user question: {question} \\n\n        If the document contains keyword(s) or semantic meaning related to the user question, grade it as relevant. \\n\n        Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question.\"\"\",\n        input_variables=[\"context\", \"question\"],\n    )\n\n    chain = prompt | llm_with_tool | parser_tool\n\n    filtered_docs = []\n    search = \"No\" \n    for d in documents:\n        score = chain.invoke({\"question\": question, \"context\": d.page_content})\n        grade = score[0].binary_score\n        if grade == \"yes\":\n            filtered_docs.append(d)\n        else:\n            search = \"Yes\" \n            continue\n\n    return {\n        \"keys\": {\n            \"documents\": filtered_docs,\n            \"question\": question,\n            \"run_web_search\": search,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying with Scalar Indices in Python\nDESCRIPTION: Demonstrates how to use scalar indices to speed up filtering operations when querying a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\n# Connect to a database\ndb = lancedb.connect(\"data\")\n\n# Open an existing table\ntbl = db.open_table(\"books\")\n\n# Query with a filter that will use the scalar index on book_id\ntbl.search().where(\"book_id = 2\").limit(10).to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Insert-if-not-exists Operations in LanceDB with TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform an insert-if-not-exists operation using the mergeInsert API in LanceDB with TypeScript. It only inserts rows that don't have a match in the target table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/merge_insert.test.ts:insert_if_not_exists\"\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB with Document Embeddings\nDESCRIPTION: Sets up LanceDB connection and loads documents with OpenAI embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.vectorstores import LanceDB\nfrom langchain_openai import OpenAIEmbeddings\nimport lancedb\n\n\nembedding_function = OpenAIEmbeddings()\n\ndb = lancedb.connect(\"~/langchain\")\n\n# Load the document into LanceDB\ndb = LanceDB.from_documents(docs, embedding_function, connection=db)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphRAG and Setting API Key\nDESCRIPTION: Instructions for installing the GraphRAG library and setting the OpenAI API key as an environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/graph_rag.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install graphrag\nexport GRAPHRAG_API_KEY=\"sk-...\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Using an IN Clause with Numeric Values\nDESCRIPTION: Demonstrates deleting records from a LanceDB table using an IN clause with a list of numeric values in the filter expression.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nto_remove = [10.0, 20.0]\nto_remove = \", \".join(str(v) for v in to_remove)\n\ntbl.delete(f\"price IN ({to_remove})\")\n```\n\n----------------------------------------\n\nTITLE: Registering Embedding Function in TypeScript\nDESCRIPTION: Method to register a new embedding function with optional alias.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregister<T>(this, alias?): (ctor) => any\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Table Version in LanceDB TypeScript\nDESCRIPTION: Sets the table to a specific version for time-travel functionality. Takes a version number as parameter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract checkout(version): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Search in LanceDB using LangChain\nDESCRIPTION: Shows how to perform a text-based similarity search against a LanceDB vector store using LangChain's similarity_search method.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/langchain.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndocs = docsearch.similarity_search(query)\nprint(docs[0].page_content)\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Type Property for HNSW Index\nDESCRIPTION: Optional property to specify the distance metric used for vector similarity calculations. Supports l2 (Euclidean), cosine, and dot product distances.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional distanceType: \"l2\" | \"cosine\" | \"dot\";\n```\n\n----------------------------------------\n\nTITLE: Splitting Dataset for Embedding Model Fine-tuning in Python\nDESCRIPTION: Code to split a QA dataset into training and validation sets using scikit-learn's train_test_split function. The data is split with an 80/20 ratio and saved to CSV files for subsequent fine-tuning.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tuning_retrievers/3_embed_tuning.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.model_selection import train_test_split\n\ntrain_df, validation_df = train_test_split(\"data_qa.csv\", test_size=0.2, random_state=42)\n\ntrain_df.to_csv(\"data_train.csv\", index=False)\nvalidation_df.to_csv(\"data_val.csv\", index=False)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Using an IN Clause with String Values\nDESCRIPTION: Shows how to delete multiple records from a LanceDB table by using an IN clause with a list of string values in the filter expression.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nto_remove = [\"foo\", \"buzz\"]\nto_remove = \", \".join(str(v) for v in to_remove)\nprint(tbl.to_pandas())\ntbl.delete(f\"item IN ({to_remove})\")\n```\n\n----------------------------------------\n\nTITLE: Custom Reranker Implementation\nDESCRIPTION: Demonstrates how to implement a custom reranker by extending the base Reranker class.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import Reranker\nimport pyarrow as pa\n\nclass MyCustomReranker(Reranker):\n    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table)-> pa.Table:\n        combined_results = self.merge(vector_results, fts_results) # Or custom merge algo\n        # Custom Reranking logic here\n\n        return combined_results\n```\n\n----------------------------------------\n\nTITLE: Creating a LanceDB Table from Dictionaries\nDESCRIPTION: Creates a table in LanceDB using a list of dictionaries as input data. Each dictionary represents a record with vector and metadata fields.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\ndb = lancedb.connect(\"./.lancedb\")\n\ndata = [{\"vector\": [1.1, 1.2], \"lat\": 45.5, \"long\": -122.7},\n        {\"vector\": [0.2, 1.8], \"lat\": 40.1, \"long\": -74.1}]\n\ndb.create_table(\"my_table\", data)\n\ndb[\"my_table\"].head()\n```\n\n----------------------------------------\n\nTITLE: Setting Variable in TypeScript\nDESCRIPTION: Method to set a variable in the registry with support for default values using $var syntax.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetVar(name, value): void\n```\n\n----------------------------------------\n\nTITLE: Converting Search Results to PyArrow Table\nDESCRIPTION: Demonstrates how to retrieve search results as a PyArrow table using to_arrow(). The result includes the original columns plus a distance or score column for search relevance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_search.py:search_result_as_pyarrow\"\n```\n\n----------------------------------------\n\nTITLE: Table Creation Mode Property in TypeScript\nDESCRIPTION: This property specifies the mode for creating the table. It can be either 'overwrite' to replace an existing table or 'create' to create a new table, with behavior modified by the existOk property.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmode: \"overwrite\" | \"create\";\n```\n\n----------------------------------------\n\nTITLE: Updating Table Records\nDESCRIPTION: Updates author name for specific records using SQL-like where clause\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntable.update(where=\"author='Rick'\", values={\"author\": \"Richard Daniel Sanchez\"})\ntable.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Evaluating Vector and Full-Text Search Performance in LanceDB\nDESCRIPTION: This code creates a full-text search index and evaluates the hit-rate for both vector search and full-text search in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntbl.create_fts_index(\"text\", replace=True)\nhit_rate_vector = hit_rate(data, tbl, \"vector\")\nhit_rate_fts = hit_rate(data, tbl, \"fts\")\nprint(f\"\\n Vector Search Hit Rate: {hit_rate_vector}\")\nprint(f\"FTS Search Hit Rate: {hit_rate_fts}\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with Credentials in Python (Sync API)\nDESCRIPTION: Demonstrates how to connect to an S3 bucket using LanceDB's synchronous Python API with explicit AWS credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"s3://bucket/path\",\n    storage_options={\n        \"aws_access_key_id\": \"my-access-key\",\n        \"aws_secret_access_key\": \"my-secret-key\",\n        \"aws_session_token\": \"my-session-token\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Vector Store and Index\nDESCRIPTION: Initialize LanceDBVectorStore and create a VectorStoreIndex from documents.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvector_store = LanceDBVectorStore(\n    uri=\"./lancedb\", mode=\"overwrite\", query_type=\"hybrid\"\n)\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\n\nindex = VectorStoreIndex.from_documents(\n    documents, storage_context=storage_context\n)\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table from PyArrow RecordBatch Iterator (Sync API)\nDESCRIPTION: This code demonstrates how to create a LanceDB table from an iterator of PyArrow RecordBatches, useful for larger-than-memory datasets, using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-iterable\"\n--8<-- \"python/python/tests/docs/test_python.py:import-pyarrow\"\n--8<-- \"python/python/tests/docs/test_python.py:make_batches\"\n--8<-- \"python/python/tests/docs/test_python.py:create_table_iterable\"\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultWriteOptions Class in TypeScript\nDESCRIPTION: Class definition for DefaultWriteOptions which implements the WriteOptions interface. It includes a writeMode property that defaults to WriteMode.Create, used when creating a Table in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/DefaultWriteOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **writeMode**: [`WriteMode`](../enums/WriteMode.md) = `WriteMode.Create`\n\nA [WriteMode](../enums/WriteMode.md) to use on this operation\n\n#### Implementation of\n\n[WriteOptions](../interfaces/WriteOptions.md).[writeMode](../interfaces/WriteOptions.md#writemode)\n\n#### Defined in\n\n[index.ts:1359](https://github.com/lancedb/lancedb/blob/92179835/node/src/index.ts#L1359)\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Scalar Prefiltering in TypeScript\nDESCRIPTION: Shows how to combine vector search with scalar prefiltering in TypeScript to accelerate queries using indices.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await lancedb.connect(\"data/lance\");\nconst tbl = await db.openTable(\"book_with_embeddings\");\n\nawait tbl.search(Array(1536).fill(1.2))\n  .where(\"book_id != 3\")  // prefilter is default behavior.\n  .limit(10)\n  .toArray();\n```\n\n----------------------------------------\n\nTITLE: Including Row IDs in LanceDB Query Results in TypeScript\nDESCRIPTION: The 'withRowId' method configures the query to include row IDs in the results. These IDs can be used to match results between different queries, enabling advanced use cases like hybrid search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nwithRowId(): this\n```\n\n----------------------------------------\n\nTITLE: Version Management Operations\nDESCRIPTION: Demonstrates version listing, restoration, and deletion operations\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntable.list_versions()\ntable.restore(3)\ntable.delete(\"author != 'Richard Daniel Sanchez'\")\nlen(table)\ntable.restore(6)\ntable.version\n```\n\n----------------------------------------\n\nTITLE: Creating Index for LanceDB Table in TypeScript\nDESCRIPTION: Creates an index on a specified column to speed up queries. Supports vector and scalar columns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nabstract createIndex(column, options?): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Options Property for LanceDB OSS in TypeScript\nDESCRIPTION: This property definition specifies optional storage configuration for LanceDB OSS. The available options are described in the LanceDB documentation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional storageOptions: Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Schema\nDESCRIPTION: Displays the current schema of the table after modifications.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.schema()\n```\n\n----------------------------------------\n\nTITLE: Implementing queryType Method for FullTextQuery Interface\nDESCRIPTION: Method definition for retrieving the type of full-text query being performed. Returns a FullTextQueryType enumeration value that identifies the specific type of text search being executed.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/FullTextQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nqueryType(): FullTextQueryType\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedding Function for LanceDB\nDESCRIPTION: Defines a custom embedding function that LanceDB will use to generate vector embeddings from text. The function takes a batch of strings, processes each through the transformer pipeline, and returns normalized vector embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Define the function. `sourceColumn` is required for LanceDB to know\n// which column to use as input.\nconst embed_fun = {}\nembed_fun.sourceColumn = 'text'\nembed_fun.embed = async function (batch) {\n    let result = []\n    // Given a batch of strings, we will use the `pipe` function to get\n    // the vector embedding of each string.\n    for (let text of batch) {\n        // 'mean' pooling and normalizing allows the embeddings to share the\n        // same length.\n        const res = await pipe(text, { pooling: 'mean', normalize: true })\n        result.push(Array.from(res['data']))\n    }\n    return (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing LanceDB Table and Converting to Pandas\nDESCRIPTION: Demonstrates opening an existing LanceDB table by name and converting its contents to a pandas DataFrame for further analysis.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntbl = db.open_table(\"table4\")\ntbl.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Row in TypeScript\nDESCRIPTION: Example showing how to delete a specific row from a LanceDB table by filtering on a column value in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst con = await lancedb.connect(\"./.lancedb\")\nconst data = [\n  {id: 1, vector: [1, 2]},\n  {id: 2, vector: [3, 4]},\n  {id: 3, vector: [5, 6]},\n];\nconst tbl = await con.createTable(\"my_table\", data)\nawait tbl.delete(\"id = 2\")\nawait tbl.countRows() // Returns 2\n```\n\n----------------------------------------\n\nTITLE: GPU-Accelerated Index Creation on Linux\nDESCRIPTION: Example of creating an IVF_PQ index using GPU acceleration on Linux with CUDA for Nvidia GPUs. This requires PyTorch 2.0+ installed with CUDA support.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create index using CUDA on Nvidia GPUs.\ntbl.create_index(\n    num_partitions=256,\n    num_sub_vectors=96,\n    accelerator=\"cuda\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateArgs Interface in TypeScript\nDESCRIPTION: This code snippet defines the UpdateArgs interface with two properties: 'values' for specifying update key-value pairs, and an optional 'where' clause for filtering rows. The 'values' property is a record of string keys and Literal values, while 'where' is an optional string representing a SQL-like WHERE clause.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/UpdateArgs.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UpdateArgs {\n    values: Record<string, Literal>;\n    where?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Data to Arrow Table with Embeddings in TypeScript\nDESCRIPTION: Converts an array of objects to an Arrow Table, optionally applying an embedding function. Allows customization of table creation options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconvertToTable<T>(data: Record<string, unknown>[], embeddings?: EmbeddingFunction<T>, makeTableOptions?: Partial<MakeArrowTableOptions>): Promise<ArrowTable>\n```\n\n----------------------------------------\n\nTITLE: Querying with Lance Filters\nDESCRIPTION: Use Lance filters directly via the 'where' clause for querying.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlance_filter = \"metadata.file_name = 'paul_graham_essay.txt' \"\nretriever = index.as_retriever(vector_store_kwargs={\"where\": lance_filter})\nresponse = retriever.retrieve(\"What did the author do growing up?\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from a LanceDB Table (TypeScript)\nDESCRIPTION: Demonstrates how to delete rows from a table in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.delete(\"item = 'more data'\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.delete(\"item = 'more data'\");\n```\n\n----------------------------------------\n\nTITLE: Creating Float16 Tables in TypeScript\nDESCRIPTION: Shows how to create tables with float16 vectors in TypeScript using both the new and deprecated packages.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_f16_table\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/basic_legacy.ts:create_f16_table\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset Structure for GraphRAG\nDESCRIPTION: Command to initialize the structure for indexing a dataset using GraphRAG.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/graph_rag.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m graphrag.index --init --root dataset-dir\n```\n\n----------------------------------------\n\nTITLE: Replace Range Operations in LanceDB with Python (Async)\nDESCRIPTION: This code snippet demonstrates how to replace a range of rows in LanceDB using the merge_insert API with Python's asynchronous interface. It replaces all matching chunks for a given document ID, deleting any that are not in the new data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_merge_insert.py:replace_range_async\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bits per Sub-vector\nDESCRIPTION: Specifies the number of bits used to encode each sub-vector during quantization. Must be either 4 or 8 bits. Higher values increase accuracy but decrease search speed. Default is 8 bits.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional numBits: number;\n```\n\n----------------------------------------\n\nTITLE: Deleting from a List of Values in Python\nDESCRIPTION: Examples showing how to delete rows from a LanceDB table by filtering on a list of values with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_list_values\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:delete_list_values_async\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing LanceDB Table in TypeScript\nDESCRIPTION: Performs optimization operations on the table including compaction, pruning, and index optimization.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nabstract optimize(options?): Promise<OptimizeStats>\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Neighbor Count\nDESCRIPTION: Sets the number of neighbors to maintain for each vector in the HNSW graph. Controls search speed and accuracy tradeoff.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional m: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Array Packing in TypeScript\nDESCRIPTION: A function that takes an array of numbers as input and returns a packed array of numbers. This appears to be a utility function for data compression or efficient storage in the LanceDB library.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/packBits.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction packBits(data): number[]\n```\n\n----------------------------------------\n\nTITLE: Downloading the QA Dataset for Fine-tuning\nDESCRIPTION: Downloads a synthetic QA dataset generated from the LLama2 review paper. This dataset will be used for fine-tuning the embedding model.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!wget https://raw.githubusercontent.com/AyushExel/assets/main/data_qa.csv\n```\n\n----------------------------------------\n\nTITLE: Version Restoration\nDESCRIPTION: Restores the table to a previous version and displays the result.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.checkout(2)\nawait async_table.restore()\nawait async_table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Connecting to AWS S3 using TypeScript\nDESCRIPTION: Code examples for connecting to AWS S3 using TypeScript with both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"s3://bucket/path\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\"s3://bucket/path\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Database URI in LanceDB\nDESCRIPTION: A getter method that returns the URI of the connected database. This implements the Connection interface requirement for providing database location information.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n• `get` **uri**(): `string`\n\n#### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Embedding Function in TypeScript\nDESCRIPTION: Method to fetch an embedding function by name with generic type parameter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget<T>(name): undefined | EmbeddingFunctionCreate<T>\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in LanceDB with TypeScript\nDESCRIPTION: Removes a table from the database. This method permanently deletes the table and all its data, requiring only the table name as a parameter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **dropTable**(`name`): `Promise`\\<`void`\\>\n\nDrop an existing table.\n\n#### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `name` | `string` | The name of the table to drop. |\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in Python (Async API)\nDESCRIPTION: This snippet shows how to import LanceDB and connect to a database using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:import-lancedb\"\n--8<-- \"python/python/tests/docs/test_python.py:connect_to_lancedb_async\"\n```\n\n----------------------------------------\n\nTITLE: Merging Vector Data\nDESCRIPTION: Merges vector embeddings into the main table using ID column\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntable.merge(embeddings, left_on=\"id\")\ntable.head().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Defining AddColumnsSql Interface in TypeScript\nDESCRIPTION: This snippet defines the AddColumnsSql interface with two properties: 'name' for the new column name, and 'valueSql' for the SQL expression to populate the column values.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/AddColumnsSql.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AddColumnsSql {\n    name: string;\n    valueSql: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a LocalConnection in TypeScript\nDESCRIPTION: Creates a new LocalConnection instance with the provided database and connection options. This is the entry point for working with a local LanceDB database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **new LocalConnection**(`db`, `options`)\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `db` | `any` |\n| `options` | [`ConnectionOptions`](../interfaces/ConnectionOptions.md) |\n```\n\n----------------------------------------\n\nTITLE: Replace Range Operations in LanceDB with TypeScript\nDESCRIPTION: This code snippet demonstrates how to replace a range of rows in LanceDB using the mergeInsert API with TypeScript. It replaces all matching chunks for a given document ID, deleting any that are not in the new data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables/merge_insert.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/merge_insert.test.ts:replace_range\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Number of IVF Partitions\nDESCRIPTION: Optional parameter to set the number of IVF partitions. Defaults to square root of row count. Affects search performance balance between partition selection and within-partition search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfFlatOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional numPartitions: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing analyzePlan Method in TypeScript\nDESCRIPTION: Defines the analyzePlan method which executes the query and returns the physical query plan with runtime metrics. This is useful for debugging and performance analysis.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nanalyzePlan(): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Embedding Model in Python\nDESCRIPTION: This snippet demonstrates how to initialize an OpenAI embedding model using the LanceDB registry. It creates a configured instance of the 'text-embedding-ada-002' model.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/default_embedding_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodel = get_registry()\n          .get(\"openai\")\n          .create(name=\"text-embedding-ada-002\")\n```\n\n----------------------------------------\n\nTITLE: Setting EF Construction Parameter\nDESCRIPTION: Optional parameter that controls the number of candidates evaluated during HNSW graph construction, balancing build speed and accuracy. Default is 300.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional efConstruction: number;\n```\n\n----------------------------------------\n\nTITLE: Querying Similarity Index in FiftyOne with Python\nDESCRIPTION: Python code to query the created similarity index in FiftyOne, returning the top 10 most similar samples to a given query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Step 4: Query your data\nquery = dataset.first().id  # query by sample ID\nview = dataset.sort_by_similarity(\n    query, \n    brain_key=\"lancedb_index\",\n    k=10,  # limit to 10 most similar samples\n)\n```\n\n----------------------------------------\n\nTITLE: LanceDB Cloud Configuration\nDESCRIPTION: Setting up LanceDB cloud connection with authentication and region specification\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb_url = \"db://lang_test\" # url of db you created\napi_key = \"xxxxx\" # your API key\nregion=\"us-east-1-dev\"  # your selected region\n\nvector_store = LanceDB(\n    uri=db_url,\n    api_key=api_key,\n    region=region,\n    embedding=embeddings,\n    table_name='langchain_test'\n    )\n```\n\n----------------------------------------\n\nTITLE: Incremental Indexing for FTS in Rust\nDESCRIPTION: Demonstrates how to add new records to a table and optimize the FTS index in Rust, allowing for efficient updates to the search index when adding new data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nlet more_data: Box<dyn RecordBatchReader + Send> = create_some_records()?;\ntbl.add(more_data).execute().await?;\ntbl.optimize(OptimizeAction::All).execute().await?;\n```\n\n----------------------------------------\n\nTITLE: Updating Scalar Indices in TypeScript\nDESCRIPTION: Shows how to update scalar indices after adding new data to a table in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/scalar_index.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.add([{ vector: [7, 8], book_id: 4 }]);\nawait tbl.optimize();\n```\n\n----------------------------------------\n\nTITLE: Storage Options Property in TypeScript\nDESCRIPTION: This property allows for configuration of object storage options. It can override options set on the connection and inherits unspecified options from the connection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional storageOptions: Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Jina Embeddings with LanceDB\nDESCRIPTION: This code demonstrates the complete workflow for using Jina embeddings with LanceDB. It includes setting up the API key, creating an embedding function with a specific model, defining a Pydantic model with vector fields, and adding data to a LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/jina_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport lancedb\nfrom lancedb.pydantic import LanceModel, Vector\nfrom lancedb.embeddings import EmbeddingFunctionRegistry\n\nos.environ['JINA_API_KEY'] = 'jina_*'\n\njina_embed = EmbeddingFunctionRegistry.get_instance().get(\"jina\").create(name=\"jina-embeddings-v2-base-en\")\n\n\nclass TextModel(LanceModel):\n    text: str = jina_embed.SourceField()\n    vector: Vector(jina_embed.ndims()) = jina_embed.VectorField()\n\n\ndata = [{\"text\": \"hello world\"},\n        {\"text\": \"goodbye world\"}]\n\ndb = lancedb.connect(\"~/.lancedb-2\")\ntbl = db.create_table(\"test\", schema=TextModel, mode=\"overwrite\")\n\ntbl.add(data)\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Property for LanceDB Cloud in TypeScript\nDESCRIPTION: This property definition specifies an optional API key for LanceDB Cloud. It can also be set via the LANCEDB_API_KEY environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional apiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB with Options Object in TypeScript\nDESCRIPTION: This overloaded version of the connect function uses a single options object that includes the URI and other connection parameters.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction connect(options): Promise<Connection>\n```\n\n----------------------------------------\n\nTITLE: Listing All Tables in a LanceDB Database\nDESCRIPTION: Shows how to retrieve a list of all table names in a LanceDB database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndb.table_names()\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Pre-filtering in TypeScript\nDESCRIPTION: Shows how to apply a pre-filter condition to full-text search results in TypeScript to narrow down matches based on metadata before performing the search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl\n.search(\"puppy\")\n.select([\"id\", \"doc\"])\n.limit(10)\n.where(\"meta='foo'\")\n.prefilter(true)\n.toArray();\n```\n\n----------------------------------------\n\nTITLE: Defining FullTextQueryType Enum in TypeScript\nDESCRIPTION: This enumeration defines the types of full-text queries supported in LanceDB. It includes Match for term search, MatchPhrase for exact phrase matching, Boost for relevance score boosting, and MultiMatch for searching across multiple fields.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/enumerations/FullTextQueryType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum FullTextQueryType {\n  Boost = \"boost\",\n  Match = \"match\",\n  MatchPhrase = \"match_phrase\",\n  MultiMatch = \"multi_match\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incremental Indexing for FTS in Python\nDESCRIPTION: Demonstrates how to add new records to a table and incrementally update the FTS index by optimizing the table. This avoids reindexing the entire table when adding new data, improving efficiency for large tables.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntbl.add([{\"vector\": [3.1, 4.1], \"text\": \"Frodo was a happy puppy\"}])\ntbl.optimize()\n```\n\n----------------------------------------\n\nTITLE: Defining IndexStatus Enumeration in TypeScript for LanceDB\nDESCRIPTION: This code snippet defines an enumeration called IndexStatus with four possible states: Pending, Indexing, Done, and Failed. Each state is associated with a string value. This enumeration is likely used to represent the current status of an indexing operation in the LanceDB system.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/enums/IndexStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum IndexStatus {\n  Pending = \"pending\",\n  Indexing = \"indexing\",\n  Done = \"done\",\n  Failed = \"failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Async LanceDB Connection\nDESCRIPTION: Creates an asynchronous connection to a local LanceDB instance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\"~/.lancedb\")\n```\n\n----------------------------------------\n\nTITLE: Defining Path Property in ColumnAlteration Interface\nDESCRIPTION: Required string property that specifies the dot-separated path to the target column. Supports both top-level and nested column paths.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ColumnAlteration.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npath: string;\n```\n\n----------------------------------------\n\nTITLE: Initializing EmbeddingFunctionRegistry in TypeScript\nDESCRIPTION: Constructor for creating a new instance of the EmbeddingFunctionRegistry class.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew EmbeddingFunctionRegistry(): EmbeddingFunctionRegistry\n```\n\n----------------------------------------\n\nTITLE: Implementing SentenceTransformerEmbeddings in Python\nDESCRIPTION: Example of creating a custom TextEmbeddingFunction for sentence transformer models in Python. The implementation includes generating embeddings, determining vector dimensions, and caching the model instance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/custom_embedding_function.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.embeddings import register\nfrom lancedb.util import attempt_import_or_raise\n\n@register(\"sentence-transformers\")\nclass SentenceTransformerEmbeddings(TextEmbeddingFunction):\n    name: str = \"all-MiniLM-L6-v2\"\n    # set more default instance vars like device, etc.\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._ndims = None\n\n    def generate_embeddings(self, texts):\n        return self._embedding_model().encode(list(texts), ...).tolist()\n\n    def ndims(self):\n        if self._ndims is None:\n            self._ndims = len(self.generate_embeddings(\"foo\")[0])\n        return self._ndims\n\n    @cached(cache={})\n    def _embedding_model(self):\n        return sentence_transformers.SentenceTransformer(name)\n```\n\n----------------------------------------\n\nTITLE: Displaying LanceDB Table Information in TypeScript\nDESCRIPTION: Returns a brief description of the table as a string.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nabstract display(): string\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Schema Classes in Python for LanceDB\nDESCRIPTION: Demonstrates how to create nested schema classes using Pydantic BaseModel for use with LanceDB tables. This includes a Document class nested within a NestedSchema class.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:import-pydantic-basemodel\"\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-Document\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:class-NestedSchema\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to MinIO with LanceDB in Python\nDESCRIPTION: This code snippet demonstrates how to connect LanceDB to a MinIO instance using S3-compatible API. It requires setting environment variables for the MinIO endpoint and credentials, then using lancedb.connect() with the MinIO bucket name.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlancedb.connect(\"s3://minio_bucket_name\")\n```\n\n----------------------------------------\n\nTITLE: GPU-Accelerated Index Creation on MacOS\nDESCRIPTION: Example of creating an IVF_PQ index using GPU acceleration on MacOS with MPS for Apple Silicon. This requires PyTorch 2.0+ installed.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create index using MPS on Apple Silicon.\ntbl.create_index(\n    num_partitions=256,\n    num_sub_vectors=96,\n    accelerator=\"mps\"\n)\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Pandas DataFrame\nDESCRIPTION: Imports pandas and loads the CSV file into a DataFrame for processing.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv(\"rick_and_morty_quotes.csv\")\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Setting IVF Partition Count\nDESCRIPTION: Defines the number of IVF partitions to create. Default is the square root of the row count. Affects search performance through partition selection and within-partition search speed.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional numPartitions: number;\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB JavaScript SDK via NPM\nDESCRIPTION: Command to install the LanceDB JavaScript client library using NPM package manager. Downloads the appropriate native library for the user's platform.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lancedb/lancedb\n```\n\n----------------------------------------\n\nTITLE: Getting Variable Value in TypeScript\nDESCRIPTION: Method to retrieve a variable value by name from the registry.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetVar(name): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Setting storage options for a specific table in Python\nDESCRIPTION: Examples of passing storage options when creating a table using Python's sync and async APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"s3://bucket/path\")\ntable = db.create_table(\n    \"table\",\n    [{\"a\": 1, \"b\": 2}],\n    storage_options={\"timeout\": \"60s\"}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\"s3://bucket/path\")\nasync_table = await async_db.create_table(\n    \"table\",\n    [{\"a\": 1, \"b\": 2}],\n    storage_options={\"timeout\": \"60s\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Condition\nDESCRIPTION: Demonstrates deletion of records based on a WHERE condition.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.delete(\"author != 'Richard Daniel Sanchez'\")\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Column Selection in Python (Async API)\nDESCRIPTION: Example of vector search with column projection using a select clause in the asynchronous Python API. This allows retrieving only specific columns in the results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_index.py:vector_search_async_with_select\"\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up Ollama Assistant\nDESCRIPTION: This code snippet shows how to import required libraries and set up an Ollama-based assistant using phidata and LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.prompt import Prompt\nfrom phi.assistant import Assistant\nfrom phi.knowledge.text import TextKnowledgeBase\nfrom phi.vectordb.lancedb import LanceDb\nfrom phi.llm.ollama import Ollama\nfrom phi.embedder.ollama import OllamaEmbedder\nfrom transcript import extract_transcript\n\n# The code below creates a file \"transcript.txt\" in the directory, the txt file will be used below\nyoutube_url = \"https://www.youtube.com/watch?v=Xs33-Gzl8Mo\"\nsegment_duration = 20\ntranscript_text,dict_transcript = extract_transcript(youtube_url,segment_duration)\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3-compatible stores with TypeScript (vectordb deprecated)\nDESCRIPTION: Shows how to connect LanceDB to S3-compatible stores using the deprecated vectordb TypeScript package. It includes region and endpoint specifications in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\n    \"s3://bucket/path\",\n    {\n        storageOptions: {\n            region: \"us-east-1\",\n            endpoint: \"http://minio:9000\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TableLike Type Alias in TypeScript for LanceDB\nDESCRIPTION: This code snippet defines a type alias named TableLike that can be either an ArrowTable or a generic object. This type is used in the LanceDB library to allow flexible data input formats when working with tables.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/TableLike.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableLike: ArrowTable | object;\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table\nDESCRIPTION: Drops existing table if present and creates a new table from the pandas DataFrame.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait async_db.drop_table(\"rick_and_morty\")\nasync_table = await async_db.create_table(\"rick_and_morty\", df, mode=\"overwrite\")\nawait async_table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutConfig Interface in TypeScript\nDESCRIPTION: This snippet defines the TimeoutConfig interface with three optional properties for configuring connection, pool idle, and read timeouts. Each property can be set programmatically or through environment variables.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TimeoutConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimeoutConfig {\n    optional connectTimeout: number;\n    optional poolIdleTimeout: number;\n    optional readTimeout: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TextEmbeddingFunction Constructor Declaration\nDESCRIPTION: Constructor declaration for the TextEmbeddingFunction class that inherits from EmbeddingFunction.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TextEmbeddingFunction<M>(): TextEmbeddingFunction<M>\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table in TypeScript\nDESCRIPTION: Demonstrates how to create an empty LanceDB table using TypeScript with the @lancedb/lancedb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:create_empty_table\"\n```\n\n----------------------------------------\n\nTITLE: Declaring config Property in IndexOptions\nDESCRIPTION: This code declares the optional config property of type Index in the IndexOptions interface. It allows for advanced index configuration and specific index creation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional config: Index;\n```\n\n----------------------------------------\n\nTITLE: Checking if LanceDB Table is Open in TypeScript\nDESCRIPTION: Returns a boolean indicating whether the table is open and usable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nabstract isOpen(): boolean\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Dataset for LanceDB Retrieval Example\nDESCRIPTION: This code downloads a CSV file containing a synthetic QA dataset generated from the LLama2 review paper, which will be used for testing retrieval performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!wget https://raw.githubusercontent.com/AyushExel/assets/main/data_qa.csv\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI Embedding Function in Rust\nDESCRIPTION: Shows how to include the OpenAI feature in dependencies and initialize the OpenAI embedding function in Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n// Make sure to include the `openai` feature\n[dependencies]\nlancedb = {version = \"*\", features = [\"openai\"]}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local LanceDB Database in TypeScript\nDESCRIPTION: An example of connecting to a local LanceDB database using the connect function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst conn = await connect(\"/path/to/database\");\n```\n\n----------------------------------------\n\nTITLE: Setting Sample Rate for Training\nDESCRIPTION: Determines the number of vectors per partition to sample during IVF kmeans training. Default is 256. Total training sample size is sample_rate * num_partitions. Higher values may improve index quality.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional sampleRate: number;\n```\n\n----------------------------------------\n\nTITLE: Updating Table Records\nDESCRIPTION: Updates author names in the table using a WHERE clause and updates dictionary.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.update(where=\"author='Morty'\", updates={\"author\": \"Richard Daniel Sanchez\"})\nawait async_table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Handling for Embedding Functions\nDESCRIPTION: Demonstrates how to configure rate limit handling with exponential backoff for embedding functions by adjusting the max_retries parameter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclip = registry.get(\"open-clip\").create() # Defaults to 7 max retries\nclip = registry.get(\"open-clip\").create(max_retries=10) # Increase max retries to 10\nclip = registry.get(\"open-clip\").create(max_retries=0) # Retries disabled\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in LanceDB (TypeScript)\nDESCRIPTION: Shows how to drop (remove) a table in LanceDB using TypeScript, with examples for both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.dropTable(\"myTable\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.dropTable(\"myTable\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with DynamoDB Commit Store in JavaScript\nDESCRIPTION: Illustrates how to connect to an S3 bucket using LanceDB's JavaScript API with a DynamoDB commit store for concurrent writes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\n\nconst db = await lancedb.connect(\n    \"s3+ddb://bucket/path?ddbTableName=my-dynamodb-table\",\n);\n```\n\n----------------------------------------\n\nTITLE: Adding New Column with Expression\nDESCRIPTION: Adds a new column 'new_id' based on an expression of the existing 'id' column.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.add_columns({\"new_id\": \"id + 1\"})\nawait async_table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Setting LanceDB as Default Backend for FiftyOne in Python\nDESCRIPTION: Python code snippet showing how to set LanceDB as the default backend for similarity computations in FiftyOne.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport fiftyone.brain as fob\n#... rest of the code\nfob.compute_similarity(..., backend=\"lancedb\", ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring storage options with TypeScript\nDESCRIPTION: Examples of passing storage options when connecting to cloud storage using TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\n\nconst db = await lancedb.connect(\"s3://bucket/path\", {\n    storageOptions: {timeout: \"60s\"}\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\"s3://bucket/path\", {\n    storageOptions: {timeout: \"60s\"}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CreateTableOptions Interface in TypeScript for LanceDB\nDESCRIPTION: TypeScript interface definition for options when creating a LanceDB table. It includes properties for table name, data source, schema definition, embedding function for vector generation, and write configuration options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/CreateTableOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateTableOptions<T> {\n  name: string;\n  data?: Table<any> | Record<string, unknown>[];\n  schema?: Schema<any>;\n  embeddingFunction?: EmbeddingFunction<T>;\n  writeOptions?: WriteOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Specific Table in LanceDB with TypeScript\nDESCRIPTION: Drops an existing table in the LanceDB database. Takes the table name as a parameter and returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dropTable(name): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Listing LanceDB Tables in TypeScript\nDESCRIPTION: Shows how to list all tables in a LanceDB database using TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(await db.tableNames());\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the ConnectionOptions interface with various properties for configuring LanceDB connections. It includes options for local, cloud storage, and remote database connections, as well as authentication and performance settings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/ConnectionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ConnectionOptions {\n  uri: string;\n  apiKey?: string;\n  awsCredentials?: AwsCredentials;\n  awsRegion?: string;\n  storageOptions?: Record<string, string>;\n  region?: string;\n  hostOverride?: string;\n  timeout?: number;\n  readConsistencyInterval?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-vector Count\nDESCRIPTION: Sets the number of sub-vectors for Product Quantization. Default is dimension/16 or dimension/8. Affects vector compression ratio and search efficiency. Optimal values are those divisible by 8 or 16 for SIMD optimization.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional numSubVectors: number;\n```\n\n----------------------------------------\n\nTITLE: Constructing MultiMatchQuery in TypeScript\nDESCRIPTION: Creates a new instance of MultiMatchQuery with specified query text, columns to search, and optional boost factors. This constructor initializes a multi-match full-text query object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MultiMatchQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MultiMatchQuery(\n   query,\n   columns,\n   options?): MultiMatchQuery\n```\n\n----------------------------------------\n\nTITLE: Displaying LanceDB Connection Information in TypeScript\nDESCRIPTION: Returns a brief description of the LanceDB connection as a string.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nabstract display(): string\n```\n\n----------------------------------------\n\nTITLE: Setting Eventual Consistency in TypeScript\nDESCRIPTION: Shows how to configure eventual consistency with a custom interval in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await lancedb.connect({ uri: \"./.lancedb\", readConsistencyInterval: 5 });\nconst tbl = await db.openTable(\"my_table\");\n```\n\n----------------------------------------\n\nTITLE: Opening Existing LanceDB Table in TypeScript\nDESCRIPTION: Demonstrates how to open an existing table in a LanceDB database using TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst tbl = await db.openTable(\"my_table\");\n```\n\n----------------------------------------\n\nTITLE: Setting Max Iterations for IVF Kmeans Training\nDESCRIPTION: Optional parameter to control the maximum number of iterations for training IVF kmeans. Default value is 50. Higher values may improve index quality but with diminishing returns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfFlatOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxIterations: number;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Embedding Functions in Python\nDESCRIPTION: Example of utilizing a custom embedding function to create a table schema, ingest data, and perform vector search in LanceDB Python.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/custom_embedding_function.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.pydantic import LanceModel, Vector\n\nregistry = EmbeddingFunctionRegistry.get_instance()\nstransformer = registry.get(\"sentence-transformers\").create()\n\nclass TextModelSchema(LanceModel):\n    vector: Vector(stransformer.ndims) = stransformer.VectorField()\n    text: str = stransformer.SourceField()\n\ntbl = db.create_table(\"table\", schema=TextModelSchema)\n\ntbl.add(pd.DataFrame({\"text\": [\"halo\", \"world\"]}))\nresult = tbl.search(\"world\").limit(5)\n```\n\n----------------------------------------\n\nTITLE: Getting Table Metadata in TypeScript\nDESCRIPTION: Method to retrieve table metadata from embedding function configurations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetTableMetadata(functions): Map<string, string>\n```\n\n----------------------------------------\n\nTITLE: Deleting Unmatched Rows in MergeInsertBuilder\nDESCRIPTION: Configures the merge operation to delete rows that exist only in the target table. An optional condition can be provided to limit what data is deleted.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MergeInsertBuilder.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwhenNotMatchedBySourceDelete(options?): MergeInsertBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating an ANN Index in LanceDB (Rust)\nDESCRIPTION: Demonstrates how to create an Approximate Nearest Neighbor (ANN) index in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\ntable\n    .create_index(\n        CreateIndexConfig::ivf_pq()\n            .num_partitions(4)\n            .num_sub_vectors(4)\n            .build()?,\n    )\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Generating answers with OpenAI Completion API\nDESCRIPTION: Code to send the constructed prompt to OpenAI's Completion API and display the generated answer based on the retrieved transcript contexts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await openai.createCompletion({\n  model: 'text-davinci-003',\n  prompt: createPrompt(query, results),\n  max_tokens: 400,\n  temperature: 0,\n  top_p: 1,\n  frequency_penalty: 0,\n  presence_penalty: 0\n})\nconsole.log(response.data.choices[0].text)\n```\n\n----------------------------------------\n\nTITLE: Configuring LanceDB Parameters in FiftyOne Compute Similarity Function\nDESCRIPTION: Python code demonstrating how to directly pass LanceDB configuration parameters to the compute_similarity() function in FiftyOne.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlancedb_index = fob.compute_similarity(\n    ...\n    backend=\"lancedb\",\n    brain_key=\"lancedb_index\",\n    table_name=\"your-table\",\n    metric=\"euclidean\",\n    uri=\"/tmp/lancedb\",\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 Express with Python Async API\nDESCRIPTION: Shows how to connect LanceDB to an S3 Express endpoint using the Python asynchronous API. It specifies the s3_express option and uses a bucket name with the required suffix.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"s3://my-bucket--use1-az4--x-s3/path\",\n    storage_options={\n        \"region\": \"us-east-1\",\n        \"s3_express\": \"true\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Methods to Data Models with Pydantic\nDESCRIPTION: Shows how to extend the data model with a utility method that loads and returns an image from a stored path.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Pets(LanceModel):\n    vector: Vector(clip.ndims()) = clip.VectorField()\n    image_uri: str = clip.SourceField()\n\n    @property\n    def image(self):\n        return Image.open(self.image_uri)\n```\n\n----------------------------------------\n\nTITLE: Using cleanupOlderThan Property in TypeScript\nDESCRIPTION: Demonstrates how to use the cleanupOlderThan property to delete older versions of a table. It includes examples of deleting versions older than 1 day and deleting all versions except the current one.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/OptimizeOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete all versions older than 1 day\nconst olderThan = new Date();\nolderThan.setDate(olderThan.getDate() - 1));\ntbl.cleanupOlderVersions(olderThan);\n\n// Delete all versions except the current version\ntbl.cleanupOlderVersions(new Date());\n```\n\n----------------------------------------\n\nTITLE: Listing LanceDB Tables (Sync API)\nDESCRIPTION: Demonstrates how to list all tables in a LanceDB database using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:list_tables\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from a LanceDB Table (Rust)\nDESCRIPTION: Shows how to delete rows from a table in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\ntable.delete(\"item = 'more data'\").await?\n```\n\n----------------------------------------\n\nTITLE: Defining IVF Partition Count\nDESCRIPTION: Optional parameter to specify the number of IVF partitions for the index. Recommended to use small values, with 1 being optimal for most cases.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional numPartitions: number;\n```\n\n----------------------------------------\n\nTITLE: Constructing a PhraseQuery in TypeScript\nDESCRIPTION: Creates a new instance of PhraseQuery with a specified query string and column name. This constructor initializes a phrase-based full-text query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/PhraseQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PhraseQuery(query, column): PhraseQuery\n```\n\n----------------------------------------\n\nTITLE: Configuring Neighbor Count Parameter\nDESCRIPTION: Optional parameter to set the number of neighbors for each vector in the HNSW graph. Default is 20.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional m: number;\n```\n\n----------------------------------------\n\nTITLE: Manual Update Check in Python (Sync)\nDESCRIPTION: Demonstrates how to manually check for updates using checkout_latest() in synchronous Python API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ntbl.checkout_latest()\n```\n\n----------------------------------------\n\nTITLE: Listing Table Names in LanceDB (Python)\nDESCRIPTION: Shows how to get a list of all table names in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(db.table_names())\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(await db.table_names())\n```\n\n----------------------------------------\n\nTITLE: Setting Sample Rate for IVF Kmeans Training\nDESCRIPTION: Optional parameter to control the number of vectors sampled per partition during IVF kmeans training. Default is 256. Total training vectors equals sample_rate * num_partitions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfFlatOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional sampleRate: number;\n```\n\n----------------------------------------\n\nTITLE: Updating Data in vectordb (Deprecated) TypeScript\nDESCRIPTION: Example showing how to update rows in a LanceDB table using the deprecated vectordb package in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"vectordb\");\n\nconst db = await lancedb.connect(\"./.lancedb\");\n\nconst data = [\n    {x: 1, vector: [1, 2]},\n    {x: 2, vector: [3, 4]},\n    {x: 3, vector: [5, 6]},\n];\nconst tbl = await db.createTable(\"my_table\", data)\n\nawait tbl.update({ where: \"x = 2\", values: {vector: [10, 10]} })\n```\n\n----------------------------------------\n\nTITLE: Defining DataType Property in ColumnAlteration Interface\nDESCRIPTION: Optional property that specifies a new data type for the column. Supports type casting within the same general type category (integers, floats, strings) but not across categories.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ColumnAlteration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional dataType: string | DataType<Type, any>;\n```\n\n----------------------------------------\n\nTITLE: Creating Index from Existing Table\nDESCRIPTION: Show how to create an index from an existing LanceDB table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndel index\n\nvec_store = LanceDBVectorStore.from_table(vector_store._table)\nindex = VectorStoreIndex.from_vector_store(vec_store)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cache Variables for LanceDB and LangChain\nDESCRIPTION: Sets up global variables to cache the LanceDB database and LangChain document source. These variables are used throughout the application to maintain state between serverless function calls.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndocsearch = None\ndocs_path = Path(\"docs.pkl\")\ndb_path = Path(\"lancedb\")\n```\n\n----------------------------------------\n\nTITLE: Loading Documents with SimpleDirectoryReader\nDESCRIPTION: Load documents from a specified directory using SimpleDirectoryReader.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocuments = SimpleDirectoryReader(\"./data/paul_graham/\").load_data()\nprint(\"Document ID:\", documents[0].doc_id, \"Document Hash:\", documents[0].hash)\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Table with Default Vector Column in TypeScript\nDESCRIPTION: Example of using makeArrowTable with a default 'vector' column. It automatically converts the 'vector' column into a fixed-size list array of float32 type.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/makeArrowTable.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = new Schema([\n  new Field(\"a\", new Float64()),\n  new Field(\"b\", new Float64()),\n  new Field(\n    \"vector\",\n    new FixedSizeList(3, new Field(\"item\", new Float32()))\n  ),\n]);\nconst table = makeArrowTable([\n  { a: 1, b: 2, vector: [1, 2, 3] },\n  { a: 4, b: 5, vector: [4, 5, 6] },\n  { a: 7, b: 8, vector: [7, 8, 9] },\n]);\nassert.deepEqual(table.schema, schema);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Timezone Validator for LanceDB Model\nDESCRIPTION: Illustrates how to create a custom field validator for ensuring correct timezone in a LanceDB Pydantic model. It includes error handling for mismatched timezones.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom lancedb.pydantic import LanceModel\nfrom pydantic import Field, field_validator, ValidationError, ValidationInfo\n\ntzname = \"America/New_York\"\ntz = ZoneInfo(tzname)\n\nclass TestModel(LanceModel):\n    dt_with_tz: datetime = Field(json_schema_extra={\"tz\": tzname})\n\n    @field_validator('dt_with_tz')\n    @classmethod\n    def tz_must_match(cls, dt: datetime) -> datetime:\n        assert dt.tzinfo == tz\n        return dt\n\nok = TestModel(dt_with_tz=datetime.now(tz))\n\ntry:\n    TestModel(dt_with_tz=datetime.now(ZoneInfo(\"Asia/Shanghai\")))\n    assert 0 == 1, \"this should raise ValidationError\"\nexcept ValidationError:\n    print(\"A ValidationError was raised.\")\n    pass\n```\n\n----------------------------------------\n\nTITLE: Deleting from a List of Values in TypeScript\nDESCRIPTION: Example showing how to delete rows from a LanceDB table by filtering on a list of values in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst to_remove = [1, 5];\nawait tbl.delete(`id IN (${to_remove.join(\",\")})`)\nawait tbl.countRows() // Returns 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Explain Plan Method in TypeScript\nDESCRIPTION: Defines the explainPlan method which generates an explanation of the query execution plan. It can provide a more detailed explanation when the verbose parameter is set to true.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexplainPlan(verbose): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Aggregation Query with DuckDB\nDESCRIPTION: Example of performing an aggregation operation (mean) on LanceDB data using DuckDB SQL\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/duckdb.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nduckdb.query(\"SELECT mean(price) FROM arrow_table\")\n```\n\n----------------------------------------\n\nTITLE: Performing Text Search with ImageBind\nDESCRIPTION: Executes a text-based search query using ImageBind embeddings to find semantically similar entries in the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/imagebind_embedding.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nquery = \"an animal which flies and tweets\" \nactual = table.search(query).limit(1).to_pydantic(ImageBindModel)[0]\nprint(actual.text == \"bird\")\n```\n\n----------------------------------------\n\nTITLE: Setting HNSW Construction Parameters\nDESCRIPTION: Configures the efConstruction parameter which controls the number of candidates evaluated during HNSW graph construction. Affects build speed and accuracy tradeoff.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional efConstruction: number;\n```\n\n----------------------------------------\n\nTITLE: Closing LanceDB Table in TypeScript\nDESCRIPTION: Closes the table and releases underlying resources. Safe to call multiple times.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nabstract close(): void\n```\n\n----------------------------------------\n\nTITLE: Setting KMeans Training Sample Rate\nDESCRIPTION: Configures the sampling rate for KMeans training data selection. Affects the total number of vectors used for training partitions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional sampleRate: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Cache Size in TypeScript\nDESCRIPTION: Optional property to set the size of the index cache in terms of number of entries. The entry definition varies by index type - one entry per partition for IVF indices and one entry for the entire BTREE index. Higher values improve performance for larger datasets but consume more RAM.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/OpenTableOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional indexCacheSize: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing openTable Method for LanceDB Connection in TypeScript\nDESCRIPTION: Defines the openTable method to access an existing table in the database, with an optional embedding function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **openTable**\\<`T`\\>(`name`, `embeddings?`): `Promise`\\<[`Table`](Table.md)\\<`T`\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Setting KMeans Training Iterations\nDESCRIPTION: Configures the maximum number of iterations for KMeans training when building IVF partitions. Default is 50 iterations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxIterations: number;\n```\n\n----------------------------------------\n\nTITLE: Checking Table Size and Deleting Records with Price Filter\nDESCRIPTION: Demonstrates checking the number of records in a table and deleting records that match a specific price value.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprint(len(tbl))\n      \ntbl.delete(\"price = 20.0\")\n      \nlen(tbl)\n```\n\n----------------------------------------\n\nTITLE: Using the Embedding API with OpenAI in LanceDB (Rust)\nDESCRIPTION: Shows how to use the Embedding API with OpenAI in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nuse lancedb::embeddings::openai::OpenAIEmbedding;\nuse lancedb::Table;\n\nlet embedding = OpenAIEmbedding::new(\n    \"text-embedding-ada-002\".to_string(),\n    std::env::var(\"OPENAI_API_KEY\").unwrap(),\n);\n\nlet data = vec![\n    serde_json::json!({\"text\": \"This is a test\", \"label\": \"test\"}),\n    serde_json::json!({\"text\": \"This is another test\", \"label\": \"test\"}),\n    serde_json::json!({\"text\": \"This is a third test\", \"label\": \"test\"}),\n];\n\nlet table: Table = db\n    .create_table(\"my_table\", data)\n    .with_embedding(embedding.clone())\n    .execute()\n    .await?\n    .into();\n\nlet results = table\n    .search()\n    .query(\"This is a query\")\n    .with_embedding(embedding)\n    .limit(2)\n    .execute()\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Performing Audio Search with ImageBind\nDESCRIPTION: Executes an audio-based search query using ImageBind embeddings to find similar entries in the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/imagebind_embedding.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nquery_audio = \"./assets/car_audio2.wav\" #download an audio clip and enter path here\nactual = table.search(query_audio).limit(1).to_pydantic(ImageBindModel)[0]\nprint(actual.text == \"car\")\n```\n\n----------------------------------------\n\nTITLE: Creating AI Assistant with OpenAI GPT-4\nDESCRIPTION: Sets up an AI assistant using OpenAI's GPT-4 model to analyze YouTube video transcripts. Configures the assistant with specific instructions for handling transcript analysis and generating highlights.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# define an assistant with gpt-4o-mini llm and reference to the knowledge base created above\nassistant = Assistant(\n    llm=OpenAIChat(model=\"gpt-4o-mini\", max_tokens=1000, temperature=0.3,api_key = openai.api_key),\n    description=\"\"\"You are an Expert in explaining youtube video transcripts. You are a bot that takes transcript of a video and answer the question based on it.\n    \n    This is transcript for the above timestamp: {relevant_document}\n    The user input is: {user_input}\n    generate highlights only when asked.\n    When asked to generate highlights from the video, understand the context for each timestamp and create key highlight points, answer in following way - \n    [timestamp] - highlight 1\n    [timestamp] - highlight 2\n    ... so on\n    \n    Your task is to understand the user question, and provide an answer using the provided contexts. Your answers are correct, high-quality, and written by an domain expert. If the provided context does not contain the answer, simply state,'The provided context does not have the answer.'\"\"\",\n    knowledge_base=knowledge_base,\n    add_references_to_prompt=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing OpenAIEmbeddingFunction in TypeScript\nDESCRIPTION: Constructor for creating a new OpenAIEmbeddingFunction instance. It requires a source column name, an OpenAI API key, and optionally a model name (defaults to 'text-embedding-ada-002').\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/OpenAIEmbeddingFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **new OpenAIEmbeddingFunction**(`sourceColumn`, `openAIKey`, `modelName?`)\n\n#### Parameters\n\n| Name | Type | Default value |\n| :------ | :------ | :------ |\n| `sourceColumn` | `string` | `undefined` |\n| `openAIKey` | `string` | `undefined` |\n| `modelName` | `string` | `'text-embedding-ada-002'` |\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Index in TypeScript\nDESCRIPTION: Creates a bitmap index, which stores a bitmap for each distinct value in the column for every row. This index is best for low-cardinality columns with a small number of unique values.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic bitmap(): Index\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Method in TypeScript\nDESCRIPTION: Defines the offset method which sets the number of results to skip before returning query results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\noffset(offset): this\n```\n\n----------------------------------------\n\nTITLE: Configuring PQ Sub-vector Count\nDESCRIPTION: Optional parameter to set the number of sub-vectors for Product Quantization. Default is dimension/16 or dimension/8 depending on divisibility.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional numSubVectors: number;\n```\n\n----------------------------------------\n\nTITLE: Serving the QA Bot as a Web Endpoint with Modal\nDESCRIPTION: Command to serve the QA bot as a web endpoint through Modal. This makes the bot accessible via HTTP requests.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve modal_langchain.py\n```\n\n----------------------------------------\n\nTITLE: Installing LlamaIndex and LanceDB\nDESCRIPTION: Install the required packages: llama-index, llama-index-vector-stores-lancedb, and lancedb.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install llama-index llama-index-vector-stores-lancedb\n```\n\nLANGUAGE: python\nCODE:\n```\n%pip install lancedb==0.6.13 #Only required if the above cell installs an older version of lancedb (pypi package may not be released yet)\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns from LanceDB Table in TypeScript\nDESCRIPTION: Removes specified columns from the dataset. This is a metadata-only operation initially.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dropColumns(columnNames): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingFunctionCreate Interface Method in TypeScript\nDESCRIPTION: Interface definition for a create method that instantiates embedding functions. The method accepts optional configuration parameters and returns a CreateReturnType generic typed to the embedding function.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/EmbeddingFunctionCreate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(options?): CreateReturnType<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Text Search Method in TypeScript\nDESCRIPTION: Defines the fullTextSearch method which performs a full-text search on the table. It accepts either a string query or a FullTextQuery object, along with optional FullTextSearchOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfullTextSearch(query, options?): this\n```\n\n----------------------------------------\n\nTITLE: Loading Data into LanceDB Knowledge Base\nDESCRIPTION: Loads data into a LanceDB table knowledge base. Supports configuration options like recreate, upsert, and skip_existing for controlling how data is loaded.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nassistant.knowledge_base.load(recreate=False)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Sets up the necessary Python packages including LanceDB, Pandas, LangChain, OpenAI, and other related libraries.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install lancedb pandas langchain langchain_openai langchain-community pypdf openai cohere tiktoken sentence_transformers tantivy==0.20.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Distance Type in IvfPqOptions\nDESCRIPTION: Optional parameter to specify the distance metric used for vector comparisons. Supports l2 (Euclidean), cosine, and dot product distance types. The chosen distance type must be consistent between index creation and search operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional distanceType: \"l2\" | \"cosine\" | \"dot\";\n```\n\n----------------------------------------\n\nTITLE: Updating Rows in LanceDB Table using TypeScript\nDESCRIPTION: Demonstrates how to update rows in a LanceDB table using the update method. It shows updating a specific row based on a condition and then performing a search on the updated data.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Table.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst con = await lancedb.connect(\"./.lancedb\")\nconst data = [\n   {id: 1, vector: [3, 3], name: 'Ye'},\n   {id: 2, vector: [4, 4], name: 'Mike'},\n];\nconst tbl = await con.createTable(\"my_table\", data)\n\nawait tbl.update({\n  where: \"id = 2\",\n  values: { vector: [2, 2], name: \"Michael\" },\n})\n\nlet results = await tbl.search([1, 1]).execute();\n// Returns [\n//   {id: 2, vector: [2, 2], name: 'Michael'}\n//   {id: 1, vector: [3, 3], name: 'Ye'}\n// ]\n```\n\n----------------------------------------\n\nTITLE: Declaring replace Property in IndexOptions\nDESCRIPTION: This code declares the optional replace property of type boolean in the IndexOptions interface. It determines whether to replace an existing index or not, with a default value of true.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional replace: boolean;\n```\n\n----------------------------------------\n\nTITLE: Modified Cohere Reranker Implementation\nDESCRIPTION: Creates a custom reranker extending CohereReranker with additional filtering capabilities.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union\nimport pandas as pd\nfrom lancedb.rerankers import CohereReranker\n\nclass MofidifiedCohereReranker(CohereReranker):\n    def __init__(self, filters: Union[str, List[str]], **kwargs):\n        super().__init__(**kwargs)\n        filters = filters if isinstance(filters, list) else [filters]\n        self.filters = filters\n\n    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table)-> pa.Table:\n        combined_result = super().rerank_hybrid(query, vector_results, fts_results)\n        df = combined_result.to_pandas()\n        for filter in self.filters:\n            df = df.query(\"not text.str.contains(@filter)\")\n\n        return pa.Table.from_pandas(df)\n\nreranker = MofidifiedCohereReranker(filters=\"Table of Contents\")\n```\n\n----------------------------------------\n\nTITLE: Defining IndexOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the IndexOptions interface with two optional properties: config for specifying advanced index configuration, and replace for controlling index replacement behavior.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IndexOptions {\n    config?: Index;\n    replace?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a Full-text Search Index in LanceDB\nDESCRIPTION: Example showing how to create a LanceDB table, build a full-text search index on a text column, and perform a basic keyword search.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\n\nuri = \"data/sample-lancedb\"\ndb = lancedb.connect(uri)\n\ntable = db.create_table(\n    \"my_table\",\n    data=[\n        {\"id\": 1, \"vector\": [3.1, 4.1], \"title\": \"happy puppy\", \"content\": \"Frodo was a happy puppy\", \"meta\": \"foo\"},\n        {\"id\": 2, \"vector\": [5.9, 26.5], \"title\": \"playing kittens\", \"content\": \"There are several kittens playing around the puppy\", \"meta\": \"bar\"},\n    ],\n)\n\n# passing `use_tantivy=False` to use lance FTS index\n# `use_tantivy=True` by default\ntable.create_fts_index(\"content\", use_tantivy=True)\ntable.search(\"puppy\").limit(10).select([\"content\"]).to_list()\n# [{'text': 'Frodo was a happy puppy', '_score': 0.6931471824645996}]\n# ...\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning the Embedding Model\nDESCRIPTION: Executes the fine-tuning process on the selected embedding model using the prepared datasets and configuration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfinetune_engine.finetune( )\n\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Table\nDESCRIPTION: Converts vectors to PyArrow table and adds ID column for merging\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom lance.vector import vec_to_table\nimport numpy as np\nimport pyarrow as pa\n\nembeddings = vec_to_table(vectors)\nembeddings = embeddings.append_column(\"id\", pa.array(np.arange(len(table))+1))\nembeddings.to_pandas().head()\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in LanceDB\nDESCRIPTION: Sets environment variable to enable debug-level logging in LanceDB. This is particularly useful for diagnosing LanceDB Cloud related issues.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport LANCEDB_LOG=debug\n```\n\n----------------------------------------\n\nTITLE: Manual Update Check in Python (Async)\nDESCRIPTION: Shows how to manually check for updates using checkout_latest() in asynchronous Python API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.checkout_latest()\n```\n\n----------------------------------------\n\nTITLE: Defining Client Configuration Property for LanceDB Cloud in TypeScript\nDESCRIPTION: This property definition specifies an optional client configuration for the remote HTTP client in LanceDB Cloud.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional clientConfig: ClientConfig;\n```\n\n----------------------------------------\n\nTITLE: Evaluating Fine-tuned Model with Cohere Reranker\nDESCRIPTION: Evaluates the fine-tuned embedding model with a Cohere reranker using the hybrid search approach. This allows comparison with the base model to measure improvement from fine-tuning.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n#evaluate_all(\"data_qa.csv\", \"tuned_model/\", linear_combination_reranker)\nevaluate_all(\"data_qa.csv\", \"tuned_model/\", cohere_reranker)\n\n\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Read-Only Access\nDESCRIPTION: JSON policy that grants read-only access to a specific S3 bucket and prefix for use with LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n              \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<bucket>/<prefix>/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetBucketLocation\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<bucket>\",\n            \"Condition\": {\n                \"StringLike\": {\n                    \"s3:prefix\": [\n                        \"<prefix>/*\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB Database in Rust\nDESCRIPTION: Shows how to connect to a LanceDB database in Rust using asynchronous programming with Tokio.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> Result<()> {\n    --8<-- \"rust/lancedb/examples/simple.rs:connect\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existing LanceDB Table (Async API)\nDESCRIPTION: Demonstrates opening an existing table in a LanceDB database using the asynchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:open_table_async\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IVF Partition Count\nDESCRIPTION: Sets the number of IVF partitions for the index. Lower values recommended for HNSW, with higher values reducing peak memory usage during training.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswSqOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional numPartitions: number;\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Data with wget\nDESCRIPTION: Downloads a CSV file containing Rick and Morty quotes from an S3 bucket and displays the first few lines.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!wget http://vectordb-recipes.s3.us-west-2.amazonaws.com/rick_and_morty_quotes.csv\n!head rick_and_morty_quotes.csv\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation of necessary Python packages including tantivy, langchain components, and lancedb\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n! pip install tantivy\n! pip install -U langchain-openai langchain-community\n! pip install lancedb\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI API Key\nDESCRIPTION: Configure the OpenAI API key for creating embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openai\n\nopenai.api_key = \"sk-\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Unmatched Rows in MergeInsertBuilder\nDESCRIPTION: Configures the merge operation to insert rows that exist only in the source table into the target table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MergeInsertBuilder.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwhenNotMatchedInsertAll(): MergeInsertBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining IndexStatistics Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the IndexStatistics interface, including optional and required fields related to index statistics in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IndexStatistics {\n    optional distanceType: string;\n    indexType: string;\n    optional loss: number;\n    numIndexedRows: number;\n    optional numIndices: number;\n    numUnindexedRows: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Method for LocalTable in TypeScript\nDESCRIPTION: Defines the add method for inserting records into the LocalTable. It handles both Table and Record array inputs, and uses the embedding function if provided.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync add(data: Table<any> | Record<string, unknown>[]): Promise<number> {\n  this.checkElectron();\n  if (Array.isArray(data) && this._embeddings) {\n    data = await this._embeddings(data);\n  }\n  return this._tbl.add(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IVF_PQ Index in TypeScript (vectordb - deprecated)\nDESCRIPTION: Shows how to create an IVF_PQ vector index on a table using the deprecated vectordb TypeScript package. This example includes importing the library and ingesting data with index creation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n--8<--- \"docs/src/ann_indexes.ts:import\"\n\n--8<-- \"docs/src/ann_indexes.ts:ingest\"\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Column Selection in TypeScript (vectordb - deprecated)\nDESCRIPTION: Shows vector search with column projection using a select clause in the deprecated vectordb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/ann_indexes.ts:search3\"\n```\n\n----------------------------------------\n\nTITLE: Evaluating Base Model with Cohere Reranker\nDESCRIPTION: Evaluates the base embedding model (BGE-small-en-v1.5) with a Cohere reranker using the hybrid search approach on the full dataset.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom lancedb.rerankers import CohereReranker, LinearCombinationReranker\n\n\n#linear_combination_reranker = LinearCombinationReranker()\ncohere_reranker = CohereReranker(api_key=\"Jp48Rt3QuO4VSLWiFKhbgnx68QaDueC9XEqvWMQZ\")\n\n#evaluate_all(\"data_qa.csv\", \"BAAI/bge-small-en-v1.5\", linear_combination_reranker)\nhit_rate_bge_cohere = evaluate_all(\"data_qa.csv\", \"BAAI/bge-small-en-v1.5\", cohere_reranker)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Eventual Consistency in Python (Sync)\nDESCRIPTION: Example of configuring eventual consistency with a custom time interval in synchronous Python API. This allows for periodic update checks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\ndb = lance.connect(\"./data\", read_consistency_interval=timedelta(seconds=5))\ntbl = db.open_table(\"my_table\")\n```\n\n----------------------------------------\n\nTITLE: Checking Out Latest Table Version in LanceDB TypeScript\nDESCRIPTION: Sets the table back to the latest version, exiting time-travel mode.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nabstract checkoutLatest(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Modifying pipeline for data embedding in Python\nDESCRIPTION: Python code snippets to modify the pipeline for embedding a specific field (\"Title\") during data ingestion into LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dlt.destinations.adapters import lancedb_adapter\n```\n\nLANGUAGE: python\nCODE:\n```\nload_info = pipeline.run(\n    lancedb_adapter(\n        movies_source,\n        embed=\"Title\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Global Query with GraphRAG\nDESCRIPTION: Command to execute a global query using GraphRAG, providing a broad overview of the dataset.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/graph_rag.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m graphrag.query --root dataset-dir --method global \"query-question\"\n```\n\n----------------------------------------\n\nTITLE: Defining AwsCredentials Interface in TypeScript\nDESCRIPTION: This code snippet defines the AwsCredentials interface with three properties: accessKeyId, secretKey, and an optional sessionToken. These properties are used for AWS authentication in the LanceDB project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/AwsCredentials.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AwsCredentials {\n  accessKeyId: string;\n  secretKey: string;\n  sessionToken?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LanceDB Backend Parameters in JSON\nDESCRIPTION: JSON configuration for customizing LanceDB backend parameters in FiftyOne, including table name, metric, and URI.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"similarity_backends\": {\n        \"lancedb\": {\n            \"table_name\": \"your-table\",\n            \"metric\": \"euclidean\",\n            \"uri\": \"/tmp/lancedb\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Embedding Function in Rust\nDESCRIPTION: Code for initializing the OpenAI embedding function in the Rust SDK.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n--8<-- \"rust/lancedb/examples/openai.rs:imports\"\n--8<-- \"rust/lancedb/examples/openai.rs:openai_embeddings\"\n```\n\n----------------------------------------\n\nTITLE: Timeout Configuration in TypeScript\nDESCRIPTION: Optional configuration for timeout settings in LanceDB client\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ClientConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional timeoutConfig: TimeoutConfig;\n```\n\n----------------------------------------\n\nTITLE: Running the dlt pipeline\nDESCRIPTION: Command to execute the Python script that runs the dlt pipeline, ingesting data into LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython custom_source.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Distance Type for IVF_FLAT Index in TypeScript\nDESCRIPTION: Optional parameter to specify the distance metric used for building the index. Supports l2, cosine, dot, and hamming distance types. Default is 'l2'. The chosen distance type must match during both index training and searching.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfFlatOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional distanceType: \"l2\" | \"cosine\" | \"dot\" | \"hamming\";\n```\n\n----------------------------------------\n\nTITLE: Dropping Index from LanceDB Table in TypeScript\nDESCRIPTION: Removes an index from the table. Does not delete the index from disk immediately.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dropIndex(name): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Documenting distanceType Property in TypeScript\nDESCRIPTION: This snippet provides documentation for the optional distanceType property, which represents the type of distance function used by vector indices.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional distanceType: string;\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filter in LanceDB (Sync API)\nDESCRIPTION: This code demonstrates how to perform a vector similarity search with a filter using the LanceDB Python API and the synchronous interface.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/pandas_and_pyarrow.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_python.py:vector_search_with_filter\"\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in LanceDB (Python)\nDESCRIPTION: Demonstrates how to drop (remove) a table in LanceDB using Python, with both synchronous and asynchronous APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndb.drop_table(\"myTable\")\n```\n\nLANGUAGE: python\nCODE:\n```\nawait db.drop_table(\"myTable\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3-compatible stores with Python Async API\nDESCRIPTION: Shows how to connect LanceDB to S3-compatible stores using the Python asynchronous API. It includes region and endpoint specifications in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"s3://bucket/path\",\n    storage_options={\n        \"region\": \"us-east-1\",\n        \"endpoint\": \"http://minio:9000\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import necessary libraries for working with LlamaIndex and LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/LlamaIndex_example.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\n# Uncomment to see debug logs\n# logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n# logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n\n\nfrom llama_index.core import SimpleDirectoryReader, Document, StorageContext\nfrom llama_index.core import VectorStoreIndex\nfrom llama_index.vector_stores.lancedb import LanceDBVectorStore\nimport textwrap\n```\n\n----------------------------------------\n\nTITLE: Connecting to LanceDB\nDESCRIPTION: Establishes connection to local LanceDB instance\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\"~/.lancedb\")\n```\n\n----------------------------------------\n\nTITLE: Checking LanceDB Connection Status in TypeScript\nDESCRIPTION: Returns a boolean indicating whether the LanceDB connection is open or not.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nabstract isOpen(): boolean\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with SentenceTransformer\nDESCRIPTION: Creates vector embeddings for quotes using the all-MiniLM-L6-v2 model\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sentence_transformers import SentenceTransformer\nmodel = SentenceTransformer(\"all-MiniLM-L6-v2\", device=\"cpu\")\nvectors = model.encode(df.quote.values.tolist(),\n                       convert_to_numpy=True,\n                       normalize_embeddings=True).tolist()\n```\n\n----------------------------------------\n\nTITLE: Configuring Heap Size for FTS Index Creation\nDESCRIPTION: Example of configuring the heap size limit when creating a full-text search index for better performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# configure a 512MB heap size\nheap = 1024 * 1024 * 512\ntable.create_fts_index([\"title\", \"content\"], use_tantivy=True, writer_heap_size=heap, replace=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Region Property for LanceDB Cloud in TypeScript\nDESCRIPTION: This property definition specifies an optional region for LanceDB Cloud. It defaults to 'us-east-1' if not specified.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional region: string;\n```\n\n----------------------------------------\n\nTITLE: Setting storage options for a specific table in TypeScript\nDESCRIPTION: Examples of passing storage options when creating a table using TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"s3://bucket/path\");\nconst table = db.createTable(\n    \"table\",\n    [{ a: 1, b: 2}],\n    {storageOptions: {timeout: \"60s\"}}\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\"s3://bucket/path\");\nconst table = db.createTable(\n    \"table\",\n    [{ a: 1, b: 2}],\n    {storageOptions: {timeout: \"60s\"}}\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Indices of LanceDB Table in TypeScript\nDESCRIPTION: Returns a list of all indices created for the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nabstract listIndices(): Promise<IndexConfig[]>\n```\n\n----------------------------------------\n\nTITLE: Setting K-means Training Sample Rate\nDESCRIPTION: Optional parameter to control the sampling rate for k-means training data. Default is 256, affecting the total number of vectors used in training.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional sampleRate: number;\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Usage Example in JavaScript\nDESCRIPTION: Demonstrates how to connect to a LanceDB database, create a table with vector data, and perform a similarity search. The example shows initializing the database, inserting records with vectors, and executing a search query.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lancedb = require('vectordb');\nconst db = await lancedb.connect('data/sample-lancedb');\nconst table = await db.createTable(\"my_table\",\n      [{ id: 1, vector: [0.1, 1.0], item: \"foo\", price: 10.0 },\n      { id: 2, vector: [3.9, 0.5], item: \"bar\", price: 20.0 }])\nconst results = await table.search([0.1, 0.3]).limit(20).execute();\nconsole.log(results);\n```\n\n----------------------------------------\n\nTITLE: Defining Columns Property in IndexConfig Interface\nDESCRIPTION: Specifies the columns included in the index. Currently supports single column indices but may support composite indices in the future.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncolumns: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Full Text Search Column Options - TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for specifying which columns to include in a full text search operation. Accepts either a single column name as string or an array of column names, though currently limited to searching one column.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/FullTextSearchOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional columns: string | string[];\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns in LanceDB - TypeScript\nDESCRIPTION: Demonstrates how to remove columns from tables in TypeScript\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"nodejs/examples/basic.test.ts:drop_columns\"\n```\n\n----------------------------------------\n\nTITLE: Defining MergeInsertArgs Interface in TypeScript\nDESCRIPTION: This snippet defines the MergeInsertArgs interface with three optional properties: whenMatchedUpdateAll, whenNotMatchedBySourceDelete, and whenNotMatchedInsertAll. These properties control the behavior of merge and insert operations in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/MergeInsertArgs.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MergeInsertArgs {\n  whenMatchedUpdateAll?: string | boolean;\n  whenNotMatchedBySourceDelete?: string | boolean;\n  whenNotMatchedInsertAll?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for LanceDB TypeScript\nDESCRIPTION: Shell command to run all tests in the LanceDB TypeScript project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in LanceDB - TypeScript\nDESCRIPTION: Demonstrates how to permanently remove tables in TypeScript\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/basic_legacy.ts:drop_table\"\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API Configuration\nDESCRIPTION: Configures the OpenAI API key using environment variables and getpass for secure input.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/hybrid_search.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport getpass\n\n# Set your OpenAI API key\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass()\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI Environment\nDESCRIPTION: Configuration of OpenAI API key using environment variables\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/langchain_example.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Columns in MakeArrowTableOptions\nDESCRIPTION: Property for specifying options for vector columns in the table. This is a record mapping column names to their vector-specific configuration options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/MakeArrowTableOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **vectorColumns**: `Record`\\<`string`, `VectorColumnOptions`\\>\n```\n\n----------------------------------------\n\nTITLE: Importing Embedding Pair Generation and Dataset Modules\nDESCRIPTION: Imports necessary modules from LlamaIndex for generating question-answer embedding pairs and creating fine-tuning datasets.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.finetuning import generate_qa_embedding_pairs\nfrom llama_index.core.evaluation import EmbeddingQAFinetuneDataset\n```\n\n----------------------------------------\n\nTITLE: Filtering FTS Results with Post-filtering in Rust\nDESCRIPTION: Shows how to apply a post-filter condition to full-text search results in Rust using the 'postfilter' method to filter after retrieving search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\ntable\n    .query()\n    .full_text_search(FullTextSearchQuery::new(words[0].to_owned()))\n    .select(lancedb::query::Select::Columns(vec![\"doc\".to_owned()]))\n    .postfilter()\n    .limit(10)\n    .only_if(\"meta='foo'\")\n    .execute()\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hit-Rate Evaluation Metric for LanceDB Retrieval\nDESCRIPTION: This function calculates the hit-rate metric for evaluating retrieval performance across different search strategies in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport tqdm\n\ndef hit_rate(ds, table, query_type:str, top_k:int = 5, reranker:Reranker = None) -> float:\n    eval_results = []\n    for idx in tqdm.tqdm(range(len(ds))):\n        query = ds[\"query\"][idx]\n        reference_context = ds[\"context\"][idx]\n        if not reference_context:\n            print(\"reference_context is None for query: {idx}. \\\n                            Skipping this query. Please check your dataset.\")\n            continue\n        try:\n            rs = search_table(table, reranker, query_type, query, top_k)\n        except Exception as e:\n            print(f'Error with query: {idx} {e}')\n            eval_results.append({\n                'is_hit': False,\n                'retrieved': [],\n                'expected': reference_context,\n                'query': query,\n            })\n            continue\n        retrieved_texts = rs['text'].tolist()[:top_k]\n        expected_text = reference_context[0] if isinstance(reference_context, list) else reference_context\n        is_hit = False\n\n        # HACK: to handle new line characters added my llamaindex doc reader\n        if expected_text in retrieved_texts or expected_text+'\\n' in retrieved_texts:\n            is_hit = True\n        eval_result = {\n            'is_hit': is_hit,\n            'retrieved': retrieved_texts,\n            'expected': expected_text,\n            'query': query,\n        }\n        eval_results.append(eval_result)\n\n    result = pd.DataFrame(eval_results)\n    hit_rate = result['is_hit'].mean()\n    return hit_rate\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingFunction Property in TypeScript\nDESCRIPTION: Specifies the embedding function property that transforms input data into vector embeddings. The function accepts generic types for input and configuration options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/EmbeddingFunctionConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction: EmbeddingFunction<any, FunctionOptions>;\n```\n\n----------------------------------------\n\nTITLE: Defining maxBatchLength Property in QueryExecutionOptions\nDESCRIPTION: Optional property that specifies the maximum number of rows to return in a single batch during query execution. The actual batch size may be smaller based on underlying data chunk sizes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/QueryExecutionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxBatchLength: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Method for LocalTable in TypeScript\nDESCRIPTION: Defines the search method for performing vector searches on the LocalTable. It creates a Query object and applies the search criteria.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalTable.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(vector: T | string): Query<T> {\n  this.checkElectron();\n  return new Query(this._tbl, this._name, this._options(), this._embeddings).vector(vector);\n}\n```\n\n----------------------------------------\n\nTITLE: Retry Configuration in TypeScript\nDESCRIPTION: Optional configuration for retry behavior in LanceDB client\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ClientConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional retryConfig: RetryConfig;\n```\n\n----------------------------------------\n\nTITLE: Incremental Indexing for FTS in Python (Async)\nDESCRIPTION: Asynchronous implementation of adding new records to a table and incrementally updating the FTS index. Useful for efficiently maintaining an up-to-date search index in large datasets.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nawait tbl.add([{\"vector\": [3.1, 4.1], \"text\": \"Frodo was a happy puppy\"}])\nawait tbl.optimize()\n```\n\n----------------------------------------\n\nTITLE: Defining Name Property in IndexConfig Interface\nDESCRIPTION: Specifies the name identifier for the index configuration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining makeArrowTable Function in TypeScript\nDESCRIPTION: Function signature for makeArrowTable, which converts an array of records to an Arrow Table. It supports optional schema definition and metadata.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/functions/makeArrowTable.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeArrowTable(\n   data,\n   options?,\n   metadata?): ArrowTable\n```\n\n----------------------------------------\n\nTITLE: Dropping All Tables in LanceDB using TypeScript\nDESCRIPTION: Drops all tables in the LanceDB database. Returns a Promise that resolves when the operation is complete.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract dropAllTables(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining WriteMode Enumeration in TypeScript\nDESCRIPTION: Defines a TypeScript enumeration called WriteMode with three possible values: Append for adding new data to an existing table, Create for creating a new table, and Overwrite for replacing an existing table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/enums/WriteMode.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum WriteMode {\n  Append = \"append\",\n  Create = \"create\",\n  Overwrite = \"overwrite\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Eventual Consistency in Python (Async)\nDESCRIPTION: Shows how to configure eventual consistency with a custom interval in asynchronous Python API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\ndb = await lance.connect_async(\"./data\", read_consistency_interval=timedelta(seconds=5))\ntbl = await db.open_table(\"my_table\")\n```\n\n----------------------------------------\n\nTITLE: Setting Strong Consistency in TypeScript\nDESCRIPTION: Demonstrates how to configure strong read consistency in TypeScript by setting readConsistencyInterval to 0.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await lancedb.connect({ uri: \"./.lancedb\", readConsistencyInterval: 0 });\nconst tbl = await db.openTable(\"my_table\");\n```\n\n----------------------------------------\n\nTITLE: Configuring FiftyOne Brain with LanceDB Backend in JSON\nDESCRIPTION: JSON configuration to set LanceDB as the default similarity backend for FiftyOne Brain.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"default_similarity_backend\": \"lancedb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Table Methods in LanceDB\nDESCRIPTION: Changes to the Table class including new async methods and replacement of len() functionality. Schema is now accessed through an async method, and row counting uses count_rows() instead of len().\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/ASYNC_MIGRATION.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Instead of table.schema\nschema = await table.schema()\n\n# Instead of len(table)\ncount = await table.count_rows()\n\n# Using table as context manager\nasync with table:\n    # table will be automatically closed\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in MakeArrowTableOptions\nDESCRIPTION: Optional property for specifying a custom Arrow schema for the table. This provides fine-grained control over the data types used for each column in the Arrow table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/MakeArrowTableOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **schema**: `Schema`\\<`any`\\>\n```\n\n----------------------------------------\n\nTITLE: Loading the Dataset with Pandas\nDESCRIPTION: Loads the downloaded CSV dataset into a pandas DataFrame for further processing and analysis.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndata = pd.read_csv(\"data_qa.csv\")\n```\n\n----------------------------------------\n\nTITLE: SQL Column Name Escaping Example\nDESCRIPTION: Demonstrates how to properly escape column names containing special characters, spaces, or SQL keywords using backticks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/sql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n`CUBE` = 10 AND `UpperCaseName` = '3' AND `column name with space` IS NOT NULL\n  AND `nested with space`.`inner with space` < 2\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for LanceDB and Related Libraries\nDESCRIPTION: This snippet installs the necessary Python packages for working with LanceDB, sentence transformers, Cohere, Tantivy, and PyArrow.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install lancedb sentence-transformers cohere tantivy pyarrow==13.0.0 -q\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Vector Column Property in TypeScript\nDESCRIPTION: Specifies an optional vector column property that determines where the generated embeddings will be stored.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/EmbeddingFunctionConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional vectorColumn: string;\n```\n\n----------------------------------------\n\nTITLE: Defining timeoutMs Property in QueryExecutionOptions\nDESCRIPTION: Optional property that sets the timeout duration for query execution in milliseconds.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/QueryExecutionOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional timeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Git Repository for LanceDB\nDESCRIPTION: Instructions for forking the LanceDB repository, cloning it locally, and adding the upstream remote. This setup allows contributors to work on their own fork while keeping it synced with the main repository.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<username>/lancedb.git\ncd lancedb\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/lancedb/lancedb.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dimensions Property\nDESCRIPTION: Declares an optional dimensions property for a field, used to specify the dimensionality of vector data types. The dims property is of type number and is marked as optional.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/FieldOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional dims: number;\n```\n\n----------------------------------------\n\nTITLE: Creating LanceDB Table with Nested Schema (Sync API)\nDESCRIPTION: Shows how to create a LanceDB table using a nested schema defined with Pydantic classes using the synchronous API.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"python/python/tests/docs/test_guide_tables.py:create_table_nested_schema\"\n```\n\n----------------------------------------\n\nTITLE: Documenting indexType Property in TypeScript\nDESCRIPTION: This snippet defines and documents the required indexType property, which represents the type of the index in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nindexType: string;\n```\n\n----------------------------------------\n\nTITLE: Listing Table Names in LanceDB (Rust)\nDESCRIPTION: Shows how to get a list of all table names in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nlet names = conn.table_names().await?;\nprintln!(\"{:?}\", names);\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with Credentials in JavaScript (vectordb)\nDESCRIPTION: Shows how to connect to an S3 bucket using LanceDB's deprecated JavaScript API with explicit AWS credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\n    \"s3://bucket/path\",\n    {\n        storageOptions: {\n            awsAccessKeyId: \"my-access-key\",\n            awsSecretAccessKey: \"my-secret-key\",\n            awsSessionToken: \"my-session-token\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Backoff Jitter in TypeScript\nDESCRIPTION: Optional property that adds random jitter to retry backoff times. Default is 0.25 seconds, adding 0-250ms of random delay to each retry interval.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional backoffJitter: number;\n```\n\n----------------------------------------\n\nTITLE: Initializing dlt project for REST API to LanceDB pipeline\nDESCRIPTION: Command to initialize a dlt project that can ingest data from a REST API and load it into LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndlt init rest_api lancedb\n```\n\n----------------------------------------\n\nTITLE: Setting Strong Consistency in Python (Sync)\nDESCRIPTION: Demonstrates how to configure strong read consistency using timedelta(0) in synchronous Python API. This ensures the database checks for updates on every read operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\ndb = lance.connect(\"./data\", read_consistency_interval=timedelta(0))\ntbl = db.open_table(\"my_table\")\n```\n\n----------------------------------------\n\nTITLE: Executing Query with analyzePlan in TypeScript\nDESCRIPTION: Demonstrates how to use the analyzePlan method to get a detailed query execution plan with runtime metrics.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\"\n\nconst db = await lancedb.connect(\"./.lancedb\");\nconst table = await db.createTable(\"my_table\", [\n  { vector: [1.1, 0.9], id: \"1\" },\n]);\n\nconst plan = await table.query().nearestTo([0.5, 0.2]).analyzePlan();\n\nExample output (with runtime metrics inlined):\nAnalyzeExec verbose=true, metrics=[]\n ProjectionExec: expr=[id@3 as id, vector@0 as vector, _distance@2 as _distance], metrics=[output_rows=1, elapsed_compute=3.292µs]\n  Take: columns=\"vector, _rowid, _distance, (id)\", metrics=[output_rows=1, elapsed_compute=66.001µs, batches_processed=1, bytes_read=8, iops=1, requests=1]\n   CoalesceBatchesExec: target_batch_size=1024, metrics=[output_rows=1, elapsed_compute=3.333µs]\n    GlobalLimitExec: skip=0, fetch=10, metrics=[output_rows=1, elapsed_compute=167ns]\n     FilterExec: _distance@2 IS NOT NULL, metrics=[output_rows=1, elapsed_compute=8.542µs]\n      SortExec: TopK(fetch=10), expr=[_distance@2 ASC NULLS LAST], metrics=[output_rows=1, elapsed_compute=63.25µs, row_replacements=1]\n       KNNVectorDistance: metric=l2, metrics=[output_rows=1, elapsed_compute=114.333µs, output_batches=1]\n        LanceScan: uri=/path/to/data, projection=[vector], row_id=true, row_addr=false, ordered=false, metrics=[output_rows=1, elapsed_compute=103.626µs, bytes_read=549, iops=2, requests=2]\n```\n\n----------------------------------------\n\nTITLE: Closing LanceDB Connection in TypeScript\nDESCRIPTION: Closes the LanceDB connection and releases underlying resources. This method can be called multiple times safely, but using the connection after closing will result in an error.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Connection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nabstract close(): void\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to LanceDB Connection\nDESCRIPTION: Adds HTTP middleware to the connection for custom request handling. Currently only supported for remote connections, this method allows for connection behavior instrumentation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/LocalConnection.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **withMiddleware**(`middleware`): [`Connection`](../interfaces/Connection.md)\n\nInstrument the behavior of this Connection with middleware.\n\nThe middleware will be called in the order they are added.\n\nCurrently this functionality is only supported for remote Connections.\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `middleware` | `HttpMiddleware` |\n\n#### Returns\n\n[`Connection`](../interfaces/Connection.md)\n\n- this Connection instrumented by the passed middleware\n```\n\n----------------------------------------\n\nTITLE: Setting embeddings Property in TypeScript\nDESCRIPTION: Optional property for specifying the embedding function with unknown input and FunctionOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional embeddings: EmbeddingFunction<unknown, FunctionOptions>;\n```\n\n----------------------------------------\n\nTITLE: User Agent Configuration in TypeScript\nDESCRIPTION: Optional configuration for setting custom user agent string in LanceDB client\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ClientConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional userAgent: string;\n```\n\n----------------------------------------\n\nTITLE: Documenting writeMode Property in TypeScript for LanceDB\nDESCRIPTION: This snippet shows the JSDoc comment for the writeMode property in the WriteOptions interface. It specifies that the property is optional and of type WriteMode, which is used to set the write mode for a Table operation in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/WriteOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * A [WriteMode](../enums/WriteMode.md) to use on this operation\n */\nwriteMode?: WriteMode;\n```\n\n----------------------------------------\n\nTITLE: Declaring poolIdleTimeout Property in TypeScript\nDESCRIPTION: This property sets the timeout for keeping idle connections in the pool. It defaults to 300 seconds and can be overridden by the LANCE_CLIENT_CONNECTION_TIMEOUT environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TimeoutConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional poolIdleTimeout: number;\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Filtering in TypeScript (vectordb - deprecated)\nDESCRIPTION: Shows vector search with additional filtering criteria using a where clause in the deprecated vectordb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n--8<-- \"docs/src/ann_indexes.ts:search2\"\n```\n\n----------------------------------------\n\nTITLE: Get Sensitive Keys Protected Method\nDESCRIPTION: Protected method that returns an array of keys that should be treated as sensitive in the function options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nprotected getSensitiveKeys(): string[]\n```\n\n----------------------------------------\n\nTITLE: Adding Data to a LanceDB Table (Rust)\nDESCRIPTION: Demonstrates how to add more data to an existing table in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\ntable\n    .add(\n        vec![\n            Item {\n                vector: vec![1.1, 2.3, 3.5],\n                item: \"more data\".to_string(),\n                price: 20.5,\n            },\n            Item {\n                vector: vec![2.5, 1.2, 4.9],\n                item: \"even more\".to_string(),\n                price: 100.0,\n            },\n        ]\n        .try_into()?,\n    )\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Documenting loss Property in TypeScript\nDESCRIPTION: This snippet defines the optional loss property, which represents the KMeans loss value of the index for vector indices.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional loss: number;\n```\n\n----------------------------------------\n\nTITLE: Registering Embedding Functions in TypeScript for LanceDB\nDESCRIPTION: This function is used to register embedding functions in LanceDB. It takes an optional 'name' parameter and returns a function that accepts an EmbeddingFunctionConstructor. The returned function is used to register the embedding function with the specified name or a default name.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/functions/register.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction register(name?): (ctor) => any\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Package\nDESCRIPTION: Installs LanceDB package using pip in quiet mode\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!pip install lancedb -q\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Retry Limit in TypeScript\nDESCRIPTION: Optional property that sets maximum number of retries for connection errors. Defaults to 3 attempts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional connectRetries: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Modal Web and CLI Endpoints for the QA Bot\nDESCRIPTION: Creates Modal endpoints for both web requests and command-line interface interactions. The web endpoint accepts GET requests with a query parameter, while the CLI function takes a query argument directly and prints the result.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@stub.function()\n@web_endpoint(method=\"GET\")\ndef web(query: str):\n    answer = qanda_langchain(query)\n    return {\n        \"answer\": answer,\n    }\n    \n@stub.function()\ndef cli(query: str):\n    answer = qanda_langchain(query)\n    print(answer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dictionary Encoding in MakeArrowTableOptions\nDESCRIPTION: Property for controlling dictionary encoding of string columns. When set to true, string columns with repeating values are encoded more efficiently. This property is ignored if a schema is explicitly provided.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/MakeArrowTableOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **dictionaryEncodeStrings**: `boolean` = `false`\n```\n\n----------------------------------------\n\nTITLE: Evaluating Hybrid Search with CohereReranker in LanceDB\nDESCRIPTION: This code evaluates the performance of hybrid search using CohereReranker in LanceDB, which utilizes the Cohere API for reranking search results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nos.environ[\"COHERE_API_KEY\"] = userdata.get('COHERE_API_KEY')\n\nreranker = CohereReranker()\nhit_rate_hybrid = hit_rate(data, tbl, \"hybrid\", reranker=reranker)\nprint(f\" \\n Hybrid Search with CohereReranker Hit Rate: {hit_rate_hybrid}\")\n```\n\n----------------------------------------\n\nTITLE: Reading the Dataset with Index Column Specification\nDESCRIPTION: Loads the CSV dataset with an explicit index column specification for more accurate data representation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_csv(\"data_qa.csv\", index_col=0)\n```\n\n----------------------------------------\n\nTITLE: Defining CompactionOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the CompactionOptions interface with properties for controlling various aspects of the compaction process in LanceDB. It includes options for materializing deletions, setting thresholds, and specifying fragment sizes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/CompactionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CompactionOptions {\n  materializeDeletions?: boolean;\n  materializeDeletionsThreshold?: number;\n  maxRowsPerGroup?: number;\n  numThreads?: number;\n  targetRowsPerFragment?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB JavaScript Library with npm\nDESCRIPTION: Installs the vectordb package which is the JavaScript client for LanceDB. This command downloads the appropriate native library for your platform.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vectordb\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for LanceDB\nDESCRIPTION: Lists required Python packages and their version constraints for the LanceDB project. Includes data processing libraries like pandas and polars, numerical computing with numpy, database engines like duckdb, and machine learning frameworks like PyTorch with CPU-only configuration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/test/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-e ../../python\nnumpy\npandas\npylance\nduckdb\ntantivy==0.20.1\n--extra-index-url https://download.pytorch.org/whl/cpu\ntorch\npolars>=0.19, <=1.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Interface Properties in TypeScript\nDESCRIPTION: Defines the 'uri' property of the Connection interface, which represents the connection string for the database.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **uri**: `string`\n```\n\n----------------------------------------\n\nTITLE: Declaring readTimeout Property in TypeScript\nDESCRIPTION: This property sets the timeout for reading data from the server. It defaults to 300 seconds and can be overridden by the LANCE_CLIENT_READ_TIMEOUT environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TimeoutConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional readTimeout: number;\n```\n\n----------------------------------------\n\nTITLE: Setting Read Retry Limit in TypeScript\nDESCRIPTION: Optional property that sets maximum number of retries for read errors. Defaults to 3 attempts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional readRetries: number;\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB in Python\nDESCRIPTION: Demonstrates how to install LanceDB using pip for Python projects.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install lancedb\n```\n\n----------------------------------------\n\nTITLE: Extra Headers Configuration in TypeScript\nDESCRIPTION: Optional configuration for adding custom HTTP headers to LanceDB client requests\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ClientConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional extraHeaders: Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Version Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the Version interface. It includes a metadata record, a timestamp, and a version number. These properties likely represent version information for a LanceDB database or collection.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/Version.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata: Record<string, string>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntimestamp: Date;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nversion: number;\n```\n\n----------------------------------------\n\nTITLE: Documenting numIndexedRows Property in TypeScript\nDESCRIPTION: This snippet defines the required numIndexedRows property, which represents the number of rows indexed by the index in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnumIndexedRows: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Reranking in TypeScript with LanceDB\nDESCRIPTION: Method signature for reranking results from vector and full-text searches. Takes a query string and two RecordBatch objects containing vector and full-text search results, returning a Promise of the combined and reranked results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/rerankers/interfaces/Reranker.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrerankHybrid(\n   query,\n   vecResults,\n   ftsResults): Promise<RecordBatch<any>>\n```\n\n----------------------------------------\n\nTITLE: Defining IndexType Property in IndexConfig Interface\nDESCRIPTION: Specifies the type of the index being configured.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nindexType: string;\n```\n\n----------------------------------------\n\nTITLE: Setting Overall Retry Limit in TypeScript\nDESCRIPTION: Optional property that sets maximum number of retries for any request. Defaults to 3 attempts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional retries: number;\n```\n\n----------------------------------------\n\nTITLE: Running Linter with Auto-fix\nDESCRIPTION: Command to run the code linter with automatic error fixing enabled.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint -- --fix\n```\n\n----------------------------------------\n\nTITLE: Defining schema Property in TypeScript\nDESCRIPTION: Optional property for specifying the schema of the Arrow table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional schema: SchemaLike;\n```\n\n----------------------------------------\n\nTITLE: Evaluating Hybrid Search with JinaReranker in LanceDB\nDESCRIPTION: This snippet demonstrates the use of JinaReranker for hybrid search in LanceDB, utilizing the Jina AI API for reranking results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/lancedb_reranking.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom lancedb.rerankers import JinaReranker\n\n# Colab secret setup\nfrom google.colab import userdata\nos.environ[\"JINA_API_KEY\"] = userdata.get('JINA_API_KEY')\n\nreranker = JinaReranker(model_name=\"jina-reranker-v2-base-multilingual\")\nhit_rate_hybrid = hit_rate(data, tbl, \"hybrid\", reranker=reranker)\nprint(f\" \\n Hybrid Search with JinaReranker Hit Rate: {hit_rate_hybrid}\")\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaLike Type Alias in TypeScript\nDESCRIPTION: Defines a type alias named SchemaLike that can be either a Schema object or a generic JavaScript object. This flexible typing allows functions in LanceDB to accept schema definitions in multiple formats.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/SchemaLike.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SchemaLike: Schema | object;\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Ragged Repository for Evaluation Utilities\nDESCRIPTION: Clones the ragged repository from GitHub and installs it. This repository contains utility functions for evaluating retrieval performance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!git clone https://github.com/lancedb/ragged.git\n!cd ragged && pip install .\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Package\nDESCRIPTION: Installs the LanceDB package quietly using pip.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!pip install lancedb -q\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Formatting in LanceDB\nDESCRIPTION: Disables colors and formatting in LanceDB logs by setting an environment variable. This can be useful when logging to files or when color formatting is not desired.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LANCEDB_LOG_STYLE=never\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Container for AWS Lambda\nDESCRIPTION: This Dockerfile creates a container based on the AWS Lambda Python 3.10 runtime. It installs necessary dependencies including numpy and lancedb, and sets up the Lambda function handler.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_lancedb_with_s3_and_lambda.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nFROM public.ecr.aws/lambda/python:3.10\n\nRUN pip3 install --upgrade pip\nRUN pip3 install --no-cache-dir -U numpy --target \"${LAMBDA_TASK_ROOT}\"\nRUN pip3 install --no-cache-dir -U lancedb --target \"${LAMBDA_TASK_ROOT}\"\n\nCOPY app.py ${LAMBDA_TASK_ROOT}\n\nCMD [ \"app.handler\" ]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage with TypeScript (vectordb deprecated)\nDESCRIPTION: Shows how to connect LanceDB to Google Cloud Storage using the deprecated vectordb TypeScript package. It includes the path to the service account JSON file in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\n    \"gs://my-bucket/my-database\",\n    {\n        storageOptions: {\n            serviceAccount: \"path/to/service-account.json\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Column Type in TypeScript\nDESCRIPTION: Specifies the type property of VectorColumnOptions, which represents the vector column type using Float<Floats>.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/VectorColumnOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype: Float<Floats>;\n```\n\n----------------------------------------\n\nTITLE: Running and Fixing Linter for LanceDB JavaScript Library\nDESCRIPTION: Command to run the linter with auto-fix enabled to automatically correct linting errors in the codebase.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint -- --fix\n```\n\n----------------------------------------\n\nTITLE: Documenting numUnindexedRows Property in TypeScript\nDESCRIPTION: This snippet defines the required numUnindexedRows property, which represents the number of rows not indexed in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnumUnindexedRows: number;\n```\n\n----------------------------------------\n\nTITLE: Referencing LanceDB Package for Linux ARM64 MUSL\nDESCRIPTION: NPM package name reference for the Linux ARM64 MUSL build of LanceDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/linux-arm64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-linux-arm64-musl\n```\n\n----------------------------------------\n\nTITLE: Implementing next() method for AsyncIterator in TypeScript\nDESCRIPTION: Implements the next() method of the AsyncIterator interface. It returns a Promise that resolves to an IteratorResult containing a RecordBatch.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/RecordBatchIterator.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnext(): Promise<IteratorResult<RecordBatch<any>, any>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for LanceDB Compatibility\nDESCRIPTION: Next.js configuration to exclude LanceDB's vectordb from webpack bundling. This is necessary since LanceDB contains a prebuilt Node binary that should not be processed by webpack.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_website_chatbot.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = ({\n  webpack(config) {\n    config.externals.push({ vectordb: 'vectordb' })\n    return config;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Optional Initialization Method\nDESCRIPTION: Optional method to load resources needed for the embedding function before computation begins.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional init(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Host Override Property for LanceDB Cloud in TypeScript\nDESCRIPTION: This property definition specifies an optional host override for LanceDB Cloud, primarily used for testing purposes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ConnectionOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional hostOverride: string;\n```\n\n----------------------------------------\n\nTITLE: Indexing Dataset with GraphRAG\nDESCRIPTION: Command to index a dataset using GraphRAG.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/rag/graph_rag.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m graphrag.index --root dataset-dir\n```\n\n----------------------------------------\n\nTITLE: Setting vectorColumns Property in TypeScript\nDESCRIPTION: Property for specifying options for vector columns in the Arrow table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvectorColumns: Record<string, VectorColumnOptions>;\n```\n\n----------------------------------------\n\nTITLE: Search Results Output Example\nDESCRIPTION: Sample output showing the search results for the query 'a sweet fruit to eat'. The output includes the top two matches (Banana and Cherry) along with their vector representations and distance scores.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/transformerjs_embedding_search_nodejs.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[ 'Banana', 'Cherry' ]\n```\n\nLANGUAGE: bash\nCODE:\n```\n[\n  {\n    vector: Float32Array(384) [\n      -0.057455405592918396,\n      0.03617725893855095,\n      -0.0367760956287384,\n      ... 381 more items\n    ],\n    id: 5,\n    text: 'Banana',\n    type: 'fruit',\n    _distance: 0.4919965863227844\n  },\n  {\n    vector: Float32Array(384) [\n      0.0009714411571621895,\n      0.008223623037338257,\n      0.009571489877998829,\n      ... 381 more items\n    ],\n    id: 1,\n    text: 'Cherry',\n    type: 'fruit',\n    _distance: 0.5540297031402588\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining RecordBatchLike Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the RecordBatchLike type alias, which can be either a RecordBatch or a generic object. This type is likely used for flexible input handling in the LanceDB library.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/RecordBatchLike.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RecordBatchLike: RecordBatch | object;\n```\n\n----------------------------------------\n\nTITLE: Defining ColumnAlteration Interface in TypeScript\nDESCRIPTION: This code snippet defines the ColumnAlteration interface with properties for specifying column alterations. It includes a path to identify the column, an optional rename property, and an optional nullable property to set nullability.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/ColumnAlteration.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ColumnAlteration {\n  path: string;\n  rename?: string;\n  nullable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading YouTube transcript dataset\nDESCRIPTION: Command to download a sample dataset containing YouTube transcripts, which will be used for the QA bot.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -c https://eto-public.s3.us-west-2.amazonaws.com/datasets/youtube_transcript/youtube-transcriptions_sample.jsonl\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Stable Release\nDESCRIPTION: Command to install the stable version of LanceDB using pip package manager.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install lancedb\n```\n\n----------------------------------------\n\nTITLE: SQL Date and Timestamp Literals\nDESCRIPTION: Shows the correct syntax for using date, timestamp, and decimal literals in SQL filters.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/sql.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndate_col = date '2021-01-01'\nand timestamp_col = timestamp '2021-01-01 00:00:00'\nand decimal_col = decimal(8,3) '1.000'\n```\n\n----------------------------------------\n\nTITLE: Defining Nullable Property in ColumnAlteration Interface\nDESCRIPTION: Optional boolean property that sets the nullability of a column. Cannot convert nullable columns to non-nullable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ColumnAlteration.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional nullable: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining OptimizeOptions Interface Properties in TypeScript\nDESCRIPTION: Defines the properties of the OptimizeOptions interface, including cleanupOlderThan and deleteUnverified. The cleanupOlderThan property is a Date object used to specify a cutoff date for version cleanup.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/OptimizeOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncleanupOlderThan: Date;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteUnverified: boolean;\n```\n\n----------------------------------------\n\nTITLE: Specifying AddColumnsSql 'valueSql' Property in TypeScript\nDESCRIPTION: This code snippet defines the 'valueSql' property of the AddColumnsSql interface, which represents the SQL expression used to populate the new column's values.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/AddColumnsSql.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvalueSql: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Retryable HTTP Status Codes in TypeScript\nDESCRIPTION: Optional property that defines which HTTP status codes should trigger a retry. Defaults to [429, 500, 502, 503].\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional statuses: number[];\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionOptions Interface for LanceDB Embedding in TypeScript\nDESCRIPTION: This code snippet defines the FunctionOptions interface for LanceDB embedding functions. It allows for an indexable object with string keys and any value types, enabling flexible configuration of embedding functions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/FunctionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FunctionOptions {\n    [key: string]: any\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Data Type Property\nDESCRIPTION: Specifies the data type property for a field in the FieldOptions interface. The type parameter T extends DataType to allow for different data type specifications.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/FieldOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndatatype: T;\n```\n\n----------------------------------------\n\nTITLE: Defining EmbeddingFunctionConstructor Interface in TypeScript\nDESCRIPTION: Constructor signature for creating embedding function instances. Takes optional model options parameter of type T['TOptions'] and returns an instance of type T that extends EmbeddingFunction.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/interfaces/EmbeddingFunctionConstructor.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew EmbeddingFunctionConstructor(modelOptions?): T\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Type in TypeScript\nDESCRIPTION: Implements the queryType method from the FullTextQuery interface. This method returns the type of the full-text query as a FullTextQueryType enum value.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/PhraseQuery.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nqueryType(): FullTextQueryType\n```\n\n----------------------------------------\n\nTITLE: Querying the QA Bot Web Endpoint with cURL\nDESCRIPTION: Example cURL command to query the deployed web endpoint. The command URL-encodes the query parameter and sends it to the Modal endpoint, which returns a JSON response with the answer.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get --data-urlencode \"query=What are the major differences in pandas 2.0?\" https://your-modal-endpoint-app.modal.run\n\n{\"answer\":\" The major differences in pandas 2.0 include the ability to use any numpy numeric dtype in a Index, installing optional dependencies with pip extras, and enhancements, bug fixes, and performance improvements.\"}\n```\n\n----------------------------------------\n\nTITLE: Source Field Method\nDESCRIPTION: Method used with LanceSchema to provide a declarative data model for source fields.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsourceField(): [DataType<Type, any>, Map<string, EmbeddingFunction<any, FunctionOptions>>]\n```\n\n----------------------------------------\n\nTITLE: Example QA bot interactions\nDESCRIPTION: Example output showing the QA bot answering queries based on the YouTube transcript data stored in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPrompt: who was the 12th person on the moon and when did they land?\n The 12th person on the moon was Harrison Schmitt and he landed on December 11, 1972.\nPrompt: Which training method should I use for sentence transformers when I only have pairs of related sentences?\n NLI with multiple negative ranking loss.\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment with LanceDB\nDESCRIPTION: Commands to create and activate a Python virtual environment and install the maturin package for development.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\npip install maturin\n```\n\n----------------------------------------\n\nTITLE: Installing Inference CLI\nDESCRIPTION: Command to install the Roboflow Inference CLI tool\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install inference-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Static LZMA Linking in LanceDB Dependencies\nDESCRIPTION: Configuration snippet for enabling static linking of the lzma-sys dependency in a Rust project using LanceDB. This is required when static linking is preferred over the default dynamic linking behavior.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/rust/lancedb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nlzma-sys = { version = \"*\", features = [\"static\"] }\n```\n\n----------------------------------------\n\nTITLE: Building LanceDB TypeScript Package\nDESCRIPTION: Commands to install dependencies and build the package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing YouTube Transcript Extraction and Formatting\nDESCRIPTION: This code snippet defines functions to extract and format YouTube video transcripts, which are used to create knowledge bases for the AI assistants.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/phidata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom youtube_transcript_api import YouTubeTranscriptApi\nimport re\n\ndef smodify(seconds):\n    hours, remainder = divmod(seconds, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return f\"{int(hours):02}:{int(minutes):02}:{int(seconds):02}\"\n    \ndef extract_transcript(youtube_url,segment_duration):\n    # Extract video ID from the URL\n    video_id = re.search(r'(?<=v=)[\\w-]+', youtube_url)\n    if not video_id:\n        video_id = re.search(r'(?<=be/)[\\w-]+', youtube_url)\n    if not video_id:\n        return None\n\n    video_id = video_id.group(0)\n\n    # Attempt to fetch the transcript\n    try:\n        # Try to get the official transcript\n        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])\n    except Exception:\n        # If no official transcript is found, try to get auto-generated transcript\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n            for transcript in transcript_list:\n                transcript = transcript.translate('en').fetch()\n        except Exception:\n            return None\n\n    # Format the transcript into 120s chunks\n    transcript_text,dict_transcript = format_transcript(transcript,segment_duration)\n    # Open the file in write mode, which creates it if it doesn't exist\n    with open(\"transcript.txt\", \"w\",encoding=\"utf-8\") as file:\n        file.write(transcript_text)\n    return transcript_text,dict_transcript\n\ndef format_transcript(transcript,segment_duration):\n    chunked_transcript = []\n    chunk_dict = []\n    current_chunk = []\n    current_time = 0\n    # 2 minutes in seconds\n    start_time_chunk = 0  # To track the start time of the current chunk\n\n    for segment in transcript:\n        start_time = segment['start']\n        end_time_x = start_time + segment['duration']\n        text = segment['text']\n        \n        # Add text to the current chunk\n        current_chunk.append(text)\n        \n        # Update the current time with the duration of the current segment\n        # The duration of the current segment is given by segment['start'] - start_time_chunk\n        if current_chunk:\n            current_time = start_time - start_time_chunk\n        \n        # If current chunk duration reaches or exceeds 2 minutes, save the chunk\n        if current_time >= segment_duration:\n            # Use the start time of the first segment in the current chunk as the timestamp\n            chunked_transcript.append(f\"[{smodify(start_time_chunk)} to {smodify(end_time_x)}] \" + \" \".join(current_chunk))\n            current_chunk = re.sub(r'[\\xa0\\n]', lambda x: '' if x.group() == '\\xa0' else ' ', \"\\n\".join(current_chunk))\n            chunk_dict.append({\"timestamp\":f\"[{smodify(start_time_chunk)} to {smodify(end_time_x)}]\", \"text\": \"\".join(current_chunk)})\n            current_chunk = []  # Reset the chunk\n            start_time_chunk = start_time + segment['duration'] # Update the start time for the next chunk\n            current_time = 0  # Reset current time\n\n    # Add any remaining text in the last chunk\n    if current_chunk:\n        chunked_transcript.append(f\"[{smodify(start_time_chunk)} to {smodify(end_time_x)}] \" + \" \".join(current_chunk))\n        current_chunk = re.sub(r'[\\xa0\\n]', lambda x: '' if x.group() == '\\xa0' else ' ', \"\\n\".join(current_chunk))\n        chunk_dict.append({\"timestamp\":f\"[{smodify(start_time_chunk)} to {smodify(end_time_x)}]\", \"text\": \"\".join(current_chunk)})\n\n    return \"\\n\\n\".join(chunked_transcript), chunk_dict\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Pandas\nDESCRIPTION: Imports pandas and reads the CSV file into a dataframe\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv(\"rick_and_morty_quotes.csv\")\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Specifying AddColumnsSql 'name' Property in TypeScript\nDESCRIPTION: This code snippet defines the 'name' property of the AddColumnsSql interface, which represents the name of the new column to be added.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/AddColumnsSql.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Type in TypeScript\nDESCRIPTION: Implements the queryType method from the FullTextQuery interface. This method returns the type of the full-text query as a FullTextQueryType enumeration value.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MatchQuery.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nqueryType(): FullTextQueryType\n```\n\n----------------------------------------\n\nTITLE: Resetting Registry in TypeScript\nDESCRIPTION: Method to reset the registry to its initial state.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreset(this): void\n```\n\n----------------------------------------\n\nTITLE: Documenting LanceDB Rerankers Module Structure in Markdown\nDESCRIPTION: This markdown snippet outlines the structure of the rerankers module in the LanceDB library. It includes links to the main README, global documentation, and details about the RRFReranker class and Reranker interface.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/rerankers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[**@lancedb/lancedb**](../../README.md) • **Docs**\n\n***\n\n[@lancedb/lancedb](../../globals.md) / rerankers\n\n# rerankers\n\n## Index\n\n### Classes\n\n- [RRFReranker](classes/RRFReranker.md)\n\n### Interfaces\n\n- [Reranker](interfaces/Reranker.md)\n```\n\n----------------------------------------\n\nTITLE: Defining IntoVector Type Alias in TypeScript\nDESCRIPTION: Defines the IntoVector type alias which can be a Float32Array, Float64Array, number array, or a Promise resolving to any of these types. This allows flexibility in representing vector data for LanceDB operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/IntoVector.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IntoVector: Float32Array | Float64Array | number[] | Promise<Float32Array | Float64Array | number[]>;\n```\n\n----------------------------------------\n\nTITLE: Embedding Data Type Method\nDESCRIPTION: Method that returns the data type of the embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nembeddingDataType(): Float<Floats>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage using TypeScript\nDESCRIPTION: Code examples for connecting to Google Cloud Storage using TypeScript with both the new @lancedb/lancedb package and the deprecated vectordb package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\"gs://bucket/path\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\"gs://bucket/path\");\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests in LanceDB Python\nDESCRIPTION: Commands to run individual test files or specific test cases using pytest.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Single file: test_table.py\npytest -vv python/tests/test_table.py\n# Single test: test_basic in test_table.py\npytest -vv python/tests/test_table.py::test_basic\n```\n\n----------------------------------------\n\nTITLE: To JSON Method\nDESCRIPTION: Method that returns the constructor arguments as a serializable object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Defining VectorIndex Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the VectorIndex interface including columns, name, status, and uuid. It represents the structure of a vector index in LanceDB with its identifying information and current state.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/VectorIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncolumns: string[]\nname: string\nstatus: IndexStatus\nuuid: string\n```\n\n----------------------------------------\n\nTITLE: Installing Tantivy for LanceDB Full-text Search\nDESCRIPTION: Installation command for the tantivy-py dependency required to use full-text search in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/fts_tantivy.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Say you want to use tantivy==0.20.1\npip install tantivy==0.20.1\n```\n\n----------------------------------------\n\nTITLE: Running the QA Bot CLI with Modal\nDESCRIPTION: Command to run the QA bot as a CLI application through Modal. This command passes a query about Pandas 2.0 differences to the cli function defined earlier.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_qa_bot_with_modal_and_langchain.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmodal run modal_langchain.py --query \"What are the major differences in pandas 2.0?\"\n```\n\n----------------------------------------\n\nTITLE: Available Sentence-Transformer Models List in Markdown\nDESCRIPTION: A comprehensive list of available sentence-transformer models that can be used with LanceDB for generating text embeddings. These models are from the sentence-transformers library on Hugging Face.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/sentence_transformers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- sentence-transformers/all-MiniLM-L12-v2\n- sentence-transformers/paraphrase-mpnet-base-v2\n- sentence-transformers/gtr-t5-base\n- sentence-transformers/LaBSE\n- sentence-transformers/all-MiniLM-L6-v2\n- sentence-transformers/bert-base-nli-max-tokens\n- sentence-transformers/bert-base-nli-mean-tokens\n- sentence-transformers/bert-base-nli-stsb-mean-tokens\n- sentence-transformers/bert-base-wikipedia-sections-mean-tokens\n- sentence-transformers/bert-large-nli-cls-token\n- sentence-transformers/bert-large-nli-max-tokens\n- sentence-transformers/bert-large-nli-mean-tokens\n- sentence-transformers/bert-large-nli-stsb-mean-tokens\n- sentence-transformers/distilbert-base-nli-max-tokens\n- sentence-transformers/distilbert-base-nli-mean-tokens\n- sentence-transformers/distilbert-base-nli-stsb-mean-tokens\n- sentence-transformers/distilroberta-base-msmarco-v1\n- sentence-transformers/distilroberta-base-msmarco-v2\n- sentence-transformers/nli-bert-base-cls-pooling\n- sentence-transformers/nli-bert-base-max-pooling\n- sentence-transformers/nli-bert-base\n- sentence-transformers/nli-bert-large-cls-pooling\n- sentence-transformers/nli-bert-large-max-pooling\n- sentence-transformers/nli-bert-large\n- sentence-transformers/nli-distilbert-base-max-pooling\n- sentence-transformers/nli-distilbert-base\n- sentence-transformers/nli-roberta-base\n- sentence-transformers/nli-roberta-large\n- sentence-transformers/roberta-base-nli-mean-tokens\n- sentence-transformers/roberta-base-nli-stsb-mean-tokens\n- sentence-transformers/roberta-large-nli-mean-tokens\n- sentence-transformers/roberta-large-nli-stsb-mean-tokens\n- sentence-transformers/stsb-bert-base\n- sentence-transformers/stsb-bert-large\n- sentence-transformers/stsb-distilbert-base\n- sentence-transformers/stsb-roberta-base\n- sentence-transformers/stsb-roberta-large\n- sentence-transformers/xlm-r-100langs-bert-base-nli-mean-tokens\n- sentence-transformers/xlm-r-100langs-bert-base-nli-stsb-mean-tokens\n- sentence-transformers/xlm-r-base-en-ko-nli-ststb\n- sentence-transformers/xlm-r-bert-base-nli-mean-tokens\n- sentence-transformers/xlm-r-bert-base-nli-stsb-mean-tokens\n- sentence-transformers/xlm-r-large-en-ko-nli-ststb\n- sentence-transformers/bert-base-nli-cls-token\n- sentence-transformers/all-distilroberta-v1\n- sentence-transformers/multi-qa-MiniLM-L6-dot-v1\n- sentence-transformers/multi-qa-distilbert-cos-v1\n- sentence-transformers/multi-qa-distilbert-dot-v1\n- sentence-transformers/multi-qa-mpnet-base-cos-v1\n- sentence-transformers/multi-qa-mpnet-base-dot-v1\n- sentence-transformers/nli-distilroberta-base-v2\n- sentence-transformers/all-MiniLM-L6-v1\n- sentence-transformers/all-mpnet-base-v1\n- sentence-transformers/all-mpnet-base-v2\n- sentence-transformers/all-roberta-large-v1\n- sentence-transformers/allenai-specter\n- sentence-transformers/average_word_embeddings_glove.6B.300d\n- sentence-transformers/average_word_embeddings_glove.840B.300d\n- sentence-transformers/average_word_embeddings_komninos\n- sentence-transformers/average_word_embeddings_levy_dependency\n- sentence-transformers/clip-ViT-B-32-multilingual-v1\n- sentence-transformers/clip-ViT-B-32\n- sentence-transformers/distilbert-base-nli-stsb-quora-ranking\n- sentence-transformers/distilbert-multilingual-nli-stsb-quora-ranking\n- sentence-transformers/distilroberta-base-paraphrase-v1\n- sentence-transformers/distiluse-base-multilingual-cased-v1\n- sentence-transformers/distiluse-base-multilingual-cased-v2\n- sentence-transformers/distiluse-base-multilingual-cased\n- sentence-transformers/facebook-dpr-ctx_encoder-multiset-base\n- sentence-transformers/facebook-dpr-ctx_encoder-single-nq-base\n- sentence-transformers/facebook-dpr-question_encoder-multiset-base\n- sentence-transformers/facebook-dpr-question_encoder-single-nq-base\n- sentence-transformers/gtr-t5-large\n- sentence-transformers/gtr-t5-xl\n- sentence-transformers/gtr-t5-xxl\n- sentence-transformers/msmarco-MiniLM-L-12-v3\n- sentence-transformers/msmarco-MiniLM-L-6-v3\n- sentence-transformers/msmarco-MiniLM-L12-cos-v5\n- sentence-transformers/msmarco-MiniLM-L6-cos-v5\n- sentence-transformers/msmarco-bert-base-dot-v5\n- sentence-transformers/msmarco-bert-co-condensor\n- sentence-transformers/msmarco-distilbert-base-dot-prod-v3\n- sentence-transformers/msmarco-distilbert-base-tas-b\n- sentence-transformers/msmarco-distilbert-base-v2\n- sentence-transformers/msmarco-distilbert-base-v3\n- sentence-transformers/msmarco-distilbert-base-v4\n- sentence-transformers/msmarco-distilbert-cos-v5\n- sentence-transformers/msmarco-distilbert-dot-v5\n- sentence-transformers/msmarco-distilbert-multilingual-en-de-v2-tmp-lng-aligned\n- sentence-transformers/msmarco-distilbert-multilingual-en-de-v2-tmp-trained-scratch\n- sentence-transformers/msmarco-distilroberta-base-v2\n- sentence-transformers/msmarco-roberta-base-ance-firstp\n- sentence-transformers/msmarco-roberta-base-v2\n- sentence-transformers/msmarco-roberta-base-v3\n- sentence-transformers/multi-qa-MiniLM-L6-cos-v1\n- sentence-transformers/nli-mpnet-base-v2\n- sentence-transformers/nli-roberta-base-v2\n- sentence-transformers/nq-distilbert-base-v1\n- sentence-transformers/paraphrase-MiniLM-L12-v2\n- sentence-transformers/paraphrase-MiniLM-L3-v2\n- sentence-transformers/paraphrase-MiniLM-L6-v2\n- sentence-transformers/paraphrase-TinyBERT-L6-v2\n- sentence-transformers/paraphrase-albert-base-v2\n- sentence-transformers/paraphrase-albert-small-v2\n- sentence-transformers/paraphrase-distilroberta-base-v1\n- sentence-transformers/paraphrase-distilroberta-base-v2\n- sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2\n- sentence-transformers/paraphrase-multilingual-mpnet-base-v2\n- sentence-transformers/paraphrase-xlm-r-multilingual-v1\n- sentence-transformers/quora-distilbert-base\n- sentence-transformers/quora-distilbert-multilingual\n- sentence-transformers/sentence-t5-base\n- sentence-transformers/sentence-t5-large\n- sentence-transformers/sentence-t5-xxl\n- sentence-transformers/sentence-t5-xl\n- sentence-transformers/stsb-distilroberta-base-v2\n- sentence-transformers/stsb-mpnet-base-v2\n- sentence-transformers/stsb-roberta-base-v2\n- sentence-transformers/stsb-xlm-r-multilingual\n- sentence-transformers/xlm-r-distilroberta-base-paraphrase-v1\n- sentence-transformers/clip-ViT-L-14\n- sentence-transformers/clip-ViT-B-16\n- sentence-transformers/use-cmlm-multilingual\n- sentence-transformers/all-MiniLM-L12-v1\n```\n\n----------------------------------------\n\nTITLE: Installing FiftyOne Package in Python\nDESCRIPTION: Command to install the FiftyOne package using pip in a Python environment.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fiftyone\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Type in TypeScript\nDESCRIPTION: Returns the type of the full-text query. This method is part of the FullTextQuery interface implementation and provides the specific query type for MultiMatchQuery instances.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MultiMatchQuery.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nqueryType(): FullTextQueryType\n```\n\n----------------------------------------\n\nTITLE: Defining Rename Property in ColumnAlteration Interface\nDESCRIPTION: Optional string property for specifying a new column name. Must be unique among all column names in the table.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/ColumnAlteration.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional rename: string;\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for MakeArrowTableOptions in TypeScript\nDESCRIPTION: Constructor for the MakeArrowTableOptions class that allows initializing the object with partial values. It accepts an optional parameter containing properties to set on the new instance.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/classes/MakeArrowTableOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **new MakeArrowTableOptions**(`values?`)\n```\n\n----------------------------------------\n\nTITLE: Version Management Operations\nDESCRIPTION: Demonstrates version checkout and listing capabilities.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.checkout_latest()\nawait async_table.list_versions()\n```\n\n----------------------------------------\n\nTITLE: Setting dictionaryEncodeStrings Property in TypeScript\nDESCRIPTION: Property to control dictionary encoding of string columns. When set to true, string columns will be encoded with dictionary encoding. This is useful if string columns tend to repeat the same values often.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndictionaryEncodeStrings: boolean = false;\n```\n\n----------------------------------------\n\nTITLE: Converting Function to Metadata in TypeScript\nDESCRIPTION: Method to convert an embedding function configuration to metadata record.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionToMetadata(conf): Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum K-means Iterations\nDESCRIPTION: Optional parameter to limit the number of k-means training iterations. Default is 50 iterations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/HnswPqOptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxIterations: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring storage options with Python\nDESCRIPTION: Examples of passing storage options when connecting to cloud storage using Python's sync and async APIs.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"s3://bucket/path\",\n    storage_options={\"timeout\": \"60s\"}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nasync_db = await lancedb.connect_async(\n    \"s3://bucket/path\",\n    storage_options={\"timeout\": \"60s\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Release Process Flow Diagram\nDESCRIPTION: ASCII diagram showing the automated release workflow using GitHub actions, illustrating how release commits trigger various package publishing processes across different platforms.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/release_process.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ┌─────────────────────┐\n  │Create Release Commit│\n  └─┬───────────────────┘\n    │                           ┌────────────┐ ┌──►Python GH Release\n    ├──►(tag) python-vX.Y.Z ───►│PyPI Publish├─┤\n    │                           └────────────┘ └──►Python Wheels\n    │\n    │                           ┌───────────┐\n    └──►(tag) vX.Y.Z ───┬──────►│NPM Publish├──┬──►Rust/Node GH Release\n                        │       └───────────┘  │\n                        │                      └──►NPM Packages\n                        │       ┌─────────────┐\n                        ├──────►│Cargo Publish├───►Cargo Release\n                        │       └─────────────┘\n                        │       ┌─────────────┐\n                        └──────►│Maven Publish├───►Java Maven Repo Release\n                                └─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining CreateReturnType Generic Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a generic type alias named CreateReturnType. It uses a conditional type to determine the return type based on whether the type parameter T extends object. If T extends object, it returns Promise<T>, otherwise it returns T.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/type-aliases/CreateReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateReturnType<T>: T extends object ? Promise<T> : T;\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Name in TypeScript\nDESCRIPTION: Retrieves the name of the table as a string property.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Table.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget abstract name(): string\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting timeout with environment variables\nDESCRIPTION: Example of setting the timeout storage option using an environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport TIMEOUT=60s\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm, yarn, or pnpm\nDESCRIPTION: Commands to start the development server using different package managers. This will launch the application on localhost:3000 for local testing and development.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_website_chatbot.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for LanceDB Documentation\nDESCRIPTION: This snippet lists the exact versions of Python packages needed to generate LanceDB documentation. It includes MkDocs, various MkDocs plugins, and additional dependencies for rendering and styling the documentation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nmkdocs==1.5.3\nmkdocs-jupyter==0.24.1\nmkdocs-material==9.5.3\nmkdocstrings[python]==0.25.2\ngriffe\nmkdocs-render-swagger-plugin\npydantic\n```\n\n----------------------------------------\n\nTITLE: Including OpenAPI Specification File\nDESCRIPTION: YAML directive for including an external OpenAPI specification file located at a relative path\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/cloud/rest.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n!!swagger ../../openapi.yml!!\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Iterations for IVF kmeans\nDESCRIPTION: Configures the maximum number of iterations for training the IVF kmeans algorithm. Default value is 50. Higher values may improve index quality but with diminishing returns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IvfPqOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxIterations: number;\n```\n\n----------------------------------------\n\nTITLE: Vector Search with IVF_PQ Index in TypeScript (vectordb - deprecated)\nDESCRIPTION: Demonstrates vector similarity search using a pre-built IVF_PQ index with the deprecated vectordb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/ann_indexes.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/ann_indexes.ts:search1\"\n```\n\n----------------------------------------\n\nTITLE: Constructing RecordBatchIterator in TypeScript\nDESCRIPTION: Creates a new instance of RecordBatchIterator. It optionally accepts a Promise that resolves to a RecordBatchIterator.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/RecordBatchIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RecordBatchIterator(promise?): RecordBatchIterator\n```\n\n----------------------------------------\n\nTITLE: Defining oldVersionsRemoved Property in RemovalStats Interface\nDESCRIPTION: Property definition for tracking the count of old versions removed during a cleanup operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RemovalStats.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noldVersionsRemoved: number;\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Data with wget\nDESCRIPTION: Downloads Rick and Morty quotes CSV file from S3 and displays first few lines\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!wget http://vectordb-recipes.s3.us-west-2.amazonaws.com/rick_and_morty_quotes.csv\n!head rick_and_morty_quotes.csv\n```\n\n----------------------------------------\n\nTITLE: Defining Limit Property in TableNamesOptions Interface\nDESCRIPTION: Optional numeric property that specifies the maximum number of table names to return in the results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TableNamesOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional limit: number;\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for LLM Operations\nDESCRIPTION: Sets the OpenAI API key as an environment variable for use with OpenAI's embedding and generation services.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/embedding_tuner.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"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\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3-compatible stores with TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates connecting LanceDB to S3-compatible stores using the @lancedb/lancedb TypeScript package. It specifies region and endpoint in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\n    \"s3://bucket/path\",\n    {\n        storageOptions: {\n            region: \"us-east-1\",\n            endpoint: \"http://minio:9000\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Preview Release\nDESCRIPTION: Command to install the preview version of LanceDB using pip package manager with additional index URL for latest features and bug fixes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --extra-index-url https://pypi.fury.io/lancedb/ lancedb\n```\n\n----------------------------------------\n\nTITLE: Configuring credentials and embedding model in secrets.toml\nDESCRIPTION: TOML configuration for specifying API keys, LanceDB credentials, and embedding model details in the secrets file.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[sources.rest_api]\napi_key = \"api_key\" # Enter the API key for the OMDb API\n\n[destination.lancedb]\nembedding_model_provider = \"sentence-transformers\"\nembedding_model = \"all-MiniLM-L6-v2\"\n[destination.lancedb.credentials]\nuri = \".lancedb\"\napi_key = \"api_key\" # API key to connect to LanceDB Cloud. Leave out if you are using LanceDB OSS.\nembedding_model_provider_api_key = \"embedding_model_provider_api_key\" # Not needed for providers that don't need authentication (ollama, sentence-transformers).\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB in TypeScript\nDESCRIPTION: Shows the installation process for LanceDB in TypeScript projects using npm, including notes on webpack configuration and Yarn usage.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @lancedb/lancedb\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = ({\nwebpack(config) {\n    config.externals.push({ '@lancedb/lancedb': '@lancedb/lancedb' })\n    return config;\n}\n})\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add apache-arrow\n```\n\n----------------------------------------\n\nTITLE: Formatting and Fixing Lints in LanceDB TypeScript\nDESCRIPTION: Shell command to format the code and fix linting issues in the LanceDB TypeScript project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint-fix\n```\n\n----------------------------------------\n\nTITLE: Development Setup for LanceDB JavaScript Library\nDESCRIPTION: Commands to build the project from source and run tests during development. This includes installing dependencies and building the project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Vercel Build Script for LanceDB Dynamic Import Fix\nDESCRIPTION: Package.json script modification to ensure Vercel can properly handle LanceDB's binary dependencies. This replaces dynamic imports with static imports specifically for the Linux x64 GNU binary.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/serverless_website_chatbot.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    ...\n    \"vercel-build\": \"sed -i 's/nativeLib = require(`@lancedb\\\\/vectordb-\\\\${currentTarget()}`);/nativeLib = require(`@lancedb\\\\/vectordb-linux-x64-gnu`);/' node_modules/vectordb/native.js && next build\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute the test suite after building the project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Updating Table Values Using SQL Expression - TypeScript\nDESCRIPTION: Shows how to update table values using SQL expressions in TypeScript\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nawait tbl.update({ valuesSql: { x: \"x + 1\" } })\n```\n\n----------------------------------------\n\nTITLE: Documenting numIndices Property in TypeScript\nDESCRIPTION: This snippet defines the optional numIndices property, which represents the number of parts the index is split into.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/IndexStatistics.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional numIndices: number;\n```\n\n----------------------------------------\n\nTITLE: Defining CompactionStats Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the CompactionStats interface. It includes filesAdded, filesRemoved, fragmentsAdded, and fragmentsRemoved, all of type number, representing various statistics of a compaction operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CompactionStats.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilesAdded: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfilesRemoved: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfragmentsAdded: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfragmentsRemoved: number;\n```\n\n----------------------------------------\n\nTITLE: Development Commands for LanceDB Python\nDESCRIPTION: Common development commands using Make for building, formatting, testing, and type checking the package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake develop\nmake format\nmake test\nmake doctest\nmake typecheck\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Read and Write Access\nDESCRIPTION: JSON policy that grants read and write access to a specific S3 bucket and prefix for use with LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n              \"s3:PutObject\",\n              \"s3:GetObject\",\n              \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<bucket>/<prefix>/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetBucketLocation\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<bucket>\",\n            \"Condition\": {\n                \"StringLike\": {\n                    \"s3:prefix\": [\n                        \"<prefix>/*\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring connectTimeout Property in TypeScript\nDESCRIPTION: This property sets the timeout for establishing a connection. It defaults to 120 seconds and can be overridden by the LANCE_CLIENT_CONNECT_TIMEOUT environment variable.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TimeoutConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional connectTimeout: number;\n```\n\n----------------------------------------\n\nTITLE: Defining WriteOptions Interface in TypeScript for LanceDB\nDESCRIPTION: This snippet defines the WriteOptions interface with an optional writeMode property of type WriteMode. It is used to specify write options when creating a Table in LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/WriteOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface WriteOptions {\n  writeMode?: WriteMode\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Storage with TypeScript (@lancedb/lancedb)\nDESCRIPTION: Demonstrates connecting LanceDB to Google Cloud Storage using the @lancedb/lancedb TypeScript package. It specifies the path to the service account JSON file in the storage options.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nconst db = await lancedb.connect(\n    \"gs://my-bucket/my-database\",\n    {\n        storageOptions: {\n            serviceAccount: \"path/to/service-account.json\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining License Header for LanceDB\nDESCRIPTION: Specifies the Apache 2.0 license and copyright notice for the LanceDB project source files\nSOURCE: https://github.com/lancedb/lancedb/blob/main/rust/license_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-FileCopyrightText: Copyright The LanceDB Authors\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB in Rust\nDESCRIPTION: Provides instructions for installing LanceDB in Rust projects using Cargo, including necessary system dependencies.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add lancedb\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew install protobuf\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y protobuf-compiler libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running all tests or specific test files and patterns.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n# Single file: table.test.ts\nnpm test -- table.test.ts\n# Single test: 'merge insert' in table.test.ts\nnpm test -- table.test.ts --testNamePattern=merge\\ insert\n```\n\n----------------------------------------\n\nTITLE: Referencing LanceDB MUSL Package\nDESCRIPTION: Package name reference for the MUSL-based Linux x64 binary distribution of LanceDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/linux-x64-musl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-linux-x64-musl\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for watsonx.ai Credentials\nDESCRIPTION: Shell commands to set environment variables for watsonx.ai API key and project ID, which are used if not passing credentials directly to the create method.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/ibm_watsonx_ai_embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport WATSONX_API_KEY=\"YOUR_WATSONX_API_KEY\"\nexport WATSONX_PROJECT_ID=\"YOUR_WATSONX_PROJECT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests in LanceDB TypeScript\nDESCRIPTION: Shell commands to run specific tests in the LanceDB TypeScript project, either a single file or a single test within a file.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Single file: table.test.ts\nnpm test -- table.test.ts\n# Single test: 'merge insert' in table.test.ts\nnpm test -- table.test.ts --testNamePattern=merge\\ insert\n```\n\n----------------------------------------\n\nTITLE: Development Build Commands\nDESCRIPTION: Commands for building the project from source and running tests during development.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Command to install pre-commit hooks for code formatting and basic checks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Defining Protected Inner Property in TypeScript\nDESCRIPTION: Declares a protected property 'inner' of type Query or Promise<Query>. This property is inherited from the QueryBase class.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected inner: Query | Promise<Query>;\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty LanceDB Table in Rust\nDESCRIPTION: Shows how to create an empty LanceDB table with a specified schema in Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n--8<-- \"rust/lancedb/examples/simple.rs:create_empty_table\"\n```\n\n----------------------------------------\n\nTITLE: Installing VoyageAI Package via pip\nDESCRIPTION: Command to install the VoyageAI package required for using VoyageAI embedding models with LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/default_embedding_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip\n```\n\n----------------------------------------\n\nTITLE: Defining QueryBase Class Properties in TypeScript\nDESCRIPTION: Defines the protected 'inner' property of the QueryBase class, which holds either a NativeQueryType or a Promise of NativeQueryType.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/QueryBase.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprotected inner: NativeQueryType | Promise<NativeQueryType>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Backoff Factor in TypeScript\nDESCRIPTION: Optional property that defines the exponential backoff factor between retries. Default value is 0.25 seconds, with wait time increasing exponentially with each retry.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RetryConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional backoffFactor: number;\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation of duckdb and lancedb packages using pip package manager\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/python/duckdb.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install duckdb lancedb\n```\n\n----------------------------------------\n\nTITLE: Defining OptimizeStats Interface in TypeScript\nDESCRIPTION: This code snippet defines the OptimizeStats interface with two properties: compaction and prune. The compaction property is of type CompactionStats, while the prune property is of type RemovalStats.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/OptimizeStats.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OptimizeStats {\n  compaction: CompactionStats;\n  prune: RemovalStats;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LanceDB Connection in TypeScript\nDESCRIPTION: Shows how to import and connect to LanceDB using either the newer @lancedb/lancedb package or the deprecated vectordb package in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lancedb from \"@lancedb/lancedb\";\nimport * as arrow from \"apache-arrow\";\n\nconst uri = \"data/sample-lancedb\";\nconst db = await lancedb.connect(uri);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"vectordb\");\nconst arrow = require(\"apache-arrow\");\n\nconst uri = \"data/sample-lancedb\";\nconst db = await lancedb.connect(uri);\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for LanceDB JavaScript Library\nDESCRIPTION: Command to generate TypeScript documentation using typedoc with markdown plugin, outputting to the docs directory.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx typedoc --plugin typedoc-plugin-markdown --out ../docs/src/javascript src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Starting Inference Server\nDESCRIPTION: Command to start the Inference server locally\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninference server start\n```\n\n----------------------------------------\n\nTITLE: LanceDB Package Name Reference\nDESCRIPTION: Package identifier for the macOS x86_64 (darwin) binary distribution of LanceDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/darwin-x64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-darwin-x64\n```\n\n----------------------------------------\n\nTITLE: LanceDB Package Name Reference\nDESCRIPTION: Package name reference showing the npm scoped package name for the ARM64 macOS binary distribution of LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/darwin-arm64/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-darwin-arm64\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB in Python\nDESCRIPTION: Installs the LanceDB Python package using pip in a Jupyter notebook environment.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/tables_guide.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install lancedb -qq\n```\n\n----------------------------------------\n\nTITLE: Linting LanceDB TypeScript Code\nDESCRIPTION: Shell command to run linting on the LanceDB TypeScript codebase.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Linting Commands\nDESCRIPTION: Commands for running linters and fixing lint issues.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\nnpm run lint-fix\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for LanceDB Project\nDESCRIPTION: A requirements file listing the necessary Python packages for the LanceDB project, including data processing libraries, code quality tools, and ML frameworks. The file specifies PyTorch with CUDA 11.8 support via a custom index URL.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/diffusiondb/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndatasets\nPillow\nlancedb\nisort\nblack\ntransformers\n--index-url https://download.pytorch.org/whl/cu118\ntorch\ntorchvision\n```\n\n----------------------------------------\n\nTITLE: Defining CompactionMetrics Interface in TypeScript\nDESCRIPTION: This code snippet defines the CompactionMetrics interface with four properties: fragmentsRemoved, fragmentsAdded, filesRemoved, and filesAdded. Each property is of type number and represents different aspects of the compaction process.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/CompactionMetrics.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CompactionMetrics {\n  fragmentsRemoved: number;\n  fragmentsAdded: number;\n  filesRemoved: number;\n  filesAdded: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modified Column After Restore\nDESCRIPTION: Adds a new column with different calculation after restoring previous version.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/notebooks/reproducibility_async.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nawait async_table.add_columns({\"new_id\": \"id + 10\"})\n```\n\n----------------------------------------\n\nTITLE: Installing dlt with LanceDB extras\nDESCRIPTION: Command to install dlt library with LanceDB-specific dependencies using pip.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install dlt[lancedb]\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Links for AI Agent Projects\nDESCRIPTION: Markdown link definitions for various resources related to the AI agent projects, including GitHub repositories, Colab notebooks, and blog posts.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/python_examples/aiagent.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[hullucination_github]: https://github.com/lancedb/vectordb-recipes/blob/main/examples/reducing_hallucinations_ai_agents\n[hullucination_colab]: https://colab.research.google.com/github/lancedb/vectordb-recipes/blob/main/examples/reducing_hallucinations_ai_agents/main.ipynb\n[hullucination_python]: https://github.com/lancedb/vectordb-recipes/blob/main/examples/reducing_hallucinations_ai_agents/main.py\n[hullucination_ghost]: https://blog.lancedb.com/how-to-reduce-hallucinations-from-llm-powered-agents-using-long-term-memory-72f262c3cc1f/\n\n[trend_github]: https://github.com/lancedb/vectordb-recipes/blob/main/examples/AI-Trends-with-CrewAI\n[trend_colab]: https://colab.research.google.com/github/lancedb/vectordb-recipes/blob/main/examples/AI-Trends-with-CrewAI/CrewAI_AI_Trends.ipynb \n[trend_ghost]: https://blog.lancedb.com/track-ai-trends-crewai-agents-rag/\n\n[superagent_github]: https://github.com/lancedb/vectordb-recipes/blob/main/examples/SuperAgent_Autogen\n[superagent_colab]: https://colab.research.google.com/github/lancedb/vectordb-recipes/blob/main/examples/SuperAgent_Autogen/main.ipynb\n```\n\n----------------------------------------\n\nTITLE: Getting Registry Length in TypeScript\nDESCRIPTION: Method to get the count of registered embedding functions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/EmbeddingFunctionRegistry.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlength(): number\n```\n\n----------------------------------------\n\nTITLE: Defining bytesRemoved Property in RemovalStats Interface\nDESCRIPTION: Property definition for tracking the number of bytes removed during a cleanup operation.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/RemovalStats.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbytesRemoved: number;\n```\n\n----------------------------------------\n\nTITLE: Installing IBM watsonx.ai Library for Python\nDESCRIPTION: Command to install the optional IBM watsonx.ai library dependency using pip.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/ibm_watsonx_ai_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install ibm-watsonx-ai\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control with Robots.txt\nDESCRIPTION: Basic robots.txt configuration that sets access rules for all web crawlers using the universal User-agent selector.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: LanceDB Projects Table in Markdown\nDESCRIPTION: Markdown table displaying different LanceDB build-from-scratch projects with their descriptions and associated GitHub/Colab links.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/python_examples/build_from_scratch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Build From Scratch**                     | **Description**                                                                                              | **Links**                                                                                                                                                                                                                                                                                                                                                                                                                |\n|:-------------------------------------------|:-------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Build RAG from Scratch🚀💻**             | 📝 Create a **Retrieval-Augmented Generation** (RAG) model from scratch using LanceDB.                       | [![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/lancedb/vectordb-recipes/tree/main/tutorials/RAG-from-Scratch)<br>[![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)]()                                                                                                                                  |\n| **Local RAG from Scratch with Llama3🔥💡** | 🐫 Build a local RAG model using **Llama3** and **LanceDB** for fast and efficient text generation.          | [![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/lancedb/vectordb-recipes/tree/main/tutorials/Local-RAG-from-Scratch)<br>[![Python](https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54)](https://github.com/lancedb/vectordb-recipes/blob/main/tutorials/Local-RAG-from-Scratch/rag.py)    |\n| **Multi-Head RAG from Scratch📚💻**        | 🤯 Develop a **Multi-Head RAG model** from scratch, enabling generation of text based on multiple documents. | [![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/lancedb/vectordb-recipes/tree/main/tutorials/Multi-Head-RAG-from-Scratch)<br>[![Python](https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54)](https://github.com/lancedb/vectordb-recipes/tree/main/tutorials/Multi-Head-RAG-from-Scratch) |\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for LanceDB\nDESCRIPTION: Commands to set up pre-commit hooks for code formatting and basic checks.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake develop\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running LanceDB JavaScript Library Tests\nDESCRIPTION: Command to execute the test suite after building the project.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Make Commands\nDESCRIPTION: Command to display all available make commands for LanceDB Python development.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake help\n```\n\n----------------------------------------\n\nTITLE: Number of Dimensions Method\nDESCRIPTION: Method that returns the number of dimensions of the embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nndims(): undefined | number\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Embeddings in TypeScript (Deprecated)\nDESCRIPTION: Shows how to create a table with auto-embedding using the deprecated vectordb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await lancedb.connect(\"data/sample-lancedb\");\nconst data = [\n    { text: \"pepperoni\"},\n    { text: \"pineapple\"}\n]\n\nconst table = await db.createTable(\"vectors\", data, embedding)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for LanceDB TypeScript\nDESCRIPTION: Shell command to install pre-commit hooks, ensuring code is formatted correctly and passes basic checks before committing.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Printing FiftyOne Brain Configuration in Python\nDESCRIPTION: Python code to print the current brain configuration in FiftyOne, useful for verifying custom settings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/voxel51.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport fiftyone.brain as fob\n# Print your current brain config\nprint(fob.brain_config)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for Bedrock\nDESCRIPTION: Commands to configure AWS credentials using awscli, including setting up the session token.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/aws_bedrock_embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws configure\naws configure set aws_session_token \"<your_session_token>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Data Type for LanceDB NodeJS SDK in TypeScript\nDESCRIPTION: This code snippet defines the Data type as a union of an array of Records with string keys and unknown values, or a TableLike object. This type is used to specify the acceptable data formats for the LanceDB NodeJS SDK.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/Data.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Data: Record<string, unknown>[] | TableLike;\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for LanceDB TypeScript\nDESCRIPTION: Shell commands to set up the initial development environment by installing project dependencies.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Displaying AI Agent Projects Table in Markdown\nDESCRIPTION: A markdown table showcasing three AI agent projects with their descriptions and associated links. The table includes projects for reducing hallucinations, AI trends searching with CrewAI, and SuperAgent Autogen integration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/python_examples/aiagent.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **AI Agents** | **Description** | **Links** |\n|:--------------|:----------------|:----------|\n| **AI Agents: Reducing Hallucinationt📊** | 🤖💡 **Reduce AI hallucinations** using Critique-Based Contexting! Learn by Simplifying and Automating tedious workflows by going through fitness trainer agent example.💪 | [![Github](../../assets/github.svg)][hullucination_github] <br>[![Open In Collab](../../assets/colab.svg)][hullucination_colab] <br>[![Python](../../assets/python.svg)][hullucination_python] <br>[![Ghost](../../assets/ghost.svg)][hullucination_ghost] |                                                                                                                                                                                                                                                \n| **AI Trends Searcher: CrewAI🔍️** | 🔍️ Learn about **CrewAI Agents** ! Utilize the features of CrewAI - Role-based Agents, Task Management, and Inter-agent Delegation ! Make AI agents work together to do tricky stuff 😺| [![Github](../../assets/github.svg)][trend_github] <br>[![Open In Collab](../../assets/colab.svg)][trend_colab] <br>[![Ghost](../../assets/ghost.svg)][trend_ghost] |                                                                                                                                                                                                                                                \n| **SuperAgent Autogen🤖** | 💻 AI interactions with the Super Agent! Integrating **Autogen**, **LanceDB**, **LangChain**, **LiteLLM**, and **Ollama** to create AI agent that excels in understanding and processing complex queries.🤖 | [![Github](../../assets/github.svg)][superagent_github] <br>[![Open In Collab](../../assets/colab.svg)][superagent_colab] |\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration - LanceDB Windows Binary\nDESCRIPTION: NPM package name specification for the Windows x64 MSVC build of LanceDB.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/win32-x64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-win32-x64-msvc\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies\nDESCRIPTION: Commands to install the required dependencies for the project, including the sentence-transformers library for embedding.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/integrations/dlt.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install sentence-transformers\n```\n\n----------------------------------------\n\nTITLE: Legacy Vector Search Implementation\nDESCRIPTION: Deprecated implementation using the vectordb package in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/search.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/search_legacy.ts:import\"\n\n--8<-- \"docs/src/search_legacy.ts:search1\"\n```\n\n----------------------------------------\n\nTITLE: Generating TypeDoc Documentation\nDESCRIPTION: Command to generate API documentation using TypeDoc with markdown plugin output.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/node/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx typedoc --plugin typedoc-plugin-markdown --out ../docs/src/javascript src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB JavaScript SDK via npm\nDESCRIPTION: Command to install the LanceDB JavaScript library using npm package manager. This will download the appropriate native library for the user's platform.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @lancedb/lancedb\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage with LanceDB in Python (Sync API)\nDESCRIPTION: Example of connecting to an Azure Blob Storage container using LanceDB's synchronous Python API with explicit storage account credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"az://my-container/my-database\",\n    storage_options={\n        account_name: \"some-account\",\n        account_key: \"some-key\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Text-Based Search with OpenClip\nDESCRIPTION: Demonstrates text-based search functionality using both default and custom vector columns in LanceDB with OpenClip embeddings.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/multimodal_embedding_functions/openclip_embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# text search\nactual = table.search(\"man's best friend\").limit(1).to_pydantic(Images)[0]\nprint(actual.label) # prints \"dog\"\n\nfrombytes = (\n    table.search(\"man's best friend\", vector_column_name=\"vec_from_bytes\")\n    .limit(1)\n    .to_pydantic(Images)[0]\n)\nprint(frombytes.label)\n```\n\n----------------------------------------\n\nTITLE: Resolve Variables Protected Method\nDESCRIPTION: Protected method to apply variables to the configuration object.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/namespaces/embedding/classes/TextEmbeddingFunction.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nprotected resolveVariables(config): Partial<M>\n```\n\n----------------------------------------\n\nTITLE: Verifying AWS Credentials\nDESCRIPTION: Command to verify AWS credentials are properly configured by checking caller identity.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/available_embedding_models/text_embedding_functions/aws_bedrock_embedding.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naws sts get-caller-identity\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 Express with Python Sync API\nDESCRIPTION: Demonstrates how to connect LanceDB to an S3 Express endpoint using the Python synchronous API. It includes the s3_express option and uses a bucket name with the required suffix.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"s3://my-bucket--use1-az4--x-s3/path\",\n    storage_options={\n        \"region\": \"us-east-1\",\n        \"s3_express\": \"true\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 Express with TypeScript (vectordb deprecated)\nDESCRIPTION: Shows how to connect LanceDB to an S3 Express endpoint using the deprecated vectordb TypeScript package. It specifies the s3Express option and uses a bucket name with the required suffix.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\n    \"s3://my-bucket--use1-az4--x-s3/path\",\n    {\n        storageOptions: {\n            region: \"us-east-1\",\n            s3Express: \"true\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in LanceDB (Rust)\nDESCRIPTION: Demonstrates how to drop (remove) a table in LanceDB using Rust.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/basic.md#2025-04-21_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nconn.drop_table(\"my_table\").await?\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere Package\nDESCRIPTION: Command to install the required Cohere package via pip\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/reranking/cohere.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install cohere\n```\n\n----------------------------------------\n\nTITLE: Constructing HNSW Index in LanceDB with Python\nDESCRIPTION: Creates an HNSW index for vector similarity search using LanceDB. Demonstrates generating sample vector data, creating a table, and building the index with IVF_HNSW_SQ configuration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/concepts/index_hnsw.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\nimport numpy as np\nuri = \"/tmp/lancedb\"\ndb = lancedb.connect(uri)\n\n# Create 10,000 sample vectors\ndata = [\n    {\"vector\": row, \"item\": f\"item {i}\"}\n    for i, row in enumerate(np.random.random((10_000, 1536)).astype('float32'))\n]\n\n# Add the vectors to a table\ntbl = db.create_table(\"my_vectors\", data=data)\n\n# Create and train the HNSW index for a 1536-dimensional vector\n# Make sure you have enough data in the table for an effective training step\ntbl.create_index(index_type=IVF_HNSW_SQ)\n\n```\n\n----------------------------------------\n\nTITLE: Installing the LanceDB JavaScript package\nDESCRIPTION: Command to install the vectordb NPM package which provides LanceDB's JavaScript API for vector database functionality.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/youtube_transcript_bot_with_nodejs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vectordb\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Filter Method in TypeScript\nDESCRIPTION: Defines the deprecated filter method which applies a filter statement to the query. It is recommended to use the 'where' method instead.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/Query.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfilter(predicate): this\n```\n\n----------------------------------------\n\nTITLE: Deprecated Data Storage Version Property in TypeScript\nDESCRIPTION: This property specifies the version of the data storage format to use. It is deprecated and should be replaced with 'new_table_data_storage_version' in storageOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional dataStorageVersion: string;\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB with npm (JavaScript)\nDESCRIPTION: Command to install the LanceDB JavaScript client library using npm package manager.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @lancedb/lancedb\n```\n\n----------------------------------------\n\nTITLE: Documenting ColumnAlteration Properties in TypeScript\nDESCRIPTION: This snippet shows the JSDoc comments for the ColumnAlteration interface properties. It describes the purpose of each property and provides additional context for their usage.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/ColumnAlteration.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * The path to the column to alter. This is a dot-separated path to the column.\n * If it is a top-level column then it is just the name of the column. If it is\n * a nested column then it is the path to the column, e.g. \"a.b.c\" for a column\n * `c` nested inside a column `b` nested inside a column `a`.\n */\npath: string;\n\n/**\n * Set the new nullability. Note that a nullable column cannot be made non-nullable.\n */\nnullable?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure Blob Storage with LanceDB in TypeScript (deprecated vectordb)\nDESCRIPTION: Example of connecting to an Azure Blob Storage container using the deprecated TypeScript LanceDB package with explicit storage account credentials.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst lancedb = require(\"lancedb\");\nconst db = await lancedb.connect(\n    \"az://my-container/my-database\",\n    {\n        storageOptions: {\n            accountName: \"some-account\",\n            accountKey: \"some-key\",\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining StartAfter Property in TableNamesOptions Interface\nDESCRIPTION: Optional string property used for pagination. When specified, only returns table names that lexicographically follow the provided value. Can be combined with limit for implementing paginated results.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/TableNamesOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional startAfter: string;\n```\n\n----------------------------------------\n\nTITLE: CleanupStats Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for CleanupStats, which tracks the results of a cleanup operation in LanceDB. It includes properties for counting bytes removed and old table versions removed.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/CleanupStats.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The number of bytes removed from disk.\n */\nbytesRemoved: number;\n\n/**\n * The number of old table versions removed.\n */\noldVersions: number;\n```\n\n----------------------------------------\n\nTITLE: Basic LanceDB Usage Example\nDESCRIPTION: Demonstrates how to connect to a LanceDB dataset, open a table, and perform a vector search operation with limit and conversion to list.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect('<PATH_TO_LANCEDB_DATASET>')\ntable = db.open_table('my_table')\nresults = table.search([0.1, 0.3]).limit(20).to_list()\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Constructing a BoostQuery in TypeScript\nDESCRIPTION: Creates an instance of BoostQuery. The boost returns documents that match the positive query, but penalizes those that match the negative query. The penalty is controlled by the negativeBoost parameter.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/BoostQuery.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew BoostQuery(\n   positive,\n   negative,\n   options?): BoostQuery\n```\n\n----------------------------------------\n\nTITLE: Defining Apache 2.0 License Header with SPDX Identifiers\nDESCRIPTION: Standard SPDX license and copyright header declaring Apache 2.0 license and copyright ownership by LanceDB Authors.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/python/license_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# SPDX-License-Identifier: Apache-2.0\n# SPDX-FileCopyrightText: Copyright The LanceDB Authors\n```\n\n----------------------------------------\n\nTITLE: Connecting to S3 with DynamoDB Commit Store in Python (Sync API)\nDESCRIPTION: Demonstrates how to connect to an S3 bucket using LanceDB's synchronous Python API with a DynamoDB commit store for concurrent writes.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/storage.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport lancedb\ndb = lancedb.connect(\n    \"s3+ddb://bucket/path?ddbTableName=my-dynamodb-table\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated V2 Manifest Paths Property in TypeScript\nDESCRIPTION: This property enables the use of new V2 manifest paths for more efficient dataset opening. It is deprecated and should be replaced with 'new_table_enable_v2_manifest_paths' in storageOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/interfaces/CreateTableOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional enableV2ManifestPaths: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining DataLike Type Alias in TypeScript\nDESCRIPTION: A type alias definition that allows data to be either a Data type or a generic object type. This provides flexibility in handling different data formats in LanceDB operations.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/type-aliases/DataLike.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DataLike: Data | object;\n```\n\n----------------------------------------\n\nTITLE: Constructing MakeArrowTableOptions in TypeScript\nDESCRIPTION: Constructor for the MakeArrowTableOptions class. It accepts an optional parameter of type Partial<MakeArrowTableOptions> and returns a new instance of MakeArrowTableOptions.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MakeArrowTableOptions(values?): MakeArrowTableOptions\n```\n\n----------------------------------------\n\nTITLE: Searching with Text in TypeScript (Deprecated)\nDESCRIPTION: Shows how to search using text with the deprecated vectordb TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/embeddings/embedding_functions.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await table\n    .search(\"What's the best pizza topping?\")\n    .limit(10)\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Implementing withMiddleware Method for LanceDB Connection in TypeScript\nDESCRIPTION: Defines the withMiddleware method to add HTTP middleware to the connection, primarily for remote connections.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/javascript/interfaces/Connection.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **withMiddleware**(`middleware`): [`Connection`](Connection.md)\n```\n\n----------------------------------------\n\nTITLE: Creating Empty LanceDB Table in TypeScript (Deprecated)\nDESCRIPTION: Shows how to create an empty LanceDB table using the deprecated vectordb package in TypeScript.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/guides/tables.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n--8<-- \"docs/src/basic_legacy.ts:create_empty_table\"\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB Dependencies\nDESCRIPTION: Commands to install LanceDB and its dependency tantivy\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/examples/image_embeddings_roboflow.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install lancedb\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install tantivy\n```\n\n----------------------------------------\n\nTITLE: Installing LanceDB with pip (Python)\nDESCRIPTION: Command to install the LanceDB Python client library using pip package manager.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install lancedb\n```\n\n----------------------------------------\n\nTITLE: Building LanceDB TypeScript Package\nDESCRIPTION: Shell commands to install dependencies and build the LanceDB TypeScript package.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/_media/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: LanceDB Package Name Reference\nDESCRIPTION: Package identifier for the Windows ARM64 MSVC build of LanceDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/win32-arm64-msvc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-win32-arm64-msvc\n```\n\n----------------------------------------\n\nTITLE: LanceDB Package Name Reference\nDESCRIPTION: Package identifier for the ARM64 GNU Linux binary distribution of LanceDB\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/linux-arm64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-linux-arm64-gnu\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Package name references for the LanceDB Linux x64 GNU binary distribution\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/npm/linux-x64-gnu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb-linux-x64-gnu\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@lancedb/lancedb\n```\n\n----------------------------------------\n\nTITLE: Defining embeddingFunction Property in TypeScript\nDESCRIPTION: Optional property for specifying the embedding function configuration.\nSOURCE: https://github.com/lancedb/lancedb/blob/main/docs/src/js/classes/MakeArrowTableOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional embeddingFunction: EmbeddingFunctionConfig;\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header\nDESCRIPTION: Standard SPDX license identifier header indicating Apache 2.0 license and copyright ownership by LanceDB Authors\nSOURCE: https://github.com/lancedb/lancedb/blob/main/java/license_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\n * SPDX-License-Identifier: Apache-2.0\n * SPDX-FileCopyrightText: Copyright The LanceDB Authors\n */\n```\n\n----------------------------------------\n\nTITLE: License Header Definition\nDESCRIPTION: Standard SPDX license identifier and copyright notice for the LanceDB project source files\nSOURCE: https://github.com/lancedb/lancedb/blob/main/nodejs/license_header.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-FileCopyrightText: Copyright The LanceDB Authors\n```"
  }
]